import{S as gqt,i as hqt,s as pqt,e as a,k as l,w as F,t as o,M as uqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _qt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as gJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bqt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,pL,yf,Oe,We,Ei,Sn,uL,Rn,Pn,_L,Ci,Bn,bL,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),pL=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),uL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),_L=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),bL=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var zk=s(p);m=r(zk,"NewModelConfig"),zk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Wk=s(Fi);Lf=r(Wk,"model_type"),Wk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Qk=s(Ti);Mi=r(Qk,'"new-model"'),Qk.forEach(t),pL=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),uL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Hk=s(Rn);Pn=r(Hk,"PreTrainedModel"),Hk.forEach(t),_L=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),bL=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Uk=s(wi);xf=r(Uk,"NewModelConfig"),Uk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,pL),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,uL),e(Oe,Rn),e(Rn,Pn),e(Oe,_L),e(Oe,Ci),e(Ci,Bn),e(Oe,bL),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Mqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Cqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,pL,yf,Oe,We,Ei,Sn,uL,Rn,Pn,_L,Ci,Bn,bL,wi,xf,ya,Qe,Ae,zk,Ai,Wk,Qk,Co,xa,Hk,$f,Uk,gze,KDe,Li,kf,Xre,vL,hze,zre,pze,ZDe,In,uze,Wre,_ze,bze,Qre,vze,Fze,eGe,FL,oGe,Jk,Tze,rGe,Sf,tGe,yi,Rf,Hre,TL,Mze,Ure,Eze,aGe,wo,ML,Cze,EL,wze,Yk,Aze,Lze,yze,CL,xze,Jre,$ze,kze,Sze,wr,wL,Rze,Yre,Pze,Bze,xi,Ize,Kre,Nze,qze,Zre,jze,Dze,Gze,A,Pf,ete,Oze,Vze,Kk,Xze,zze,Wze,Bf,ote,Qze,Hze,Zk,Uze,Jze,Yze,If,rte,Kze,Zze,eS,eWe,oWe,rWe,Nf,tte,tWe,aWe,oS,nWe,sWe,lWe,qf,ate,iWe,dWe,rS,cWe,fWe,mWe,jf,nte,gWe,hWe,tS,pWe,uWe,_We,Df,ste,bWe,vWe,aS,FWe,TWe,MWe,Gf,lte,EWe,CWe,nS,wWe,AWe,LWe,Of,ite,yWe,xWe,sS,$We,kWe,SWe,Vf,dte,RWe,PWe,lS,BWe,IWe,NWe,Xf,cte,qWe,jWe,iS,DWe,GWe,OWe,zf,fte,VWe,XWe,dS,zWe,WWe,QWe,Wf,mte,HWe,UWe,cS,JWe,YWe,KWe,Qf,gte,ZWe,eQe,fS,oQe,rQe,tQe,Hf,hte,aQe,nQe,mS,sQe,lQe,iQe,Uf,pte,dQe,cQe,gS,fQe,mQe,gQe,Jf,ute,hQe,pQe,hS,uQe,_Qe,bQe,Yf,_te,vQe,FQe,pS,TQe,MQe,EQe,Kf,bte,CQe,wQe,uS,AQe,LQe,yQe,Zf,vte,xQe,$Qe,_S,kQe,SQe,RQe,em,Fte,PQe,BQe,bS,IQe,NQe,qQe,om,Tte,jQe,DQe,vS,GQe,OQe,VQe,rm,Mte,XQe,zQe,FS,WQe,QQe,HQe,tm,Ete,UQe,JQe,TS,YQe,KQe,ZQe,am,Cte,eHe,oHe,MS,rHe,tHe,aHe,nm,wte,nHe,sHe,ES,lHe,iHe,dHe,sm,Ate,cHe,fHe,CS,mHe,gHe,hHe,lm,Lte,pHe,uHe,wS,_He,bHe,vHe,im,yte,FHe,THe,AS,MHe,EHe,CHe,dm,xte,wHe,AHe,LS,LHe,yHe,xHe,cm,$te,$He,kHe,yS,SHe,RHe,PHe,fm,kte,BHe,IHe,xS,NHe,qHe,jHe,mm,Ste,DHe,GHe,$S,OHe,VHe,XHe,gm,Rte,zHe,WHe,kS,QHe,HHe,UHe,hm,Pte,JHe,YHe,SS,KHe,ZHe,eUe,pm,Bte,oUe,rUe,RS,tUe,aUe,nUe,um,Ite,sUe,lUe,PS,iUe,dUe,cUe,_m,Nte,fUe,mUe,BS,gUe,hUe,pUe,bm,qte,uUe,_Ue,IS,bUe,vUe,FUe,vm,jte,TUe,MUe,NS,EUe,CUe,wUe,Fm,Dte,AUe,LUe,qS,yUe,xUe,$Ue,Tm,Gte,kUe,SUe,jS,RUe,PUe,BUe,Mm,Ote,IUe,NUe,DS,qUe,jUe,DUe,Em,Vte,GUe,OUe,GS,VUe,XUe,zUe,Cm,Xte,WUe,QUe,OS,HUe,UUe,JUe,wm,zte,YUe,KUe,VS,ZUe,eJe,oJe,Am,Wte,rJe,tJe,XS,aJe,nJe,sJe,Lm,Qte,lJe,iJe,zS,dJe,cJe,fJe,ym,Hte,mJe,gJe,WS,hJe,pJe,uJe,xm,Ute,_Je,bJe,QS,vJe,FJe,TJe,$m,Jte,MJe,EJe,HS,CJe,wJe,AJe,km,Yte,LJe,yJe,US,xJe,$Je,kJe,Sm,Kte,SJe,RJe,JS,PJe,BJe,IJe,Rm,Zte,NJe,qJe,YS,jJe,DJe,GJe,Pm,eae,OJe,VJe,KS,XJe,zJe,WJe,Bm,oae,QJe,HJe,ZS,UJe,JJe,YJe,Im,rae,KJe,ZJe,eR,eYe,oYe,rYe,Nm,tae,tYe,aYe,oR,nYe,sYe,lYe,qm,aae,iYe,dYe,rR,cYe,fYe,mYe,jm,nae,gYe,hYe,tR,pYe,uYe,_Ye,Dm,sae,bYe,vYe,aR,FYe,TYe,MYe,Gm,lae,EYe,CYe,nR,wYe,AYe,LYe,Om,iae,yYe,xYe,sR,$Ye,kYe,SYe,Vm,dae,RYe,PYe,lR,BYe,IYe,NYe,Xm,cae,qYe,jYe,iR,DYe,GYe,OYe,zm,fae,VYe,XYe,dR,zYe,WYe,QYe,Wm,mae,HYe,UYe,cR,JYe,YYe,KYe,Qm,gae,ZYe,eKe,fR,oKe,rKe,tKe,Hm,hae,aKe,nKe,mR,sKe,lKe,iKe,Um,pae,dKe,cKe,gR,fKe,mKe,gKe,Jm,uae,hKe,pKe,hR,uKe,_Ke,bKe,Ym,_ae,vKe,FKe,pR,TKe,MKe,EKe,Km,bae,CKe,wKe,uR,AKe,LKe,yKe,Zm,vae,xKe,$Ke,_R,kKe,SKe,RKe,eg,Fae,PKe,BKe,bR,IKe,NKe,qKe,og,Tae,jKe,DKe,vR,GKe,OKe,VKe,rg,Mae,XKe,zKe,FR,WKe,QKe,HKe,tg,Eae,UKe,JKe,TR,YKe,KKe,ZKe,ag,Cae,eZe,oZe,MR,rZe,tZe,aZe,ng,wae,nZe,sZe,ER,lZe,iZe,dZe,sg,Aae,cZe,fZe,CR,mZe,gZe,hZe,lg,Lae,pZe,uZe,wR,_Ze,bZe,vZe,ig,yae,FZe,TZe,AR,MZe,EZe,CZe,dg,xae,wZe,AZe,LR,LZe,yZe,xZe,cg,$ae,$Ze,kZe,yR,SZe,RZe,PZe,fg,kae,BZe,IZe,xR,NZe,qZe,jZe,mg,Sae,DZe,GZe,$R,OZe,VZe,XZe,gg,Rae,zZe,WZe,kR,QZe,HZe,UZe,hg,Pae,JZe,YZe,SR,KZe,ZZe,eeo,pg,Bae,oeo,reo,RR,teo,aeo,neo,ug,Iae,seo,leo,PR,ieo,deo,ceo,_g,Nae,feo,meo,BR,geo,heo,peo,bg,qae,ueo,_eo,IR,beo,veo,Feo,vg,jae,Teo,Meo,NR,Eeo,Ceo,weo,Fg,Dae,Aeo,Leo,qR,yeo,xeo,$eo,Tg,Gae,keo,Seo,jR,Reo,Peo,Beo,Mg,Oae,Ieo,Neo,DR,qeo,jeo,Deo,Eg,Vae,Geo,Oeo,GR,Veo,Xeo,zeo,Cg,Xae,Weo,Qeo,OR,Heo,Ueo,Jeo,wg,zae,Yeo,Keo,VR,Zeo,eoo,ooo,Ag,Wae,roo,too,XR,aoo,noo,soo,Lg,Qae,loo,ioo,zR,doo,coo,foo,yg,Hae,moo,goo,WR,hoo,poo,uoo,xg,Uae,_oo,boo,QR,voo,Foo,Too,$g,Jae,Moo,Eoo,HR,Coo,woo,Aoo,kg,Yae,Loo,yoo,UR,xoo,$oo,koo,Sg,Kae,Soo,Roo,JR,Poo,Boo,Ioo,Rg,Zae,Noo,qoo,YR,joo,Doo,Goo,Pg,ene,Ooo,Voo,KR,Xoo,zoo,Woo,Bg,one,Qoo,Hoo,ZR,Uoo,Joo,Yoo,Ig,rne,Koo,Zoo,eP,ero,oro,rro,Ng,tne,tro,aro,oP,nro,sro,lro,qg,ane,iro,dro,rP,cro,fro,mro,jg,gro,Dg,AL,hro,nne,pro,nGe,$i,Gg,sne,LL,uro,lne,_ro,sGe,Ao,yL,bro,xL,vro,tP,Fro,Tro,Mro,$L,Ero,ine,Cro,wro,Aro,Ar,kL,Lro,dne,yro,xro,$a,$ro,cne,kro,Sro,fne,Rro,Pro,mne,Bro,Iro,Nro,k,Nn,gne,qro,jro,aP,Dro,Gro,nP,Oro,Vro,Xro,qn,hne,zro,Wro,sP,Qro,Hro,lP,Uro,Jro,Yro,jn,pne,Kro,Zro,iP,eto,oto,dP,rto,tto,ato,Og,une,nto,sto,cP,lto,ito,dto,Dn,_ne,cto,fto,fP,mto,gto,mP,hto,pto,uto,Vg,bne,_to,bto,gP,vto,Fto,Tto,Xg,vne,Mto,Eto,hP,Cto,wto,Ato,zg,Fne,Lto,yto,pP,xto,$to,kto,Gn,Tne,Sto,Rto,uP,Pto,Bto,_P,Ito,Nto,qto,On,Mne,jto,Dto,bP,Gto,Oto,vP,Vto,Xto,zto,Vn,Ene,Wto,Qto,FP,Hto,Uto,TP,Jto,Yto,Kto,Wg,Cne,Zto,eao,MP,oao,rao,tao,Qg,wne,aao,nao,EP,sao,lao,iao,Hg,Ane,dao,cao,CP,fao,mao,gao,Xn,Lne,hao,pao,wP,uao,_ao,AP,bao,vao,Fao,Ug,yne,Tao,Mao,LP,Eao,Cao,wao,zn,xne,Aao,Lao,yP,yao,xao,xP,$ao,kao,Sao,Wn,$ne,Rao,Pao,$P,Bao,Iao,kP,Nao,qao,jao,Qn,kne,Dao,Gao,SP,Oao,Vao,RP,Xao,zao,Wao,Jg,Sne,Qao,Hao,PP,Uao,Jao,Yao,Hn,Rne,Kao,Zao,BP,eno,ono,IP,rno,tno,ano,Un,Pne,nno,sno,NP,lno,ino,qP,dno,cno,fno,Jn,Bne,mno,gno,jP,hno,pno,DP,uno,_no,bno,Yn,Ine,vno,Fno,GP,Tno,Mno,OP,Eno,Cno,wno,Kn,Nne,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Zn,qne,Rno,Pno,zP,Bno,Ino,WP,Nno,qno,jno,Yg,jne,Dno,Gno,QP,Ono,Vno,Xno,es,Dne,zno,Wno,HP,Qno,Hno,UP,Uno,Jno,Yno,Kg,Gne,Kno,Zno,JP,eso,oso,rso,os,One,tso,aso,YP,nso,sso,KP,lso,iso,dso,rs,Vne,cso,fso,ZP,mso,gso,eB,hso,pso,uso,ts,Xne,_so,bso,oB,vso,Fso,rB,Tso,Mso,Eso,Zg,zne,Cso,wso,tB,Aso,Lso,yso,as,Wne,xso,$so,aB,kso,Sso,nB,Rso,Pso,Bso,ns,Qne,Iso,Nso,sB,qso,jso,lB,Dso,Gso,Oso,eh,Hne,Vso,Xso,iB,zso,Wso,Qso,ss,Une,Hso,Uso,dB,Jso,Yso,cB,Kso,Zso,elo,ls,Jne,olo,rlo,fB,tlo,alo,mB,nlo,slo,llo,is,Yne,ilo,dlo,gB,clo,flo,hB,mlo,glo,hlo,ds,Kne,plo,ulo,pB,_lo,blo,uB,vlo,Flo,Tlo,cs,Zne,Mlo,Elo,_B,Clo,wlo,bB,Alo,Llo,ylo,fs,ese,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,ms,ose,Ilo,Nlo,TB,qlo,jlo,MB,Dlo,Glo,Olo,gs,rse,Vlo,Xlo,EB,zlo,Wlo,CB,Qlo,Hlo,Ulo,oh,tse,Jlo,Ylo,wB,Klo,Zlo,eio,hs,ase,oio,rio,AB,tio,aio,LB,nio,sio,lio,rh,nse,iio,dio,yB,cio,fio,mio,th,sse,gio,hio,xB,pio,uio,_io,ps,lse,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,us,ise,wio,Aio,SB,Lio,yio,RB,xio,$io,kio,_s,dse,Sio,Rio,PB,Pio,Bio,BB,Iio,Nio,qio,ah,cse,jio,Dio,IB,Gio,Oio,Vio,bs,fse,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,vs,mse,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,Fs,gse,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,Ts,hse,fdo,mdo,VB,gdo,hdo,XB,pdo,udo,_do,Ms,pse,bdo,vdo,zB,Fdo,Tdo,WB,Mdo,Edo,Cdo,nh,use,wdo,Ado,QB,Ldo,ydo,xdo,Es,_se,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,sh,bse,Ndo,qdo,JB,jdo,Ddo,Gdo,lh,vse,Odo,Vdo,YB,Xdo,zdo,Wdo,ih,Fse,Qdo,Hdo,KB,Udo,Jdo,Ydo,dh,Tse,Kdo,Zdo,ZB,eco,oco,rco,Cs,Mse,tco,aco,eI,nco,sco,oI,lco,ico,dco,ch,Ese,cco,fco,rI,mco,gco,hco,ws,Cse,pco,uco,tI,_co,bco,aI,vco,Fco,Tco,As,wse,Mco,Eco,nI,Cco,wco,sI,Aco,Lco,yco,Ls,Ase,xco,$co,lI,kco,Sco,iI,Rco,Pco,Bco,ys,Lse,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,xs,yse,Vco,Xco,fI,zco,Wco,mI,Qco,Hco,Uco,$s,xse,Jco,Yco,gI,Kco,Zco,hI,efo,ofo,rfo,fh,$se,tfo,afo,pI,nfo,sfo,lfo,mh,kse,ifo,dfo,uI,cfo,ffo,mfo,ks,Sse,gfo,hfo,_I,pfo,ufo,bI,_fo,bfo,vfo,Ss,Rse,Ffo,Tfo,vI,Mfo,Efo,FI,Cfo,wfo,Afo,Rs,Pse,Lfo,yfo,TI,xfo,$fo,MI,kfo,Sfo,Rfo,gh,Bse,Pfo,Bfo,EI,Ifo,Nfo,qfo,hh,Ise,jfo,Dfo,CI,Gfo,Ofo,Vfo,ph,Nse,Xfo,zfo,wI,Wfo,Qfo,Hfo,Ps,qse,Ufo,Jfo,AI,Yfo,Kfo,LI,Zfo,emo,omo,Bs,jse,rmo,tmo,yI,amo,nmo,xI,smo,lmo,imo,uh,Dse,dmo,cmo,$I,fmo,mmo,gmo,_h,Gse,hmo,pmo,kI,umo,_mo,bmo,bh,Ose,vmo,Fmo,SI,Tmo,Mmo,Emo,Is,Vse,Cmo,wmo,RI,Amo,Lmo,PI,ymo,xmo,$mo,vh,Xse,kmo,Smo,BI,Rmo,Pmo,Bmo,Fh,zse,Imo,Nmo,II,qmo,jmo,Dmo,Ns,Wse,Gmo,Omo,NI,Vmo,Xmo,qI,zmo,Wmo,Qmo,qs,Qse,Hmo,Umo,jI,Jmo,Ymo,DI,Kmo,Zmo,ego,js,Hse,ogo,rgo,GI,tgo,ago,OI,ngo,sgo,lgo,Ds,Use,igo,dgo,VI,cgo,fgo,XI,mgo,ggo,hgo,Th,pgo,Mh,SL,ugo,Jse,_go,lGe,ki,Eh,Yse,RL,bgo,Kse,vgo,iGe,Lo,PL,Fgo,BL,Tgo,zI,Mgo,Ego,Cgo,IL,wgo,Zse,Ago,Lgo,ygo,He,NL,xgo,ele,$go,kgo,ka,Sgo,ole,Rgo,Pgo,rle,Bgo,Igo,tle,Ngo,qgo,jgo,Y,Ch,ale,Dgo,Ggo,WI,Ogo,Vgo,Xgo,wh,nle,zgo,Wgo,QI,Qgo,Hgo,Ugo,Ah,sle,Jgo,Ygo,HI,Kgo,Zgo,eho,Lh,lle,oho,rho,UI,tho,aho,nho,yh,ile,sho,lho,JI,iho,dho,cho,xh,dle,fho,mho,YI,gho,hho,pho,$h,cle,uho,_ho,KI,bho,vho,Fho,kh,fle,Tho,Mho,ZI,Eho,Cho,who,Sh,mle,Aho,Lho,eN,yho,xho,$ho,Rh,gle,kho,Sho,oN,Rho,Pho,Bho,Ph,hle,Iho,Nho,rN,qho,jho,Dho,Bh,ple,Gho,Oho,tN,Vho,Xho,zho,Ih,ule,Who,Qho,aN,Hho,Uho,Jho,Nh,_le,Yho,Kho,nN,Zho,epo,opo,qh,ble,rpo,tpo,sN,apo,npo,spo,jh,vle,lpo,ipo,lN,dpo,cpo,fpo,Dh,Fle,mpo,gpo,iN,hpo,ppo,upo,Gh,Tle,_po,bpo,dN,vpo,Fpo,Tpo,Oh,Mle,Mpo,Epo,cN,Cpo,wpo,Apo,Vh,Ele,Lpo,ypo,fN,xpo,$po,kpo,Xh,Cle,Spo,Rpo,mN,Ppo,Bpo,Ipo,zh,wle,Npo,qpo,gN,jpo,Dpo,Gpo,Wh,Ale,Opo,Vpo,hN,Xpo,zpo,Wpo,Qh,Lle,Qpo,Hpo,pN,Upo,Jpo,Ypo,Hh,yle,Kpo,Zpo,uN,euo,ouo,ruo,Uh,xle,tuo,auo,_N,nuo,suo,luo,Jh,$le,iuo,duo,bN,cuo,fuo,muo,Yh,kle,guo,huo,vN,puo,uuo,_uo,Kh,Sle,buo,vuo,FN,Fuo,Tuo,Muo,Zh,Rle,Euo,Cuo,TN,wuo,Auo,Luo,ep,Ple,yuo,xuo,MN,$uo,kuo,Suo,op,Ble,Ruo,Puo,EN,Buo,Iuo,Nuo,rp,quo,tp,juo,ap,qL,Duo,Ile,Guo,dGe,Si,np,Nle,jL,Ouo,qle,Vuo,cGe,yo,DL,Xuo,GL,zuo,CN,Wuo,Quo,Huo,OL,Uuo,jle,Juo,Yuo,Kuo,Ue,VL,Zuo,Dle,e_o,o_o,Ri,r_o,Gle,t_o,a_o,Ole,n_o,s_o,l_o,he,sp,Vle,i_o,d_o,wN,c_o,f_o,m_o,lp,Xle,g_o,h_o,zle,p_o,u_o,__o,ip,Wle,b_o,v_o,AN,F_o,T_o,M_o,dp,Qle,E_o,C_o,LN,w_o,A_o,L_o,cp,Hle,y_o,x_o,yN,$_o,k_o,S_o,fp,Ule,R_o,P_o,xN,B_o,I_o,N_o,mp,Jle,q_o,j_o,$N,D_o,G_o,O_o,gp,Yle,V_o,X_o,kN,z_o,W_o,Q_o,hp,Kle,H_o,U_o,SN,J_o,Y_o,K_o,pp,Zle,Z_o,e1o,RN,o1o,r1o,t1o,up,eie,a1o,n1o,PN,s1o,l1o,i1o,_p,oie,d1o,c1o,BN,f1o,m1o,g1o,bp,rie,h1o,p1o,IN,u1o,_1o,b1o,vp,tie,v1o,F1o,NN,T1o,M1o,E1o,Fp,aie,C1o,w1o,qN,A1o,L1o,y1o,Tp,nie,x1o,$1o,jN,k1o,S1o,R1o,Mp,sie,P1o,B1o,DN,I1o,N1o,q1o,Ep,j1o,Cp,D1o,wp,XL,G1o,lie,O1o,fGe,Pi,Ap,iie,zL,V1o,die,X1o,mGe,xo,WL,z1o,Bi,W1o,GN,Q1o,H1o,ON,U1o,J1o,Y1o,QL,K1o,cie,Z1o,e7o,o7o,nt,HL,r7o,fie,t7o,a7o,Ii,n7o,mie,s7o,l7o,VN,i7o,d7o,c7o,Lp,f7o,Je,UL,m7o,gie,g7o,h7o,Sa,p7o,hie,u7o,_7o,pie,b7o,v7o,uie,F7o,T7o,M7o,x,yp,_ie,E7o,C7o,XN,w7o,A7o,L7o,xp,bie,y7o,x7o,zN,$7o,k7o,S7o,$p,vie,R7o,P7o,WN,B7o,I7o,N7o,kp,Fie,q7o,j7o,QN,D7o,G7o,O7o,Sp,Tie,V7o,X7o,HN,z7o,W7o,Q7o,Rp,Mie,H7o,U7o,UN,J7o,Y7o,K7o,Pp,Eie,Z7o,e2o,JN,o2o,r2o,t2o,Bp,Cie,a2o,n2o,YN,s2o,l2o,i2o,Ip,wie,d2o,c2o,KN,f2o,m2o,g2o,Np,Aie,h2o,p2o,ZN,u2o,_2o,b2o,qp,Lie,v2o,F2o,eq,T2o,M2o,E2o,jp,yie,C2o,w2o,oq,A2o,L2o,y2o,Dp,xie,x2o,$2o,rq,k2o,S2o,R2o,Gp,$ie,P2o,B2o,tq,I2o,N2o,q2o,Op,kie,j2o,D2o,aq,G2o,O2o,V2o,Vp,Sie,X2o,z2o,nq,W2o,Q2o,H2o,Xp,Rie,U2o,J2o,sq,Y2o,K2o,Z2o,zp,Pie,ebo,obo,lq,rbo,tbo,abo,Wp,Bie,nbo,sbo,iq,lbo,ibo,dbo,Qp,Iie,cbo,fbo,dq,mbo,gbo,hbo,Hp,Nie,pbo,ubo,cq,_bo,bbo,vbo,Up,qie,Fbo,Tbo,fq,Mbo,Ebo,Cbo,Jp,jie,wbo,Abo,mq,Lbo,ybo,xbo,Yp,Die,$bo,kbo,gq,Sbo,Rbo,Pbo,Kp,Gie,Bbo,Ibo,hq,Nbo,qbo,jbo,Zp,Oie,Dbo,Gbo,pq,Obo,Vbo,Xbo,eu,Vie,zbo,Wbo,uq,Qbo,Hbo,Ubo,ou,Xie,Jbo,Ybo,_q,Kbo,Zbo,evo,ru,zie,ovo,rvo,bq,tvo,avo,nvo,tu,Wie,svo,lvo,vq,ivo,dvo,cvo,au,Qie,fvo,mvo,Fq,gvo,hvo,pvo,nu,Hie,uvo,_vo,Tq,bvo,vvo,Fvo,su,Uie,Tvo,Mvo,Mq,Evo,Cvo,wvo,Gs,Jie,Avo,Lvo,Eq,yvo,xvo,Cq,$vo,kvo,Svo,lu,Yie,Rvo,Pvo,wq,Bvo,Ivo,Nvo,iu,Kie,qvo,jvo,Aq,Dvo,Gvo,Ovo,du,Zie,Vvo,Xvo,Lq,zvo,Wvo,Qvo,cu,ede,Hvo,Uvo,yq,Jvo,Yvo,Kvo,fu,ode,Zvo,eFo,xq,oFo,rFo,tFo,mu,rde,aFo,nFo,$q,sFo,lFo,iFo,gu,tde,dFo,cFo,kq,fFo,mFo,gFo,hu,ade,hFo,pFo,Sq,uFo,_Fo,bFo,pu,nde,vFo,FFo,Rq,TFo,MFo,EFo,uu,sde,CFo,wFo,Pq,AFo,LFo,yFo,_u,lde,xFo,$Fo,Bq,kFo,SFo,RFo,bu,ide,PFo,BFo,Iq,IFo,NFo,qFo,vu,dde,jFo,DFo,Nq,GFo,OFo,VFo,Fu,cde,XFo,zFo,qq,WFo,QFo,HFo,Tu,fde,UFo,JFo,jq,YFo,KFo,ZFo,Mu,mde,e6o,o6o,Dq,r6o,t6o,a6o,Eu,gde,n6o,s6o,Gq,l6o,i6o,d6o,Cu,hde,c6o,f6o,Oq,m6o,g6o,h6o,wu,pde,p6o,u6o,Vq,_6o,b6o,v6o,Au,ude,F6o,T6o,Xq,M6o,E6o,C6o,Lu,_de,w6o,A6o,zq,L6o,y6o,x6o,yu,bde,$6o,k6o,Wq,S6o,R6o,P6o,xu,vde,B6o,I6o,Qq,N6o,q6o,j6o,$u,Fde,D6o,G6o,Hq,O6o,V6o,X6o,ku,Tde,z6o,W6o,Uq,Q6o,H6o,U6o,Su,Mde,J6o,Y6o,Jq,K6o,Z6o,eTo,Ru,Ede,oTo,rTo,Yq,tTo,aTo,nTo,Pu,Cde,sTo,lTo,Kq,iTo,dTo,cTo,Bu,wde,fTo,mTo,Zq,gTo,hTo,pTo,Iu,Ade,uTo,_To,ej,bTo,vTo,FTo,Nu,Lde,TTo,MTo,oj,ETo,CTo,wTo,qu,yde,ATo,LTo,rj,yTo,xTo,$To,ju,xde,kTo,STo,tj,RTo,PTo,BTo,Du,$de,ITo,NTo,aj,qTo,jTo,DTo,Gu,kde,GTo,OTo,nj,VTo,XTo,zTo,Ou,Sde,WTo,QTo,sj,HTo,UTo,JTo,Vu,Rde,YTo,KTo,lj,ZTo,eMo,oMo,Xu,Pde,rMo,tMo,ij,aMo,nMo,sMo,zu,Bde,lMo,iMo,dj,dMo,cMo,fMo,Wu,Ide,mMo,gMo,cj,hMo,pMo,uMo,Qu,Nde,_Mo,bMo,fj,vMo,FMo,TMo,Hu,qde,MMo,EMo,mj,CMo,wMo,AMo,Uu,jde,LMo,yMo,gj,xMo,$Mo,kMo,Ju,Dde,SMo,RMo,hj,PMo,BMo,IMo,Yu,Gde,NMo,qMo,pj,jMo,DMo,GMo,Ku,Ode,OMo,VMo,uj,XMo,zMo,WMo,Zu,Vde,QMo,HMo,_j,UMo,JMo,YMo,e_,Xde,KMo,ZMo,bj,e4o,o4o,r4o,o_,zde,t4o,a4o,vj,n4o,s4o,l4o,r_,Wde,i4o,d4o,Fj,c4o,f4o,m4o,t_,Qde,g4o,h4o,Tj,p4o,u4o,_4o,a_,Hde,b4o,v4o,Mj,F4o,T4o,M4o,n_,Ude,E4o,C4o,Ej,w4o,A4o,L4o,s_,Jde,y4o,x4o,Cj,$4o,k4o,S4o,l_,Yde,R4o,P4o,wj,B4o,I4o,N4o,i_,Kde,q4o,j4o,Aj,D4o,G4o,O4o,d_,Zde,V4o,X4o,Lj,z4o,W4o,Q4o,c_,ece,H4o,U4o,yj,J4o,Y4o,K4o,f_,oce,Z4o,eEo,xj,oEo,rEo,tEo,m_,rce,aEo,nEo,$j,sEo,lEo,iEo,g_,tce,dEo,cEo,kj,fEo,mEo,gEo,h_,ace,hEo,pEo,Sj,uEo,_Eo,bEo,p_,nce,vEo,FEo,Rj,TEo,MEo,EEo,u_,sce,CEo,wEo,Pj,AEo,LEo,yEo,__,lce,xEo,$Eo,Bj,kEo,SEo,REo,b_,ice,PEo,BEo,Ij,IEo,NEo,qEo,v_,dce,jEo,DEo,Nj,GEo,OEo,VEo,F_,cce,XEo,zEo,qj,WEo,QEo,HEo,T_,fce,UEo,JEo,jj,YEo,KEo,ZEo,M_,mce,eCo,oCo,Dj,rCo,tCo,aCo,E_,gce,nCo,sCo,Gj,lCo,iCo,dCo,C_,hce,cCo,fCo,Oj,mCo,gCo,hCo,w_,pCo,pce,uCo,_Co,uce,bCo,vCo,A_,gGe,Ni,L_,_ce,JL,FCo,bce,TCo,hGe,$o,YL,MCo,qi,ECo,Vj,CCo,wCo,Xj,ACo,LCo,yCo,KL,xCo,vce,$Co,kCo,SCo,st,ZL,RCo,Fce,PCo,BCo,ji,ICo,Tce,NCo,qCo,zj,jCo,DCo,GCo,y_,OCo,Ye,ey,VCo,Mce,XCo,zCo,Ra,WCo,Ece,QCo,HCo,Cce,UCo,JCo,wce,YCo,KCo,ZCo,G,x_,Ace,e5o,o5o,Wj,r5o,t5o,a5o,$_,Lce,n5o,s5o,Qj,l5o,i5o,d5o,k_,yce,c5o,f5o,Hj,m5o,g5o,h5o,S_,xce,p5o,u5o,Uj,_5o,b5o,v5o,R_,$ce,F5o,T5o,Jj,M5o,E5o,C5o,P_,kce,w5o,A5o,Yj,L5o,y5o,x5o,B_,Sce,$5o,k5o,Kj,S5o,R5o,P5o,I_,Rce,B5o,I5o,Zj,N5o,q5o,j5o,N_,Pce,D5o,G5o,eD,O5o,V5o,X5o,q_,Bce,z5o,W5o,oD,Q5o,H5o,U5o,j_,Ice,J5o,Y5o,rD,K5o,Z5o,e3o,D_,Nce,o3o,r3o,tD,t3o,a3o,n3o,G_,qce,s3o,l3o,aD,i3o,d3o,c3o,O_,jce,f3o,m3o,nD,g3o,h3o,p3o,V_,Dce,u3o,_3o,sD,b3o,v3o,F3o,X_,Gce,T3o,M3o,lD,E3o,C3o,w3o,z_,Oce,A3o,L3o,iD,y3o,x3o,$3o,W_,Vce,k3o,S3o,dD,R3o,P3o,B3o,Q_,Xce,I3o,N3o,cD,q3o,j3o,D3o,H_,zce,G3o,O3o,fD,V3o,X3o,z3o,U_,Wce,W3o,Q3o,mD,H3o,U3o,J3o,J_,Qce,Y3o,K3o,gD,Z3o,e0o,o0o,Y_,Hce,r0o,t0o,hD,a0o,n0o,s0o,K_,Uce,l0o,i0o,pD,d0o,c0o,f0o,Z_,Jce,m0o,g0o,uD,h0o,p0o,u0o,e1,Yce,_0o,b0o,_D,v0o,F0o,T0o,o1,Kce,M0o,E0o,bD,C0o,w0o,A0o,r1,Zce,L0o,y0o,vD,x0o,$0o,k0o,t1,efe,S0o,R0o,FD,P0o,B0o,I0o,a1,ofe,N0o,q0o,TD,j0o,D0o,G0o,n1,rfe,O0o,V0o,MD,X0o,z0o,W0o,s1,tfe,Q0o,H0o,ED,U0o,J0o,Y0o,l1,afe,K0o,Z0o,CD,ewo,owo,rwo,i1,nfe,two,awo,wD,nwo,swo,lwo,d1,sfe,iwo,dwo,AD,cwo,fwo,mwo,c1,lfe,gwo,hwo,LD,pwo,uwo,_wo,f1,ife,bwo,vwo,yD,Fwo,Two,Mwo,m1,dfe,Ewo,Cwo,xD,wwo,Awo,Lwo,g1,cfe,ywo,xwo,$D,$wo,kwo,Swo,h1,ffe,Rwo,Pwo,kD,Bwo,Iwo,Nwo,p1,mfe,qwo,jwo,SD,Dwo,Gwo,Owo,u1,gfe,Vwo,Xwo,RD,zwo,Wwo,Qwo,_1,hfe,Hwo,Uwo,PD,Jwo,Ywo,Kwo,b1,Zwo,pfe,eAo,oAo,ufe,rAo,tAo,v1,pGe,Di,F1,_fe,oy,aAo,bfe,nAo,uGe,ko,ry,sAo,Gi,lAo,BD,iAo,dAo,ID,cAo,fAo,mAo,ty,gAo,vfe,hAo,pAo,uAo,lt,ay,_Ao,Ffe,bAo,vAo,Oi,FAo,Tfe,TAo,MAo,ND,EAo,CAo,wAo,T1,AAo,Ke,ny,LAo,Mfe,yAo,xAo,Pa,$Ao,Efe,kAo,SAo,Cfe,RAo,PAo,wfe,BAo,IAo,NAo,z,M1,Afe,qAo,jAo,qD,DAo,GAo,OAo,E1,Lfe,VAo,XAo,jD,zAo,WAo,QAo,C1,yfe,HAo,UAo,DD,JAo,YAo,KAo,w1,xfe,ZAo,eLo,GD,oLo,rLo,tLo,A1,$fe,aLo,nLo,OD,sLo,lLo,iLo,L1,kfe,dLo,cLo,VD,fLo,mLo,gLo,y1,Sfe,hLo,pLo,XD,uLo,_Lo,bLo,x1,Rfe,vLo,FLo,zD,TLo,MLo,ELo,$1,Pfe,CLo,wLo,WD,ALo,LLo,yLo,k1,Bfe,xLo,$Lo,QD,kLo,SLo,RLo,S1,Ife,PLo,BLo,HD,ILo,NLo,qLo,R1,Nfe,jLo,DLo,UD,GLo,OLo,VLo,P1,qfe,XLo,zLo,JD,WLo,QLo,HLo,B1,jfe,ULo,JLo,YD,YLo,KLo,ZLo,I1,Dfe,eyo,oyo,KD,ryo,tyo,ayo,N1,Gfe,nyo,syo,ZD,lyo,iyo,dyo,q1,Ofe,cyo,fyo,eG,myo,gyo,hyo,j1,Vfe,pyo,uyo,oG,_yo,byo,vyo,D1,Xfe,Fyo,Tyo,rG,Myo,Eyo,Cyo,G1,zfe,wyo,Ayo,tG,Lyo,yyo,xyo,O1,Wfe,$yo,kyo,aG,Syo,Ryo,Pyo,V1,Qfe,Byo,Iyo,nG,Nyo,qyo,jyo,X1,Hfe,Dyo,Gyo,sG,Oyo,Vyo,Xyo,z1,Ufe,zyo,Wyo,lG,Qyo,Hyo,Uyo,W1,Jfe,Jyo,Yyo,iG,Kyo,Zyo,e8o,Q1,Yfe,o8o,r8o,dG,t8o,a8o,n8o,H1,Kfe,s8o,l8o,cG,i8o,d8o,c8o,U1,Zfe,f8o,m8o,fG,g8o,h8o,p8o,J1,eme,u8o,_8o,mG,b8o,v8o,F8o,Y1,ome,T8o,M8o,gG,E8o,C8o,w8o,K1,rme,A8o,L8o,hG,y8o,x8o,$8o,Z1,tme,k8o,S8o,pG,R8o,P8o,B8o,e7,ame,I8o,N8o,uG,q8o,j8o,D8o,o7,nme,G8o,O8o,_G,V8o,X8o,z8o,r7,sme,W8o,Q8o,bG,H8o,U8o,J8o,t7,lme,Y8o,K8o,vG,Z8o,e9o,o9o,a7,ime,r9o,t9o,FG,a9o,n9o,s9o,n7,dme,l9o,i9o,TG,d9o,c9o,f9o,s7,m9o,cme,g9o,h9o,fme,p9o,u9o,l7,_Ge,Vi,i7,mme,sy,_9o,gme,b9o,bGe,So,ly,v9o,Xi,F9o,MG,T9o,M9o,EG,E9o,C9o,w9o,iy,A9o,hme,L9o,y9o,x9o,it,dy,$9o,pme,k9o,S9o,zi,R9o,ume,P9o,B9o,CG,I9o,N9o,q9o,d7,j9o,Ze,cy,D9o,_me,G9o,O9o,Ba,V9o,bme,X9o,z9o,vme,W9o,Q9o,Fme,H9o,U9o,J9o,Q,c7,Tme,Y9o,K9o,wG,Z9o,exo,oxo,f7,Mme,rxo,txo,AG,axo,nxo,sxo,m7,Eme,lxo,ixo,LG,dxo,cxo,fxo,g7,Cme,mxo,gxo,yG,hxo,pxo,uxo,h7,wme,_xo,bxo,xG,vxo,Fxo,Txo,p7,Ame,Mxo,Exo,$G,Cxo,wxo,Axo,u7,Lme,Lxo,yxo,kG,xxo,$xo,kxo,_7,yme,Sxo,Rxo,SG,Pxo,Bxo,Ixo,b7,xme,Nxo,qxo,RG,jxo,Dxo,Gxo,v7,$me,Oxo,Vxo,PG,Xxo,zxo,Wxo,F7,kme,Qxo,Hxo,BG,Uxo,Jxo,Yxo,T7,Sme,Kxo,Zxo,IG,e$o,o$o,r$o,M7,Rme,t$o,a$o,NG,n$o,s$o,l$o,E7,Pme,i$o,d$o,qG,c$o,f$o,m$o,C7,Bme,g$o,h$o,jG,p$o,u$o,_$o,w7,Ime,b$o,v$o,DG,F$o,T$o,M$o,A7,Nme,E$o,C$o,GG,w$o,A$o,L$o,L7,qme,y$o,x$o,OG,$$o,k$o,S$o,y7,jme,R$o,P$o,VG,B$o,I$o,N$o,x7,Dme,q$o,j$o,XG,D$o,G$o,O$o,$7,Gme,V$o,X$o,zG,z$o,W$o,Q$o,k7,Ome,H$o,U$o,WG,J$o,Y$o,K$o,S7,Vme,Z$o,eko,QG,oko,rko,tko,R7,Xme,ako,nko,HG,sko,lko,iko,P7,zme,dko,cko,UG,fko,mko,gko,B7,Wme,hko,pko,JG,uko,_ko,bko,I7,Qme,vko,Fko,YG,Tko,Mko,Eko,N7,Hme,Cko,wko,KG,Ako,Lko,yko,q7,Ume,xko,$ko,ZG,kko,Sko,Rko,j7,Jme,Pko,Bko,eO,Iko,Nko,qko,D7,Yme,jko,Dko,oO,Gko,Oko,Vko,G7,Kme,Xko,zko,Zme,Wko,Qko,Hko,O7,ege,Uko,Jko,rO,Yko,Kko,Zko,V7,oge,eSo,oSo,tO,rSo,tSo,aSo,X7,rge,nSo,sSo,aO,lSo,iSo,dSo,z7,tge,cSo,fSo,nO,mSo,gSo,hSo,W7,pSo,age,uSo,_So,nge,bSo,vSo,Q7,vGe,Wi,H7,sge,fy,FSo,lge,TSo,FGe,Ro,my,MSo,Qi,ESo,sO,CSo,wSo,lO,ASo,LSo,ySo,gy,xSo,ige,$So,kSo,SSo,dt,hy,RSo,dge,PSo,BSo,Hi,ISo,cge,NSo,qSo,iO,jSo,DSo,GSo,U7,OSo,eo,py,VSo,fge,XSo,zSo,Ia,WSo,mge,QSo,HSo,gge,USo,JSo,hge,YSo,KSo,ZSo,pe,J7,pge,eRo,oRo,dO,rRo,tRo,aRo,Y7,uge,nRo,sRo,cO,lRo,iRo,dRo,K7,_ge,cRo,fRo,fO,mRo,gRo,hRo,Z7,bge,pRo,uRo,mO,_Ro,bRo,vRo,e2,vge,FRo,TRo,gO,MRo,ERo,CRo,o2,Fge,wRo,ARo,hO,LRo,yRo,xRo,r2,Tge,$Ro,kRo,pO,SRo,RRo,PRo,t2,Mge,BRo,IRo,uO,NRo,qRo,jRo,a2,Ege,DRo,GRo,_O,ORo,VRo,XRo,n2,Cge,zRo,WRo,bO,QRo,HRo,URo,s2,wge,JRo,YRo,vO,KRo,ZRo,ePo,l2,Age,oPo,rPo,FO,tPo,aPo,nPo,i2,Lge,sPo,lPo,TO,iPo,dPo,cPo,d2,yge,fPo,mPo,MO,gPo,hPo,pPo,c2,xge,uPo,_Po,EO,bPo,vPo,FPo,f2,$ge,TPo,MPo,CO,EPo,CPo,wPo,m2,kge,APo,LPo,wO,yPo,xPo,$Po,g2,kPo,Sge,SPo,RPo,Rge,PPo,BPo,h2,TGe,Ui,p2,Pge,uy,IPo,Bge,NPo,MGe,Po,_y,qPo,Ji,jPo,AO,DPo,GPo,LO,OPo,VPo,XPo,by,zPo,Ige,WPo,QPo,HPo,ct,vy,UPo,Nge,JPo,YPo,Yi,KPo,qge,ZPo,eBo,yO,oBo,rBo,tBo,u2,aBo,oo,Fy,nBo,jge,sBo,lBo,Na,iBo,Dge,dBo,cBo,Gge,fBo,mBo,Oge,gBo,hBo,pBo,N,_2,Vge,uBo,_Bo,xO,bBo,vBo,FBo,b2,Xge,TBo,MBo,$O,EBo,CBo,wBo,v2,zge,ABo,LBo,kO,yBo,xBo,$Bo,F2,Wge,kBo,SBo,SO,RBo,PBo,BBo,T2,Qge,IBo,NBo,RO,qBo,jBo,DBo,M2,Hge,GBo,OBo,PO,VBo,XBo,zBo,E2,Uge,WBo,QBo,BO,HBo,UBo,JBo,C2,Jge,YBo,KBo,IO,ZBo,eIo,oIo,w2,Yge,rIo,tIo,NO,aIo,nIo,sIo,A2,Kge,lIo,iIo,qO,dIo,cIo,fIo,L2,Zge,mIo,gIo,jO,hIo,pIo,uIo,y2,ehe,_Io,bIo,DO,vIo,FIo,TIo,x2,ohe,MIo,EIo,GO,CIo,wIo,AIo,$2,rhe,LIo,yIo,OO,xIo,$Io,kIo,k2,the,SIo,RIo,VO,PIo,BIo,IIo,S2,ahe,NIo,qIo,XO,jIo,DIo,GIo,R2,nhe,OIo,VIo,zO,XIo,zIo,WIo,P2,she,QIo,HIo,WO,UIo,JIo,YIo,B2,lhe,KIo,ZIo,QO,eNo,oNo,rNo,I2,ihe,tNo,aNo,HO,nNo,sNo,lNo,N2,dhe,iNo,dNo,UO,cNo,fNo,mNo,q2,che,gNo,hNo,JO,pNo,uNo,_No,j2,fhe,bNo,vNo,YO,FNo,TNo,MNo,D2,mhe,ENo,CNo,KO,wNo,ANo,LNo,G2,ghe,yNo,xNo,ZO,$No,kNo,SNo,O2,hhe,RNo,PNo,eV,BNo,INo,NNo,V2,phe,qNo,jNo,oV,DNo,GNo,ONo,X2,uhe,VNo,XNo,rV,zNo,WNo,QNo,z2,_he,HNo,UNo,tV,JNo,YNo,KNo,W2,bhe,ZNo,eqo,aV,oqo,rqo,tqo,Q2,vhe,aqo,nqo,nV,sqo,lqo,iqo,H2,Fhe,dqo,cqo,sV,fqo,mqo,gqo,U2,The,hqo,pqo,lV,uqo,_qo,bqo,J2,Mhe,vqo,Fqo,iV,Tqo,Mqo,Eqo,Y2,Ehe,Cqo,wqo,dV,Aqo,Lqo,yqo,K2,Che,xqo,$qo,cV,kqo,Sqo,Rqo,Z2,whe,Pqo,Bqo,fV,Iqo,Nqo,qqo,eb,Ahe,jqo,Dqo,mV,Gqo,Oqo,Vqo,ob,Lhe,Xqo,zqo,gV,Wqo,Qqo,Hqo,rb,yhe,Uqo,Jqo,hV,Yqo,Kqo,Zqo,tb,xhe,ejo,ojo,pV,rjo,tjo,ajo,ab,$he,njo,sjo,uV,ljo,ijo,djo,nb,khe,cjo,fjo,_V,mjo,gjo,hjo,sb,She,pjo,ujo,bV,_jo,bjo,vjo,lb,Rhe,Fjo,Tjo,vV,Mjo,Ejo,Cjo,ib,Phe,wjo,Ajo,FV,Ljo,yjo,xjo,db,Bhe,$jo,kjo,TV,Sjo,Rjo,Pjo,cb,Ihe,Bjo,Ijo,MV,Njo,qjo,jjo,fb,Djo,Nhe,Gjo,Ojo,qhe,Vjo,Xjo,mb,EGe,Ki,gb,jhe,Ty,zjo,Dhe,Wjo,CGe,Bo,My,Qjo,Zi,Hjo,EV,Ujo,Jjo,CV,Yjo,Kjo,Zjo,Ey,eDo,Ghe,oDo,rDo,tDo,ft,Cy,aDo,Ohe,nDo,sDo,ed,lDo,Vhe,iDo,dDo,wV,cDo,fDo,mDo,hb,gDo,ro,wy,hDo,Xhe,pDo,uDo,qa,_Do,zhe,bDo,vDo,Whe,FDo,TDo,Qhe,MDo,EDo,CDo,Z,pb,Hhe,wDo,ADo,AV,LDo,yDo,xDo,ub,Uhe,$Do,kDo,LV,SDo,RDo,PDo,_b,Jhe,BDo,IDo,yV,NDo,qDo,jDo,bb,Yhe,DDo,GDo,xV,ODo,VDo,XDo,vb,Khe,zDo,WDo,$V,QDo,HDo,UDo,Fb,Zhe,JDo,YDo,kV,KDo,ZDo,eGo,Tb,epe,oGo,rGo,SV,tGo,aGo,nGo,Mb,ope,sGo,lGo,RV,iGo,dGo,cGo,Eb,rpe,fGo,mGo,PV,gGo,hGo,pGo,Cb,tpe,uGo,_Go,BV,bGo,vGo,FGo,wb,ape,TGo,MGo,IV,EGo,CGo,wGo,Ab,npe,AGo,LGo,NV,yGo,xGo,$Go,Lb,spe,kGo,SGo,qV,RGo,PGo,BGo,yb,lpe,IGo,NGo,jV,qGo,jGo,DGo,xb,ipe,GGo,OGo,DV,VGo,XGo,zGo,$b,dpe,WGo,QGo,GV,HGo,UGo,JGo,kb,cpe,YGo,KGo,OV,ZGo,eOo,oOo,Sb,fpe,rOo,tOo,VV,aOo,nOo,sOo,Rb,mpe,lOo,iOo,XV,dOo,cOo,fOo,Pb,gpe,mOo,gOo,zV,hOo,pOo,uOo,Bb,hpe,_Oo,bOo,WV,vOo,FOo,TOo,Ib,ppe,MOo,EOo,QV,COo,wOo,AOo,Nb,upe,LOo,yOo,HV,xOo,$Oo,kOo,qb,_pe,SOo,ROo,UV,POo,BOo,IOo,jb,bpe,NOo,qOo,JV,jOo,DOo,GOo,Db,vpe,OOo,VOo,YV,XOo,zOo,WOo,Gb,Fpe,QOo,HOo,KV,UOo,JOo,YOo,Ob,Tpe,KOo,ZOo,ZV,eVo,oVo,rVo,Vb,Mpe,tVo,aVo,eX,nVo,sVo,lVo,Xb,iVo,Epe,dVo,cVo,Cpe,fVo,mVo,zb,wGe,od,Wb,wpe,Ay,gVo,Ape,hVo,AGe,Io,Ly,pVo,rd,uVo,oX,_Vo,bVo,rX,vVo,FVo,TVo,yy,MVo,Lpe,EVo,CVo,wVo,mt,xy,AVo,ype,LVo,yVo,td,xVo,xpe,$Vo,kVo,tX,SVo,RVo,PVo,Qb,BVo,to,$y,IVo,$pe,NVo,qVo,ja,jVo,kpe,DVo,GVo,Spe,OVo,VVo,Rpe,XVo,zVo,WVo,Zr,Hb,Ppe,QVo,HVo,aX,UVo,JVo,YVo,Ub,Bpe,KVo,ZVo,nX,eXo,oXo,rXo,Jb,Ipe,tXo,aXo,sX,nXo,sXo,lXo,Yb,Npe,iXo,dXo,lX,cXo,fXo,mXo,Kb,qpe,gXo,hXo,iX,pXo,uXo,_Xo,Zb,bXo,jpe,vXo,FXo,Dpe,TXo,MXo,ev,LGe,ad,ov,Gpe,ky,EXo,Ope,CXo,yGe,No,Sy,wXo,nd,AXo,dX,LXo,yXo,cX,xXo,$Xo,kXo,Ry,SXo,Vpe,RXo,PXo,BXo,gt,Py,IXo,Xpe,NXo,qXo,sd,jXo,zpe,DXo,GXo,fX,OXo,VXo,XXo,rv,zXo,ao,By,WXo,Wpe,QXo,HXo,Da,UXo,Qpe,JXo,YXo,Hpe,KXo,ZXo,Upe,ezo,ozo,rzo,H,tv,Jpe,tzo,azo,mX,nzo,szo,lzo,av,Ype,izo,dzo,gX,czo,fzo,mzo,nv,Kpe,gzo,hzo,hX,pzo,uzo,_zo,sv,Zpe,bzo,vzo,pX,Fzo,Tzo,Mzo,lv,eue,Ezo,Czo,uX,wzo,Azo,Lzo,iv,oue,yzo,xzo,_X,$zo,kzo,Szo,dv,rue,Rzo,Pzo,bX,Bzo,Izo,Nzo,cv,tue,qzo,jzo,vX,Dzo,Gzo,Ozo,fv,aue,Vzo,Xzo,FX,zzo,Wzo,Qzo,mv,nue,Hzo,Uzo,TX,Jzo,Yzo,Kzo,gv,sue,Zzo,eWo,MX,oWo,rWo,tWo,hv,lue,aWo,nWo,EX,sWo,lWo,iWo,pv,iue,dWo,cWo,CX,fWo,mWo,gWo,uv,due,hWo,pWo,wX,uWo,_Wo,bWo,_v,cue,vWo,FWo,AX,TWo,MWo,EWo,bv,fue,CWo,wWo,LX,AWo,LWo,yWo,vv,mue,xWo,$Wo,yX,kWo,SWo,RWo,Fv,gue,PWo,BWo,xX,IWo,NWo,qWo,Tv,hue,jWo,DWo,$X,GWo,OWo,VWo,Mv,pue,XWo,zWo,kX,WWo,QWo,HWo,Ev,uue,UWo,JWo,SX,YWo,KWo,ZWo,Cv,_ue,eQo,oQo,RX,rQo,tQo,aQo,wv,bue,nQo,sQo,PX,lQo,iQo,dQo,Av,vue,cQo,fQo,BX,mQo,gQo,hQo,Lv,Fue,pQo,uQo,IX,_Qo,bQo,vQo,yv,Tue,FQo,TQo,NX,MQo,EQo,CQo,xv,Mue,wQo,AQo,qX,LQo,yQo,xQo,$v,Eue,$Qo,kQo,jX,SQo,RQo,PQo,kv,Cue,BQo,IQo,DX,NQo,qQo,jQo,Sv,wue,DQo,GQo,GX,OQo,VQo,XQo,Rv,Aue,zQo,WQo,OX,QQo,HQo,UQo,Pv,Lue,JQo,YQo,VX,KQo,ZQo,eHo,Bv,yue,oHo,rHo,XX,tHo,aHo,nHo,Iv,xue,sHo,lHo,zX,iHo,dHo,cHo,Nv,$ue,fHo,mHo,WX,gHo,hHo,pHo,qv,uHo,kue,_Ho,bHo,Sue,vHo,FHo,jv,xGe,ld,Dv,Rue,Iy,THo,Pue,MHo,$Ge,qo,Ny,EHo,id,CHo,QX,wHo,AHo,HX,LHo,yHo,xHo,qy,$Ho,Bue,kHo,SHo,RHo,ht,jy,PHo,Iue,BHo,IHo,dd,NHo,Nue,qHo,jHo,UX,DHo,GHo,OHo,Gv,VHo,no,Dy,XHo,que,zHo,WHo,Ga,QHo,jue,HHo,UHo,Due,JHo,YHo,Gue,KHo,ZHo,eUo,V,Ov,Oue,oUo,rUo,JX,tUo,aUo,nUo,Vv,Vue,sUo,lUo,YX,iUo,dUo,cUo,Xv,Xue,fUo,mUo,KX,gUo,hUo,pUo,zv,zue,uUo,_Uo,ZX,bUo,vUo,FUo,Wv,Wue,TUo,MUo,ez,EUo,CUo,wUo,Qv,Que,AUo,LUo,oz,yUo,xUo,$Uo,Hv,Hue,kUo,SUo,rz,RUo,PUo,BUo,Uv,Uue,IUo,NUo,tz,qUo,jUo,DUo,Jv,Jue,GUo,OUo,az,VUo,XUo,zUo,Yv,Yue,WUo,QUo,nz,HUo,UUo,JUo,Kv,Kue,YUo,KUo,sz,ZUo,eJo,oJo,Zv,Zue,rJo,tJo,lz,aJo,nJo,sJo,eF,e_e,lJo,iJo,iz,dJo,cJo,fJo,oF,o_e,mJo,gJo,dz,hJo,pJo,uJo,rF,r_e,_Jo,bJo,cz,vJo,FJo,TJo,tF,t_e,MJo,EJo,fz,CJo,wJo,AJo,aF,a_e,LJo,yJo,mz,xJo,$Jo,kJo,nF,n_e,SJo,RJo,gz,PJo,BJo,IJo,sF,s_e,NJo,qJo,hz,jJo,DJo,GJo,lF,l_e,OJo,VJo,pz,XJo,zJo,WJo,iF,i_e,QJo,HJo,uz,UJo,JJo,YJo,dF,d_e,KJo,ZJo,_z,eYo,oYo,rYo,cF,c_e,tYo,aYo,bz,nYo,sYo,lYo,fF,f_e,iYo,dYo,vz,cYo,fYo,mYo,mF,m_e,gYo,hYo,Fz,pYo,uYo,_Yo,gF,g_e,bYo,vYo,Tz,FYo,TYo,MYo,hF,h_e,EYo,CYo,Mz,wYo,AYo,LYo,pF,p_e,yYo,xYo,Ez,$Yo,kYo,SYo,uF,u_e,RYo,PYo,Cz,BYo,IYo,NYo,_F,__e,qYo,jYo,wz,DYo,GYo,OYo,bF,b_e,VYo,XYo,Az,zYo,WYo,QYo,vF,v_e,HYo,UYo,Lz,JYo,YYo,KYo,FF,F_e,ZYo,eKo,yz,oKo,rKo,tKo,TF,T_e,aKo,nKo,xz,sKo,lKo,iKo,MF,M_e,dKo,cKo,$z,fKo,mKo,gKo,EF,E_e,hKo,pKo,kz,uKo,_Ko,bKo,CF,C_e,vKo,FKo,Sz,TKo,MKo,EKo,wF,w_e,CKo,wKo,Rz,AKo,LKo,yKo,AF,A_e,xKo,$Ko,Pz,kKo,SKo,RKo,LF,L_e,PKo,BKo,Bz,IKo,NKo,qKo,yF,jKo,y_e,DKo,GKo,x_e,OKo,VKo,xF,kGe,cd,$F,$_e,Gy,XKo,k_e,zKo,SGe,jo,Oy,WKo,fd,QKo,Iz,HKo,UKo,Nz,JKo,YKo,KKo,Vy,ZKo,S_e,eZo,oZo,rZo,pt,Xy,tZo,R_e,aZo,nZo,md,sZo,P_e,lZo,iZo,qz,dZo,cZo,fZo,kF,mZo,so,zy,gZo,B_e,hZo,pZo,Oa,uZo,I_e,_Zo,bZo,N_e,vZo,FZo,q_e,TZo,MZo,EZo,j_e,SF,D_e,CZo,wZo,jz,AZo,LZo,yZo,RF,xZo,G_e,$Zo,kZo,O_e,SZo,RZo,PF,RGe,gd,BF,V_e,Wy,PZo,X_e,BZo,PGe,Do,Qy,IZo,hd,NZo,Dz,qZo,jZo,Gz,DZo,GZo,OZo,Hy,VZo,z_e,XZo,zZo,WZo,ut,Uy,QZo,W_e,HZo,UZo,pd,JZo,Q_e,YZo,KZo,Oz,ZZo,eer,oer,IF,rer,lo,Jy,ter,H_e,aer,ner,Va,ser,U_e,ler,ier,J_e,der,cer,Y_e,fer,mer,ger,Fe,NF,K_e,her,per,Vz,uer,_er,ber,qF,Z_e,ver,Fer,Xz,Ter,Mer,Eer,jF,e1e,Cer,wer,zz,Aer,Ler,yer,DF,o1e,xer,$er,Wz,ker,Ser,Rer,Os,r1e,Per,Ber,Qz,Ier,Ner,Hz,qer,jer,Der,GF,t1e,Ger,Oer,Uz,Ver,Xer,zer,Vs,a1e,Wer,Qer,Jz,Her,Uer,Yz,Jer,Yer,Ker,_t,n1e,Zer,eor,Kz,oor,ror,Zz,tor,aor,eW,nor,sor,lor,OF,s1e,ior,dor,oW,cor,mor,gor,VF,l1e,hor,por,rW,uor,_or,bor,XF,i1e,vor,For,tW,Tor,Mor,Eor,zF,d1e,Cor,wor,aW,Aor,Lor,yor,WF,c1e,xor,$or,nW,kor,Sor,Ror,QF,f1e,Por,Bor,sW,Ior,Nor,qor,HF,m1e,jor,Dor,lW,Gor,Oor,Vor,UF,Xor,g1e,zor,Wor,h1e,Qor,Hor,JF,BGe,ud,YF,p1e,Yy,Uor,u1e,Jor,IGe,Go,Ky,Yor,_d,Kor,iW,Zor,err,dW,orr,rrr,trr,Zy,arr,_1e,nrr,srr,lrr,bt,e8,irr,b1e,drr,crr,bd,frr,v1e,mrr,grr,cW,hrr,prr,urr,KF,_rr,io,o8,brr,F1e,vrr,Frr,Xa,Trr,T1e,Mrr,Err,M1e,Crr,wrr,E1e,Arr,Lrr,yrr,C1e,ZF,w1e,xrr,$rr,fW,krr,Srr,Rrr,e6,Prr,A1e,Brr,Irr,L1e,Nrr,qrr,o6,NGe,vd,r6,y1e,r8,jrr,x1e,Drr,qGe,Oo,t8,Grr,Fd,Orr,mW,Vrr,Xrr,gW,zrr,Wrr,Qrr,a8,Hrr,$1e,Urr,Jrr,Yrr,vt,n8,Krr,k1e,Zrr,etr,Td,otr,S1e,rtr,ttr,hW,atr,ntr,str,t6,ltr,co,s8,itr,R1e,dtr,ctr,za,ftr,P1e,mtr,gtr,B1e,htr,ptr,I1e,utr,_tr,btr,N1e,a6,q1e,vtr,Ftr,pW,Ttr,Mtr,Etr,n6,Ctr,j1e,wtr,Atr,D1e,Ltr,ytr,s6,jGe,Md,l6,G1e,l8,xtr,O1e,$tr,DGe,Vo,i8,ktr,Ed,Str,uW,Rtr,Ptr,_W,Btr,Itr,Ntr,d8,qtr,V1e,jtr,Dtr,Gtr,Ft,c8,Otr,X1e,Vtr,Xtr,Cd,ztr,z1e,Wtr,Qtr,bW,Htr,Utr,Jtr,i6,Ytr,fo,f8,Ktr,W1e,Ztr,ear,Wa,oar,Q1e,rar,tar,H1e,aar,nar,U1e,sar,lar,iar,Pe,d6,J1e,dar,car,vW,far,mar,gar,c6,Y1e,har,par,FW,uar,_ar,bar,f6,K1e,Far,Tar,TW,Mar,Ear,Car,m6,Z1e,war,Aar,MW,Lar,yar,xar,g6,e7e,$ar,kar,EW,Sar,Rar,Par,h6,o7e,Bar,Iar,CW,Nar,qar,jar,p6,r7e,Dar,Gar,wW,Oar,Var,Xar,u6,t7e,zar,War,AW,Qar,Har,Uar,_6,a7e,Jar,Yar,LW,Kar,Zar,enr,b6,onr,n7e,rnr,tnr,s7e,anr,nnr,v6,GGe,wd,F6,l7e,m8,snr,i7e,lnr,OGe,Xo,g8,inr,Ad,dnr,yW,cnr,fnr,xW,mnr,gnr,hnr,h8,pnr,d7e,unr,_nr,bnr,Tt,p8,vnr,c7e,Fnr,Tnr,Ld,Mnr,f7e,Enr,Cnr,$W,wnr,Anr,Lnr,T6,ynr,mo,u8,xnr,m7e,$nr,knr,Qa,Snr,g7e,Rnr,Pnr,h7e,Bnr,Inr,p7e,Nnr,qnr,jnr,et,M6,u7e,Dnr,Gnr,kW,Onr,Vnr,Xnr,E6,_7e,znr,Wnr,SW,Qnr,Hnr,Unr,C6,b7e,Jnr,Ynr,RW,Knr,Znr,esr,w6,v7e,osr,rsr,PW,tsr,asr,nsr,A6,F7e,ssr,lsr,BW,isr,dsr,csr,L6,fsr,T7e,msr,gsr,M7e,hsr,psr,y6,VGe,yd,x6,E7e,_8,usr,C7e,_sr,XGe,zo,b8,bsr,xd,vsr,IW,Fsr,Tsr,NW,Msr,Esr,Csr,v8,wsr,w7e,Asr,Lsr,ysr,Mt,F8,xsr,A7e,$sr,ksr,$d,Ssr,L7e,Rsr,Psr,qW,Bsr,Isr,Nsr,$6,qsr,go,T8,jsr,y7e,Dsr,Gsr,Ha,Osr,x7e,Vsr,Xsr,$7e,zsr,Wsr,k7e,Qsr,Hsr,Usr,Le,k6,S7e,Jsr,Ysr,jW,Ksr,Zsr,elr,S6,R7e,olr,rlr,DW,tlr,alr,nlr,R6,P7e,slr,llr,GW,ilr,dlr,clr,P6,B7e,flr,mlr,OW,glr,hlr,plr,B6,I7e,ulr,_lr,VW,blr,vlr,Flr,I6,N7e,Tlr,Mlr,XW,Elr,Clr,wlr,N6,q7e,Alr,Llr,zW,ylr,xlr,$lr,q6,j7e,klr,Slr,WW,Rlr,Plr,Blr,j6,D7e,Ilr,Nlr,QW,qlr,jlr,Dlr,D6,G7e,Glr,Olr,HW,Vlr,Xlr,zlr,G6,Wlr,O7e,Qlr,Hlr,V7e,Ulr,Jlr,O6,zGe,kd,V6,X7e,M8,Ylr,z7e,Klr,WGe,Wo,E8,Zlr,Sd,eir,UW,oir,rir,JW,tir,air,nir,C8,sir,W7e,lir,iir,dir,Et,w8,cir,Q7e,fir,mir,Rd,gir,H7e,hir,pir,YW,uir,_ir,bir,X6,vir,ho,A8,Fir,U7e,Tir,Mir,Ua,Eir,J7e,Cir,wir,Y7e,Air,Lir,K7e,yir,xir,$ir,L8,z6,Z7e,kir,Sir,KW,Rir,Pir,Bir,W6,e2e,Iir,Nir,ZW,qir,jir,Dir,Q6,Gir,o2e,Oir,Vir,r2e,Xir,zir,H6,QGe,Pd,U6,t2e,y8,Wir,a2e,Qir,HGe,Qo,x8,Hir,Bd,Uir,eQ,Jir,Yir,oQ,Kir,Zir,edr,$8,odr,n2e,rdr,tdr,adr,Ct,k8,ndr,s2e,sdr,ldr,Id,idr,l2e,ddr,cdr,rQ,fdr,mdr,gdr,J6,hdr,po,S8,pdr,i2e,udr,_dr,Ja,bdr,d2e,vdr,Fdr,c2e,Tdr,Mdr,f2e,Edr,Cdr,wdr,ot,Y6,m2e,Adr,Ldr,tQ,ydr,xdr,$dr,K6,g2e,kdr,Sdr,aQ,Rdr,Pdr,Bdr,Z6,h2e,Idr,Ndr,nQ,qdr,jdr,Ddr,eT,p2e,Gdr,Odr,sQ,Vdr,Xdr,zdr,oT,u2e,Wdr,Qdr,lQ,Hdr,Udr,Jdr,rT,Ydr,_2e,Kdr,Zdr,b2e,ecr,ocr,tT,UGe,Nd,aT,v2e,R8,rcr,F2e,tcr,JGe,Ho,P8,acr,qd,ncr,iQ,scr,lcr,dQ,icr,dcr,ccr,B8,fcr,T2e,mcr,gcr,hcr,wt,I8,pcr,M2e,ucr,_cr,jd,bcr,E2e,vcr,Fcr,cQ,Tcr,Mcr,Ecr,nT,Ccr,uo,N8,wcr,C2e,Acr,Lcr,Ya,ycr,w2e,xcr,$cr,A2e,kcr,Scr,L2e,Rcr,Pcr,Bcr,Dd,sT,y2e,Icr,Ncr,fQ,qcr,jcr,Dcr,lT,x2e,Gcr,Ocr,mQ,Vcr,Xcr,zcr,iT,$2e,Wcr,Qcr,gQ,Hcr,Ucr,Jcr,dT,Ycr,k2e,Kcr,Zcr,S2e,efr,ofr,cT,YGe,Gd,fT,R2e,q8,rfr,P2e,tfr,KGe,Uo,j8,afr,Od,nfr,hQ,sfr,lfr,pQ,ifr,dfr,cfr,D8,ffr,B2e,mfr,gfr,hfr,At,G8,pfr,I2e,ufr,_fr,Vd,bfr,N2e,vfr,Ffr,uQ,Tfr,Mfr,Efr,mT,Cfr,_o,O8,wfr,q2e,Afr,Lfr,Ka,yfr,j2e,xfr,$fr,D2e,kfr,Sfr,G2e,Rfr,Pfr,Bfr,V8,gT,O2e,Ifr,Nfr,_Q,qfr,jfr,Dfr,hT,V2e,Gfr,Ofr,bQ,Vfr,Xfr,zfr,pT,Wfr,X2e,Qfr,Hfr,z2e,Ufr,Jfr,uT,ZGe,Xd,_T,W2e,X8,Yfr,Q2e,Kfr,eOe,Jo,z8,Zfr,zd,emr,vQ,omr,rmr,FQ,tmr,amr,nmr,W8,smr,H2e,lmr,imr,dmr,Lt,Q8,cmr,U2e,fmr,mmr,Wd,gmr,J2e,hmr,pmr,TQ,umr,_mr,bmr,bT,vmr,bo,H8,Fmr,Y2e,Tmr,Mmr,Za,Emr,K2e,Cmr,wmr,Z2e,Amr,Lmr,ebe,ymr,xmr,$mr,obe,vT,rbe,kmr,Smr,MQ,Rmr,Pmr,Bmr,FT,Imr,tbe,Nmr,qmr,abe,jmr,Dmr,TT,oOe,Qd,MT,nbe,U8,Gmr,sbe,Omr,rOe,Yo,J8,Vmr,Hd,Xmr,EQ,zmr,Wmr,CQ,Qmr,Hmr,Umr,Y8,Jmr,lbe,Ymr,Kmr,Zmr,yt,K8,egr,ibe,ogr,rgr,Ud,tgr,dbe,agr,ngr,wQ,sgr,lgr,igr,ET,dgr,vo,Z8,cgr,cbe,fgr,mgr,en,ggr,fbe,hgr,pgr,mbe,ugr,_gr,gbe,bgr,vgr,Fgr,on,CT,hbe,Tgr,Mgr,AQ,Egr,Cgr,wgr,wT,pbe,Agr,Lgr,LQ,ygr,xgr,$gr,AT,ube,kgr,Sgr,yQ,Rgr,Pgr,Bgr,LT,_be,Igr,Ngr,xQ,qgr,jgr,Dgr,yT,Ggr,bbe,Ogr,Vgr,vbe,Xgr,zgr,xT,tOe,Jd,$T,Fbe,e9,Wgr,Tbe,Qgr,aOe,Ko,o9,Hgr,Yd,Ugr,$Q,Jgr,Ygr,kQ,Kgr,Zgr,ehr,r9,ohr,Mbe,rhr,thr,ahr,xt,t9,nhr,Ebe,shr,lhr,Kd,ihr,Cbe,dhr,chr,SQ,fhr,mhr,ghr,kT,hhr,Fo,a9,phr,wbe,uhr,_hr,rn,bhr,Abe,vhr,Fhr,Lbe,Thr,Mhr,ybe,Ehr,Chr,whr,xbe,ST,$be,Ahr,Lhr,RQ,yhr,xhr,$hr,RT,khr,kbe,Shr,Rhr,Sbe,Phr,Bhr,PT,nOe,Zd,BT,Rbe,n9,Ihr,Pbe,Nhr,sOe,Zo,s9,qhr,ec,jhr,PQ,Dhr,Ghr,BQ,Ohr,Vhr,Xhr,l9,zhr,Bbe,Whr,Qhr,Hhr,$t,i9,Uhr,Ibe,Jhr,Yhr,oc,Khr,Nbe,Zhr,epr,IQ,opr,rpr,tpr,IT,apr,Lr,d9,npr,qbe,spr,lpr,tn,ipr,jbe,dpr,cpr,Dbe,fpr,mpr,Gbe,gpr,hpr,ppr,q,NT,Obe,upr,_pr,NQ,bpr,vpr,Fpr,qT,Vbe,Tpr,Mpr,qQ,Epr,Cpr,wpr,jT,Xbe,Apr,Lpr,jQ,ypr,xpr,$pr,DT,zbe,kpr,Spr,DQ,Rpr,Ppr,Bpr,GT,Wbe,Ipr,Npr,GQ,qpr,jpr,Dpr,OT,Qbe,Gpr,Opr,OQ,Vpr,Xpr,zpr,VT,Hbe,Wpr,Qpr,VQ,Hpr,Upr,Jpr,XT,Ube,Ypr,Kpr,XQ,Zpr,eur,our,zT,Jbe,rur,tur,zQ,aur,nur,sur,WT,Ybe,lur,iur,WQ,dur,cur,fur,QT,Kbe,mur,gur,QQ,hur,pur,uur,HT,Zbe,_ur,bur,HQ,vur,Fur,Tur,UT,eve,Mur,Eur,UQ,Cur,wur,Aur,JT,ove,Lur,yur,JQ,xur,$ur,kur,YT,rve,Sur,Rur,YQ,Pur,Bur,Iur,KT,tve,Nur,qur,KQ,jur,Dur,Gur,ZT,ave,Our,Vur,ZQ,Xur,zur,Wur,Xs,nve,Qur,Hur,eH,Uur,Jur,oH,Yur,Kur,Zur,eM,sve,e_r,o_r,rH,r_r,t_r,a_r,oM,lve,n_r,s_r,tH,l_r,i_r,d_r,rM,ive,c_r,f_r,aH,m_r,g_r,h_r,tM,dve,p_r,u_r,nH,__r,b_r,v_r,aM,cve,F_r,T_r,sH,M_r,E_r,C_r,nM,fve,w_r,A_r,lH,L_r,y_r,x_r,sM,mve,$_r,k_r,iH,S_r,R_r,P_r,lM,gve,B_r,I_r,dH,N_r,q_r,j_r,iM,hve,D_r,G_r,cH,O_r,V_r,X_r,dM,pve,z_r,W_r,fH,Q_r,H_r,U_r,cM,uve,J_r,Y_r,mH,K_r,Z_r,e1r,fM,_ve,o1r,r1r,gH,t1r,a1r,n1r,mM,bve,s1r,l1r,hH,i1r,d1r,c1r,gM,vve,f1r,m1r,pH,g1r,h1r,p1r,hM,Fve,u1r,_1r,uH,b1r,v1r,F1r,pM,Tve,T1r,M1r,_H,E1r,C1r,w1r,uM,Mve,A1r,L1r,bH,y1r,x1r,$1r,_M,Eve,k1r,S1r,vH,R1r,P1r,B1r,bM,Cve,I1r,N1r,FH,q1r,j1r,D1r,vM,wve,G1r,O1r,TH,V1r,X1r,z1r,FM,Ave,W1r,Q1r,MH,H1r,U1r,J1r,TM,Lve,Y1r,K1r,EH,Z1r,e7r,o7r,MM,yve,r7r,t7r,CH,a7r,n7r,s7r,EM,xve,l7r,i7r,wH,d7r,c7r,f7r,CM,$ve,m7r,g7r,AH,h7r,p7r,u7r,wM,kve,_7r,b7r,LH,v7r,F7r,T7r,AM,Sve,M7r,E7r,yH,C7r,w7r,A7r,LM,Rve,L7r,y7r,xH,x7r,$7r,k7r,yM,Pve,S7r,R7r,$H,P7r,B7r,I7r,xM,lOe,rc,$M,Bve,c9,N7r,Ive,q7r,iOe,er,f9,j7r,tc,D7r,kH,G7r,O7r,SH,V7r,X7r,z7r,m9,W7r,Nve,Q7r,H7r,U7r,kt,g9,J7r,qve,Y7r,K7r,ac,Z7r,jve,e2r,o2r,RH,r2r,t2r,a2r,kM,n2r,yr,h9,s2r,Dve,l2r,i2r,an,d2r,Gve,c2r,f2r,Ove,m2r,g2r,Vve,h2r,p2r,u2r,se,SM,Xve,_2r,b2r,PH,v2r,F2r,T2r,RM,zve,M2r,E2r,BH,C2r,w2r,A2r,PM,Wve,L2r,y2r,IH,x2r,$2r,k2r,BM,Qve,S2r,R2r,NH,P2r,B2r,I2r,IM,Hve,N2r,q2r,qH,j2r,D2r,G2r,NM,Uve,O2r,V2r,jH,X2r,z2r,W2r,qM,Jve,Q2r,H2r,DH,U2r,J2r,Y2r,jM,Yve,K2r,Z2r,GH,ebr,obr,rbr,DM,Kve,tbr,abr,OH,nbr,sbr,lbr,GM,Zve,ibr,dbr,VH,cbr,fbr,mbr,OM,eFe,gbr,hbr,XH,pbr,ubr,_br,VM,oFe,bbr,vbr,zH,Fbr,Tbr,Mbr,XM,rFe,Ebr,Cbr,WH,wbr,Abr,Lbr,zM,tFe,ybr,xbr,QH,$br,kbr,Sbr,WM,aFe,Rbr,Pbr,HH,Bbr,Ibr,Nbr,QM,nFe,qbr,jbr,UH,Dbr,Gbr,Obr,HM,sFe,Vbr,Xbr,JH,zbr,Wbr,Qbr,UM,lFe,Hbr,Ubr,YH,Jbr,Ybr,Kbr,JM,iFe,Zbr,evr,KH,ovr,rvr,tvr,YM,dFe,avr,nvr,ZH,svr,lvr,ivr,KM,cFe,dvr,cvr,eU,fvr,mvr,gvr,ZM,fFe,hvr,pvr,oU,uvr,_vr,bvr,e4,mFe,vvr,Fvr,rU,Tvr,Mvr,Evr,o4,dOe,nc,r4,gFe,p9,Cvr,hFe,wvr,cOe,or,u9,Avr,sc,Lvr,tU,yvr,xvr,aU,$vr,kvr,Svr,_9,Rvr,pFe,Pvr,Bvr,Ivr,St,b9,Nvr,uFe,qvr,jvr,lc,Dvr,_Fe,Gvr,Ovr,nU,Vvr,Xvr,zvr,t4,Wvr,xr,v9,Qvr,bFe,Hvr,Uvr,nn,Jvr,vFe,Yvr,Kvr,FFe,Zvr,eFr,TFe,oFr,rFr,tFr,Me,a4,MFe,aFr,nFr,sU,sFr,lFr,iFr,n4,EFe,dFr,cFr,lU,fFr,mFr,gFr,s4,CFe,hFr,pFr,iU,uFr,_Fr,bFr,l4,wFe,vFr,FFr,dU,TFr,MFr,EFr,i4,AFe,CFr,wFr,cU,AFr,LFr,yFr,d4,LFe,xFr,$Fr,fU,kFr,SFr,RFr,c4,yFe,PFr,BFr,mU,IFr,NFr,qFr,f4,xFe,jFr,DFr,gU,GFr,OFr,VFr,m4,$Fe,XFr,zFr,hU,WFr,QFr,HFr,g4,kFe,UFr,JFr,pU,YFr,KFr,ZFr,h4,SFe,e6r,o6r,uU,r6r,t6r,a6r,p4,RFe,n6r,s6r,_U,l6r,i6r,d6r,u4,PFe,c6r,f6r,bU,m6r,g6r,h6r,_4,fOe,ic,b4,BFe,F9,p6r,IFe,u6r,mOe,rr,T9,_6r,dc,b6r,vU,v6r,F6r,FU,T6r,M6r,E6r,M9,C6r,NFe,w6r,A6r,L6r,Rt,E9,y6r,qFe,x6r,$6r,cc,k6r,jFe,S6r,R6r,TU,P6r,B6r,I6r,v4,N6r,$r,C9,q6r,DFe,j6r,D6r,sn,G6r,GFe,O6r,V6r,OFe,X6r,z6r,VFe,W6r,Q6r,H6r,ln,F4,XFe,U6r,J6r,MU,Y6r,K6r,Z6r,T4,zFe,eTr,oTr,EU,rTr,tTr,aTr,M4,WFe,nTr,sTr,CU,lTr,iTr,dTr,E4,QFe,cTr,fTr,wU,mTr,gTr,hTr,C4,gOe,fc,w4,HFe,w9,pTr,UFe,uTr,hOe,tr,A9,_Tr,mc,bTr,AU,vTr,FTr,LU,TTr,MTr,ETr,L9,CTr,JFe,wTr,ATr,LTr,Pt,y9,yTr,YFe,xTr,$Tr,gc,kTr,KFe,STr,RTr,yU,PTr,BTr,ITr,A4,NTr,kr,x9,qTr,ZFe,jTr,DTr,dn,GTr,e6e,OTr,VTr,o6e,XTr,zTr,r6e,WTr,QTr,HTr,ie,L4,t6e,UTr,JTr,xU,YTr,KTr,ZTr,y4,a6e,eMr,oMr,$U,rMr,tMr,aMr,x4,n6e,nMr,sMr,kU,lMr,iMr,dMr,$4,s6e,cMr,fMr,SU,mMr,gMr,hMr,k4,l6e,pMr,uMr,RU,_Mr,bMr,vMr,S4,i6e,FMr,TMr,PU,MMr,EMr,CMr,R4,d6e,wMr,AMr,BU,LMr,yMr,xMr,P4,c6e,$Mr,kMr,IU,SMr,RMr,PMr,B4,f6e,BMr,IMr,NU,NMr,qMr,jMr,I4,m6e,DMr,GMr,qU,OMr,VMr,XMr,N4,g6e,zMr,WMr,jU,QMr,HMr,UMr,q4,h6e,JMr,YMr,DU,KMr,ZMr,e4r,j4,p6e,o4r,r4r,GU,t4r,a4r,n4r,D4,u6e,s4r,l4r,OU,i4r,d4r,c4r,G4,_6e,f4r,m4r,VU,g4r,h4r,p4r,O4,b6e,u4r,_4r,XU,b4r,v4r,F4r,V4,v6e,T4r,M4r,zU,E4r,C4r,w4r,X4,F6e,A4r,L4r,WU,y4r,x4r,$4r,z4,T6e,k4r,S4r,QU,R4r,P4r,B4r,W4,M6e,I4r,N4r,HU,q4r,j4r,D4r,Q4,pOe,hc,H4,E6e,$9,G4r,C6e,O4r,uOe,ar,k9,V4r,pc,X4r,UU,z4r,W4r,JU,Q4r,H4r,U4r,S9,J4r,w6e,Y4r,K4r,Z4r,Bt,R9,eEr,A6e,oEr,rEr,uc,tEr,L6e,aEr,nEr,YU,sEr,lEr,iEr,U4,dEr,Sr,P9,cEr,y6e,fEr,mEr,cn,gEr,x6e,hEr,pEr,$6e,uEr,_Er,k6e,bEr,vEr,FEr,ye,J4,S6e,TEr,MEr,KU,EEr,CEr,wEr,Y4,R6e,AEr,LEr,ZU,yEr,xEr,$Er,K4,P6e,kEr,SEr,eJ,REr,PEr,BEr,Z4,B6e,IEr,NEr,oJ,qEr,jEr,DEr,eE,I6e,GEr,OEr,rJ,VEr,XEr,zEr,oE,N6e,WEr,QEr,tJ,HEr,UEr,JEr,rE,q6e,YEr,KEr,aJ,ZEr,eCr,oCr,tE,j6e,rCr,tCr,nJ,aCr,nCr,sCr,aE,D6e,lCr,iCr,sJ,dCr,cCr,fCr,nE,G6e,mCr,gCr,lJ,hCr,pCr,uCr,sE,_Oe,_c,lE,O6e,B9,_Cr,V6e,bCr,bOe,nr,I9,vCr,bc,FCr,iJ,TCr,MCr,dJ,ECr,CCr,wCr,N9,ACr,X6e,LCr,yCr,xCr,It,q9,$Cr,z6e,kCr,SCr,vc,RCr,W6e,PCr,BCr,cJ,ICr,NCr,qCr,iE,jCr,Rr,j9,DCr,Q6e,GCr,OCr,fn,VCr,H6e,XCr,zCr,U6e,WCr,QCr,J6e,HCr,UCr,JCr,te,dE,Y6e,YCr,KCr,fJ,ZCr,e5r,o5r,cE,K6e,r5r,t5r,mJ,a5r,n5r,s5r,fE,Z6e,l5r,i5r,gJ,d5r,c5r,f5r,mE,eTe,m5r,g5r,hJ,h5r,p5r,u5r,gE,oTe,_5r,b5r,pJ,v5r,F5r,T5r,hE,rTe,M5r,E5r,uJ,C5r,w5r,A5r,pE,tTe,L5r,y5r,_J,x5r,$5r,k5r,uE,aTe,S5r,R5r,bJ,P5r,B5r,I5r,_E,nTe,N5r,q5r,vJ,j5r,D5r,G5r,bE,sTe,O5r,V5r,FJ,X5r,z5r,W5r,vE,lTe,Q5r,H5r,TJ,U5r,J5r,Y5r,FE,iTe,K5r,Z5r,MJ,e3r,o3r,r3r,TE,dTe,t3r,a3r,EJ,n3r,s3r,l3r,ME,cTe,i3r,d3r,CJ,c3r,f3r,m3r,EE,fTe,g3r,h3r,wJ,p3r,u3r,_3r,CE,mTe,b3r,v3r,AJ,F3r,T3r,M3r,wE,gTe,E3r,C3r,LJ,w3r,A3r,L3r,AE,hTe,y3r,x3r,yJ,$3r,k3r,S3r,LE,pTe,R3r,P3r,xJ,B3r,I3r,N3r,yE,uTe,q3r,j3r,$J,D3r,G3r,O3r,xE,_Te,V3r,X3r,kJ,z3r,W3r,Q3r,$E,bTe,H3r,U3r,SJ,J3r,Y3r,K3r,kE,vTe,Z3r,e0r,RJ,o0r,r0r,t0r,SE,FTe,a0r,n0r,PJ,s0r,l0r,i0r,RE,TTe,d0r,c0r,BJ,f0r,m0r,g0r,PE,MTe,h0r,p0r,IJ,u0r,_0r,b0r,BE,vOe,Fc,IE,ETe,D9,v0r,CTe,F0r,FOe,sr,G9,T0r,Tc,M0r,NJ,E0r,C0r,qJ,w0r,A0r,L0r,O9,y0r,wTe,x0r,$0r,k0r,Nt,V9,S0r,ATe,R0r,P0r,Mc,B0r,LTe,I0r,N0r,jJ,q0r,j0r,D0r,NE,G0r,Pr,X9,O0r,yTe,V0r,X0r,mn,z0r,xTe,W0r,Q0r,$Te,H0r,U0r,kTe,J0r,Y0r,K0r,ue,qE,STe,Z0r,ewr,DJ,owr,rwr,twr,jE,RTe,awr,nwr,GJ,swr,lwr,iwr,DE,PTe,dwr,cwr,OJ,fwr,mwr,gwr,GE,BTe,hwr,pwr,VJ,uwr,_wr,bwr,OE,ITe,vwr,Fwr,XJ,Twr,Mwr,Ewr,VE,NTe,Cwr,wwr,zJ,Awr,Lwr,ywr,XE,qTe,xwr,$wr,WJ,kwr,Swr,Rwr,zE,jTe,Pwr,Bwr,QJ,Iwr,Nwr,qwr,WE,DTe,jwr,Dwr,HJ,Gwr,Owr,Vwr,QE,GTe,Xwr,zwr,UJ,Wwr,Qwr,Hwr,HE,OTe,Uwr,Jwr,JJ,Ywr,Kwr,Zwr,UE,VTe,eAr,oAr,YJ,rAr,tAr,aAr,JE,XTe,nAr,sAr,KJ,lAr,iAr,dAr,YE,zTe,cAr,fAr,ZJ,mAr,gAr,hAr,KE,WTe,pAr,uAr,eY,_Ar,bAr,vAr,ZE,QTe,FAr,TAr,oY,MAr,EAr,CAr,eC,HTe,wAr,AAr,rY,LAr,yAr,xAr,oC,TOe,Ec,rC,UTe,z9,$Ar,JTe,kAr,MOe,lr,W9,SAr,Cc,RAr,tY,PAr,BAr,aY,IAr,NAr,qAr,Q9,jAr,YTe,DAr,GAr,OAr,qt,H9,VAr,KTe,XAr,zAr,wc,WAr,ZTe,QAr,HAr,nY,UAr,JAr,YAr,tC,KAr,Br,U9,ZAr,eMe,eLr,oLr,gn,rLr,oMe,tLr,aLr,rMe,nLr,sLr,tMe,lLr,iLr,dLr,J9,aC,aMe,cLr,fLr,sY,mLr,gLr,hLr,nC,nMe,pLr,uLr,lY,_Lr,bLr,vLr,sC,EOe,Ac,lC,sMe,Y9,FLr,lMe,TLr,COe,ir,K9,MLr,Lc,ELr,iY,CLr,wLr,dY,ALr,LLr,yLr,Z9,xLr,iMe,$Lr,kLr,SLr,jt,ex,RLr,dMe,PLr,BLr,yc,ILr,cMe,NLr,qLr,cY,jLr,DLr,GLr,iC,OLr,Ir,ox,VLr,fMe,XLr,zLr,hn,WLr,mMe,QLr,HLr,gMe,ULr,JLr,hMe,YLr,KLr,ZLr,pMe,dC,uMe,eyr,oyr,fY,ryr,tyr,ayr,cC,wOe,xc,fC,_Me,rx,nyr,bMe,syr,AOe,dr,tx,lyr,$c,iyr,mY,dyr,cyr,gY,fyr,myr,gyr,ax,hyr,vMe,pyr,uyr,_yr,Dt,nx,byr,FMe,vyr,Fyr,kc,Tyr,TMe,Myr,Eyr,hY,Cyr,wyr,Ayr,mC,Lyr,Nr,sx,yyr,MMe,xyr,$yr,pn,kyr,EMe,Syr,Ryr,CMe,Pyr,Byr,wMe,Iyr,Nyr,qyr,de,gC,AMe,jyr,Dyr,pY,Gyr,Oyr,Vyr,hC,LMe,Xyr,zyr,uY,Wyr,Qyr,Hyr,pC,yMe,Uyr,Jyr,_Y,Yyr,Kyr,Zyr,uC,xMe,e8r,o8r,bY,r8r,t8r,a8r,_C,$Me,n8r,s8r,vY,l8r,i8r,d8r,bC,kMe,c8r,f8r,FY,m8r,g8r,h8r,vC,SMe,p8r,u8r,TY,_8r,b8r,v8r,FC,RMe,F8r,T8r,MY,M8r,E8r,C8r,TC,PMe,w8r,A8r,EY,L8r,y8r,x8r,MC,BMe,$8r,k8r,CY,S8r,R8r,P8r,EC,IMe,B8r,I8r,wY,N8r,q8r,j8r,CC,NMe,D8r,G8r,AY,O8r,V8r,X8r,wC,qMe,z8r,W8r,LY,Q8r,H8r,U8r,AC,jMe,J8r,Y8r,yY,K8r,Z8r,e9r,LC,DMe,o9r,r9r,xY,t9r,a9r,n9r,yC,GMe,s9r,l9r,$Y,i9r,d9r,c9r,xC,OMe,f9r,m9r,kY,g9r,h9r,p9r,$C,VMe,u9r,_9r,SY,b9r,v9r,F9r,kC,XMe,T9r,M9r,RY,E9r,C9r,w9r,SC,zMe,A9r,L9r,PY,y9r,x9r,$9r,RC,LOe,Sc,PC,WMe,lx,k9r,QMe,S9r,yOe,cr,ix,R9r,Rc,P9r,BY,B9r,I9r,IY,N9r,q9r,j9r,dx,D9r,HMe,G9r,O9r,V9r,Gt,cx,X9r,UMe,z9r,W9r,Pc,Q9r,JMe,H9r,U9r,NY,J9r,Y9r,K9r,BC,Z9r,qr,fx,exr,YMe,oxr,rxr,un,txr,KMe,axr,nxr,ZMe,sxr,lxr,e4e,ixr,dxr,cxr,ce,IC,o4e,fxr,mxr,qY,gxr,hxr,pxr,NC,r4e,uxr,_xr,jY,bxr,vxr,Fxr,qC,t4e,Txr,Mxr,DY,Exr,Cxr,wxr,jC,a4e,Axr,Lxr,GY,yxr,xxr,$xr,DC,n4e,kxr,Sxr,OY,Rxr,Pxr,Bxr,GC,s4e,Ixr,Nxr,VY,qxr,jxr,Dxr,OC,l4e,Gxr,Oxr,XY,Vxr,Xxr,zxr,VC,i4e,Wxr,Qxr,zY,Hxr,Uxr,Jxr,XC,d4e,Yxr,Kxr,WY,Zxr,e$r,o$r,zC,c4e,r$r,t$r,QY,a$r,n$r,s$r,WC,f4e,l$r,i$r,HY,d$r,c$r,f$r,QC,m4e,m$r,g$r,UY,h$r,p$r,u$r,HC,g4e,_$r,b$r,JY,v$r,F$r,T$r,UC,h4e,M$r,E$r,YY,C$r,w$r,A$r,JC,p4e,L$r,y$r,KY,x$r,$$r,k$r,YC,u4e,S$r,R$r,ZY,P$r,B$r,I$r,KC,_4e,N$r,q$r,eK,j$r,D$r,G$r,ZC,b4e,O$r,V$r,oK,X$r,z$r,W$r,e5,v4e,Q$r,H$r,rK,U$r,J$r,Y$r,o5,F4e,K$r,Z$r,tK,ekr,okr,rkr,r5,xOe,Bc,t5,T4e,mx,tkr,M4e,akr,$Oe,fr,gx,nkr,Ic,skr,aK,lkr,ikr,nK,dkr,ckr,fkr,hx,mkr,E4e,gkr,hkr,pkr,Ot,px,ukr,C4e,_kr,bkr,Nc,vkr,w4e,Fkr,Tkr,sK,Mkr,Ekr,Ckr,a5,wkr,jr,ux,Akr,A4e,Lkr,ykr,_n,xkr,L4e,$kr,kkr,y4e,Skr,Rkr,x4e,Pkr,Bkr,Ikr,$4e,n5,k4e,Nkr,qkr,lK,jkr,Dkr,Gkr,s5,kOe,qc,l5,S4e,_x,Okr,R4e,Vkr,SOe,mr,bx,Xkr,jc,zkr,iK,Wkr,Qkr,dK,Hkr,Ukr,Jkr,vx,Ykr,P4e,Kkr,Zkr,eSr,Vt,Fx,oSr,B4e,rSr,tSr,Dc,aSr,I4e,nSr,sSr,cK,lSr,iSr,dSr,i5,cSr,Dr,Tx,fSr,N4e,mSr,gSr,bn,hSr,q4e,pSr,uSr,j4e,_Sr,bSr,D4e,vSr,FSr,TSr,G4e,d5,O4e,MSr,ESr,fK,CSr,wSr,ASr,c5,ROe,Gc,f5,V4e,Mx,LSr,X4e,ySr,POe,gr,Ex,xSr,Oc,$Sr,mK,kSr,SSr,gK,RSr,PSr,BSr,Cx,ISr,z4e,NSr,qSr,jSr,Xt,wx,DSr,W4e,GSr,OSr,Vc,VSr,Q4e,XSr,zSr,hK,WSr,QSr,HSr,m5,USr,Gr,Ax,JSr,H4e,YSr,KSr,vn,ZSr,U4e,eRr,oRr,J4e,rRr,tRr,Y4e,aRr,nRr,sRr,oe,g5,K4e,lRr,iRr,pK,dRr,cRr,fRr,h5,Z4e,mRr,gRr,uK,hRr,pRr,uRr,p5,eEe,_Rr,bRr,_K,vRr,FRr,TRr,u5,oEe,MRr,ERr,bK,CRr,wRr,ARr,_5,rEe,LRr,yRr,vK,xRr,$Rr,kRr,b5,tEe,SRr,RRr,FK,PRr,BRr,IRr,v5,aEe,NRr,qRr,TK,jRr,DRr,GRr,F5,nEe,ORr,VRr,MK,XRr,zRr,WRr,T5,sEe,QRr,HRr,EK,URr,JRr,YRr,M5,lEe,KRr,ZRr,CK,ePr,oPr,rPr,E5,iEe,tPr,aPr,wK,nPr,sPr,lPr,C5,dEe,iPr,dPr,AK,cPr,fPr,mPr,w5,cEe,gPr,hPr,LK,pPr,uPr,_Pr,A5,fEe,bPr,vPr,yK,FPr,TPr,MPr,L5,mEe,EPr,CPr,xK,wPr,APr,LPr,y5,gEe,yPr,xPr,$K,$Pr,kPr,SPr,x5,hEe,RPr,PPr,kK,BPr,IPr,NPr,$5,pEe,qPr,jPr,SK,DPr,GPr,OPr,k5,uEe,VPr,XPr,RK,zPr,WPr,QPr,S5,_Ee,HPr,UPr,PK,JPr,YPr,KPr,R5,bEe,ZPr,eBr,BK,oBr,rBr,tBr,P5,vEe,aBr,nBr,IK,sBr,lBr,iBr,B5,FEe,dBr,cBr,NK,fBr,mBr,gBr,I5,TEe,hBr,pBr,qK,uBr,_Br,bBr,N5,MEe,vBr,FBr,jK,TBr,MBr,EBr,q5,EEe,CBr,wBr,DK,ABr,LBr,yBr,j5,CEe,xBr,$Br,GK,kBr,SBr,RBr,D5,BOe,Xc,G5,wEe,Lx,PBr,AEe,BBr,IOe,hr,yx,IBr,zc,NBr,OK,qBr,jBr,VK,DBr,GBr,OBr,xx,VBr,LEe,XBr,zBr,WBr,zt,$x,QBr,yEe,HBr,UBr,Wc,JBr,xEe,YBr,KBr,XK,ZBr,eIr,oIr,O5,rIr,Or,kx,tIr,$Ee,aIr,nIr,Fn,sIr,kEe,lIr,iIr,SEe,dIr,cIr,REe,fIr,mIr,gIr,xe,V5,PEe,hIr,pIr,zK,uIr,_Ir,bIr,X5,BEe,vIr,FIr,WK,TIr,MIr,EIr,z5,IEe,CIr,wIr,QK,AIr,LIr,yIr,W5,NEe,xIr,$Ir,HK,kIr,SIr,RIr,Q5,qEe,PIr,BIr,UK,IIr,NIr,qIr,H5,jEe,jIr,DIr,JK,GIr,OIr,VIr,U5,DEe,XIr,zIr,YK,WIr,QIr,HIr,J5,GEe,UIr,JIr,KK,YIr,KIr,ZIr,Y5,OEe,eNr,oNr,ZK,rNr,tNr,aNr,K5,VEe,nNr,sNr,eZ,lNr,iNr,dNr,Z5,NOe,Qc,e3,XEe,Sx,cNr,zEe,fNr,qOe,pr,Rx,mNr,Hc,gNr,oZ,hNr,pNr,rZ,uNr,_Nr,bNr,Px,vNr,WEe,FNr,TNr,MNr,Wt,Bx,ENr,QEe,CNr,wNr,Uc,ANr,HEe,LNr,yNr,tZ,xNr,$Nr,kNr,o3,SNr,Vr,Ix,RNr,UEe,PNr,BNr,Tn,INr,JEe,NNr,qNr,YEe,jNr,DNr,KEe,GNr,ONr,VNr,Ee,r3,ZEe,XNr,zNr,aZ,WNr,QNr,HNr,t3,eCe,UNr,JNr,nZ,YNr,KNr,ZNr,a3,oCe,eqr,oqr,sZ,rqr,tqr,aqr,n3,rCe,nqr,sqr,lZ,lqr,iqr,dqr,s3,tCe,cqr,fqr,iZ,mqr,gqr,hqr,l3,aCe,pqr,uqr,dZ,_qr,bqr,vqr,i3,nCe,Fqr,Tqr,cZ,Mqr,Eqr,Cqr,d3,sCe,wqr,Aqr,fZ,Lqr,yqr,xqr,c3,lCe,$qr,kqr,mZ,Sqr,Rqr,Pqr,f3,iCe,Bqr,Iqr,gZ,Nqr,qqr,jqr,m3,dCe,Dqr,Gqr,hZ,Oqr,Vqr,Xqr,g3,cCe,zqr,Wqr,pZ,Qqr,Hqr,Uqr,h3,fCe,Jqr,Yqr,uZ,Kqr,Zqr,ejr,p3,jOe,Jc,u3,mCe,Nx,ojr,gCe,rjr,DOe,ur,qx,tjr,Yc,ajr,_Z,njr,sjr,bZ,ljr,ijr,djr,jx,cjr,hCe,fjr,mjr,gjr,Qt,Dx,hjr,pCe,pjr,ujr,Kc,_jr,uCe,bjr,vjr,vZ,Fjr,Tjr,Mjr,_3,Ejr,Xr,Gx,Cjr,_Ce,wjr,Ajr,Mn,Ljr,bCe,yjr,xjr,vCe,$jr,kjr,FCe,Sjr,Rjr,Pjr,$e,b3,TCe,Bjr,Ijr,FZ,Njr,qjr,jjr,v3,MCe,Djr,Gjr,TZ,Ojr,Vjr,Xjr,F3,ECe,zjr,Wjr,MZ,Qjr,Hjr,Ujr,T3,CCe,Jjr,Yjr,EZ,Kjr,Zjr,eDr,M3,wCe,oDr,rDr,CZ,tDr,aDr,nDr,E3,ACe,sDr,lDr,wZ,iDr,dDr,cDr,C3,LCe,fDr,mDr,AZ,gDr,hDr,pDr,w3,yCe,uDr,_Dr,LZ,bDr,vDr,FDr,A3,xCe,TDr,MDr,yZ,EDr,CDr,wDr,L3,$Ce,ADr,LDr,xZ,yDr,xDr,$Dr,y3,GOe,Zc,x3,kCe,Ox,kDr,SCe,SDr,OOe,_r,Vx,RDr,ef,PDr,$Z,BDr,IDr,kZ,NDr,qDr,jDr,Xx,DDr,RCe,GDr,ODr,VDr,Ht,zx,XDr,PCe,zDr,WDr,of,QDr,BCe,HDr,UDr,SZ,JDr,YDr,KDr,$3,ZDr,zr,Wx,eGr,ICe,oGr,rGr,En,tGr,NCe,aGr,nGr,qCe,sGr,lGr,jCe,iGr,dGr,cGr,ke,k3,DCe,fGr,mGr,RZ,gGr,hGr,pGr,S3,GCe,uGr,_Gr,PZ,bGr,vGr,FGr,R3,OCe,TGr,MGr,BZ,EGr,CGr,wGr,P3,VCe,AGr,LGr,IZ,yGr,xGr,$Gr,B3,XCe,kGr,SGr,NZ,RGr,PGr,BGr,I3,zCe,IGr,NGr,qZ,qGr,jGr,DGr,N3,WCe,GGr,OGr,jZ,VGr,XGr,zGr,q3,QCe,WGr,QGr,DZ,HGr,UGr,JGr,j3,HCe,YGr,KGr,GZ,ZGr,eOr,oOr,D3,UCe,rOr,tOr,OZ,aOr,nOr,sOr,G3,VOe,rf,O3,JCe,Qx,lOr,YCe,iOr,XOe,br,Hx,dOr,tf,cOr,VZ,fOr,mOr,XZ,gOr,hOr,pOr,Ux,uOr,KCe,_Or,bOr,vOr,Ut,Jx,FOr,ZCe,TOr,MOr,af,EOr,e5e,COr,wOr,zZ,AOr,LOr,yOr,V3,xOr,Wr,Yx,$Or,o5e,kOr,SOr,Cn,ROr,r5e,POr,BOr,t5e,IOr,NOr,a5e,qOr,jOr,DOr,Se,X3,n5e,GOr,OOr,WZ,VOr,XOr,zOr,z3,s5e,WOr,QOr,QZ,HOr,UOr,JOr,W3,l5e,YOr,KOr,HZ,ZOr,eVr,oVr,Q3,i5e,rVr,tVr,UZ,aVr,nVr,sVr,H3,d5e,lVr,iVr,JZ,dVr,cVr,fVr,U3,c5e,mVr,gVr,YZ,hVr,pVr,uVr,J3,f5e,_Vr,bVr,KZ,vVr,FVr,TVr,Y3,m5e,MVr,EVr,ZZ,CVr,wVr,AVr,K3,g5e,LVr,yVr,eee,xVr,$Vr,kVr,Z3,h5e,SVr,RVr,oee,PVr,BVr,IVr,e0,zOe,nf,o0,p5e,Kx,NVr,u5e,qVr,WOe,vr,Zx,jVr,sf,DVr,ree,GVr,OVr,tee,VVr,XVr,zVr,e$,WVr,_5e,QVr,HVr,UVr,Jt,o$,JVr,b5e,YVr,KVr,lf,ZVr,v5e,eXr,oXr,aee,rXr,tXr,aXr,r0,nXr,Qr,r$,sXr,F5e,lXr,iXr,wn,dXr,T5e,cXr,fXr,M5e,mXr,gXr,E5e,hXr,pXr,uXr,Re,t0,C5e,_Xr,bXr,nee,vXr,FXr,TXr,a0,w5e,MXr,EXr,see,CXr,wXr,AXr,n0,A5e,LXr,yXr,lee,xXr,$Xr,kXr,s0,L5e,SXr,RXr,iee,PXr,BXr,IXr,l0,y5e,NXr,qXr,dee,jXr,DXr,GXr,i0,x5e,OXr,VXr,cee,XXr,zXr,WXr,d0,$5e,QXr,HXr,fee,UXr,JXr,YXr,c0,k5e,KXr,ZXr,mee,ezr,ozr,rzr,f0,S5e,tzr,azr,gee,nzr,szr,lzr,m0,R5e,izr,dzr,hee,czr,fzr,mzr,g0,QOe,df,h0,P5e,t$,gzr,B5e,hzr,HOe,Fr,a$,pzr,cf,uzr,pee,_zr,bzr,uee,vzr,Fzr,Tzr,n$,Mzr,I5e,Ezr,Czr,wzr,Yt,s$,Azr,N5e,Lzr,yzr,ff,xzr,q5e,$zr,kzr,_ee,Szr,Rzr,Pzr,p0,Bzr,Hr,l$,Izr,j5e,Nzr,qzr,An,jzr,D5e,Dzr,Gzr,G5e,Ozr,Vzr,O5e,Xzr,zzr,Wzr,Ve,u0,V5e,Qzr,Hzr,bee,Uzr,Jzr,Yzr,_0,X5e,Kzr,Zzr,vee,eWr,oWr,rWr,b0,z5e,tWr,aWr,Fee,nWr,sWr,lWr,v0,W5e,iWr,dWr,Tee,cWr,fWr,mWr,F0,Q5e,gWr,hWr,Mee,pWr,uWr,_Wr,T0,H5e,bWr,vWr,Eee,FWr,TWr,MWr,M0,U5e,EWr,CWr,Cee,wWr,AWr,LWr,E0,J5e,yWr,xWr,wee,$Wr,kWr,SWr,C0,UOe,mf,w0,Y5e,i$,RWr,K5e,PWr,JOe,Tr,d$,BWr,gf,IWr,Aee,NWr,qWr,Lee,jWr,DWr,GWr,c$,OWr,Z5e,VWr,XWr,zWr,Kt,f$,WWr,e3e,QWr,HWr,hf,UWr,o3e,JWr,YWr,yee,KWr,ZWr,eQr,A0,oQr,Ur,m$,rQr,r3e,tQr,aQr,Ln,nQr,t3e,sQr,lQr,a3e,iQr,dQr,n3e,cQr,fQr,mQr,Xe,L0,s3e,gQr,hQr,xee,pQr,uQr,_Qr,y0,l3e,bQr,vQr,$ee,FQr,TQr,MQr,x0,i3e,EQr,CQr,kee,wQr,AQr,LQr,$0,d3e,yQr,xQr,See,$Qr,kQr,SQr,k0,c3e,RQr,PQr,Ree,BQr,IQr,NQr,S0,f3e,qQr,jQr,Pee,DQr,GQr,OQr,R0,m3e,VQr,XQr,Bee,zQr,WQr,QQr,P0,g3e,HQr,UQr,Iee,JQr,YQr,KQr,B0,YOe,pf,I0,h3e,g$,ZQr,p3e,eHr,KOe,Mr,h$,oHr,uf,rHr,Nee,tHr,aHr,qee,nHr,sHr,lHr,p$,iHr,u3e,dHr,cHr,fHr,Zt,u$,mHr,_3e,gHr,hHr,_f,pHr,b3e,uHr,_Hr,jee,bHr,vHr,FHr,N0,THr,Jr,_$,MHr,v3e,EHr,CHr,yn,wHr,F3e,AHr,LHr,T3e,yHr,xHr,M3e,$Hr,kHr,SHr,E3e,q0,C3e,RHr,PHr,Dee,BHr,IHr,NHr,j0,ZOe,bf,D0,w3e,b$,qHr,A3e,jHr,eVe,Er,v$,DHr,vf,GHr,Gee,OHr,VHr,Oee,XHr,zHr,WHr,F$,QHr,L3e,HHr,UHr,JHr,ea,T$,YHr,y3e,KHr,ZHr,Ff,eUr,x3e,oUr,rUr,Vee,tUr,aUr,nUr,G0,sUr,Yr,M$,lUr,$3e,iUr,dUr,xn,cUr,k3e,fUr,mUr,S3e,gUr,hUr,R3e,pUr,uUr,_Ur,E$,O0,P3e,bUr,vUr,Xee,FUr,TUr,MUr,V0,B3e,EUr,CUr,zee,wUr,AUr,LUr,X0,oVe,Tf,z0,I3e,C$,yUr,N3e,xUr,rVe,Cr,w$,$Ur,Mf,kUr,Wee,SUr,RUr,Qee,PUr,BUr,IUr,A$,NUr,q3e,qUr,jUr,DUr,oa,L$,GUr,j3e,OUr,VUr,Ef,XUr,D3e,zUr,WUr,Hee,QUr,HUr,UUr,W0,JUr,Kr,y$,YUr,G3e,KUr,ZUr,$n,eJr,O3e,oJr,rJr,V3e,tJr,aJr,X3e,nJr,sJr,lJr,z3e,Q0,W3e,iJr,dJr,Uee,cJr,fJr,mJr,H0,tVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vL=new re({}),FL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new gJr({props:{warning:!0,$$slots:{default:[bqt]},$$scope:{ctx:y}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/configuration_auto.py#L594"}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:y}}}),AL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/configuration_auto.py#L740"}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/tokenization_auto.py#L399"}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Fqt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/tokenization_auto.py#L612"}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17761/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),rp=new gJr({props:{$$slots:{default:[Tqt]},$$scope:{ctx:y}}}),tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Mqt]},$$scope:{ctx:y}}}),qL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/processing_auto.py#L88"}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/processing_auto.py#L102"}}),Ep=new gJr({props:{$$slots:{default:[Eqt]},$$scope:{ctx:y}}}),Cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Cqt]},$$scope:{ctx:y}}}),XL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/processing_auto.py#L255"}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L758"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),Lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wqt]},$$scope:{ctx:y}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Aqt]},$$scope:{ctx:y}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L765"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:y}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:y}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L780"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xqt]},$$scope:{ctx:y}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L787"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L794"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),uy=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L803"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L848"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L855"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L841"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L812"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L819"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L864"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L903"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L830"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L910"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L933"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),_8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L917"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L924"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L942"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L949"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L896"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L871"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L878"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_auto.py#L887"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$9=new re({}),k9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),z9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),_x=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17761/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17761/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17761/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),pL=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),uL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),_L=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),bL=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),zk=o("will create a model that is an instance of "),Ai=a("a"),Wk=o("BertModel"),Qk=o("."),Co=l(),xa=a("p"),Hk=o("There is one class of "),$f=a("code"),Uk=o("AutoModel"),gze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KDe=l(),Li=a("h2"),kf=a("a"),Xre=a("span"),F(vL.$$.fragment),hze=l(),zre=a("span"),pze=o("Extending the Auto Classes"),ZDe=l(),In=a("p"),uze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=a("code"),_ze=o("NewModel"),bze=o(", make sure you have a "),Qre=a("code"),vze=o("NewModelConfig"),Fze=o(` then you can add those to the auto
classes like this:`),eGe=l(),F(FL.$$.fragment),oGe=l(),Jk=a("p"),Tze=o("You will then be able to use the auto classes like you would usually do!"),rGe=l(),F(Sf.$$.fragment),tGe=l(),yi=a("h2"),Rf=a("a"),Hre=a("span"),F(TL.$$.fragment),Mze=l(),Ure=a("span"),Eze=o("AutoConfig"),aGe=l(),wo=a("div"),F(ML.$$.fragment),Cze=l(),EL=a("p"),wze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=a("a"),Aze=o("from_pretrained()"),Lze=o(" class method."),yze=l(),CL=a("p"),xze=o("This class cannot be instantiated directly using "),Jre=a("code"),$ze=o("__init__()"),kze=o(" (throws an error)."),Sze=l(),wr=a("div"),F(wL.$$.fragment),Rze=l(),Yre=a("p"),Pze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Bze=l(),xi=a("p"),Ize=o("The configuration class to instantiate is selected based on the "),Kre=a("code"),Nze=o("model_type"),qze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=a("code"),jze=o("pretrained_model_name_or_path"),Dze=o(":"),Gze=l(),A=a("ul"),Pf=a("li"),ete=a("strong"),Oze=o("albert"),Vze=o(" \u2014 "),Kk=a("a"),Xze=o("AlbertConfig"),zze=o(" (ALBERT model)"),Wze=l(),Bf=a("li"),ote=a("strong"),Qze=o("bart"),Hze=o(" \u2014 "),Zk=a("a"),Uze=o("BartConfig"),Jze=o(" (BART model)"),Yze=l(),If=a("li"),rte=a("strong"),Kze=o("beit"),Zze=o(" \u2014 "),eS=a("a"),eWe=o("BeitConfig"),oWe=o(" (BEiT model)"),rWe=l(),Nf=a("li"),tte=a("strong"),tWe=o("bert"),aWe=o(" \u2014 "),oS=a("a"),nWe=o("BertConfig"),sWe=o(" (BERT model)"),lWe=l(),qf=a("li"),ate=a("strong"),iWe=o("bert-generation"),dWe=o(" \u2014 "),rS=a("a"),cWe=o("BertGenerationConfig"),fWe=o(" (Bert Generation model)"),mWe=l(),jf=a("li"),nte=a("strong"),gWe=o("big_bird"),hWe=o(" \u2014 "),tS=a("a"),pWe=o("BigBirdConfig"),uWe=o(" (BigBird model)"),_We=l(),Df=a("li"),ste=a("strong"),bWe=o("bigbird_pegasus"),vWe=o(" \u2014 "),aS=a("a"),FWe=o("BigBirdPegasusConfig"),TWe=o(" (BigBird-Pegasus model)"),MWe=l(),Gf=a("li"),lte=a("strong"),EWe=o("blenderbot"),CWe=o(" \u2014 "),nS=a("a"),wWe=o("BlenderbotConfig"),AWe=o(" (Blenderbot model)"),LWe=l(),Of=a("li"),ite=a("strong"),yWe=o("blenderbot-small"),xWe=o(" \u2014 "),sS=a("a"),$We=o("BlenderbotSmallConfig"),kWe=o(" (BlenderbotSmall model)"),SWe=l(),Vf=a("li"),dte=a("strong"),RWe=o("bloom"),PWe=o(" \u2014 "),lS=a("a"),BWe=o("BloomConfig"),IWe=o(" (BLOOM model)"),NWe=l(),Xf=a("li"),cte=a("strong"),qWe=o("camembert"),jWe=o(" \u2014 "),iS=a("a"),DWe=o("CamembertConfig"),GWe=o(" (CamemBERT model)"),OWe=l(),zf=a("li"),fte=a("strong"),VWe=o("canine"),XWe=o(" \u2014 "),dS=a("a"),zWe=o("CanineConfig"),WWe=o(" (CANINE model)"),QWe=l(),Wf=a("li"),mte=a("strong"),HWe=o("clip"),UWe=o(" \u2014 "),cS=a("a"),JWe=o("CLIPConfig"),YWe=o(" (CLIP model)"),KWe=l(),Qf=a("li"),gte=a("strong"),ZWe=o("convbert"),eQe=o(" \u2014 "),fS=a("a"),oQe=o("ConvBertConfig"),rQe=o(" (ConvBERT model)"),tQe=l(),Hf=a("li"),hte=a("strong"),aQe=o("convnext"),nQe=o(" \u2014 "),mS=a("a"),sQe=o("ConvNextConfig"),lQe=o(" (ConvNeXT model)"),iQe=l(),Uf=a("li"),pte=a("strong"),dQe=o("ctrl"),cQe=o(" \u2014 "),gS=a("a"),fQe=o("CTRLConfig"),mQe=o(" (CTRL model)"),gQe=l(),Jf=a("li"),ute=a("strong"),hQe=o("cvt"),pQe=o(" \u2014 "),hS=a("a"),uQe=o("CvtConfig"),_Qe=o(" (CvT model)"),bQe=l(),Yf=a("li"),_te=a("strong"),vQe=o("data2vec-audio"),FQe=o(" \u2014 "),pS=a("a"),TQe=o("Data2VecAudioConfig"),MQe=o(" (Data2VecAudio model)"),EQe=l(),Kf=a("li"),bte=a("strong"),CQe=o("data2vec-text"),wQe=o(" \u2014 "),uS=a("a"),AQe=o("Data2VecTextConfig"),LQe=o(" (Data2VecText model)"),yQe=l(),Zf=a("li"),vte=a("strong"),xQe=o("data2vec-vision"),$Qe=o(" \u2014 "),_S=a("a"),kQe=o("Data2VecVisionConfig"),SQe=o(" (Data2VecVision model)"),RQe=l(),em=a("li"),Fte=a("strong"),PQe=o("deberta"),BQe=o(" \u2014 "),bS=a("a"),IQe=o("DebertaConfig"),NQe=o(" (DeBERTa model)"),qQe=l(),om=a("li"),Tte=a("strong"),jQe=o("deberta-v2"),DQe=o(" \u2014 "),vS=a("a"),GQe=o("DebertaV2Config"),OQe=o(" (DeBERTa-v2 model)"),VQe=l(),rm=a("li"),Mte=a("strong"),XQe=o("decision_transformer"),zQe=o(" \u2014 "),FS=a("a"),WQe=o("DecisionTransformerConfig"),QQe=o(" (Decision Transformer model)"),HQe=l(),tm=a("li"),Ete=a("strong"),UQe=o("deit"),JQe=o(" \u2014 "),TS=a("a"),YQe=o("DeiTConfig"),KQe=o(" (DeiT model)"),ZQe=l(),am=a("li"),Cte=a("strong"),eHe=o("detr"),oHe=o(" \u2014 "),MS=a("a"),rHe=o("DetrConfig"),tHe=o(" (DETR model)"),aHe=l(),nm=a("li"),wte=a("strong"),nHe=o("distilbert"),sHe=o(" \u2014 "),ES=a("a"),lHe=o("DistilBertConfig"),iHe=o(" (DistilBERT model)"),dHe=l(),sm=a("li"),Ate=a("strong"),cHe=o("dpr"),fHe=o(" \u2014 "),CS=a("a"),mHe=o("DPRConfig"),gHe=o(" (DPR model)"),hHe=l(),lm=a("li"),Lte=a("strong"),pHe=o("dpt"),uHe=o(" \u2014 "),wS=a("a"),_He=o("DPTConfig"),bHe=o(" (DPT model)"),vHe=l(),im=a("li"),yte=a("strong"),FHe=o("electra"),THe=o(" \u2014 "),AS=a("a"),MHe=o("ElectraConfig"),EHe=o(" (ELECTRA model)"),CHe=l(),dm=a("li"),xte=a("strong"),wHe=o("encoder-decoder"),AHe=o(" \u2014 "),LS=a("a"),LHe=o("EncoderDecoderConfig"),yHe=o(" (Encoder decoder model)"),xHe=l(),cm=a("li"),$te=a("strong"),$He=o("flaubert"),kHe=o(" \u2014 "),yS=a("a"),SHe=o("FlaubertConfig"),RHe=o(" (FlauBERT model)"),PHe=l(),fm=a("li"),kte=a("strong"),BHe=o("flava"),IHe=o(" \u2014 "),xS=a("a"),NHe=o("FlavaConfig"),qHe=o(" (FLAVA model)"),jHe=l(),mm=a("li"),Ste=a("strong"),DHe=o("fnet"),GHe=o(" \u2014 "),$S=a("a"),OHe=o("FNetConfig"),VHe=o(" (FNet model)"),XHe=l(),gm=a("li"),Rte=a("strong"),zHe=o("fsmt"),WHe=o(" \u2014 "),kS=a("a"),QHe=o("FSMTConfig"),HHe=o(" (FairSeq Machine-Translation model)"),UHe=l(),hm=a("li"),Pte=a("strong"),JHe=o("funnel"),YHe=o(" \u2014 "),SS=a("a"),KHe=o("FunnelConfig"),ZHe=o(" (Funnel Transformer model)"),eUe=l(),pm=a("li"),Bte=a("strong"),oUe=o("glpn"),rUe=o(" \u2014 "),RS=a("a"),tUe=o("GLPNConfig"),aUe=o(" (GLPN model)"),nUe=l(),um=a("li"),Ite=a("strong"),sUe=o("gpt2"),lUe=o(" \u2014 "),PS=a("a"),iUe=o("GPT2Config"),dUe=o(" (OpenAI GPT-2 model)"),cUe=l(),_m=a("li"),Nte=a("strong"),fUe=o("gpt_neo"),mUe=o(" \u2014 "),BS=a("a"),gUe=o("GPTNeoConfig"),hUe=o(" (GPT Neo model)"),pUe=l(),bm=a("li"),qte=a("strong"),uUe=o("gpt_neox"),_Ue=o(" \u2014 "),IS=a("a"),bUe=o("GPTNeoXConfig"),vUe=o(" (GPT NeoX model)"),FUe=l(),vm=a("li"),jte=a("strong"),TUe=o("gptj"),MUe=o(" \u2014 "),NS=a("a"),EUe=o("GPTJConfig"),CUe=o(" (GPT-J model)"),wUe=l(),Fm=a("li"),Dte=a("strong"),AUe=o("hubert"),LUe=o(" \u2014 "),qS=a("a"),yUe=o("HubertConfig"),xUe=o(" (Hubert model)"),$Ue=l(),Tm=a("li"),Gte=a("strong"),kUe=o("ibert"),SUe=o(" \u2014 "),jS=a("a"),RUe=o("IBertConfig"),PUe=o(" (I-BERT model)"),BUe=l(),Mm=a("li"),Ote=a("strong"),IUe=o("imagegpt"),NUe=o(" \u2014 "),DS=a("a"),qUe=o("ImageGPTConfig"),jUe=o(" (ImageGPT model)"),DUe=l(),Em=a("li"),Vte=a("strong"),GUe=o("layoutlm"),OUe=o(" \u2014 "),GS=a("a"),VUe=o("LayoutLMConfig"),XUe=o(" (LayoutLM model)"),zUe=l(),Cm=a("li"),Xte=a("strong"),WUe=o("layoutlmv2"),QUe=o(" \u2014 "),OS=a("a"),HUe=o("LayoutLMv2Config"),UUe=o(" (LayoutLMv2 model)"),JUe=l(),wm=a("li"),zte=a("strong"),YUe=o("layoutlmv3"),KUe=o(" \u2014 "),VS=a("a"),ZUe=o("LayoutLMv3Config"),eJe=o(" (LayoutLMv3 model)"),oJe=l(),Am=a("li"),Wte=a("strong"),rJe=o("led"),tJe=o(" \u2014 "),XS=a("a"),aJe=o("LEDConfig"),nJe=o(" (LED model)"),sJe=l(),Lm=a("li"),Qte=a("strong"),lJe=o("levit"),iJe=o(" \u2014 "),zS=a("a"),dJe=o("LevitConfig"),cJe=o(" (LeViT model)"),fJe=l(),ym=a("li"),Hte=a("strong"),mJe=o("longformer"),gJe=o(" \u2014 "),WS=a("a"),hJe=o("LongformerConfig"),pJe=o(" (Longformer model)"),uJe=l(),xm=a("li"),Ute=a("strong"),_Je=o("longt5"),bJe=o(" \u2014 "),QS=a("a"),vJe=o("LongT5Config"),FJe=o(" (LongT5 model)"),TJe=l(),$m=a("li"),Jte=a("strong"),MJe=o("luke"),EJe=o(" \u2014 "),HS=a("a"),CJe=o("LukeConfig"),wJe=o(" (LUKE model)"),AJe=l(),km=a("li"),Yte=a("strong"),LJe=o("lxmert"),yJe=o(" \u2014 "),US=a("a"),xJe=o("LxmertConfig"),$Je=o(" (LXMERT model)"),kJe=l(),Sm=a("li"),Kte=a("strong"),SJe=o("m2m_100"),RJe=o(" \u2014 "),JS=a("a"),PJe=o("M2M100Config"),BJe=o(" (M2M100 model)"),IJe=l(),Rm=a("li"),Zte=a("strong"),NJe=o("marian"),qJe=o(" \u2014 "),YS=a("a"),jJe=o("MarianConfig"),DJe=o(" (Marian model)"),GJe=l(),Pm=a("li"),eae=a("strong"),OJe=o("maskformer"),VJe=o(" \u2014 "),KS=a("a"),XJe=o("MaskFormerConfig"),zJe=o(" (MaskFormer model)"),WJe=l(),Bm=a("li"),oae=a("strong"),QJe=o("mbart"),HJe=o(" \u2014 "),ZS=a("a"),UJe=o("MBartConfig"),JJe=o(" (mBART model)"),YJe=l(),Im=a("li"),rae=a("strong"),KJe=o("mctct"),ZJe=o(" \u2014 "),eR=a("a"),eYe=o("MCTCTConfig"),oYe=o(" (M-CTC-T model)"),rYe=l(),Nm=a("li"),tae=a("strong"),tYe=o("megatron-bert"),aYe=o(" \u2014 "),oR=a("a"),nYe=o("MegatronBertConfig"),sYe=o(" (Megatron-BERT model)"),lYe=l(),qm=a("li"),aae=a("strong"),iYe=o("mobilebert"),dYe=o(" \u2014 "),rR=a("a"),cYe=o("MobileBertConfig"),fYe=o(" (MobileBERT model)"),mYe=l(),jm=a("li"),nae=a("strong"),gYe=o("mpnet"),hYe=o(" \u2014 "),tR=a("a"),pYe=o("MPNetConfig"),uYe=o(" (MPNet model)"),_Ye=l(),Dm=a("li"),sae=a("strong"),bYe=o("mt5"),vYe=o(" \u2014 "),aR=a("a"),FYe=o("MT5Config"),TYe=o(" (MT5 model)"),MYe=l(),Gm=a("li"),lae=a("strong"),EYe=o("nystromformer"),CYe=o(" \u2014 "),nR=a("a"),wYe=o("NystromformerConfig"),AYe=o(" (Nystr\xF6mformer model)"),LYe=l(),Om=a("li"),iae=a("strong"),yYe=o("openai-gpt"),xYe=o(" \u2014 "),sR=a("a"),$Ye=o("OpenAIGPTConfig"),kYe=o(" (OpenAI GPT model)"),SYe=l(),Vm=a("li"),dae=a("strong"),RYe=o("opt"),PYe=o(" \u2014 "),lR=a("a"),BYe=o("OPTConfig"),IYe=o(" (OPT model)"),NYe=l(),Xm=a("li"),cae=a("strong"),qYe=o("pegasus"),jYe=o(" \u2014 "),iR=a("a"),DYe=o("PegasusConfig"),GYe=o(" (Pegasus model)"),OYe=l(),zm=a("li"),fae=a("strong"),VYe=o("perceiver"),XYe=o(" \u2014 "),dR=a("a"),zYe=o("PerceiverConfig"),WYe=o(" (Perceiver model)"),QYe=l(),Wm=a("li"),mae=a("strong"),HYe=o("plbart"),UYe=o(" \u2014 "),cR=a("a"),JYe=o("PLBartConfig"),YYe=o(" (PLBart model)"),KYe=l(),Qm=a("li"),gae=a("strong"),ZYe=o("poolformer"),eKe=o(" \u2014 "),fR=a("a"),oKe=o("PoolFormerConfig"),rKe=o(" (PoolFormer model)"),tKe=l(),Hm=a("li"),hae=a("strong"),aKe=o("prophetnet"),nKe=o(" \u2014 "),mR=a("a"),sKe=o("ProphetNetConfig"),lKe=o(" (ProphetNet model)"),iKe=l(),Um=a("li"),pae=a("strong"),dKe=o("qdqbert"),cKe=o(" \u2014 "),gR=a("a"),fKe=o("QDQBertConfig"),mKe=o(" (QDQBert model)"),gKe=l(),Jm=a("li"),uae=a("strong"),hKe=o("rag"),pKe=o(" \u2014 "),hR=a("a"),uKe=o("RagConfig"),_Ke=o(" (RAG model)"),bKe=l(),Ym=a("li"),_ae=a("strong"),vKe=o("realm"),FKe=o(" \u2014 "),pR=a("a"),TKe=o("RealmConfig"),MKe=o(" (REALM model)"),EKe=l(),Km=a("li"),bae=a("strong"),CKe=o("reformer"),wKe=o(" \u2014 "),uR=a("a"),AKe=o("ReformerConfig"),LKe=o(" (Reformer model)"),yKe=l(),Zm=a("li"),vae=a("strong"),xKe=o("regnet"),$Ke=o(" \u2014 "),_R=a("a"),kKe=o("RegNetConfig"),SKe=o(" (RegNet model)"),RKe=l(),eg=a("li"),Fae=a("strong"),PKe=o("rembert"),BKe=o(" \u2014 "),bR=a("a"),IKe=o("RemBertConfig"),NKe=o(" (RemBERT model)"),qKe=l(),og=a("li"),Tae=a("strong"),jKe=o("resnet"),DKe=o(" \u2014 "),vR=a("a"),GKe=o("ResNetConfig"),OKe=o(" (ResNet model)"),VKe=l(),rg=a("li"),Mae=a("strong"),XKe=o("retribert"),zKe=o(" \u2014 "),FR=a("a"),WKe=o("RetriBertConfig"),QKe=o(" (RetriBERT model)"),HKe=l(),tg=a("li"),Eae=a("strong"),UKe=o("roberta"),JKe=o(" \u2014 "),TR=a("a"),YKe=o("RobertaConfig"),KKe=o(" (RoBERTa model)"),ZKe=l(),ag=a("li"),Cae=a("strong"),eZe=o("roformer"),oZe=o(" \u2014 "),MR=a("a"),rZe=o("RoFormerConfig"),tZe=o(" (RoFormer model)"),aZe=l(),ng=a("li"),wae=a("strong"),nZe=o("segformer"),sZe=o(" \u2014 "),ER=a("a"),lZe=o("SegformerConfig"),iZe=o(" (SegFormer model)"),dZe=l(),sg=a("li"),Aae=a("strong"),cZe=o("sew"),fZe=o(" \u2014 "),CR=a("a"),mZe=o("SEWConfig"),gZe=o(" (SEW model)"),hZe=l(),lg=a("li"),Lae=a("strong"),pZe=o("sew-d"),uZe=o(" \u2014 "),wR=a("a"),_Ze=o("SEWDConfig"),bZe=o(" (SEW-D model)"),vZe=l(),ig=a("li"),yae=a("strong"),FZe=o("speech-encoder-decoder"),TZe=o(" \u2014 "),AR=a("a"),MZe=o("SpeechEncoderDecoderConfig"),EZe=o(" (Speech Encoder decoder model)"),CZe=l(),dg=a("li"),xae=a("strong"),wZe=o("speech_to_text"),AZe=o(" \u2014 "),LR=a("a"),LZe=o("Speech2TextConfig"),yZe=o(" (Speech2Text model)"),xZe=l(),cg=a("li"),$ae=a("strong"),$Ze=o("speech_to_text_2"),kZe=o(" \u2014 "),yR=a("a"),SZe=o("Speech2Text2Config"),RZe=o(" (Speech2Text2 model)"),PZe=l(),fg=a("li"),kae=a("strong"),BZe=o("splinter"),IZe=o(" \u2014 "),xR=a("a"),NZe=o("SplinterConfig"),qZe=o(" (Splinter model)"),jZe=l(),mg=a("li"),Sae=a("strong"),DZe=o("squeezebert"),GZe=o(" \u2014 "),$R=a("a"),OZe=o("SqueezeBertConfig"),VZe=o(" (SqueezeBERT model)"),XZe=l(),gg=a("li"),Rae=a("strong"),zZe=o("swin"),WZe=o(" \u2014 "),kR=a("a"),QZe=o("SwinConfig"),HZe=o(" (Swin Transformer model)"),UZe=l(),hg=a("li"),Pae=a("strong"),JZe=o("t5"),YZe=o(" \u2014 "),SR=a("a"),KZe=o("T5Config"),ZZe=o(" (T5 model)"),eeo=l(),pg=a("li"),Bae=a("strong"),oeo=o("tapas"),reo=o(" \u2014 "),RR=a("a"),teo=o("TapasConfig"),aeo=o(" (TAPAS model)"),neo=l(),ug=a("li"),Iae=a("strong"),seo=o("trajectory_transformer"),leo=o(" \u2014 "),PR=a("a"),ieo=o("TrajectoryTransformerConfig"),deo=o(" (Trajectory Transformer model)"),ceo=l(),_g=a("li"),Nae=a("strong"),feo=o("transfo-xl"),meo=o(" \u2014 "),BR=a("a"),geo=o("TransfoXLConfig"),heo=o(" (Transformer-XL model)"),peo=l(),bg=a("li"),qae=a("strong"),ueo=o("trocr"),_eo=o(" \u2014 "),IR=a("a"),beo=o("TrOCRConfig"),veo=o(" (TrOCR model)"),Feo=l(),vg=a("li"),jae=a("strong"),Teo=o("unispeech"),Meo=o(" \u2014 "),NR=a("a"),Eeo=o("UniSpeechConfig"),Ceo=o(" (UniSpeech model)"),weo=l(),Fg=a("li"),Dae=a("strong"),Aeo=o("unispeech-sat"),Leo=o(" \u2014 "),qR=a("a"),yeo=o("UniSpeechSatConfig"),xeo=o(" (UniSpeechSat model)"),$eo=l(),Tg=a("li"),Gae=a("strong"),keo=o("van"),Seo=o(" \u2014 "),jR=a("a"),Reo=o("VanConfig"),Peo=o(" (VAN model)"),Beo=l(),Mg=a("li"),Oae=a("strong"),Ieo=o("vilt"),Neo=o(" \u2014 "),DR=a("a"),qeo=o("ViltConfig"),jeo=o(" (ViLT model)"),Deo=l(),Eg=a("li"),Vae=a("strong"),Geo=o("vision-encoder-decoder"),Oeo=o(" \u2014 "),GR=a("a"),Veo=o("VisionEncoderDecoderConfig"),Xeo=o(" (Vision Encoder decoder model)"),zeo=l(),Cg=a("li"),Xae=a("strong"),Weo=o("vision-text-dual-encoder"),Qeo=o(" \u2014 "),OR=a("a"),Heo=o("VisionTextDualEncoderConfig"),Ueo=o(" (VisionTextDualEncoder model)"),Jeo=l(),wg=a("li"),zae=a("strong"),Yeo=o("visual_bert"),Keo=o(" \u2014 "),VR=a("a"),Zeo=o("VisualBertConfig"),eoo=o(" (VisualBERT model)"),ooo=l(),Ag=a("li"),Wae=a("strong"),roo=o("vit"),too=o(" \u2014 "),XR=a("a"),aoo=o("ViTConfig"),noo=o(" (ViT model)"),soo=l(),Lg=a("li"),Qae=a("strong"),loo=o("vit_mae"),ioo=o(" \u2014 "),zR=a("a"),doo=o("ViTMAEConfig"),coo=o(" (ViTMAE model)"),foo=l(),yg=a("li"),Hae=a("strong"),moo=o("wav2vec2"),goo=o(" \u2014 "),WR=a("a"),hoo=o("Wav2Vec2Config"),poo=o(" (Wav2Vec2 model)"),uoo=l(),xg=a("li"),Uae=a("strong"),_oo=o("wav2vec2-conformer"),boo=o(" \u2014 "),QR=a("a"),voo=o("Wav2Vec2ConformerConfig"),Foo=o(" (Wav2Vec2-Conformer model)"),Too=l(),$g=a("li"),Jae=a("strong"),Moo=o("wavlm"),Eoo=o(" \u2014 "),HR=a("a"),Coo=o("WavLMConfig"),woo=o(" (WavLM model)"),Aoo=l(),kg=a("li"),Yae=a("strong"),Loo=o("xglm"),yoo=o(" \u2014 "),UR=a("a"),xoo=o("XGLMConfig"),$oo=o(" (XGLM model)"),koo=l(),Sg=a("li"),Kae=a("strong"),Soo=o("xlm"),Roo=o(" \u2014 "),JR=a("a"),Poo=o("XLMConfig"),Boo=o(" (XLM model)"),Ioo=l(),Rg=a("li"),Zae=a("strong"),Noo=o("xlm-prophetnet"),qoo=o(" \u2014 "),YR=a("a"),joo=o("XLMProphetNetConfig"),Doo=o(" (XLM-ProphetNet model)"),Goo=l(),Pg=a("li"),ene=a("strong"),Ooo=o("xlm-roberta"),Voo=o(" \u2014 "),KR=a("a"),Xoo=o("XLMRobertaConfig"),zoo=o(" (XLM-RoBERTa model)"),Woo=l(),Bg=a("li"),one=a("strong"),Qoo=o("xlm-roberta-xl"),Hoo=o(" \u2014 "),ZR=a("a"),Uoo=o("XLMRobertaXLConfig"),Joo=o(" (XLM-RoBERTa-XL model)"),Yoo=l(),Ig=a("li"),rne=a("strong"),Koo=o("xlnet"),Zoo=o(" \u2014 "),eP=a("a"),ero=o("XLNetConfig"),oro=o(" (XLNet model)"),rro=l(),Ng=a("li"),tne=a("strong"),tro=o("yolos"),aro=o(" \u2014 "),oP=a("a"),nro=o("YolosConfig"),sro=o(" (YOLOS model)"),lro=l(),qg=a("li"),ane=a("strong"),iro=o("yoso"),dro=o(" \u2014 "),rP=a("a"),cro=o("YosoConfig"),fro=o(" (YOSO model)"),mro=l(),F(jg.$$.fragment),gro=l(),Dg=a("div"),F(AL.$$.fragment),hro=l(),nne=a("p"),pro=o("Register a new configuration for this class."),nGe=l(),$i=a("h2"),Gg=a("a"),sne=a("span"),F(LL.$$.fragment),uro=l(),lne=a("span"),_ro=o("AutoTokenizer"),sGe=l(),Ao=a("div"),F(yL.$$.fragment),bro=l(),xL=a("p"),vro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=a("a"),Fro=o("AutoTokenizer.from_pretrained()"),Tro=o(" class method."),Mro=l(),$L=a("p"),Ero=o("This class cannot be instantiated directly using "),ine=a("code"),Cro=o("__init__()"),wro=o(" (throws an error)."),Aro=l(),Ar=a("div"),F(kL.$$.fragment),Lro=l(),dne=a("p"),yro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xro=l(),$a=a("p"),$ro=o("The tokenizer class to instantiate is selected based on the "),cne=a("code"),kro=o("model_type"),Sro=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),Rro=o("pretrained_model_name_or_path"),Pro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=a("code"),Bro=o("pretrained_model_name_or_path"),Iro=o(":"),Nro=l(),k=a("ul"),Nn=a("li"),gne=a("strong"),qro=o("albert"),jro=o(" \u2014 "),aP=a("a"),Dro=o("AlbertTokenizer"),Gro=o(" or "),nP=a("a"),Oro=o("AlbertTokenizerFast"),Vro=o(" (ALBERT model)"),Xro=l(),qn=a("li"),hne=a("strong"),zro=o("bart"),Wro=o(" \u2014 "),sP=a("a"),Qro=o("BartTokenizer"),Hro=o(" or "),lP=a("a"),Uro=o("BartTokenizerFast"),Jro=o(" (BART model)"),Yro=l(),jn=a("li"),pne=a("strong"),Kro=o("barthez"),Zro=o(" \u2014 "),iP=a("a"),eto=o("BarthezTokenizer"),oto=o(" or "),dP=a("a"),rto=o("BarthezTokenizerFast"),tto=o(" (BARThez model)"),ato=l(),Og=a("li"),une=a("strong"),nto=o("bartpho"),sto=o(" \u2014 "),cP=a("a"),lto=o("BartphoTokenizer"),ito=o(" (BARTpho model)"),dto=l(),Dn=a("li"),_ne=a("strong"),cto=o("bert"),fto=o(" \u2014 "),fP=a("a"),mto=o("BertTokenizer"),gto=o(" or "),mP=a("a"),hto=o("BertTokenizerFast"),pto=o(" (BERT model)"),uto=l(),Vg=a("li"),bne=a("strong"),_to=o("bert-generation"),bto=o(" \u2014 "),gP=a("a"),vto=o("BertGenerationTokenizer"),Fto=o(" (Bert Generation model)"),Tto=l(),Xg=a("li"),vne=a("strong"),Mto=o("bert-japanese"),Eto=o(" \u2014 "),hP=a("a"),Cto=o("BertJapaneseTokenizer"),wto=o(" (BertJapanese model)"),Ato=l(),zg=a("li"),Fne=a("strong"),Lto=o("bertweet"),yto=o(" \u2014 "),pP=a("a"),xto=o("BertweetTokenizer"),$to=o(" (BERTweet model)"),kto=l(),Gn=a("li"),Tne=a("strong"),Sto=o("big_bird"),Rto=o(" \u2014 "),uP=a("a"),Pto=o("BigBirdTokenizer"),Bto=o(" or "),_P=a("a"),Ito=o("BigBirdTokenizerFast"),Nto=o(" (BigBird model)"),qto=l(),On=a("li"),Mne=a("strong"),jto=o("bigbird_pegasus"),Dto=o(" \u2014 "),bP=a("a"),Gto=o("PegasusTokenizer"),Oto=o(" or "),vP=a("a"),Vto=o("PegasusTokenizerFast"),Xto=o(" (BigBird-Pegasus model)"),zto=l(),Vn=a("li"),Ene=a("strong"),Wto=o("blenderbot"),Qto=o(" \u2014 "),FP=a("a"),Hto=o("BlenderbotTokenizer"),Uto=o(" or "),TP=a("a"),Jto=o("BlenderbotTokenizerFast"),Yto=o(" (Blenderbot model)"),Kto=l(),Wg=a("li"),Cne=a("strong"),Zto=o("blenderbot-small"),eao=o(" \u2014 "),MP=a("a"),oao=o("BlenderbotSmallTokenizer"),rao=o(" (BlenderbotSmall model)"),tao=l(),Qg=a("li"),wne=a("strong"),aao=o("bloom"),nao=o(" \u2014 "),EP=a("a"),sao=o("BloomTokenizerFast"),lao=o(" (BLOOM model)"),iao=l(),Hg=a("li"),Ane=a("strong"),dao=o("byt5"),cao=o(" \u2014 "),CP=a("a"),fao=o("ByT5Tokenizer"),mao=o(" (ByT5 model)"),gao=l(),Xn=a("li"),Lne=a("strong"),hao=o("camembert"),pao=o(" \u2014 "),wP=a("a"),uao=o("CamembertTokenizer"),_ao=o(" or "),AP=a("a"),bao=o("CamembertTokenizerFast"),vao=o(" (CamemBERT model)"),Fao=l(),Ug=a("li"),yne=a("strong"),Tao=o("canine"),Mao=o(" \u2014 "),LP=a("a"),Eao=o("CanineTokenizer"),Cao=o(" (CANINE model)"),wao=l(),zn=a("li"),xne=a("strong"),Aao=o("clip"),Lao=o(" \u2014 "),yP=a("a"),yao=o("CLIPTokenizer"),xao=o(" or "),xP=a("a"),$ao=o("CLIPTokenizerFast"),kao=o(" (CLIP model)"),Sao=l(),Wn=a("li"),$ne=a("strong"),Rao=o("convbert"),Pao=o(" \u2014 "),$P=a("a"),Bao=o("ConvBertTokenizer"),Iao=o(" or "),kP=a("a"),Nao=o("ConvBertTokenizerFast"),qao=o(" (ConvBERT model)"),jao=l(),Qn=a("li"),kne=a("strong"),Dao=o("cpm"),Gao=o(" \u2014 "),SP=a("a"),Oao=o("CpmTokenizer"),Vao=o(" or "),RP=a("a"),Xao=o("CpmTokenizerFast"),zao=o(" (CPM model)"),Wao=l(),Jg=a("li"),Sne=a("strong"),Qao=o("ctrl"),Hao=o(" \u2014 "),PP=a("a"),Uao=o("CTRLTokenizer"),Jao=o(" (CTRL model)"),Yao=l(),Hn=a("li"),Rne=a("strong"),Kao=o("data2vec-text"),Zao=o(" \u2014 "),BP=a("a"),eno=o("RobertaTokenizer"),ono=o(" or "),IP=a("a"),rno=o("RobertaTokenizerFast"),tno=o(" (Data2VecText model)"),ano=l(),Un=a("li"),Pne=a("strong"),nno=o("deberta"),sno=o(" \u2014 "),NP=a("a"),lno=o("DebertaTokenizer"),ino=o(" or "),qP=a("a"),dno=o("DebertaTokenizerFast"),cno=o(" (DeBERTa model)"),fno=l(),Jn=a("li"),Bne=a("strong"),mno=o("deberta-v2"),gno=o(" \u2014 "),jP=a("a"),hno=o("DebertaV2Tokenizer"),pno=o(" or "),DP=a("a"),uno=o("DebertaV2TokenizerFast"),_no=o(" (DeBERTa-v2 model)"),bno=l(),Yn=a("li"),Ine=a("strong"),vno=o("distilbert"),Fno=o(" \u2014 "),GP=a("a"),Tno=o("DistilBertTokenizer"),Mno=o(" or "),OP=a("a"),Eno=o("DistilBertTokenizerFast"),Cno=o(" (DistilBERT model)"),wno=l(),Kn=a("li"),Nne=a("strong"),Ano=o("dpr"),Lno=o(" \u2014 "),VP=a("a"),yno=o("DPRQuestionEncoderTokenizer"),xno=o(" or "),XP=a("a"),$no=o("DPRQuestionEncoderTokenizerFast"),kno=o(" (DPR model)"),Sno=l(),Zn=a("li"),qne=a("strong"),Rno=o("electra"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("ElectraTokenizer"),Ino=o(" or "),WP=a("a"),Nno=o("ElectraTokenizerFast"),qno=o(" (ELECTRA model)"),jno=l(),Yg=a("li"),jne=a("strong"),Dno=o("flaubert"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("FlaubertTokenizer"),Vno=o(" (FlauBERT model)"),Xno=l(),es=a("li"),Dne=a("strong"),zno=o("fnet"),Wno=o(" \u2014 "),HP=a("a"),Qno=o("FNetTokenizer"),Hno=o(" or "),UP=a("a"),Uno=o("FNetTokenizerFast"),Jno=o(" (FNet model)"),Yno=l(),Kg=a("li"),Gne=a("strong"),Kno=o("fsmt"),Zno=o(" \u2014 "),JP=a("a"),eso=o("FSMTTokenizer"),oso=o(" (FairSeq Machine-Translation model)"),rso=l(),os=a("li"),One=a("strong"),tso=o("funnel"),aso=o(" \u2014 "),YP=a("a"),nso=o("FunnelTokenizer"),sso=o(" or "),KP=a("a"),lso=o("FunnelTokenizerFast"),iso=o(" (Funnel Transformer model)"),dso=l(),rs=a("li"),Vne=a("strong"),cso=o("gpt2"),fso=o(" \u2014 "),ZP=a("a"),mso=o("GPT2Tokenizer"),gso=o(" or "),eB=a("a"),hso=o("GPT2TokenizerFast"),pso=o(" (OpenAI GPT-2 model)"),uso=l(),ts=a("li"),Xne=a("strong"),_so=o("gpt_neo"),bso=o(" \u2014 "),oB=a("a"),vso=o("GPT2Tokenizer"),Fso=o(" or "),rB=a("a"),Tso=o("GPT2TokenizerFast"),Mso=o(" (GPT Neo model)"),Eso=l(),Zg=a("li"),zne=a("strong"),Cso=o("gpt_neox"),wso=o(" \u2014 "),tB=a("a"),Aso=o("GPTNeoXTokenizerFast"),Lso=o(" (GPT NeoX model)"),yso=l(),as=a("li"),Wne=a("strong"),xso=o("gptj"),$so=o(" \u2014 "),aB=a("a"),kso=o("GPT2Tokenizer"),Sso=o(" or "),nB=a("a"),Rso=o("GPT2TokenizerFast"),Pso=o(" (GPT-J model)"),Bso=l(),ns=a("li"),Qne=a("strong"),Iso=o("herbert"),Nso=o(" \u2014 "),sB=a("a"),qso=o("HerbertTokenizer"),jso=o(" or "),lB=a("a"),Dso=o("HerbertTokenizerFast"),Gso=o(" (HerBERT model)"),Oso=l(),eh=a("li"),Hne=a("strong"),Vso=o("hubert"),Xso=o(" \u2014 "),iB=a("a"),zso=o("Wav2Vec2CTCTokenizer"),Wso=o(" (Hubert model)"),Qso=l(),ss=a("li"),Une=a("strong"),Hso=o("ibert"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("RobertaTokenizer"),Yso=o(" or "),cB=a("a"),Kso=o("RobertaTokenizerFast"),Zso=o(" (I-BERT model)"),elo=l(),ls=a("li"),Jne=a("strong"),olo=o("layoutlm"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("LayoutLMTokenizer"),alo=o(" or "),mB=a("a"),nlo=o("LayoutLMTokenizerFast"),slo=o(" (LayoutLM model)"),llo=l(),is=a("li"),Yne=a("strong"),ilo=o("layoutlmv2"),dlo=o(" \u2014 "),gB=a("a"),clo=o("LayoutLMv2Tokenizer"),flo=o(" or "),hB=a("a"),mlo=o("LayoutLMv2TokenizerFast"),glo=o(" (LayoutLMv2 model)"),hlo=l(),ds=a("li"),Kne=a("strong"),plo=o("layoutlmv3"),ulo=o(" \u2014 "),pB=a("a"),_lo=o("LayoutLMv3Tokenizer"),blo=o(" or "),uB=a("a"),vlo=o("LayoutLMv3TokenizerFast"),Flo=o(" (LayoutLMv3 model)"),Tlo=l(),cs=a("li"),Zne=a("strong"),Mlo=o("layoutxlm"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("LayoutXLMTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("LayoutXLMTokenizerFast"),Llo=o(" (LayoutXLM model)"),ylo=l(),fs=a("li"),ese=a("strong"),xlo=o("led"),$lo=o(" \u2014 "),vB=a("a"),klo=o("LEDTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("LEDTokenizerFast"),Plo=o(" (LED model)"),Blo=l(),ms=a("li"),ose=a("strong"),Ilo=o("longformer"),Nlo=o(" \u2014 "),TB=a("a"),qlo=o("LongformerTokenizer"),jlo=o(" or "),MB=a("a"),Dlo=o("LongformerTokenizerFast"),Glo=o(" (Longformer model)"),Olo=l(),gs=a("li"),rse=a("strong"),Vlo=o("longt5"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("T5Tokenizer"),Wlo=o(" or "),CB=a("a"),Qlo=o("T5TokenizerFast"),Hlo=o(" (LongT5 model)"),Ulo=l(),oh=a("li"),tse=a("strong"),Jlo=o("luke"),Ylo=o(" \u2014 "),wB=a("a"),Klo=o("LukeTokenizer"),Zlo=o(" (LUKE model)"),eio=l(),hs=a("li"),ase=a("strong"),oio=o("lxmert"),rio=o(" \u2014 "),AB=a("a"),tio=o("LxmertTokenizer"),aio=o(" or "),LB=a("a"),nio=o("LxmertTokenizerFast"),sio=o(" (LXMERT model)"),lio=l(),rh=a("li"),nse=a("strong"),iio=o("m2m_100"),dio=o(" \u2014 "),yB=a("a"),cio=o("M2M100Tokenizer"),fio=o(" (M2M100 model)"),mio=l(),th=a("li"),sse=a("strong"),gio=o("marian"),hio=o(" \u2014 "),xB=a("a"),pio=o("MarianTokenizer"),uio=o(" (Marian model)"),_io=l(),ps=a("li"),lse=a("strong"),bio=o("mbart"),vio=o(" \u2014 "),$B=a("a"),Fio=o("MBartTokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("MBartTokenizerFast"),Eio=o(" (mBART model)"),Cio=l(),us=a("li"),ise=a("strong"),wio=o("mbart50"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("MBart50Tokenizer"),yio=o(" or "),RB=a("a"),xio=o("MBart50TokenizerFast"),$io=o(" (mBART-50 model)"),kio=l(),_s=a("li"),dse=a("strong"),Sio=o("megatron-bert"),Rio=o(" \u2014 "),PB=a("a"),Pio=o("BertTokenizer"),Bio=o(" or "),BB=a("a"),Iio=o("BertTokenizerFast"),Nio=o(" (Megatron-BERT model)"),qio=l(),ah=a("li"),cse=a("strong"),jio=o("mluke"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("MLukeTokenizer"),Oio=o(" (mLUKE model)"),Vio=l(),bs=a("li"),fse=a("strong"),Xio=o("mobilebert"),zio=o(" \u2014 "),NB=a("a"),Wio=o("MobileBertTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("MobileBertTokenizerFast"),Uio=o(" (MobileBERT model)"),Jio=l(),vs=a("li"),mse=a("strong"),Yio=o("mpnet"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("MPNetTokenizer"),edo=o(" or "),DB=a("a"),odo=o("MPNetTokenizerFast"),rdo=o(" (MPNet model)"),tdo=l(),Fs=a("li"),gse=a("strong"),ado=o("mt5"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("MT5Tokenizer"),ldo=o(" or "),OB=a("a"),ido=o("MT5TokenizerFast"),ddo=o(" (MT5 model)"),cdo=l(),Ts=a("li"),hse=a("strong"),fdo=o("nystromformer"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("AlbertTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("AlbertTokenizerFast"),udo=o(" (Nystr\xF6mformer model)"),_do=l(),Ms=a("li"),pse=a("strong"),bdo=o("openai-gpt"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("OpenAIGPTTokenizer"),Tdo=o(" or "),WB=a("a"),Mdo=o("OpenAIGPTTokenizerFast"),Edo=o(" (OpenAI GPT model)"),Cdo=l(),nh=a("li"),use=a("strong"),wdo=o("opt"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("GPT2Tokenizer"),ydo=o(" (OPT model)"),xdo=l(),Es=a("li"),_se=a("strong"),$do=o("pegasus"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("PegasusTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("PegasusTokenizerFast"),Bdo=o(" (Pegasus model)"),Ido=l(),sh=a("li"),bse=a("strong"),Ndo=o("perceiver"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("PerceiverTokenizer"),Ddo=o(" (Perceiver model)"),Gdo=l(),lh=a("li"),vse=a("strong"),Odo=o("phobert"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("PhobertTokenizer"),zdo=o(" (PhoBERT model)"),Wdo=l(),ih=a("li"),Fse=a("strong"),Qdo=o("plbart"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("PLBartTokenizer"),Jdo=o(" (PLBart model)"),Ydo=l(),dh=a("li"),Tse=a("strong"),Kdo=o("prophetnet"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("ProphetNetTokenizer"),oco=o(" (ProphetNet model)"),rco=l(),Cs=a("li"),Mse=a("strong"),tco=o("qdqbert"),aco=o(" \u2014 "),eI=a("a"),nco=o("BertTokenizer"),sco=o(" or "),oI=a("a"),lco=o("BertTokenizerFast"),ico=o(" (QDQBert model)"),dco=l(),ch=a("li"),Ese=a("strong"),cco=o("rag"),fco=o(" \u2014 "),rI=a("a"),mco=o("RagTokenizer"),gco=o(" (RAG model)"),hco=l(),ws=a("li"),Cse=a("strong"),pco=o("realm"),uco=o(" \u2014 "),tI=a("a"),_co=o("RealmTokenizer"),bco=o(" or "),aI=a("a"),vco=o("RealmTokenizerFast"),Fco=o(" (REALM model)"),Tco=l(),As=a("li"),wse=a("strong"),Mco=o("reformer"),Eco=o(" \u2014 "),nI=a("a"),Cco=o("ReformerTokenizer"),wco=o(" or "),sI=a("a"),Aco=o("ReformerTokenizerFast"),Lco=o(" (Reformer model)"),yco=l(),Ls=a("li"),Ase=a("strong"),xco=o("rembert"),$co=o(" \u2014 "),lI=a("a"),kco=o("RemBertTokenizer"),Sco=o(" or "),iI=a("a"),Rco=o("RemBertTokenizerFast"),Pco=o(" (RemBERT model)"),Bco=l(),ys=a("li"),Lse=a("strong"),Ico=o("retribert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("RetriBertTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("RetriBertTokenizerFast"),Gco=o(" (RetriBERT model)"),Oco=l(),xs=a("li"),yse=a("strong"),Vco=o("roberta"),Xco=o(" \u2014 "),fI=a("a"),zco=o("RobertaTokenizer"),Wco=o(" or "),mI=a("a"),Qco=o("RobertaTokenizerFast"),Hco=o(" (RoBERTa model)"),Uco=l(),$s=a("li"),xse=a("strong"),Jco=o("roformer"),Yco=o(" \u2014 "),gI=a("a"),Kco=o("RoFormerTokenizer"),Zco=o(" or "),hI=a("a"),efo=o("RoFormerTokenizerFast"),ofo=o(" (RoFormer model)"),rfo=l(),fh=a("li"),$se=a("strong"),tfo=o("speech_to_text"),afo=o(" \u2014 "),pI=a("a"),nfo=o("Speech2TextTokenizer"),sfo=o(" (Speech2Text model)"),lfo=l(),mh=a("li"),kse=a("strong"),ifo=o("speech_to_text_2"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("Speech2Text2Tokenizer"),ffo=o(" (Speech2Text2 model)"),mfo=l(),ks=a("li"),Sse=a("strong"),gfo=o("splinter"),hfo=o(" \u2014 "),_I=a("a"),pfo=o("SplinterTokenizer"),ufo=o(" or "),bI=a("a"),_fo=o("SplinterTokenizerFast"),bfo=o(" (Splinter model)"),vfo=l(),Ss=a("li"),Rse=a("strong"),Ffo=o("squeezebert"),Tfo=o(" \u2014 "),vI=a("a"),Mfo=o("SqueezeBertTokenizer"),Efo=o(" or "),FI=a("a"),Cfo=o("SqueezeBertTokenizerFast"),wfo=o(" (SqueezeBERT model)"),Afo=l(),Rs=a("li"),Pse=a("strong"),Lfo=o("t5"),yfo=o(" \u2014 "),TI=a("a"),xfo=o("T5Tokenizer"),$fo=o(" or "),MI=a("a"),kfo=o("T5TokenizerFast"),Sfo=o(" (T5 model)"),Rfo=l(),gh=a("li"),Bse=a("strong"),Pfo=o("tapas"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("TapasTokenizer"),Nfo=o(" (TAPAS model)"),qfo=l(),hh=a("li"),Ise=a("strong"),jfo=o("tapex"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("TapexTokenizer"),Ofo=o(" (TAPEX model)"),Vfo=l(),ph=a("li"),Nse=a("strong"),Xfo=o("transfo-xl"),zfo=o(" \u2014 "),wI=a("a"),Wfo=o("TransfoXLTokenizer"),Qfo=o(" (Transformer-XL model)"),Hfo=l(),Ps=a("li"),qse=a("strong"),Ufo=o("vilt"),Jfo=o(" \u2014 "),AI=a("a"),Yfo=o("BertTokenizer"),Kfo=o(" or "),LI=a("a"),Zfo=o("BertTokenizerFast"),emo=o(" (ViLT model)"),omo=l(),Bs=a("li"),jse=a("strong"),rmo=o("visual_bert"),tmo=o(" \u2014 "),yI=a("a"),amo=o("BertTokenizer"),nmo=o(" or "),xI=a("a"),smo=o("BertTokenizerFast"),lmo=o(" (VisualBERT model)"),imo=l(),uh=a("li"),Dse=a("strong"),dmo=o("wav2vec2"),cmo=o(" \u2014 "),$I=a("a"),fmo=o("Wav2Vec2CTCTokenizer"),mmo=o(" (Wav2Vec2 model)"),gmo=l(),_h=a("li"),Gse=a("strong"),hmo=o("wav2vec2-conformer"),pmo=o(" \u2014 "),kI=a("a"),umo=o("Wav2Vec2CTCTokenizer"),_mo=o(" (Wav2Vec2-Conformer model)"),bmo=l(),bh=a("li"),Ose=a("strong"),vmo=o("wav2vec2_phoneme"),Fmo=o(" \u2014 "),SI=a("a"),Tmo=o("Wav2Vec2PhonemeCTCTokenizer"),Mmo=o(" (Wav2Vec2Phoneme model)"),Emo=l(),Is=a("li"),Vse=a("strong"),Cmo=o("xglm"),wmo=o(" \u2014 "),RI=a("a"),Amo=o("XGLMTokenizer"),Lmo=o(" or "),PI=a("a"),ymo=o("XGLMTokenizerFast"),xmo=o(" (XGLM model)"),$mo=l(),vh=a("li"),Xse=a("strong"),kmo=o("xlm"),Smo=o(" \u2014 "),BI=a("a"),Rmo=o("XLMTokenizer"),Pmo=o(" (XLM model)"),Bmo=l(),Fh=a("li"),zse=a("strong"),Imo=o("xlm-prophetnet"),Nmo=o(" \u2014 "),II=a("a"),qmo=o("XLMProphetNetTokenizer"),jmo=o(" (XLM-ProphetNet model)"),Dmo=l(),Ns=a("li"),Wse=a("strong"),Gmo=o("xlm-roberta"),Omo=o(" \u2014 "),NI=a("a"),Vmo=o("XLMRobertaTokenizer"),Xmo=o(" or "),qI=a("a"),zmo=o("XLMRobertaTokenizerFast"),Wmo=o(" (XLM-RoBERTa model)"),Qmo=l(),qs=a("li"),Qse=a("strong"),Hmo=o("xlm-roberta-xl"),Umo=o(" \u2014 "),jI=a("a"),Jmo=o("RobertaTokenizer"),Ymo=o(" or "),DI=a("a"),Kmo=o("RobertaTokenizerFast"),Zmo=o(" (XLM-RoBERTa-XL model)"),ego=l(),js=a("li"),Hse=a("strong"),ogo=o("xlnet"),rgo=o(" \u2014 "),GI=a("a"),tgo=o("XLNetTokenizer"),ago=o(" or "),OI=a("a"),ngo=o("XLNetTokenizerFast"),sgo=o(" (XLNet model)"),lgo=l(),Ds=a("li"),Use=a("strong"),igo=o("yoso"),dgo=o(" \u2014 "),VI=a("a"),cgo=o("AlbertTokenizer"),fgo=o(" or "),XI=a("a"),mgo=o("AlbertTokenizerFast"),ggo=o(" (YOSO model)"),hgo=l(),F(Th.$$.fragment),pgo=l(),Mh=a("div"),F(SL.$$.fragment),ugo=l(),Jse=a("p"),_go=o("Register a new tokenizer in this mapping."),lGe=l(),ki=a("h2"),Eh=a("a"),Yse=a("span"),F(RL.$$.fragment),bgo=l(),Kse=a("span"),vgo=o("AutoFeatureExtractor"),iGe=l(),Lo=a("div"),F(PL.$$.fragment),Fgo=l(),BL=a("p"),Tgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=a("a"),Mgo=o("AutoFeatureExtractor.from_pretrained()"),Ego=o(" class method."),Cgo=l(),IL=a("p"),wgo=o("This class cannot be instantiated directly using "),Zse=a("code"),Ago=o("__init__()"),Lgo=o(" (throws an error)."),ygo=l(),He=a("div"),F(NL.$$.fragment),xgo=l(),ele=a("p"),$go=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kgo=l(),ka=a("p"),Sgo=o("The feature extractor class to instantiate is selected based on the "),ole=a("code"),Rgo=o("model_type"),Pgo=o(` property of the config object
(either passed as an argument or loaded from `),rle=a("code"),Bgo=o("pretrained_model_name_or_path"),Igo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=a("code"),Ngo=o("pretrained_model_name_or_path"),qgo=o(":"),jgo=l(),Y=a("ul"),Ch=a("li"),ale=a("strong"),Dgo=o("beit"),Ggo=o(" \u2014 "),WI=a("a"),Ogo=o("BeitFeatureExtractor"),Vgo=o(" (BEiT model)"),Xgo=l(),wh=a("li"),nle=a("strong"),zgo=o("clip"),Wgo=o(" \u2014 "),QI=a("a"),Qgo=o("CLIPFeatureExtractor"),Hgo=o(" (CLIP model)"),Ugo=l(),Ah=a("li"),sle=a("strong"),Jgo=o("convnext"),Ygo=o(" \u2014 "),HI=a("a"),Kgo=o("ConvNextFeatureExtractor"),Zgo=o(" (ConvNeXT model)"),eho=l(),Lh=a("li"),lle=a("strong"),oho=o("cvt"),rho=o(" \u2014 "),UI=a("a"),tho=o("ConvNextFeatureExtractor"),aho=o(" (CvT model)"),nho=l(),yh=a("li"),ile=a("strong"),sho=o("data2vec-audio"),lho=o(" \u2014 "),JI=a("a"),iho=o("Wav2Vec2FeatureExtractor"),dho=o(" (Data2VecAudio model)"),cho=l(),xh=a("li"),dle=a("strong"),fho=o("data2vec-vision"),mho=o(" \u2014 "),YI=a("a"),gho=o("BeitFeatureExtractor"),hho=o(" (Data2VecVision model)"),pho=l(),$h=a("li"),cle=a("strong"),uho=o("deit"),_ho=o(" \u2014 "),KI=a("a"),bho=o("DeiTFeatureExtractor"),vho=o(" (DeiT model)"),Fho=l(),kh=a("li"),fle=a("strong"),Tho=o("detr"),Mho=o(" \u2014 "),ZI=a("a"),Eho=o("DetrFeatureExtractor"),Cho=o(" (DETR model)"),who=l(),Sh=a("li"),mle=a("strong"),Aho=o("dpt"),Lho=o(" \u2014 "),eN=a("a"),yho=o("DPTFeatureExtractor"),xho=o(" (DPT model)"),$ho=l(),Rh=a("li"),gle=a("strong"),kho=o("flava"),Sho=o(" \u2014 "),oN=a("a"),Rho=o("FlavaFeatureExtractor"),Pho=o(" (FLAVA model)"),Bho=l(),Ph=a("li"),hle=a("strong"),Iho=o("glpn"),Nho=o(" \u2014 "),rN=a("a"),qho=o("GLPNFeatureExtractor"),jho=o(" (GLPN model)"),Dho=l(),Bh=a("li"),ple=a("strong"),Gho=o("hubert"),Oho=o(" \u2014 "),tN=a("a"),Vho=o("Wav2Vec2FeatureExtractor"),Xho=o(" (Hubert model)"),zho=l(),Ih=a("li"),ule=a("strong"),Who=o("imagegpt"),Qho=o(" \u2014 "),aN=a("a"),Hho=o("ImageGPTFeatureExtractor"),Uho=o(" (ImageGPT model)"),Jho=l(),Nh=a("li"),_le=a("strong"),Yho=o("layoutlmv2"),Kho=o(" \u2014 "),nN=a("a"),Zho=o("LayoutLMv2FeatureExtractor"),epo=o(" (LayoutLMv2 model)"),opo=l(),qh=a("li"),ble=a("strong"),rpo=o("layoutlmv3"),tpo=o(" \u2014 "),sN=a("a"),apo=o("LayoutLMv3FeatureExtractor"),npo=o(" (LayoutLMv3 model)"),spo=l(),jh=a("li"),vle=a("strong"),lpo=o("levit"),ipo=o(" \u2014 "),lN=a("a"),dpo=o("LevitFeatureExtractor"),cpo=o(" (LeViT model)"),fpo=l(),Dh=a("li"),Fle=a("strong"),mpo=o("maskformer"),gpo=o(" \u2014 "),iN=a("a"),hpo=o("MaskFormerFeatureExtractor"),ppo=o(" (MaskFormer model)"),upo=l(),Gh=a("li"),Tle=a("strong"),_po=o("mctct"),bpo=o(" \u2014 "),dN=a("a"),vpo=o("MCTCTFeatureExtractor"),Fpo=o(" (M-CTC-T model)"),Tpo=l(),Oh=a("li"),Mle=a("strong"),Mpo=o("perceiver"),Epo=o(" \u2014 "),cN=a("a"),Cpo=o("PerceiverFeatureExtractor"),wpo=o(" (Perceiver model)"),Apo=l(),Vh=a("li"),Ele=a("strong"),Lpo=o("poolformer"),ypo=o(" \u2014 "),fN=a("a"),xpo=o("PoolFormerFeatureExtractor"),$po=o(" (PoolFormer model)"),kpo=l(),Xh=a("li"),Cle=a("strong"),Spo=o("regnet"),Rpo=o(" \u2014 "),mN=a("a"),Ppo=o("ConvNextFeatureExtractor"),Bpo=o(" (RegNet model)"),Ipo=l(),zh=a("li"),wle=a("strong"),Npo=o("resnet"),qpo=o(" \u2014 "),gN=a("a"),jpo=o("ConvNextFeatureExtractor"),Dpo=o(" (ResNet model)"),Gpo=l(),Wh=a("li"),Ale=a("strong"),Opo=o("segformer"),Vpo=o(" \u2014 "),hN=a("a"),Xpo=o("SegformerFeatureExtractor"),zpo=o(" (SegFormer model)"),Wpo=l(),Qh=a("li"),Lle=a("strong"),Qpo=o("speech_to_text"),Hpo=o(" \u2014 "),pN=a("a"),Upo=o("Speech2TextFeatureExtractor"),Jpo=o(" (Speech2Text model)"),Ypo=l(),Hh=a("li"),yle=a("strong"),Kpo=o("swin"),Zpo=o(" \u2014 "),uN=a("a"),euo=o("ViTFeatureExtractor"),ouo=o(" (Swin Transformer model)"),ruo=l(),Uh=a("li"),xle=a("strong"),tuo=o("van"),auo=o(" \u2014 "),_N=a("a"),nuo=o("ConvNextFeatureExtractor"),suo=o(" (VAN model)"),luo=l(),Jh=a("li"),$le=a("strong"),iuo=o("vilt"),duo=o(" \u2014 "),bN=a("a"),cuo=o("ViltFeatureExtractor"),fuo=o(" (ViLT model)"),muo=l(),Yh=a("li"),kle=a("strong"),guo=o("vit"),huo=o(" \u2014 "),vN=a("a"),puo=o("ViTFeatureExtractor"),uuo=o(" (ViT model)"),_uo=l(),Kh=a("li"),Sle=a("strong"),buo=o("vit_mae"),vuo=o(" \u2014 "),FN=a("a"),Fuo=o("ViTFeatureExtractor"),Tuo=o(" (ViTMAE model)"),Muo=l(),Zh=a("li"),Rle=a("strong"),Euo=o("wav2vec2"),Cuo=o(" \u2014 "),TN=a("a"),wuo=o("Wav2Vec2FeatureExtractor"),Auo=o(" (Wav2Vec2 model)"),Luo=l(),ep=a("li"),Ple=a("strong"),yuo=o("wav2vec2-conformer"),xuo=o(" \u2014 "),MN=a("a"),$uo=o("Wav2Vec2FeatureExtractor"),kuo=o(" (Wav2Vec2-Conformer model)"),Suo=l(),op=a("li"),Ble=a("strong"),Ruo=o("yolos"),Puo=o(" \u2014 "),EN=a("a"),Buo=o("YolosFeatureExtractor"),Iuo=o(" (YOLOS model)"),Nuo=l(),F(rp.$$.fragment),quo=l(),F(tp.$$.fragment),juo=l(),ap=a("div"),F(qL.$$.fragment),Duo=l(),Ile=a("p"),Guo=o("Register a new feature extractor for this class."),dGe=l(),Si=a("h2"),np=a("a"),Nle=a("span"),F(jL.$$.fragment),Ouo=l(),qle=a("span"),Vuo=o("AutoProcessor"),cGe=l(),yo=a("div"),F(DL.$$.fragment),Xuo=l(),GL=a("p"),zuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=a("a"),Wuo=o("AutoProcessor.from_pretrained()"),Quo=o(" class method."),Huo=l(),OL=a("p"),Uuo=o("This class cannot be instantiated directly using "),jle=a("code"),Juo=o("__init__()"),Yuo=o(" (throws an error)."),Kuo=l(),Ue=a("div"),F(VL.$$.fragment),Zuo=l(),Dle=a("p"),e_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o_o=l(),Ri=a("p"),r_o=o("The processor class to instantiate is selected based on the "),Gle=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(" if possible):"),l_o=l(),he=a("ul"),sp=a("li"),Vle=a("strong"),i_o=o("clip"),d_o=o(" \u2014 "),wN=a("a"),c_o=o("CLIPProcessor"),f_o=o(" (CLIP model)"),m_o=l(),lp=a("li"),Xle=a("strong"),g_o=o("flava"),h_o=o(" \u2014 "),zle=a("code"),p_o=o("FLAVAProcessor"),u_o=o(" (FLAVA model)"),__o=l(),ip=a("li"),Wle=a("strong"),b_o=o("layoutlmv2"),v_o=o(" \u2014 "),AN=a("a"),F_o=o("LayoutLMv2Processor"),T_o=o(" (LayoutLMv2 model)"),M_o=l(),dp=a("li"),Qle=a("strong"),E_o=o("layoutlmv3"),C_o=o(" \u2014 "),LN=a("a"),w_o=o("LayoutLMv3Processor"),A_o=o(" (LayoutLMv3 model)"),L_o=l(),cp=a("li"),Hle=a("strong"),y_o=o("layoutxlm"),x_o=o(" \u2014 "),yN=a("a"),$_o=o("LayoutXLMProcessor"),k_o=o(" (LayoutXLM model)"),S_o=l(),fp=a("li"),Ule=a("strong"),R_o=o("sew"),P_o=o(" \u2014 "),xN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (SEW model)"),N_o=l(),mp=a("li"),Jle=a("strong"),q_o=o("sew-d"),j_o=o(" \u2014 "),$N=a("a"),D_o=o("Wav2Vec2Processor"),G_o=o(" (SEW-D model)"),O_o=l(),gp=a("li"),Yle=a("strong"),V_o=o("speech_to_text"),X_o=o(" \u2014 "),kN=a("a"),z_o=o("Speech2TextProcessor"),W_o=o(" (Speech2Text model)"),Q_o=l(),hp=a("li"),Kle=a("strong"),H_o=o("speech_to_text_2"),U_o=o(" \u2014 "),SN=a("a"),J_o=o("Speech2Text2Processor"),Y_o=o(" (Speech2Text2 model)"),K_o=l(),pp=a("li"),Zle=a("strong"),Z_o=o("trocr"),e1o=o(" \u2014 "),RN=a("a"),o1o=o("TrOCRProcessor"),r1o=o(" (TrOCR model)"),t1o=l(),up=a("li"),eie=a("strong"),a1o=o("unispeech"),n1o=o(" \u2014 "),PN=a("a"),s1o=o("Wav2Vec2Processor"),l1o=o(" (UniSpeech model)"),i1o=l(),_p=a("li"),oie=a("strong"),d1o=o("unispeech-sat"),c1o=o(" \u2014 "),BN=a("a"),f1o=o("Wav2Vec2Processor"),m1o=o(" (UniSpeechSat model)"),g1o=l(),bp=a("li"),rie=a("strong"),h1o=o("vilt"),p1o=o(" \u2014 "),IN=a("a"),u1o=o("ViltProcessor"),_1o=o(" (ViLT model)"),b1o=l(),vp=a("li"),tie=a("strong"),v1o=o("vision-text-dual-encoder"),F1o=o(" \u2014 "),NN=a("a"),T1o=o("VisionTextDualEncoderProcessor"),M1o=o(" (VisionTextDualEncoder model)"),E1o=l(),Fp=a("li"),aie=a("strong"),C1o=o("wav2vec2"),w1o=o(" \u2014 "),qN=a("a"),A1o=o("Wav2Vec2Processor"),L1o=o(" (Wav2Vec2 model)"),y1o=l(),Tp=a("li"),nie=a("strong"),x1o=o("wav2vec2-conformer"),$1o=o(" \u2014 "),jN=a("a"),k1o=o("Wav2Vec2Processor"),S1o=o(" (Wav2Vec2-Conformer model)"),R1o=l(),Mp=a("li"),sie=a("strong"),P1o=o("wavlm"),B1o=o(" \u2014 "),DN=a("a"),I1o=o("Wav2Vec2Processor"),N1o=o(" (WavLM model)"),q1o=l(),F(Ep.$$.fragment),j1o=l(),F(Cp.$$.fragment),D1o=l(),wp=a("div"),F(XL.$$.fragment),G1o=l(),lie=a("p"),O1o=o("Register a new processor for this class."),fGe=l(),Pi=a("h2"),Ap=a("a"),iie=a("span"),F(zL.$$.fragment),V1o=l(),die=a("span"),X1o=o("AutoModel"),mGe=l(),xo=a("div"),F(WL.$$.fragment),z1o=l(),Bi=a("p"),W1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=a("a"),Q1o=o("from_pretrained()"),H1o=o(" class method or the "),ON=a("a"),U1o=o("from_config()"),J1o=o(` class
method.`),Y1o=l(),QL=a("p"),K1o=o("This class cannot be instantiated directly using "),cie=a("code"),Z1o=o("__init__()"),e7o=o(" (throws an error)."),o7o=l(),nt=a("div"),F(HL.$$.fragment),r7o=l(),fie=a("p"),t7o=o("Instantiates one of the base model classes of the library from a configuration."),a7o=l(),Ii=a("p"),n7o=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),s7o=o("not"),l7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),i7o=o("from_pretrained()"),d7o=o(" to load the model weights."),c7o=l(),F(Lp.$$.fragment),f7o=l(),Je=a("div"),F(UL.$$.fragment),m7o=l(),gie=a("p"),g7o=o("Instantiate one of the base model classes of the library from a pretrained model."),h7o=l(),Sa=a("p"),p7o=o("The model class to instantiate is selected based on the "),hie=a("code"),u7o=o("model_type"),_7o=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),b7o=o("pretrained_model_name_or_path"),v7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),F7o=o("pretrained_model_name_or_path"),T7o=o(":"),M7o=l(),x=a("ul"),yp=a("li"),_ie=a("strong"),E7o=o("albert"),C7o=o(" \u2014 "),XN=a("a"),w7o=o("AlbertModel"),A7o=o(" (ALBERT model)"),L7o=l(),xp=a("li"),bie=a("strong"),y7o=o("bart"),x7o=o(" \u2014 "),zN=a("a"),$7o=o("BartModel"),k7o=o(" (BART model)"),S7o=l(),$p=a("li"),vie=a("strong"),R7o=o("beit"),P7o=o(" \u2014 "),WN=a("a"),B7o=o("BeitModel"),I7o=o(" (BEiT model)"),N7o=l(),kp=a("li"),Fie=a("strong"),q7o=o("bert"),j7o=o(" \u2014 "),QN=a("a"),D7o=o("BertModel"),G7o=o(" (BERT model)"),O7o=l(),Sp=a("li"),Tie=a("strong"),V7o=o("bert-generation"),X7o=o(" \u2014 "),HN=a("a"),z7o=o("BertGenerationEncoder"),W7o=o(" (Bert Generation model)"),Q7o=l(),Rp=a("li"),Mie=a("strong"),H7o=o("big_bird"),U7o=o(" \u2014 "),UN=a("a"),J7o=o("BigBirdModel"),Y7o=o(" (BigBird model)"),K7o=l(),Pp=a("li"),Eie=a("strong"),Z7o=o("bigbird_pegasus"),e2o=o(" \u2014 "),JN=a("a"),o2o=o("BigBirdPegasusModel"),r2o=o(" (BigBird-Pegasus model)"),t2o=l(),Bp=a("li"),Cie=a("strong"),a2o=o("blenderbot"),n2o=o(" \u2014 "),YN=a("a"),s2o=o("BlenderbotModel"),l2o=o(" (Blenderbot model)"),i2o=l(),Ip=a("li"),wie=a("strong"),d2o=o("blenderbot-small"),c2o=o(" \u2014 "),KN=a("a"),f2o=o("BlenderbotSmallModel"),m2o=o(" (BlenderbotSmall model)"),g2o=l(),Np=a("li"),Aie=a("strong"),h2o=o("bloom"),p2o=o(" \u2014 "),ZN=a("a"),u2o=o("BloomModel"),_2o=o(" (BLOOM model)"),b2o=l(),qp=a("li"),Lie=a("strong"),v2o=o("camembert"),F2o=o(" \u2014 "),eq=a("a"),T2o=o("CamembertModel"),M2o=o(" (CamemBERT model)"),E2o=l(),jp=a("li"),yie=a("strong"),C2o=o("canine"),w2o=o(" \u2014 "),oq=a("a"),A2o=o("CanineModel"),L2o=o(" (CANINE model)"),y2o=l(),Dp=a("li"),xie=a("strong"),x2o=o("clip"),$2o=o(" \u2014 "),rq=a("a"),k2o=o("CLIPModel"),S2o=o(" (CLIP model)"),R2o=l(),Gp=a("li"),$ie=a("strong"),P2o=o("convbert"),B2o=o(" \u2014 "),tq=a("a"),I2o=o("ConvBertModel"),N2o=o(" (ConvBERT model)"),q2o=l(),Op=a("li"),kie=a("strong"),j2o=o("convnext"),D2o=o(" \u2014 "),aq=a("a"),G2o=o("ConvNextModel"),O2o=o(" (ConvNeXT model)"),V2o=l(),Vp=a("li"),Sie=a("strong"),X2o=o("ctrl"),z2o=o(" \u2014 "),nq=a("a"),W2o=o("CTRLModel"),Q2o=o(" (CTRL model)"),H2o=l(),Xp=a("li"),Rie=a("strong"),U2o=o("cvt"),J2o=o(" \u2014 "),sq=a("a"),Y2o=o("CvtModel"),K2o=o(" (CvT model)"),Z2o=l(),zp=a("li"),Pie=a("strong"),ebo=o("data2vec-audio"),obo=o(" \u2014 "),lq=a("a"),rbo=o("Data2VecAudioModel"),tbo=o(" (Data2VecAudio model)"),abo=l(),Wp=a("li"),Bie=a("strong"),nbo=o("data2vec-text"),sbo=o(" \u2014 "),iq=a("a"),lbo=o("Data2VecTextModel"),ibo=o(" (Data2VecText model)"),dbo=l(),Qp=a("li"),Iie=a("strong"),cbo=o("data2vec-vision"),fbo=o(" \u2014 "),dq=a("a"),mbo=o("Data2VecVisionModel"),gbo=o(" (Data2VecVision model)"),hbo=l(),Hp=a("li"),Nie=a("strong"),pbo=o("deberta"),ubo=o(" \u2014 "),cq=a("a"),_bo=o("DebertaModel"),bbo=o(" (DeBERTa model)"),vbo=l(),Up=a("li"),qie=a("strong"),Fbo=o("deberta-v2"),Tbo=o(" \u2014 "),fq=a("a"),Mbo=o("DebertaV2Model"),Ebo=o(" (DeBERTa-v2 model)"),Cbo=l(),Jp=a("li"),jie=a("strong"),wbo=o("decision_transformer"),Abo=o(" \u2014 "),mq=a("a"),Lbo=o("DecisionTransformerModel"),ybo=o(" (Decision Transformer model)"),xbo=l(),Yp=a("li"),Die=a("strong"),$bo=o("deit"),kbo=o(" \u2014 "),gq=a("a"),Sbo=o("DeiTModel"),Rbo=o(" (DeiT model)"),Pbo=l(),Kp=a("li"),Gie=a("strong"),Bbo=o("detr"),Ibo=o(" \u2014 "),hq=a("a"),Nbo=o("DetrModel"),qbo=o(" (DETR model)"),jbo=l(),Zp=a("li"),Oie=a("strong"),Dbo=o("distilbert"),Gbo=o(" \u2014 "),pq=a("a"),Obo=o("DistilBertModel"),Vbo=o(" (DistilBERT model)"),Xbo=l(),eu=a("li"),Vie=a("strong"),zbo=o("dpr"),Wbo=o(" \u2014 "),uq=a("a"),Qbo=o("DPRQuestionEncoder"),Hbo=o(" (DPR model)"),Ubo=l(),ou=a("li"),Xie=a("strong"),Jbo=o("dpt"),Ybo=o(" \u2014 "),_q=a("a"),Kbo=o("DPTModel"),Zbo=o(" (DPT model)"),evo=l(),ru=a("li"),zie=a("strong"),ovo=o("electra"),rvo=o(" \u2014 "),bq=a("a"),tvo=o("ElectraModel"),avo=o(" (ELECTRA model)"),nvo=l(),tu=a("li"),Wie=a("strong"),svo=o("flaubert"),lvo=o(" \u2014 "),vq=a("a"),ivo=o("FlaubertModel"),dvo=o(" (FlauBERT model)"),cvo=l(),au=a("li"),Qie=a("strong"),fvo=o("flava"),mvo=o(" \u2014 "),Fq=a("a"),gvo=o("FlavaModel"),hvo=o(" (FLAVA model)"),pvo=l(),nu=a("li"),Hie=a("strong"),uvo=o("fnet"),_vo=o(" \u2014 "),Tq=a("a"),bvo=o("FNetModel"),vvo=o(" (FNet model)"),Fvo=l(),su=a("li"),Uie=a("strong"),Tvo=o("fsmt"),Mvo=o(" \u2014 "),Mq=a("a"),Evo=o("FSMTModel"),Cvo=o(" (FairSeq Machine-Translation model)"),wvo=l(),Gs=a("li"),Jie=a("strong"),Avo=o("funnel"),Lvo=o(" \u2014 "),Eq=a("a"),yvo=o("FunnelModel"),xvo=o(" or "),Cq=a("a"),$vo=o("FunnelBaseModel"),kvo=o(" (Funnel Transformer model)"),Svo=l(),lu=a("li"),Yie=a("strong"),Rvo=o("glpn"),Pvo=o(" \u2014 "),wq=a("a"),Bvo=o("GLPNModel"),Ivo=o(" (GLPN model)"),Nvo=l(),iu=a("li"),Kie=a("strong"),qvo=o("gpt2"),jvo=o(" \u2014 "),Aq=a("a"),Dvo=o("GPT2Model"),Gvo=o(" (OpenAI GPT-2 model)"),Ovo=l(),du=a("li"),Zie=a("strong"),Vvo=o("gpt_neo"),Xvo=o(" \u2014 "),Lq=a("a"),zvo=o("GPTNeoModel"),Wvo=o(" (GPT Neo model)"),Qvo=l(),cu=a("li"),ede=a("strong"),Hvo=o("gpt_neox"),Uvo=o(" \u2014 "),yq=a("a"),Jvo=o("GPTNeoXModel"),Yvo=o(" (GPT NeoX model)"),Kvo=l(),fu=a("li"),ode=a("strong"),Zvo=o("gptj"),eFo=o(" \u2014 "),xq=a("a"),oFo=o("GPTJModel"),rFo=o(" (GPT-J model)"),tFo=l(),mu=a("li"),rde=a("strong"),aFo=o("hubert"),nFo=o(" \u2014 "),$q=a("a"),sFo=o("HubertModel"),lFo=o(" (Hubert model)"),iFo=l(),gu=a("li"),tde=a("strong"),dFo=o("ibert"),cFo=o(" \u2014 "),kq=a("a"),fFo=o("IBertModel"),mFo=o(" (I-BERT model)"),gFo=l(),hu=a("li"),ade=a("strong"),hFo=o("imagegpt"),pFo=o(" \u2014 "),Sq=a("a"),uFo=o("ImageGPTModel"),_Fo=o(" (ImageGPT model)"),bFo=l(),pu=a("li"),nde=a("strong"),vFo=o("layoutlm"),FFo=o(" \u2014 "),Rq=a("a"),TFo=o("LayoutLMModel"),MFo=o(" (LayoutLM model)"),EFo=l(),uu=a("li"),sde=a("strong"),CFo=o("layoutlmv2"),wFo=o(" \u2014 "),Pq=a("a"),AFo=o("LayoutLMv2Model"),LFo=o(" (LayoutLMv2 model)"),yFo=l(),_u=a("li"),lde=a("strong"),xFo=o("layoutlmv3"),$Fo=o(" \u2014 "),Bq=a("a"),kFo=o("LayoutLMv3Model"),SFo=o(" (LayoutLMv3 model)"),RFo=l(),bu=a("li"),ide=a("strong"),PFo=o("led"),BFo=o(" \u2014 "),Iq=a("a"),IFo=o("LEDModel"),NFo=o(" (LED model)"),qFo=l(),vu=a("li"),dde=a("strong"),jFo=o("levit"),DFo=o(" \u2014 "),Nq=a("a"),GFo=o("LevitModel"),OFo=o(" (LeViT model)"),VFo=l(),Fu=a("li"),cde=a("strong"),XFo=o("longformer"),zFo=o(" \u2014 "),qq=a("a"),WFo=o("LongformerModel"),QFo=o(" (Longformer model)"),HFo=l(),Tu=a("li"),fde=a("strong"),UFo=o("longt5"),JFo=o(" \u2014 "),jq=a("a"),YFo=o("LongT5Model"),KFo=o(" (LongT5 model)"),ZFo=l(),Mu=a("li"),mde=a("strong"),e6o=o("luke"),o6o=o(" \u2014 "),Dq=a("a"),r6o=o("LukeModel"),t6o=o(" (LUKE model)"),a6o=l(),Eu=a("li"),gde=a("strong"),n6o=o("lxmert"),s6o=o(" \u2014 "),Gq=a("a"),l6o=o("LxmertModel"),i6o=o(" (LXMERT model)"),d6o=l(),Cu=a("li"),hde=a("strong"),c6o=o("m2m_100"),f6o=o(" \u2014 "),Oq=a("a"),m6o=o("M2M100Model"),g6o=o(" (M2M100 model)"),h6o=l(),wu=a("li"),pde=a("strong"),p6o=o("marian"),u6o=o(" \u2014 "),Vq=a("a"),_6o=o("MarianModel"),b6o=o(" (Marian model)"),v6o=l(),Au=a("li"),ude=a("strong"),F6o=o("maskformer"),T6o=o(" \u2014 "),Xq=a("a"),M6o=o("MaskFormerModel"),E6o=o(" (MaskFormer model)"),C6o=l(),Lu=a("li"),_de=a("strong"),w6o=o("mbart"),A6o=o(" \u2014 "),zq=a("a"),L6o=o("MBartModel"),y6o=o(" (mBART model)"),x6o=l(),yu=a("li"),bde=a("strong"),$6o=o("mctct"),k6o=o(" \u2014 "),Wq=a("a"),S6o=o("MCTCTModel"),R6o=o(" (M-CTC-T model)"),P6o=l(),xu=a("li"),vde=a("strong"),B6o=o("megatron-bert"),I6o=o(" \u2014 "),Qq=a("a"),N6o=o("MegatronBertModel"),q6o=o(" (Megatron-BERT model)"),j6o=l(),$u=a("li"),Fde=a("strong"),D6o=o("mobilebert"),G6o=o(" \u2014 "),Hq=a("a"),O6o=o("MobileBertModel"),V6o=o(" (MobileBERT model)"),X6o=l(),ku=a("li"),Tde=a("strong"),z6o=o("mpnet"),W6o=o(" \u2014 "),Uq=a("a"),Q6o=o("MPNetModel"),H6o=o(" (MPNet model)"),U6o=l(),Su=a("li"),Mde=a("strong"),J6o=o("mt5"),Y6o=o(" \u2014 "),Jq=a("a"),K6o=o("MT5Model"),Z6o=o(" (MT5 model)"),eTo=l(),Ru=a("li"),Ede=a("strong"),oTo=o("nystromformer"),rTo=o(" \u2014 "),Yq=a("a"),tTo=o("NystromformerModel"),aTo=o(" (Nystr\xF6mformer model)"),nTo=l(),Pu=a("li"),Cde=a("strong"),sTo=o("openai-gpt"),lTo=o(" \u2014 "),Kq=a("a"),iTo=o("OpenAIGPTModel"),dTo=o(" (OpenAI GPT model)"),cTo=l(),Bu=a("li"),wde=a("strong"),fTo=o("opt"),mTo=o(" \u2014 "),Zq=a("a"),gTo=o("OPTModel"),hTo=o(" (OPT model)"),pTo=l(),Iu=a("li"),Ade=a("strong"),uTo=o("pegasus"),_To=o(" \u2014 "),ej=a("a"),bTo=o("PegasusModel"),vTo=o(" (Pegasus model)"),FTo=l(),Nu=a("li"),Lde=a("strong"),TTo=o("perceiver"),MTo=o(" \u2014 "),oj=a("a"),ETo=o("PerceiverModel"),CTo=o(" (Perceiver model)"),wTo=l(),qu=a("li"),yde=a("strong"),ATo=o("plbart"),LTo=o(" \u2014 "),rj=a("a"),yTo=o("PLBartModel"),xTo=o(" (PLBart model)"),$To=l(),ju=a("li"),xde=a("strong"),kTo=o("poolformer"),STo=o(" \u2014 "),tj=a("a"),RTo=o("PoolFormerModel"),PTo=o(" (PoolFormer model)"),BTo=l(),Du=a("li"),$de=a("strong"),ITo=o("prophetnet"),NTo=o(" \u2014 "),aj=a("a"),qTo=o("ProphetNetModel"),jTo=o(" (ProphetNet model)"),DTo=l(),Gu=a("li"),kde=a("strong"),GTo=o("qdqbert"),OTo=o(" \u2014 "),nj=a("a"),VTo=o("QDQBertModel"),XTo=o(" (QDQBert model)"),zTo=l(),Ou=a("li"),Sde=a("strong"),WTo=o("reformer"),QTo=o(" \u2014 "),sj=a("a"),HTo=o("ReformerModel"),UTo=o(" (Reformer model)"),JTo=l(),Vu=a("li"),Rde=a("strong"),YTo=o("regnet"),KTo=o(" \u2014 "),lj=a("a"),ZTo=o("RegNetModel"),eMo=o(" (RegNet model)"),oMo=l(),Xu=a("li"),Pde=a("strong"),rMo=o("rembert"),tMo=o(" \u2014 "),ij=a("a"),aMo=o("RemBertModel"),nMo=o(" (RemBERT model)"),sMo=l(),zu=a("li"),Bde=a("strong"),lMo=o("resnet"),iMo=o(" \u2014 "),dj=a("a"),dMo=o("ResNetModel"),cMo=o(" (ResNet model)"),fMo=l(),Wu=a("li"),Ide=a("strong"),mMo=o("retribert"),gMo=o(" \u2014 "),cj=a("a"),hMo=o("RetriBertModel"),pMo=o(" (RetriBERT model)"),uMo=l(),Qu=a("li"),Nde=a("strong"),_Mo=o("roberta"),bMo=o(" \u2014 "),fj=a("a"),vMo=o("RobertaModel"),FMo=o(" (RoBERTa model)"),TMo=l(),Hu=a("li"),qde=a("strong"),MMo=o("roformer"),EMo=o(" \u2014 "),mj=a("a"),CMo=o("RoFormerModel"),wMo=o(" (RoFormer model)"),AMo=l(),Uu=a("li"),jde=a("strong"),LMo=o("segformer"),yMo=o(" \u2014 "),gj=a("a"),xMo=o("SegformerModel"),$Mo=o(" (SegFormer model)"),kMo=l(),Ju=a("li"),Dde=a("strong"),SMo=o("sew"),RMo=o(" \u2014 "),hj=a("a"),PMo=o("SEWModel"),BMo=o(" (SEW model)"),IMo=l(),Yu=a("li"),Gde=a("strong"),NMo=o("sew-d"),qMo=o(" \u2014 "),pj=a("a"),jMo=o("SEWDModel"),DMo=o(" (SEW-D model)"),GMo=l(),Ku=a("li"),Ode=a("strong"),OMo=o("speech_to_text"),VMo=o(" \u2014 "),uj=a("a"),XMo=o("Speech2TextModel"),zMo=o(" (Speech2Text model)"),WMo=l(),Zu=a("li"),Vde=a("strong"),QMo=o("splinter"),HMo=o(" \u2014 "),_j=a("a"),UMo=o("SplinterModel"),JMo=o(" (Splinter model)"),YMo=l(),e_=a("li"),Xde=a("strong"),KMo=o("squeezebert"),ZMo=o(" \u2014 "),bj=a("a"),e4o=o("SqueezeBertModel"),o4o=o(" (SqueezeBERT model)"),r4o=l(),o_=a("li"),zde=a("strong"),t4o=o("swin"),a4o=o(" \u2014 "),vj=a("a"),n4o=o("SwinModel"),s4o=o(" (Swin Transformer model)"),l4o=l(),r_=a("li"),Wde=a("strong"),i4o=o("t5"),d4o=o(" \u2014 "),Fj=a("a"),c4o=o("T5Model"),f4o=o(" (T5 model)"),m4o=l(),t_=a("li"),Qde=a("strong"),g4o=o("tapas"),h4o=o(" \u2014 "),Tj=a("a"),p4o=o("TapasModel"),u4o=o(" (TAPAS model)"),_4o=l(),a_=a("li"),Hde=a("strong"),b4o=o("trajectory_transformer"),v4o=o(" \u2014 "),Mj=a("a"),F4o=o("TrajectoryTransformerModel"),T4o=o(" (Trajectory Transformer model)"),M4o=l(),n_=a("li"),Ude=a("strong"),E4o=o("transfo-xl"),C4o=o(" \u2014 "),Ej=a("a"),w4o=o("TransfoXLModel"),A4o=o(" (Transformer-XL model)"),L4o=l(),s_=a("li"),Jde=a("strong"),y4o=o("unispeech"),x4o=o(" \u2014 "),Cj=a("a"),$4o=o("UniSpeechModel"),k4o=o(" (UniSpeech model)"),S4o=l(),l_=a("li"),Yde=a("strong"),R4o=o("unispeech-sat"),P4o=o(" \u2014 "),wj=a("a"),B4o=o("UniSpeechSatModel"),I4o=o(" (UniSpeechSat model)"),N4o=l(),i_=a("li"),Kde=a("strong"),q4o=o("van"),j4o=o(" \u2014 "),Aj=a("a"),D4o=o("VanModel"),G4o=o(" (VAN model)"),O4o=l(),d_=a("li"),Zde=a("strong"),V4o=o("vilt"),X4o=o(" \u2014 "),Lj=a("a"),z4o=o("ViltModel"),W4o=o(" (ViLT model)"),Q4o=l(),c_=a("li"),ece=a("strong"),H4o=o("vision-text-dual-encoder"),U4o=o(" \u2014 "),yj=a("a"),J4o=o("VisionTextDualEncoderModel"),Y4o=o(" (VisionTextDualEncoder model)"),K4o=l(),f_=a("li"),oce=a("strong"),Z4o=o("visual_bert"),eEo=o(" \u2014 "),xj=a("a"),oEo=o("VisualBertModel"),rEo=o(" (VisualBERT model)"),tEo=l(),m_=a("li"),rce=a("strong"),aEo=o("vit"),nEo=o(" \u2014 "),$j=a("a"),sEo=o("ViTModel"),lEo=o(" (ViT model)"),iEo=l(),g_=a("li"),tce=a("strong"),dEo=o("vit_mae"),cEo=o(" \u2014 "),kj=a("a"),fEo=o("ViTMAEModel"),mEo=o(" (ViTMAE model)"),gEo=l(),h_=a("li"),ace=a("strong"),hEo=o("wav2vec2"),pEo=o(" \u2014 "),Sj=a("a"),uEo=o("Wav2Vec2Model"),_Eo=o(" (Wav2Vec2 model)"),bEo=l(),p_=a("li"),nce=a("strong"),vEo=o("wav2vec2-conformer"),FEo=o(" \u2014 "),Rj=a("a"),TEo=o("Wav2Vec2ConformerModel"),MEo=o(" (Wav2Vec2-Conformer model)"),EEo=l(),u_=a("li"),sce=a("strong"),CEo=o("wavlm"),wEo=o(" \u2014 "),Pj=a("a"),AEo=o("WavLMModel"),LEo=o(" (WavLM model)"),yEo=l(),__=a("li"),lce=a("strong"),xEo=o("xglm"),$Eo=o(" \u2014 "),Bj=a("a"),kEo=o("XGLMModel"),SEo=o(" (XGLM model)"),REo=l(),b_=a("li"),ice=a("strong"),PEo=o("xlm"),BEo=o(" \u2014 "),Ij=a("a"),IEo=o("XLMModel"),NEo=o(" (XLM model)"),qEo=l(),v_=a("li"),dce=a("strong"),jEo=o("xlm-prophetnet"),DEo=o(" \u2014 "),Nj=a("a"),GEo=o("XLMProphetNetModel"),OEo=o(" (XLM-ProphetNet model)"),VEo=l(),F_=a("li"),cce=a("strong"),XEo=o("xlm-roberta"),zEo=o(" \u2014 "),qj=a("a"),WEo=o("XLMRobertaModel"),QEo=o(" (XLM-RoBERTa model)"),HEo=l(),T_=a("li"),fce=a("strong"),UEo=o("xlm-roberta-xl"),JEo=o(" \u2014 "),jj=a("a"),YEo=o("XLMRobertaXLModel"),KEo=o(" (XLM-RoBERTa-XL model)"),ZEo=l(),M_=a("li"),mce=a("strong"),eCo=o("xlnet"),oCo=o(" \u2014 "),Dj=a("a"),rCo=o("XLNetModel"),tCo=o(" (XLNet model)"),aCo=l(),E_=a("li"),gce=a("strong"),nCo=o("yolos"),sCo=o(" \u2014 "),Gj=a("a"),lCo=o("YolosModel"),iCo=o(" (YOLOS model)"),dCo=l(),C_=a("li"),hce=a("strong"),cCo=o("yoso"),fCo=o(" \u2014 "),Oj=a("a"),mCo=o("YosoModel"),gCo=o(" (YOSO model)"),hCo=l(),w_=a("p"),pCo=o("The model is set in evaluation mode by default using "),pce=a("code"),uCo=o("model.eval()"),_Co=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),bCo=o("model.train()"),vCo=l(),F(A_.$$.fragment),gGe=l(),Ni=a("h2"),L_=a("a"),_ce=a("span"),F(JL.$$.fragment),FCo=l(),bce=a("span"),TCo=o("AutoModelForPreTraining"),hGe=l(),$o=a("div"),F(YL.$$.fragment),MCo=l(),qi=a("p"),ECo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=a("a"),CCo=o("from_pretrained()"),wCo=o(" class method or the "),Xj=a("a"),ACo=o("from_config()"),LCo=o(` class
method.`),yCo=l(),KL=a("p"),xCo=o("This class cannot be instantiated directly using "),vce=a("code"),$Co=o("__init__()"),kCo=o(" (throws an error)."),SCo=l(),st=a("div"),F(ZL.$$.fragment),RCo=l(),Fce=a("p"),PCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BCo=l(),ji=a("p"),ICo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),NCo=o("not"),qCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),jCo=o("from_pretrained()"),DCo=o(" to load the model weights."),GCo=l(),F(y_.$$.fragment),OCo=l(),Ye=a("div"),F(ey.$$.fragment),VCo=l(),Mce=a("p"),XCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zCo=l(),Ra=a("p"),WCo=o("The model class to instantiate is selected based on the "),Ece=a("code"),QCo=o("model_type"),HCo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),UCo=o("pretrained_model_name_or_path"),JCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(":"),ZCo=l(),G=a("ul"),x_=a("li"),Ace=a("strong"),e5o=o("albert"),o5o=o(" \u2014 "),Wj=a("a"),r5o=o("AlbertForPreTraining"),t5o=o(" (ALBERT model)"),a5o=l(),$_=a("li"),Lce=a("strong"),n5o=o("bart"),s5o=o(" \u2014 "),Qj=a("a"),l5o=o("BartForConditionalGeneration"),i5o=o(" (BART model)"),d5o=l(),k_=a("li"),yce=a("strong"),c5o=o("bert"),f5o=o(" \u2014 "),Hj=a("a"),m5o=o("BertForPreTraining"),g5o=o(" (BERT model)"),h5o=l(),S_=a("li"),xce=a("strong"),p5o=o("big_bird"),u5o=o(" \u2014 "),Uj=a("a"),_5o=o("BigBirdForPreTraining"),b5o=o(" (BigBird model)"),v5o=l(),R_=a("li"),$ce=a("strong"),F5o=o("bloom"),T5o=o(" \u2014 "),Jj=a("a"),M5o=o("BloomForCausalLM"),E5o=o(" (BLOOM model)"),C5o=l(),P_=a("li"),kce=a("strong"),w5o=o("camembert"),A5o=o(" \u2014 "),Yj=a("a"),L5o=o("CamembertForMaskedLM"),y5o=o(" (CamemBERT model)"),x5o=l(),B_=a("li"),Sce=a("strong"),$5o=o("ctrl"),k5o=o(" \u2014 "),Kj=a("a"),S5o=o("CTRLLMHeadModel"),R5o=o(" (CTRL model)"),P5o=l(),I_=a("li"),Rce=a("strong"),B5o=o("data2vec-text"),I5o=o(" \u2014 "),Zj=a("a"),N5o=o("Data2VecTextForMaskedLM"),q5o=o(" (Data2VecText model)"),j5o=l(),N_=a("li"),Pce=a("strong"),D5o=o("deberta"),G5o=o(" \u2014 "),eD=a("a"),O5o=o("DebertaForMaskedLM"),V5o=o(" (DeBERTa model)"),X5o=l(),q_=a("li"),Bce=a("strong"),z5o=o("deberta-v2"),W5o=o(" \u2014 "),oD=a("a"),Q5o=o("DebertaV2ForMaskedLM"),H5o=o(" (DeBERTa-v2 model)"),U5o=l(),j_=a("li"),Ice=a("strong"),J5o=o("distilbert"),Y5o=o(" \u2014 "),rD=a("a"),K5o=o("DistilBertForMaskedLM"),Z5o=o(" (DistilBERT model)"),e3o=l(),D_=a("li"),Nce=a("strong"),o3o=o("electra"),r3o=o(" \u2014 "),tD=a("a"),t3o=o("ElectraForPreTraining"),a3o=o(" (ELECTRA model)"),n3o=l(),G_=a("li"),qce=a("strong"),s3o=o("flaubert"),l3o=o(" \u2014 "),aD=a("a"),i3o=o("FlaubertWithLMHeadModel"),d3o=o(" (FlauBERT model)"),c3o=l(),O_=a("li"),jce=a("strong"),f3o=o("flava"),m3o=o(" \u2014 "),nD=a("a"),g3o=o("FlavaForPreTraining"),h3o=o(" (FLAVA model)"),p3o=l(),V_=a("li"),Dce=a("strong"),u3o=o("fnet"),_3o=o(" \u2014 "),sD=a("a"),b3o=o("FNetForPreTraining"),v3o=o(" (FNet model)"),F3o=l(),X_=a("li"),Gce=a("strong"),T3o=o("fsmt"),M3o=o(" \u2014 "),lD=a("a"),E3o=o("FSMTForConditionalGeneration"),C3o=o(" (FairSeq Machine-Translation model)"),w3o=l(),z_=a("li"),Oce=a("strong"),A3o=o("funnel"),L3o=o(" \u2014 "),iD=a("a"),y3o=o("FunnelForPreTraining"),x3o=o(" (Funnel Transformer model)"),$3o=l(),W_=a("li"),Vce=a("strong"),k3o=o("gpt2"),S3o=o(" \u2014 "),dD=a("a"),R3o=o("GPT2LMHeadModel"),P3o=o(" (OpenAI GPT-2 model)"),B3o=l(),Q_=a("li"),Xce=a("strong"),I3o=o("ibert"),N3o=o(" \u2014 "),cD=a("a"),q3o=o("IBertForMaskedLM"),j3o=o(" (I-BERT model)"),D3o=l(),H_=a("li"),zce=a("strong"),G3o=o("layoutlm"),O3o=o(" \u2014 "),fD=a("a"),V3o=o("LayoutLMForMaskedLM"),X3o=o(" (LayoutLM model)"),z3o=l(),U_=a("li"),Wce=a("strong"),W3o=o("longformer"),Q3o=o(" \u2014 "),mD=a("a"),H3o=o("LongformerForMaskedLM"),U3o=o(" (Longformer model)"),J3o=l(),J_=a("li"),Qce=a("strong"),Y3o=o("lxmert"),K3o=o(" \u2014 "),gD=a("a"),Z3o=o("LxmertForPreTraining"),e0o=o(" (LXMERT model)"),o0o=l(),Y_=a("li"),Hce=a("strong"),r0o=o("megatron-bert"),t0o=o(" \u2014 "),hD=a("a"),a0o=o("MegatronBertForPreTraining"),n0o=o(" (Megatron-BERT model)"),s0o=l(),K_=a("li"),Uce=a("strong"),l0o=o("mobilebert"),i0o=o(" \u2014 "),pD=a("a"),d0o=o("MobileBertForPreTraining"),c0o=o(" (MobileBERT model)"),f0o=l(),Z_=a("li"),Jce=a("strong"),m0o=o("mpnet"),g0o=o(" \u2014 "),uD=a("a"),h0o=o("MPNetForMaskedLM"),p0o=o(" (MPNet model)"),u0o=l(),e1=a("li"),Yce=a("strong"),_0o=o("openai-gpt"),b0o=o(" \u2014 "),_D=a("a"),v0o=o("OpenAIGPTLMHeadModel"),F0o=o(" (OpenAI GPT model)"),T0o=l(),o1=a("li"),Kce=a("strong"),M0o=o("retribert"),E0o=o(" \u2014 "),bD=a("a"),C0o=o("RetriBertModel"),w0o=o(" (RetriBERT model)"),A0o=l(),r1=a("li"),Zce=a("strong"),L0o=o("roberta"),y0o=o(" \u2014 "),vD=a("a"),x0o=o("RobertaForMaskedLM"),$0o=o(" (RoBERTa model)"),k0o=l(),t1=a("li"),efe=a("strong"),S0o=o("splinter"),R0o=o(" \u2014 "),FD=a("a"),P0o=o("SplinterForPreTraining"),B0o=o(" (Splinter model)"),I0o=l(),a1=a("li"),ofe=a("strong"),N0o=o("squeezebert"),q0o=o(" \u2014 "),TD=a("a"),j0o=o("SqueezeBertForMaskedLM"),D0o=o(" (SqueezeBERT model)"),G0o=l(),n1=a("li"),rfe=a("strong"),O0o=o("t5"),V0o=o(" \u2014 "),MD=a("a"),X0o=o("T5ForConditionalGeneration"),z0o=o(" (T5 model)"),W0o=l(),s1=a("li"),tfe=a("strong"),Q0o=o("tapas"),H0o=o(" \u2014 "),ED=a("a"),U0o=o("TapasForMaskedLM"),J0o=o(" (TAPAS model)"),Y0o=l(),l1=a("li"),afe=a("strong"),K0o=o("transfo-xl"),Z0o=o(" \u2014 "),CD=a("a"),ewo=o("TransfoXLLMHeadModel"),owo=o(" (Transformer-XL model)"),rwo=l(),i1=a("li"),nfe=a("strong"),two=o("unispeech"),awo=o(" \u2014 "),wD=a("a"),nwo=o("UniSpeechForPreTraining"),swo=o(" (UniSpeech model)"),lwo=l(),d1=a("li"),sfe=a("strong"),iwo=o("unispeech-sat"),dwo=o(" \u2014 "),AD=a("a"),cwo=o("UniSpeechSatForPreTraining"),fwo=o(" (UniSpeechSat model)"),mwo=l(),c1=a("li"),lfe=a("strong"),gwo=o("visual_bert"),hwo=o(" \u2014 "),LD=a("a"),pwo=o("VisualBertForPreTraining"),uwo=o(" (VisualBERT model)"),_wo=l(),f1=a("li"),ife=a("strong"),bwo=o("vit_mae"),vwo=o(" \u2014 "),yD=a("a"),Fwo=o("ViTMAEForPreTraining"),Two=o(" (ViTMAE model)"),Mwo=l(),m1=a("li"),dfe=a("strong"),Ewo=o("wav2vec2"),Cwo=o(" \u2014 "),xD=a("a"),wwo=o("Wav2Vec2ForPreTraining"),Awo=o(" (Wav2Vec2 model)"),Lwo=l(),g1=a("li"),cfe=a("strong"),ywo=o("wav2vec2-conformer"),xwo=o(" \u2014 "),$D=a("a"),$wo=o("Wav2Vec2ConformerForPreTraining"),kwo=o(" (Wav2Vec2-Conformer model)"),Swo=l(),h1=a("li"),ffe=a("strong"),Rwo=o("xlm"),Pwo=o(" \u2014 "),kD=a("a"),Bwo=o("XLMWithLMHeadModel"),Iwo=o(" (XLM model)"),Nwo=l(),p1=a("li"),mfe=a("strong"),qwo=o("xlm-roberta"),jwo=o(" \u2014 "),SD=a("a"),Dwo=o("XLMRobertaForMaskedLM"),Gwo=o(" (XLM-RoBERTa model)"),Owo=l(),u1=a("li"),gfe=a("strong"),Vwo=o("xlm-roberta-xl"),Xwo=o(" \u2014 "),RD=a("a"),zwo=o("XLMRobertaXLForMaskedLM"),Wwo=o(" (XLM-RoBERTa-XL model)"),Qwo=l(),_1=a("li"),hfe=a("strong"),Hwo=o("xlnet"),Uwo=o(" \u2014 "),PD=a("a"),Jwo=o("XLNetLMHeadModel"),Ywo=o(" (XLNet model)"),Kwo=l(),b1=a("p"),Zwo=o("The model is set in evaluation mode by default using "),pfe=a("code"),eAo=o("model.eval()"),oAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),rAo=o("model.train()"),tAo=l(),F(v1.$$.fragment),pGe=l(),Di=a("h2"),F1=a("a"),_fe=a("span"),F(oy.$$.fragment),aAo=l(),bfe=a("span"),nAo=o("AutoModelForCausalLM"),uGe=l(),ko=a("div"),F(ry.$$.fragment),sAo=l(),Gi=a("p"),lAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=a("a"),iAo=o("from_pretrained()"),dAo=o(" class method or the "),ID=a("a"),cAo=o("from_config()"),fAo=o(` class
method.`),mAo=l(),ty=a("p"),gAo=o("This class cannot be instantiated directly using "),vfe=a("code"),hAo=o("__init__()"),pAo=o(" (throws an error)."),uAo=l(),lt=a("div"),F(ay.$$.fragment),_Ao=l(),Ffe=a("p"),bAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vAo=l(),Oi=a("p"),FAo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),TAo=o("not"),MAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),EAo=o("from_pretrained()"),CAo=o(" to load the model weights."),wAo=l(),F(T1.$$.fragment),AAo=l(),Ke=a("div"),F(ny.$$.fragment),LAo=l(),Mfe=a("p"),yAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xAo=l(),Pa=a("p"),$Ao=o("The model class to instantiate is selected based on the "),Efe=a("code"),kAo=o("model_type"),SAo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),RAo=o("pretrained_model_name_or_path"),PAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),BAo=o("pretrained_model_name_or_path"),IAo=o(":"),NAo=l(),z=a("ul"),M1=a("li"),Afe=a("strong"),qAo=o("bart"),jAo=o(" \u2014 "),qD=a("a"),DAo=o("BartForCausalLM"),GAo=o(" (BART model)"),OAo=l(),E1=a("li"),Lfe=a("strong"),VAo=o("bert"),XAo=o(" \u2014 "),jD=a("a"),zAo=o("BertLMHeadModel"),WAo=o(" (BERT model)"),QAo=l(),C1=a("li"),yfe=a("strong"),HAo=o("bert-generation"),UAo=o(" \u2014 "),DD=a("a"),JAo=o("BertGenerationDecoder"),YAo=o(" (Bert Generation model)"),KAo=l(),w1=a("li"),xfe=a("strong"),ZAo=o("big_bird"),eLo=o(" \u2014 "),GD=a("a"),oLo=o("BigBirdForCausalLM"),rLo=o(" (BigBird model)"),tLo=l(),A1=a("li"),$fe=a("strong"),aLo=o("bigbird_pegasus"),nLo=o(" \u2014 "),OD=a("a"),sLo=o("BigBirdPegasusForCausalLM"),lLo=o(" (BigBird-Pegasus model)"),iLo=l(),L1=a("li"),kfe=a("strong"),dLo=o("blenderbot"),cLo=o(" \u2014 "),VD=a("a"),fLo=o("BlenderbotForCausalLM"),mLo=o(" (Blenderbot model)"),gLo=l(),y1=a("li"),Sfe=a("strong"),hLo=o("blenderbot-small"),pLo=o(" \u2014 "),XD=a("a"),uLo=o("BlenderbotSmallForCausalLM"),_Lo=o(" (BlenderbotSmall model)"),bLo=l(),x1=a("li"),Rfe=a("strong"),vLo=o("bloom"),FLo=o(" \u2014 "),zD=a("a"),TLo=o("BloomForCausalLM"),MLo=o(" (BLOOM model)"),ELo=l(),$1=a("li"),Pfe=a("strong"),CLo=o("camembert"),wLo=o(" \u2014 "),WD=a("a"),ALo=o("CamembertForCausalLM"),LLo=o(" (CamemBERT model)"),yLo=l(),k1=a("li"),Bfe=a("strong"),xLo=o("ctrl"),$Lo=o(" \u2014 "),QD=a("a"),kLo=o("CTRLLMHeadModel"),SLo=o(" (CTRL model)"),RLo=l(),S1=a("li"),Ife=a("strong"),PLo=o("data2vec-text"),BLo=o(" \u2014 "),HD=a("a"),ILo=o("Data2VecTextForCausalLM"),NLo=o(" (Data2VecText model)"),qLo=l(),R1=a("li"),Nfe=a("strong"),jLo=o("electra"),DLo=o(" \u2014 "),UD=a("a"),GLo=o("ElectraForCausalLM"),OLo=o(" (ELECTRA model)"),VLo=l(),P1=a("li"),qfe=a("strong"),XLo=o("gpt2"),zLo=o(" \u2014 "),JD=a("a"),WLo=o("GPT2LMHeadModel"),QLo=o(" (OpenAI GPT-2 model)"),HLo=l(),B1=a("li"),jfe=a("strong"),ULo=o("gpt_neo"),JLo=o(" \u2014 "),YD=a("a"),YLo=o("GPTNeoForCausalLM"),KLo=o(" (GPT Neo model)"),ZLo=l(),I1=a("li"),Dfe=a("strong"),eyo=o("gpt_neox"),oyo=o(" \u2014 "),KD=a("a"),ryo=o("GPTNeoXForCausalLM"),tyo=o(" (GPT NeoX model)"),ayo=l(),N1=a("li"),Gfe=a("strong"),nyo=o("gptj"),syo=o(" \u2014 "),ZD=a("a"),lyo=o("GPTJForCausalLM"),iyo=o(" (GPT-J model)"),dyo=l(),q1=a("li"),Ofe=a("strong"),cyo=o("marian"),fyo=o(" \u2014 "),eG=a("a"),myo=o("MarianForCausalLM"),gyo=o(" (Marian model)"),hyo=l(),j1=a("li"),Vfe=a("strong"),pyo=o("mbart"),uyo=o(" \u2014 "),oG=a("a"),_yo=o("MBartForCausalLM"),byo=o(" (mBART model)"),vyo=l(),D1=a("li"),Xfe=a("strong"),Fyo=o("megatron-bert"),Tyo=o(" \u2014 "),rG=a("a"),Myo=o("MegatronBertForCausalLM"),Eyo=o(" (Megatron-BERT model)"),Cyo=l(),G1=a("li"),zfe=a("strong"),wyo=o("openai-gpt"),Ayo=o(" \u2014 "),tG=a("a"),Lyo=o("OpenAIGPTLMHeadModel"),yyo=o(" (OpenAI GPT model)"),xyo=l(),O1=a("li"),Wfe=a("strong"),$yo=o("opt"),kyo=o(" \u2014 "),aG=a("a"),Syo=o("OPTForCausalLM"),Ryo=o(" (OPT model)"),Pyo=l(),V1=a("li"),Qfe=a("strong"),Byo=o("pegasus"),Iyo=o(" \u2014 "),nG=a("a"),Nyo=o("PegasusForCausalLM"),qyo=o(" (Pegasus model)"),jyo=l(),X1=a("li"),Hfe=a("strong"),Dyo=o("plbart"),Gyo=o(" \u2014 "),sG=a("a"),Oyo=o("PLBartForCausalLM"),Vyo=o(" (PLBart model)"),Xyo=l(),z1=a("li"),Ufe=a("strong"),zyo=o("prophetnet"),Wyo=o(" \u2014 "),lG=a("a"),Qyo=o("ProphetNetForCausalLM"),Hyo=o(" (ProphetNet model)"),Uyo=l(),W1=a("li"),Jfe=a("strong"),Jyo=o("qdqbert"),Yyo=o(" \u2014 "),iG=a("a"),Kyo=o("QDQBertLMHeadModel"),Zyo=o(" (QDQBert model)"),e8o=l(),Q1=a("li"),Yfe=a("strong"),o8o=o("reformer"),r8o=o(" \u2014 "),dG=a("a"),t8o=o("ReformerModelWithLMHead"),a8o=o(" (Reformer model)"),n8o=l(),H1=a("li"),Kfe=a("strong"),s8o=o("rembert"),l8o=o(" \u2014 "),cG=a("a"),i8o=o("RemBertForCausalLM"),d8o=o(" (RemBERT model)"),c8o=l(),U1=a("li"),Zfe=a("strong"),f8o=o("roberta"),m8o=o(" \u2014 "),fG=a("a"),g8o=o("RobertaForCausalLM"),h8o=o(" (RoBERTa model)"),p8o=l(),J1=a("li"),eme=a("strong"),u8o=o("roformer"),_8o=o(" \u2014 "),mG=a("a"),b8o=o("RoFormerForCausalLM"),v8o=o(" (RoFormer model)"),F8o=l(),Y1=a("li"),ome=a("strong"),T8o=o("speech_to_text_2"),M8o=o(" \u2014 "),gG=a("a"),E8o=o("Speech2Text2ForCausalLM"),C8o=o(" (Speech2Text2 model)"),w8o=l(),K1=a("li"),rme=a("strong"),A8o=o("transfo-xl"),L8o=o(" \u2014 "),hG=a("a"),y8o=o("TransfoXLLMHeadModel"),x8o=o(" (Transformer-XL model)"),$8o=l(),Z1=a("li"),tme=a("strong"),k8o=o("trocr"),S8o=o(" \u2014 "),pG=a("a"),R8o=o("TrOCRForCausalLM"),P8o=o(" (TrOCR model)"),B8o=l(),e7=a("li"),ame=a("strong"),I8o=o("xglm"),N8o=o(" \u2014 "),uG=a("a"),q8o=o("XGLMForCausalLM"),j8o=o(" (XGLM model)"),D8o=l(),o7=a("li"),nme=a("strong"),G8o=o("xlm"),O8o=o(" \u2014 "),_G=a("a"),V8o=o("XLMWithLMHeadModel"),X8o=o(" (XLM model)"),z8o=l(),r7=a("li"),sme=a("strong"),W8o=o("xlm-prophetnet"),Q8o=o(" \u2014 "),bG=a("a"),H8o=o("XLMProphetNetForCausalLM"),U8o=o(" (XLM-ProphetNet model)"),J8o=l(),t7=a("li"),lme=a("strong"),Y8o=o("xlm-roberta"),K8o=o(" \u2014 "),vG=a("a"),Z8o=o("XLMRobertaForCausalLM"),e9o=o(" (XLM-RoBERTa model)"),o9o=l(),a7=a("li"),ime=a("strong"),r9o=o("xlm-roberta-xl"),t9o=o(" \u2014 "),FG=a("a"),a9o=o("XLMRobertaXLForCausalLM"),n9o=o(" (XLM-RoBERTa-XL model)"),s9o=l(),n7=a("li"),dme=a("strong"),l9o=o("xlnet"),i9o=o(" \u2014 "),TG=a("a"),d9o=o("XLNetLMHeadModel"),c9o=o(" (XLNet model)"),f9o=l(),s7=a("p"),m9o=o("The model is set in evaluation mode by default using "),cme=a("code"),g9o=o("model.eval()"),h9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),p9o=o("model.train()"),u9o=l(),F(l7.$$.fragment),_Ge=l(),Vi=a("h2"),i7=a("a"),mme=a("span"),F(sy.$$.fragment),_9o=l(),gme=a("span"),b9o=o("AutoModelForMaskedLM"),bGe=l(),So=a("div"),F(ly.$$.fragment),v9o=l(),Xi=a("p"),F9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=a("a"),T9o=o("from_pretrained()"),M9o=o(" class method or the "),EG=a("a"),E9o=o("from_config()"),C9o=o(` class
method.`),w9o=l(),iy=a("p"),A9o=o("This class cannot be instantiated directly using "),hme=a("code"),L9o=o("__init__()"),y9o=o(" (throws an error)."),x9o=l(),it=a("div"),F(dy.$$.fragment),$9o=l(),pme=a("p"),k9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S9o=l(),zi=a("p"),R9o=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),P9o=o("not"),B9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),I9o=o("from_pretrained()"),N9o=o(" to load the model weights."),q9o=l(),F(d7.$$.fragment),j9o=l(),Ze=a("div"),F(cy.$$.fragment),D9o=l(),_me=a("p"),G9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O9o=l(),Ba=a("p"),V9o=o("The model class to instantiate is selected based on the "),bme=a("code"),X9o=o("model_type"),z9o=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),W9o=o("pretrained_model_name_or_path"),Q9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(":"),J9o=l(),Q=a("ul"),c7=a("li"),Tme=a("strong"),Y9o=o("albert"),K9o=o(" \u2014 "),wG=a("a"),Z9o=o("AlbertForMaskedLM"),exo=o(" (ALBERT model)"),oxo=l(),f7=a("li"),Mme=a("strong"),rxo=o("bart"),txo=o(" \u2014 "),AG=a("a"),axo=o("BartForConditionalGeneration"),nxo=o(" (BART model)"),sxo=l(),m7=a("li"),Eme=a("strong"),lxo=o("bert"),ixo=o(" \u2014 "),LG=a("a"),dxo=o("BertForMaskedLM"),cxo=o(" (BERT model)"),fxo=l(),g7=a("li"),Cme=a("strong"),mxo=o("big_bird"),gxo=o(" \u2014 "),yG=a("a"),hxo=o("BigBirdForMaskedLM"),pxo=o(" (BigBird model)"),uxo=l(),h7=a("li"),wme=a("strong"),_xo=o("camembert"),bxo=o(" \u2014 "),xG=a("a"),vxo=o("CamembertForMaskedLM"),Fxo=o(" (CamemBERT model)"),Txo=l(),p7=a("li"),Ame=a("strong"),Mxo=o("convbert"),Exo=o(" \u2014 "),$G=a("a"),Cxo=o("ConvBertForMaskedLM"),wxo=o(" (ConvBERT model)"),Axo=l(),u7=a("li"),Lme=a("strong"),Lxo=o("data2vec-text"),yxo=o(" \u2014 "),kG=a("a"),xxo=o("Data2VecTextForMaskedLM"),$xo=o(" (Data2VecText model)"),kxo=l(),_7=a("li"),yme=a("strong"),Sxo=o("deberta"),Rxo=o(" \u2014 "),SG=a("a"),Pxo=o("DebertaForMaskedLM"),Bxo=o(" (DeBERTa model)"),Ixo=l(),b7=a("li"),xme=a("strong"),Nxo=o("deberta-v2"),qxo=o(" \u2014 "),RG=a("a"),jxo=o("DebertaV2ForMaskedLM"),Dxo=o(" (DeBERTa-v2 model)"),Gxo=l(),v7=a("li"),$me=a("strong"),Oxo=o("distilbert"),Vxo=o(" \u2014 "),PG=a("a"),Xxo=o("DistilBertForMaskedLM"),zxo=o(" (DistilBERT model)"),Wxo=l(),F7=a("li"),kme=a("strong"),Qxo=o("electra"),Hxo=o(" \u2014 "),BG=a("a"),Uxo=o("ElectraForMaskedLM"),Jxo=o(" (ELECTRA model)"),Yxo=l(),T7=a("li"),Sme=a("strong"),Kxo=o("flaubert"),Zxo=o(" \u2014 "),IG=a("a"),e$o=o("FlaubertWithLMHeadModel"),o$o=o(" (FlauBERT model)"),r$o=l(),M7=a("li"),Rme=a("strong"),t$o=o("fnet"),a$o=o(" \u2014 "),NG=a("a"),n$o=o("FNetForMaskedLM"),s$o=o(" (FNet model)"),l$o=l(),E7=a("li"),Pme=a("strong"),i$o=o("funnel"),d$o=o(" \u2014 "),qG=a("a"),c$o=o("FunnelForMaskedLM"),f$o=o(" (Funnel Transformer model)"),m$o=l(),C7=a("li"),Bme=a("strong"),g$o=o("ibert"),h$o=o(" \u2014 "),jG=a("a"),p$o=o("IBertForMaskedLM"),u$o=o(" (I-BERT model)"),_$o=l(),w7=a("li"),Ime=a("strong"),b$o=o("layoutlm"),v$o=o(" \u2014 "),DG=a("a"),F$o=o("LayoutLMForMaskedLM"),T$o=o(" (LayoutLM model)"),M$o=l(),A7=a("li"),Nme=a("strong"),E$o=o("longformer"),C$o=o(" \u2014 "),GG=a("a"),w$o=o("LongformerForMaskedLM"),A$o=o(" (Longformer model)"),L$o=l(),L7=a("li"),qme=a("strong"),y$o=o("luke"),x$o=o(" \u2014 "),OG=a("a"),$$o=o("LukeForMaskedLM"),k$o=o(" (LUKE model)"),S$o=l(),y7=a("li"),jme=a("strong"),R$o=o("mbart"),P$o=o(" \u2014 "),VG=a("a"),B$o=o("MBartForConditionalGeneration"),I$o=o(" (mBART model)"),N$o=l(),x7=a("li"),Dme=a("strong"),q$o=o("megatron-bert"),j$o=o(" \u2014 "),XG=a("a"),D$o=o("MegatronBertForMaskedLM"),G$o=o(" (Megatron-BERT model)"),O$o=l(),$7=a("li"),Gme=a("strong"),V$o=o("mobilebert"),X$o=o(" \u2014 "),zG=a("a"),z$o=o("MobileBertForMaskedLM"),W$o=o(" (MobileBERT model)"),Q$o=l(),k7=a("li"),Ome=a("strong"),H$o=o("mpnet"),U$o=o(" \u2014 "),WG=a("a"),J$o=o("MPNetForMaskedLM"),Y$o=o(" (MPNet model)"),K$o=l(),S7=a("li"),Vme=a("strong"),Z$o=o("nystromformer"),eko=o(" \u2014 "),QG=a("a"),oko=o("NystromformerForMaskedLM"),rko=o(" (Nystr\xF6mformer model)"),tko=l(),R7=a("li"),Xme=a("strong"),ako=o("perceiver"),nko=o(" \u2014 "),HG=a("a"),sko=o("PerceiverForMaskedLM"),lko=o(" (Perceiver model)"),iko=l(),P7=a("li"),zme=a("strong"),dko=o("qdqbert"),cko=o(" \u2014 "),UG=a("a"),fko=o("QDQBertForMaskedLM"),mko=o(" (QDQBert model)"),gko=l(),B7=a("li"),Wme=a("strong"),hko=o("reformer"),pko=o(" \u2014 "),JG=a("a"),uko=o("ReformerForMaskedLM"),_ko=o(" (Reformer model)"),bko=l(),I7=a("li"),Qme=a("strong"),vko=o("rembert"),Fko=o(" \u2014 "),YG=a("a"),Tko=o("RemBertForMaskedLM"),Mko=o(" (RemBERT model)"),Eko=l(),N7=a("li"),Hme=a("strong"),Cko=o("roberta"),wko=o(" \u2014 "),KG=a("a"),Ako=o("RobertaForMaskedLM"),Lko=o(" (RoBERTa model)"),yko=l(),q7=a("li"),Ume=a("strong"),xko=o("roformer"),$ko=o(" \u2014 "),ZG=a("a"),kko=o("RoFormerForMaskedLM"),Sko=o(" (RoFormer model)"),Rko=l(),j7=a("li"),Jme=a("strong"),Pko=o("squeezebert"),Bko=o(" \u2014 "),eO=a("a"),Iko=o("SqueezeBertForMaskedLM"),Nko=o(" (SqueezeBERT model)"),qko=l(),D7=a("li"),Yme=a("strong"),jko=o("tapas"),Dko=o(" \u2014 "),oO=a("a"),Gko=o("TapasForMaskedLM"),Oko=o(" (TAPAS model)"),Vko=l(),G7=a("li"),Kme=a("strong"),Xko=o("wav2vec2"),zko=o(" \u2014 "),Zme=a("code"),Wko=o("Wav2Vec2ForMaskedLM"),Qko=o(" (Wav2Vec2 model)"),Hko=l(),O7=a("li"),ege=a("strong"),Uko=o("xlm"),Jko=o(" \u2014 "),rO=a("a"),Yko=o("XLMWithLMHeadModel"),Kko=o(" (XLM model)"),Zko=l(),V7=a("li"),oge=a("strong"),eSo=o("xlm-roberta"),oSo=o(" \u2014 "),tO=a("a"),rSo=o("XLMRobertaForMaskedLM"),tSo=o(" (XLM-RoBERTa model)"),aSo=l(),X7=a("li"),rge=a("strong"),nSo=o("xlm-roberta-xl"),sSo=o(" \u2014 "),aO=a("a"),lSo=o("XLMRobertaXLForMaskedLM"),iSo=o(" (XLM-RoBERTa-XL model)"),dSo=l(),z7=a("li"),tge=a("strong"),cSo=o("yoso"),fSo=o(" \u2014 "),nO=a("a"),mSo=o("YosoForMaskedLM"),gSo=o(" (YOSO model)"),hSo=l(),W7=a("p"),pSo=o("The model is set in evaluation mode by default using "),age=a("code"),uSo=o("model.eval()"),_So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),bSo=o("model.train()"),vSo=l(),F(Q7.$$.fragment),vGe=l(),Wi=a("h2"),H7=a("a"),sge=a("span"),F(fy.$$.fragment),FSo=l(),lge=a("span"),TSo=o("AutoModelForSeq2SeqLM"),FGe=l(),Ro=a("div"),F(my.$$.fragment),MSo=l(),Qi=a("p"),ESo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=a("a"),CSo=o("from_pretrained()"),wSo=o(" class method or the "),lO=a("a"),ASo=o("from_config()"),LSo=o(` class
method.`),ySo=l(),gy=a("p"),xSo=o("This class cannot be instantiated directly using "),ige=a("code"),$So=o("__init__()"),kSo=o(" (throws an error)."),SSo=l(),dt=a("div"),F(hy.$$.fragment),RSo=l(),dge=a("p"),PSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BSo=l(),Hi=a("p"),ISo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),NSo=o("not"),qSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),jSo=o("from_pretrained()"),DSo=o(" to load the model weights."),GSo=l(),F(U7.$$.fragment),OSo=l(),eo=a("div"),F(py.$$.fragment),VSo=l(),fge=a("p"),XSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zSo=l(),Ia=a("p"),WSo=o("The model class to instantiate is selected based on the "),mge=a("code"),QSo=o("model_type"),HSo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),USo=o("pretrained_model_name_or_path"),JSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),YSo=o("pretrained_model_name_or_path"),KSo=o(":"),ZSo=l(),pe=a("ul"),J7=a("li"),pge=a("strong"),eRo=o("bart"),oRo=o(" \u2014 "),dO=a("a"),rRo=o("BartForConditionalGeneration"),tRo=o(" (BART model)"),aRo=l(),Y7=a("li"),uge=a("strong"),nRo=o("bigbird_pegasus"),sRo=o(" \u2014 "),cO=a("a"),lRo=o("BigBirdPegasusForConditionalGeneration"),iRo=o(" (BigBird-Pegasus model)"),dRo=l(),K7=a("li"),_ge=a("strong"),cRo=o("blenderbot"),fRo=o(" \u2014 "),fO=a("a"),mRo=o("BlenderbotForConditionalGeneration"),gRo=o(" (Blenderbot model)"),hRo=l(),Z7=a("li"),bge=a("strong"),pRo=o("blenderbot-small"),uRo=o(" \u2014 "),mO=a("a"),_Ro=o("BlenderbotSmallForConditionalGeneration"),bRo=o(" (BlenderbotSmall model)"),vRo=l(),e2=a("li"),vge=a("strong"),FRo=o("encoder-decoder"),TRo=o(" \u2014 "),gO=a("a"),MRo=o("EncoderDecoderModel"),ERo=o(" (Encoder decoder model)"),CRo=l(),o2=a("li"),Fge=a("strong"),wRo=o("fsmt"),ARo=o(" \u2014 "),hO=a("a"),LRo=o("FSMTForConditionalGeneration"),yRo=o(" (FairSeq Machine-Translation model)"),xRo=l(),r2=a("li"),Tge=a("strong"),$Ro=o("led"),kRo=o(" \u2014 "),pO=a("a"),SRo=o("LEDForConditionalGeneration"),RRo=o(" (LED model)"),PRo=l(),t2=a("li"),Mge=a("strong"),BRo=o("longt5"),IRo=o(" \u2014 "),uO=a("a"),NRo=o("LongT5ForConditionalGeneration"),qRo=o(" (LongT5 model)"),jRo=l(),a2=a("li"),Ege=a("strong"),DRo=o("m2m_100"),GRo=o(" \u2014 "),_O=a("a"),ORo=o("M2M100ForConditionalGeneration"),VRo=o(" (M2M100 model)"),XRo=l(),n2=a("li"),Cge=a("strong"),zRo=o("marian"),WRo=o(" \u2014 "),bO=a("a"),QRo=o("MarianMTModel"),HRo=o(" (Marian model)"),URo=l(),s2=a("li"),wge=a("strong"),JRo=o("mbart"),YRo=o(" \u2014 "),vO=a("a"),KRo=o("MBartForConditionalGeneration"),ZRo=o(" (mBART model)"),ePo=l(),l2=a("li"),Age=a("strong"),oPo=o("mt5"),rPo=o(" \u2014 "),FO=a("a"),tPo=o("MT5ForConditionalGeneration"),aPo=o(" (MT5 model)"),nPo=l(),i2=a("li"),Lge=a("strong"),sPo=o("pegasus"),lPo=o(" \u2014 "),TO=a("a"),iPo=o("PegasusForConditionalGeneration"),dPo=o(" (Pegasus model)"),cPo=l(),d2=a("li"),yge=a("strong"),fPo=o("plbart"),mPo=o(" \u2014 "),MO=a("a"),gPo=o("PLBartForConditionalGeneration"),hPo=o(" (PLBart model)"),pPo=l(),c2=a("li"),xge=a("strong"),uPo=o("prophetnet"),_Po=o(" \u2014 "),EO=a("a"),bPo=o("ProphetNetForConditionalGeneration"),vPo=o(" (ProphetNet model)"),FPo=l(),f2=a("li"),$ge=a("strong"),TPo=o("t5"),MPo=o(" \u2014 "),CO=a("a"),EPo=o("T5ForConditionalGeneration"),CPo=o(" (T5 model)"),wPo=l(),m2=a("li"),kge=a("strong"),APo=o("xlm-prophetnet"),LPo=o(" \u2014 "),wO=a("a"),yPo=o("XLMProphetNetForConditionalGeneration"),xPo=o(" (XLM-ProphetNet model)"),$Po=l(),g2=a("p"),kPo=o("The model is set in evaluation mode by default using "),Sge=a("code"),SPo=o("model.eval()"),RPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),PPo=o("model.train()"),BPo=l(),F(h2.$$.fragment),TGe=l(),Ui=a("h2"),p2=a("a"),Pge=a("span"),F(uy.$$.fragment),IPo=l(),Bge=a("span"),NPo=o("AutoModelForSequenceClassification"),MGe=l(),Po=a("div"),F(_y.$$.fragment),qPo=l(),Ji=a("p"),jPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=a("a"),DPo=o("from_pretrained()"),GPo=o(" class method or the "),LO=a("a"),OPo=o("from_config()"),VPo=o(` class
method.`),XPo=l(),by=a("p"),zPo=o("This class cannot be instantiated directly using "),Ige=a("code"),WPo=o("__init__()"),QPo=o(" (throws an error)."),HPo=l(),ct=a("div"),F(vy.$$.fragment),UPo=l(),Nge=a("p"),JPo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YPo=l(),Yi=a("p"),KPo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),ZPo=o("not"),eBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),oBo=o("from_pretrained()"),rBo=o(" to load the model weights."),tBo=l(),F(u2.$$.fragment),aBo=l(),oo=a("div"),F(Fy.$$.fragment),nBo=l(),jge=a("p"),sBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lBo=l(),Na=a("p"),iBo=o("The model class to instantiate is selected based on the "),Dge=a("code"),dBo=o("model_type"),cBo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),fBo=o("pretrained_model_name_or_path"),mBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),gBo=o("pretrained_model_name_or_path"),hBo=o(":"),pBo=l(),N=a("ul"),_2=a("li"),Vge=a("strong"),uBo=o("albert"),_Bo=o(" \u2014 "),xO=a("a"),bBo=o("AlbertForSequenceClassification"),vBo=o(" (ALBERT model)"),FBo=l(),b2=a("li"),Xge=a("strong"),TBo=o("bart"),MBo=o(" \u2014 "),$O=a("a"),EBo=o("BartForSequenceClassification"),CBo=o(" (BART model)"),wBo=l(),v2=a("li"),zge=a("strong"),ABo=o("bert"),LBo=o(" \u2014 "),kO=a("a"),yBo=o("BertForSequenceClassification"),xBo=o(" (BERT model)"),$Bo=l(),F2=a("li"),Wge=a("strong"),kBo=o("big_bird"),SBo=o(" \u2014 "),SO=a("a"),RBo=o("BigBirdForSequenceClassification"),PBo=o(" (BigBird model)"),BBo=l(),T2=a("li"),Qge=a("strong"),IBo=o("bigbird_pegasus"),NBo=o(" \u2014 "),RO=a("a"),qBo=o("BigBirdPegasusForSequenceClassification"),jBo=o(" (BigBird-Pegasus model)"),DBo=l(),M2=a("li"),Hge=a("strong"),GBo=o("bloom"),OBo=o(" \u2014 "),PO=a("a"),VBo=o("BloomForSequenceClassification"),XBo=o(" (BLOOM model)"),zBo=l(),E2=a("li"),Uge=a("strong"),WBo=o("camembert"),QBo=o(" \u2014 "),BO=a("a"),HBo=o("CamembertForSequenceClassification"),UBo=o(" (CamemBERT model)"),JBo=l(),C2=a("li"),Jge=a("strong"),YBo=o("canine"),KBo=o(" \u2014 "),IO=a("a"),ZBo=o("CanineForSequenceClassification"),eIo=o(" (CANINE model)"),oIo=l(),w2=a("li"),Yge=a("strong"),rIo=o("convbert"),tIo=o(" \u2014 "),NO=a("a"),aIo=o("ConvBertForSequenceClassification"),nIo=o(" (ConvBERT model)"),sIo=l(),A2=a("li"),Kge=a("strong"),lIo=o("ctrl"),iIo=o(" \u2014 "),qO=a("a"),dIo=o("CTRLForSequenceClassification"),cIo=o(" (CTRL model)"),fIo=l(),L2=a("li"),Zge=a("strong"),mIo=o("data2vec-text"),gIo=o(" \u2014 "),jO=a("a"),hIo=o("Data2VecTextForSequenceClassification"),pIo=o(" (Data2VecText model)"),uIo=l(),y2=a("li"),ehe=a("strong"),_Io=o("deberta"),bIo=o(" \u2014 "),DO=a("a"),vIo=o("DebertaForSequenceClassification"),FIo=o(" (DeBERTa model)"),TIo=l(),x2=a("li"),ohe=a("strong"),MIo=o("deberta-v2"),EIo=o(" \u2014 "),GO=a("a"),CIo=o("DebertaV2ForSequenceClassification"),wIo=o(" (DeBERTa-v2 model)"),AIo=l(),$2=a("li"),rhe=a("strong"),LIo=o("distilbert"),yIo=o(" \u2014 "),OO=a("a"),xIo=o("DistilBertForSequenceClassification"),$Io=o(" (DistilBERT model)"),kIo=l(),k2=a("li"),the=a("strong"),SIo=o("electra"),RIo=o(" \u2014 "),VO=a("a"),PIo=o("ElectraForSequenceClassification"),BIo=o(" (ELECTRA model)"),IIo=l(),S2=a("li"),ahe=a("strong"),NIo=o("flaubert"),qIo=o(" \u2014 "),XO=a("a"),jIo=o("FlaubertForSequenceClassification"),DIo=o(" (FlauBERT model)"),GIo=l(),R2=a("li"),nhe=a("strong"),OIo=o("fnet"),VIo=o(" \u2014 "),zO=a("a"),XIo=o("FNetForSequenceClassification"),zIo=o(" (FNet model)"),WIo=l(),P2=a("li"),she=a("strong"),QIo=o("funnel"),HIo=o(" \u2014 "),WO=a("a"),UIo=o("FunnelForSequenceClassification"),JIo=o(" (Funnel Transformer model)"),YIo=l(),B2=a("li"),lhe=a("strong"),KIo=o("gpt2"),ZIo=o(" \u2014 "),QO=a("a"),eNo=o("GPT2ForSequenceClassification"),oNo=o(" (OpenAI GPT-2 model)"),rNo=l(),I2=a("li"),ihe=a("strong"),tNo=o("gpt_neo"),aNo=o(" \u2014 "),HO=a("a"),nNo=o("GPTNeoForSequenceClassification"),sNo=o(" (GPT Neo model)"),lNo=l(),N2=a("li"),dhe=a("strong"),iNo=o("gptj"),dNo=o(" \u2014 "),UO=a("a"),cNo=o("GPTJForSequenceClassification"),fNo=o(" (GPT-J model)"),mNo=l(),q2=a("li"),che=a("strong"),gNo=o("ibert"),hNo=o(" \u2014 "),JO=a("a"),pNo=o("IBertForSequenceClassification"),uNo=o(" (I-BERT model)"),_No=l(),j2=a("li"),fhe=a("strong"),bNo=o("layoutlm"),vNo=o(" \u2014 "),YO=a("a"),FNo=o("LayoutLMForSequenceClassification"),TNo=o(" (LayoutLM model)"),MNo=l(),D2=a("li"),mhe=a("strong"),ENo=o("layoutlmv2"),CNo=o(" \u2014 "),KO=a("a"),wNo=o("LayoutLMv2ForSequenceClassification"),ANo=o(" (LayoutLMv2 model)"),LNo=l(),G2=a("li"),ghe=a("strong"),yNo=o("layoutlmv3"),xNo=o(" \u2014 "),ZO=a("a"),$No=o("LayoutLMv3ForSequenceClassification"),kNo=o(" (LayoutLMv3 model)"),SNo=l(),O2=a("li"),hhe=a("strong"),RNo=o("led"),PNo=o(" \u2014 "),eV=a("a"),BNo=o("LEDForSequenceClassification"),INo=o(" (LED model)"),NNo=l(),V2=a("li"),phe=a("strong"),qNo=o("longformer"),jNo=o(" \u2014 "),oV=a("a"),DNo=o("LongformerForSequenceClassification"),GNo=o(" (Longformer model)"),ONo=l(),X2=a("li"),uhe=a("strong"),VNo=o("mbart"),XNo=o(" \u2014 "),rV=a("a"),zNo=o("MBartForSequenceClassification"),WNo=o(" (mBART model)"),QNo=l(),z2=a("li"),_he=a("strong"),HNo=o("megatron-bert"),UNo=o(" \u2014 "),tV=a("a"),JNo=o("MegatronBertForSequenceClassification"),YNo=o(" (Megatron-BERT model)"),KNo=l(),W2=a("li"),bhe=a("strong"),ZNo=o("mobilebert"),eqo=o(" \u2014 "),aV=a("a"),oqo=o("MobileBertForSequenceClassification"),rqo=o(" (MobileBERT model)"),tqo=l(),Q2=a("li"),vhe=a("strong"),aqo=o("mpnet"),nqo=o(" \u2014 "),nV=a("a"),sqo=o("MPNetForSequenceClassification"),lqo=o(" (MPNet model)"),iqo=l(),H2=a("li"),Fhe=a("strong"),dqo=o("nystromformer"),cqo=o(" \u2014 "),sV=a("a"),fqo=o("NystromformerForSequenceClassification"),mqo=o(" (Nystr\xF6mformer model)"),gqo=l(),U2=a("li"),The=a("strong"),hqo=o("openai-gpt"),pqo=o(" \u2014 "),lV=a("a"),uqo=o("OpenAIGPTForSequenceClassification"),_qo=o(" (OpenAI GPT model)"),bqo=l(),J2=a("li"),Mhe=a("strong"),vqo=o("perceiver"),Fqo=o(" \u2014 "),iV=a("a"),Tqo=o("PerceiverForSequenceClassification"),Mqo=o(" (Perceiver model)"),Eqo=l(),Y2=a("li"),Ehe=a("strong"),Cqo=o("plbart"),wqo=o(" \u2014 "),dV=a("a"),Aqo=o("PLBartForSequenceClassification"),Lqo=o(" (PLBart model)"),yqo=l(),K2=a("li"),Che=a("strong"),xqo=o("qdqbert"),$qo=o(" \u2014 "),cV=a("a"),kqo=o("QDQBertForSequenceClassification"),Sqo=o(" (QDQBert model)"),Rqo=l(),Z2=a("li"),whe=a("strong"),Pqo=o("reformer"),Bqo=o(" \u2014 "),fV=a("a"),Iqo=o("ReformerForSequenceClassification"),Nqo=o(" (Reformer model)"),qqo=l(),eb=a("li"),Ahe=a("strong"),jqo=o("rembert"),Dqo=o(" \u2014 "),mV=a("a"),Gqo=o("RemBertForSequenceClassification"),Oqo=o(" (RemBERT model)"),Vqo=l(),ob=a("li"),Lhe=a("strong"),Xqo=o("roberta"),zqo=o(" \u2014 "),gV=a("a"),Wqo=o("RobertaForSequenceClassification"),Qqo=o(" (RoBERTa model)"),Hqo=l(),rb=a("li"),yhe=a("strong"),Uqo=o("roformer"),Jqo=o(" \u2014 "),hV=a("a"),Yqo=o("RoFormerForSequenceClassification"),Kqo=o(" (RoFormer model)"),Zqo=l(),tb=a("li"),xhe=a("strong"),ejo=o("squeezebert"),ojo=o(" \u2014 "),pV=a("a"),rjo=o("SqueezeBertForSequenceClassification"),tjo=o(" (SqueezeBERT model)"),ajo=l(),ab=a("li"),$he=a("strong"),njo=o("tapas"),sjo=o(" \u2014 "),uV=a("a"),ljo=o("TapasForSequenceClassification"),ijo=o(" (TAPAS model)"),djo=l(),nb=a("li"),khe=a("strong"),cjo=o("transfo-xl"),fjo=o(" \u2014 "),_V=a("a"),mjo=o("TransfoXLForSequenceClassification"),gjo=o(" (Transformer-XL model)"),hjo=l(),sb=a("li"),She=a("strong"),pjo=o("xlm"),ujo=o(" \u2014 "),bV=a("a"),_jo=o("XLMForSequenceClassification"),bjo=o(" (XLM model)"),vjo=l(),lb=a("li"),Rhe=a("strong"),Fjo=o("xlm-roberta"),Tjo=o(" \u2014 "),vV=a("a"),Mjo=o("XLMRobertaForSequenceClassification"),Ejo=o(" (XLM-RoBERTa model)"),Cjo=l(),ib=a("li"),Phe=a("strong"),wjo=o("xlm-roberta-xl"),Ajo=o(" \u2014 "),FV=a("a"),Ljo=o("XLMRobertaXLForSequenceClassification"),yjo=o(" (XLM-RoBERTa-XL model)"),xjo=l(),db=a("li"),Bhe=a("strong"),$jo=o("xlnet"),kjo=o(" \u2014 "),TV=a("a"),Sjo=o("XLNetForSequenceClassification"),Rjo=o(" (XLNet model)"),Pjo=l(),cb=a("li"),Ihe=a("strong"),Bjo=o("yoso"),Ijo=o(" \u2014 "),MV=a("a"),Njo=o("YosoForSequenceClassification"),qjo=o(" (YOSO model)"),jjo=l(),fb=a("p"),Djo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),Gjo=o("model.eval()"),Ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),Vjo=o("model.train()"),Xjo=l(),F(mb.$$.fragment),EGe=l(),Ki=a("h2"),gb=a("a"),jhe=a("span"),F(Ty.$$.fragment),zjo=l(),Dhe=a("span"),Wjo=o("AutoModelForMultipleChoice"),CGe=l(),Bo=a("div"),F(My.$$.fragment),Qjo=l(),Zi=a("p"),Hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EV=a("a"),Ujo=o("from_pretrained()"),Jjo=o(" class method or the "),CV=a("a"),Yjo=o("from_config()"),Kjo=o(` class
method.`),Zjo=l(),Ey=a("p"),eDo=o("This class cannot be instantiated directly using "),Ghe=a("code"),oDo=o("__init__()"),rDo=o(" (throws an error)."),tDo=l(),ft=a("div"),F(Cy.$$.fragment),aDo=l(),Ohe=a("p"),nDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sDo=l(),ed=a("p"),lDo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),iDo=o("not"),dDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),cDo=o("from_pretrained()"),fDo=o(" to load the model weights."),mDo=l(),F(hb.$$.fragment),gDo=l(),ro=a("div"),F(wy.$$.fragment),hDo=l(),Xhe=a("p"),pDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uDo=l(),qa=a("p"),_Do=o("The model class to instantiate is selected based on the "),zhe=a("code"),bDo=o("model_type"),vDo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),FDo=o("pretrained_model_name_or_path"),TDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(":"),CDo=l(),Z=a("ul"),pb=a("li"),Hhe=a("strong"),wDo=o("albert"),ADo=o(" \u2014 "),AV=a("a"),LDo=o("AlbertForMultipleChoice"),yDo=o(" (ALBERT model)"),xDo=l(),ub=a("li"),Uhe=a("strong"),$Do=o("bert"),kDo=o(" \u2014 "),LV=a("a"),SDo=o("BertForMultipleChoice"),RDo=o(" (BERT model)"),PDo=l(),_b=a("li"),Jhe=a("strong"),BDo=o("big_bird"),IDo=o(" \u2014 "),yV=a("a"),NDo=o("BigBirdForMultipleChoice"),qDo=o(" (BigBird model)"),jDo=l(),bb=a("li"),Yhe=a("strong"),DDo=o("camembert"),GDo=o(" \u2014 "),xV=a("a"),ODo=o("CamembertForMultipleChoice"),VDo=o(" (CamemBERT model)"),XDo=l(),vb=a("li"),Khe=a("strong"),zDo=o("canine"),WDo=o(" \u2014 "),$V=a("a"),QDo=o("CanineForMultipleChoice"),HDo=o(" (CANINE model)"),UDo=l(),Fb=a("li"),Zhe=a("strong"),JDo=o("convbert"),YDo=o(" \u2014 "),kV=a("a"),KDo=o("ConvBertForMultipleChoice"),ZDo=o(" (ConvBERT model)"),eGo=l(),Tb=a("li"),epe=a("strong"),oGo=o("data2vec-text"),rGo=o(" \u2014 "),SV=a("a"),tGo=o("Data2VecTextForMultipleChoice"),aGo=o(" (Data2VecText model)"),nGo=l(),Mb=a("li"),ope=a("strong"),sGo=o("deberta-v2"),lGo=o(" \u2014 "),RV=a("a"),iGo=o("DebertaV2ForMultipleChoice"),dGo=o(" (DeBERTa-v2 model)"),cGo=l(),Eb=a("li"),rpe=a("strong"),fGo=o("distilbert"),mGo=o(" \u2014 "),PV=a("a"),gGo=o("DistilBertForMultipleChoice"),hGo=o(" (DistilBERT model)"),pGo=l(),Cb=a("li"),tpe=a("strong"),uGo=o("electra"),_Go=o(" \u2014 "),BV=a("a"),bGo=o("ElectraForMultipleChoice"),vGo=o(" (ELECTRA model)"),FGo=l(),wb=a("li"),ape=a("strong"),TGo=o("flaubert"),MGo=o(" \u2014 "),IV=a("a"),EGo=o("FlaubertForMultipleChoice"),CGo=o(" (FlauBERT model)"),wGo=l(),Ab=a("li"),npe=a("strong"),AGo=o("fnet"),LGo=o(" \u2014 "),NV=a("a"),yGo=o("FNetForMultipleChoice"),xGo=o(" (FNet model)"),$Go=l(),Lb=a("li"),spe=a("strong"),kGo=o("funnel"),SGo=o(" \u2014 "),qV=a("a"),RGo=o("FunnelForMultipleChoice"),PGo=o(" (Funnel Transformer model)"),BGo=l(),yb=a("li"),lpe=a("strong"),IGo=o("ibert"),NGo=o(" \u2014 "),jV=a("a"),qGo=o("IBertForMultipleChoice"),jGo=o(" (I-BERT model)"),DGo=l(),xb=a("li"),ipe=a("strong"),GGo=o("longformer"),OGo=o(" \u2014 "),DV=a("a"),VGo=o("LongformerForMultipleChoice"),XGo=o(" (Longformer model)"),zGo=l(),$b=a("li"),dpe=a("strong"),WGo=o("megatron-bert"),QGo=o(" \u2014 "),GV=a("a"),HGo=o("MegatronBertForMultipleChoice"),UGo=o(" (Megatron-BERT model)"),JGo=l(),kb=a("li"),cpe=a("strong"),YGo=o("mobilebert"),KGo=o(" \u2014 "),OV=a("a"),ZGo=o("MobileBertForMultipleChoice"),eOo=o(" (MobileBERT model)"),oOo=l(),Sb=a("li"),fpe=a("strong"),rOo=o("mpnet"),tOo=o(" \u2014 "),VV=a("a"),aOo=o("MPNetForMultipleChoice"),nOo=o(" (MPNet model)"),sOo=l(),Rb=a("li"),mpe=a("strong"),lOo=o("nystromformer"),iOo=o(" \u2014 "),XV=a("a"),dOo=o("NystromformerForMultipleChoice"),cOo=o(" (Nystr\xF6mformer model)"),fOo=l(),Pb=a("li"),gpe=a("strong"),mOo=o("qdqbert"),gOo=o(" \u2014 "),zV=a("a"),hOo=o("QDQBertForMultipleChoice"),pOo=o(" (QDQBert model)"),uOo=l(),Bb=a("li"),hpe=a("strong"),_Oo=o("rembert"),bOo=o(" \u2014 "),WV=a("a"),vOo=o("RemBertForMultipleChoice"),FOo=o(" (RemBERT model)"),TOo=l(),Ib=a("li"),ppe=a("strong"),MOo=o("roberta"),EOo=o(" \u2014 "),QV=a("a"),COo=o("RobertaForMultipleChoice"),wOo=o(" (RoBERTa model)"),AOo=l(),Nb=a("li"),upe=a("strong"),LOo=o("roformer"),yOo=o(" \u2014 "),HV=a("a"),xOo=o("RoFormerForMultipleChoice"),$Oo=o(" (RoFormer model)"),kOo=l(),qb=a("li"),_pe=a("strong"),SOo=o("squeezebert"),ROo=o(" \u2014 "),UV=a("a"),POo=o("SqueezeBertForMultipleChoice"),BOo=o(" (SqueezeBERT model)"),IOo=l(),jb=a("li"),bpe=a("strong"),NOo=o("xlm"),qOo=o(" \u2014 "),JV=a("a"),jOo=o("XLMForMultipleChoice"),DOo=o(" (XLM model)"),GOo=l(),Db=a("li"),vpe=a("strong"),OOo=o("xlm-roberta"),VOo=o(" \u2014 "),YV=a("a"),XOo=o("XLMRobertaForMultipleChoice"),zOo=o(" (XLM-RoBERTa model)"),WOo=l(),Gb=a("li"),Fpe=a("strong"),QOo=o("xlm-roberta-xl"),HOo=o(" \u2014 "),KV=a("a"),UOo=o("XLMRobertaXLForMultipleChoice"),JOo=o(" (XLM-RoBERTa-XL model)"),YOo=l(),Ob=a("li"),Tpe=a("strong"),KOo=o("xlnet"),ZOo=o(" \u2014 "),ZV=a("a"),eVo=o("XLNetForMultipleChoice"),oVo=o(" (XLNet model)"),rVo=l(),Vb=a("li"),Mpe=a("strong"),tVo=o("yoso"),aVo=o(" \u2014 "),eX=a("a"),nVo=o("YosoForMultipleChoice"),sVo=o(" (YOSO model)"),lVo=l(),Xb=a("p"),iVo=o("The model is set in evaluation mode by default using "),Epe=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),fVo=o("model.train()"),mVo=l(),F(zb.$$.fragment),wGe=l(),od=a("h2"),Wb=a("a"),wpe=a("span"),F(Ay.$$.fragment),gVo=l(),Ape=a("span"),hVo=o("AutoModelForNextSentencePrediction"),AGe=l(),Io=a("div"),F(Ly.$$.fragment),pVo=l(),rd=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oX=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),rX=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),yy=a("p"),MVo=o("This class cannot be instantiated directly using "),Lpe=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),mt=a("div"),F(xy.$$.fragment),AVo=l(),ype=a("p"),LVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yVo=l(),td=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),PVo=l(),F(Qb.$$.fragment),BVo=l(),to=a("div"),F($y.$$.fragment),IVo=l(),$pe=a("p"),NVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qVo=l(),ja=a("p"),jVo=o("The model class to instantiate is selected based on the "),kpe=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),WVo=l(),Zr=a("ul"),Hb=a("li"),Ppe=a("strong"),QVo=o("bert"),HVo=o(" \u2014 "),aX=a("a"),UVo=o("BertForNextSentencePrediction"),JVo=o(" (BERT model)"),YVo=l(),Ub=a("li"),Bpe=a("strong"),KVo=o("fnet"),ZVo=o(" \u2014 "),nX=a("a"),eXo=o("FNetForNextSentencePrediction"),oXo=o(" (FNet model)"),rXo=l(),Jb=a("li"),Ipe=a("strong"),tXo=o("megatron-bert"),aXo=o(" \u2014 "),sX=a("a"),nXo=o("MegatronBertForNextSentencePrediction"),sXo=o(" (Megatron-BERT model)"),lXo=l(),Yb=a("li"),Npe=a("strong"),iXo=o("mobilebert"),dXo=o(" \u2014 "),lX=a("a"),cXo=o("MobileBertForNextSentencePrediction"),fXo=o(" (MobileBERT model)"),mXo=l(),Kb=a("li"),qpe=a("strong"),gXo=o("qdqbert"),hXo=o(" \u2014 "),iX=a("a"),pXo=o("QDQBertForNextSentencePrediction"),uXo=o(" (QDQBert model)"),_Xo=l(),Zb=a("p"),bXo=o("The model is set in evaluation mode by default using "),jpe=a("code"),vXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),TXo=o("model.train()"),MXo=l(),F(ev.$$.fragment),LGe=l(),ad=a("h2"),ov=a("a"),Gpe=a("span"),F(ky.$$.fragment),EXo=l(),Ope=a("span"),CXo=o("AutoModelForTokenClassification"),yGe=l(),No=a("div"),F(Sy.$$.fragment),wXo=l(),nd=a("p"),AXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dX=a("a"),LXo=o("from_pretrained()"),yXo=o(" class method or the "),cX=a("a"),xXo=o("from_config()"),$Xo=o(` class
method.`),kXo=l(),Ry=a("p"),SXo=o("This class cannot be instantiated directly using "),Vpe=a("code"),RXo=o("__init__()"),PXo=o(" (throws an error)."),BXo=l(),gt=a("div"),F(Py.$$.fragment),IXo=l(),Xpe=a("p"),NXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qXo=l(),sd=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),DXo=o("not"),GXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),OXo=o("from_pretrained()"),VXo=o(" to load the model weights."),XXo=l(),F(rv.$$.fragment),zXo=l(),ao=a("div"),F(By.$$.fragment),WXo=l(),Wpe=a("p"),QXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HXo=l(),Da=a("p"),UXo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),JXo=o("model_type"),YXo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),H=a("ul"),tv=a("li"),Jpe=a("strong"),tzo=o("albert"),azo=o(" \u2014 "),mX=a("a"),nzo=o("AlbertForTokenClassification"),szo=o(" (ALBERT model)"),lzo=l(),av=a("li"),Ype=a("strong"),izo=o("bert"),dzo=o(" \u2014 "),gX=a("a"),czo=o("BertForTokenClassification"),fzo=o(" (BERT model)"),mzo=l(),nv=a("li"),Kpe=a("strong"),gzo=o("big_bird"),hzo=o(" \u2014 "),hX=a("a"),pzo=o("BigBirdForTokenClassification"),uzo=o(" (BigBird model)"),_zo=l(),sv=a("li"),Zpe=a("strong"),bzo=o("bloom"),vzo=o(" \u2014 "),pX=a("a"),Fzo=o("BloomForTokenClassification"),Tzo=o(" (BLOOM model)"),Mzo=l(),lv=a("li"),eue=a("strong"),Ezo=o("camembert"),Czo=o(" \u2014 "),uX=a("a"),wzo=o("CamembertForTokenClassification"),Azo=o(" (CamemBERT model)"),Lzo=l(),iv=a("li"),oue=a("strong"),yzo=o("canine"),xzo=o(" \u2014 "),_X=a("a"),$zo=o("CanineForTokenClassification"),kzo=o(" (CANINE model)"),Szo=l(),dv=a("li"),rue=a("strong"),Rzo=o("convbert"),Pzo=o(" \u2014 "),bX=a("a"),Bzo=o("ConvBertForTokenClassification"),Izo=o(" (ConvBERT model)"),Nzo=l(),cv=a("li"),tue=a("strong"),qzo=o("data2vec-text"),jzo=o(" \u2014 "),vX=a("a"),Dzo=o("Data2VecTextForTokenClassification"),Gzo=o(" (Data2VecText model)"),Ozo=l(),fv=a("li"),aue=a("strong"),Vzo=o("deberta"),Xzo=o(" \u2014 "),FX=a("a"),zzo=o("DebertaForTokenClassification"),Wzo=o(" (DeBERTa model)"),Qzo=l(),mv=a("li"),nue=a("strong"),Hzo=o("deberta-v2"),Uzo=o(" \u2014 "),TX=a("a"),Jzo=o("DebertaV2ForTokenClassification"),Yzo=o(" (DeBERTa-v2 model)"),Kzo=l(),gv=a("li"),sue=a("strong"),Zzo=o("distilbert"),eWo=o(" \u2014 "),MX=a("a"),oWo=o("DistilBertForTokenClassification"),rWo=o(" (DistilBERT model)"),tWo=l(),hv=a("li"),lue=a("strong"),aWo=o("electra"),nWo=o(" \u2014 "),EX=a("a"),sWo=o("ElectraForTokenClassification"),lWo=o(" (ELECTRA model)"),iWo=l(),pv=a("li"),iue=a("strong"),dWo=o("flaubert"),cWo=o(" \u2014 "),CX=a("a"),fWo=o("FlaubertForTokenClassification"),mWo=o(" (FlauBERT model)"),gWo=l(),uv=a("li"),due=a("strong"),hWo=o("fnet"),pWo=o(" \u2014 "),wX=a("a"),uWo=o("FNetForTokenClassification"),_Wo=o(" (FNet model)"),bWo=l(),_v=a("li"),cue=a("strong"),vWo=o("funnel"),FWo=o(" \u2014 "),AX=a("a"),TWo=o("FunnelForTokenClassification"),MWo=o(" (Funnel Transformer model)"),EWo=l(),bv=a("li"),fue=a("strong"),CWo=o("gpt2"),wWo=o(" \u2014 "),LX=a("a"),AWo=o("GPT2ForTokenClassification"),LWo=o(" (OpenAI GPT-2 model)"),yWo=l(),vv=a("li"),mue=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),yX=a("a"),kWo=o("IBertForTokenClassification"),SWo=o(" (I-BERT model)"),RWo=l(),Fv=a("li"),gue=a("strong"),PWo=o("layoutlm"),BWo=o(" \u2014 "),xX=a("a"),IWo=o("LayoutLMForTokenClassification"),NWo=o(" (LayoutLM model)"),qWo=l(),Tv=a("li"),hue=a("strong"),jWo=o("layoutlmv2"),DWo=o(" \u2014 "),$X=a("a"),GWo=o("LayoutLMv2ForTokenClassification"),OWo=o(" (LayoutLMv2 model)"),VWo=l(),Mv=a("li"),pue=a("strong"),XWo=o("layoutlmv3"),zWo=o(" \u2014 "),kX=a("a"),WWo=o("LayoutLMv3ForTokenClassification"),QWo=o(" (LayoutLMv3 model)"),HWo=l(),Ev=a("li"),uue=a("strong"),UWo=o("longformer"),JWo=o(" \u2014 "),SX=a("a"),YWo=o("LongformerForTokenClassification"),KWo=o(" (Longformer model)"),ZWo=l(),Cv=a("li"),_ue=a("strong"),eQo=o("megatron-bert"),oQo=o(" \u2014 "),RX=a("a"),rQo=o("MegatronBertForTokenClassification"),tQo=o(" (Megatron-BERT model)"),aQo=l(),wv=a("li"),bue=a("strong"),nQo=o("mobilebert"),sQo=o(" \u2014 "),PX=a("a"),lQo=o("MobileBertForTokenClassification"),iQo=o(" (MobileBERT model)"),dQo=l(),Av=a("li"),vue=a("strong"),cQo=o("mpnet"),fQo=o(" \u2014 "),BX=a("a"),mQo=o("MPNetForTokenClassification"),gQo=o(" (MPNet model)"),hQo=l(),Lv=a("li"),Fue=a("strong"),pQo=o("nystromformer"),uQo=o(" \u2014 "),IX=a("a"),_Qo=o("NystromformerForTokenClassification"),bQo=o(" (Nystr\xF6mformer model)"),vQo=l(),yv=a("li"),Tue=a("strong"),FQo=o("qdqbert"),TQo=o(" \u2014 "),NX=a("a"),MQo=o("QDQBertForTokenClassification"),EQo=o(" (QDQBert model)"),CQo=l(),xv=a("li"),Mue=a("strong"),wQo=o("rembert"),AQo=o(" \u2014 "),qX=a("a"),LQo=o("RemBertForTokenClassification"),yQo=o(" (RemBERT model)"),xQo=l(),$v=a("li"),Eue=a("strong"),$Qo=o("roberta"),kQo=o(" \u2014 "),jX=a("a"),SQo=o("RobertaForTokenClassification"),RQo=o(" (RoBERTa model)"),PQo=l(),kv=a("li"),Cue=a("strong"),BQo=o("roformer"),IQo=o(" \u2014 "),DX=a("a"),NQo=o("RoFormerForTokenClassification"),qQo=o(" (RoFormer model)"),jQo=l(),Sv=a("li"),wue=a("strong"),DQo=o("squeezebert"),GQo=o(" \u2014 "),GX=a("a"),OQo=o("SqueezeBertForTokenClassification"),VQo=o(" (SqueezeBERT model)"),XQo=l(),Rv=a("li"),Aue=a("strong"),zQo=o("xlm"),WQo=o(" \u2014 "),OX=a("a"),QQo=o("XLMForTokenClassification"),HQo=o(" (XLM model)"),UQo=l(),Pv=a("li"),Lue=a("strong"),JQo=o("xlm-roberta"),YQo=o(" \u2014 "),VX=a("a"),KQo=o("XLMRobertaForTokenClassification"),ZQo=o(" (XLM-RoBERTa model)"),eHo=l(),Bv=a("li"),yue=a("strong"),oHo=o("xlm-roberta-xl"),rHo=o(" \u2014 "),XX=a("a"),tHo=o("XLMRobertaXLForTokenClassification"),aHo=o(" (XLM-RoBERTa-XL model)"),nHo=l(),Iv=a("li"),xue=a("strong"),sHo=o("xlnet"),lHo=o(" \u2014 "),zX=a("a"),iHo=o("XLNetForTokenClassification"),dHo=o(" (XLNet model)"),cHo=l(),Nv=a("li"),$ue=a("strong"),fHo=o("yoso"),mHo=o(" \u2014 "),WX=a("a"),gHo=o("YosoForTokenClassification"),hHo=o(" (YOSO model)"),pHo=l(),qv=a("p"),uHo=o("The model is set in evaluation mode by default using "),kue=a("code"),_Ho=o("model.eval()"),bHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),vHo=o("model.train()"),FHo=l(),F(jv.$$.fragment),xGe=l(),ld=a("h2"),Dv=a("a"),Rue=a("span"),F(Iy.$$.fragment),THo=l(),Pue=a("span"),MHo=o("AutoModelForQuestionAnswering"),$Ge=l(),qo=a("div"),F(Ny.$$.fragment),EHo=l(),id=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QX=a("a"),wHo=o("from_pretrained()"),AHo=o(" class method or the "),HX=a("a"),LHo=o("from_config()"),yHo=o(` class
method.`),xHo=l(),qy=a("p"),$Ho=o("This class cannot be instantiated directly using "),Bue=a("code"),kHo=o("__init__()"),SHo=o(" (throws an error)."),RHo=l(),ht=a("div"),F(jy.$$.fragment),PHo=l(),Iue=a("p"),BHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IHo=l(),dd=a("p"),NHo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),qHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),DHo=o("from_pretrained()"),GHo=o(" to load the model weights."),OHo=l(),F(Gv.$$.fragment),VHo=l(),no=a("div"),F(Dy.$$.fragment),XHo=l(),que=a("p"),zHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WHo=l(),Ga=a("p"),QHo=o("The model class to instantiate is selected based on the "),jue=a("code"),HHo=o("model_type"),UHo=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(":"),eUo=l(),V=a("ul"),Ov=a("li"),Oue=a("strong"),oUo=o("albert"),rUo=o(" \u2014 "),JX=a("a"),tUo=o("AlbertForQuestionAnswering"),aUo=o(" (ALBERT model)"),nUo=l(),Vv=a("li"),Vue=a("strong"),sUo=o("bart"),lUo=o(" \u2014 "),YX=a("a"),iUo=o("BartForQuestionAnswering"),dUo=o(" (BART model)"),cUo=l(),Xv=a("li"),Xue=a("strong"),fUo=o("bert"),mUo=o(" \u2014 "),KX=a("a"),gUo=o("BertForQuestionAnswering"),hUo=o(" (BERT model)"),pUo=l(),zv=a("li"),zue=a("strong"),uUo=o("big_bird"),_Uo=o(" \u2014 "),ZX=a("a"),bUo=o("BigBirdForQuestionAnswering"),vUo=o(" (BigBird model)"),FUo=l(),Wv=a("li"),Wue=a("strong"),TUo=o("bigbird_pegasus"),MUo=o(" \u2014 "),ez=a("a"),EUo=o("BigBirdPegasusForQuestionAnswering"),CUo=o(" (BigBird-Pegasus model)"),wUo=l(),Qv=a("li"),Que=a("strong"),AUo=o("camembert"),LUo=o(" \u2014 "),oz=a("a"),yUo=o("CamembertForQuestionAnswering"),xUo=o(" (CamemBERT model)"),$Uo=l(),Hv=a("li"),Hue=a("strong"),kUo=o("canine"),SUo=o(" \u2014 "),rz=a("a"),RUo=o("CanineForQuestionAnswering"),PUo=o(" (CANINE model)"),BUo=l(),Uv=a("li"),Uue=a("strong"),IUo=o("convbert"),NUo=o(" \u2014 "),tz=a("a"),qUo=o("ConvBertForQuestionAnswering"),jUo=o(" (ConvBERT model)"),DUo=l(),Jv=a("li"),Jue=a("strong"),GUo=o("data2vec-text"),OUo=o(" \u2014 "),az=a("a"),VUo=o("Data2VecTextForQuestionAnswering"),XUo=o(" (Data2VecText model)"),zUo=l(),Yv=a("li"),Yue=a("strong"),WUo=o("deberta"),QUo=o(" \u2014 "),nz=a("a"),HUo=o("DebertaForQuestionAnswering"),UUo=o(" (DeBERTa model)"),JUo=l(),Kv=a("li"),Kue=a("strong"),YUo=o("deberta-v2"),KUo=o(" \u2014 "),sz=a("a"),ZUo=o("DebertaV2ForQuestionAnswering"),eJo=o(" (DeBERTa-v2 model)"),oJo=l(),Zv=a("li"),Zue=a("strong"),rJo=o("distilbert"),tJo=o(" \u2014 "),lz=a("a"),aJo=o("DistilBertForQuestionAnswering"),nJo=o(" (DistilBERT model)"),sJo=l(),eF=a("li"),e_e=a("strong"),lJo=o("electra"),iJo=o(" \u2014 "),iz=a("a"),dJo=o("ElectraForQuestionAnswering"),cJo=o(" (ELECTRA model)"),fJo=l(),oF=a("li"),o_e=a("strong"),mJo=o("flaubert"),gJo=o(" \u2014 "),dz=a("a"),hJo=o("FlaubertForQuestionAnsweringSimple"),pJo=o(" (FlauBERT model)"),uJo=l(),rF=a("li"),r_e=a("strong"),_Jo=o("fnet"),bJo=o(" \u2014 "),cz=a("a"),vJo=o("FNetForQuestionAnswering"),FJo=o(" (FNet model)"),TJo=l(),tF=a("li"),t_e=a("strong"),MJo=o("funnel"),EJo=o(" \u2014 "),fz=a("a"),CJo=o("FunnelForQuestionAnswering"),wJo=o(" (Funnel Transformer model)"),AJo=l(),aF=a("li"),a_e=a("strong"),LJo=o("gptj"),yJo=o(" \u2014 "),mz=a("a"),xJo=o("GPTJForQuestionAnswering"),$Jo=o(" (GPT-J model)"),kJo=l(),nF=a("li"),n_e=a("strong"),SJo=o("ibert"),RJo=o(" \u2014 "),gz=a("a"),PJo=o("IBertForQuestionAnswering"),BJo=o(" (I-BERT model)"),IJo=l(),sF=a("li"),s_e=a("strong"),NJo=o("layoutlmv2"),qJo=o(" \u2014 "),hz=a("a"),jJo=o("LayoutLMv2ForQuestionAnswering"),DJo=o(" (LayoutLMv2 model)"),GJo=l(),lF=a("li"),l_e=a("strong"),OJo=o("layoutlmv3"),VJo=o(" \u2014 "),pz=a("a"),XJo=o("LayoutLMv3ForQuestionAnswering"),zJo=o(" (LayoutLMv3 model)"),WJo=l(),iF=a("li"),i_e=a("strong"),QJo=o("led"),HJo=o(" \u2014 "),uz=a("a"),UJo=o("LEDForQuestionAnswering"),JJo=o(" (LED model)"),YJo=l(),dF=a("li"),d_e=a("strong"),KJo=o("longformer"),ZJo=o(" \u2014 "),_z=a("a"),eYo=o("LongformerForQuestionAnswering"),oYo=o(" (Longformer model)"),rYo=l(),cF=a("li"),c_e=a("strong"),tYo=o("lxmert"),aYo=o(" \u2014 "),bz=a("a"),nYo=o("LxmertForQuestionAnswering"),sYo=o(" (LXMERT model)"),lYo=l(),fF=a("li"),f_e=a("strong"),iYo=o("mbart"),dYo=o(" \u2014 "),vz=a("a"),cYo=o("MBartForQuestionAnswering"),fYo=o(" (mBART model)"),mYo=l(),mF=a("li"),m_e=a("strong"),gYo=o("megatron-bert"),hYo=o(" \u2014 "),Fz=a("a"),pYo=o("MegatronBertForQuestionAnswering"),uYo=o(" (Megatron-BERT model)"),_Yo=l(),gF=a("li"),g_e=a("strong"),bYo=o("mobilebert"),vYo=o(" \u2014 "),Tz=a("a"),FYo=o("MobileBertForQuestionAnswering"),TYo=o(" (MobileBERT model)"),MYo=l(),hF=a("li"),h_e=a("strong"),EYo=o("mpnet"),CYo=o(" \u2014 "),Mz=a("a"),wYo=o("MPNetForQuestionAnswering"),AYo=o(" (MPNet model)"),LYo=l(),pF=a("li"),p_e=a("strong"),yYo=o("nystromformer"),xYo=o(" \u2014 "),Ez=a("a"),$Yo=o("NystromformerForQuestionAnswering"),kYo=o(" (Nystr\xF6mformer model)"),SYo=l(),uF=a("li"),u_e=a("strong"),RYo=o("qdqbert"),PYo=o(" \u2014 "),Cz=a("a"),BYo=o("QDQBertForQuestionAnswering"),IYo=o(" (QDQBert model)"),NYo=l(),_F=a("li"),__e=a("strong"),qYo=o("reformer"),jYo=o(" \u2014 "),wz=a("a"),DYo=o("ReformerForQuestionAnswering"),GYo=o(" (Reformer model)"),OYo=l(),bF=a("li"),b_e=a("strong"),VYo=o("rembert"),XYo=o(" \u2014 "),Az=a("a"),zYo=o("RemBertForQuestionAnswering"),WYo=o(" (RemBERT model)"),QYo=l(),vF=a("li"),v_e=a("strong"),HYo=o("roberta"),UYo=o(" \u2014 "),Lz=a("a"),JYo=o("RobertaForQuestionAnswering"),YYo=o(" (RoBERTa model)"),KYo=l(),FF=a("li"),F_e=a("strong"),ZYo=o("roformer"),eKo=o(" \u2014 "),yz=a("a"),oKo=o("RoFormerForQuestionAnswering"),rKo=o(" (RoFormer model)"),tKo=l(),TF=a("li"),T_e=a("strong"),aKo=o("splinter"),nKo=o(" \u2014 "),xz=a("a"),sKo=o("SplinterForQuestionAnswering"),lKo=o(" (Splinter model)"),iKo=l(),MF=a("li"),M_e=a("strong"),dKo=o("squeezebert"),cKo=o(" \u2014 "),$z=a("a"),fKo=o("SqueezeBertForQuestionAnswering"),mKo=o(" (SqueezeBERT model)"),gKo=l(),EF=a("li"),E_e=a("strong"),hKo=o("xlm"),pKo=o(" \u2014 "),kz=a("a"),uKo=o("XLMForQuestionAnsweringSimple"),_Ko=o(" (XLM model)"),bKo=l(),CF=a("li"),C_e=a("strong"),vKo=o("xlm-roberta"),FKo=o(" \u2014 "),Sz=a("a"),TKo=o("XLMRobertaForQuestionAnswering"),MKo=o(" (XLM-RoBERTa model)"),EKo=l(),wF=a("li"),w_e=a("strong"),CKo=o("xlm-roberta-xl"),wKo=o(" \u2014 "),Rz=a("a"),AKo=o("XLMRobertaXLForQuestionAnswering"),LKo=o(" (XLM-RoBERTa-XL model)"),yKo=l(),AF=a("li"),A_e=a("strong"),xKo=o("xlnet"),$Ko=o(" \u2014 "),Pz=a("a"),kKo=o("XLNetForQuestionAnsweringSimple"),SKo=o(" (XLNet model)"),RKo=l(),LF=a("li"),L_e=a("strong"),PKo=o("yoso"),BKo=o(" \u2014 "),Bz=a("a"),IKo=o("YosoForQuestionAnswering"),NKo=o(" (YOSO model)"),qKo=l(),yF=a("p"),jKo=o("The model is set in evaluation mode by default using "),y_e=a("code"),DKo=o("model.eval()"),GKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),OKo=o("model.train()"),VKo=l(),F(xF.$$.fragment),kGe=l(),cd=a("h2"),$F=a("a"),$_e=a("span"),F(Gy.$$.fragment),XKo=l(),k_e=a("span"),zKo=o("AutoModelForTableQuestionAnswering"),SGe=l(),jo=a("div"),F(Oy.$$.fragment),WKo=l(),fd=a("p"),QKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iz=a("a"),HKo=o("from_pretrained()"),UKo=o(" class method or the "),Nz=a("a"),JKo=o("from_config()"),YKo=o(` class
method.`),KKo=l(),Vy=a("p"),ZKo=o("This class cannot be instantiated directly using "),S_e=a("code"),eZo=o("__init__()"),oZo=o(" (throws an error)."),rZo=l(),pt=a("div"),F(Xy.$$.fragment),tZo=l(),R_e=a("p"),aZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nZo=l(),md=a("p"),sZo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),lZo=o("not"),iZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),dZo=o("from_pretrained()"),cZo=o(" to load the model weights."),fZo=l(),F(kF.$$.fragment),mZo=l(),so=a("div"),F(zy.$$.fragment),gZo=l(),B_e=a("p"),hZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pZo=l(),Oa=a("p"),uZo=o("The model class to instantiate is selected based on the "),I_e=a("code"),_Zo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),j_e=a("ul"),SF=a("li"),D_e=a("strong"),CZo=o("tapas"),wZo=o(" \u2014 "),jz=a("a"),AZo=o("TapasForQuestionAnswering"),LZo=o(" (TAPAS model)"),yZo=l(),RF=a("p"),xZo=o("The model is set in evaluation mode by default using "),G_e=a("code"),$Zo=o("model.eval()"),kZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),SZo=o("model.train()"),RZo=l(),F(PF.$$.fragment),RGe=l(),gd=a("h2"),BF=a("a"),V_e=a("span"),F(Wy.$$.fragment),PZo=l(),X_e=a("span"),BZo=o("AutoModelForImageClassification"),PGe=l(),Do=a("div"),F(Qy.$$.fragment),IZo=l(),hd=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Dz=a("a"),qZo=o("from_pretrained()"),jZo=o(" class method or the "),Gz=a("a"),DZo=o("from_config()"),GZo=o(` class
method.`),OZo=l(),Hy=a("p"),VZo=o("This class cannot be instantiated directly using "),z_e=a("code"),XZo=o("__init__()"),zZo=o(" (throws an error)."),WZo=l(),ut=a("div"),F(Uy.$$.fragment),QZo=l(),W_e=a("p"),HZo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UZo=l(),pd=a("p"),JZo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),YZo=o("not"),KZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),ZZo=o("from_pretrained()"),eer=o(" to load the model weights."),oer=l(),F(IF.$$.fragment),rer=l(),lo=a("div"),F(Jy.$$.fragment),ter=l(),H_e=a("p"),aer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ner=l(),Va=a("p"),ser=o("The model class to instantiate is selected based on the "),U_e=a("code"),ler=o("model_type"),ier=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),der=o("pretrained_model_name_or_path"),cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),fer=o("pretrained_model_name_or_path"),mer=o(":"),ger=l(),Fe=a("ul"),NF=a("li"),K_e=a("strong"),her=o("beit"),per=o(" \u2014 "),Vz=a("a"),uer=o("BeitForImageClassification"),_er=o(" (BEiT model)"),ber=l(),qF=a("li"),Z_e=a("strong"),ver=o("convnext"),Fer=o(" \u2014 "),Xz=a("a"),Ter=o("ConvNextForImageClassification"),Mer=o(" (ConvNeXT model)"),Eer=l(),jF=a("li"),e1e=a("strong"),Cer=o("cvt"),wer=o(" \u2014 "),zz=a("a"),Aer=o("CvtForImageClassification"),Ler=o(" (CvT model)"),yer=l(),DF=a("li"),o1e=a("strong"),xer=o("data2vec-vision"),$er=o(" \u2014 "),Wz=a("a"),ker=o("Data2VecVisionForImageClassification"),Ser=o(" (Data2VecVision model)"),Rer=l(),Os=a("li"),r1e=a("strong"),Per=o("deit"),Ber=o(" \u2014 "),Qz=a("a"),Ier=o("DeiTForImageClassification"),Ner=o(" or "),Hz=a("a"),qer=o("DeiTForImageClassificationWithTeacher"),jer=o(" (DeiT model)"),Der=l(),GF=a("li"),t1e=a("strong"),Ger=o("imagegpt"),Oer=o(" \u2014 "),Uz=a("a"),Ver=o("ImageGPTForImageClassification"),Xer=o(" (ImageGPT model)"),zer=l(),Vs=a("li"),a1e=a("strong"),Wer=o("levit"),Qer=o(" \u2014 "),Jz=a("a"),Her=o("LevitForImageClassification"),Uer=o(" or "),Yz=a("a"),Jer=o("LevitForImageClassificationWithTeacher"),Yer=o(" (LeViT model)"),Ker=l(),_t=a("li"),n1e=a("strong"),Zer=o("perceiver"),eor=o(" \u2014 "),Kz=a("a"),oor=o("PerceiverForImageClassificationLearned"),ror=o(" or "),Zz=a("a"),tor=o("PerceiverForImageClassificationFourier"),aor=o(" or "),eW=a("a"),nor=o("PerceiverForImageClassificationConvProcessing"),sor=o(" (Perceiver model)"),lor=l(),OF=a("li"),s1e=a("strong"),ior=o("poolformer"),dor=o(" \u2014 "),oW=a("a"),cor=o("PoolFormerForImageClassification"),mor=o(" (PoolFormer model)"),gor=l(),VF=a("li"),l1e=a("strong"),hor=o("regnet"),por=o(" \u2014 "),rW=a("a"),uor=o("RegNetForImageClassification"),_or=o(" (RegNet model)"),bor=l(),XF=a("li"),i1e=a("strong"),vor=o("resnet"),For=o(" \u2014 "),tW=a("a"),Tor=o("ResNetForImageClassification"),Mor=o(" (ResNet model)"),Eor=l(),zF=a("li"),d1e=a("strong"),Cor=o("segformer"),wor=o(" \u2014 "),aW=a("a"),Aor=o("SegformerForImageClassification"),Lor=o(" (SegFormer model)"),yor=l(),WF=a("li"),c1e=a("strong"),xor=o("swin"),$or=o(" \u2014 "),nW=a("a"),kor=o("SwinForImageClassification"),Sor=o(" (Swin Transformer model)"),Ror=l(),QF=a("li"),f1e=a("strong"),Por=o("van"),Bor=o(" \u2014 "),sW=a("a"),Ior=o("VanForImageClassification"),Nor=o(" (VAN model)"),qor=l(),HF=a("li"),m1e=a("strong"),jor=o("vit"),Dor=o(" \u2014 "),lW=a("a"),Gor=o("ViTForImageClassification"),Oor=o(" (ViT model)"),Vor=l(),UF=a("p"),Xor=o("The model is set in evaluation mode by default using "),g1e=a("code"),zor=o("model.eval()"),Wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),Qor=o("model.train()"),Hor=l(),F(JF.$$.fragment),BGe=l(),ud=a("h2"),YF=a("a"),p1e=a("span"),F(Yy.$$.fragment),Uor=l(),u1e=a("span"),Jor=o("AutoModelForVision2Seq"),IGe=l(),Go=a("div"),F(Ky.$$.fragment),Yor=l(),_d=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iW=a("a"),Zor=o("from_pretrained()"),err=o(" class method or the "),dW=a("a"),orr=o("from_config()"),rrr=o(` class
method.`),trr=l(),Zy=a("p"),arr=o("This class cannot be instantiated directly using "),_1e=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),bt=a("div"),F(e8.$$.fragment),irr=l(),b1e=a("p"),drr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),crr=l(),bd=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),hrr=o("from_pretrained()"),prr=o(" to load the model weights."),urr=l(),F(KF.$$.fragment),_rr=l(),io=a("div"),F(o8.$$.fragment),brr=l(),F1e=a("p"),vrr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Frr=l(),Xa=a("p"),Trr=o("The model class to instantiate is selected based on the "),T1e=a("code"),Mrr=o("model_type"),Err=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),Crr=o("pretrained_model_name_or_path"),wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),Arr=o("pretrained_model_name_or_path"),Lrr=o(":"),yrr=l(),C1e=a("ul"),ZF=a("li"),w1e=a("strong"),xrr=o("vision-encoder-decoder"),$rr=o(" \u2014 "),fW=a("a"),krr=o("VisionEncoderDecoderModel"),Srr=o(" (Vision Encoder decoder model)"),Rrr=l(),e6=a("p"),Prr=o("The model is set in evaluation mode by default using "),A1e=a("code"),Brr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Nrr=o("model.train()"),qrr=l(),F(o6.$$.fragment),NGe=l(),vd=a("h2"),r6=a("a"),y1e=a("span"),F(r8.$$.fragment),jrr=l(),x1e=a("span"),Drr=o("AutoModelForVisualQuestionAnswering"),qGe=l(),Oo=a("div"),F(t8.$$.fragment),Grr=l(),Fd=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mW=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),gW=a("a"),zrr=o("from_config()"),Wrr=o(` class
method.`),Qrr=l(),a8=a("p"),Hrr=o("This class cannot be instantiated directly using "),$1e=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),vt=a("div"),F(n8.$$.fragment),Krr=l(),k1e=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),etr=l(),Td=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),F(t6.$$.fragment),ltr=l(),co=a("div"),F(s8.$$.fragment),itr=l(),R1e=a("p"),dtr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ctr=l(),za=a("p"),ftr=o("The model class to instantiate is selected based on the "),P1e=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),utr=o("pretrained_model_name_or_path"),_tr=o(":"),btr=l(),N1e=a("ul"),a6=a("li"),q1e=a("strong"),vtr=o("vilt"),Ftr=o(" \u2014 "),pW=a("a"),Ttr=o("ViltForQuestionAnswering"),Mtr=o(" (ViLT model)"),Etr=l(),n6=a("p"),Ctr=o("The model is set in evaluation mode by default using "),j1e=a("code"),wtr=o("model.eval()"),Atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),Ltr=o("model.train()"),ytr=l(),F(s6.$$.fragment),jGe=l(),Md=a("h2"),l6=a("a"),G1e=a("span"),F(l8.$$.fragment),xtr=l(),O1e=a("span"),$tr=o("AutoModelForAudioClassification"),DGe=l(),Vo=a("div"),F(i8.$$.fragment),ktr=l(),Ed=a("p"),Str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uW=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" class method or the "),_W=a("a"),Btr=o("from_config()"),Itr=o(` class
method.`),Ntr=l(),d8=a("p"),qtr=o("This class cannot be instantiated directly using "),V1e=a("code"),jtr=o("__init__()"),Dtr=o(" (throws an error)."),Gtr=l(),Ft=a("div"),F(c8.$$.fragment),Otr=l(),X1e=a("p"),Vtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Xtr=l(),Cd=a("p"),ztr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Wtr=o("not"),Qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Htr=o("from_pretrained()"),Utr=o(" to load the model weights."),Jtr=l(),F(i6.$$.fragment),Ytr=l(),fo=a("div"),F(f8.$$.fragment),Ktr=l(),W1e=a("p"),Ztr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ear=l(),Wa=a("p"),oar=o("The model class to instantiate is selected based on the "),Q1e=a("code"),rar=o("model_type"),tar=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(":"),iar=l(),Pe=a("ul"),d6=a("li"),J1e=a("strong"),dar=o("data2vec-audio"),car=o(" \u2014 "),vW=a("a"),far=o("Data2VecAudioForSequenceClassification"),mar=o(" (Data2VecAudio model)"),gar=l(),c6=a("li"),Y1e=a("strong"),har=o("hubert"),par=o(" \u2014 "),FW=a("a"),uar=o("HubertForSequenceClassification"),_ar=o(" (Hubert model)"),bar=l(),f6=a("li"),K1e=a("strong"),Far=o("sew"),Tar=o(" \u2014 "),TW=a("a"),Mar=o("SEWForSequenceClassification"),Ear=o(" (SEW model)"),Car=l(),m6=a("li"),Z1e=a("strong"),war=o("sew-d"),Aar=o(" \u2014 "),MW=a("a"),Lar=o("SEWDForSequenceClassification"),yar=o(" (SEW-D model)"),xar=l(),g6=a("li"),e7e=a("strong"),$ar=o("unispeech"),kar=o(" \u2014 "),EW=a("a"),Sar=o("UniSpeechForSequenceClassification"),Rar=o(" (UniSpeech model)"),Par=l(),h6=a("li"),o7e=a("strong"),Bar=o("unispeech-sat"),Iar=o(" \u2014 "),CW=a("a"),Nar=o("UniSpeechSatForSequenceClassification"),qar=o(" (UniSpeechSat model)"),jar=l(),p6=a("li"),r7e=a("strong"),Dar=o("wav2vec2"),Gar=o(" \u2014 "),wW=a("a"),Oar=o("Wav2Vec2ForSequenceClassification"),Var=o(" (Wav2Vec2 model)"),Xar=l(),u6=a("li"),t7e=a("strong"),zar=o("wav2vec2-conformer"),War=o(" \u2014 "),AW=a("a"),Qar=o("Wav2Vec2ConformerForSequenceClassification"),Har=o(" (Wav2Vec2-Conformer model)"),Uar=l(),_6=a("li"),a7e=a("strong"),Jar=o("wavlm"),Yar=o(" \u2014 "),LW=a("a"),Kar=o("WavLMForSequenceClassification"),Zar=o(" (WavLM model)"),enr=l(),b6=a("p"),onr=o("The model is set in evaluation mode by default using "),n7e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=a("code"),anr=o("model.train()"),nnr=l(),F(v6.$$.fragment),GGe=l(),wd=a("h2"),F6=a("a"),l7e=a("span"),F(m8.$$.fragment),snr=l(),i7e=a("span"),lnr=o("AutoModelForAudioFrameClassification"),OGe=l(),Xo=a("div"),F(g8.$$.fragment),inr=l(),Ad=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yW=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),xW=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),h8=a("p"),pnr=o("This class cannot be instantiated directly using "),d7e=a("code"),unr=o("__init__()"),_nr=o(" (throws an error)."),bnr=l(),Tt=a("div"),F(p8.$$.fragment),vnr=l(),c7e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tnr=l(),Ld=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),Lnr=l(),F(T6.$$.fragment),ynr=l(),mo=a("div"),F(u8.$$.fragment),xnr=l(),m7e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),knr=l(),Qa=a("p"),Snr=o("The model class to instantiate is selected based on the "),g7e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),et=a("ul"),M6=a("li"),u7e=a("strong"),Dnr=o("data2vec-audio"),Gnr=o(" \u2014 "),kW=a("a"),Onr=o("Data2VecAudioForAudioFrameClassification"),Vnr=o(" (Data2VecAudio model)"),Xnr=l(),E6=a("li"),_7e=a("strong"),znr=o("unispeech-sat"),Wnr=o(" \u2014 "),SW=a("a"),Qnr=o("UniSpeechSatForAudioFrameClassification"),Hnr=o(" (UniSpeechSat model)"),Unr=l(),C6=a("li"),b7e=a("strong"),Jnr=o("wav2vec2"),Ynr=o(" \u2014 "),RW=a("a"),Knr=o("Wav2Vec2ForAudioFrameClassification"),Znr=o(" (Wav2Vec2 model)"),esr=l(),w6=a("li"),v7e=a("strong"),osr=o("wav2vec2-conformer"),rsr=o(" \u2014 "),PW=a("a"),tsr=o("Wav2Vec2ConformerForAudioFrameClassification"),asr=o(" (Wav2Vec2-Conformer model)"),nsr=l(),A6=a("li"),F7e=a("strong"),ssr=o("wavlm"),lsr=o(" \u2014 "),BW=a("a"),isr=o("WavLMForAudioFrameClassification"),dsr=o(" (WavLM model)"),csr=l(),L6=a("p"),fsr=o("The model is set in evaluation mode by default using "),T7e=a("code"),msr=o("model.eval()"),gsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M7e=a("code"),hsr=o("model.train()"),psr=l(),F(y6.$$.fragment),VGe=l(),yd=a("h2"),x6=a("a"),E7e=a("span"),F(_8.$$.fragment),usr=l(),C7e=a("span"),_sr=o("AutoModelForCTC"),XGe=l(),zo=a("div"),F(b8.$$.fragment),bsr=l(),xd=a("p"),vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IW=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" class method or the "),NW=a("a"),Msr=o("from_config()"),Esr=o(` class
method.`),Csr=l(),v8=a("p"),wsr=o("This class cannot be instantiated directly using "),w7e=a("code"),Asr=o("__init__()"),Lsr=o(" (throws an error)."),ysr=l(),Mt=a("div"),F(F8.$$.fragment),xsr=l(),A7e=a("p"),$sr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ksr=l(),$d=a("p"),Ssr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),Rsr=o("not"),Psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),Bsr=o("from_pretrained()"),Isr=o(" to load the model weights."),Nsr=l(),F($6.$$.fragment),qsr=l(),go=a("div"),F(T8.$$.fragment),jsr=l(),y7e=a("p"),Dsr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gsr=l(),Ha=a("p"),Osr=o("The model class to instantiate is selected based on the "),x7e=a("code"),Vsr=o("model_type"),Xsr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),zsr=o("pretrained_model_name_or_path"),Wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),Qsr=o("pretrained_model_name_or_path"),Hsr=o(":"),Usr=l(),Le=a("ul"),k6=a("li"),S7e=a("strong"),Jsr=o("data2vec-audio"),Ysr=o(" \u2014 "),jW=a("a"),Ksr=o("Data2VecAudioForCTC"),Zsr=o(" (Data2VecAudio model)"),elr=l(),S6=a("li"),R7e=a("strong"),olr=o("hubert"),rlr=o(" \u2014 "),DW=a("a"),tlr=o("HubertForCTC"),alr=o(" (Hubert model)"),nlr=l(),R6=a("li"),P7e=a("strong"),slr=o("mctct"),llr=o(" \u2014 "),GW=a("a"),ilr=o("MCTCTForCTC"),dlr=o(" (M-CTC-T model)"),clr=l(),P6=a("li"),B7e=a("strong"),flr=o("sew"),mlr=o(" \u2014 "),OW=a("a"),glr=o("SEWForCTC"),hlr=o(" (SEW model)"),plr=l(),B6=a("li"),I7e=a("strong"),ulr=o("sew-d"),_lr=o(" \u2014 "),VW=a("a"),blr=o("SEWDForCTC"),vlr=o(" (SEW-D model)"),Flr=l(),I6=a("li"),N7e=a("strong"),Tlr=o("unispeech"),Mlr=o(" \u2014 "),XW=a("a"),Elr=o("UniSpeechForCTC"),Clr=o(" (UniSpeech model)"),wlr=l(),N6=a("li"),q7e=a("strong"),Alr=o("unispeech-sat"),Llr=o(" \u2014 "),zW=a("a"),ylr=o("UniSpeechSatForCTC"),xlr=o(" (UniSpeechSat model)"),$lr=l(),q6=a("li"),j7e=a("strong"),klr=o("wav2vec2"),Slr=o(" \u2014 "),WW=a("a"),Rlr=o("Wav2Vec2ForCTC"),Plr=o(" (Wav2Vec2 model)"),Blr=l(),j6=a("li"),D7e=a("strong"),Ilr=o("wav2vec2-conformer"),Nlr=o(" \u2014 "),QW=a("a"),qlr=o("Wav2Vec2ConformerForCTC"),jlr=o(" (Wav2Vec2-Conformer model)"),Dlr=l(),D6=a("li"),G7e=a("strong"),Glr=o("wavlm"),Olr=o(" \u2014 "),HW=a("a"),Vlr=o("WavLMForCTC"),Xlr=o(" (WavLM model)"),zlr=l(),G6=a("p"),Wlr=o("The model is set in evaluation mode by default using "),O7e=a("code"),Qlr=o("model.eval()"),Hlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=a("code"),Ulr=o("model.train()"),Jlr=l(),F(O6.$$.fragment),zGe=l(),kd=a("h2"),V6=a("a"),X7e=a("span"),F(M8.$$.fragment),Ylr=l(),z7e=a("span"),Klr=o("AutoModelForSpeechSeq2Seq"),WGe=l(),Wo=a("div"),F(E8.$$.fragment),Zlr=l(),Sd=a("p"),eir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UW=a("a"),oir=o("from_pretrained()"),rir=o(" class method or the "),JW=a("a"),tir=o("from_config()"),air=o(` class
method.`),nir=l(),C8=a("p"),sir=o("This class cannot be instantiated directly using "),W7e=a("code"),lir=o("__init__()"),iir=o(" (throws an error)."),dir=l(),Et=a("div"),F(w8.$$.fragment),cir=l(),Q7e=a("p"),fir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mir=l(),Rd=a("p"),gir=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),hir=o("not"),pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),uir=o("from_pretrained()"),_ir=o(" to load the model weights."),bir=l(),F(X6.$$.fragment),vir=l(),ho=a("div"),F(A8.$$.fragment),Fir=l(),U7e=a("p"),Tir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mir=l(),Ua=a("p"),Eir=o("The model class to instantiate is selected based on the "),J7e=a("code"),Cir=o("model_type"),wir=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),Air=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),yir=o("pretrained_model_name_or_path"),xir=o(":"),$ir=l(),L8=a("ul"),z6=a("li"),Z7e=a("strong"),kir=o("speech-encoder-decoder"),Sir=o(" \u2014 "),KW=a("a"),Rir=o("SpeechEncoderDecoderModel"),Pir=o(" (Speech Encoder decoder model)"),Bir=l(),W6=a("li"),e2e=a("strong"),Iir=o("speech_to_text"),Nir=o(" \u2014 "),ZW=a("a"),qir=o("Speech2TextForConditionalGeneration"),jir=o(" (Speech2Text model)"),Dir=l(),Q6=a("p"),Gir=o("The model is set in evaluation mode by default using "),o2e=a("code"),Oir=o("model.eval()"),Vir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=a("code"),Xir=o("model.train()"),zir=l(),F(H6.$$.fragment),QGe=l(),Pd=a("h2"),U6=a("a"),t2e=a("span"),F(y8.$$.fragment),Wir=l(),a2e=a("span"),Qir=o("AutoModelForAudioXVector"),HGe=l(),Qo=a("div"),F(x8.$$.fragment),Hir=l(),Bd=a("p"),Uir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eQ=a("a"),Jir=o("from_pretrained()"),Yir=o(" class method or the "),oQ=a("a"),Kir=o("from_config()"),Zir=o(` class
method.`),edr=l(),$8=a("p"),odr=o("This class cannot be instantiated directly using "),n2e=a("code"),rdr=o("__init__()"),tdr=o(" (throws an error)."),adr=l(),Ct=a("div"),F(k8.$$.fragment),ndr=l(),s2e=a("p"),sdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ldr=l(),Id=a("p"),idr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),ddr=o("not"),cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),fdr=o("from_pretrained()"),mdr=o(" to load the model weights."),gdr=l(),F(J6.$$.fragment),hdr=l(),po=a("div"),F(S8.$$.fragment),pdr=l(),i2e=a("p"),udr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_dr=l(),Ja=a("p"),bdr=o("The model class to instantiate is selected based on the "),d2e=a("code"),vdr=o("model_type"),Fdr=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(":"),wdr=l(),ot=a("ul"),Y6=a("li"),m2e=a("strong"),Adr=o("data2vec-audio"),Ldr=o(" \u2014 "),tQ=a("a"),ydr=o("Data2VecAudioForXVector"),xdr=o(" (Data2VecAudio model)"),$dr=l(),K6=a("li"),g2e=a("strong"),kdr=o("unispeech-sat"),Sdr=o(" \u2014 "),aQ=a("a"),Rdr=o("UniSpeechSatForXVector"),Pdr=o(" (UniSpeechSat model)"),Bdr=l(),Z6=a("li"),h2e=a("strong"),Idr=o("wav2vec2"),Ndr=o(" \u2014 "),nQ=a("a"),qdr=o("Wav2Vec2ForXVector"),jdr=o(" (Wav2Vec2 model)"),Ddr=l(),eT=a("li"),p2e=a("strong"),Gdr=o("wav2vec2-conformer"),Odr=o(" \u2014 "),sQ=a("a"),Vdr=o("Wav2Vec2ConformerForXVector"),Xdr=o(" (Wav2Vec2-Conformer model)"),zdr=l(),oT=a("li"),u2e=a("strong"),Wdr=o("wavlm"),Qdr=o(" \u2014 "),lQ=a("a"),Hdr=o("WavLMForXVector"),Udr=o(" (WavLM model)"),Jdr=l(),rT=a("p"),Ydr=o("The model is set in evaluation mode by default using "),_2e=a("code"),Kdr=o("model.eval()"),Zdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),ecr=o("model.train()"),ocr=l(),F(tT.$$.fragment),UGe=l(),Nd=a("h2"),aT=a("a"),v2e=a("span"),F(R8.$$.fragment),rcr=l(),F2e=a("span"),tcr=o("AutoModelForMaskedImageModeling"),JGe=l(),Ho=a("div"),F(P8.$$.fragment),acr=l(),qd=a("p"),ncr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iQ=a("a"),scr=o("from_pretrained()"),lcr=o(" class method or the "),dQ=a("a"),icr=o("from_config()"),dcr=o(` class
method.`),ccr=l(),B8=a("p"),fcr=o("This class cannot be instantiated directly using "),T2e=a("code"),mcr=o("__init__()"),gcr=o(" (throws an error)."),hcr=l(),wt=a("div"),F(I8.$$.fragment),pcr=l(),M2e=a("p"),ucr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_cr=l(),jd=a("p"),bcr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),vcr=o("not"),Fcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Tcr=o("from_pretrained()"),Mcr=o(" to load the model weights."),Ecr=l(),F(nT.$$.fragment),Ccr=l(),uo=a("div"),F(N8.$$.fragment),wcr=l(),C2e=a("p"),Acr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lcr=l(),Ya=a("p"),ycr=o("The model class to instantiate is selected based on the "),w2e=a("code"),xcr=o("model_type"),$cr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),kcr=o("pretrained_model_name_or_path"),Scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Rcr=o("pretrained_model_name_or_path"),Pcr=o(":"),Bcr=l(),Dd=a("ul"),sT=a("li"),y2e=a("strong"),Icr=o("deit"),Ncr=o(" \u2014 "),fQ=a("a"),qcr=o("DeiTForMaskedImageModeling"),jcr=o(" (DeiT model)"),Dcr=l(),lT=a("li"),x2e=a("strong"),Gcr=o("swin"),Ocr=o(" \u2014 "),mQ=a("a"),Vcr=o("SwinForMaskedImageModeling"),Xcr=o(" (Swin Transformer model)"),zcr=l(),iT=a("li"),$2e=a("strong"),Wcr=o("vit"),Qcr=o(" \u2014 "),gQ=a("a"),Hcr=o("ViTForMaskedImageModeling"),Ucr=o(" (ViT model)"),Jcr=l(),dT=a("p"),Ycr=o("The model is set in evaluation mode by default using "),k2e=a("code"),Kcr=o("model.eval()"),Zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),efr=o("model.train()"),ofr=l(),F(cT.$$.fragment),YGe=l(),Gd=a("h2"),fT=a("a"),R2e=a("span"),F(q8.$$.fragment),rfr=l(),P2e=a("span"),tfr=o("AutoModelForObjectDetection"),KGe=l(),Uo=a("div"),F(j8.$$.fragment),afr=l(),Od=a("p"),nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hQ=a("a"),sfr=o("from_pretrained()"),lfr=o(" class method or the "),pQ=a("a"),ifr=o("from_config()"),dfr=o(` class
method.`),cfr=l(),D8=a("p"),ffr=o("This class cannot be instantiated directly using "),B2e=a("code"),mfr=o("__init__()"),gfr=o(" (throws an error)."),hfr=l(),At=a("div"),F(G8.$$.fragment),pfr=l(),I2e=a("p"),ufr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_fr=l(),Vd=a("p"),bfr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),vfr=o("not"),Ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Tfr=o("from_pretrained()"),Mfr=o(" to load the model weights."),Efr=l(),F(mT.$$.fragment),Cfr=l(),_o=a("div"),F(O8.$$.fragment),wfr=l(),q2e=a("p"),Afr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lfr=l(),Ka=a("p"),yfr=o("The model class to instantiate is selected based on the "),j2e=a("code"),xfr=o("model_type"),$fr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),Rfr=o("pretrained_model_name_or_path"),Pfr=o(":"),Bfr=l(),V8=a("ul"),gT=a("li"),O2e=a("strong"),Ifr=o("detr"),Nfr=o(" \u2014 "),_Q=a("a"),qfr=o("DetrForObjectDetection"),jfr=o(" (DETR model)"),Dfr=l(),hT=a("li"),V2e=a("strong"),Gfr=o("yolos"),Ofr=o(" \u2014 "),bQ=a("a"),Vfr=o("YolosForObjectDetection"),Xfr=o(" (YOLOS model)"),zfr=l(),pT=a("p"),Wfr=o("The model is set in evaluation mode by default using "),X2e=a("code"),Qfr=o("model.eval()"),Hfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),Ufr=o("model.train()"),Jfr=l(),F(uT.$$.fragment),ZGe=l(),Xd=a("h2"),_T=a("a"),W2e=a("span"),F(X8.$$.fragment),Yfr=l(),Q2e=a("span"),Kfr=o("AutoModelForImageSegmentation"),eOe=l(),Jo=a("div"),F(z8.$$.fragment),Zfr=l(),zd=a("p"),emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vQ=a("a"),omr=o("from_pretrained()"),rmr=o(" class method or the "),FQ=a("a"),tmr=o("from_config()"),amr=o(` class
method.`),nmr=l(),W8=a("p"),smr=o("This class cannot be instantiated directly using "),H2e=a("code"),lmr=o("__init__()"),imr=o(" (throws an error)."),dmr=l(),Lt=a("div"),F(Q8.$$.fragment),cmr=l(),U2e=a("p"),fmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mmr=l(),Wd=a("p"),gmr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),hmr=o("not"),pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),umr=o("from_pretrained()"),_mr=o(" to load the model weights."),bmr=l(),F(bT.$$.fragment),vmr=l(),bo=a("div"),F(H8.$$.fragment),Fmr=l(),Y2e=a("p"),Tmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Mmr=l(),Za=a("p"),Emr=o("The model class to instantiate is selected based on the "),K2e=a("code"),Cmr=o("model_type"),wmr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),Amr=o("pretrained_model_name_or_path"),Lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),ymr=o("pretrained_model_name_or_path"),xmr=o(":"),$mr=l(),obe=a("ul"),vT=a("li"),rbe=a("strong"),kmr=o("detr"),Smr=o(" \u2014 "),MQ=a("a"),Rmr=o("DetrForSegmentation"),Pmr=o(" (DETR model)"),Bmr=l(),FT=a("p"),Imr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Nmr=o("model.eval()"),qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),jmr=o("model.train()"),Dmr=l(),F(TT.$$.fragment),oOe=l(),Qd=a("h2"),MT=a("a"),nbe=a("span"),F(U8.$$.fragment),Gmr=l(),sbe=a("span"),Omr=o("AutoModelForSemanticSegmentation"),rOe=l(),Yo=a("div"),F(J8.$$.fragment),Vmr=l(),Hd=a("p"),Xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EQ=a("a"),zmr=o("from_pretrained()"),Wmr=o(" class method or the "),CQ=a("a"),Qmr=o("from_config()"),Hmr=o(` class
method.`),Umr=l(),Y8=a("p"),Jmr=o("This class cannot be instantiated directly using "),lbe=a("code"),Ymr=o("__init__()"),Kmr=o(" (throws an error)."),Zmr=l(),yt=a("div"),F(K8.$$.fragment),egr=l(),ibe=a("p"),ogr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rgr=l(),Ud=a("p"),tgr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),agr=o("not"),ngr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),sgr=o("from_pretrained()"),lgr=o(" to load the model weights."),igr=l(),F(ET.$$.fragment),dgr=l(),vo=a("div"),F(Z8.$$.fragment),cgr=l(),cbe=a("p"),fgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mgr=l(),en=a("p"),ggr=o("The model class to instantiate is selected based on the "),fbe=a("code"),hgr=o("model_type"),pgr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),bgr=o("pretrained_model_name_or_path"),vgr=o(":"),Fgr=l(),on=a("ul"),CT=a("li"),hbe=a("strong"),Tgr=o("beit"),Mgr=o(" \u2014 "),AQ=a("a"),Egr=o("BeitForSemanticSegmentation"),Cgr=o(" (BEiT model)"),wgr=l(),wT=a("li"),pbe=a("strong"),Agr=o("data2vec-vision"),Lgr=o(" \u2014 "),LQ=a("a"),ygr=o("Data2VecVisionForSemanticSegmentation"),xgr=o(" (Data2VecVision model)"),$gr=l(),AT=a("li"),ube=a("strong"),kgr=o("dpt"),Sgr=o(" \u2014 "),yQ=a("a"),Rgr=o("DPTForSemanticSegmentation"),Pgr=o(" (DPT model)"),Bgr=l(),LT=a("li"),_be=a("strong"),Igr=o("segformer"),Ngr=o(" \u2014 "),xQ=a("a"),qgr=o("SegformerForSemanticSegmentation"),jgr=o(" (SegFormer model)"),Dgr=l(),yT=a("p"),Ggr=o("The model is set in evaluation mode by default using "),bbe=a("code"),Ogr=o("model.eval()"),Vgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=a("code"),Xgr=o("model.train()"),zgr=l(),F(xT.$$.fragment),tOe=l(),Jd=a("h2"),$T=a("a"),Fbe=a("span"),F(e9.$$.fragment),Wgr=l(),Tbe=a("span"),Qgr=o("AutoModelForInstanceSegmentation"),aOe=l(),Ko=a("div"),F(o9.$$.fragment),Hgr=l(),Yd=a("p"),Ugr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$Q=a("a"),Jgr=o("from_pretrained()"),Ygr=o(" class method or the "),kQ=a("a"),Kgr=o("from_config()"),Zgr=o(` class
method.`),ehr=l(),r9=a("p"),ohr=o("This class cannot be instantiated directly using "),Mbe=a("code"),rhr=o("__init__()"),thr=o(" (throws an error)."),ahr=l(),xt=a("div"),F(t9.$$.fragment),nhr=l(),Ebe=a("p"),shr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lhr=l(),Kd=a("p"),ihr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),dhr=o("not"),chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),fhr=o("from_pretrained()"),mhr=o(" to load the model weights."),ghr=l(),F(kT.$$.fragment),hhr=l(),Fo=a("div"),F(a9.$$.fragment),phr=l(),wbe=a("p"),uhr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_hr=l(),rn=a("p"),bhr=o("The model class to instantiate is selected based on the "),Abe=a("code"),vhr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),Thr=o("pretrained_model_name_or_path"),Mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(":"),whr=l(),xbe=a("ul"),ST=a("li"),$be=a("strong"),Ahr=o("maskformer"),Lhr=o(" \u2014 "),RQ=a("a"),yhr=o("MaskFormerForInstanceSegmentation"),xhr=o(" (MaskFormer model)"),$hr=l(),RT=a("p"),khr=o("The model is set in evaluation mode by default using "),kbe=a("code"),Shr=o("model.eval()"),Rhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),Phr=o("model.train()"),Bhr=l(),F(PT.$$.fragment),nOe=l(),Zd=a("h2"),BT=a("a"),Rbe=a("span"),F(n9.$$.fragment),Ihr=l(),Pbe=a("span"),Nhr=o("TFAutoModel"),sOe=l(),Zo=a("div"),F(s9.$$.fragment),qhr=l(),ec=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),BQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),l9=a("p"),zhr=o("This class cannot be instantiated directly using "),Bbe=a("code"),Whr=o("__init__()"),Qhr=o(" (throws an error)."),Hhr=l(),$t=a("div"),F(i9.$$.fragment),Uhr=l(),Ibe=a("p"),Jhr=o("Instantiates one of the base model classes of the library from a configuration."),Yhr=l(),oc=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(IT.$$.fragment),apr=l(),Lr=a("div"),F(d9.$$.fragment),npr=l(),qbe=a("p"),spr=o("Instantiate one of the base model classes of the library from a pretrained model."),lpr=l(),tn=a("p"),ipr=o("The model class to instantiate is selected based on the "),jbe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),q=a("ul"),NT=a("li"),Obe=a("strong"),upr=o("albert"),_pr=o(" \u2014 "),NQ=a("a"),bpr=o("TFAlbertModel"),vpr=o(" (ALBERT model)"),Fpr=l(),qT=a("li"),Vbe=a("strong"),Tpr=o("bart"),Mpr=o(" \u2014 "),qQ=a("a"),Epr=o("TFBartModel"),Cpr=o(" (BART model)"),wpr=l(),jT=a("li"),Xbe=a("strong"),Apr=o("bert"),Lpr=o(" \u2014 "),jQ=a("a"),ypr=o("TFBertModel"),xpr=o(" (BERT model)"),$pr=l(),DT=a("li"),zbe=a("strong"),kpr=o("blenderbot"),Spr=o(" \u2014 "),DQ=a("a"),Rpr=o("TFBlenderbotModel"),Ppr=o(" (Blenderbot model)"),Bpr=l(),GT=a("li"),Wbe=a("strong"),Ipr=o("blenderbot-small"),Npr=o(" \u2014 "),GQ=a("a"),qpr=o("TFBlenderbotSmallModel"),jpr=o(" (BlenderbotSmall model)"),Dpr=l(),OT=a("li"),Qbe=a("strong"),Gpr=o("camembert"),Opr=o(" \u2014 "),OQ=a("a"),Vpr=o("TFCamembertModel"),Xpr=o(" (CamemBERT model)"),zpr=l(),VT=a("li"),Hbe=a("strong"),Wpr=o("clip"),Qpr=o(" \u2014 "),VQ=a("a"),Hpr=o("TFCLIPModel"),Upr=o(" (CLIP model)"),Jpr=l(),XT=a("li"),Ube=a("strong"),Ypr=o("convbert"),Kpr=o(" \u2014 "),XQ=a("a"),Zpr=o("TFConvBertModel"),eur=o(" (ConvBERT model)"),our=l(),zT=a("li"),Jbe=a("strong"),rur=o("convnext"),tur=o(" \u2014 "),zQ=a("a"),aur=o("TFConvNextModel"),nur=o(" (ConvNeXT model)"),sur=l(),WT=a("li"),Ybe=a("strong"),lur=o("ctrl"),iur=o(" \u2014 "),WQ=a("a"),dur=o("TFCTRLModel"),cur=o(" (CTRL model)"),fur=l(),QT=a("li"),Kbe=a("strong"),mur=o("data2vec-vision"),gur=o(" \u2014 "),QQ=a("a"),hur=o("TFData2VecVisionModel"),pur=o(" (Data2VecVision model)"),uur=l(),HT=a("li"),Zbe=a("strong"),_ur=o("deberta"),bur=o(" \u2014 "),HQ=a("a"),vur=o("TFDebertaModel"),Fur=o(" (DeBERTa model)"),Tur=l(),UT=a("li"),eve=a("strong"),Mur=o("deberta-v2"),Eur=o(" \u2014 "),UQ=a("a"),Cur=o("TFDebertaV2Model"),wur=o(" (DeBERTa-v2 model)"),Aur=l(),JT=a("li"),ove=a("strong"),Lur=o("distilbert"),yur=o(" \u2014 "),JQ=a("a"),xur=o("TFDistilBertModel"),$ur=o(" (DistilBERT model)"),kur=l(),YT=a("li"),rve=a("strong"),Sur=o("dpr"),Rur=o(" \u2014 "),YQ=a("a"),Pur=o("TFDPRQuestionEncoder"),Bur=o(" (DPR model)"),Iur=l(),KT=a("li"),tve=a("strong"),Nur=o("electra"),qur=o(" \u2014 "),KQ=a("a"),jur=o("TFElectraModel"),Dur=o(" (ELECTRA model)"),Gur=l(),ZT=a("li"),ave=a("strong"),Our=o("flaubert"),Vur=o(" \u2014 "),ZQ=a("a"),Xur=o("TFFlaubertModel"),zur=o(" (FlauBERT model)"),Wur=l(),Xs=a("li"),nve=a("strong"),Qur=o("funnel"),Hur=o(" \u2014 "),eH=a("a"),Uur=o("TFFunnelModel"),Jur=o(" or "),oH=a("a"),Yur=o("TFFunnelBaseModel"),Kur=o(" (Funnel Transformer model)"),Zur=l(),eM=a("li"),sve=a("strong"),e_r=o("gpt2"),o_r=o(" \u2014 "),rH=a("a"),r_r=o("TFGPT2Model"),t_r=o(" (OpenAI GPT-2 model)"),a_r=l(),oM=a("li"),lve=a("strong"),n_r=o("gptj"),s_r=o(" \u2014 "),tH=a("a"),l_r=o("TFGPTJModel"),i_r=o(" (GPT-J model)"),d_r=l(),rM=a("li"),ive=a("strong"),c_r=o("hubert"),f_r=o(" \u2014 "),aH=a("a"),m_r=o("TFHubertModel"),g_r=o(" (Hubert model)"),h_r=l(),tM=a("li"),dve=a("strong"),p_r=o("layoutlm"),u_r=o(" \u2014 "),nH=a("a"),__r=o("TFLayoutLMModel"),b_r=o(" (LayoutLM model)"),v_r=l(),aM=a("li"),cve=a("strong"),F_r=o("led"),T_r=o(" \u2014 "),sH=a("a"),M_r=o("TFLEDModel"),E_r=o(" (LED model)"),C_r=l(),nM=a("li"),fve=a("strong"),w_r=o("longformer"),A_r=o(" \u2014 "),lH=a("a"),L_r=o("TFLongformerModel"),y_r=o(" (Longformer model)"),x_r=l(),sM=a("li"),mve=a("strong"),$_r=o("lxmert"),k_r=o(" \u2014 "),iH=a("a"),S_r=o("TFLxmertModel"),R_r=o(" (LXMERT model)"),P_r=l(),lM=a("li"),gve=a("strong"),B_r=o("marian"),I_r=o(" \u2014 "),dH=a("a"),N_r=o("TFMarianModel"),q_r=o(" (Marian model)"),j_r=l(),iM=a("li"),hve=a("strong"),D_r=o("mbart"),G_r=o(" \u2014 "),cH=a("a"),O_r=o("TFMBartModel"),V_r=o(" (mBART model)"),X_r=l(),dM=a("li"),pve=a("strong"),z_r=o("mobilebert"),W_r=o(" \u2014 "),fH=a("a"),Q_r=o("TFMobileBertModel"),H_r=o(" (MobileBERT model)"),U_r=l(),cM=a("li"),uve=a("strong"),J_r=o("mpnet"),Y_r=o(" \u2014 "),mH=a("a"),K_r=o("TFMPNetModel"),Z_r=o(" (MPNet model)"),e1r=l(),fM=a("li"),_ve=a("strong"),o1r=o("mt5"),r1r=o(" \u2014 "),gH=a("a"),t1r=o("TFMT5Model"),a1r=o(" (MT5 model)"),n1r=l(),mM=a("li"),bve=a("strong"),s1r=o("openai-gpt"),l1r=o(" \u2014 "),hH=a("a"),i1r=o("TFOpenAIGPTModel"),d1r=o(" (OpenAI GPT model)"),c1r=l(),gM=a("li"),vve=a("strong"),f1r=o("opt"),m1r=o(" \u2014 "),pH=a("a"),g1r=o("TFOPTModel"),h1r=o(" (OPT model)"),p1r=l(),hM=a("li"),Fve=a("strong"),u1r=o("pegasus"),_1r=o(" \u2014 "),uH=a("a"),b1r=o("TFPegasusModel"),v1r=o(" (Pegasus model)"),F1r=l(),pM=a("li"),Tve=a("strong"),T1r=o("rembert"),M1r=o(" \u2014 "),_H=a("a"),E1r=o("TFRemBertModel"),C1r=o(" (RemBERT model)"),w1r=l(),uM=a("li"),Mve=a("strong"),A1r=o("roberta"),L1r=o(" \u2014 "),bH=a("a"),y1r=o("TFRobertaModel"),x1r=o(" (RoBERTa model)"),$1r=l(),_M=a("li"),Eve=a("strong"),k1r=o("roformer"),S1r=o(" \u2014 "),vH=a("a"),R1r=o("TFRoFormerModel"),P1r=o(" (RoFormer model)"),B1r=l(),bM=a("li"),Cve=a("strong"),I1r=o("speech_to_text"),N1r=o(" \u2014 "),FH=a("a"),q1r=o("TFSpeech2TextModel"),j1r=o(" (Speech2Text model)"),D1r=l(),vM=a("li"),wve=a("strong"),G1r=o("swin"),O1r=o(" \u2014 "),TH=a("a"),V1r=o("TFSwinModel"),X1r=o(" (Swin Transformer model)"),z1r=l(),FM=a("li"),Ave=a("strong"),W1r=o("t5"),Q1r=o(" \u2014 "),MH=a("a"),H1r=o("TFT5Model"),U1r=o(" (T5 model)"),J1r=l(),TM=a("li"),Lve=a("strong"),Y1r=o("tapas"),K1r=o(" \u2014 "),EH=a("a"),Z1r=o("TFTapasModel"),e7r=o(" (TAPAS model)"),o7r=l(),MM=a("li"),yve=a("strong"),r7r=o("transfo-xl"),t7r=o(" \u2014 "),CH=a("a"),a7r=o("TFTransfoXLModel"),n7r=o(" (Transformer-XL model)"),s7r=l(),EM=a("li"),xve=a("strong"),l7r=o("vit"),i7r=o(" \u2014 "),wH=a("a"),d7r=o("TFViTModel"),c7r=o(" (ViT model)"),f7r=l(),CM=a("li"),$ve=a("strong"),m7r=o("vit_mae"),g7r=o(" \u2014 "),AH=a("a"),h7r=o("TFViTMAEModel"),p7r=o(" (ViTMAE model)"),u7r=l(),wM=a("li"),kve=a("strong"),_7r=o("wav2vec2"),b7r=o(" \u2014 "),LH=a("a"),v7r=o("TFWav2Vec2Model"),F7r=o(" (Wav2Vec2 model)"),T7r=l(),AM=a("li"),Sve=a("strong"),M7r=o("xlm"),E7r=o(" \u2014 "),yH=a("a"),C7r=o("TFXLMModel"),w7r=o(" (XLM model)"),A7r=l(),LM=a("li"),Rve=a("strong"),L7r=o("xlm-roberta"),y7r=o(" \u2014 "),xH=a("a"),x7r=o("TFXLMRobertaModel"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),yM=a("li"),Pve=a("strong"),S7r=o("xlnet"),R7r=o(" \u2014 "),$H=a("a"),P7r=o("TFXLNetModel"),B7r=o(" (XLNet model)"),I7r=l(),F(xM.$$.fragment),lOe=l(),rc=a("h2"),$M=a("a"),Bve=a("span"),F(c9.$$.fragment),N7r=l(),Ive=a("span"),q7r=o("TFAutoModelForPreTraining"),iOe=l(),er=a("div"),F(f9.$$.fragment),j7r=l(),tc=a("p"),D7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kH=a("a"),G7r=o("from_pretrained()"),O7r=o(" class method or the "),SH=a("a"),V7r=o("from_config()"),X7r=o(` class
method.`),z7r=l(),m9=a("p"),W7r=o("This class cannot be instantiated directly using "),Nve=a("code"),Q7r=o("__init__()"),H7r=o(" (throws an error)."),U7r=l(),kt=a("div"),F(g9.$$.fragment),J7r=l(),qve=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K7r=l(),ac=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),e2r=o("not"),o2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),r2r=o("from_pretrained()"),t2r=o(" to load the model weights."),a2r=l(),F(kM.$$.fragment),n2r=l(),yr=a("div"),F(h9.$$.fragment),s2r=l(),Dve=a("p"),l2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i2r=l(),an=a("p"),d2r=o("The model class to instantiate is selected based on the "),Gve=a("code"),c2r=o("model_type"),f2r=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),m2r=o("pretrained_model_name_or_path"),g2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(":"),u2r=l(),se=a("ul"),SM=a("li"),Xve=a("strong"),_2r=o("albert"),b2r=o(" \u2014 "),PH=a("a"),v2r=o("TFAlbertForPreTraining"),F2r=o(" (ALBERT model)"),T2r=l(),RM=a("li"),zve=a("strong"),M2r=o("bart"),E2r=o(" \u2014 "),BH=a("a"),C2r=o("TFBartForConditionalGeneration"),w2r=o(" (BART model)"),A2r=l(),PM=a("li"),Wve=a("strong"),L2r=o("bert"),y2r=o(" \u2014 "),IH=a("a"),x2r=o("TFBertForPreTraining"),$2r=o(" (BERT model)"),k2r=l(),BM=a("li"),Qve=a("strong"),S2r=o("camembert"),R2r=o(" \u2014 "),NH=a("a"),P2r=o("TFCamembertForMaskedLM"),B2r=o(" (CamemBERT model)"),I2r=l(),IM=a("li"),Hve=a("strong"),N2r=o("ctrl"),q2r=o(" \u2014 "),qH=a("a"),j2r=o("TFCTRLLMHeadModel"),D2r=o(" (CTRL model)"),G2r=l(),NM=a("li"),Uve=a("strong"),O2r=o("distilbert"),V2r=o(" \u2014 "),jH=a("a"),X2r=o("TFDistilBertForMaskedLM"),z2r=o(" (DistilBERT model)"),W2r=l(),qM=a("li"),Jve=a("strong"),Q2r=o("electra"),H2r=o(" \u2014 "),DH=a("a"),U2r=o("TFElectraForPreTraining"),J2r=o(" (ELECTRA model)"),Y2r=l(),jM=a("li"),Yve=a("strong"),K2r=o("flaubert"),Z2r=o(" \u2014 "),GH=a("a"),ebr=o("TFFlaubertWithLMHeadModel"),obr=o(" (FlauBERT model)"),rbr=l(),DM=a("li"),Kve=a("strong"),tbr=o("funnel"),abr=o(" \u2014 "),OH=a("a"),nbr=o("TFFunnelForPreTraining"),sbr=o(" (Funnel Transformer model)"),lbr=l(),GM=a("li"),Zve=a("strong"),ibr=o("gpt2"),dbr=o(" \u2014 "),VH=a("a"),cbr=o("TFGPT2LMHeadModel"),fbr=o(" (OpenAI GPT-2 model)"),mbr=l(),OM=a("li"),eFe=a("strong"),gbr=o("layoutlm"),hbr=o(" \u2014 "),XH=a("a"),pbr=o("TFLayoutLMForMaskedLM"),ubr=o(" (LayoutLM model)"),_br=l(),VM=a("li"),oFe=a("strong"),bbr=o("lxmert"),vbr=o(" \u2014 "),zH=a("a"),Fbr=o("TFLxmertForPreTraining"),Tbr=o(" (LXMERT model)"),Mbr=l(),XM=a("li"),rFe=a("strong"),Ebr=o("mobilebert"),Cbr=o(" \u2014 "),WH=a("a"),wbr=o("TFMobileBertForPreTraining"),Abr=o(" (MobileBERT model)"),Lbr=l(),zM=a("li"),tFe=a("strong"),ybr=o("mpnet"),xbr=o(" \u2014 "),QH=a("a"),$br=o("TFMPNetForMaskedLM"),kbr=o(" (MPNet model)"),Sbr=l(),WM=a("li"),aFe=a("strong"),Rbr=o("openai-gpt"),Pbr=o(" \u2014 "),HH=a("a"),Bbr=o("TFOpenAIGPTLMHeadModel"),Ibr=o(" (OpenAI GPT model)"),Nbr=l(),QM=a("li"),nFe=a("strong"),qbr=o("roberta"),jbr=o(" \u2014 "),UH=a("a"),Dbr=o("TFRobertaForMaskedLM"),Gbr=o(" (RoBERTa model)"),Obr=l(),HM=a("li"),sFe=a("strong"),Vbr=o("t5"),Xbr=o(" \u2014 "),JH=a("a"),zbr=o("TFT5ForConditionalGeneration"),Wbr=o(" (T5 model)"),Qbr=l(),UM=a("li"),lFe=a("strong"),Hbr=o("tapas"),Ubr=o(" \u2014 "),YH=a("a"),Jbr=o("TFTapasForMaskedLM"),Ybr=o(" (TAPAS model)"),Kbr=l(),JM=a("li"),iFe=a("strong"),Zbr=o("transfo-xl"),evr=o(" \u2014 "),KH=a("a"),ovr=o("TFTransfoXLLMHeadModel"),rvr=o(" (Transformer-XL model)"),tvr=l(),YM=a("li"),dFe=a("strong"),avr=o("vit_mae"),nvr=o(" \u2014 "),ZH=a("a"),svr=o("TFViTMAEForPreTraining"),lvr=o(" (ViTMAE model)"),ivr=l(),KM=a("li"),cFe=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),eU=a("a"),fvr=o("TFXLMWithLMHeadModel"),mvr=o(" (XLM model)"),gvr=l(),ZM=a("li"),fFe=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),oU=a("a"),uvr=o("TFXLMRobertaForMaskedLM"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),e4=a("li"),mFe=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),rU=a("a"),Tvr=o("TFXLNetLMHeadModel"),Mvr=o(" (XLNet model)"),Evr=l(),F(o4.$$.fragment),dOe=l(),nc=a("h2"),r4=a("a"),gFe=a("span"),F(p9.$$.fragment),Cvr=l(),hFe=a("span"),wvr=o("TFAutoModelForCausalLM"),cOe=l(),or=a("div"),F(u9.$$.fragment),Avr=l(),sc=a("p"),Lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tU=a("a"),yvr=o("from_pretrained()"),xvr=o(" class method or the "),aU=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),_9=a("p"),Rvr=o("This class cannot be instantiated directly using "),pFe=a("code"),Pvr=o("__init__()"),Bvr=o(" (throws an error)."),Ivr=l(),St=a("div"),F(b9.$$.fragment),Nvr=l(),uFe=a("p"),qvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jvr=l(),lc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(t4.$$.fragment),Wvr=l(),xr=a("div"),F(v9.$$.fragment),Qvr=l(),bFe=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Uvr=l(),nn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),vFe=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),Me=a("ul"),a4=a("li"),MFe=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),sU=a("a"),sFr=o("TFBertLMHeadModel"),lFr=o(" (BERT model)"),iFr=l(),n4=a("li"),EFe=a("strong"),dFr=o("camembert"),cFr=o(" \u2014 "),lU=a("a"),fFr=o("TFCamembertForCausalLM"),mFr=o(" (CamemBERT model)"),gFr=l(),s4=a("li"),CFe=a("strong"),hFr=o("ctrl"),pFr=o(" \u2014 "),iU=a("a"),uFr=o("TFCTRLLMHeadModel"),_Fr=o(" (CTRL model)"),bFr=l(),l4=a("li"),wFe=a("strong"),vFr=o("gpt2"),FFr=o(" \u2014 "),dU=a("a"),TFr=o("TFGPT2LMHeadModel"),MFr=o(" (OpenAI GPT-2 model)"),EFr=l(),i4=a("li"),AFe=a("strong"),CFr=o("gptj"),wFr=o(" \u2014 "),cU=a("a"),AFr=o("TFGPTJForCausalLM"),LFr=o(" (GPT-J model)"),yFr=l(),d4=a("li"),LFe=a("strong"),xFr=o("openai-gpt"),$Fr=o(" \u2014 "),fU=a("a"),kFr=o("TFOpenAIGPTLMHeadModel"),SFr=o(" (OpenAI GPT model)"),RFr=l(),c4=a("li"),yFe=a("strong"),PFr=o("opt"),BFr=o(" \u2014 "),mU=a("a"),IFr=o("TFOPTForCausalLM"),NFr=o(" (OPT model)"),qFr=l(),f4=a("li"),xFe=a("strong"),jFr=o("rembert"),DFr=o(" \u2014 "),gU=a("a"),GFr=o("TFRemBertForCausalLM"),OFr=o(" (RemBERT model)"),VFr=l(),m4=a("li"),$Fe=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),hU=a("a"),WFr=o("TFRobertaForCausalLM"),QFr=o(" (RoBERTa model)"),HFr=l(),g4=a("li"),kFe=a("strong"),UFr=o("roformer"),JFr=o(" \u2014 "),pU=a("a"),YFr=o("TFRoFormerForCausalLM"),KFr=o(" (RoFormer model)"),ZFr=l(),h4=a("li"),SFe=a("strong"),e6r=o("transfo-xl"),o6r=o(" \u2014 "),uU=a("a"),r6r=o("TFTransfoXLLMHeadModel"),t6r=o(" (Transformer-XL model)"),a6r=l(),p4=a("li"),RFe=a("strong"),n6r=o("xlm"),s6r=o(" \u2014 "),_U=a("a"),l6r=o("TFXLMWithLMHeadModel"),i6r=o(" (XLM model)"),d6r=l(),u4=a("li"),PFe=a("strong"),c6r=o("xlnet"),f6r=o(" \u2014 "),bU=a("a"),m6r=o("TFXLNetLMHeadModel"),g6r=o(" (XLNet model)"),h6r=l(),F(_4.$$.fragment),fOe=l(),ic=a("h2"),b4=a("a"),BFe=a("span"),F(F9.$$.fragment),p6r=l(),IFe=a("span"),u6r=o("TFAutoModelForImageClassification"),mOe=l(),rr=a("div"),F(T9.$$.fragment),_6r=l(),dc=a("p"),b6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vU=a("a"),v6r=o("from_pretrained()"),F6r=o(" class method or the "),FU=a("a"),T6r=o("from_config()"),M6r=o(` class
method.`),E6r=l(),M9=a("p"),C6r=o("This class cannot be instantiated directly using "),NFe=a("code"),w6r=o("__init__()"),A6r=o(" (throws an error)."),L6r=l(),Rt=a("div"),F(E9.$$.fragment),y6r=l(),qFe=a("p"),x6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$6r=l(),cc=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),P6r=o("from_pretrained()"),B6r=o(" to load the model weights."),I6r=l(),F(v4.$$.fragment),N6r=l(),$r=a("div"),F(C9.$$.fragment),q6r=l(),DFe=a("p"),j6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D6r=l(),sn=a("p"),G6r=o("The model class to instantiate is selected based on the "),GFe=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),W6r=o("pretrained_model_name_or_path"),Q6r=o(":"),H6r=l(),ln=a("ul"),F4=a("li"),XFe=a("strong"),U6r=o("convnext"),J6r=o(" \u2014 "),MU=a("a"),Y6r=o("TFConvNextForImageClassification"),K6r=o(" (ConvNeXT model)"),Z6r=l(),T4=a("li"),zFe=a("strong"),eTr=o("data2vec-vision"),oTr=o(" \u2014 "),EU=a("a"),rTr=o("TFData2VecVisionForImageClassification"),tTr=o(" (Data2VecVision model)"),aTr=l(),M4=a("li"),WFe=a("strong"),nTr=o("swin"),sTr=o(" \u2014 "),CU=a("a"),lTr=o("TFSwinForImageClassification"),iTr=o(" (Swin Transformer model)"),dTr=l(),E4=a("li"),QFe=a("strong"),cTr=o("vit"),fTr=o(" \u2014 "),wU=a("a"),mTr=o("TFViTForImageClassification"),gTr=o(" (ViT model)"),hTr=l(),F(C4.$$.fragment),gOe=l(),fc=a("h2"),w4=a("a"),HFe=a("span"),F(w9.$$.fragment),pTr=l(),UFe=a("span"),uTr=o("TFAutoModelForMaskedLM"),hOe=l(),tr=a("div"),F(A9.$$.fragment),_Tr=l(),mc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),LU=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),L9=a("p"),CTr=o("This class cannot be instantiated directly using "),JFe=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),LTr=l(),Pt=a("div"),F(y9.$$.fragment),yTr=l(),YFe=a("p"),xTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Tr=l(),gc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),PTr=o("from_pretrained()"),BTr=o(" to load the model weights."),ITr=l(),F(A4.$$.fragment),NTr=l(),kr=a("div"),F(x9.$$.fragment),qTr=l(),ZFe=a("p"),jTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DTr=l(),dn=a("p"),GTr=o("The model class to instantiate is selected based on the "),e6e=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),WTr=o("pretrained_model_name_or_path"),QTr=o(":"),HTr=l(),ie=a("ul"),L4=a("li"),t6e=a("strong"),UTr=o("albert"),JTr=o(" \u2014 "),xU=a("a"),YTr=o("TFAlbertForMaskedLM"),KTr=o(" (ALBERT model)"),ZTr=l(),y4=a("li"),a6e=a("strong"),eMr=o("bert"),oMr=o(" \u2014 "),$U=a("a"),rMr=o("TFBertForMaskedLM"),tMr=o(" (BERT model)"),aMr=l(),x4=a("li"),n6e=a("strong"),nMr=o("camembert"),sMr=o(" \u2014 "),kU=a("a"),lMr=o("TFCamembertForMaskedLM"),iMr=o(" (CamemBERT model)"),dMr=l(),$4=a("li"),s6e=a("strong"),cMr=o("convbert"),fMr=o(" \u2014 "),SU=a("a"),mMr=o("TFConvBertForMaskedLM"),gMr=o(" (ConvBERT model)"),hMr=l(),k4=a("li"),l6e=a("strong"),pMr=o("deberta"),uMr=o(" \u2014 "),RU=a("a"),_Mr=o("TFDebertaForMaskedLM"),bMr=o(" (DeBERTa model)"),vMr=l(),S4=a("li"),i6e=a("strong"),FMr=o("deberta-v2"),TMr=o(" \u2014 "),PU=a("a"),MMr=o("TFDebertaV2ForMaskedLM"),EMr=o(" (DeBERTa-v2 model)"),CMr=l(),R4=a("li"),d6e=a("strong"),wMr=o("distilbert"),AMr=o(" \u2014 "),BU=a("a"),LMr=o("TFDistilBertForMaskedLM"),yMr=o(" (DistilBERT model)"),xMr=l(),P4=a("li"),c6e=a("strong"),$Mr=o("electra"),kMr=o(" \u2014 "),IU=a("a"),SMr=o("TFElectraForMaskedLM"),RMr=o(" (ELECTRA model)"),PMr=l(),B4=a("li"),f6e=a("strong"),BMr=o("flaubert"),IMr=o(" \u2014 "),NU=a("a"),NMr=o("TFFlaubertWithLMHeadModel"),qMr=o(" (FlauBERT model)"),jMr=l(),I4=a("li"),m6e=a("strong"),DMr=o("funnel"),GMr=o(" \u2014 "),qU=a("a"),OMr=o("TFFunnelForMaskedLM"),VMr=o(" (Funnel Transformer model)"),XMr=l(),N4=a("li"),g6e=a("strong"),zMr=o("layoutlm"),WMr=o(" \u2014 "),jU=a("a"),QMr=o("TFLayoutLMForMaskedLM"),HMr=o(" (LayoutLM model)"),UMr=l(),q4=a("li"),h6e=a("strong"),JMr=o("longformer"),YMr=o(" \u2014 "),DU=a("a"),KMr=o("TFLongformerForMaskedLM"),ZMr=o(" (Longformer model)"),e4r=l(),j4=a("li"),p6e=a("strong"),o4r=o("mobilebert"),r4r=o(" \u2014 "),GU=a("a"),t4r=o("TFMobileBertForMaskedLM"),a4r=o(" (MobileBERT model)"),n4r=l(),D4=a("li"),u6e=a("strong"),s4r=o("mpnet"),l4r=o(" \u2014 "),OU=a("a"),i4r=o("TFMPNetForMaskedLM"),d4r=o(" (MPNet model)"),c4r=l(),G4=a("li"),_6e=a("strong"),f4r=o("rembert"),m4r=o(" \u2014 "),VU=a("a"),g4r=o("TFRemBertForMaskedLM"),h4r=o(" (RemBERT model)"),p4r=l(),O4=a("li"),b6e=a("strong"),u4r=o("roberta"),_4r=o(" \u2014 "),XU=a("a"),b4r=o("TFRobertaForMaskedLM"),v4r=o(" (RoBERTa model)"),F4r=l(),V4=a("li"),v6e=a("strong"),T4r=o("roformer"),M4r=o(" \u2014 "),zU=a("a"),E4r=o("TFRoFormerForMaskedLM"),C4r=o(" (RoFormer model)"),w4r=l(),X4=a("li"),F6e=a("strong"),A4r=o("tapas"),L4r=o(" \u2014 "),WU=a("a"),y4r=o("TFTapasForMaskedLM"),x4r=o(" (TAPAS model)"),$4r=l(),z4=a("li"),T6e=a("strong"),k4r=o("xlm"),S4r=o(" \u2014 "),QU=a("a"),R4r=o("TFXLMWithLMHeadModel"),P4r=o(" (XLM model)"),B4r=l(),W4=a("li"),M6e=a("strong"),I4r=o("xlm-roberta"),N4r=o(" \u2014 "),HU=a("a"),q4r=o("TFXLMRobertaForMaskedLM"),j4r=o(" (XLM-RoBERTa model)"),D4r=l(),F(Q4.$$.fragment),pOe=l(),hc=a("h2"),H4=a("a"),E6e=a("span"),F($9.$$.fragment),G4r=l(),C6e=a("span"),O4r=o("TFAutoModelForSeq2SeqLM"),uOe=l(),ar=a("div"),F(k9.$$.fragment),V4r=l(),pc=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=a("a"),z4r=o("from_pretrained()"),W4r=o(" class method or the "),JU=a("a"),Q4r=o("from_config()"),H4r=o(` class
method.`),U4r=l(),S9=a("p"),J4r=o("This class cannot be instantiated directly using "),w6e=a("code"),Y4r=o("__init__()"),K4r=o(" (throws an error)."),Z4r=l(),Bt=a("div"),F(R9.$$.fragment),eEr=l(),A6e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rEr=l(),uc=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),sEr=o("from_pretrained()"),lEr=o(" to load the model weights."),iEr=l(),F(U4.$$.fragment),dEr=l(),Sr=a("div"),F(P9.$$.fragment),cEr=l(),y6e=a("p"),fEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mEr=l(),cn=a("p"),gEr=o("The model class to instantiate is selected based on the "),x6e=a("code"),hEr=o("model_type"),pEr=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),uEr=o("pretrained_model_name_or_path"),_Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(":"),FEr=l(),ye=a("ul"),J4=a("li"),S6e=a("strong"),TEr=o("bart"),MEr=o(" \u2014 "),KU=a("a"),EEr=o("TFBartForConditionalGeneration"),CEr=o(" (BART model)"),wEr=l(),Y4=a("li"),R6e=a("strong"),AEr=o("blenderbot"),LEr=o(" \u2014 "),ZU=a("a"),yEr=o("TFBlenderbotForConditionalGeneration"),xEr=o(" (Blenderbot model)"),$Er=l(),K4=a("li"),P6e=a("strong"),kEr=o("blenderbot-small"),SEr=o(" \u2014 "),eJ=a("a"),REr=o("TFBlenderbotSmallForConditionalGeneration"),PEr=o(" (BlenderbotSmall model)"),BEr=l(),Z4=a("li"),B6e=a("strong"),IEr=o("encoder-decoder"),NEr=o(" \u2014 "),oJ=a("a"),qEr=o("TFEncoderDecoderModel"),jEr=o(" (Encoder decoder model)"),DEr=l(),eE=a("li"),I6e=a("strong"),GEr=o("led"),OEr=o(" \u2014 "),rJ=a("a"),VEr=o("TFLEDForConditionalGeneration"),XEr=o(" (LED model)"),zEr=l(),oE=a("li"),N6e=a("strong"),WEr=o("marian"),QEr=o(" \u2014 "),tJ=a("a"),HEr=o("TFMarianMTModel"),UEr=o(" (Marian model)"),JEr=l(),rE=a("li"),q6e=a("strong"),YEr=o("mbart"),KEr=o(" \u2014 "),aJ=a("a"),ZEr=o("TFMBartForConditionalGeneration"),eCr=o(" (mBART model)"),oCr=l(),tE=a("li"),j6e=a("strong"),rCr=o("mt5"),tCr=o(" \u2014 "),nJ=a("a"),aCr=o("TFMT5ForConditionalGeneration"),nCr=o(" (MT5 model)"),sCr=l(),aE=a("li"),D6e=a("strong"),lCr=o("pegasus"),iCr=o(" \u2014 "),sJ=a("a"),dCr=o("TFPegasusForConditionalGeneration"),cCr=o(" (Pegasus model)"),fCr=l(),nE=a("li"),G6e=a("strong"),mCr=o("t5"),gCr=o(" \u2014 "),lJ=a("a"),hCr=o("TFT5ForConditionalGeneration"),pCr=o(" (T5 model)"),uCr=l(),F(sE.$$.fragment),_Oe=l(),_c=a("h2"),lE=a("a"),O6e=a("span"),F(B9.$$.fragment),_Cr=l(),V6e=a("span"),bCr=o("TFAutoModelForSequenceClassification"),bOe=l(),nr=a("div"),F(I9.$$.fragment),vCr=l(),bc=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=a("a"),TCr=o("from_pretrained()"),MCr=o(" class method or the "),dJ=a("a"),ECr=o("from_config()"),CCr=o(` class
method.`),wCr=l(),N9=a("p"),ACr=o("This class cannot be instantiated directly using "),X6e=a("code"),LCr=o("__init__()"),yCr=o(" (throws an error)."),xCr=l(),It=a("div"),F(q9.$$.fragment),$Cr=l(),z6e=a("p"),kCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SCr=l(),vc=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),PCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),ICr=o("from_pretrained()"),NCr=o(" to load the model weights."),qCr=l(),F(iE.$$.fragment),jCr=l(),Rr=a("div"),F(j9.$$.fragment),DCr=l(),Q6e=a("p"),GCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OCr=l(),fn=a("p"),VCr=o("The model class to instantiate is selected based on the "),H6e=a("code"),XCr=o("model_type"),zCr=o(` property of the config object (either
passed as an argument or loaded from `),U6e=a("code"),WCr=o("pretrained_model_name_or_path"),QCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(":"),JCr=l(),te=a("ul"),dE=a("li"),Y6e=a("strong"),YCr=o("albert"),KCr=o(" \u2014 "),fJ=a("a"),ZCr=o("TFAlbertForSequenceClassification"),e5r=o(" (ALBERT model)"),o5r=l(),cE=a("li"),K6e=a("strong"),r5r=o("bert"),t5r=o(" \u2014 "),mJ=a("a"),a5r=o("TFBertForSequenceClassification"),n5r=o(" (BERT model)"),s5r=l(),fE=a("li"),Z6e=a("strong"),l5r=o("camembert"),i5r=o(" \u2014 "),gJ=a("a"),d5r=o("TFCamembertForSequenceClassification"),c5r=o(" (CamemBERT model)"),f5r=l(),mE=a("li"),eTe=a("strong"),m5r=o("convbert"),g5r=o(" \u2014 "),hJ=a("a"),h5r=o("TFConvBertForSequenceClassification"),p5r=o(" (ConvBERT model)"),u5r=l(),gE=a("li"),oTe=a("strong"),_5r=o("ctrl"),b5r=o(" \u2014 "),pJ=a("a"),v5r=o("TFCTRLForSequenceClassification"),F5r=o(" (CTRL model)"),T5r=l(),hE=a("li"),rTe=a("strong"),M5r=o("deberta"),E5r=o(" \u2014 "),uJ=a("a"),C5r=o("TFDebertaForSequenceClassification"),w5r=o(" (DeBERTa model)"),A5r=l(),pE=a("li"),tTe=a("strong"),L5r=o("deberta-v2"),y5r=o(" \u2014 "),_J=a("a"),x5r=o("TFDebertaV2ForSequenceClassification"),$5r=o(" (DeBERTa-v2 model)"),k5r=l(),uE=a("li"),aTe=a("strong"),S5r=o("distilbert"),R5r=o(" \u2014 "),bJ=a("a"),P5r=o("TFDistilBertForSequenceClassification"),B5r=o(" (DistilBERT model)"),I5r=l(),_E=a("li"),nTe=a("strong"),N5r=o("electra"),q5r=o(" \u2014 "),vJ=a("a"),j5r=o("TFElectraForSequenceClassification"),D5r=o(" (ELECTRA model)"),G5r=l(),bE=a("li"),sTe=a("strong"),O5r=o("flaubert"),V5r=o(" \u2014 "),FJ=a("a"),X5r=o("TFFlaubertForSequenceClassification"),z5r=o(" (FlauBERT model)"),W5r=l(),vE=a("li"),lTe=a("strong"),Q5r=o("funnel"),H5r=o(" \u2014 "),TJ=a("a"),U5r=o("TFFunnelForSequenceClassification"),J5r=o(" (Funnel Transformer model)"),Y5r=l(),FE=a("li"),iTe=a("strong"),K5r=o("gpt2"),Z5r=o(" \u2014 "),MJ=a("a"),e3r=o("TFGPT2ForSequenceClassification"),o3r=o(" (OpenAI GPT-2 model)"),r3r=l(),TE=a("li"),dTe=a("strong"),t3r=o("gptj"),a3r=o(" \u2014 "),EJ=a("a"),n3r=o("TFGPTJForSequenceClassification"),s3r=o(" (GPT-J model)"),l3r=l(),ME=a("li"),cTe=a("strong"),i3r=o("layoutlm"),d3r=o(" \u2014 "),CJ=a("a"),c3r=o("TFLayoutLMForSequenceClassification"),f3r=o(" (LayoutLM model)"),m3r=l(),EE=a("li"),fTe=a("strong"),g3r=o("longformer"),h3r=o(" \u2014 "),wJ=a("a"),p3r=o("TFLongformerForSequenceClassification"),u3r=o(" (Longformer model)"),_3r=l(),CE=a("li"),mTe=a("strong"),b3r=o("mobilebert"),v3r=o(" \u2014 "),AJ=a("a"),F3r=o("TFMobileBertForSequenceClassification"),T3r=o(" (MobileBERT model)"),M3r=l(),wE=a("li"),gTe=a("strong"),E3r=o("mpnet"),C3r=o(" \u2014 "),LJ=a("a"),w3r=o("TFMPNetForSequenceClassification"),A3r=o(" (MPNet model)"),L3r=l(),AE=a("li"),hTe=a("strong"),y3r=o("openai-gpt"),x3r=o(" \u2014 "),yJ=a("a"),$3r=o("TFOpenAIGPTForSequenceClassification"),k3r=o(" (OpenAI GPT model)"),S3r=l(),LE=a("li"),pTe=a("strong"),R3r=o("rembert"),P3r=o(" \u2014 "),xJ=a("a"),B3r=o("TFRemBertForSequenceClassification"),I3r=o(" (RemBERT model)"),N3r=l(),yE=a("li"),uTe=a("strong"),q3r=o("roberta"),j3r=o(" \u2014 "),$J=a("a"),D3r=o("TFRobertaForSequenceClassification"),G3r=o(" (RoBERTa model)"),O3r=l(),xE=a("li"),_Te=a("strong"),V3r=o("roformer"),X3r=o(" \u2014 "),kJ=a("a"),z3r=o("TFRoFormerForSequenceClassification"),W3r=o(" (RoFormer model)"),Q3r=l(),$E=a("li"),bTe=a("strong"),H3r=o("tapas"),U3r=o(" \u2014 "),SJ=a("a"),J3r=o("TFTapasForSequenceClassification"),Y3r=o(" (TAPAS model)"),K3r=l(),kE=a("li"),vTe=a("strong"),Z3r=o("transfo-xl"),e0r=o(" \u2014 "),RJ=a("a"),o0r=o("TFTransfoXLForSequenceClassification"),r0r=o(" (Transformer-XL model)"),t0r=l(),SE=a("li"),FTe=a("strong"),a0r=o("xlm"),n0r=o(" \u2014 "),PJ=a("a"),s0r=o("TFXLMForSequenceClassification"),l0r=o(" (XLM model)"),i0r=l(),RE=a("li"),TTe=a("strong"),d0r=o("xlm-roberta"),c0r=o(" \u2014 "),BJ=a("a"),f0r=o("TFXLMRobertaForSequenceClassification"),m0r=o(" (XLM-RoBERTa model)"),g0r=l(),PE=a("li"),MTe=a("strong"),h0r=o("xlnet"),p0r=o(" \u2014 "),IJ=a("a"),u0r=o("TFXLNetForSequenceClassification"),_0r=o(" (XLNet model)"),b0r=l(),F(BE.$$.fragment),vOe=l(),Fc=a("h2"),IE=a("a"),ETe=a("span"),F(D9.$$.fragment),v0r=l(),CTe=a("span"),F0r=o("TFAutoModelForMultipleChoice"),FOe=l(),sr=a("div"),F(G9.$$.fragment),T0r=l(),Tc=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),qJ=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),L0r=l(),O9=a("p"),y0r=o("This class cannot be instantiated directly using "),wTe=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),Nt=a("div"),F(V9.$$.fragment),S0r=l(),ATe=a("p"),R0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P0r=l(),Mc=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),I0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),q0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(NE.$$.fragment),G0r=l(),Pr=a("div"),F(X9.$$.fragment),O0r=l(),yTe=a("p"),V0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X0r=l(),mn=a("p"),z0r=o("The model class to instantiate is selected based on the "),xTe=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),ue=a("ul"),qE=a("li"),STe=a("strong"),Z0r=o("albert"),ewr=o(" \u2014 "),DJ=a("a"),owr=o("TFAlbertForMultipleChoice"),rwr=o(" (ALBERT model)"),twr=l(),jE=a("li"),RTe=a("strong"),awr=o("bert"),nwr=o(" \u2014 "),GJ=a("a"),swr=o("TFBertForMultipleChoice"),lwr=o(" (BERT model)"),iwr=l(),DE=a("li"),PTe=a("strong"),dwr=o("camembert"),cwr=o(" \u2014 "),OJ=a("a"),fwr=o("TFCamembertForMultipleChoice"),mwr=o(" (CamemBERT model)"),gwr=l(),GE=a("li"),BTe=a("strong"),hwr=o("convbert"),pwr=o(" \u2014 "),VJ=a("a"),uwr=o("TFConvBertForMultipleChoice"),_wr=o(" (ConvBERT model)"),bwr=l(),OE=a("li"),ITe=a("strong"),vwr=o("distilbert"),Fwr=o(" \u2014 "),XJ=a("a"),Twr=o("TFDistilBertForMultipleChoice"),Mwr=o(" (DistilBERT model)"),Ewr=l(),VE=a("li"),NTe=a("strong"),Cwr=o("electra"),wwr=o(" \u2014 "),zJ=a("a"),Awr=o("TFElectraForMultipleChoice"),Lwr=o(" (ELECTRA model)"),ywr=l(),XE=a("li"),qTe=a("strong"),xwr=o("flaubert"),$wr=o(" \u2014 "),WJ=a("a"),kwr=o("TFFlaubertForMultipleChoice"),Swr=o(" (FlauBERT model)"),Rwr=l(),zE=a("li"),jTe=a("strong"),Pwr=o("funnel"),Bwr=o(" \u2014 "),QJ=a("a"),Iwr=o("TFFunnelForMultipleChoice"),Nwr=o(" (Funnel Transformer model)"),qwr=l(),WE=a("li"),DTe=a("strong"),jwr=o("longformer"),Dwr=o(" \u2014 "),HJ=a("a"),Gwr=o("TFLongformerForMultipleChoice"),Owr=o(" (Longformer model)"),Vwr=l(),QE=a("li"),GTe=a("strong"),Xwr=o("mobilebert"),zwr=o(" \u2014 "),UJ=a("a"),Wwr=o("TFMobileBertForMultipleChoice"),Qwr=o(" (MobileBERT model)"),Hwr=l(),HE=a("li"),OTe=a("strong"),Uwr=o("mpnet"),Jwr=o(" \u2014 "),JJ=a("a"),Ywr=o("TFMPNetForMultipleChoice"),Kwr=o(" (MPNet model)"),Zwr=l(),UE=a("li"),VTe=a("strong"),eAr=o("rembert"),oAr=o(" \u2014 "),YJ=a("a"),rAr=o("TFRemBertForMultipleChoice"),tAr=o(" (RemBERT model)"),aAr=l(),JE=a("li"),XTe=a("strong"),nAr=o("roberta"),sAr=o(" \u2014 "),KJ=a("a"),lAr=o("TFRobertaForMultipleChoice"),iAr=o(" (RoBERTa model)"),dAr=l(),YE=a("li"),zTe=a("strong"),cAr=o("roformer"),fAr=o(" \u2014 "),ZJ=a("a"),mAr=o("TFRoFormerForMultipleChoice"),gAr=o(" (RoFormer model)"),hAr=l(),KE=a("li"),WTe=a("strong"),pAr=o("xlm"),uAr=o(" \u2014 "),eY=a("a"),_Ar=o("TFXLMForMultipleChoice"),bAr=o(" (XLM model)"),vAr=l(),ZE=a("li"),QTe=a("strong"),FAr=o("xlm-roberta"),TAr=o(" \u2014 "),oY=a("a"),MAr=o("TFXLMRobertaForMultipleChoice"),EAr=o(" (XLM-RoBERTa model)"),CAr=l(),eC=a("li"),HTe=a("strong"),wAr=o("xlnet"),AAr=o(" \u2014 "),rY=a("a"),LAr=o("TFXLNetForMultipleChoice"),yAr=o(" (XLNet model)"),xAr=l(),F(oC.$$.fragment),TOe=l(),Ec=a("h2"),rC=a("a"),UTe=a("span"),F(z9.$$.fragment),$Ar=l(),JTe=a("span"),kAr=o("TFAutoModelForNextSentencePrediction"),MOe=l(),lr=a("div"),F(W9.$$.fragment),SAr=l(),Cc=a("p"),RAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=a("a"),PAr=o("from_pretrained()"),BAr=o(" class method or the "),aY=a("a"),IAr=o("from_config()"),NAr=o(` class
method.`),qAr=l(),Q9=a("p"),jAr=o("This class cannot be instantiated directly using "),YTe=a("code"),DAr=o("__init__()"),GAr=o(" (throws an error)."),OAr=l(),qt=a("div"),F(H9.$$.fragment),VAr=l(),KTe=a("p"),XAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zAr=l(),wc=a("p"),WAr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),QAr=o("not"),HAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),UAr=o("from_pretrained()"),JAr=o(" to load the model weights."),YAr=l(),F(tC.$$.fragment),KAr=l(),Br=a("div"),F(U9.$$.fragment),ZAr=l(),eMe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oLr=l(),gn=a("p"),rLr=o("The model class to instantiate is selected based on the "),oMe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),J9=a("ul"),aC=a("li"),aMe=a("strong"),cLr=o("bert"),fLr=o(" \u2014 "),sY=a("a"),mLr=o("TFBertForNextSentencePrediction"),gLr=o(" (BERT model)"),hLr=l(),nC=a("li"),nMe=a("strong"),pLr=o("mobilebert"),uLr=o(" \u2014 "),lY=a("a"),_Lr=o("TFMobileBertForNextSentencePrediction"),bLr=o(" (MobileBERT model)"),vLr=l(),F(sC.$$.fragment),EOe=l(),Ac=a("h2"),lC=a("a"),sMe=a("span"),F(Y9.$$.fragment),FLr=l(),lMe=a("span"),TLr=o("TFAutoModelForTableQuestionAnswering"),COe=l(),ir=a("div"),F(K9.$$.fragment),MLr=l(),Lc=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),dY=a("a"),ALr=o("from_config()"),LLr=o(` class
method.`),yLr=l(),Z9=a("p"),xLr=o("This class cannot be instantiated directly using "),iMe=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),jt=a("div"),F(ex.$$.fragment),RLr=l(),dMe=a("p"),PLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BLr=l(),yc=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),NLr=o("not"),qLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(iC.$$.fragment),OLr=l(),Ir=a("div"),F(ox.$$.fragment),VLr=l(),fMe=a("p"),XLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zLr=l(),hn=a("p"),WLr=o("The model class to instantiate is selected based on the "),mMe=a("code"),QLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),pMe=a("ul"),dC=a("li"),uMe=a("strong"),eyr=o("tapas"),oyr=o(" \u2014 "),fY=a("a"),ryr=o("TFTapasForQuestionAnswering"),tyr=o(" (TAPAS model)"),ayr=l(),F(cC.$$.fragment),wOe=l(),xc=a("h2"),fC=a("a"),_Me=a("span"),F(rx.$$.fragment),nyr=l(),bMe=a("span"),syr=o("TFAutoModelForTokenClassification"),AOe=l(),dr=a("div"),F(tx.$$.fragment),lyr=l(),$c=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),gY=a("a"),fyr=o("from_config()"),myr=o(` class
method.`),gyr=l(),ax=a("p"),hyr=o("This class cannot be instantiated directly using "),vMe=a("code"),pyr=o("__init__()"),uyr=o(" (throws an error)."),_yr=l(),Dt=a("div"),F(nx.$$.fragment),byr=l(),FMe=a("p"),vyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fyr=l(),kc=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(mC.$$.fragment),Lyr=l(),Nr=a("div"),F(sx.$$.fragment),yyr=l(),MMe=a("p"),xyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$yr=l(),pn=a("p"),kyr=o("The model class to instantiate is selected based on the "),EMe=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),de=a("ul"),gC=a("li"),AMe=a("strong"),jyr=o("albert"),Dyr=o(" \u2014 "),pY=a("a"),Gyr=o("TFAlbertForTokenClassification"),Oyr=o(" (ALBERT model)"),Vyr=l(),hC=a("li"),LMe=a("strong"),Xyr=o("bert"),zyr=o(" \u2014 "),uY=a("a"),Wyr=o("TFBertForTokenClassification"),Qyr=o(" (BERT model)"),Hyr=l(),pC=a("li"),yMe=a("strong"),Uyr=o("camembert"),Jyr=o(" \u2014 "),_Y=a("a"),Yyr=o("TFCamembertForTokenClassification"),Kyr=o(" (CamemBERT model)"),Zyr=l(),uC=a("li"),xMe=a("strong"),e8r=o("convbert"),o8r=o(" \u2014 "),bY=a("a"),r8r=o("TFConvBertForTokenClassification"),t8r=o(" (ConvBERT model)"),a8r=l(),_C=a("li"),$Me=a("strong"),n8r=o("deberta"),s8r=o(" \u2014 "),vY=a("a"),l8r=o("TFDebertaForTokenClassification"),i8r=o(" (DeBERTa model)"),d8r=l(),bC=a("li"),kMe=a("strong"),c8r=o("deberta-v2"),f8r=o(" \u2014 "),FY=a("a"),m8r=o("TFDebertaV2ForTokenClassification"),g8r=o(" (DeBERTa-v2 model)"),h8r=l(),vC=a("li"),SMe=a("strong"),p8r=o("distilbert"),u8r=o(" \u2014 "),TY=a("a"),_8r=o("TFDistilBertForTokenClassification"),b8r=o(" (DistilBERT model)"),v8r=l(),FC=a("li"),RMe=a("strong"),F8r=o("electra"),T8r=o(" \u2014 "),MY=a("a"),M8r=o("TFElectraForTokenClassification"),E8r=o(" (ELECTRA model)"),C8r=l(),TC=a("li"),PMe=a("strong"),w8r=o("flaubert"),A8r=o(" \u2014 "),EY=a("a"),L8r=o("TFFlaubertForTokenClassification"),y8r=o(" (FlauBERT model)"),x8r=l(),MC=a("li"),BMe=a("strong"),$8r=o("funnel"),k8r=o(" \u2014 "),CY=a("a"),S8r=o("TFFunnelForTokenClassification"),R8r=o(" (Funnel Transformer model)"),P8r=l(),EC=a("li"),IMe=a("strong"),B8r=o("layoutlm"),I8r=o(" \u2014 "),wY=a("a"),N8r=o("TFLayoutLMForTokenClassification"),q8r=o(" (LayoutLM model)"),j8r=l(),CC=a("li"),NMe=a("strong"),D8r=o("longformer"),G8r=o(" \u2014 "),AY=a("a"),O8r=o("TFLongformerForTokenClassification"),V8r=o(" (Longformer model)"),X8r=l(),wC=a("li"),qMe=a("strong"),z8r=o("mobilebert"),W8r=o(" \u2014 "),LY=a("a"),Q8r=o("TFMobileBertForTokenClassification"),H8r=o(" (MobileBERT model)"),U8r=l(),AC=a("li"),jMe=a("strong"),J8r=o("mpnet"),Y8r=o(" \u2014 "),yY=a("a"),K8r=o("TFMPNetForTokenClassification"),Z8r=o(" (MPNet model)"),e9r=l(),LC=a("li"),DMe=a("strong"),o9r=o("rembert"),r9r=o(" \u2014 "),xY=a("a"),t9r=o("TFRemBertForTokenClassification"),a9r=o(" (RemBERT model)"),n9r=l(),yC=a("li"),GMe=a("strong"),s9r=o("roberta"),l9r=o(" \u2014 "),$Y=a("a"),i9r=o("TFRobertaForTokenClassification"),d9r=o(" (RoBERTa model)"),c9r=l(),xC=a("li"),OMe=a("strong"),f9r=o("roformer"),m9r=o(" \u2014 "),kY=a("a"),g9r=o("TFRoFormerForTokenClassification"),h9r=o(" (RoFormer model)"),p9r=l(),$C=a("li"),VMe=a("strong"),u9r=o("xlm"),_9r=o(" \u2014 "),SY=a("a"),b9r=o("TFXLMForTokenClassification"),v9r=o(" (XLM model)"),F9r=l(),kC=a("li"),XMe=a("strong"),T9r=o("xlm-roberta"),M9r=o(" \u2014 "),RY=a("a"),E9r=o("TFXLMRobertaForTokenClassification"),C9r=o(" (XLM-RoBERTa model)"),w9r=l(),SC=a("li"),zMe=a("strong"),A9r=o("xlnet"),L9r=o(" \u2014 "),PY=a("a"),y9r=o("TFXLNetForTokenClassification"),x9r=o(" (XLNet model)"),$9r=l(),F(RC.$$.fragment),LOe=l(),Sc=a("h2"),PC=a("a"),WMe=a("span"),F(lx.$$.fragment),k9r=l(),QMe=a("span"),S9r=o("TFAutoModelForQuestionAnswering"),yOe=l(),cr=a("div"),F(ix.$$.fragment),R9r=l(),Rc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=a("a"),B9r=o("from_pretrained()"),I9r=o(" class method or the "),IY=a("a"),N9r=o("from_config()"),q9r=o(` class
method.`),j9r=l(),dx=a("p"),D9r=o("This class cannot be instantiated directly using "),HMe=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Gt=a("div"),F(cx.$$.fragment),X9r=l(),UMe=a("p"),z9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W9r=l(),Pc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),H9r=o("not"),U9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(BC.$$.fragment),Z9r=l(),qr=a("div"),F(fx.$$.fragment),exr=l(),YMe=a("p"),oxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rxr=l(),un=a("p"),txr=o("The model class to instantiate is selected based on the "),KMe=a("code"),axr=o("model_type"),nxr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(":"),cxr=l(),ce=a("ul"),IC=a("li"),o4e=a("strong"),fxr=o("albert"),mxr=o(" \u2014 "),qY=a("a"),gxr=o("TFAlbertForQuestionAnswering"),hxr=o(" (ALBERT model)"),pxr=l(),NC=a("li"),r4e=a("strong"),uxr=o("bert"),_xr=o(" \u2014 "),jY=a("a"),bxr=o("TFBertForQuestionAnswering"),vxr=o(" (BERT model)"),Fxr=l(),qC=a("li"),t4e=a("strong"),Txr=o("camembert"),Mxr=o(" \u2014 "),DY=a("a"),Exr=o("TFCamembertForQuestionAnswering"),Cxr=o(" (CamemBERT model)"),wxr=l(),jC=a("li"),a4e=a("strong"),Axr=o("convbert"),Lxr=o(" \u2014 "),GY=a("a"),yxr=o("TFConvBertForQuestionAnswering"),xxr=o(" (ConvBERT model)"),$xr=l(),DC=a("li"),n4e=a("strong"),kxr=o("deberta"),Sxr=o(" \u2014 "),OY=a("a"),Rxr=o("TFDebertaForQuestionAnswering"),Pxr=o(" (DeBERTa model)"),Bxr=l(),GC=a("li"),s4e=a("strong"),Ixr=o("deberta-v2"),Nxr=o(" \u2014 "),VY=a("a"),qxr=o("TFDebertaV2ForQuestionAnswering"),jxr=o(" (DeBERTa-v2 model)"),Dxr=l(),OC=a("li"),l4e=a("strong"),Gxr=o("distilbert"),Oxr=o(" \u2014 "),XY=a("a"),Vxr=o("TFDistilBertForQuestionAnswering"),Xxr=o(" (DistilBERT model)"),zxr=l(),VC=a("li"),i4e=a("strong"),Wxr=o("electra"),Qxr=o(" \u2014 "),zY=a("a"),Hxr=o("TFElectraForQuestionAnswering"),Uxr=o(" (ELECTRA model)"),Jxr=l(),XC=a("li"),d4e=a("strong"),Yxr=o("flaubert"),Kxr=o(" \u2014 "),WY=a("a"),Zxr=o("TFFlaubertForQuestionAnsweringSimple"),e$r=o(" (FlauBERT model)"),o$r=l(),zC=a("li"),c4e=a("strong"),r$r=o("funnel"),t$r=o(" \u2014 "),QY=a("a"),a$r=o("TFFunnelForQuestionAnswering"),n$r=o(" (Funnel Transformer model)"),s$r=l(),WC=a("li"),f4e=a("strong"),l$r=o("gptj"),i$r=o(" \u2014 "),HY=a("a"),d$r=o("TFGPTJForQuestionAnswering"),c$r=o(" (GPT-J model)"),f$r=l(),QC=a("li"),m4e=a("strong"),m$r=o("longformer"),g$r=o(" \u2014 "),UY=a("a"),h$r=o("TFLongformerForQuestionAnswering"),p$r=o(" (Longformer model)"),u$r=l(),HC=a("li"),g4e=a("strong"),_$r=o("mobilebert"),b$r=o(" \u2014 "),JY=a("a"),v$r=o("TFMobileBertForQuestionAnswering"),F$r=o(" (MobileBERT model)"),T$r=l(),UC=a("li"),h4e=a("strong"),M$r=o("mpnet"),E$r=o(" \u2014 "),YY=a("a"),C$r=o("TFMPNetForQuestionAnswering"),w$r=o(" (MPNet model)"),A$r=l(),JC=a("li"),p4e=a("strong"),L$r=o("rembert"),y$r=o(" \u2014 "),KY=a("a"),x$r=o("TFRemBertForQuestionAnswering"),$$r=o(" (RemBERT model)"),k$r=l(),YC=a("li"),u4e=a("strong"),S$r=o("roberta"),R$r=o(" \u2014 "),ZY=a("a"),P$r=o("TFRobertaForQuestionAnswering"),B$r=o(" (RoBERTa model)"),I$r=l(),KC=a("li"),_4e=a("strong"),N$r=o("roformer"),q$r=o(" \u2014 "),eK=a("a"),j$r=o("TFRoFormerForQuestionAnswering"),D$r=o(" (RoFormer model)"),G$r=l(),ZC=a("li"),b4e=a("strong"),O$r=o("xlm"),V$r=o(" \u2014 "),oK=a("a"),X$r=o("TFXLMForQuestionAnsweringSimple"),z$r=o(" (XLM model)"),W$r=l(),e5=a("li"),v4e=a("strong"),Q$r=o("xlm-roberta"),H$r=o(" \u2014 "),rK=a("a"),U$r=o("TFXLMRobertaForQuestionAnswering"),J$r=o(" (XLM-RoBERTa model)"),Y$r=l(),o5=a("li"),F4e=a("strong"),K$r=o("xlnet"),Z$r=o(" \u2014 "),tK=a("a"),ekr=o("TFXLNetForQuestionAnsweringSimple"),okr=o(" (XLNet model)"),rkr=l(),F(r5.$$.fragment),xOe=l(),Bc=a("h2"),t5=a("a"),T4e=a("span"),F(mx.$$.fragment),tkr=l(),M4e=a("span"),akr=o("TFAutoModelForVision2Seq"),$Oe=l(),fr=a("div"),F(gx.$$.fragment),nkr=l(),Ic=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),nK=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),hx=a("p"),mkr=o("This class cannot be instantiated directly using "),E4e=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Ot=a("div"),F(px.$$.fragment),ukr=l(),C4e=a("p"),_kr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bkr=l(),Nc=a("p"),vkr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),Fkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),F(a5.$$.fragment),wkr=l(),jr=a("div"),F(ux.$$.fragment),Akr=l(),A4e=a("p"),Lkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ykr=l(),_n=a("p"),xkr=o("The model class to instantiate is selected based on the "),L4e=a("code"),$kr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(":"),Ikr=l(),$4e=a("ul"),n5=a("li"),k4e=a("strong"),Nkr=o("vision-encoder-decoder"),qkr=o(" \u2014 "),lK=a("a"),jkr=o("TFVisionEncoderDecoderModel"),Dkr=o(" (Vision Encoder decoder model)"),Gkr=l(),F(s5.$$.fragment),kOe=l(),qc=a("h2"),l5=a("a"),S4e=a("span"),F(_x.$$.fragment),Okr=l(),R4e=a("span"),Vkr=o("TFAutoModelForSpeechSeq2Seq"),SOe=l(),mr=a("div"),F(bx.$$.fragment),Xkr=l(),jc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=a("a"),Wkr=o("from_pretrained()"),Qkr=o(" class method or the "),dK=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),vx=a("p"),Ykr=o("This class cannot be instantiated directly using "),P4e=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Vt=a("div"),F(Fx.$$.fragment),oSr=l(),B4e=a("p"),rSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tSr=l(),Dc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(i5.$$.fragment),cSr=l(),Dr=a("div"),F(Tx.$$.fragment),fSr=l(),N4e=a("p"),mSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gSr=l(),bn=a("p"),hSr=o("The model class to instantiate is selected based on the "),q4e=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),G4e=a("ul"),d5=a("li"),O4e=a("strong"),MSr=o("speech_to_text"),ESr=o(" \u2014 "),fK=a("a"),CSr=o("TFSpeech2TextForConditionalGeneration"),wSr=o(" (Speech2Text model)"),ASr=l(),F(c5.$$.fragment),ROe=l(),Gc=a("h2"),f5=a("a"),V4e=a("span"),F(Mx.$$.fragment),LSr=l(),X4e=a("span"),ySr=o("FlaxAutoModel"),POe=l(),gr=a("div"),F(Ex.$$.fragment),xSr=l(),Oc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),gK=a("a"),RSr=o("from_config()"),PSr=o(` class
method.`),BSr=l(),Cx=a("p"),ISr=o("This class cannot be instantiated directly using "),z4e=a("code"),NSr=o("__init__()"),qSr=o(" (throws an error)."),jSr=l(),Xt=a("div"),F(wx.$$.fragment),DSr=l(),W4e=a("p"),GSr=o("Instantiates one of the base model classes of the library from a configuration."),OSr=l(),Vc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),WSr=o("from_pretrained()"),QSr=o(" to load the model weights."),HSr=l(),F(m5.$$.fragment),USr=l(),Gr=a("div"),F(Ax.$$.fragment),JSr=l(),H4e=a("p"),YSr=o("Instantiate one of the base model classes of the library from a pretrained model."),KSr=l(),vn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),U4e=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),oe=a("ul"),g5=a("li"),K4e=a("strong"),lRr=o("albert"),iRr=o(" \u2014 "),pK=a("a"),dRr=o("FlaxAlbertModel"),cRr=o(" (ALBERT model)"),fRr=l(),h5=a("li"),Z4e=a("strong"),mRr=o("bart"),gRr=o(" \u2014 "),uK=a("a"),hRr=o("FlaxBartModel"),pRr=o(" (BART model)"),uRr=l(),p5=a("li"),eEe=a("strong"),_Rr=o("beit"),bRr=o(" \u2014 "),_K=a("a"),vRr=o("FlaxBeitModel"),FRr=o(" (BEiT model)"),TRr=l(),u5=a("li"),oEe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),bK=a("a"),CRr=o("FlaxBertModel"),wRr=o(" (BERT model)"),ARr=l(),_5=a("li"),rEe=a("strong"),LRr=o("big_bird"),yRr=o(" \u2014 "),vK=a("a"),xRr=o("FlaxBigBirdModel"),$Rr=o(" (BigBird model)"),kRr=l(),b5=a("li"),tEe=a("strong"),SRr=o("blenderbot"),RRr=o(" \u2014 "),FK=a("a"),PRr=o("FlaxBlenderbotModel"),BRr=o(" (Blenderbot model)"),IRr=l(),v5=a("li"),aEe=a("strong"),NRr=o("blenderbot-small"),qRr=o(" \u2014 "),TK=a("a"),jRr=o("FlaxBlenderbotSmallModel"),DRr=o(" (BlenderbotSmall model)"),GRr=l(),F5=a("li"),nEe=a("strong"),ORr=o("clip"),VRr=o(" \u2014 "),MK=a("a"),XRr=o("FlaxCLIPModel"),zRr=o(" (CLIP model)"),WRr=l(),T5=a("li"),sEe=a("strong"),QRr=o("distilbert"),HRr=o(" \u2014 "),EK=a("a"),URr=o("FlaxDistilBertModel"),JRr=o(" (DistilBERT model)"),YRr=l(),M5=a("li"),lEe=a("strong"),KRr=o("electra"),ZRr=o(" \u2014 "),CK=a("a"),ePr=o("FlaxElectraModel"),oPr=o(" (ELECTRA model)"),rPr=l(),E5=a("li"),iEe=a("strong"),tPr=o("gpt2"),aPr=o(" \u2014 "),wK=a("a"),nPr=o("FlaxGPT2Model"),sPr=o(" (OpenAI GPT-2 model)"),lPr=l(),C5=a("li"),dEe=a("strong"),iPr=o("gpt_neo"),dPr=o(" \u2014 "),AK=a("a"),cPr=o("FlaxGPTNeoModel"),fPr=o(" (GPT Neo model)"),mPr=l(),w5=a("li"),cEe=a("strong"),gPr=o("gptj"),hPr=o(" \u2014 "),LK=a("a"),pPr=o("FlaxGPTJModel"),uPr=o(" (GPT-J model)"),_Pr=l(),A5=a("li"),fEe=a("strong"),bPr=o("longt5"),vPr=o(" \u2014 "),yK=a("a"),FPr=o("FlaxLongT5Model"),TPr=o(" (LongT5 model)"),MPr=l(),L5=a("li"),mEe=a("strong"),EPr=o("marian"),CPr=o(" \u2014 "),xK=a("a"),wPr=o("FlaxMarianModel"),APr=o(" (Marian model)"),LPr=l(),y5=a("li"),gEe=a("strong"),yPr=o("mbart"),xPr=o(" \u2014 "),$K=a("a"),$Pr=o("FlaxMBartModel"),kPr=o(" (mBART model)"),SPr=l(),x5=a("li"),hEe=a("strong"),RPr=o("mt5"),PPr=o(" \u2014 "),kK=a("a"),BPr=o("FlaxMT5Model"),IPr=o(" (MT5 model)"),NPr=l(),$5=a("li"),pEe=a("strong"),qPr=o("opt"),jPr=o(" \u2014 "),SK=a("a"),DPr=o("FlaxOPTModel"),GPr=o(" (OPT model)"),OPr=l(),k5=a("li"),uEe=a("strong"),VPr=o("pegasus"),XPr=o(" \u2014 "),RK=a("a"),zPr=o("FlaxPegasusModel"),WPr=o(" (Pegasus model)"),QPr=l(),S5=a("li"),_Ee=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),PK=a("a"),JPr=o("FlaxRobertaModel"),YPr=o(" (RoBERTa model)"),KPr=l(),R5=a("li"),bEe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),BK=a("a"),oBr=o("FlaxRoFormerModel"),rBr=o(" (RoFormer model)"),tBr=l(),P5=a("li"),vEe=a("strong"),aBr=o("t5"),nBr=o(" \u2014 "),IK=a("a"),sBr=o("FlaxT5Model"),lBr=o(" (T5 model)"),iBr=l(),B5=a("li"),FEe=a("strong"),dBr=o("vision-text-dual-encoder"),cBr=o(" \u2014 "),NK=a("a"),fBr=o("FlaxVisionTextDualEncoderModel"),mBr=o(" (VisionTextDualEncoder model)"),gBr=l(),I5=a("li"),TEe=a("strong"),hBr=o("vit"),pBr=o(" \u2014 "),qK=a("a"),uBr=o("FlaxViTModel"),_Br=o(" (ViT model)"),bBr=l(),N5=a("li"),MEe=a("strong"),vBr=o("wav2vec2"),FBr=o(" \u2014 "),jK=a("a"),TBr=o("FlaxWav2Vec2Model"),MBr=o(" (Wav2Vec2 model)"),EBr=l(),q5=a("li"),EEe=a("strong"),CBr=o("xglm"),wBr=o(" \u2014 "),DK=a("a"),ABr=o("FlaxXGLMModel"),LBr=o(" (XGLM model)"),yBr=l(),j5=a("li"),CEe=a("strong"),xBr=o("xlm-roberta"),$Br=o(" \u2014 "),GK=a("a"),kBr=o("FlaxXLMRobertaModel"),SBr=o(" (XLM-RoBERTa model)"),RBr=l(),F(D5.$$.fragment),BOe=l(),Xc=a("h2"),G5=a("a"),wEe=a("span"),F(Lx.$$.fragment),PBr=l(),AEe=a("span"),BBr=o("FlaxAutoModelForCausalLM"),IOe=l(),hr=a("div"),F(yx.$$.fragment),IBr=l(),zc=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=a("a"),qBr=o("from_pretrained()"),jBr=o(" class method or the "),VK=a("a"),DBr=o("from_config()"),GBr=o(` class
method.`),OBr=l(),xx=a("p"),VBr=o("This class cannot be instantiated directly using "),LEe=a("code"),XBr=o("__init__()"),zBr=o(" (throws an error)."),WBr=l(),zt=a("div"),F($x.$$.fragment),QBr=l(),yEe=a("p"),HBr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UBr=l(),Wc=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),ZBr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(O5.$$.fragment),rIr=l(),Or=a("div"),F(kx.$$.fragment),tIr=l(),$Ee=a("p"),aIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nIr=l(),Fn=a("p"),sIr=o("The model class to instantiate is selected based on the "),kEe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),xe=a("ul"),V5=a("li"),PEe=a("strong"),hIr=o("bart"),pIr=o(" \u2014 "),zK=a("a"),uIr=o("FlaxBartForCausalLM"),_Ir=o(" (BART model)"),bIr=l(),X5=a("li"),BEe=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),WK=a("a"),TIr=o("FlaxBertForCausalLM"),MIr=o(" (BERT model)"),EIr=l(),z5=a("li"),IEe=a("strong"),CIr=o("big_bird"),wIr=o(" \u2014 "),QK=a("a"),AIr=o("FlaxBigBirdForCausalLM"),LIr=o(" (BigBird model)"),yIr=l(),W5=a("li"),NEe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),HK=a("a"),kIr=o("FlaxElectraForCausalLM"),SIr=o(" (ELECTRA model)"),RIr=l(),Q5=a("li"),qEe=a("strong"),PIr=o("gpt2"),BIr=o(" \u2014 "),UK=a("a"),IIr=o("FlaxGPT2LMHeadModel"),NIr=o(" (OpenAI GPT-2 model)"),qIr=l(),H5=a("li"),jEe=a("strong"),jIr=o("gpt_neo"),DIr=o(" \u2014 "),JK=a("a"),GIr=o("FlaxGPTNeoForCausalLM"),OIr=o(" (GPT Neo model)"),VIr=l(),U5=a("li"),DEe=a("strong"),XIr=o("gptj"),zIr=o(" \u2014 "),YK=a("a"),WIr=o("FlaxGPTJForCausalLM"),QIr=o(" (GPT-J model)"),HIr=l(),J5=a("li"),GEe=a("strong"),UIr=o("opt"),JIr=o(" \u2014 "),KK=a("a"),YIr=o("FlaxOPTForCausalLM"),KIr=o(" (OPT model)"),ZIr=l(),Y5=a("li"),OEe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),ZK=a("a"),rNr=o("FlaxRobertaForCausalLM"),tNr=o(" (RoBERTa model)"),aNr=l(),K5=a("li"),VEe=a("strong"),nNr=o("xglm"),sNr=o(" \u2014 "),eZ=a("a"),lNr=o("FlaxXGLMForCausalLM"),iNr=o(" (XGLM model)"),dNr=l(),F(Z5.$$.fragment),NOe=l(),Qc=a("h2"),e3=a("a"),XEe=a("span"),F(Sx.$$.fragment),cNr=l(),zEe=a("span"),fNr=o("FlaxAutoModelForPreTraining"),qOe=l(),pr=a("div"),F(Rx.$$.fragment),mNr=l(),Hc=a("p"),gNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" class method or the "),rZ=a("a"),uNr=o("from_config()"),_Nr=o(` class
method.`),bNr=l(),Px=a("p"),vNr=o("This class cannot be instantiated directly using "),WEe=a("code"),FNr=o("__init__()"),TNr=o(" (throws an error)."),MNr=l(),Wt=a("div"),F(Bx.$$.fragment),ENr=l(),QEe=a("p"),CNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wNr=l(),Uc=a("p"),ANr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),LNr=o("not"),yNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),xNr=o("from_pretrained()"),$Nr=o(" to load the model weights."),kNr=l(),F(o3.$$.fragment),SNr=l(),Vr=a("div"),F(Ix.$$.fragment),RNr=l(),UEe=a("p"),PNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BNr=l(),Tn=a("p"),INr=o("The model class to instantiate is selected based on the "),JEe=a("code"),NNr=o("model_type"),qNr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),jNr=o("pretrained_model_name_or_path"),DNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),GNr=o("pretrained_model_name_or_path"),ONr=o(":"),VNr=l(),Ee=a("ul"),r3=a("li"),ZEe=a("strong"),XNr=o("albert"),zNr=o(" \u2014 "),aZ=a("a"),WNr=o("FlaxAlbertForPreTraining"),QNr=o(" (ALBERT model)"),HNr=l(),t3=a("li"),eCe=a("strong"),UNr=o("bart"),JNr=o(" \u2014 "),nZ=a("a"),YNr=o("FlaxBartForConditionalGeneration"),KNr=o(" (BART model)"),ZNr=l(),a3=a("li"),oCe=a("strong"),eqr=o("bert"),oqr=o(" \u2014 "),sZ=a("a"),rqr=o("FlaxBertForPreTraining"),tqr=o(" (BERT model)"),aqr=l(),n3=a("li"),rCe=a("strong"),nqr=o("big_bird"),sqr=o(" \u2014 "),lZ=a("a"),lqr=o("FlaxBigBirdForPreTraining"),iqr=o(" (BigBird model)"),dqr=l(),s3=a("li"),tCe=a("strong"),cqr=o("electra"),fqr=o(" \u2014 "),iZ=a("a"),mqr=o("FlaxElectraForPreTraining"),gqr=o(" (ELECTRA model)"),hqr=l(),l3=a("li"),aCe=a("strong"),pqr=o("longt5"),uqr=o(" \u2014 "),dZ=a("a"),_qr=o("FlaxLongT5ForConditionalGeneration"),bqr=o(" (LongT5 model)"),vqr=l(),i3=a("li"),nCe=a("strong"),Fqr=o("mbart"),Tqr=o(" \u2014 "),cZ=a("a"),Mqr=o("FlaxMBartForConditionalGeneration"),Eqr=o(" (mBART model)"),Cqr=l(),d3=a("li"),sCe=a("strong"),wqr=o("mt5"),Aqr=o(" \u2014 "),fZ=a("a"),Lqr=o("FlaxMT5ForConditionalGeneration"),yqr=o(" (MT5 model)"),xqr=l(),c3=a("li"),lCe=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),mZ=a("a"),Sqr=o("FlaxRobertaForMaskedLM"),Rqr=o(" (RoBERTa model)"),Pqr=l(),f3=a("li"),iCe=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),gZ=a("a"),Nqr=o("FlaxRoFormerForMaskedLM"),qqr=o(" (RoFormer model)"),jqr=l(),m3=a("li"),dCe=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),hZ=a("a"),Oqr=o("FlaxT5ForConditionalGeneration"),Vqr=o(" (T5 model)"),Xqr=l(),g3=a("li"),cCe=a("strong"),zqr=o("wav2vec2"),Wqr=o(" \u2014 "),pZ=a("a"),Qqr=o("FlaxWav2Vec2ForPreTraining"),Hqr=o(" (Wav2Vec2 model)"),Uqr=l(),h3=a("li"),fCe=a("strong"),Jqr=o("xlm-roberta"),Yqr=o(" \u2014 "),uZ=a("a"),Kqr=o("FlaxXLMRobertaForMaskedLM"),Zqr=o(" (XLM-RoBERTa model)"),ejr=l(),F(p3.$$.fragment),jOe=l(),Jc=a("h2"),u3=a("a"),mCe=a("span"),F(Nx.$$.fragment),ojr=l(),gCe=a("span"),rjr=o("FlaxAutoModelForMaskedLM"),DOe=l(),ur=a("div"),F(qx.$$.fragment),tjr=l(),Yc=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),bZ=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),jx=a("p"),cjr=o("This class cannot be instantiated directly using "),hCe=a("code"),fjr=o("__init__()"),mjr=o(" (throws an error)."),gjr=l(),Qt=a("div"),F(Dx.$$.fragment),hjr=l(),pCe=a("p"),pjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ujr=l(),Kc=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(_3.$$.fragment),Ejr=l(),Xr=a("div"),F(Gx.$$.fragment),Cjr=l(),_Ce=a("p"),wjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ajr=l(),Mn=a("p"),Ljr=o("The model class to instantiate is selected based on the "),bCe=a("code"),yjr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),$e=a("ul"),b3=a("li"),TCe=a("strong"),Bjr=o("albert"),Ijr=o(" \u2014 "),FZ=a("a"),Njr=o("FlaxAlbertForMaskedLM"),qjr=o(" (ALBERT model)"),jjr=l(),v3=a("li"),MCe=a("strong"),Djr=o("bart"),Gjr=o(" \u2014 "),TZ=a("a"),Ojr=o("FlaxBartForConditionalGeneration"),Vjr=o(" (BART model)"),Xjr=l(),F3=a("li"),ECe=a("strong"),zjr=o("bert"),Wjr=o(" \u2014 "),MZ=a("a"),Qjr=o("FlaxBertForMaskedLM"),Hjr=o(" (BERT model)"),Ujr=l(),T3=a("li"),CCe=a("strong"),Jjr=o("big_bird"),Yjr=o(" \u2014 "),EZ=a("a"),Kjr=o("FlaxBigBirdForMaskedLM"),Zjr=o(" (BigBird model)"),eDr=l(),M3=a("li"),wCe=a("strong"),oDr=o("distilbert"),rDr=o(" \u2014 "),CZ=a("a"),tDr=o("FlaxDistilBertForMaskedLM"),aDr=o(" (DistilBERT model)"),nDr=l(),E3=a("li"),ACe=a("strong"),sDr=o("electra"),lDr=o(" \u2014 "),wZ=a("a"),iDr=o("FlaxElectraForMaskedLM"),dDr=o(" (ELECTRA model)"),cDr=l(),C3=a("li"),LCe=a("strong"),fDr=o("mbart"),mDr=o(" \u2014 "),AZ=a("a"),gDr=o("FlaxMBartForConditionalGeneration"),hDr=o(" (mBART model)"),pDr=l(),w3=a("li"),yCe=a("strong"),uDr=o("roberta"),_Dr=o(" \u2014 "),LZ=a("a"),bDr=o("FlaxRobertaForMaskedLM"),vDr=o(" (RoBERTa model)"),FDr=l(),A3=a("li"),xCe=a("strong"),TDr=o("roformer"),MDr=o(" \u2014 "),yZ=a("a"),EDr=o("FlaxRoFormerForMaskedLM"),CDr=o(" (RoFormer model)"),wDr=l(),L3=a("li"),$Ce=a("strong"),ADr=o("xlm-roberta"),LDr=o(" \u2014 "),xZ=a("a"),yDr=o("FlaxXLMRobertaForMaskedLM"),xDr=o(" (XLM-RoBERTa model)"),$Dr=l(),F(y3.$$.fragment),GOe=l(),Zc=a("h2"),x3=a("a"),kCe=a("span"),F(Ox.$$.fragment),kDr=l(),SCe=a("span"),SDr=o("FlaxAutoModelForSeq2SeqLM"),OOe=l(),_r=a("div"),F(Vx.$$.fragment),RDr=l(),ef=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),kZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Xx=a("p"),DDr=o("This class cannot be instantiated directly using "),RCe=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Ht=a("div"),F(zx.$$.fragment),XDr=l(),PCe=a("p"),zDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WDr=l(),of=a("p"),QDr=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F($3.$$.fragment),ZDr=l(),zr=a("div"),F(Wx.$$.fragment),eGr=l(),ICe=a("p"),oGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rGr=l(),En=a("p"),tGr=o("The model class to instantiate is selected based on the "),NCe=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),qCe=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),ke=a("ul"),k3=a("li"),DCe=a("strong"),fGr=o("bart"),mGr=o(" \u2014 "),RZ=a("a"),gGr=o("FlaxBartForConditionalGeneration"),hGr=o(" (BART model)"),pGr=l(),S3=a("li"),GCe=a("strong"),uGr=o("blenderbot"),_Gr=o(" \u2014 "),PZ=a("a"),bGr=o("FlaxBlenderbotForConditionalGeneration"),vGr=o(" (Blenderbot model)"),FGr=l(),R3=a("li"),OCe=a("strong"),TGr=o("blenderbot-small"),MGr=o(" \u2014 "),BZ=a("a"),EGr=o("FlaxBlenderbotSmallForConditionalGeneration"),CGr=o(" (BlenderbotSmall model)"),wGr=l(),P3=a("li"),VCe=a("strong"),AGr=o("encoder-decoder"),LGr=o(" \u2014 "),IZ=a("a"),yGr=o("FlaxEncoderDecoderModel"),xGr=o(" (Encoder decoder model)"),$Gr=l(),B3=a("li"),XCe=a("strong"),kGr=o("longt5"),SGr=o(" \u2014 "),NZ=a("a"),RGr=o("FlaxLongT5ForConditionalGeneration"),PGr=o(" (LongT5 model)"),BGr=l(),I3=a("li"),zCe=a("strong"),IGr=o("marian"),NGr=o(" \u2014 "),qZ=a("a"),qGr=o("FlaxMarianMTModel"),jGr=o(" (Marian model)"),DGr=l(),N3=a("li"),WCe=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),jZ=a("a"),VGr=o("FlaxMBartForConditionalGeneration"),XGr=o(" (mBART model)"),zGr=l(),q3=a("li"),QCe=a("strong"),WGr=o("mt5"),QGr=o(" \u2014 "),DZ=a("a"),HGr=o("FlaxMT5ForConditionalGeneration"),UGr=o(" (MT5 model)"),JGr=l(),j3=a("li"),HCe=a("strong"),YGr=o("pegasus"),KGr=o(" \u2014 "),GZ=a("a"),ZGr=o("FlaxPegasusForConditionalGeneration"),eOr=o(" (Pegasus model)"),oOr=l(),D3=a("li"),UCe=a("strong"),rOr=o("t5"),tOr=o(" \u2014 "),OZ=a("a"),aOr=o("FlaxT5ForConditionalGeneration"),nOr=o(" (T5 model)"),sOr=l(),F(G3.$$.fragment),VOe=l(),rf=a("h2"),O3=a("a"),JCe=a("span"),F(Qx.$$.fragment),lOr=l(),YCe=a("span"),iOr=o("FlaxAutoModelForSequenceClassification"),XOe=l(),br=a("div"),F(Hx.$$.fragment),dOr=l(),tf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),XZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ux=a("p"),uOr=o("This class cannot be instantiated directly using "),KCe=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Ut=a("div"),F(Jx.$$.fragment),FOr=l(),ZCe=a("p"),TOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MOr=l(),af=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(V3.$$.fragment),xOr=l(),Wr=a("div"),F(Yx.$$.fragment),$Or=l(),o5e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SOr=l(),Cn=a("p"),ROr=o("The model class to instantiate is selected based on the "),r5e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),Se=a("ul"),X3=a("li"),n5e=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),WZ=a("a"),VOr=o("FlaxAlbertForSequenceClassification"),XOr=o(" (ALBERT model)"),zOr=l(),z3=a("li"),s5e=a("strong"),WOr=o("bart"),QOr=o(" \u2014 "),QZ=a("a"),HOr=o("FlaxBartForSequenceClassification"),UOr=o(" (BART model)"),JOr=l(),W3=a("li"),l5e=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),HZ=a("a"),ZOr=o("FlaxBertForSequenceClassification"),eVr=o(" (BERT model)"),oVr=l(),Q3=a("li"),i5e=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),UZ=a("a"),aVr=o("FlaxBigBirdForSequenceClassification"),nVr=o(" (BigBird model)"),sVr=l(),H3=a("li"),d5e=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),JZ=a("a"),dVr=o("FlaxDistilBertForSequenceClassification"),cVr=o(" (DistilBERT model)"),fVr=l(),U3=a("li"),c5e=a("strong"),mVr=o("electra"),gVr=o(" \u2014 "),YZ=a("a"),hVr=o("FlaxElectraForSequenceClassification"),pVr=o(" (ELECTRA model)"),uVr=l(),J3=a("li"),f5e=a("strong"),_Vr=o("mbart"),bVr=o(" \u2014 "),KZ=a("a"),vVr=o("FlaxMBartForSequenceClassification"),FVr=o(" (mBART model)"),TVr=l(),Y3=a("li"),m5e=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),ZZ=a("a"),CVr=o("FlaxRobertaForSequenceClassification"),wVr=o(" (RoBERTa model)"),AVr=l(),K3=a("li"),g5e=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),eee=a("a"),xVr=o("FlaxRoFormerForSequenceClassification"),$Vr=o(" (RoFormer model)"),kVr=l(),Z3=a("li"),h5e=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),oee=a("a"),PVr=o("FlaxXLMRobertaForSequenceClassification"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(e0.$$.fragment),zOe=l(),nf=a("h2"),o0=a("a"),p5e=a("span"),F(Kx.$$.fragment),NVr=l(),u5e=a("span"),qVr=o("FlaxAutoModelForQuestionAnswering"),WOe=l(),vr=a("div"),F(Zx.$$.fragment),jVr=l(),sf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),tee=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),e$=a("p"),WVr=o("This class cannot be instantiated directly using "),_5e=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Jt=a("div"),F(o$.$$.fragment),JVr=l(),b5e=a("p"),YVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KVr=l(),lf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(r0.$$.fragment),nXr=l(),Qr=a("div"),F(r$.$$.fragment),sXr=l(),F5e=a("p"),lXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iXr=l(),wn=a("p"),dXr=o("The model class to instantiate is selected based on the "),T5e=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),uXr=l(),Re=a("ul"),t0=a("li"),C5e=a("strong"),_Xr=o("albert"),bXr=o(" \u2014 "),nee=a("a"),vXr=o("FlaxAlbertForQuestionAnswering"),FXr=o(" (ALBERT model)"),TXr=l(),a0=a("li"),w5e=a("strong"),MXr=o("bart"),EXr=o(" \u2014 "),see=a("a"),CXr=o("FlaxBartForQuestionAnswering"),wXr=o(" (BART model)"),AXr=l(),n0=a("li"),A5e=a("strong"),LXr=o("bert"),yXr=o(" \u2014 "),lee=a("a"),xXr=o("FlaxBertForQuestionAnswering"),$Xr=o(" (BERT model)"),kXr=l(),s0=a("li"),L5e=a("strong"),SXr=o("big_bird"),RXr=o(" \u2014 "),iee=a("a"),PXr=o("FlaxBigBirdForQuestionAnswering"),BXr=o(" (BigBird model)"),IXr=l(),l0=a("li"),y5e=a("strong"),NXr=o("distilbert"),qXr=o(" \u2014 "),dee=a("a"),jXr=o("FlaxDistilBertForQuestionAnswering"),DXr=o(" (DistilBERT model)"),GXr=l(),i0=a("li"),x5e=a("strong"),OXr=o("electra"),VXr=o(" \u2014 "),cee=a("a"),XXr=o("FlaxElectraForQuestionAnswering"),zXr=o(" (ELECTRA model)"),WXr=l(),d0=a("li"),$5e=a("strong"),QXr=o("mbart"),HXr=o(" \u2014 "),fee=a("a"),UXr=o("FlaxMBartForQuestionAnswering"),JXr=o(" (mBART model)"),YXr=l(),c0=a("li"),k5e=a("strong"),KXr=o("roberta"),ZXr=o(" \u2014 "),mee=a("a"),ezr=o("FlaxRobertaForQuestionAnswering"),ozr=o(" (RoBERTa model)"),rzr=l(),f0=a("li"),S5e=a("strong"),tzr=o("roformer"),azr=o(" \u2014 "),gee=a("a"),nzr=o("FlaxRoFormerForQuestionAnswering"),szr=o(" (RoFormer model)"),lzr=l(),m0=a("li"),R5e=a("strong"),izr=o("xlm-roberta"),dzr=o(" \u2014 "),hee=a("a"),czr=o("FlaxXLMRobertaForQuestionAnswering"),fzr=o(" (XLM-RoBERTa model)"),mzr=l(),F(g0.$$.fragment),QOe=l(),df=a("h2"),h0=a("a"),P5e=a("span"),F(t$.$$.fragment),gzr=l(),B5e=a("span"),hzr=o("FlaxAutoModelForTokenClassification"),HOe=l(),Fr=a("div"),F(a$.$$.fragment),pzr=l(),cf=a("p"),uzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=a("a"),_zr=o("from_pretrained()"),bzr=o(" class method or the "),uee=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),n$=a("p"),Mzr=o("This class cannot be instantiated directly using "),I5e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Yt=a("div"),F(s$.$$.fragment),Azr=l(),N5e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yzr=l(),ff=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(p0.$$.fragment),Bzr=l(),Hr=a("div"),F(l$.$$.fragment),Izr=l(),j5e=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr=l(),An=a("p"),jzr=o("The model class to instantiate is selected based on the "),D5e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Wzr=l(),Ve=a("ul"),u0=a("li"),V5e=a("strong"),Qzr=o("albert"),Hzr=o(" \u2014 "),bee=a("a"),Uzr=o("FlaxAlbertForTokenClassification"),Jzr=o(" (ALBERT model)"),Yzr=l(),_0=a("li"),X5e=a("strong"),Kzr=o("bert"),Zzr=o(" \u2014 "),vee=a("a"),eWr=o("FlaxBertForTokenClassification"),oWr=o(" (BERT model)"),rWr=l(),b0=a("li"),z5e=a("strong"),tWr=o("big_bird"),aWr=o(" \u2014 "),Fee=a("a"),nWr=o("FlaxBigBirdForTokenClassification"),sWr=o(" (BigBird model)"),lWr=l(),v0=a("li"),W5e=a("strong"),iWr=o("distilbert"),dWr=o(" \u2014 "),Tee=a("a"),cWr=o("FlaxDistilBertForTokenClassification"),fWr=o(" (DistilBERT model)"),mWr=l(),F0=a("li"),Q5e=a("strong"),gWr=o("electra"),hWr=o(" \u2014 "),Mee=a("a"),pWr=o("FlaxElectraForTokenClassification"),uWr=o(" (ELECTRA model)"),_Wr=l(),T0=a("li"),H5e=a("strong"),bWr=o("roberta"),vWr=o(" \u2014 "),Eee=a("a"),FWr=o("FlaxRobertaForTokenClassification"),TWr=o(" (RoBERTa model)"),MWr=l(),M0=a("li"),U5e=a("strong"),EWr=o("roformer"),CWr=o(" \u2014 "),Cee=a("a"),wWr=o("FlaxRoFormerForTokenClassification"),AWr=o(" (RoFormer model)"),LWr=l(),E0=a("li"),J5e=a("strong"),yWr=o("xlm-roberta"),xWr=o(" \u2014 "),wee=a("a"),$Wr=o("FlaxXLMRobertaForTokenClassification"),kWr=o(" (XLM-RoBERTa model)"),SWr=l(),F(C0.$$.fragment),UOe=l(),mf=a("h2"),w0=a("a"),Y5e=a("span"),F(i$.$$.fragment),RWr=l(),K5e=a("span"),PWr=o("FlaxAutoModelForMultipleChoice"),JOe=l(),Tr=a("div"),F(d$.$$.fragment),BWr=l(),gf=a("p"),IWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=a("a"),NWr=o("from_pretrained()"),qWr=o(" class method or the "),Lee=a("a"),jWr=o("from_config()"),DWr=o(` class
method.`),GWr=l(),c$=a("p"),OWr=o("This class cannot be instantiated directly using "),Z5e=a("code"),VWr=o("__init__()"),XWr=o(" (throws an error)."),zWr=l(),Kt=a("div"),F(f$.$$.fragment),WWr=l(),e3e=a("p"),QWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HWr=l(),hf=a("p"),UWr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),JWr=o("not"),YWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),KWr=o("from_pretrained()"),ZWr=o(" to load the model weights."),eQr=l(),F(A0.$$.fragment),oQr=l(),Ur=a("div"),F(m$.$$.fragment),rQr=l(),r3e=a("p"),tQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aQr=l(),Ln=a("p"),nQr=o("The model class to instantiate is selected based on the "),t3e=a("code"),sQr=o("model_type"),lQr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),cQr=o("pretrained_model_name_or_path"),fQr=o(":"),mQr=l(),Xe=a("ul"),L0=a("li"),s3e=a("strong"),gQr=o("albert"),hQr=o(" \u2014 "),xee=a("a"),pQr=o("FlaxAlbertForMultipleChoice"),uQr=o(" (ALBERT model)"),_Qr=l(),y0=a("li"),l3e=a("strong"),bQr=o("bert"),vQr=o(" \u2014 "),$ee=a("a"),FQr=o("FlaxBertForMultipleChoice"),TQr=o(" (BERT model)"),MQr=l(),x0=a("li"),i3e=a("strong"),EQr=o("big_bird"),CQr=o(" \u2014 "),kee=a("a"),wQr=o("FlaxBigBirdForMultipleChoice"),AQr=o(" (BigBird model)"),LQr=l(),$0=a("li"),d3e=a("strong"),yQr=o("distilbert"),xQr=o(" \u2014 "),See=a("a"),$Qr=o("FlaxDistilBertForMultipleChoice"),kQr=o(" (DistilBERT model)"),SQr=l(),k0=a("li"),c3e=a("strong"),RQr=o("electra"),PQr=o(" \u2014 "),Ree=a("a"),BQr=o("FlaxElectraForMultipleChoice"),IQr=o(" (ELECTRA model)"),NQr=l(),S0=a("li"),f3e=a("strong"),qQr=o("roberta"),jQr=o(" \u2014 "),Pee=a("a"),DQr=o("FlaxRobertaForMultipleChoice"),GQr=o(" (RoBERTa model)"),OQr=l(),R0=a("li"),m3e=a("strong"),VQr=o("roformer"),XQr=o(" \u2014 "),Bee=a("a"),zQr=o("FlaxRoFormerForMultipleChoice"),WQr=o(" (RoFormer model)"),QQr=l(),P0=a("li"),g3e=a("strong"),HQr=o("xlm-roberta"),UQr=o(" \u2014 "),Iee=a("a"),JQr=o("FlaxXLMRobertaForMultipleChoice"),YQr=o(" (XLM-RoBERTa model)"),KQr=l(),F(B0.$$.fragment),YOe=l(),pf=a("h2"),I0=a("a"),h3e=a("span"),F(g$.$$.fragment),ZQr=l(),p3e=a("span"),eHr=o("FlaxAutoModelForNextSentencePrediction"),KOe=l(),Mr=a("div"),F(h$.$$.fragment),oHr=l(),uf=a("p"),rHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=a("a"),tHr=o("from_pretrained()"),aHr=o(" class method or the "),qee=a("a"),nHr=o("from_config()"),sHr=o(` class
method.`),lHr=l(),p$=a("p"),iHr=o("This class cannot be instantiated directly using "),u3e=a("code"),dHr=o("__init__()"),cHr=o(" (throws an error)."),fHr=l(),Zt=a("div"),F(u$.$$.fragment),mHr=l(),_3e=a("p"),gHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hHr=l(),_f=a("p"),pHr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),uHr=o("not"),_Hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),bHr=o("from_pretrained()"),vHr=o(" to load the model weights."),FHr=l(),F(N0.$$.fragment),THr=l(),Jr=a("div"),F(_$.$$.fragment),MHr=l(),v3e=a("p"),EHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CHr=l(),yn=a("p"),wHr=o("The model class to instantiate is selected based on the "),F3e=a("code"),AHr=o("model_type"),LHr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),yHr=o("pretrained_model_name_or_path"),xHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),$Hr=o("pretrained_model_name_or_path"),kHr=o(":"),SHr=l(),E3e=a("ul"),q0=a("li"),C3e=a("strong"),RHr=o("bert"),PHr=o(" \u2014 "),Dee=a("a"),BHr=o("FlaxBertForNextSentencePrediction"),IHr=o(" (BERT model)"),NHr=l(),F(j0.$$.fragment),ZOe=l(),bf=a("h2"),D0=a("a"),w3e=a("span"),F(b$.$$.fragment),qHr=l(),A3e=a("span"),jHr=o("FlaxAutoModelForImageClassification"),eVe=l(),Er=a("div"),F(v$.$$.fragment),DHr=l(),vf=a("p"),GHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=a("a"),OHr=o("from_pretrained()"),VHr=o(" class method or the "),Oee=a("a"),XHr=o("from_config()"),zHr=o(` class
method.`),WHr=l(),F$=a("p"),QHr=o("This class cannot be instantiated directly using "),L3e=a("code"),HHr=o("__init__()"),UHr=o(" (throws an error)."),JHr=l(),ea=a("div"),F(T$.$$.fragment),YHr=l(),y3e=a("p"),KHr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZHr=l(),Ff=a("p"),eUr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),oUr=o("not"),rUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),tUr=o("from_pretrained()"),aUr=o(" to load the model weights."),nUr=l(),F(G0.$$.fragment),sUr=l(),Yr=a("div"),F(M$.$$.fragment),lUr=l(),$3e=a("p"),iUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dUr=l(),xn=a("p"),cUr=o("The model class to instantiate is selected based on the "),k3e=a("code"),fUr=o("model_type"),mUr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),gUr=o("pretrained_model_name_or_path"),hUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),pUr=o("pretrained_model_name_or_path"),uUr=o(":"),_Ur=l(),E$=a("ul"),O0=a("li"),P3e=a("strong"),bUr=o("beit"),vUr=o(" \u2014 "),Xee=a("a"),FUr=o("FlaxBeitForImageClassification"),TUr=o(" (BEiT model)"),MUr=l(),V0=a("li"),B3e=a("strong"),EUr=o("vit"),CUr=o(" \u2014 "),zee=a("a"),wUr=o("FlaxViTForImageClassification"),AUr=o(" (ViT model)"),LUr=l(),F(X0.$$.fragment),oVe=l(),Tf=a("h2"),z0=a("a"),I3e=a("span"),F(C$.$$.fragment),yUr=l(),N3e=a("span"),xUr=o("FlaxAutoModelForVision2Seq"),rVe=l(),Cr=a("div"),F(w$.$$.fragment),$Ur=l(),Mf=a("p"),kUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=a("a"),SUr=o("from_pretrained()"),RUr=o(" class method or the "),Qee=a("a"),PUr=o("from_config()"),BUr=o(` class
method.`),IUr=l(),A$=a("p"),NUr=o("This class cannot be instantiated directly using "),q3e=a("code"),qUr=o("__init__()"),jUr=o(" (throws an error)."),DUr=l(),oa=a("div"),F(L$.$$.fragment),GUr=l(),j3e=a("p"),OUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VUr=l(),Ef=a("p"),XUr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),zUr=o("not"),WUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),QUr=o("from_pretrained()"),HUr=o(" to load the model weights."),UUr=l(),F(W0.$$.fragment),JUr=l(),Kr=a("div"),F(y$.$$.fragment),YUr=l(),G3e=a("p"),KUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZUr=l(),$n=a("p"),eJr=o("The model class to instantiate is selected based on the "),O3e=a("code"),oJr=o("model_type"),rJr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),tJr=o("pretrained_model_name_or_path"),aJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),nJr=o("pretrained_model_name_or_path"),sJr=o(":"),lJr=l(),z3e=a("ul"),Q0=a("li"),W3e=a("strong"),iJr=o("vision-encoder-decoder"),dJr=o(" \u2014 "),Uee=a("a"),cJr=o("FlaxVisionEncoderDecoderModel"),fJr=o(" (Vision Encoder decoder model)"),mJr=l(),F(H0.$$.fragment),this.h()},l(f){const _=uqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var x$=s(p);m=n(x$,"A",{id:!0,class:!0,href:!0});var Q3e=s(m);u=n(Q3e,"SPAN",{});var H3e=s(u);T(d.$$.fragment,H3e),H3e.forEach(t),Q3e.forEach(t),h=i(x$),Eo=n(x$,"SPAN",{});var U3e=s(Eo);Fi=r(U3e,"Auto Classes"),U3e.forEach(t),x$.forEach(t),Lf=i(f),at=n(f,"P",{});var $$=s(at);Ti=r($$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n($$,"CODE",{});var J3e=s(Mi);pL=r(J3e,"from_pretrained()"),J3e.forEach(t),yf=r($$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var Y3e=s(Sn);uL=r(Y3e,"AutoConfig"),Y3e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var K3e=s(Pn);_L=r(K3e,"AutoModel"),K3e.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var Z3e=s(Bn);bL=r(Z3e,"AutoTokenizer"),Z3e.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var k$=s(Ae);zk=r(k$,"will create a model that is an instance of "),Ai=n(k$,"A",{href:!0});var e0e=s(Ai);Wk=r(e0e,"BertModel"),e0e.forEach(t),Qk=r(k$,"."),k$.forEach(t),Co=i(f),xa=n(f,"P",{});var S$=s(xa);Hk=r(S$,"There is one class of "),$f=n(S$,"CODE",{});var o0e=s($f);Uk=r(o0e,"AutoModel"),o0e.forEach(t),gze=r(S$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),S$.forEach(t),KDe=i(f),Li=n(f,"H2",{class:!0});var R$=s(Li);kf=n(R$,"A",{id:!0,class:!0,href:!0});var r0e=s(kf);Xre=n(r0e,"SPAN",{});var t0e=s(Xre);T(vL.$$.fragment,t0e),t0e.forEach(t),r0e.forEach(t),hze=i(R$),zre=n(R$,"SPAN",{});var a0e=s(zre);pze=r(a0e,"Extending the Auto Classes"),a0e.forEach(t),R$.forEach(t),ZDe=i(f),In=n(f,"P",{});var Cf=s(In);uze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=n(Cf,"CODE",{});var n0e=s(Wre);_ze=r(n0e,"NewModel"),n0e.forEach(t),bze=r(Cf,", make sure you have a "),Qre=n(Cf,"CODE",{});var s0e=s(Qre);vze=r(s0e,"NewModelConfig"),s0e.forEach(t),Fze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),eGe=i(f),T(FL.$$.fragment,f),oGe=i(f),Jk=n(f,"P",{});var l0e=s(Jk);Tze=r(l0e,"You will then be able to use the auto classes like you would usually do!"),l0e.forEach(t),rGe=i(f),T(Sf.$$.fragment,f),tGe=i(f),yi=n(f,"H2",{class:!0});var P$=s(yi);Rf=n(P$,"A",{id:!0,class:!0,href:!0});var i0e=s(Rf);Hre=n(i0e,"SPAN",{});var d0e=s(Hre);T(TL.$$.fragment,d0e),d0e.forEach(t),i0e.forEach(t),Mze=i(P$),Ure=n(P$,"SPAN",{});var c0e=s(Ure);Eze=r(c0e,"AutoConfig"),c0e.forEach(t),P$.forEach(t),aGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(ML.$$.fragment,rt),Cze=i(rt),EL=n(rt,"P",{});var B$=s(EL);wze=r(B$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=n(B$,"A",{href:!0});var f0e=s(Yk);Aze=r(f0e,"from_pretrained()"),f0e.forEach(t),Lze=r(B$," class method."),B$.forEach(t),yze=i(rt),CL=n(rt,"P",{});var I$=s(CL);xze=r(I$,"This class cannot be instantiated directly using "),Jre=n(I$,"CODE",{});var m0e=s(Jre);$ze=r(m0e,"__init__()"),m0e.forEach(t),kze=r(I$," (throws an error)."),I$.forEach(t),Sze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(wL.$$.fragment,tt),Rze=i(tt),Yre=n(tt,"P",{});var g0e=s(Yre);Pze=r(g0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),g0e.forEach(t),Bze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Ize=r(wf,"The configuration class to instantiate is selected based on the "),Kre=n(wf,"CODE",{});var h0e=s(Kre);Nze=r(h0e,"model_type"),h0e.forEach(t),qze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=n(wf,"CODE",{});var p0e=s(Zre);jze=r(p0e,"pretrained_model_name_or_path"),p0e.forEach(t),Dze=r(wf,":"),wf.forEach(t),Gze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var U0=s(Pf);ete=n(U0,"STRONG",{});var u0e=s(ete);Oze=r(u0e,"albert"),u0e.forEach(t),Vze=r(U0," \u2014 "),Kk=n(U0,"A",{href:!0});var _0e=s(Kk);Xze=r(_0e,"AlbertConfig"),_0e.forEach(t),zze=r(U0," (ALBERT model)"),U0.forEach(t),Wze=i(L),Bf=n(L,"LI",{});var J0=s(Bf);ote=n(J0,"STRONG",{});var b0e=s(ote);Qze=r(b0e,"bart"),b0e.forEach(t),Hze=r(J0," \u2014 "),Zk=n(J0,"A",{href:!0});var v0e=s(Zk);Uze=r(v0e,"BartConfig"),v0e.forEach(t),Jze=r(J0," (BART model)"),J0.forEach(t),Yze=i(L),If=n(L,"LI",{});var Y0=s(If);rte=n(Y0,"STRONG",{});var F0e=s(rte);Kze=r(F0e,"beit"),F0e.forEach(t),Zze=r(Y0," \u2014 "),eS=n(Y0,"A",{href:!0});var T0e=s(eS);eWe=r(T0e,"BeitConfig"),T0e.forEach(t),oWe=r(Y0," (BEiT model)"),Y0.forEach(t),rWe=i(L),Nf=n(L,"LI",{});var K0=s(Nf);tte=n(K0,"STRONG",{});var M0e=s(tte);tWe=r(M0e,"bert"),M0e.forEach(t),aWe=r(K0," \u2014 "),oS=n(K0,"A",{href:!0});var E0e=s(oS);nWe=r(E0e,"BertConfig"),E0e.forEach(t),sWe=r(K0," (BERT model)"),K0.forEach(t),lWe=i(L),qf=n(L,"LI",{});var Z0=s(qf);ate=n(Z0,"STRONG",{});var C0e=s(ate);iWe=r(C0e,"bert-generation"),C0e.forEach(t),dWe=r(Z0," \u2014 "),rS=n(Z0,"A",{href:!0});var w0e=s(rS);cWe=r(w0e,"BertGenerationConfig"),w0e.forEach(t),fWe=r(Z0," (Bert Generation model)"),Z0.forEach(t),mWe=i(L),jf=n(L,"LI",{});var ew=s(jf);nte=n(ew,"STRONG",{});var A0e=s(nte);gWe=r(A0e,"big_bird"),A0e.forEach(t),hWe=r(ew," \u2014 "),tS=n(ew,"A",{href:!0});var L0e=s(tS);pWe=r(L0e,"BigBirdConfig"),L0e.forEach(t),uWe=r(ew," (BigBird model)"),ew.forEach(t),_We=i(L),Df=n(L,"LI",{});var ow=s(Df);ste=n(ow,"STRONG",{});var y0e=s(ste);bWe=r(y0e,"bigbird_pegasus"),y0e.forEach(t),vWe=r(ow," \u2014 "),aS=n(ow,"A",{href:!0});var x0e=s(aS);FWe=r(x0e,"BigBirdPegasusConfig"),x0e.forEach(t),TWe=r(ow," (BigBird-Pegasus model)"),ow.forEach(t),MWe=i(L),Gf=n(L,"LI",{});var rw=s(Gf);lte=n(rw,"STRONG",{});var $0e=s(lte);EWe=r($0e,"blenderbot"),$0e.forEach(t),CWe=r(rw," \u2014 "),nS=n(rw,"A",{href:!0});var k0e=s(nS);wWe=r(k0e,"BlenderbotConfig"),k0e.forEach(t),AWe=r(rw," (Blenderbot model)"),rw.forEach(t),LWe=i(L),Of=n(L,"LI",{});var tw=s(Of);ite=n(tw,"STRONG",{});var S0e=s(ite);yWe=r(S0e,"blenderbot-small"),S0e.forEach(t),xWe=r(tw," \u2014 "),sS=n(tw,"A",{href:!0});var R0e=s(sS);$We=r(R0e,"BlenderbotSmallConfig"),R0e.forEach(t),kWe=r(tw," (BlenderbotSmall model)"),tw.forEach(t),SWe=i(L),Vf=n(L,"LI",{});var aw=s(Vf);dte=n(aw,"STRONG",{});var P0e=s(dte);RWe=r(P0e,"bloom"),P0e.forEach(t),PWe=r(aw," \u2014 "),lS=n(aw,"A",{href:!0});var B0e=s(lS);BWe=r(B0e,"BloomConfig"),B0e.forEach(t),IWe=r(aw," (BLOOM model)"),aw.forEach(t),NWe=i(L),Xf=n(L,"LI",{});var nw=s(Xf);cte=n(nw,"STRONG",{});var I0e=s(cte);qWe=r(I0e,"camembert"),I0e.forEach(t),jWe=r(nw," \u2014 "),iS=n(nw,"A",{href:!0});var N0e=s(iS);DWe=r(N0e,"CamembertConfig"),N0e.forEach(t),GWe=r(nw," (CamemBERT model)"),nw.forEach(t),OWe=i(L),zf=n(L,"LI",{});var sw=s(zf);fte=n(sw,"STRONG",{});var q0e=s(fte);VWe=r(q0e,"canine"),q0e.forEach(t),XWe=r(sw," \u2014 "),dS=n(sw,"A",{href:!0});var j0e=s(dS);zWe=r(j0e,"CanineConfig"),j0e.forEach(t),WWe=r(sw," (CANINE model)"),sw.forEach(t),QWe=i(L),Wf=n(L,"LI",{});var lw=s(Wf);mte=n(lw,"STRONG",{});var D0e=s(mte);HWe=r(D0e,"clip"),D0e.forEach(t),UWe=r(lw," \u2014 "),cS=n(lw,"A",{href:!0});var G0e=s(cS);JWe=r(G0e,"CLIPConfig"),G0e.forEach(t),YWe=r(lw," (CLIP model)"),lw.forEach(t),KWe=i(L),Qf=n(L,"LI",{});var iw=s(Qf);gte=n(iw,"STRONG",{});var O0e=s(gte);ZWe=r(O0e,"convbert"),O0e.forEach(t),eQe=r(iw," \u2014 "),fS=n(iw,"A",{href:!0});var V0e=s(fS);oQe=r(V0e,"ConvBertConfig"),V0e.forEach(t),rQe=r(iw," (ConvBERT model)"),iw.forEach(t),tQe=i(L),Hf=n(L,"LI",{});var dw=s(Hf);hte=n(dw,"STRONG",{});var X0e=s(hte);aQe=r(X0e,"convnext"),X0e.forEach(t),nQe=r(dw," \u2014 "),mS=n(dw,"A",{href:!0});var z0e=s(mS);sQe=r(z0e,"ConvNextConfig"),z0e.forEach(t),lQe=r(dw," (ConvNeXT model)"),dw.forEach(t),iQe=i(L),Uf=n(L,"LI",{});var cw=s(Uf);pte=n(cw,"STRONG",{});var W0e=s(pte);dQe=r(W0e,"ctrl"),W0e.forEach(t),cQe=r(cw," \u2014 "),gS=n(cw,"A",{href:!0});var Q0e=s(gS);fQe=r(Q0e,"CTRLConfig"),Q0e.forEach(t),mQe=r(cw," (CTRL model)"),cw.forEach(t),gQe=i(L),Jf=n(L,"LI",{});var fw=s(Jf);ute=n(fw,"STRONG",{});var H0e=s(ute);hQe=r(H0e,"cvt"),H0e.forEach(t),pQe=r(fw," \u2014 "),hS=n(fw,"A",{href:!0});var U0e=s(hS);uQe=r(U0e,"CvtConfig"),U0e.forEach(t),_Qe=r(fw," (CvT model)"),fw.forEach(t),bQe=i(L),Yf=n(L,"LI",{});var mw=s(Yf);_te=n(mw,"STRONG",{});var J0e=s(_te);vQe=r(J0e,"data2vec-audio"),J0e.forEach(t),FQe=r(mw," \u2014 "),pS=n(mw,"A",{href:!0});var Y0e=s(pS);TQe=r(Y0e,"Data2VecAudioConfig"),Y0e.forEach(t),MQe=r(mw," (Data2VecAudio model)"),mw.forEach(t),EQe=i(L),Kf=n(L,"LI",{});var gw=s(Kf);bte=n(gw,"STRONG",{});var K0e=s(bte);CQe=r(K0e,"data2vec-text"),K0e.forEach(t),wQe=r(gw," \u2014 "),uS=n(gw,"A",{href:!0});var Z0e=s(uS);AQe=r(Z0e,"Data2VecTextConfig"),Z0e.forEach(t),LQe=r(gw," (Data2VecText model)"),gw.forEach(t),yQe=i(L),Zf=n(L,"LI",{});var hw=s(Zf);vte=n(hw,"STRONG",{});var ewe=s(vte);xQe=r(ewe,"data2vec-vision"),ewe.forEach(t),$Qe=r(hw," \u2014 "),_S=n(hw,"A",{href:!0});var owe=s(_S);kQe=r(owe,"Data2VecVisionConfig"),owe.forEach(t),SQe=r(hw," (Data2VecVision model)"),hw.forEach(t),RQe=i(L),em=n(L,"LI",{});var pw=s(em);Fte=n(pw,"STRONG",{});var rwe=s(Fte);PQe=r(rwe,"deberta"),rwe.forEach(t),BQe=r(pw," \u2014 "),bS=n(pw,"A",{href:!0});var twe=s(bS);IQe=r(twe,"DebertaConfig"),twe.forEach(t),NQe=r(pw," (DeBERTa model)"),pw.forEach(t),qQe=i(L),om=n(L,"LI",{});var uw=s(om);Tte=n(uw,"STRONG",{});var awe=s(Tte);jQe=r(awe,"deberta-v2"),awe.forEach(t),DQe=r(uw," \u2014 "),vS=n(uw,"A",{href:!0});var nwe=s(vS);GQe=r(nwe,"DebertaV2Config"),nwe.forEach(t),OQe=r(uw," (DeBERTa-v2 model)"),uw.forEach(t),VQe=i(L),rm=n(L,"LI",{});var _w=s(rm);Mte=n(_w,"STRONG",{});var swe=s(Mte);XQe=r(swe,"decision_transformer"),swe.forEach(t),zQe=r(_w," \u2014 "),FS=n(_w,"A",{href:!0});var lwe=s(FS);WQe=r(lwe,"DecisionTransformerConfig"),lwe.forEach(t),QQe=r(_w," (Decision Transformer model)"),_w.forEach(t),HQe=i(L),tm=n(L,"LI",{});var bw=s(tm);Ete=n(bw,"STRONG",{});var hJr=s(Ete);UQe=r(hJr,"deit"),hJr.forEach(t),JQe=r(bw," \u2014 "),TS=n(bw,"A",{href:!0});var pJr=s(TS);YQe=r(pJr,"DeiTConfig"),pJr.forEach(t),KQe=r(bw," (DeiT model)"),bw.forEach(t),ZQe=i(L),am=n(L,"LI",{});var iwe=s(am);Cte=n(iwe,"STRONG",{});var uJr=s(Cte);eHe=r(uJr,"detr"),uJr.forEach(t),oHe=r(iwe," \u2014 "),MS=n(iwe,"A",{href:!0});var _Jr=s(MS);rHe=r(_Jr,"DetrConfig"),_Jr.forEach(t),tHe=r(iwe," (DETR model)"),iwe.forEach(t),aHe=i(L),nm=n(L,"LI",{});var dwe=s(nm);wte=n(dwe,"STRONG",{});var bJr=s(wte);nHe=r(bJr,"distilbert"),bJr.forEach(t),sHe=r(dwe," \u2014 "),ES=n(dwe,"A",{href:!0});var vJr=s(ES);lHe=r(vJr,"DistilBertConfig"),vJr.forEach(t),iHe=r(dwe," (DistilBERT model)"),dwe.forEach(t),dHe=i(L),sm=n(L,"LI",{});var cwe=s(sm);Ate=n(cwe,"STRONG",{});var FJr=s(Ate);cHe=r(FJr,"dpr"),FJr.forEach(t),fHe=r(cwe," \u2014 "),CS=n(cwe,"A",{href:!0});var TJr=s(CS);mHe=r(TJr,"DPRConfig"),TJr.forEach(t),gHe=r(cwe," (DPR model)"),cwe.forEach(t),hHe=i(L),lm=n(L,"LI",{});var fwe=s(lm);Lte=n(fwe,"STRONG",{});var MJr=s(Lte);pHe=r(MJr,"dpt"),MJr.forEach(t),uHe=r(fwe," \u2014 "),wS=n(fwe,"A",{href:!0});var EJr=s(wS);_He=r(EJr,"DPTConfig"),EJr.forEach(t),bHe=r(fwe," (DPT model)"),fwe.forEach(t),vHe=i(L),im=n(L,"LI",{});var mwe=s(im);yte=n(mwe,"STRONG",{});var CJr=s(yte);FHe=r(CJr,"electra"),CJr.forEach(t),THe=r(mwe," \u2014 "),AS=n(mwe,"A",{href:!0});var wJr=s(AS);MHe=r(wJr,"ElectraConfig"),wJr.forEach(t),EHe=r(mwe," (ELECTRA model)"),mwe.forEach(t),CHe=i(L),dm=n(L,"LI",{});var gwe=s(dm);xte=n(gwe,"STRONG",{});var AJr=s(xte);wHe=r(AJr,"encoder-decoder"),AJr.forEach(t),AHe=r(gwe," \u2014 "),LS=n(gwe,"A",{href:!0});var LJr=s(LS);LHe=r(LJr,"EncoderDecoderConfig"),LJr.forEach(t),yHe=r(gwe," (Encoder decoder model)"),gwe.forEach(t),xHe=i(L),cm=n(L,"LI",{});var hwe=s(cm);$te=n(hwe,"STRONG",{});var yJr=s($te);$He=r(yJr,"flaubert"),yJr.forEach(t),kHe=r(hwe," \u2014 "),yS=n(hwe,"A",{href:!0});var xJr=s(yS);SHe=r(xJr,"FlaubertConfig"),xJr.forEach(t),RHe=r(hwe," (FlauBERT model)"),hwe.forEach(t),PHe=i(L),fm=n(L,"LI",{});var pwe=s(fm);kte=n(pwe,"STRONG",{});var $Jr=s(kte);BHe=r($Jr,"flava"),$Jr.forEach(t),IHe=r(pwe," \u2014 "),xS=n(pwe,"A",{href:!0});var kJr=s(xS);NHe=r(kJr,"FlavaConfig"),kJr.forEach(t),qHe=r(pwe," (FLAVA model)"),pwe.forEach(t),jHe=i(L),mm=n(L,"LI",{});var uwe=s(mm);Ste=n(uwe,"STRONG",{});var SJr=s(Ste);DHe=r(SJr,"fnet"),SJr.forEach(t),GHe=r(uwe," \u2014 "),$S=n(uwe,"A",{href:!0});var RJr=s($S);OHe=r(RJr,"FNetConfig"),RJr.forEach(t),VHe=r(uwe," (FNet model)"),uwe.forEach(t),XHe=i(L),gm=n(L,"LI",{});var _we=s(gm);Rte=n(_we,"STRONG",{});var PJr=s(Rte);zHe=r(PJr,"fsmt"),PJr.forEach(t),WHe=r(_we," \u2014 "),kS=n(_we,"A",{href:!0});var BJr=s(kS);QHe=r(BJr,"FSMTConfig"),BJr.forEach(t),HHe=r(_we," (FairSeq Machine-Translation model)"),_we.forEach(t),UHe=i(L),hm=n(L,"LI",{});var bwe=s(hm);Pte=n(bwe,"STRONG",{});var IJr=s(Pte);JHe=r(IJr,"funnel"),IJr.forEach(t),YHe=r(bwe," \u2014 "),SS=n(bwe,"A",{href:!0});var NJr=s(SS);KHe=r(NJr,"FunnelConfig"),NJr.forEach(t),ZHe=r(bwe," (Funnel Transformer model)"),bwe.forEach(t),eUe=i(L),pm=n(L,"LI",{});var vwe=s(pm);Bte=n(vwe,"STRONG",{});var qJr=s(Bte);oUe=r(qJr,"glpn"),qJr.forEach(t),rUe=r(vwe," \u2014 "),RS=n(vwe,"A",{href:!0});var jJr=s(RS);tUe=r(jJr,"GLPNConfig"),jJr.forEach(t),aUe=r(vwe," (GLPN model)"),vwe.forEach(t),nUe=i(L),um=n(L,"LI",{});var Fwe=s(um);Ite=n(Fwe,"STRONG",{});var DJr=s(Ite);sUe=r(DJr,"gpt2"),DJr.forEach(t),lUe=r(Fwe," \u2014 "),PS=n(Fwe,"A",{href:!0});var GJr=s(PS);iUe=r(GJr,"GPT2Config"),GJr.forEach(t),dUe=r(Fwe," (OpenAI GPT-2 model)"),Fwe.forEach(t),cUe=i(L),_m=n(L,"LI",{});var Twe=s(_m);Nte=n(Twe,"STRONG",{});var OJr=s(Nte);fUe=r(OJr,"gpt_neo"),OJr.forEach(t),mUe=r(Twe," \u2014 "),BS=n(Twe,"A",{href:!0});var VJr=s(BS);gUe=r(VJr,"GPTNeoConfig"),VJr.forEach(t),hUe=r(Twe," (GPT Neo model)"),Twe.forEach(t),pUe=i(L),bm=n(L,"LI",{});var Mwe=s(bm);qte=n(Mwe,"STRONG",{});var XJr=s(qte);uUe=r(XJr,"gpt_neox"),XJr.forEach(t),_Ue=r(Mwe," \u2014 "),IS=n(Mwe,"A",{href:!0});var zJr=s(IS);bUe=r(zJr,"GPTNeoXConfig"),zJr.forEach(t),vUe=r(Mwe," (GPT NeoX model)"),Mwe.forEach(t),FUe=i(L),vm=n(L,"LI",{});var Ewe=s(vm);jte=n(Ewe,"STRONG",{});var WJr=s(jte);TUe=r(WJr,"gptj"),WJr.forEach(t),MUe=r(Ewe," \u2014 "),NS=n(Ewe,"A",{href:!0});var QJr=s(NS);EUe=r(QJr,"GPTJConfig"),QJr.forEach(t),CUe=r(Ewe," (GPT-J model)"),Ewe.forEach(t),wUe=i(L),Fm=n(L,"LI",{});var Cwe=s(Fm);Dte=n(Cwe,"STRONG",{});var HJr=s(Dte);AUe=r(HJr,"hubert"),HJr.forEach(t),LUe=r(Cwe," \u2014 "),qS=n(Cwe,"A",{href:!0});var UJr=s(qS);yUe=r(UJr,"HubertConfig"),UJr.forEach(t),xUe=r(Cwe," (Hubert model)"),Cwe.forEach(t),$Ue=i(L),Tm=n(L,"LI",{});var wwe=s(Tm);Gte=n(wwe,"STRONG",{});var JJr=s(Gte);kUe=r(JJr,"ibert"),JJr.forEach(t),SUe=r(wwe," \u2014 "),jS=n(wwe,"A",{href:!0});var YJr=s(jS);RUe=r(YJr,"IBertConfig"),YJr.forEach(t),PUe=r(wwe," (I-BERT model)"),wwe.forEach(t),BUe=i(L),Mm=n(L,"LI",{});var Awe=s(Mm);Ote=n(Awe,"STRONG",{});var KJr=s(Ote);IUe=r(KJr,"imagegpt"),KJr.forEach(t),NUe=r(Awe," \u2014 "),DS=n(Awe,"A",{href:!0});var ZJr=s(DS);qUe=r(ZJr,"ImageGPTConfig"),ZJr.forEach(t),jUe=r(Awe," (ImageGPT model)"),Awe.forEach(t),DUe=i(L),Em=n(L,"LI",{});var Lwe=s(Em);Vte=n(Lwe,"STRONG",{});var eYr=s(Vte);GUe=r(eYr,"layoutlm"),eYr.forEach(t),OUe=r(Lwe," \u2014 "),GS=n(Lwe,"A",{href:!0});var oYr=s(GS);VUe=r(oYr,"LayoutLMConfig"),oYr.forEach(t),XUe=r(Lwe," (LayoutLM model)"),Lwe.forEach(t),zUe=i(L),Cm=n(L,"LI",{});var ywe=s(Cm);Xte=n(ywe,"STRONG",{});var rYr=s(Xte);WUe=r(rYr,"layoutlmv2"),rYr.forEach(t),QUe=r(ywe," \u2014 "),OS=n(ywe,"A",{href:!0});var tYr=s(OS);HUe=r(tYr,"LayoutLMv2Config"),tYr.forEach(t),UUe=r(ywe," (LayoutLMv2 model)"),ywe.forEach(t),JUe=i(L),wm=n(L,"LI",{});var xwe=s(wm);zte=n(xwe,"STRONG",{});var aYr=s(zte);YUe=r(aYr,"layoutlmv3"),aYr.forEach(t),KUe=r(xwe," \u2014 "),VS=n(xwe,"A",{href:!0});var nYr=s(VS);ZUe=r(nYr,"LayoutLMv3Config"),nYr.forEach(t),eJe=r(xwe," (LayoutLMv3 model)"),xwe.forEach(t),oJe=i(L),Am=n(L,"LI",{});var $we=s(Am);Wte=n($we,"STRONG",{});var sYr=s(Wte);rJe=r(sYr,"led"),sYr.forEach(t),tJe=r($we," \u2014 "),XS=n($we,"A",{href:!0});var lYr=s(XS);aJe=r(lYr,"LEDConfig"),lYr.forEach(t),nJe=r($we," (LED model)"),$we.forEach(t),sJe=i(L),Lm=n(L,"LI",{});var kwe=s(Lm);Qte=n(kwe,"STRONG",{});var iYr=s(Qte);lJe=r(iYr,"levit"),iYr.forEach(t),iJe=r(kwe," \u2014 "),zS=n(kwe,"A",{href:!0});var dYr=s(zS);dJe=r(dYr,"LevitConfig"),dYr.forEach(t),cJe=r(kwe," (LeViT model)"),kwe.forEach(t),fJe=i(L),ym=n(L,"LI",{});var Swe=s(ym);Hte=n(Swe,"STRONG",{});var cYr=s(Hte);mJe=r(cYr,"longformer"),cYr.forEach(t),gJe=r(Swe," \u2014 "),WS=n(Swe,"A",{href:!0});var fYr=s(WS);hJe=r(fYr,"LongformerConfig"),fYr.forEach(t),pJe=r(Swe," (Longformer model)"),Swe.forEach(t),uJe=i(L),xm=n(L,"LI",{});var Rwe=s(xm);Ute=n(Rwe,"STRONG",{});var mYr=s(Ute);_Je=r(mYr,"longt5"),mYr.forEach(t),bJe=r(Rwe," \u2014 "),QS=n(Rwe,"A",{href:!0});var gYr=s(QS);vJe=r(gYr,"LongT5Config"),gYr.forEach(t),FJe=r(Rwe," (LongT5 model)"),Rwe.forEach(t),TJe=i(L),$m=n(L,"LI",{});var Pwe=s($m);Jte=n(Pwe,"STRONG",{});var hYr=s(Jte);MJe=r(hYr,"luke"),hYr.forEach(t),EJe=r(Pwe," \u2014 "),HS=n(Pwe,"A",{href:!0});var pYr=s(HS);CJe=r(pYr,"LukeConfig"),pYr.forEach(t),wJe=r(Pwe," (LUKE model)"),Pwe.forEach(t),AJe=i(L),km=n(L,"LI",{});var Bwe=s(km);Yte=n(Bwe,"STRONG",{});var uYr=s(Yte);LJe=r(uYr,"lxmert"),uYr.forEach(t),yJe=r(Bwe," \u2014 "),US=n(Bwe,"A",{href:!0});var _Yr=s(US);xJe=r(_Yr,"LxmertConfig"),_Yr.forEach(t),$Je=r(Bwe," (LXMERT model)"),Bwe.forEach(t),kJe=i(L),Sm=n(L,"LI",{});var Iwe=s(Sm);Kte=n(Iwe,"STRONG",{});var bYr=s(Kte);SJe=r(bYr,"m2m_100"),bYr.forEach(t),RJe=r(Iwe," \u2014 "),JS=n(Iwe,"A",{href:!0});var vYr=s(JS);PJe=r(vYr,"M2M100Config"),vYr.forEach(t),BJe=r(Iwe," (M2M100 model)"),Iwe.forEach(t),IJe=i(L),Rm=n(L,"LI",{});var Nwe=s(Rm);Zte=n(Nwe,"STRONG",{});var FYr=s(Zte);NJe=r(FYr,"marian"),FYr.forEach(t),qJe=r(Nwe," \u2014 "),YS=n(Nwe,"A",{href:!0});var TYr=s(YS);jJe=r(TYr,"MarianConfig"),TYr.forEach(t),DJe=r(Nwe," (Marian model)"),Nwe.forEach(t),GJe=i(L),Pm=n(L,"LI",{});var qwe=s(Pm);eae=n(qwe,"STRONG",{});var MYr=s(eae);OJe=r(MYr,"maskformer"),MYr.forEach(t),VJe=r(qwe," \u2014 "),KS=n(qwe,"A",{href:!0});var EYr=s(KS);XJe=r(EYr,"MaskFormerConfig"),EYr.forEach(t),zJe=r(qwe," (MaskFormer model)"),qwe.forEach(t),WJe=i(L),Bm=n(L,"LI",{});var jwe=s(Bm);oae=n(jwe,"STRONG",{});var CYr=s(oae);QJe=r(CYr,"mbart"),CYr.forEach(t),HJe=r(jwe," \u2014 "),ZS=n(jwe,"A",{href:!0});var wYr=s(ZS);UJe=r(wYr,"MBartConfig"),wYr.forEach(t),JJe=r(jwe," (mBART model)"),jwe.forEach(t),YJe=i(L),Im=n(L,"LI",{});var Dwe=s(Im);rae=n(Dwe,"STRONG",{});var AYr=s(rae);KJe=r(AYr,"mctct"),AYr.forEach(t),ZJe=r(Dwe," \u2014 "),eR=n(Dwe,"A",{href:!0});var LYr=s(eR);eYe=r(LYr,"MCTCTConfig"),LYr.forEach(t),oYe=r(Dwe," (M-CTC-T model)"),Dwe.forEach(t),rYe=i(L),Nm=n(L,"LI",{});var Gwe=s(Nm);tae=n(Gwe,"STRONG",{});var yYr=s(tae);tYe=r(yYr,"megatron-bert"),yYr.forEach(t),aYe=r(Gwe," \u2014 "),oR=n(Gwe,"A",{href:!0});var xYr=s(oR);nYe=r(xYr,"MegatronBertConfig"),xYr.forEach(t),sYe=r(Gwe," (Megatron-BERT model)"),Gwe.forEach(t),lYe=i(L),qm=n(L,"LI",{});var Owe=s(qm);aae=n(Owe,"STRONG",{});var $Yr=s(aae);iYe=r($Yr,"mobilebert"),$Yr.forEach(t),dYe=r(Owe," \u2014 "),rR=n(Owe,"A",{href:!0});var kYr=s(rR);cYe=r(kYr,"MobileBertConfig"),kYr.forEach(t),fYe=r(Owe," (MobileBERT model)"),Owe.forEach(t),mYe=i(L),jm=n(L,"LI",{});var Vwe=s(jm);nae=n(Vwe,"STRONG",{});var SYr=s(nae);gYe=r(SYr,"mpnet"),SYr.forEach(t),hYe=r(Vwe," \u2014 "),tR=n(Vwe,"A",{href:!0});var RYr=s(tR);pYe=r(RYr,"MPNetConfig"),RYr.forEach(t),uYe=r(Vwe," (MPNet model)"),Vwe.forEach(t),_Ye=i(L),Dm=n(L,"LI",{});var Xwe=s(Dm);sae=n(Xwe,"STRONG",{});var PYr=s(sae);bYe=r(PYr,"mt5"),PYr.forEach(t),vYe=r(Xwe," \u2014 "),aR=n(Xwe,"A",{href:!0});var BYr=s(aR);FYe=r(BYr,"MT5Config"),BYr.forEach(t),TYe=r(Xwe," (MT5 model)"),Xwe.forEach(t),MYe=i(L),Gm=n(L,"LI",{});var zwe=s(Gm);lae=n(zwe,"STRONG",{});var IYr=s(lae);EYe=r(IYr,"nystromformer"),IYr.forEach(t),CYe=r(zwe," \u2014 "),nR=n(zwe,"A",{href:!0});var NYr=s(nR);wYe=r(NYr,"NystromformerConfig"),NYr.forEach(t),AYe=r(zwe," (Nystr\xF6mformer model)"),zwe.forEach(t),LYe=i(L),Om=n(L,"LI",{});var Wwe=s(Om);iae=n(Wwe,"STRONG",{});var qYr=s(iae);yYe=r(qYr,"openai-gpt"),qYr.forEach(t),xYe=r(Wwe," \u2014 "),sR=n(Wwe,"A",{href:!0});var jYr=s(sR);$Ye=r(jYr,"OpenAIGPTConfig"),jYr.forEach(t),kYe=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),SYe=i(L),Vm=n(L,"LI",{});var Qwe=s(Vm);dae=n(Qwe,"STRONG",{});var DYr=s(dae);RYe=r(DYr,"opt"),DYr.forEach(t),PYe=r(Qwe," \u2014 "),lR=n(Qwe,"A",{href:!0});var GYr=s(lR);BYe=r(GYr,"OPTConfig"),GYr.forEach(t),IYe=r(Qwe," (OPT model)"),Qwe.forEach(t),NYe=i(L),Xm=n(L,"LI",{});var Hwe=s(Xm);cae=n(Hwe,"STRONG",{});var OYr=s(cae);qYe=r(OYr,"pegasus"),OYr.forEach(t),jYe=r(Hwe," \u2014 "),iR=n(Hwe,"A",{href:!0});var VYr=s(iR);DYe=r(VYr,"PegasusConfig"),VYr.forEach(t),GYe=r(Hwe," (Pegasus model)"),Hwe.forEach(t),OYe=i(L),zm=n(L,"LI",{});var Uwe=s(zm);fae=n(Uwe,"STRONG",{});var XYr=s(fae);VYe=r(XYr,"perceiver"),XYr.forEach(t),XYe=r(Uwe," \u2014 "),dR=n(Uwe,"A",{href:!0});var zYr=s(dR);zYe=r(zYr,"PerceiverConfig"),zYr.forEach(t),WYe=r(Uwe," (Perceiver model)"),Uwe.forEach(t),QYe=i(L),Wm=n(L,"LI",{});var Jwe=s(Wm);mae=n(Jwe,"STRONG",{});var WYr=s(mae);HYe=r(WYr,"plbart"),WYr.forEach(t),UYe=r(Jwe," \u2014 "),cR=n(Jwe,"A",{href:!0});var QYr=s(cR);JYe=r(QYr,"PLBartConfig"),QYr.forEach(t),YYe=r(Jwe," (PLBart model)"),Jwe.forEach(t),KYe=i(L),Qm=n(L,"LI",{});var Ywe=s(Qm);gae=n(Ywe,"STRONG",{});var HYr=s(gae);ZYe=r(HYr,"poolformer"),HYr.forEach(t),eKe=r(Ywe," \u2014 "),fR=n(Ywe,"A",{href:!0});var UYr=s(fR);oKe=r(UYr,"PoolFormerConfig"),UYr.forEach(t),rKe=r(Ywe," (PoolFormer model)"),Ywe.forEach(t),tKe=i(L),Hm=n(L,"LI",{});var Kwe=s(Hm);hae=n(Kwe,"STRONG",{});var JYr=s(hae);aKe=r(JYr,"prophetnet"),JYr.forEach(t),nKe=r(Kwe," \u2014 "),mR=n(Kwe,"A",{href:!0});var YYr=s(mR);sKe=r(YYr,"ProphetNetConfig"),YYr.forEach(t),lKe=r(Kwe," (ProphetNet model)"),Kwe.forEach(t),iKe=i(L),Um=n(L,"LI",{});var Zwe=s(Um);pae=n(Zwe,"STRONG",{});var KYr=s(pae);dKe=r(KYr,"qdqbert"),KYr.forEach(t),cKe=r(Zwe," \u2014 "),gR=n(Zwe,"A",{href:!0});var ZYr=s(gR);fKe=r(ZYr,"QDQBertConfig"),ZYr.forEach(t),mKe=r(Zwe," (QDQBert model)"),Zwe.forEach(t),gKe=i(L),Jm=n(L,"LI",{});var eAe=s(Jm);uae=n(eAe,"STRONG",{});var eKr=s(uae);hKe=r(eKr,"rag"),eKr.forEach(t),pKe=r(eAe," \u2014 "),hR=n(eAe,"A",{href:!0});var oKr=s(hR);uKe=r(oKr,"RagConfig"),oKr.forEach(t),_Ke=r(eAe," (RAG model)"),eAe.forEach(t),bKe=i(L),Ym=n(L,"LI",{});var oAe=s(Ym);_ae=n(oAe,"STRONG",{});var rKr=s(_ae);vKe=r(rKr,"realm"),rKr.forEach(t),FKe=r(oAe," \u2014 "),pR=n(oAe,"A",{href:!0});var tKr=s(pR);TKe=r(tKr,"RealmConfig"),tKr.forEach(t),MKe=r(oAe," (REALM model)"),oAe.forEach(t),EKe=i(L),Km=n(L,"LI",{});var rAe=s(Km);bae=n(rAe,"STRONG",{});var aKr=s(bae);CKe=r(aKr,"reformer"),aKr.forEach(t),wKe=r(rAe," \u2014 "),uR=n(rAe,"A",{href:!0});var nKr=s(uR);AKe=r(nKr,"ReformerConfig"),nKr.forEach(t),LKe=r(rAe," (Reformer model)"),rAe.forEach(t),yKe=i(L),Zm=n(L,"LI",{});var tAe=s(Zm);vae=n(tAe,"STRONG",{});var sKr=s(vae);xKe=r(sKr,"regnet"),sKr.forEach(t),$Ke=r(tAe," \u2014 "),_R=n(tAe,"A",{href:!0});var lKr=s(_R);kKe=r(lKr,"RegNetConfig"),lKr.forEach(t),SKe=r(tAe," (RegNet model)"),tAe.forEach(t),RKe=i(L),eg=n(L,"LI",{});var aAe=s(eg);Fae=n(aAe,"STRONG",{});var iKr=s(Fae);PKe=r(iKr,"rembert"),iKr.forEach(t),BKe=r(aAe," \u2014 "),bR=n(aAe,"A",{href:!0});var dKr=s(bR);IKe=r(dKr,"RemBertConfig"),dKr.forEach(t),NKe=r(aAe," (RemBERT model)"),aAe.forEach(t),qKe=i(L),og=n(L,"LI",{});var nAe=s(og);Tae=n(nAe,"STRONG",{});var cKr=s(Tae);jKe=r(cKr,"resnet"),cKr.forEach(t),DKe=r(nAe," \u2014 "),vR=n(nAe,"A",{href:!0});var fKr=s(vR);GKe=r(fKr,"ResNetConfig"),fKr.forEach(t),OKe=r(nAe," (ResNet model)"),nAe.forEach(t),VKe=i(L),rg=n(L,"LI",{});var sAe=s(rg);Mae=n(sAe,"STRONG",{});var mKr=s(Mae);XKe=r(mKr,"retribert"),mKr.forEach(t),zKe=r(sAe," \u2014 "),FR=n(sAe,"A",{href:!0});var gKr=s(FR);WKe=r(gKr,"RetriBertConfig"),gKr.forEach(t),QKe=r(sAe," (RetriBERT model)"),sAe.forEach(t),HKe=i(L),tg=n(L,"LI",{});var lAe=s(tg);Eae=n(lAe,"STRONG",{});var hKr=s(Eae);UKe=r(hKr,"roberta"),hKr.forEach(t),JKe=r(lAe," \u2014 "),TR=n(lAe,"A",{href:!0});var pKr=s(TR);YKe=r(pKr,"RobertaConfig"),pKr.forEach(t),KKe=r(lAe," (RoBERTa model)"),lAe.forEach(t),ZKe=i(L),ag=n(L,"LI",{});var iAe=s(ag);Cae=n(iAe,"STRONG",{});var uKr=s(Cae);eZe=r(uKr,"roformer"),uKr.forEach(t),oZe=r(iAe," \u2014 "),MR=n(iAe,"A",{href:!0});var _Kr=s(MR);rZe=r(_Kr,"RoFormerConfig"),_Kr.forEach(t),tZe=r(iAe," (RoFormer model)"),iAe.forEach(t),aZe=i(L),ng=n(L,"LI",{});var dAe=s(ng);wae=n(dAe,"STRONG",{});var bKr=s(wae);nZe=r(bKr,"segformer"),bKr.forEach(t),sZe=r(dAe," \u2014 "),ER=n(dAe,"A",{href:!0});var vKr=s(ER);lZe=r(vKr,"SegformerConfig"),vKr.forEach(t),iZe=r(dAe," (SegFormer model)"),dAe.forEach(t),dZe=i(L),sg=n(L,"LI",{});var cAe=s(sg);Aae=n(cAe,"STRONG",{});var FKr=s(Aae);cZe=r(FKr,"sew"),FKr.forEach(t),fZe=r(cAe," \u2014 "),CR=n(cAe,"A",{href:!0});var TKr=s(CR);mZe=r(TKr,"SEWConfig"),TKr.forEach(t),gZe=r(cAe," (SEW model)"),cAe.forEach(t),hZe=i(L),lg=n(L,"LI",{});var fAe=s(lg);Lae=n(fAe,"STRONG",{});var MKr=s(Lae);pZe=r(MKr,"sew-d"),MKr.forEach(t),uZe=r(fAe," \u2014 "),wR=n(fAe,"A",{href:!0});var EKr=s(wR);_Ze=r(EKr,"SEWDConfig"),EKr.forEach(t),bZe=r(fAe," (SEW-D model)"),fAe.forEach(t),vZe=i(L),ig=n(L,"LI",{});var mAe=s(ig);yae=n(mAe,"STRONG",{});var CKr=s(yae);FZe=r(CKr,"speech-encoder-decoder"),CKr.forEach(t),TZe=r(mAe," \u2014 "),AR=n(mAe,"A",{href:!0});var wKr=s(AR);MZe=r(wKr,"SpeechEncoderDecoderConfig"),wKr.forEach(t),EZe=r(mAe," (Speech Encoder decoder model)"),mAe.forEach(t),CZe=i(L),dg=n(L,"LI",{});var gAe=s(dg);xae=n(gAe,"STRONG",{});var AKr=s(xae);wZe=r(AKr,"speech_to_text"),AKr.forEach(t),AZe=r(gAe," \u2014 "),LR=n(gAe,"A",{href:!0});var LKr=s(LR);LZe=r(LKr,"Speech2TextConfig"),LKr.forEach(t),yZe=r(gAe," (Speech2Text model)"),gAe.forEach(t),xZe=i(L),cg=n(L,"LI",{});var hAe=s(cg);$ae=n(hAe,"STRONG",{});var yKr=s($ae);$Ze=r(yKr,"speech_to_text_2"),yKr.forEach(t),kZe=r(hAe," \u2014 "),yR=n(hAe,"A",{href:!0});var xKr=s(yR);SZe=r(xKr,"Speech2Text2Config"),xKr.forEach(t),RZe=r(hAe," (Speech2Text2 model)"),hAe.forEach(t),PZe=i(L),fg=n(L,"LI",{});var pAe=s(fg);kae=n(pAe,"STRONG",{});var $Kr=s(kae);BZe=r($Kr,"splinter"),$Kr.forEach(t),IZe=r(pAe," \u2014 "),xR=n(pAe,"A",{href:!0});var kKr=s(xR);NZe=r(kKr,"SplinterConfig"),kKr.forEach(t),qZe=r(pAe," (Splinter model)"),pAe.forEach(t),jZe=i(L),mg=n(L,"LI",{});var uAe=s(mg);Sae=n(uAe,"STRONG",{});var SKr=s(Sae);DZe=r(SKr,"squeezebert"),SKr.forEach(t),GZe=r(uAe," \u2014 "),$R=n(uAe,"A",{href:!0});var RKr=s($R);OZe=r(RKr,"SqueezeBertConfig"),RKr.forEach(t),VZe=r(uAe," (SqueezeBERT model)"),uAe.forEach(t),XZe=i(L),gg=n(L,"LI",{});var _Ae=s(gg);Rae=n(_Ae,"STRONG",{});var PKr=s(Rae);zZe=r(PKr,"swin"),PKr.forEach(t),WZe=r(_Ae," \u2014 "),kR=n(_Ae,"A",{href:!0});var BKr=s(kR);QZe=r(BKr,"SwinConfig"),BKr.forEach(t),HZe=r(_Ae," (Swin Transformer model)"),_Ae.forEach(t),UZe=i(L),hg=n(L,"LI",{});var bAe=s(hg);Pae=n(bAe,"STRONG",{});var IKr=s(Pae);JZe=r(IKr,"t5"),IKr.forEach(t),YZe=r(bAe," \u2014 "),SR=n(bAe,"A",{href:!0});var NKr=s(SR);KZe=r(NKr,"T5Config"),NKr.forEach(t),ZZe=r(bAe," (T5 model)"),bAe.forEach(t),eeo=i(L),pg=n(L,"LI",{});var vAe=s(pg);Bae=n(vAe,"STRONG",{});var qKr=s(Bae);oeo=r(qKr,"tapas"),qKr.forEach(t),reo=r(vAe," \u2014 "),RR=n(vAe,"A",{href:!0});var jKr=s(RR);teo=r(jKr,"TapasConfig"),jKr.forEach(t),aeo=r(vAe," (TAPAS model)"),vAe.forEach(t),neo=i(L),ug=n(L,"LI",{});var FAe=s(ug);Iae=n(FAe,"STRONG",{});var DKr=s(Iae);seo=r(DKr,"trajectory_transformer"),DKr.forEach(t),leo=r(FAe," \u2014 "),PR=n(FAe,"A",{href:!0});var GKr=s(PR);ieo=r(GKr,"TrajectoryTransformerConfig"),GKr.forEach(t),deo=r(FAe," (Trajectory Transformer model)"),FAe.forEach(t),ceo=i(L),_g=n(L,"LI",{});var TAe=s(_g);Nae=n(TAe,"STRONG",{});var OKr=s(Nae);feo=r(OKr,"transfo-xl"),OKr.forEach(t),meo=r(TAe," \u2014 "),BR=n(TAe,"A",{href:!0});var VKr=s(BR);geo=r(VKr,"TransfoXLConfig"),VKr.forEach(t),heo=r(TAe," (Transformer-XL model)"),TAe.forEach(t),peo=i(L),bg=n(L,"LI",{});var MAe=s(bg);qae=n(MAe,"STRONG",{});var XKr=s(qae);ueo=r(XKr,"trocr"),XKr.forEach(t),_eo=r(MAe," \u2014 "),IR=n(MAe,"A",{href:!0});var zKr=s(IR);beo=r(zKr,"TrOCRConfig"),zKr.forEach(t),veo=r(MAe," (TrOCR model)"),MAe.forEach(t),Feo=i(L),vg=n(L,"LI",{});var EAe=s(vg);jae=n(EAe,"STRONG",{});var WKr=s(jae);Teo=r(WKr,"unispeech"),WKr.forEach(t),Meo=r(EAe," \u2014 "),NR=n(EAe,"A",{href:!0});var QKr=s(NR);Eeo=r(QKr,"UniSpeechConfig"),QKr.forEach(t),Ceo=r(EAe," (UniSpeech model)"),EAe.forEach(t),weo=i(L),Fg=n(L,"LI",{});var CAe=s(Fg);Dae=n(CAe,"STRONG",{});var HKr=s(Dae);Aeo=r(HKr,"unispeech-sat"),HKr.forEach(t),Leo=r(CAe," \u2014 "),qR=n(CAe,"A",{href:!0});var UKr=s(qR);yeo=r(UKr,"UniSpeechSatConfig"),UKr.forEach(t),xeo=r(CAe," (UniSpeechSat model)"),CAe.forEach(t),$eo=i(L),Tg=n(L,"LI",{});var wAe=s(Tg);Gae=n(wAe,"STRONG",{});var JKr=s(Gae);keo=r(JKr,"van"),JKr.forEach(t),Seo=r(wAe," \u2014 "),jR=n(wAe,"A",{href:!0});var YKr=s(jR);Reo=r(YKr,"VanConfig"),YKr.forEach(t),Peo=r(wAe," (VAN model)"),wAe.forEach(t),Beo=i(L),Mg=n(L,"LI",{});var AAe=s(Mg);Oae=n(AAe,"STRONG",{});var KKr=s(Oae);Ieo=r(KKr,"vilt"),KKr.forEach(t),Neo=r(AAe," \u2014 "),DR=n(AAe,"A",{href:!0});var ZKr=s(DR);qeo=r(ZKr,"ViltConfig"),ZKr.forEach(t),jeo=r(AAe," (ViLT model)"),AAe.forEach(t),Deo=i(L),Eg=n(L,"LI",{});var LAe=s(Eg);Vae=n(LAe,"STRONG",{});var eZr=s(Vae);Geo=r(eZr,"vision-encoder-decoder"),eZr.forEach(t),Oeo=r(LAe," \u2014 "),GR=n(LAe,"A",{href:!0});var oZr=s(GR);Veo=r(oZr,"VisionEncoderDecoderConfig"),oZr.forEach(t),Xeo=r(LAe," (Vision Encoder decoder model)"),LAe.forEach(t),zeo=i(L),Cg=n(L,"LI",{});var yAe=s(Cg);Xae=n(yAe,"STRONG",{});var rZr=s(Xae);Weo=r(rZr,"vision-text-dual-encoder"),rZr.forEach(t),Qeo=r(yAe," \u2014 "),OR=n(yAe,"A",{href:!0});var tZr=s(OR);Heo=r(tZr,"VisionTextDualEncoderConfig"),tZr.forEach(t),Ueo=r(yAe," (VisionTextDualEncoder model)"),yAe.forEach(t),Jeo=i(L),wg=n(L,"LI",{});var xAe=s(wg);zae=n(xAe,"STRONG",{});var aZr=s(zae);Yeo=r(aZr,"visual_bert"),aZr.forEach(t),Keo=r(xAe," \u2014 "),VR=n(xAe,"A",{href:!0});var nZr=s(VR);Zeo=r(nZr,"VisualBertConfig"),nZr.forEach(t),eoo=r(xAe," (VisualBERT model)"),xAe.forEach(t),ooo=i(L),Ag=n(L,"LI",{});var $Ae=s(Ag);Wae=n($Ae,"STRONG",{});var sZr=s(Wae);roo=r(sZr,"vit"),sZr.forEach(t),too=r($Ae," \u2014 "),XR=n($Ae,"A",{href:!0});var lZr=s(XR);aoo=r(lZr,"ViTConfig"),lZr.forEach(t),noo=r($Ae," (ViT model)"),$Ae.forEach(t),soo=i(L),Lg=n(L,"LI",{});var kAe=s(Lg);Qae=n(kAe,"STRONG",{});var iZr=s(Qae);loo=r(iZr,"vit_mae"),iZr.forEach(t),ioo=r(kAe," \u2014 "),zR=n(kAe,"A",{href:!0});var dZr=s(zR);doo=r(dZr,"ViTMAEConfig"),dZr.forEach(t),coo=r(kAe," (ViTMAE model)"),kAe.forEach(t),foo=i(L),yg=n(L,"LI",{});var SAe=s(yg);Hae=n(SAe,"STRONG",{});var cZr=s(Hae);moo=r(cZr,"wav2vec2"),cZr.forEach(t),goo=r(SAe," \u2014 "),WR=n(SAe,"A",{href:!0});var fZr=s(WR);hoo=r(fZr,"Wav2Vec2Config"),fZr.forEach(t),poo=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),uoo=i(L),xg=n(L,"LI",{});var RAe=s(xg);Uae=n(RAe,"STRONG",{});var mZr=s(Uae);_oo=r(mZr,"wav2vec2-conformer"),mZr.forEach(t),boo=r(RAe," \u2014 "),QR=n(RAe,"A",{href:!0});var gZr=s(QR);voo=r(gZr,"Wav2Vec2ConformerConfig"),gZr.forEach(t),Foo=r(RAe," (Wav2Vec2-Conformer model)"),RAe.forEach(t),Too=i(L),$g=n(L,"LI",{});var PAe=s($g);Jae=n(PAe,"STRONG",{});var hZr=s(Jae);Moo=r(hZr,"wavlm"),hZr.forEach(t),Eoo=r(PAe," \u2014 "),HR=n(PAe,"A",{href:!0});var pZr=s(HR);Coo=r(pZr,"WavLMConfig"),pZr.forEach(t),woo=r(PAe," (WavLM model)"),PAe.forEach(t),Aoo=i(L),kg=n(L,"LI",{});var BAe=s(kg);Yae=n(BAe,"STRONG",{});var uZr=s(Yae);Loo=r(uZr,"xglm"),uZr.forEach(t),yoo=r(BAe," \u2014 "),UR=n(BAe,"A",{href:!0});var _Zr=s(UR);xoo=r(_Zr,"XGLMConfig"),_Zr.forEach(t),$oo=r(BAe," (XGLM model)"),BAe.forEach(t),koo=i(L),Sg=n(L,"LI",{});var IAe=s(Sg);Kae=n(IAe,"STRONG",{});var bZr=s(Kae);Soo=r(bZr,"xlm"),bZr.forEach(t),Roo=r(IAe," \u2014 "),JR=n(IAe,"A",{href:!0});var vZr=s(JR);Poo=r(vZr,"XLMConfig"),vZr.forEach(t),Boo=r(IAe," (XLM model)"),IAe.forEach(t),Ioo=i(L),Rg=n(L,"LI",{});var NAe=s(Rg);Zae=n(NAe,"STRONG",{});var FZr=s(Zae);Noo=r(FZr,"xlm-prophetnet"),FZr.forEach(t),qoo=r(NAe," \u2014 "),YR=n(NAe,"A",{href:!0});var TZr=s(YR);joo=r(TZr,"XLMProphetNetConfig"),TZr.forEach(t),Doo=r(NAe," (XLM-ProphetNet model)"),NAe.forEach(t),Goo=i(L),Pg=n(L,"LI",{});var qAe=s(Pg);ene=n(qAe,"STRONG",{});var MZr=s(ene);Ooo=r(MZr,"xlm-roberta"),MZr.forEach(t),Voo=r(qAe," \u2014 "),KR=n(qAe,"A",{href:!0});var EZr=s(KR);Xoo=r(EZr,"XLMRobertaConfig"),EZr.forEach(t),zoo=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),Woo=i(L),Bg=n(L,"LI",{});var jAe=s(Bg);one=n(jAe,"STRONG",{});var CZr=s(one);Qoo=r(CZr,"xlm-roberta-xl"),CZr.forEach(t),Hoo=r(jAe," \u2014 "),ZR=n(jAe,"A",{href:!0});var wZr=s(ZR);Uoo=r(wZr,"XLMRobertaXLConfig"),wZr.forEach(t),Joo=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),Yoo=i(L),Ig=n(L,"LI",{});var DAe=s(Ig);rne=n(DAe,"STRONG",{});var AZr=s(rne);Koo=r(AZr,"xlnet"),AZr.forEach(t),Zoo=r(DAe," \u2014 "),eP=n(DAe,"A",{href:!0});var LZr=s(eP);ero=r(LZr,"XLNetConfig"),LZr.forEach(t),oro=r(DAe," (XLNet model)"),DAe.forEach(t),rro=i(L),Ng=n(L,"LI",{});var GAe=s(Ng);tne=n(GAe,"STRONG",{});var yZr=s(tne);tro=r(yZr,"yolos"),yZr.forEach(t),aro=r(GAe," \u2014 "),oP=n(GAe,"A",{href:!0});var xZr=s(oP);nro=r(xZr,"YolosConfig"),xZr.forEach(t),sro=r(GAe," (YOLOS model)"),GAe.forEach(t),lro=i(L),qg=n(L,"LI",{});var OAe=s(qg);ane=n(OAe,"STRONG",{});var $Zr=s(ane);iro=r($Zr,"yoso"),$Zr.forEach(t),dro=r(OAe," \u2014 "),rP=n(OAe,"A",{href:!0});var kZr=s(rP);cro=r(kZr,"YosoConfig"),kZr.forEach(t),fro=r(OAe," (YOSO model)"),OAe.forEach(t),L.forEach(t),mro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),gro=i(rt),Dg=n(rt,"DIV",{class:!0});var aVe=s(Dg);T(AL.$$.fragment,aVe),hro=i(aVe),nne=n(aVe,"P",{});var SZr=s(nne);pro=r(SZr,"Register a new configuration for this class."),SZr.forEach(t),aVe.forEach(t),rt.forEach(t),nGe=i(f),$i=n(f,"H2",{class:!0});var nVe=s($i);Gg=n(nVe,"A",{id:!0,class:!0,href:!0});var RZr=s(Gg);sne=n(RZr,"SPAN",{});var PZr=s(sne);T(LL.$$.fragment,PZr),PZr.forEach(t),RZr.forEach(t),uro=i(nVe),lne=n(nVe,"SPAN",{});var BZr=s(lne);_ro=r(BZr,"AutoTokenizer"),BZr.forEach(t),nVe.forEach(t),sGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(yL.$$.fragment,zs),bro=i(zs),xL=n(zs,"P",{});var sVe=s(xL);vro=r(sVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=n(sVe,"A",{href:!0});var IZr=s(tP);Fro=r(IZr,"AutoTokenizer.from_pretrained()"),IZr.forEach(t),Tro=r(sVe," class method."),sVe.forEach(t),Mro=i(zs),$L=n(zs,"P",{});var lVe=s($L);Ero=r(lVe,"This class cannot be instantiated directly using "),ine=n(lVe,"CODE",{});var NZr=s(ine);Cro=r(NZr,"__init__()"),NZr.forEach(t),wro=r(lVe," (throws an error)."),lVe.forEach(t),Aro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(kL.$$.fragment,Ws),Lro=i(Ws),dne=n(Ws,"P",{});var qZr=s(dne);yro=r(qZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qZr.forEach(t),xro=i(Ws),$a=n(Ws,"P",{});var vw=s($a);$ro=r(vw,"The tokenizer class to instantiate is selected based on the "),cne=n(vw,"CODE",{});var jZr=s(cne);kro=r(jZr,"model_type"),jZr.forEach(t),Sro=r(vw,` property of the config object (either
passed as an argument or loaded from `),fne=n(vw,"CODE",{});var DZr=s(fne);Rro=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),Pro=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=n(vw,"CODE",{});var GZr=s(mne);Bro=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),Iro=r(vw,":"),vw.forEach(t),Nro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var N$=s(Nn);gne=n(N$,"STRONG",{});var OZr=s(gne);qro=r(OZr,"albert"),OZr.forEach(t),jro=r(N$," \u2014 "),aP=n(N$,"A",{href:!0});var VZr=s(aP);Dro=r(VZr,"AlbertTokenizer"),VZr.forEach(t),Gro=r(N$," or "),nP=n(N$,"A",{href:!0});var XZr=s(nP);Oro=r(XZr,"AlbertTokenizerFast"),XZr.forEach(t),Vro=r(N$," (ALBERT model)"),N$.forEach(t),Xro=i(S),qn=n(S,"LI",{});var q$=s(qn);hne=n(q$,"STRONG",{});var zZr=s(hne);zro=r(zZr,"bart"),zZr.forEach(t),Wro=r(q$," \u2014 "),sP=n(q$,"A",{href:!0});var WZr=s(sP);Qro=r(WZr,"BartTokenizer"),WZr.forEach(t),Hro=r(q$," or "),lP=n(q$,"A",{href:!0});var QZr=s(lP);Uro=r(QZr,"BartTokenizerFast"),QZr.forEach(t),Jro=r(q$," (BART model)"),q$.forEach(t),Yro=i(S),jn=n(S,"LI",{});var j$=s(jn);pne=n(j$,"STRONG",{});var HZr=s(pne);Kro=r(HZr,"barthez"),HZr.forEach(t),Zro=r(j$," \u2014 "),iP=n(j$,"A",{href:!0});var UZr=s(iP);eto=r(UZr,"BarthezTokenizer"),UZr.forEach(t),oto=r(j$," or "),dP=n(j$,"A",{href:!0});var JZr=s(dP);rto=r(JZr,"BarthezTokenizerFast"),JZr.forEach(t),tto=r(j$," (BARThez model)"),j$.forEach(t),ato=i(S),Og=n(S,"LI",{});var VAe=s(Og);une=n(VAe,"STRONG",{});var YZr=s(une);nto=r(YZr,"bartpho"),YZr.forEach(t),sto=r(VAe," \u2014 "),cP=n(VAe,"A",{href:!0});var KZr=s(cP);lto=r(KZr,"BartphoTokenizer"),KZr.forEach(t),ito=r(VAe," (BARTpho model)"),VAe.forEach(t),dto=i(S),Dn=n(S,"LI",{});var D$=s(Dn);_ne=n(D$,"STRONG",{});var ZZr=s(_ne);cto=r(ZZr,"bert"),ZZr.forEach(t),fto=r(D$," \u2014 "),fP=n(D$,"A",{href:!0});var eet=s(fP);mto=r(eet,"BertTokenizer"),eet.forEach(t),gto=r(D$," or "),mP=n(D$,"A",{href:!0});var oet=s(mP);hto=r(oet,"BertTokenizerFast"),oet.forEach(t),pto=r(D$," (BERT model)"),D$.forEach(t),uto=i(S),Vg=n(S,"LI",{});var XAe=s(Vg);bne=n(XAe,"STRONG",{});var ret=s(bne);_to=r(ret,"bert-generation"),ret.forEach(t),bto=r(XAe," \u2014 "),gP=n(XAe,"A",{href:!0});var tet=s(gP);vto=r(tet,"BertGenerationTokenizer"),tet.forEach(t),Fto=r(XAe," (Bert Generation model)"),XAe.forEach(t),Tto=i(S),Xg=n(S,"LI",{});var zAe=s(Xg);vne=n(zAe,"STRONG",{});var aet=s(vne);Mto=r(aet,"bert-japanese"),aet.forEach(t),Eto=r(zAe," \u2014 "),hP=n(zAe,"A",{href:!0});var net=s(hP);Cto=r(net,"BertJapaneseTokenizer"),net.forEach(t),wto=r(zAe," (BertJapanese model)"),zAe.forEach(t),Ato=i(S),zg=n(S,"LI",{});var WAe=s(zg);Fne=n(WAe,"STRONG",{});var set=s(Fne);Lto=r(set,"bertweet"),set.forEach(t),yto=r(WAe," \u2014 "),pP=n(WAe,"A",{href:!0});var iet=s(pP);xto=r(iet,"BertweetTokenizer"),iet.forEach(t),$to=r(WAe," (BERTweet model)"),WAe.forEach(t),kto=i(S),Gn=n(S,"LI",{});var G$=s(Gn);Tne=n(G$,"STRONG",{});var det=s(Tne);Sto=r(det,"big_bird"),det.forEach(t),Rto=r(G$," \u2014 "),uP=n(G$,"A",{href:!0});var cet=s(uP);Pto=r(cet,"BigBirdTokenizer"),cet.forEach(t),Bto=r(G$," or "),_P=n(G$,"A",{href:!0});var fet=s(_P);Ito=r(fet,"BigBirdTokenizerFast"),fet.forEach(t),Nto=r(G$," (BigBird model)"),G$.forEach(t),qto=i(S),On=n(S,"LI",{});var O$=s(On);Mne=n(O$,"STRONG",{});var met=s(Mne);jto=r(met,"bigbird_pegasus"),met.forEach(t),Dto=r(O$," \u2014 "),bP=n(O$,"A",{href:!0});var get=s(bP);Gto=r(get,"PegasusTokenizer"),get.forEach(t),Oto=r(O$," or "),vP=n(O$,"A",{href:!0});var het=s(vP);Vto=r(het,"PegasusTokenizerFast"),het.forEach(t),Xto=r(O$," (BigBird-Pegasus model)"),O$.forEach(t),zto=i(S),Vn=n(S,"LI",{});var V$=s(Vn);Ene=n(V$,"STRONG",{});var pet=s(Ene);Wto=r(pet,"blenderbot"),pet.forEach(t),Qto=r(V$," \u2014 "),FP=n(V$,"A",{href:!0});var uet=s(FP);Hto=r(uet,"BlenderbotTokenizer"),uet.forEach(t),Uto=r(V$," or "),TP=n(V$,"A",{href:!0});var _et=s(TP);Jto=r(_et,"BlenderbotTokenizerFast"),_et.forEach(t),Yto=r(V$," (Blenderbot model)"),V$.forEach(t),Kto=i(S),Wg=n(S,"LI",{});var QAe=s(Wg);Cne=n(QAe,"STRONG",{});var bet=s(Cne);Zto=r(bet,"blenderbot-small"),bet.forEach(t),eao=r(QAe," \u2014 "),MP=n(QAe,"A",{href:!0});var vet=s(MP);oao=r(vet,"BlenderbotSmallTokenizer"),vet.forEach(t),rao=r(QAe," (BlenderbotSmall model)"),QAe.forEach(t),tao=i(S),Qg=n(S,"LI",{});var HAe=s(Qg);wne=n(HAe,"STRONG",{});var Fet=s(wne);aao=r(Fet,"bloom"),Fet.forEach(t),nao=r(HAe," \u2014 "),EP=n(HAe,"A",{href:!0});var Tet=s(EP);sao=r(Tet,"BloomTokenizerFast"),Tet.forEach(t),lao=r(HAe," (BLOOM model)"),HAe.forEach(t),iao=i(S),Hg=n(S,"LI",{});var UAe=s(Hg);Ane=n(UAe,"STRONG",{});var Met=s(Ane);dao=r(Met,"byt5"),Met.forEach(t),cao=r(UAe," \u2014 "),CP=n(UAe,"A",{href:!0});var Eet=s(CP);fao=r(Eet,"ByT5Tokenizer"),Eet.forEach(t),mao=r(UAe," (ByT5 model)"),UAe.forEach(t),gao=i(S),Xn=n(S,"LI",{});var X$=s(Xn);Lne=n(X$,"STRONG",{});var Cet=s(Lne);hao=r(Cet,"camembert"),Cet.forEach(t),pao=r(X$," \u2014 "),wP=n(X$,"A",{href:!0});var wet=s(wP);uao=r(wet,"CamembertTokenizer"),wet.forEach(t),_ao=r(X$," or "),AP=n(X$,"A",{href:!0});var Aet=s(AP);bao=r(Aet,"CamembertTokenizerFast"),Aet.forEach(t),vao=r(X$," (CamemBERT model)"),X$.forEach(t),Fao=i(S),Ug=n(S,"LI",{});var JAe=s(Ug);yne=n(JAe,"STRONG",{});var Let=s(yne);Tao=r(Let,"canine"),Let.forEach(t),Mao=r(JAe," \u2014 "),LP=n(JAe,"A",{href:!0});var yet=s(LP);Eao=r(yet,"CanineTokenizer"),yet.forEach(t),Cao=r(JAe," (CANINE model)"),JAe.forEach(t),wao=i(S),zn=n(S,"LI",{});var z$=s(zn);xne=n(z$,"STRONG",{});var xet=s(xne);Aao=r(xet,"clip"),xet.forEach(t),Lao=r(z$," \u2014 "),yP=n(z$,"A",{href:!0});var $et=s(yP);yao=r($et,"CLIPTokenizer"),$et.forEach(t),xao=r(z$," or "),xP=n(z$,"A",{href:!0});var ket=s(xP);$ao=r(ket,"CLIPTokenizerFast"),ket.forEach(t),kao=r(z$," (CLIP model)"),z$.forEach(t),Sao=i(S),Wn=n(S,"LI",{});var W$=s(Wn);$ne=n(W$,"STRONG",{});var Set=s($ne);Rao=r(Set,"convbert"),Set.forEach(t),Pao=r(W$," \u2014 "),$P=n(W$,"A",{href:!0});var Ret=s($P);Bao=r(Ret,"ConvBertTokenizer"),Ret.forEach(t),Iao=r(W$," or "),kP=n(W$,"A",{href:!0});var Pet=s(kP);Nao=r(Pet,"ConvBertTokenizerFast"),Pet.forEach(t),qao=r(W$," (ConvBERT model)"),W$.forEach(t),jao=i(S),Qn=n(S,"LI",{});var Q$=s(Qn);kne=n(Q$,"STRONG",{});var Bet=s(kne);Dao=r(Bet,"cpm"),Bet.forEach(t),Gao=r(Q$," \u2014 "),SP=n(Q$,"A",{href:!0});var Iet=s(SP);Oao=r(Iet,"CpmTokenizer"),Iet.forEach(t),Vao=r(Q$," or "),RP=n(Q$,"A",{href:!0});var Net=s(RP);Xao=r(Net,"CpmTokenizerFast"),Net.forEach(t),zao=r(Q$," (CPM model)"),Q$.forEach(t),Wao=i(S),Jg=n(S,"LI",{});var YAe=s(Jg);Sne=n(YAe,"STRONG",{});var qet=s(Sne);Qao=r(qet,"ctrl"),qet.forEach(t),Hao=r(YAe," \u2014 "),PP=n(YAe,"A",{href:!0});var jet=s(PP);Uao=r(jet,"CTRLTokenizer"),jet.forEach(t),Jao=r(YAe," (CTRL model)"),YAe.forEach(t),Yao=i(S),Hn=n(S,"LI",{});var H$=s(Hn);Rne=n(H$,"STRONG",{});var Det=s(Rne);Kao=r(Det,"data2vec-text"),Det.forEach(t),Zao=r(H$," \u2014 "),BP=n(H$,"A",{href:!0});var Get=s(BP);eno=r(Get,"RobertaTokenizer"),Get.forEach(t),ono=r(H$," or "),IP=n(H$,"A",{href:!0});var Oet=s(IP);rno=r(Oet,"RobertaTokenizerFast"),Oet.forEach(t),tno=r(H$," (Data2VecText model)"),H$.forEach(t),ano=i(S),Un=n(S,"LI",{});var U$=s(Un);Pne=n(U$,"STRONG",{});var Vet=s(Pne);nno=r(Vet,"deberta"),Vet.forEach(t),sno=r(U$," \u2014 "),NP=n(U$,"A",{href:!0});var Xet=s(NP);lno=r(Xet,"DebertaTokenizer"),Xet.forEach(t),ino=r(U$," or "),qP=n(U$,"A",{href:!0});var zet=s(qP);dno=r(zet,"DebertaTokenizerFast"),zet.forEach(t),cno=r(U$," (DeBERTa model)"),U$.forEach(t),fno=i(S),Jn=n(S,"LI",{});var J$=s(Jn);Bne=n(J$,"STRONG",{});var Wet=s(Bne);mno=r(Wet,"deberta-v2"),Wet.forEach(t),gno=r(J$," \u2014 "),jP=n(J$,"A",{href:!0});var Qet=s(jP);hno=r(Qet,"DebertaV2Tokenizer"),Qet.forEach(t),pno=r(J$," or "),DP=n(J$,"A",{href:!0});var Het=s(DP);uno=r(Het,"DebertaV2TokenizerFast"),Het.forEach(t),_no=r(J$," (DeBERTa-v2 model)"),J$.forEach(t),bno=i(S),Yn=n(S,"LI",{});var Y$=s(Yn);Ine=n(Y$,"STRONG",{});var Uet=s(Ine);vno=r(Uet,"distilbert"),Uet.forEach(t),Fno=r(Y$," \u2014 "),GP=n(Y$,"A",{href:!0});var Jet=s(GP);Tno=r(Jet,"DistilBertTokenizer"),Jet.forEach(t),Mno=r(Y$," or "),OP=n(Y$,"A",{href:!0});var Yet=s(OP);Eno=r(Yet,"DistilBertTokenizerFast"),Yet.forEach(t),Cno=r(Y$," (DistilBERT model)"),Y$.forEach(t),wno=i(S),Kn=n(S,"LI",{});var K$=s(Kn);Nne=n(K$,"STRONG",{});var Ket=s(Nne);Ano=r(Ket,"dpr"),Ket.forEach(t),Lno=r(K$," \u2014 "),VP=n(K$,"A",{href:!0});var Zet=s(VP);yno=r(Zet,"DPRQuestionEncoderTokenizer"),Zet.forEach(t),xno=r(K$," or "),XP=n(K$,"A",{href:!0});var eot=s(XP);$no=r(eot,"DPRQuestionEncoderTokenizerFast"),eot.forEach(t),kno=r(K$," (DPR model)"),K$.forEach(t),Sno=i(S),Zn=n(S,"LI",{});var Z$=s(Zn);qne=n(Z$,"STRONG",{});var oot=s(qne);Rno=r(oot,"electra"),oot.forEach(t),Pno=r(Z$," \u2014 "),zP=n(Z$,"A",{href:!0});var rot=s(zP);Bno=r(rot,"ElectraTokenizer"),rot.forEach(t),Ino=r(Z$," or "),WP=n(Z$,"A",{href:!0});var tot=s(WP);Nno=r(tot,"ElectraTokenizerFast"),tot.forEach(t),qno=r(Z$," (ELECTRA model)"),Z$.forEach(t),jno=i(S),Yg=n(S,"LI",{});var KAe=s(Yg);jne=n(KAe,"STRONG",{});var aot=s(jne);Dno=r(aot,"flaubert"),aot.forEach(t),Gno=r(KAe," \u2014 "),QP=n(KAe,"A",{href:!0});var not=s(QP);Ono=r(not,"FlaubertTokenizer"),not.forEach(t),Vno=r(KAe," (FlauBERT model)"),KAe.forEach(t),Xno=i(S),es=n(S,"LI",{});var ek=s(es);Dne=n(ek,"STRONG",{});var sot=s(Dne);zno=r(sot,"fnet"),sot.forEach(t),Wno=r(ek," \u2014 "),HP=n(ek,"A",{href:!0});var lot=s(HP);Qno=r(lot,"FNetTokenizer"),lot.forEach(t),Hno=r(ek," or "),UP=n(ek,"A",{href:!0});var iot=s(UP);Uno=r(iot,"FNetTokenizerFast"),iot.forEach(t),Jno=r(ek," (FNet model)"),ek.forEach(t),Yno=i(S),Kg=n(S,"LI",{});var ZAe=s(Kg);Gne=n(ZAe,"STRONG",{});var dot=s(Gne);Kno=r(dot,"fsmt"),dot.forEach(t),Zno=r(ZAe," \u2014 "),JP=n(ZAe,"A",{href:!0});var cot=s(JP);eso=r(cot,"FSMTTokenizer"),cot.forEach(t),oso=r(ZAe," (FairSeq Machine-Translation model)"),ZAe.forEach(t),rso=i(S),os=n(S,"LI",{});var ok=s(os);One=n(ok,"STRONG",{});var fot=s(One);tso=r(fot,"funnel"),fot.forEach(t),aso=r(ok," \u2014 "),YP=n(ok,"A",{href:!0});var mot=s(YP);nso=r(mot,"FunnelTokenizer"),mot.forEach(t),sso=r(ok," or "),KP=n(ok,"A",{href:!0});var got=s(KP);lso=r(got,"FunnelTokenizerFast"),got.forEach(t),iso=r(ok," (Funnel Transformer model)"),ok.forEach(t),dso=i(S),rs=n(S,"LI",{});var rk=s(rs);Vne=n(rk,"STRONG",{});var hot=s(Vne);cso=r(hot,"gpt2"),hot.forEach(t),fso=r(rk," \u2014 "),ZP=n(rk,"A",{href:!0});var pot=s(ZP);mso=r(pot,"GPT2Tokenizer"),pot.forEach(t),gso=r(rk," or "),eB=n(rk,"A",{href:!0});var uot=s(eB);hso=r(uot,"GPT2TokenizerFast"),uot.forEach(t),pso=r(rk," (OpenAI GPT-2 model)"),rk.forEach(t),uso=i(S),ts=n(S,"LI",{});var tk=s(ts);Xne=n(tk,"STRONG",{});var _ot=s(Xne);_so=r(_ot,"gpt_neo"),_ot.forEach(t),bso=r(tk," \u2014 "),oB=n(tk,"A",{href:!0});var bot=s(oB);vso=r(bot,"GPT2Tokenizer"),bot.forEach(t),Fso=r(tk," or "),rB=n(tk,"A",{href:!0});var vot=s(rB);Tso=r(vot,"GPT2TokenizerFast"),vot.forEach(t),Mso=r(tk," (GPT Neo model)"),tk.forEach(t),Eso=i(S),Zg=n(S,"LI",{});var eLe=s(Zg);zne=n(eLe,"STRONG",{});var Fot=s(zne);Cso=r(Fot,"gpt_neox"),Fot.forEach(t),wso=r(eLe," \u2014 "),tB=n(eLe,"A",{href:!0});var Tot=s(tB);Aso=r(Tot,"GPTNeoXTokenizerFast"),Tot.forEach(t),Lso=r(eLe," (GPT NeoX model)"),eLe.forEach(t),yso=i(S),as=n(S,"LI",{});var ak=s(as);Wne=n(ak,"STRONG",{});var Mot=s(Wne);xso=r(Mot,"gptj"),Mot.forEach(t),$so=r(ak," \u2014 "),aB=n(ak,"A",{href:!0});var Eot=s(aB);kso=r(Eot,"GPT2Tokenizer"),Eot.forEach(t),Sso=r(ak," or "),nB=n(ak,"A",{href:!0});var Cot=s(nB);Rso=r(Cot,"GPT2TokenizerFast"),Cot.forEach(t),Pso=r(ak," (GPT-J model)"),ak.forEach(t),Bso=i(S),ns=n(S,"LI",{});var nk=s(ns);Qne=n(nk,"STRONG",{});var wot=s(Qne);Iso=r(wot,"herbert"),wot.forEach(t),Nso=r(nk," \u2014 "),sB=n(nk,"A",{href:!0});var Aot=s(sB);qso=r(Aot,"HerbertTokenizer"),Aot.forEach(t),jso=r(nk," or "),lB=n(nk,"A",{href:!0});var Lot=s(lB);Dso=r(Lot,"HerbertTokenizerFast"),Lot.forEach(t),Gso=r(nk," (HerBERT model)"),nk.forEach(t),Oso=i(S),eh=n(S,"LI",{});var oLe=s(eh);Hne=n(oLe,"STRONG",{});var yot=s(Hne);Vso=r(yot,"hubert"),yot.forEach(t),Xso=r(oLe," \u2014 "),iB=n(oLe,"A",{href:!0});var xot=s(iB);zso=r(xot,"Wav2Vec2CTCTokenizer"),xot.forEach(t),Wso=r(oLe," (Hubert model)"),oLe.forEach(t),Qso=i(S),ss=n(S,"LI",{});var sk=s(ss);Une=n(sk,"STRONG",{});var $ot=s(Une);Hso=r($ot,"ibert"),$ot.forEach(t),Uso=r(sk," \u2014 "),dB=n(sk,"A",{href:!0});var kot=s(dB);Jso=r(kot,"RobertaTokenizer"),kot.forEach(t),Yso=r(sk," or "),cB=n(sk,"A",{href:!0});var Sot=s(cB);Kso=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Zso=r(sk," (I-BERT model)"),sk.forEach(t),elo=i(S),ls=n(S,"LI",{});var lk=s(ls);Jne=n(lk,"STRONG",{});var Rot=s(Jne);olo=r(Rot,"layoutlm"),Rot.forEach(t),rlo=r(lk," \u2014 "),fB=n(lk,"A",{href:!0});var Pot=s(fB);tlo=r(Pot,"LayoutLMTokenizer"),Pot.forEach(t),alo=r(lk," or "),mB=n(lk,"A",{href:!0});var Bot=s(mB);nlo=r(Bot,"LayoutLMTokenizerFast"),Bot.forEach(t),slo=r(lk," (LayoutLM model)"),lk.forEach(t),llo=i(S),is=n(S,"LI",{});var ik=s(is);Yne=n(ik,"STRONG",{});var Iot=s(Yne);ilo=r(Iot,"layoutlmv2"),Iot.forEach(t),dlo=r(ik," \u2014 "),gB=n(ik,"A",{href:!0});var Not=s(gB);clo=r(Not,"LayoutLMv2Tokenizer"),Not.forEach(t),flo=r(ik," or "),hB=n(ik,"A",{href:!0});var qot=s(hB);mlo=r(qot,"LayoutLMv2TokenizerFast"),qot.forEach(t),glo=r(ik," (LayoutLMv2 model)"),ik.forEach(t),hlo=i(S),ds=n(S,"LI",{});var dk=s(ds);Kne=n(dk,"STRONG",{});var jot=s(Kne);plo=r(jot,"layoutlmv3"),jot.forEach(t),ulo=r(dk," \u2014 "),pB=n(dk,"A",{href:!0});var Dot=s(pB);_lo=r(Dot,"LayoutLMv3Tokenizer"),Dot.forEach(t),blo=r(dk," or "),uB=n(dk,"A",{href:!0});var Got=s(uB);vlo=r(Got,"LayoutLMv3TokenizerFast"),Got.forEach(t),Flo=r(dk," (LayoutLMv3 model)"),dk.forEach(t),Tlo=i(S),cs=n(S,"LI",{});var ck=s(cs);Zne=n(ck,"STRONG",{});var Oot=s(Zne);Mlo=r(Oot,"layoutxlm"),Oot.forEach(t),Elo=r(ck," \u2014 "),_B=n(ck,"A",{href:!0});var Vot=s(_B);Clo=r(Vot,"LayoutXLMTokenizer"),Vot.forEach(t),wlo=r(ck," or "),bB=n(ck,"A",{href:!0});var Xot=s(bB);Alo=r(Xot,"LayoutXLMTokenizerFast"),Xot.forEach(t),Llo=r(ck," (LayoutXLM model)"),ck.forEach(t),ylo=i(S),fs=n(S,"LI",{});var fk=s(fs);ese=n(fk,"STRONG",{});var zot=s(ese);xlo=r(zot,"led"),zot.forEach(t),$lo=r(fk," \u2014 "),vB=n(fk,"A",{href:!0});var Wot=s(vB);klo=r(Wot,"LEDTokenizer"),Wot.forEach(t),Slo=r(fk," or "),FB=n(fk,"A",{href:!0});var Qot=s(FB);Rlo=r(Qot,"LEDTokenizerFast"),Qot.forEach(t),Plo=r(fk," (LED model)"),fk.forEach(t),Blo=i(S),ms=n(S,"LI",{});var mk=s(ms);ose=n(mk,"STRONG",{});var Hot=s(ose);Ilo=r(Hot,"longformer"),Hot.forEach(t),Nlo=r(mk," \u2014 "),TB=n(mk,"A",{href:!0});var Uot=s(TB);qlo=r(Uot,"LongformerTokenizer"),Uot.forEach(t),jlo=r(mk," or "),MB=n(mk,"A",{href:!0});var Jot=s(MB);Dlo=r(Jot,"LongformerTokenizerFast"),Jot.forEach(t),Glo=r(mk," (Longformer model)"),mk.forEach(t),Olo=i(S),gs=n(S,"LI",{});var gk=s(gs);rse=n(gk,"STRONG",{});var Yot=s(rse);Vlo=r(Yot,"longt5"),Yot.forEach(t),Xlo=r(gk," \u2014 "),EB=n(gk,"A",{href:!0});var Kot=s(EB);zlo=r(Kot,"T5Tokenizer"),Kot.forEach(t),Wlo=r(gk," or "),CB=n(gk,"A",{href:!0});var Zot=s(CB);Qlo=r(Zot,"T5TokenizerFast"),Zot.forEach(t),Hlo=r(gk," (LongT5 model)"),gk.forEach(t),Ulo=i(S),oh=n(S,"LI",{});var rLe=s(oh);tse=n(rLe,"STRONG",{});var ert=s(tse);Jlo=r(ert,"luke"),ert.forEach(t),Ylo=r(rLe," \u2014 "),wB=n(rLe,"A",{href:!0});var ort=s(wB);Klo=r(ort,"LukeTokenizer"),ort.forEach(t),Zlo=r(rLe," (LUKE model)"),rLe.forEach(t),eio=i(S),hs=n(S,"LI",{});var hk=s(hs);ase=n(hk,"STRONG",{});var rrt=s(ase);oio=r(rrt,"lxmert"),rrt.forEach(t),rio=r(hk," \u2014 "),AB=n(hk,"A",{href:!0});var trt=s(AB);tio=r(trt,"LxmertTokenizer"),trt.forEach(t),aio=r(hk," or "),LB=n(hk,"A",{href:!0});var art=s(LB);nio=r(art,"LxmertTokenizerFast"),art.forEach(t),sio=r(hk," (LXMERT model)"),hk.forEach(t),lio=i(S),rh=n(S,"LI",{});var tLe=s(rh);nse=n(tLe,"STRONG",{});var nrt=s(nse);iio=r(nrt,"m2m_100"),nrt.forEach(t),dio=r(tLe," \u2014 "),yB=n(tLe,"A",{href:!0});var srt=s(yB);cio=r(srt,"M2M100Tokenizer"),srt.forEach(t),fio=r(tLe," (M2M100 model)"),tLe.forEach(t),mio=i(S),th=n(S,"LI",{});var aLe=s(th);sse=n(aLe,"STRONG",{});var lrt=s(sse);gio=r(lrt,"marian"),lrt.forEach(t),hio=r(aLe," \u2014 "),xB=n(aLe,"A",{href:!0});var irt=s(xB);pio=r(irt,"MarianTokenizer"),irt.forEach(t),uio=r(aLe," (Marian model)"),aLe.forEach(t),_io=i(S),ps=n(S,"LI",{});var pk=s(ps);lse=n(pk,"STRONG",{});var drt=s(lse);bio=r(drt,"mbart"),drt.forEach(t),vio=r(pk," \u2014 "),$B=n(pk,"A",{href:!0});var crt=s($B);Fio=r(crt,"MBartTokenizer"),crt.forEach(t),Tio=r(pk," or "),kB=n(pk,"A",{href:!0});var frt=s(kB);Mio=r(frt,"MBartTokenizerFast"),frt.forEach(t),Eio=r(pk," (mBART model)"),pk.forEach(t),Cio=i(S),us=n(S,"LI",{});var uk=s(us);ise=n(uk,"STRONG",{});var mrt=s(ise);wio=r(mrt,"mbart50"),mrt.forEach(t),Aio=r(uk," \u2014 "),SB=n(uk,"A",{href:!0});var grt=s(SB);Lio=r(grt,"MBart50Tokenizer"),grt.forEach(t),yio=r(uk," or "),RB=n(uk,"A",{href:!0});var hrt=s(RB);xio=r(hrt,"MBart50TokenizerFast"),hrt.forEach(t),$io=r(uk," (mBART-50 model)"),uk.forEach(t),kio=i(S),_s=n(S,"LI",{});var _k=s(_s);dse=n(_k,"STRONG",{});var prt=s(dse);Sio=r(prt,"megatron-bert"),prt.forEach(t),Rio=r(_k," \u2014 "),PB=n(_k,"A",{href:!0});var urt=s(PB);Pio=r(urt,"BertTokenizer"),urt.forEach(t),Bio=r(_k," or "),BB=n(_k,"A",{href:!0});var _rt=s(BB);Iio=r(_rt,"BertTokenizerFast"),_rt.forEach(t),Nio=r(_k," (Megatron-BERT model)"),_k.forEach(t),qio=i(S),ah=n(S,"LI",{});var nLe=s(ah);cse=n(nLe,"STRONG",{});var brt=s(cse);jio=r(brt,"mluke"),brt.forEach(t),Dio=r(nLe," \u2014 "),IB=n(nLe,"A",{href:!0});var vrt=s(IB);Gio=r(vrt,"MLukeTokenizer"),vrt.forEach(t),Oio=r(nLe," (mLUKE model)"),nLe.forEach(t),Vio=i(S),bs=n(S,"LI",{});var bk=s(bs);fse=n(bk,"STRONG",{});var Frt=s(fse);Xio=r(Frt,"mobilebert"),Frt.forEach(t),zio=r(bk," \u2014 "),NB=n(bk,"A",{href:!0});var Trt=s(NB);Wio=r(Trt,"MobileBertTokenizer"),Trt.forEach(t),Qio=r(bk," or "),qB=n(bk,"A",{href:!0});var Mrt=s(qB);Hio=r(Mrt,"MobileBertTokenizerFast"),Mrt.forEach(t),Uio=r(bk," (MobileBERT model)"),bk.forEach(t),Jio=i(S),vs=n(S,"LI",{});var vk=s(vs);mse=n(vk,"STRONG",{});var Ert=s(mse);Yio=r(Ert,"mpnet"),Ert.forEach(t),Kio=r(vk," \u2014 "),jB=n(vk,"A",{href:!0});var Crt=s(jB);Zio=r(Crt,"MPNetTokenizer"),Crt.forEach(t),edo=r(vk," or "),DB=n(vk,"A",{href:!0});var wrt=s(DB);odo=r(wrt,"MPNetTokenizerFast"),wrt.forEach(t),rdo=r(vk," (MPNet model)"),vk.forEach(t),tdo=i(S),Fs=n(S,"LI",{});var Fk=s(Fs);gse=n(Fk,"STRONG",{});var Art=s(gse);ado=r(Art,"mt5"),Art.forEach(t),ndo=r(Fk," \u2014 "),GB=n(Fk,"A",{href:!0});var Lrt=s(GB);sdo=r(Lrt,"MT5Tokenizer"),Lrt.forEach(t),ldo=r(Fk," or "),OB=n(Fk,"A",{href:!0});var yrt=s(OB);ido=r(yrt,"MT5TokenizerFast"),yrt.forEach(t),ddo=r(Fk," (MT5 model)"),Fk.forEach(t),cdo=i(S),Ts=n(S,"LI",{});var Tk=s(Ts);hse=n(Tk,"STRONG",{});var xrt=s(hse);fdo=r(xrt,"nystromformer"),xrt.forEach(t),mdo=r(Tk," \u2014 "),VB=n(Tk,"A",{href:!0});var $rt=s(VB);gdo=r($rt,"AlbertTokenizer"),$rt.forEach(t),hdo=r(Tk," or "),XB=n(Tk,"A",{href:!0});var krt=s(XB);pdo=r(krt,"AlbertTokenizerFast"),krt.forEach(t),udo=r(Tk," (Nystr\xF6mformer model)"),Tk.forEach(t),_do=i(S),Ms=n(S,"LI",{});var Mk=s(Ms);pse=n(Mk,"STRONG",{});var Srt=s(pse);bdo=r(Srt,"openai-gpt"),Srt.forEach(t),vdo=r(Mk," \u2014 "),zB=n(Mk,"A",{href:!0});var Rrt=s(zB);Fdo=r(Rrt,"OpenAIGPTTokenizer"),Rrt.forEach(t),Tdo=r(Mk," or "),WB=n(Mk,"A",{href:!0});var Prt=s(WB);Mdo=r(Prt,"OpenAIGPTTokenizerFast"),Prt.forEach(t),Edo=r(Mk," (OpenAI GPT model)"),Mk.forEach(t),Cdo=i(S),nh=n(S,"LI",{});var sLe=s(nh);use=n(sLe,"STRONG",{});var Brt=s(use);wdo=r(Brt,"opt"),Brt.forEach(t),Ado=r(sLe," \u2014 "),QB=n(sLe,"A",{href:!0});var Irt=s(QB);Ldo=r(Irt,"GPT2Tokenizer"),Irt.forEach(t),ydo=r(sLe," (OPT model)"),sLe.forEach(t),xdo=i(S),Es=n(S,"LI",{});var Ek=s(Es);_se=n(Ek,"STRONG",{});var Nrt=s(_se);$do=r(Nrt,"pegasus"),Nrt.forEach(t),kdo=r(Ek," \u2014 "),HB=n(Ek,"A",{href:!0});var qrt=s(HB);Sdo=r(qrt,"PegasusTokenizer"),qrt.forEach(t),Rdo=r(Ek," or "),UB=n(Ek,"A",{href:!0});var jrt=s(UB);Pdo=r(jrt,"PegasusTokenizerFast"),jrt.forEach(t),Bdo=r(Ek," (Pegasus model)"),Ek.forEach(t),Ido=i(S),sh=n(S,"LI",{});var lLe=s(sh);bse=n(lLe,"STRONG",{});var Drt=s(bse);Ndo=r(Drt,"perceiver"),Drt.forEach(t),qdo=r(lLe," \u2014 "),JB=n(lLe,"A",{href:!0});var Grt=s(JB);jdo=r(Grt,"PerceiverTokenizer"),Grt.forEach(t),Ddo=r(lLe," (Perceiver model)"),lLe.forEach(t),Gdo=i(S),lh=n(S,"LI",{});var iLe=s(lh);vse=n(iLe,"STRONG",{});var Ort=s(vse);Odo=r(Ort,"phobert"),Ort.forEach(t),Vdo=r(iLe," \u2014 "),YB=n(iLe,"A",{href:!0});var Vrt=s(YB);Xdo=r(Vrt,"PhobertTokenizer"),Vrt.forEach(t),zdo=r(iLe," (PhoBERT model)"),iLe.forEach(t),Wdo=i(S),ih=n(S,"LI",{});var dLe=s(ih);Fse=n(dLe,"STRONG",{});var Xrt=s(Fse);Qdo=r(Xrt,"plbart"),Xrt.forEach(t),Hdo=r(dLe," \u2014 "),KB=n(dLe,"A",{href:!0});var zrt=s(KB);Udo=r(zrt,"PLBartTokenizer"),zrt.forEach(t),Jdo=r(dLe," (PLBart model)"),dLe.forEach(t),Ydo=i(S),dh=n(S,"LI",{});var cLe=s(dh);Tse=n(cLe,"STRONG",{});var Wrt=s(Tse);Kdo=r(Wrt,"prophetnet"),Wrt.forEach(t),Zdo=r(cLe," \u2014 "),ZB=n(cLe,"A",{href:!0});var Qrt=s(ZB);eco=r(Qrt,"ProphetNetTokenizer"),Qrt.forEach(t),oco=r(cLe," (ProphetNet model)"),cLe.forEach(t),rco=i(S),Cs=n(S,"LI",{});var Ck=s(Cs);Mse=n(Ck,"STRONG",{});var Hrt=s(Mse);tco=r(Hrt,"qdqbert"),Hrt.forEach(t),aco=r(Ck," \u2014 "),eI=n(Ck,"A",{href:!0});var Urt=s(eI);nco=r(Urt,"BertTokenizer"),Urt.forEach(t),sco=r(Ck," or "),oI=n(Ck,"A",{href:!0});var Jrt=s(oI);lco=r(Jrt,"BertTokenizerFast"),Jrt.forEach(t),ico=r(Ck," (QDQBert model)"),Ck.forEach(t),dco=i(S),ch=n(S,"LI",{});var fLe=s(ch);Ese=n(fLe,"STRONG",{});var Yrt=s(Ese);cco=r(Yrt,"rag"),Yrt.forEach(t),fco=r(fLe," \u2014 "),rI=n(fLe,"A",{href:!0});var Krt=s(rI);mco=r(Krt,"RagTokenizer"),Krt.forEach(t),gco=r(fLe," (RAG model)"),fLe.forEach(t),hco=i(S),ws=n(S,"LI",{});var wk=s(ws);Cse=n(wk,"STRONG",{});var Zrt=s(Cse);pco=r(Zrt,"realm"),Zrt.forEach(t),uco=r(wk," \u2014 "),tI=n(wk,"A",{href:!0});var ett=s(tI);_co=r(ett,"RealmTokenizer"),ett.forEach(t),bco=r(wk," or "),aI=n(wk,"A",{href:!0});var ott=s(aI);vco=r(ott,"RealmTokenizerFast"),ott.forEach(t),Fco=r(wk," (REALM model)"),wk.forEach(t),Tco=i(S),As=n(S,"LI",{});var Ak=s(As);wse=n(Ak,"STRONG",{});var rtt=s(wse);Mco=r(rtt,"reformer"),rtt.forEach(t),Eco=r(Ak," \u2014 "),nI=n(Ak,"A",{href:!0});var ttt=s(nI);Cco=r(ttt,"ReformerTokenizer"),ttt.forEach(t),wco=r(Ak," or "),sI=n(Ak,"A",{href:!0});var att=s(sI);Aco=r(att,"ReformerTokenizerFast"),att.forEach(t),Lco=r(Ak," (Reformer model)"),Ak.forEach(t),yco=i(S),Ls=n(S,"LI",{});var Lk=s(Ls);Ase=n(Lk,"STRONG",{});var ntt=s(Ase);xco=r(ntt,"rembert"),ntt.forEach(t),$co=r(Lk," \u2014 "),lI=n(Lk,"A",{href:!0});var stt=s(lI);kco=r(stt,"RemBertTokenizer"),stt.forEach(t),Sco=r(Lk," or "),iI=n(Lk,"A",{href:!0});var ltt=s(iI);Rco=r(ltt,"RemBertTokenizerFast"),ltt.forEach(t),Pco=r(Lk," (RemBERT model)"),Lk.forEach(t),Bco=i(S),ys=n(S,"LI",{});var yk=s(ys);Lse=n(yk,"STRONG",{});var itt=s(Lse);Ico=r(itt,"retribert"),itt.forEach(t),Nco=r(yk," \u2014 "),dI=n(yk,"A",{href:!0});var dtt=s(dI);qco=r(dtt,"RetriBertTokenizer"),dtt.forEach(t),jco=r(yk," or "),cI=n(yk,"A",{href:!0});var ctt=s(cI);Dco=r(ctt,"RetriBertTokenizerFast"),ctt.forEach(t),Gco=r(yk," (RetriBERT model)"),yk.forEach(t),Oco=i(S),xs=n(S,"LI",{});var xk=s(xs);yse=n(xk,"STRONG",{});var ftt=s(yse);Vco=r(ftt,"roberta"),ftt.forEach(t),Xco=r(xk," \u2014 "),fI=n(xk,"A",{href:!0});var mtt=s(fI);zco=r(mtt,"RobertaTokenizer"),mtt.forEach(t),Wco=r(xk," or "),mI=n(xk,"A",{href:!0});var gtt=s(mI);Qco=r(gtt,"RobertaTokenizerFast"),gtt.forEach(t),Hco=r(xk," (RoBERTa model)"),xk.forEach(t),Uco=i(S),$s=n(S,"LI",{});var $k=s($s);xse=n($k,"STRONG",{});var htt=s(xse);Jco=r(htt,"roformer"),htt.forEach(t),Yco=r($k," \u2014 "),gI=n($k,"A",{href:!0});var ptt=s(gI);Kco=r(ptt,"RoFormerTokenizer"),ptt.forEach(t),Zco=r($k," or "),hI=n($k,"A",{href:!0});var utt=s(hI);efo=r(utt,"RoFormerTokenizerFast"),utt.forEach(t),ofo=r($k," (RoFormer model)"),$k.forEach(t),rfo=i(S),fh=n(S,"LI",{});var mLe=s(fh);$se=n(mLe,"STRONG",{});var _tt=s($se);tfo=r(_tt,"speech_to_text"),_tt.forEach(t),afo=r(mLe," \u2014 "),pI=n(mLe,"A",{href:!0});var btt=s(pI);nfo=r(btt,"Speech2TextTokenizer"),btt.forEach(t),sfo=r(mLe," (Speech2Text model)"),mLe.forEach(t),lfo=i(S),mh=n(S,"LI",{});var gLe=s(mh);kse=n(gLe,"STRONG",{});var vtt=s(kse);ifo=r(vtt,"speech_to_text_2"),vtt.forEach(t),dfo=r(gLe," \u2014 "),uI=n(gLe,"A",{href:!0});var Ftt=s(uI);cfo=r(Ftt,"Speech2Text2Tokenizer"),Ftt.forEach(t),ffo=r(gLe," (Speech2Text2 model)"),gLe.forEach(t),mfo=i(S),ks=n(S,"LI",{});var kk=s(ks);Sse=n(kk,"STRONG",{});var Ttt=s(Sse);gfo=r(Ttt,"splinter"),Ttt.forEach(t),hfo=r(kk," \u2014 "),_I=n(kk,"A",{href:!0});var Mtt=s(_I);pfo=r(Mtt,"SplinterTokenizer"),Mtt.forEach(t),ufo=r(kk," or "),bI=n(kk,"A",{href:!0});var Ett=s(bI);_fo=r(Ett,"SplinterTokenizerFast"),Ett.forEach(t),bfo=r(kk," (Splinter model)"),kk.forEach(t),vfo=i(S),Ss=n(S,"LI",{});var Sk=s(Ss);Rse=n(Sk,"STRONG",{});var Ctt=s(Rse);Ffo=r(Ctt,"squeezebert"),Ctt.forEach(t),Tfo=r(Sk," \u2014 "),vI=n(Sk,"A",{href:!0});var wtt=s(vI);Mfo=r(wtt,"SqueezeBertTokenizer"),wtt.forEach(t),Efo=r(Sk," or "),FI=n(Sk,"A",{href:!0});var Att=s(FI);Cfo=r(Att,"SqueezeBertTokenizerFast"),Att.forEach(t),wfo=r(Sk," (SqueezeBERT model)"),Sk.forEach(t),Afo=i(S),Rs=n(S,"LI",{});var Rk=s(Rs);Pse=n(Rk,"STRONG",{});var Ltt=s(Pse);Lfo=r(Ltt,"t5"),Ltt.forEach(t),yfo=r(Rk," \u2014 "),TI=n(Rk,"A",{href:!0});var ytt=s(TI);xfo=r(ytt,"T5Tokenizer"),ytt.forEach(t),$fo=r(Rk," or "),MI=n(Rk,"A",{href:!0});var xtt=s(MI);kfo=r(xtt,"T5TokenizerFast"),xtt.forEach(t),Sfo=r(Rk," (T5 model)"),Rk.forEach(t),Rfo=i(S),gh=n(S,"LI",{});var hLe=s(gh);Bse=n(hLe,"STRONG",{});var $tt=s(Bse);Pfo=r($tt,"tapas"),$tt.forEach(t),Bfo=r(hLe," \u2014 "),EI=n(hLe,"A",{href:!0});var ktt=s(EI);Ifo=r(ktt,"TapasTokenizer"),ktt.forEach(t),Nfo=r(hLe," (TAPAS model)"),hLe.forEach(t),qfo=i(S),hh=n(S,"LI",{});var pLe=s(hh);Ise=n(pLe,"STRONG",{});var Stt=s(Ise);jfo=r(Stt,"tapex"),Stt.forEach(t),Dfo=r(pLe," \u2014 "),CI=n(pLe,"A",{href:!0});var Rtt=s(CI);Gfo=r(Rtt,"TapexTokenizer"),Rtt.forEach(t),Ofo=r(pLe," (TAPEX model)"),pLe.forEach(t),Vfo=i(S),ph=n(S,"LI",{});var uLe=s(ph);Nse=n(uLe,"STRONG",{});var Ptt=s(Nse);Xfo=r(Ptt,"transfo-xl"),Ptt.forEach(t),zfo=r(uLe," \u2014 "),wI=n(uLe,"A",{href:!0});var Btt=s(wI);Wfo=r(Btt,"TransfoXLTokenizer"),Btt.forEach(t),Qfo=r(uLe," (Transformer-XL model)"),uLe.forEach(t),Hfo=i(S),Ps=n(S,"LI",{});var Pk=s(Ps);qse=n(Pk,"STRONG",{});var Itt=s(qse);Ufo=r(Itt,"vilt"),Itt.forEach(t),Jfo=r(Pk," \u2014 "),AI=n(Pk,"A",{href:!0});var Ntt=s(AI);Yfo=r(Ntt,"BertTokenizer"),Ntt.forEach(t),Kfo=r(Pk," or "),LI=n(Pk,"A",{href:!0});var qtt=s(LI);Zfo=r(qtt,"BertTokenizerFast"),qtt.forEach(t),emo=r(Pk," (ViLT model)"),Pk.forEach(t),omo=i(S),Bs=n(S,"LI",{});var Bk=s(Bs);jse=n(Bk,"STRONG",{});var jtt=s(jse);rmo=r(jtt,"visual_bert"),jtt.forEach(t),tmo=r(Bk," \u2014 "),yI=n(Bk,"A",{href:!0});var Dtt=s(yI);amo=r(Dtt,"BertTokenizer"),Dtt.forEach(t),nmo=r(Bk," or "),xI=n(Bk,"A",{href:!0});var Gtt=s(xI);smo=r(Gtt,"BertTokenizerFast"),Gtt.forEach(t),lmo=r(Bk," (VisualBERT model)"),Bk.forEach(t),imo=i(S),uh=n(S,"LI",{});var _Le=s(uh);Dse=n(_Le,"STRONG",{});var Ott=s(Dse);dmo=r(Ott,"wav2vec2"),Ott.forEach(t),cmo=r(_Le," \u2014 "),$I=n(_Le,"A",{href:!0});var Vtt=s($I);fmo=r(Vtt,"Wav2Vec2CTCTokenizer"),Vtt.forEach(t),mmo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),gmo=i(S),_h=n(S,"LI",{});var bLe=s(_h);Gse=n(bLe,"STRONG",{});var Xtt=s(Gse);hmo=r(Xtt,"wav2vec2-conformer"),Xtt.forEach(t),pmo=r(bLe," \u2014 "),kI=n(bLe,"A",{href:!0});var ztt=s(kI);umo=r(ztt,"Wav2Vec2CTCTokenizer"),ztt.forEach(t),_mo=r(bLe," (Wav2Vec2-Conformer model)"),bLe.forEach(t),bmo=i(S),bh=n(S,"LI",{});var vLe=s(bh);Ose=n(vLe,"STRONG",{});var Wtt=s(Ose);vmo=r(Wtt,"wav2vec2_phoneme"),Wtt.forEach(t),Fmo=r(vLe," \u2014 "),SI=n(vLe,"A",{href:!0});var Qtt=s(SI);Tmo=r(Qtt,"Wav2Vec2PhonemeCTCTokenizer"),Qtt.forEach(t),Mmo=r(vLe," (Wav2Vec2Phoneme model)"),vLe.forEach(t),Emo=i(S),Is=n(S,"LI",{});var Ik=s(Is);Vse=n(Ik,"STRONG",{});var Htt=s(Vse);Cmo=r(Htt,"xglm"),Htt.forEach(t),wmo=r(Ik," \u2014 "),RI=n(Ik,"A",{href:!0});var Utt=s(RI);Amo=r(Utt,"XGLMTokenizer"),Utt.forEach(t),Lmo=r(Ik," or "),PI=n(Ik,"A",{href:!0});var Jtt=s(PI);ymo=r(Jtt,"XGLMTokenizerFast"),Jtt.forEach(t),xmo=r(Ik," (XGLM model)"),Ik.forEach(t),$mo=i(S),vh=n(S,"LI",{});var FLe=s(vh);Xse=n(FLe,"STRONG",{});var Ytt=s(Xse);kmo=r(Ytt,"xlm"),Ytt.forEach(t),Smo=r(FLe," \u2014 "),BI=n(FLe,"A",{href:!0});var Ktt=s(BI);Rmo=r(Ktt,"XLMTokenizer"),Ktt.forEach(t),Pmo=r(FLe," (XLM model)"),FLe.forEach(t),Bmo=i(S),Fh=n(S,"LI",{});var TLe=s(Fh);zse=n(TLe,"STRONG",{});var Ztt=s(zse);Imo=r(Ztt,"xlm-prophetnet"),Ztt.forEach(t),Nmo=r(TLe," \u2014 "),II=n(TLe,"A",{href:!0});var eat=s(II);qmo=r(eat,"XLMProphetNetTokenizer"),eat.forEach(t),jmo=r(TLe," (XLM-ProphetNet model)"),TLe.forEach(t),Dmo=i(S),Ns=n(S,"LI",{});var Nk=s(Ns);Wse=n(Nk,"STRONG",{});var oat=s(Wse);Gmo=r(oat,"xlm-roberta"),oat.forEach(t),Omo=r(Nk," \u2014 "),NI=n(Nk,"A",{href:!0});var rat=s(NI);Vmo=r(rat,"XLMRobertaTokenizer"),rat.forEach(t),Xmo=r(Nk," or "),qI=n(Nk,"A",{href:!0});var tat=s(qI);zmo=r(tat,"XLMRobertaTokenizerFast"),tat.forEach(t),Wmo=r(Nk," (XLM-RoBERTa model)"),Nk.forEach(t),Qmo=i(S),qs=n(S,"LI",{});var qk=s(qs);Qse=n(qk,"STRONG",{});var aat=s(Qse);Hmo=r(aat,"xlm-roberta-xl"),aat.forEach(t),Umo=r(qk," \u2014 "),jI=n(qk,"A",{href:!0});var nat=s(jI);Jmo=r(nat,"RobertaTokenizer"),nat.forEach(t),Ymo=r(qk," or "),DI=n(qk,"A",{href:!0});var sat=s(DI);Kmo=r(sat,"RobertaTokenizerFast"),sat.forEach(t),Zmo=r(qk," (XLM-RoBERTa-XL model)"),qk.forEach(t),ego=i(S),js=n(S,"LI",{});var jk=s(js);Hse=n(jk,"STRONG",{});var lat=s(Hse);ogo=r(lat,"xlnet"),lat.forEach(t),rgo=r(jk," \u2014 "),GI=n(jk,"A",{href:!0});var iat=s(GI);tgo=r(iat,"XLNetTokenizer"),iat.forEach(t),ago=r(jk," or "),OI=n(jk,"A",{href:!0});var dat=s(OI);ngo=r(dat,"XLNetTokenizerFast"),dat.forEach(t),sgo=r(jk," (XLNet model)"),jk.forEach(t),lgo=i(S),Ds=n(S,"LI",{});var Dk=s(Ds);Use=n(Dk,"STRONG",{});var cat=s(Use);igo=r(cat,"yoso"),cat.forEach(t),dgo=r(Dk," \u2014 "),VI=n(Dk,"A",{href:!0});var fat=s(VI);cgo=r(fat,"AlbertTokenizer"),fat.forEach(t),fgo=r(Dk," or "),XI=n(Dk,"A",{href:!0});var mat=s(XI);mgo=r(mat,"AlbertTokenizerFast"),mat.forEach(t),ggo=r(Dk," (YOSO model)"),Dk.forEach(t),S.forEach(t),hgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),pgo=i(zs),Mh=n(zs,"DIV",{class:!0});var iVe=s(Mh);T(SL.$$.fragment,iVe),ugo=i(iVe),Jse=n(iVe,"P",{});var gat=s(Jse);_go=r(gat,"Register a new tokenizer in this mapping."),gat.forEach(t),iVe.forEach(t),zs.forEach(t),lGe=i(f),ki=n(f,"H2",{class:!0});var dVe=s(ki);Eh=n(dVe,"A",{id:!0,class:!0,href:!0});var hat=s(Eh);Yse=n(hat,"SPAN",{});var pat=s(Yse);T(RL.$$.fragment,pat),pat.forEach(t),hat.forEach(t),bgo=i(dVe),Kse=n(dVe,"SPAN",{});var uat=s(Kse);vgo=r(uat,"AutoFeatureExtractor"),uat.forEach(t),dVe.forEach(t),iGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(PL.$$.fragment,Qs),Fgo=i(Qs),BL=n(Qs,"P",{});var cVe=s(BL);Tgo=r(cVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=n(cVe,"A",{href:!0});var _at=s(zI);Mgo=r(_at,"AutoFeatureExtractor.from_pretrained()"),_at.forEach(t),Ego=r(cVe," class method."),cVe.forEach(t),Cgo=i(Qs),IL=n(Qs,"P",{});var fVe=s(IL);wgo=r(fVe,"This class cannot be instantiated directly using "),Zse=n(fVe,"CODE",{});var bat=s(Zse);Ago=r(bat,"__init__()"),bat.forEach(t),Lgo=r(fVe," (throws an error)."),fVe.forEach(t),ygo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(NL.$$.fragment,ra),xgo=i(ra),ele=n(ra,"P",{});var vat=s(ele);$go=r(vat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vat.forEach(t),kgo=i(ra),ka=n(ra,"P",{});var Fw=s(ka);Sgo=r(Fw,"The feature extractor class to instantiate is selected based on the "),ole=n(Fw,"CODE",{});var Fat=s(ole);Rgo=r(Fat,"model_type"),Fat.forEach(t),Pgo=r(Fw,` property of the config object
(either passed as an argument or loaded from `),rle=n(Fw,"CODE",{});var Tat=s(rle);Bgo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Igo=r(Fw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=n(Fw,"CODE",{});var Mat=s(tle);Ngo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),qgo=r(Fw,":"),Fw.forEach(t),jgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var MLe=s(Ch);ale=n(MLe,"STRONG",{});var Eat=s(ale);Dgo=r(Eat,"beit"),Eat.forEach(t),Ggo=r(MLe," \u2014 "),WI=n(MLe,"A",{href:!0});var Cat=s(WI);Ogo=r(Cat,"BeitFeatureExtractor"),Cat.forEach(t),Vgo=r(MLe," (BEiT model)"),MLe.forEach(t),Xgo=i(K),wh=n(K,"LI",{});var ELe=s(wh);nle=n(ELe,"STRONG",{});var wat=s(nle);zgo=r(wat,"clip"),wat.forEach(t),Wgo=r(ELe," \u2014 "),QI=n(ELe,"A",{href:!0});var Aat=s(QI);Qgo=r(Aat,"CLIPFeatureExtractor"),Aat.forEach(t),Hgo=r(ELe," (CLIP model)"),ELe.forEach(t),Ugo=i(K),Ah=n(K,"LI",{});var CLe=s(Ah);sle=n(CLe,"STRONG",{});var Lat=s(sle);Jgo=r(Lat,"convnext"),Lat.forEach(t),Ygo=r(CLe," \u2014 "),HI=n(CLe,"A",{href:!0});var yat=s(HI);Kgo=r(yat,"ConvNextFeatureExtractor"),yat.forEach(t),Zgo=r(CLe," (ConvNeXT model)"),CLe.forEach(t),eho=i(K),Lh=n(K,"LI",{});var wLe=s(Lh);lle=n(wLe,"STRONG",{});var xat=s(lle);oho=r(xat,"cvt"),xat.forEach(t),rho=r(wLe," \u2014 "),UI=n(wLe,"A",{href:!0});var $at=s(UI);tho=r($at,"ConvNextFeatureExtractor"),$at.forEach(t),aho=r(wLe," (CvT model)"),wLe.forEach(t),nho=i(K),yh=n(K,"LI",{});var ALe=s(yh);ile=n(ALe,"STRONG",{});var kat=s(ile);sho=r(kat,"data2vec-audio"),kat.forEach(t),lho=r(ALe," \u2014 "),JI=n(ALe,"A",{href:!0});var Sat=s(JI);iho=r(Sat,"Wav2Vec2FeatureExtractor"),Sat.forEach(t),dho=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),cho=i(K),xh=n(K,"LI",{});var LLe=s(xh);dle=n(LLe,"STRONG",{});var Rat=s(dle);fho=r(Rat,"data2vec-vision"),Rat.forEach(t),mho=r(LLe," \u2014 "),YI=n(LLe,"A",{href:!0});var Pat=s(YI);gho=r(Pat,"BeitFeatureExtractor"),Pat.forEach(t),hho=r(LLe," (Data2VecVision model)"),LLe.forEach(t),pho=i(K),$h=n(K,"LI",{});var yLe=s($h);cle=n(yLe,"STRONG",{});var Bat=s(cle);uho=r(Bat,"deit"),Bat.forEach(t),_ho=r(yLe," \u2014 "),KI=n(yLe,"A",{href:!0});var Iat=s(KI);bho=r(Iat,"DeiTFeatureExtractor"),Iat.forEach(t),vho=r(yLe," (DeiT model)"),yLe.forEach(t),Fho=i(K),kh=n(K,"LI",{});var xLe=s(kh);fle=n(xLe,"STRONG",{});var Nat=s(fle);Tho=r(Nat,"detr"),Nat.forEach(t),Mho=r(xLe," \u2014 "),ZI=n(xLe,"A",{href:!0});var qat=s(ZI);Eho=r(qat,"DetrFeatureExtractor"),qat.forEach(t),Cho=r(xLe," (DETR model)"),xLe.forEach(t),who=i(K),Sh=n(K,"LI",{});var $Le=s(Sh);mle=n($Le,"STRONG",{});var jat=s(mle);Aho=r(jat,"dpt"),jat.forEach(t),Lho=r($Le," \u2014 "),eN=n($Le,"A",{href:!0});var Dat=s(eN);yho=r(Dat,"DPTFeatureExtractor"),Dat.forEach(t),xho=r($Le," (DPT model)"),$Le.forEach(t),$ho=i(K),Rh=n(K,"LI",{});var kLe=s(Rh);gle=n(kLe,"STRONG",{});var Gat=s(gle);kho=r(Gat,"flava"),Gat.forEach(t),Sho=r(kLe," \u2014 "),oN=n(kLe,"A",{href:!0});var Oat=s(oN);Rho=r(Oat,"FlavaFeatureExtractor"),Oat.forEach(t),Pho=r(kLe," (FLAVA model)"),kLe.forEach(t),Bho=i(K),Ph=n(K,"LI",{});var SLe=s(Ph);hle=n(SLe,"STRONG",{});var Vat=s(hle);Iho=r(Vat,"glpn"),Vat.forEach(t),Nho=r(SLe," \u2014 "),rN=n(SLe,"A",{href:!0});var Xat=s(rN);qho=r(Xat,"GLPNFeatureExtractor"),Xat.forEach(t),jho=r(SLe," (GLPN model)"),SLe.forEach(t),Dho=i(K),Bh=n(K,"LI",{});var RLe=s(Bh);ple=n(RLe,"STRONG",{});var zat=s(ple);Gho=r(zat,"hubert"),zat.forEach(t),Oho=r(RLe," \u2014 "),tN=n(RLe,"A",{href:!0});var Wat=s(tN);Vho=r(Wat,"Wav2Vec2FeatureExtractor"),Wat.forEach(t),Xho=r(RLe," (Hubert model)"),RLe.forEach(t),zho=i(K),Ih=n(K,"LI",{});var PLe=s(Ih);ule=n(PLe,"STRONG",{});var Qat=s(ule);Who=r(Qat,"imagegpt"),Qat.forEach(t),Qho=r(PLe," \u2014 "),aN=n(PLe,"A",{href:!0});var Hat=s(aN);Hho=r(Hat,"ImageGPTFeatureExtractor"),Hat.forEach(t),Uho=r(PLe," (ImageGPT model)"),PLe.forEach(t),Jho=i(K),Nh=n(K,"LI",{});var BLe=s(Nh);_le=n(BLe,"STRONG",{});var Uat=s(_le);Yho=r(Uat,"layoutlmv2"),Uat.forEach(t),Kho=r(BLe," \u2014 "),nN=n(BLe,"A",{href:!0});var Jat=s(nN);Zho=r(Jat,"LayoutLMv2FeatureExtractor"),Jat.forEach(t),epo=r(BLe," (LayoutLMv2 model)"),BLe.forEach(t),opo=i(K),qh=n(K,"LI",{});var ILe=s(qh);ble=n(ILe,"STRONG",{});var Yat=s(ble);rpo=r(Yat,"layoutlmv3"),Yat.forEach(t),tpo=r(ILe," \u2014 "),sN=n(ILe,"A",{href:!0});var Kat=s(sN);apo=r(Kat,"LayoutLMv3FeatureExtractor"),Kat.forEach(t),npo=r(ILe," (LayoutLMv3 model)"),ILe.forEach(t),spo=i(K),jh=n(K,"LI",{});var NLe=s(jh);vle=n(NLe,"STRONG",{});var Zat=s(vle);lpo=r(Zat,"levit"),Zat.forEach(t),ipo=r(NLe," \u2014 "),lN=n(NLe,"A",{href:!0});var ent=s(lN);dpo=r(ent,"LevitFeatureExtractor"),ent.forEach(t),cpo=r(NLe," (LeViT model)"),NLe.forEach(t),fpo=i(K),Dh=n(K,"LI",{});var qLe=s(Dh);Fle=n(qLe,"STRONG",{});var ont=s(Fle);mpo=r(ont,"maskformer"),ont.forEach(t),gpo=r(qLe," \u2014 "),iN=n(qLe,"A",{href:!0});var rnt=s(iN);hpo=r(rnt,"MaskFormerFeatureExtractor"),rnt.forEach(t),ppo=r(qLe," (MaskFormer model)"),qLe.forEach(t),upo=i(K),Gh=n(K,"LI",{});var jLe=s(Gh);Tle=n(jLe,"STRONG",{});var tnt=s(Tle);_po=r(tnt,"mctct"),tnt.forEach(t),bpo=r(jLe," \u2014 "),dN=n(jLe,"A",{href:!0});var ant=s(dN);vpo=r(ant,"MCTCTFeatureExtractor"),ant.forEach(t),Fpo=r(jLe," (M-CTC-T model)"),jLe.forEach(t),Tpo=i(K),Oh=n(K,"LI",{});var DLe=s(Oh);Mle=n(DLe,"STRONG",{});var nnt=s(Mle);Mpo=r(nnt,"perceiver"),nnt.forEach(t),Epo=r(DLe," \u2014 "),cN=n(DLe,"A",{href:!0});var snt=s(cN);Cpo=r(snt,"PerceiverFeatureExtractor"),snt.forEach(t),wpo=r(DLe," (Perceiver model)"),DLe.forEach(t),Apo=i(K),Vh=n(K,"LI",{});var GLe=s(Vh);Ele=n(GLe,"STRONG",{});var lnt=s(Ele);Lpo=r(lnt,"poolformer"),lnt.forEach(t),ypo=r(GLe," \u2014 "),fN=n(GLe,"A",{href:!0});var int=s(fN);xpo=r(int,"PoolFormerFeatureExtractor"),int.forEach(t),$po=r(GLe," (PoolFormer model)"),GLe.forEach(t),kpo=i(K),Xh=n(K,"LI",{});var OLe=s(Xh);Cle=n(OLe,"STRONG",{});var dnt=s(Cle);Spo=r(dnt,"regnet"),dnt.forEach(t),Rpo=r(OLe," \u2014 "),mN=n(OLe,"A",{href:!0});var cnt=s(mN);Ppo=r(cnt,"ConvNextFeatureExtractor"),cnt.forEach(t),Bpo=r(OLe," (RegNet model)"),OLe.forEach(t),Ipo=i(K),zh=n(K,"LI",{});var VLe=s(zh);wle=n(VLe,"STRONG",{});var fnt=s(wle);Npo=r(fnt,"resnet"),fnt.forEach(t),qpo=r(VLe," \u2014 "),gN=n(VLe,"A",{href:!0});var mnt=s(gN);jpo=r(mnt,"ConvNextFeatureExtractor"),mnt.forEach(t),Dpo=r(VLe," (ResNet model)"),VLe.forEach(t),Gpo=i(K),Wh=n(K,"LI",{});var XLe=s(Wh);Ale=n(XLe,"STRONG",{});var gnt=s(Ale);Opo=r(gnt,"segformer"),gnt.forEach(t),Vpo=r(XLe," \u2014 "),hN=n(XLe,"A",{href:!0});var hnt=s(hN);Xpo=r(hnt,"SegformerFeatureExtractor"),hnt.forEach(t),zpo=r(XLe," (SegFormer model)"),XLe.forEach(t),Wpo=i(K),Qh=n(K,"LI",{});var zLe=s(Qh);Lle=n(zLe,"STRONG",{});var pnt=s(Lle);Qpo=r(pnt,"speech_to_text"),pnt.forEach(t),Hpo=r(zLe," \u2014 "),pN=n(zLe,"A",{href:!0});var unt=s(pN);Upo=r(unt,"Speech2TextFeatureExtractor"),unt.forEach(t),Jpo=r(zLe," (Speech2Text model)"),zLe.forEach(t),Ypo=i(K),Hh=n(K,"LI",{});var WLe=s(Hh);yle=n(WLe,"STRONG",{});var _nt=s(yle);Kpo=r(_nt,"swin"),_nt.forEach(t),Zpo=r(WLe," \u2014 "),uN=n(WLe,"A",{href:!0});var bnt=s(uN);euo=r(bnt,"ViTFeatureExtractor"),bnt.forEach(t),ouo=r(WLe," (Swin Transformer model)"),WLe.forEach(t),ruo=i(K),Uh=n(K,"LI",{});var QLe=s(Uh);xle=n(QLe,"STRONG",{});var vnt=s(xle);tuo=r(vnt,"van"),vnt.forEach(t),auo=r(QLe," \u2014 "),_N=n(QLe,"A",{href:!0});var Fnt=s(_N);nuo=r(Fnt,"ConvNextFeatureExtractor"),Fnt.forEach(t),suo=r(QLe," (VAN model)"),QLe.forEach(t),luo=i(K),Jh=n(K,"LI",{});var HLe=s(Jh);$le=n(HLe,"STRONG",{});var Tnt=s($le);iuo=r(Tnt,"vilt"),Tnt.forEach(t),duo=r(HLe," \u2014 "),bN=n(HLe,"A",{href:!0});var Mnt=s(bN);cuo=r(Mnt,"ViltFeatureExtractor"),Mnt.forEach(t),fuo=r(HLe," (ViLT model)"),HLe.forEach(t),muo=i(K),Yh=n(K,"LI",{});var ULe=s(Yh);kle=n(ULe,"STRONG",{});var Ent=s(kle);guo=r(Ent,"vit"),Ent.forEach(t),huo=r(ULe," \u2014 "),vN=n(ULe,"A",{href:!0});var Cnt=s(vN);puo=r(Cnt,"ViTFeatureExtractor"),Cnt.forEach(t),uuo=r(ULe," (ViT model)"),ULe.forEach(t),_uo=i(K),Kh=n(K,"LI",{});var JLe=s(Kh);Sle=n(JLe,"STRONG",{});var wnt=s(Sle);buo=r(wnt,"vit_mae"),wnt.forEach(t),vuo=r(JLe," \u2014 "),FN=n(JLe,"A",{href:!0});var Ant=s(FN);Fuo=r(Ant,"ViTFeatureExtractor"),Ant.forEach(t),Tuo=r(JLe," (ViTMAE model)"),JLe.forEach(t),Muo=i(K),Zh=n(K,"LI",{});var YLe=s(Zh);Rle=n(YLe,"STRONG",{});var Lnt=s(Rle);Euo=r(Lnt,"wav2vec2"),Lnt.forEach(t),Cuo=r(YLe," \u2014 "),TN=n(YLe,"A",{href:!0});var ynt=s(TN);wuo=r(ynt,"Wav2Vec2FeatureExtractor"),ynt.forEach(t),Auo=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),Luo=i(K),ep=n(K,"LI",{});var KLe=s(ep);Ple=n(KLe,"STRONG",{});var xnt=s(Ple);yuo=r(xnt,"wav2vec2-conformer"),xnt.forEach(t),xuo=r(KLe," \u2014 "),MN=n(KLe,"A",{href:!0});var $nt=s(MN);$uo=r($nt,"Wav2Vec2FeatureExtractor"),$nt.forEach(t),kuo=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),Suo=i(K),op=n(K,"LI",{});var ZLe=s(op);Ble=n(ZLe,"STRONG",{});var knt=s(Ble);Ruo=r(knt,"yolos"),knt.forEach(t),Puo=r(ZLe," \u2014 "),EN=n(ZLe,"A",{href:!0});var Snt=s(EN);Buo=r(Snt,"YolosFeatureExtractor"),Snt.forEach(t),Iuo=r(ZLe," (YOLOS model)"),ZLe.forEach(t),K.forEach(t),Nuo=i(ra),T(rp.$$.fragment,ra),quo=i(ra),T(tp.$$.fragment,ra),ra.forEach(t),juo=i(Qs),ap=n(Qs,"DIV",{class:!0});var mVe=s(ap);T(qL.$$.fragment,mVe),Duo=i(mVe),Ile=n(mVe,"P",{});var Rnt=s(Ile);Guo=r(Rnt,"Register a new feature extractor for this class."),Rnt.forEach(t),mVe.forEach(t),Qs.forEach(t),dGe=i(f),Si=n(f,"H2",{class:!0});var gVe=s(Si);np=n(gVe,"A",{id:!0,class:!0,href:!0});var Pnt=s(np);Nle=n(Pnt,"SPAN",{});var Bnt=s(Nle);T(jL.$$.fragment,Bnt),Bnt.forEach(t),Pnt.forEach(t),Ouo=i(gVe),qle=n(gVe,"SPAN",{});var Int=s(qle);Vuo=r(Int,"AutoProcessor"),Int.forEach(t),gVe.forEach(t),cGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(DL.$$.fragment,Hs),Xuo=i(Hs),GL=n(Hs,"P",{});var hVe=s(GL);zuo=r(hVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=n(hVe,"A",{href:!0});var Nnt=s(CN);Wuo=r(Nnt,"AutoProcessor.from_pretrained()"),Nnt.forEach(t),Quo=r(hVe," class method."),hVe.forEach(t),Huo=i(Hs),OL=n(Hs,"P",{});var pVe=s(OL);Uuo=r(pVe,"This class cannot be instantiated directly using "),jle=n(pVe,"CODE",{});var qnt=s(jle);Juo=r(qnt,"__init__()"),qnt.forEach(t),Yuo=r(pVe," (throws an error)."),pVe.forEach(t),Kuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(VL.$$.fragment,ta),Zuo=i(ta),Dle=n(ta,"P",{});var jnt=s(Dle);e_o=r(jnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jnt.forEach(t),o_o=i(ta),Ri=n(ta,"P",{});var Jee=s(Ri);r_o=r(Jee,"The processor class to instantiate is selected based on the "),Gle=n(Jee,"CODE",{});var Dnt=s(Gle);t_o=r(Dnt,"model_type"),Dnt.forEach(t),a_o=r(Jee,` property of the config object (either
passed as an argument or loaded from `),Ole=n(Jee,"CODE",{});var Gnt=s(Ole);n_o=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),s_o=r(Jee," if possible):"),Jee.forEach(t),l_o=i(ta),he=n(ta,"UL",{});var _e=s(he);sp=n(_e,"LI",{});var eye=s(sp);Vle=n(eye,"STRONG",{});var Ont=s(Vle);i_o=r(Ont,"clip"),Ont.forEach(t),d_o=r(eye," \u2014 "),wN=n(eye,"A",{href:!0});var Vnt=s(wN);c_o=r(Vnt,"CLIPProcessor"),Vnt.forEach(t),f_o=r(eye," (CLIP model)"),eye.forEach(t),m_o=i(_e),lp=n(_e,"LI",{});var oye=s(lp);Xle=n(oye,"STRONG",{});var Xnt=s(Xle);g_o=r(Xnt,"flava"),Xnt.forEach(t),h_o=r(oye," \u2014 "),zle=n(oye,"CODE",{});var znt=s(zle);p_o=r(znt,"FLAVAProcessor"),znt.forEach(t),u_o=r(oye," (FLAVA model)"),oye.forEach(t),__o=i(_e),ip=n(_e,"LI",{});var rye=s(ip);Wle=n(rye,"STRONG",{});var Wnt=s(Wle);b_o=r(Wnt,"layoutlmv2"),Wnt.forEach(t),v_o=r(rye," \u2014 "),AN=n(rye,"A",{href:!0});var Qnt=s(AN);F_o=r(Qnt,"LayoutLMv2Processor"),Qnt.forEach(t),T_o=r(rye," (LayoutLMv2 model)"),rye.forEach(t),M_o=i(_e),dp=n(_e,"LI",{});var tye=s(dp);Qle=n(tye,"STRONG",{});var Hnt=s(Qle);E_o=r(Hnt,"layoutlmv3"),Hnt.forEach(t),C_o=r(tye," \u2014 "),LN=n(tye,"A",{href:!0});var Unt=s(LN);w_o=r(Unt,"LayoutLMv3Processor"),Unt.forEach(t),A_o=r(tye," (LayoutLMv3 model)"),tye.forEach(t),L_o=i(_e),cp=n(_e,"LI",{});var aye=s(cp);Hle=n(aye,"STRONG",{});var Jnt=s(Hle);y_o=r(Jnt,"layoutxlm"),Jnt.forEach(t),x_o=r(aye," \u2014 "),yN=n(aye,"A",{href:!0});var Ynt=s(yN);$_o=r(Ynt,"LayoutXLMProcessor"),Ynt.forEach(t),k_o=r(aye," (LayoutXLM model)"),aye.forEach(t),S_o=i(_e),fp=n(_e,"LI",{});var nye=s(fp);Ule=n(nye,"STRONG",{});var Knt=s(Ule);R_o=r(Knt,"sew"),Knt.forEach(t),P_o=r(nye," \u2014 "),xN=n(nye,"A",{href:!0});var Znt=s(xN);B_o=r(Znt,"Wav2Vec2Processor"),Znt.forEach(t),I_o=r(nye," (SEW model)"),nye.forEach(t),N_o=i(_e),mp=n(_e,"LI",{});var sye=s(mp);Jle=n(sye,"STRONG",{});var est=s(Jle);q_o=r(est,"sew-d"),est.forEach(t),j_o=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var ost=s($N);D_o=r(ost,"Wav2Vec2Processor"),ost.forEach(t),G_o=r(sye," (SEW-D model)"),sye.forEach(t),O_o=i(_e),gp=n(_e,"LI",{});var lye=s(gp);Yle=n(lye,"STRONG",{});var rst=s(Yle);V_o=r(rst,"speech_to_text"),rst.forEach(t),X_o=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var tst=s(kN);z_o=r(tst,"Speech2TextProcessor"),tst.forEach(t),W_o=r(lye," (Speech2Text model)"),lye.forEach(t),Q_o=i(_e),hp=n(_e,"LI",{});var iye=s(hp);Kle=n(iye,"STRONG",{});var ast=s(Kle);H_o=r(ast,"speech_to_text_2"),ast.forEach(t),U_o=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var nst=s(SN);J_o=r(nst,"Speech2Text2Processor"),nst.forEach(t),Y_o=r(iye," (Speech2Text2 model)"),iye.forEach(t),K_o=i(_e),pp=n(_e,"LI",{});var dye=s(pp);Zle=n(dye,"STRONG",{});var sst=s(Zle);Z_o=r(sst,"trocr"),sst.forEach(t),e1o=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var lst=s(RN);o1o=r(lst,"TrOCRProcessor"),lst.forEach(t),r1o=r(dye," (TrOCR model)"),dye.forEach(t),t1o=i(_e),up=n(_e,"LI",{});var cye=s(up);eie=n(cye,"STRONG",{});var ist=s(eie);a1o=r(ist,"unispeech"),ist.forEach(t),n1o=r(cye," \u2014 "),PN=n(cye,"A",{href:!0});var dst=s(PN);s1o=r(dst,"Wav2Vec2Processor"),dst.forEach(t),l1o=r(cye," (UniSpeech model)"),cye.forEach(t),i1o=i(_e),_p=n(_e,"LI",{});var fye=s(_p);oie=n(fye,"STRONG",{});var cst=s(oie);d1o=r(cst,"unispeech-sat"),cst.forEach(t),c1o=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var fst=s(BN);f1o=r(fst,"Wav2Vec2Processor"),fst.forEach(t),m1o=r(fye," (UniSpeechSat model)"),fye.forEach(t),g1o=i(_e),bp=n(_e,"LI",{});var mye=s(bp);rie=n(mye,"STRONG",{});var mst=s(rie);h1o=r(mst,"vilt"),mst.forEach(t),p1o=r(mye," \u2014 "),IN=n(mye,"A",{href:!0});var gst=s(IN);u1o=r(gst,"ViltProcessor"),gst.forEach(t),_1o=r(mye," (ViLT model)"),mye.forEach(t),b1o=i(_e),vp=n(_e,"LI",{});var gye=s(vp);tie=n(gye,"STRONG",{});var hst=s(tie);v1o=r(hst,"vision-text-dual-encoder"),hst.forEach(t),F1o=r(gye," \u2014 "),NN=n(gye,"A",{href:!0});var pst=s(NN);T1o=r(pst,"VisionTextDualEncoderProcessor"),pst.forEach(t),M1o=r(gye," (VisionTextDualEncoder model)"),gye.forEach(t),E1o=i(_e),Fp=n(_e,"LI",{});var hye=s(Fp);aie=n(hye,"STRONG",{});var ust=s(aie);C1o=r(ust,"wav2vec2"),ust.forEach(t),w1o=r(hye," \u2014 "),qN=n(hye,"A",{href:!0});var _st=s(qN);A1o=r(_st,"Wav2Vec2Processor"),_st.forEach(t),L1o=r(hye," (Wav2Vec2 model)"),hye.forEach(t),y1o=i(_e),Tp=n(_e,"LI",{});var pye=s(Tp);nie=n(pye,"STRONG",{});var bst=s(nie);x1o=r(bst,"wav2vec2-conformer"),bst.forEach(t),$1o=r(pye," \u2014 "),jN=n(pye,"A",{href:!0});var vst=s(jN);k1o=r(vst,"Wav2Vec2Processor"),vst.forEach(t),S1o=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),R1o=i(_e),Mp=n(_e,"LI",{});var uye=s(Mp);sie=n(uye,"STRONG",{});var Fst=s(sie);P1o=r(Fst,"wavlm"),Fst.forEach(t),B1o=r(uye," \u2014 "),DN=n(uye,"A",{href:!0});var Tst=s(DN);I1o=r(Tst,"Wav2Vec2Processor"),Tst.forEach(t),N1o=r(uye," (WavLM model)"),uye.forEach(t),_e.forEach(t),q1o=i(ta),T(Ep.$$.fragment,ta),j1o=i(ta),T(Cp.$$.fragment,ta),ta.forEach(t),D1o=i(Hs),wp=n(Hs,"DIV",{class:!0});var uVe=s(wp);T(XL.$$.fragment,uVe),G1o=i(uVe),lie=n(uVe,"P",{});var Mst=s(lie);O1o=r(Mst,"Register a new processor for this class."),Mst.forEach(t),uVe.forEach(t),Hs.forEach(t),fGe=i(f),Pi=n(f,"H2",{class:!0});var _Ve=s(Pi);Ap=n(_Ve,"A",{id:!0,class:!0,href:!0});var Est=s(Ap);iie=n(Est,"SPAN",{});var Cst=s(iie);T(zL.$$.fragment,Cst),Cst.forEach(t),Est.forEach(t),V1o=i(_Ve),die=n(_Ve,"SPAN",{});var wst=s(die);X1o=r(wst,"AutoModel"),wst.forEach(t),_Ve.forEach(t),mGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(WL.$$.fragment,Us),z1o=i(Us),Bi=n(Us,"P",{});var Yee=s(Bi);W1o=r(Yee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=n(Yee,"A",{href:!0});var Ast=s(GN);Q1o=r(Ast,"from_pretrained()"),Ast.forEach(t),H1o=r(Yee," class method or the "),ON=n(Yee,"A",{href:!0});var Lst=s(ON);U1o=r(Lst,"from_config()"),Lst.forEach(t),J1o=r(Yee,` class
method.`),Yee.forEach(t),Y1o=i(Us),QL=n(Us,"P",{});var bVe=s(QL);K1o=r(bVe,"This class cannot be instantiated directly using "),cie=n(bVe,"CODE",{});var yst=s(cie);Z1o=r(yst,"__init__()"),yst.forEach(t),e7o=r(bVe," (throws an error)."),bVe.forEach(t),o7o=i(Us),nt=n(Us,"DIV",{class:!0});var Tw=s(nt);T(HL.$$.fragment,Tw),r7o=i(Tw),fie=n(Tw,"P",{});var xst=s(fie);t7o=r(xst,"Instantiates one of the base model classes of the library from a configuration."),xst.forEach(t),a7o=i(Tw),Ii=n(Tw,"P",{});var Kee=s(Ii);n7o=r(Kee,`Note:
Loading a model from its configuration file does `),mie=n(Kee,"STRONG",{});var $st=s(mie);s7o=r($st,"not"),$st.forEach(t),l7o=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(Kee,"A",{href:!0});var kst=s(VN);i7o=r(kst,"from_pretrained()"),kst.forEach(t),d7o=r(Kee," to load the model weights."),Kee.forEach(t),c7o=i(Tw),T(Lp.$$.fragment,Tw),Tw.forEach(t),f7o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(UL.$$.fragment,aa),m7o=i(aa),gie=n(aa,"P",{});var Sst=s(gie);g7o=r(Sst,"Instantiate one of the base model classes of the library from a pretrained model."),Sst.forEach(t),h7o=i(aa),Sa=n(aa,"P",{});var Mw=s(Sa);p7o=r(Mw,"The model class to instantiate is selected based on the "),hie=n(Mw,"CODE",{});var Rst=s(hie);u7o=r(Rst,"model_type"),Rst.forEach(t),_7o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),pie=n(Mw,"CODE",{});var Pst=s(pie);b7o=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),v7o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(Mw,"CODE",{});var Bst=s(uie);F7o=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),T7o=r(Mw,":"),Mw.forEach(t),M7o=i(aa),x=n(aa,"UL",{});var $=s(x);yp=n($,"LI",{});var _ye=s(yp);_ie=n(_ye,"STRONG",{});var Ist=s(_ie);E7o=r(Ist,"albert"),Ist.forEach(t),C7o=r(_ye," \u2014 "),XN=n(_ye,"A",{href:!0});var Nst=s(XN);w7o=r(Nst,"AlbertModel"),Nst.forEach(t),A7o=r(_ye," (ALBERT model)"),_ye.forEach(t),L7o=i($),xp=n($,"LI",{});var bye=s(xp);bie=n(bye,"STRONG",{});var qst=s(bie);y7o=r(qst,"bart"),qst.forEach(t),x7o=r(bye," \u2014 "),zN=n(bye,"A",{href:!0});var jst=s(zN);$7o=r(jst,"BartModel"),jst.forEach(t),k7o=r(bye," (BART model)"),bye.forEach(t),S7o=i($),$p=n($,"LI",{});var vye=s($p);vie=n(vye,"STRONG",{});var Dst=s(vie);R7o=r(Dst,"beit"),Dst.forEach(t),P7o=r(vye," \u2014 "),WN=n(vye,"A",{href:!0});var Gst=s(WN);B7o=r(Gst,"BeitModel"),Gst.forEach(t),I7o=r(vye," (BEiT model)"),vye.forEach(t),N7o=i($),kp=n($,"LI",{});var Fye=s(kp);Fie=n(Fye,"STRONG",{});var Ost=s(Fie);q7o=r(Ost,"bert"),Ost.forEach(t),j7o=r(Fye," \u2014 "),QN=n(Fye,"A",{href:!0});var Vst=s(QN);D7o=r(Vst,"BertModel"),Vst.forEach(t),G7o=r(Fye," (BERT model)"),Fye.forEach(t),O7o=i($),Sp=n($,"LI",{});var Tye=s(Sp);Tie=n(Tye,"STRONG",{});var Xst=s(Tie);V7o=r(Xst,"bert-generation"),Xst.forEach(t),X7o=r(Tye," \u2014 "),HN=n(Tye,"A",{href:!0});var zst=s(HN);z7o=r(zst,"BertGenerationEncoder"),zst.forEach(t),W7o=r(Tye," (Bert Generation model)"),Tye.forEach(t),Q7o=i($),Rp=n($,"LI",{});var Mye=s(Rp);Mie=n(Mye,"STRONG",{});var Wst=s(Mie);H7o=r(Wst,"big_bird"),Wst.forEach(t),U7o=r(Mye," \u2014 "),UN=n(Mye,"A",{href:!0});var Qst=s(UN);J7o=r(Qst,"BigBirdModel"),Qst.forEach(t),Y7o=r(Mye," (BigBird model)"),Mye.forEach(t),K7o=i($),Pp=n($,"LI",{});var Eye=s(Pp);Eie=n(Eye,"STRONG",{});var Hst=s(Eie);Z7o=r(Hst,"bigbird_pegasus"),Hst.forEach(t),e2o=r(Eye," \u2014 "),JN=n(Eye,"A",{href:!0});var Ust=s(JN);o2o=r(Ust,"BigBirdPegasusModel"),Ust.forEach(t),r2o=r(Eye," (BigBird-Pegasus model)"),Eye.forEach(t),t2o=i($),Bp=n($,"LI",{});var Cye=s(Bp);Cie=n(Cye,"STRONG",{});var Jst=s(Cie);a2o=r(Jst,"blenderbot"),Jst.forEach(t),n2o=r(Cye," \u2014 "),YN=n(Cye,"A",{href:!0});var Yst=s(YN);s2o=r(Yst,"BlenderbotModel"),Yst.forEach(t),l2o=r(Cye," (Blenderbot model)"),Cye.forEach(t),i2o=i($),Ip=n($,"LI",{});var wye=s(Ip);wie=n(wye,"STRONG",{});var Kst=s(wie);d2o=r(Kst,"blenderbot-small"),Kst.forEach(t),c2o=r(wye," \u2014 "),KN=n(wye,"A",{href:!0});var Zst=s(KN);f2o=r(Zst,"BlenderbotSmallModel"),Zst.forEach(t),m2o=r(wye," (BlenderbotSmall model)"),wye.forEach(t),g2o=i($),Np=n($,"LI",{});var Aye=s(Np);Aie=n(Aye,"STRONG",{});var elt=s(Aie);h2o=r(elt,"bloom"),elt.forEach(t),p2o=r(Aye," \u2014 "),ZN=n(Aye,"A",{href:!0});var olt=s(ZN);u2o=r(olt,"BloomModel"),olt.forEach(t),_2o=r(Aye," (BLOOM model)"),Aye.forEach(t),b2o=i($),qp=n($,"LI",{});var Lye=s(qp);Lie=n(Lye,"STRONG",{});var rlt=s(Lie);v2o=r(rlt,"camembert"),rlt.forEach(t),F2o=r(Lye," \u2014 "),eq=n(Lye,"A",{href:!0});var tlt=s(eq);T2o=r(tlt,"CamembertModel"),tlt.forEach(t),M2o=r(Lye," (CamemBERT model)"),Lye.forEach(t),E2o=i($),jp=n($,"LI",{});var yye=s(jp);yie=n(yye,"STRONG",{});var alt=s(yie);C2o=r(alt,"canine"),alt.forEach(t),w2o=r(yye," \u2014 "),oq=n(yye,"A",{href:!0});var nlt=s(oq);A2o=r(nlt,"CanineModel"),nlt.forEach(t),L2o=r(yye," (CANINE model)"),yye.forEach(t),y2o=i($),Dp=n($,"LI",{});var xye=s(Dp);xie=n(xye,"STRONG",{});var slt=s(xie);x2o=r(slt,"clip"),slt.forEach(t),$2o=r(xye," \u2014 "),rq=n(xye,"A",{href:!0});var llt=s(rq);k2o=r(llt,"CLIPModel"),llt.forEach(t),S2o=r(xye," (CLIP model)"),xye.forEach(t),R2o=i($),Gp=n($,"LI",{});var $ye=s(Gp);$ie=n($ye,"STRONG",{});var ilt=s($ie);P2o=r(ilt,"convbert"),ilt.forEach(t),B2o=r($ye," \u2014 "),tq=n($ye,"A",{href:!0});var dlt=s(tq);I2o=r(dlt,"ConvBertModel"),dlt.forEach(t),N2o=r($ye," (ConvBERT model)"),$ye.forEach(t),q2o=i($),Op=n($,"LI",{});var kye=s(Op);kie=n(kye,"STRONG",{});var clt=s(kie);j2o=r(clt,"convnext"),clt.forEach(t),D2o=r(kye," \u2014 "),aq=n(kye,"A",{href:!0});var flt=s(aq);G2o=r(flt,"ConvNextModel"),flt.forEach(t),O2o=r(kye," (ConvNeXT model)"),kye.forEach(t),V2o=i($),Vp=n($,"LI",{});var Sye=s(Vp);Sie=n(Sye,"STRONG",{});var mlt=s(Sie);X2o=r(mlt,"ctrl"),mlt.forEach(t),z2o=r(Sye," \u2014 "),nq=n(Sye,"A",{href:!0});var glt=s(nq);W2o=r(glt,"CTRLModel"),glt.forEach(t),Q2o=r(Sye," (CTRL model)"),Sye.forEach(t),H2o=i($),Xp=n($,"LI",{});var Rye=s(Xp);Rie=n(Rye,"STRONG",{});var hlt=s(Rie);U2o=r(hlt,"cvt"),hlt.forEach(t),J2o=r(Rye," \u2014 "),sq=n(Rye,"A",{href:!0});var plt=s(sq);Y2o=r(plt,"CvtModel"),plt.forEach(t),K2o=r(Rye," (CvT model)"),Rye.forEach(t),Z2o=i($),zp=n($,"LI",{});var Pye=s(zp);Pie=n(Pye,"STRONG",{});var ult=s(Pie);ebo=r(ult,"data2vec-audio"),ult.forEach(t),obo=r(Pye," \u2014 "),lq=n(Pye,"A",{href:!0});var _lt=s(lq);rbo=r(_lt,"Data2VecAudioModel"),_lt.forEach(t),tbo=r(Pye," (Data2VecAudio model)"),Pye.forEach(t),abo=i($),Wp=n($,"LI",{});var Bye=s(Wp);Bie=n(Bye,"STRONG",{});var blt=s(Bie);nbo=r(blt,"data2vec-text"),blt.forEach(t),sbo=r(Bye," \u2014 "),iq=n(Bye,"A",{href:!0});var vlt=s(iq);lbo=r(vlt,"Data2VecTextModel"),vlt.forEach(t),ibo=r(Bye," (Data2VecText model)"),Bye.forEach(t),dbo=i($),Qp=n($,"LI",{});var Iye=s(Qp);Iie=n(Iye,"STRONG",{});var Flt=s(Iie);cbo=r(Flt,"data2vec-vision"),Flt.forEach(t),fbo=r(Iye," \u2014 "),dq=n(Iye,"A",{href:!0});var Tlt=s(dq);mbo=r(Tlt,"Data2VecVisionModel"),Tlt.forEach(t),gbo=r(Iye," (Data2VecVision model)"),Iye.forEach(t),hbo=i($),Hp=n($,"LI",{});var Nye=s(Hp);Nie=n(Nye,"STRONG",{});var Mlt=s(Nie);pbo=r(Mlt,"deberta"),Mlt.forEach(t),ubo=r(Nye," \u2014 "),cq=n(Nye,"A",{href:!0});var Elt=s(cq);_bo=r(Elt,"DebertaModel"),Elt.forEach(t),bbo=r(Nye," (DeBERTa model)"),Nye.forEach(t),vbo=i($),Up=n($,"LI",{});var qye=s(Up);qie=n(qye,"STRONG",{});var Clt=s(qie);Fbo=r(Clt,"deberta-v2"),Clt.forEach(t),Tbo=r(qye," \u2014 "),fq=n(qye,"A",{href:!0});var wlt=s(fq);Mbo=r(wlt,"DebertaV2Model"),wlt.forEach(t),Ebo=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),Cbo=i($),Jp=n($,"LI",{});var jye=s(Jp);jie=n(jye,"STRONG",{});var Alt=s(jie);wbo=r(Alt,"decision_transformer"),Alt.forEach(t),Abo=r(jye," \u2014 "),mq=n(jye,"A",{href:!0});var Llt=s(mq);Lbo=r(Llt,"DecisionTransformerModel"),Llt.forEach(t),ybo=r(jye," (Decision Transformer model)"),jye.forEach(t),xbo=i($),Yp=n($,"LI",{});var Dye=s(Yp);Die=n(Dye,"STRONG",{});var ylt=s(Die);$bo=r(ylt,"deit"),ylt.forEach(t),kbo=r(Dye," \u2014 "),gq=n(Dye,"A",{href:!0});var xlt=s(gq);Sbo=r(xlt,"DeiTModel"),xlt.forEach(t),Rbo=r(Dye," (DeiT model)"),Dye.forEach(t),Pbo=i($),Kp=n($,"LI",{});var Gye=s(Kp);Gie=n(Gye,"STRONG",{});var $lt=s(Gie);Bbo=r($lt,"detr"),$lt.forEach(t),Ibo=r(Gye," \u2014 "),hq=n(Gye,"A",{href:!0});var klt=s(hq);Nbo=r(klt,"DetrModel"),klt.forEach(t),qbo=r(Gye," (DETR model)"),Gye.forEach(t),jbo=i($),Zp=n($,"LI",{});var Oye=s(Zp);Oie=n(Oye,"STRONG",{});var Slt=s(Oie);Dbo=r(Slt,"distilbert"),Slt.forEach(t),Gbo=r(Oye," \u2014 "),pq=n(Oye,"A",{href:!0});var Rlt=s(pq);Obo=r(Rlt,"DistilBertModel"),Rlt.forEach(t),Vbo=r(Oye," (DistilBERT model)"),Oye.forEach(t),Xbo=i($),eu=n($,"LI",{});var Vye=s(eu);Vie=n(Vye,"STRONG",{});var Plt=s(Vie);zbo=r(Plt,"dpr"),Plt.forEach(t),Wbo=r(Vye," \u2014 "),uq=n(Vye,"A",{href:!0});var Blt=s(uq);Qbo=r(Blt,"DPRQuestionEncoder"),Blt.forEach(t),Hbo=r(Vye," (DPR model)"),Vye.forEach(t),Ubo=i($),ou=n($,"LI",{});var Xye=s(ou);Xie=n(Xye,"STRONG",{});var Ilt=s(Xie);Jbo=r(Ilt,"dpt"),Ilt.forEach(t),Ybo=r(Xye," \u2014 "),_q=n(Xye,"A",{href:!0});var Nlt=s(_q);Kbo=r(Nlt,"DPTModel"),Nlt.forEach(t),Zbo=r(Xye," (DPT model)"),Xye.forEach(t),evo=i($),ru=n($,"LI",{});var zye=s(ru);zie=n(zye,"STRONG",{});var qlt=s(zie);ovo=r(qlt,"electra"),qlt.forEach(t),rvo=r(zye," \u2014 "),bq=n(zye,"A",{href:!0});var jlt=s(bq);tvo=r(jlt,"ElectraModel"),jlt.forEach(t),avo=r(zye," (ELECTRA model)"),zye.forEach(t),nvo=i($),tu=n($,"LI",{});var Wye=s(tu);Wie=n(Wye,"STRONG",{});var Dlt=s(Wie);svo=r(Dlt,"flaubert"),Dlt.forEach(t),lvo=r(Wye," \u2014 "),vq=n(Wye,"A",{href:!0});var Glt=s(vq);ivo=r(Glt,"FlaubertModel"),Glt.forEach(t),dvo=r(Wye," (FlauBERT model)"),Wye.forEach(t),cvo=i($),au=n($,"LI",{});var Qye=s(au);Qie=n(Qye,"STRONG",{});var Olt=s(Qie);fvo=r(Olt,"flava"),Olt.forEach(t),mvo=r(Qye," \u2014 "),Fq=n(Qye,"A",{href:!0});var Vlt=s(Fq);gvo=r(Vlt,"FlavaModel"),Vlt.forEach(t),hvo=r(Qye," (FLAVA model)"),Qye.forEach(t),pvo=i($),nu=n($,"LI",{});var Hye=s(nu);Hie=n(Hye,"STRONG",{});var Xlt=s(Hie);uvo=r(Xlt,"fnet"),Xlt.forEach(t),_vo=r(Hye," \u2014 "),Tq=n(Hye,"A",{href:!0});var zlt=s(Tq);bvo=r(zlt,"FNetModel"),zlt.forEach(t),vvo=r(Hye," (FNet model)"),Hye.forEach(t),Fvo=i($),su=n($,"LI",{});var Uye=s(su);Uie=n(Uye,"STRONG",{});var Wlt=s(Uie);Tvo=r(Wlt,"fsmt"),Wlt.forEach(t),Mvo=r(Uye," \u2014 "),Mq=n(Uye,"A",{href:!0});var Qlt=s(Mq);Evo=r(Qlt,"FSMTModel"),Qlt.forEach(t),Cvo=r(Uye," (FairSeq Machine-Translation model)"),Uye.forEach(t),wvo=i($),Gs=n($,"LI",{});var Gk=s(Gs);Jie=n(Gk,"STRONG",{});var Hlt=s(Jie);Avo=r(Hlt,"funnel"),Hlt.forEach(t),Lvo=r(Gk," \u2014 "),Eq=n(Gk,"A",{href:!0});var Ult=s(Eq);yvo=r(Ult,"FunnelModel"),Ult.forEach(t),xvo=r(Gk," or "),Cq=n(Gk,"A",{href:!0});var Jlt=s(Cq);$vo=r(Jlt,"FunnelBaseModel"),Jlt.forEach(t),kvo=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),Svo=i($),lu=n($,"LI",{});var Jye=s(lu);Yie=n(Jye,"STRONG",{});var Ylt=s(Yie);Rvo=r(Ylt,"glpn"),Ylt.forEach(t),Pvo=r(Jye," \u2014 "),wq=n(Jye,"A",{href:!0});var Klt=s(wq);Bvo=r(Klt,"GLPNModel"),Klt.forEach(t),Ivo=r(Jye," (GLPN model)"),Jye.forEach(t),Nvo=i($),iu=n($,"LI",{});var Yye=s(iu);Kie=n(Yye,"STRONG",{});var Zlt=s(Kie);qvo=r(Zlt,"gpt2"),Zlt.forEach(t),jvo=r(Yye," \u2014 "),Aq=n(Yye,"A",{href:!0});var eit=s(Aq);Dvo=r(eit,"GPT2Model"),eit.forEach(t),Gvo=r(Yye," (OpenAI GPT-2 model)"),Yye.forEach(t),Ovo=i($),du=n($,"LI",{});var Kye=s(du);Zie=n(Kye,"STRONG",{});var oit=s(Zie);Vvo=r(oit,"gpt_neo"),oit.forEach(t),Xvo=r(Kye," \u2014 "),Lq=n(Kye,"A",{href:!0});var rit=s(Lq);zvo=r(rit,"GPTNeoModel"),rit.forEach(t),Wvo=r(Kye," (GPT Neo model)"),Kye.forEach(t),Qvo=i($),cu=n($,"LI",{});var Zye=s(cu);ede=n(Zye,"STRONG",{});var tit=s(ede);Hvo=r(tit,"gpt_neox"),tit.forEach(t),Uvo=r(Zye," \u2014 "),yq=n(Zye,"A",{href:!0});var ait=s(yq);Jvo=r(ait,"GPTNeoXModel"),ait.forEach(t),Yvo=r(Zye," (GPT NeoX model)"),Zye.forEach(t),Kvo=i($),fu=n($,"LI",{});var e8e=s(fu);ode=n(e8e,"STRONG",{});var nit=s(ode);Zvo=r(nit,"gptj"),nit.forEach(t),eFo=r(e8e," \u2014 "),xq=n(e8e,"A",{href:!0});var sit=s(xq);oFo=r(sit,"GPTJModel"),sit.forEach(t),rFo=r(e8e," (GPT-J model)"),e8e.forEach(t),tFo=i($),mu=n($,"LI",{});var o8e=s(mu);rde=n(o8e,"STRONG",{});var lit=s(rde);aFo=r(lit,"hubert"),lit.forEach(t),nFo=r(o8e," \u2014 "),$q=n(o8e,"A",{href:!0});var iit=s($q);sFo=r(iit,"HubertModel"),iit.forEach(t),lFo=r(o8e," (Hubert model)"),o8e.forEach(t),iFo=i($),gu=n($,"LI",{});var r8e=s(gu);tde=n(r8e,"STRONG",{});var dit=s(tde);dFo=r(dit,"ibert"),dit.forEach(t),cFo=r(r8e," \u2014 "),kq=n(r8e,"A",{href:!0});var cit=s(kq);fFo=r(cit,"IBertModel"),cit.forEach(t),mFo=r(r8e," (I-BERT model)"),r8e.forEach(t),gFo=i($),hu=n($,"LI",{});var t8e=s(hu);ade=n(t8e,"STRONG",{});var fit=s(ade);hFo=r(fit,"imagegpt"),fit.forEach(t),pFo=r(t8e," \u2014 "),Sq=n(t8e,"A",{href:!0});var mit=s(Sq);uFo=r(mit,"ImageGPTModel"),mit.forEach(t),_Fo=r(t8e," (ImageGPT model)"),t8e.forEach(t),bFo=i($),pu=n($,"LI",{});var a8e=s(pu);nde=n(a8e,"STRONG",{});var git=s(nde);vFo=r(git,"layoutlm"),git.forEach(t),FFo=r(a8e," \u2014 "),Rq=n(a8e,"A",{href:!0});var hit=s(Rq);TFo=r(hit,"LayoutLMModel"),hit.forEach(t),MFo=r(a8e," (LayoutLM model)"),a8e.forEach(t),EFo=i($),uu=n($,"LI",{});var n8e=s(uu);sde=n(n8e,"STRONG",{});var pit=s(sde);CFo=r(pit,"layoutlmv2"),pit.forEach(t),wFo=r(n8e," \u2014 "),Pq=n(n8e,"A",{href:!0});var uit=s(Pq);AFo=r(uit,"LayoutLMv2Model"),uit.forEach(t),LFo=r(n8e," (LayoutLMv2 model)"),n8e.forEach(t),yFo=i($),_u=n($,"LI",{});var s8e=s(_u);lde=n(s8e,"STRONG",{});var _it=s(lde);xFo=r(_it,"layoutlmv3"),_it.forEach(t),$Fo=r(s8e," \u2014 "),Bq=n(s8e,"A",{href:!0});var bit=s(Bq);kFo=r(bit,"LayoutLMv3Model"),bit.forEach(t),SFo=r(s8e," (LayoutLMv3 model)"),s8e.forEach(t),RFo=i($),bu=n($,"LI",{});var l8e=s(bu);ide=n(l8e,"STRONG",{});var vit=s(ide);PFo=r(vit,"led"),vit.forEach(t),BFo=r(l8e," \u2014 "),Iq=n(l8e,"A",{href:!0});var Fit=s(Iq);IFo=r(Fit,"LEDModel"),Fit.forEach(t),NFo=r(l8e," (LED model)"),l8e.forEach(t),qFo=i($),vu=n($,"LI",{});var i8e=s(vu);dde=n(i8e,"STRONG",{});var Tit=s(dde);jFo=r(Tit,"levit"),Tit.forEach(t),DFo=r(i8e," \u2014 "),Nq=n(i8e,"A",{href:!0});var Mit=s(Nq);GFo=r(Mit,"LevitModel"),Mit.forEach(t),OFo=r(i8e," (LeViT model)"),i8e.forEach(t),VFo=i($),Fu=n($,"LI",{});var d8e=s(Fu);cde=n(d8e,"STRONG",{});var Eit=s(cde);XFo=r(Eit,"longformer"),Eit.forEach(t),zFo=r(d8e," \u2014 "),qq=n(d8e,"A",{href:!0});var Cit=s(qq);WFo=r(Cit,"LongformerModel"),Cit.forEach(t),QFo=r(d8e," (Longformer model)"),d8e.forEach(t),HFo=i($),Tu=n($,"LI",{});var c8e=s(Tu);fde=n(c8e,"STRONG",{});var wit=s(fde);UFo=r(wit,"longt5"),wit.forEach(t),JFo=r(c8e," \u2014 "),jq=n(c8e,"A",{href:!0});var Ait=s(jq);YFo=r(Ait,"LongT5Model"),Ait.forEach(t),KFo=r(c8e," (LongT5 model)"),c8e.forEach(t),ZFo=i($),Mu=n($,"LI",{});var f8e=s(Mu);mde=n(f8e,"STRONG",{});var Lit=s(mde);e6o=r(Lit,"luke"),Lit.forEach(t),o6o=r(f8e," \u2014 "),Dq=n(f8e,"A",{href:!0});var yit=s(Dq);r6o=r(yit,"LukeModel"),yit.forEach(t),t6o=r(f8e," (LUKE model)"),f8e.forEach(t),a6o=i($),Eu=n($,"LI",{});var m8e=s(Eu);gde=n(m8e,"STRONG",{});var xit=s(gde);n6o=r(xit,"lxmert"),xit.forEach(t),s6o=r(m8e," \u2014 "),Gq=n(m8e,"A",{href:!0});var $it=s(Gq);l6o=r($it,"LxmertModel"),$it.forEach(t),i6o=r(m8e," (LXMERT model)"),m8e.forEach(t),d6o=i($),Cu=n($,"LI",{});var g8e=s(Cu);hde=n(g8e,"STRONG",{});var kit=s(hde);c6o=r(kit,"m2m_100"),kit.forEach(t),f6o=r(g8e," \u2014 "),Oq=n(g8e,"A",{href:!0});var Sit=s(Oq);m6o=r(Sit,"M2M100Model"),Sit.forEach(t),g6o=r(g8e," (M2M100 model)"),g8e.forEach(t),h6o=i($),wu=n($,"LI",{});var h8e=s(wu);pde=n(h8e,"STRONG",{});var Rit=s(pde);p6o=r(Rit,"marian"),Rit.forEach(t),u6o=r(h8e," \u2014 "),Vq=n(h8e,"A",{href:!0});var Pit=s(Vq);_6o=r(Pit,"MarianModel"),Pit.forEach(t),b6o=r(h8e," (Marian model)"),h8e.forEach(t),v6o=i($),Au=n($,"LI",{});var p8e=s(Au);ude=n(p8e,"STRONG",{});var Bit=s(ude);F6o=r(Bit,"maskformer"),Bit.forEach(t),T6o=r(p8e," \u2014 "),Xq=n(p8e,"A",{href:!0});var Iit=s(Xq);M6o=r(Iit,"MaskFormerModel"),Iit.forEach(t),E6o=r(p8e," (MaskFormer model)"),p8e.forEach(t),C6o=i($),Lu=n($,"LI",{});var u8e=s(Lu);_de=n(u8e,"STRONG",{});var Nit=s(_de);w6o=r(Nit,"mbart"),Nit.forEach(t),A6o=r(u8e," \u2014 "),zq=n(u8e,"A",{href:!0});var qit=s(zq);L6o=r(qit,"MBartModel"),qit.forEach(t),y6o=r(u8e," (mBART model)"),u8e.forEach(t),x6o=i($),yu=n($,"LI",{});var _8e=s(yu);bde=n(_8e,"STRONG",{});var jit=s(bde);$6o=r(jit,"mctct"),jit.forEach(t),k6o=r(_8e," \u2014 "),Wq=n(_8e,"A",{href:!0});var Dit=s(Wq);S6o=r(Dit,"MCTCTModel"),Dit.forEach(t),R6o=r(_8e," (M-CTC-T model)"),_8e.forEach(t),P6o=i($),xu=n($,"LI",{});var b8e=s(xu);vde=n(b8e,"STRONG",{});var Git=s(vde);B6o=r(Git,"megatron-bert"),Git.forEach(t),I6o=r(b8e," \u2014 "),Qq=n(b8e,"A",{href:!0});var Oit=s(Qq);N6o=r(Oit,"MegatronBertModel"),Oit.forEach(t),q6o=r(b8e," (Megatron-BERT model)"),b8e.forEach(t),j6o=i($),$u=n($,"LI",{});var v8e=s($u);Fde=n(v8e,"STRONG",{});var Vit=s(Fde);D6o=r(Vit,"mobilebert"),Vit.forEach(t),G6o=r(v8e," \u2014 "),Hq=n(v8e,"A",{href:!0});var Xit=s(Hq);O6o=r(Xit,"MobileBertModel"),Xit.forEach(t),V6o=r(v8e," (MobileBERT model)"),v8e.forEach(t),X6o=i($),ku=n($,"LI",{});var F8e=s(ku);Tde=n(F8e,"STRONG",{});var zit=s(Tde);z6o=r(zit,"mpnet"),zit.forEach(t),W6o=r(F8e," \u2014 "),Uq=n(F8e,"A",{href:!0});var Wit=s(Uq);Q6o=r(Wit,"MPNetModel"),Wit.forEach(t),H6o=r(F8e," (MPNet model)"),F8e.forEach(t),U6o=i($),Su=n($,"LI",{});var T8e=s(Su);Mde=n(T8e,"STRONG",{});var Qit=s(Mde);J6o=r(Qit,"mt5"),Qit.forEach(t),Y6o=r(T8e," \u2014 "),Jq=n(T8e,"A",{href:!0});var Hit=s(Jq);K6o=r(Hit,"MT5Model"),Hit.forEach(t),Z6o=r(T8e," (MT5 model)"),T8e.forEach(t),eTo=i($),Ru=n($,"LI",{});var M8e=s(Ru);Ede=n(M8e,"STRONG",{});var Uit=s(Ede);oTo=r(Uit,"nystromformer"),Uit.forEach(t),rTo=r(M8e," \u2014 "),Yq=n(M8e,"A",{href:!0});var Jit=s(Yq);tTo=r(Jit,"NystromformerModel"),Jit.forEach(t),aTo=r(M8e," (Nystr\xF6mformer model)"),M8e.forEach(t),nTo=i($),Pu=n($,"LI",{});var E8e=s(Pu);Cde=n(E8e,"STRONG",{});var Yit=s(Cde);sTo=r(Yit,"openai-gpt"),Yit.forEach(t),lTo=r(E8e," \u2014 "),Kq=n(E8e,"A",{href:!0});var Kit=s(Kq);iTo=r(Kit,"OpenAIGPTModel"),Kit.forEach(t),dTo=r(E8e," (OpenAI GPT model)"),E8e.forEach(t),cTo=i($),Bu=n($,"LI",{});var C8e=s(Bu);wde=n(C8e,"STRONG",{});var Zit=s(wde);fTo=r(Zit,"opt"),Zit.forEach(t),mTo=r(C8e," \u2014 "),Zq=n(C8e,"A",{href:!0});var edt=s(Zq);gTo=r(edt,"OPTModel"),edt.forEach(t),hTo=r(C8e," (OPT model)"),C8e.forEach(t),pTo=i($),Iu=n($,"LI",{});var w8e=s(Iu);Ade=n(w8e,"STRONG",{});var odt=s(Ade);uTo=r(odt,"pegasus"),odt.forEach(t),_To=r(w8e," \u2014 "),ej=n(w8e,"A",{href:!0});var rdt=s(ej);bTo=r(rdt,"PegasusModel"),rdt.forEach(t),vTo=r(w8e," (Pegasus model)"),w8e.forEach(t),FTo=i($),Nu=n($,"LI",{});var A8e=s(Nu);Lde=n(A8e,"STRONG",{});var tdt=s(Lde);TTo=r(tdt,"perceiver"),tdt.forEach(t),MTo=r(A8e," \u2014 "),oj=n(A8e,"A",{href:!0});var adt=s(oj);ETo=r(adt,"PerceiverModel"),adt.forEach(t),CTo=r(A8e," (Perceiver model)"),A8e.forEach(t),wTo=i($),qu=n($,"LI",{});var L8e=s(qu);yde=n(L8e,"STRONG",{});var ndt=s(yde);ATo=r(ndt,"plbart"),ndt.forEach(t),LTo=r(L8e," \u2014 "),rj=n(L8e,"A",{href:!0});var sdt=s(rj);yTo=r(sdt,"PLBartModel"),sdt.forEach(t),xTo=r(L8e," (PLBart model)"),L8e.forEach(t),$To=i($),ju=n($,"LI",{});var y8e=s(ju);xde=n(y8e,"STRONG",{});var ldt=s(xde);kTo=r(ldt,"poolformer"),ldt.forEach(t),STo=r(y8e," \u2014 "),tj=n(y8e,"A",{href:!0});var idt=s(tj);RTo=r(idt,"PoolFormerModel"),idt.forEach(t),PTo=r(y8e," (PoolFormer model)"),y8e.forEach(t),BTo=i($),Du=n($,"LI",{});var x8e=s(Du);$de=n(x8e,"STRONG",{});var ddt=s($de);ITo=r(ddt,"prophetnet"),ddt.forEach(t),NTo=r(x8e," \u2014 "),aj=n(x8e,"A",{href:!0});var cdt=s(aj);qTo=r(cdt,"ProphetNetModel"),cdt.forEach(t),jTo=r(x8e," (ProphetNet model)"),x8e.forEach(t),DTo=i($),Gu=n($,"LI",{});var $8e=s(Gu);kde=n($8e,"STRONG",{});var fdt=s(kde);GTo=r(fdt,"qdqbert"),fdt.forEach(t),OTo=r($8e," \u2014 "),nj=n($8e,"A",{href:!0});var mdt=s(nj);VTo=r(mdt,"QDQBertModel"),mdt.forEach(t),XTo=r($8e," (QDQBert model)"),$8e.forEach(t),zTo=i($),Ou=n($,"LI",{});var k8e=s(Ou);Sde=n(k8e,"STRONG",{});var gdt=s(Sde);WTo=r(gdt,"reformer"),gdt.forEach(t),QTo=r(k8e," \u2014 "),sj=n(k8e,"A",{href:!0});var hdt=s(sj);HTo=r(hdt,"ReformerModel"),hdt.forEach(t),UTo=r(k8e," (Reformer model)"),k8e.forEach(t),JTo=i($),Vu=n($,"LI",{});var S8e=s(Vu);Rde=n(S8e,"STRONG",{});var pdt=s(Rde);YTo=r(pdt,"regnet"),pdt.forEach(t),KTo=r(S8e," \u2014 "),lj=n(S8e,"A",{href:!0});var udt=s(lj);ZTo=r(udt,"RegNetModel"),udt.forEach(t),eMo=r(S8e," (RegNet model)"),S8e.forEach(t),oMo=i($),Xu=n($,"LI",{});var R8e=s(Xu);Pde=n(R8e,"STRONG",{});var _dt=s(Pde);rMo=r(_dt,"rembert"),_dt.forEach(t),tMo=r(R8e," \u2014 "),ij=n(R8e,"A",{href:!0});var bdt=s(ij);aMo=r(bdt,"RemBertModel"),bdt.forEach(t),nMo=r(R8e," (RemBERT model)"),R8e.forEach(t),sMo=i($),zu=n($,"LI",{});var P8e=s(zu);Bde=n(P8e,"STRONG",{});var vdt=s(Bde);lMo=r(vdt,"resnet"),vdt.forEach(t),iMo=r(P8e," \u2014 "),dj=n(P8e,"A",{href:!0});var Fdt=s(dj);dMo=r(Fdt,"ResNetModel"),Fdt.forEach(t),cMo=r(P8e," (ResNet model)"),P8e.forEach(t),fMo=i($),Wu=n($,"LI",{});var B8e=s(Wu);Ide=n(B8e,"STRONG",{});var Tdt=s(Ide);mMo=r(Tdt,"retribert"),Tdt.forEach(t),gMo=r(B8e," \u2014 "),cj=n(B8e,"A",{href:!0});var Mdt=s(cj);hMo=r(Mdt,"RetriBertModel"),Mdt.forEach(t),pMo=r(B8e," (RetriBERT model)"),B8e.forEach(t),uMo=i($),Qu=n($,"LI",{});var I8e=s(Qu);Nde=n(I8e,"STRONG",{});var Edt=s(Nde);_Mo=r(Edt,"roberta"),Edt.forEach(t),bMo=r(I8e," \u2014 "),fj=n(I8e,"A",{href:!0});var Cdt=s(fj);vMo=r(Cdt,"RobertaModel"),Cdt.forEach(t),FMo=r(I8e," (RoBERTa model)"),I8e.forEach(t),TMo=i($),Hu=n($,"LI",{});var N8e=s(Hu);qde=n(N8e,"STRONG",{});var wdt=s(qde);MMo=r(wdt,"roformer"),wdt.forEach(t),EMo=r(N8e," \u2014 "),mj=n(N8e,"A",{href:!0});var Adt=s(mj);CMo=r(Adt,"RoFormerModel"),Adt.forEach(t),wMo=r(N8e," (RoFormer model)"),N8e.forEach(t),AMo=i($),Uu=n($,"LI",{});var q8e=s(Uu);jde=n(q8e,"STRONG",{});var Ldt=s(jde);LMo=r(Ldt,"segformer"),Ldt.forEach(t),yMo=r(q8e," \u2014 "),gj=n(q8e,"A",{href:!0});var ydt=s(gj);xMo=r(ydt,"SegformerModel"),ydt.forEach(t),$Mo=r(q8e," (SegFormer model)"),q8e.forEach(t),kMo=i($),Ju=n($,"LI",{});var j8e=s(Ju);Dde=n(j8e,"STRONG",{});var xdt=s(Dde);SMo=r(xdt,"sew"),xdt.forEach(t),RMo=r(j8e," \u2014 "),hj=n(j8e,"A",{href:!0});var $dt=s(hj);PMo=r($dt,"SEWModel"),$dt.forEach(t),BMo=r(j8e," (SEW model)"),j8e.forEach(t),IMo=i($),Yu=n($,"LI",{});var D8e=s(Yu);Gde=n(D8e,"STRONG",{});var kdt=s(Gde);NMo=r(kdt,"sew-d"),kdt.forEach(t),qMo=r(D8e," \u2014 "),pj=n(D8e,"A",{href:!0});var Sdt=s(pj);jMo=r(Sdt,"SEWDModel"),Sdt.forEach(t),DMo=r(D8e," (SEW-D model)"),D8e.forEach(t),GMo=i($),Ku=n($,"LI",{});var G8e=s(Ku);Ode=n(G8e,"STRONG",{});var Rdt=s(Ode);OMo=r(Rdt,"speech_to_text"),Rdt.forEach(t),VMo=r(G8e," \u2014 "),uj=n(G8e,"A",{href:!0});var Pdt=s(uj);XMo=r(Pdt,"Speech2TextModel"),Pdt.forEach(t),zMo=r(G8e," (Speech2Text model)"),G8e.forEach(t),WMo=i($),Zu=n($,"LI",{});var O8e=s(Zu);Vde=n(O8e,"STRONG",{});var Bdt=s(Vde);QMo=r(Bdt,"splinter"),Bdt.forEach(t),HMo=r(O8e," \u2014 "),_j=n(O8e,"A",{href:!0});var Idt=s(_j);UMo=r(Idt,"SplinterModel"),Idt.forEach(t),JMo=r(O8e," (Splinter model)"),O8e.forEach(t),YMo=i($),e_=n($,"LI",{});var V8e=s(e_);Xde=n(V8e,"STRONG",{});var Ndt=s(Xde);KMo=r(Ndt,"squeezebert"),Ndt.forEach(t),ZMo=r(V8e," \u2014 "),bj=n(V8e,"A",{href:!0});var qdt=s(bj);e4o=r(qdt,"SqueezeBertModel"),qdt.forEach(t),o4o=r(V8e," (SqueezeBERT model)"),V8e.forEach(t),r4o=i($),o_=n($,"LI",{});var X8e=s(o_);zde=n(X8e,"STRONG",{});var jdt=s(zde);t4o=r(jdt,"swin"),jdt.forEach(t),a4o=r(X8e," \u2014 "),vj=n(X8e,"A",{href:!0});var Ddt=s(vj);n4o=r(Ddt,"SwinModel"),Ddt.forEach(t),s4o=r(X8e," (Swin Transformer model)"),X8e.forEach(t),l4o=i($),r_=n($,"LI",{});var z8e=s(r_);Wde=n(z8e,"STRONG",{});var Gdt=s(Wde);i4o=r(Gdt,"t5"),Gdt.forEach(t),d4o=r(z8e," \u2014 "),Fj=n(z8e,"A",{href:!0});var Odt=s(Fj);c4o=r(Odt,"T5Model"),Odt.forEach(t),f4o=r(z8e," (T5 model)"),z8e.forEach(t),m4o=i($),t_=n($,"LI",{});var W8e=s(t_);Qde=n(W8e,"STRONG",{});var Vdt=s(Qde);g4o=r(Vdt,"tapas"),Vdt.forEach(t),h4o=r(W8e," \u2014 "),Tj=n(W8e,"A",{href:!0});var Xdt=s(Tj);p4o=r(Xdt,"TapasModel"),Xdt.forEach(t),u4o=r(W8e," (TAPAS model)"),W8e.forEach(t),_4o=i($),a_=n($,"LI",{});var Q8e=s(a_);Hde=n(Q8e,"STRONG",{});var zdt=s(Hde);b4o=r(zdt,"trajectory_transformer"),zdt.forEach(t),v4o=r(Q8e," \u2014 "),Mj=n(Q8e,"A",{href:!0});var Wdt=s(Mj);F4o=r(Wdt,"TrajectoryTransformerModel"),Wdt.forEach(t),T4o=r(Q8e," (Trajectory Transformer model)"),Q8e.forEach(t),M4o=i($),n_=n($,"LI",{});var H8e=s(n_);Ude=n(H8e,"STRONG",{});var Qdt=s(Ude);E4o=r(Qdt,"transfo-xl"),Qdt.forEach(t),C4o=r(H8e," \u2014 "),Ej=n(H8e,"A",{href:!0});var Hdt=s(Ej);w4o=r(Hdt,"TransfoXLModel"),Hdt.forEach(t),A4o=r(H8e," (Transformer-XL model)"),H8e.forEach(t),L4o=i($),s_=n($,"LI",{});var U8e=s(s_);Jde=n(U8e,"STRONG",{});var Udt=s(Jde);y4o=r(Udt,"unispeech"),Udt.forEach(t),x4o=r(U8e," \u2014 "),Cj=n(U8e,"A",{href:!0});var Jdt=s(Cj);$4o=r(Jdt,"UniSpeechModel"),Jdt.forEach(t),k4o=r(U8e," (UniSpeech model)"),U8e.forEach(t),S4o=i($),l_=n($,"LI",{});var J8e=s(l_);Yde=n(J8e,"STRONG",{});var Ydt=s(Yde);R4o=r(Ydt,"unispeech-sat"),Ydt.forEach(t),P4o=r(J8e," \u2014 "),wj=n(J8e,"A",{href:!0});var Kdt=s(wj);B4o=r(Kdt,"UniSpeechSatModel"),Kdt.forEach(t),I4o=r(J8e," (UniSpeechSat model)"),J8e.forEach(t),N4o=i($),i_=n($,"LI",{});var Y8e=s(i_);Kde=n(Y8e,"STRONG",{});var Zdt=s(Kde);q4o=r(Zdt,"van"),Zdt.forEach(t),j4o=r(Y8e," \u2014 "),Aj=n(Y8e,"A",{href:!0});var ect=s(Aj);D4o=r(ect,"VanModel"),ect.forEach(t),G4o=r(Y8e," (VAN model)"),Y8e.forEach(t),O4o=i($),d_=n($,"LI",{});var K8e=s(d_);Zde=n(K8e,"STRONG",{});var oct=s(Zde);V4o=r(oct,"vilt"),oct.forEach(t),X4o=r(K8e," \u2014 "),Lj=n(K8e,"A",{href:!0});var rct=s(Lj);z4o=r(rct,"ViltModel"),rct.forEach(t),W4o=r(K8e," (ViLT model)"),K8e.forEach(t),Q4o=i($),c_=n($,"LI",{});var Z8e=s(c_);ece=n(Z8e,"STRONG",{});var tct=s(ece);H4o=r(tct,"vision-text-dual-encoder"),tct.forEach(t),U4o=r(Z8e," \u2014 "),yj=n(Z8e,"A",{href:!0});var act=s(yj);J4o=r(act,"VisionTextDualEncoderModel"),act.forEach(t),Y4o=r(Z8e," (VisionTextDualEncoder model)"),Z8e.forEach(t),K4o=i($),f_=n($,"LI",{});var e9e=s(f_);oce=n(e9e,"STRONG",{});var nct=s(oce);Z4o=r(nct,"visual_bert"),nct.forEach(t),eEo=r(e9e," \u2014 "),xj=n(e9e,"A",{href:!0});var sct=s(xj);oEo=r(sct,"VisualBertModel"),sct.forEach(t),rEo=r(e9e," (VisualBERT model)"),e9e.forEach(t),tEo=i($),m_=n($,"LI",{});var o9e=s(m_);rce=n(o9e,"STRONG",{});var lct=s(rce);aEo=r(lct,"vit"),lct.forEach(t),nEo=r(o9e," \u2014 "),$j=n(o9e,"A",{href:!0});var ict=s($j);sEo=r(ict,"ViTModel"),ict.forEach(t),lEo=r(o9e," (ViT model)"),o9e.forEach(t),iEo=i($),g_=n($,"LI",{});var r9e=s(g_);tce=n(r9e,"STRONG",{});var dct=s(tce);dEo=r(dct,"vit_mae"),dct.forEach(t),cEo=r(r9e," \u2014 "),kj=n(r9e,"A",{href:!0});var cct=s(kj);fEo=r(cct,"ViTMAEModel"),cct.forEach(t),mEo=r(r9e," (ViTMAE model)"),r9e.forEach(t),gEo=i($),h_=n($,"LI",{});var t9e=s(h_);ace=n(t9e,"STRONG",{});var fct=s(ace);hEo=r(fct,"wav2vec2"),fct.forEach(t),pEo=r(t9e," \u2014 "),Sj=n(t9e,"A",{href:!0});var mct=s(Sj);uEo=r(mct,"Wav2Vec2Model"),mct.forEach(t),_Eo=r(t9e," (Wav2Vec2 model)"),t9e.forEach(t),bEo=i($),p_=n($,"LI",{});var a9e=s(p_);nce=n(a9e,"STRONG",{});var gct=s(nce);vEo=r(gct,"wav2vec2-conformer"),gct.forEach(t),FEo=r(a9e," \u2014 "),Rj=n(a9e,"A",{href:!0});var hct=s(Rj);TEo=r(hct,"Wav2Vec2ConformerModel"),hct.forEach(t),MEo=r(a9e," (Wav2Vec2-Conformer model)"),a9e.forEach(t),EEo=i($),u_=n($,"LI",{});var n9e=s(u_);sce=n(n9e,"STRONG",{});var pct=s(sce);CEo=r(pct,"wavlm"),pct.forEach(t),wEo=r(n9e," \u2014 "),Pj=n(n9e,"A",{href:!0});var uct=s(Pj);AEo=r(uct,"WavLMModel"),uct.forEach(t),LEo=r(n9e," (WavLM model)"),n9e.forEach(t),yEo=i($),__=n($,"LI",{});var s9e=s(__);lce=n(s9e,"STRONG",{});var _ct=s(lce);xEo=r(_ct,"xglm"),_ct.forEach(t),$Eo=r(s9e," \u2014 "),Bj=n(s9e,"A",{href:!0});var bct=s(Bj);kEo=r(bct,"XGLMModel"),bct.forEach(t),SEo=r(s9e," (XGLM model)"),s9e.forEach(t),REo=i($),b_=n($,"LI",{});var l9e=s(b_);ice=n(l9e,"STRONG",{});var vct=s(ice);PEo=r(vct,"xlm"),vct.forEach(t),BEo=r(l9e," \u2014 "),Ij=n(l9e,"A",{href:!0});var Fct=s(Ij);IEo=r(Fct,"XLMModel"),Fct.forEach(t),NEo=r(l9e," (XLM model)"),l9e.forEach(t),qEo=i($),v_=n($,"LI",{});var i9e=s(v_);dce=n(i9e,"STRONG",{});var Tct=s(dce);jEo=r(Tct,"xlm-prophetnet"),Tct.forEach(t),DEo=r(i9e," \u2014 "),Nj=n(i9e,"A",{href:!0});var Mct=s(Nj);GEo=r(Mct,"XLMProphetNetModel"),Mct.forEach(t),OEo=r(i9e," (XLM-ProphetNet model)"),i9e.forEach(t),VEo=i($),F_=n($,"LI",{});var d9e=s(F_);cce=n(d9e,"STRONG",{});var Ect=s(cce);XEo=r(Ect,"xlm-roberta"),Ect.forEach(t),zEo=r(d9e," \u2014 "),qj=n(d9e,"A",{href:!0});var Cct=s(qj);WEo=r(Cct,"XLMRobertaModel"),Cct.forEach(t),QEo=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),HEo=i($),T_=n($,"LI",{});var c9e=s(T_);fce=n(c9e,"STRONG",{});var wct=s(fce);UEo=r(wct,"xlm-roberta-xl"),wct.forEach(t),JEo=r(c9e," \u2014 "),jj=n(c9e,"A",{href:!0});var Act=s(jj);YEo=r(Act,"XLMRobertaXLModel"),Act.forEach(t),KEo=r(c9e," (XLM-RoBERTa-XL model)"),c9e.forEach(t),ZEo=i($),M_=n($,"LI",{});var f9e=s(M_);mce=n(f9e,"STRONG",{});var Lct=s(mce);eCo=r(Lct,"xlnet"),Lct.forEach(t),oCo=r(f9e," \u2014 "),Dj=n(f9e,"A",{href:!0});var yct=s(Dj);rCo=r(yct,"XLNetModel"),yct.forEach(t),tCo=r(f9e," (XLNet model)"),f9e.forEach(t),aCo=i($),E_=n($,"LI",{});var m9e=s(E_);gce=n(m9e,"STRONG",{});var xct=s(gce);nCo=r(xct,"yolos"),xct.forEach(t),sCo=r(m9e," \u2014 "),Gj=n(m9e,"A",{href:!0});var $ct=s(Gj);lCo=r($ct,"YolosModel"),$ct.forEach(t),iCo=r(m9e," (YOLOS model)"),m9e.forEach(t),dCo=i($),C_=n($,"LI",{});var g9e=s(C_);hce=n(g9e,"STRONG",{});var kct=s(hce);cCo=r(kct,"yoso"),kct.forEach(t),fCo=r(g9e," \u2014 "),Oj=n(g9e,"A",{href:!0});var Sct=s(Oj);mCo=r(Sct,"YosoModel"),Sct.forEach(t),gCo=r(g9e," (YOSO model)"),g9e.forEach(t),$.forEach(t),hCo=i(aa),w_=n(aa,"P",{});var h9e=s(w_);pCo=r(h9e,"The model is set in evaluation mode by default using "),pce=n(h9e,"CODE",{});var Rct=s(pce);uCo=r(Rct,"model.eval()"),Rct.forEach(t),_Co=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(h9e,"CODE",{});var Pct=s(uce);bCo=r(Pct,"model.train()"),Pct.forEach(t),h9e.forEach(t),vCo=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),gGe=i(f),Ni=n(f,"H2",{class:!0});var vVe=s(Ni);L_=n(vVe,"A",{id:!0,class:!0,href:!0});var Bct=s(L_);_ce=n(Bct,"SPAN",{});var Ict=s(_ce);T(JL.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),FCo=i(vVe),bce=n(vVe,"SPAN",{});var Nct=s(bce);TCo=r(Nct,"AutoModelForPreTraining"),Nct.forEach(t),vVe.forEach(t),hGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(YL.$$.fragment,Js),MCo=i(Js),qi=n(Js,"P",{});var Zee=s(qi);ECo=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=n(Zee,"A",{href:!0});var qct=s(Vj);CCo=r(qct,"from_pretrained()"),qct.forEach(t),wCo=r(Zee," class method or the "),Xj=n(Zee,"A",{href:!0});var jct=s(Xj);ACo=r(jct,"from_config()"),jct.forEach(t),LCo=r(Zee,` class
method.`),Zee.forEach(t),yCo=i(Js),KL=n(Js,"P",{});var FVe=s(KL);xCo=r(FVe,"This class cannot be instantiated directly using "),vce=n(FVe,"CODE",{});var Dct=s(vce);$Co=r(Dct,"__init__()"),Dct.forEach(t),kCo=r(FVe," (throws an error)."),FVe.forEach(t),SCo=i(Js),st=n(Js,"DIV",{class:!0});var Ew=s(st);T(ZL.$$.fragment,Ew),RCo=i(Ew),Fce=n(Ew,"P",{});var Gct=s(Fce);PCo=r(Gct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gct.forEach(t),BCo=i(Ew),ji=n(Ew,"P",{});var eoe=s(ji);ICo=r(eoe,`Note:
Loading a model from its configuration file does `),Tce=n(eoe,"STRONG",{});var Oct=s(Tce);NCo=r(Oct,"not"),Oct.forEach(t),qCo=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(eoe,"A",{href:!0});var Vct=s(zj);jCo=r(Vct,"from_pretrained()"),Vct.forEach(t),DCo=r(eoe," to load the model weights."),eoe.forEach(t),GCo=i(Ew),T(y_.$$.fragment,Ew),Ew.forEach(t),OCo=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(ey.$$.fragment,na),VCo=i(na),Mce=n(na,"P",{});var Xct=s(Mce);XCo=r(Xct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xct.forEach(t),zCo=i(na),Ra=n(na,"P",{});var Cw=s(Ra);WCo=r(Cw,"The model class to instantiate is selected based on the "),Ece=n(Cw,"CODE",{});var zct=s(Ece);QCo=r(zct,"model_type"),zct.forEach(t),HCo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Cce=n(Cw,"CODE",{});var Wct=s(Cce);UCo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),JCo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(Cw,"CODE",{});var Qct=s(wce);YCo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),KCo=r(Cw,":"),Cw.forEach(t),ZCo=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var p9e=s(x_);Ace=n(p9e,"STRONG",{});var Hct=s(Ace);e5o=r(Hct,"albert"),Hct.forEach(t),o5o=r(p9e," \u2014 "),Wj=n(p9e,"A",{href:!0});var Uct=s(Wj);r5o=r(Uct,"AlbertForPreTraining"),Uct.forEach(t),t5o=r(p9e," (ALBERT model)"),p9e.forEach(t),a5o=i(O),$_=n(O,"LI",{});var u9e=s($_);Lce=n(u9e,"STRONG",{});var Jct=s(Lce);n5o=r(Jct,"bart"),Jct.forEach(t),s5o=r(u9e," \u2014 "),Qj=n(u9e,"A",{href:!0});var Yct=s(Qj);l5o=r(Yct,"BartForConditionalGeneration"),Yct.forEach(t),i5o=r(u9e," (BART model)"),u9e.forEach(t),d5o=i(O),k_=n(O,"LI",{});var _9e=s(k_);yce=n(_9e,"STRONG",{});var Kct=s(yce);c5o=r(Kct,"bert"),Kct.forEach(t),f5o=r(_9e," \u2014 "),Hj=n(_9e,"A",{href:!0});var Zct=s(Hj);m5o=r(Zct,"BertForPreTraining"),Zct.forEach(t),g5o=r(_9e," (BERT model)"),_9e.forEach(t),h5o=i(O),S_=n(O,"LI",{});var b9e=s(S_);xce=n(b9e,"STRONG",{});var eft=s(xce);p5o=r(eft,"big_bird"),eft.forEach(t),u5o=r(b9e," \u2014 "),Uj=n(b9e,"A",{href:!0});var oft=s(Uj);_5o=r(oft,"BigBirdForPreTraining"),oft.forEach(t),b5o=r(b9e," (BigBird model)"),b9e.forEach(t),v5o=i(O),R_=n(O,"LI",{});var v9e=s(R_);$ce=n(v9e,"STRONG",{});var rft=s($ce);F5o=r(rft,"bloom"),rft.forEach(t),T5o=r(v9e," \u2014 "),Jj=n(v9e,"A",{href:!0});var tft=s(Jj);M5o=r(tft,"BloomForCausalLM"),tft.forEach(t),E5o=r(v9e," (BLOOM model)"),v9e.forEach(t),C5o=i(O),P_=n(O,"LI",{});var F9e=s(P_);kce=n(F9e,"STRONG",{});var aft=s(kce);w5o=r(aft,"camembert"),aft.forEach(t),A5o=r(F9e," \u2014 "),Yj=n(F9e,"A",{href:!0});var nft=s(Yj);L5o=r(nft,"CamembertForMaskedLM"),nft.forEach(t),y5o=r(F9e," (CamemBERT model)"),F9e.forEach(t),x5o=i(O),B_=n(O,"LI",{});var T9e=s(B_);Sce=n(T9e,"STRONG",{});var sft=s(Sce);$5o=r(sft,"ctrl"),sft.forEach(t),k5o=r(T9e," \u2014 "),Kj=n(T9e,"A",{href:!0});var lft=s(Kj);S5o=r(lft,"CTRLLMHeadModel"),lft.forEach(t),R5o=r(T9e," (CTRL model)"),T9e.forEach(t),P5o=i(O),I_=n(O,"LI",{});var M9e=s(I_);Rce=n(M9e,"STRONG",{});var ift=s(Rce);B5o=r(ift,"data2vec-text"),ift.forEach(t),I5o=r(M9e," \u2014 "),Zj=n(M9e,"A",{href:!0});var dft=s(Zj);N5o=r(dft,"Data2VecTextForMaskedLM"),dft.forEach(t),q5o=r(M9e," (Data2VecText model)"),M9e.forEach(t),j5o=i(O),N_=n(O,"LI",{});var E9e=s(N_);Pce=n(E9e,"STRONG",{});var cft=s(Pce);D5o=r(cft,"deberta"),cft.forEach(t),G5o=r(E9e," \u2014 "),eD=n(E9e,"A",{href:!0});var fft=s(eD);O5o=r(fft,"DebertaForMaskedLM"),fft.forEach(t),V5o=r(E9e," (DeBERTa model)"),E9e.forEach(t),X5o=i(O),q_=n(O,"LI",{});var C9e=s(q_);Bce=n(C9e,"STRONG",{});var mft=s(Bce);z5o=r(mft,"deberta-v2"),mft.forEach(t),W5o=r(C9e," \u2014 "),oD=n(C9e,"A",{href:!0});var gft=s(oD);Q5o=r(gft,"DebertaV2ForMaskedLM"),gft.forEach(t),H5o=r(C9e," (DeBERTa-v2 model)"),C9e.forEach(t),U5o=i(O),j_=n(O,"LI",{});var w9e=s(j_);Ice=n(w9e,"STRONG",{});var hft=s(Ice);J5o=r(hft,"distilbert"),hft.forEach(t),Y5o=r(w9e," \u2014 "),rD=n(w9e,"A",{href:!0});var pft=s(rD);K5o=r(pft,"DistilBertForMaskedLM"),pft.forEach(t),Z5o=r(w9e," (DistilBERT model)"),w9e.forEach(t),e3o=i(O),D_=n(O,"LI",{});var A9e=s(D_);Nce=n(A9e,"STRONG",{});var uft=s(Nce);o3o=r(uft,"electra"),uft.forEach(t),r3o=r(A9e," \u2014 "),tD=n(A9e,"A",{href:!0});var _ft=s(tD);t3o=r(_ft,"ElectraForPreTraining"),_ft.forEach(t),a3o=r(A9e," (ELECTRA model)"),A9e.forEach(t),n3o=i(O),G_=n(O,"LI",{});var L9e=s(G_);qce=n(L9e,"STRONG",{});var bft=s(qce);s3o=r(bft,"flaubert"),bft.forEach(t),l3o=r(L9e," \u2014 "),aD=n(L9e,"A",{href:!0});var vft=s(aD);i3o=r(vft,"FlaubertWithLMHeadModel"),vft.forEach(t),d3o=r(L9e," (FlauBERT model)"),L9e.forEach(t),c3o=i(O),O_=n(O,"LI",{});var y9e=s(O_);jce=n(y9e,"STRONG",{});var Fft=s(jce);f3o=r(Fft,"flava"),Fft.forEach(t),m3o=r(y9e," \u2014 "),nD=n(y9e,"A",{href:!0});var Tft=s(nD);g3o=r(Tft,"FlavaForPreTraining"),Tft.forEach(t),h3o=r(y9e," (FLAVA model)"),y9e.forEach(t),p3o=i(O),V_=n(O,"LI",{});var x9e=s(V_);Dce=n(x9e,"STRONG",{});var Mft=s(Dce);u3o=r(Mft,"fnet"),Mft.forEach(t),_3o=r(x9e," \u2014 "),sD=n(x9e,"A",{href:!0});var Eft=s(sD);b3o=r(Eft,"FNetForPreTraining"),Eft.forEach(t),v3o=r(x9e," (FNet model)"),x9e.forEach(t),F3o=i(O),X_=n(O,"LI",{});var $9e=s(X_);Gce=n($9e,"STRONG",{});var Cft=s(Gce);T3o=r(Cft,"fsmt"),Cft.forEach(t),M3o=r($9e," \u2014 "),lD=n($9e,"A",{href:!0});var wft=s(lD);E3o=r(wft,"FSMTForConditionalGeneration"),wft.forEach(t),C3o=r($9e," (FairSeq Machine-Translation model)"),$9e.forEach(t),w3o=i(O),z_=n(O,"LI",{});var k9e=s(z_);Oce=n(k9e,"STRONG",{});var Aft=s(Oce);A3o=r(Aft,"funnel"),Aft.forEach(t),L3o=r(k9e," \u2014 "),iD=n(k9e,"A",{href:!0});var Lft=s(iD);y3o=r(Lft,"FunnelForPreTraining"),Lft.forEach(t),x3o=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),$3o=i(O),W_=n(O,"LI",{});var S9e=s(W_);Vce=n(S9e,"STRONG",{});var yft=s(Vce);k3o=r(yft,"gpt2"),yft.forEach(t),S3o=r(S9e," \u2014 "),dD=n(S9e,"A",{href:!0});var xft=s(dD);R3o=r(xft,"GPT2LMHeadModel"),xft.forEach(t),P3o=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),B3o=i(O),Q_=n(O,"LI",{});var R9e=s(Q_);Xce=n(R9e,"STRONG",{});var $ft=s(Xce);I3o=r($ft,"ibert"),$ft.forEach(t),N3o=r(R9e," \u2014 "),cD=n(R9e,"A",{href:!0});var kft=s(cD);q3o=r(kft,"IBertForMaskedLM"),kft.forEach(t),j3o=r(R9e," (I-BERT model)"),R9e.forEach(t),D3o=i(O),H_=n(O,"LI",{});var P9e=s(H_);zce=n(P9e,"STRONG",{});var Sft=s(zce);G3o=r(Sft,"layoutlm"),Sft.forEach(t),O3o=r(P9e," \u2014 "),fD=n(P9e,"A",{href:!0});var Rft=s(fD);V3o=r(Rft,"LayoutLMForMaskedLM"),Rft.forEach(t),X3o=r(P9e," (LayoutLM model)"),P9e.forEach(t),z3o=i(O),U_=n(O,"LI",{});var B9e=s(U_);Wce=n(B9e,"STRONG",{});var Pft=s(Wce);W3o=r(Pft,"longformer"),Pft.forEach(t),Q3o=r(B9e," \u2014 "),mD=n(B9e,"A",{href:!0});var Bft=s(mD);H3o=r(Bft,"LongformerForMaskedLM"),Bft.forEach(t),U3o=r(B9e," (Longformer model)"),B9e.forEach(t),J3o=i(O),J_=n(O,"LI",{});var I9e=s(J_);Qce=n(I9e,"STRONG",{});var Ift=s(Qce);Y3o=r(Ift,"lxmert"),Ift.forEach(t),K3o=r(I9e," \u2014 "),gD=n(I9e,"A",{href:!0});var Nft=s(gD);Z3o=r(Nft,"LxmertForPreTraining"),Nft.forEach(t),e0o=r(I9e," (LXMERT model)"),I9e.forEach(t),o0o=i(O),Y_=n(O,"LI",{});var N9e=s(Y_);Hce=n(N9e,"STRONG",{});var qft=s(Hce);r0o=r(qft,"megatron-bert"),qft.forEach(t),t0o=r(N9e," \u2014 "),hD=n(N9e,"A",{href:!0});var jft=s(hD);a0o=r(jft,"MegatronBertForPreTraining"),jft.forEach(t),n0o=r(N9e," (Megatron-BERT model)"),N9e.forEach(t),s0o=i(O),K_=n(O,"LI",{});var q9e=s(K_);Uce=n(q9e,"STRONG",{});var Dft=s(Uce);l0o=r(Dft,"mobilebert"),Dft.forEach(t),i0o=r(q9e," \u2014 "),pD=n(q9e,"A",{href:!0});var Gft=s(pD);d0o=r(Gft,"MobileBertForPreTraining"),Gft.forEach(t),c0o=r(q9e," (MobileBERT model)"),q9e.forEach(t),f0o=i(O),Z_=n(O,"LI",{});var j9e=s(Z_);Jce=n(j9e,"STRONG",{});var Oft=s(Jce);m0o=r(Oft,"mpnet"),Oft.forEach(t),g0o=r(j9e," \u2014 "),uD=n(j9e,"A",{href:!0});var Vft=s(uD);h0o=r(Vft,"MPNetForMaskedLM"),Vft.forEach(t),p0o=r(j9e," (MPNet model)"),j9e.forEach(t),u0o=i(O),e1=n(O,"LI",{});var D9e=s(e1);Yce=n(D9e,"STRONG",{});var Xft=s(Yce);_0o=r(Xft,"openai-gpt"),Xft.forEach(t),b0o=r(D9e," \u2014 "),_D=n(D9e,"A",{href:!0});var zft=s(_D);v0o=r(zft,"OpenAIGPTLMHeadModel"),zft.forEach(t),F0o=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),T0o=i(O),o1=n(O,"LI",{});var G9e=s(o1);Kce=n(G9e,"STRONG",{});var Wft=s(Kce);M0o=r(Wft,"retribert"),Wft.forEach(t),E0o=r(G9e," \u2014 "),bD=n(G9e,"A",{href:!0});var Qft=s(bD);C0o=r(Qft,"RetriBertModel"),Qft.forEach(t),w0o=r(G9e," (RetriBERT model)"),G9e.forEach(t),A0o=i(O),r1=n(O,"LI",{});var O9e=s(r1);Zce=n(O9e,"STRONG",{});var Hft=s(Zce);L0o=r(Hft,"roberta"),Hft.forEach(t),y0o=r(O9e," \u2014 "),vD=n(O9e,"A",{href:!0});var Uft=s(vD);x0o=r(Uft,"RobertaForMaskedLM"),Uft.forEach(t),$0o=r(O9e," (RoBERTa model)"),O9e.forEach(t),k0o=i(O),t1=n(O,"LI",{});var V9e=s(t1);efe=n(V9e,"STRONG",{});var Jft=s(efe);S0o=r(Jft,"splinter"),Jft.forEach(t),R0o=r(V9e," \u2014 "),FD=n(V9e,"A",{href:!0});var Yft=s(FD);P0o=r(Yft,"SplinterForPreTraining"),Yft.forEach(t),B0o=r(V9e," (Splinter model)"),V9e.forEach(t),I0o=i(O),a1=n(O,"LI",{});var X9e=s(a1);ofe=n(X9e,"STRONG",{});var Kft=s(ofe);N0o=r(Kft,"squeezebert"),Kft.forEach(t),q0o=r(X9e," \u2014 "),TD=n(X9e,"A",{href:!0});var Zft=s(TD);j0o=r(Zft,"SqueezeBertForMaskedLM"),Zft.forEach(t),D0o=r(X9e," (SqueezeBERT model)"),X9e.forEach(t),G0o=i(O),n1=n(O,"LI",{});var z9e=s(n1);rfe=n(z9e,"STRONG",{});var emt=s(rfe);O0o=r(emt,"t5"),emt.forEach(t),V0o=r(z9e," \u2014 "),MD=n(z9e,"A",{href:!0});var omt=s(MD);X0o=r(omt,"T5ForConditionalGeneration"),omt.forEach(t),z0o=r(z9e," (T5 model)"),z9e.forEach(t),W0o=i(O),s1=n(O,"LI",{});var W9e=s(s1);tfe=n(W9e,"STRONG",{});var rmt=s(tfe);Q0o=r(rmt,"tapas"),rmt.forEach(t),H0o=r(W9e," \u2014 "),ED=n(W9e,"A",{href:!0});var tmt=s(ED);U0o=r(tmt,"TapasForMaskedLM"),tmt.forEach(t),J0o=r(W9e," (TAPAS model)"),W9e.forEach(t),Y0o=i(O),l1=n(O,"LI",{});var Q9e=s(l1);afe=n(Q9e,"STRONG",{});var amt=s(afe);K0o=r(amt,"transfo-xl"),amt.forEach(t),Z0o=r(Q9e," \u2014 "),CD=n(Q9e,"A",{href:!0});var nmt=s(CD);ewo=r(nmt,"TransfoXLLMHeadModel"),nmt.forEach(t),owo=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),rwo=i(O),i1=n(O,"LI",{});var H9e=s(i1);nfe=n(H9e,"STRONG",{});var smt=s(nfe);two=r(smt,"unispeech"),smt.forEach(t),awo=r(H9e," \u2014 "),wD=n(H9e,"A",{href:!0});var lmt=s(wD);nwo=r(lmt,"UniSpeechForPreTraining"),lmt.forEach(t),swo=r(H9e," (UniSpeech model)"),H9e.forEach(t),lwo=i(O),d1=n(O,"LI",{});var U9e=s(d1);sfe=n(U9e,"STRONG",{});var imt=s(sfe);iwo=r(imt,"unispeech-sat"),imt.forEach(t),dwo=r(U9e," \u2014 "),AD=n(U9e,"A",{href:!0});var dmt=s(AD);cwo=r(dmt,"UniSpeechSatForPreTraining"),dmt.forEach(t),fwo=r(U9e," (UniSpeechSat model)"),U9e.forEach(t),mwo=i(O),c1=n(O,"LI",{});var J9e=s(c1);lfe=n(J9e,"STRONG",{});var cmt=s(lfe);gwo=r(cmt,"visual_bert"),cmt.forEach(t),hwo=r(J9e," \u2014 "),LD=n(J9e,"A",{href:!0});var fmt=s(LD);pwo=r(fmt,"VisualBertForPreTraining"),fmt.forEach(t),uwo=r(J9e," (VisualBERT model)"),J9e.forEach(t),_wo=i(O),f1=n(O,"LI",{});var Y9e=s(f1);ife=n(Y9e,"STRONG",{});var mmt=s(ife);bwo=r(mmt,"vit_mae"),mmt.forEach(t),vwo=r(Y9e," \u2014 "),yD=n(Y9e,"A",{href:!0});var gmt=s(yD);Fwo=r(gmt,"ViTMAEForPreTraining"),gmt.forEach(t),Two=r(Y9e," (ViTMAE model)"),Y9e.forEach(t),Mwo=i(O),m1=n(O,"LI",{});var K9e=s(m1);dfe=n(K9e,"STRONG",{});var hmt=s(dfe);Ewo=r(hmt,"wav2vec2"),hmt.forEach(t),Cwo=r(K9e," \u2014 "),xD=n(K9e,"A",{href:!0});var pmt=s(xD);wwo=r(pmt,"Wav2Vec2ForPreTraining"),pmt.forEach(t),Awo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),Lwo=i(O),g1=n(O,"LI",{});var Z9e=s(g1);cfe=n(Z9e,"STRONG",{});var umt=s(cfe);ywo=r(umt,"wav2vec2-conformer"),umt.forEach(t),xwo=r(Z9e," \u2014 "),$D=n(Z9e,"A",{href:!0});var _mt=s($D);$wo=r(_mt,"Wav2Vec2ConformerForPreTraining"),_mt.forEach(t),kwo=r(Z9e," (Wav2Vec2-Conformer model)"),Z9e.forEach(t),Swo=i(O),h1=n(O,"LI",{});var exe=s(h1);ffe=n(exe,"STRONG",{});var bmt=s(ffe);Rwo=r(bmt,"xlm"),bmt.forEach(t),Pwo=r(exe," \u2014 "),kD=n(exe,"A",{href:!0});var vmt=s(kD);Bwo=r(vmt,"XLMWithLMHeadModel"),vmt.forEach(t),Iwo=r(exe," (XLM model)"),exe.forEach(t),Nwo=i(O),p1=n(O,"LI",{});var oxe=s(p1);mfe=n(oxe,"STRONG",{});var Fmt=s(mfe);qwo=r(Fmt,"xlm-roberta"),Fmt.forEach(t),jwo=r(oxe," \u2014 "),SD=n(oxe,"A",{href:!0});var Tmt=s(SD);Dwo=r(Tmt,"XLMRobertaForMaskedLM"),Tmt.forEach(t),Gwo=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Owo=i(O),u1=n(O,"LI",{});var rxe=s(u1);gfe=n(rxe,"STRONG",{});var Mmt=s(gfe);Vwo=r(Mmt,"xlm-roberta-xl"),Mmt.forEach(t),Xwo=r(rxe," \u2014 "),RD=n(rxe,"A",{href:!0});var Emt=s(RD);zwo=r(Emt,"XLMRobertaXLForMaskedLM"),Emt.forEach(t),Wwo=r(rxe," (XLM-RoBERTa-XL model)"),rxe.forEach(t),Qwo=i(O),_1=n(O,"LI",{});var txe=s(_1);hfe=n(txe,"STRONG",{});var Cmt=s(hfe);Hwo=r(Cmt,"xlnet"),Cmt.forEach(t),Uwo=r(txe," \u2014 "),PD=n(txe,"A",{href:!0});var wmt=s(PD);Jwo=r(wmt,"XLNetLMHeadModel"),wmt.forEach(t),Ywo=r(txe," (XLNet model)"),txe.forEach(t),O.forEach(t),Kwo=i(na),b1=n(na,"P",{});var axe=s(b1);Zwo=r(axe,"The model is set in evaluation mode by default using "),pfe=n(axe,"CODE",{});var Amt=s(pfe);eAo=r(Amt,"model.eval()"),Amt.forEach(t),oAo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(axe,"CODE",{});var Lmt=s(ufe);rAo=r(Lmt,"model.train()"),Lmt.forEach(t),axe.forEach(t),tAo=i(na),T(v1.$$.fragment,na),na.forEach(t),Js.forEach(t),pGe=i(f),Di=n(f,"H2",{class:!0});var TVe=s(Di);F1=n(TVe,"A",{id:!0,class:!0,href:!0});var ymt=s(F1);_fe=n(ymt,"SPAN",{});var xmt=s(_fe);T(oy.$$.fragment,xmt),xmt.forEach(t),ymt.forEach(t),aAo=i(TVe),bfe=n(TVe,"SPAN",{});var $mt=s(bfe);nAo=r($mt,"AutoModelForCausalLM"),$mt.forEach(t),TVe.forEach(t),uGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(ry.$$.fragment,Ys),sAo=i(Ys),Gi=n(Ys,"P",{});var ooe=s(Gi);lAo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=n(ooe,"A",{href:!0});var kmt=s(BD);iAo=r(kmt,"from_pretrained()"),kmt.forEach(t),dAo=r(ooe," class method or the "),ID=n(ooe,"A",{href:!0});var Smt=s(ID);cAo=r(Smt,"from_config()"),Smt.forEach(t),fAo=r(ooe,` class
method.`),ooe.forEach(t),mAo=i(Ys),ty=n(Ys,"P",{});var MVe=s(ty);gAo=r(MVe,"This class cannot be instantiated directly using "),vfe=n(MVe,"CODE",{});var Rmt=s(vfe);hAo=r(Rmt,"__init__()"),Rmt.forEach(t),pAo=r(MVe," (throws an error)."),MVe.forEach(t),uAo=i(Ys),lt=n(Ys,"DIV",{class:!0});var ww=s(lt);T(ay.$$.fragment,ww),_Ao=i(ww),Ffe=n(ww,"P",{});var Pmt=s(Ffe);bAo=r(Pmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pmt.forEach(t),vAo=i(ww),Oi=n(ww,"P",{});var roe=s(Oi);FAo=r(roe,`Note:
Loading a model from its configuration file does `),Tfe=n(roe,"STRONG",{});var Bmt=s(Tfe);TAo=r(Bmt,"not"),Bmt.forEach(t),MAo=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(roe,"A",{href:!0});var Imt=s(ND);EAo=r(Imt,"from_pretrained()"),Imt.forEach(t),CAo=r(roe," to load the model weights."),roe.forEach(t),wAo=i(ww),T(T1.$$.fragment,ww),ww.forEach(t),AAo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(ny.$$.fragment,sa),LAo=i(sa),Mfe=n(sa,"P",{});var Nmt=s(Mfe);yAo=r(Nmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nmt.forEach(t),xAo=i(sa),Pa=n(sa,"P",{});var Aw=s(Pa);$Ao=r(Aw,"The model class to instantiate is selected based on the "),Efe=n(Aw,"CODE",{});var qmt=s(Efe);kAo=r(qmt,"model_type"),qmt.forEach(t),SAo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(Aw,"CODE",{});var jmt=s(Cfe);RAo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),PAo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(Aw,"CODE",{});var Dmt=s(wfe);BAo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),IAo=r(Aw,":"),Aw.forEach(t),NAo=i(sa),z=n(sa,"UL",{});var W=s(z);M1=n(W,"LI",{});var nxe=s(M1);Afe=n(nxe,"STRONG",{});var Gmt=s(Afe);qAo=r(Gmt,"bart"),Gmt.forEach(t),jAo=r(nxe," \u2014 "),qD=n(nxe,"A",{href:!0});var Omt=s(qD);DAo=r(Omt,"BartForCausalLM"),Omt.forEach(t),GAo=r(nxe," (BART model)"),nxe.forEach(t),OAo=i(W),E1=n(W,"LI",{});var sxe=s(E1);Lfe=n(sxe,"STRONG",{});var Vmt=s(Lfe);VAo=r(Vmt,"bert"),Vmt.forEach(t),XAo=r(sxe," \u2014 "),jD=n(sxe,"A",{href:!0});var Xmt=s(jD);zAo=r(Xmt,"BertLMHeadModel"),Xmt.forEach(t),WAo=r(sxe," (BERT model)"),sxe.forEach(t),QAo=i(W),C1=n(W,"LI",{});var lxe=s(C1);yfe=n(lxe,"STRONG",{});var zmt=s(yfe);HAo=r(zmt,"bert-generation"),zmt.forEach(t),UAo=r(lxe," \u2014 "),DD=n(lxe,"A",{href:!0});var Wmt=s(DD);JAo=r(Wmt,"BertGenerationDecoder"),Wmt.forEach(t),YAo=r(lxe," (Bert Generation model)"),lxe.forEach(t),KAo=i(W),w1=n(W,"LI",{});var ixe=s(w1);xfe=n(ixe,"STRONG",{});var Qmt=s(xfe);ZAo=r(Qmt,"big_bird"),Qmt.forEach(t),eLo=r(ixe," \u2014 "),GD=n(ixe,"A",{href:!0});var Hmt=s(GD);oLo=r(Hmt,"BigBirdForCausalLM"),Hmt.forEach(t),rLo=r(ixe," (BigBird model)"),ixe.forEach(t),tLo=i(W),A1=n(W,"LI",{});var dxe=s(A1);$fe=n(dxe,"STRONG",{});var Umt=s($fe);aLo=r(Umt,"bigbird_pegasus"),Umt.forEach(t),nLo=r(dxe," \u2014 "),OD=n(dxe,"A",{href:!0});var Jmt=s(OD);sLo=r(Jmt,"BigBirdPegasusForCausalLM"),Jmt.forEach(t),lLo=r(dxe," (BigBird-Pegasus model)"),dxe.forEach(t),iLo=i(W),L1=n(W,"LI",{});var cxe=s(L1);kfe=n(cxe,"STRONG",{});var Ymt=s(kfe);dLo=r(Ymt,"blenderbot"),Ymt.forEach(t),cLo=r(cxe," \u2014 "),VD=n(cxe,"A",{href:!0});var Kmt=s(VD);fLo=r(Kmt,"BlenderbotForCausalLM"),Kmt.forEach(t),mLo=r(cxe," (Blenderbot model)"),cxe.forEach(t),gLo=i(W),y1=n(W,"LI",{});var fxe=s(y1);Sfe=n(fxe,"STRONG",{});var Zmt=s(Sfe);hLo=r(Zmt,"blenderbot-small"),Zmt.forEach(t),pLo=r(fxe," \u2014 "),XD=n(fxe,"A",{href:!0});var egt=s(XD);uLo=r(egt,"BlenderbotSmallForCausalLM"),egt.forEach(t),_Lo=r(fxe," (BlenderbotSmall model)"),fxe.forEach(t),bLo=i(W),x1=n(W,"LI",{});var mxe=s(x1);Rfe=n(mxe,"STRONG",{});var ogt=s(Rfe);vLo=r(ogt,"bloom"),ogt.forEach(t),FLo=r(mxe," \u2014 "),zD=n(mxe,"A",{href:!0});var rgt=s(zD);TLo=r(rgt,"BloomForCausalLM"),rgt.forEach(t),MLo=r(mxe," (BLOOM model)"),mxe.forEach(t),ELo=i(W),$1=n(W,"LI",{});var gxe=s($1);Pfe=n(gxe,"STRONG",{});var tgt=s(Pfe);CLo=r(tgt,"camembert"),tgt.forEach(t),wLo=r(gxe," \u2014 "),WD=n(gxe,"A",{href:!0});var agt=s(WD);ALo=r(agt,"CamembertForCausalLM"),agt.forEach(t),LLo=r(gxe," (CamemBERT model)"),gxe.forEach(t),yLo=i(W),k1=n(W,"LI",{});var hxe=s(k1);Bfe=n(hxe,"STRONG",{});var ngt=s(Bfe);xLo=r(ngt,"ctrl"),ngt.forEach(t),$Lo=r(hxe," \u2014 "),QD=n(hxe,"A",{href:!0});var sgt=s(QD);kLo=r(sgt,"CTRLLMHeadModel"),sgt.forEach(t),SLo=r(hxe," (CTRL model)"),hxe.forEach(t),RLo=i(W),S1=n(W,"LI",{});var pxe=s(S1);Ife=n(pxe,"STRONG",{});var lgt=s(Ife);PLo=r(lgt,"data2vec-text"),lgt.forEach(t),BLo=r(pxe," \u2014 "),HD=n(pxe,"A",{href:!0});var igt=s(HD);ILo=r(igt,"Data2VecTextForCausalLM"),igt.forEach(t),NLo=r(pxe," (Data2VecText model)"),pxe.forEach(t),qLo=i(W),R1=n(W,"LI",{});var uxe=s(R1);Nfe=n(uxe,"STRONG",{});var dgt=s(Nfe);jLo=r(dgt,"electra"),dgt.forEach(t),DLo=r(uxe," \u2014 "),UD=n(uxe,"A",{href:!0});var cgt=s(UD);GLo=r(cgt,"ElectraForCausalLM"),cgt.forEach(t),OLo=r(uxe," (ELECTRA model)"),uxe.forEach(t),VLo=i(W),P1=n(W,"LI",{});var _xe=s(P1);qfe=n(_xe,"STRONG",{});var fgt=s(qfe);XLo=r(fgt,"gpt2"),fgt.forEach(t),zLo=r(_xe," \u2014 "),JD=n(_xe,"A",{href:!0});var mgt=s(JD);WLo=r(mgt,"GPT2LMHeadModel"),mgt.forEach(t),QLo=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),HLo=i(W),B1=n(W,"LI",{});var bxe=s(B1);jfe=n(bxe,"STRONG",{});var ggt=s(jfe);ULo=r(ggt,"gpt_neo"),ggt.forEach(t),JLo=r(bxe," \u2014 "),YD=n(bxe,"A",{href:!0});var hgt=s(YD);YLo=r(hgt,"GPTNeoForCausalLM"),hgt.forEach(t),KLo=r(bxe," (GPT Neo model)"),bxe.forEach(t),ZLo=i(W),I1=n(W,"LI",{});var vxe=s(I1);Dfe=n(vxe,"STRONG",{});var pgt=s(Dfe);eyo=r(pgt,"gpt_neox"),pgt.forEach(t),oyo=r(vxe," \u2014 "),KD=n(vxe,"A",{href:!0});var ugt=s(KD);ryo=r(ugt,"GPTNeoXForCausalLM"),ugt.forEach(t),tyo=r(vxe," (GPT NeoX model)"),vxe.forEach(t),ayo=i(W),N1=n(W,"LI",{});var Fxe=s(N1);Gfe=n(Fxe,"STRONG",{});var _gt=s(Gfe);nyo=r(_gt,"gptj"),_gt.forEach(t),syo=r(Fxe," \u2014 "),ZD=n(Fxe,"A",{href:!0});var bgt=s(ZD);lyo=r(bgt,"GPTJForCausalLM"),bgt.forEach(t),iyo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),dyo=i(W),q1=n(W,"LI",{});var Txe=s(q1);Ofe=n(Txe,"STRONG",{});var vgt=s(Ofe);cyo=r(vgt,"marian"),vgt.forEach(t),fyo=r(Txe," \u2014 "),eG=n(Txe,"A",{href:!0});var Fgt=s(eG);myo=r(Fgt,"MarianForCausalLM"),Fgt.forEach(t),gyo=r(Txe," (Marian model)"),Txe.forEach(t),hyo=i(W),j1=n(W,"LI",{});var Mxe=s(j1);Vfe=n(Mxe,"STRONG",{});var Tgt=s(Vfe);pyo=r(Tgt,"mbart"),Tgt.forEach(t),uyo=r(Mxe," \u2014 "),oG=n(Mxe,"A",{href:!0});var Mgt=s(oG);_yo=r(Mgt,"MBartForCausalLM"),Mgt.forEach(t),byo=r(Mxe," (mBART model)"),Mxe.forEach(t),vyo=i(W),D1=n(W,"LI",{});var Exe=s(D1);Xfe=n(Exe,"STRONG",{});var Egt=s(Xfe);Fyo=r(Egt,"megatron-bert"),Egt.forEach(t),Tyo=r(Exe," \u2014 "),rG=n(Exe,"A",{href:!0});var Cgt=s(rG);Myo=r(Cgt,"MegatronBertForCausalLM"),Cgt.forEach(t),Eyo=r(Exe," (Megatron-BERT model)"),Exe.forEach(t),Cyo=i(W),G1=n(W,"LI",{});var Cxe=s(G1);zfe=n(Cxe,"STRONG",{});var wgt=s(zfe);wyo=r(wgt,"openai-gpt"),wgt.forEach(t),Ayo=r(Cxe," \u2014 "),tG=n(Cxe,"A",{href:!0});var Agt=s(tG);Lyo=r(Agt,"OpenAIGPTLMHeadModel"),Agt.forEach(t),yyo=r(Cxe," (OpenAI GPT model)"),Cxe.forEach(t),xyo=i(W),O1=n(W,"LI",{});var wxe=s(O1);Wfe=n(wxe,"STRONG",{});var Lgt=s(Wfe);$yo=r(Lgt,"opt"),Lgt.forEach(t),kyo=r(wxe," \u2014 "),aG=n(wxe,"A",{href:!0});var ygt=s(aG);Syo=r(ygt,"OPTForCausalLM"),ygt.forEach(t),Ryo=r(wxe," (OPT model)"),wxe.forEach(t),Pyo=i(W),V1=n(W,"LI",{});var Axe=s(V1);Qfe=n(Axe,"STRONG",{});var xgt=s(Qfe);Byo=r(xgt,"pegasus"),xgt.forEach(t),Iyo=r(Axe," \u2014 "),nG=n(Axe,"A",{href:!0});var $gt=s(nG);Nyo=r($gt,"PegasusForCausalLM"),$gt.forEach(t),qyo=r(Axe," (Pegasus model)"),Axe.forEach(t),jyo=i(W),X1=n(W,"LI",{});var Lxe=s(X1);Hfe=n(Lxe,"STRONG",{});var kgt=s(Hfe);Dyo=r(kgt,"plbart"),kgt.forEach(t),Gyo=r(Lxe," \u2014 "),sG=n(Lxe,"A",{href:!0});var Sgt=s(sG);Oyo=r(Sgt,"PLBartForCausalLM"),Sgt.forEach(t),Vyo=r(Lxe," (PLBart model)"),Lxe.forEach(t),Xyo=i(W),z1=n(W,"LI",{});var yxe=s(z1);Ufe=n(yxe,"STRONG",{});var Rgt=s(Ufe);zyo=r(Rgt,"prophetnet"),Rgt.forEach(t),Wyo=r(yxe," \u2014 "),lG=n(yxe,"A",{href:!0});var Pgt=s(lG);Qyo=r(Pgt,"ProphetNetForCausalLM"),Pgt.forEach(t),Hyo=r(yxe," (ProphetNet model)"),yxe.forEach(t),Uyo=i(W),W1=n(W,"LI",{});var xxe=s(W1);Jfe=n(xxe,"STRONG",{});var Bgt=s(Jfe);Jyo=r(Bgt,"qdqbert"),Bgt.forEach(t),Yyo=r(xxe," \u2014 "),iG=n(xxe,"A",{href:!0});var Igt=s(iG);Kyo=r(Igt,"QDQBertLMHeadModel"),Igt.forEach(t),Zyo=r(xxe," (QDQBert model)"),xxe.forEach(t),e8o=i(W),Q1=n(W,"LI",{});var $xe=s(Q1);Yfe=n($xe,"STRONG",{});var Ngt=s(Yfe);o8o=r(Ngt,"reformer"),Ngt.forEach(t),r8o=r($xe," \u2014 "),dG=n($xe,"A",{href:!0});var qgt=s(dG);t8o=r(qgt,"ReformerModelWithLMHead"),qgt.forEach(t),a8o=r($xe," (Reformer model)"),$xe.forEach(t),n8o=i(W),H1=n(W,"LI",{});var kxe=s(H1);Kfe=n(kxe,"STRONG",{});var jgt=s(Kfe);s8o=r(jgt,"rembert"),jgt.forEach(t),l8o=r(kxe," \u2014 "),cG=n(kxe,"A",{href:!0});var Dgt=s(cG);i8o=r(Dgt,"RemBertForCausalLM"),Dgt.forEach(t),d8o=r(kxe," (RemBERT model)"),kxe.forEach(t),c8o=i(W),U1=n(W,"LI",{});var Sxe=s(U1);Zfe=n(Sxe,"STRONG",{});var Ggt=s(Zfe);f8o=r(Ggt,"roberta"),Ggt.forEach(t),m8o=r(Sxe," \u2014 "),fG=n(Sxe,"A",{href:!0});var Ogt=s(fG);g8o=r(Ogt,"RobertaForCausalLM"),Ogt.forEach(t),h8o=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),p8o=i(W),J1=n(W,"LI",{});var Rxe=s(J1);eme=n(Rxe,"STRONG",{});var Vgt=s(eme);u8o=r(Vgt,"roformer"),Vgt.forEach(t),_8o=r(Rxe," \u2014 "),mG=n(Rxe,"A",{href:!0});var Xgt=s(mG);b8o=r(Xgt,"RoFormerForCausalLM"),Xgt.forEach(t),v8o=r(Rxe," (RoFormer model)"),Rxe.forEach(t),F8o=i(W),Y1=n(W,"LI",{});var Pxe=s(Y1);ome=n(Pxe,"STRONG",{});var zgt=s(ome);T8o=r(zgt,"speech_to_text_2"),zgt.forEach(t),M8o=r(Pxe," \u2014 "),gG=n(Pxe,"A",{href:!0});var Wgt=s(gG);E8o=r(Wgt,"Speech2Text2ForCausalLM"),Wgt.forEach(t),C8o=r(Pxe," (Speech2Text2 model)"),Pxe.forEach(t),w8o=i(W),K1=n(W,"LI",{});var Bxe=s(K1);rme=n(Bxe,"STRONG",{});var Qgt=s(rme);A8o=r(Qgt,"transfo-xl"),Qgt.forEach(t),L8o=r(Bxe," \u2014 "),hG=n(Bxe,"A",{href:!0});var Hgt=s(hG);y8o=r(Hgt,"TransfoXLLMHeadModel"),Hgt.forEach(t),x8o=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),$8o=i(W),Z1=n(W,"LI",{});var Ixe=s(Z1);tme=n(Ixe,"STRONG",{});var Ugt=s(tme);k8o=r(Ugt,"trocr"),Ugt.forEach(t),S8o=r(Ixe," \u2014 "),pG=n(Ixe,"A",{href:!0});var Jgt=s(pG);R8o=r(Jgt,"TrOCRForCausalLM"),Jgt.forEach(t),P8o=r(Ixe," (TrOCR model)"),Ixe.forEach(t),B8o=i(W),e7=n(W,"LI",{});var Nxe=s(e7);ame=n(Nxe,"STRONG",{});var Ygt=s(ame);I8o=r(Ygt,"xglm"),Ygt.forEach(t),N8o=r(Nxe," \u2014 "),uG=n(Nxe,"A",{href:!0});var Kgt=s(uG);q8o=r(Kgt,"XGLMForCausalLM"),Kgt.forEach(t),j8o=r(Nxe," (XGLM model)"),Nxe.forEach(t),D8o=i(W),o7=n(W,"LI",{});var qxe=s(o7);nme=n(qxe,"STRONG",{});var Zgt=s(nme);G8o=r(Zgt,"xlm"),Zgt.forEach(t),O8o=r(qxe," \u2014 "),_G=n(qxe,"A",{href:!0});var eht=s(_G);V8o=r(eht,"XLMWithLMHeadModel"),eht.forEach(t),X8o=r(qxe," (XLM model)"),qxe.forEach(t),z8o=i(W),r7=n(W,"LI",{});var jxe=s(r7);sme=n(jxe,"STRONG",{});var oht=s(sme);W8o=r(oht,"xlm-prophetnet"),oht.forEach(t),Q8o=r(jxe," \u2014 "),bG=n(jxe,"A",{href:!0});var rht=s(bG);H8o=r(rht,"XLMProphetNetForCausalLM"),rht.forEach(t),U8o=r(jxe," (XLM-ProphetNet model)"),jxe.forEach(t),J8o=i(W),t7=n(W,"LI",{});var Dxe=s(t7);lme=n(Dxe,"STRONG",{});var tht=s(lme);Y8o=r(tht,"xlm-roberta"),tht.forEach(t),K8o=r(Dxe," \u2014 "),vG=n(Dxe,"A",{href:!0});var aht=s(vG);Z8o=r(aht,"XLMRobertaForCausalLM"),aht.forEach(t),e9o=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),o9o=i(W),a7=n(W,"LI",{});var Gxe=s(a7);ime=n(Gxe,"STRONG",{});var nht=s(ime);r9o=r(nht,"xlm-roberta-xl"),nht.forEach(t),t9o=r(Gxe," \u2014 "),FG=n(Gxe,"A",{href:!0});var sht=s(FG);a9o=r(sht,"XLMRobertaXLForCausalLM"),sht.forEach(t),n9o=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),s9o=i(W),n7=n(W,"LI",{});var Oxe=s(n7);dme=n(Oxe,"STRONG",{});var lht=s(dme);l9o=r(lht,"xlnet"),lht.forEach(t),i9o=r(Oxe," \u2014 "),TG=n(Oxe,"A",{href:!0});var iht=s(TG);d9o=r(iht,"XLNetLMHeadModel"),iht.forEach(t),c9o=r(Oxe," (XLNet model)"),Oxe.forEach(t),W.forEach(t),f9o=i(sa),s7=n(sa,"P",{});var Vxe=s(s7);m9o=r(Vxe,"The model is set in evaluation mode by default using "),cme=n(Vxe,"CODE",{});var dht=s(cme);g9o=r(dht,"model.eval()"),dht.forEach(t),h9o=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Vxe,"CODE",{});var cht=s(fme);p9o=r(cht,"model.train()"),cht.forEach(t),Vxe.forEach(t),u9o=i(sa),T(l7.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),_Ge=i(f),Vi=n(f,"H2",{class:!0});var EVe=s(Vi);i7=n(EVe,"A",{id:!0,class:!0,href:!0});var fht=s(i7);mme=n(fht,"SPAN",{});var mht=s(mme);T(sy.$$.fragment,mht),mht.forEach(t),fht.forEach(t),_9o=i(EVe),gme=n(EVe,"SPAN",{});var ght=s(gme);b9o=r(ght,"AutoModelForMaskedLM"),ght.forEach(t),EVe.forEach(t),bGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(ly.$$.fragment,Ks),v9o=i(Ks),Xi=n(Ks,"P",{});var toe=s(Xi);F9o=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=n(toe,"A",{href:!0});var hht=s(MG);T9o=r(hht,"from_pretrained()"),hht.forEach(t),M9o=r(toe," class method or the "),EG=n(toe,"A",{href:!0});var pht=s(EG);E9o=r(pht,"from_config()"),pht.forEach(t),C9o=r(toe,` class
method.`),toe.forEach(t),w9o=i(Ks),iy=n(Ks,"P",{});var CVe=s(iy);A9o=r(CVe,"This class cannot be instantiated directly using "),hme=n(CVe,"CODE",{});var uht=s(hme);L9o=r(uht,"__init__()"),uht.forEach(t),y9o=r(CVe," (throws an error)."),CVe.forEach(t),x9o=i(Ks),it=n(Ks,"DIV",{class:!0});var Lw=s(it);T(dy.$$.fragment,Lw),$9o=i(Lw),pme=n(Lw,"P",{});var _ht=s(pme);k9o=r(_ht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_ht.forEach(t),S9o=i(Lw),zi=n(Lw,"P",{});var aoe=s(zi);R9o=r(aoe,`Note:
Loading a model from its configuration file does `),ume=n(aoe,"STRONG",{});var bht=s(ume);P9o=r(bht,"not"),bht.forEach(t),B9o=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(aoe,"A",{href:!0});var vht=s(CG);I9o=r(vht,"from_pretrained()"),vht.forEach(t),N9o=r(aoe," to load the model weights."),aoe.forEach(t),q9o=i(Lw),T(d7.$$.fragment,Lw),Lw.forEach(t),j9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(cy.$$.fragment,la),D9o=i(la),_me=n(la,"P",{});var Fht=s(_me);G9o=r(Fht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fht.forEach(t),O9o=i(la),Ba=n(la,"P",{});var yw=s(Ba);V9o=r(yw,"The model class to instantiate is selected based on the "),bme=n(yw,"CODE",{});var Tht=s(bme);X9o=r(Tht,"model_type"),Tht.forEach(t),z9o=r(yw,` property of the config object (either
passed as an argument or loaded from `),vme=n(yw,"CODE",{});var Mht=s(vme);W9o=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),Q9o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(yw,"CODE",{});var Eht=s(Fme);H9o=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),U9o=r(yw,":"),yw.forEach(t),J9o=i(la),Q=n(la,"UL",{});var U=s(Q);c7=n(U,"LI",{});var Xxe=s(c7);Tme=n(Xxe,"STRONG",{});var Cht=s(Tme);Y9o=r(Cht,"albert"),Cht.forEach(t),K9o=r(Xxe," \u2014 "),wG=n(Xxe,"A",{href:!0});var wht=s(wG);Z9o=r(wht,"AlbertForMaskedLM"),wht.forEach(t),exo=r(Xxe," (ALBERT model)"),Xxe.forEach(t),oxo=i(U),f7=n(U,"LI",{});var zxe=s(f7);Mme=n(zxe,"STRONG",{});var Aht=s(Mme);rxo=r(Aht,"bart"),Aht.forEach(t),txo=r(zxe," \u2014 "),AG=n(zxe,"A",{href:!0});var Lht=s(AG);axo=r(Lht,"BartForConditionalGeneration"),Lht.forEach(t),nxo=r(zxe," (BART model)"),zxe.forEach(t),sxo=i(U),m7=n(U,"LI",{});var Wxe=s(m7);Eme=n(Wxe,"STRONG",{});var yht=s(Eme);lxo=r(yht,"bert"),yht.forEach(t),ixo=r(Wxe," \u2014 "),LG=n(Wxe,"A",{href:!0});var xht=s(LG);dxo=r(xht,"BertForMaskedLM"),xht.forEach(t),cxo=r(Wxe," (BERT model)"),Wxe.forEach(t),fxo=i(U),g7=n(U,"LI",{});var Qxe=s(g7);Cme=n(Qxe,"STRONG",{});var $ht=s(Cme);mxo=r($ht,"big_bird"),$ht.forEach(t),gxo=r(Qxe," \u2014 "),yG=n(Qxe,"A",{href:!0});var kht=s(yG);hxo=r(kht,"BigBirdForMaskedLM"),kht.forEach(t),pxo=r(Qxe," (BigBird model)"),Qxe.forEach(t),uxo=i(U),h7=n(U,"LI",{});var Hxe=s(h7);wme=n(Hxe,"STRONG",{});var Sht=s(wme);_xo=r(Sht,"camembert"),Sht.forEach(t),bxo=r(Hxe," \u2014 "),xG=n(Hxe,"A",{href:!0});var Rht=s(xG);vxo=r(Rht,"CamembertForMaskedLM"),Rht.forEach(t),Fxo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),Txo=i(U),p7=n(U,"LI",{});var Uxe=s(p7);Ame=n(Uxe,"STRONG",{});var Pht=s(Ame);Mxo=r(Pht,"convbert"),Pht.forEach(t),Exo=r(Uxe," \u2014 "),$G=n(Uxe,"A",{href:!0});var Bht=s($G);Cxo=r(Bht,"ConvBertForMaskedLM"),Bht.forEach(t),wxo=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),Axo=i(U),u7=n(U,"LI",{});var Jxe=s(u7);Lme=n(Jxe,"STRONG",{});var Iht=s(Lme);Lxo=r(Iht,"data2vec-text"),Iht.forEach(t),yxo=r(Jxe," \u2014 "),kG=n(Jxe,"A",{href:!0});var Nht=s(kG);xxo=r(Nht,"Data2VecTextForMaskedLM"),Nht.forEach(t),$xo=r(Jxe," (Data2VecText model)"),Jxe.forEach(t),kxo=i(U),_7=n(U,"LI",{});var Yxe=s(_7);yme=n(Yxe,"STRONG",{});var qht=s(yme);Sxo=r(qht,"deberta"),qht.forEach(t),Rxo=r(Yxe," \u2014 "),SG=n(Yxe,"A",{href:!0});var jht=s(SG);Pxo=r(jht,"DebertaForMaskedLM"),jht.forEach(t),Bxo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),Ixo=i(U),b7=n(U,"LI",{});var Kxe=s(b7);xme=n(Kxe,"STRONG",{});var Dht=s(xme);Nxo=r(Dht,"deberta-v2"),Dht.forEach(t),qxo=r(Kxe," \u2014 "),RG=n(Kxe,"A",{href:!0});var Ght=s(RG);jxo=r(Ght,"DebertaV2ForMaskedLM"),Ght.forEach(t),Dxo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),Gxo=i(U),v7=n(U,"LI",{});var Zxe=s(v7);$me=n(Zxe,"STRONG",{});var Oht=s($me);Oxo=r(Oht,"distilbert"),Oht.forEach(t),Vxo=r(Zxe," \u2014 "),PG=n(Zxe,"A",{href:!0});var Vht=s(PG);Xxo=r(Vht,"DistilBertForMaskedLM"),Vht.forEach(t),zxo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),Wxo=i(U),F7=n(U,"LI",{});var e$e=s(F7);kme=n(e$e,"STRONG",{});var Xht=s(kme);Qxo=r(Xht,"electra"),Xht.forEach(t),Hxo=r(e$e," \u2014 "),BG=n(e$e,"A",{href:!0});var zht=s(BG);Uxo=r(zht,"ElectraForMaskedLM"),zht.forEach(t),Jxo=r(e$e," (ELECTRA model)"),e$e.forEach(t),Yxo=i(U),T7=n(U,"LI",{});var o$e=s(T7);Sme=n(o$e,"STRONG",{});var Wht=s(Sme);Kxo=r(Wht,"flaubert"),Wht.forEach(t),Zxo=r(o$e," \u2014 "),IG=n(o$e,"A",{href:!0});var Qht=s(IG);e$o=r(Qht,"FlaubertWithLMHeadModel"),Qht.forEach(t),o$o=r(o$e," (FlauBERT model)"),o$e.forEach(t),r$o=i(U),M7=n(U,"LI",{});var r$e=s(M7);Rme=n(r$e,"STRONG",{});var Hht=s(Rme);t$o=r(Hht,"fnet"),Hht.forEach(t),a$o=r(r$e," \u2014 "),NG=n(r$e,"A",{href:!0});var Uht=s(NG);n$o=r(Uht,"FNetForMaskedLM"),Uht.forEach(t),s$o=r(r$e," (FNet model)"),r$e.forEach(t),l$o=i(U),E7=n(U,"LI",{});var t$e=s(E7);Pme=n(t$e,"STRONG",{});var Jht=s(Pme);i$o=r(Jht,"funnel"),Jht.forEach(t),d$o=r(t$e," \u2014 "),qG=n(t$e,"A",{href:!0});var Yht=s(qG);c$o=r(Yht,"FunnelForMaskedLM"),Yht.forEach(t),f$o=r(t$e," (Funnel Transformer model)"),t$e.forEach(t),m$o=i(U),C7=n(U,"LI",{});var a$e=s(C7);Bme=n(a$e,"STRONG",{});var Kht=s(Bme);g$o=r(Kht,"ibert"),Kht.forEach(t),h$o=r(a$e," \u2014 "),jG=n(a$e,"A",{href:!0});var Zht=s(jG);p$o=r(Zht,"IBertForMaskedLM"),Zht.forEach(t),u$o=r(a$e," (I-BERT model)"),a$e.forEach(t),_$o=i(U),w7=n(U,"LI",{});var n$e=s(w7);Ime=n(n$e,"STRONG",{});var ept=s(Ime);b$o=r(ept,"layoutlm"),ept.forEach(t),v$o=r(n$e," \u2014 "),DG=n(n$e,"A",{href:!0});var opt=s(DG);F$o=r(opt,"LayoutLMForMaskedLM"),opt.forEach(t),T$o=r(n$e," (LayoutLM model)"),n$e.forEach(t),M$o=i(U),A7=n(U,"LI",{});var s$e=s(A7);Nme=n(s$e,"STRONG",{});var rpt=s(Nme);E$o=r(rpt,"longformer"),rpt.forEach(t),C$o=r(s$e," \u2014 "),GG=n(s$e,"A",{href:!0});var tpt=s(GG);w$o=r(tpt,"LongformerForMaskedLM"),tpt.forEach(t),A$o=r(s$e," (Longformer model)"),s$e.forEach(t),L$o=i(U),L7=n(U,"LI",{});var l$e=s(L7);qme=n(l$e,"STRONG",{});var apt=s(qme);y$o=r(apt,"luke"),apt.forEach(t),x$o=r(l$e," \u2014 "),OG=n(l$e,"A",{href:!0});var npt=s(OG);$$o=r(npt,"LukeForMaskedLM"),npt.forEach(t),k$o=r(l$e," (LUKE model)"),l$e.forEach(t),S$o=i(U),y7=n(U,"LI",{});var i$e=s(y7);jme=n(i$e,"STRONG",{});var spt=s(jme);R$o=r(spt,"mbart"),spt.forEach(t),P$o=r(i$e," \u2014 "),VG=n(i$e,"A",{href:!0});var lpt=s(VG);B$o=r(lpt,"MBartForConditionalGeneration"),lpt.forEach(t),I$o=r(i$e," (mBART model)"),i$e.forEach(t),N$o=i(U),x7=n(U,"LI",{});var d$e=s(x7);Dme=n(d$e,"STRONG",{});var ipt=s(Dme);q$o=r(ipt,"megatron-bert"),ipt.forEach(t),j$o=r(d$e," \u2014 "),XG=n(d$e,"A",{href:!0});var dpt=s(XG);D$o=r(dpt,"MegatronBertForMaskedLM"),dpt.forEach(t),G$o=r(d$e," (Megatron-BERT model)"),d$e.forEach(t),O$o=i(U),$7=n(U,"LI",{});var c$e=s($7);Gme=n(c$e,"STRONG",{});var cpt=s(Gme);V$o=r(cpt,"mobilebert"),cpt.forEach(t),X$o=r(c$e," \u2014 "),zG=n(c$e,"A",{href:!0});var fpt=s(zG);z$o=r(fpt,"MobileBertForMaskedLM"),fpt.forEach(t),W$o=r(c$e," (MobileBERT model)"),c$e.forEach(t),Q$o=i(U),k7=n(U,"LI",{});var f$e=s(k7);Ome=n(f$e,"STRONG",{});var mpt=s(Ome);H$o=r(mpt,"mpnet"),mpt.forEach(t),U$o=r(f$e," \u2014 "),WG=n(f$e,"A",{href:!0});var gpt=s(WG);J$o=r(gpt,"MPNetForMaskedLM"),gpt.forEach(t),Y$o=r(f$e," (MPNet model)"),f$e.forEach(t),K$o=i(U),S7=n(U,"LI",{});var m$e=s(S7);Vme=n(m$e,"STRONG",{});var hpt=s(Vme);Z$o=r(hpt,"nystromformer"),hpt.forEach(t),eko=r(m$e," \u2014 "),QG=n(m$e,"A",{href:!0});var ppt=s(QG);oko=r(ppt,"NystromformerForMaskedLM"),ppt.forEach(t),rko=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),tko=i(U),R7=n(U,"LI",{});var g$e=s(R7);Xme=n(g$e,"STRONG",{});var upt=s(Xme);ako=r(upt,"perceiver"),upt.forEach(t),nko=r(g$e," \u2014 "),HG=n(g$e,"A",{href:!0});var _pt=s(HG);sko=r(_pt,"PerceiverForMaskedLM"),_pt.forEach(t),lko=r(g$e," (Perceiver model)"),g$e.forEach(t),iko=i(U),P7=n(U,"LI",{});var h$e=s(P7);zme=n(h$e,"STRONG",{});var bpt=s(zme);dko=r(bpt,"qdqbert"),bpt.forEach(t),cko=r(h$e," \u2014 "),UG=n(h$e,"A",{href:!0});var vpt=s(UG);fko=r(vpt,"QDQBertForMaskedLM"),vpt.forEach(t),mko=r(h$e," (QDQBert model)"),h$e.forEach(t),gko=i(U),B7=n(U,"LI",{});var p$e=s(B7);Wme=n(p$e,"STRONG",{});var Fpt=s(Wme);hko=r(Fpt,"reformer"),Fpt.forEach(t),pko=r(p$e," \u2014 "),JG=n(p$e,"A",{href:!0});var Tpt=s(JG);uko=r(Tpt,"ReformerForMaskedLM"),Tpt.forEach(t),_ko=r(p$e," (Reformer model)"),p$e.forEach(t),bko=i(U),I7=n(U,"LI",{});var u$e=s(I7);Qme=n(u$e,"STRONG",{});var Mpt=s(Qme);vko=r(Mpt,"rembert"),Mpt.forEach(t),Fko=r(u$e," \u2014 "),YG=n(u$e,"A",{href:!0});var Ept=s(YG);Tko=r(Ept,"RemBertForMaskedLM"),Ept.forEach(t),Mko=r(u$e," (RemBERT model)"),u$e.forEach(t),Eko=i(U),N7=n(U,"LI",{});var _$e=s(N7);Hme=n(_$e,"STRONG",{});var Cpt=s(Hme);Cko=r(Cpt,"roberta"),Cpt.forEach(t),wko=r(_$e," \u2014 "),KG=n(_$e,"A",{href:!0});var wpt=s(KG);Ako=r(wpt,"RobertaForMaskedLM"),wpt.forEach(t),Lko=r(_$e," (RoBERTa model)"),_$e.forEach(t),yko=i(U),q7=n(U,"LI",{});var b$e=s(q7);Ume=n(b$e,"STRONG",{});var Apt=s(Ume);xko=r(Apt,"roformer"),Apt.forEach(t),$ko=r(b$e," \u2014 "),ZG=n(b$e,"A",{href:!0});var Lpt=s(ZG);kko=r(Lpt,"RoFormerForMaskedLM"),Lpt.forEach(t),Sko=r(b$e," (RoFormer model)"),b$e.forEach(t),Rko=i(U),j7=n(U,"LI",{});var v$e=s(j7);Jme=n(v$e,"STRONG",{});var ypt=s(Jme);Pko=r(ypt,"squeezebert"),ypt.forEach(t),Bko=r(v$e," \u2014 "),eO=n(v$e,"A",{href:!0});var xpt=s(eO);Iko=r(xpt,"SqueezeBertForMaskedLM"),xpt.forEach(t),Nko=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),qko=i(U),D7=n(U,"LI",{});var F$e=s(D7);Yme=n(F$e,"STRONG",{});var $pt=s(Yme);jko=r($pt,"tapas"),$pt.forEach(t),Dko=r(F$e," \u2014 "),oO=n(F$e,"A",{href:!0});var kpt=s(oO);Gko=r(kpt,"TapasForMaskedLM"),kpt.forEach(t),Oko=r(F$e," (TAPAS model)"),F$e.forEach(t),Vko=i(U),G7=n(U,"LI",{});var T$e=s(G7);Kme=n(T$e,"STRONG",{});var Spt=s(Kme);Xko=r(Spt,"wav2vec2"),Spt.forEach(t),zko=r(T$e," \u2014 "),Zme=n(T$e,"CODE",{});var Rpt=s(Zme);Wko=r(Rpt,"Wav2Vec2ForMaskedLM"),Rpt.forEach(t),Qko=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),Hko=i(U),O7=n(U,"LI",{});var M$e=s(O7);ege=n(M$e,"STRONG",{});var Ppt=s(ege);Uko=r(Ppt,"xlm"),Ppt.forEach(t),Jko=r(M$e," \u2014 "),rO=n(M$e,"A",{href:!0});var Bpt=s(rO);Yko=r(Bpt,"XLMWithLMHeadModel"),Bpt.forEach(t),Kko=r(M$e," (XLM model)"),M$e.forEach(t),Zko=i(U),V7=n(U,"LI",{});var E$e=s(V7);oge=n(E$e,"STRONG",{});var Ipt=s(oge);eSo=r(Ipt,"xlm-roberta"),Ipt.forEach(t),oSo=r(E$e," \u2014 "),tO=n(E$e,"A",{href:!0});var Npt=s(tO);rSo=r(Npt,"XLMRobertaForMaskedLM"),Npt.forEach(t),tSo=r(E$e," (XLM-RoBERTa model)"),E$e.forEach(t),aSo=i(U),X7=n(U,"LI",{});var C$e=s(X7);rge=n(C$e,"STRONG",{});var qpt=s(rge);nSo=r(qpt,"xlm-roberta-xl"),qpt.forEach(t),sSo=r(C$e," \u2014 "),aO=n(C$e,"A",{href:!0});var jpt=s(aO);lSo=r(jpt,"XLMRobertaXLForMaskedLM"),jpt.forEach(t),iSo=r(C$e," (XLM-RoBERTa-XL model)"),C$e.forEach(t),dSo=i(U),z7=n(U,"LI",{});var w$e=s(z7);tge=n(w$e,"STRONG",{});var Dpt=s(tge);cSo=r(Dpt,"yoso"),Dpt.forEach(t),fSo=r(w$e," \u2014 "),nO=n(w$e,"A",{href:!0});var Gpt=s(nO);mSo=r(Gpt,"YosoForMaskedLM"),Gpt.forEach(t),gSo=r(w$e," (YOSO model)"),w$e.forEach(t),U.forEach(t),hSo=i(la),W7=n(la,"P",{});var A$e=s(W7);pSo=r(A$e,"The model is set in evaluation mode by default using "),age=n(A$e,"CODE",{});var Opt=s(age);uSo=r(Opt,"model.eval()"),Opt.forEach(t),_So=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(A$e,"CODE",{});var Vpt=s(nge);bSo=r(Vpt,"model.train()"),Vpt.forEach(t),A$e.forEach(t),vSo=i(la),T(Q7.$$.fragment,la),la.forEach(t),Ks.forEach(t),vGe=i(f),Wi=n(f,"H2",{class:!0});var wVe=s(Wi);H7=n(wVe,"A",{id:!0,class:!0,href:!0});var Xpt=s(H7);sge=n(Xpt,"SPAN",{});var zpt=s(sge);T(fy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),FSo=i(wVe),lge=n(wVe,"SPAN",{});var Wpt=s(lge);TSo=r(Wpt,"AutoModelForSeq2SeqLM"),Wpt.forEach(t),wVe.forEach(t),FGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(my.$$.fragment,Zs),MSo=i(Zs),Qi=n(Zs,"P",{});var noe=s(Qi);ESo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=n(noe,"A",{href:!0});var Qpt=s(sO);CSo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),wSo=r(noe," class method or the "),lO=n(noe,"A",{href:!0});var Hpt=s(lO);ASo=r(Hpt,"from_config()"),Hpt.forEach(t),LSo=r(noe,` class
method.`),noe.forEach(t),ySo=i(Zs),gy=n(Zs,"P",{});var AVe=s(gy);xSo=r(AVe,"This class cannot be instantiated directly using "),ige=n(AVe,"CODE",{});var Upt=s(ige);$So=r(Upt,"__init__()"),Upt.forEach(t),kSo=r(AVe," (throws an error)."),AVe.forEach(t),SSo=i(Zs),dt=n(Zs,"DIV",{class:!0});var xw=s(dt);T(hy.$$.fragment,xw),RSo=i(xw),dge=n(xw,"P",{});var Jpt=s(dge);PSo=r(Jpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jpt.forEach(t),BSo=i(xw),Hi=n(xw,"P",{});var soe=s(Hi);ISo=r(soe,`Note:
Loading a model from its configuration file does `),cge=n(soe,"STRONG",{});var Ypt=s(cge);NSo=r(Ypt,"not"),Ypt.forEach(t),qSo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(soe,"A",{href:!0});var Kpt=s(iO);jSo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),DSo=r(soe," to load the model weights."),soe.forEach(t),GSo=i(xw),T(U7.$$.fragment,xw),xw.forEach(t),OSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(py.$$.fragment,ia),VSo=i(ia),fge=n(ia,"P",{});var Zpt=s(fge);XSo=r(Zpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zpt.forEach(t),zSo=i(ia),Ia=n(ia,"P",{});var $w=s(Ia);WSo=r($w,"The model class to instantiate is selected based on the "),mge=n($w,"CODE",{});var eut=s(mge);QSo=r(eut,"model_type"),eut.forEach(t),HSo=r($w,` property of the config object (either
passed as an argument or loaded from `),gge=n($w,"CODE",{});var out=s(gge);USo=r(out,"pretrained_model_name_or_path"),out.forEach(t),JSo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n($w,"CODE",{});var rut=s(hge);YSo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),KSo=r($w,":"),$w.forEach(t),ZSo=i(ia),pe=n(ia,"UL",{});var be=s(pe);J7=n(be,"LI",{});var L$e=s(J7);pge=n(L$e,"STRONG",{});var tut=s(pge);eRo=r(tut,"bart"),tut.forEach(t),oRo=r(L$e," \u2014 "),dO=n(L$e,"A",{href:!0});var aut=s(dO);rRo=r(aut,"BartForConditionalGeneration"),aut.forEach(t),tRo=r(L$e," (BART model)"),L$e.forEach(t),aRo=i(be),Y7=n(be,"LI",{});var y$e=s(Y7);uge=n(y$e,"STRONG",{});var nut=s(uge);nRo=r(nut,"bigbird_pegasus"),nut.forEach(t),sRo=r(y$e," \u2014 "),cO=n(y$e,"A",{href:!0});var sut=s(cO);lRo=r(sut,"BigBirdPegasusForConditionalGeneration"),sut.forEach(t),iRo=r(y$e," (BigBird-Pegasus model)"),y$e.forEach(t),dRo=i(be),K7=n(be,"LI",{});var x$e=s(K7);_ge=n(x$e,"STRONG",{});var lut=s(_ge);cRo=r(lut,"blenderbot"),lut.forEach(t),fRo=r(x$e," \u2014 "),fO=n(x$e,"A",{href:!0});var iut=s(fO);mRo=r(iut,"BlenderbotForConditionalGeneration"),iut.forEach(t),gRo=r(x$e," (Blenderbot model)"),x$e.forEach(t),hRo=i(be),Z7=n(be,"LI",{});var $$e=s(Z7);bge=n($$e,"STRONG",{});var dut=s(bge);pRo=r(dut,"blenderbot-small"),dut.forEach(t),uRo=r($$e," \u2014 "),mO=n($$e,"A",{href:!0});var cut=s(mO);_Ro=r(cut,"BlenderbotSmallForConditionalGeneration"),cut.forEach(t),bRo=r($$e," (BlenderbotSmall model)"),$$e.forEach(t),vRo=i(be),e2=n(be,"LI",{});var k$e=s(e2);vge=n(k$e,"STRONG",{});var fut=s(vge);FRo=r(fut,"encoder-decoder"),fut.forEach(t),TRo=r(k$e," \u2014 "),gO=n(k$e,"A",{href:!0});var mut=s(gO);MRo=r(mut,"EncoderDecoderModel"),mut.forEach(t),ERo=r(k$e," (Encoder decoder model)"),k$e.forEach(t),CRo=i(be),o2=n(be,"LI",{});var S$e=s(o2);Fge=n(S$e,"STRONG",{});var gut=s(Fge);wRo=r(gut,"fsmt"),gut.forEach(t),ARo=r(S$e," \u2014 "),hO=n(S$e,"A",{href:!0});var hut=s(hO);LRo=r(hut,"FSMTForConditionalGeneration"),hut.forEach(t),yRo=r(S$e," (FairSeq Machine-Translation model)"),S$e.forEach(t),xRo=i(be),r2=n(be,"LI",{});var R$e=s(r2);Tge=n(R$e,"STRONG",{});var put=s(Tge);$Ro=r(put,"led"),put.forEach(t),kRo=r(R$e," \u2014 "),pO=n(R$e,"A",{href:!0});var uut=s(pO);SRo=r(uut,"LEDForConditionalGeneration"),uut.forEach(t),RRo=r(R$e," (LED model)"),R$e.forEach(t),PRo=i(be),t2=n(be,"LI",{});var P$e=s(t2);Mge=n(P$e,"STRONG",{});var _ut=s(Mge);BRo=r(_ut,"longt5"),_ut.forEach(t),IRo=r(P$e," \u2014 "),uO=n(P$e,"A",{href:!0});var but=s(uO);NRo=r(but,"LongT5ForConditionalGeneration"),but.forEach(t),qRo=r(P$e," (LongT5 model)"),P$e.forEach(t),jRo=i(be),a2=n(be,"LI",{});var B$e=s(a2);Ege=n(B$e,"STRONG",{});var vut=s(Ege);DRo=r(vut,"m2m_100"),vut.forEach(t),GRo=r(B$e," \u2014 "),_O=n(B$e,"A",{href:!0});var Fut=s(_O);ORo=r(Fut,"M2M100ForConditionalGeneration"),Fut.forEach(t),VRo=r(B$e," (M2M100 model)"),B$e.forEach(t),XRo=i(be),n2=n(be,"LI",{});var I$e=s(n2);Cge=n(I$e,"STRONG",{});var Tut=s(Cge);zRo=r(Tut,"marian"),Tut.forEach(t),WRo=r(I$e," \u2014 "),bO=n(I$e,"A",{href:!0});var Mut=s(bO);QRo=r(Mut,"MarianMTModel"),Mut.forEach(t),HRo=r(I$e," (Marian model)"),I$e.forEach(t),URo=i(be),s2=n(be,"LI",{});var N$e=s(s2);wge=n(N$e,"STRONG",{});var Eut=s(wge);JRo=r(Eut,"mbart"),Eut.forEach(t),YRo=r(N$e," \u2014 "),vO=n(N$e,"A",{href:!0});var Cut=s(vO);KRo=r(Cut,"MBartForConditionalGeneration"),Cut.forEach(t),ZRo=r(N$e," (mBART model)"),N$e.forEach(t),ePo=i(be),l2=n(be,"LI",{});var q$e=s(l2);Age=n(q$e,"STRONG",{});var wut=s(Age);oPo=r(wut,"mt5"),wut.forEach(t),rPo=r(q$e," \u2014 "),FO=n(q$e,"A",{href:!0});var Aut=s(FO);tPo=r(Aut,"MT5ForConditionalGeneration"),Aut.forEach(t),aPo=r(q$e," (MT5 model)"),q$e.forEach(t),nPo=i(be),i2=n(be,"LI",{});var j$e=s(i2);Lge=n(j$e,"STRONG",{});var Lut=s(Lge);sPo=r(Lut,"pegasus"),Lut.forEach(t),lPo=r(j$e," \u2014 "),TO=n(j$e,"A",{href:!0});var yut=s(TO);iPo=r(yut,"PegasusForConditionalGeneration"),yut.forEach(t),dPo=r(j$e," (Pegasus model)"),j$e.forEach(t),cPo=i(be),d2=n(be,"LI",{});var D$e=s(d2);yge=n(D$e,"STRONG",{});var xut=s(yge);fPo=r(xut,"plbart"),xut.forEach(t),mPo=r(D$e," \u2014 "),MO=n(D$e,"A",{href:!0});var $ut=s(MO);gPo=r($ut,"PLBartForConditionalGeneration"),$ut.forEach(t),hPo=r(D$e," (PLBart model)"),D$e.forEach(t),pPo=i(be),c2=n(be,"LI",{});var G$e=s(c2);xge=n(G$e,"STRONG",{});var kut=s(xge);uPo=r(kut,"prophetnet"),kut.forEach(t),_Po=r(G$e," \u2014 "),EO=n(G$e,"A",{href:!0});var Sut=s(EO);bPo=r(Sut,"ProphetNetForConditionalGeneration"),Sut.forEach(t),vPo=r(G$e," (ProphetNet model)"),G$e.forEach(t),FPo=i(be),f2=n(be,"LI",{});var O$e=s(f2);$ge=n(O$e,"STRONG",{});var Rut=s($ge);TPo=r(Rut,"t5"),Rut.forEach(t),MPo=r(O$e," \u2014 "),CO=n(O$e,"A",{href:!0});var Put=s(CO);EPo=r(Put,"T5ForConditionalGeneration"),Put.forEach(t),CPo=r(O$e," (T5 model)"),O$e.forEach(t),wPo=i(be),m2=n(be,"LI",{});var V$e=s(m2);kge=n(V$e,"STRONG",{});var But=s(kge);APo=r(But,"xlm-prophetnet"),But.forEach(t),LPo=r(V$e," \u2014 "),wO=n(V$e,"A",{href:!0});var Iut=s(wO);yPo=r(Iut,"XLMProphetNetForConditionalGeneration"),Iut.forEach(t),xPo=r(V$e," (XLM-ProphetNet model)"),V$e.forEach(t),be.forEach(t),$Po=i(ia),g2=n(ia,"P",{});var X$e=s(g2);kPo=r(X$e,"The model is set in evaluation mode by default using "),Sge=n(X$e,"CODE",{});var Nut=s(Sge);SPo=r(Nut,"model.eval()"),Nut.forEach(t),RPo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(X$e,"CODE",{});var qut=s(Rge);PPo=r(qut,"model.train()"),qut.forEach(t),X$e.forEach(t),BPo=i(ia),T(h2.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),TGe=i(f),Ui=n(f,"H2",{class:!0});var LVe=s(Ui);p2=n(LVe,"A",{id:!0,class:!0,href:!0});var jut=s(p2);Pge=n(jut,"SPAN",{});var Dut=s(Pge);T(uy.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),IPo=i(LVe),Bge=n(LVe,"SPAN",{});var Gut=s(Bge);NPo=r(Gut,"AutoModelForSequenceClassification"),Gut.forEach(t),LVe.forEach(t),MGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(_y.$$.fragment,el),qPo=i(el),Ji=n(el,"P",{});var loe=s(Ji);jPo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=n(loe,"A",{href:!0});var Out=s(AO);DPo=r(Out,"from_pretrained()"),Out.forEach(t),GPo=r(loe," class method or the "),LO=n(loe,"A",{href:!0});var Vut=s(LO);OPo=r(Vut,"from_config()"),Vut.forEach(t),VPo=r(loe,` class
method.`),loe.forEach(t),XPo=i(el),by=n(el,"P",{});var yVe=s(by);zPo=r(yVe,"This class cannot be instantiated directly using "),Ige=n(yVe,"CODE",{});var Xut=s(Ige);WPo=r(Xut,"__init__()"),Xut.forEach(t),QPo=r(yVe," (throws an error)."),yVe.forEach(t),HPo=i(el),ct=n(el,"DIV",{class:!0});var kw=s(ct);T(vy.$$.fragment,kw),UPo=i(kw),Nge=n(kw,"P",{});var zut=s(Nge);JPo=r(zut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zut.forEach(t),YPo=i(kw),Yi=n(kw,"P",{});var ioe=s(Yi);KPo=r(ioe,`Note:
Loading a model from its configuration file does `),qge=n(ioe,"STRONG",{});var Wut=s(qge);ZPo=r(Wut,"not"),Wut.forEach(t),eBo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(ioe,"A",{href:!0});var Qut=s(yO);oBo=r(Qut,"from_pretrained()"),Qut.forEach(t),rBo=r(ioe," to load the model weights."),ioe.forEach(t),tBo=i(kw),T(u2.$$.fragment,kw),kw.forEach(t),aBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(Fy.$$.fragment,da),nBo=i(da),jge=n(da,"P",{});var Hut=s(jge);sBo=r(Hut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hut.forEach(t),lBo=i(da),Na=n(da,"P",{});var Sw=s(Na);iBo=r(Sw,"The model class to instantiate is selected based on the "),Dge=n(Sw,"CODE",{});var Uut=s(Dge);dBo=r(Uut,"model_type"),Uut.forEach(t),cBo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Gge=n(Sw,"CODE",{});var Jut=s(Gge);fBo=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),mBo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(Sw,"CODE",{});var Yut=s(Oge);gBo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),hBo=r(Sw,":"),Sw.forEach(t),pBo=i(da),N=n(da,"UL",{});var j=s(N);_2=n(j,"LI",{});var z$e=s(_2);Vge=n(z$e,"STRONG",{});var Kut=s(Vge);uBo=r(Kut,"albert"),Kut.forEach(t),_Bo=r(z$e," \u2014 "),xO=n(z$e,"A",{href:!0});var Zut=s(xO);bBo=r(Zut,"AlbertForSequenceClassification"),Zut.forEach(t),vBo=r(z$e," (ALBERT model)"),z$e.forEach(t),FBo=i(j),b2=n(j,"LI",{});var W$e=s(b2);Xge=n(W$e,"STRONG",{});var e_t=s(Xge);TBo=r(e_t,"bart"),e_t.forEach(t),MBo=r(W$e," \u2014 "),$O=n(W$e,"A",{href:!0});var o_t=s($O);EBo=r(o_t,"BartForSequenceClassification"),o_t.forEach(t),CBo=r(W$e," (BART model)"),W$e.forEach(t),wBo=i(j),v2=n(j,"LI",{});var Q$e=s(v2);zge=n(Q$e,"STRONG",{});var r_t=s(zge);ABo=r(r_t,"bert"),r_t.forEach(t),LBo=r(Q$e," \u2014 "),kO=n(Q$e,"A",{href:!0});var t_t=s(kO);yBo=r(t_t,"BertForSequenceClassification"),t_t.forEach(t),xBo=r(Q$e," (BERT model)"),Q$e.forEach(t),$Bo=i(j),F2=n(j,"LI",{});var H$e=s(F2);Wge=n(H$e,"STRONG",{});var a_t=s(Wge);kBo=r(a_t,"big_bird"),a_t.forEach(t),SBo=r(H$e," \u2014 "),SO=n(H$e,"A",{href:!0});var n_t=s(SO);RBo=r(n_t,"BigBirdForSequenceClassification"),n_t.forEach(t),PBo=r(H$e," (BigBird model)"),H$e.forEach(t),BBo=i(j),T2=n(j,"LI",{});var U$e=s(T2);Qge=n(U$e,"STRONG",{});var s_t=s(Qge);IBo=r(s_t,"bigbird_pegasus"),s_t.forEach(t),NBo=r(U$e," \u2014 "),RO=n(U$e,"A",{href:!0});var l_t=s(RO);qBo=r(l_t,"BigBirdPegasusForSequenceClassification"),l_t.forEach(t),jBo=r(U$e," (BigBird-Pegasus model)"),U$e.forEach(t),DBo=i(j),M2=n(j,"LI",{});var J$e=s(M2);Hge=n(J$e,"STRONG",{});var i_t=s(Hge);GBo=r(i_t,"bloom"),i_t.forEach(t),OBo=r(J$e," \u2014 "),PO=n(J$e,"A",{href:!0});var d_t=s(PO);VBo=r(d_t,"BloomForSequenceClassification"),d_t.forEach(t),XBo=r(J$e," (BLOOM model)"),J$e.forEach(t),zBo=i(j),E2=n(j,"LI",{});var Y$e=s(E2);Uge=n(Y$e,"STRONG",{});var c_t=s(Uge);WBo=r(c_t,"camembert"),c_t.forEach(t),QBo=r(Y$e," \u2014 "),BO=n(Y$e,"A",{href:!0});var f_t=s(BO);HBo=r(f_t,"CamembertForSequenceClassification"),f_t.forEach(t),UBo=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),JBo=i(j),C2=n(j,"LI",{});var K$e=s(C2);Jge=n(K$e,"STRONG",{});var m_t=s(Jge);YBo=r(m_t,"canine"),m_t.forEach(t),KBo=r(K$e," \u2014 "),IO=n(K$e,"A",{href:!0});var g_t=s(IO);ZBo=r(g_t,"CanineForSequenceClassification"),g_t.forEach(t),eIo=r(K$e," (CANINE model)"),K$e.forEach(t),oIo=i(j),w2=n(j,"LI",{});var Z$e=s(w2);Yge=n(Z$e,"STRONG",{});var h_t=s(Yge);rIo=r(h_t,"convbert"),h_t.forEach(t),tIo=r(Z$e," \u2014 "),NO=n(Z$e,"A",{href:!0});var p_t=s(NO);aIo=r(p_t,"ConvBertForSequenceClassification"),p_t.forEach(t),nIo=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),sIo=i(j),A2=n(j,"LI",{});var eke=s(A2);Kge=n(eke,"STRONG",{});var u_t=s(Kge);lIo=r(u_t,"ctrl"),u_t.forEach(t),iIo=r(eke," \u2014 "),qO=n(eke,"A",{href:!0});var __t=s(qO);dIo=r(__t,"CTRLForSequenceClassification"),__t.forEach(t),cIo=r(eke," (CTRL model)"),eke.forEach(t),fIo=i(j),L2=n(j,"LI",{});var oke=s(L2);Zge=n(oke,"STRONG",{});var b_t=s(Zge);mIo=r(b_t,"data2vec-text"),b_t.forEach(t),gIo=r(oke," \u2014 "),jO=n(oke,"A",{href:!0});var v_t=s(jO);hIo=r(v_t,"Data2VecTextForSequenceClassification"),v_t.forEach(t),pIo=r(oke," (Data2VecText model)"),oke.forEach(t),uIo=i(j),y2=n(j,"LI",{});var rke=s(y2);ehe=n(rke,"STRONG",{});var F_t=s(ehe);_Io=r(F_t,"deberta"),F_t.forEach(t),bIo=r(rke," \u2014 "),DO=n(rke,"A",{href:!0});var T_t=s(DO);vIo=r(T_t,"DebertaForSequenceClassification"),T_t.forEach(t),FIo=r(rke," (DeBERTa model)"),rke.forEach(t),TIo=i(j),x2=n(j,"LI",{});var tke=s(x2);ohe=n(tke,"STRONG",{});var M_t=s(ohe);MIo=r(M_t,"deberta-v2"),M_t.forEach(t),EIo=r(tke," \u2014 "),GO=n(tke,"A",{href:!0});var E_t=s(GO);CIo=r(E_t,"DebertaV2ForSequenceClassification"),E_t.forEach(t),wIo=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),AIo=i(j),$2=n(j,"LI",{});var ake=s($2);rhe=n(ake,"STRONG",{});var C_t=s(rhe);LIo=r(C_t,"distilbert"),C_t.forEach(t),yIo=r(ake," \u2014 "),OO=n(ake,"A",{href:!0});var w_t=s(OO);xIo=r(w_t,"DistilBertForSequenceClassification"),w_t.forEach(t),$Io=r(ake," (DistilBERT model)"),ake.forEach(t),kIo=i(j),k2=n(j,"LI",{});var nke=s(k2);the=n(nke,"STRONG",{});var A_t=s(the);SIo=r(A_t,"electra"),A_t.forEach(t),RIo=r(nke," \u2014 "),VO=n(nke,"A",{href:!0});var L_t=s(VO);PIo=r(L_t,"ElectraForSequenceClassification"),L_t.forEach(t),BIo=r(nke," (ELECTRA model)"),nke.forEach(t),IIo=i(j),S2=n(j,"LI",{});var ske=s(S2);ahe=n(ske,"STRONG",{});var y_t=s(ahe);NIo=r(y_t,"flaubert"),y_t.forEach(t),qIo=r(ske," \u2014 "),XO=n(ske,"A",{href:!0});var x_t=s(XO);jIo=r(x_t,"FlaubertForSequenceClassification"),x_t.forEach(t),DIo=r(ske," (FlauBERT model)"),ske.forEach(t),GIo=i(j),R2=n(j,"LI",{});var lke=s(R2);nhe=n(lke,"STRONG",{});var $_t=s(nhe);OIo=r($_t,"fnet"),$_t.forEach(t),VIo=r(lke," \u2014 "),zO=n(lke,"A",{href:!0});var k_t=s(zO);XIo=r(k_t,"FNetForSequenceClassification"),k_t.forEach(t),zIo=r(lke," (FNet model)"),lke.forEach(t),WIo=i(j),P2=n(j,"LI",{});var ike=s(P2);she=n(ike,"STRONG",{});var S_t=s(she);QIo=r(S_t,"funnel"),S_t.forEach(t),HIo=r(ike," \u2014 "),WO=n(ike,"A",{href:!0});var R_t=s(WO);UIo=r(R_t,"FunnelForSequenceClassification"),R_t.forEach(t),JIo=r(ike," (Funnel Transformer model)"),ike.forEach(t),YIo=i(j),B2=n(j,"LI",{});var dke=s(B2);lhe=n(dke,"STRONG",{});var P_t=s(lhe);KIo=r(P_t,"gpt2"),P_t.forEach(t),ZIo=r(dke," \u2014 "),QO=n(dke,"A",{href:!0});var B_t=s(QO);eNo=r(B_t,"GPT2ForSequenceClassification"),B_t.forEach(t),oNo=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),rNo=i(j),I2=n(j,"LI",{});var cke=s(I2);ihe=n(cke,"STRONG",{});var I_t=s(ihe);tNo=r(I_t,"gpt_neo"),I_t.forEach(t),aNo=r(cke," \u2014 "),HO=n(cke,"A",{href:!0});var N_t=s(HO);nNo=r(N_t,"GPTNeoForSequenceClassification"),N_t.forEach(t),sNo=r(cke," (GPT Neo model)"),cke.forEach(t),lNo=i(j),N2=n(j,"LI",{});var fke=s(N2);dhe=n(fke,"STRONG",{});var q_t=s(dhe);iNo=r(q_t,"gptj"),q_t.forEach(t),dNo=r(fke," \u2014 "),UO=n(fke,"A",{href:!0});var j_t=s(UO);cNo=r(j_t,"GPTJForSequenceClassification"),j_t.forEach(t),fNo=r(fke," (GPT-J model)"),fke.forEach(t),mNo=i(j),q2=n(j,"LI",{});var mke=s(q2);che=n(mke,"STRONG",{});var D_t=s(che);gNo=r(D_t,"ibert"),D_t.forEach(t),hNo=r(mke," \u2014 "),JO=n(mke,"A",{href:!0});var G_t=s(JO);pNo=r(G_t,"IBertForSequenceClassification"),G_t.forEach(t),uNo=r(mke," (I-BERT model)"),mke.forEach(t),_No=i(j),j2=n(j,"LI",{});var gke=s(j2);fhe=n(gke,"STRONG",{});var O_t=s(fhe);bNo=r(O_t,"layoutlm"),O_t.forEach(t),vNo=r(gke," \u2014 "),YO=n(gke,"A",{href:!0});var V_t=s(YO);FNo=r(V_t,"LayoutLMForSequenceClassification"),V_t.forEach(t),TNo=r(gke," (LayoutLM model)"),gke.forEach(t),MNo=i(j),D2=n(j,"LI",{});var hke=s(D2);mhe=n(hke,"STRONG",{});var X_t=s(mhe);ENo=r(X_t,"layoutlmv2"),X_t.forEach(t),CNo=r(hke," \u2014 "),KO=n(hke,"A",{href:!0});var z_t=s(KO);wNo=r(z_t,"LayoutLMv2ForSequenceClassification"),z_t.forEach(t),ANo=r(hke," (LayoutLMv2 model)"),hke.forEach(t),LNo=i(j),G2=n(j,"LI",{});var pke=s(G2);ghe=n(pke,"STRONG",{});var W_t=s(ghe);yNo=r(W_t,"layoutlmv3"),W_t.forEach(t),xNo=r(pke," \u2014 "),ZO=n(pke,"A",{href:!0});var Q_t=s(ZO);$No=r(Q_t,"LayoutLMv3ForSequenceClassification"),Q_t.forEach(t),kNo=r(pke," (LayoutLMv3 model)"),pke.forEach(t),SNo=i(j),O2=n(j,"LI",{});var uke=s(O2);hhe=n(uke,"STRONG",{});var H_t=s(hhe);RNo=r(H_t,"led"),H_t.forEach(t),PNo=r(uke," \u2014 "),eV=n(uke,"A",{href:!0});var U_t=s(eV);BNo=r(U_t,"LEDForSequenceClassification"),U_t.forEach(t),INo=r(uke," (LED model)"),uke.forEach(t),NNo=i(j),V2=n(j,"LI",{});var _ke=s(V2);phe=n(_ke,"STRONG",{});var J_t=s(phe);qNo=r(J_t,"longformer"),J_t.forEach(t),jNo=r(_ke," \u2014 "),oV=n(_ke,"A",{href:!0});var Y_t=s(oV);DNo=r(Y_t,"LongformerForSequenceClassification"),Y_t.forEach(t),GNo=r(_ke," (Longformer model)"),_ke.forEach(t),ONo=i(j),X2=n(j,"LI",{});var bke=s(X2);uhe=n(bke,"STRONG",{});var K_t=s(uhe);VNo=r(K_t,"mbart"),K_t.forEach(t),XNo=r(bke," \u2014 "),rV=n(bke,"A",{href:!0});var Z_t=s(rV);zNo=r(Z_t,"MBartForSequenceClassification"),Z_t.forEach(t),WNo=r(bke," (mBART model)"),bke.forEach(t),QNo=i(j),z2=n(j,"LI",{});var vke=s(z2);_he=n(vke,"STRONG",{});var e1t=s(_he);HNo=r(e1t,"megatron-bert"),e1t.forEach(t),UNo=r(vke," \u2014 "),tV=n(vke,"A",{href:!0});var o1t=s(tV);JNo=r(o1t,"MegatronBertForSequenceClassification"),o1t.forEach(t),YNo=r(vke," (Megatron-BERT model)"),vke.forEach(t),KNo=i(j),W2=n(j,"LI",{});var Fke=s(W2);bhe=n(Fke,"STRONG",{});var r1t=s(bhe);ZNo=r(r1t,"mobilebert"),r1t.forEach(t),eqo=r(Fke," \u2014 "),aV=n(Fke,"A",{href:!0});var t1t=s(aV);oqo=r(t1t,"MobileBertForSequenceClassification"),t1t.forEach(t),rqo=r(Fke," (MobileBERT model)"),Fke.forEach(t),tqo=i(j),Q2=n(j,"LI",{});var Tke=s(Q2);vhe=n(Tke,"STRONG",{});var a1t=s(vhe);aqo=r(a1t,"mpnet"),a1t.forEach(t),nqo=r(Tke," \u2014 "),nV=n(Tke,"A",{href:!0});var n1t=s(nV);sqo=r(n1t,"MPNetForSequenceClassification"),n1t.forEach(t),lqo=r(Tke," (MPNet model)"),Tke.forEach(t),iqo=i(j),H2=n(j,"LI",{});var Mke=s(H2);Fhe=n(Mke,"STRONG",{});var s1t=s(Fhe);dqo=r(s1t,"nystromformer"),s1t.forEach(t),cqo=r(Mke," \u2014 "),sV=n(Mke,"A",{href:!0});var l1t=s(sV);fqo=r(l1t,"NystromformerForSequenceClassification"),l1t.forEach(t),mqo=r(Mke," (Nystr\xF6mformer model)"),Mke.forEach(t),gqo=i(j),U2=n(j,"LI",{});var Eke=s(U2);The=n(Eke,"STRONG",{});var i1t=s(The);hqo=r(i1t,"openai-gpt"),i1t.forEach(t),pqo=r(Eke," \u2014 "),lV=n(Eke,"A",{href:!0});var d1t=s(lV);uqo=r(d1t,"OpenAIGPTForSequenceClassification"),d1t.forEach(t),_qo=r(Eke," (OpenAI GPT model)"),Eke.forEach(t),bqo=i(j),J2=n(j,"LI",{});var Cke=s(J2);Mhe=n(Cke,"STRONG",{});var c1t=s(Mhe);vqo=r(c1t,"perceiver"),c1t.forEach(t),Fqo=r(Cke," \u2014 "),iV=n(Cke,"A",{href:!0});var f1t=s(iV);Tqo=r(f1t,"PerceiverForSequenceClassification"),f1t.forEach(t),Mqo=r(Cke," (Perceiver model)"),Cke.forEach(t),Eqo=i(j),Y2=n(j,"LI",{});var wke=s(Y2);Ehe=n(wke,"STRONG",{});var m1t=s(Ehe);Cqo=r(m1t,"plbart"),m1t.forEach(t),wqo=r(wke," \u2014 "),dV=n(wke,"A",{href:!0});var g1t=s(dV);Aqo=r(g1t,"PLBartForSequenceClassification"),g1t.forEach(t),Lqo=r(wke," (PLBart model)"),wke.forEach(t),yqo=i(j),K2=n(j,"LI",{});var Ake=s(K2);Che=n(Ake,"STRONG",{});var h1t=s(Che);xqo=r(h1t,"qdqbert"),h1t.forEach(t),$qo=r(Ake," \u2014 "),cV=n(Ake,"A",{href:!0});var p1t=s(cV);kqo=r(p1t,"QDQBertForSequenceClassification"),p1t.forEach(t),Sqo=r(Ake," (QDQBert model)"),Ake.forEach(t),Rqo=i(j),Z2=n(j,"LI",{});var Lke=s(Z2);whe=n(Lke,"STRONG",{});var u1t=s(whe);Pqo=r(u1t,"reformer"),u1t.forEach(t),Bqo=r(Lke," \u2014 "),fV=n(Lke,"A",{href:!0});var _1t=s(fV);Iqo=r(_1t,"ReformerForSequenceClassification"),_1t.forEach(t),Nqo=r(Lke," (Reformer model)"),Lke.forEach(t),qqo=i(j),eb=n(j,"LI",{});var yke=s(eb);Ahe=n(yke,"STRONG",{});var b1t=s(Ahe);jqo=r(b1t,"rembert"),b1t.forEach(t),Dqo=r(yke," \u2014 "),mV=n(yke,"A",{href:!0});var v1t=s(mV);Gqo=r(v1t,"RemBertForSequenceClassification"),v1t.forEach(t),Oqo=r(yke," (RemBERT model)"),yke.forEach(t),Vqo=i(j),ob=n(j,"LI",{});var xke=s(ob);Lhe=n(xke,"STRONG",{});var F1t=s(Lhe);Xqo=r(F1t,"roberta"),F1t.forEach(t),zqo=r(xke," \u2014 "),gV=n(xke,"A",{href:!0});var T1t=s(gV);Wqo=r(T1t,"RobertaForSequenceClassification"),T1t.forEach(t),Qqo=r(xke," (RoBERTa model)"),xke.forEach(t),Hqo=i(j),rb=n(j,"LI",{});var $ke=s(rb);yhe=n($ke,"STRONG",{});var M1t=s(yhe);Uqo=r(M1t,"roformer"),M1t.forEach(t),Jqo=r($ke," \u2014 "),hV=n($ke,"A",{href:!0});var E1t=s(hV);Yqo=r(E1t,"RoFormerForSequenceClassification"),E1t.forEach(t),Kqo=r($ke," (RoFormer model)"),$ke.forEach(t),Zqo=i(j),tb=n(j,"LI",{});var kke=s(tb);xhe=n(kke,"STRONG",{});var C1t=s(xhe);ejo=r(C1t,"squeezebert"),C1t.forEach(t),ojo=r(kke," \u2014 "),pV=n(kke,"A",{href:!0});var w1t=s(pV);rjo=r(w1t,"SqueezeBertForSequenceClassification"),w1t.forEach(t),tjo=r(kke," (SqueezeBERT model)"),kke.forEach(t),ajo=i(j),ab=n(j,"LI",{});var Ske=s(ab);$he=n(Ske,"STRONG",{});var A1t=s($he);njo=r(A1t,"tapas"),A1t.forEach(t),sjo=r(Ske," \u2014 "),uV=n(Ske,"A",{href:!0});var L1t=s(uV);ljo=r(L1t,"TapasForSequenceClassification"),L1t.forEach(t),ijo=r(Ske," (TAPAS model)"),Ske.forEach(t),djo=i(j),nb=n(j,"LI",{});var Rke=s(nb);khe=n(Rke,"STRONG",{});var y1t=s(khe);cjo=r(y1t,"transfo-xl"),y1t.forEach(t),fjo=r(Rke," \u2014 "),_V=n(Rke,"A",{href:!0});var x1t=s(_V);mjo=r(x1t,"TransfoXLForSequenceClassification"),x1t.forEach(t),gjo=r(Rke," (Transformer-XL model)"),Rke.forEach(t),hjo=i(j),sb=n(j,"LI",{});var Pke=s(sb);She=n(Pke,"STRONG",{});var $1t=s(She);pjo=r($1t,"xlm"),$1t.forEach(t),ujo=r(Pke," \u2014 "),bV=n(Pke,"A",{href:!0});var k1t=s(bV);_jo=r(k1t,"XLMForSequenceClassification"),k1t.forEach(t),bjo=r(Pke," (XLM model)"),Pke.forEach(t),vjo=i(j),lb=n(j,"LI",{});var Bke=s(lb);Rhe=n(Bke,"STRONG",{});var S1t=s(Rhe);Fjo=r(S1t,"xlm-roberta"),S1t.forEach(t),Tjo=r(Bke," \u2014 "),vV=n(Bke,"A",{href:!0});var R1t=s(vV);Mjo=r(R1t,"XLMRobertaForSequenceClassification"),R1t.forEach(t),Ejo=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),Cjo=i(j),ib=n(j,"LI",{});var Ike=s(ib);Phe=n(Ike,"STRONG",{});var P1t=s(Phe);wjo=r(P1t,"xlm-roberta-xl"),P1t.forEach(t),Ajo=r(Ike," \u2014 "),FV=n(Ike,"A",{href:!0});var B1t=s(FV);Ljo=r(B1t,"XLMRobertaXLForSequenceClassification"),B1t.forEach(t),yjo=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),xjo=i(j),db=n(j,"LI",{});var Nke=s(db);Bhe=n(Nke,"STRONG",{});var I1t=s(Bhe);$jo=r(I1t,"xlnet"),I1t.forEach(t),kjo=r(Nke," \u2014 "),TV=n(Nke,"A",{href:!0});var N1t=s(TV);Sjo=r(N1t,"XLNetForSequenceClassification"),N1t.forEach(t),Rjo=r(Nke," (XLNet model)"),Nke.forEach(t),Pjo=i(j),cb=n(j,"LI",{});var qke=s(cb);Ihe=n(qke,"STRONG",{});var q1t=s(Ihe);Bjo=r(q1t,"yoso"),q1t.forEach(t),Ijo=r(qke," \u2014 "),MV=n(qke,"A",{href:!0});var j1t=s(MV);Njo=r(j1t,"YosoForSequenceClassification"),j1t.forEach(t),qjo=r(qke," (YOSO model)"),qke.forEach(t),j.forEach(t),jjo=i(da),fb=n(da,"P",{});var jke=s(fb);Djo=r(jke,"The model is set in evaluation mode by default using "),Nhe=n(jke,"CODE",{});var D1t=s(Nhe);Gjo=r(D1t,"model.eval()"),D1t.forEach(t),Ojo=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(jke,"CODE",{});var G1t=s(qhe);Vjo=r(G1t,"model.train()"),G1t.forEach(t),jke.forEach(t),Xjo=i(da),T(mb.$$.fragment,da),da.forEach(t),el.forEach(t),EGe=i(f),Ki=n(f,"H2",{class:!0});var xVe=s(Ki);gb=n(xVe,"A",{id:!0,class:!0,href:!0});var O1t=s(gb);jhe=n(O1t,"SPAN",{});var V1t=s(jhe);T(Ty.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),zjo=i(xVe),Dhe=n(xVe,"SPAN",{});var X1t=s(Dhe);Wjo=r(X1t,"AutoModelForMultipleChoice"),X1t.forEach(t),xVe.forEach(t),CGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(My.$$.fragment,ol),Qjo=i(ol),Zi=n(ol,"P",{});var doe=s(Zi);Hjo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EV=n(doe,"A",{href:!0});var z1t=s(EV);Ujo=r(z1t,"from_pretrained()"),z1t.forEach(t),Jjo=r(doe," class method or the "),CV=n(doe,"A",{href:!0});var W1t=s(CV);Yjo=r(W1t,"from_config()"),W1t.forEach(t),Kjo=r(doe,` class
method.`),doe.forEach(t),Zjo=i(ol),Ey=n(ol,"P",{});var $Ve=s(Ey);eDo=r($Ve,"This class cannot be instantiated directly using "),Ghe=n($Ve,"CODE",{});var Q1t=s(Ghe);oDo=r(Q1t,"__init__()"),Q1t.forEach(t),rDo=r($Ve," (throws an error)."),$Ve.forEach(t),tDo=i(ol),ft=n(ol,"DIV",{class:!0});var Rw=s(ft);T(Cy.$$.fragment,Rw),aDo=i(Rw),Ohe=n(Rw,"P",{});var H1t=s(Ohe);nDo=r(H1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H1t.forEach(t),sDo=i(Rw),ed=n(Rw,"P",{});var coe=s(ed);lDo=r(coe,`Note:
Loading a model from its configuration file does `),Vhe=n(coe,"STRONG",{});var U1t=s(Vhe);iDo=r(U1t,"not"),U1t.forEach(t),dDo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(coe,"A",{href:!0});var J1t=s(wV);cDo=r(J1t,"from_pretrained()"),J1t.forEach(t),fDo=r(coe," to load the model weights."),coe.forEach(t),mDo=i(Rw),T(hb.$$.fragment,Rw),Rw.forEach(t),gDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(wy.$$.fragment,ca),hDo=i(ca),Xhe=n(ca,"P",{});var Y1t=s(Xhe);pDo=r(Y1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Y1t.forEach(t),uDo=i(ca),qa=n(ca,"P",{});var Pw=s(qa);_Do=r(Pw,"The model class to instantiate is selected based on the "),zhe=n(Pw,"CODE",{});var K1t=s(zhe);bDo=r(K1t,"model_type"),K1t.forEach(t),vDo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Whe=n(Pw,"CODE",{});var Z1t=s(Whe);FDo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),TDo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(Pw,"CODE",{});var e7t=s(Qhe);MDo=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),EDo=r(Pw,":"),Pw.forEach(t),CDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);pb=n(ee,"LI",{});var Dke=s(pb);Hhe=n(Dke,"STRONG",{});var o7t=s(Hhe);wDo=r(o7t,"albert"),o7t.forEach(t),ADo=r(Dke," \u2014 "),AV=n(Dke,"A",{href:!0});var r7t=s(AV);LDo=r(r7t,"AlbertForMultipleChoice"),r7t.forEach(t),yDo=r(Dke," (ALBERT model)"),Dke.forEach(t),xDo=i(ee),ub=n(ee,"LI",{});var Gke=s(ub);Uhe=n(Gke,"STRONG",{});var t7t=s(Uhe);$Do=r(t7t,"bert"),t7t.forEach(t),kDo=r(Gke," \u2014 "),LV=n(Gke,"A",{href:!0});var a7t=s(LV);SDo=r(a7t,"BertForMultipleChoice"),a7t.forEach(t),RDo=r(Gke," (BERT model)"),Gke.forEach(t),PDo=i(ee),_b=n(ee,"LI",{});var Oke=s(_b);Jhe=n(Oke,"STRONG",{});var n7t=s(Jhe);BDo=r(n7t,"big_bird"),n7t.forEach(t),IDo=r(Oke," \u2014 "),yV=n(Oke,"A",{href:!0});var s7t=s(yV);NDo=r(s7t,"BigBirdForMultipleChoice"),s7t.forEach(t),qDo=r(Oke," (BigBird model)"),Oke.forEach(t),jDo=i(ee),bb=n(ee,"LI",{});var Vke=s(bb);Yhe=n(Vke,"STRONG",{});var l7t=s(Yhe);DDo=r(l7t,"camembert"),l7t.forEach(t),GDo=r(Vke," \u2014 "),xV=n(Vke,"A",{href:!0});var i7t=s(xV);ODo=r(i7t,"CamembertForMultipleChoice"),i7t.forEach(t),VDo=r(Vke," (CamemBERT model)"),Vke.forEach(t),XDo=i(ee),vb=n(ee,"LI",{});var Xke=s(vb);Khe=n(Xke,"STRONG",{});var d7t=s(Khe);zDo=r(d7t,"canine"),d7t.forEach(t),WDo=r(Xke," \u2014 "),$V=n(Xke,"A",{href:!0});var c7t=s($V);QDo=r(c7t,"CanineForMultipleChoice"),c7t.forEach(t),HDo=r(Xke," (CANINE model)"),Xke.forEach(t),UDo=i(ee),Fb=n(ee,"LI",{});var zke=s(Fb);Zhe=n(zke,"STRONG",{});var f7t=s(Zhe);JDo=r(f7t,"convbert"),f7t.forEach(t),YDo=r(zke," \u2014 "),kV=n(zke,"A",{href:!0});var m7t=s(kV);KDo=r(m7t,"ConvBertForMultipleChoice"),m7t.forEach(t),ZDo=r(zke," (ConvBERT model)"),zke.forEach(t),eGo=i(ee),Tb=n(ee,"LI",{});var Wke=s(Tb);epe=n(Wke,"STRONG",{});var g7t=s(epe);oGo=r(g7t,"data2vec-text"),g7t.forEach(t),rGo=r(Wke," \u2014 "),SV=n(Wke,"A",{href:!0});var h7t=s(SV);tGo=r(h7t,"Data2VecTextForMultipleChoice"),h7t.forEach(t),aGo=r(Wke," (Data2VecText model)"),Wke.forEach(t),nGo=i(ee),Mb=n(ee,"LI",{});var Qke=s(Mb);ope=n(Qke,"STRONG",{});var p7t=s(ope);sGo=r(p7t,"deberta-v2"),p7t.forEach(t),lGo=r(Qke," \u2014 "),RV=n(Qke,"A",{href:!0});var u7t=s(RV);iGo=r(u7t,"DebertaV2ForMultipleChoice"),u7t.forEach(t),dGo=r(Qke," (DeBERTa-v2 model)"),Qke.forEach(t),cGo=i(ee),Eb=n(ee,"LI",{});var Hke=s(Eb);rpe=n(Hke,"STRONG",{});var _7t=s(rpe);fGo=r(_7t,"distilbert"),_7t.forEach(t),mGo=r(Hke," \u2014 "),PV=n(Hke,"A",{href:!0});var b7t=s(PV);gGo=r(b7t,"DistilBertForMultipleChoice"),b7t.forEach(t),hGo=r(Hke," (DistilBERT model)"),Hke.forEach(t),pGo=i(ee),Cb=n(ee,"LI",{});var Uke=s(Cb);tpe=n(Uke,"STRONG",{});var v7t=s(tpe);uGo=r(v7t,"electra"),v7t.forEach(t),_Go=r(Uke," \u2014 "),BV=n(Uke,"A",{href:!0});var F7t=s(BV);bGo=r(F7t,"ElectraForMultipleChoice"),F7t.forEach(t),vGo=r(Uke," (ELECTRA model)"),Uke.forEach(t),FGo=i(ee),wb=n(ee,"LI",{});var Jke=s(wb);ape=n(Jke,"STRONG",{});var T7t=s(ape);TGo=r(T7t,"flaubert"),T7t.forEach(t),MGo=r(Jke," \u2014 "),IV=n(Jke,"A",{href:!0});var M7t=s(IV);EGo=r(M7t,"FlaubertForMultipleChoice"),M7t.forEach(t),CGo=r(Jke," (FlauBERT model)"),Jke.forEach(t),wGo=i(ee),Ab=n(ee,"LI",{});var Yke=s(Ab);npe=n(Yke,"STRONG",{});var E7t=s(npe);AGo=r(E7t,"fnet"),E7t.forEach(t),LGo=r(Yke," \u2014 "),NV=n(Yke,"A",{href:!0});var C7t=s(NV);yGo=r(C7t,"FNetForMultipleChoice"),C7t.forEach(t),xGo=r(Yke," (FNet model)"),Yke.forEach(t),$Go=i(ee),Lb=n(ee,"LI",{});var Kke=s(Lb);spe=n(Kke,"STRONG",{});var w7t=s(spe);kGo=r(w7t,"funnel"),w7t.forEach(t),SGo=r(Kke," \u2014 "),qV=n(Kke,"A",{href:!0});var A7t=s(qV);RGo=r(A7t,"FunnelForMultipleChoice"),A7t.forEach(t),PGo=r(Kke," (Funnel Transformer model)"),Kke.forEach(t),BGo=i(ee),yb=n(ee,"LI",{});var Zke=s(yb);lpe=n(Zke,"STRONG",{});var L7t=s(lpe);IGo=r(L7t,"ibert"),L7t.forEach(t),NGo=r(Zke," \u2014 "),jV=n(Zke,"A",{href:!0});var y7t=s(jV);qGo=r(y7t,"IBertForMultipleChoice"),y7t.forEach(t),jGo=r(Zke," (I-BERT model)"),Zke.forEach(t),DGo=i(ee),xb=n(ee,"LI",{});var eSe=s(xb);ipe=n(eSe,"STRONG",{});var x7t=s(ipe);GGo=r(x7t,"longformer"),x7t.forEach(t),OGo=r(eSe," \u2014 "),DV=n(eSe,"A",{href:!0});var $7t=s(DV);VGo=r($7t,"LongformerForMultipleChoice"),$7t.forEach(t),XGo=r(eSe," (Longformer model)"),eSe.forEach(t),zGo=i(ee),$b=n(ee,"LI",{});var oSe=s($b);dpe=n(oSe,"STRONG",{});var k7t=s(dpe);WGo=r(k7t,"megatron-bert"),k7t.forEach(t),QGo=r(oSe," \u2014 "),GV=n(oSe,"A",{href:!0});var S7t=s(GV);HGo=r(S7t,"MegatronBertForMultipleChoice"),S7t.forEach(t),UGo=r(oSe," (Megatron-BERT model)"),oSe.forEach(t),JGo=i(ee),kb=n(ee,"LI",{});var rSe=s(kb);cpe=n(rSe,"STRONG",{});var R7t=s(cpe);YGo=r(R7t,"mobilebert"),R7t.forEach(t),KGo=r(rSe," \u2014 "),OV=n(rSe,"A",{href:!0});var P7t=s(OV);ZGo=r(P7t,"MobileBertForMultipleChoice"),P7t.forEach(t),eOo=r(rSe," (MobileBERT model)"),rSe.forEach(t),oOo=i(ee),Sb=n(ee,"LI",{});var tSe=s(Sb);fpe=n(tSe,"STRONG",{});var B7t=s(fpe);rOo=r(B7t,"mpnet"),B7t.forEach(t),tOo=r(tSe," \u2014 "),VV=n(tSe,"A",{href:!0});var I7t=s(VV);aOo=r(I7t,"MPNetForMultipleChoice"),I7t.forEach(t),nOo=r(tSe," (MPNet model)"),tSe.forEach(t),sOo=i(ee),Rb=n(ee,"LI",{});var aSe=s(Rb);mpe=n(aSe,"STRONG",{});var N7t=s(mpe);lOo=r(N7t,"nystromformer"),N7t.forEach(t),iOo=r(aSe," \u2014 "),XV=n(aSe,"A",{href:!0});var q7t=s(XV);dOo=r(q7t,"NystromformerForMultipleChoice"),q7t.forEach(t),cOo=r(aSe," (Nystr\xF6mformer model)"),aSe.forEach(t),fOo=i(ee),Pb=n(ee,"LI",{});var nSe=s(Pb);gpe=n(nSe,"STRONG",{});var j7t=s(gpe);mOo=r(j7t,"qdqbert"),j7t.forEach(t),gOo=r(nSe," \u2014 "),zV=n(nSe,"A",{href:!0});var D7t=s(zV);hOo=r(D7t,"QDQBertForMultipleChoice"),D7t.forEach(t),pOo=r(nSe," (QDQBert model)"),nSe.forEach(t),uOo=i(ee),Bb=n(ee,"LI",{});var sSe=s(Bb);hpe=n(sSe,"STRONG",{});var G7t=s(hpe);_Oo=r(G7t,"rembert"),G7t.forEach(t),bOo=r(sSe," \u2014 "),WV=n(sSe,"A",{href:!0});var O7t=s(WV);vOo=r(O7t,"RemBertForMultipleChoice"),O7t.forEach(t),FOo=r(sSe," (RemBERT model)"),sSe.forEach(t),TOo=i(ee),Ib=n(ee,"LI",{});var lSe=s(Ib);ppe=n(lSe,"STRONG",{});var V7t=s(ppe);MOo=r(V7t,"roberta"),V7t.forEach(t),EOo=r(lSe," \u2014 "),QV=n(lSe,"A",{href:!0});var X7t=s(QV);COo=r(X7t,"RobertaForMultipleChoice"),X7t.forEach(t),wOo=r(lSe," (RoBERTa model)"),lSe.forEach(t),AOo=i(ee),Nb=n(ee,"LI",{});var iSe=s(Nb);upe=n(iSe,"STRONG",{});var z7t=s(upe);LOo=r(z7t,"roformer"),z7t.forEach(t),yOo=r(iSe," \u2014 "),HV=n(iSe,"A",{href:!0});var W7t=s(HV);xOo=r(W7t,"RoFormerForMultipleChoice"),W7t.forEach(t),$Oo=r(iSe," (RoFormer model)"),iSe.forEach(t),kOo=i(ee),qb=n(ee,"LI",{});var dSe=s(qb);_pe=n(dSe,"STRONG",{});var Q7t=s(_pe);SOo=r(Q7t,"squeezebert"),Q7t.forEach(t),ROo=r(dSe," \u2014 "),UV=n(dSe,"A",{href:!0});var H7t=s(UV);POo=r(H7t,"SqueezeBertForMultipleChoice"),H7t.forEach(t),BOo=r(dSe," (SqueezeBERT model)"),dSe.forEach(t),IOo=i(ee),jb=n(ee,"LI",{});var cSe=s(jb);bpe=n(cSe,"STRONG",{});var U7t=s(bpe);NOo=r(U7t,"xlm"),U7t.forEach(t),qOo=r(cSe," \u2014 "),JV=n(cSe,"A",{href:!0});var J7t=s(JV);jOo=r(J7t,"XLMForMultipleChoice"),J7t.forEach(t),DOo=r(cSe," (XLM model)"),cSe.forEach(t),GOo=i(ee),Db=n(ee,"LI",{});var fSe=s(Db);vpe=n(fSe,"STRONG",{});var Y7t=s(vpe);OOo=r(Y7t,"xlm-roberta"),Y7t.forEach(t),VOo=r(fSe," \u2014 "),YV=n(fSe,"A",{href:!0});var K7t=s(YV);XOo=r(K7t,"XLMRobertaForMultipleChoice"),K7t.forEach(t),zOo=r(fSe," (XLM-RoBERTa model)"),fSe.forEach(t),WOo=i(ee),Gb=n(ee,"LI",{});var mSe=s(Gb);Fpe=n(mSe,"STRONG",{});var Z7t=s(Fpe);QOo=r(Z7t,"xlm-roberta-xl"),Z7t.forEach(t),HOo=r(mSe," \u2014 "),KV=n(mSe,"A",{href:!0});var e2t=s(KV);UOo=r(e2t,"XLMRobertaXLForMultipleChoice"),e2t.forEach(t),JOo=r(mSe," (XLM-RoBERTa-XL model)"),mSe.forEach(t),YOo=i(ee),Ob=n(ee,"LI",{});var gSe=s(Ob);Tpe=n(gSe,"STRONG",{});var o2t=s(Tpe);KOo=r(o2t,"xlnet"),o2t.forEach(t),ZOo=r(gSe," \u2014 "),ZV=n(gSe,"A",{href:!0});var r2t=s(ZV);eVo=r(r2t,"XLNetForMultipleChoice"),r2t.forEach(t),oVo=r(gSe," (XLNet model)"),gSe.forEach(t),rVo=i(ee),Vb=n(ee,"LI",{});var hSe=s(Vb);Mpe=n(hSe,"STRONG",{});var t2t=s(Mpe);tVo=r(t2t,"yoso"),t2t.forEach(t),aVo=r(hSe," \u2014 "),eX=n(hSe,"A",{href:!0});var a2t=s(eX);nVo=r(a2t,"YosoForMultipleChoice"),a2t.forEach(t),sVo=r(hSe," (YOSO model)"),hSe.forEach(t),ee.forEach(t),lVo=i(ca),Xb=n(ca,"P",{});var pSe=s(Xb);iVo=r(pSe,"The model is set in evaluation mode by default using "),Epe=n(pSe,"CODE",{});var n2t=s(Epe);dVo=r(n2t,"model.eval()"),n2t.forEach(t),cVo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(pSe,"CODE",{});var s2t=s(Cpe);fVo=r(s2t,"model.train()"),s2t.forEach(t),pSe.forEach(t),mVo=i(ca),T(zb.$$.fragment,ca),ca.forEach(t),ol.forEach(t),wGe=i(f),od=n(f,"H2",{class:!0});var kVe=s(od);Wb=n(kVe,"A",{id:!0,class:!0,href:!0});var l2t=s(Wb);wpe=n(l2t,"SPAN",{});var i2t=s(wpe);T(Ay.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),gVo=i(kVe),Ape=n(kVe,"SPAN",{});var d2t=s(Ape);hVo=r(d2t,"AutoModelForNextSentencePrediction"),d2t.forEach(t),kVe.forEach(t),AGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(Ly.$$.fragment,rl),pVo=i(rl),rd=n(rl,"P",{});var foe=s(rd);uVo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oX=n(foe,"A",{href:!0});var c2t=s(oX);_Vo=r(c2t,"from_pretrained()"),c2t.forEach(t),bVo=r(foe," class method or the "),rX=n(foe,"A",{href:!0});var f2t=s(rX);vVo=r(f2t,"from_config()"),f2t.forEach(t),FVo=r(foe,` class
method.`),foe.forEach(t),TVo=i(rl),yy=n(rl,"P",{});var SVe=s(yy);MVo=r(SVe,"This class cannot be instantiated directly using "),Lpe=n(SVe,"CODE",{});var m2t=s(Lpe);EVo=r(m2t,"__init__()"),m2t.forEach(t),CVo=r(SVe," (throws an error)."),SVe.forEach(t),wVo=i(rl),mt=n(rl,"DIV",{class:!0});var Bw=s(mt);T(xy.$$.fragment,Bw),AVo=i(Bw),ype=n(Bw,"P",{});var g2t=s(ype);LVo=r(g2t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g2t.forEach(t),yVo=i(Bw),td=n(Bw,"P",{});var moe=s(td);xVo=r(moe,`Note:
Loading a model from its configuration file does `),xpe=n(moe,"STRONG",{});var h2t=s(xpe);$Vo=r(h2t,"not"),h2t.forEach(t),kVo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(moe,"A",{href:!0});var p2t=s(tX);SVo=r(p2t,"from_pretrained()"),p2t.forEach(t),RVo=r(moe," to load the model weights."),moe.forEach(t),PVo=i(Bw),T(Qb.$$.fragment,Bw),Bw.forEach(t),BVo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T($y.$$.fragment,fa),IVo=i(fa),$pe=n(fa,"P",{});var u2t=s($pe);NVo=r(u2t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u2t.forEach(t),qVo=i(fa),ja=n(fa,"P",{});var Iw=s(ja);jVo=r(Iw,"The model class to instantiate is selected based on the "),kpe=n(Iw,"CODE",{});var _2t=s(kpe);DVo=r(_2t,"model_type"),_2t.forEach(t),GVo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Spe=n(Iw,"CODE",{});var b2t=s(Spe);OVo=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),VVo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(Iw,"CODE",{});var v2t=s(Rpe);XVo=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),zVo=r(Iw,":"),Iw.forEach(t),WVo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Hb=n(tl,"LI",{});var uSe=s(Hb);Ppe=n(uSe,"STRONG",{});var F2t=s(Ppe);QVo=r(F2t,"bert"),F2t.forEach(t),HVo=r(uSe," \u2014 "),aX=n(uSe,"A",{href:!0});var T2t=s(aX);UVo=r(T2t,"BertForNextSentencePrediction"),T2t.forEach(t),JVo=r(uSe," (BERT model)"),uSe.forEach(t),YVo=i(tl),Ub=n(tl,"LI",{});var _Se=s(Ub);Bpe=n(_Se,"STRONG",{});var M2t=s(Bpe);KVo=r(M2t,"fnet"),M2t.forEach(t),ZVo=r(_Se," \u2014 "),nX=n(_Se,"A",{href:!0});var E2t=s(nX);eXo=r(E2t,"FNetForNextSentencePrediction"),E2t.forEach(t),oXo=r(_Se," (FNet model)"),_Se.forEach(t),rXo=i(tl),Jb=n(tl,"LI",{});var bSe=s(Jb);Ipe=n(bSe,"STRONG",{});var C2t=s(Ipe);tXo=r(C2t,"megatron-bert"),C2t.forEach(t),aXo=r(bSe," \u2014 "),sX=n(bSe,"A",{href:!0});var w2t=s(sX);nXo=r(w2t,"MegatronBertForNextSentencePrediction"),w2t.forEach(t),sXo=r(bSe," (Megatron-BERT model)"),bSe.forEach(t),lXo=i(tl),Yb=n(tl,"LI",{});var vSe=s(Yb);Npe=n(vSe,"STRONG",{});var A2t=s(Npe);iXo=r(A2t,"mobilebert"),A2t.forEach(t),dXo=r(vSe," \u2014 "),lX=n(vSe,"A",{href:!0});var L2t=s(lX);cXo=r(L2t,"MobileBertForNextSentencePrediction"),L2t.forEach(t),fXo=r(vSe," (MobileBERT model)"),vSe.forEach(t),mXo=i(tl),Kb=n(tl,"LI",{});var FSe=s(Kb);qpe=n(FSe,"STRONG",{});var y2t=s(qpe);gXo=r(y2t,"qdqbert"),y2t.forEach(t),hXo=r(FSe," \u2014 "),iX=n(FSe,"A",{href:!0});var x2t=s(iX);pXo=r(x2t,"QDQBertForNextSentencePrediction"),x2t.forEach(t),uXo=r(FSe," (QDQBert model)"),FSe.forEach(t),tl.forEach(t),_Xo=i(fa),Zb=n(fa,"P",{});var TSe=s(Zb);bXo=r(TSe,"The model is set in evaluation mode by default using "),jpe=n(TSe,"CODE",{});var $2t=s(jpe);vXo=r($2t,"model.eval()"),$2t.forEach(t),FXo=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(TSe,"CODE",{});var k2t=s(Dpe);TXo=r(k2t,"model.train()"),k2t.forEach(t),TSe.forEach(t),MXo=i(fa),T(ev.$$.fragment,fa),fa.forEach(t),rl.forEach(t),LGe=i(f),ad=n(f,"H2",{class:!0});var RVe=s(ad);ov=n(RVe,"A",{id:!0,class:!0,href:!0});var S2t=s(ov);Gpe=n(S2t,"SPAN",{});var R2t=s(Gpe);T(ky.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),EXo=i(RVe),Ope=n(RVe,"SPAN",{});var P2t=s(Ope);CXo=r(P2t,"AutoModelForTokenClassification"),P2t.forEach(t),RVe.forEach(t),yGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(Sy.$$.fragment,al),wXo=i(al),nd=n(al,"P",{});var goe=s(nd);AXo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dX=n(goe,"A",{href:!0});var B2t=s(dX);LXo=r(B2t,"from_pretrained()"),B2t.forEach(t),yXo=r(goe," class method or the "),cX=n(goe,"A",{href:!0});var I2t=s(cX);xXo=r(I2t,"from_config()"),I2t.forEach(t),$Xo=r(goe,` class
method.`),goe.forEach(t),kXo=i(al),Ry=n(al,"P",{});var PVe=s(Ry);SXo=r(PVe,"This class cannot be instantiated directly using "),Vpe=n(PVe,"CODE",{});var N2t=s(Vpe);RXo=r(N2t,"__init__()"),N2t.forEach(t),PXo=r(PVe," (throws an error)."),PVe.forEach(t),BXo=i(al),gt=n(al,"DIV",{class:!0});var Nw=s(gt);T(Py.$$.fragment,Nw),IXo=i(Nw),Xpe=n(Nw,"P",{});var q2t=s(Xpe);NXo=r(q2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q2t.forEach(t),qXo=i(Nw),sd=n(Nw,"P",{});var hoe=s(sd);jXo=r(hoe,`Note:
Loading a model from its configuration file does `),zpe=n(hoe,"STRONG",{});var j2t=s(zpe);DXo=r(j2t,"not"),j2t.forEach(t),GXo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(hoe,"A",{href:!0});var D2t=s(fX);OXo=r(D2t,"from_pretrained()"),D2t.forEach(t),VXo=r(hoe," to load the model weights."),hoe.forEach(t),XXo=i(Nw),T(rv.$$.fragment,Nw),Nw.forEach(t),zXo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(By.$$.fragment,ma),WXo=i(ma),Wpe=n(ma,"P",{});var G2t=s(Wpe);QXo=r(G2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G2t.forEach(t),HXo=i(ma),Da=n(ma,"P",{});var qw=s(Da);UXo=r(qw,"The model class to instantiate is selected based on the "),Qpe=n(qw,"CODE",{});var O2t=s(Qpe);JXo=r(O2t,"model_type"),O2t.forEach(t),YXo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(qw,"CODE",{});var V2t=s(Hpe);KXo=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),ZXo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(qw,"CODE",{});var X2t=s(Upe);ezo=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),ozo=r(qw,":"),qw.forEach(t),rzo=i(ma),H=n(ma,"UL",{});var J=s(H);tv=n(J,"LI",{});var MSe=s(tv);Jpe=n(MSe,"STRONG",{});var z2t=s(Jpe);tzo=r(z2t,"albert"),z2t.forEach(t),azo=r(MSe," \u2014 "),mX=n(MSe,"A",{href:!0});var W2t=s(mX);nzo=r(W2t,"AlbertForTokenClassification"),W2t.forEach(t),szo=r(MSe," (ALBERT model)"),MSe.forEach(t),lzo=i(J),av=n(J,"LI",{});var ESe=s(av);Ype=n(ESe,"STRONG",{});var Q2t=s(Ype);izo=r(Q2t,"bert"),Q2t.forEach(t),dzo=r(ESe," \u2014 "),gX=n(ESe,"A",{href:!0});var H2t=s(gX);czo=r(H2t,"BertForTokenClassification"),H2t.forEach(t),fzo=r(ESe," (BERT model)"),ESe.forEach(t),mzo=i(J),nv=n(J,"LI",{});var CSe=s(nv);Kpe=n(CSe,"STRONG",{});var U2t=s(Kpe);gzo=r(U2t,"big_bird"),U2t.forEach(t),hzo=r(CSe," \u2014 "),hX=n(CSe,"A",{href:!0});var J2t=s(hX);pzo=r(J2t,"BigBirdForTokenClassification"),J2t.forEach(t),uzo=r(CSe," (BigBird model)"),CSe.forEach(t),_zo=i(J),sv=n(J,"LI",{});var wSe=s(sv);Zpe=n(wSe,"STRONG",{});var Y2t=s(Zpe);bzo=r(Y2t,"bloom"),Y2t.forEach(t),vzo=r(wSe," \u2014 "),pX=n(wSe,"A",{href:!0});var K2t=s(pX);Fzo=r(K2t,"BloomForTokenClassification"),K2t.forEach(t),Tzo=r(wSe," (BLOOM model)"),wSe.forEach(t),Mzo=i(J),lv=n(J,"LI",{});var ASe=s(lv);eue=n(ASe,"STRONG",{});var Z2t=s(eue);Ezo=r(Z2t,"camembert"),Z2t.forEach(t),Czo=r(ASe," \u2014 "),uX=n(ASe,"A",{href:!0});var ebt=s(uX);wzo=r(ebt,"CamembertForTokenClassification"),ebt.forEach(t),Azo=r(ASe," (CamemBERT model)"),ASe.forEach(t),Lzo=i(J),iv=n(J,"LI",{});var LSe=s(iv);oue=n(LSe,"STRONG",{});var obt=s(oue);yzo=r(obt,"canine"),obt.forEach(t),xzo=r(LSe," \u2014 "),_X=n(LSe,"A",{href:!0});var rbt=s(_X);$zo=r(rbt,"CanineForTokenClassification"),rbt.forEach(t),kzo=r(LSe," (CANINE model)"),LSe.forEach(t),Szo=i(J),dv=n(J,"LI",{});var ySe=s(dv);rue=n(ySe,"STRONG",{});var tbt=s(rue);Rzo=r(tbt,"convbert"),tbt.forEach(t),Pzo=r(ySe," \u2014 "),bX=n(ySe,"A",{href:!0});var abt=s(bX);Bzo=r(abt,"ConvBertForTokenClassification"),abt.forEach(t),Izo=r(ySe," (ConvBERT model)"),ySe.forEach(t),Nzo=i(J),cv=n(J,"LI",{});var xSe=s(cv);tue=n(xSe,"STRONG",{});var nbt=s(tue);qzo=r(nbt,"data2vec-text"),nbt.forEach(t),jzo=r(xSe," \u2014 "),vX=n(xSe,"A",{href:!0});var sbt=s(vX);Dzo=r(sbt,"Data2VecTextForTokenClassification"),sbt.forEach(t),Gzo=r(xSe," (Data2VecText model)"),xSe.forEach(t),Ozo=i(J),fv=n(J,"LI",{});var $Se=s(fv);aue=n($Se,"STRONG",{});var lbt=s(aue);Vzo=r(lbt,"deberta"),lbt.forEach(t),Xzo=r($Se," \u2014 "),FX=n($Se,"A",{href:!0});var ibt=s(FX);zzo=r(ibt,"DebertaForTokenClassification"),ibt.forEach(t),Wzo=r($Se," (DeBERTa model)"),$Se.forEach(t),Qzo=i(J),mv=n(J,"LI",{});var kSe=s(mv);nue=n(kSe,"STRONG",{});var dbt=s(nue);Hzo=r(dbt,"deberta-v2"),dbt.forEach(t),Uzo=r(kSe," \u2014 "),TX=n(kSe,"A",{href:!0});var cbt=s(TX);Jzo=r(cbt,"DebertaV2ForTokenClassification"),cbt.forEach(t),Yzo=r(kSe," (DeBERTa-v2 model)"),kSe.forEach(t),Kzo=i(J),gv=n(J,"LI",{});var SSe=s(gv);sue=n(SSe,"STRONG",{});var fbt=s(sue);Zzo=r(fbt,"distilbert"),fbt.forEach(t),eWo=r(SSe," \u2014 "),MX=n(SSe,"A",{href:!0});var mbt=s(MX);oWo=r(mbt,"DistilBertForTokenClassification"),mbt.forEach(t),rWo=r(SSe," (DistilBERT model)"),SSe.forEach(t),tWo=i(J),hv=n(J,"LI",{});var RSe=s(hv);lue=n(RSe,"STRONG",{});var gbt=s(lue);aWo=r(gbt,"electra"),gbt.forEach(t),nWo=r(RSe," \u2014 "),EX=n(RSe,"A",{href:!0});var hbt=s(EX);sWo=r(hbt,"ElectraForTokenClassification"),hbt.forEach(t),lWo=r(RSe," (ELECTRA model)"),RSe.forEach(t),iWo=i(J),pv=n(J,"LI",{});var PSe=s(pv);iue=n(PSe,"STRONG",{});var pbt=s(iue);dWo=r(pbt,"flaubert"),pbt.forEach(t),cWo=r(PSe," \u2014 "),CX=n(PSe,"A",{href:!0});var ubt=s(CX);fWo=r(ubt,"FlaubertForTokenClassification"),ubt.forEach(t),mWo=r(PSe," (FlauBERT model)"),PSe.forEach(t),gWo=i(J),uv=n(J,"LI",{});var BSe=s(uv);due=n(BSe,"STRONG",{});var _bt=s(due);hWo=r(_bt,"fnet"),_bt.forEach(t),pWo=r(BSe," \u2014 "),wX=n(BSe,"A",{href:!0});var bbt=s(wX);uWo=r(bbt,"FNetForTokenClassification"),bbt.forEach(t),_Wo=r(BSe," (FNet model)"),BSe.forEach(t),bWo=i(J),_v=n(J,"LI",{});var ISe=s(_v);cue=n(ISe,"STRONG",{});var vbt=s(cue);vWo=r(vbt,"funnel"),vbt.forEach(t),FWo=r(ISe," \u2014 "),AX=n(ISe,"A",{href:!0});var Fbt=s(AX);TWo=r(Fbt,"FunnelForTokenClassification"),Fbt.forEach(t),MWo=r(ISe," (Funnel Transformer model)"),ISe.forEach(t),EWo=i(J),bv=n(J,"LI",{});var NSe=s(bv);fue=n(NSe,"STRONG",{});var Tbt=s(fue);CWo=r(Tbt,"gpt2"),Tbt.forEach(t),wWo=r(NSe," \u2014 "),LX=n(NSe,"A",{href:!0});var Mbt=s(LX);AWo=r(Mbt,"GPT2ForTokenClassification"),Mbt.forEach(t),LWo=r(NSe," (OpenAI GPT-2 model)"),NSe.forEach(t),yWo=i(J),vv=n(J,"LI",{});var qSe=s(vv);mue=n(qSe,"STRONG",{});var Ebt=s(mue);xWo=r(Ebt,"ibert"),Ebt.forEach(t),$Wo=r(qSe," \u2014 "),yX=n(qSe,"A",{href:!0});var Cbt=s(yX);kWo=r(Cbt,"IBertForTokenClassification"),Cbt.forEach(t),SWo=r(qSe," (I-BERT model)"),qSe.forEach(t),RWo=i(J),Fv=n(J,"LI",{});var jSe=s(Fv);gue=n(jSe,"STRONG",{});var wbt=s(gue);PWo=r(wbt,"layoutlm"),wbt.forEach(t),BWo=r(jSe," \u2014 "),xX=n(jSe,"A",{href:!0});var Abt=s(xX);IWo=r(Abt,"LayoutLMForTokenClassification"),Abt.forEach(t),NWo=r(jSe," (LayoutLM model)"),jSe.forEach(t),qWo=i(J),Tv=n(J,"LI",{});var DSe=s(Tv);hue=n(DSe,"STRONG",{});var Lbt=s(hue);jWo=r(Lbt,"layoutlmv2"),Lbt.forEach(t),DWo=r(DSe," \u2014 "),$X=n(DSe,"A",{href:!0});var ybt=s($X);GWo=r(ybt,"LayoutLMv2ForTokenClassification"),ybt.forEach(t),OWo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),VWo=i(J),Mv=n(J,"LI",{});var GSe=s(Mv);pue=n(GSe,"STRONG",{});var xbt=s(pue);XWo=r(xbt,"layoutlmv3"),xbt.forEach(t),zWo=r(GSe," \u2014 "),kX=n(GSe,"A",{href:!0});var $bt=s(kX);WWo=r($bt,"LayoutLMv3ForTokenClassification"),$bt.forEach(t),QWo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),HWo=i(J),Ev=n(J,"LI",{});var OSe=s(Ev);uue=n(OSe,"STRONG",{});var kbt=s(uue);UWo=r(kbt,"longformer"),kbt.forEach(t),JWo=r(OSe," \u2014 "),SX=n(OSe,"A",{href:!0});var Sbt=s(SX);YWo=r(Sbt,"LongformerForTokenClassification"),Sbt.forEach(t),KWo=r(OSe," (Longformer model)"),OSe.forEach(t),ZWo=i(J),Cv=n(J,"LI",{});var VSe=s(Cv);_ue=n(VSe,"STRONG",{});var Rbt=s(_ue);eQo=r(Rbt,"megatron-bert"),Rbt.forEach(t),oQo=r(VSe," \u2014 "),RX=n(VSe,"A",{href:!0});var Pbt=s(RX);rQo=r(Pbt,"MegatronBertForTokenClassification"),Pbt.forEach(t),tQo=r(VSe," (Megatron-BERT model)"),VSe.forEach(t),aQo=i(J),wv=n(J,"LI",{});var XSe=s(wv);bue=n(XSe,"STRONG",{});var Bbt=s(bue);nQo=r(Bbt,"mobilebert"),Bbt.forEach(t),sQo=r(XSe," \u2014 "),PX=n(XSe,"A",{href:!0});var Ibt=s(PX);lQo=r(Ibt,"MobileBertForTokenClassification"),Ibt.forEach(t),iQo=r(XSe," (MobileBERT model)"),XSe.forEach(t),dQo=i(J),Av=n(J,"LI",{});var zSe=s(Av);vue=n(zSe,"STRONG",{});var Nbt=s(vue);cQo=r(Nbt,"mpnet"),Nbt.forEach(t),fQo=r(zSe," \u2014 "),BX=n(zSe,"A",{href:!0});var qbt=s(BX);mQo=r(qbt,"MPNetForTokenClassification"),qbt.forEach(t),gQo=r(zSe," (MPNet model)"),zSe.forEach(t),hQo=i(J),Lv=n(J,"LI",{});var WSe=s(Lv);Fue=n(WSe,"STRONG",{});var jbt=s(Fue);pQo=r(jbt,"nystromformer"),jbt.forEach(t),uQo=r(WSe," \u2014 "),IX=n(WSe,"A",{href:!0});var Dbt=s(IX);_Qo=r(Dbt,"NystromformerForTokenClassification"),Dbt.forEach(t),bQo=r(WSe," (Nystr\xF6mformer model)"),WSe.forEach(t),vQo=i(J),yv=n(J,"LI",{});var QSe=s(yv);Tue=n(QSe,"STRONG",{});var Gbt=s(Tue);FQo=r(Gbt,"qdqbert"),Gbt.forEach(t),TQo=r(QSe," \u2014 "),NX=n(QSe,"A",{href:!0});var Obt=s(NX);MQo=r(Obt,"QDQBertForTokenClassification"),Obt.forEach(t),EQo=r(QSe," (QDQBert model)"),QSe.forEach(t),CQo=i(J),xv=n(J,"LI",{});var HSe=s(xv);Mue=n(HSe,"STRONG",{});var Vbt=s(Mue);wQo=r(Vbt,"rembert"),Vbt.forEach(t),AQo=r(HSe," \u2014 "),qX=n(HSe,"A",{href:!0});var Xbt=s(qX);LQo=r(Xbt,"RemBertForTokenClassification"),Xbt.forEach(t),yQo=r(HSe," (RemBERT model)"),HSe.forEach(t),xQo=i(J),$v=n(J,"LI",{});var USe=s($v);Eue=n(USe,"STRONG",{});var zbt=s(Eue);$Qo=r(zbt,"roberta"),zbt.forEach(t),kQo=r(USe," \u2014 "),jX=n(USe,"A",{href:!0});var Wbt=s(jX);SQo=r(Wbt,"RobertaForTokenClassification"),Wbt.forEach(t),RQo=r(USe," (RoBERTa model)"),USe.forEach(t),PQo=i(J),kv=n(J,"LI",{});var JSe=s(kv);Cue=n(JSe,"STRONG",{});var Qbt=s(Cue);BQo=r(Qbt,"roformer"),Qbt.forEach(t),IQo=r(JSe," \u2014 "),DX=n(JSe,"A",{href:!0});var Hbt=s(DX);NQo=r(Hbt,"RoFormerForTokenClassification"),Hbt.forEach(t),qQo=r(JSe," (RoFormer model)"),JSe.forEach(t),jQo=i(J),Sv=n(J,"LI",{});var YSe=s(Sv);wue=n(YSe,"STRONG",{});var Ubt=s(wue);DQo=r(Ubt,"squeezebert"),Ubt.forEach(t),GQo=r(YSe," \u2014 "),GX=n(YSe,"A",{href:!0});var Jbt=s(GX);OQo=r(Jbt,"SqueezeBertForTokenClassification"),Jbt.forEach(t),VQo=r(YSe," (SqueezeBERT model)"),YSe.forEach(t),XQo=i(J),Rv=n(J,"LI",{});var KSe=s(Rv);Aue=n(KSe,"STRONG",{});var Ybt=s(Aue);zQo=r(Ybt,"xlm"),Ybt.forEach(t),WQo=r(KSe," \u2014 "),OX=n(KSe,"A",{href:!0});var Kbt=s(OX);QQo=r(Kbt,"XLMForTokenClassification"),Kbt.forEach(t),HQo=r(KSe," (XLM model)"),KSe.forEach(t),UQo=i(J),Pv=n(J,"LI",{});var ZSe=s(Pv);Lue=n(ZSe,"STRONG",{});var Zbt=s(Lue);JQo=r(Zbt,"xlm-roberta"),Zbt.forEach(t),YQo=r(ZSe," \u2014 "),VX=n(ZSe,"A",{href:!0});var evt=s(VX);KQo=r(evt,"XLMRobertaForTokenClassification"),evt.forEach(t),ZQo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),eHo=i(J),Bv=n(J,"LI",{});var eRe=s(Bv);yue=n(eRe,"STRONG",{});var ovt=s(yue);oHo=r(ovt,"xlm-roberta-xl"),ovt.forEach(t),rHo=r(eRe," \u2014 "),XX=n(eRe,"A",{href:!0});var rvt=s(XX);tHo=r(rvt,"XLMRobertaXLForTokenClassification"),rvt.forEach(t),aHo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),nHo=i(J),Iv=n(J,"LI",{});var oRe=s(Iv);xue=n(oRe,"STRONG",{});var tvt=s(xue);sHo=r(tvt,"xlnet"),tvt.forEach(t),lHo=r(oRe," \u2014 "),zX=n(oRe,"A",{href:!0});var avt=s(zX);iHo=r(avt,"XLNetForTokenClassification"),avt.forEach(t),dHo=r(oRe," (XLNet model)"),oRe.forEach(t),cHo=i(J),Nv=n(J,"LI",{});var rRe=s(Nv);$ue=n(rRe,"STRONG",{});var nvt=s($ue);fHo=r(nvt,"yoso"),nvt.forEach(t),mHo=r(rRe," \u2014 "),WX=n(rRe,"A",{href:!0});var svt=s(WX);gHo=r(svt,"YosoForTokenClassification"),svt.forEach(t),hHo=r(rRe," (YOSO model)"),rRe.forEach(t),J.forEach(t),pHo=i(ma),qv=n(ma,"P",{});var tRe=s(qv);uHo=r(tRe,"The model is set in evaluation mode by default using "),kue=n(tRe,"CODE",{});var lvt=s(kue);_Ho=r(lvt,"model.eval()"),lvt.forEach(t),bHo=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(tRe,"CODE",{});var ivt=s(Sue);vHo=r(ivt,"model.train()"),ivt.forEach(t),tRe.forEach(t),FHo=i(ma),T(jv.$$.fragment,ma),ma.forEach(t),al.forEach(t),xGe=i(f),ld=n(f,"H2",{class:!0});var BVe=s(ld);Dv=n(BVe,"A",{id:!0,class:!0,href:!0});var dvt=s(Dv);Rue=n(dvt,"SPAN",{});var cvt=s(Rue);T(Iy.$$.fragment,cvt),cvt.forEach(t),dvt.forEach(t),THo=i(BVe),Pue=n(BVe,"SPAN",{});var fvt=s(Pue);MHo=r(fvt,"AutoModelForQuestionAnswering"),fvt.forEach(t),BVe.forEach(t),$Ge=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(Ny.$$.fragment,nl),EHo=i(nl),id=n(nl,"P",{});var poe=s(id);CHo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QX=n(poe,"A",{href:!0});var mvt=s(QX);wHo=r(mvt,"from_pretrained()"),mvt.forEach(t),AHo=r(poe," class method or the "),HX=n(poe,"A",{href:!0});var gvt=s(HX);LHo=r(gvt,"from_config()"),gvt.forEach(t),yHo=r(poe,` class
method.`),poe.forEach(t),xHo=i(nl),qy=n(nl,"P",{});var IVe=s(qy);$Ho=r(IVe,"This class cannot be instantiated directly using "),Bue=n(IVe,"CODE",{});var hvt=s(Bue);kHo=r(hvt,"__init__()"),hvt.forEach(t),SHo=r(IVe," (throws an error)."),IVe.forEach(t),RHo=i(nl),ht=n(nl,"DIV",{class:!0});var jw=s(ht);T(jy.$$.fragment,jw),PHo=i(jw),Iue=n(jw,"P",{});var pvt=s(Iue);BHo=r(pvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pvt.forEach(t),IHo=i(jw),dd=n(jw,"P",{});var uoe=s(dd);NHo=r(uoe,`Note:
Loading a model from its configuration file does `),Nue=n(uoe,"STRONG",{});var uvt=s(Nue);qHo=r(uvt,"not"),uvt.forEach(t),jHo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(uoe,"A",{href:!0});var _vt=s(UX);DHo=r(_vt,"from_pretrained()"),_vt.forEach(t),GHo=r(uoe," to load the model weights."),uoe.forEach(t),OHo=i(jw),T(Gv.$$.fragment,jw),jw.forEach(t),VHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(Dy.$$.fragment,ga),XHo=i(ga),que=n(ga,"P",{});var bvt=s(que);zHo=r(bvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bvt.forEach(t),WHo=i(ga),Ga=n(ga,"P",{});var Dw=s(Ga);QHo=r(Dw,"The model class to instantiate is selected based on the "),jue=n(Dw,"CODE",{});var vvt=s(jue);HHo=r(vvt,"model_type"),vvt.forEach(t),UHo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Due=n(Dw,"CODE",{});var Fvt=s(Due);JHo=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),YHo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(Dw,"CODE",{});var Tvt=s(Gue);KHo=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),ZHo=r(Dw,":"),Dw.forEach(t),eUo=i(ga),V=n(ga,"UL",{});var X=s(V);Ov=n(X,"LI",{});var aRe=s(Ov);Oue=n(aRe,"STRONG",{});var Mvt=s(Oue);oUo=r(Mvt,"albert"),Mvt.forEach(t),rUo=r(aRe," \u2014 "),JX=n(aRe,"A",{href:!0});var Evt=s(JX);tUo=r(Evt,"AlbertForQuestionAnswering"),Evt.forEach(t),aUo=r(aRe," (ALBERT model)"),aRe.forEach(t),nUo=i(X),Vv=n(X,"LI",{});var nRe=s(Vv);Vue=n(nRe,"STRONG",{});var Cvt=s(Vue);sUo=r(Cvt,"bart"),Cvt.forEach(t),lUo=r(nRe," \u2014 "),YX=n(nRe,"A",{href:!0});var wvt=s(YX);iUo=r(wvt,"BartForQuestionAnswering"),wvt.forEach(t),dUo=r(nRe," (BART model)"),nRe.forEach(t),cUo=i(X),Xv=n(X,"LI",{});var sRe=s(Xv);Xue=n(sRe,"STRONG",{});var Avt=s(Xue);fUo=r(Avt,"bert"),Avt.forEach(t),mUo=r(sRe," \u2014 "),KX=n(sRe,"A",{href:!0});var Lvt=s(KX);gUo=r(Lvt,"BertForQuestionAnswering"),Lvt.forEach(t),hUo=r(sRe," (BERT model)"),sRe.forEach(t),pUo=i(X),zv=n(X,"LI",{});var lRe=s(zv);zue=n(lRe,"STRONG",{});var yvt=s(zue);uUo=r(yvt,"big_bird"),yvt.forEach(t),_Uo=r(lRe," \u2014 "),ZX=n(lRe,"A",{href:!0});var xvt=s(ZX);bUo=r(xvt,"BigBirdForQuestionAnswering"),xvt.forEach(t),vUo=r(lRe," (BigBird model)"),lRe.forEach(t),FUo=i(X),Wv=n(X,"LI",{});var iRe=s(Wv);Wue=n(iRe,"STRONG",{});var $vt=s(Wue);TUo=r($vt,"bigbird_pegasus"),$vt.forEach(t),MUo=r(iRe," \u2014 "),ez=n(iRe,"A",{href:!0});var kvt=s(ez);EUo=r(kvt,"BigBirdPegasusForQuestionAnswering"),kvt.forEach(t),CUo=r(iRe," (BigBird-Pegasus model)"),iRe.forEach(t),wUo=i(X),Qv=n(X,"LI",{});var dRe=s(Qv);Que=n(dRe,"STRONG",{});var Svt=s(Que);AUo=r(Svt,"camembert"),Svt.forEach(t),LUo=r(dRe," \u2014 "),oz=n(dRe,"A",{href:!0});var Rvt=s(oz);yUo=r(Rvt,"CamembertForQuestionAnswering"),Rvt.forEach(t),xUo=r(dRe," (CamemBERT model)"),dRe.forEach(t),$Uo=i(X),Hv=n(X,"LI",{});var cRe=s(Hv);Hue=n(cRe,"STRONG",{});var Pvt=s(Hue);kUo=r(Pvt,"canine"),Pvt.forEach(t),SUo=r(cRe," \u2014 "),rz=n(cRe,"A",{href:!0});var Bvt=s(rz);RUo=r(Bvt,"CanineForQuestionAnswering"),Bvt.forEach(t),PUo=r(cRe," (CANINE model)"),cRe.forEach(t),BUo=i(X),Uv=n(X,"LI",{});var fRe=s(Uv);Uue=n(fRe,"STRONG",{});var Ivt=s(Uue);IUo=r(Ivt,"convbert"),Ivt.forEach(t),NUo=r(fRe," \u2014 "),tz=n(fRe,"A",{href:!0});var Nvt=s(tz);qUo=r(Nvt,"ConvBertForQuestionAnswering"),Nvt.forEach(t),jUo=r(fRe," (ConvBERT model)"),fRe.forEach(t),DUo=i(X),Jv=n(X,"LI",{});var mRe=s(Jv);Jue=n(mRe,"STRONG",{});var qvt=s(Jue);GUo=r(qvt,"data2vec-text"),qvt.forEach(t),OUo=r(mRe," \u2014 "),az=n(mRe,"A",{href:!0});var jvt=s(az);VUo=r(jvt,"Data2VecTextForQuestionAnswering"),jvt.forEach(t),XUo=r(mRe," (Data2VecText model)"),mRe.forEach(t),zUo=i(X),Yv=n(X,"LI",{});var gRe=s(Yv);Yue=n(gRe,"STRONG",{});var Dvt=s(Yue);WUo=r(Dvt,"deberta"),Dvt.forEach(t),QUo=r(gRe," \u2014 "),nz=n(gRe,"A",{href:!0});var Gvt=s(nz);HUo=r(Gvt,"DebertaForQuestionAnswering"),Gvt.forEach(t),UUo=r(gRe," (DeBERTa model)"),gRe.forEach(t),JUo=i(X),Kv=n(X,"LI",{});var hRe=s(Kv);Kue=n(hRe,"STRONG",{});var Ovt=s(Kue);YUo=r(Ovt,"deberta-v2"),Ovt.forEach(t),KUo=r(hRe," \u2014 "),sz=n(hRe,"A",{href:!0});var Vvt=s(sz);ZUo=r(Vvt,"DebertaV2ForQuestionAnswering"),Vvt.forEach(t),eJo=r(hRe," (DeBERTa-v2 model)"),hRe.forEach(t),oJo=i(X),Zv=n(X,"LI",{});var pRe=s(Zv);Zue=n(pRe,"STRONG",{});var Xvt=s(Zue);rJo=r(Xvt,"distilbert"),Xvt.forEach(t),tJo=r(pRe," \u2014 "),lz=n(pRe,"A",{href:!0});var zvt=s(lz);aJo=r(zvt,"DistilBertForQuestionAnswering"),zvt.forEach(t),nJo=r(pRe," (DistilBERT model)"),pRe.forEach(t),sJo=i(X),eF=n(X,"LI",{});var uRe=s(eF);e_e=n(uRe,"STRONG",{});var Wvt=s(e_e);lJo=r(Wvt,"electra"),Wvt.forEach(t),iJo=r(uRe," \u2014 "),iz=n(uRe,"A",{href:!0});var Qvt=s(iz);dJo=r(Qvt,"ElectraForQuestionAnswering"),Qvt.forEach(t),cJo=r(uRe," (ELECTRA model)"),uRe.forEach(t),fJo=i(X),oF=n(X,"LI",{});var _Re=s(oF);o_e=n(_Re,"STRONG",{});var Hvt=s(o_e);mJo=r(Hvt,"flaubert"),Hvt.forEach(t),gJo=r(_Re," \u2014 "),dz=n(_Re,"A",{href:!0});var Uvt=s(dz);hJo=r(Uvt,"FlaubertForQuestionAnsweringSimple"),Uvt.forEach(t),pJo=r(_Re," (FlauBERT model)"),_Re.forEach(t),uJo=i(X),rF=n(X,"LI",{});var bRe=s(rF);r_e=n(bRe,"STRONG",{});var Jvt=s(r_e);_Jo=r(Jvt,"fnet"),Jvt.forEach(t),bJo=r(bRe," \u2014 "),cz=n(bRe,"A",{href:!0});var Yvt=s(cz);vJo=r(Yvt,"FNetForQuestionAnswering"),Yvt.forEach(t),FJo=r(bRe," (FNet model)"),bRe.forEach(t),TJo=i(X),tF=n(X,"LI",{});var vRe=s(tF);t_e=n(vRe,"STRONG",{});var Kvt=s(t_e);MJo=r(Kvt,"funnel"),Kvt.forEach(t),EJo=r(vRe," \u2014 "),fz=n(vRe,"A",{href:!0});var Zvt=s(fz);CJo=r(Zvt,"FunnelForQuestionAnswering"),Zvt.forEach(t),wJo=r(vRe," (Funnel Transformer model)"),vRe.forEach(t),AJo=i(X),aF=n(X,"LI",{});var FRe=s(aF);a_e=n(FRe,"STRONG",{});var eFt=s(a_e);LJo=r(eFt,"gptj"),eFt.forEach(t),yJo=r(FRe," \u2014 "),mz=n(FRe,"A",{href:!0});var oFt=s(mz);xJo=r(oFt,"GPTJForQuestionAnswering"),oFt.forEach(t),$Jo=r(FRe," (GPT-J model)"),FRe.forEach(t),kJo=i(X),nF=n(X,"LI",{});var TRe=s(nF);n_e=n(TRe,"STRONG",{});var rFt=s(n_e);SJo=r(rFt,"ibert"),rFt.forEach(t),RJo=r(TRe," \u2014 "),gz=n(TRe,"A",{href:!0});var tFt=s(gz);PJo=r(tFt,"IBertForQuestionAnswering"),tFt.forEach(t),BJo=r(TRe," (I-BERT model)"),TRe.forEach(t),IJo=i(X),sF=n(X,"LI",{});var MRe=s(sF);s_e=n(MRe,"STRONG",{});var aFt=s(s_e);NJo=r(aFt,"layoutlmv2"),aFt.forEach(t),qJo=r(MRe," \u2014 "),hz=n(MRe,"A",{href:!0});var nFt=s(hz);jJo=r(nFt,"LayoutLMv2ForQuestionAnswering"),nFt.forEach(t),DJo=r(MRe," (LayoutLMv2 model)"),MRe.forEach(t),GJo=i(X),lF=n(X,"LI",{});var ERe=s(lF);l_e=n(ERe,"STRONG",{});var sFt=s(l_e);OJo=r(sFt,"layoutlmv3"),sFt.forEach(t),VJo=r(ERe," \u2014 "),pz=n(ERe,"A",{href:!0});var lFt=s(pz);XJo=r(lFt,"LayoutLMv3ForQuestionAnswering"),lFt.forEach(t),zJo=r(ERe," (LayoutLMv3 model)"),ERe.forEach(t),WJo=i(X),iF=n(X,"LI",{});var CRe=s(iF);i_e=n(CRe,"STRONG",{});var iFt=s(i_e);QJo=r(iFt,"led"),iFt.forEach(t),HJo=r(CRe," \u2014 "),uz=n(CRe,"A",{href:!0});var dFt=s(uz);UJo=r(dFt,"LEDForQuestionAnswering"),dFt.forEach(t),JJo=r(CRe," (LED model)"),CRe.forEach(t),YJo=i(X),dF=n(X,"LI",{});var wRe=s(dF);d_e=n(wRe,"STRONG",{});var cFt=s(d_e);KJo=r(cFt,"longformer"),cFt.forEach(t),ZJo=r(wRe," \u2014 "),_z=n(wRe,"A",{href:!0});var fFt=s(_z);eYo=r(fFt,"LongformerForQuestionAnswering"),fFt.forEach(t),oYo=r(wRe," (Longformer model)"),wRe.forEach(t),rYo=i(X),cF=n(X,"LI",{});var ARe=s(cF);c_e=n(ARe,"STRONG",{});var mFt=s(c_e);tYo=r(mFt,"lxmert"),mFt.forEach(t),aYo=r(ARe," \u2014 "),bz=n(ARe,"A",{href:!0});var gFt=s(bz);nYo=r(gFt,"LxmertForQuestionAnswering"),gFt.forEach(t),sYo=r(ARe," (LXMERT model)"),ARe.forEach(t),lYo=i(X),fF=n(X,"LI",{});var LRe=s(fF);f_e=n(LRe,"STRONG",{});var hFt=s(f_e);iYo=r(hFt,"mbart"),hFt.forEach(t),dYo=r(LRe," \u2014 "),vz=n(LRe,"A",{href:!0});var pFt=s(vz);cYo=r(pFt,"MBartForQuestionAnswering"),pFt.forEach(t),fYo=r(LRe," (mBART model)"),LRe.forEach(t),mYo=i(X),mF=n(X,"LI",{});var yRe=s(mF);m_e=n(yRe,"STRONG",{});var uFt=s(m_e);gYo=r(uFt,"megatron-bert"),uFt.forEach(t),hYo=r(yRe," \u2014 "),Fz=n(yRe,"A",{href:!0});var _Ft=s(Fz);pYo=r(_Ft,"MegatronBertForQuestionAnswering"),_Ft.forEach(t),uYo=r(yRe," (Megatron-BERT model)"),yRe.forEach(t),_Yo=i(X),gF=n(X,"LI",{});var xRe=s(gF);g_e=n(xRe,"STRONG",{});var bFt=s(g_e);bYo=r(bFt,"mobilebert"),bFt.forEach(t),vYo=r(xRe," \u2014 "),Tz=n(xRe,"A",{href:!0});var vFt=s(Tz);FYo=r(vFt,"MobileBertForQuestionAnswering"),vFt.forEach(t),TYo=r(xRe," (MobileBERT model)"),xRe.forEach(t),MYo=i(X),hF=n(X,"LI",{});var $Re=s(hF);h_e=n($Re,"STRONG",{});var FFt=s(h_e);EYo=r(FFt,"mpnet"),FFt.forEach(t),CYo=r($Re," \u2014 "),Mz=n($Re,"A",{href:!0});var TFt=s(Mz);wYo=r(TFt,"MPNetForQuestionAnswering"),TFt.forEach(t),AYo=r($Re," (MPNet model)"),$Re.forEach(t),LYo=i(X),pF=n(X,"LI",{});var kRe=s(pF);p_e=n(kRe,"STRONG",{});var MFt=s(p_e);yYo=r(MFt,"nystromformer"),MFt.forEach(t),xYo=r(kRe," \u2014 "),Ez=n(kRe,"A",{href:!0});var EFt=s(Ez);$Yo=r(EFt,"NystromformerForQuestionAnswering"),EFt.forEach(t),kYo=r(kRe," (Nystr\xF6mformer model)"),kRe.forEach(t),SYo=i(X),uF=n(X,"LI",{});var SRe=s(uF);u_e=n(SRe,"STRONG",{});var CFt=s(u_e);RYo=r(CFt,"qdqbert"),CFt.forEach(t),PYo=r(SRe," \u2014 "),Cz=n(SRe,"A",{href:!0});var wFt=s(Cz);BYo=r(wFt,"QDQBertForQuestionAnswering"),wFt.forEach(t),IYo=r(SRe," (QDQBert model)"),SRe.forEach(t),NYo=i(X),_F=n(X,"LI",{});var RRe=s(_F);__e=n(RRe,"STRONG",{});var AFt=s(__e);qYo=r(AFt,"reformer"),AFt.forEach(t),jYo=r(RRe," \u2014 "),wz=n(RRe,"A",{href:!0});var LFt=s(wz);DYo=r(LFt,"ReformerForQuestionAnswering"),LFt.forEach(t),GYo=r(RRe," (Reformer model)"),RRe.forEach(t),OYo=i(X),bF=n(X,"LI",{});var PRe=s(bF);b_e=n(PRe,"STRONG",{});var yFt=s(b_e);VYo=r(yFt,"rembert"),yFt.forEach(t),XYo=r(PRe," \u2014 "),Az=n(PRe,"A",{href:!0});var xFt=s(Az);zYo=r(xFt,"RemBertForQuestionAnswering"),xFt.forEach(t),WYo=r(PRe," (RemBERT model)"),PRe.forEach(t),QYo=i(X),vF=n(X,"LI",{});var BRe=s(vF);v_e=n(BRe,"STRONG",{});var $Ft=s(v_e);HYo=r($Ft,"roberta"),$Ft.forEach(t),UYo=r(BRe," \u2014 "),Lz=n(BRe,"A",{href:!0});var kFt=s(Lz);JYo=r(kFt,"RobertaForQuestionAnswering"),kFt.forEach(t),YYo=r(BRe," (RoBERTa model)"),BRe.forEach(t),KYo=i(X),FF=n(X,"LI",{});var IRe=s(FF);F_e=n(IRe,"STRONG",{});var SFt=s(F_e);ZYo=r(SFt,"roformer"),SFt.forEach(t),eKo=r(IRe," \u2014 "),yz=n(IRe,"A",{href:!0});var RFt=s(yz);oKo=r(RFt,"RoFormerForQuestionAnswering"),RFt.forEach(t),rKo=r(IRe," (RoFormer model)"),IRe.forEach(t),tKo=i(X),TF=n(X,"LI",{});var NRe=s(TF);T_e=n(NRe,"STRONG",{});var PFt=s(T_e);aKo=r(PFt,"splinter"),PFt.forEach(t),nKo=r(NRe," \u2014 "),xz=n(NRe,"A",{href:!0});var BFt=s(xz);sKo=r(BFt,"SplinterForQuestionAnswering"),BFt.forEach(t),lKo=r(NRe," (Splinter model)"),NRe.forEach(t),iKo=i(X),MF=n(X,"LI",{});var qRe=s(MF);M_e=n(qRe,"STRONG",{});var IFt=s(M_e);dKo=r(IFt,"squeezebert"),IFt.forEach(t),cKo=r(qRe," \u2014 "),$z=n(qRe,"A",{href:!0});var NFt=s($z);fKo=r(NFt,"SqueezeBertForQuestionAnswering"),NFt.forEach(t),mKo=r(qRe," (SqueezeBERT model)"),qRe.forEach(t),gKo=i(X),EF=n(X,"LI",{});var jRe=s(EF);E_e=n(jRe,"STRONG",{});var qFt=s(E_e);hKo=r(qFt,"xlm"),qFt.forEach(t),pKo=r(jRe," \u2014 "),kz=n(jRe,"A",{href:!0});var jFt=s(kz);uKo=r(jFt,"XLMForQuestionAnsweringSimple"),jFt.forEach(t),_Ko=r(jRe," (XLM model)"),jRe.forEach(t),bKo=i(X),CF=n(X,"LI",{});var DRe=s(CF);C_e=n(DRe,"STRONG",{});var DFt=s(C_e);vKo=r(DFt,"xlm-roberta"),DFt.forEach(t),FKo=r(DRe," \u2014 "),Sz=n(DRe,"A",{href:!0});var GFt=s(Sz);TKo=r(GFt,"XLMRobertaForQuestionAnswering"),GFt.forEach(t),MKo=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),EKo=i(X),wF=n(X,"LI",{});var GRe=s(wF);w_e=n(GRe,"STRONG",{});var OFt=s(w_e);CKo=r(OFt,"xlm-roberta-xl"),OFt.forEach(t),wKo=r(GRe," \u2014 "),Rz=n(GRe,"A",{href:!0});var VFt=s(Rz);AKo=r(VFt,"XLMRobertaXLForQuestionAnswering"),VFt.forEach(t),LKo=r(GRe," (XLM-RoBERTa-XL model)"),GRe.forEach(t),yKo=i(X),AF=n(X,"LI",{});var ORe=s(AF);A_e=n(ORe,"STRONG",{});var XFt=s(A_e);xKo=r(XFt,"xlnet"),XFt.forEach(t),$Ko=r(ORe," \u2014 "),Pz=n(ORe,"A",{href:!0});var zFt=s(Pz);kKo=r(zFt,"XLNetForQuestionAnsweringSimple"),zFt.forEach(t),SKo=r(ORe," (XLNet model)"),ORe.forEach(t),RKo=i(X),LF=n(X,"LI",{});var VRe=s(LF);L_e=n(VRe,"STRONG",{});var WFt=s(L_e);PKo=r(WFt,"yoso"),WFt.forEach(t),BKo=r(VRe," \u2014 "),Bz=n(VRe,"A",{href:!0});var QFt=s(Bz);IKo=r(QFt,"YosoForQuestionAnswering"),QFt.forEach(t),NKo=r(VRe," (YOSO model)"),VRe.forEach(t),X.forEach(t),qKo=i(ga),yF=n(ga,"P",{});var XRe=s(yF);jKo=r(XRe,"The model is set in evaluation mode by default using "),y_e=n(XRe,"CODE",{});var HFt=s(y_e);DKo=r(HFt,"model.eval()"),HFt.forEach(t),GKo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(XRe,"CODE",{});var UFt=s(x_e);OKo=r(UFt,"model.train()"),UFt.forEach(t),XRe.forEach(t),VKo=i(ga),T(xF.$$.fragment,ga),ga.forEach(t),nl.forEach(t),kGe=i(f),cd=n(f,"H2",{class:!0});var NVe=s(cd);$F=n(NVe,"A",{id:!0,class:!0,href:!0});var JFt=s($F);$_e=n(JFt,"SPAN",{});var YFt=s($_e);T(Gy.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),XKo=i(NVe),k_e=n(NVe,"SPAN",{});var KFt=s(k_e);zKo=r(KFt,"AutoModelForTableQuestionAnswering"),KFt.forEach(t),NVe.forEach(t),SGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(Oy.$$.fragment,sl),WKo=i(sl),fd=n(sl,"P",{});var _oe=s(fd);QKo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iz=n(_oe,"A",{href:!0});var ZFt=s(Iz);HKo=r(ZFt,"from_pretrained()"),ZFt.forEach(t),UKo=r(_oe," class method or the "),Nz=n(_oe,"A",{href:!0});var e6t=s(Nz);JKo=r(e6t,"from_config()"),e6t.forEach(t),YKo=r(_oe,` class
method.`),_oe.forEach(t),KKo=i(sl),Vy=n(sl,"P",{});var qVe=s(Vy);ZKo=r(qVe,"This class cannot be instantiated directly using "),S_e=n(qVe,"CODE",{});var o6t=s(S_e);eZo=r(o6t,"__init__()"),o6t.forEach(t),oZo=r(qVe," (throws an error)."),qVe.forEach(t),rZo=i(sl),pt=n(sl,"DIV",{class:!0});var Gw=s(pt);T(Xy.$$.fragment,Gw),tZo=i(Gw),R_e=n(Gw,"P",{});var r6t=s(R_e);aZo=r(r6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r6t.forEach(t),nZo=i(Gw),md=n(Gw,"P",{});var boe=s(md);sZo=r(boe,`Note:
Loading a model from its configuration file does `),P_e=n(boe,"STRONG",{});var t6t=s(P_e);lZo=r(t6t,"not"),t6t.forEach(t),iZo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(boe,"A",{href:!0});var a6t=s(qz);dZo=r(a6t,"from_pretrained()"),a6t.forEach(t),cZo=r(boe," to load the model weights."),boe.forEach(t),fZo=i(Gw),T(kF.$$.fragment,Gw),Gw.forEach(t),mZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(zy.$$.fragment,ha),gZo=i(ha),B_e=n(ha,"P",{});var n6t=s(B_e);hZo=r(n6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),n6t.forEach(t),pZo=i(ha),Oa=n(ha,"P",{});var Ow=s(Oa);uZo=r(Ow,"The model class to instantiate is selected based on the "),I_e=n(Ow,"CODE",{});var s6t=s(I_e);_Zo=r(s6t,"model_type"),s6t.forEach(t),bZo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),N_e=n(Ow,"CODE",{});var l6t=s(N_e);vZo=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),FZo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(Ow,"CODE",{});var i6t=s(q_e);TZo=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),MZo=r(Ow,":"),Ow.forEach(t),EZo=i(ha),j_e=n(ha,"UL",{});var d6t=s(j_e);SF=n(d6t,"LI",{});var zRe=s(SF);D_e=n(zRe,"STRONG",{});var c6t=s(D_e);CZo=r(c6t,"tapas"),c6t.forEach(t),wZo=r(zRe," \u2014 "),jz=n(zRe,"A",{href:!0});var f6t=s(jz);AZo=r(f6t,"TapasForQuestionAnswering"),f6t.forEach(t),LZo=r(zRe," (TAPAS model)"),zRe.forEach(t),d6t.forEach(t),yZo=i(ha),RF=n(ha,"P",{});var WRe=s(RF);xZo=r(WRe,"The model is set in evaluation mode by default using "),G_e=n(WRe,"CODE",{});var m6t=s(G_e);$Zo=r(m6t,"model.eval()"),m6t.forEach(t),kZo=r(WRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(WRe,"CODE",{});var g6t=s(O_e);SZo=r(g6t,"model.train()"),g6t.forEach(t),WRe.forEach(t),RZo=i(ha),T(PF.$$.fragment,ha),ha.forEach(t),sl.forEach(t),RGe=i(f),gd=n(f,"H2",{class:!0});var jVe=s(gd);BF=n(jVe,"A",{id:!0,class:!0,href:!0});var h6t=s(BF);V_e=n(h6t,"SPAN",{});var p6t=s(V_e);T(Wy.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),PZo=i(jVe),X_e=n(jVe,"SPAN",{});var u6t=s(X_e);BZo=r(u6t,"AutoModelForImageClassification"),u6t.forEach(t),jVe.forEach(t),PGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(Qy.$$.fragment,ll),IZo=i(ll),hd=n(ll,"P",{});var voe=s(hd);NZo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Dz=n(voe,"A",{href:!0});var _6t=s(Dz);qZo=r(_6t,"from_pretrained()"),_6t.forEach(t),jZo=r(voe," class method or the "),Gz=n(voe,"A",{href:!0});var b6t=s(Gz);DZo=r(b6t,"from_config()"),b6t.forEach(t),GZo=r(voe,` class
method.`),voe.forEach(t),OZo=i(ll),Hy=n(ll,"P",{});var DVe=s(Hy);VZo=r(DVe,"This class cannot be instantiated directly using "),z_e=n(DVe,"CODE",{});var v6t=s(z_e);XZo=r(v6t,"__init__()"),v6t.forEach(t),zZo=r(DVe," (throws an error)."),DVe.forEach(t),WZo=i(ll),ut=n(ll,"DIV",{class:!0});var Vw=s(ut);T(Uy.$$.fragment,Vw),QZo=i(Vw),W_e=n(Vw,"P",{});var F6t=s(W_e);HZo=r(F6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F6t.forEach(t),UZo=i(Vw),pd=n(Vw,"P",{});var Foe=s(pd);JZo=r(Foe,`Note:
Loading a model from its configuration file does `),Q_e=n(Foe,"STRONG",{});var T6t=s(Q_e);YZo=r(T6t,"not"),T6t.forEach(t),KZo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Foe,"A",{href:!0});var M6t=s(Oz);ZZo=r(M6t,"from_pretrained()"),M6t.forEach(t),eer=r(Foe," to load the model weights."),Foe.forEach(t),oer=i(Vw),T(IF.$$.fragment,Vw),Vw.forEach(t),rer=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(Jy.$$.fragment,pa),ter=i(pa),H_e=n(pa,"P",{});var E6t=s(H_e);aer=r(E6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E6t.forEach(t),ner=i(pa),Va=n(pa,"P",{});var Xw=s(Va);ser=r(Xw,"The model class to instantiate is selected based on the "),U_e=n(Xw,"CODE",{});var C6t=s(U_e);ler=r(C6t,"model_type"),C6t.forEach(t),ier=r(Xw,` property of the config object (either
passed as an argument or loaded from `),J_e=n(Xw,"CODE",{});var w6t=s(J_e);der=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),cer=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(Xw,"CODE",{});var A6t=s(Y_e);fer=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),mer=r(Xw,":"),Xw.forEach(t),ger=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);NF=n(Te,"LI",{});var QRe=s(NF);K_e=n(QRe,"STRONG",{});var L6t=s(K_e);her=r(L6t,"beit"),L6t.forEach(t),per=r(QRe," \u2014 "),Vz=n(QRe,"A",{href:!0});var y6t=s(Vz);uer=r(y6t,"BeitForImageClassification"),y6t.forEach(t),_er=r(QRe," (BEiT model)"),QRe.forEach(t),ber=i(Te),qF=n(Te,"LI",{});var HRe=s(qF);Z_e=n(HRe,"STRONG",{});var x6t=s(Z_e);ver=r(x6t,"convnext"),x6t.forEach(t),Fer=r(HRe," \u2014 "),Xz=n(HRe,"A",{href:!0});var $6t=s(Xz);Ter=r($6t,"ConvNextForImageClassification"),$6t.forEach(t),Mer=r(HRe," (ConvNeXT model)"),HRe.forEach(t),Eer=i(Te),jF=n(Te,"LI",{});var URe=s(jF);e1e=n(URe,"STRONG",{});var k6t=s(e1e);Cer=r(k6t,"cvt"),k6t.forEach(t),wer=r(URe," \u2014 "),zz=n(URe,"A",{href:!0});var S6t=s(zz);Aer=r(S6t,"CvtForImageClassification"),S6t.forEach(t),Ler=r(URe," (CvT model)"),URe.forEach(t),yer=i(Te),DF=n(Te,"LI",{});var JRe=s(DF);o1e=n(JRe,"STRONG",{});var R6t=s(o1e);xer=r(R6t,"data2vec-vision"),R6t.forEach(t),$er=r(JRe," \u2014 "),Wz=n(JRe,"A",{href:!0});var P6t=s(Wz);ker=r(P6t,"Data2VecVisionForImageClassification"),P6t.forEach(t),Ser=r(JRe," (Data2VecVision model)"),JRe.forEach(t),Rer=i(Te),Os=n(Te,"LI",{});var Ok=s(Os);r1e=n(Ok,"STRONG",{});var B6t=s(r1e);Per=r(B6t,"deit"),B6t.forEach(t),Ber=r(Ok," \u2014 "),Qz=n(Ok,"A",{href:!0});var I6t=s(Qz);Ier=r(I6t,"DeiTForImageClassification"),I6t.forEach(t),Ner=r(Ok," or "),Hz=n(Ok,"A",{href:!0});var N6t=s(Hz);qer=r(N6t,"DeiTForImageClassificationWithTeacher"),N6t.forEach(t),jer=r(Ok," (DeiT model)"),Ok.forEach(t),Der=i(Te),GF=n(Te,"LI",{});var YRe=s(GF);t1e=n(YRe,"STRONG",{});var q6t=s(t1e);Ger=r(q6t,"imagegpt"),q6t.forEach(t),Oer=r(YRe," \u2014 "),Uz=n(YRe,"A",{href:!0});var j6t=s(Uz);Ver=r(j6t,"ImageGPTForImageClassification"),j6t.forEach(t),Xer=r(YRe," (ImageGPT model)"),YRe.forEach(t),zer=i(Te),Vs=n(Te,"LI",{});var Vk=s(Vs);a1e=n(Vk,"STRONG",{});var D6t=s(a1e);Wer=r(D6t,"levit"),D6t.forEach(t),Qer=r(Vk," \u2014 "),Jz=n(Vk,"A",{href:!0});var G6t=s(Jz);Her=r(G6t,"LevitForImageClassification"),G6t.forEach(t),Uer=r(Vk," or "),Yz=n(Vk,"A",{href:!0});var O6t=s(Yz);Jer=r(O6t,"LevitForImageClassificationWithTeacher"),O6t.forEach(t),Yer=r(Vk," (LeViT model)"),Vk.forEach(t),Ker=i(Te),_t=n(Te,"LI",{});var Af=s(_t);n1e=n(Af,"STRONG",{});var V6t=s(n1e);Zer=r(V6t,"perceiver"),V6t.forEach(t),eor=r(Af," \u2014 "),Kz=n(Af,"A",{href:!0});var X6t=s(Kz);oor=r(X6t,"PerceiverForImageClassificationLearned"),X6t.forEach(t),ror=r(Af," or "),Zz=n(Af,"A",{href:!0});var z6t=s(Zz);tor=r(z6t,"PerceiverForImageClassificationFourier"),z6t.forEach(t),aor=r(Af," or "),eW=n(Af,"A",{href:!0});var W6t=s(eW);nor=r(W6t,"PerceiverForImageClassificationConvProcessing"),W6t.forEach(t),sor=r(Af," (Perceiver model)"),Af.forEach(t),lor=i(Te),OF=n(Te,"LI",{});var KRe=s(OF);s1e=n(KRe,"STRONG",{});var Q6t=s(s1e);ior=r(Q6t,"poolformer"),Q6t.forEach(t),dor=r(KRe," \u2014 "),oW=n(KRe,"A",{href:!0});var H6t=s(oW);cor=r(H6t,"PoolFormerForImageClassification"),H6t.forEach(t),mor=r(KRe," (PoolFormer model)"),KRe.forEach(t),gor=i(Te),VF=n(Te,"LI",{});var ZRe=s(VF);l1e=n(ZRe,"STRONG",{});var U6t=s(l1e);hor=r(U6t,"regnet"),U6t.forEach(t),por=r(ZRe," \u2014 "),rW=n(ZRe,"A",{href:!0});var J6t=s(rW);uor=r(J6t,"RegNetForImageClassification"),J6t.forEach(t),_or=r(ZRe," (RegNet model)"),ZRe.forEach(t),bor=i(Te),XF=n(Te,"LI",{});var ePe=s(XF);i1e=n(ePe,"STRONG",{});var Y6t=s(i1e);vor=r(Y6t,"resnet"),Y6t.forEach(t),For=r(ePe," \u2014 "),tW=n(ePe,"A",{href:!0});var K6t=s(tW);Tor=r(K6t,"ResNetForImageClassification"),K6t.forEach(t),Mor=r(ePe," (ResNet model)"),ePe.forEach(t),Eor=i(Te),zF=n(Te,"LI",{});var oPe=s(zF);d1e=n(oPe,"STRONG",{});var Z6t=s(d1e);Cor=r(Z6t,"segformer"),Z6t.forEach(t),wor=r(oPe," \u2014 "),aW=n(oPe,"A",{href:!0});var eTt=s(aW);Aor=r(eTt,"SegformerForImageClassification"),eTt.forEach(t),Lor=r(oPe," (SegFormer model)"),oPe.forEach(t),yor=i(Te),WF=n(Te,"LI",{});var rPe=s(WF);c1e=n(rPe,"STRONG",{});var oTt=s(c1e);xor=r(oTt,"swin"),oTt.forEach(t),$or=r(rPe," \u2014 "),nW=n(rPe,"A",{href:!0});var rTt=s(nW);kor=r(rTt,"SwinForImageClassification"),rTt.forEach(t),Sor=r(rPe," (Swin Transformer model)"),rPe.forEach(t),Ror=i(Te),QF=n(Te,"LI",{});var tPe=s(QF);f1e=n(tPe,"STRONG",{});var tTt=s(f1e);Por=r(tTt,"van"),tTt.forEach(t),Bor=r(tPe," \u2014 "),sW=n(tPe,"A",{href:!0});var aTt=s(sW);Ior=r(aTt,"VanForImageClassification"),aTt.forEach(t),Nor=r(tPe," (VAN model)"),tPe.forEach(t),qor=i(Te),HF=n(Te,"LI",{});var aPe=s(HF);m1e=n(aPe,"STRONG",{});var nTt=s(m1e);jor=r(nTt,"vit"),nTt.forEach(t),Dor=r(aPe," \u2014 "),lW=n(aPe,"A",{href:!0});var sTt=s(lW);Gor=r(sTt,"ViTForImageClassification"),sTt.forEach(t),Oor=r(aPe," (ViT model)"),aPe.forEach(t),Te.forEach(t),Vor=i(pa),UF=n(pa,"P",{});var nPe=s(UF);Xor=r(nPe,"The model is set in evaluation mode by default using "),g1e=n(nPe,"CODE",{});var lTt=s(g1e);zor=r(lTt,"model.eval()"),lTt.forEach(t),Wor=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(nPe,"CODE",{});var iTt=s(h1e);Qor=r(iTt,"model.train()"),iTt.forEach(t),nPe.forEach(t),Hor=i(pa),T(JF.$$.fragment,pa),pa.forEach(t),ll.forEach(t),BGe=i(f),ud=n(f,"H2",{class:!0});var GVe=s(ud);YF=n(GVe,"A",{id:!0,class:!0,href:!0});var dTt=s(YF);p1e=n(dTt,"SPAN",{});var cTt=s(p1e);T(Yy.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),Uor=i(GVe),u1e=n(GVe,"SPAN",{});var fTt=s(u1e);Jor=r(fTt,"AutoModelForVision2Seq"),fTt.forEach(t),GVe.forEach(t),IGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(Ky.$$.fragment,il),Yor=i(il),_d=n(il,"P",{});var Toe=s(_d);Kor=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iW=n(Toe,"A",{href:!0});var mTt=s(iW);Zor=r(mTt,"from_pretrained()"),mTt.forEach(t),err=r(Toe," class method or the "),dW=n(Toe,"A",{href:!0});var gTt=s(dW);orr=r(gTt,"from_config()"),gTt.forEach(t),rrr=r(Toe,` class
method.`),Toe.forEach(t),trr=i(il),Zy=n(il,"P",{});var OVe=s(Zy);arr=r(OVe,"This class cannot be instantiated directly using "),_1e=n(OVe,"CODE",{});var hTt=s(_1e);nrr=r(hTt,"__init__()"),hTt.forEach(t),srr=r(OVe," (throws an error)."),OVe.forEach(t),lrr=i(il),bt=n(il,"DIV",{class:!0});var zw=s(bt);T(e8.$$.fragment,zw),irr=i(zw),b1e=n(zw,"P",{});var pTt=s(b1e);drr=r(pTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pTt.forEach(t),crr=i(zw),bd=n(zw,"P",{});var Moe=s(bd);frr=r(Moe,`Note:
Loading a model from its configuration file does `),v1e=n(Moe,"STRONG",{});var uTt=s(v1e);mrr=r(uTt,"not"),uTt.forEach(t),grr=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Moe,"A",{href:!0});var _Tt=s(cW);hrr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),prr=r(Moe," to load the model weights."),Moe.forEach(t),urr=i(zw),T(KF.$$.fragment,zw),zw.forEach(t),_rr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(o8.$$.fragment,ua),brr=i(ua),F1e=n(ua,"P",{});var bTt=s(F1e);vrr=r(bTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bTt.forEach(t),Frr=i(ua),Xa=n(ua,"P",{});var Ww=s(Xa);Trr=r(Ww,"The model class to instantiate is selected based on the "),T1e=n(Ww,"CODE",{});var vTt=s(T1e);Mrr=r(vTt,"model_type"),vTt.forEach(t),Err=r(Ww,` property of the config object (either
passed as an argument or loaded from `),M1e=n(Ww,"CODE",{});var FTt=s(M1e);Crr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),wrr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(Ww,"CODE",{});var TTt=s(E1e);Arr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),Lrr=r(Ww,":"),Ww.forEach(t),yrr=i(ua),C1e=n(ua,"UL",{});var MTt=s(C1e);ZF=n(MTt,"LI",{});var sPe=s(ZF);w1e=n(sPe,"STRONG",{});var ETt=s(w1e);xrr=r(ETt,"vision-encoder-decoder"),ETt.forEach(t),$rr=r(sPe," \u2014 "),fW=n(sPe,"A",{href:!0});var CTt=s(fW);krr=r(CTt,"VisionEncoderDecoderModel"),CTt.forEach(t),Srr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),MTt.forEach(t),Rrr=i(ua),e6=n(ua,"P",{});var lPe=s(e6);Prr=r(lPe,"The model is set in evaluation mode by default using "),A1e=n(lPe,"CODE",{});var wTt=s(A1e);Brr=r(wTt,"model.eval()"),wTt.forEach(t),Irr=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(lPe,"CODE",{});var ATt=s(L1e);Nrr=r(ATt,"model.train()"),ATt.forEach(t),lPe.forEach(t),qrr=i(ua),T(o6.$$.fragment,ua),ua.forEach(t),il.forEach(t),NGe=i(f),vd=n(f,"H2",{class:!0});var VVe=s(vd);r6=n(VVe,"A",{id:!0,class:!0,href:!0});var LTt=s(r6);y1e=n(LTt,"SPAN",{});var yTt=s(y1e);T(r8.$$.fragment,yTt),yTt.forEach(t),LTt.forEach(t),jrr=i(VVe),x1e=n(VVe,"SPAN",{});var xTt=s(x1e);Drr=r(xTt,"AutoModelForVisualQuestionAnswering"),xTt.forEach(t),VVe.forEach(t),qGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(t8.$$.fragment,dl),Grr=i(dl),Fd=n(dl,"P",{});var Eoe=s(Fd);Orr=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mW=n(Eoe,"A",{href:!0});var $Tt=s(mW);Vrr=r($Tt,"from_pretrained()"),$Tt.forEach(t),Xrr=r(Eoe," class method or the "),gW=n(Eoe,"A",{href:!0});var kTt=s(gW);zrr=r(kTt,"from_config()"),kTt.forEach(t),Wrr=r(Eoe,` class
method.`),Eoe.forEach(t),Qrr=i(dl),a8=n(dl,"P",{});var XVe=s(a8);Hrr=r(XVe,"This class cannot be instantiated directly using "),$1e=n(XVe,"CODE",{});var STt=s($1e);Urr=r(STt,"__init__()"),STt.forEach(t),Jrr=r(XVe," (throws an error)."),XVe.forEach(t),Yrr=i(dl),vt=n(dl,"DIV",{class:!0});var Qw=s(vt);T(n8.$$.fragment,Qw),Krr=i(Qw),k1e=n(Qw,"P",{});var RTt=s(k1e);Zrr=r(RTt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),RTt.forEach(t),etr=i(Qw),Td=n(Qw,"P",{});var Coe=s(Td);otr=r(Coe,`Note:
Loading a model from its configuration file does `),S1e=n(Coe,"STRONG",{});var PTt=s(S1e);rtr=r(PTt,"not"),PTt.forEach(t),ttr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Coe,"A",{href:!0});var BTt=s(hW);atr=r(BTt,"from_pretrained()"),BTt.forEach(t),ntr=r(Coe," to load the model weights."),Coe.forEach(t),str=i(Qw),T(t6.$$.fragment,Qw),Qw.forEach(t),ltr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(s8.$$.fragment,_a),itr=i(_a),R1e=n(_a,"P",{});var ITt=s(R1e);dtr=r(ITt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ITt.forEach(t),ctr=i(_a),za=n(_a,"P",{});var Hw=s(za);ftr=r(Hw,"The model class to instantiate is selected based on the "),P1e=n(Hw,"CODE",{});var NTt=s(P1e);mtr=r(NTt,"model_type"),NTt.forEach(t),gtr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),B1e=n(Hw,"CODE",{});var qTt=s(B1e);htr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),ptr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(Hw,"CODE",{});var jTt=s(I1e);utr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),_tr=r(Hw,":"),Hw.forEach(t),btr=i(_a),N1e=n(_a,"UL",{});var DTt=s(N1e);a6=n(DTt,"LI",{});var iPe=s(a6);q1e=n(iPe,"STRONG",{});var GTt=s(q1e);vtr=r(GTt,"vilt"),GTt.forEach(t),Ftr=r(iPe," \u2014 "),pW=n(iPe,"A",{href:!0});var OTt=s(pW);Ttr=r(OTt,"ViltForQuestionAnswering"),OTt.forEach(t),Mtr=r(iPe," (ViLT model)"),iPe.forEach(t),DTt.forEach(t),Etr=i(_a),n6=n(_a,"P",{});var dPe=s(n6);Ctr=r(dPe,"The model is set in evaluation mode by default using "),j1e=n(dPe,"CODE",{});var VTt=s(j1e);wtr=r(VTt,"model.eval()"),VTt.forEach(t),Atr=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(dPe,"CODE",{});var XTt=s(D1e);Ltr=r(XTt,"model.train()"),XTt.forEach(t),dPe.forEach(t),ytr=i(_a),T(s6.$$.fragment,_a),_a.forEach(t),dl.forEach(t),jGe=i(f),Md=n(f,"H2",{class:!0});var zVe=s(Md);l6=n(zVe,"A",{id:!0,class:!0,href:!0});var zTt=s(l6);G1e=n(zTt,"SPAN",{});var WTt=s(G1e);T(l8.$$.fragment,WTt),WTt.forEach(t),zTt.forEach(t),xtr=i(zVe),O1e=n(zVe,"SPAN",{});var QTt=s(O1e);$tr=r(QTt,"AutoModelForAudioClassification"),QTt.forEach(t),zVe.forEach(t),DGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(i8.$$.fragment,cl),ktr=i(cl),Ed=n(cl,"P",{});var woe=s(Ed);Str=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uW=n(woe,"A",{href:!0});var HTt=s(uW);Rtr=r(HTt,"from_pretrained()"),HTt.forEach(t),Ptr=r(woe," class method or the "),_W=n(woe,"A",{href:!0});var UTt=s(_W);Btr=r(UTt,"from_config()"),UTt.forEach(t),Itr=r(woe,` class
method.`),woe.forEach(t),Ntr=i(cl),d8=n(cl,"P",{});var WVe=s(d8);qtr=r(WVe,"This class cannot be instantiated directly using "),V1e=n(WVe,"CODE",{});var JTt=s(V1e);jtr=r(JTt,"__init__()"),JTt.forEach(t),Dtr=r(WVe," (throws an error)."),WVe.forEach(t),Gtr=i(cl),Ft=n(cl,"DIV",{class:!0});var Uw=s(Ft);T(c8.$$.fragment,Uw),Otr=i(Uw),X1e=n(Uw,"P",{});var YTt=s(X1e);Vtr=r(YTt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YTt.forEach(t),Xtr=i(Uw),Cd=n(Uw,"P",{});var Aoe=s(Cd);ztr=r(Aoe,`Note:
Loading a model from its configuration file does `),z1e=n(Aoe,"STRONG",{});var KTt=s(z1e);Wtr=r(KTt,"not"),KTt.forEach(t),Qtr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(Aoe,"A",{href:!0});var ZTt=s(bW);Htr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),Utr=r(Aoe," to load the model weights."),Aoe.forEach(t),Jtr=i(Uw),T(i6.$$.fragment,Uw),Uw.forEach(t),Ytr=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(f8.$$.fragment,ba),Ktr=i(ba),W1e=n(ba,"P",{});var eMt=s(W1e);Ztr=r(eMt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),eMt.forEach(t),ear=i(ba),Wa=n(ba,"P",{});var Jw=s(Wa);oar=r(Jw,"The model class to instantiate is selected based on the "),Q1e=n(Jw,"CODE",{});var oMt=s(Q1e);rar=r(oMt,"model_type"),oMt.forEach(t),tar=r(Jw,` property of the config object (either
passed as an argument or loaded from `),H1e=n(Jw,"CODE",{});var rMt=s(H1e);aar=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),nar=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(Jw,"CODE",{});var tMt=s(U1e);sar=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),lar=r(Jw,":"),Jw.forEach(t),iar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);d6=n(ze,"LI",{});var cPe=s(d6);J1e=n(cPe,"STRONG",{});var aMt=s(J1e);dar=r(aMt,"data2vec-audio"),aMt.forEach(t),car=r(cPe," \u2014 "),vW=n(cPe,"A",{href:!0});var nMt=s(vW);far=r(nMt,"Data2VecAudioForSequenceClassification"),nMt.forEach(t),mar=r(cPe," (Data2VecAudio model)"),cPe.forEach(t),gar=i(ze),c6=n(ze,"LI",{});var fPe=s(c6);Y1e=n(fPe,"STRONG",{});var sMt=s(Y1e);har=r(sMt,"hubert"),sMt.forEach(t),par=r(fPe," \u2014 "),FW=n(fPe,"A",{href:!0});var lMt=s(FW);uar=r(lMt,"HubertForSequenceClassification"),lMt.forEach(t),_ar=r(fPe," (Hubert model)"),fPe.forEach(t),bar=i(ze),f6=n(ze,"LI",{});var mPe=s(f6);K1e=n(mPe,"STRONG",{});var iMt=s(K1e);Far=r(iMt,"sew"),iMt.forEach(t),Tar=r(mPe," \u2014 "),TW=n(mPe,"A",{href:!0});var dMt=s(TW);Mar=r(dMt,"SEWForSequenceClassification"),dMt.forEach(t),Ear=r(mPe," (SEW model)"),mPe.forEach(t),Car=i(ze),m6=n(ze,"LI",{});var gPe=s(m6);Z1e=n(gPe,"STRONG",{});var cMt=s(Z1e);war=r(cMt,"sew-d"),cMt.forEach(t),Aar=r(gPe," \u2014 "),MW=n(gPe,"A",{href:!0});var fMt=s(MW);Lar=r(fMt,"SEWDForSequenceClassification"),fMt.forEach(t),yar=r(gPe," (SEW-D model)"),gPe.forEach(t),xar=i(ze),g6=n(ze,"LI",{});var hPe=s(g6);e7e=n(hPe,"STRONG",{});var mMt=s(e7e);$ar=r(mMt,"unispeech"),mMt.forEach(t),kar=r(hPe," \u2014 "),EW=n(hPe,"A",{href:!0});var gMt=s(EW);Sar=r(gMt,"UniSpeechForSequenceClassification"),gMt.forEach(t),Rar=r(hPe," (UniSpeech model)"),hPe.forEach(t),Par=i(ze),h6=n(ze,"LI",{});var pPe=s(h6);o7e=n(pPe,"STRONG",{});var hMt=s(o7e);Bar=r(hMt,"unispeech-sat"),hMt.forEach(t),Iar=r(pPe," \u2014 "),CW=n(pPe,"A",{href:!0});var pMt=s(CW);Nar=r(pMt,"UniSpeechSatForSequenceClassification"),pMt.forEach(t),qar=r(pPe," (UniSpeechSat model)"),pPe.forEach(t),jar=i(ze),p6=n(ze,"LI",{});var uPe=s(p6);r7e=n(uPe,"STRONG",{});var uMt=s(r7e);Dar=r(uMt,"wav2vec2"),uMt.forEach(t),Gar=r(uPe," \u2014 "),wW=n(uPe,"A",{href:!0});var _Mt=s(wW);Oar=r(_Mt,"Wav2Vec2ForSequenceClassification"),_Mt.forEach(t),Var=r(uPe," (Wav2Vec2 model)"),uPe.forEach(t),Xar=i(ze),u6=n(ze,"LI",{});var _Pe=s(u6);t7e=n(_Pe,"STRONG",{});var bMt=s(t7e);zar=r(bMt,"wav2vec2-conformer"),bMt.forEach(t),War=r(_Pe," \u2014 "),AW=n(_Pe,"A",{href:!0});var vMt=s(AW);Qar=r(vMt,"Wav2Vec2ConformerForSequenceClassification"),vMt.forEach(t),Har=r(_Pe," (Wav2Vec2-Conformer model)"),_Pe.forEach(t),Uar=i(ze),_6=n(ze,"LI",{});var bPe=s(_6);a7e=n(bPe,"STRONG",{});var FMt=s(a7e);Jar=r(FMt,"wavlm"),FMt.forEach(t),Yar=r(bPe," \u2014 "),LW=n(bPe,"A",{href:!0});var TMt=s(LW);Kar=r(TMt,"WavLMForSequenceClassification"),TMt.forEach(t),Zar=r(bPe," (WavLM model)"),bPe.forEach(t),ze.forEach(t),enr=i(ba),b6=n(ba,"P",{});var vPe=s(b6);onr=r(vPe,"The model is set in evaluation mode by default using "),n7e=n(vPe,"CODE",{});var MMt=s(n7e);rnr=r(MMt,"model.eval()"),MMt.forEach(t),tnr=r(vPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=n(vPe,"CODE",{});var EMt=s(s7e);anr=r(EMt,"model.train()"),EMt.forEach(t),vPe.forEach(t),nnr=i(ba),T(v6.$$.fragment,ba),ba.forEach(t),cl.forEach(t),GGe=i(f),wd=n(f,"H2",{class:!0});var QVe=s(wd);F6=n(QVe,"A",{id:!0,class:!0,href:!0});var CMt=s(F6);l7e=n(CMt,"SPAN",{});var wMt=s(l7e);T(m8.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),snr=i(QVe),i7e=n(QVe,"SPAN",{});var AMt=s(i7e);lnr=r(AMt,"AutoModelForAudioFrameClassification"),AMt.forEach(t),QVe.forEach(t),OGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(g8.$$.fragment,fl),inr=i(fl),Ad=n(fl,"P",{});var Loe=s(Ad);dnr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yW=n(Loe,"A",{href:!0});var LMt=s(yW);cnr=r(LMt,"from_pretrained()"),LMt.forEach(t),fnr=r(Loe," class method or the "),xW=n(Loe,"A",{href:!0});var yMt=s(xW);mnr=r(yMt,"from_config()"),yMt.forEach(t),gnr=r(Loe,` class
method.`),Loe.forEach(t),hnr=i(fl),h8=n(fl,"P",{});var HVe=s(h8);pnr=r(HVe,"This class cannot be instantiated directly using "),d7e=n(HVe,"CODE",{});var xMt=s(d7e);unr=r(xMt,"__init__()"),xMt.forEach(t),_nr=r(HVe," (throws an error)."),HVe.forEach(t),bnr=i(fl),Tt=n(fl,"DIV",{class:!0});var Yw=s(Tt);T(p8.$$.fragment,Yw),vnr=i(Yw),c7e=n(Yw,"P",{});var $Mt=s(c7e);Fnr=r($Mt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Mt.forEach(t),Tnr=i(Yw),Ld=n(Yw,"P",{});var yoe=s(Ld);Mnr=r(yoe,`Note:
Loading a model from its configuration file does `),f7e=n(yoe,"STRONG",{});var kMt=s(f7e);Enr=r(kMt,"not"),kMt.forEach(t),Cnr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(yoe,"A",{href:!0});var SMt=s($W);wnr=r(SMt,"from_pretrained()"),SMt.forEach(t),Anr=r(yoe," to load the model weights."),yoe.forEach(t),Lnr=i(Yw),T(T6.$$.fragment,Yw),Yw.forEach(t),ynr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(u8.$$.fragment,va),xnr=i(va),m7e=n(va,"P",{});var RMt=s(m7e);$nr=r(RMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RMt.forEach(t),knr=i(va),Qa=n(va,"P",{});var Kw=s(Qa);Snr=r(Kw,"The model class to instantiate is selected based on the "),g7e=n(Kw,"CODE",{});var PMt=s(g7e);Rnr=r(PMt,"model_type"),PMt.forEach(t),Pnr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),h7e=n(Kw,"CODE",{});var BMt=s(h7e);Bnr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),Inr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(Kw,"CODE",{});var IMt=s(p7e);Nnr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),qnr=r(Kw,":"),Kw.forEach(t),jnr=i(va),et=n(va,"UL",{});var ml=s(et);M6=n(ml,"LI",{});var FPe=s(M6);u7e=n(FPe,"STRONG",{});var NMt=s(u7e);Dnr=r(NMt,"data2vec-audio"),NMt.forEach(t),Gnr=r(FPe," \u2014 "),kW=n(FPe,"A",{href:!0});var qMt=s(kW);Onr=r(qMt,"Data2VecAudioForAudioFrameClassification"),qMt.forEach(t),Vnr=r(FPe," (Data2VecAudio model)"),FPe.forEach(t),Xnr=i(ml),E6=n(ml,"LI",{});var TPe=s(E6);_7e=n(TPe,"STRONG",{});var jMt=s(_7e);znr=r(jMt,"unispeech-sat"),jMt.forEach(t),Wnr=r(TPe," \u2014 "),SW=n(TPe,"A",{href:!0});var DMt=s(SW);Qnr=r(DMt,"UniSpeechSatForAudioFrameClassification"),DMt.forEach(t),Hnr=r(TPe," (UniSpeechSat model)"),TPe.forEach(t),Unr=i(ml),C6=n(ml,"LI",{});var MPe=s(C6);b7e=n(MPe,"STRONG",{});var GMt=s(b7e);Jnr=r(GMt,"wav2vec2"),GMt.forEach(t),Ynr=r(MPe," \u2014 "),RW=n(MPe,"A",{href:!0});var OMt=s(RW);Knr=r(OMt,"Wav2Vec2ForAudioFrameClassification"),OMt.forEach(t),Znr=r(MPe," (Wav2Vec2 model)"),MPe.forEach(t),esr=i(ml),w6=n(ml,"LI",{});var EPe=s(w6);v7e=n(EPe,"STRONG",{});var VMt=s(v7e);osr=r(VMt,"wav2vec2-conformer"),VMt.forEach(t),rsr=r(EPe," \u2014 "),PW=n(EPe,"A",{href:!0});var XMt=s(PW);tsr=r(XMt,"Wav2Vec2ConformerForAudioFrameClassification"),XMt.forEach(t),asr=r(EPe," (Wav2Vec2-Conformer model)"),EPe.forEach(t),nsr=i(ml),A6=n(ml,"LI",{});var CPe=s(A6);F7e=n(CPe,"STRONG",{});var zMt=s(F7e);ssr=r(zMt,"wavlm"),zMt.forEach(t),lsr=r(CPe," \u2014 "),BW=n(CPe,"A",{href:!0});var WMt=s(BW);isr=r(WMt,"WavLMForAudioFrameClassification"),WMt.forEach(t),dsr=r(CPe," (WavLM model)"),CPe.forEach(t),ml.forEach(t),csr=i(va),L6=n(va,"P",{});var wPe=s(L6);fsr=r(wPe,"The model is set in evaluation mode by default using "),T7e=n(wPe,"CODE",{});var QMt=s(T7e);msr=r(QMt,"model.eval()"),QMt.forEach(t),gsr=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M7e=n(wPe,"CODE",{});var HMt=s(M7e);hsr=r(HMt,"model.train()"),HMt.forEach(t),wPe.forEach(t),psr=i(va),T(y6.$$.fragment,va),va.forEach(t),fl.forEach(t),VGe=i(f),yd=n(f,"H2",{class:!0});var UVe=s(yd);x6=n(UVe,"A",{id:!0,class:!0,href:!0});var UMt=s(x6);E7e=n(UMt,"SPAN",{});var JMt=s(E7e);T(_8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),usr=i(UVe),C7e=n(UVe,"SPAN",{});var YMt=s(C7e);_sr=r(YMt,"AutoModelForCTC"),YMt.forEach(t),UVe.forEach(t),XGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(b8.$$.fragment,gl),bsr=i(gl),xd=n(gl,"P",{});var xoe=s(xd);vsr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IW=n(xoe,"A",{href:!0});var KMt=s(IW);Fsr=r(KMt,"from_pretrained()"),KMt.forEach(t),Tsr=r(xoe," class method or the "),NW=n(xoe,"A",{href:!0});var ZMt=s(NW);Msr=r(ZMt,"from_config()"),ZMt.forEach(t),Esr=r(xoe,` class
method.`),xoe.forEach(t),Csr=i(gl),v8=n(gl,"P",{});var JVe=s(v8);wsr=r(JVe,"This class cannot be instantiated directly using "),w7e=n(JVe,"CODE",{});var e4t=s(w7e);Asr=r(e4t,"__init__()"),e4t.forEach(t),Lsr=r(JVe," (throws an error)."),JVe.forEach(t),ysr=i(gl),Mt=n(gl,"DIV",{class:!0});var Zw=s(Mt);T(F8.$$.fragment,Zw),xsr=i(Zw),A7e=n(Zw,"P",{});var o4t=s(A7e);$sr=r(o4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),o4t.forEach(t),ksr=i(Zw),$d=n(Zw,"P",{});var $oe=s($d);Ssr=r($oe,`Note:
Loading a model from its configuration file does `),L7e=n($oe,"STRONG",{});var r4t=s(L7e);Rsr=r(r4t,"not"),r4t.forEach(t),Psr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n($oe,"A",{href:!0});var t4t=s(qW);Bsr=r(t4t,"from_pretrained()"),t4t.forEach(t),Isr=r($oe," to load the model weights."),$oe.forEach(t),Nsr=i(Zw),T($6.$$.fragment,Zw),Zw.forEach(t),qsr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(T8.$$.fragment,Fa),jsr=i(Fa),y7e=n(Fa,"P",{});var a4t=s(y7e);Dsr=r(a4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),a4t.forEach(t),Gsr=i(Fa),Ha=n(Fa,"P",{});var eA=s(Ha);Osr=r(eA,"The model class to instantiate is selected based on the "),x7e=n(eA,"CODE",{});var n4t=s(x7e);Vsr=r(n4t,"model_type"),n4t.forEach(t),Xsr=r(eA,` property of the config object (either
passed as an argument or loaded from `),$7e=n(eA,"CODE",{});var s4t=s($7e);zsr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),Wsr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(eA,"CODE",{});var l4t=s(k7e);Qsr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),Hsr=r(eA,":"),eA.forEach(t),Usr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);k6=n(Be,"LI",{});var APe=s(k6);S7e=n(APe,"STRONG",{});var i4t=s(S7e);Jsr=r(i4t,"data2vec-audio"),i4t.forEach(t),Ysr=r(APe," \u2014 "),jW=n(APe,"A",{href:!0});var d4t=s(jW);Ksr=r(d4t,"Data2VecAudioForCTC"),d4t.forEach(t),Zsr=r(APe," (Data2VecAudio model)"),APe.forEach(t),elr=i(Be),S6=n(Be,"LI",{});var LPe=s(S6);R7e=n(LPe,"STRONG",{});var c4t=s(R7e);olr=r(c4t,"hubert"),c4t.forEach(t),rlr=r(LPe," \u2014 "),DW=n(LPe,"A",{href:!0});var f4t=s(DW);tlr=r(f4t,"HubertForCTC"),f4t.forEach(t),alr=r(LPe," (Hubert model)"),LPe.forEach(t),nlr=i(Be),R6=n(Be,"LI",{});var yPe=s(R6);P7e=n(yPe,"STRONG",{});var m4t=s(P7e);slr=r(m4t,"mctct"),m4t.forEach(t),llr=r(yPe," \u2014 "),GW=n(yPe,"A",{href:!0});var g4t=s(GW);ilr=r(g4t,"MCTCTForCTC"),g4t.forEach(t),dlr=r(yPe," (M-CTC-T model)"),yPe.forEach(t),clr=i(Be),P6=n(Be,"LI",{});var xPe=s(P6);B7e=n(xPe,"STRONG",{});var h4t=s(B7e);flr=r(h4t,"sew"),h4t.forEach(t),mlr=r(xPe," \u2014 "),OW=n(xPe,"A",{href:!0});var p4t=s(OW);glr=r(p4t,"SEWForCTC"),p4t.forEach(t),hlr=r(xPe," (SEW model)"),xPe.forEach(t),plr=i(Be),B6=n(Be,"LI",{});var $Pe=s(B6);I7e=n($Pe,"STRONG",{});var u4t=s(I7e);ulr=r(u4t,"sew-d"),u4t.forEach(t),_lr=r($Pe," \u2014 "),VW=n($Pe,"A",{href:!0});var _4t=s(VW);blr=r(_4t,"SEWDForCTC"),_4t.forEach(t),vlr=r($Pe," (SEW-D model)"),$Pe.forEach(t),Flr=i(Be),I6=n(Be,"LI",{});var kPe=s(I6);N7e=n(kPe,"STRONG",{});var b4t=s(N7e);Tlr=r(b4t,"unispeech"),b4t.forEach(t),Mlr=r(kPe," \u2014 "),XW=n(kPe,"A",{href:!0});var v4t=s(XW);Elr=r(v4t,"UniSpeechForCTC"),v4t.forEach(t),Clr=r(kPe," (UniSpeech model)"),kPe.forEach(t),wlr=i(Be),N6=n(Be,"LI",{});var SPe=s(N6);q7e=n(SPe,"STRONG",{});var F4t=s(q7e);Alr=r(F4t,"unispeech-sat"),F4t.forEach(t),Llr=r(SPe," \u2014 "),zW=n(SPe,"A",{href:!0});var T4t=s(zW);ylr=r(T4t,"UniSpeechSatForCTC"),T4t.forEach(t),xlr=r(SPe," (UniSpeechSat model)"),SPe.forEach(t),$lr=i(Be),q6=n(Be,"LI",{});var RPe=s(q6);j7e=n(RPe,"STRONG",{});var M4t=s(j7e);klr=r(M4t,"wav2vec2"),M4t.forEach(t),Slr=r(RPe," \u2014 "),WW=n(RPe,"A",{href:!0});var E4t=s(WW);Rlr=r(E4t,"Wav2Vec2ForCTC"),E4t.forEach(t),Plr=r(RPe," (Wav2Vec2 model)"),RPe.forEach(t),Blr=i(Be),j6=n(Be,"LI",{});var PPe=s(j6);D7e=n(PPe,"STRONG",{});var C4t=s(D7e);Ilr=r(C4t,"wav2vec2-conformer"),C4t.forEach(t),Nlr=r(PPe," \u2014 "),QW=n(PPe,"A",{href:!0});var w4t=s(QW);qlr=r(w4t,"Wav2Vec2ConformerForCTC"),w4t.forEach(t),jlr=r(PPe," (Wav2Vec2-Conformer model)"),PPe.forEach(t),Dlr=i(Be),D6=n(Be,"LI",{});var BPe=s(D6);G7e=n(BPe,"STRONG",{});var A4t=s(G7e);Glr=r(A4t,"wavlm"),A4t.forEach(t),Olr=r(BPe," \u2014 "),HW=n(BPe,"A",{href:!0});var L4t=s(HW);Vlr=r(L4t,"WavLMForCTC"),L4t.forEach(t),Xlr=r(BPe," (WavLM model)"),BPe.forEach(t),Be.forEach(t),zlr=i(Fa),G6=n(Fa,"P",{});var IPe=s(G6);Wlr=r(IPe,"The model is set in evaluation mode by default using "),O7e=n(IPe,"CODE",{});var y4t=s(O7e);Qlr=r(y4t,"model.eval()"),y4t.forEach(t),Hlr=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=n(IPe,"CODE",{});var x4t=s(V7e);Ulr=r(x4t,"model.train()"),x4t.forEach(t),IPe.forEach(t),Jlr=i(Fa),T(O6.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),zGe=i(f),kd=n(f,"H2",{class:!0});var YVe=s(kd);V6=n(YVe,"A",{id:!0,class:!0,href:!0});var $4t=s(V6);X7e=n($4t,"SPAN",{});var k4t=s(X7e);T(M8.$$.fragment,k4t),k4t.forEach(t),$4t.forEach(t),Ylr=i(YVe),z7e=n(YVe,"SPAN",{});var S4t=s(z7e);Klr=r(S4t,"AutoModelForSpeechSeq2Seq"),S4t.forEach(t),YVe.forEach(t),WGe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(E8.$$.fragment,hl),Zlr=i(hl),Sd=n(hl,"P",{});var koe=s(Sd);eir=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UW=n(koe,"A",{href:!0});var R4t=s(UW);oir=r(R4t,"from_pretrained()"),R4t.forEach(t),rir=r(koe," class method or the "),JW=n(koe,"A",{href:!0});var P4t=s(JW);tir=r(P4t,"from_config()"),P4t.forEach(t),air=r(koe,` class
method.`),koe.forEach(t),nir=i(hl),C8=n(hl,"P",{});var KVe=s(C8);sir=r(KVe,"This class cannot be instantiated directly using "),W7e=n(KVe,"CODE",{});var B4t=s(W7e);lir=r(B4t,"__init__()"),B4t.forEach(t),iir=r(KVe," (throws an error)."),KVe.forEach(t),dir=i(hl),Et=n(hl,"DIV",{class:!0});var oA=s(Et);T(w8.$$.fragment,oA),cir=i(oA),Q7e=n(oA,"P",{});var I4t=s(Q7e);fir=r(I4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I4t.forEach(t),mir=i(oA),Rd=n(oA,"P",{});var Soe=s(Rd);gir=r(Soe,`Note:
Loading a model from its configuration file does `),H7e=n(Soe,"STRONG",{});var N4t=s(H7e);hir=r(N4t,"not"),N4t.forEach(t),pir=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(Soe,"A",{href:!0});var q4t=s(YW);uir=r(q4t,"from_pretrained()"),q4t.forEach(t),_ir=r(Soe," to load the model weights."),Soe.forEach(t),bir=i(oA),T(X6.$$.fragment,oA),oA.forEach(t),vir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(A8.$$.fragment,Ta),Fir=i(Ta),U7e=n(Ta,"P",{});var j4t=s(U7e);Tir=r(j4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j4t.forEach(t),Mir=i(Ta),Ua=n(Ta,"P",{});var rA=s(Ua);Eir=r(rA,"The model class to instantiate is selected based on the "),J7e=n(rA,"CODE",{});var D4t=s(J7e);Cir=r(D4t,"model_type"),D4t.forEach(t),wir=r(rA,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(rA,"CODE",{});var G4t=s(Y7e);Air=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Lir=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(rA,"CODE",{});var O4t=s(K7e);yir=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),xir=r(rA,":"),rA.forEach(t),$ir=i(Ta),L8=n(Ta,"UL",{});var ZVe=s(L8);z6=n(ZVe,"LI",{});var NPe=s(z6);Z7e=n(NPe,"STRONG",{});var V4t=s(Z7e);kir=r(V4t,"speech-encoder-decoder"),V4t.forEach(t),Sir=r(NPe," \u2014 "),KW=n(NPe,"A",{href:!0});var X4t=s(KW);Rir=r(X4t,"SpeechEncoderDecoderModel"),X4t.forEach(t),Pir=r(NPe," (Speech Encoder decoder model)"),NPe.forEach(t),Bir=i(ZVe),W6=n(ZVe,"LI",{});var qPe=s(W6);e2e=n(qPe,"STRONG",{});var z4t=s(e2e);Iir=r(z4t,"speech_to_text"),z4t.forEach(t),Nir=r(qPe," \u2014 "),ZW=n(qPe,"A",{href:!0});var W4t=s(ZW);qir=r(W4t,"Speech2TextForConditionalGeneration"),W4t.forEach(t),jir=r(qPe," (Speech2Text model)"),qPe.forEach(t),ZVe.forEach(t),Dir=i(Ta),Q6=n(Ta,"P",{});var jPe=s(Q6);Gir=r(jPe,"The model is set in evaluation mode by default using "),o2e=n(jPe,"CODE",{});var Q4t=s(o2e);Oir=r(Q4t,"model.eval()"),Q4t.forEach(t),Vir=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=n(jPe,"CODE",{});var H4t=s(r2e);Xir=r(H4t,"model.train()"),H4t.forEach(t),jPe.forEach(t),zir=i(Ta),T(H6.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),QGe=i(f),Pd=n(f,"H2",{class:!0});var eXe=s(Pd);U6=n(eXe,"A",{id:!0,class:!0,href:!0});var U4t=s(U6);t2e=n(U4t,"SPAN",{});var J4t=s(t2e);T(y8.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),Wir=i(eXe),a2e=n(eXe,"SPAN",{});var Y4t=s(a2e);Qir=r(Y4t,"AutoModelForAudioXVector"),Y4t.forEach(t),eXe.forEach(t),HGe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(x8.$$.fragment,pl),Hir=i(pl),Bd=n(pl,"P",{});var Roe=s(Bd);Uir=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eQ=n(Roe,"A",{href:!0});var K4t=s(eQ);Jir=r(K4t,"from_pretrained()"),K4t.forEach(t),Yir=r(Roe," class method or the "),oQ=n(Roe,"A",{href:!0});var Z4t=s(oQ);Kir=r(Z4t,"from_config()"),Z4t.forEach(t),Zir=r(Roe,` class
method.`),Roe.forEach(t),edr=i(pl),$8=n(pl,"P",{});var oXe=s($8);odr=r(oXe,"This class cannot be instantiated directly using "),n2e=n(oXe,"CODE",{});var eEt=s(n2e);rdr=r(eEt,"__init__()"),eEt.forEach(t),tdr=r(oXe," (throws an error)."),oXe.forEach(t),adr=i(pl),Ct=n(pl,"DIV",{class:!0});var tA=s(Ct);T(k8.$$.fragment,tA),ndr=i(tA),s2e=n(tA,"P",{});var oEt=s(s2e);sdr=r(oEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oEt.forEach(t),ldr=i(tA),Id=n(tA,"P",{});var Poe=s(Id);idr=r(Poe,`Note:
Loading a model from its configuration file does `),l2e=n(Poe,"STRONG",{});var rEt=s(l2e);ddr=r(rEt,"not"),rEt.forEach(t),cdr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(Poe,"A",{href:!0});var tEt=s(rQ);fdr=r(tEt,"from_pretrained()"),tEt.forEach(t),mdr=r(Poe," to load the model weights."),Poe.forEach(t),gdr=i(tA),T(J6.$$.fragment,tA),tA.forEach(t),hdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(S8.$$.fragment,Ma),pdr=i(Ma),i2e=n(Ma,"P",{});var aEt=s(i2e);udr=r(aEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aEt.forEach(t),_dr=i(Ma),Ja=n(Ma,"P",{});var aA=s(Ja);bdr=r(aA,"The model class to instantiate is selected based on the "),d2e=n(aA,"CODE",{});var nEt=s(d2e);vdr=r(nEt,"model_type"),nEt.forEach(t),Fdr=r(aA,` property of the config object (either
passed as an argument or loaded from `),c2e=n(aA,"CODE",{});var sEt=s(c2e);Tdr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),Mdr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(aA,"CODE",{});var lEt=s(f2e);Edr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Cdr=r(aA,":"),aA.forEach(t),wdr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);Y6=n(ul,"LI",{});var DPe=s(Y6);m2e=n(DPe,"STRONG",{});var iEt=s(m2e);Adr=r(iEt,"data2vec-audio"),iEt.forEach(t),Ldr=r(DPe," \u2014 "),tQ=n(DPe,"A",{href:!0});var dEt=s(tQ);ydr=r(dEt,"Data2VecAudioForXVector"),dEt.forEach(t),xdr=r(DPe," (Data2VecAudio model)"),DPe.forEach(t),$dr=i(ul),K6=n(ul,"LI",{});var GPe=s(K6);g2e=n(GPe,"STRONG",{});var cEt=s(g2e);kdr=r(cEt,"unispeech-sat"),cEt.forEach(t),Sdr=r(GPe," \u2014 "),aQ=n(GPe,"A",{href:!0});var fEt=s(aQ);Rdr=r(fEt,"UniSpeechSatForXVector"),fEt.forEach(t),Pdr=r(GPe," (UniSpeechSat model)"),GPe.forEach(t),Bdr=i(ul),Z6=n(ul,"LI",{});var OPe=s(Z6);h2e=n(OPe,"STRONG",{});var mEt=s(h2e);Idr=r(mEt,"wav2vec2"),mEt.forEach(t),Ndr=r(OPe," \u2014 "),nQ=n(OPe,"A",{href:!0});var gEt=s(nQ);qdr=r(gEt,"Wav2Vec2ForXVector"),gEt.forEach(t),jdr=r(OPe," (Wav2Vec2 model)"),OPe.forEach(t),Ddr=i(ul),eT=n(ul,"LI",{});var VPe=s(eT);p2e=n(VPe,"STRONG",{});var hEt=s(p2e);Gdr=r(hEt,"wav2vec2-conformer"),hEt.forEach(t),Odr=r(VPe," \u2014 "),sQ=n(VPe,"A",{href:!0});var pEt=s(sQ);Vdr=r(pEt,"Wav2Vec2ConformerForXVector"),pEt.forEach(t),Xdr=r(VPe," (Wav2Vec2-Conformer model)"),VPe.forEach(t),zdr=i(ul),oT=n(ul,"LI",{});var XPe=s(oT);u2e=n(XPe,"STRONG",{});var uEt=s(u2e);Wdr=r(uEt,"wavlm"),uEt.forEach(t),Qdr=r(XPe," \u2014 "),lQ=n(XPe,"A",{href:!0});var _Et=s(lQ);Hdr=r(_Et,"WavLMForXVector"),_Et.forEach(t),Udr=r(XPe," (WavLM model)"),XPe.forEach(t),ul.forEach(t),Jdr=i(Ma),rT=n(Ma,"P",{});var zPe=s(rT);Ydr=r(zPe,"The model is set in evaluation mode by default using "),_2e=n(zPe,"CODE",{});var bEt=s(_2e);Kdr=r(bEt,"model.eval()"),bEt.forEach(t),Zdr=r(zPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(zPe,"CODE",{});var vEt=s(b2e);ecr=r(vEt,"model.train()"),vEt.forEach(t),zPe.forEach(t),ocr=i(Ma),T(tT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),UGe=i(f),Nd=n(f,"H2",{class:!0});var rXe=s(Nd);aT=n(rXe,"A",{id:!0,class:!0,href:!0});var FEt=s(aT);v2e=n(FEt,"SPAN",{});var TEt=s(v2e);T(R8.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),rcr=i(rXe),F2e=n(rXe,"SPAN",{});var MEt=s(F2e);tcr=r(MEt,"AutoModelForMaskedImageModeling"),MEt.forEach(t),rXe.forEach(t),JGe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(P8.$$.fragment,_l),acr=i(_l),qd=n(_l,"P",{});var Boe=s(qd);ncr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iQ=n(Boe,"A",{href:!0});var EEt=s(iQ);scr=r(EEt,"from_pretrained()"),EEt.forEach(t),lcr=r(Boe," class method or the "),dQ=n(Boe,"A",{href:!0});var CEt=s(dQ);icr=r(CEt,"from_config()"),CEt.forEach(t),dcr=r(Boe,` class
method.`),Boe.forEach(t),ccr=i(_l),B8=n(_l,"P",{});var tXe=s(B8);fcr=r(tXe,"This class cannot be instantiated directly using "),T2e=n(tXe,"CODE",{});var wEt=s(T2e);mcr=r(wEt,"__init__()"),wEt.forEach(t),gcr=r(tXe," (throws an error)."),tXe.forEach(t),hcr=i(_l),wt=n(_l,"DIV",{class:!0});var nA=s(wt);T(I8.$$.fragment,nA),pcr=i(nA),M2e=n(nA,"P",{});var AEt=s(M2e);ucr=r(AEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),AEt.forEach(t),_cr=i(nA),jd=n(nA,"P",{});var Ioe=s(jd);bcr=r(Ioe,`Note:
Loading a model from its configuration file does `),E2e=n(Ioe,"STRONG",{});var LEt=s(E2e);vcr=r(LEt,"not"),LEt.forEach(t),Fcr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Ioe,"A",{href:!0});var yEt=s(cQ);Tcr=r(yEt,"from_pretrained()"),yEt.forEach(t),Mcr=r(Ioe," to load the model weights."),Ioe.forEach(t),Ecr=i(nA),T(nT.$$.fragment,nA),nA.forEach(t),Ccr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(N8.$$.fragment,Ea),wcr=i(Ea),C2e=n(Ea,"P",{});var xEt=s(C2e);Acr=r(xEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xEt.forEach(t),Lcr=i(Ea),Ya=n(Ea,"P",{});var sA=s(Ya);ycr=r(sA,"The model class to instantiate is selected based on the "),w2e=n(sA,"CODE",{});var $Et=s(w2e);xcr=r($Et,"model_type"),$Et.forEach(t),$cr=r(sA,` property of the config object (either
passed as an argument or loaded from `),A2e=n(sA,"CODE",{});var kEt=s(A2e);kcr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),Scr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(sA,"CODE",{});var SEt=s(L2e);Rcr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),Pcr=r(sA,":"),sA.forEach(t),Bcr=i(Ea),Dd=n(Ea,"UL",{});var Noe=s(Dd);sT=n(Noe,"LI",{});var WPe=s(sT);y2e=n(WPe,"STRONG",{});var REt=s(y2e);Icr=r(REt,"deit"),REt.forEach(t),Ncr=r(WPe," \u2014 "),fQ=n(WPe,"A",{href:!0});var PEt=s(fQ);qcr=r(PEt,"DeiTForMaskedImageModeling"),PEt.forEach(t),jcr=r(WPe," (DeiT model)"),WPe.forEach(t),Dcr=i(Noe),lT=n(Noe,"LI",{});var QPe=s(lT);x2e=n(QPe,"STRONG",{});var BEt=s(x2e);Gcr=r(BEt,"swin"),BEt.forEach(t),Ocr=r(QPe," \u2014 "),mQ=n(QPe,"A",{href:!0});var IEt=s(mQ);Vcr=r(IEt,"SwinForMaskedImageModeling"),IEt.forEach(t),Xcr=r(QPe," (Swin Transformer model)"),QPe.forEach(t),zcr=i(Noe),iT=n(Noe,"LI",{});var HPe=s(iT);$2e=n(HPe,"STRONG",{});var NEt=s($2e);Wcr=r(NEt,"vit"),NEt.forEach(t),Qcr=r(HPe," \u2014 "),gQ=n(HPe,"A",{href:!0});var qEt=s(gQ);Hcr=r(qEt,"ViTForMaskedImageModeling"),qEt.forEach(t),Ucr=r(HPe," (ViT model)"),HPe.forEach(t),Noe.forEach(t),Jcr=i(Ea),dT=n(Ea,"P",{});var UPe=s(dT);Ycr=r(UPe,"The model is set in evaluation mode by default using "),k2e=n(UPe,"CODE",{});var jEt=s(k2e);Kcr=r(jEt,"model.eval()"),jEt.forEach(t),Zcr=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(UPe,"CODE",{});var DEt=s(S2e);efr=r(DEt,"model.train()"),DEt.forEach(t),UPe.forEach(t),ofr=i(Ea),T(cT.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),YGe=i(f),Gd=n(f,"H2",{class:!0});var aXe=s(Gd);fT=n(aXe,"A",{id:!0,class:!0,href:!0});var GEt=s(fT);R2e=n(GEt,"SPAN",{});var OEt=s(R2e);T(q8.$$.fragment,OEt),OEt.forEach(t),GEt.forEach(t),rfr=i(aXe),P2e=n(aXe,"SPAN",{});var VEt=s(P2e);tfr=r(VEt,"AutoModelForObjectDetection"),VEt.forEach(t),aXe.forEach(t),KGe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(j8.$$.fragment,bl),afr=i(bl),Od=n(bl,"P",{});var qoe=s(Od);nfr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hQ=n(qoe,"A",{href:!0});var XEt=s(hQ);sfr=r(XEt,"from_pretrained()"),XEt.forEach(t),lfr=r(qoe," class method or the "),pQ=n(qoe,"A",{href:!0});var zEt=s(pQ);ifr=r(zEt,"from_config()"),zEt.forEach(t),dfr=r(qoe,` class
method.`),qoe.forEach(t),cfr=i(bl),D8=n(bl,"P",{});var nXe=s(D8);ffr=r(nXe,"This class cannot be instantiated directly using "),B2e=n(nXe,"CODE",{});var WEt=s(B2e);mfr=r(WEt,"__init__()"),WEt.forEach(t),gfr=r(nXe," (throws an error)."),nXe.forEach(t),hfr=i(bl),At=n(bl,"DIV",{class:!0});var lA=s(At);T(G8.$$.fragment,lA),pfr=i(lA),I2e=n(lA,"P",{});var QEt=s(I2e);ufr=r(QEt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),QEt.forEach(t),_fr=i(lA),Vd=n(lA,"P",{});var joe=s(Vd);bfr=r(joe,`Note:
Loading a model from its configuration file does `),N2e=n(joe,"STRONG",{});var HEt=s(N2e);vfr=r(HEt,"not"),HEt.forEach(t),Ffr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(joe,"A",{href:!0});var UEt=s(uQ);Tfr=r(UEt,"from_pretrained()"),UEt.forEach(t),Mfr=r(joe," to load the model weights."),joe.forEach(t),Efr=i(lA),T(mT.$$.fragment,lA),lA.forEach(t),Cfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(O8.$$.fragment,Ca),wfr=i(Ca),q2e=n(Ca,"P",{});var JEt=s(q2e);Afr=r(JEt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),JEt.forEach(t),Lfr=i(Ca),Ka=n(Ca,"P",{});var iA=s(Ka);yfr=r(iA,"The model class to instantiate is selected based on the "),j2e=n(iA,"CODE",{});var YEt=s(j2e);xfr=r(YEt,"model_type"),YEt.forEach(t),$fr=r(iA,` property of the config object (either
passed as an argument or loaded from `),D2e=n(iA,"CODE",{});var KEt=s(D2e);kfr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),Sfr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(iA,"CODE",{});var ZEt=s(G2e);Rfr=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),Pfr=r(iA,":"),iA.forEach(t),Bfr=i(Ca),V8=n(Ca,"UL",{});var sXe=s(V8);gT=n(sXe,"LI",{});var JPe=s(gT);O2e=n(JPe,"STRONG",{});var eCt=s(O2e);Ifr=r(eCt,"detr"),eCt.forEach(t),Nfr=r(JPe," \u2014 "),_Q=n(JPe,"A",{href:!0});var oCt=s(_Q);qfr=r(oCt,"DetrForObjectDetection"),oCt.forEach(t),jfr=r(JPe," (DETR model)"),JPe.forEach(t),Dfr=i(sXe),hT=n(sXe,"LI",{});var YPe=s(hT);V2e=n(YPe,"STRONG",{});var rCt=s(V2e);Gfr=r(rCt,"yolos"),rCt.forEach(t),Ofr=r(YPe," \u2014 "),bQ=n(YPe,"A",{href:!0});var tCt=s(bQ);Vfr=r(tCt,"YolosForObjectDetection"),tCt.forEach(t),Xfr=r(YPe," (YOLOS model)"),YPe.forEach(t),sXe.forEach(t),zfr=i(Ca),pT=n(Ca,"P",{});var KPe=s(pT);Wfr=r(KPe,"The model is set in evaluation mode by default using "),X2e=n(KPe,"CODE",{});var aCt=s(X2e);Qfr=r(aCt,"model.eval()"),aCt.forEach(t),Hfr=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(KPe,"CODE",{});var nCt=s(z2e);Ufr=r(nCt,"model.train()"),nCt.forEach(t),KPe.forEach(t),Jfr=i(Ca),T(uT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),ZGe=i(f),Xd=n(f,"H2",{class:!0});var lXe=s(Xd);_T=n(lXe,"A",{id:!0,class:!0,href:!0});var sCt=s(_T);W2e=n(sCt,"SPAN",{});var lCt=s(W2e);T(X8.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),Yfr=i(lXe),Q2e=n(lXe,"SPAN",{});var iCt=s(Q2e);Kfr=r(iCt,"AutoModelForImageSegmentation"),iCt.forEach(t),lXe.forEach(t),eOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(z8.$$.fragment,vl),Zfr=i(vl),zd=n(vl,"P",{});var Doe=s(zd);emr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vQ=n(Doe,"A",{href:!0});var dCt=s(vQ);omr=r(dCt,"from_pretrained()"),dCt.forEach(t),rmr=r(Doe," class method or the "),FQ=n(Doe,"A",{href:!0});var cCt=s(FQ);tmr=r(cCt,"from_config()"),cCt.forEach(t),amr=r(Doe,` class
method.`),Doe.forEach(t),nmr=i(vl),W8=n(vl,"P",{});var iXe=s(W8);smr=r(iXe,"This class cannot be instantiated directly using "),H2e=n(iXe,"CODE",{});var fCt=s(H2e);lmr=r(fCt,"__init__()"),fCt.forEach(t),imr=r(iXe," (throws an error)."),iXe.forEach(t),dmr=i(vl),Lt=n(vl,"DIV",{class:!0});var dA=s(Lt);T(Q8.$$.fragment,dA),cmr=i(dA),U2e=n(dA,"P",{});var mCt=s(U2e);fmr=r(mCt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mCt.forEach(t),mmr=i(dA),Wd=n(dA,"P",{});var Goe=s(Wd);gmr=r(Goe,`Note:
Loading a model from its configuration file does `),J2e=n(Goe,"STRONG",{});var gCt=s(J2e);hmr=r(gCt,"not"),gCt.forEach(t),pmr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(Goe,"A",{href:!0});var hCt=s(TQ);umr=r(hCt,"from_pretrained()"),hCt.forEach(t),_mr=r(Goe," to load the model weights."),Goe.forEach(t),bmr=i(dA),T(bT.$$.fragment,dA),dA.forEach(t),vmr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(H8.$$.fragment,wa),Fmr=i(wa),Y2e=n(wa,"P",{});var pCt=s(Y2e);Tmr=r(pCt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pCt.forEach(t),Mmr=i(wa),Za=n(wa,"P",{});var cA=s(Za);Emr=r(cA,"The model class to instantiate is selected based on the "),K2e=n(cA,"CODE",{});var uCt=s(K2e);Cmr=r(uCt,"model_type"),uCt.forEach(t),wmr=r(cA,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(cA,"CODE",{});var _Ct=s(Z2e);Amr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),Lmr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(cA,"CODE",{});var bCt=s(ebe);ymr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),xmr=r(cA,":"),cA.forEach(t),$mr=i(wa),obe=n(wa,"UL",{});var vCt=s(obe);vT=n(vCt,"LI",{});var ZPe=s(vT);rbe=n(ZPe,"STRONG",{});var FCt=s(rbe);kmr=r(FCt,"detr"),FCt.forEach(t),Smr=r(ZPe," \u2014 "),MQ=n(ZPe,"A",{href:!0});var TCt=s(MQ);Rmr=r(TCt,"DetrForSegmentation"),TCt.forEach(t),Pmr=r(ZPe," (DETR model)"),ZPe.forEach(t),vCt.forEach(t),Bmr=i(wa),FT=n(wa,"P",{});var eBe=s(FT);Imr=r(eBe,"The model is set in evaluation mode by default using "),tbe=n(eBe,"CODE",{});var MCt=s(tbe);Nmr=r(MCt,"model.eval()"),MCt.forEach(t),qmr=r(eBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(eBe,"CODE",{});var ECt=s(abe);jmr=r(ECt,"model.train()"),ECt.forEach(t),eBe.forEach(t),Dmr=i(wa),T(TT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),oOe=i(f),Qd=n(f,"H2",{class:!0});var dXe=s(Qd);MT=n(dXe,"A",{id:!0,class:!0,href:!0});var CCt=s(MT);nbe=n(CCt,"SPAN",{});var wCt=s(nbe);T(U8.$$.fragment,wCt),wCt.forEach(t),CCt.forEach(t),Gmr=i(dXe),sbe=n(dXe,"SPAN",{});var ACt=s(sbe);Omr=r(ACt,"AutoModelForSemanticSegmentation"),ACt.forEach(t),dXe.forEach(t),rOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(J8.$$.fragment,Fl),Vmr=i(Fl),Hd=n(Fl,"P",{});var Ooe=s(Hd);Xmr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EQ=n(Ooe,"A",{href:!0});var LCt=s(EQ);zmr=r(LCt,"from_pretrained()"),LCt.forEach(t),Wmr=r(Ooe," class method or the "),CQ=n(Ooe,"A",{href:!0});var yCt=s(CQ);Qmr=r(yCt,"from_config()"),yCt.forEach(t),Hmr=r(Ooe,` class
method.`),Ooe.forEach(t),Umr=i(Fl),Y8=n(Fl,"P",{});var cXe=s(Y8);Jmr=r(cXe,"This class cannot be instantiated directly using "),lbe=n(cXe,"CODE",{});var xCt=s(lbe);Ymr=r(xCt,"__init__()"),xCt.forEach(t),Kmr=r(cXe," (throws an error)."),cXe.forEach(t),Zmr=i(Fl),yt=n(Fl,"DIV",{class:!0});var fA=s(yt);T(K8.$$.fragment,fA),egr=i(fA),ibe=n(fA,"P",{});var $Ct=s(ibe);ogr=r($Ct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$Ct.forEach(t),rgr=i(fA),Ud=n(fA,"P",{});var Voe=s(Ud);tgr=r(Voe,`Note:
Loading a model from its configuration file does `),dbe=n(Voe,"STRONG",{});var kCt=s(dbe);agr=r(kCt,"not"),kCt.forEach(t),ngr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(Voe,"A",{href:!0});var SCt=s(wQ);sgr=r(SCt,"from_pretrained()"),SCt.forEach(t),lgr=r(Voe," to load the model weights."),Voe.forEach(t),igr=i(fA),T(ET.$$.fragment,fA),fA.forEach(t),dgr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(Z8.$$.fragment,Aa),cgr=i(Aa),cbe=n(Aa,"P",{});var RCt=s(cbe);fgr=r(RCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),RCt.forEach(t),mgr=i(Aa),en=n(Aa,"P",{});var mA=s(en);ggr=r(mA,"The model class to instantiate is selected based on the "),fbe=n(mA,"CODE",{});var PCt=s(fbe);hgr=r(PCt,"model_type"),PCt.forEach(t),pgr=r(mA,` property of the config object (either
passed as an argument or loaded from `),mbe=n(mA,"CODE",{});var BCt=s(mbe);ugr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),_gr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(mA,"CODE",{});var ICt=s(gbe);bgr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),vgr=r(mA,":"),mA.forEach(t),Fgr=i(Aa),on=n(Aa,"UL",{});var gA=s(on);CT=n(gA,"LI",{});var oBe=s(CT);hbe=n(oBe,"STRONG",{});var NCt=s(hbe);Tgr=r(NCt,"beit"),NCt.forEach(t),Mgr=r(oBe," \u2014 "),AQ=n(oBe,"A",{href:!0});var qCt=s(AQ);Egr=r(qCt,"BeitForSemanticSegmentation"),qCt.forEach(t),Cgr=r(oBe," (BEiT model)"),oBe.forEach(t),wgr=i(gA),wT=n(gA,"LI",{});var rBe=s(wT);pbe=n(rBe,"STRONG",{});var jCt=s(pbe);Agr=r(jCt,"data2vec-vision"),jCt.forEach(t),Lgr=r(rBe," \u2014 "),LQ=n(rBe,"A",{href:!0});var DCt=s(LQ);ygr=r(DCt,"Data2VecVisionForSemanticSegmentation"),DCt.forEach(t),xgr=r(rBe," (Data2VecVision model)"),rBe.forEach(t),$gr=i(gA),AT=n(gA,"LI",{});var tBe=s(AT);ube=n(tBe,"STRONG",{});var GCt=s(ube);kgr=r(GCt,"dpt"),GCt.forEach(t),Sgr=r(tBe," \u2014 "),yQ=n(tBe,"A",{href:!0});var OCt=s(yQ);Rgr=r(OCt,"DPTForSemanticSegmentation"),OCt.forEach(t),Pgr=r(tBe," (DPT model)"),tBe.forEach(t),Bgr=i(gA),LT=n(gA,"LI",{});var aBe=s(LT);_be=n(aBe,"STRONG",{});var VCt=s(_be);Igr=r(VCt,"segformer"),VCt.forEach(t),Ngr=r(aBe," \u2014 "),xQ=n(aBe,"A",{href:!0});var XCt=s(xQ);qgr=r(XCt,"SegformerForSemanticSegmentation"),XCt.forEach(t),jgr=r(aBe," (SegFormer model)"),aBe.forEach(t),gA.forEach(t),Dgr=i(Aa),yT=n(Aa,"P",{});var nBe=s(yT);Ggr=r(nBe,"The model is set in evaluation mode by default using "),bbe=n(nBe,"CODE",{});var zCt=s(bbe);Ogr=r(zCt,"model.eval()"),zCt.forEach(t),Vgr=r(nBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vbe=n(nBe,"CODE",{});var WCt=s(vbe);Xgr=r(WCt,"model.train()"),WCt.forEach(t),nBe.forEach(t),zgr=i(Aa),T(xT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),tOe=i(f),Jd=n(f,"H2",{class:!0});var fXe=s(Jd);$T=n(fXe,"A",{id:!0,class:!0,href:!0});var QCt=s($T);Fbe=n(QCt,"SPAN",{});var HCt=s(Fbe);T(e9.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),Wgr=i(fXe),Tbe=n(fXe,"SPAN",{});var UCt=s(Tbe);Qgr=r(UCt,"AutoModelForInstanceSegmentation"),UCt.forEach(t),fXe.forEach(t),aOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(o9.$$.fragment,Tl),Hgr=i(Tl),Yd=n(Tl,"P",{});var Xoe=s(Yd);Ugr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$Q=n(Xoe,"A",{href:!0});var JCt=s($Q);Jgr=r(JCt,"from_pretrained()"),JCt.forEach(t),Ygr=r(Xoe," class method or the "),kQ=n(Xoe,"A",{href:!0});var YCt=s(kQ);Kgr=r(YCt,"from_config()"),YCt.forEach(t),Zgr=r(Xoe,` class
method.`),Xoe.forEach(t),ehr=i(Tl),r9=n(Tl,"P",{});var mXe=s(r9);ohr=r(mXe,"This class cannot be instantiated directly using "),Mbe=n(mXe,"CODE",{});var KCt=s(Mbe);rhr=r(KCt,"__init__()"),KCt.forEach(t),thr=r(mXe," (throws an error)."),mXe.forEach(t),ahr=i(Tl),xt=n(Tl,"DIV",{class:!0});var hA=s(xt);T(t9.$$.fragment,hA),nhr=i(hA),Ebe=n(hA,"P",{});var ZCt=s(Ebe);shr=r(ZCt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ZCt.forEach(t),lhr=i(hA),Kd=n(hA,"P",{});var zoe=s(Kd);ihr=r(zoe,`Note:
Loading a model from its configuration file does `),Cbe=n(zoe,"STRONG",{});var e5t=s(Cbe);dhr=r(e5t,"not"),e5t.forEach(t),chr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(zoe,"A",{href:!0});var o5t=s(SQ);fhr=r(o5t,"from_pretrained()"),o5t.forEach(t),mhr=r(zoe," to load the model weights."),zoe.forEach(t),ghr=i(hA),T(kT.$$.fragment,hA),hA.forEach(t),hhr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(a9.$$.fragment,La),phr=i(La),wbe=n(La,"P",{});var r5t=s(wbe);uhr=r(r5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),r5t.forEach(t),_hr=i(La),rn=n(La,"P",{});var pA=s(rn);bhr=r(pA,"The model class to instantiate is selected based on the "),Abe=n(pA,"CODE",{});var t5t=s(Abe);vhr=r(t5t,"model_type"),t5t.forEach(t),Fhr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(pA,"CODE",{});var a5t=s(Lbe);Thr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),Mhr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(pA,"CODE",{});var n5t=s(ybe);Ehr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Chr=r(pA,":"),pA.forEach(t),whr=i(La),xbe=n(La,"UL",{});var s5t=s(xbe);ST=n(s5t,"LI",{});var sBe=s(ST);$be=n(sBe,"STRONG",{});var l5t=s($be);Ahr=r(l5t,"maskformer"),l5t.forEach(t),Lhr=r(sBe," \u2014 "),RQ=n(sBe,"A",{href:!0});var i5t=s(RQ);yhr=r(i5t,"MaskFormerForInstanceSegmentation"),i5t.forEach(t),xhr=r(sBe," (MaskFormer model)"),sBe.forEach(t),s5t.forEach(t),$hr=i(La),RT=n(La,"P",{});var lBe=s(RT);khr=r(lBe,"The model is set in evaluation mode by default using "),kbe=n(lBe,"CODE",{});var d5t=s(kbe);Shr=r(d5t,"model.eval()"),d5t.forEach(t),Rhr=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(lBe,"CODE",{});var c5t=s(Sbe);Phr=r(c5t,"model.train()"),c5t.forEach(t),lBe.forEach(t),Bhr=i(La),T(PT.$$.fragment,La),La.forEach(t),Tl.forEach(t),nOe=i(f),Zd=n(f,"H2",{class:!0});var gXe=s(Zd);BT=n(gXe,"A",{id:!0,class:!0,href:!0});var f5t=s(BT);Rbe=n(f5t,"SPAN",{});var m5t=s(Rbe);T(n9.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),Ihr=i(gXe),Pbe=n(gXe,"SPAN",{});var g5t=s(Pbe);Nhr=r(g5t,"TFAutoModel"),g5t.forEach(t),gXe.forEach(t),sOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(s9.$$.fragment,Ml),qhr=i(Ml),ec=n(Ml,"P",{});var Woe=s(ec);jhr=r(Woe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PQ=n(Woe,"A",{href:!0});var h5t=s(PQ);Dhr=r(h5t,"from_pretrained()"),h5t.forEach(t),Ghr=r(Woe," class method or the "),BQ=n(Woe,"A",{href:!0});var p5t=s(BQ);Ohr=r(p5t,"from_config()"),p5t.forEach(t),Vhr=r(Woe,` class
method.`),Woe.forEach(t),Xhr=i(Ml),l9=n(Ml,"P",{});var hXe=s(l9);zhr=r(hXe,"This class cannot be instantiated directly using "),Bbe=n(hXe,"CODE",{});var u5t=s(Bbe);Whr=r(u5t,"__init__()"),u5t.forEach(t),Qhr=r(hXe," (throws an error)."),hXe.forEach(t),Hhr=i(Ml),$t=n(Ml,"DIV",{class:!0});var uA=s($t);T(i9.$$.fragment,uA),Uhr=i(uA),Ibe=n(uA,"P",{});var _5t=s(Ibe);Jhr=r(_5t,"Instantiates one of the base model classes of the library from a configuration."),_5t.forEach(t),Yhr=i(uA),oc=n(uA,"P",{});var Qoe=s(oc);Khr=r(Qoe,`Note:
Loading a model from its configuration file does `),Nbe=n(Qoe,"STRONG",{});var b5t=s(Nbe);Zhr=r(b5t,"not"),b5t.forEach(t),epr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Qoe,"A",{href:!0});var v5t=s(IQ);opr=r(v5t,"from_pretrained()"),v5t.forEach(t),rpr=r(Qoe," to load the model weights."),Qoe.forEach(t),tpr=i(uA),T(IT.$$.fragment,uA),uA.forEach(t),apr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(d9.$$.fragment,El),npr=i(El),qbe=n(El,"P",{});var F5t=s(qbe);spr=r(F5t,"Instantiate one of the base model classes of the library from a pretrained model."),F5t.forEach(t),lpr=i(El),tn=n(El,"P",{});var _A=s(tn);ipr=r(_A,"The model class to instantiate is selected based on the "),jbe=n(_A,"CODE",{});var T5t=s(jbe);dpr=r(T5t,"model_type"),T5t.forEach(t),cpr=r(_A,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(_A,"CODE",{});var M5t=s(Dbe);fpr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),mpr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(_A,"CODE",{});var E5t=s(Gbe);gpr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),hpr=r(_A,":"),_A.forEach(t),ppr=i(El),q=n(El,"UL",{});var D=s(q);NT=n(D,"LI",{});var iBe=s(NT);Obe=n(iBe,"STRONG",{});var C5t=s(Obe);upr=r(C5t,"albert"),C5t.forEach(t),_pr=r(iBe," \u2014 "),NQ=n(iBe,"A",{href:!0});var w5t=s(NQ);bpr=r(w5t,"TFAlbertModel"),w5t.forEach(t),vpr=r(iBe," (ALBERT model)"),iBe.forEach(t),Fpr=i(D),qT=n(D,"LI",{});var dBe=s(qT);Vbe=n(dBe,"STRONG",{});var A5t=s(Vbe);Tpr=r(A5t,"bart"),A5t.forEach(t),Mpr=r(dBe," \u2014 "),qQ=n(dBe,"A",{href:!0});var L5t=s(qQ);Epr=r(L5t,"TFBartModel"),L5t.forEach(t),Cpr=r(dBe," (BART model)"),dBe.forEach(t),wpr=i(D),jT=n(D,"LI",{});var cBe=s(jT);Xbe=n(cBe,"STRONG",{});var y5t=s(Xbe);Apr=r(y5t,"bert"),y5t.forEach(t),Lpr=r(cBe," \u2014 "),jQ=n(cBe,"A",{href:!0});var x5t=s(jQ);ypr=r(x5t,"TFBertModel"),x5t.forEach(t),xpr=r(cBe," (BERT model)"),cBe.forEach(t),$pr=i(D),DT=n(D,"LI",{});var fBe=s(DT);zbe=n(fBe,"STRONG",{});var $5t=s(zbe);kpr=r($5t,"blenderbot"),$5t.forEach(t),Spr=r(fBe," \u2014 "),DQ=n(fBe,"A",{href:!0});var k5t=s(DQ);Rpr=r(k5t,"TFBlenderbotModel"),k5t.forEach(t),Ppr=r(fBe," (Blenderbot model)"),fBe.forEach(t),Bpr=i(D),GT=n(D,"LI",{});var mBe=s(GT);Wbe=n(mBe,"STRONG",{});var S5t=s(Wbe);Ipr=r(S5t,"blenderbot-small"),S5t.forEach(t),Npr=r(mBe," \u2014 "),GQ=n(mBe,"A",{href:!0});var R5t=s(GQ);qpr=r(R5t,"TFBlenderbotSmallModel"),R5t.forEach(t),jpr=r(mBe," (BlenderbotSmall model)"),mBe.forEach(t),Dpr=i(D),OT=n(D,"LI",{});var gBe=s(OT);Qbe=n(gBe,"STRONG",{});var P5t=s(Qbe);Gpr=r(P5t,"camembert"),P5t.forEach(t),Opr=r(gBe," \u2014 "),OQ=n(gBe,"A",{href:!0});var B5t=s(OQ);Vpr=r(B5t,"TFCamembertModel"),B5t.forEach(t),Xpr=r(gBe," (CamemBERT model)"),gBe.forEach(t),zpr=i(D),VT=n(D,"LI",{});var hBe=s(VT);Hbe=n(hBe,"STRONG",{});var I5t=s(Hbe);Wpr=r(I5t,"clip"),I5t.forEach(t),Qpr=r(hBe," \u2014 "),VQ=n(hBe,"A",{href:!0});var N5t=s(VQ);Hpr=r(N5t,"TFCLIPModel"),N5t.forEach(t),Upr=r(hBe," (CLIP model)"),hBe.forEach(t),Jpr=i(D),XT=n(D,"LI",{});var pBe=s(XT);Ube=n(pBe,"STRONG",{});var q5t=s(Ube);Ypr=r(q5t,"convbert"),q5t.forEach(t),Kpr=r(pBe," \u2014 "),XQ=n(pBe,"A",{href:!0});var j5t=s(XQ);Zpr=r(j5t,"TFConvBertModel"),j5t.forEach(t),eur=r(pBe," (ConvBERT model)"),pBe.forEach(t),our=i(D),zT=n(D,"LI",{});var uBe=s(zT);Jbe=n(uBe,"STRONG",{});var D5t=s(Jbe);rur=r(D5t,"convnext"),D5t.forEach(t),tur=r(uBe," \u2014 "),zQ=n(uBe,"A",{href:!0});var G5t=s(zQ);aur=r(G5t,"TFConvNextModel"),G5t.forEach(t),nur=r(uBe," (ConvNeXT model)"),uBe.forEach(t),sur=i(D),WT=n(D,"LI",{});var _Be=s(WT);Ybe=n(_Be,"STRONG",{});var O5t=s(Ybe);lur=r(O5t,"ctrl"),O5t.forEach(t),iur=r(_Be," \u2014 "),WQ=n(_Be,"A",{href:!0});var V5t=s(WQ);dur=r(V5t,"TFCTRLModel"),V5t.forEach(t),cur=r(_Be," (CTRL model)"),_Be.forEach(t),fur=i(D),QT=n(D,"LI",{});var bBe=s(QT);Kbe=n(bBe,"STRONG",{});var X5t=s(Kbe);mur=r(X5t,"data2vec-vision"),X5t.forEach(t),gur=r(bBe," \u2014 "),QQ=n(bBe,"A",{href:!0});var z5t=s(QQ);hur=r(z5t,"TFData2VecVisionModel"),z5t.forEach(t),pur=r(bBe," (Data2VecVision model)"),bBe.forEach(t),uur=i(D),HT=n(D,"LI",{});var vBe=s(HT);Zbe=n(vBe,"STRONG",{});var W5t=s(Zbe);_ur=r(W5t,"deberta"),W5t.forEach(t),bur=r(vBe," \u2014 "),HQ=n(vBe,"A",{href:!0});var Q5t=s(HQ);vur=r(Q5t,"TFDebertaModel"),Q5t.forEach(t),Fur=r(vBe," (DeBERTa model)"),vBe.forEach(t),Tur=i(D),UT=n(D,"LI",{});var FBe=s(UT);eve=n(FBe,"STRONG",{});var H5t=s(eve);Mur=r(H5t,"deberta-v2"),H5t.forEach(t),Eur=r(FBe," \u2014 "),UQ=n(FBe,"A",{href:!0});var U5t=s(UQ);Cur=r(U5t,"TFDebertaV2Model"),U5t.forEach(t),wur=r(FBe," (DeBERTa-v2 model)"),FBe.forEach(t),Aur=i(D),JT=n(D,"LI",{});var TBe=s(JT);ove=n(TBe,"STRONG",{});var J5t=s(ove);Lur=r(J5t,"distilbert"),J5t.forEach(t),yur=r(TBe," \u2014 "),JQ=n(TBe,"A",{href:!0});var Y5t=s(JQ);xur=r(Y5t,"TFDistilBertModel"),Y5t.forEach(t),$ur=r(TBe," (DistilBERT model)"),TBe.forEach(t),kur=i(D),YT=n(D,"LI",{});var MBe=s(YT);rve=n(MBe,"STRONG",{});var K5t=s(rve);Sur=r(K5t,"dpr"),K5t.forEach(t),Rur=r(MBe," \u2014 "),YQ=n(MBe,"A",{href:!0});var Z5t=s(YQ);Pur=r(Z5t,"TFDPRQuestionEncoder"),Z5t.forEach(t),Bur=r(MBe," (DPR model)"),MBe.forEach(t),Iur=i(D),KT=n(D,"LI",{});var EBe=s(KT);tve=n(EBe,"STRONG",{});var e3t=s(tve);Nur=r(e3t,"electra"),e3t.forEach(t),qur=r(EBe," \u2014 "),KQ=n(EBe,"A",{href:!0});var o3t=s(KQ);jur=r(o3t,"TFElectraModel"),o3t.forEach(t),Dur=r(EBe," (ELECTRA model)"),EBe.forEach(t),Gur=i(D),ZT=n(D,"LI",{});var CBe=s(ZT);ave=n(CBe,"STRONG",{});var r3t=s(ave);Our=r(r3t,"flaubert"),r3t.forEach(t),Vur=r(CBe," \u2014 "),ZQ=n(CBe,"A",{href:!0});var t3t=s(ZQ);Xur=r(t3t,"TFFlaubertModel"),t3t.forEach(t),zur=r(CBe," (FlauBERT model)"),CBe.forEach(t),Wur=i(D),Xs=n(D,"LI",{});var Xk=s(Xs);nve=n(Xk,"STRONG",{});var a3t=s(nve);Qur=r(a3t,"funnel"),a3t.forEach(t),Hur=r(Xk," \u2014 "),eH=n(Xk,"A",{href:!0});var n3t=s(eH);Uur=r(n3t,"TFFunnelModel"),n3t.forEach(t),Jur=r(Xk," or "),oH=n(Xk,"A",{href:!0});var s3t=s(oH);Yur=r(s3t,"TFFunnelBaseModel"),s3t.forEach(t),Kur=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),Zur=i(D),eM=n(D,"LI",{});var wBe=s(eM);sve=n(wBe,"STRONG",{});var l3t=s(sve);e_r=r(l3t,"gpt2"),l3t.forEach(t),o_r=r(wBe," \u2014 "),rH=n(wBe,"A",{href:!0});var i3t=s(rH);r_r=r(i3t,"TFGPT2Model"),i3t.forEach(t),t_r=r(wBe," (OpenAI GPT-2 model)"),wBe.forEach(t),a_r=i(D),oM=n(D,"LI",{});var ABe=s(oM);lve=n(ABe,"STRONG",{});var d3t=s(lve);n_r=r(d3t,"gptj"),d3t.forEach(t),s_r=r(ABe," \u2014 "),tH=n(ABe,"A",{href:!0});var c3t=s(tH);l_r=r(c3t,"TFGPTJModel"),c3t.forEach(t),i_r=r(ABe," (GPT-J model)"),ABe.forEach(t),d_r=i(D),rM=n(D,"LI",{});var LBe=s(rM);ive=n(LBe,"STRONG",{});var f3t=s(ive);c_r=r(f3t,"hubert"),f3t.forEach(t),f_r=r(LBe," \u2014 "),aH=n(LBe,"A",{href:!0});var m3t=s(aH);m_r=r(m3t,"TFHubertModel"),m3t.forEach(t),g_r=r(LBe," (Hubert model)"),LBe.forEach(t),h_r=i(D),tM=n(D,"LI",{});var yBe=s(tM);dve=n(yBe,"STRONG",{});var g3t=s(dve);p_r=r(g3t,"layoutlm"),g3t.forEach(t),u_r=r(yBe," \u2014 "),nH=n(yBe,"A",{href:!0});var h3t=s(nH);__r=r(h3t,"TFLayoutLMModel"),h3t.forEach(t),b_r=r(yBe," (LayoutLM model)"),yBe.forEach(t),v_r=i(D),aM=n(D,"LI",{});var xBe=s(aM);cve=n(xBe,"STRONG",{});var p3t=s(cve);F_r=r(p3t,"led"),p3t.forEach(t),T_r=r(xBe," \u2014 "),sH=n(xBe,"A",{href:!0});var u3t=s(sH);M_r=r(u3t,"TFLEDModel"),u3t.forEach(t),E_r=r(xBe," (LED model)"),xBe.forEach(t),C_r=i(D),nM=n(D,"LI",{});var $Be=s(nM);fve=n($Be,"STRONG",{});var _3t=s(fve);w_r=r(_3t,"longformer"),_3t.forEach(t),A_r=r($Be," \u2014 "),lH=n($Be,"A",{href:!0});var b3t=s(lH);L_r=r(b3t,"TFLongformerModel"),b3t.forEach(t),y_r=r($Be," (Longformer model)"),$Be.forEach(t),x_r=i(D),sM=n(D,"LI",{});var kBe=s(sM);mve=n(kBe,"STRONG",{});var v3t=s(mve);$_r=r(v3t,"lxmert"),v3t.forEach(t),k_r=r(kBe," \u2014 "),iH=n(kBe,"A",{href:!0});var F3t=s(iH);S_r=r(F3t,"TFLxmertModel"),F3t.forEach(t),R_r=r(kBe," (LXMERT model)"),kBe.forEach(t),P_r=i(D),lM=n(D,"LI",{});var SBe=s(lM);gve=n(SBe,"STRONG",{});var T3t=s(gve);B_r=r(T3t,"marian"),T3t.forEach(t),I_r=r(SBe," \u2014 "),dH=n(SBe,"A",{href:!0});var M3t=s(dH);N_r=r(M3t,"TFMarianModel"),M3t.forEach(t),q_r=r(SBe," (Marian model)"),SBe.forEach(t),j_r=i(D),iM=n(D,"LI",{});var RBe=s(iM);hve=n(RBe,"STRONG",{});var E3t=s(hve);D_r=r(E3t,"mbart"),E3t.forEach(t),G_r=r(RBe," \u2014 "),cH=n(RBe,"A",{href:!0});var C3t=s(cH);O_r=r(C3t,"TFMBartModel"),C3t.forEach(t),V_r=r(RBe," (mBART model)"),RBe.forEach(t),X_r=i(D),dM=n(D,"LI",{});var PBe=s(dM);pve=n(PBe,"STRONG",{});var w3t=s(pve);z_r=r(w3t,"mobilebert"),w3t.forEach(t),W_r=r(PBe," \u2014 "),fH=n(PBe,"A",{href:!0});var A3t=s(fH);Q_r=r(A3t,"TFMobileBertModel"),A3t.forEach(t),H_r=r(PBe," (MobileBERT model)"),PBe.forEach(t),U_r=i(D),cM=n(D,"LI",{});var BBe=s(cM);uve=n(BBe,"STRONG",{});var L3t=s(uve);J_r=r(L3t,"mpnet"),L3t.forEach(t),Y_r=r(BBe," \u2014 "),mH=n(BBe,"A",{href:!0});var y3t=s(mH);K_r=r(y3t,"TFMPNetModel"),y3t.forEach(t),Z_r=r(BBe," (MPNet model)"),BBe.forEach(t),e1r=i(D),fM=n(D,"LI",{});var IBe=s(fM);_ve=n(IBe,"STRONG",{});var x3t=s(_ve);o1r=r(x3t,"mt5"),x3t.forEach(t),r1r=r(IBe," \u2014 "),gH=n(IBe,"A",{href:!0});var $3t=s(gH);t1r=r($3t,"TFMT5Model"),$3t.forEach(t),a1r=r(IBe," (MT5 model)"),IBe.forEach(t),n1r=i(D),mM=n(D,"LI",{});var NBe=s(mM);bve=n(NBe,"STRONG",{});var k3t=s(bve);s1r=r(k3t,"openai-gpt"),k3t.forEach(t),l1r=r(NBe," \u2014 "),hH=n(NBe,"A",{href:!0});var S3t=s(hH);i1r=r(S3t,"TFOpenAIGPTModel"),S3t.forEach(t),d1r=r(NBe," (OpenAI GPT model)"),NBe.forEach(t),c1r=i(D),gM=n(D,"LI",{});var qBe=s(gM);vve=n(qBe,"STRONG",{});var R3t=s(vve);f1r=r(R3t,"opt"),R3t.forEach(t),m1r=r(qBe," \u2014 "),pH=n(qBe,"A",{href:!0});var P3t=s(pH);g1r=r(P3t,"TFOPTModel"),P3t.forEach(t),h1r=r(qBe," (OPT model)"),qBe.forEach(t),p1r=i(D),hM=n(D,"LI",{});var jBe=s(hM);Fve=n(jBe,"STRONG",{});var B3t=s(Fve);u1r=r(B3t,"pegasus"),B3t.forEach(t),_1r=r(jBe," \u2014 "),uH=n(jBe,"A",{href:!0});var I3t=s(uH);b1r=r(I3t,"TFPegasusModel"),I3t.forEach(t),v1r=r(jBe," (Pegasus model)"),jBe.forEach(t),F1r=i(D),pM=n(D,"LI",{});var DBe=s(pM);Tve=n(DBe,"STRONG",{});var N3t=s(Tve);T1r=r(N3t,"rembert"),N3t.forEach(t),M1r=r(DBe," \u2014 "),_H=n(DBe,"A",{href:!0});var q3t=s(_H);E1r=r(q3t,"TFRemBertModel"),q3t.forEach(t),C1r=r(DBe," (RemBERT model)"),DBe.forEach(t),w1r=i(D),uM=n(D,"LI",{});var GBe=s(uM);Mve=n(GBe,"STRONG",{});var j3t=s(Mve);A1r=r(j3t,"roberta"),j3t.forEach(t),L1r=r(GBe," \u2014 "),bH=n(GBe,"A",{href:!0});var D3t=s(bH);y1r=r(D3t,"TFRobertaModel"),D3t.forEach(t),x1r=r(GBe," (RoBERTa model)"),GBe.forEach(t),$1r=i(D),_M=n(D,"LI",{});var OBe=s(_M);Eve=n(OBe,"STRONG",{});var G3t=s(Eve);k1r=r(G3t,"roformer"),G3t.forEach(t),S1r=r(OBe," \u2014 "),vH=n(OBe,"A",{href:!0});var O3t=s(vH);R1r=r(O3t,"TFRoFormerModel"),O3t.forEach(t),P1r=r(OBe," (RoFormer model)"),OBe.forEach(t),B1r=i(D),bM=n(D,"LI",{});var VBe=s(bM);Cve=n(VBe,"STRONG",{});var V3t=s(Cve);I1r=r(V3t,"speech_to_text"),V3t.forEach(t),N1r=r(VBe," \u2014 "),FH=n(VBe,"A",{href:!0});var X3t=s(FH);q1r=r(X3t,"TFSpeech2TextModel"),X3t.forEach(t),j1r=r(VBe," (Speech2Text model)"),VBe.forEach(t),D1r=i(D),vM=n(D,"LI",{});var XBe=s(vM);wve=n(XBe,"STRONG",{});var z3t=s(wve);G1r=r(z3t,"swin"),z3t.forEach(t),O1r=r(XBe," \u2014 "),TH=n(XBe,"A",{href:!0});var W3t=s(TH);V1r=r(W3t,"TFSwinModel"),W3t.forEach(t),X1r=r(XBe," (Swin Transformer model)"),XBe.forEach(t),z1r=i(D),FM=n(D,"LI",{});var zBe=s(FM);Ave=n(zBe,"STRONG",{});var Q3t=s(Ave);W1r=r(Q3t,"t5"),Q3t.forEach(t),Q1r=r(zBe," \u2014 "),MH=n(zBe,"A",{href:!0});var H3t=s(MH);H1r=r(H3t,"TFT5Model"),H3t.forEach(t),U1r=r(zBe," (T5 model)"),zBe.forEach(t),J1r=i(D),TM=n(D,"LI",{});var WBe=s(TM);Lve=n(WBe,"STRONG",{});var U3t=s(Lve);Y1r=r(U3t,"tapas"),U3t.forEach(t),K1r=r(WBe," \u2014 "),EH=n(WBe,"A",{href:!0});var J3t=s(EH);Z1r=r(J3t,"TFTapasModel"),J3t.forEach(t),e7r=r(WBe," (TAPAS model)"),WBe.forEach(t),o7r=i(D),MM=n(D,"LI",{});var QBe=s(MM);yve=n(QBe,"STRONG",{});var Y3t=s(yve);r7r=r(Y3t,"transfo-xl"),Y3t.forEach(t),t7r=r(QBe," \u2014 "),CH=n(QBe,"A",{href:!0});var K3t=s(CH);a7r=r(K3t,"TFTransfoXLModel"),K3t.forEach(t),n7r=r(QBe," (Transformer-XL model)"),QBe.forEach(t),s7r=i(D),EM=n(D,"LI",{});var HBe=s(EM);xve=n(HBe,"STRONG",{});var Z3t=s(xve);l7r=r(Z3t,"vit"),Z3t.forEach(t),i7r=r(HBe," \u2014 "),wH=n(HBe,"A",{href:!0});var e0t=s(wH);d7r=r(e0t,"TFViTModel"),e0t.forEach(t),c7r=r(HBe," (ViT model)"),HBe.forEach(t),f7r=i(D),CM=n(D,"LI",{});var UBe=s(CM);$ve=n(UBe,"STRONG",{});var o0t=s($ve);m7r=r(o0t,"vit_mae"),o0t.forEach(t),g7r=r(UBe," \u2014 "),AH=n(UBe,"A",{href:!0});var r0t=s(AH);h7r=r(r0t,"TFViTMAEModel"),r0t.forEach(t),p7r=r(UBe," (ViTMAE model)"),UBe.forEach(t),u7r=i(D),wM=n(D,"LI",{});var JBe=s(wM);kve=n(JBe,"STRONG",{});var t0t=s(kve);_7r=r(t0t,"wav2vec2"),t0t.forEach(t),b7r=r(JBe," \u2014 "),LH=n(JBe,"A",{href:!0});var a0t=s(LH);v7r=r(a0t,"TFWav2Vec2Model"),a0t.forEach(t),F7r=r(JBe," (Wav2Vec2 model)"),JBe.forEach(t),T7r=i(D),AM=n(D,"LI",{});var YBe=s(AM);Sve=n(YBe,"STRONG",{});var n0t=s(Sve);M7r=r(n0t,"xlm"),n0t.forEach(t),E7r=r(YBe," \u2014 "),yH=n(YBe,"A",{href:!0});var s0t=s(yH);C7r=r(s0t,"TFXLMModel"),s0t.forEach(t),w7r=r(YBe," (XLM model)"),YBe.forEach(t),A7r=i(D),LM=n(D,"LI",{});var KBe=s(LM);Rve=n(KBe,"STRONG",{});var l0t=s(Rve);L7r=r(l0t,"xlm-roberta"),l0t.forEach(t),y7r=r(KBe," \u2014 "),xH=n(KBe,"A",{href:!0});var i0t=s(xH);x7r=r(i0t,"TFXLMRobertaModel"),i0t.forEach(t),$7r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),k7r=i(D),yM=n(D,"LI",{});var ZBe=s(yM);Pve=n(ZBe,"STRONG",{});var d0t=s(Pve);S7r=r(d0t,"xlnet"),d0t.forEach(t),R7r=r(ZBe," \u2014 "),$H=n(ZBe,"A",{href:!0});var c0t=s($H);P7r=r(c0t,"TFXLNetModel"),c0t.forEach(t),B7r=r(ZBe," (XLNet model)"),ZBe.forEach(t),D.forEach(t),I7r=i(El),T(xM.$$.fragment,El),El.forEach(t),Ml.forEach(t),lOe=i(f),rc=n(f,"H2",{class:!0});var pXe=s(rc);$M=n(pXe,"A",{id:!0,class:!0,href:!0});var f0t=s($M);Bve=n(f0t,"SPAN",{});var m0t=s(Bve);T(c9.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),N7r=i(pXe),Ive=n(pXe,"SPAN",{});var g0t=s(Ive);q7r=r(g0t,"TFAutoModelForPreTraining"),g0t.forEach(t),pXe.forEach(t),iOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(f9.$$.fragment,Cl),j7r=i(Cl),tc=n(Cl,"P",{});var Hoe=s(tc);D7r=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kH=n(Hoe,"A",{href:!0});var h0t=s(kH);G7r=r(h0t,"from_pretrained()"),h0t.forEach(t),O7r=r(Hoe," class method or the "),SH=n(Hoe,"A",{href:!0});var p0t=s(SH);V7r=r(p0t,"from_config()"),p0t.forEach(t),X7r=r(Hoe,` class
method.`),Hoe.forEach(t),z7r=i(Cl),m9=n(Cl,"P",{});var uXe=s(m9);W7r=r(uXe,"This class cannot be instantiated directly using "),Nve=n(uXe,"CODE",{});var u0t=s(Nve);Q7r=r(u0t,"__init__()"),u0t.forEach(t),H7r=r(uXe," (throws an error)."),uXe.forEach(t),U7r=i(Cl),kt=n(Cl,"DIV",{class:!0});var bA=s(kt);T(g9.$$.fragment,bA),J7r=i(bA),qve=n(bA,"P",{});var _0t=s(qve);Y7r=r(_0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_0t.forEach(t),K7r=i(bA),ac=n(bA,"P",{});var Uoe=s(ac);Z7r=r(Uoe,`Note:
Loading a model from its configuration file does `),jve=n(Uoe,"STRONG",{});var b0t=s(jve);e2r=r(b0t,"not"),b0t.forEach(t),o2r=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Uoe,"A",{href:!0});var v0t=s(RH);r2r=r(v0t,"from_pretrained()"),v0t.forEach(t),t2r=r(Uoe," to load the model weights."),Uoe.forEach(t),a2r=i(bA),T(kM.$$.fragment,bA),bA.forEach(t),n2r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(h9.$$.fragment,wl),s2r=i(wl),Dve=n(wl,"P",{});var F0t=s(Dve);l2r=r(F0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F0t.forEach(t),i2r=i(wl),an=n(wl,"P",{});var vA=s(an);d2r=r(vA,"The model class to instantiate is selected based on the "),Gve=n(vA,"CODE",{});var T0t=s(Gve);c2r=r(T0t,"model_type"),T0t.forEach(t),f2r=r(vA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(vA,"CODE",{});var M0t=s(Ove);m2r=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),g2r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(vA,"CODE",{});var E0t=s(Vve);h2r=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),p2r=r(vA,":"),vA.forEach(t),u2r=i(wl),se=n(wl,"UL",{});var le=s(se);SM=n(le,"LI",{});var eIe=s(SM);Xve=n(eIe,"STRONG",{});var C0t=s(Xve);_2r=r(C0t,"albert"),C0t.forEach(t),b2r=r(eIe," \u2014 "),PH=n(eIe,"A",{href:!0});var w0t=s(PH);v2r=r(w0t,"TFAlbertForPreTraining"),w0t.forEach(t),F2r=r(eIe," (ALBERT model)"),eIe.forEach(t),T2r=i(le),RM=n(le,"LI",{});var oIe=s(RM);zve=n(oIe,"STRONG",{});var A0t=s(zve);M2r=r(A0t,"bart"),A0t.forEach(t),E2r=r(oIe," \u2014 "),BH=n(oIe,"A",{href:!0});var L0t=s(BH);C2r=r(L0t,"TFBartForConditionalGeneration"),L0t.forEach(t),w2r=r(oIe," (BART model)"),oIe.forEach(t),A2r=i(le),PM=n(le,"LI",{});var rIe=s(PM);Wve=n(rIe,"STRONG",{});var y0t=s(Wve);L2r=r(y0t,"bert"),y0t.forEach(t),y2r=r(rIe," \u2014 "),IH=n(rIe,"A",{href:!0});var x0t=s(IH);x2r=r(x0t,"TFBertForPreTraining"),x0t.forEach(t),$2r=r(rIe," (BERT model)"),rIe.forEach(t),k2r=i(le),BM=n(le,"LI",{});var tIe=s(BM);Qve=n(tIe,"STRONG",{});var $0t=s(Qve);S2r=r($0t,"camembert"),$0t.forEach(t),R2r=r(tIe," \u2014 "),NH=n(tIe,"A",{href:!0});var k0t=s(NH);P2r=r(k0t,"TFCamembertForMaskedLM"),k0t.forEach(t),B2r=r(tIe," (CamemBERT model)"),tIe.forEach(t),I2r=i(le),IM=n(le,"LI",{});var aIe=s(IM);Hve=n(aIe,"STRONG",{});var S0t=s(Hve);N2r=r(S0t,"ctrl"),S0t.forEach(t),q2r=r(aIe," \u2014 "),qH=n(aIe,"A",{href:!0});var R0t=s(qH);j2r=r(R0t,"TFCTRLLMHeadModel"),R0t.forEach(t),D2r=r(aIe," (CTRL model)"),aIe.forEach(t),G2r=i(le),NM=n(le,"LI",{});var nIe=s(NM);Uve=n(nIe,"STRONG",{});var P0t=s(Uve);O2r=r(P0t,"distilbert"),P0t.forEach(t),V2r=r(nIe," \u2014 "),jH=n(nIe,"A",{href:!0});var B0t=s(jH);X2r=r(B0t,"TFDistilBertForMaskedLM"),B0t.forEach(t),z2r=r(nIe," (DistilBERT model)"),nIe.forEach(t),W2r=i(le),qM=n(le,"LI",{});var sIe=s(qM);Jve=n(sIe,"STRONG",{});var I0t=s(Jve);Q2r=r(I0t,"electra"),I0t.forEach(t),H2r=r(sIe," \u2014 "),DH=n(sIe,"A",{href:!0});var N0t=s(DH);U2r=r(N0t,"TFElectraForPreTraining"),N0t.forEach(t),J2r=r(sIe," (ELECTRA model)"),sIe.forEach(t),Y2r=i(le),jM=n(le,"LI",{});var lIe=s(jM);Yve=n(lIe,"STRONG",{});var q0t=s(Yve);K2r=r(q0t,"flaubert"),q0t.forEach(t),Z2r=r(lIe," \u2014 "),GH=n(lIe,"A",{href:!0});var j0t=s(GH);ebr=r(j0t,"TFFlaubertWithLMHeadModel"),j0t.forEach(t),obr=r(lIe," (FlauBERT model)"),lIe.forEach(t),rbr=i(le),DM=n(le,"LI",{});var iIe=s(DM);Kve=n(iIe,"STRONG",{});var D0t=s(Kve);tbr=r(D0t,"funnel"),D0t.forEach(t),abr=r(iIe," \u2014 "),OH=n(iIe,"A",{href:!0});var G0t=s(OH);nbr=r(G0t,"TFFunnelForPreTraining"),G0t.forEach(t),sbr=r(iIe," (Funnel Transformer model)"),iIe.forEach(t),lbr=i(le),GM=n(le,"LI",{});var dIe=s(GM);Zve=n(dIe,"STRONG",{});var O0t=s(Zve);ibr=r(O0t,"gpt2"),O0t.forEach(t),dbr=r(dIe," \u2014 "),VH=n(dIe,"A",{href:!0});var V0t=s(VH);cbr=r(V0t,"TFGPT2LMHeadModel"),V0t.forEach(t),fbr=r(dIe," (OpenAI GPT-2 model)"),dIe.forEach(t),mbr=i(le),OM=n(le,"LI",{});var cIe=s(OM);eFe=n(cIe,"STRONG",{});var X0t=s(eFe);gbr=r(X0t,"layoutlm"),X0t.forEach(t),hbr=r(cIe," \u2014 "),XH=n(cIe,"A",{href:!0});var z0t=s(XH);pbr=r(z0t,"TFLayoutLMForMaskedLM"),z0t.forEach(t),ubr=r(cIe," (LayoutLM model)"),cIe.forEach(t),_br=i(le),VM=n(le,"LI",{});var fIe=s(VM);oFe=n(fIe,"STRONG",{});var W0t=s(oFe);bbr=r(W0t,"lxmert"),W0t.forEach(t),vbr=r(fIe," \u2014 "),zH=n(fIe,"A",{href:!0});var Q0t=s(zH);Fbr=r(Q0t,"TFLxmertForPreTraining"),Q0t.forEach(t),Tbr=r(fIe," (LXMERT model)"),fIe.forEach(t),Mbr=i(le),XM=n(le,"LI",{});var mIe=s(XM);rFe=n(mIe,"STRONG",{});var H0t=s(rFe);Ebr=r(H0t,"mobilebert"),H0t.forEach(t),Cbr=r(mIe," \u2014 "),WH=n(mIe,"A",{href:!0});var U0t=s(WH);wbr=r(U0t,"TFMobileBertForPreTraining"),U0t.forEach(t),Abr=r(mIe," (MobileBERT model)"),mIe.forEach(t),Lbr=i(le),zM=n(le,"LI",{});var gIe=s(zM);tFe=n(gIe,"STRONG",{});var J0t=s(tFe);ybr=r(J0t,"mpnet"),J0t.forEach(t),xbr=r(gIe," \u2014 "),QH=n(gIe,"A",{href:!0});var Y0t=s(QH);$br=r(Y0t,"TFMPNetForMaskedLM"),Y0t.forEach(t),kbr=r(gIe," (MPNet model)"),gIe.forEach(t),Sbr=i(le),WM=n(le,"LI",{});var hIe=s(WM);aFe=n(hIe,"STRONG",{});var K0t=s(aFe);Rbr=r(K0t,"openai-gpt"),K0t.forEach(t),Pbr=r(hIe," \u2014 "),HH=n(hIe,"A",{href:!0});var Z0t=s(HH);Bbr=r(Z0t,"TFOpenAIGPTLMHeadModel"),Z0t.forEach(t),Ibr=r(hIe," (OpenAI GPT model)"),hIe.forEach(t),Nbr=i(le),QM=n(le,"LI",{});var pIe=s(QM);nFe=n(pIe,"STRONG",{});var ewt=s(nFe);qbr=r(ewt,"roberta"),ewt.forEach(t),jbr=r(pIe," \u2014 "),UH=n(pIe,"A",{href:!0});var owt=s(UH);Dbr=r(owt,"TFRobertaForMaskedLM"),owt.forEach(t),Gbr=r(pIe," (RoBERTa model)"),pIe.forEach(t),Obr=i(le),HM=n(le,"LI",{});var uIe=s(HM);sFe=n(uIe,"STRONG",{});var rwt=s(sFe);Vbr=r(rwt,"t5"),rwt.forEach(t),Xbr=r(uIe," \u2014 "),JH=n(uIe,"A",{href:!0});var twt=s(JH);zbr=r(twt,"TFT5ForConditionalGeneration"),twt.forEach(t),Wbr=r(uIe," (T5 model)"),uIe.forEach(t),Qbr=i(le),UM=n(le,"LI",{});var _Ie=s(UM);lFe=n(_Ie,"STRONG",{});var awt=s(lFe);Hbr=r(awt,"tapas"),awt.forEach(t),Ubr=r(_Ie," \u2014 "),YH=n(_Ie,"A",{href:!0});var nwt=s(YH);Jbr=r(nwt,"TFTapasForMaskedLM"),nwt.forEach(t),Ybr=r(_Ie," (TAPAS model)"),_Ie.forEach(t),Kbr=i(le),JM=n(le,"LI",{});var bIe=s(JM);iFe=n(bIe,"STRONG",{});var swt=s(iFe);Zbr=r(swt,"transfo-xl"),swt.forEach(t),evr=r(bIe," \u2014 "),KH=n(bIe,"A",{href:!0});var lwt=s(KH);ovr=r(lwt,"TFTransfoXLLMHeadModel"),lwt.forEach(t),rvr=r(bIe," (Transformer-XL model)"),bIe.forEach(t),tvr=i(le),YM=n(le,"LI",{});var vIe=s(YM);dFe=n(vIe,"STRONG",{});var iwt=s(dFe);avr=r(iwt,"vit_mae"),iwt.forEach(t),nvr=r(vIe," \u2014 "),ZH=n(vIe,"A",{href:!0});var dwt=s(ZH);svr=r(dwt,"TFViTMAEForPreTraining"),dwt.forEach(t),lvr=r(vIe," (ViTMAE model)"),vIe.forEach(t),ivr=i(le),KM=n(le,"LI",{});var FIe=s(KM);cFe=n(FIe,"STRONG",{});var cwt=s(cFe);dvr=r(cwt,"xlm"),cwt.forEach(t),cvr=r(FIe," \u2014 "),eU=n(FIe,"A",{href:!0});var fwt=s(eU);fvr=r(fwt,"TFXLMWithLMHeadModel"),fwt.forEach(t),mvr=r(FIe," (XLM model)"),FIe.forEach(t),gvr=i(le),ZM=n(le,"LI",{});var TIe=s(ZM);fFe=n(TIe,"STRONG",{});var mwt=s(fFe);hvr=r(mwt,"xlm-roberta"),mwt.forEach(t),pvr=r(TIe," \u2014 "),oU=n(TIe,"A",{href:!0});var gwt=s(oU);uvr=r(gwt,"TFXLMRobertaForMaskedLM"),gwt.forEach(t),_vr=r(TIe," (XLM-RoBERTa model)"),TIe.forEach(t),bvr=i(le),e4=n(le,"LI",{});var MIe=s(e4);mFe=n(MIe,"STRONG",{});var hwt=s(mFe);vvr=r(hwt,"xlnet"),hwt.forEach(t),Fvr=r(MIe," \u2014 "),rU=n(MIe,"A",{href:!0});var pwt=s(rU);Tvr=r(pwt,"TFXLNetLMHeadModel"),pwt.forEach(t),Mvr=r(MIe," (XLNet model)"),MIe.forEach(t),le.forEach(t),Evr=i(wl),T(o4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),dOe=i(f),nc=n(f,"H2",{class:!0});var _Xe=s(nc);r4=n(_Xe,"A",{id:!0,class:!0,href:!0});var uwt=s(r4);gFe=n(uwt,"SPAN",{});var _wt=s(gFe);T(p9.$$.fragment,_wt),_wt.forEach(t),uwt.forEach(t),Cvr=i(_Xe),hFe=n(_Xe,"SPAN",{});var bwt=s(hFe);wvr=r(bwt,"TFAutoModelForCausalLM"),bwt.forEach(t),_Xe.forEach(t),cOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(u9.$$.fragment,Al),Avr=i(Al),sc=n(Al,"P",{});var Joe=s(sc);Lvr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tU=n(Joe,"A",{href:!0});var vwt=s(tU);yvr=r(vwt,"from_pretrained()"),vwt.forEach(t),xvr=r(Joe," class method or the "),aU=n(Joe,"A",{href:!0});var Fwt=s(aU);$vr=r(Fwt,"from_config()"),Fwt.forEach(t),kvr=r(Joe,` class
method.`),Joe.forEach(t),Svr=i(Al),_9=n(Al,"P",{});var bXe=s(_9);Rvr=r(bXe,"This class cannot be instantiated directly using "),pFe=n(bXe,"CODE",{});var Twt=s(pFe);Pvr=r(Twt,"__init__()"),Twt.forEach(t),Bvr=r(bXe," (throws an error)."),bXe.forEach(t),Ivr=i(Al),St=n(Al,"DIV",{class:!0});var FA=s(St);T(b9.$$.fragment,FA),Nvr=i(FA),uFe=n(FA,"P",{});var Mwt=s(uFe);qvr=r(Mwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mwt.forEach(t),jvr=i(FA),lc=n(FA,"P",{});var Yoe=s(lc);Dvr=r(Yoe,`Note:
Loading a model from its configuration file does `),_Fe=n(Yoe,"STRONG",{});var Ewt=s(_Fe);Gvr=r(Ewt,"not"),Ewt.forEach(t),Ovr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Yoe,"A",{href:!0});var Cwt=s(nU);Vvr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),Xvr=r(Yoe," to load the model weights."),Yoe.forEach(t),zvr=i(FA),T(t4.$$.fragment,FA),FA.forEach(t),Wvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(v9.$$.fragment,Ll),Qvr=i(Ll),bFe=n(Ll,"P",{});var wwt=s(bFe);Hvr=r(wwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wwt.forEach(t),Uvr=i(Ll),nn=n(Ll,"P",{});var TA=s(nn);Jvr=r(TA,"The model class to instantiate is selected based on the "),vFe=n(TA,"CODE",{});var Awt=s(vFe);Yvr=r(Awt,"model_type"),Awt.forEach(t),Kvr=r(TA,` property of the config object (either
passed as an argument or loaded from `),FFe=n(TA,"CODE",{});var Lwt=s(FFe);Zvr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),eFr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(TA,"CODE",{});var ywt=s(TFe);oFr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),rFr=r(TA,":"),TA.forEach(t),tFr=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);a4=n(Ce,"LI",{});var EIe=s(a4);MFe=n(EIe,"STRONG",{});var xwt=s(MFe);aFr=r(xwt,"bert"),xwt.forEach(t),nFr=r(EIe," \u2014 "),sU=n(EIe,"A",{href:!0});var $wt=s(sU);sFr=r($wt,"TFBertLMHeadModel"),$wt.forEach(t),lFr=r(EIe," (BERT model)"),EIe.forEach(t),iFr=i(Ce),n4=n(Ce,"LI",{});var CIe=s(n4);EFe=n(CIe,"STRONG",{});var kwt=s(EFe);dFr=r(kwt,"camembert"),kwt.forEach(t),cFr=r(CIe," \u2014 "),lU=n(CIe,"A",{href:!0});var Swt=s(lU);fFr=r(Swt,"TFCamembertForCausalLM"),Swt.forEach(t),mFr=r(CIe," (CamemBERT model)"),CIe.forEach(t),gFr=i(Ce),s4=n(Ce,"LI",{});var wIe=s(s4);CFe=n(wIe,"STRONG",{});var Rwt=s(CFe);hFr=r(Rwt,"ctrl"),Rwt.forEach(t),pFr=r(wIe," \u2014 "),iU=n(wIe,"A",{href:!0});var Pwt=s(iU);uFr=r(Pwt,"TFCTRLLMHeadModel"),Pwt.forEach(t),_Fr=r(wIe," (CTRL model)"),wIe.forEach(t),bFr=i(Ce),l4=n(Ce,"LI",{});var AIe=s(l4);wFe=n(AIe,"STRONG",{});var Bwt=s(wFe);vFr=r(Bwt,"gpt2"),Bwt.forEach(t),FFr=r(AIe," \u2014 "),dU=n(AIe,"A",{href:!0});var Iwt=s(dU);TFr=r(Iwt,"TFGPT2LMHeadModel"),Iwt.forEach(t),MFr=r(AIe," (OpenAI GPT-2 model)"),AIe.forEach(t),EFr=i(Ce),i4=n(Ce,"LI",{});var LIe=s(i4);AFe=n(LIe,"STRONG",{});var Nwt=s(AFe);CFr=r(Nwt,"gptj"),Nwt.forEach(t),wFr=r(LIe," \u2014 "),cU=n(LIe,"A",{href:!0});var qwt=s(cU);AFr=r(qwt,"TFGPTJForCausalLM"),qwt.forEach(t),LFr=r(LIe," (GPT-J model)"),LIe.forEach(t),yFr=i(Ce),d4=n(Ce,"LI",{});var yIe=s(d4);LFe=n(yIe,"STRONG",{});var jwt=s(LFe);xFr=r(jwt,"openai-gpt"),jwt.forEach(t),$Fr=r(yIe," \u2014 "),fU=n(yIe,"A",{href:!0});var Dwt=s(fU);kFr=r(Dwt,"TFOpenAIGPTLMHeadModel"),Dwt.forEach(t),SFr=r(yIe," (OpenAI GPT model)"),yIe.forEach(t),RFr=i(Ce),c4=n(Ce,"LI",{});var xIe=s(c4);yFe=n(xIe,"STRONG",{});var Gwt=s(yFe);PFr=r(Gwt,"opt"),Gwt.forEach(t),BFr=r(xIe," \u2014 "),mU=n(xIe,"A",{href:!0});var Owt=s(mU);IFr=r(Owt,"TFOPTForCausalLM"),Owt.forEach(t),NFr=r(xIe," (OPT model)"),xIe.forEach(t),qFr=i(Ce),f4=n(Ce,"LI",{});var $Ie=s(f4);xFe=n($Ie,"STRONG",{});var Vwt=s(xFe);jFr=r(Vwt,"rembert"),Vwt.forEach(t),DFr=r($Ie," \u2014 "),gU=n($Ie,"A",{href:!0});var Xwt=s(gU);GFr=r(Xwt,"TFRemBertForCausalLM"),Xwt.forEach(t),OFr=r($Ie," (RemBERT model)"),$Ie.forEach(t),VFr=i(Ce),m4=n(Ce,"LI",{});var kIe=s(m4);$Fe=n(kIe,"STRONG",{});var zwt=s($Fe);XFr=r(zwt,"roberta"),zwt.forEach(t),zFr=r(kIe," \u2014 "),hU=n(kIe,"A",{href:!0});var Wwt=s(hU);WFr=r(Wwt,"TFRobertaForCausalLM"),Wwt.forEach(t),QFr=r(kIe," (RoBERTa model)"),kIe.forEach(t),HFr=i(Ce),g4=n(Ce,"LI",{});var SIe=s(g4);kFe=n(SIe,"STRONG",{});var Qwt=s(kFe);UFr=r(Qwt,"roformer"),Qwt.forEach(t),JFr=r(SIe," \u2014 "),pU=n(SIe,"A",{href:!0});var Hwt=s(pU);YFr=r(Hwt,"TFRoFormerForCausalLM"),Hwt.forEach(t),KFr=r(SIe," (RoFormer model)"),SIe.forEach(t),ZFr=i(Ce),h4=n(Ce,"LI",{});var RIe=s(h4);SFe=n(RIe,"STRONG",{});var Uwt=s(SFe);e6r=r(Uwt,"transfo-xl"),Uwt.forEach(t),o6r=r(RIe," \u2014 "),uU=n(RIe,"A",{href:!0});var Jwt=s(uU);r6r=r(Jwt,"TFTransfoXLLMHeadModel"),Jwt.forEach(t),t6r=r(RIe," (Transformer-XL model)"),RIe.forEach(t),a6r=i(Ce),p4=n(Ce,"LI",{});var PIe=s(p4);RFe=n(PIe,"STRONG",{});var Ywt=s(RFe);n6r=r(Ywt,"xlm"),Ywt.forEach(t),s6r=r(PIe," \u2014 "),_U=n(PIe,"A",{href:!0});var Kwt=s(_U);l6r=r(Kwt,"TFXLMWithLMHeadModel"),Kwt.forEach(t),i6r=r(PIe," (XLM model)"),PIe.forEach(t),d6r=i(Ce),u4=n(Ce,"LI",{});var BIe=s(u4);PFe=n(BIe,"STRONG",{});var Zwt=s(PFe);c6r=r(Zwt,"xlnet"),Zwt.forEach(t),f6r=r(BIe," \u2014 "),bU=n(BIe,"A",{href:!0});var eAt=s(bU);m6r=r(eAt,"TFXLNetLMHeadModel"),eAt.forEach(t),g6r=r(BIe," (XLNet model)"),BIe.forEach(t),Ce.forEach(t),h6r=i(Ll),T(_4.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),fOe=i(f),ic=n(f,"H2",{class:!0});var vXe=s(ic);b4=n(vXe,"A",{id:!0,class:!0,href:!0});var oAt=s(b4);BFe=n(oAt,"SPAN",{});var rAt=s(BFe);T(F9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),p6r=i(vXe),IFe=n(vXe,"SPAN",{});var tAt=s(IFe);u6r=r(tAt,"TFAutoModelForImageClassification"),tAt.forEach(t),vXe.forEach(t),mOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(T9.$$.fragment,yl),_6r=i(yl),dc=n(yl,"P",{});var Koe=s(dc);b6r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vU=n(Koe,"A",{href:!0});var aAt=s(vU);v6r=r(aAt,"from_pretrained()"),aAt.forEach(t),F6r=r(Koe," class method or the "),FU=n(Koe,"A",{href:!0});var nAt=s(FU);T6r=r(nAt,"from_config()"),nAt.forEach(t),M6r=r(Koe,` class
method.`),Koe.forEach(t),E6r=i(yl),M9=n(yl,"P",{});var FXe=s(M9);C6r=r(FXe,"This class cannot be instantiated directly using "),NFe=n(FXe,"CODE",{});var sAt=s(NFe);w6r=r(sAt,"__init__()"),sAt.forEach(t),A6r=r(FXe," (throws an error)."),FXe.forEach(t),L6r=i(yl),Rt=n(yl,"DIV",{class:!0});var MA=s(Rt);T(E9.$$.fragment,MA),y6r=i(MA),qFe=n(MA,"P",{});var lAt=s(qFe);x6r=r(lAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lAt.forEach(t),$6r=i(MA),cc=n(MA,"P",{});var Zoe=s(cc);k6r=r(Zoe,`Note:
Loading a model from its configuration file does `),jFe=n(Zoe,"STRONG",{});var iAt=s(jFe);S6r=r(iAt,"not"),iAt.forEach(t),R6r=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(Zoe,"A",{href:!0});var dAt=s(TU);P6r=r(dAt,"from_pretrained()"),dAt.forEach(t),B6r=r(Zoe," to load the model weights."),Zoe.forEach(t),I6r=i(MA),T(v4.$$.fragment,MA),MA.forEach(t),N6r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(C9.$$.fragment,xl),q6r=i(xl),DFe=n(xl,"P",{});var cAt=s(DFe);j6r=r(cAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cAt.forEach(t),D6r=i(xl),sn=n(xl,"P",{});var EA=s(sn);G6r=r(EA,"The model class to instantiate is selected based on the "),GFe=n(EA,"CODE",{});var fAt=s(GFe);O6r=r(fAt,"model_type"),fAt.forEach(t),V6r=r(EA,` property of the config object (either
passed as an argument or loaded from `),OFe=n(EA,"CODE",{});var mAt=s(OFe);X6r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),z6r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(EA,"CODE",{});var gAt=s(VFe);W6r=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Q6r=r(EA,":"),EA.forEach(t),H6r=i(xl),ln=n(xl,"UL",{});var CA=s(ln);F4=n(CA,"LI",{});var IIe=s(F4);XFe=n(IIe,"STRONG",{});var hAt=s(XFe);U6r=r(hAt,"convnext"),hAt.forEach(t),J6r=r(IIe," \u2014 "),MU=n(IIe,"A",{href:!0});var pAt=s(MU);Y6r=r(pAt,"TFConvNextForImageClassification"),pAt.forEach(t),K6r=r(IIe," (ConvNeXT model)"),IIe.forEach(t),Z6r=i(CA),T4=n(CA,"LI",{});var NIe=s(T4);zFe=n(NIe,"STRONG",{});var uAt=s(zFe);eTr=r(uAt,"data2vec-vision"),uAt.forEach(t),oTr=r(NIe," \u2014 "),EU=n(NIe,"A",{href:!0});var _At=s(EU);rTr=r(_At,"TFData2VecVisionForImageClassification"),_At.forEach(t),tTr=r(NIe," (Data2VecVision model)"),NIe.forEach(t),aTr=i(CA),M4=n(CA,"LI",{});var qIe=s(M4);WFe=n(qIe,"STRONG",{});var bAt=s(WFe);nTr=r(bAt,"swin"),bAt.forEach(t),sTr=r(qIe," \u2014 "),CU=n(qIe,"A",{href:!0});var vAt=s(CU);lTr=r(vAt,"TFSwinForImageClassification"),vAt.forEach(t),iTr=r(qIe," (Swin Transformer model)"),qIe.forEach(t),dTr=i(CA),E4=n(CA,"LI",{});var jIe=s(E4);QFe=n(jIe,"STRONG",{});var FAt=s(QFe);cTr=r(FAt,"vit"),FAt.forEach(t),fTr=r(jIe," \u2014 "),wU=n(jIe,"A",{href:!0});var TAt=s(wU);mTr=r(TAt,"TFViTForImageClassification"),TAt.forEach(t),gTr=r(jIe," (ViT model)"),jIe.forEach(t),CA.forEach(t),hTr=i(xl),T(C4.$$.fragment,xl),xl.forEach(t),yl.forEach(t),gOe=i(f),fc=n(f,"H2",{class:!0});var TXe=s(fc);w4=n(TXe,"A",{id:!0,class:!0,href:!0});var MAt=s(w4);HFe=n(MAt,"SPAN",{});var EAt=s(HFe);T(w9.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),pTr=i(TXe),UFe=n(TXe,"SPAN",{});var CAt=s(UFe);uTr=r(CAt,"TFAutoModelForMaskedLM"),CAt.forEach(t),TXe.forEach(t),hOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(A9.$$.fragment,$l),_Tr=i($l),mc=n($l,"P",{});var ere=s(mc);bTr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=n(ere,"A",{href:!0});var wAt=s(AU);vTr=r(wAt,"from_pretrained()"),wAt.forEach(t),FTr=r(ere," class method or the "),LU=n(ere,"A",{href:!0});var AAt=s(LU);TTr=r(AAt,"from_config()"),AAt.forEach(t),MTr=r(ere,` class
method.`),ere.forEach(t),ETr=i($l),L9=n($l,"P",{});var MXe=s(L9);CTr=r(MXe,"This class cannot be instantiated directly using "),JFe=n(MXe,"CODE",{});var LAt=s(JFe);wTr=r(LAt,"__init__()"),LAt.forEach(t),ATr=r(MXe," (throws an error)."),MXe.forEach(t),LTr=i($l),Pt=n($l,"DIV",{class:!0});var wA=s(Pt);T(y9.$$.fragment,wA),yTr=i(wA),YFe=n(wA,"P",{});var yAt=s(YFe);xTr=r(yAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yAt.forEach(t),$Tr=i(wA),gc=n(wA,"P",{});var ore=s(gc);kTr=r(ore,`Note:
Loading a model from its configuration file does `),KFe=n(ore,"STRONG",{});var xAt=s(KFe);STr=r(xAt,"not"),xAt.forEach(t),RTr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(ore,"A",{href:!0});var $At=s(yU);PTr=r($At,"from_pretrained()"),$At.forEach(t),BTr=r(ore," to load the model weights."),ore.forEach(t),ITr=i(wA),T(A4.$$.fragment,wA),wA.forEach(t),NTr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(x9.$$.fragment,kl),qTr=i(kl),ZFe=n(kl,"P",{});var kAt=s(ZFe);jTr=r(kAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kAt.forEach(t),DTr=i(kl),dn=n(kl,"P",{});var AA=s(dn);GTr=r(AA,"The model class to instantiate is selected based on the "),e6e=n(AA,"CODE",{});var SAt=s(e6e);OTr=r(SAt,"model_type"),SAt.forEach(t),VTr=r(AA,` property of the config object (either
passed as an argument or loaded from `),o6e=n(AA,"CODE",{});var RAt=s(o6e);XTr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),zTr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(AA,"CODE",{});var PAt=s(r6e);WTr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),QTr=r(AA,":"),AA.forEach(t),HTr=i(kl),ie=n(kl,"UL",{});var fe=s(ie);L4=n(fe,"LI",{});var DIe=s(L4);t6e=n(DIe,"STRONG",{});var BAt=s(t6e);UTr=r(BAt,"albert"),BAt.forEach(t),JTr=r(DIe," \u2014 "),xU=n(DIe,"A",{href:!0});var IAt=s(xU);YTr=r(IAt,"TFAlbertForMaskedLM"),IAt.forEach(t),KTr=r(DIe," (ALBERT model)"),DIe.forEach(t),ZTr=i(fe),y4=n(fe,"LI",{});var GIe=s(y4);a6e=n(GIe,"STRONG",{});var NAt=s(a6e);eMr=r(NAt,"bert"),NAt.forEach(t),oMr=r(GIe," \u2014 "),$U=n(GIe,"A",{href:!0});var qAt=s($U);rMr=r(qAt,"TFBertForMaskedLM"),qAt.forEach(t),tMr=r(GIe," (BERT model)"),GIe.forEach(t),aMr=i(fe),x4=n(fe,"LI",{});var OIe=s(x4);n6e=n(OIe,"STRONG",{});var jAt=s(n6e);nMr=r(jAt,"camembert"),jAt.forEach(t),sMr=r(OIe," \u2014 "),kU=n(OIe,"A",{href:!0});var DAt=s(kU);lMr=r(DAt,"TFCamembertForMaskedLM"),DAt.forEach(t),iMr=r(OIe," (CamemBERT model)"),OIe.forEach(t),dMr=i(fe),$4=n(fe,"LI",{});var VIe=s($4);s6e=n(VIe,"STRONG",{});var GAt=s(s6e);cMr=r(GAt,"convbert"),GAt.forEach(t),fMr=r(VIe," \u2014 "),SU=n(VIe,"A",{href:!0});var OAt=s(SU);mMr=r(OAt,"TFConvBertForMaskedLM"),OAt.forEach(t),gMr=r(VIe," (ConvBERT model)"),VIe.forEach(t),hMr=i(fe),k4=n(fe,"LI",{});var XIe=s(k4);l6e=n(XIe,"STRONG",{});var VAt=s(l6e);pMr=r(VAt,"deberta"),VAt.forEach(t),uMr=r(XIe," \u2014 "),RU=n(XIe,"A",{href:!0});var XAt=s(RU);_Mr=r(XAt,"TFDebertaForMaskedLM"),XAt.forEach(t),bMr=r(XIe," (DeBERTa model)"),XIe.forEach(t),vMr=i(fe),S4=n(fe,"LI",{});var zIe=s(S4);i6e=n(zIe,"STRONG",{});var zAt=s(i6e);FMr=r(zAt,"deberta-v2"),zAt.forEach(t),TMr=r(zIe," \u2014 "),PU=n(zIe,"A",{href:!0});var WAt=s(PU);MMr=r(WAt,"TFDebertaV2ForMaskedLM"),WAt.forEach(t),EMr=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),CMr=i(fe),R4=n(fe,"LI",{});var WIe=s(R4);d6e=n(WIe,"STRONG",{});var QAt=s(d6e);wMr=r(QAt,"distilbert"),QAt.forEach(t),AMr=r(WIe," \u2014 "),BU=n(WIe,"A",{href:!0});var HAt=s(BU);LMr=r(HAt,"TFDistilBertForMaskedLM"),HAt.forEach(t),yMr=r(WIe," (DistilBERT model)"),WIe.forEach(t),xMr=i(fe),P4=n(fe,"LI",{});var QIe=s(P4);c6e=n(QIe,"STRONG",{});var UAt=s(c6e);$Mr=r(UAt,"electra"),UAt.forEach(t),kMr=r(QIe," \u2014 "),IU=n(QIe,"A",{href:!0});var JAt=s(IU);SMr=r(JAt,"TFElectraForMaskedLM"),JAt.forEach(t),RMr=r(QIe," (ELECTRA model)"),QIe.forEach(t),PMr=i(fe),B4=n(fe,"LI",{});var HIe=s(B4);f6e=n(HIe,"STRONG",{});var YAt=s(f6e);BMr=r(YAt,"flaubert"),YAt.forEach(t),IMr=r(HIe," \u2014 "),NU=n(HIe,"A",{href:!0});var KAt=s(NU);NMr=r(KAt,"TFFlaubertWithLMHeadModel"),KAt.forEach(t),qMr=r(HIe," (FlauBERT model)"),HIe.forEach(t),jMr=i(fe),I4=n(fe,"LI",{});var UIe=s(I4);m6e=n(UIe,"STRONG",{});var ZAt=s(m6e);DMr=r(ZAt,"funnel"),ZAt.forEach(t),GMr=r(UIe," \u2014 "),qU=n(UIe,"A",{href:!0});var eLt=s(qU);OMr=r(eLt,"TFFunnelForMaskedLM"),eLt.forEach(t),VMr=r(UIe," (Funnel Transformer model)"),UIe.forEach(t),XMr=i(fe),N4=n(fe,"LI",{});var JIe=s(N4);g6e=n(JIe,"STRONG",{});var oLt=s(g6e);zMr=r(oLt,"layoutlm"),oLt.forEach(t),WMr=r(JIe," \u2014 "),jU=n(JIe,"A",{href:!0});var rLt=s(jU);QMr=r(rLt,"TFLayoutLMForMaskedLM"),rLt.forEach(t),HMr=r(JIe," (LayoutLM model)"),JIe.forEach(t),UMr=i(fe),q4=n(fe,"LI",{});var YIe=s(q4);h6e=n(YIe,"STRONG",{});var tLt=s(h6e);JMr=r(tLt,"longformer"),tLt.forEach(t),YMr=r(YIe," \u2014 "),DU=n(YIe,"A",{href:!0});var aLt=s(DU);KMr=r(aLt,"TFLongformerForMaskedLM"),aLt.forEach(t),ZMr=r(YIe," (Longformer model)"),YIe.forEach(t),e4r=i(fe),j4=n(fe,"LI",{});var KIe=s(j4);p6e=n(KIe,"STRONG",{});var nLt=s(p6e);o4r=r(nLt,"mobilebert"),nLt.forEach(t),r4r=r(KIe," \u2014 "),GU=n(KIe,"A",{href:!0});var sLt=s(GU);t4r=r(sLt,"TFMobileBertForMaskedLM"),sLt.forEach(t),a4r=r(KIe," (MobileBERT model)"),KIe.forEach(t),n4r=i(fe),D4=n(fe,"LI",{});var ZIe=s(D4);u6e=n(ZIe,"STRONG",{});var lLt=s(u6e);s4r=r(lLt,"mpnet"),lLt.forEach(t),l4r=r(ZIe," \u2014 "),OU=n(ZIe,"A",{href:!0});var iLt=s(OU);i4r=r(iLt,"TFMPNetForMaskedLM"),iLt.forEach(t),d4r=r(ZIe," (MPNet model)"),ZIe.forEach(t),c4r=i(fe),G4=n(fe,"LI",{});var eNe=s(G4);_6e=n(eNe,"STRONG",{});var dLt=s(_6e);f4r=r(dLt,"rembert"),dLt.forEach(t),m4r=r(eNe," \u2014 "),VU=n(eNe,"A",{href:!0});var cLt=s(VU);g4r=r(cLt,"TFRemBertForMaskedLM"),cLt.forEach(t),h4r=r(eNe," (RemBERT model)"),eNe.forEach(t),p4r=i(fe),O4=n(fe,"LI",{});var oNe=s(O4);b6e=n(oNe,"STRONG",{});var fLt=s(b6e);u4r=r(fLt,"roberta"),fLt.forEach(t),_4r=r(oNe," \u2014 "),XU=n(oNe,"A",{href:!0});var mLt=s(XU);b4r=r(mLt,"TFRobertaForMaskedLM"),mLt.forEach(t),v4r=r(oNe," (RoBERTa model)"),oNe.forEach(t),F4r=i(fe),V4=n(fe,"LI",{});var rNe=s(V4);v6e=n(rNe,"STRONG",{});var gLt=s(v6e);T4r=r(gLt,"roformer"),gLt.forEach(t),M4r=r(rNe," \u2014 "),zU=n(rNe,"A",{href:!0});var hLt=s(zU);E4r=r(hLt,"TFRoFormerForMaskedLM"),hLt.forEach(t),C4r=r(rNe," (RoFormer model)"),rNe.forEach(t),w4r=i(fe),X4=n(fe,"LI",{});var tNe=s(X4);F6e=n(tNe,"STRONG",{});var pLt=s(F6e);A4r=r(pLt,"tapas"),pLt.forEach(t),L4r=r(tNe," \u2014 "),WU=n(tNe,"A",{href:!0});var uLt=s(WU);y4r=r(uLt,"TFTapasForMaskedLM"),uLt.forEach(t),x4r=r(tNe," (TAPAS model)"),tNe.forEach(t),$4r=i(fe),z4=n(fe,"LI",{});var aNe=s(z4);T6e=n(aNe,"STRONG",{});var _Lt=s(T6e);k4r=r(_Lt,"xlm"),_Lt.forEach(t),S4r=r(aNe," \u2014 "),QU=n(aNe,"A",{href:!0});var bLt=s(QU);R4r=r(bLt,"TFXLMWithLMHeadModel"),bLt.forEach(t),P4r=r(aNe," (XLM model)"),aNe.forEach(t),B4r=i(fe),W4=n(fe,"LI",{});var nNe=s(W4);M6e=n(nNe,"STRONG",{});var vLt=s(M6e);I4r=r(vLt,"xlm-roberta"),vLt.forEach(t),N4r=r(nNe," \u2014 "),HU=n(nNe,"A",{href:!0});var FLt=s(HU);q4r=r(FLt,"TFXLMRobertaForMaskedLM"),FLt.forEach(t),j4r=r(nNe," (XLM-RoBERTa model)"),nNe.forEach(t),fe.forEach(t),D4r=i(kl),T(Q4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),pOe=i(f),hc=n(f,"H2",{class:!0});var EXe=s(hc);H4=n(EXe,"A",{id:!0,class:!0,href:!0});var TLt=s(H4);E6e=n(TLt,"SPAN",{});var MLt=s(E6e);T($9.$$.fragment,MLt),MLt.forEach(t),TLt.forEach(t),G4r=i(EXe),C6e=n(EXe,"SPAN",{});var ELt=s(C6e);O4r=r(ELt,"TFAutoModelForSeq2SeqLM"),ELt.forEach(t),EXe.forEach(t),uOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(k9.$$.fragment,Sl),V4r=i(Sl),pc=n(Sl,"P",{});var rre=s(pc);X4r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=n(rre,"A",{href:!0});var CLt=s(UU);z4r=r(CLt,"from_pretrained()"),CLt.forEach(t),W4r=r(rre," class method or the "),JU=n(rre,"A",{href:!0});var wLt=s(JU);Q4r=r(wLt,"from_config()"),wLt.forEach(t),H4r=r(rre,` class
method.`),rre.forEach(t),U4r=i(Sl),S9=n(Sl,"P",{});var CXe=s(S9);J4r=r(CXe,"This class cannot be instantiated directly using "),w6e=n(CXe,"CODE",{});var ALt=s(w6e);Y4r=r(ALt,"__init__()"),ALt.forEach(t),K4r=r(CXe," (throws an error)."),CXe.forEach(t),Z4r=i(Sl),Bt=n(Sl,"DIV",{class:!0});var LA=s(Bt);T(R9.$$.fragment,LA),eEr=i(LA),A6e=n(LA,"P",{});var LLt=s(A6e);oEr=r(LLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LLt.forEach(t),rEr=i(LA),uc=n(LA,"P",{});var tre=s(uc);tEr=r(tre,`Note:
Loading a model from its configuration file does `),L6e=n(tre,"STRONG",{});var yLt=s(L6e);aEr=r(yLt,"not"),yLt.forEach(t),nEr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(tre,"A",{href:!0});var xLt=s(YU);sEr=r(xLt,"from_pretrained()"),xLt.forEach(t),lEr=r(tre," to load the model weights."),tre.forEach(t),iEr=i(LA),T(U4.$$.fragment,LA),LA.forEach(t),dEr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(P9.$$.fragment,Rl),cEr=i(Rl),y6e=n(Rl,"P",{});var $Lt=s(y6e);fEr=r($Lt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lt.forEach(t),mEr=i(Rl),cn=n(Rl,"P",{});var yA=s(cn);gEr=r(yA,"The model class to instantiate is selected based on the "),x6e=n(yA,"CODE",{});var kLt=s(x6e);hEr=r(kLt,"model_type"),kLt.forEach(t),pEr=r(yA,` property of the config object (either
passed as an argument or loaded from `),$6e=n(yA,"CODE",{});var SLt=s($6e);uEr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),_Er=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(yA,"CODE",{});var RLt=s(k6e);bEr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),vEr=r(yA,":"),yA.forEach(t),FEr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);J4=n(Ie,"LI",{});var sNe=s(J4);S6e=n(sNe,"STRONG",{});var PLt=s(S6e);TEr=r(PLt,"bart"),PLt.forEach(t),MEr=r(sNe," \u2014 "),KU=n(sNe,"A",{href:!0});var BLt=s(KU);EEr=r(BLt,"TFBartForConditionalGeneration"),BLt.forEach(t),CEr=r(sNe," (BART model)"),sNe.forEach(t),wEr=i(Ie),Y4=n(Ie,"LI",{});var lNe=s(Y4);R6e=n(lNe,"STRONG",{});var ILt=s(R6e);AEr=r(ILt,"blenderbot"),ILt.forEach(t),LEr=r(lNe," \u2014 "),ZU=n(lNe,"A",{href:!0});var NLt=s(ZU);yEr=r(NLt,"TFBlenderbotForConditionalGeneration"),NLt.forEach(t),xEr=r(lNe," (Blenderbot model)"),lNe.forEach(t),$Er=i(Ie),K4=n(Ie,"LI",{});var iNe=s(K4);P6e=n(iNe,"STRONG",{});var qLt=s(P6e);kEr=r(qLt,"blenderbot-small"),qLt.forEach(t),SEr=r(iNe," \u2014 "),eJ=n(iNe,"A",{href:!0});var jLt=s(eJ);REr=r(jLt,"TFBlenderbotSmallForConditionalGeneration"),jLt.forEach(t),PEr=r(iNe," (BlenderbotSmall model)"),iNe.forEach(t),BEr=i(Ie),Z4=n(Ie,"LI",{});var dNe=s(Z4);B6e=n(dNe,"STRONG",{});var DLt=s(B6e);IEr=r(DLt,"encoder-decoder"),DLt.forEach(t),NEr=r(dNe," \u2014 "),oJ=n(dNe,"A",{href:!0});var GLt=s(oJ);qEr=r(GLt,"TFEncoderDecoderModel"),GLt.forEach(t),jEr=r(dNe," (Encoder decoder model)"),dNe.forEach(t),DEr=i(Ie),eE=n(Ie,"LI",{});var cNe=s(eE);I6e=n(cNe,"STRONG",{});var OLt=s(I6e);GEr=r(OLt,"led"),OLt.forEach(t),OEr=r(cNe," \u2014 "),rJ=n(cNe,"A",{href:!0});var VLt=s(rJ);VEr=r(VLt,"TFLEDForConditionalGeneration"),VLt.forEach(t),XEr=r(cNe," (LED model)"),cNe.forEach(t),zEr=i(Ie),oE=n(Ie,"LI",{});var fNe=s(oE);N6e=n(fNe,"STRONG",{});var XLt=s(N6e);WEr=r(XLt,"marian"),XLt.forEach(t),QEr=r(fNe," \u2014 "),tJ=n(fNe,"A",{href:!0});var zLt=s(tJ);HEr=r(zLt,"TFMarianMTModel"),zLt.forEach(t),UEr=r(fNe," (Marian model)"),fNe.forEach(t),JEr=i(Ie),rE=n(Ie,"LI",{});var mNe=s(rE);q6e=n(mNe,"STRONG",{});var WLt=s(q6e);YEr=r(WLt,"mbart"),WLt.forEach(t),KEr=r(mNe," \u2014 "),aJ=n(mNe,"A",{href:!0});var QLt=s(aJ);ZEr=r(QLt,"TFMBartForConditionalGeneration"),QLt.forEach(t),eCr=r(mNe," (mBART model)"),mNe.forEach(t),oCr=i(Ie),tE=n(Ie,"LI",{});var gNe=s(tE);j6e=n(gNe,"STRONG",{});var HLt=s(j6e);rCr=r(HLt,"mt5"),HLt.forEach(t),tCr=r(gNe," \u2014 "),nJ=n(gNe,"A",{href:!0});var ULt=s(nJ);aCr=r(ULt,"TFMT5ForConditionalGeneration"),ULt.forEach(t),nCr=r(gNe," (MT5 model)"),gNe.forEach(t),sCr=i(Ie),aE=n(Ie,"LI",{});var hNe=s(aE);D6e=n(hNe,"STRONG",{});var JLt=s(D6e);lCr=r(JLt,"pegasus"),JLt.forEach(t),iCr=r(hNe," \u2014 "),sJ=n(hNe,"A",{href:!0});var YLt=s(sJ);dCr=r(YLt,"TFPegasusForConditionalGeneration"),YLt.forEach(t),cCr=r(hNe," (Pegasus model)"),hNe.forEach(t),fCr=i(Ie),nE=n(Ie,"LI",{});var pNe=s(nE);G6e=n(pNe,"STRONG",{});var KLt=s(G6e);mCr=r(KLt,"t5"),KLt.forEach(t),gCr=r(pNe," \u2014 "),lJ=n(pNe,"A",{href:!0});var ZLt=s(lJ);hCr=r(ZLt,"TFT5ForConditionalGeneration"),ZLt.forEach(t),pCr=r(pNe," (T5 model)"),pNe.forEach(t),Ie.forEach(t),uCr=i(Rl),T(sE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),_Oe=i(f),_c=n(f,"H2",{class:!0});var wXe=s(_c);lE=n(wXe,"A",{id:!0,class:!0,href:!0});var eyt=s(lE);O6e=n(eyt,"SPAN",{});var oyt=s(O6e);T(B9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),_Cr=i(wXe),V6e=n(wXe,"SPAN",{});var ryt=s(V6e);bCr=r(ryt,"TFAutoModelForSequenceClassification"),ryt.forEach(t),wXe.forEach(t),bOe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(I9.$$.fragment,Pl),vCr=i(Pl),bc=n(Pl,"P",{});var are=s(bc);FCr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=n(are,"A",{href:!0});var tyt=s(iJ);TCr=r(tyt,"from_pretrained()"),tyt.forEach(t),MCr=r(are," class method or the "),dJ=n(are,"A",{href:!0});var ayt=s(dJ);ECr=r(ayt,"from_config()"),ayt.forEach(t),CCr=r(are,` class
method.`),are.forEach(t),wCr=i(Pl),N9=n(Pl,"P",{});var AXe=s(N9);ACr=r(AXe,"This class cannot be instantiated directly using "),X6e=n(AXe,"CODE",{});var nyt=s(X6e);LCr=r(nyt,"__init__()"),nyt.forEach(t),yCr=r(AXe," (throws an error)."),AXe.forEach(t),xCr=i(Pl),It=n(Pl,"DIV",{class:!0});var xA=s(It);T(q9.$$.fragment,xA),$Cr=i(xA),z6e=n(xA,"P",{});var syt=s(z6e);kCr=r(syt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syt.forEach(t),SCr=i(xA),vc=n(xA,"P",{});var nre=s(vc);RCr=r(nre,`Note:
Loading a model from its configuration file does `),W6e=n(nre,"STRONG",{});var lyt=s(W6e);PCr=r(lyt,"not"),lyt.forEach(t),BCr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(nre,"A",{href:!0});var iyt=s(cJ);ICr=r(iyt,"from_pretrained()"),iyt.forEach(t),NCr=r(nre," to load the model weights."),nre.forEach(t),qCr=i(xA),T(iE.$$.fragment,xA),xA.forEach(t),jCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(j9.$$.fragment,Bl),DCr=i(Bl),Q6e=n(Bl,"P",{});var dyt=s(Q6e);GCr=r(dyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyt.forEach(t),OCr=i(Bl),fn=n(Bl,"P",{});var $A=s(fn);VCr=r($A,"The model class to instantiate is selected based on the "),H6e=n($A,"CODE",{});var cyt=s(H6e);XCr=r(cyt,"model_type"),cyt.forEach(t),zCr=r($A,` property of the config object (either
passed as an argument or loaded from `),U6e=n($A,"CODE",{});var fyt=s(U6e);WCr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),QCr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n($A,"CODE",{});var myt=s(J6e);HCr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),UCr=r($A,":"),$A.forEach(t),JCr=i(Bl),te=n(Bl,"UL",{});var ne=s(te);dE=n(ne,"LI",{});var uNe=s(dE);Y6e=n(uNe,"STRONG",{});var gyt=s(Y6e);YCr=r(gyt,"albert"),gyt.forEach(t),KCr=r(uNe," \u2014 "),fJ=n(uNe,"A",{href:!0});var hyt=s(fJ);ZCr=r(hyt,"TFAlbertForSequenceClassification"),hyt.forEach(t),e5r=r(uNe," (ALBERT model)"),uNe.forEach(t),o5r=i(ne),cE=n(ne,"LI",{});var _Ne=s(cE);K6e=n(_Ne,"STRONG",{});var pyt=s(K6e);r5r=r(pyt,"bert"),pyt.forEach(t),t5r=r(_Ne," \u2014 "),mJ=n(_Ne,"A",{href:!0});var uyt=s(mJ);a5r=r(uyt,"TFBertForSequenceClassification"),uyt.forEach(t),n5r=r(_Ne," (BERT model)"),_Ne.forEach(t),s5r=i(ne),fE=n(ne,"LI",{});var bNe=s(fE);Z6e=n(bNe,"STRONG",{});var _yt=s(Z6e);l5r=r(_yt,"camembert"),_yt.forEach(t),i5r=r(bNe," \u2014 "),gJ=n(bNe,"A",{href:!0});var byt=s(gJ);d5r=r(byt,"TFCamembertForSequenceClassification"),byt.forEach(t),c5r=r(bNe," (CamemBERT model)"),bNe.forEach(t),f5r=i(ne),mE=n(ne,"LI",{});var vNe=s(mE);eTe=n(vNe,"STRONG",{});var vyt=s(eTe);m5r=r(vyt,"convbert"),vyt.forEach(t),g5r=r(vNe," \u2014 "),hJ=n(vNe,"A",{href:!0});var Fyt=s(hJ);h5r=r(Fyt,"TFConvBertForSequenceClassification"),Fyt.forEach(t),p5r=r(vNe," (ConvBERT model)"),vNe.forEach(t),u5r=i(ne),gE=n(ne,"LI",{});var FNe=s(gE);oTe=n(FNe,"STRONG",{});var Tyt=s(oTe);_5r=r(Tyt,"ctrl"),Tyt.forEach(t),b5r=r(FNe," \u2014 "),pJ=n(FNe,"A",{href:!0});var Myt=s(pJ);v5r=r(Myt,"TFCTRLForSequenceClassification"),Myt.forEach(t),F5r=r(FNe," (CTRL model)"),FNe.forEach(t),T5r=i(ne),hE=n(ne,"LI",{});var TNe=s(hE);rTe=n(TNe,"STRONG",{});var Eyt=s(rTe);M5r=r(Eyt,"deberta"),Eyt.forEach(t),E5r=r(TNe," \u2014 "),uJ=n(TNe,"A",{href:!0});var Cyt=s(uJ);C5r=r(Cyt,"TFDebertaForSequenceClassification"),Cyt.forEach(t),w5r=r(TNe," (DeBERTa model)"),TNe.forEach(t),A5r=i(ne),pE=n(ne,"LI",{});var MNe=s(pE);tTe=n(MNe,"STRONG",{});var wyt=s(tTe);L5r=r(wyt,"deberta-v2"),wyt.forEach(t),y5r=r(MNe," \u2014 "),_J=n(MNe,"A",{href:!0});var Ayt=s(_J);x5r=r(Ayt,"TFDebertaV2ForSequenceClassification"),Ayt.forEach(t),$5r=r(MNe," (DeBERTa-v2 model)"),MNe.forEach(t),k5r=i(ne),uE=n(ne,"LI",{});var ENe=s(uE);aTe=n(ENe,"STRONG",{});var Lyt=s(aTe);S5r=r(Lyt,"distilbert"),Lyt.forEach(t),R5r=r(ENe," \u2014 "),bJ=n(ENe,"A",{href:!0});var yyt=s(bJ);P5r=r(yyt,"TFDistilBertForSequenceClassification"),yyt.forEach(t),B5r=r(ENe," (DistilBERT model)"),ENe.forEach(t),I5r=i(ne),_E=n(ne,"LI",{});var CNe=s(_E);nTe=n(CNe,"STRONG",{});var xyt=s(nTe);N5r=r(xyt,"electra"),xyt.forEach(t),q5r=r(CNe," \u2014 "),vJ=n(CNe,"A",{href:!0});var $yt=s(vJ);j5r=r($yt,"TFElectraForSequenceClassification"),$yt.forEach(t),D5r=r(CNe," (ELECTRA model)"),CNe.forEach(t),G5r=i(ne),bE=n(ne,"LI",{});var wNe=s(bE);sTe=n(wNe,"STRONG",{});var kyt=s(sTe);O5r=r(kyt,"flaubert"),kyt.forEach(t),V5r=r(wNe," \u2014 "),FJ=n(wNe,"A",{href:!0});var Syt=s(FJ);X5r=r(Syt,"TFFlaubertForSequenceClassification"),Syt.forEach(t),z5r=r(wNe," (FlauBERT model)"),wNe.forEach(t),W5r=i(ne),vE=n(ne,"LI",{});var ANe=s(vE);lTe=n(ANe,"STRONG",{});var Ryt=s(lTe);Q5r=r(Ryt,"funnel"),Ryt.forEach(t),H5r=r(ANe," \u2014 "),TJ=n(ANe,"A",{href:!0});var Pyt=s(TJ);U5r=r(Pyt,"TFFunnelForSequenceClassification"),Pyt.forEach(t),J5r=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),Y5r=i(ne),FE=n(ne,"LI",{});var LNe=s(FE);iTe=n(LNe,"STRONG",{});var Byt=s(iTe);K5r=r(Byt,"gpt2"),Byt.forEach(t),Z5r=r(LNe," \u2014 "),MJ=n(LNe,"A",{href:!0});var Iyt=s(MJ);e3r=r(Iyt,"TFGPT2ForSequenceClassification"),Iyt.forEach(t),o3r=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),r3r=i(ne),TE=n(ne,"LI",{});var yNe=s(TE);dTe=n(yNe,"STRONG",{});var Nyt=s(dTe);t3r=r(Nyt,"gptj"),Nyt.forEach(t),a3r=r(yNe," \u2014 "),EJ=n(yNe,"A",{href:!0});var qyt=s(EJ);n3r=r(qyt,"TFGPTJForSequenceClassification"),qyt.forEach(t),s3r=r(yNe," (GPT-J model)"),yNe.forEach(t),l3r=i(ne),ME=n(ne,"LI",{});var xNe=s(ME);cTe=n(xNe,"STRONG",{});var jyt=s(cTe);i3r=r(jyt,"layoutlm"),jyt.forEach(t),d3r=r(xNe," \u2014 "),CJ=n(xNe,"A",{href:!0});var Dyt=s(CJ);c3r=r(Dyt,"TFLayoutLMForSequenceClassification"),Dyt.forEach(t),f3r=r(xNe," (LayoutLM model)"),xNe.forEach(t),m3r=i(ne),EE=n(ne,"LI",{});var $Ne=s(EE);fTe=n($Ne,"STRONG",{});var Gyt=s(fTe);g3r=r(Gyt,"longformer"),Gyt.forEach(t),h3r=r($Ne," \u2014 "),wJ=n($Ne,"A",{href:!0});var Oyt=s(wJ);p3r=r(Oyt,"TFLongformerForSequenceClassification"),Oyt.forEach(t),u3r=r($Ne," (Longformer model)"),$Ne.forEach(t),_3r=i(ne),CE=n(ne,"LI",{});var kNe=s(CE);mTe=n(kNe,"STRONG",{});var Vyt=s(mTe);b3r=r(Vyt,"mobilebert"),Vyt.forEach(t),v3r=r(kNe," \u2014 "),AJ=n(kNe,"A",{href:!0});var Xyt=s(AJ);F3r=r(Xyt,"TFMobileBertForSequenceClassification"),Xyt.forEach(t),T3r=r(kNe," (MobileBERT model)"),kNe.forEach(t),M3r=i(ne),wE=n(ne,"LI",{});var SNe=s(wE);gTe=n(SNe,"STRONG",{});var zyt=s(gTe);E3r=r(zyt,"mpnet"),zyt.forEach(t),C3r=r(SNe," \u2014 "),LJ=n(SNe,"A",{href:!0});var Wyt=s(LJ);w3r=r(Wyt,"TFMPNetForSequenceClassification"),Wyt.forEach(t),A3r=r(SNe," (MPNet model)"),SNe.forEach(t),L3r=i(ne),AE=n(ne,"LI",{});var RNe=s(AE);hTe=n(RNe,"STRONG",{});var Qyt=s(hTe);y3r=r(Qyt,"openai-gpt"),Qyt.forEach(t),x3r=r(RNe," \u2014 "),yJ=n(RNe,"A",{href:!0});var Hyt=s(yJ);$3r=r(Hyt,"TFOpenAIGPTForSequenceClassification"),Hyt.forEach(t),k3r=r(RNe," (OpenAI GPT model)"),RNe.forEach(t),S3r=i(ne),LE=n(ne,"LI",{});var PNe=s(LE);pTe=n(PNe,"STRONG",{});var Uyt=s(pTe);R3r=r(Uyt,"rembert"),Uyt.forEach(t),P3r=r(PNe," \u2014 "),xJ=n(PNe,"A",{href:!0});var Jyt=s(xJ);B3r=r(Jyt,"TFRemBertForSequenceClassification"),Jyt.forEach(t),I3r=r(PNe," (RemBERT model)"),PNe.forEach(t),N3r=i(ne),yE=n(ne,"LI",{});var BNe=s(yE);uTe=n(BNe,"STRONG",{});var Yyt=s(uTe);q3r=r(Yyt,"roberta"),Yyt.forEach(t),j3r=r(BNe," \u2014 "),$J=n(BNe,"A",{href:!0});var Kyt=s($J);D3r=r(Kyt,"TFRobertaForSequenceClassification"),Kyt.forEach(t),G3r=r(BNe," (RoBERTa model)"),BNe.forEach(t),O3r=i(ne),xE=n(ne,"LI",{});var INe=s(xE);_Te=n(INe,"STRONG",{});var Zyt=s(_Te);V3r=r(Zyt,"roformer"),Zyt.forEach(t),X3r=r(INe," \u2014 "),kJ=n(INe,"A",{href:!0});var e8t=s(kJ);z3r=r(e8t,"TFRoFormerForSequenceClassification"),e8t.forEach(t),W3r=r(INe," (RoFormer model)"),INe.forEach(t),Q3r=i(ne),$E=n(ne,"LI",{});var NNe=s($E);bTe=n(NNe,"STRONG",{});var o8t=s(bTe);H3r=r(o8t,"tapas"),o8t.forEach(t),U3r=r(NNe," \u2014 "),SJ=n(NNe,"A",{href:!0});var r8t=s(SJ);J3r=r(r8t,"TFTapasForSequenceClassification"),r8t.forEach(t),Y3r=r(NNe," (TAPAS model)"),NNe.forEach(t),K3r=i(ne),kE=n(ne,"LI",{});var qNe=s(kE);vTe=n(qNe,"STRONG",{});var t8t=s(vTe);Z3r=r(t8t,"transfo-xl"),t8t.forEach(t),e0r=r(qNe," \u2014 "),RJ=n(qNe,"A",{href:!0});var a8t=s(RJ);o0r=r(a8t,"TFTransfoXLForSequenceClassification"),a8t.forEach(t),r0r=r(qNe," (Transformer-XL model)"),qNe.forEach(t),t0r=i(ne),SE=n(ne,"LI",{});var jNe=s(SE);FTe=n(jNe,"STRONG",{});var n8t=s(FTe);a0r=r(n8t,"xlm"),n8t.forEach(t),n0r=r(jNe," \u2014 "),PJ=n(jNe,"A",{href:!0});var s8t=s(PJ);s0r=r(s8t,"TFXLMForSequenceClassification"),s8t.forEach(t),l0r=r(jNe," (XLM model)"),jNe.forEach(t),i0r=i(ne),RE=n(ne,"LI",{});var DNe=s(RE);TTe=n(DNe,"STRONG",{});var l8t=s(TTe);d0r=r(l8t,"xlm-roberta"),l8t.forEach(t),c0r=r(DNe," \u2014 "),BJ=n(DNe,"A",{href:!0});var i8t=s(BJ);f0r=r(i8t,"TFXLMRobertaForSequenceClassification"),i8t.forEach(t),m0r=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),g0r=i(ne),PE=n(ne,"LI",{});var GNe=s(PE);MTe=n(GNe,"STRONG",{});var d8t=s(MTe);h0r=r(d8t,"xlnet"),d8t.forEach(t),p0r=r(GNe," \u2014 "),IJ=n(GNe,"A",{href:!0});var c8t=s(IJ);u0r=r(c8t,"TFXLNetForSequenceClassification"),c8t.forEach(t),_0r=r(GNe," (XLNet model)"),GNe.forEach(t),ne.forEach(t),b0r=i(Bl),T(BE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),vOe=i(f),Fc=n(f,"H2",{class:!0});var LXe=s(Fc);IE=n(LXe,"A",{id:!0,class:!0,href:!0});var f8t=s(IE);ETe=n(f8t,"SPAN",{});var m8t=s(ETe);T(D9.$$.fragment,m8t),m8t.forEach(t),f8t.forEach(t),v0r=i(LXe),CTe=n(LXe,"SPAN",{});var g8t=s(CTe);F0r=r(g8t,"TFAutoModelForMultipleChoice"),g8t.forEach(t),LXe.forEach(t),FOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(G9.$$.fragment,Il),T0r=i(Il),Tc=n(Il,"P",{});var sre=s(Tc);M0r=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=n(sre,"A",{href:!0});var h8t=s(NJ);E0r=r(h8t,"from_pretrained()"),h8t.forEach(t),C0r=r(sre," class method or the "),qJ=n(sre,"A",{href:!0});var p8t=s(qJ);w0r=r(p8t,"from_config()"),p8t.forEach(t),A0r=r(sre,` class
method.`),sre.forEach(t),L0r=i(Il),O9=n(Il,"P",{});var yXe=s(O9);y0r=r(yXe,"This class cannot be instantiated directly using "),wTe=n(yXe,"CODE",{});var u8t=s(wTe);x0r=r(u8t,"__init__()"),u8t.forEach(t),$0r=r(yXe," (throws an error)."),yXe.forEach(t),k0r=i(Il),Nt=n(Il,"DIV",{class:!0});var kA=s(Nt);T(V9.$$.fragment,kA),S0r=i(kA),ATe=n(kA,"P",{});var _8t=s(ATe);R0r=r(_8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_8t.forEach(t),P0r=i(kA),Mc=n(kA,"P",{});var lre=s(Mc);B0r=r(lre,`Note:
Loading a model from its configuration file does `),LTe=n(lre,"STRONG",{});var b8t=s(LTe);I0r=r(b8t,"not"),b8t.forEach(t),N0r=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(lre,"A",{href:!0});var v8t=s(jJ);q0r=r(v8t,"from_pretrained()"),v8t.forEach(t),j0r=r(lre," to load the model weights."),lre.forEach(t),D0r=i(kA),T(NE.$$.fragment,kA),kA.forEach(t),G0r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(X9.$$.fragment,Nl),O0r=i(Nl),yTe=n(Nl,"P",{});var F8t=s(yTe);V0r=r(F8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8t.forEach(t),X0r=i(Nl),mn=n(Nl,"P",{});var SA=s(mn);z0r=r(SA,"The model class to instantiate is selected based on the "),xTe=n(SA,"CODE",{});var T8t=s(xTe);W0r=r(T8t,"model_type"),T8t.forEach(t),Q0r=r(SA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(SA,"CODE",{});var M8t=s($Te);H0r=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),U0r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(SA,"CODE",{});var E8t=s(kTe);J0r=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Y0r=r(SA,":"),SA.forEach(t),K0r=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);qE=n(ve,"LI",{});var ONe=s(qE);STe=n(ONe,"STRONG",{});var C8t=s(STe);Z0r=r(C8t,"albert"),C8t.forEach(t),ewr=r(ONe," \u2014 "),DJ=n(ONe,"A",{href:!0});var w8t=s(DJ);owr=r(w8t,"TFAlbertForMultipleChoice"),w8t.forEach(t),rwr=r(ONe," (ALBERT model)"),ONe.forEach(t),twr=i(ve),jE=n(ve,"LI",{});var VNe=s(jE);RTe=n(VNe,"STRONG",{});var A8t=s(RTe);awr=r(A8t,"bert"),A8t.forEach(t),nwr=r(VNe," \u2014 "),GJ=n(VNe,"A",{href:!0});var L8t=s(GJ);swr=r(L8t,"TFBertForMultipleChoice"),L8t.forEach(t),lwr=r(VNe," (BERT model)"),VNe.forEach(t),iwr=i(ve),DE=n(ve,"LI",{});var XNe=s(DE);PTe=n(XNe,"STRONG",{});var y8t=s(PTe);dwr=r(y8t,"camembert"),y8t.forEach(t),cwr=r(XNe," \u2014 "),OJ=n(XNe,"A",{href:!0});var x8t=s(OJ);fwr=r(x8t,"TFCamembertForMultipleChoice"),x8t.forEach(t),mwr=r(XNe," (CamemBERT model)"),XNe.forEach(t),gwr=i(ve),GE=n(ve,"LI",{});var zNe=s(GE);BTe=n(zNe,"STRONG",{});var $8t=s(BTe);hwr=r($8t,"convbert"),$8t.forEach(t),pwr=r(zNe," \u2014 "),VJ=n(zNe,"A",{href:!0});var k8t=s(VJ);uwr=r(k8t,"TFConvBertForMultipleChoice"),k8t.forEach(t),_wr=r(zNe," (ConvBERT model)"),zNe.forEach(t),bwr=i(ve),OE=n(ve,"LI",{});var WNe=s(OE);ITe=n(WNe,"STRONG",{});var S8t=s(ITe);vwr=r(S8t,"distilbert"),S8t.forEach(t),Fwr=r(WNe," \u2014 "),XJ=n(WNe,"A",{href:!0});var R8t=s(XJ);Twr=r(R8t,"TFDistilBertForMultipleChoice"),R8t.forEach(t),Mwr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Ewr=i(ve),VE=n(ve,"LI",{});var QNe=s(VE);NTe=n(QNe,"STRONG",{});var P8t=s(NTe);Cwr=r(P8t,"electra"),P8t.forEach(t),wwr=r(QNe," \u2014 "),zJ=n(QNe,"A",{href:!0});var B8t=s(zJ);Awr=r(B8t,"TFElectraForMultipleChoice"),B8t.forEach(t),Lwr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ywr=i(ve),XE=n(ve,"LI",{});var HNe=s(XE);qTe=n(HNe,"STRONG",{});var I8t=s(qTe);xwr=r(I8t,"flaubert"),I8t.forEach(t),$wr=r(HNe," \u2014 "),WJ=n(HNe,"A",{href:!0});var N8t=s(WJ);kwr=r(N8t,"TFFlaubertForMultipleChoice"),N8t.forEach(t),Swr=r(HNe," (FlauBERT model)"),HNe.forEach(t),Rwr=i(ve),zE=n(ve,"LI",{});var UNe=s(zE);jTe=n(UNe,"STRONG",{});var q8t=s(jTe);Pwr=r(q8t,"funnel"),q8t.forEach(t),Bwr=r(UNe," \u2014 "),QJ=n(UNe,"A",{href:!0});var j8t=s(QJ);Iwr=r(j8t,"TFFunnelForMultipleChoice"),j8t.forEach(t),Nwr=r(UNe," (Funnel Transformer model)"),UNe.forEach(t),qwr=i(ve),WE=n(ve,"LI",{});var JNe=s(WE);DTe=n(JNe,"STRONG",{});var D8t=s(DTe);jwr=r(D8t,"longformer"),D8t.forEach(t),Dwr=r(JNe," \u2014 "),HJ=n(JNe,"A",{href:!0});var G8t=s(HJ);Gwr=r(G8t,"TFLongformerForMultipleChoice"),G8t.forEach(t),Owr=r(JNe," (Longformer model)"),JNe.forEach(t),Vwr=i(ve),QE=n(ve,"LI",{});var YNe=s(QE);GTe=n(YNe,"STRONG",{});var O8t=s(GTe);Xwr=r(O8t,"mobilebert"),O8t.forEach(t),zwr=r(YNe," \u2014 "),UJ=n(YNe,"A",{href:!0});var V8t=s(UJ);Wwr=r(V8t,"TFMobileBertForMultipleChoice"),V8t.forEach(t),Qwr=r(YNe," (MobileBERT model)"),YNe.forEach(t),Hwr=i(ve),HE=n(ve,"LI",{});var KNe=s(HE);OTe=n(KNe,"STRONG",{});var X8t=s(OTe);Uwr=r(X8t,"mpnet"),X8t.forEach(t),Jwr=r(KNe," \u2014 "),JJ=n(KNe,"A",{href:!0});var z8t=s(JJ);Ywr=r(z8t,"TFMPNetForMultipleChoice"),z8t.forEach(t),Kwr=r(KNe," (MPNet model)"),KNe.forEach(t),Zwr=i(ve),UE=n(ve,"LI",{});var ZNe=s(UE);VTe=n(ZNe,"STRONG",{});var W8t=s(VTe);eAr=r(W8t,"rembert"),W8t.forEach(t),oAr=r(ZNe," \u2014 "),YJ=n(ZNe,"A",{href:!0});var Q8t=s(YJ);rAr=r(Q8t,"TFRemBertForMultipleChoice"),Q8t.forEach(t),tAr=r(ZNe," (RemBERT model)"),ZNe.forEach(t),aAr=i(ve),JE=n(ve,"LI",{});var eqe=s(JE);XTe=n(eqe,"STRONG",{});var H8t=s(XTe);nAr=r(H8t,"roberta"),H8t.forEach(t),sAr=r(eqe," \u2014 "),KJ=n(eqe,"A",{href:!0});var U8t=s(KJ);lAr=r(U8t,"TFRobertaForMultipleChoice"),U8t.forEach(t),iAr=r(eqe," (RoBERTa model)"),eqe.forEach(t),dAr=i(ve),YE=n(ve,"LI",{});var oqe=s(YE);zTe=n(oqe,"STRONG",{});var J8t=s(zTe);cAr=r(J8t,"roformer"),J8t.forEach(t),fAr=r(oqe," \u2014 "),ZJ=n(oqe,"A",{href:!0});var Y8t=s(ZJ);mAr=r(Y8t,"TFRoFormerForMultipleChoice"),Y8t.forEach(t),gAr=r(oqe," (RoFormer model)"),oqe.forEach(t),hAr=i(ve),KE=n(ve,"LI",{});var rqe=s(KE);WTe=n(rqe,"STRONG",{});var K8t=s(WTe);pAr=r(K8t,"xlm"),K8t.forEach(t),uAr=r(rqe," \u2014 "),eY=n(rqe,"A",{href:!0});var Z8t=s(eY);_Ar=r(Z8t,"TFXLMForMultipleChoice"),Z8t.forEach(t),bAr=r(rqe," (XLM model)"),rqe.forEach(t),vAr=i(ve),ZE=n(ve,"LI",{});var tqe=s(ZE);QTe=n(tqe,"STRONG",{});var e9t=s(QTe);FAr=r(e9t,"xlm-roberta"),e9t.forEach(t),TAr=r(tqe," \u2014 "),oY=n(tqe,"A",{href:!0});var o9t=s(oY);MAr=r(o9t,"TFXLMRobertaForMultipleChoice"),o9t.forEach(t),EAr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),CAr=i(ve),eC=n(ve,"LI",{});var aqe=s(eC);HTe=n(aqe,"STRONG",{});var r9t=s(HTe);wAr=r(r9t,"xlnet"),r9t.forEach(t),AAr=r(aqe," \u2014 "),rY=n(aqe,"A",{href:!0});var t9t=s(rY);LAr=r(t9t,"TFXLNetForMultipleChoice"),t9t.forEach(t),yAr=r(aqe," (XLNet model)"),aqe.forEach(t),ve.forEach(t),xAr=i(Nl),T(oC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),TOe=i(f),Ec=n(f,"H2",{class:!0});var xXe=s(Ec);rC=n(xXe,"A",{id:!0,class:!0,href:!0});var a9t=s(rC);UTe=n(a9t,"SPAN",{});var n9t=s(UTe);T(z9.$$.fragment,n9t),n9t.forEach(t),a9t.forEach(t),$Ar=i(xXe),JTe=n(xXe,"SPAN",{});var s9t=s(JTe);kAr=r(s9t,"TFAutoModelForNextSentencePrediction"),s9t.forEach(t),xXe.forEach(t),MOe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(W9.$$.fragment,ql),SAr=i(ql),Cc=n(ql,"P",{});var ire=s(Cc);RAr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=n(ire,"A",{href:!0});var l9t=s(tY);PAr=r(l9t,"from_pretrained()"),l9t.forEach(t),BAr=r(ire," class method or the "),aY=n(ire,"A",{href:!0});var i9t=s(aY);IAr=r(i9t,"from_config()"),i9t.forEach(t),NAr=r(ire,` class
method.`),ire.forEach(t),qAr=i(ql),Q9=n(ql,"P",{});var $Xe=s(Q9);jAr=r($Xe,"This class cannot be instantiated directly using "),YTe=n($Xe,"CODE",{});var d9t=s(YTe);DAr=r(d9t,"__init__()"),d9t.forEach(t),GAr=r($Xe," (throws an error)."),$Xe.forEach(t),OAr=i(ql),qt=n(ql,"DIV",{class:!0});var RA=s(qt);T(H9.$$.fragment,RA),VAr=i(RA),KTe=n(RA,"P",{});var c9t=s(KTe);XAr=r(c9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c9t.forEach(t),zAr=i(RA),wc=n(RA,"P",{});var dre=s(wc);WAr=r(dre,`Note:
Loading a model from its configuration file does `),ZTe=n(dre,"STRONG",{});var f9t=s(ZTe);QAr=r(f9t,"not"),f9t.forEach(t),HAr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(dre,"A",{href:!0});var m9t=s(nY);UAr=r(m9t,"from_pretrained()"),m9t.forEach(t),JAr=r(dre," to load the model weights."),dre.forEach(t),YAr=i(RA),T(tC.$$.fragment,RA),RA.forEach(t),KAr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(U9.$$.fragment,jl),ZAr=i(jl),eMe=n(jl,"P",{});var g9t=s(eMe);eLr=r(g9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g9t.forEach(t),oLr=i(jl),gn=n(jl,"P",{});var PA=s(gn);rLr=r(PA,"The model class to instantiate is selected based on the "),oMe=n(PA,"CODE",{});var h9t=s(oMe);tLr=r(h9t,"model_type"),h9t.forEach(t),aLr=r(PA,` property of the config object (either
passed as an argument or loaded from `),rMe=n(PA,"CODE",{});var p9t=s(rMe);nLr=r(p9t,"pretrained_model_name_or_path"),p9t.forEach(t),sLr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(PA,"CODE",{});var u9t=s(tMe);lLr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),iLr=r(PA,":"),PA.forEach(t),dLr=i(jl),J9=n(jl,"UL",{});var kXe=s(J9);aC=n(kXe,"LI",{});var nqe=s(aC);aMe=n(nqe,"STRONG",{});var _9t=s(aMe);cLr=r(_9t,"bert"),_9t.forEach(t),fLr=r(nqe," \u2014 "),sY=n(nqe,"A",{href:!0});var b9t=s(sY);mLr=r(b9t,"TFBertForNextSentencePrediction"),b9t.forEach(t),gLr=r(nqe," (BERT model)"),nqe.forEach(t),hLr=i(kXe),nC=n(kXe,"LI",{});var sqe=s(nC);nMe=n(sqe,"STRONG",{});var v9t=s(nMe);pLr=r(v9t,"mobilebert"),v9t.forEach(t),uLr=r(sqe," \u2014 "),lY=n(sqe,"A",{href:!0});var F9t=s(lY);_Lr=r(F9t,"TFMobileBertForNextSentencePrediction"),F9t.forEach(t),bLr=r(sqe," (MobileBERT model)"),sqe.forEach(t),kXe.forEach(t),vLr=i(jl),T(sC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),EOe=i(f),Ac=n(f,"H2",{class:!0});var SXe=s(Ac);lC=n(SXe,"A",{id:!0,class:!0,href:!0});var T9t=s(lC);sMe=n(T9t,"SPAN",{});var M9t=s(sMe);T(Y9.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),FLr=i(SXe),lMe=n(SXe,"SPAN",{});var E9t=s(lMe);TLr=r(E9t,"TFAutoModelForTableQuestionAnswering"),E9t.forEach(t),SXe.forEach(t),COe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(K9.$$.fragment,Dl),MLr=i(Dl),Lc=n(Dl,"P",{});var cre=s(Lc);ELr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=n(cre,"A",{href:!0});var C9t=s(iY);CLr=r(C9t,"from_pretrained()"),C9t.forEach(t),wLr=r(cre," class method or the "),dY=n(cre,"A",{href:!0});var w9t=s(dY);ALr=r(w9t,"from_config()"),w9t.forEach(t),LLr=r(cre,` class
method.`),cre.forEach(t),yLr=i(Dl),Z9=n(Dl,"P",{});var RXe=s(Z9);xLr=r(RXe,"This class cannot be instantiated directly using "),iMe=n(RXe,"CODE",{});var A9t=s(iMe);$Lr=r(A9t,"__init__()"),A9t.forEach(t),kLr=r(RXe," (throws an error)."),RXe.forEach(t),SLr=i(Dl),jt=n(Dl,"DIV",{class:!0});var BA=s(jt);T(ex.$$.fragment,BA),RLr=i(BA),dMe=n(BA,"P",{});var L9t=s(dMe);PLr=r(L9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L9t.forEach(t),BLr=i(BA),yc=n(BA,"P",{});var fre=s(yc);ILr=r(fre,`Note:
Loading a model from its configuration file does `),cMe=n(fre,"STRONG",{});var y9t=s(cMe);NLr=r(y9t,"not"),y9t.forEach(t),qLr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(fre,"A",{href:!0});var x9t=s(cY);jLr=r(x9t,"from_pretrained()"),x9t.forEach(t),DLr=r(fre," to load the model weights."),fre.forEach(t),GLr=i(BA),T(iC.$$.fragment,BA),BA.forEach(t),OLr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(ox.$$.fragment,Gl),VLr=i(Gl),fMe=n(Gl,"P",{});var $9t=s(fMe);XLr=r($9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$9t.forEach(t),zLr=i(Gl),hn=n(Gl,"P",{});var IA=s(hn);WLr=r(IA,"The model class to instantiate is selected based on the "),mMe=n(IA,"CODE",{});var k9t=s(mMe);QLr=r(k9t,"model_type"),k9t.forEach(t),HLr=r(IA,` property of the config object (either
passed as an argument or loaded from `),gMe=n(IA,"CODE",{});var S9t=s(gMe);ULr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),JLr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(IA,"CODE",{});var R9t=s(hMe);YLr=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),KLr=r(IA,":"),IA.forEach(t),ZLr=i(Gl),pMe=n(Gl,"UL",{});var P9t=s(pMe);dC=n(P9t,"LI",{});var lqe=s(dC);uMe=n(lqe,"STRONG",{});var B9t=s(uMe);eyr=r(B9t,"tapas"),B9t.forEach(t),oyr=r(lqe," \u2014 "),fY=n(lqe,"A",{href:!0});var I9t=s(fY);ryr=r(I9t,"TFTapasForQuestionAnswering"),I9t.forEach(t),tyr=r(lqe," (TAPAS model)"),lqe.forEach(t),P9t.forEach(t),ayr=i(Gl),T(cC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),wOe=i(f),xc=n(f,"H2",{class:!0});var PXe=s(xc);fC=n(PXe,"A",{id:!0,class:!0,href:!0});var N9t=s(fC);_Me=n(N9t,"SPAN",{});var q9t=s(_Me);T(rx.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),nyr=i(PXe),bMe=n(PXe,"SPAN",{});var j9t=s(bMe);syr=r(j9t,"TFAutoModelForTokenClassification"),j9t.forEach(t),PXe.forEach(t),AOe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(tx.$$.fragment,Ol),lyr=i(Ol),$c=n(Ol,"P",{});var mre=s($c);iyr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=n(mre,"A",{href:!0});var D9t=s(mY);dyr=r(D9t,"from_pretrained()"),D9t.forEach(t),cyr=r(mre," class method or the "),gY=n(mre,"A",{href:!0});var G9t=s(gY);fyr=r(G9t,"from_config()"),G9t.forEach(t),myr=r(mre,` class
method.`),mre.forEach(t),gyr=i(Ol),ax=n(Ol,"P",{});var BXe=s(ax);hyr=r(BXe,"This class cannot be instantiated directly using "),vMe=n(BXe,"CODE",{});var O9t=s(vMe);pyr=r(O9t,"__init__()"),O9t.forEach(t),uyr=r(BXe," (throws an error)."),BXe.forEach(t),_yr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var NA=s(Dt);T(nx.$$.fragment,NA),byr=i(NA),FMe=n(NA,"P",{});var V9t=s(FMe);vyr=r(V9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V9t.forEach(t),Fyr=i(NA),kc=n(NA,"P",{});var gre=s(kc);Tyr=r(gre,`Note:
Loading a model from its configuration file does `),TMe=n(gre,"STRONG",{});var X9t=s(TMe);Myr=r(X9t,"not"),X9t.forEach(t),Eyr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(gre,"A",{href:!0});var z9t=s(hY);Cyr=r(z9t,"from_pretrained()"),z9t.forEach(t),wyr=r(gre," to load the model weights."),gre.forEach(t),Ayr=i(NA),T(mC.$$.fragment,NA),NA.forEach(t),Lyr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(sx.$$.fragment,Vl),yyr=i(Vl),MMe=n(Vl,"P",{});var W9t=s(MMe);xyr=r(W9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W9t.forEach(t),$yr=i(Vl),pn=n(Vl,"P",{});var qA=s(pn);kyr=r(qA,"The model class to instantiate is selected based on the "),EMe=n(qA,"CODE",{});var Q9t=s(EMe);Syr=r(Q9t,"model_type"),Q9t.forEach(t),Ryr=r(qA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(qA,"CODE",{});var H9t=s(CMe);Pyr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),Byr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(qA,"CODE",{});var U9t=s(wMe);Iyr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),Nyr=r(qA,":"),qA.forEach(t),qyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);gC=n(me,"LI",{});var iqe=s(gC);AMe=n(iqe,"STRONG",{});var J9t=s(AMe);jyr=r(J9t,"albert"),J9t.forEach(t),Dyr=r(iqe," \u2014 "),pY=n(iqe,"A",{href:!0});var Y9t=s(pY);Gyr=r(Y9t,"TFAlbertForTokenClassification"),Y9t.forEach(t),Oyr=r(iqe," (ALBERT model)"),iqe.forEach(t),Vyr=i(me),hC=n(me,"LI",{});var dqe=s(hC);LMe=n(dqe,"STRONG",{});var K9t=s(LMe);Xyr=r(K9t,"bert"),K9t.forEach(t),zyr=r(dqe," \u2014 "),uY=n(dqe,"A",{href:!0});var Z9t=s(uY);Wyr=r(Z9t,"TFBertForTokenClassification"),Z9t.forEach(t),Qyr=r(dqe," (BERT model)"),dqe.forEach(t),Hyr=i(me),pC=n(me,"LI",{});var cqe=s(pC);yMe=n(cqe,"STRONG",{});var ext=s(yMe);Uyr=r(ext,"camembert"),ext.forEach(t),Jyr=r(cqe," \u2014 "),_Y=n(cqe,"A",{href:!0});var oxt=s(_Y);Yyr=r(oxt,"TFCamembertForTokenClassification"),oxt.forEach(t),Kyr=r(cqe," (CamemBERT model)"),cqe.forEach(t),Zyr=i(me),uC=n(me,"LI",{});var fqe=s(uC);xMe=n(fqe,"STRONG",{});var rxt=s(xMe);e8r=r(rxt,"convbert"),rxt.forEach(t),o8r=r(fqe," \u2014 "),bY=n(fqe,"A",{href:!0});var txt=s(bY);r8r=r(txt,"TFConvBertForTokenClassification"),txt.forEach(t),t8r=r(fqe," (ConvBERT model)"),fqe.forEach(t),a8r=i(me),_C=n(me,"LI",{});var mqe=s(_C);$Me=n(mqe,"STRONG",{});var axt=s($Me);n8r=r(axt,"deberta"),axt.forEach(t),s8r=r(mqe," \u2014 "),vY=n(mqe,"A",{href:!0});var nxt=s(vY);l8r=r(nxt,"TFDebertaForTokenClassification"),nxt.forEach(t),i8r=r(mqe," (DeBERTa model)"),mqe.forEach(t),d8r=i(me),bC=n(me,"LI",{});var gqe=s(bC);kMe=n(gqe,"STRONG",{});var sxt=s(kMe);c8r=r(sxt,"deberta-v2"),sxt.forEach(t),f8r=r(gqe," \u2014 "),FY=n(gqe,"A",{href:!0});var lxt=s(FY);m8r=r(lxt,"TFDebertaV2ForTokenClassification"),lxt.forEach(t),g8r=r(gqe," (DeBERTa-v2 model)"),gqe.forEach(t),h8r=i(me),vC=n(me,"LI",{});var hqe=s(vC);SMe=n(hqe,"STRONG",{});var ixt=s(SMe);p8r=r(ixt,"distilbert"),ixt.forEach(t),u8r=r(hqe," \u2014 "),TY=n(hqe,"A",{href:!0});var dxt=s(TY);_8r=r(dxt,"TFDistilBertForTokenClassification"),dxt.forEach(t),b8r=r(hqe," (DistilBERT model)"),hqe.forEach(t),v8r=i(me),FC=n(me,"LI",{});var pqe=s(FC);RMe=n(pqe,"STRONG",{});var cxt=s(RMe);F8r=r(cxt,"electra"),cxt.forEach(t),T8r=r(pqe," \u2014 "),MY=n(pqe,"A",{href:!0});var fxt=s(MY);M8r=r(fxt,"TFElectraForTokenClassification"),fxt.forEach(t),E8r=r(pqe," (ELECTRA model)"),pqe.forEach(t),C8r=i(me),TC=n(me,"LI",{});var uqe=s(TC);PMe=n(uqe,"STRONG",{});var mxt=s(PMe);w8r=r(mxt,"flaubert"),mxt.forEach(t),A8r=r(uqe," \u2014 "),EY=n(uqe,"A",{href:!0});var gxt=s(EY);L8r=r(gxt,"TFFlaubertForTokenClassification"),gxt.forEach(t),y8r=r(uqe," (FlauBERT model)"),uqe.forEach(t),x8r=i(me),MC=n(me,"LI",{});var _qe=s(MC);BMe=n(_qe,"STRONG",{});var hxt=s(BMe);$8r=r(hxt,"funnel"),hxt.forEach(t),k8r=r(_qe," \u2014 "),CY=n(_qe,"A",{href:!0});var pxt=s(CY);S8r=r(pxt,"TFFunnelForTokenClassification"),pxt.forEach(t),R8r=r(_qe," (Funnel Transformer model)"),_qe.forEach(t),P8r=i(me),EC=n(me,"LI",{});var bqe=s(EC);IMe=n(bqe,"STRONG",{});var uxt=s(IMe);B8r=r(uxt,"layoutlm"),uxt.forEach(t),I8r=r(bqe," \u2014 "),wY=n(bqe,"A",{href:!0});var _xt=s(wY);N8r=r(_xt,"TFLayoutLMForTokenClassification"),_xt.forEach(t),q8r=r(bqe," (LayoutLM model)"),bqe.forEach(t),j8r=i(me),CC=n(me,"LI",{});var vqe=s(CC);NMe=n(vqe,"STRONG",{});var bxt=s(NMe);D8r=r(bxt,"longformer"),bxt.forEach(t),G8r=r(vqe," \u2014 "),AY=n(vqe,"A",{href:!0});var vxt=s(AY);O8r=r(vxt,"TFLongformerForTokenClassification"),vxt.forEach(t),V8r=r(vqe," (Longformer model)"),vqe.forEach(t),X8r=i(me),wC=n(me,"LI",{});var Fqe=s(wC);qMe=n(Fqe,"STRONG",{});var Fxt=s(qMe);z8r=r(Fxt,"mobilebert"),Fxt.forEach(t),W8r=r(Fqe," \u2014 "),LY=n(Fqe,"A",{href:!0});var Txt=s(LY);Q8r=r(Txt,"TFMobileBertForTokenClassification"),Txt.forEach(t),H8r=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),U8r=i(me),AC=n(me,"LI",{});var Tqe=s(AC);jMe=n(Tqe,"STRONG",{});var Mxt=s(jMe);J8r=r(Mxt,"mpnet"),Mxt.forEach(t),Y8r=r(Tqe," \u2014 "),yY=n(Tqe,"A",{href:!0});var Ext=s(yY);K8r=r(Ext,"TFMPNetForTokenClassification"),Ext.forEach(t),Z8r=r(Tqe," (MPNet model)"),Tqe.forEach(t),e9r=i(me),LC=n(me,"LI",{});var Mqe=s(LC);DMe=n(Mqe,"STRONG",{});var Cxt=s(DMe);o9r=r(Cxt,"rembert"),Cxt.forEach(t),r9r=r(Mqe," \u2014 "),xY=n(Mqe,"A",{href:!0});var wxt=s(xY);t9r=r(wxt,"TFRemBertForTokenClassification"),wxt.forEach(t),a9r=r(Mqe," (RemBERT model)"),Mqe.forEach(t),n9r=i(me),yC=n(me,"LI",{});var Eqe=s(yC);GMe=n(Eqe,"STRONG",{});var Axt=s(GMe);s9r=r(Axt,"roberta"),Axt.forEach(t),l9r=r(Eqe," \u2014 "),$Y=n(Eqe,"A",{href:!0});var Lxt=s($Y);i9r=r(Lxt,"TFRobertaForTokenClassification"),Lxt.forEach(t),d9r=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),c9r=i(me),xC=n(me,"LI",{});var Cqe=s(xC);OMe=n(Cqe,"STRONG",{});var yxt=s(OMe);f9r=r(yxt,"roformer"),yxt.forEach(t),m9r=r(Cqe," \u2014 "),kY=n(Cqe,"A",{href:!0});var xxt=s(kY);g9r=r(xxt,"TFRoFormerForTokenClassification"),xxt.forEach(t),h9r=r(Cqe," (RoFormer model)"),Cqe.forEach(t),p9r=i(me),$C=n(me,"LI",{});var wqe=s($C);VMe=n(wqe,"STRONG",{});var $xt=s(VMe);u9r=r($xt,"xlm"),$xt.forEach(t),_9r=r(wqe," \u2014 "),SY=n(wqe,"A",{href:!0});var kxt=s(SY);b9r=r(kxt,"TFXLMForTokenClassification"),kxt.forEach(t),v9r=r(wqe," (XLM model)"),wqe.forEach(t),F9r=i(me),kC=n(me,"LI",{});var Aqe=s(kC);XMe=n(Aqe,"STRONG",{});var Sxt=s(XMe);T9r=r(Sxt,"xlm-roberta"),Sxt.forEach(t),M9r=r(Aqe," \u2014 "),RY=n(Aqe,"A",{href:!0});var Rxt=s(RY);E9r=r(Rxt,"TFXLMRobertaForTokenClassification"),Rxt.forEach(t),C9r=r(Aqe," (XLM-RoBERTa model)"),Aqe.forEach(t),w9r=i(me),SC=n(me,"LI",{});var Lqe=s(SC);zMe=n(Lqe,"STRONG",{});var Pxt=s(zMe);A9r=r(Pxt,"xlnet"),Pxt.forEach(t),L9r=r(Lqe," \u2014 "),PY=n(Lqe,"A",{href:!0});var Bxt=s(PY);y9r=r(Bxt,"TFXLNetForTokenClassification"),Bxt.forEach(t),x9r=r(Lqe," (XLNet model)"),Lqe.forEach(t),me.forEach(t),$9r=i(Vl),T(RC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),LOe=i(f),Sc=n(f,"H2",{class:!0});var IXe=s(Sc);PC=n(IXe,"A",{id:!0,class:!0,href:!0});var Ixt=s(PC);WMe=n(Ixt,"SPAN",{});var Nxt=s(WMe);T(lx.$$.fragment,Nxt),Nxt.forEach(t),Ixt.forEach(t),k9r=i(IXe),QMe=n(IXe,"SPAN",{});var qxt=s(QMe);S9r=r(qxt,"TFAutoModelForQuestionAnswering"),qxt.forEach(t),IXe.forEach(t),yOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(ix.$$.fragment,Xl),R9r=i(Xl),Rc=n(Xl,"P",{});var hre=s(Rc);P9r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=n(hre,"A",{href:!0});var jxt=s(BY);B9r=r(jxt,"from_pretrained()"),jxt.forEach(t),I9r=r(hre," class method or the "),IY=n(hre,"A",{href:!0});var Dxt=s(IY);N9r=r(Dxt,"from_config()"),Dxt.forEach(t),q9r=r(hre,` class
method.`),hre.forEach(t),j9r=i(Xl),dx=n(Xl,"P",{});var NXe=s(dx);D9r=r(NXe,"This class cannot be instantiated directly using "),HMe=n(NXe,"CODE",{});var Gxt=s(HMe);G9r=r(Gxt,"__init__()"),Gxt.forEach(t),O9r=r(NXe," (throws an error)."),NXe.forEach(t),V9r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var jA=s(Gt);T(cx.$$.fragment,jA),X9r=i(jA),UMe=n(jA,"P",{});var Oxt=s(UMe);z9r=r(Oxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oxt.forEach(t),W9r=i(jA),Pc=n(jA,"P",{});var pre=s(Pc);Q9r=r(pre,`Note:
Loading a model from its configuration file does `),JMe=n(pre,"STRONG",{});var Vxt=s(JMe);H9r=r(Vxt,"not"),Vxt.forEach(t),U9r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(pre,"A",{href:!0});var Xxt=s(NY);J9r=r(Xxt,"from_pretrained()"),Xxt.forEach(t),Y9r=r(pre," to load the model weights."),pre.forEach(t),K9r=i(jA),T(BC.$$.fragment,jA),jA.forEach(t),Z9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(fx.$$.fragment,zl),exr=i(zl),YMe=n(zl,"P",{});var zxt=s(YMe);oxr=r(zxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zxt.forEach(t),rxr=i(zl),un=n(zl,"P",{});var DA=s(un);txr=r(DA,"The model class to instantiate is selected based on the "),KMe=n(DA,"CODE",{});var Wxt=s(KMe);axr=r(Wxt,"model_type"),Wxt.forEach(t),nxr=r(DA,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(DA,"CODE",{});var Qxt=s(ZMe);sxr=r(Qxt,"pretrained_model_name_or_path"),Qxt.forEach(t),lxr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(DA,"CODE",{});var Hxt=s(e4e);ixr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),dxr=r(DA,":"),DA.forEach(t),cxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);IC=n(ge,"LI",{});var yqe=s(IC);o4e=n(yqe,"STRONG",{});var Uxt=s(o4e);fxr=r(Uxt,"albert"),Uxt.forEach(t),mxr=r(yqe," \u2014 "),qY=n(yqe,"A",{href:!0});var Jxt=s(qY);gxr=r(Jxt,"TFAlbertForQuestionAnswering"),Jxt.forEach(t),hxr=r(yqe," (ALBERT model)"),yqe.forEach(t),pxr=i(ge),NC=n(ge,"LI",{});var xqe=s(NC);r4e=n(xqe,"STRONG",{});var Yxt=s(r4e);uxr=r(Yxt,"bert"),Yxt.forEach(t),_xr=r(xqe," \u2014 "),jY=n(xqe,"A",{href:!0});var Kxt=s(jY);bxr=r(Kxt,"TFBertForQuestionAnswering"),Kxt.forEach(t),vxr=r(xqe," (BERT model)"),xqe.forEach(t),Fxr=i(ge),qC=n(ge,"LI",{});var $qe=s(qC);t4e=n($qe,"STRONG",{});var Zxt=s(t4e);Txr=r(Zxt,"camembert"),Zxt.forEach(t),Mxr=r($qe," \u2014 "),DY=n($qe,"A",{href:!0});var e$t=s(DY);Exr=r(e$t,"TFCamembertForQuestionAnswering"),e$t.forEach(t),Cxr=r($qe," (CamemBERT model)"),$qe.forEach(t),wxr=i(ge),jC=n(ge,"LI",{});var kqe=s(jC);a4e=n(kqe,"STRONG",{});var o$t=s(a4e);Axr=r(o$t,"convbert"),o$t.forEach(t),Lxr=r(kqe," \u2014 "),GY=n(kqe,"A",{href:!0});var r$t=s(GY);yxr=r(r$t,"TFConvBertForQuestionAnswering"),r$t.forEach(t),xxr=r(kqe," (ConvBERT model)"),kqe.forEach(t),$xr=i(ge),DC=n(ge,"LI",{});var Sqe=s(DC);n4e=n(Sqe,"STRONG",{});var t$t=s(n4e);kxr=r(t$t,"deberta"),t$t.forEach(t),Sxr=r(Sqe," \u2014 "),OY=n(Sqe,"A",{href:!0});var a$t=s(OY);Rxr=r(a$t,"TFDebertaForQuestionAnswering"),a$t.forEach(t),Pxr=r(Sqe," (DeBERTa model)"),Sqe.forEach(t),Bxr=i(ge),GC=n(ge,"LI",{});var Rqe=s(GC);s4e=n(Rqe,"STRONG",{});var n$t=s(s4e);Ixr=r(n$t,"deberta-v2"),n$t.forEach(t),Nxr=r(Rqe," \u2014 "),VY=n(Rqe,"A",{href:!0});var s$t=s(VY);qxr=r(s$t,"TFDebertaV2ForQuestionAnswering"),s$t.forEach(t),jxr=r(Rqe," (DeBERTa-v2 model)"),Rqe.forEach(t),Dxr=i(ge),OC=n(ge,"LI",{});var Pqe=s(OC);l4e=n(Pqe,"STRONG",{});var l$t=s(l4e);Gxr=r(l$t,"distilbert"),l$t.forEach(t),Oxr=r(Pqe," \u2014 "),XY=n(Pqe,"A",{href:!0});var i$t=s(XY);Vxr=r(i$t,"TFDistilBertForQuestionAnswering"),i$t.forEach(t),Xxr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),zxr=i(ge),VC=n(ge,"LI",{});var Bqe=s(VC);i4e=n(Bqe,"STRONG",{});var d$t=s(i4e);Wxr=r(d$t,"electra"),d$t.forEach(t),Qxr=r(Bqe," \u2014 "),zY=n(Bqe,"A",{href:!0});var c$t=s(zY);Hxr=r(c$t,"TFElectraForQuestionAnswering"),c$t.forEach(t),Uxr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),Jxr=i(ge),XC=n(ge,"LI",{});var Iqe=s(XC);d4e=n(Iqe,"STRONG",{});var f$t=s(d4e);Yxr=r(f$t,"flaubert"),f$t.forEach(t),Kxr=r(Iqe," \u2014 "),WY=n(Iqe,"A",{href:!0});var m$t=s(WY);Zxr=r(m$t,"TFFlaubertForQuestionAnsweringSimple"),m$t.forEach(t),e$r=r(Iqe," (FlauBERT model)"),Iqe.forEach(t),o$r=i(ge),zC=n(ge,"LI",{});var Nqe=s(zC);c4e=n(Nqe,"STRONG",{});var g$t=s(c4e);r$r=r(g$t,"funnel"),g$t.forEach(t),t$r=r(Nqe," \u2014 "),QY=n(Nqe,"A",{href:!0});var h$t=s(QY);a$r=r(h$t,"TFFunnelForQuestionAnswering"),h$t.forEach(t),n$r=r(Nqe," (Funnel Transformer model)"),Nqe.forEach(t),s$r=i(ge),WC=n(ge,"LI",{});var qqe=s(WC);f4e=n(qqe,"STRONG",{});var p$t=s(f4e);l$r=r(p$t,"gptj"),p$t.forEach(t),i$r=r(qqe," \u2014 "),HY=n(qqe,"A",{href:!0});var u$t=s(HY);d$r=r(u$t,"TFGPTJForQuestionAnswering"),u$t.forEach(t),c$r=r(qqe," (GPT-J model)"),qqe.forEach(t),f$r=i(ge),QC=n(ge,"LI",{});var jqe=s(QC);m4e=n(jqe,"STRONG",{});var _$t=s(m4e);m$r=r(_$t,"longformer"),_$t.forEach(t),g$r=r(jqe," \u2014 "),UY=n(jqe,"A",{href:!0});var b$t=s(UY);h$r=r(b$t,"TFLongformerForQuestionAnswering"),b$t.forEach(t),p$r=r(jqe," (Longformer model)"),jqe.forEach(t),u$r=i(ge),HC=n(ge,"LI",{});var Dqe=s(HC);g4e=n(Dqe,"STRONG",{});var v$t=s(g4e);_$r=r(v$t,"mobilebert"),v$t.forEach(t),b$r=r(Dqe," \u2014 "),JY=n(Dqe,"A",{href:!0});var F$t=s(JY);v$r=r(F$t,"TFMobileBertForQuestionAnswering"),F$t.forEach(t),F$r=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),T$r=i(ge),UC=n(ge,"LI",{});var Gqe=s(UC);h4e=n(Gqe,"STRONG",{});var T$t=s(h4e);M$r=r(T$t,"mpnet"),T$t.forEach(t),E$r=r(Gqe," \u2014 "),YY=n(Gqe,"A",{href:!0});var M$t=s(YY);C$r=r(M$t,"TFMPNetForQuestionAnswering"),M$t.forEach(t),w$r=r(Gqe," (MPNet model)"),Gqe.forEach(t),A$r=i(ge),JC=n(ge,"LI",{});var Oqe=s(JC);p4e=n(Oqe,"STRONG",{});var E$t=s(p4e);L$r=r(E$t,"rembert"),E$t.forEach(t),y$r=r(Oqe," \u2014 "),KY=n(Oqe,"A",{href:!0});var C$t=s(KY);x$r=r(C$t,"TFRemBertForQuestionAnswering"),C$t.forEach(t),$$r=r(Oqe," (RemBERT model)"),Oqe.forEach(t),k$r=i(ge),YC=n(ge,"LI",{});var Vqe=s(YC);u4e=n(Vqe,"STRONG",{});var w$t=s(u4e);S$r=r(w$t,"roberta"),w$t.forEach(t),R$r=r(Vqe," \u2014 "),ZY=n(Vqe,"A",{href:!0});var A$t=s(ZY);P$r=r(A$t,"TFRobertaForQuestionAnswering"),A$t.forEach(t),B$r=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),I$r=i(ge),KC=n(ge,"LI",{});var Xqe=s(KC);_4e=n(Xqe,"STRONG",{});var L$t=s(_4e);N$r=r(L$t,"roformer"),L$t.forEach(t),q$r=r(Xqe," \u2014 "),eK=n(Xqe,"A",{href:!0});var y$t=s(eK);j$r=r(y$t,"TFRoFormerForQuestionAnswering"),y$t.forEach(t),D$r=r(Xqe," (RoFormer model)"),Xqe.forEach(t),G$r=i(ge),ZC=n(ge,"LI",{});var zqe=s(ZC);b4e=n(zqe,"STRONG",{});var x$t=s(b4e);O$r=r(x$t,"xlm"),x$t.forEach(t),V$r=r(zqe," \u2014 "),oK=n(zqe,"A",{href:!0});var $$t=s(oK);X$r=r($$t,"TFXLMForQuestionAnsweringSimple"),$$t.forEach(t),z$r=r(zqe," (XLM model)"),zqe.forEach(t),W$r=i(ge),e5=n(ge,"LI",{});var Wqe=s(e5);v4e=n(Wqe,"STRONG",{});var k$t=s(v4e);Q$r=r(k$t,"xlm-roberta"),k$t.forEach(t),H$r=r(Wqe," \u2014 "),rK=n(Wqe,"A",{href:!0});var S$t=s(rK);U$r=r(S$t,"TFXLMRobertaForQuestionAnswering"),S$t.forEach(t),J$r=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),Y$r=i(ge),o5=n(ge,"LI",{});var Qqe=s(o5);F4e=n(Qqe,"STRONG",{});var R$t=s(F4e);K$r=r(R$t,"xlnet"),R$t.forEach(t),Z$r=r(Qqe," \u2014 "),tK=n(Qqe,"A",{href:!0});var P$t=s(tK);ekr=r(P$t,"TFXLNetForQuestionAnsweringSimple"),P$t.forEach(t),okr=r(Qqe," (XLNet model)"),Qqe.forEach(t),ge.forEach(t),rkr=i(zl),T(r5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),xOe=i(f),Bc=n(f,"H2",{class:!0});var qXe=s(Bc);t5=n(qXe,"A",{id:!0,class:!0,href:!0});var B$t=s(t5);T4e=n(B$t,"SPAN",{});var I$t=s(T4e);T(mx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),tkr=i(qXe),M4e=n(qXe,"SPAN",{});var N$t=s(M4e);akr=r(N$t,"TFAutoModelForVision2Seq"),N$t.forEach(t),qXe.forEach(t),$Oe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(gx.$$.fragment,Wl),nkr=i(Wl),Ic=n(Wl,"P",{});var ure=s(Ic);skr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=n(ure,"A",{href:!0});var q$t=s(aK);lkr=r(q$t,"from_pretrained()"),q$t.forEach(t),ikr=r(ure," class method or the "),nK=n(ure,"A",{href:!0});var j$t=s(nK);dkr=r(j$t,"from_config()"),j$t.forEach(t),ckr=r(ure,` class
method.`),ure.forEach(t),fkr=i(Wl),hx=n(Wl,"P",{});var jXe=s(hx);mkr=r(jXe,"This class cannot be instantiated directly using "),E4e=n(jXe,"CODE",{});var D$t=s(E4e);gkr=r(D$t,"__init__()"),D$t.forEach(t),hkr=r(jXe," (throws an error)."),jXe.forEach(t),pkr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var GA=s(Ot);T(px.$$.fragment,GA),ukr=i(GA),C4e=n(GA,"P",{});var G$t=s(C4e);_kr=r(G$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G$t.forEach(t),bkr=i(GA),Nc=n(GA,"P",{});var _re=s(Nc);vkr=r(_re,`Note:
Loading a model from its configuration file does `),w4e=n(_re,"STRONG",{});var O$t=s(w4e);Fkr=r(O$t,"not"),O$t.forEach(t),Tkr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(_re,"A",{href:!0});var V$t=s(sK);Mkr=r(V$t,"from_pretrained()"),V$t.forEach(t),Ekr=r(_re," to load the model weights."),_re.forEach(t),Ckr=i(GA),T(a5.$$.fragment,GA),GA.forEach(t),wkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(ux.$$.fragment,Ql),Akr=i(Ql),A4e=n(Ql,"P",{});var X$t=s(A4e);Lkr=r(X$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X$t.forEach(t),ykr=i(Ql),_n=n(Ql,"P",{});var OA=s(_n);xkr=r(OA,"The model class to instantiate is selected based on the "),L4e=n(OA,"CODE",{});var z$t=s(L4e);$kr=r(z$t,"model_type"),z$t.forEach(t),kkr=r(OA,` property of the config object (either
passed as an argument or loaded from `),y4e=n(OA,"CODE",{});var W$t=s(y4e);Skr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),Rkr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(OA,"CODE",{});var Q$t=s(x4e);Pkr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),Bkr=r(OA,":"),OA.forEach(t),Ikr=i(Ql),$4e=n(Ql,"UL",{});var H$t=s($4e);n5=n(H$t,"LI",{});var Hqe=s(n5);k4e=n(Hqe,"STRONG",{});var U$t=s(k4e);Nkr=r(U$t,"vision-encoder-decoder"),U$t.forEach(t),qkr=r(Hqe," \u2014 "),lK=n(Hqe,"A",{href:!0});var J$t=s(lK);jkr=r(J$t,"TFVisionEncoderDecoderModel"),J$t.forEach(t),Dkr=r(Hqe," (Vision Encoder decoder model)"),Hqe.forEach(t),H$t.forEach(t),Gkr=i(Ql),T(s5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),kOe=i(f),qc=n(f,"H2",{class:!0});var DXe=s(qc);l5=n(DXe,"A",{id:!0,class:!0,href:!0});var Y$t=s(l5);S4e=n(Y$t,"SPAN",{});var K$t=s(S4e);T(_x.$$.fragment,K$t),K$t.forEach(t),Y$t.forEach(t),Okr=i(DXe),R4e=n(DXe,"SPAN",{});var Z$t=s(R4e);Vkr=r(Z$t,"TFAutoModelForSpeechSeq2Seq"),Z$t.forEach(t),DXe.forEach(t),SOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(bx.$$.fragment,Hl),Xkr=i(Hl),jc=n(Hl,"P",{});var bre=s(jc);zkr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=n(bre,"A",{href:!0});var ekt=s(iK);Wkr=r(ekt,"from_pretrained()"),ekt.forEach(t),Qkr=r(bre," class method or the "),dK=n(bre,"A",{href:!0});var okt=s(dK);Hkr=r(okt,"from_config()"),okt.forEach(t),Ukr=r(bre,` class
method.`),bre.forEach(t),Jkr=i(Hl),vx=n(Hl,"P",{});var GXe=s(vx);Ykr=r(GXe,"This class cannot be instantiated directly using "),P4e=n(GXe,"CODE",{});var rkt=s(P4e);Kkr=r(rkt,"__init__()"),rkt.forEach(t),Zkr=r(GXe," (throws an error)."),GXe.forEach(t),eSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var VA=s(Vt);T(Fx.$$.fragment,VA),oSr=i(VA),B4e=n(VA,"P",{});var tkt=s(B4e);rSr=r(tkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tkt.forEach(t),tSr=i(VA),Dc=n(VA,"P",{});var vre=s(Dc);aSr=r(vre,`Note:
Loading a model from its configuration file does `),I4e=n(vre,"STRONG",{});var akt=s(I4e);nSr=r(akt,"not"),akt.forEach(t),sSr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(vre,"A",{href:!0});var nkt=s(cK);lSr=r(nkt,"from_pretrained()"),nkt.forEach(t),iSr=r(vre," to load the model weights."),vre.forEach(t),dSr=i(VA),T(i5.$$.fragment,VA),VA.forEach(t),cSr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Tx.$$.fragment,Ul),fSr=i(Ul),N4e=n(Ul,"P",{});var skt=s(N4e);mSr=r(skt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),skt.forEach(t),gSr=i(Ul),bn=n(Ul,"P",{});var XA=s(bn);hSr=r(XA,"The model class to instantiate is selected based on the "),q4e=n(XA,"CODE",{});var lkt=s(q4e);pSr=r(lkt,"model_type"),lkt.forEach(t),uSr=r(XA,` property of the config object (either
passed as an argument or loaded from `),j4e=n(XA,"CODE",{});var ikt=s(j4e);_Sr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),bSr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(XA,"CODE",{});var dkt=s(D4e);vSr=r(dkt,"pretrained_model_name_or_path"),dkt.forEach(t),FSr=r(XA,":"),XA.forEach(t),TSr=i(Ul),G4e=n(Ul,"UL",{});var ckt=s(G4e);d5=n(ckt,"LI",{});var Uqe=s(d5);O4e=n(Uqe,"STRONG",{});var fkt=s(O4e);MSr=r(fkt,"speech_to_text"),fkt.forEach(t),ESr=r(Uqe," \u2014 "),fK=n(Uqe,"A",{href:!0});var mkt=s(fK);CSr=r(mkt,"TFSpeech2TextForConditionalGeneration"),mkt.forEach(t),wSr=r(Uqe," (Speech2Text model)"),Uqe.forEach(t),ckt.forEach(t),ASr=i(Ul),T(c5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ROe=i(f),Gc=n(f,"H2",{class:!0});var OXe=s(Gc);f5=n(OXe,"A",{id:!0,class:!0,href:!0});var gkt=s(f5);V4e=n(gkt,"SPAN",{});var hkt=s(V4e);T(Mx.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),LSr=i(OXe),X4e=n(OXe,"SPAN",{});var pkt=s(X4e);ySr=r(pkt,"FlaxAutoModel"),pkt.forEach(t),OXe.forEach(t),POe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Ex.$$.fragment,Jl),xSr=i(Jl),Oc=n(Jl,"P",{});var Fre=s(Oc);$Sr=r(Fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=n(Fre,"A",{href:!0});var ukt=s(mK);kSr=r(ukt,"from_pretrained()"),ukt.forEach(t),SSr=r(Fre," class method or the "),gK=n(Fre,"A",{href:!0});var _kt=s(gK);RSr=r(_kt,"from_config()"),_kt.forEach(t),PSr=r(Fre,` class
method.`),Fre.forEach(t),BSr=i(Jl),Cx=n(Jl,"P",{});var VXe=s(Cx);ISr=r(VXe,"This class cannot be instantiated directly using "),z4e=n(VXe,"CODE",{});var bkt=s(z4e);NSr=r(bkt,"__init__()"),bkt.forEach(t),qSr=r(VXe," (throws an error)."),VXe.forEach(t),jSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var zA=s(Xt);T(wx.$$.fragment,zA),DSr=i(zA),W4e=n(zA,"P",{});var vkt=s(W4e);GSr=r(vkt,"Instantiates one of the base model classes of the library from a configuration."),vkt.forEach(t),OSr=i(zA),Vc=n(zA,"P",{});var Tre=s(Vc);VSr=r(Tre,`Note:
Loading a model from its configuration file does `),Q4e=n(Tre,"STRONG",{});var Fkt=s(Q4e);XSr=r(Fkt,"not"),Fkt.forEach(t),zSr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Tre,"A",{href:!0});var Tkt=s(hK);WSr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),QSr=r(Tre," to load the model weights."),Tre.forEach(t),HSr=i(zA),T(m5.$$.fragment,zA),zA.forEach(t),USr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Ax.$$.fragment,Yl),JSr=i(Yl),H4e=n(Yl,"P",{});var Mkt=s(H4e);YSr=r(Mkt,"Instantiate one of the base model classes of the library from a pretrained model."),Mkt.forEach(t),KSr=i(Yl),vn=n(Yl,"P",{});var WA=s(vn);ZSr=r(WA,"The model class to instantiate is selected based on the "),U4e=n(WA,"CODE",{});var Ekt=s(U4e);eRr=r(Ekt,"model_type"),Ekt.forEach(t),oRr=r(WA,` property of the config object (either
passed as an argument or loaded from `),J4e=n(WA,"CODE",{});var Ckt=s(J4e);rRr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),tRr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(WA,"CODE",{});var wkt=s(Y4e);aRr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),nRr=r(WA,":"),WA.forEach(t),sRr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);g5=n(ae,"LI",{});var Jqe=s(g5);K4e=n(Jqe,"STRONG",{});var Akt=s(K4e);lRr=r(Akt,"albert"),Akt.forEach(t),iRr=r(Jqe," \u2014 "),pK=n(Jqe,"A",{href:!0});var Lkt=s(pK);dRr=r(Lkt,"FlaxAlbertModel"),Lkt.forEach(t),cRr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),fRr=i(ae),h5=n(ae,"LI",{});var Yqe=s(h5);Z4e=n(Yqe,"STRONG",{});var ykt=s(Z4e);mRr=r(ykt,"bart"),ykt.forEach(t),gRr=r(Yqe," \u2014 "),uK=n(Yqe,"A",{href:!0});var xkt=s(uK);hRr=r(xkt,"FlaxBartModel"),xkt.forEach(t),pRr=r(Yqe," (BART model)"),Yqe.forEach(t),uRr=i(ae),p5=n(ae,"LI",{});var Kqe=s(p5);eEe=n(Kqe,"STRONG",{});var $kt=s(eEe);_Rr=r($kt,"beit"),$kt.forEach(t),bRr=r(Kqe," \u2014 "),_K=n(Kqe,"A",{href:!0});var kkt=s(_K);vRr=r(kkt,"FlaxBeitModel"),kkt.forEach(t),FRr=r(Kqe," (BEiT model)"),Kqe.forEach(t),TRr=i(ae),u5=n(ae,"LI",{});var Zqe=s(u5);oEe=n(Zqe,"STRONG",{});var Skt=s(oEe);MRr=r(Skt,"bert"),Skt.forEach(t),ERr=r(Zqe," \u2014 "),bK=n(Zqe,"A",{href:!0});var Rkt=s(bK);CRr=r(Rkt,"FlaxBertModel"),Rkt.forEach(t),wRr=r(Zqe," (BERT model)"),Zqe.forEach(t),ARr=i(ae),_5=n(ae,"LI",{});var eje=s(_5);rEe=n(eje,"STRONG",{});var Pkt=s(rEe);LRr=r(Pkt,"big_bird"),Pkt.forEach(t),yRr=r(eje," \u2014 "),vK=n(eje,"A",{href:!0});var Bkt=s(vK);xRr=r(Bkt,"FlaxBigBirdModel"),Bkt.forEach(t),$Rr=r(eje," (BigBird model)"),eje.forEach(t),kRr=i(ae),b5=n(ae,"LI",{});var oje=s(b5);tEe=n(oje,"STRONG",{});var Ikt=s(tEe);SRr=r(Ikt,"blenderbot"),Ikt.forEach(t),RRr=r(oje," \u2014 "),FK=n(oje,"A",{href:!0});var Nkt=s(FK);PRr=r(Nkt,"FlaxBlenderbotModel"),Nkt.forEach(t),BRr=r(oje," (Blenderbot model)"),oje.forEach(t),IRr=i(ae),v5=n(ae,"LI",{});var rje=s(v5);aEe=n(rje,"STRONG",{});var qkt=s(aEe);NRr=r(qkt,"blenderbot-small"),qkt.forEach(t),qRr=r(rje," \u2014 "),TK=n(rje,"A",{href:!0});var jkt=s(TK);jRr=r(jkt,"FlaxBlenderbotSmallModel"),jkt.forEach(t),DRr=r(rje," (BlenderbotSmall model)"),rje.forEach(t),GRr=i(ae),F5=n(ae,"LI",{});var tje=s(F5);nEe=n(tje,"STRONG",{});var Dkt=s(nEe);ORr=r(Dkt,"clip"),Dkt.forEach(t),VRr=r(tje," \u2014 "),MK=n(tje,"A",{href:!0});var Gkt=s(MK);XRr=r(Gkt,"FlaxCLIPModel"),Gkt.forEach(t),zRr=r(tje," (CLIP model)"),tje.forEach(t),WRr=i(ae),T5=n(ae,"LI",{});var aje=s(T5);sEe=n(aje,"STRONG",{});var Okt=s(sEe);QRr=r(Okt,"distilbert"),Okt.forEach(t),HRr=r(aje," \u2014 "),EK=n(aje,"A",{href:!0});var Vkt=s(EK);URr=r(Vkt,"FlaxDistilBertModel"),Vkt.forEach(t),JRr=r(aje," (DistilBERT model)"),aje.forEach(t),YRr=i(ae),M5=n(ae,"LI",{});var nje=s(M5);lEe=n(nje,"STRONG",{});var Xkt=s(lEe);KRr=r(Xkt,"electra"),Xkt.forEach(t),ZRr=r(nje," \u2014 "),CK=n(nje,"A",{href:!0});var zkt=s(CK);ePr=r(zkt,"FlaxElectraModel"),zkt.forEach(t),oPr=r(nje," (ELECTRA model)"),nje.forEach(t),rPr=i(ae),E5=n(ae,"LI",{});var sje=s(E5);iEe=n(sje,"STRONG",{});var Wkt=s(iEe);tPr=r(Wkt,"gpt2"),Wkt.forEach(t),aPr=r(sje," \u2014 "),wK=n(sje,"A",{href:!0});var Qkt=s(wK);nPr=r(Qkt,"FlaxGPT2Model"),Qkt.forEach(t),sPr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),lPr=i(ae),C5=n(ae,"LI",{});var lje=s(C5);dEe=n(lje,"STRONG",{});var Hkt=s(dEe);iPr=r(Hkt,"gpt_neo"),Hkt.forEach(t),dPr=r(lje," \u2014 "),AK=n(lje,"A",{href:!0});var Ukt=s(AK);cPr=r(Ukt,"FlaxGPTNeoModel"),Ukt.forEach(t),fPr=r(lje," (GPT Neo model)"),lje.forEach(t),mPr=i(ae),w5=n(ae,"LI",{});var ije=s(w5);cEe=n(ije,"STRONG",{});var Jkt=s(cEe);gPr=r(Jkt,"gptj"),Jkt.forEach(t),hPr=r(ije," \u2014 "),LK=n(ije,"A",{href:!0});var Ykt=s(LK);pPr=r(Ykt,"FlaxGPTJModel"),Ykt.forEach(t),uPr=r(ije," (GPT-J model)"),ije.forEach(t),_Pr=i(ae),A5=n(ae,"LI",{});var dje=s(A5);fEe=n(dje,"STRONG",{});var Kkt=s(fEe);bPr=r(Kkt,"longt5"),Kkt.forEach(t),vPr=r(dje," \u2014 "),yK=n(dje,"A",{href:!0});var Zkt=s(yK);FPr=r(Zkt,"FlaxLongT5Model"),Zkt.forEach(t),TPr=r(dje," (LongT5 model)"),dje.forEach(t),MPr=i(ae),L5=n(ae,"LI",{});var cje=s(L5);mEe=n(cje,"STRONG",{});var eSt=s(mEe);EPr=r(eSt,"marian"),eSt.forEach(t),CPr=r(cje," \u2014 "),xK=n(cje,"A",{href:!0});var oSt=s(xK);wPr=r(oSt,"FlaxMarianModel"),oSt.forEach(t),APr=r(cje," (Marian model)"),cje.forEach(t),LPr=i(ae),y5=n(ae,"LI",{});var fje=s(y5);gEe=n(fje,"STRONG",{});var rSt=s(gEe);yPr=r(rSt,"mbart"),rSt.forEach(t),xPr=r(fje," \u2014 "),$K=n(fje,"A",{href:!0});var tSt=s($K);$Pr=r(tSt,"FlaxMBartModel"),tSt.forEach(t),kPr=r(fje," (mBART model)"),fje.forEach(t),SPr=i(ae),x5=n(ae,"LI",{});var mje=s(x5);hEe=n(mje,"STRONG",{});var aSt=s(hEe);RPr=r(aSt,"mt5"),aSt.forEach(t),PPr=r(mje," \u2014 "),kK=n(mje,"A",{href:!0});var nSt=s(kK);BPr=r(nSt,"FlaxMT5Model"),nSt.forEach(t),IPr=r(mje," (MT5 model)"),mje.forEach(t),NPr=i(ae),$5=n(ae,"LI",{});var gje=s($5);pEe=n(gje,"STRONG",{});var sSt=s(pEe);qPr=r(sSt,"opt"),sSt.forEach(t),jPr=r(gje," \u2014 "),SK=n(gje,"A",{href:!0});var lSt=s(SK);DPr=r(lSt,"FlaxOPTModel"),lSt.forEach(t),GPr=r(gje," (OPT model)"),gje.forEach(t),OPr=i(ae),k5=n(ae,"LI",{});var hje=s(k5);uEe=n(hje,"STRONG",{});var iSt=s(uEe);VPr=r(iSt,"pegasus"),iSt.forEach(t),XPr=r(hje," \u2014 "),RK=n(hje,"A",{href:!0});var dSt=s(RK);zPr=r(dSt,"FlaxPegasusModel"),dSt.forEach(t),WPr=r(hje," (Pegasus model)"),hje.forEach(t),QPr=i(ae),S5=n(ae,"LI",{});var pje=s(S5);_Ee=n(pje,"STRONG",{});var cSt=s(_Ee);HPr=r(cSt,"roberta"),cSt.forEach(t),UPr=r(pje," \u2014 "),PK=n(pje,"A",{href:!0});var fSt=s(PK);JPr=r(fSt,"FlaxRobertaModel"),fSt.forEach(t),YPr=r(pje," (RoBERTa model)"),pje.forEach(t),KPr=i(ae),R5=n(ae,"LI",{});var uje=s(R5);bEe=n(uje,"STRONG",{});var mSt=s(bEe);ZPr=r(mSt,"roformer"),mSt.forEach(t),eBr=r(uje," \u2014 "),BK=n(uje,"A",{href:!0});var gSt=s(BK);oBr=r(gSt,"FlaxRoFormerModel"),gSt.forEach(t),rBr=r(uje," (RoFormer model)"),uje.forEach(t),tBr=i(ae),P5=n(ae,"LI",{});var _je=s(P5);vEe=n(_je,"STRONG",{});var hSt=s(vEe);aBr=r(hSt,"t5"),hSt.forEach(t),nBr=r(_je," \u2014 "),IK=n(_je,"A",{href:!0});var pSt=s(IK);sBr=r(pSt,"FlaxT5Model"),pSt.forEach(t),lBr=r(_je," (T5 model)"),_je.forEach(t),iBr=i(ae),B5=n(ae,"LI",{});var bje=s(B5);FEe=n(bje,"STRONG",{});var uSt=s(FEe);dBr=r(uSt,"vision-text-dual-encoder"),uSt.forEach(t),cBr=r(bje," \u2014 "),NK=n(bje,"A",{href:!0});var _St=s(NK);fBr=r(_St,"FlaxVisionTextDualEncoderModel"),_St.forEach(t),mBr=r(bje," (VisionTextDualEncoder model)"),bje.forEach(t),gBr=i(ae),I5=n(ae,"LI",{});var vje=s(I5);TEe=n(vje,"STRONG",{});var bSt=s(TEe);hBr=r(bSt,"vit"),bSt.forEach(t),pBr=r(vje," \u2014 "),qK=n(vje,"A",{href:!0});var vSt=s(qK);uBr=r(vSt,"FlaxViTModel"),vSt.forEach(t),_Br=r(vje," (ViT model)"),vje.forEach(t),bBr=i(ae),N5=n(ae,"LI",{});var Fje=s(N5);MEe=n(Fje,"STRONG",{});var FSt=s(MEe);vBr=r(FSt,"wav2vec2"),FSt.forEach(t),FBr=r(Fje," \u2014 "),jK=n(Fje,"A",{href:!0});var TSt=s(jK);TBr=r(TSt,"FlaxWav2Vec2Model"),TSt.forEach(t),MBr=r(Fje," (Wav2Vec2 model)"),Fje.forEach(t),EBr=i(ae),q5=n(ae,"LI",{});var Tje=s(q5);EEe=n(Tje,"STRONG",{});var MSt=s(EEe);CBr=r(MSt,"xglm"),MSt.forEach(t),wBr=r(Tje," \u2014 "),DK=n(Tje,"A",{href:!0});var ESt=s(DK);ABr=r(ESt,"FlaxXGLMModel"),ESt.forEach(t),LBr=r(Tje," (XGLM model)"),Tje.forEach(t),yBr=i(ae),j5=n(ae,"LI",{});var Mje=s(j5);CEe=n(Mje,"STRONG",{});var CSt=s(CEe);xBr=r(CSt,"xlm-roberta"),CSt.forEach(t),$Br=r(Mje," \u2014 "),GK=n(Mje,"A",{href:!0});var wSt=s(GK);kBr=r(wSt,"FlaxXLMRobertaModel"),wSt.forEach(t),SBr=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),ae.forEach(t),RBr=i(Yl),T(D5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),BOe=i(f),Xc=n(f,"H2",{class:!0});var XXe=s(Xc);G5=n(XXe,"A",{id:!0,class:!0,href:!0});var ASt=s(G5);wEe=n(ASt,"SPAN",{});var LSt=s(wEe);T(Lx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),PBr=i(XXe),AEe=n(XXe,"SPAN",{});var ySt=s(AEe);BBr=r(ySt,"FlaxAutoModelForCausalLM"),ySt.forEach(t),XXe.forEach(t),IOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(yx.$$.fragment,Kl),IBr=i(Kl),zc=n(Kl,"P",{});var Mre=s(zc);NBr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=n(Mre,"A",{href:!0});var xSt=s(OK);qBr=r(xSt,"from_pretrained()"),xSt.forEach(t),jBr=r(Mre," class method or the "),VK=n(Mre,"A",{href:!0});var $St=s(VK);DBr=r($St,"from_config()"),$St.forEach(t),GBr=r(Mre,` class
method.`),Mre.forEach(t),OBr=i(Kl),xx=n(Kl,"P",{});var zXe=s(xx);VBr=r(zXe,"This class cannot be instantiated directly using "),LEe=n(zXe,"CODE",{});var kSt=s(LEe);XBr=r(kSt,"__init__()"),kSt.forEach(t),zBr=r(zXe," (throws an error)."),zXe.forEach(t),WBr=i(Kl),zt=n(Kl,"DIV",{class:!0});var QA=s(zt);T($x.$$.fragment,QA),QBr=i(QA),yEe=n(QA,"P",{});var SSt=s(yEe);HBr=r(SSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SSt.forEach(t),UBr=i(QA),Wc=n(QA,"P",{});var Ere=s(Wc);JBr=r(Ere,`Note:
Loading a model from its configuration file does `),xEe=n(Ere,"STRONG",{});var RSt=s(xEe);YBr=r(RSt,"not"),RSt.forEach(t),KBr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Ere,"A",{href:!0});var PSt=s(XK);ZBr=r(PSt,"from_pretrained()"),PSt.forEach(t),eIr=r(Ere," to load the model weights."),Ere.forEach(t),oIr=i(QA),T(O5.$$.fragment,QA),QA.forEach(t),rIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(kx.$$.fragment,Zl),tIr=i(Zl),$Ee=n(Zl,"P",{});var BSt=s($Ee);aIr=r(BSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BSt.forEach(t),nIr=i(Zl),Fn=n(Zl,"P",{});var HA=s(Fn);sIr=r(HA,"The model class to instantiate is selected based on the "),kEe=n(HA,"CODE",{});var ISt=s(kEe);lIr=r(ISt,"model_type"),ISt.forEach(t),iIr=r(HA,` property of the config object (either
passed as an argument or loaded from `),SEe=n(HA,"CODE",{});var NSt=s(SEe);dIr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),cIr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(HA,"CODE",{});var qSt=s(REe);fIr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),mIr=r(HA,":"),HA.forEach(t),gIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);V5=n(Ne,"LI",{});var Eje=s(V5);PEe=n(Eje,"STRONG",{});var jSt=s(PEe);hIr=r(jSt,"bart"),jSt.forEach(t),pIr=r(Eje," \u2014 "),zK=n(Eje,"A",{href:!0});var DSt=s(zK);uIr=r(DSt,"FlaxBartForCausalLM"),DSt.forEach(t),_Ir=r(Eje," (BART model)"),Eje.forEach(t),bIr=i(Ne),X5=n(Ne,"LI",{});var Cje=s(X5);BEe=n(Cje,"STRONG",{});var GSt=s(BEe);vIr=r(GSt,"bert"),GSt.forEach(t),FIr=r(Cje," \u2014 "),WK=n(Cje,"A",{href:!0});var OSt=s(WK);TIr=r(OSt,"FlaxBertForCausalLM"),OSt.forEach(t),MIr=r(Cje," (BERT model)"),Cje.forEach(t),EIr=i(Ne),z5=n(Ne,"LI",{});var wje=s(z5);IEe=n(wje,"STRONG",{});var VSt=s(IEe);CIr=r(VSt,"big_bird"),VSt.forEach(t),wIr=r(wje," \u2014 "),QK=n(wje,"A",{href:!0});var XSt=s(QK);AIr=r(XSt,"FlaxBigBirdForCausalLM"),XSt.forEach(t),LIr=r(wje," (BigBird model)"),wje.forEach(t),yIr=i(Ne),W5=n(Ne,"LI",{});var Aje=s(W5);NEe=n(Aje,"STRONG",{});var zSt=s(NEe);xIr=r(zSt,"electra"),zSt.forEach(t),$Ir=r(Aje," \u2014 "),HK=n(Aje,"A",{href:!0});var WSt=s(HK);kIr=r(WSt,"FlaxElectraForCausalLM"),WSt.forEach(t),SIr=r(Aje," (ELECTRA model)"),Aje.forEach(t),RIr=i(Ne),Q5=n(Ne,"LI",{});var Lje=s(Q5);qEe=n(Lje,"STRONG",{});var QSt=s(qEe);PIr=r(QSt,"gpt2"),QSt.forEach(t),BIr=r(Lje," \u2014 "),UK=n(Lje,"A",{href:!0});var HSt=s(UK);IIr=r(HSt,"FlaxGPT2LMHeadModel"),HSt.forEach(t),NIr=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),qIr=i(Ne),H5=n(Ne,"LI",{});var yje=s(H5);jEe=n(yje,"STRONG",{});var USt=s(jEe);jIr=r(USt,"gpt_neo"),USt.forEach(t),DIr=r(yje," \u2014 "),JK=n(yje,"A",{href:!0});var JSt=s(JK);GIr=r(JSt,"FlaxGPTNeoForCausalLM"),JSt.forEach(t),OIr=r(yje," (GPT Neo model)"),yje.forEach(t),VIr=i(Ne),U5=n(Ne,"LI",{});var xje=s(U5);DEe=n(xje,"STRONG",{});var YSt=s(DEe);XIr=r(YSt,"gptj"),YSt.forEach(t),zIr=r(xje," \u2014 "),YK=n(xje,"A",{href:!0});var KSt=s(YK);WIr=r(KSt,"FlaxGPTJForCausalLM"),KSt.forEach(t),QIr=r(xje," (GPT-J model)"),xje.forEach(t),HIr=i(Ne),J5=n(Ne,"LI",{});var $je=s(J5);GEe=n($je,"STRONG",{});var ZSt=s(GEe);UIr=r(ZSt,"opt"),ZSt.forEach(t),JIr=r($je," \u2014 "),KK=n($je,"A",{href:!0});var eRt=s(KK);YIr=r(eRt,"FlaxOPTForCausalLM"),eRt.forEach(t),KIr=r($je," (OPT model)"),$je.forEach(t),ZIr=i(Ne),Y5=n(Ne,"LI",{});var kje=s(Y5);OEe=n(kje,"STRONG",{});var oRt=s(OEe);eNr=r(oRt,"roberta"),oRt.forEach(t),oNr=r(kje," \u2014 "),ZK=n(kje,"A",{href:!0});var rRt=s(ZK);rNr=r(rRt,"FlaxRobertaForCausalLM"),rRt.forEach(t),tNr=r(kje," (RoBERTa model)"),kje.forEach(t),aNr=i(Ne),K5=n(Ne,"LI",{});var Sje=s(K5);VEe=n(Sje,"STRONG",{});var tRt=s(VEe);nNr=r(tRt,"xglm"),tRt.forEach(t),sNr=r(Sje," \u2014 "),eZ=n(Sje,"A",{href:!0});var aRt=s(eZ);lNr=r(aRt,"FlaxXGLMForCausalLM"),aRt.forEach(t),iNr=r(Sje," (XGLM model)"),Sje.forEach(t),Ne.forEach(t),dNr=i(Zl),T(Z5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),NOe=i(f),Qc=n(f,"H2",{class:!0});var WXe=s(Qc);e3=n(WXe,"A",{id:!0,class:!0,href:!0});var nRt=s(e3);XEe=n(nRt,"SPAN",{});var sRt=s(XEe);T(Sx.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),cNr=i(WXe),zEe=n(WXe,"SPAN",{});var lRt=s(zEe);fNr=r(lRt,"FlaxAutoModelForPreTraining"),lRt.forEach(t),WXe.forEach(t),qOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Rx.$$.fragment,ei),mNr=i(ei),Hc=n(ei,"P",{});var Cre=s(Hc);gNr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=n(Cre,"A",{href:!0});var iRt=s(oZ);hNr=r(iRt,"from_pretrained()"),iRt.forEach(t),pNr=r(Cre," class method or the "),rZ=n(Cre,"A",{href:!0});var dRt=s(rZ);uNr=r(dRt,"from_config()"),dRt.forEach(t),_Nr=r(Cre,` class
method.`),Cre.forEach(t),bNr=i(ei),Px=n(ei,"P",{});var QXe=s(Px);vNr=r(QXe,"This class cannot be instantiated directly using "),WEe=n(QXe,"CODE",{});var cRt=s(WEe);FNr=r(cRt,"__init__()"),cRt.forEach(t),TNr=r(QXe," (throws an error)."),QXe.forEach(t),MNr=i(ei),Wt=n(ei,"DIV",{class:!0});var UA=s(Wt);T(Bx.$$.fragment,UA),ENr=i(UA),QEe=n(UA,"P",{});var fRt=s(QEe);CNr=r(fRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fRt.forEach(t),wNr=i(UA),Uc=n(UA,"P",{});var wre=s(Uc);ANr=r(wre,`Note:
Loading a model from its configuration file does `),HEe=n(wre,"STRONG",{});var mRt=s(HEe);LNr=r(mRt,"not"),mRt.forEach(t),yNr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(wre,"A",{href:!0});var gRt=s(tZ);xNr=r(gRt,"from_pretrained()"),gRt.forEach(t),$Nr=r(wre," to load the model weights."),wre.forEach(t),kNr=i(UA),T(o3.$$.fragment,UA),UA.forEach(t),SNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Ix.$$.fragment,oi),RNr=i(oi),UEe=n(oi,"P",{});var hRt=s(UEe);PNr=r(hRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hRt.forEach(t),BNr=i(oi),Tn=n(oi,"P",{});var JA=s(Tn);INr=r(JA,"The model class to instantiate is selected based on the "),JEe=n(JA,"CODE",{});var pRt=s(JEe);NNr=r(pRt,"model_type"),pRt.forEach(t),qNr=r(JA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(JA,"CODE",{});var uRt=s(YEe);jNr=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),DNr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(JA,"CODE",{});var _Rt=s(KEe);GNr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),ONr=r(JA,":"),JA.forEach(t),VNr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);r3=n(we,"LI",{});var Rje=s(r3);ZEe=n(Rje,"STRONG",{});var bRt=s(ZEe);XNr=r(bRt,"albert"),bRt.forEach(t),zNr=r(Rje," \u2014 "),aZ=n(Rje,"A",{href:!0});var vRt=s(aZ);WNr=r(vRt,"FlaxAlbertForPreTraining"),vRt.forEach(t),QNr=r(Rje," (ALBERT model)"),Rje.forEach(t),HNr=i(we),t3=n(we,"LI",{});var Pje=s(t3);eCe=n(Pje,"STRONG",{});var FRt=s(eCe);UNr=r(FRt,"bart"),FRt.forEach(t),JNr=r(Pje," \u2014 "),nZ=n(Pje,"A",{href:!0});var TRt=s(nZ);YNr=r(TRt,"FlaxBartForConditionalGeneration"),TRt.forEach(t),KNr=r(Pje," (BART model)"),Pje.forEach(t),ZNr=i(we),a3=n(we,"LI",{});var Bje=s(a3);oCe=n(Bje,"STRONG",{});var MRt=s(oCe);eqr=r(MRt,"bert"),MRt.forEach(t),oqr=r(Bje," \u2014 "),sZ=n(Bje,"A",{href:!0});var ERt=s(sZ);rqr=r(ERt,"FlaxBertForPreTraining"),ERt.forEach(t),tqr=r(Bje," (BERT model)"),Bje.forEach(t),aqr=i(we),n3=n(we,"LI",{});var Ije=s(n3);rCe=n(Ije,"STRONG",{});var CRt=s(rCe);nqr=r(CRt,"big_bird"),CRt.forEach(t),sqr=r(Ije," \u2014 "),lZ=n(Ije,"A",{href:!0});var wRt=s(lZ);lqr=r(wRt,"FlaxBigBirdForPreTraining"),wRt.forEach(t),iqr=r(Ije," (BigBird model)"),Ije.forEach(t),dqr=i(we),s3=n(we,"LI",{});var Nje=s(s3);tCe=n(Nje,"STRONG",{});var ARt=s(tCe);cqr=r(ARt,"electra"),ARt.forEach(t),fqr=r(Nje," \u2014 "),iZ=n(Nje,"A",{href:!0});var LRt=s(iZ);mqr=r(LRt,"FlaxElectraForPreTraining"),LRt.forEach(t),gqr=r(Nje," (ELECTRA model)"),Nje.forEach(t),hqr=i(we),l3=n(we,"LI",{});var qje=s(l3);aCe=n(qje,"STRONG",{});var yRt=s(aCe);pqr=r(yRt,"longt5"),yRt.forEach(t),uqr=r(qje," \u2014 "),dZ=n(qje,"A",{href:!0});var xRt=s(dZ);_qr=r(xRt,"FlaxLongT5ForConditionalGeneration"),xRt.forEach(t),bqr=r(qje," (LongT5 model)"),qje.forEach(t),vqr=i(we),i3=n(we,"LI",{});var jje=s(i3);nCe=n(jje,"STRONG",{});var $Rt=s(nCe);Fqr=r($Rt,"mbart"),$Rt.forEach(t),Tqr=r(jje," \u2014 "),cZ=n(jje,"A",{href:!0});var kRt=s(cZ);Mqr=r(kRt,"FlaxMBartForConditionalGeneration"),kRt.forEach(t),Eqr=r(jje," (mBART model)"),jje.forEach(t),Cqr=i(we),d3=n(we,"LI",{});var Dje=s(d3);sCe=n(Dje,"STRONG",{});var SRt=s(sCe);wqr=r(SRt,"mt5"),SRt.forEach(t),Aqr=r(Dje," \u2014 "),fZ=n(Dje,"A",{href:!0});var RRt=s(fZ);Lqr=r(RRt,"FlaxMT5ForConditionalGeneration"),RRt.forEach(t),yqr=r(Dje," (MT5 model)"),Dje.forEach(t),xqr=i(we),c3=n(we,"LI",{});var Gje=s(c3);lCe=n(Gje,"STRONG",{});var PRt=s(lCe);$qr=r(PRt,"roberta"),PRt.forEach(t),kqr=r(Gje," \u2014 "),mZ=n(Gje,"A",{href:!0});var BRt=s(mZ);Sqr=r(BRt,"FlaxRobertaForMaskedLM"),BRt.forEach(t),Rqr=r(Gje," (RoBERTa model)"),Gje.forEach(t),Pqr=i(we),f3=n(we,"LI",{});var Oje=s(f3);iCe=n(Oje,"STRONG",{});var IRt=s(iCe);Bqr=r(IRt,"roformer"),IRt.forEach(t),Iqr=r(Oje," \u2014 "),gZ=n(Oje,"A",{href:!0});var NRt=s(gZ);Nqr=r(NRt,"FlaxRoFormerForMaskedLM"),NRt.forEach(t),qqr=r(Oje," (RoFormer model)"),Oje.forEach(t),jqr=i(we),m3=n(we,"LI",{});var Vje=s(m3);dCe=n(Vje,"STRONG",{});var qRt=s(dCe);Dqr=r(qRt,"t5"),qRt.forEach(t),Gqr=r(Vje," \u2014 "),hZ=n(Vje,"A",{href:!0});var jRt=s(hZ);Oqr=r(jRt,"FlaxT5ForConditionalGeneration"),jRt.forEach(t),Vqr=r(Vje," (T5 model)"),Vje.forEach(t),Xqr=i(we),g3=n(we,"LI",{});var Xje=s(g3);cCe=n(Xje,"STRONG",{});var DRt=s(cCe);zqr=r(DRt,"wav2vec2"),DRt.forEach(t),Wqr=r(Xje," \u2014 "),pZ=n(Xje,"A",{href:!0});var GRt=s(pZ);Qqr=r(GRt,"FlaxWav2Vec2ForPreTraining"),GRt.forEach(t),Hqr=r(Xje," (Wav2Vec2 model)"),Xje.forEach(t),Uqr=i(we),h3=n(we,"LI",{});var zje=s(h3);fCe=n(zje,"STRONG",{});var ORt=s(fCe);Jqr=r(ORt,"xlm-roberta"),ORt.forEach(t),Yqr=r(zje," \u2014 "),uZ=n(zje,"A",{href:!0});var VRt=s(uZ);Kqr=r(VRt,"FlaxXLMRobertaForMaskedLM"),VRt.forEach(t),Zqr=r(zje," (XLM-RoBERTa model)"),zje.forEach(t),we.forEach(t),ejr=i(oi),T(p3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),jOe=i(f),Jc=n(f,"H2",{class:!0});var HXe=s(Jc);u3=n(HXe,"A",{id:!0,class:!0,href:!0});var XRt=s(u3);mCe=n(XRt,"SPAN",{});var zRt=s(mCe);T(Nx.$$.fragment,zRt),zRt.forEach(t),XRt.forEach(t),ojr=i(HXe),gCe=n(HXe,"SPAN",{});var WRt=s(gCe);rjr=r(WRt,"FlaxAutoModelForMaskedLM"),WRt.forEach(t),HXe.forEach(t),DOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(qx.$$.fragment,ri),tjr=i(ri),Yc=n(ri,"P",{});var Are=s(Yc);ajr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=n(Are,"A",{href:!0});var QRt=s(_Z);njr=r(QRt,"from_pretrained()"),QRt.forEach(t),sjr=r(Are," class method or the "),bZ=n(Are,"A",{href:!0});var HRt=s(bZ);ljr=r(HRt,"from_config()"),HRt.forEach(t),ijr=r(Are,` class
method.`),Are.forEach(t),djr=i(ri),jx=n(ri,"P",{});var UXe=s(jx);cjr=r(UXe,"This class cannot be instantiated directly using "),hCe=n(UXe,"CODE",{});var URt=s(hCe);fjr=r(URt,"__init__()"),URt.forEach(t),mjr=r(UXe," (throws an error)."),UXe.forEach(t),gjr=i(ri),Qt=n(ri,"DIV",{class:!0});var YA=s(Qt);T(Dx.$$.fragment,YA),hjr=i(YA),pCe=n(YA,"P",{});var JRt=s(pCe);pjr=r(JRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JRt.forEach(t),ujr=i(YA),Kc=n(YA,"P",{});var Lre=s(Kc);_jr=r(Lre,`Note:
Loading a model from its configuration file does `),uCe=n(Lre,"STRONG",{});var YRt=s(uCe);bjr=r(YRt,"not"),YRt.forEach(t),vjr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Lre,"A",{href:!0});var KRt=s(vZ);Fjr=r(KRt,"from_pretrained()"),KRt.forEach(t),Tjr=r(Lre," to load the model weights."),Lre.forEach(t),Mjr=i(YA),T(_3.$$.fragment,YA),YA.forEach(t),Ejr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Gx.$$.fragment,ti),Cjr=i(ti),_Ce=n(ti,"P",{});var ZRt=s(_Ce);wjr=r(ZRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZRt.forEach(t),Ajr=i(ti),Mn=n(ti,"P",{});var KA=s(Mn);Ljr=r(KA,"The model class to instantiate is selected based on the "),bCe=n(KA,"CODE",{});var ePt=s(bCe);yjr=r(ePt,"model_type"),ePt.forEach(t),xjr=r(KA,` property of the config object (either
passed as an argument or loaded from `),vCe=n(KA,"CODE",{});var oPt=s(vCe);$jr=r(oPt,"pretrained_model_name_or_path"),oPt.forEach(t),kjr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(KA,"CODE",{});var rPt=s(FCe);Sjr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Rjr=r(KA,":"),KA.forEach(t),Pjr=i(ti),$e=n(ti,"UL",{});var qe=s($e);b3=n(qe,"LI",{});var Wje=s(b3);TCe=n(Wje,"STRONG",{});var tPt=s(TCe);Bjr=r(tPt,"albert"),tPt.forEach(t),Ijr=r(Wje," \u2014 "),FZ=n(Wje,"A",{href:!0});var aPt=s(FZ);Njr=r(aPt,"FlaxAlbertForMaskedLM"),aPt.forEach(t),qjr=r(Wje," (ALBERT model)"),Wje.forEach(t),jjr=i(qe),v3=n(qe,"LI",{});var Qje=s(v3);MCe=n(Qje,"STRONG",{});var nPt=s(MCe);Djr=r(nPt,"bart"),nPt.forEach(t),Gjr=r(Qje," \u2014 "),TZ=n(Qje,"A",{href:!0});var sPt=s(TZ);Ojr=r(sPt,"FlaxBartForConditionalGeneration"),sPt.forEach(t),Vjr=r(Qje," (BART model)"),Qje.forEach(t),Xjr=i(qe),F3=n(qe,"LI",{});var Hje=s(F3);ECe=n(Hje,"STRONG",{});var lPt=s(ECe);zjr=r(lPt,"bert"),lPt.forEach(t),Wjr=r(Hje," \u2014 "),MZ=n(Hje,"A",{href:!0});var iPt=s(MZ);Qjr=r(iPt,"FlaxBertForMaskedLM"),iPt.forEach(t),Hjr=r(Hje," (BERT model)"),Hje.forEach(t),Ujr=i(qe),T3=n(qe,"LI",{});var Uje=s(T3);CCe=n(Uje,"STRONG",{});var dPt=s(CCe);Jjr=r(dPt,"big_bird"),dPt.forEach(t),Yjr=r(Uje," \u2014 "),EZ=n(Uje,"A",{href:!0});var cPt=s(EZ);Kjr=r(cPt,"FlaxBigBirdForMaskedLM"),cPt.forEach(t),Zjr=r(Uje," (BigBird model)"),Uje.forEach(t),eDr=i(qe),M3=n(qe,"LI",{});var Jje=s(M3);wCe=n(Jje,"STRONG",{});var fPt=s(wCe);oDr=r(fPt,"distilbert"),fPt.forEach(t),rDr=r(Jje," \u2014 "),CZ=n(Jje,"A",{href:!0});var mPt=s(CZ);tDr=r(mPt,"FlaxDistilBertForMaskedLM"),mPt.forEach(t),aDr=r(Jje," (DistilBERT model)"),Jje.forEach(t),nDr=i(qe),E3=n(qe,"LI",{});var Yje=s(E3);ACe=n(Yje,"STRONG",{});var gPt=s(ACe);sDr=r(gPt,"electra"),gPt.forEach(t),lDr=r(Yje," \u2014 "),wZ=n(Yje,"A",{href:!0});var hPt=s(wZ);iDr=r(hPt,"FlaxElectraForMaskedLM"),hPt.forEach(t),dDr=r(Yje," (ELECTRA model)"),Yje.forEach(t),cDr=i(qe),C3=n(qe,"LI",{});var Kje=s(C3);LCe=n(Kje,"STRONG",{});var pPt=s(LCe);fDr=r(pPt,"mbart"),pPt.forEach(t),mDr=r(Kje," \u2014 "),AZ=n(Kje,"A",{href:!0});var uPt=s(AZ);gDr=r(uPt,"FlaxMBartForConditionalGeneration"),uPt.forEach(t),hDr=r(Kje," (mBART model)"),Kje.forEach(t),pDr=i(qe),w3=n(qe,"LI",{});var Zje=s(w3);yCe=n(Zje,"STRONG",{});var _Pt=s(yCe);uDr=r(_Pt,"roberta"),_Pt.forEach(t),_Dr=r(Zje," \u2014 "),LZ=n(Zje,"A",{href:!0});var bPt=s(LZ);bDr=r(bPt,"FlaxRobertaForMaskedLM"),bPt.forEach(t),vDr=r(Zje," (RoBERTa model)"),Zje.forEach(t),FDr=i(qe),A3=n(qe,"LI",{});var eDe=s(A3);xCe=n(eDe,"STRONG",{});var vPt=s(xCe);TDr=r(vPt,"roformer"),vPt.forEach(t),MDr=r(eDe," \u2014 "),yZ=n(eDe,"A",{href:!0});var FPt=s(yZ);EDr=r(FPt,"FlaxRoFormerForMaskedLM"),FPt.forEach(t),CDr=r(eDe," (RoFormer model)"),eDe.forEach(t),wDr=i(qe),L3=n(qe,"LI",{});var oDe=s(L3);$Ce=n(oDe,"STRONG",{});var TPt=s($Ce);ADr=r(TPt,"xlm-roberta"),TPt.forEach(t),LDr=r(oDe," \u2014 "),xZ=n(oDe,"A",{href:!0});var MPt=s(xZ);yDr=r(MPt,"FlaxXLMRobertaForMaskedLM"),MPt.forEach(t),xDr=r(oDe," (XLM-RoBERTa model)"),oDe.forEach(t),qe.forEach(t),$Dr=i(ti),T(y3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),GOe=i(f),Zc=n(f,"H2",{class:!0});var JXe=s(Zc);x3=n(JXe,"A",{id:!0,class:!0,href:!0});var EPt=s(x3);kCe=n(EPt,"SPAN",{});var CPt=s(kCe);T(Ox.$$.fragment,CPt),CPt.forEach(t),EPt.forEach(t),kDr=i(JXe),SCe=n(JXe,"SPAN",{});var wPt=s(SCe);SDr=r(wPt,"FlaxAutoModelForSeq2SeqLM"),wPt.forEach(t),JXe.forEach(t),OOe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Vx.$$.fragment,ai),RDr=i(ai),ef=n(ai,"P",{});var yre=s(ef);PDr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=n(yre,"A",{href:!0});var APt=s($Z);BDr=r(APt,"from_pretrained()"),APt.forEach(t),IDr=r(yre," class method or the "),kZ=n(yre,"A",{href:!0});var LPt=s(kZ);NDr=r(LPt,"from_config()"),LPt.forEach(t),qDr=r(yre,` class
method.`),yre.forEach(t),jDr=i(ai),Xx=n(ai,"P",{});var YXe=s(Xx);DDr=r(YXe,"This class cannot be instantiated directly using "),RCe=n(YXe,"CODE",{});var yPt=s(RCe);GDr=r(yPt,"__init__()"),yPt.forEach(t),ODr=r(YXe," (throws an error)."),YXe.forEach(t),VDr=i(ai),Ht=n(ai,"DIV",{class:!0});var ZA=s(Ht);T(zx.$$.fragment,ZA),XDr=i(ZA),PCe=n(ZA,"P",{});var xPt=s(PCe);zDr=r(xPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xPt.forEach(t),WDr=i(ZA),of=n(ZA,"P",{});var xre=s(of);QDr=r(xre,`Note:
Loading a model from its configuration file does `),BCe=n(xre,"STRONG",{});var $Pt=s(BCe);HDr=r($Pt,"not"),$Pt.forEach(t),UDr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(xre,"A",{href:!0});var kPt=s(SZ);JDr=r(kPt,"from_pretrained()"),kPt.forEach(t),YDr=r(xre," to load the model weights."),xre.forEach(t),KDr=i(ZA),T($3.$$.fragment,ZA),ZA.forEach(t),ZDr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Wx.$$.fragment,ni),eGr=i(ni),ICe=n(ni,"P",{});var SPt=s(ICe);oGr=r(SPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SPt.forEach(t),rGr=i(ni),En=n(ni,"P",{});var eL=s(En);tGr=r(eL,"The model class to instantiate is selected based on the "),NCe=n(eL,"CODE",{});var RPt=s(NCe);aGr=r(RPt,"model_type"),RPt.forEach(t),nGr=r(eL,` property of the config object (either
passed as an argument or loaded from `),qCe=n(eL,"CODE",{});var PPt=s(qCe);sGr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),lGr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(eL,"CODE",{});var BPt=s(jCe);iGr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),dGr=r(eL,":"),eL.forEach(t),cGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);k3=n(je,"LI",{});var rDe=s(k3);DCe=n(rDe,"STRONG",{});var IPt=s(DCe);fGr=r(IPt,"bart"),IPt.forEach(t),mGr=r(rDe," \u2014 "),RZ=n(rDe,"A",{href:!0});var NPt=s(RZ);gGr=r(NPt,"FlaxBartForConditionalGeneration"),NPt.forEach(t),hGr=r(rDe," (BART model)"),rDe.forEach(t),pGr=i(je),S3=n(je,"LI",{});var tDe=s(S3);GCe=n(tDe,"STRONG",{});var qPt=s(GCe);uGr=r(qPt,"blenderbot"),qPt.forEach(t),_Gr=r(tDe," \u2014 "),PZ=n(tDe,"A",{href:!0});var jPt=s(PZ);bGr=r(jPt,"FlaxBlenderbotForConditionalGeneration"),jPt.forEach(t),vGr=r(tDe," (Blenderbot model)"),tDe.forEach(t),FGr=i(je),R3=n(je,"LI",{});var aDe=s(R3);OCe=n(aDe,"STRONG",{});var DPt=s(OCe);TGr=r(DPt,"blenderbot-small"),DPt.forEach(t),MGr=r(aDe," \u2014 "),BZ=n(aDe,"A",{href:!0});var GPt=s(BZ);EGr=r(GPt,"FlaxBlenderbotSmallForConditionalGeneration"),GPt.forEach(t),CGr=r(aDe," (BlenderbotSmall model)"),aDe.forEach(t),wGr=i(je),P3=n(je,"LI",{});var nDe=s(P3);VCe=n(nDe,"STRONG",{});var OPt=s(VCe);AGr=r(OPt,"encoder-decoder"),OPt.forEach(t),LGr=r(nDe," \u2014 "),IZ=n(nDe,"A",{href:!0});var VPt=s(IZ);yGr=r(VPt,"FlaxEncoderDecoderModel"),VPt.forEach(t),xGr=r(nDe," (Encoder decoder model)"),nDe.forEach(t),$Gr=i(je),B3=n(je,"LI",{});var sDe=s(B3);XCe=n(sDe,"STRONG",{});var XPt=s(XCe);kGr=r(XPt,"longt5"),XPt.forEach(t),SGr=r(sDe," \u2014 "),NZ=n(sDe,"A",{href:!0});var zPt=s(NZ);RGr=r(zPt,"FlaxLongT5ForConditionalGeneration"),zPt.forEach(t),PGr=r(sDe," (LongT5 model)"),sDe.forEach(t),BGr=i(je),I3=n(je,"LI",{});var lDe=s(I3);zCe=n(lDe,"STRONG",{});var WPt=s(zCe);IGr=r(WPt,"marian"),WPt.forEach(t),NGr=r(lDe," \u2014 "),qZ=n(lDe,"A",{href:!0});var QPt=s(qZ);qGr=r(QPt,"FlaxMarianMTModel"),QPt.forEach(t),jGr=r(lDe," (Marian model)"),lDe.forEach(t),DGr=i(je),N3=n(je,"LI",{});var iDe=s(N3);WCe=n(iDe,"STRONG",{});var HPt=s(WCe);GGr=r(HPt,"mbart"),HPt.forEach(t),OGr=r(iDe," \u2014 "),jZ=n(iDe,"A",{href:!0});var UPt=s(jZ);VGr=r(UPt,"FlaxMBartForConditionalGeneration"),UPt.forEach(t),XGr=r(iDe," (mBART model)"),iDe.forEach(t),zGr=i(je),q3=n(je,"LI",{});var dDe=s(q3);QCe=n(dDe,"STRONG",{});var JPt=s(QCe);WGr=r(JPt,"mt5"),JPt.forEach(t),QGr=r(dDe," \u2014 "),DZ=n(dDe,"A",{href:!0});var YPt=s(DZ);HGr=r(YPt,"FlaxMT5ForConditionalGeneration"),YPt.forEach(t),UGr=r(dDe," (MT5 model)"),dDe.forEach(t),JGr=i(je),j3=n(je,"LI",{});var cDe=s(j3);HCe=n(cDe,"STRONG",{});var KPt=s(HCe);YGr=r(KPt,"pegasus"),KPt.forEach(t),KGr=r(cDe," \u2014 "),GZ=n(cDe,"A",{href:!0});var ZPt=s(GZ);ZGr=r(ZPt,"FlaxPegasusForConditionalGeneration"),ZPt.forEach(t),eOr=r(cDe," (Pegasus model)"),cDe.forEach(t),oOr=i(je),D3=n(je,"LI",{});var fDe=s(D3);UCe=n(fDe,"STRONG",{});var eBt=s(UCe);rOr=r(eBt,"t5"),eBt.forEach(t),tOr=r(fDe," \u2014 "),OZ=n(fDe,"A",{href:!0});var oBt=s(OZ);aOr=r(oBt,"FlaxT5ForConditionalGeneration"),oBt.forEach(t),nOr=r(fDe," (T5 model)"),fDe.forEach(t),je.forEach(t),sOr=i(ni),T(G3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),VOe=i(f),rf=n(f,"H2",{class:!0});var KXe=s(rf);O3=n(KXe,"A",{id:!0,class:!0,href:!0});var rBt=s(O3);JCe=n(rBt,"SPAN",{});var tBt=s(JCe);T(Qx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),lOr=i(KXe),YCe=n(KXe,"SPAN",{});var aBt=s(YCe);iOr=r(aBt,"FlaxAutoModelForSequenceClassification"),aBt.forEach(t),KXe.forEach(t),XOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Hx.$$.fragment,si),dOr=i(si),tf=n(si,"P",{});var $re=s(tf);cOr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=n($re,"A",{href:!0});var nBt=s(VZ);fOr=r(nBt,"from_pretrained()"),nBt.forEach(t),mOr=r($re," class method or the "),XZ=n($re,"A",{href:!0});var sBt=s(XZ);gOr=r(sBt,"from_config()"),sBt.forEach(t),hOr=r($re,` class
method.`),$re.forEach(t),pOr=i(si),Ux=n(si,"P",{});var ZXe=s(Ux);uOr=r(ZXe,"This class cannot be instantiated directly using "),KCe=n(ZXe,"CODE",{});var lBt=s(KCe);_Or=r(lBt,"__init__()"),lBt.forEach(t),bOr=r(ZXe," (throws an error)."),ZXe.forEach(t),vOr=i(si),Ut=n(si,"DIV",{class:!0});var oL=s(Ut);T(Jx.$$.fragment,oL),FOr=i(oL),ZCe=n(oL,"P",{});var iBt=s(ZCe);TOr=r(iBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iBt.forEach(t),MOr=i(oL),af=n(oL,"P",{});var kre=s(af);EOr=r(kre,`Note:
Loading a model from its configuration file does `),e5e=n(kre,"STRONG",{});var dBt=s(e5e);COr=r(dBt,"not"),dBt.forEach(t),wOr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(kre,"A",{href:!0});var cBt=s(zZ);AOr=r(cBt,"from_pretrained()"),cBt.forEach(t),LOr=r(kre," to load the model weights."),kre.forEach(t),yOr=i(oL),T(V3.$$.fragment,oL),oL.forEach(t),xOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Yx.$$.fragment,li),$Or=i(li),o5e=n(li,"P",{});var fBt=s(o5e);kOr=r(fBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fBt.forEach(t),SOr=i(li),Cn=n(li,"P",{});var rL=s(Cn);ROr=r(rL,"The model class to instantiate is selected based on the "),r5e=n(rL,"CODE",{});var mBt=s(r5e);POr=r(mBt,"model_type"),mBt.forEach(t),BOr=r(rL,` property of the config object (either
passed as an argument or loaded from `),t5e=n(rL,"CODE",{});var gBt=s(t5e);IOr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),NOr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(rL,"CODE",{});var hBt=s(a5e);qOr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),jOr=r(rL,":"),rL.forEach(t),DOr=i(li),Se=n(li,"UL",{});var De=s(Se);X3=n(De,"LI",{});var mDe=s(X3);n5e=n(mDe,"STRONG",{});var pBt=s(n5e);GOr=r(pBt,"albert"),pBt.forEach(t),OOr=r(mDe," \u2014 "),WZ=n(mDe,"A",{href:!0});var uBt=s(WZ);VOr=r(uBt,"FlaxAlbertForSequenceClassification"),uBt.forEach(t),XOr=r(mDe," (ALBERT model)"),mDe.forEach(t),zOr=i(De),z3=n(De,"LI",{});var gDe=s(z3);s5e=n(gDe,"STRONG",{});var _Bt=s(s5e);WOr=r(_Bt,"bart"),_Bt.forEach(t),QOr=r(gDe," \u2014 "),QZ=n(gDe,"A",{href:!0});var bBt=s(QZ);HOr=r(bBt,"FlaxBartForSequenceClassification"),bBt.forEach(t),UOr=r(gDe," (BART model)"),gDe.forEach(t),JOr=i(De),W3=n(De,"LI",{});var hDe=s(W3);l5e=n(hDe,"STRONG",{});var vBt=s(l5e);YOr=r(vBt,"bert"),vBt.forEach(t),KOr=r(hDe," \u2014 "),HZ=n(hDe,"A",{href:!0});var FBt=s(HZ);ZOr=r(FBt,"FlaxBertForSequenceClassification"),FBt.forEach(t),eVr=r(hDe," (BERT model)"),hDe.forEach(t),oVr=i(De),Q3=n(De,"LI",{});var pDe=s(Q3);i5e=n(pDe,"STRONG",{});var TBt=s(i5e);rVr=r(TBt,"big_bird"),TBt.forEach(t),tVr=r(pDe," \u2014 "),UZ=n(pDe,"A",{href:!0});var MBt=s(UZ);aVr=r(MBt,"FlaxBigBirdForSequenceClassification"),MBt.forEach(t),nVr=r(pDe," (BigBird model)"),pDe.forEach(t),sVr=i(De),H3=n(De,"LI",{});var uDe=s(H3);d5e=n(uDe,"STRONG",{});var EBt=s(d5e);lVr=r(EBt,"distilbert"),EBt.forEach(t),iVr=r(uDe," \u2014 "),JZ=n(uDe,"A",{href:!0});var CBt=s(JZ);dVr=r(CBt,"FlaxDistilBertForSequenceClassification"),CBt.forEach(t),cVr=r(uDe," (DistilBERT model)"),uDe.forEach(t),fVr=i(De),U3=n(De,"LI",{});var _De=s(U3);c5e=n(_De,"STRONG",{});var wBt=s(c5e);mVr=r(wBt,"electra"),wBt.forEach(t),gVr=r(_De," \u2014 "),YZ=n(_De,"A",{href:!0});var ABt=s(YZ);hVr=r(ABt,"FlaxElectraForSequenceClassification"),ABt.forEach(t),pVr=r(_De," (ELECTRA model)"),_De.forEach(t),uVr=i(De),J3=n(De,"LI",{});var bDe=s(J3);f5e=n(bDe,"STRONG",{});var LBt=s(f5e);_Vr=r(LBt,"mbart"),LBt.forEach(t),bVr=r(bDe," \u2014 "),KZ=n(bDe,"A",{href:!0});var yBt=s(KZ);vVr=r(yBt,"FlaxMBartForSequenceClassification"),yBt.forEach(t),FVr=r(bDe," (mBART model)"),bDe.forEach(t),TVr=i(De),Y3=n(De,"LI",{});var vDe=s(Y3);m5e=n(vDe,"STRONG",{});var xBt=s(m5e);MVr=r(xBt,"roberta"),xBt.forEach(t),EVr=r(vDe," \u2014 "),ZZ=n(vDe,"A",{href:!0});var $Bt=s(ZZ);CVr=r($Bt,"FlaxRobertaForSequenceClassification"),$Bt.forEach(t),wVr=r(vDe," (RoBERTa model)"),vDe.forEach(t),AVr=i(De),K3=n(De,"LI",{});var FDe=s(K3);g5e=n(FDe,"STRONG",{});var kBt=s(g5e);LVr=r(kBt,"roformer"),kBt.forEach(t),yVr=r(FDe," \u2014 "),eee=n(FDe,"A",{href:!0});var SBt=s(eee);xVr=r(SBt,"FlaxRoFormerForSequenceClassification"),SBt.forEach(t),$Vr=r(FDe," (RoFormer model)"),FDe.forEach(t),kVr=i(De),Z3=n(De,"LI",{});var TDe=s(Z3);h5e=n(TDe,"STRONG",{});var RBt=s(h5e);SVr=r(RBt,"xlm-roberta"),RBt.forEach(t),RVr=r(TDe," \u2014 "),oee=n(TDe,"A",{href:!0});var PBt=s(oee);PVr=r(PBt,"FlaxXLMRobertaForSequenceClassification"),PBt.forEach(t),BVr=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),De.forEach(t),IVr=i(li),T(e0.$$.fragment,li),li.forEach(t),si.forEach(t),zOe=i(f),nf=n(f,"H2",{class:!0});var eze=s(nf);o0=n(eze,"A",{id:!0,class:!0,href:!0});var BBt=s(o0);p5e=n(BBt,"SPAN",{});var IBt=s(p5e);T(Kx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),NVr=i(eze),u5e=n(eze,"SPAN",{});var NBt=s(u5e);qVr=r(NBt,"FlaxAutoModelForQuestionAnswering"),NBt.forEach(t),eze.forEach(t),WOe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(Zx.$$.fragment,ii),jVr=i(ii),sf=n(ii,"P",{});var Sre=s(sf);DVr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=n(Sre,"A",{href:!0});var qBt=s(ree);GVr=r(qBt,"from_pretrained()"),qBt.forEach(t),OVr=r(Sre," class method or the "),tee=n(Sre,"A",{href:!0});var jBt=s(tee);VVr=r(jBt,"from_config()"),jBt.forEach(t),XVr=r(Sre,` class
method.`),Sre.forEach(t),zVr=i(ii),e$=n(ii,"P",{});var oze=s(e$);WVr=r(oze,"This class cannot be instantiated directly using "),_5e=n(oze,"CODE",{});var DBt=s(_5e);QVr=r(DBt,"__init__()"),DBt.forEach(t),HVr=r(oze," (throws an error)."),oze.forEach(t),UVr=i(ii),Jt=n(ii,"DIV",{class:!0});var tL=s(Jt);T(o$.$$.fragment,tL),JVr=i(tL),b5e=n(tL,"P",{});var GBt=s(b5e);YVr=r(GBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GBt.forEach(t),KVr=i(tL),lf=n(tL,"P",{});var Rre=s(lf);ZVr=r(Rre,`Note:
Loading a model from its configuration file does `),v5e=n(Rre,"STRONG",{});var OBt=s(v5e);eXr=r(OBt,"not"),OBt.forEach(t),oXr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(Rre,"A",{href:!0});var VBt=s(aee);rXr=r(VBt,"from_pretrained()"),VBt.forEach(t),tXr=r(Rre," to load the model weights."),Rre.forEach(t),aXr=i(tL),T(r0.$$.fragment,tL),tL.forEach(t),nXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(r$.$$.fragment,di),sXr=i(di),F5e=n(di,"P",{});var XBt=s(F5e);lXr=r(XBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBt.forEach(t),iXr=i(di),wn=n(di,"P",{});var aL=s(wn);dXr=r(aL,"The model class to instantiate is selected based on the "),T5e=n(aL,"CODE",{});var zBt=s(T5e);cXr=r(zBt,"model_type"),zBt.forEach(t),fXr=r(aL,` property of the config object (either
passed as an argument or loaded from `),M5e=n(aL,"CODE",{});var WBt=s(M5e);mXr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),gXr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(aL,"CODE",{});var QBt=s(E5e);hXr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),pXr=r(aL,":"),aL.forEach(t),uXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);t0=n(Ge,"LI",{});var MDe=s(t0);C5e=n(MDe,"STRONG",{});var HBt=s(C5e);_Xr=r(HBt,"albert"),HBt.forEach(t),bXr=r(MDe," \u2014 "),nee=n(MDe,"A",{href:!0});var UBt=s(nee);vXr=r(UBt,"FlaxAlbertForQuestionAnswering"),UBt.forEach(t),FXr=r(MDe," (ALBERT model)"),MDe.forEach(t),TXr=i(Ge),a0=n(Ge,"LI",{});var EDe=s(a0);w5e=n(EDe,"STRONG",{});var JBt=s(w5e);MXr=r(JBt,"bart"),JBt.forEach(t),EXr=r(EDe," \u2014 "),see=n(EDe,"A",{href:!0});var YBt=s(see);CXr=r(YBt,"FlaxBartForQuestionAnswering"),YBt.forEach(t),wXr=r(EDe," (BART model)"),EDe.forEach(t),AXr=i(Ge),n0=n(Ge,"LI",{});var CDe=s(n0);A5e=n(CDe,"STRONG",{});var KBt=s(A5e);LXr=r(KBt,"bert"),KBt.forEach(t),yXr=r(CDe," \u2014 "),lee=n(CDe,"A",{href:!0});var ZBt=s(lee);xXr=r(ZBt,"FlaxBertForQuestionAnswering"),ZBt.forEach(t),$Xr=r(CDe," (BERT model)"),CDe.forEach(t),kXr=i(Ge),s0=n(Ge,"LI",{});var wDe=s(s0);L5e=n(wDe,"STRONG",{});var eIt=s(L5e);SXr=r(eIt,"big_bird"),eIt.forEach(t),RXr=r(wDe," \u2014 "),iee=n(wDe,"A",{href:!0});var oIt=s(iee);PXr=r(oIt,"FlaxBigBirdForQuestionAnswering"),oIt.forEach(t),BXr=r(wDe," (BigBird model)"),wDe.forEach(t),IXr=i(Ge),l0=n(Ge,"LI",{});var ADe=s(l0);y5e=n(ADe,"STRONG",{});var rIt=s(y5e);NXr=r(rIt,"distilbert"),rIt.forEach(t),qXr=r(ADe," \u2014 "),dee=n(ADe,"A",{href:!0});var tIt=s(dee);jXr=r(tIt,"FlaxDistilBertForQuestionAnswering"),tIt.forEach(t),DXr=r(ADe," (DistilBERT model)"),ADe.forEach(t),GXr=i(Ge),i0=n(Ge,"LI",{});var LDe=s(i0);x5e=n(LDe,"STRONG",{});var aIt=s(x5e);OXr=r(aIt,"electra"),aIt.forEach(t),VXr=r(LDe," \u2014 "),cee=n(LDe,"A",{href:!0});var nIt=s(cee);XXr=r(nIt,"FlaxElectraForQuestionAnswering"),nIt.forEach(t),zXr=r(LDe," (ELECTRA model)"),LDe.forEach(t),WXr=i(Ge),d0=n(Ge,"LI",{});var yDe=s(d0);$5e=n(yDe,"STRONG",{});var sIt=s($5e);QXr=r(sIt,"mbart"),sIt.forEach(t),HXr=r(yDe," \u2014 "),fee=n(yDe,"A",{href:!0});var lIt=s(fee);UXr=r(lIt,"FlaxMBartForQuestionAnswering"),lIt.forEach(t),JXr=r(yDe," (mBART model)"),yDe.forEach(t),YXr=i(Ge),c0=n(Ge,"LI",{});var xDe=s(c0);k5e=n(xDe,"STRONG",{});var iIt=s(k5e);KXr=r(iIt,"roberta"),iIt.forEach(t),ZXr=r(xDe," \u2014 "),mee=n(xDe,"A",{href:!0});var dIt=s(mee);ezr=r(dIt,"FlaxRobertaForQuestionAnswering"),dIt.forEach(t),ozr=r(xDe," (RoBERTa model)"),xDe.forEach(t),rzr=i(Ge),f0=n(Ge,"LI",{});var $De=s(f0);S5e=n($De,"STRONG",{});var cIt=s(S5e);tzr=r(cIt,"roformer"),cIt.forEach(t),azr=r($De," \u2014 "),gee=n($De,"A",{href:!0});var fIt=s(gee);nzr=r(fIt,"FlaxRoFormerForQuestionAnswering"),fIt.forEach(t),szr=r($De," (RoFormer model)"),$De.forEach(t),lzr=i(Ge),m0=n(Ge,"LI",{});var kDe=s(m0);R5e=n(kDe,"STRONG",{});var mIt=s(R5e);izr=r(mIt,"xlm-roberta"),mIt.forEach(t),dzr=r(kDe," \u2014 "),hee=n(kDe,"A",{href:!0});var gIt=s(hee);czr=r(gIt,"FlaxXLMRobertaForQuestionAnswering"),gIt.forEach(t),fzr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),Ge.forEach(t),mzr=i(di),T(g0.$$.fragment,di),di.forEach(t),ii.forEach(t),QOe=i(f),df=n(f,"H2",{class:!0});var rze=s(df);h0=n(rze,"A",{id:!0,class:!0,href:!0});var hIt=s(h0);P5e=n(hIt,"SPAN",{});var pIt=s(P5e);T(t$.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),gzr=i(rze),B5e=n(rze,"SPAN",{});var uIt=s(B5e);hzr=r(uIt,"FlaxAutoModelForTokenClassification"),uIt.forEach(t),rze.forEach(t),HOe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(a$.$$.fragment,ci),pzr=i(ci),cf=n(ci,"P",{});var Pre=s(cf);uzr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=n(Pre,"A",{href:!0});var _It=s(pee);_zr=r(_It,"from_pretrained()"),_It.forEach(t),bzr=r(Pre," class method or the "),uee=n(Pre,"A",{href:!0});var bIt=s(uee);vzr=r(bIt,"from_config()"),bIt.forEach(t),Fzr=r(Pre,` class
method.`),Pre.forEach(t),Tzr=i(ci),n$=n(ci,"P",{});var tze=s(n$);Mzr=r(tze,"This class cannot be instantiated directly using "),I5e=n(tze,"CODE",{});var vIt=s(I5e);Ezr=r(vIt,"__init__()"),vIt.forEach(t),Czr=r(tze," (throws an error)."),tze.forEach(t),wzr=i(ci),Yt=n(ci,"DIV",{class:!0});var nL=s(Yt);T(s$.$$.fragment,nL),Azr=i(nL),N5e=n(nL,"P",{});var FIt=s(N5e);Lzr=r(FIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FIt.forEach(t),yzr=i(nL),ff=n(nL,"P",{});var Bre=s(ff);xzr=r(Bre,`Note:
Loading a model from its configuration file does `),q5e=n(Bre,"STRONG",{});var TIt=s(q5e);$zr=r(TIt,"not"),TIt.forEach(t),kzr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Bre,"A",{href:!0});var MIt=s(_ee);Szr=r(MIt,"from_pretrained()"),MIt.forEach(t),Rzr=r(Bre," to load the model weights."),Bre.forEach(t),Pzr=i(nL),T(p0.$$.fragment,nL),nL.forEach(t),Bzr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(l$.$$.fragment,fi),Izr=i(fi),j5e=n(fi,"P",{});var EIt=s(j5e);Nzr=r(EIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EIt.forEach(t),qzr=i(fi),An=n(fi,"P",{});var sL=s(An);jzr=r(sL,"The model class to instantiate is selected based on the "),D5e=n(sL,"CODE",{});var CIt=s(D5e);Dzr=r(CIt,"model_type"),CIt.forEach(t),Gzr=r(sL,` property of the config object (either
passed as an argument or loaded from `),G5e=n(sL,"CODE",{});var wIt=s(G5e);Ozr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),Vzr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(sL,"CODE",{});var AIt=s(O5e);Xzr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),zzr=r(sL,":"),sL.forEach(t),Wzr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);u0=n(To,"LI",{});var SDe=s(u0);V5e=n(SDe,"STRONG",{});var LIt=s(V5e);Qzr=r(LIt,"albert"),LIt.forEach(t),Hzr=r(SDe," \u2014 "),bee=n(SDe,"A",{href:!0});var yIt=s(bee);Uzr=r(yIt,"FlaxAlbertForTokenClassification"),yIt.forEach(t),Jzr=r(SDe," (ALBERT model)"),SDe.forEach(t),Yzr=i(To),_0=n(To,"LI",{});var RDe=s(_0);X5e=n(RDe,"STRONG",{});var xIt=s(X5e);Kzr=r(xIt,"bert"),xIt.forEach(t),Zzr=r(RDe," \u2014 "),vee=n(RDe,"A",{href:!0});var $It=s(vee);eWr=r($It,"FlaxBertForTokenClassification"),$It.forEach(t),oWr=r(RDe," (BERT model)"),RDe.forEach(t),rWr=i(To),b0=n(To,"LI",{});var PDe=s(b0);z5e=n(PDe,"STRONG",{});var kIt=s(z5e);tWr=r(kIt,"big_bird"),kIt.forEach(t),aWr=r(PDe," \u2014 "),Fee=n(PDe,"A",{href:!0});var SIt=s(Fee);nWr=r(SIt,"FlaxBigBirdForTokenClassification"),SIt.forEach(t),sWr=r(PDe," (BigBird model)"),PDe.forEach(t),lWr=i(To),v0=n(To,"LI",{});var BDe=s(v0);W5e=n(BDe,"STRONG",{});var RIt=s(W5e);iWr=r(RIt,"distilbert"),RIt.forEach(t),dWr=r(BDe," \u2014 "),Tee=n(BDe,"A",{href:!0});var PIt=s(Tee);cWr=r(PIt,"FlaxDistilBertForTokenClassification"),PIt.forEach(t),fWr=r(BDe," (DistilBERT model)"),BDe.forEach(t),mWr=i(To),F0=n(To,"LI",{});var IDe=s(F0);Q5e=n(IDe,"STRONG",{});var BIt=s(Q5e);gWr=r(BIt,"electra"),BIt.forEach(t),hWr=r(IDe," \u2014 "),Mee=n(IDe,"A",{href:!0});var IIt=s(Mee);pWr=r(IIt,"FlaxElectraForTokenClassification"),IIt.forEach(t),uWr=r(IDe," (ELECTRA model)"),IDe.forEach(t),_Wr=i(To),T0=n(To,"LI",{});var NDe=s(T0);H5e=n(NDe,"STRONG",{});var NIt=s(H5e);bWr=r(NIt,"roberta"),NIt.forEach(t),vWr=r(NDe," \u2014 "),Eee=n(NDe,"A",{href:!0});var qIt=s(Eee);FWr=r(qIt,"FlaxRobertaForTokenClassification"),qIt.forEach(t),TWr=r(NDe," (RoBERTa model)"),NDe.forEach(t),MWr=i(To),M0=n(To,"LI",{});var qDe=s(M0);U5e=n(qDe,"STRONG",{});var jIt=s(U5e);EWr=r(jIt,"roformer"),jIt.forEach(t),CWr=r(qDe," \u2014 "),Cee=n(qDe,"A",{href:!0});var DIt=s(Cee);wWr=r(DIt,"FlaxRoFormerForTokenClassification"),DIt.forEach(t),AWr=r(qDe," (RoFormer model)"),qDe.forEach(t),LWr=i(To),E0=n(To,"LI",{});var jDe=s(E0);J5e=n(jDe,"STRONG",{});var GIt=s(J5e);yWr=r(GIt,"xlm-roberta"),GIt.forEach(t),xWr=r(jDe," \u2014 "),wee=n(jDe,"A",{href:!0});var OIt=s(wee);$Wr=r(OIt,"FlaxXLMRobertaForTokenClassification"),OIt.forEach(t),kWr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),To.forEach(t),SWr=i(fi),T(C0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),UOe=i(f),mf=n(f,"H2",{class:!0});var aze=s(mf);w0=n(aze,"A",{id:!0,class:!0,href:!0});var VIt=s(w0);Y5e=n(VIt,"SPAN",{});var XIt=s(Y5e);T(i$.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),RWr=i(aze),K5e=n(aze,"SPAN",{});var zIt=s(K5e);PWr=r(zIt,"FlaxAutoModelForMultipleChoice"),zIt.forEach(t),aze.forEach(t),JOe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(d$.$$.fragment,mi),BWr=i(mi),gf=n(mi,"P",{});var Ire=s(gf);IWr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=n(Ire,"A",{href:!0});var WIt=s(Aee);NWr=r(WIt,"from_pretrained()"),WIt.forEach(t),qWr=r(Ire," class method or the "),Lee=n(Ire,"A",{href:!0});var QIt=s(Lee);jWr=r(QIt,"from_config()"),QIt.forEach(t),DWr=r(Ire,` class
method.`),Ire.forEach(t),GWr=i(mi),c$=n(mi,"P",{});var nze=s(c$);OWr=r(nze,"This class cannot be instantiated directly using "),Z5e=n(nze,"CODE",{});var HIt=s(Z5e);VWr=r(HIt,"__init__()"),HIt.forEach(t),XWr=r(nze," (throws an error)."),nze.forEach(t),zWr=i(mi),Kt=n(mi,"DIV",{class:!0});var lL=s(Kt);T(f$.$$.fragment,lL),WWr=i(lL),e3e=n(lL,"P",{});var UIt=s(e3e);QWr=r(UIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UIt.forEach(t),HWr=i(lL),hf=n(lL,"P",{});var Nre=s(hf);UWr=r(Nre,`Note:
Loading a model from its configuration file does `),o3e=n(Nre,"STRONG",{});var JIt=s(o3e);JWr=r(JIt,"not"),JIt.forEach(t),YWr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Nre,"A",{href:!0});var YIt=s(yee);KWr=r(YIt,"from_pretrained()"),YIt.forEach(t),ZWr=r(Nre," to load the model weights."),Nre.forEach(t),eQr=i(lL),T(A0.$$.fragment,lL),lL.forEach(t),oQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(m$.$$.fragment,gi),rQr=i(gi),r3e=n(gi,"P",{});var KIt=s(r3e);tQr=r(KIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KIt.forEach(t),aQr=i(gi),Ln=n(gi,"P",{});var iL=s(Ln);nQr=r(iL,"The model class to instantiate is selected based on the "),t3e=n(iL,"CODE",{});var ZIt=s(t3e);sQr=r(ZIt,"model_type"),ZIt.forEach(t),lQr=r(iL,` property of the config object (either
passed as an argument or loaded from `),a3e=n(iL,"CODE",{});var eNt=s(a3e);iQr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),dQr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(iL,"CODE",{});var oNt=s(n3e);cQr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),fQr=r(iL,":"),iL.forEach(t),mQr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);L0=n(Mo,"LI",{});var DDe=s(L0);s3e=n(DDe,"STRONG",{});var rNt=s(s3e);gQr=r(rNt,"albert"),rNt.forEach(t),hQr=r(DDe," \u2014 "),xee=n(DDe,"A",{href:!0});var tNt=s(xee);pQr=r(tNt,"FlaxAlbertForMultipleChoice"),tNt.forEach(t),uQr=r(DDe," (ALBERT model)"),DDe.forEach(t),_Qr=i(Mo),y0=n(Mo,"LI",{});var GDe=s(y0);l3e=n(GDe,"STRONG",{});var aNt=s(l3e);bQr=r(aNt,"bert"),aNt.forEach(t),vQr=r(GDe," \u2014 "),$ee=n(GDe,"A",{href:!0});var nNt=s($ee);FQr=r(nNt,"FlaxBertForMultipleChoice"),nNt.forEach(t),TQr=r(GDe," (BERT model)"),GDe.forEach(t),MQr=i(Mo),x0=n(Mo,"LI",{});var ODe=s(x0);i3e=n(ODe,"STRONG",{});var sNt=s(i3e);EQr=r(sNt,"big_bird"),sNt.forEach(t),CQr=r(ODe," \u2014 "),kee=n(ODe,"A",{href:!0});var lNt=s(kee);wQr=r(lNt,"FlaxBigBirdForMultipleChoice"),lNt.forEach(t),AQr=r(ODe," (BigBird model)"),ODe.forEach(t),LQr=i(Mo),$0=n(Mo,"LI",{});var VDe=s($0);d3e=n(VDe,"STRONG",{});var iNt=s(d3e);yQr=r(iNt,"distilbert"),iNt.forEach(t),xQr=r(VDe," \u2014 "),See=n(VDe,"A",{href:!0});var dNt=s(See);$Qr=r(dNt,"FlaxDistilBertForMultipleChoice"),dNt.forEach(t),kQr=r(VDe," (DistilBERT model)"),VDe.forEach(t),SQr=i(Mo),k0=n(Mo,"LI",{});var XDe=s(k0);c3e=n(XDe,"STRONG",{});var cNt=s(c3e);RQr=r(cNt,"electra"),cNt.forEach(t),PQr=r(XDe," \u2014 "),Ree=n(XDe,"A",{href:!0});var fNt=s(Ree);BQr=r(fNt,"FlaxElectraForMultipleChoice"),fNt.forEach(t),IQr=r(XDe," (ELECTRA model)"),XDe.forEach(t),NQr=i(Mo),S0=n(Mo,"LI",{});var zDe=s(S0);f3e=n(zDe,"STRONG",{});var mNt=s(f3e);qQr=r(mNt,"roberta"),mNt.forEach(t),jQr=r(zDe," \u2014 "),Pee=n(zDe,"A",{href:!0});var gNt=s(Pee);DQr=r(gNt,"FlaxRobertaForMultipleChoice"),gNt.forEach(t),GQr=r(zDe," (RoBERTa model)"),zDe.forEach(t),OQr=i(Mo),R0=n(Mo,"LI",{});var WDe=s(R0);m3e=n(WDe,"STRONG",{});var hNt=s(m3e);VQr=r(hNt,"roformer"),hNt.forEach(t),XQr=r(WDe," \u2014 "),Bee=n(WDe,"A",{href:!0});var pNt=s(Bee);zQr=r(pNt,"FlaxRoFormerForMultipleChoice"),pNt.forEach(t),WQr=r(WDe," (RoFormer model)"),WDe.forEach(t),QQr=i(Mo),P0=n(Mo,"LI",{});var QDe=s(P0);g3e=n(QDe,"STRONG",{});var uNt=s(g3e);HQr=r(uNt,"xlm-roberta"),uNt.forEach(t),UQr=r(QDe," \u2014 "),Iee=n(QDe,"A",{href:!0});var _Nt=s(Iee);JQr=r(_Nt,"FlaxXLMRobertaForMultipleChoice"),_Nt.forEach(t),YQr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),Mo.forEach(t),KQr=i(gi),T(B0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),YOe=i(f),pf=n(f,"H2",{class:!0});var sze=s(pf);I0=n(sze,"A",{id:!0,class:!0,href:!0});var bNt=s(I0);h3e=n(bNt,"SPAN",{});var vNt=s(h3e);T(g$.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),ZQr=i(sze),p3e=n(sze,"SPAN",{});var FNt=s(p3e);eHr=r(FNt,"FlaxAutoModelForNextSentencePrediction"),FNt.forEach(t),sze.forEach(t),KOe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(h$.$$.fragment,hi),oHr=i(hi),uf=n(hi,"P",{});var qre=s(uf);rHr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=n(qre,"A",{href:!0});var TNt=s(Nee);tHr=r(TNt,"from_pretrained()"),TNt.forEach(t),aHr=r(qre," class method or the "),qee=n(qre,"A",{href:!0});var MNt=s(qee);nHr=r(MNt,"from_config()"),MNt.forEach(t),sHr=r(qre,` class
method.`),qre.forEach(t),lHr=i(hi),p$=n(hi,"P",{});var lze=s(p$);iHr=r(lze,"This class cannot be instantiated directly using "),u3e=n(lze,"CODE",{});var ENt=s(u3e);dHr=r(ENt,"__init__()"),ENt.forEach(t),cHr=r(lze," (throws an error)."),lze.forEach(t),fHr=i(hi),Zt=n(hi,"DIV",{class:!0});var dL=s(Zt);T(u$.$$.fragment,dL),mHr=i(dL),_3e=n(dL,"P",{});var CNt=s(_3e);gHr=r(CNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CNt.forEach(t),hHr=i(dL),_f=n(dL,"P",{});var jre=s(_f);pHr=r(jre,`Note:
Loading a model from its configuration file does `),b3e=n(jre,"STRONG",{});var wNt=s(b3e);uHr=r(wNt,"not"),wNt.forEach(t),_Hr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(jre,"A",{href:!0});var ANt=s(jee);bHr=r(ANt,"from_pretrained()"),ANt.forEach(t),vHr=r(jre," to load the model weights."),jre.forEach(t),FHr=i(dL),T(N0.$$.fragment,dL),dL.forEach(t),THr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(_$.$$.fragment,pi),MHr=i(pi),v3e=n(pi,"P",{});var LNt=s(v3e);EHr=r(LNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LNt.forEach(t),CHr=i(pi),yn=n(pi,"P",{});var cL=s(yn);wHr=r(cL,"The model class to instantiate is selected based on the "),F3e=n(cL,"CODE",{});var yNt=s(F3e);AHr=r(yNt,"model_type"),yNt.forEach(t),LHr=r(cL,` property of the config object (either
passed as an argument or loaded from `),T3e=n(cL,"CODE",{});var xNt=s(T3e);yHr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),xHr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(cL,"CODE",{});var $Nt=s(M3e);$Hr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),kHr=r(cL,":"),cL.forEach(t),SHr=i(pi),E3e=n(pi,"UL",{});var kNt=s(E3e);q0=n(kNt,"LI",{});var HDe=s(q0);C3e=n(HDe,"STRONG",{});var SNt=s(C3e);RHr=r(SNt,"bert"),SNt.forEach(t),PHr=r(HDe," \u2014 "),Dee=n(HDe,"A",{href:!0});var RNt=s(Dee);BHr=r(RNt,"FlaxBertForNextSentencePrediction"),RNt.forEach(t),IHr=r(HDe," (BERT model)"),HDe.forEach(t),kNt.forEach(t),NHr=i(pi),T(j0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),ZOe=i(f),bf=n(f,"H2",{class:!0});var ize=s(bf);D0=n(ize,"A",{id:!0,class:!0,href:!0});var PNt=s(D0);w3e=n(PNt,"SPAN",{});var BNt=s(w3e);T(b$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),qHr=i(ize),A3e=n(ize,"SPAN",{});var INt=s(A3e);jHr=r(INt,"FlaxAutoModelForImageClassification"),INt.forEach(t),ize.forEach(t),eVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(v$.$$.fragment,ui),DHr=i(ui),vf=n(ui,"P",{});var Dre=s(vf);GHr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=n(Dre,"A",{href:!0});var NNt=s(Gee);OHr=r(NNt,"from_pretrained()"),NNt.forEach(t),VHr=r(Dre," class method or the "),Oee=n(Dre,"A",{href:!0});var qNt=s(Oee);XHr=r(qNt,"from_config()"),qNt.forEach(t),zHr=r(Dre,` class
method.`),Dre.forEach(t),WHr=i(ui),F$=n(ui,"P",{});var dze=s(F$);QHr=r(dze,"This class cannot be instantiated directly using "),L3e=n(dze,"CODE",{});var jNt=s(L3e);HHr=r(jNt,"__init__()"),jNt.forEach(t),UHr=r(dze," (throws an error)."),dze.forEach(t),JHr=i(ui),ea=n(ui,"DIV",{class:!0});var fL=s(ea);T(T$.$$.fragment,fL),YHr=i(fL),y3e=n(fL,"P",{});var DNt=s(y3e);KHr=r(DNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DNt.forEach(t),ZHr=i(fL),Ff=n(fL,"P",{});var Gre=s(Ff);eUr=r(Gre,`Note:
Loading a model from its configuration file does `),x3e=n(Gre,"STRONG",{});var GNt=s(x3e);oUr=r(GNt,"not"),GNt.forEach(t),rUr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Gre,"A",{href:!0});var ONt=s(Vee);tUr=r(ONt,"from_pretrained()"),ONt.forEach(t),aUr=r(Gre," to load the model weights."),Gre.forEach(t),nUr=i(fL),T(G0.$$.fragment,fL),fL.forEach(t),sUr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(M$.$$.fragment,_i),lUr=i(_i),$3e=n(_i,"P",{});var VNt=s($3e);iUr=r(VNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VNt.forEach(t),dUr=i(_i),xn=n(_i,"P",{});var mL=s(xn);cUr=r(mL,"The model class to instantiate is selected based on the "),k3e=n(mL,"CODE",{});var XNt=s(k3e);fUr=r(XNt,"model_type"),XNt.forEach(t),mUr=r(mL,` property of the config object (either
passed as an argument or loaded from `),S3e=n(mL,"CODE",{});var zNt=s(S3e);gUr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),hUr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(mL,"CODE",{});var WNt=s(R3e);pUr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),uUr=r(mL,":"),mL.forEach(t),_Ur=i(_i),E$=n(_i,"UL",{});var cze=s(E$);O0=n(cze,"LI",{});var UDe=s(O0);P3e=n(UDe,"STRONG",{});var QNt=s(P3e);bUr=r(QNt,"beit"),QNt.forEach(t),vUr=r(UDe," \u2014 "),Xee=n(UDe,"A",{href:!0});var HNt=s(Xee);FUr=r(HNt,"FlaxBeitForImageClassification"),HNt.forEach(t),TUr=r(UDe," (BEiT model)"),UDe.forEach(t),MUr=i(cze),V0=n(cze,"LI",{});var JDe=s(V0);B3e=n(JDe,"STRONG",{});var UNt=s(B3e);EUr=r(UNt,"vit"),UNt.forEach(t),CUr=r(JDe," \u2014 "),zee=n(JDe,"A",{href:!0});var JNt=s(zee);wUr=r(JNt,"FlaxViTForImageClassification"),JNt.forEach(t),AUr=r(JDe," (ViT model)"),JDe.forEach(t),cze.forEach(t),LUr=i(_i),T(X0.$$.fragment,_i),_i.forEach(t),ui.forEach(t),oVe=i(f),Tf=n(f,"H2",{class:!0});var fze=s(Tf);z0=n(fze,"A",{id:!0,class:!0,href:!0});var YNt=s(z0);I3e=n(YNt,"SPAN",{});var KNt=s(I3e);T(C$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),yUr=i(fze),N3e=n(fze,"SPAN",{});var ZNt=s(N3e);xUr=r(ZNt,"FlaxAutoModelForVision2Seq"),ZNt.forEach(t),fze.forEach(t),rVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(w$.$$.fragment,bi),$Ur=i(bi),Mf=n(bi,"P",{});var Ore=s(Mf);kUr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=n(Ore,"A",{href:!0});var eqt=s(Wee);SUr=r(eqt,"from_pretrained()"),eqt.forEach(t),RUr=r(Ore," class method or the "),Qee=n(Ore,"A",{href:!0});var oqt=s(Qee);PUr=r(oqt,"from_config()"),oqt.forEach(t),BUr=r(Ore,` class
method.`),Ore.forEach(t),IUr=i(bi),A$=n(bi,"P",{});var mze=s(A$);NUr=r(mze,"This class cannot be instantiated directly using "),q3e=n(mze,"CODE",{});var rqt=s(q3e);qUr=r(rqt,"__init__()"),rqt.forEach(t),jUr=r(mze," (throws an error)."),mze.forEach(t),DUr=i(bi),oa=n(bi,"DIV",{class:!0});var gL=s(oa);T(L$.$$.fragment,gL),GUr=i(gL),j3e=n(gL,"P",{});var tqt=s(j3e);OUr=r(tqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tqt.forEach(t),VUr=i(gL),Ef=n(gL,"P",{});var Vre=s(Ef);XUr=r(Vre,`Note:
Loading a model from its configuration file does `),D3e=n(Vre,"STRONG",{});var aqt=s(D3e);zUr=r(aqt,"not"),aqt.forEach(t),WUr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Vre,"A",{href:!0});var nqt=s(Hee);QUr=r(nqt,"from_pretrained()"),nqt.forEach(t),HUr=r(Vre," to load the model weights."),Vre.forEach(t),UUr=i(gL),T(W0.$$.fragment,gL),gL.forEach(t),JUr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(y$.$$.fragment,vi),YUr=i(vi),G3e=n(vi,"P",{});var sqt=s(G3e);KUr=r(sqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sqt.forEach(t),ZUr=i(vi),$n=n(vi,"P",{});var hL=s($n);eJr=r(hL,"The model class to instantiate is selected based on the "),O3e=n(hL,"CODE",{});var lqt=s(O3e);oJr=r(lqt,"model_type"),lqt.forEach(t),rJr=r(hL,` property of the config object (either
passed as an argument or loaded from `),V3e=n(hL,"CODE",{});var iqt=s(V3e);tJr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),aJr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(hL,"CODE",{});var dqt=s(X3e);nJr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),sJr=r(hL,":"),hL.forEach(t),lJr=i(vi),z3e=n(vi,"UL",{});var cqt=s(z3e);Q0=n(cqt,"LI",{});var YDe=s(Q0);W3e=n(YDe,"STRONG",{});var fqt=s(W3e);iJr=r(fqt,"vision-encoder-decoder"),fqt.forEach(t),dJr=r(YDe," \u2014 "),Uee=n(YDe,"A",{href:!0});var mqt=s(Uee);cJr=r(mqt,"FlaxVisionEncoderDecoderModel"),mqt.forEach(t),fJr=r(YDe," (Vision Encoder decoder model)"),YDe.forEach(t),cqt.forEach(t),mJr=i(vi),T(H0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Yk,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Kk,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertConfig"),c(Zk,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartConfig"),c(eS,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitConfig"),c(oS,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertConfig"),c(rS,"href","/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tS,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdConfig"),c(aS,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nS,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sS,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lS,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomConfig"),c(iS,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertConfig"),c(dS,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineConfig"),c(cS,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPConfig"),c(fS,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertConfig"),c(mS,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextConfig"),c(gS,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLConfig"),c(hS,"href","/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtConfig"),c(pS,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uS,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_S,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(bS,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaConfig"),c(vS,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(FS,"href","/docs/transformers/pr_17761/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(TS,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTConfig"),c(MS,"href","/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrConfig"),c(ES,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertConfig"),c(CS,"href","/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRConfig"),c(wS,"href","/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTConfig"),c(AS,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraConfig"),c(LS,"href","/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yS,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertConfig"),c(xS,"href","/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaConfig"),c($S,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetConfig"),c(kS,"href","/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTConfig"),c(SS,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelConfig"),c(RS,"href","/docs/transformers/pr_17761/en/model_doc/glpn#transformers.GLPNConfig"),c(PS,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Config"),c(BS,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(IS,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(NS,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJConfig"),c(qS,"href","/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertConfig"),c(jS,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertConfig"),c(DS,"href","/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(GS,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(OS,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(VS,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(XS,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDConfig"),c(zS,"href","/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitConfig"),c(WS,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerConfig"),c(QS,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Config"),c(HS,"href","/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeConfig"),c(US,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertConfig"),c(JS,"href","/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Config"),c(YS,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianConfig"),c(KS,"href","/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ZS,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartConfig"),c(eR,"href","/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTConfig"),c(oR,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rR,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tR,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetConfig"),c(aR,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Config"),c(nR,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sR,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lR,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTConfig"),c(iR,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusConfig"),c(dR,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cR,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartConfig"),c(fR,"href","/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mR,"href","/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gR,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hR,"href","/docs/transformers/pr_17761/en/model_doc/rag#transformers.RagConfig"),c(pR,"href","/docs/transformers/pr_17761/en/model_doc/realm#transformers.RealmConfig"),c(uR,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerConfig"),c(_R,"href","/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetConfig"),c(bR,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertConfig"),c(vR,"href","/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetConfig"),c(FR,"href","/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertConfig"),c(TR,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaConfig"),c(MR,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerConfig"),c(ER,"href","/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerConfig"),c(CR,"href","/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWConfig"),c(wR,"href","/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDConfig"),c(AR,"href","/docs/transformers/pr_17761/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LR,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yR,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xR,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterConfig"),c($R,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kR,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinConfig"),c(SR,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Config"),c(RR,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasConfig"),c(PR,"href","/docs/transformers/pr_17761/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BR,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IR,"href","/docs/transformers/pr_17761/en/model_doc/trocr#transformers.TrOCRConfig"),c(NR,"href","/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qR,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jR,"href","/docs/transformers/pr_17761/en/model_doc/van#transformers.VanConfig"),c(DR,"href","/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltConfig"),c(GR,"href","/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OR,"href","/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VR,"href","/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XR,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTConfig"),c(zR,"href","/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WR,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QR,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HR,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMConfig"),c(UR,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMConfig"),c(JR,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMConfig"),c(YR,"href","/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KR,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZR,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eP,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetConfig"),c(oP,"href","/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosConfig"),c(rP,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(tP,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aP,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizer"),c(nP,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartTokenizer"),c(lP,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartTokenizerFast"),c(iP,"href","/docs/transformers/pr_17761/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dP,"href","/docs/transformers/pr_17761/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cP,"href","/docs/transformers/pr_17761/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fP,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizer"),c(mP,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hP,"href","/docs/transformers/pr_17761/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pP,"href","/docs/transformers/pr_17761/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uP,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_P,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bP,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vP,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FP,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TP,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MP,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(EP,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(CP,"href","/docs/transformers/pr_17761/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wP,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AP,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineTokenizer"),c(yP,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPTokenizer"),c(xP,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($P,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kP,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17761/en/model_doc/cpm#transformers.CpmTokenizer"),c(RP,"href","/docs/transformers/pr_17761/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PP,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BP,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IP,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NP,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qP,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jP,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DP,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GP,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OP,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XP,"href","/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zP,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraTokenizer"),c(WP,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QP,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HP,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetTokenizer"),c(UP,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JP,"href","/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YP,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KP,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tB,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17761/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lB,"href","/docs/transformers/pr_17761/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uB,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_B,"href","/docs/transformers/pr_17761/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bB,"href","/docs/transformers/pr_17761/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDTokenizer"),c(FB,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDTokenizerFast"),c(TB,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MB,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5Tokenizer"),c(CB,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5TokenizerFast"),c(wB,"href","/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeTokenizer"),c(AB,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LB,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xB,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianTokenizer"),c($B,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartTokenizer"),c(kB,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SB,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RB,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PB,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizer"),c(BB,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17761/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NB,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qB,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DB,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5Tokenizer"),c(OB,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WB,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(QB,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UB,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JB,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YB,"href","/docs/transformers/pr_17761/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KB,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZB,"href","/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17761/en/model_doc/rag#transformers.RagTokenizer"),c(tI,"href","/docs/transformers/pr_17761/en/model_doc/realm#transformers.RealmTokenizer"),c(aI,"href","/docs/transformers/pr_17761/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nI,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sI,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lI,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iI,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cI,"href","/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mI,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gI,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hI,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pI,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(uI,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_I,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bI,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vI,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FI,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5Tokenizer"),c(MI,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.T5TokenizerFast"),c(EI,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasTokenizer"),c(CI,"href","/docs/transformers/pr_17761/en/model_doc/tapex#transformers.TapexTokenizer"),c(wI,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kI,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RI,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PI,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BI,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMTokenizer"),c(II,"href","/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NI,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qI,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DI,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OI,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VI,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(zI,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(WI,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17761/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aN,"href","/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(sN,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoProcessor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(CN,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wN,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPProcessor"),c(AN,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(LN,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yN,"href","/docs/transformers/pr_17761/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($N,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kN,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SN,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RN,"href","/docs/transformers/pr_17761/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltProcessor"),c(NN,"href","/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoModel"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(GN,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertModel"),c(zN,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartModel"),c(WN,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitModel"),c(QN,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertModel"),c(HN,"href","/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UN,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdModel"),c(JN,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YN,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KN,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZN,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomModel"),c(eq,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertModel"),c(oq,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineModel"),c(rq,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.CLIPModel"),c(tq,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertModel"),c(aq,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextModel"),c(nq,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLModel"),c(sq,"href","/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtModel"),c(lq,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iq,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dq,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cq,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaModel"),c(fq,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mq,"href","/docs/transformers/pr_17761/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gq,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTModel"),c(hq,"href","/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrModel"),c(pq,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertModel"),c(uq,"href","/docs/transformers/pr_17761/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_q,"href","/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTModel"),c(bq,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraModel"),c(vq,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertModel"),c(Fq,"href","/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaModel"),c(Tq,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetModel"),c(Mq,"href","/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTModel"),c(Eq,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelModel"),c(Cq,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wq,"href","/docs/transformers/pr_17761/en/model_doc/glpn#transformers.GLPNModel"),c(Aq,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2Model"),c(Lq,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yq,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(xq,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJModel"),c($q,"href","/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertModel"),c(kq,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertModel"),c(Sq,"href","/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Rq,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Pq,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Bq,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Iq,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDModel"),c(Nq,"href","/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitModel"),c(qq,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerModel"),c(jq,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5Model"),c(Dq,"href","/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeModel"),c(Gq,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertModel"),c(Oq,"href","/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100Model"),c(Vq,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianModel"),c(Xq,"href","/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zq,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartModel"),c(Wq,"href","/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTModel"),c(Qq,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Hq,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Uq,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetModel"),c(Jq,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5Model"),c(Yq,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Kq,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Zq,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTModel"),c(ej,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusModel"),c(oj,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverModel"),c(rj,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartModel"),c(tj,"href","/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aj,"href","/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nj,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sj,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerModel"),c(lj,"href","/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetModel"),c(ij,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertModel"),c(dj,"href","/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetModel"),c(cj,"href","/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertModel"),c(fj,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaModel"),c(mj,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerModel"),c(gj,"href","/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerModel"),c(hj,"href","/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWModel"),c(pj,"href","/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDModel"),c(uj,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_j,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterModel"),c(bj,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vj,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinModel"),c(Fj,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5Model"),c(Tj,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasModel"),c(Mj,"href","/docs/transformers/pr_17761/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Ej,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Cj,"href","/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wj,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Aj,"href","/docs/transformers/pr_17761/en/model_doc/van#transformers.VanModel"),c(Lj,"href","/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltModel"),c(yj,"href","/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(xj,"href","/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertModel"),c($j,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTModel"),c(kj,"href","/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Sj,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Rj,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Pj,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMModel"),c(Bj,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMModel"),c(Ij,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMModel"),c(Nj,"href","/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qj,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jj,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Dj,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetModel"),c(Gj,"href","/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosModel"),c(Oj,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Vj,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Qj,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForPreTraining"),c(Uj,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Jj,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Yj,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eD,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oD,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rD,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aD,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nD,"href","/docs/transformers/pr_17761/en/model_doc/flava#transformers.FlavaForPreTraining"),c(sD,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForPreTraining"),c(lD,"href","/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(dD,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cD,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mD,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gD,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hD,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pD,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uD,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_D,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17761/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FD,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(TD,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CD,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wD,"href","/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AD,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(LD,"href","/docs/transformers/pr_17761/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yD,"href","/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xD,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($D,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kD,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RD,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PD,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForCausalLM"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(BD,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ND,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qD,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForCausalLM"),c(jD,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertLMHeadModel"),c(DD,"href","/docs/transformers/pr_17761/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GD,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OD,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VD,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XD,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zD,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForCausalLM"),c(WD,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QD,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HD,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UD,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JD,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YD,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KD,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(ZD,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(eG,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianForCausalLM"),c(oG,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rG,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tG,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aG,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.OPTForCausalLM"),c(nG,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sG,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lG,"href","/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(iG,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dG,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cG,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fG,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mG,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gG,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hG,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pG,"href","/docs/transformers/pr_17761/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uG,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_G,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vG,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(FG,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(TG,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.AutoModelForMaskedLM"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(MG,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EG,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CG,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wG,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForMaskedLM"),c(yG,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xG,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($G,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(SG,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PG,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BG,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(IG,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(NG,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(qG,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jG,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(GG,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(OG,"href","/docs/transformers/pr_17761/en/model_doc/luke#transformers.LukeForMaskedLM"),c(VG,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(zG,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QG,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(HG,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UG,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(YG,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rO,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tO,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nO,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.AutoModelForSeq2SeqLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(hO,"href","/docs/transformers/pr_17761/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17761/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.MarianMTModel"),c(vO,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17761/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17761/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForSequenceClassification"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(AO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c($O,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17761/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(EV,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c($V,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForNextSentencePrediction"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(oX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nX,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sX,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lX,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iX,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTokenClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(dX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gX,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForTokenClassification"),c(hX,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(pX,"href","/docs/transformers/pr_17761/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(uX,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bX,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vX,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FX,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TX,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MX,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CX,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AX,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(LX,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yX,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($X,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kX,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(RX,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(IX,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(NX,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(DX,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(GX,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(VX,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(XX,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(zX,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(WX,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForQuestionAnswering"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(QX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17761/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17761/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(cz,"href","/docs/transformers/pr_17761/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17761/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17761/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17761/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17761/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17761/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17761/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17761/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17761/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Sz,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Bz,"href","/docs/transformers/pr_17761/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForTableQuestionAnswering"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForImageClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitForImageClassification"),c(Xz,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(zz,"href","/docs/transformers/pr_17761/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Wz,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Qz,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Hz,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Uz,"href","/docs/transformers/pr_17761/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Jz,"href","/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitForImageClassification"),c(Yz,"href","/docs/transformers/pr_17761/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Kz,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Zz,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(eW,"href","/docs/transformers/pr_17761/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(oW,"href","/docs/transformers/pr_17761/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(rW,"href","/docs/transformers/pr_17761/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(tW,"href","/docs/transformers/pr_17761/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(aW,"href","/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(nW,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinForImageClassification"),c(sW,"href","/docs/transformers/pr_17761/en/model_doc/van#transformers.VanForImageClassification"),c(lW,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForVision2Seq"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(iW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(mW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17761/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.AutoModelForAudioClassification"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(uW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.AutoModelForAudioFrameClassification"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SW,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(BW,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForCTC"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(IW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DW,"href","/docs/transformers/pr_17761/en/model_doc/hubert#transformers.HubertForCTC"),c(GW,"href","/docs/transformers/pr_17761/en/model_doc/mctct#transformers.MCTCTForCTC"),c(OW,"href","/docs/transformers/pr_17761/en/model_doc/sew#transformers.SEWForCTC"),c(VW,"href","/docs/transformers/pr_17761/en/model_doc/sew-d#transformers.SEWDForCTC"),c(XW,"href","/docs/transformers/pr_17761/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(zW,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(WW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(QW,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(HW,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17761/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ZW,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.AutoModelForAudioXVector"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(eQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(aQ,"href","/docs/transformers/pr_17761/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(nQ,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(sQ,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(lQ,"href","/docs/transformers/pr_17761/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForMaskedImageModeling"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17761/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(mQ,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(gQ,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForObjectDetection"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrForObjectDetection"),c(bQ,"href","/docs/transformers/pr_17761/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForImageSegmentation"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17761/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForSemanticSegmentation"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(LQ,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yQ,"href","/docs/transformers/pr_17761/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(xQ,"href","/docs/transformers/pr_17761/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForInstanceSegmentation"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17761/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModel"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertModel"),c(qQ,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartModel"),c(jQ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertModel"),c(DQ,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(GQ,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(OQ,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertModel"),c(VQ,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.TFCLIPModel"),c(XQ,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertModel"),c(zQ,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.TFConvNextModel"),c(WQ,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLModel"),c(QQ,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(HQ,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaModel"),c(UQ,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(JQ,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(YQ,"href","/docs/transformers/pr_17761/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(KQ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraModel"),c(ZQ,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(eH,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelModel"),c(oH,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(rH,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2Model"),c(tH,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJModel"),c(aH,"href","/docs/transformers/pr_17761/en/model_doc/hubert#transformers.TFHubertModel"),c(nH,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(sH,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.TFLEDModel"),c(lH,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerModel"),c(iH,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.TFLxmertModel"),c(dH,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.TFMarianModel"),c(cH,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.TFMBartModel"),c(fH,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(mH,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetModel"),c(gH,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.TFMT5Model"),c(hH,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(pH,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.TFOPTModel"),c(uH,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_H,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertModel"),c(bH,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaModel"),c(vH,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerModel"),c(FH,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(TH,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.TFSwinModel"),c(MH,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5Model"),c(EH,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasModel"),c(CH,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(wH,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.TFViTModel"),c(AH,"href","/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(LH,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yH,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMModel"),c(xH,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c($H,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForPreTraining"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(BH,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForPreTraining"),c(NH,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qH,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jH,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DH,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(GH,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OH,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(VH,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XH,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zH,"href","/docs/transformers/pr_17761/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(WH,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(QH,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HH,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UH,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JH,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KH,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17761/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(eU,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oU,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(rU,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForCausalLM"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(lU,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(iU,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dU,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cU,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(fU,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mU,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(gU,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hU,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pU,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uU,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_U,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bU,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForImageClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(vU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17761/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EU,"href","/docs/transformers/pr_17761/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CU,"href","/docs/transformers/pr_17761/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(wU,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForMaskedLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c($U,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(RU,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(PU,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BU,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NU,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qU,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(jU,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DU,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(GU,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VU,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zU,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(WU,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QU,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(rJ,"href","/docs/transformers/pr_17761/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.TFMarianMTModel"),c(aJ,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForSequenceClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17761/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17761/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($J,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17761/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForMultipleChoice"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(tY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(lY,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(iY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17761/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForTokenClassification"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uY,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(bY,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(vY,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FY,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(TY,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(EY,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(wY,"href","/docs/transformers/pr_17761/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(AY,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LY,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xY,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(kY,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(SY,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(RY,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(PY,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForQuestionAnswering"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17761/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17761/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17761/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17761/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17761/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QY,"href","/docs/transformers/pr_17761/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17761/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17761/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17761/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17761/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17761/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(rK,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17761/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForVision2Seq"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(iK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17761/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModel"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uK,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartModel"),c(_K,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.FlaxBeitModel"),c(bK,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertModel"),c(vK,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(FK,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(TK,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(MK,"href","/docs/transformers/pr_17761/en/model_doc/clip#transformers.FlaxCLIPModel"),c(EK,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(CK,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraModel"),c(wK,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(AK,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LK,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yK,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(xK,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.FlaxMarianModel"),c($K,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kK,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SK,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.FlaxOPTModel"),c(RK,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PK,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BK,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IK,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5Model"),c(NK,"href","/docs/transformers/pr_17761/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qK,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.FlaxViTModel"),c(jK,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DK,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GK,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForCausalLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WK,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QK,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HK,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UK,"href","/docs/transformers/pr_17761/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JK,"href","/docs/transformers/pr_17761/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YK,"href","/docs/transformers/pr_17761/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KK,"href","/docs/transformers/pr_17761/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ZK,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eZ,"href","/docs/transformers/pr_17761/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForPreTraining"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nZ,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lZ,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iZ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dZ,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fZ,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gZ,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hZ,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17761/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uZ,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForMaskedLM"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CZ,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AZ,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LZ,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c($Z,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17761/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_17761/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NZ,"href","/docs/transformers/pr_17761/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17761/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jZ,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17761/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GZ,"href","/docs/transformers/pr_17761/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17761/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QZ,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HZ,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(ree,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(see,"href","/docs/transformers/pr_17761/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lee,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iee,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dee,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17761/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.FlaxAutoModelForTokenClassification"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(pee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vee,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Fee,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Tee,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Mee,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wee,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(Aee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_17761/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($ee,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_17761/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(See,"href","/docs/transformers/pr_17761/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_17761/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17761/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17761/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17761/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17761/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForImageClassification"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17761/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zee,"href","/docs/transformers/pr_17761/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForVision2Seq"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Wee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_17761/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/pr_17761/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,pL),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,uL),e(We,Rn),e(We,Pn),e(Pn,_L),e(We,Ci),e(We,Bn),e(Bn,bL),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,zk),e(Ae,Ai),e(Ai,Wk),e(Ae,Qk),b(f,Co,_),b(f,xa,_),e(xa,Hk),e(xa,$f),e($f,Uk),e(xa,gze),b(f,KDe,_),b(f,Li,_),e(Li,kf),e(kf,Xre),M(vL,Xre,null),e(Li,hze),e(Li,zre),e(zre,pze),b(f,ZDe,_),b(f,In,_),e(In,uze),e(In,Wre),e(Wre,_ze),e(In,bze),e(In,Qre),e(Qre,vze),e(In,Fze),b(f,eGe,_),M(FL,f,_),b(f,oGe,_),b(f,Jk,_),e(Jk,Tze),b(f,rGe,_),M(Sf,f,_),b(f,tGe,_),b(f,yi,_),e(yi,Rf),e(Rf,Hre),M(TL,Hre,null),e(yi,Mze),e(yi,Ure),e(Ure,Eze),b(f,aGe,_),b(f,wo,_),M(ML,wo,null),e(wo,Cze),e(wo,EL),e(EL,wze),e(EL,Yk),e(Yk,Aze),e(EL,Lze),e(wo,yze),e(wo,CL),e(CL,xze),e(CL,Jre),e(Jre,$ze),e(CL,kze),e(wo,Sze),e(wo,wr),M(wL,wr,null),e(wr,Rze),e(wr,Yre),e(Yre,Pze),e(wr,Bze),e(wr,xi),e(xi,Ize),e(xi,Kre),e(Kre,Nze),e(xi,qze),e(xi,Zre),e(Zre,jze),e(xi,Dze),e(wr,Gze),e(wr,A),e(A,Pf),e(Pf,ete),e(ete,Oze),e(Pf,Vze),e(Pf,Kk),e(Kk,Xze),e(Pf,zze),e(A,Wze),e(A,Bf),e(Bf,ote),e(ote,Qze),e(Bf,Hze),e(Bf,Zk),e(Zk,Uze),e(Bf,Jze),e(A,Yze),e(A,If),e(If,rte),e(rte,Kze),e(If,Zze),e(If,eS),e(eS,eWe),e(If,oWe),e(A,rWe),e(A,Nf),e(Nf,tte),e(tte,tWe),e(Nf,aWe),e(Nf,oS),e(oS,nWe),e(Nf,sWe),e(A,lWe),e(A,qf),e(qf,ate),e(ate,iWe),e(qf,dWe),e(qf,rS),e(rS,cWe),e(qf,fWe),e(A,mWe),e(A,jf),e(jf,nte),e(nte,gWe),e(jf,hWe),e(jf,tS),e(tS,pWe),e(jf,uWe),e(A,_We),e(A,Df),e(Df,ste),e(ste,bWe),e(Df,vWe),e(Df,aS),e(aS,FWe),e(Df,TWe),e(A,MWe),e(A,Gf),e(Gf,lte),e(lte,EWe),e(Gf,CWe),e(Gf,nS),e(nS,wWe),e(Gf,AWe),e(A,LWe),e(A,Of),e(Of,ite),e(ite,yWe),e(Of,xWe),e(Of,sS),e(sS,$We),e(Of,kWe),e(A,SWe),e(A,Vf),e(Vf,dte),e(dte,RWe),e(Vf,PWe),e(Vf,lS),e(lS,BWe),e(Vf,IWe),e(A,NWe),e(A,Xf),e(Xf,cte),e(cte,qWe),e(Xf,jWe),e(Xf,iS),e(iS,DWe),e(Xf,GWe),e(A,OWe),e(A,zf),e(zf,fte),e(fte,VWe),e(zf,XWe),e(zf,dS),e(dS,zWe),e(zf,WWe),e(A,QWe),e(A,Wf),e(Wf,mte),e(mte,HWe),e(Wf,UWe),e(Wf,cS),e(cS,JWe),e(Wf,YWe),e(A,KWe),e(A,Qf),e(Qf,gte),e(gte,ZWe),e(Qf,eQe),e(Qf,fS),e(fS,oQe),e(Qf,rQe),e(A,tQe),e(A,Hf),e(Hf,hte),e(hte,aQe),e(Hf,nQe),e(Hf,mS),e(mS,sQe),e(Hf,lQe),e(A,iQe),e(A,Uf),e(Uf,pte),e(pte,dQe),e(Uf,cQe),e(Uf,gS),e(gS,fQe),e(Uf,mQe),e(A,gQe),e(A,Jf),e(Jf,ute),e(ute,hQe),e(Jf,pQe),e(Jf,hS),e(hS,uQe),e(Jf,_Qe),e(A,bQe),e(A,Yf),e(Yf,_te),e(_te,vQe),e(Yf,FQe),e(Yf,pS),e(pS,TQe),e(Yf,MQe),e(A,EQe),e(A,Kf),e(Kf,bte),e(bte,CQe),e(Kf,wQe),e(Kf,uS),e(uS,AQe),e(Kf,LQe),e(A,yQe),e(A,Zf),e(Zf,vte),e(vte,xQe),e(Zf,$Qe),e(Zf,_S),e(_S,kQe),e(Zf,SQe),e(A,RQe),e(A,em),e(em,Fte),e(Fte,PQe),e(em,BQe),e(em,bS),e(bS,IQe),e(em,NQe),e(A,qQe),e(A,om),e(om,Tte),e(Tte,jQe),e(om,DQe),e(om,vS),e(vS,GQe),e(om,OQe),e(A,VQe),e(A,rm),e(rm,Mte),e(Mte,XQe),e(rm,zQe),e(rm,FS),e(FS,WQe),e(rm,QQe),e(A,HQe),e(A,tm),e(tm,Ete),e(Ete,UQe),e(tm,JQe),e(tm,TS),e(TS,YQe),e(tm,KQe),e(A,ZQe),e(A,am),e(am,Cte),e(Cte,eHe),e(am,oHe),e(am,MS),e(MS,rHe),e(am,tHe),e(A,aHe),e(A,nm),e(nm,wte),e(wte,nHe),e(nm,sHe),e(nm,ES),e(ES,lHe),e(nm,iHe),e(A,dHe),e(A,sm),e(sm,Ate),e(Ate,cHe),e(sm,fHe),e(sm,CS),e(CS,mHe),e(sm,gHe),e(A,hHe),e(A,lm),e(lm,Lte),e(Lte,pHe),e(lm,uHe),e(lm,wS),e(wS,_He),e(lm,bHe),e(A,vHe),e(A,im),e(im,yte),e(yte,FHe),e(im,THe),e(im,AS),e(AS,MHe),e(im,EHe),e(A,CHe),e(A,dm),e(dm,xte),e(xte,wHe),e(dm,AHe),e(dm,LS),e(LS,LHe),e(dm,yHe),e(A,xHe),e(A,cm),e(cm,$te),e($te,$He),e(cm,kHe),e(cm,yS),e(yS,SHe),e(cm,RHe),e(A,PHe),e(A,fm),e(fm,kte),e(kte,BHe),e(fm,IHe),e(fm,xS),e(xS,NHe),e(fm,qHe),e(A,jHe),e(A,mm),e(mm,Ste),e(Ste,DHe),e(mm,GHe),e(mm,$S),e($S,OHe),e(mm,VHe),e(A,XHe),e(A,gm),e(gm,Rte),e(Rte,zHe),e(gm,WHe),e(gm,kS),e(kS,QHe),e(gm,HHe),e(A,UHe),e(A,hm),e(hm,Pte),e(Pte,JHe),e(hm,YHe),e(hm,SS),e(SS,KHe),e(hm,ZHe),e(A,eUe),e(A,pm),e(pm,Bte),e(Bte,oUe),e(pm,rUe),e(pm,RS),e(RS,tUe),e(pm,aUe),e(A,nUe),e(A,um),e(um,Ite),e(Ite,sUe),e(um,lUe),e(um,PS),e(PS,iUe),e(um,dUe),e(A,cUe),e(A,_m),e(_m,Nte),e(Nte,fUe),e(_m,mUe),e(_m,BS),e(BS,gUe),e(_m,hUe),e(A,pUe),e(A,bm),e(bm,qte),e(qte,uUe),e(bm,_Ue),e(bm,IS),e(IS,bUe),e(bm,vUe),e(A,FUe),e(A,vm),e(vm,jte),e(jte,TUe),e(vm,MUe),e(vm,NS),e(NS,EUe),e(vm,CUe),e(A,wUe),e(A,Fm),e(Fm,Dte),e(Dte,AUe),e(Fm,LUe),e(Fm,qS),e(qS,yUe),e(Fm,xUe),e(A,$Ue),e(A,Tm),e(Tm,Gte),e(Gte,kUe),e(Tm,SUe),e(Tm,jS),e(jS,RUe),e(Tm,PUe),e(A,BUe),e(A,Mm),e(Mm,Ote),e(Ote,IUe),e(Mm,NUe),e(Mm,DS),e(DS,qUe),e(Mm,jUe),e(A,DUe),e(A,Em),e(Em,Vte),e(Vte,GUe),e(Em,OUe),e(Em,GS),e(GS,VUe),e(Em,XUe),e(A,zUe),e(A,Cm),e(Cm,Xte),e(Xte,WUe),e(Cm,QUe),e(Cm,OS),e(OS,HUe),e(Cm,UUe),e(A,JUe),e(A,wm),e(wm,zte),e(zte,YUe),e(wm,KUe),e(wm,VS),e(VS,ZUe),e(wm,eJe),e(A,oJe),e(A,Am),e(Am,Wte),e(Wte,rJe),e(Am,tJe),e(Am,XS),e(XS,aJe),e(Am,nJe),e(A,sJe),e(A,Lm),e(Lm,Qte),e(Qte,lJe),e(Lm,iJe),e(Lm,zS),e(zS,dJe),e(Lm,cJe),e(A,fJe),e(A,ym),e(ym,Hte),e(Hte,mJe),e(ym,gJe),e(ym,WS),e(WS,hJe),e(ym,pJe),e(A,uJe),e(A,xm),e(xm,Ute),e(Ute,_Je),e(xm,bJe),e(xm,QS),e(QS,vJe),e(xm,FJe),e(A,TJe),e(A,$m),e($m,Jte),e(Jte,MJe),e($m,EJe),e($m,HS),e(HS,CJe),e($m,wJe),e(A,AJe),e(A,km),e(km,Yte),e(Yte,LJe),e(km,yJe),e(km,US),e(US,xJe),e(km,$Je),e(A,kJe),e(A,Sm),e(Sm,Kte),e(Kte,SJe),e(Sm,RJe),e(Sm,JS),e(JS,PJe),e(Sm,BJe),e(A,IJe),e(A,Rm),e(Rm,Zte),e(Zte,NJe),e(Rm,qJe),e(Rm,YS),e(YS,jJe),e(Rm,DJe),e(A,GJe),e(A,Pm),e(Pm,eae),e(eae,OJe),e(Pm,VJe),e(Pm,KS),e(KS,XJe),e(Pm,zJe),e(A,WJe),e(A,Bm),e(Bm,oae),e(oae,QJe),e(Bm,HJe),e(Bm,ZS),e(ZS,UJe),e(Bm,JJe),e(A,YJe),e(A,Im),e(Im,rae),e(rae,KJe),e(Im,ZJe),e(Im,eR),e(eR,eYe),e(Im,oYe),e(A,rYe),e(A,Nm),e(Nm,tae),e(tae,tYe),e(Nm,aYe),e(Nm,oR),e(oR,nYe),e(Nm,sYe),e(A,lYe),e(A,qm),e(qm,aae),e(aae,iYe),e(qm,dYe),e(qm,rR),e(rR,cYe),e(qm,fYe),e(A,mYe),e(A,jm),e(jm,nae),e(nae,gYe),e(jm,hYe),e(jm,tR),e(tR,pYe),e(jm,uYe),e(A,_Ye),e(A,Dm),e(Dm,sae),e(sae,bYe),e(Dm,vYe),e(Dm,aR),e(aR,FYe),e(Dm,TYe),e(A,MYe),e(A,Gm),e(Gm,lae),e(lae,EYe),e(Gm,CYe),e(Gm,nR),e(nR,wYe),e(Gm,AYe),e(A,LYe),e(A,Om),e(Om,iae),e(iae,yYe),e(Om,xYe),e(Om,sR),e(sR,$Ye),e(Om,kYe),e(A,SYe),e(A,Vm),e(Vm,dae),e(dae,RYe),e(Vm,PYe),e(Vm,lR),e(lR,BYe),e(Vm,IYe),e(A,NYe),e(A,Xm),e(Xm,cae),e(cae,qYe),e(Xm,jYe),e(Xm,iR),e(iR,DYe),e(Xm,GYe),e(A,OYe),e(A,zm),e(zm,fae),e(fae,VYe),e(zm,XYe),e(zm,dR),e(dR,zYe),e(zm,WYe),e(A,QYe),e(A,Wm),e(Wm,mae),e(mae,HYe),e(Wm,UYe),e(Wm,cR),e(cR,JYe),e(Wm,YYe),e(A,KYe),e(A,Qm),e(Qm,gae),e(gae,ZYe),e(Qm,eKe),e(Qm,fR),e(fR,oKe),e(Qm,rKe),e(A,tKe),e(A,Hm),e(Hm,hae),e(hae,aKe),e(Hm,nKe),e(Hm,mR),e(mR,sKe),e(Hm,lKe),e(A,iKe),e(A,Um),e(Um,pae),e(pae,dKe),e(Um,cKe),e(Um,gR),e(gR,fKe),e(Um,mKe),e(A,gKe),e(A,Jm),e(Jm,uae),e(uae,hKe),e(Jm,pKe),e(Jm,hR),e(hR,uKe),e(Jm,_Ke),e(A,bKe),e(A,Ym),e(Ym,_ae),e(_ae,vKe),e(Ym,FKe),e(Ym,pR),e(pR,TKe),e(Ym,MKe),e(A,EKe),e(A,Km),e(Km,bae),e(bae,CKe),e(Km,wKe),e(Km,uR),e(uR,AKe),e(Km,LKe),e(A,yKe),e(A,Zm),e(Zm,vae),e(vae,xKe),e(Zm,$Ke),e(Zm,_R),e(_R,kKe),e(Zm,SKe),e(A,RKe),e(A,eg),e(eg,Fae),e(Fae,PKe),e(eg,BKe),e(eg,bR),e(bR,IKe),e(eg,NKe),e(A,qKe),e(A,og),e(og,Tae),e(Tae,jKe),e(og,DKe),e(og,vR),e(vR,GKe),e(og,OKe),e(A,VKe),e(A,rg),e(rg,Mae),e(Mae,XKe),e(rg,zKe),e(rg,FR),e(FR,WKe),e(rg,QKe),e(A,HKe),e(A,tg),e(tg,Eae),e(Eae,UKe),e(tg,JKe),e(tg,TR),e(TR,YKe),e(tg,KKe),e(A,ZKe),e(A,ag),e(ag,Cae),e(Cae,eZe),e(ag,oZe),e(ag,MR),e(MR,rZe),e(ag,tZe),e(A,aZe),e(A,ng),e(ng,wae),e(wae,nZe),e(ng,sZe),e(ng,ER),e(ER,lZe),e(ng,iZe),e(A,dZe),e(A,sg),e(sg,Aae),e(Aae,cZe),e(sg,fZe),e(sg,CR),e(CR,mZe),e(sg,gZe),e(A,hZe),e(A,lg),e(lg,Lae),e(Lae,pZe),e(lg,uZe),e(lg,wR),e(wR,_Ze),e(lg,bZe),e(A,vZe),e(A,ig),e(ig,yae),e(yae,FZe),e(ig,TZe),e(ig,AR),e(AR,MZe),e(ig,EZe),e(A,CZe),e(A,dg),e(dg,xae),e(xae,wZe),e(dg,AZe),e(dg,LR),e(LR,LZe),e(dg,yZe),e(A,xZe),e(A,cg),e(cg,$ae),e($ae,$Ze),e(cg,kZe),e(cg,yR),e(yR,SZe),e(cg,RZe),e(A,PZe),e(A,fg),e(fg,kae),e(kae,BZe),e(fg,IZe),e(fg,xR),e(xR,NZe),e(fg,qZe),e(A,jZe),e(A,mg),e(mg,Sae),e(Sae,DZe),e(mg,GZe),e(mg,$R),e($R,OZe),e(mg,VZe),e(A,XZe),e(A,gg),e(gg,Rae),e(Rae,zZe),e(gg,WZe),e(gg,kR),e(kR,QZe),e(gg,HZe),e(A,UZe),e(A,hg),e(hg,Pae),e(Pae,JZe),e(hg,YZe),e(hg,SR),e(SR,KZe),e(hg,ZZe),e(A,eeo),e(A,pg),e(pg,Bae),e(Bae,oeo),e(pg,reo),e(pg,RR),e(RR,teo),e(pg,aeo),e(A,neo),e(A,ug),e(ug,Iae),e(Iae,seo),e(ug,leo),e(ug,PR),e(PR,ieo),e(ug,deo),e(A,ceo),e(A,_g),e(_g,Nae),e(Nae,feo),e(_g,meo),e(_g,BR),e(BR,geo),e(_g,heo),e(A,peo),e(A,bg),e(bg,qae),e(qae,ueo),e(bg,_eo),e(bg,IR),e(IR,beo),e(bg,veo),e(A,Feo),e(A,vg),e(vg,jae),e(jae,Teo),e(vg,Meo),e(vg,NR),e(NR,Eeo),e(vg,Ceo),e(A,weo),e(A,Fg),e(Fg,Dae),e(Dae,Aeo),e(Fg,Leo),e(Fg,qR),e(qR,yeo),e(Fg,xeo),e(A,$eo),e(A,Tg),e(Tg,Gae),e(Gae,keo),e(Tg,Seo),e(Tg,jR),e(jR,Reo),e(Tg,Peo),e(A,Beo),e(A,Mg),e(Mg,Oae),e(Oae,Ieo),e(Mg,Neo),e(Mg,DR),e(DR,qeo),e(Mg,jeo),e(A,Deo),e(A,Eg),e(Eg,Vae),e(Vae,Geo),e(Eg,Oeo),e(Eg,GR),e(GR,Veo),e(Eg,Xeo),e(A,zeo),e(A,Cg),e(Cg,Xae),e(Xae,Weo),e(Cg,Qeo),e(Cg,OR),e(OR,Heo),e(Cg,Ueo),e(A,Jeo),e(A,wg),e(wg,zae),e(zae,Yeo),e(wg,Keo),e(wg,VR),e(VR,Zeo),e(wg,eoo),e(A,ooo),e(A,Ag),e(Ag,Wae),e(Wae,roo),e(Ag,too),e(Ag,XR),e(XR,aoo),e(Ag,noo),e(A,soo),e(A,Lg),e(Lg,Qae),e(Qae,loo),e(Lg,ioo),e(Lg,zR),e(zR,doo),e(Lg,coo),e(A,foo),e(A,yg),e(yg,Hae),e(Hae,moo),e(yg,goo),e(yg,WR),e(WR,hoo),e(yg,poo),e(A,uoo),e(A,xg),e(xg,Uae),e(Uae,_oo),e(xg,boo),e(xg,QR),e(QR,voo),e(xg,Foo),e(A,Too),e(A,$g),e($g,Jae),e(Jae,Moo),e($g,Eoo),e($g,HR),e(HR,Coo),e($g,woo),e(A,Aoo),e(A,kg),e(kg,Yae),e(Yae,Loo),e(kg,yoo),e(kg,UR),e(UR,xoo),e(kg,$oo),e(A,koo),e(A,Sg),e(Sg,Kae),e(Kae,Soo),e(Sg,Roo),e(Sg,JR),e(JR,Poo),e(Sg,Boo),e(A,Ioo),e(A,Rg),e(Rg,Zae),e(Zae,Noo),e(Rg,qoo),e(Rg,YR),e(YR,joo),e(Rg,Doo),e(A,Goo),e(A,Pg),e(Pg,ene),e(ene,Ooo),e(Pg,Voo),e(Pg,KR),e(KR,Xoo),e(Pg,zoo),e(A,Woo),e(A,Bg),e(Bg,one),e(one,Qoo),e(Bg,Hoo),e(Bg,ZR),e(ZR,Uoo),e(Bg,Joo),e(A,Yoo),e(A,Ig),e(Ig,rne),e(rne,Koo),e(Ig,Zoo),e(Ig,eP),e(eP,ero),e(Ig,oro),e(A,rro),e(A,Ng),e(Ng,tne),e(tne,tro),e(Ng,aro),e(Ng,oP),e(oP,nro),e(Ng,sro),e(A,lro),e(A,qg),e(qg,ane),e(ane,iro),e(qg,dro),e(qg,rP),e(rP,cro),e(qg,fro),e(wr,mro),M(jg,wr,null),e(wo,gro),e(wo,Dg),M(AL,Dg,null),e(Dg,hro),e(Dg,nne),e(nne,pro),b(f,nGe,_),b(f,$i,_),e($i,Gg),e(Gg,sne),M(LL,sne,null),e($i,uro),e($i,lne),e(lne,_ro),b(f,sGe,_),b(f,Ao,_),M(yL,Ao,null),e(Ao,bro),e(Ao,xL),e(xL,vro),e(xL,tP),e(tP,Fro),e(xL,Tro),e(Ao,Mro),e(Ao,$L),e($L,Ero),e($L,ine),e(ine,Cro),e($L,wro),e(Ao,Aro),e(Ao,Ar),M(kL,Ar,null),e(Ar,Lro),e(Ar,dne),e(dne,yro),e(Ar,xro),e(Ar,$a),e($a,$ro),e($a,cne),e(cne,kro),e($a,Sro),e($a,fne),e(fne,Rro),e($a,Pro),e($a,mne),e(mne,Bro),e($a,Iro),e(Ar,Nro),e(Ar,k),e(k,Nn),e(Nn,gne),e(gne,qro),e(Nn,jro),e(Nn,aP),e(aP,Dro),e(Nn,Gro),e(Nn,nP),e(nP,Oro),e(Nn,Vro),e(k,Xro),e(k,qn),e(qn,hne),e(hne,zro),e(qn,Wro),e(qn,sP),e(sP,Qro),e(qn,Hro),e(qn,lP),e(lP,Uro),e(qn,Jro),e(k,Yro),e(k,jn),e(jn,pne),e(pne,Kro),e(jn,Zro),e(jn,iP),e(iP,eto),e(jn,oto),e(jn,dP),e(dP,rto),e(jn,tto),e(k,ato),e(k,Og),e(Og,une),e(une,nto),e(Og,sto),e(Og,cP),e(cP,lto),e(Og,ito),e(k,dto),e(k,Dn),e(Dn,_ne),e(_ne,cto),e(Dn,fto),e(Dn,fP),e(fP,mto),e(Dn,gto),e(Dn,mP),e(mP,hto),e(Dn,pto),e(k,uto),e(k,Vg),e(Vg,bne),e(bne,_to),e(Vg,bto),e(Vg,gP),e(gP,vto),e(Vg,Fto),e(k,Tto),e(k,Xg),e(Xg,vne),e(vne,Mto),e(Xg,Eto),e(Xg,hP),e(hP,Cto),e(Xg,wto),e(k,Ato),e(k,zg),e(zg,Fne),e(Fne,Lto),e(zg,yto),e(zg,pP),e(pP,xto),e(zg,$to),e(k,kto),e(k,Gn),e(Gn,Tne),e(Tne,Sto),e(Gn,Rto),e(Gn,uP),e(uP,Pto),e(Gn,Bto),e(Gn,_P),e(_P,Ito),e(Gn,Nto),e(k,qto),e(k,On),e(On,Mne),e(Mne,jto),e(On,Dto),e(On,bP),e(bP,Gto),e(On,Oto),e(On,vP),e(vP,Vto),e(On,Xto),e(k,zto),e(k,Vn),e(Vn,Ene),e(Ene,Wto),e(Vn,Qto),e(Vn,FP),e(FP,Hto),e(Vn,Uto),e(Vn,TP),e(TP,Jto),e(Vn,Yto),e(k,Kto),e(k,Wg),e(Wg,Cne),e(Cne,Zto),e(Wg,eao),e(Wg,MP),e(MP,oao),e(Wg,rao),e(k,tao),e(k,Qg),e(Qg,wne),e(wne,aao),e(Qg,nao),e(Qg,EP),e(EP,sao),e(Qg,lao),e(k,iao),e(k,Hg),e(Hg,Ane),e(Ane,dao),e(Hg,cao),e(Hg,CP),e(CP,fao),e(Hg,mao),e(k,gao),e(k,Xn),e(Xn,Lne),e(Lne,hao),e(Xn,pao),e(Xn,wP),e(wP,uao),e(Xn,_ao),e(Xn,AP),e(AP,bao),e(Xn,vao),e(k,Fao),e(k,Ug),e(Ug,yne),e(yne,Tao),e(Ug,Mao),e(Ug,LP),e(LP,Eao),e(Ug,Cao),e(k,wao),e(k,zn),e(zn,xne),e(xne,Aao),e(zn,Lao),e(zn,yP),e(yP,yao),e(zn,xao),e(zn,xP),e(xP,$ao),e(zn,kao),e(k,Sao),e(k,Wn),e(Wn,$ne),e($ne,Rao),e(Wn,Pao),e(Wn,$P),e($P,Bao),e(Wn,Iao),e(Wn,kP),e(kP,Nao),e(Wn,qao),e(k,jao),e(k,Qn),e(Qn,kne),e(kne,Dao),e(Qn,Gao),e(Qn,SP),e(SP,Oao),e(Qn,Vao),e(Qn,RP),e(RP,Xao),e(Qn,zao),e(k,Wao),e(k,Jg),e(Jg,Sne),e(Sne,Qao),e(Jg,Hao),e(Jg,PP),e(PP,Uao),e(Jg,Jao),e(k,Yao),e(k,Hn),e(Hn,Rne),e(Rne,Kao),e(Hn,Zao),e(Hn,BP),e(BP,eno),e(Hn,ono),e(Hn,IP),e(IP,rno),e(Hn,tno),e(k,ano),e(k,Un),e(Un,Pne),e(Pne,nno),e(Un,sno),e(Un,NP),e(NP,lno),e(Un,ino),e(Un,qP),e(qP,dno),e(Un,cno),e(k,fno),e(k,Jn),e(Jn,Bne),e(Bne,mno),e(Jn,gno),e(Jn,jP),e(jP,hno),e(Jn,pno),e(Jn,DP),e(DP,uno),e(Jn,_no),e(k,bno),e(k,Yn),e(Yn,Ine),e(Ine,vno),e(Yn,Fno),e(Yn,GP),e(GP,Tno),e(Yn,Mno),e(Yn,OP),e(OP,Eno),e(Yn,Cno),e(k,wno),e(k,Kn),e(Kn,Nne),e(Nne,Ano),e(Kn,Lno),e(Kn,VP),e(VP,yno),e(Kn,xno),e(Kn,XP),e(XP,$no),e(Kn,kno),e(k,Sno),e(k,Zn),e(Zn,qne),e(qne,Rno),e(Zn,Pno),e(Zn,zP),e(zP,Bno),e(Zn,Ino),e(Zn,WP),e(WP,Nno),e(Zn,qno),e(k,jno),e(k,Yg),e(Yg,jne),e(jne,Dno),e(Yg,Gno),e(Yg,QP),e(QP,Ono),e(Yg,Vno),e(k,Xno),e(k,es),e(es,Dne),e(Dne,zno),e(es,Wno),e(es,HP),e(HP,Qno),e(es,Hno),e(es,UP),e(UP,Uno),e(es,Jno),e(k,Yno),e(k,Kg),e(Kg,Gne),e(Gne,Kno),e(Kg,Zno),e(Kg,JP),e(JP,eso),e(Kg,oso),e(k,rso),e(k,os),e(os,One),e(One,tso),e(os,aso),e(os,YP),e(YP,nso),e(os,sso),e(os,KP),e(KP,lso),e(os,iso),e(k,dso),e(k,rs),e(rs,Vne),e(Vne,cso),e(rs,fso),e(rs,ZP),e(ZP,mso),e(rs,gso),e(rs,eB),e(eB,hso),e(rs,pso),e(k,uso),e(k,ts),e(ts,Xne),e(Xne,_so),e(ts,bso),e(ts,oB),e(oB,vso),e(ts,Fso),e(ts,rB),e(rB,Tso),e(ts,Mso),e(k,Eso),e(k,Zg),e(Zg,zne),e(zne,Cso),e(Zg,wso),e(Zg,tB),e(tB,Aso),e(Zg,Lso),e(k,yso),e(k,as),e(as,Wne),e(Wne,xso),e(as,$so),e(as,aB),e(aB,kso),e(as,Sso),e(as,nB),e(nB,Rso),e(as,Pso),e(k,Bso),e(k,ns),e(ns,Qne),e(Qne,Iso),e(ns,Nso),e(ns,sB),e(sB,qso),e(ns,jso),e(ns,lB),e(lB,Dso),e(ns,Gso),e(k,Oso),e(k,eh),e(eh,Hne),e(Hne,Vso),e(eh,Xso),e(eh,iB),e(iB,zso),e(eh,Wso),e(k,Qso),e(k,ss),e(ss,Une),e(Une,Hso),e(ss,Uso),e(ss,dB),e(dB,Jso),e(ss,Yso),e(ss,cB),e(cB,Kso),e(ss,Zso),e(k,elo),e(k,ls),e(ls,Jne),e(Jne,olo),e(ls,rlo),e(ls,fB),e(fB,tlo),e(ls,alo),e(ls,mB),e(mB,nlo),e(ls,slo),e(k,llo),e(k,is),e(is,Yne),e(Yne,ilo),e(is,dlo),e(is,gB),e(gB,clo),e(is,flo),e(is,hB),e(hB,mlo),e(is,glo),e(k,hlo),e(k,ds),e(ds,Kne),e(Kne,plo),e(ds,ulo),e(ds,pB),e(pB,_lo),e(ds,blo),e(ds,uB),e(uB,vlo),e(ds,Flo),e(k,Tlo),e(k,cs),e(cs,Zne),e(Zne,Mlo),e(cs,Elo),e(cs,_B),e(_B,Clo),e(cs,wlo),e(cs,bB),e(bB,Alo),e(cs,Llo),e(k,ylo),e(k,fs),e(fs,ese),e(ese,xlo),e(fs,$lo),e(fs,vB),e(vB,klo),e(fs,Slo),e(fs,FB),e(FB,Rlo),e(fs,Plo),e(k,Blo),e(k,ms),e(ms,ose),e(ose,Ilo),e(ms,Nlo),e(ms,TB),e(TB,qlo),e(ms,jlo),e(ms,MB),e(MB,Dlo),e(ms,Glo),e(k,Olo),e(k,gs),e(gs,rse),e(rse,Vlo),e(gs,Xlo),e(gs,EB),e(EB,zlo),e(gs,Wlo),e(gs,CB),e(CB,Qlo),e(gs,Hlo),e(k,Ulo),e(k,oh),e(oh,tse),e(tse,Jlo),e(oh,Ylo),e(oh,wB),e(wB,Klo),e(oh,Zlo),e(k,eio),e(k,hs),e(hs,ase),e(ase,oio),e(hs,rio),e(hs,AB),e(AB,tio),e(hs,aio),e(hs,LB),e(LB,nio),e(hs,sio),e(k,lio),e(k,rh),e(rh,nse),e(nse,iio),e(rh,dio),e(rh,yB),e(yB,cio),e(rh,fio),e(k,mio),e(k,th),e(th,sse),e(sse,gio),e(th,hio),e(th,xB),e(xB,pio),e(th,uio),e(k,_io),e(k,ps),e(ps,lse),e(lse,bio),e(ps,vio),e(ps,$B),e($B,Fio),e(ps,Tio),e(ps,kB),e(kB,Mio),e(ps,Eio),e(k,Cio),e(k,us),e(us,ise),e(ise,wio),e(us,Aio),e(us,SB),e(SB,Lio),e(us,yio),e(us,RB),e(RB,xio),e(us,$io),e(k,kio),e(k,_s),e(_s,dse),e(dse,Sio),e(_s,Rio),e(_s,PB),e(PB,Pio),e(_s,Bio),e(_s,BB),e(BB,Iio),e(_s,Nio),e(k,qio),e(k,ah),e(ah,cse),e(cse,jio),e(ah,Dio),e(ah,IB),e(IB,Gio),e(ah,Oio),e(k,Vio),e(k,bs),e(bs,fse),e(fse,Xio),e(bs,zio),e(bs,NB),e(NB,Wio),e(bs,Qio),e(bs,qB),e(qB,Hio),e(bs,Uio),e(k,Jio),e(k,vs),e(vs,mse),e(mse,Yio),e(vs,Kio),e(vs,jB),e(jB,Zio),e(vs,edo),e(vs,DB),e(DB,odo),e(vs,rdo),e(k,tdo),e(k,Fs),e(Fs,gse),e(gse,ado),e(Fs,ndo),e(Fs,GB),e(GB,sdo),e(Fs,ldo),e(Fs,OB),e(OB,ido),e(Fs,ddo),e(k,cdo),e(k,Ts),e(Ts,hse),e(hse,fdo),e(Ts,mdo),e(Ts,VB),e(VB,gdo),e(Ts,hdo),e(Ts,XB),e(XB,pdo),e(Ts,udo),e(k,_do),e(k,Ms),e(Ms,pse),e(pse,bdo),e(Ms,vdo),e(Ms,zB),e(zB,Fdo),e(Ms,Tdo),e(Ms,WB),e(WB,Mdo),e(Ms,Edo),e(k,Cdo),e(k,nh),e(nh,use),e(use,wdo),e(nh,Ado),e(nh,QB),e(QB,Ldo),e(nh,ydo),e(k,xdo),e(k,Es),e(Es,_se),e(_se,$do),e(Es,kdo),e(Es,HB),e(HB,Sdo),e(Es,Rdo),e(Es,UB),e(UB,Pdo),e(Es,Bdo),e(k,Ido),e(k,sh),e(sh,bse),e(bse,Ndo),e(sh,qdo),e(sh,JB),e(JB,jdo),e(sh,Ddo),e(k,Gdo),e(k,lh),e(lh,vse),e(vse,Odo),e(lh,Vdo),e(lh,YB),e(YB,Xdo),e(lh,zdo),e(k,Wdo),e(k,ih),e(ih,Fse),e(Fse,Qdo),e(ih,Hdo),e(ih,KB),e(KB,Udo),e(ih,Jdo),e(k,Ydo),e(k,dh),e(dh,Tse),e(Tse,Kdo),e(dh,Zdo),e(dh,ZB),e(ZB,eco),e(dh,oco),e(k,rco),e(k,Cs),e(Cs,Mse),e(Mse,tco),e(Cs,aco),e(Cs,eI),e(eI,nco),e(Cs,sco),e(Cs,oI),e(oI,lco),e(Cs,ico),e(k,dco),e(k,ch),e(ch,Ese),e(Ese,cco),e(ch,fco),e(ch,rI),e(rI,mco),e(ch,gco),e(k,hco),e(k,ws),e(ws,Cse),e(Cse,pco),e(ws,uco),e(ws,tI),e(tI,_co),e(ws,bco),e(ws,aI),e(aI,vco),e(ws,Fco),e(k,Tco),e(k,As),e(As,wse),e(wse,Mco),e(As,Eco),e(As,nI),e(nI,Cco),e(As,wco),e(As,sI),e(sI,Aco),e(As,Lco),e(k,yco),e(k,Ls),e(Ls,Ase),e(Ase,xco),e(Ls,$co),e(Ls,lI),e(lI,kco),e(Ls,Sco),e(Ls,iI),e(iI,Rco),e(Ls,Pco),e(k,Bco),e(k,ys),e(ys,Lse),e(Lse,Ico),e(ys,Nco),e(ys,dI),e(dI,qco),e(ys,jco),e(ys,cI),e(cI,Dco),e(ys,Gco),e(k,Oco),e(k,xs),e(xs,yse),e(yse,Vco),e(xs,Xco),e(xs,fI),e(fI,zco),e(xs,Wco),e(xs,mI),e(mI,Qco),e(xs,Hco),e(k,Uco),e(k,$s),e($s,xse),e(xse,Jco),e($s,Yco),e($s,gI),e(gI,Kco),e($s,Zco),e($s,hI),e(hI,efo),e($s,ofo),e(k,rfo),e(k,fh),e(fh,$se),e($se,tfo),e(fh,afo),e(fh,pI),e(pI,nfo),e(fh,sfo),e(k,lfo),e(k,mh),e(mh,kse),e(kse,ifo),e(mh,dfo),e(mh,uI),e(uI,cfo),e(mh,ffo),e(k,mfo),e(k,ks),e(ks,Sse),e(Sse,gfo),e(ks,hfo),e(ks,_I),e(_I,pfo),e(ks,ufo),e(ks,bI),e(bI,_fo),e(ks,bfo),e(k,vfo),e(k,Ss),e(Ss,Rse),e(Rse,Ffo),e(Ss,Tfo),e(Ss,vI),e(vI,Mfo),e(Ss,Efo),e(Ss,FI),e(FI,Cfo),e(Ss,wfo),e(k,Afo),e(k,Rs),e(Rs,Pse),e(Pse,Lfo),e(Rs,yfo),e(Rs,TI),e(TI,xfo),e(Rs,$fo),e(Rs,MI),e(MI,kfo),e(Rs,Sfo),e(k,Rfo),e(k,gh),e(gh,Bse),e(Bse,Pfo),e(gh,Bfo),e(gh,EI),e(EI,Ifo),e(gh,Nfo),e(k,qfo),e(k,hh),e(hh,Ise),e(Ise,jfo),e(hh,Dfo),e(hh,CI),e(CI,Gfo),e(hh,Ofo),e(k,Vfo),e(k,ph),e(ph,Nse),e(Nse,Xfo),e(ph,zfo),e(ph,wI),e(wI,Wfo),e(ph,Qfo),e(k,Hfo),e(k,Ps),e(Ps,qse),e(qse,Ufo),e(Ps,Jfo),e(Ps,AI),e(AI,Yfo),e(Ps,Kfo),e(Ps,LI),e(LI,Zfo),e(Ps,emo),e(k,omo),e(k,Bs),e(Bs,jse),e(jse,rmo),e(Bs,tmo),e(Bs,yI),e(yI,amo),e(Bs,nmo),e(Bs,xI),e(xI,smo),e(Bs,lmo),e(k,imo),e(k,uh),e(uh,Dse),e(Dse,dmo),e(uh,cmo),e(uh,$I),e($I,fmo),e(uh,mmo),e(k,gmo),e(k,_h),e(_h,Gse),e(Gse,hmo),e(_h,pmo),e(_h,kI),e(kI,umo),e(_h,_mo),e(k,bmo),e(k,bh),e(bh,Ose),e(Ose,vmo),e(bh,Fmo),e(bh,SI),e(SI,Tmo),e(bh,Mmo),e(k,Emo),e(k,Is),e(Is,Vse),e(Vse,Cmo),e(Is,wmo),e(Is,RI),e(RI,Amo),e(Is,Lmo),e(Is,PI),e(PI,ymo),e(Is,xmo),e(k,$mo),e(k,vh),e(vh,Xse),e(Xse,kmo),e(vh,Smo),e(vh,BI),e(BI,Rmo),e(vh,Pmo),e(k,Bmo),e(k,Fh),e(Fh,zse),e(zse,Imo),e(Fh,Nmo),e(Fh,II),e(II,qmo),e(Fh,jmo),e(k,Dmo),e(k,Ns),e(Ns,Wse),e(Wse,Gmo),e(Ns,Omo),e(Ns,NI),e(NI,Vmo),e(Ns,Xmo),e(Ns,qI),e(qI,zmo),e(Ns,Wmo),e(k,Qmo),e(k,qs),e(qs,Qse),e(Qse,Hmo),e(qs,Umo),e(qs,jI),e(jI,Jmo),e(qs,Ymo),e(qs,DI),e(DI,Kmo),e(qs,Zmo),e(k,ego),e(k,js),e(js,Hse),e(Hse,ogo),e(js,rgo),e(js,GI),e(GI,tgo),e(js,ago),e(js,OI),e(OI,ngo),e(js,sgo),e(k,lgo),e(k,Ds),e(Ds,Use),e(Use,igo),e(Ds,dgo),e(Ds,VI),e(VI,cgo),e(Ds,fgo),e(Ds,XI),e(XI,mgo),e(Ds,ggo),e(Ar,hgo),M(Th,Ar,null),e(Ao,pgo),e(Ao,Mh),M(SL,Mh,null),e(Mh,ugo),e(Mh,Jse),e(Jse,_go),b(f,lGe,_),b(f,ki,_),e(ki,Eh),e(Eh,Yse),M(RL,Yse,null),e(ki,bgo),e(ki,Kse),e(Kse,vgo),b(f,iGe,_),b(f,Lo,_),M(PL,Lo,null),e(Lo,Fgo),e(Lo,BL),e(BL,Tgo),e(BL,zI),e(zI,Mgo),e(BL,Ego),e(Lo,Cgo),e(Lo,IL),e(IL,wgo),e(IL,Zse),e(Zse,Ago),e(IL,Lgo),e(Lo,ygo),e(Lo,He),M(NL,He,null),e(He,xgo),e(He,ele),e(ele,$go),e(He,kgo),e(He,ka),e(ka,Sgo),e(ka,ole),e(ole,Rgo),e(ka,Pgo),e(ka,rle),e(rle,Bgo),e(ka,Igo),e(ka,tle),e(tle,Ngo),e(ka,qgo),e(He,jgo),e(He,Y),e(Y,Ch),e(Ch,ale),e(ale,Dgo),e(Ch,Ggo),e(Ch,WI),e(WI,Ogo),e(Ch,Vgo),e(Y,Xgo),e(Y,wh),e(wh,nle),e(nle,zgo),e(wh,Wgo),e(wh,QI),e(QI,Qgo),e(wh,Hgo),e(Y,Ugo),e(Y,Ah),e(Ah,sle),e(sle,Jgo),e(Ah,Ygo),e(Ah,HI),e(HI,Kgo),e(Ah,Zgo),e(Y,eho),e(Y,Lh),e(Lh,lle),e(lle,oho),e(Lh,rho),e(Lh,UI),e(UI,tho),e(Lh,aho),e(Y,nho),e(Y,yh),e(yh,ile),e(ile,sho),e(yh,lho),e(yh,JI),e(JI,iho),e(yh,dho),e(Y,cho),e(Y,xh),e(xh,dle),e(dle,fho),e(xh,mho),e(xh,YI),e(YI,gho),e(xh,hho),e(Y,pho),e(Y,$h),e($h,cle),e(cle,uho),e($h,_ho),e($h,KI),e(KI,bho),e($h,vho),e(Y,Fho),e(Y,kh),e(kh,fle),e(fle,Tho),e(kh,Mho),e(kh,ZI),e(ZI,Eho),e(kh,Cho),e(Y,who),e(Y,Sh),e(Sh,mle),e(mle,Aho),e(Sh,Lho),e(Sh,eN),e(eN,yho),e(Sh,xho),e(Y,$ho),e(Y,Rh),e(Rh,gle),e(gle,kho),e(Rh,Sho),e(Rh,oN),e(oN,Rho),e(Rh,Pho),e(Y,Bho),e(Y,Ph),e(Ph,hle),e(hle,Iho),e(Ph,Nho),e(Ph,rN),e(rN,qho),e(Ph,jho),e(Y,Dho),e(Y,Bh),e(Bh,ple),e(ple,Gho),e(Bh,Oho),e(Bh,tN),e(tN,Vho),e(Bh,Xho),e(Y,zho),e(Y,Ih),e(Ih,ule),e(ule,Who),e(Ih,Qho),e(Ih,aN),e(aN,Hho),e(Ih,Uho),e(Y,Jho),e(Y,Nh),e(Nh,_le),e(_le,Yho),e(Nh,Kho),e(Nh,nN),e(nN,Zho),e(Nh,epo),e(Y,opo),e(Y,qh),e(qh,ble),e(ble,rpo),e(qh,tpo),e(qh,sN),e(sN,apo),e(qh,npo),e(Y,spo),e(Y,jh),e(jh,vle),e(vle,lpo),e(jh,ipo),e(jh,lN),e(lN,dpo),e(jh,cpo),e(Y,fpo),e(Y,Dh),e(Dh,Fle),e(Fle,mpo),e(Dh,gpo),e(Dh,iN),e(iN,hpo),e(Dh,ppo),e(Y,upo),e(Y,Gh),e(Gh,Tle),e(Tle,_po),e(Gh,bpo),e(Gh,dN),e(dN,vpo),e(Gh,Fpo),e(Y,Tpo),e(Y,Oh),e(Oh,Mle),e(Mle,Mpo),e(Oh,Epo),e(Oh,cN),e(cN,Cpo),e(Oh,wpo),e(Y,Apo),e(Y,Vh),e(Vh,Ele),e(Ele,Lpo),e(Vh,ypo),e(Vh,fN),e(fN,xpo),e(Vh,$po),e(Y,kpo),e(Y,Xh),e(Xh,Cle),e(Cle,Spo),e(Xh,Rpo),e(Xh,mN),e(mN,Ppo),e(Xh,Bpo),e(Y,Ipo),e(Y,zh),e(zh,wle),e(wle,Npo),e(zh,qpo),e(zh,gN),e(gN,jpo),e(zh,Dpo),e(Y,Gpo),e(Y,Wh),e(Wh,Ale),e(Ale,Opo),e(Wh,Vpo),e(Wh,hN),e(hN,Xpo),e(Wh,zpo),e(Y,Wpo),e(Y,Qh),e(Qh,Lle),e(Lle,Qpo),e(Qh,Hpo),e(Qh,pN),e(pN,Upo),e(Qh,Jpo),e(Y,Ypo),e(Y,Hh),e(Hh,yle),e(yle,Kpo),e(Hh,Zpo),e(Hh,uN),e(uN,euo),e(Hh,ouo),e(Y,ruo),e(Y,Uh),e(Uh,xle),e(xle,tuo),e(Uh,auo),e(Uh,_N),e(_N,nuo),e(Uh,suo),e(Y,luo),e(Y,Jh),e(Jh,$le),e($le,iuo),e(Jh,duo),e(Jh,bN),e(bN,cuo),e(Jh,fuo),e(Y,muo),e(Y,Yh),e(Yh,kle),e(kle,guo),e(Yh,huo),e(Yh,vN),e(vN,puo),e(Yh,uuo),e(Y,_uo),e(Y,Kh),e(Kh,Sle),e(Sle,buo),e(Kh,vuo),e(Kh,FN),e(FN,Fuo),e(Kh,Tuo),e(Y,Muo),e(Y,Zh),e(Zh,Rle),e(Rle,Euo),e(Zh,Cuo),e(Zh,TN),e(TN,wuo),e(Zh,Auo),e(Y,Luo),e(Y,ep),e(ep,Ple),e(Ple,yuo),e(ep,xuo),e(ep,MN),e(MN,$uo),e(ep,kuo),e(Y,Suo),e(Y,op),e(op,Ble),e(Ble,Ruo),e(op,Puo),e(op,EN),e(EN,Buo),e(op,Iuo),e(He,Nuo),M(rp,He,null),e(He,quo),M(tp,He,null),e(Lo,juo),e(Lo,ap),M(qL,ap,null),e(ap,Duo),e(ap,Ile),e(Ile,Guo),b(f,dGe,_),b(f,Si,_),e(Si,np),e(np,Nle),M(jL,Nle,null),e(Si,Ouo),e(Si,qle),e(qle,Vuo),b(f,cGe,_),b(f,yo,_),M(DL,yo,null),e(yo,Xuo),e(yo,GL),e(GL,zuo),e(GL,CN),e(CN,Wuo),e(GL,Quo),e(yo,Huo),e(yo,OL),e(OL,Uuo),e(OL,jle),e(jle,Juo),e(OL,Yuo),e(yo,Kuo),e(yo,Ue),M(VL,Ue,null),e(Ue,Zuo),e(Ue,Dle),e(Dle,e_o),e(Ue,o_o),e(Ue,Ri),e(Ri,r_o),e(Ri,Gle),e(Gle,t_o),e(Ri,a_o),e(Ri,Ole),e(Ole,n_o),e(Ri,s_o),e(Ue,l_o),e(Ue,he),e(he,sp),e(sp,Vle),e(Vle,i_o),e(sp,d_o),e(sp,wN),e(wN,c_o),e(sp,f_o),e(he,m_o),e(he,lp),e(lp,Xle),e(Xle,g_o),e(lp,h_o),e(lp,zle),e(zle,p_o),e(lp,u_o),e(he,__o),e(he,ip),e(ip,Wle),e(Wle,b_o),e(ip,v_o),e(ip,AN),e(AN,F_o),e(ip,T_o),e(he,M_o),e(he,dp),e(dp,Qle),e(Qle,E_o),e(dp,C_o),e(dp,LN),e(LN,w_o),e(dp,A_o),e(he,L_o),e(he,cp),e(cp,Hle),e(Hle,y_o),e(cp,x_o),e(cp,yN),e(yN,$_o),e(cp,k_o),e(he,S_o),e(he,fp),e(fp,Ule),e(Ule,R_o),e(fp,P_o),e(fp,xN),e(xN,B_o),e(fp,I_o),e(he,N_o),e(he,mp),e(mp,Jle),e(Jle,q_o),e(mp,j_o),e(mp,$N),e($N,D_o),e(mp,G_o),e(he,O_o),e(he,gp),e(gp,Yle),e(Yle,V_o),e(gp,X_o),e(gp,kN),e(kN,z_o),e(gp,W_o),e(he,Q_o),e(he,hp),e(hp,Kle),e(Kle,H_o),e(hp,U_o),e(hp,SN),e(SN,J_o),e(hp,Y_o),e(he,K_o),e(he,pp),e(pp,Zle),e(Zle,Z_o),e(pp,e1o),e(pp,RN),e(RN,o1o),e(pp,r1o),e(he,t1o),e(he,up),e(up,eie),e(eie,a1o),e(up,n1o),e(up,PN),e(PN,s1o),e(up,l1o),e(he,i1o),e(he,_p),e(_p,oie),e(oie,d1o),e(_p,c1o),e(_p,BN),e(BN,f1o),e(_p,m1o),e(he,g1o),e(he,bp),e(bp,rie),e(rie,h1o),e(bp,p1o),e(bp,IN),e(IN,u1o),e(bp,_1o),e(he,b1o),e(he,vp),e(vp,tie),e(tie,v1o),e(vp,F1o),e(vp,NN),e(NN,T1o),e(vp,M1o),e(he,E1o),e(he,Fp),e(Fp,aie),e(aie,C1o),e(Fp,w1o),e(Fp,qN),e(qN,A1o),e(Fp,L1o),e(he,y1o),e(he,Tp),e(Tp,nie),e(nie,x1o),e(Tp,$1o),e(Tp,jN),e(jN,k1o),e(Tp,S1o),e(he,R1o),e(he,Mp),e(Mp,sie),e(sie,P1o),e(Mp,B1o),e(Mp,DN),e(DN,I1o),e(Mp,N1o),e(Ue,q1o),M(Ep,Ue,null),e(Ue,j1o),M(Cp,Ue,null),e(yo,D1o),e(yo,wp),M(XL,wp,null),e(wp,G1o),e(wp,lie),e(lie,O1o),b(f,fGe,_),b(f,Pi,_),e(Pi,Ap),e(Ap,iie),M(zL,iie,null),e(Pi,V1o),e(Pi,die),e(die,X1o),b(f,mGe,_),b(f,xo,_),M(WL,xo,null),e(xo,z1o),e(xo,Bi),e(Bi,W1o),e(Bi,GN),e(GN,Q1o),e(Bi,H1o),e(Bi,ON),e(ON,U1o),e(Bi,J1o),e(xo,Y1o),e(xo,QL),e(QL,K1o),e(QL,cie),e(cie,Z1o),e(QL,e7o),e(xo,o7o),e(xo,nt),M(HL,nt,null),e(nt,r7o),e(nt,fie),e(fie,t7o),e(nt,a7o),e(nt,Ii),e(Ii,n7o),e(Ii,mie),e(mie,s7o),e(Ii,l7o),e(Ii,VN),e(VN,i7o),e(Ii,d7o),e(nt,c7o),M(Lp,nt,null),e(xo,f7o),e(xo,Je),M(UL,Je,null),e(Je,m7o),e(Je,gie),e(gie,g7o),e(Je,h7o),e(Je,Sa),e(Sa,p7o),e(Sa,hie),e(hie,u7o),e(Sa,_7o),e(Sa,pie),e(pie,b7o),e(Sa,v7o),e(Sa,uie),e(uie,F7o),e(Sa,T7o),e(Je,M7o),e(Je,x),e(x,yp),e(yp,_ie),e(_ie,E7o),e(yp,C7o),e(yp,XN),e(XN,w7o),e(yp,A7o),e(x,L7o),e(x,xp),e(xp,bie),e(bie,y7o),e(xp,x7o),e(xp,zN),e(zN,$7o),e(xp,k7o),e(x,S7o),e(x,$p),e($p,vie),e(vie,R7o),e($p,P7o),e($p,WN),e(WN,B7o),e($p,I7o),e(x,N7o),e(x,kp),e(kp,Fie),e(Fie,q7o),e(kp,j7o),e(kp,QN),e(QN,D7o),e(kp,G7o),e(x,O7o),e(x,Sp),e(Sp,Tie),e(Tie,V7o),e(Sp,X7o),e(Sp,HN),e(HN,z7o),e(Sp,W7o),e(x,Q7o),e(x,Rp),e(Rp,Mie),e(Mie,H7o),e(Rp,U7o),e(Rp,UN),e(UN,J7o),e(Rp,Y7o),e(x,K7o),e(x,Pp),e(Pp,Eie),e(Eie,Z7o),e(Pp,e2o),e(Pp,JN),e(JN,o2o),e(Pp,r2o),e(x,t2o),e(x,Bp),e(Bp,Cie),e(Cie,a2o),e(Bp,n2o),e(Bp,YN),e(YN,s2o),e(Bp,l2o),e(x,i2o),e(x,Ip),e(Ip,wie),e(wie,d2o),e(Ip,c2o),e(Ip,KN),e(KN,f2o),e(Ip,m2o),e(x,g2o),e(x,Np),e(Np,Aie),e(Aie,h2o),e(Np,p2o),e(Np,ZN),e(ZN,u2o),e(Np,_2o),e(x,b2o),e(x,qp),e(qp,Lie),e(Lie,v2o),e(qp,F2o),e(qp,eq),e(eq,T2o),e(qp,M2o),e(x,E2o),e(x,jp),e(jp,yie),e(yie,C2o),e(jp,w2o),e(jp,oq),e(oq,A2o),e(jp,L2o),e(x,y2o),e(x,Dp),e(Dp,xie),e(xie,x2o),e(Dp,$2o),e(Dp,rq),e(rq,k2o),e(Dp,S2o),e(x,R2o),e(x,Gp),e(Gp,$ie),e($ie,P2o),e(Gp,B2o),e(Gp,tq),e(tq,I2o),e(Gp,N2o),e(x,q2o),e(x,Op),e(Op,kie),e(kie,j2o),e(Op,D2o),e(Op,aq),e(aq,G2o),e(Op,O2o),e(x,V2o),e(x,Vp),e(Vp,Sie),e(Sie,X2o),e(Vp,z2o),e(Vp,nq),e(nq,W2o),e(Vp,Q2o),e(x,H2o),e(x,Xp),e(Xp,Rie),e(Rie,U2o),e(Xp,J2o),e(Xp,sq),e(sq,Y2o),e(Xp,K2o),e(x,Z2o),e(x,zp),e(zp,Pie),e(Pie,ebo),e(zp,obo),e(zp,lq),e(lq,rbo),e(zp,tbo),e(x,abo),e(x,Wp),e(Wp,Bie),e(Bie,nbo),e(Wp,sbo),e(Wp,iq),e(iq,lbo),e(Wp,ibo),e(x,dbo),e(x,Qp),e(Qp,Iie),e(Iie,cbo),e(Qp,fbo),e(Qp,dq),e(dq,mbo),e(Qp,gbo),e(x,hbo),e(x,Hp),e(Hp,Nie),e(Nie,pbo),e(Hp,ubo),e(Hp,cq),e(cq,_bo),e(Hp,bbo),e(x,vbo),e(x,Up),e(Up,qie),e(qie,Fbo),e(Up,Tbo),e(Up,fq),e(fq,Mbo),e(Up,Ebo),e(x,Cbo),e(x,Jp),e(Jp,jie),e(jie,wbo),e(Jp,Abo),e(Jp,mq),e(mq,Lbo),e(Jp,ybo),e(x,xbo),e(x,Yp),e(Yp,Die),e(Die,$bo),e(Yp,kbo),e(Yp,gq),e(gq,Sbo),e(Yp,Rbo),e(x,Pbo),e(x,Kp),e(Kp,Gie),e(Gie,Bbo),e(Kp,Ibo),e(Kp,hq),e(hq,Nbo),e(Kp,qbo),e(x,jbo),e(x,Zp),e(Zp,Oie),e(Oie,Dbo),e(Zp,Gbo),e(Zp,pq),e(pq,Obo),e(Zp,Vbo),e(x,Xbo),e(x,eu),e(eu,Vie),e(Vie,zbo),e(eu,Wbo),e(eu,uq),e(uq,Qbo),e(eu,Hbo),e(x,Ubo),e(x,ou),e(ou,Xie),e(Xie,Jbo),e(ou,Ybo),e(ou,_q),e(_q,Kbo),e(ou,Zbo),e(x,evo),e(x,ru),e(ru,zie),e(zie,ovo),e(ru,rvo),e(ru,bq),e(bq,tvo),e(ru,avo),e(x,nvo),e(x,tu),e(tu,Wie),e(Wie,svo),e(tu,lvo),e(tu,vq),e(vq,ivo),e(tu,dvo),e(x,cvo),e(x,au),e(au,Qie),e(Qie,fvo),e(au,mvo),e(au,Fq),e(Fq,gvo),e(au,hvo),e(x,pvo),e(x,nu),e(nu,Hie),e(Hie,uvo),e(nu,_vo),e(nu,Tq),e(Tq,bvo),e(nu,vvo),e(x,Fvo),e(x,su),e(su,Uie),e(Uie,Tvo),e(su,Mvo),e(su,Mq),e(Mq,Evo),e(su,Cvo),e(x,wvo),e(x,Gs),e(Gs,Jie),e(Jie,Avo),e(Gs,Lvo),e(Gs,Eq),e(Eq,yvo),e(Gs,xvo),e(Gs,Cq),e(Cq,$vo),e(Gs,kvo),e(x,Svo),e(x,lu),e(lu,Yie),e(Yie,Rvo),e(lu,Pvo),e(lu,wq),e(wq,Bvo),e(lu,Ivo),e(x,Nvo),e(x,iu),e(iu,Kie),e(Kie,qvo),e(iu,jvo),e(iu,Aq),e(Aq,Dvo),e(iu,Gvo),e(x,Ovo),e(x,du),e(du,Zie),e(Zie,Vvo),e(du,Xvo),e(du,Lq),e(Lq,zvo),e(du,Wvo),e(x,Qvo),e(x,cu),e(cu,ede),e(ede,Hvo),e(cu,Uvo),e(cu,yq),e(yq,Jvo),e(cu,Yvo),e(x,Kvo),e(x,fu),e(fu,ode),e(ode,Zvo),e(fu,eFo),e(fu,xq),e(xq,oFo),e(fu,rFo),e(x,tFo),e(x,mu),e(mu,rde),e(rde,aFo),e(mu,nFo),e(mu,$q),e($q,sFo),e(mu,lFo),e(x,iFo),e(x,gu),e(gu,tde),e(tde,dFo),e(gu,cFo),e(gu,kq),e(kq,fFo),e(gu,mFo),e(x,gFo),e(x,hu),e(hu,ade),e(ade,hFo),e(hu,pFo),e(hu,Sq),e(Sq,uFo),e(hu,_Fo),e(x,bFo),e(x,pu),e(pu,nde),e(nde,vFo),e(pu,FFo),e(pu,Rq),e(Rq,TFo),e(pu,MFo),e(x,EFo),e(x,uu),e(uu,sde),e(sde,CFo),e(uu,wFo),e(uu,Pq),e(Pq,AFo),e(uu,LFo),e(x,yFo),e(x,_u),e(_u,lde),e(lde,xFo),e(_u,$Fo),e(_u,Bq),e(Bq,kFo),e(_u,SFo),e(x,RFo),e(x,bu),e(bu,ide),e(ide,PFo),e(bu,BFo),e(bu,Iq),e(Iq,IFo),e(bu,NFo),e(x,qFo),e(x,vu),e(vu,dde),e(dde,jFo),e(vu,DFo),e(vu,Nq),e(Nq,GFo),e(vu,OFo),e(x,VFo),e(x,Fu),e(Fu,cde),e(cde,XFo),e(Fu,zFo),e(Fu,qq),e(qq,WFo),e(Fu,QFo),e(x,HFo),e(x,Tu),e(Tu,fde),e(fde,UFo),e(Tu,JFo),e(Tu,jq),e(jq,YFo),e(Tu,KFo),e(x,ZFo),e(x,Mu),e(Mu,mde),e(mde,e6o),e(Mu,o6o),e(Mu,Dq),e(Dq,r6o),e(Mu,t6o),e(x,a6o),e(x,Eu),e(Eu,gde),e(gde,n6o),e(Eu,s6o),e(Eu,Gq),e(Gq,l6o),e(Eu,i6o),e(x,d6o),e(x,Cu),e(Cu,hde),e(hde,c6o),e(Cu,f6o),e(Cu,Oq),e(Oq,m6o),e(Cu,g6o),e(x,h6o),e(x,wu),e(wu,pde),e(pde,p6o),e(wu,u6o),e(wu,Vq),e(Vq,_6o),e(wu,b6o),e(x,v6o),e(x,Au),e(Au,ude),e(ude,F6o),e(Au,T6o),e(Au,Xq),e(Xq,M6o),e(Au,E6o),e(x,C6o),e(x,Lu),e(Lu,_de),e(_de,w6o),e(Lu,A6o),e(Lu,zq),e(zq,L6o),e(Lu,y6o),e(x,x6o),e(x,yu),e(yu,bde),e(bde,$6o),e(yu,k6o),e(yu,Wq),e(Wq,S6o),e(yu,R6o),e(x,P6o),e(x,xu),e(xu,vde),e(vde,B6o),e(xu,I6o),e(xu,Qq),e(Qq,N6o),e(xu,q6o),e(x,j6o),e(x,$u),e($u,Fde),e(Fde,D6o),e($u,G6o),e($u,Hq),e(Hq,O6o),e($u,V6o),e(x,X6o),e(x,ku),e(ku,Tde),e(Tde,z6o),e(ku,W6o),e(ku,Uq),e(Uq,Q6o),e(ku,H6o),e(x,U6o),e(x,Su),e(Su,Mde),e(Mde,J6o),e(Su,Y6o),e(Su,Jq),e(Jq,K6o),e(Su,Z6o),e(x,eTo),e(x,Ru),e(Ru,Ede),e(Ede,oTo),e(Ru,rTo),e(Ru,Yq),e(Yq,tTo),e(Ru,aTo),e(x,nTo),e(x,Pu),e(Pu,Cde),e(Cde,sTo),e(Pu,lTo),e(Pu,Kq),e(Kq,iTo),e(Pu,dTo),e(x,cTo),e(x,Bu),e(Bu,wde),e(wde,fTo),e(Bu,mTo),e(Bu,Zq),e(Zq,gTo),e(Bu,hTo),e(x,pTo),e(x,Iu),e(Iu,Ade),e(Ade,uTo),e(Iu,_To),e(Iu,ej),e(ej,bTo),e(Iu,vTo),e(x,FTo),e(x,Nu),e(Nu,Lde),e(Lde,TTo),e(Nu,MTo),e(Nu,oj),e(oj,ETo),e(Nu,CTo),e(x,wTo),e(x,qu),e(qu,yde),e(yde,ATo),e(qu,LTo),e(qu,rj),e(rj,yTo),e(qu,xTo),e(x,$To),e(x,ju),e(ju,xde),e(xde,kTo),e(ju,STo),e(ju,tj),e(tj,RTo),e(ju,PTo),e(x,BTo),e(x,Du),e(Du,$de),e($de,ITo),e(Du,NTo),e(Du,aj),e(aj,qTo),e(Du,jTo),e(x,DTo),e(x,Gu),e(Gu,kde),e(kde,GTo),e(Gu,OTo),e(Gu,nj),e(nj,VTo),e(Gu,XTo),e(x,zTo),e(x,Ou),e(Ou,Sde),e(Sde,WTo),e(Ou,QTo),e(Ou,sj),e(sj,HTo),e(Ou,UTo),e(x,JTo),e(x,Vu),e(Vu,Rde),e(Rde,YTo),e(Vu,KTo),e(Vu,lj),e(lj,ZTo),e(Vu,eMo),e(x,oMo),e(x,Xu),e(Xu,Pde),e(Pde,rMo),e(Xu,tMo),e(Xu,ij),e(ij,aMo),e(Xu,nMo),e(x,sMo),e(x,zu),e(zu,Bde),e(Bde,lMo),e(zu,iMo),e(zu,dj),e(dj,dMo),e(zu,cMo),e(x,fMo),e(x,Wu),e(Wu,Ide),e(Ide,mMo),e(Wu,gMo),e(Wu,cj),e(cj,hMo),e(Wu,pMo),e(x,uMo),e(x,Qu),e(Qu,Nde),e(Nde,_Mo),e(Qu,bMo),e(Qu,fj),e(fj,vMo),e(Qu,FMo),e(x,TMo),e(x,Hu),e(Hu,qde),e(qde,MMo),e(Hu,EMo),e(Hu,mj),e(mj,CMo),e(Hu,wMo),e(x,AMo),e(x,Uu),e(Uu,jde),e(jde,LMo),e(Uu,yMo),e(Uu,gj),e(gj,xMo),e(Uu,$Mo),e(x,kMo),e(x,Ju),e(Ju,Dde),e(Dde,SMo),e(Ju,RMo),e(Ju,hj),e(hj,PMo),e(Ju,BMo),e(x,IMo),e(x,Yu),e(Yu,Gde),e(Gde,NMo),e(Yu,qMo),e(Yu,pj),e(pj,jMo),e(Yu,DMo),e(x,GMo),e(x,Ku),e(Ku,Ode),e(Ode,OMo),e(Ku,VMo),e(Ku,uj),e(uj,XMo),e(Ku,zMo),e(x,WMo),e(x,Zu),e(Zu,Vde),e(Vde,QMo),e(Zu,HMo),e(Zu,_j),e(_j,UMo),e(Zu,JMo),e(x,YMo),e(x,e_),e(e_,Xde),e(Xde,KMo),e(e_,ZMo),e(e_,bj),e(bj,e4o),e(e_,o4o),e(x,r4o),e(x,o_),e(o_,zde),e(zde,t4o),e(o_,a4o),e(o_,vj),e(vj,n4o),e(o_,s4o),e(x,l4o),e(x,r_),e(r_,Wde),e(Wde,i4o),e(r_,d4o),e(r_,Fj),e(Fj,c4o),e(r_,f4o),e(x,m4o),e(x,t_),e(t_,Qde),e(Qde,g4o),e(t_,h4o),e(t_,Tj),e(Tj,p4o),e(t_,u4o),e(x,_4o),e(x,a_),e(a_,Hde),e(Hde,b4o),e(a_,v4o),e(a_,Mj),e(Mj,F4o),e(a_,T4o),e(x,M4o),e(x,n_),e(n_,Ude),e(Ude,E4o),e(n_,C4o),e(n_,Ej),e(Ej,w4o),e(n_,A4o),e(x,L4o),e(x,s_),e(s_,Jde),e(Jde,y4o),e(s_,x4o),e(s_,Cj),e(Cj,$4o),e(s_,k4o),e(x,S4o),e(x,l_),e(l_,Yde),e(Yde,R4o),e(l_,P4o),e(l_,wj),e(wj,B4o),e(l_,I4o),e(x,N4o),e(x,i_),e(i_,Kde),e(Kde,q4o),e(i_,j4o),e(i_,Aj),e(Aj,D4o),e(i_,G4o),e(x,O4o),e(x,d_),e(d_,Zde),e(Zde,V4o),e(d_,X4o),e(d_,Lj),e(Lj,z4o),e(d_,W4o),e(x,Q4o),e(x,c_),e(c_,ece),e(ece,H4o),e(c_,U4o),e(c_,yj),e(yj,J4o),e(c_,Y4o),e(x,K4o),e(x,f_),e(f_,oce),e(oce,Z4o),e(f_,eEo),e(f_,xj),e(xj,oEo),e(f_,rEo),e(x,tEo),e(x,m_),e(m_,rce),e(rce,aEo),e(m_,nEo),e(m_,$j),e($j,sEo),e(m_,lEo),e(x,iEo),e(x,g_),e(g_,tce),e(tce,dEo),e(g_,cEo),e(g_,kj),e(kj,fEo),e(g_,mEo),e(x,gEo),e(x,h_),e(h_,ace),e(ace,hEo),e(h_,pEo),e(h_,Sj),e(Sj,uEo),e(h_,_Eo),e(x,bEo),e(x,p_),e(p_,nce),e(nce,vEo),e(p_,FEo),e(p_,Rj),e(Rj,TEo),e(p_,MEo),e(x,EEo),e(x,u_),e(u_,sce),e(sce,CEo),e(u_,wEo),e(u_,Pj),e(Pj,AEo),e(u_,LEo),e(x,yEo),e(x,__),e(__,lce),e(lce,xEo),e(__,$Eo),e(__,Bj),e(Bj,kEo),e(__,SEo),e(x,REo),e(x,b_),e(b_,ice),e(ice,PEo),e(b_,BEo),e(b_,Ij),e(Ij,IEo),e(b_,NEo),e(x,qEo),e(x,v_),e(v_,dce),e(dce,jEo),e(v_,DEo),e(v_,Nj),e(Nj,GEo),e(v_,OEo),e(x,VEo),e(x,F_),e(F_,cce),e(cce,XEo),e(F_,zEo),e(F_,qj),e(qj,WEo),e(F_,QEo),e(x,HEo),e(x,T_),e(T_,fce),e(fce,UEo),e(T_,JEo),e(T_,jj),e(jj,YEo),e(T_,KEo),e(x,ZEo),e(x,M_),e(M_,mce),e(mce,eCo),e(M_,oCo),e(M_,Dj),e(Dj,rCo),e(M_,tCo),e(x,aCo),e(x,E_),e(E_,gce),e(gce,nCo),e(E_,sCo),e(E_,Gj),e(Gj,lCo),e(E_,iCo),e(x,dCo),e(x,C_),e(C_,hce),e(hce,cCo),e(C_,fCo),e(C_,Oj),e(Oj,mCo),e(C_,gCo),e(Je,hCo),e(Je,w_),e(w_,pCo),e(w_,pce),e(pce,uCo),e(w_,_Co),e(w_,uce),e(uce,bCo),e(Je,vCo),M(A_,Je,null),b(f,gGe,_),b(f,Ni,_),e(Ni,L_),e(L_,_ce),M(JL,_ce,null),e(Ni,FCo),e(Ni,bce),e(bce,TCo),b(f,hGe,_),b(f,$o,_),M(YL,$o,null),e($o,MCo),e($o,qi),e(qi,ECo),e(qi,Vj),e(Vj,CCo),e(qi,wCo),e(qi,Xj),e(Xj,ACo),e(qi,LCo),e($o,yCo),e($o,KL),e(KL,xCo),e(KL,vce),e(vce,$Co),e(KL,kCo),e($o,SCo),e($o,st),M(ZL,st,null),e(st,RCo),e(st,Fce),e(Fce,PCo),e(st,BCo),e(st,ji),e(ji,ICo),e(ji,Tce),e(Tce,NCo),e(ji,qCo),e(ji,zj),e(zj,jCo),e(ji,DCo),e(st,GCo),M(y_,st,null),e($o,OCo),e($o,Ye),M(ey,Ye,null),e(Ye,VCo),e(Ye,Mce),e(Mce,XCo),e(Ye,zCo),e(Ye,Ra),e(Ra,WCo),e(Ra,Ece),e(Ece,QCo),e(Ra,HCo),e(Ra,Cce),e(Cce,UCo),e(Ra,JCo),e(Ra,wce),e(wce,YCo),e(Ra,KCo),e(Ye,ZCo),e(Ye,G),e(G,x_),e(x_,Ace),e(Ace,e5o),e(x_,o5o),e(x_,Wj),e(Wj,r5o),e(x_,t5o),e(G,a5o),e(G,$_),e($_,Lce),e(Lce,n5o),e($_,s5o),e($_,Qj),e(Qj,l5o),e($_,i5o),e(G,d5o),e(G,k_),e(k_,yce),e(yce,c5o),e(k_,f5o),e(k_,Hj),e(Hj,m5o),e(k_,g5o),e(G,h5o),e(G,S_),e(S_,xce),e(xce,p5o),e(S_,u5o),e(S_,Uj),e(Uj,_5o),e(S_,b5o),e(G,v5o),e(G,R_),e(R_,$ce),e($ce,F5o),e(R_,T5o),e(R_,Jj),e(Jj,M5o),e(R_,E5o),e(G,C5o),e(G,P_),e(P_,kce),e(kce,w5o),e(P_,A5o),e(P_,Yj),e(Yj,L5o),e(P_,y5o),e(G,x5o),e(G,B_),e(B_,Sce),e(Sce,$5o),e(B_,k5o),e(B_,Kj),e(Kj,S5o),e(B_,R5o),e(G,P5o),e(G,I_),e(I_,Rce),e(Rce,B5o),e(I_,I5o),e(I_,Zj),e(Zj,N5o),e(I_,q5o),e(G,j5o),e(G,N_),e(N_,Pce),e(Pce,D5o),e(N_,G5o),e(N_,eD),e(eD,O5o),e(N_,V5o),e(G,X5o),e(G,q_),e(q_,Bce),e(Bce,z5o),e(q_,W5o),e(q_,oD),e(oD,Q5o),e(q_,H5o),e(G,U5o),e(G,j_),e(j_,Ice),e(Ice,J5o),e(j_,Y5o),e(j_,rD),e(rD,K5o),e(j_,Z5o),e(G,e3o),e(G,D_),e(D_,Nce),e(Nce,o3o),e(D_,r3o),e(D_,tD),e(tD,t3o),e(D_,a3o),e(G,n3o),e(G,G_),e(G_,qce),e(qce,s3o),e(G_,l3o),e(G_,aD),e(aD,i3o),e(G_,d3o),e(G,c3o),e(G,O_),e(O_,jce),e(jce,f3o),e(O_,m3o),e(O_,nD),e(nD,g3o),e(O_,h3o),e(G,p3o),e(G,V_),e(V_,Dce),e(Dce,u3o),e(V_,_3o),e(V_,sD),e(sD,b3o),e(V_,v3o),e(G,F3o),e(G,X_),e(X_,Gce),e(Gce,T3o),e(X_,M3o),e(X_,lD),e(lD,E3o),e(X_,C3o),e(G,w3o),e(G,z_),e(z_,Oce),e(Oce,A3o),e(z_,L3o),e(z_,iD),e(iD,y3o),e(z_,x3o),e(G,$3o),e(G,W_),e(W_,Vce),e(Vce,k3o),e(W_,S3o),e(W_,dD),e(dD,R3o),e(W_,P3o),e(G,B3o),e(G,Q_),e(Q_,Xce),e(Xce,I3o),e(Q_,N3o),e(Q_,cD),e(cD,q3o),e(Q_,j3o),e(G,D3o),e(G,H_),e(H_,zce),e(zce,G3o),e(H_,O3o),e(H_,fD),e(fD,V3o),e(H_,X3o),e(G,z3o),e(G,U_),e(U_,Wce),e(Wce,W3o),e(U_,Q3o),e(U_,mD),e(mD,H3o),e(U_,U3o),e(G,J3o),e(G,J_),e(J_,Qce),e(Qce,Y3o),e(J_,K3o),e(J_,gD),e(gD,Z3o),e(J_,e0o),e(G,o0o),e(G,Y_),e(Y_,Hce),e(Hce,r0o),e(Y_,t0o),e(Y_,hD),e(hD,a0o),e(Y_,n0o),e(G,s0o),e(G,K_),e(K_,Uce),e(Uce,l0o),e(K_,i0o),e(K_,pD),e(pD,d0o),e(K_,c0o),e(G,f0o),e(G,Z_),e(Z_,Jce),e(Jce,m0o),e(Z_,g0o),e(Z_,uD),e(uD,h0o),e(Z_,p0o),e(G,u0o),e(G,e1),e(e1,Yce),e(Yce,_0o),e(e1,b0o),e(e1,_D),e(_D,v0o),e(e1,F0o),e(G,T0o),e(G,o1),e(o1,Kce),e(Kce,M0o),e(o1,E0o),e(o1,bD),e(bD,C0o),e(o1,w0o),e(G,A0o),e(G,r1),e(r1,Zce),e(Zce,L0o),e(r1,y0o),e(r1,vD),e(vD,x0o),e(r1,$0o),e(G,k0o),e(G,t1),e(t1,efe),e(efe,S0o),e(t1,R0o),e(t1,FD),e(FD,P0o),e(t1,B0o),e(G,I0o),e(G,a1),e(a1,ofe),e(ofe,N0o),e(a1,q0o),e(a1,TD),e(TD,j0o),e(a1,D0o),e(G,G0o),e(G,n1),e(n1,rfe),e(rfe,O0o),e(n1,V0o),e(n1,MD),e(MD,X0o),e(n1,z0o),e(G,W0o),e(G,s1),e(s1,tfe),e(tfe,Q0o),e(s1,H0o),e(s1,ED),e(ED,U0o),e(s1,J0o),e(G,Y0o),e(G,l1),e(l1,afe),e(afe,K0o),e(l1,Z0o),e(l1,CD),e(CD,ewo),e(l1,owo),e(G,rwo),e(G,i1),e(i1,nfe),e(nfe,two),e(i1,awo),e(i1,wD),e(wD,nwo),e(i1,swo),e(G,lwo),e(G,d1),e(d1,sfe),e(sfe,iwo),e(d1,dwo),e(d1,AD),e(AD,cwo),e(d1,fwo),e(G,mwo),e(G,c1),e(c1,lfe),e(lfe,gwo),e(c1,hwo),e(c1,LD),e(LD,pwo),e(c1,uwo),e(G,_wo),e(G,f1),e(f1,ife),e(ife,bwo),e(f1,vwo),e(f1,yD),e(yD,Fwo),e(f1,Two),e(G,Mwo),e(G,m1),e(m1,dfe),e(dfe,Ewo),e(m1,Cwo),e(m1,xD),e(xD,wwo),e(m1,Awo),e(G,Lwo),e(G,g1),e(g1,cfe),e(cfe,ywo),e(g1,xwo),e(g1,$D),e($D,$wo),e(g1,kwo),e(G,Swo),e(G,h1),e(h1,ffe),e(ffe,Rwo),e(h1,Pwo),e(h1,kD),e(kD,Bwo),e(h1,Iwo),e(G,Nwo),e(G,p1),e(p1,mfe),e(mfe,qwo),e(p1,jwo),e(p1,SD),e(SD,Dwo),e(p1,Gwo),e(G,Owo),e(G,u1),e(u1,gfe),e(gfe,Vwo),e(u1,Xwo),e(u1,RD),e(RD,zwo),e(u1,Wwo),e(G,Qwo),e(G,_1),e(_1,hfe),e(hfe,Hwo),e(_1,Uwo),e(_1,PD),e(PD,Jwo),e(_1,Ywo),e(Ye,Kwo),e(Ye,b1),e(b1,Zwo),e(b1,pfe),e(pfe,eAo),e(b1,oAo),e(b1,ufe),e(ufe,rAo),e(Ye,tAo),M(v1,Ye,null),b(f,pGe,_),b(f,Di,_),e(Di,F1),e(F1,_fe),M(oy,_fe,null),e(Di,aAo),e(Di,bfe),e(bfe,nAo),b(f,uGe,_),b(f,ko,_),M(ry,ko,null),e(ko,sAo),e(ko,Gi),e(Gi,lAo),e(Gi,BD),e(BD,iAo),e(Gi,dAo),e(Gi,ID),e(ID,cAo),e(Gi,fAo),e(ko,mAo),e(ko,ty),e(ty,gAo),e(ty,vfe),e(vfe,hAo),e(ty,pAo),e(ko,uAo),e(ko,lt),M(ay,lt,null),e(lt,_Ao),e(lt,Ffe),e(Ffe,bAo),e(lt,vAo),e(lt,Oi),e(Oi,FAo),e(Oi,Tfe),e(Tfe,TAo),e(Oi,MAo),e(Oi,ND),e(ND,EAo),e(Oi,CAo),e(lt,wAo),M(T1,lt,null),e(ko,AAo),e(ko,Ke),M(ny,Ke,null),e(Ke,LAo),e(Ke,Mfe),e(Mfe,yAo),e(Ke,xAo),e(Ke,Pa),e(Pa,$Ao),e(Pa,Efe),e(Efe,kAo),e(Pa,SAo),e(Pa,Cfe),e(Cfe,RAo),e(Pa,PAo),e(Pa,wfe),e(wfe,BAo),e(Pa,IAo),e(Ke,NAo),e(Ke,z),e(z,M1),e(M1,Afe),e(Afe,qAo),e(M1,jAo),e(M1,qD),e(qD,DAo),e(M1,GAo),e(z,OAo),e(z,E1),e(E1,Lfe),e(Lfe,VAo),e(E1,XAo),e(E1,jD),e(jD,zAo),e(E1,WAo),e(z,QAo),e(z,C1),e(C1,yfe),e(yfe,HAo),e(C1,UAo),e(C1,DD),e(DD,JAo),e(C1,YAo),e(z,KAo),e(z,w1),e(w1,xfe),e(xfe,ZAo),e(w1,eLo),e(w1,GD),e(GD,oLo),e(w1,rLo),e(z,tLo),e(z,A1),e(A1,$fe),e($fe,aLo),e(A1,nLo),e(A1,OD),e(OD,sLo),e(A1,lLo),e(z,iLo),e(z,L1),e(L1,kfe),e(kfe,dLo),e(L1,cLo),e(L1,VD),e(VD,fLo),e(L1,mLo),e(z,gLo),e(z,y1),e(y1,Sfe),e(Sfe,hLo),e(y1,pLo),e(y1,XD),e(XD,uLo),e(y1,_Lo),e(z,bLo),e(z,x1),e(x1,Rfe),e(Rfe,vLo),e(x1,FLo),e(x1,zD),e(zD,TLo),e(x1,MLo),e(z,ELo),e(z,$1),e($1,Pfe),e(Pfe,CLo),e($1,wLo),e($1,WD),e(WD,ALo),e($1,LLo),e(z,yLo),e(z,k1),e(k1,Bfe),e(Bfe,xLo),e(k1,$Lo),e(k1,QD),e(QD,kLo),e(k1,SLo),e(z,RLo),e(z,S1),e(S1,Ife),e(Ife,PLo),e(S1,BLo),e(S1,HD),e(HD,ILo),e(S1,NLo),e(z,qLo),e(z,R1),e(R1,Nfe),e(Nfe,jLo),e(R1,DLo),e(R1,UD),e(UD,GLo),e(R1,OLo),e(z,VLo),e(z,P1),e(P1,qfe),e(qfe,XLo),e(P1,zLo),e(P1,JD),e(JD,WLo),e(P1,QLo),e(z,HLo),e(z,B1),e(B1,jfe),e(jfe,ULo),e(B1,JLo),e(B1,YD),e(YD,YLo),e(B1,KLo),e(z,ZLo),e(z,I1),e(I1,Dfe),e(Dfe,eyo),e(I1,oyo),e(I1,KD),e(KD,ryo),e(I1,tyo),e(z,ayo),e(z,N1),e(N1,Gfe),e(Gfe,nyo),e(N1,syo),e(N1,ZD),e(ZD,lyo),e(N1,iyo),e(z,dyo),e(z,q1),e(q1,Ofe),e(Ofe,cyo),e(q1,fyo),e(q1,eG),e(eG,myo),e(q1,gyo),e(z,hyo),e(z,j1),e(j1,Vfe),e(Vfe,pyo),e(j1,uyo),e(j1,oG),e(oG,_yo),e(j1,byo),e(z,vyo),e(z,D1),e(D1,Xfe),e(Xfe,Fyo),e(D1,Tyo),e(D1,rG),e(rG,Myo),e(D1,Eyo),e(z,Cyo),e(z,G1),e(G1,zfe),e(zfe,wyo),e(G1,Ayo),e(G1,tG),e(tG,Lyo),e(G1,yyo),e(z,xyo),e(z,O1),e(O1,Wfe),e(Wfe,$yo),e(O1,kyo),e(O1,aG),e(aG,Syo),e(O1,Ryo),e(z,Pyo),e(z,V1),e(V1,Qfe),e(Qfe,Byo),e(V1,Iyo),e(V1,nG),e(nG,Nyo),e(V1,qyo),e(z,jyo),e(z,X1),e(X1,Hfe),e(Hfe,Dyo),e(X1,Gyo),e(X1,sG),e(sG,Oyo),e(X1,Vyo),e(z,Xyo),e(z,z1),e(z1,Ufe),e(Ufe,zyo),e(z1,Wyo),e(z1,lG),e(lG,Qyo),e(z1,Hyo),e(z,Uyo),e(z,W1),e(W1,Jfe),e(Jfe,Jyo),e(W1,Yyo),e(W1,iG),e(iG,Kyo),e(W1,Zyo),e(z,e8o),e(z,Q1),e(Q1,Yfe),e(Yfe,o8o),e(Q1,r8o),e(Q1,dG),e(dG,t8o),e(Q1,a8o),e(z,n8o),e(z,H1),e(H1,Kfe),e(Kfe,s8o),e(H1,l8o),e(H1,cG),e(cG,i8o),e(H1,d8o),e(z,c8o),e(z,U1),e(U1,Zfe),e(Zfe,f8o),e(U1,m8o),e(U1,fG),e(fG,g8o),e(U1,h8o),e(z,p8o),e(z,J1),e(J1,eme),e(eme,u8o),e(J1,_8o),e(J1,mG),e(mG,b8o),e(J1,v8o),e(z,F8o),e(z,Y1),e(Y1,ome),e(ome,T8o),e(Y1,M8o),e(Y1,gG),e(gG,E8o),e(Y1,C8o),e(z,w8o),e(z,K1),e(K1,rme),e(rme,A8o),e(K1,L8o),e(K1,hG),e(hG,y8o),e(K1,x8o),e(z,$8o),e(z,Z1),e(Z1,tme),e(tme,k8o),e(Z1,S8o),e(Z1,pG),e(pG,R8o),e(Z1,P8o),e(z,B8o),e(z,e7),e(e7,ame),e(ame,I8o),e(e7,N8o),e(e7,uG),e(uG,q8o),e(e7,j8o),e(z,D8o),e(z,o7),e(o7,nme),e(nme,G8o),e(o7,O8o),e(o7,_G),e(_G,V8o),e(o7,X8o),e(z,z8o),e(z,r7),e(r7,sme),e(sme,W8o),e(r7,Q8o),e(r7,bG),e(bG,H8o),e(r7,U8o),e(z,J8o),e(z,t7),e(t7,lme),e(lme,Y8o),e(t7,K8o),e(t7,vG),e(vG,Z8o),e(t7,e9o),e(z,o9o),e(z,a7),e(a7,ime),e(ime,r9o),e(a7,t9o),e(a7,FG),e(FG,a9o),e(a7,n9o),e(z,s9o),e(z,n7),e(n7,dme),e(dme,l9o),e(n7,i9o),e(n7,TG),e(TG,d9o),e(n7,c9o),e(Ke,f9o),e(Ke,s7),e(s7,m9o),e(s7,cme),e(cme,g9o),e(s7,h9o),e(s7,fme),e(fme,p9o),e(Ke,u9o),M(l7,Ke,null),b(f,_Ge,_),b(f,Vi,_),e(Vi,i7),e(i7,mme),M(sy,mme,null),e(Vi,_9o),e(Vi,gme),e(gme,b9o),b(f,bGe,_),b(f,So,_),M(ly,So,null),e(So,v9o),e(So,Xi),e(Xi,F9o),e(Xi,MG),e(MG,T9o),e(Xi,M9o),e(Xi,EG),e(EG,E9o),e(Xi,C9o),e(So,w9o),e(So,iy),e(iy,A9o),e(iy,hme),e(hme,L9o),e(iy,y9o),e(So,x9o),e(So,it),M(dy,it,null),e(it,$9o),e(it,pme),e(pme,k9o),e(it,S9o),e(it,zi),e(zi,R9o),e(zi,ume),e(ume,P9o),e(zi,B9o),e(zi,CG),e(CG,I9o),e(zi,N9o),e(it,q9o),M(d7,it,null),e(So,j9o),e(So,Ze),M(cy,Ze,null),e(Ze,D9o),e(Ze,_me),e(_me,G9o),e(Ze,O9o),e(Ze,Ba),e(Ba,V9o),e(Ba,bme),e(bme,X9o),e(Ba,z9o),e(Ba,vme),e(vme,W9o),e(Ba,Q9o),e(Ba,Fme),e(Fme,H9o),e(Ba,U9o),e(Ze,J9o),e(Ze,Q),e(Q,c7),e(c7,Tme),e(Tme,Y9o),e(c7,K9o),e(c7,wG),e(wG,Z9o),e(c7,exo),e(Q,oxo),e(Q,f7),e(f7,Mme),e(Mme,rxo),e(f7,txo),e(f7,AG),e(AG,axo),e(f7,nxo),e(Q,sxo),e(Q,m7),e(m7,Eme),e(Eme,lxo),e(m7,ixo),e(m7,LG),e(LG,dxo),e(m7,cxo),e(Q,fxo),e(Q,g7),e(g7,Cme),e(Cme,mxo),e(g7,gxo),e(g7,yG),e(yG,hxo),e(g7,pxo),e(Q,uxo),e(Q,h7),e(h7,wme),e(wme,_xo),e(h7,bxo),e(h7,xG),e(xG,vxo),e(h7,Fxo),e(Q,Txo),e(Q,p7),e(p7,Ame),e(Ame,Mxo),e(p7,Exo),e(p7,$G),e($G,Cxo),e(p7,wxo),e(Q,Axo),e(Q,u7),e(u7,Lme),e(Lme,Lxo),e(u7,yxo),e(u7,kG),e(kG,xxo),e(u7,$xo),e(Q,kxo),e(Q,_7),e(_7,yme),e(yme,Sxo),e(_7,Rxo),e(_7,SG),e(SG,Pxo),e(_7,Bxo),e(Q,Ixo),e(Q,b7),e(b7,xme),e(xme,Nxo),e(b7,qxo),e(b7,RG),e(RG,jxo),e(b7,Dxo),e(Q,Gxo),e(Q,v7),e(v7,$me),e($me,Oxo),e(v7,Vxo),e(v7,PG),e(PG,Xxo),e(v7,zxo),e(Q,Wxo),e(Q,F7),e(F7,kme),e(kme,Qxo),e(F7,Hxo),e(F7,BG),e(BG,Uxo),e(F7,Jxo),e(Q,Yxo),e(Q,T7),e(T7,Sme),e(Sme,Kxo),e(T7,Zxo),e(T7,IG),e(IG,e$o),e(T7,o$o),e(Q,r$o),e(Q,M7),e(M7,Rme),e(Rme,t$o),e(M7,a$o),e(M7,NG),e(NG,n$o),e(M7,s$o),e(Q,l$o),e(Q,E7),e(E7,Pme),e(Pme,i$o),e(E7,d$o),e(E7,qG),e(qG,c$o),e(E7,f$o),e(Q,m$o),e(Q,C7),e(C7,Bme),e(Bme,g$o),e(C7,h$o),e(C7,jG),e(jG,p$o),e(C7,u$o),e(Q,_$o),e(Q,w7),e(w7,Ime),e(Ime,b$o),e(w7,v$o),e(w7,DG),e(DG,F$o),e(w7,T$o),e(Q,M$o),e(Q,A7),e(A7,Nme),e(Nme,E$o),e(A7,C$o),e(A7,GG),e(GG,w$o),e(A7,A$o),e(Q,L$o),e(Q,L7),e(L7,qme),e(qme,y$o),e(L7,x$o),e(L7,OG),e(OG,$$o),e(L7,k$o),e(Q,S$o),e(Q,y7),e(y7,jme),e(jme,R$o),e(y7,P$o),e(y7,VG),e(VG,B$o),e(y7,I$o),e(Q,N$o),e(Q,x7),e(x7,Dme),e(Dme,q$o),e(x7,j$o),e(x7,XG),e(XG,D$o),e(x7,G$o),e(Q,O$o),e(Q,$7),e($7,Gme),e(Gme,V$o),e($7,X$o),e($7,zG),e(zG,z$o),e($7,W$o),e(Q,Q$o),e(Q,k7),e(k7,Ome),e(Ome,H$o),e(k7,U$o),e(k7,WG),e(WG,J$o),e(k7,Y$o),e(Q,K$o),e(Q,S7),e(S7,Vme),e(Vme,Z$o),e(S7,eko),e(S7,QG),e(QG,oko),e(S7,rko),e(Q,tko),e(Q,R7),e(R7,Xme),e(Xme,ako),e(R7,nko),e(R7,HG),e(HG,sko),e(R7,lko),e(Q,iko),e(Q,P7),e(P7,zme),e(zme,dko),e(P7,cko),e(P7,UG),e(UG,fko),e(P7,mko),e(Q,gko),e(Q,B7),e(B7,Wme),e(Wme,hko),e(B7,pko),e(B7,JG),e(JG,uko),e(B7,_ko),e(Q,bko),e(Q,I7),e(I7,Qme),e(Qme,vko),e(I7,Fko),e(I7,YG),e(YG,Tko),e(I7,Mko),e(Q,Eko),e(Q,N7),e(N7,Hme),e(Hme,Cko),e(N7,wko),e(N7,KG),e(KG,Ako),e(N7,Lko),e(Q,yko),e(Q,q7),e(q7,Ume),e(Ume,xko),e(q7,$ko),e(q7,ZG),e(ZG,kko),e(q7,Sko),e(Q,Rko),e(Q,j7),e(j7,Jme),e(Jme,Pko),e(j7,Bko),e(j7,eO),e(eO,Iko),e(j7,Nko),e(Q,qko),e(Q,D7),e(D7,Yme),e(Yme,jko),e(D7,Dko),e(D7,oO),e(oO,Gko),e(D7,Oko),e(Q,Vko),e(Q,G7),e(G7,Kme),e(Kme,Xko),e(G7,zko),e(G7,Zme),e(Zme,Wko),e(G7,Qko),e(Q,Hko),e(Q,O7),e(O7,ege),e(ege,Uko),e(O7,Jko),e(O7,rO),e(rO,Yko),e(O7,Kko),e(Q,Zko),e(Q,V7),e(V7,oge),e(oge,eSo),e(V7,oSo),e(V7,tO),e(tO,rSo),e(V7,tSo),e(Q,aSo),e(Q,X7),e(X7,rge),e(rge,nSo),e(X7,sSo),e(X7,aO),e(aO,lSo),e(X7,iSo),e(Q,dSo),e(Q,z7),e(z7,tge),e(tge,cSo),e(z7,fSo),e(z7,nO),e(nO,mSo),e(z7,gSo),e(Ze,hSo),e(Ze,W7),e(W7,pSo),e(W7,age),e(age,uSo),e(W7,_So),e(W7,nge),e(nge,bSo),e(Ze,vSo),M(Q7,Ze,null),b(f,vGe,_),b(f,Wi,_),e(Wi,H7),e(H7,sge),M(fy,sge,null),e(Wi,FSo),e(Wi,lge),e(lge,TSo),b(f,FGe,_),b(f,Ro,_),M(my,Ro,null),e(Ro,MSo),e(Ro,Qi),e(Qi,ESo),e(Qi,sO),e(sO,CSo),e(Qi,wSo),e(Qi,lO),e(lO,ASo),e(Qi,LSo),e(Ro,ySo),e(Ro,gy),e(gy,xSo),e(gy,ige),e(ige,$So),e(gy,kSo),e(Ro,SSo),e(Ro,dt),M(hy,dt,null),e(dt,RSo),e(dt,dge),e(dge,PSo),e(dt,BSo),e(dt,Hi),e(Hi,ISo),e(Hi,cge),e(cge,NSo),e(Hi,qSo),e(Hi,iO),e(iO,jSo),e(Hi,DSo),e(dt,GSo),M(U7,dt,null),e(Ro,OSo),e(Ro,eo),M(py,eo,null),e(eo,VSo),e(eo,fge),e(fge,XSo),e(eo,zSo),e(eo,Ia),e(Ia,WSo),e(Ia,mge),e(mge,QSo),e(Ia,HSo),e(Ia,gge),e(gge,USo),e(Ia,JSo),e(Ia,hge),e(hge,YSo),e(Ia,KSo),e(eo,ZSo),e(eo,pe),e(pe,J7),e(J7,pge),e(pge,eRo),e(J7,oRo),e(J7,dO),e(dO,rRo),e(J7,tRo),e(pe,aRo),e(pe,Y7),e(Y7,uge),e(uge,nRo),e(Y7,sRo),e(Y7,cO),e(cO,lRo),e(Y7,iRo),e(pe,dRo),e(pe,K7),e(K7,_ge),e(_ge,cRo),e(K7,fRo),e(K7,fO),e(fO,mRo),e(K7,gRo),e(pe,hRo),e(pe,Z7),e(Z7,bge),e(bge,pRo),e(Z7,uRo),e(Z7,mO),e(mO,_Ro),e(Z7,bRo),e(pe,vRo),e(pe,e2),e(e2,vge),e(vge,FRo),e(e2,TRo),e(e2,gO),e(gO,MRo),e(e2,ERo),e(pe,CRo),e(pe,o2),e(o2,Fge),e(Fge,wRo),e(o2,ARo),e(o2,hO),e(hO,LRo),e(o2,yRo),e(pe,xRo),e(pe,r2),e(r2,Tge),e(Tge,$Ro),e(r2,kRo),e(r2,pO),e(pO,SRo),e(r2,RRo),e(pe,PRo),e(pe,t2),e(t2,Mge),e(Mge,BRo),e(t2,IRo),e(t2,uO),e(uO,NRo),e(t2,qRo),e(pe,jRo),e(pe,a2),e(a2,Ege),e(Ege,DRo),e(a2,GRo),e(a2,_O),e(_O,ORo),e(a2,VRo),e(pe,XRo),e(pe,n2),e(n2,Cge),e(Cge,zRo),e(n2,WRo),e(n2,bO),e(bO,QRo),e(n2,HRo),e(pe,URo),e(pe,s2),e(s2,wge),e(wge,JRo),e(s2,YRo),e(s2,vO),e(vO,KRo),e(s2,ZRo),e(pe,ePo),e(pe,l2),e(l2,Age),e(Age,oPo),e(l2,rPo),e(l2,FO),e(FO,tPo),e(l2,aPo),e(pe,nPo),e(pe,i2),e(i2,Lge),e(Lge,sPo),e(i2,lPo),e(i2,TO),e(TO,iPo),e(i2,dPo),e(pe,cPo),e(pe,d2),e(d2,yge),e(yge,fPo),e(d2,mPo),e(d2,MO),e(MO,gPo),e(d2,hPo),e(pe,pPo),e(pe,c2),e(c2,xge),e(xge,uPo),e(c2,_Po),e(c2,EO),e(EO,bPo),e(c2,vPo),e(pe,FPo),e(pe,f2),e(f2,$ge),e($ge,TPo),e(f2,MPo),e(f2,CO),e(CO,EPo),e(f2,CPo),e(pe,wPo),e(pe,m2),e(m2,kge),e(kge,APo),e(m2,LPo),e(m2,wO),e(wO,yPo),e(m2,xPo),e(eo,$Po),e(eo,g2),e(g2,kPo),e(g2,Sge),e(Sge,SPo),e(g2,RPo),e(g2,Rge),e(Rge,PPo),e(eo,BPo),M(h2,eo,null),b(f,TGe,_),b(f,Ui,_),e(Ui,p2),e(p2,Pge),M(uy,Pge,null),e(Ui,IPo),e(Ui,Bge),e(Bge,NPo),b(f,MGe,_),b(f,Po,_),M(_y,Po,null),e(Po,qPo),e(Po,Ji),e(Ji,jPo),e(Ji,AO),e(AO,DPo),e(Ji,GPo),e(Ji,LO),e(LO,OPo),e(Ji,VPo),e(Po,XPo),e(Po,by),e(by,zPo),e(by,Ige),e(Ige,WPo),e(by,QPo),e(Po,HPo),e(Po,ct),M(vy,ct,null),e(ct,UPo),e(ct,Nge),e(Nge,JPo),e(ct,YPo),e(ct,Yi),e(Yi,KPo),e(Yi,qge),e(qge,ZPo),e(Yi,eBo),e(Yi,yO),e(yO,oBo),e(Yi,rBo),e(ct,tBo),M(u2,ct,null),e(Po,aBo),e(Po,oo),M(Fy,oo,null),e(oo,nBo),e(oo,jge),e(jge,sBo),e(oo,lBo),e(oo,Na),e(Na,iBo),e(Na,Dge),e(Dge,dBo),e(Na,cBo),e(Na,Gge),e(Gge,fBo),e(Na,mBo),e(Na,Oge),e(Oge,gBo),e(Na,hBo),e(oo,pBo),e(oo,N),e(N,_2),e(_2,Vge),e(Vge,uBo),e(_2,_Bo),e(_2,xO),e(xO,bBo),e(_2,vBo),e(N,FBo),e(N,b2),e(b2,Xge),e(Xge,TBo),e(b2,MBo),e(b2,$O),e($O,EBo),e(b2,CBo),e(N,wBo),e(N,v2),e(v2,zge),e(zge,ABo),e(v2,LBo),e(v2,kO),e(kO,yBo),e(v2,xBo),e(N,$Bo),e(N,F2),e(F2,Wge),e(Wge,kBo),e(F2,SBo),e(F2,SO),e(SO,RBo),e(F2,PBo),e(N,BBo),e(N,T2),e(T2,Qge),e(Qge,IBo),e(T2,NBo),e(T2,RO),e(RO,qBo),e(T2,jBo),e(N,DBo),e(N,M2),e(M2,Hge),e(Hge,GBo),e(M2,OBo),e(M2,PO),e(PO,VBo),e(M2,XBo),e(N,zBo),e(N,E2),e(E2,Uge),e(Uge,WBo),e(E2,QBo),e(E2,BO),e(BO,HBo),e(E2,UBo),e(N,JBo),e(N,C2),e(C2,Jge),e(Jge,YBo),e(C2,KBo),e(C2,IO),e(IO,ZBo),e(C2,eIo),e(N,oIo),e(N,w2),e(w2,Yge),e(Yge,rIo),e(w2,tIo),e(w2,NO),e(NO,aIo),e(w2,nIo),e(N,sIo),e(N,A2),e(A2,Kge),e(Kge,lIo),e(A2,iIo),e(A2,qO),e(qO,dIo),e(A2,cIo),e(N,fIo),e(N,L2),e(L2,Zge),e(Zge,mIo),e(L2,gIo),e(L2,jO),e(jO,hIo),e(L2,pIo),e(N,uIo),e(N,y2),e(y2,ehe),e(ehe,_Io),e(y2,bIo),e(y2,DO),e(DO,vIo),e(y2,FIo),e(N,TIo),e(N,x2),e(x2,ohe),e(ohe,MIo),e(x2,EIo),e(x2,GO),e(GO,CIo),e(x2,wIo),e(N,AIo),e(N,$2),e($2,rhe),e(rhe,LIo),e($2,yIo),e($2,OO),e(OO,xIo),e($2,$Io),e(N,kIo),e(N,k2),e(k2,the),e(the,SIo),e(k2,RIo),e(k2,VO),e(VO,PIo),e(k2,BIo),e(N,IIo),e(N,S2),e(S2,ahe),e(ahe,NIo),e(S2,qIo),e(S2,XO),e(XO,jIo),e(S2,DIo),e(N,GIo),e(N,R2),e(R2,nhe),e(nhe,OIo),e(R2,VIo),e(R2,zO),e(zO,XIo),e(R2,zIo),e(N,WIo),e(N,P2),e(P2,she),e(she,QIo),e(P2,HIo),e(P2,WO),e(WO,UIo),e(P2,JIo),e(N,YIo),e(N,B2),e(B2,lhe),e(lhe,KIo),e(B2,ZIo),e(B2,QO),e(QO,eNo),e(B2,oNo),e(N,rNo),e(N,I2),e(I2,ihe),e(ihe,tNo),e(I2,aNo),e(I2,HO),e(HO,nNo),e(I2,sNo),e(N,lNo),e(N,N2),e(N2,dhe),e(dhe,iNo),e(N2,dNo),e(N2,UO),e(UO,cNo),e(N2,fNo),e(N,mNo),e(N,q2),e(q2,che),e(che,gNo),e(q2,hNo),e(q2,JO),e(JO,pNo),e(q2,uNo),e(N,_No),e(N,j2),e(j2,fhe),e(fhe,bNo),e(j2,vNo),e(j2,YO),e(YO,FNo),e(j2,TNo),e(N,MNo),e(N,D2),e(D2,mhe),e(mhe,ENo),e(D2,CNo),e(D2,KO),e(KO,wNo),e(D2,ANo),e(N,LNo),e(N,G2),e(G2,ghe),e(ghe,yNo),e(G2,xNo),e(G2,ZO),e(ZO,$No),e(G2,kNo),e(N,SNo),e(N,O2),e(O2,hhe),e(hhe,RNo),e(O2,PNo),e(O2,eV),e(eV,BNo),e(O2,INo),e(N,NNo),e(N,V2),e(V2,phe),e(phe,qNo),e(V2,jNo),e(V2,oV),e(oV,DNo),e(V2,GNo),e(N,ONo),e(N,X2),e(X2,uhe),e(uhe,VNo),e(X2,XNo),e(X2,rV),e(rV,zNo),e(X2,WNo),e(N,QNo),e(N,z2),e(z2,_he),e(_he,HNo),e(z2,UNo),e(z2,tV),e(tV,JNo),e(z2,YNo),e(N,KNo),e(N,W2),e(W2,bhe),e(bhe,ZNo),e(W2,eqo),e(W2,aV),e(aV,oqo),e(W2,rqo),e(N,tqo),e(N,Q2),e(Q2,vhe),e(vhe,aqo),e(Q2,nqo),e(Q2,nV),e(nV,sqo),e(Q2,lqo),e(N,iqo),e(N,H2),e(H2,Fhe),e(Fhe,dqo),e(H2,cqo),e(H2,sV),e(sV,fqo),e(H2,mqo),e(N,gqo),e(N,U2),e(U2,The),e(The,hqo),e(U2,pqo),e(U2,lV),e(lV,uqo),e(U2,_qo),e(N,bqo),e(N,J2),e(J2,Mhe),e(Mhe,vqo),e(J2,Fqo),e(J2,iV),e(iV,Tqo),e(J2,Mqo),e(N,Eqo),e(N,Y2),e(Y2,Ehe),e(Ehe,Cqo),e(Y2,wqo),e(Y2,dV),e(dV,Aqo),e(Y2,Lqo),e(N,yqo),e(N,K2),e(K2,Che),e(Che,xqo),e(K2,$qo),e(K2,cV),e(cV,kqo),e(K2,Sqo),e(N,Rqo),e(N,Z2),e(Z2,whe),e(whe,Pqo),e(Z2,Bqo),e(Z2,fV),e(fV,Iqo),e(Z2,Nqo),e(N,qqo),e(N,eb),e(eb,Ahe),e(Ahe,jqo),e(eb,Dqo),e(eb,mV),e(mV,Gqo),e(eb,Oqo),e(N,Vqo),e(N,ob),e(ob,Lhe),e(Lhe,Xqo),e(ob,zqo),e(ob,gV),e(gV,Wqo),e(ob,Qqo),e(N,Hqo),e(N,rb),e(rb,yhe),e(yhe,Uqo),e(rb,Jqo),e(rb,hV),e(hV,Yqo),e(rb,Kqo),e(N,Zqo),e(N,tb),e(tb,xhe),e(xhe,ejo),e(tb,ojo),e(tb,pV),e(pV,rjo),e(tb,tjo),e(N,ajo),e(N,ab),e(ab,$he),e($he,njo),e(ab,sjo),e(ab,uV),e(uV,ljo),e(ab,ijo),e(N,djo),e(N,nb),e(nb,khe),e(khe,cjo),e(nb,fjo),e(nb,_V),e(_V,mjo),e(nb,gjo),e(N,hjo),e(N,sb),e(sb,She),e(She,pjo),e(sb,ujo),e(sb,bV),e(bV,_jo),e(sb,bjo),e(N,vjo),e(N,lb),e(lb,Rhe),e(Rhe,Fjo),e(lb,Tjo),e(lb,vV),e(vV,Mjo),e(lb,Ejo),e(N,Cjo),e(N,ib),e(ib,Phe),e(Phe,wjo),e(ib,Ajo),e(ib,FV),e(FV,Ljo),e(ib,yjo),e(N,xjo),e(N,db),e(db,Bhe),e(Bhe,$jo),e(db,kjo),e(db,TV),e(TV,Sjo),e(db,Rjo),e(N,Pjo),e(N,cb),e(cb,Ihe),e(Ihe,Bjo),e(cb,Ijo),e(cb,MV),e(MV,Njo),e(cb,qjo),e(oo,jjo),e(oo,fb),e(fb,Djo),e(fb,Nhe),e(Nhe,Gjo),e(fb,Ojo),e(fb,qhe),e(qhe,Vjo),e(oo,Xjo),M(mb,oo,null),b(f,EGe,_),b(f,Ki,_),e(Ki,gb),e(gb,jhe),M(Ty,jhe,null),e(Ki,zjo),e(Ki,Dhe),e(Dhe,Wjo),b(f,CGe,_),b(f,Bo,_),M(My,Bo,null),e(Bo,Qjo),e(Bo,Zi),e(Zi,Hjo),e(Zi,EV),e(EV,Ujo),e(Zi,Jjo),e(Zi,CV),e(CV,Yjo),e(Zi,Kjo),e(Bo,Zjo),e(Bo,Ey),e(Ey,eDo),e(Ey,Ghe),e(Ghe,oDo),e(Ey,rDo),e(Bo,tDo),e(Bo,ft),M(Cy,ft,null),e(ft,aDo),e(ft,Ohe),e(Ohe,nDo),e(ft,sDo),e(ft,ed),e(ed,lDo),e(ed,Vhe),e(Vhe,iDo),e(ed,dDo),e(ed,wV),e(wV,cDo),e(ed,fDo),e(ft,mDo),M(hb,ft,null),e(Bo,gDo),e(Bo,ro),M(wy,ro,null),e(ro,hDo),e(ro,Xhe),e(Xhe,pDo),e(ro,uDo),e(ro,qa),e(qa,_Do),e(qa,zhe),e(zhe,bDo),e(qa,vDo),e(qa,Whe),e(Whe,FDo),e(qa,TDo),e(qa,Qhe),e(Qhe,MDo),e(qa,EDo),e(ro,CDo),e(ro,Z),e(Z,pb),e(pb,Hhe),e(Hhe,wDo),e(pb,ADo),e(pb,AV),e(AV,LDo),e(pb,yDo),e(Z,xDo),e(Z,ub),e(ub,Uhe),e(Uhe,$Do),e(ub,kDo),e(ub,LV),e(LV,SDo),e(ub,RDo),e(Z,PDo),e(Z,_b),e(_b,Jhe),e(Jhe,BDo),e(_b,IDo),e(_b,yV),e(yV,NDo),e(_b,qDo),e(Z,jDo),e(Z,bb),e(bb,Yhe),e(Yhe,DDo),e(bb,GDo),e(bb,xV),e(xV,ODo),e(bb,VDo),e(Z,XDo),e(Z,vb),e(vb,Khe),e(Khe,zDo),e(vb,WDo),e(vb,$V),e($V,QDo),e(vb,HDo),e(Z,UDo),e(Z,Fb),e(Fb,Zhe),e(Zhe,JDo),e(Fb,YDo),e(Fb,kV),e(kV,KDo),e(Fb,ZDo),e(Z,eGo),e(Z,Tb),e(Tb,epe),e(epe,oGo),e(Tb,rGo),e(Tb,SV),e(SV,tGo),e(Tb,aGo),e(Z,nGo),e(Z,Mb),e(Mb,ope),e(ope,sGo),e(Mb,lGo),e(Mb,RV),e(RV,iGo),e(Mb,dGo),e(Z,cGo),e(Z,Eb),e(Eb,rpe),e(rpe,fGo),e(Eb,mGo),e(Eb,PV),e(PV,gGo),e(Eb,hGo),e(Z,pGo),e(Z,Cb),e(Cb,tpe),e(tpe,uGo),e(Cb,_Go),e(Cb,BV),e(BV,bGo),e(Cb,vGo),e(Z,FGo),e(Z,wb),e(wb,ape),e(ape,TGo),e(wb,MGo),e(wb,IV),e(IV,EGo),e(wb,CGo),e(Z,wGo),e(Z,Ab),e(Ab,npe),e(npe,AGo),e(Ab,LGo),e(Ab,NV),e(NV,yGo),e(Ab,xGo),e(Z,$Go),e(Z,Lb),e(Lb,spe),e(spe,kGo),e(Lb,SGo),e(Lb,qV),e(qV,RGo),e(Lb,PGo),e(Z,BGo),e(Z,yb),e(yb,lpe),e(lpe,IGo),e(yb,NGo),e(yb,jV),e(jV,qGo),e(yb,jGo),e(Z,DGo),e(Z,xb),e(xb,ipe),e(ipe,GGo),e(xb,OGo),e(xb,DV),e(DV,VGo),e(xb,XGo),e(Z,zGo),e(Z,$b),e($b,dpe),e(dpe,WGo),e($b,QGo),e($b,GV),e(GV,HGo),e($b,UGo),e(Z,JGo),e(Z,kb),e(kb,cpe),e(cpe,YGo),e(kb,KGo),e(kb,OV),e(OV,ZGo),e(kb,eOo),e(Z,oOo),e(Z,Sb),e(Sb,fpe),e(fpe,rOo),e(Sb,tOo),e(Sb,VV),e(VV,aOo),e(Sb,nOo),e(Z,sOo),e(Z,Rb),e(Rb,mpe),e(mpe,lOo),e(Rb,iOo),e(Rb,XV),e(XV,dOo),e(Rb,cOo),e(Z,fOo),e(Z,Pb),e(Pb,gpe),e(gpe,mOo),e(Pb,gOo),e(Pb,zV),e(zV,hOo),e(Pb,pOo),e(Z,uOo),e(Z,Bb),e(Bb,hpe),e(hpe,_Oo),e(Bb,bOo),e(Bb,WV),e(WV,vOo),e(Bb,FOo),e(Z,TOo),e(Z,Ib),e(Ib,ppe),e(ppe,MOo),e(Ib,EOo),e(Ib,QV),e(QV,COo),e(Ib,wOo),e(Z,AOo),e(Z,Nb),e(Nb,upe),e(upe,LOo),e(Nb,yOo),e(Nb,HV),e(HV,xOo),e(Nb,$Oo),e(Z,kOo),e(Z,qb),e(qb,_pe),e(_pe,SOo),e(qb,ROo),e(qb,UV),e(UV,POo),e(qb,BOo),e(Z,IOo),e(Z,jb),e(jb,bpe),e(bpe,NOo),e(jb,qOo),e(jb,JV),e(JV,jOo),e(jb,DOo),e(Z,GOo),e(Z,Db),e(Db,vpe),e(vpe,OOo),e(Db,VOo),e(Db,YV),e(YV,XOo),e(Db,zOo),e(Z,WOo),e(Z,Gb),e(Gb,Fpe),e(Fpe,QOo),e(Gb,HOo),e(Gb,KV),e(KV,UOo),e(Gb,JOo),e(Z,YOo),e(Z,Ob),e(Ob,Tpe),e(Tpe,KOo),e(Ob,ZOo),e(Ob,ZV),e(ZV,eVo),e(Ob,oVo),e(Z,rVo),e(Z,Vb),e(Vb,Mpe),e(Mpe,tVo),e(Vb,aVo),e(Vb,eX),e(eX,nVo),e(Vb,sVo),e(ro,lVo),e(ro,Xb),e(Xb,iVo),e(Xb,Epe),e(Epe,dVo),e(Xb,cVo),e(Xb,Cpe),e(Cpe,fVo),e(ro,mVo),M(zb,ro,null),b(f,wGe,_),b(f,od,_),e(od,Wb),e(Wb,wpe),M(Ay,wpe,null),e(od,gVo),e(od,Ape),e(Ape,hVo),b(f,AGe,_),b(f,Io,_),M(Ly,Io,null),e(Io,pVo),e(Io,rd),e(rd,uVo),e(rd,oX),e(oX,_Vo),e(rd,bVo),e(rd,rX),e(rX,vVo),e(rd,FVo),e(Io,TVo),e(Io,yy),e(yy,MVo),e(yy,Lpe),e(Lpe,EVo),e(yy,CVo),e(Io,wVo),e(Io,mt),M(xy,mt,null),e(mt,AVo),e(mt,ype),e(ype,LVo),e(mt,yVo),e(mt,td),e(td,xVo),e(td,xpe),e(xpe,$Vo),e(td,kVo),e(td,tX),e(tX,SVo),e(td,RVo),e(mt,PVo),M(Qb,mt,null),e(Io,BVo),e(Io,to),M($y,to,null),e(to,IVo),e(to,$pe),e($pe,NVo),e(to,qVo),e(to,ja),e(ja,jVo),e(ja,kpe),e(kpe,DVo),e(ja,GVo),e(ja,Spe),e(Spe,OVo),e(ja,VVo),e(ja,Rpe),e(Rpe,XVo),e(ja,zVo),e(to,WVo),e(to,Zr),e(Zr,Hb),e(Hb,Ppe),e(Ppe,QVo),e(Hb,HVo),e(Hb,aX),e(aX,UVo),e(Hb,JVo),e(Zr,YVo),e(Zr,Ub),e(Ub,Bpe),e(Bpe,KVo),e(Ub,ZVo),e(Ub,nX),e(nX,eXo),e(Ub,oXo),e(Zr,rXo),e(Zr,Jb),e(Jb,Ipe),e(Ipe,tXo),e(Jb,aXo),e(Jb,sX),e(sX,nXo),e(Jb,sXo),e(Zr,lXo),e(Zr,Yb),e(Yb,Npe),e(Npe,iXo),e(Yb,dXo),e(Yb,lX),e(lX,cXo),e(Yb,fXo),e(Zr,mXo),e(Zr,Kb),e(Kb,qpe),e(qpe,gXo),e(Kb,hXo),e(Kb,iX),e(iX,pXo),e(Kb,uXo),e(to,_Xo),e(to,Zb),e(Zb,bXo),e(Zb,jpe),e(jpe,vXo),e(Zb,FXo),e(Zb,Dpe),e(Dpe,TXo),e(to,MXo),M(ev,to,null),b(f,LGe,_),b(f,ad,_),e(ad,ov),e(ov,Gpe),M(ky,Gpe,null),e(ad,EXo),e(ad,Ope),e(Ope,CXo),b(f,yGe,_),b(f,No,_),M(Sy,No,null),e(No,wXo),e(No,nd),e(nd,AXo),e(nd,dX),e(dX,LXo),e(nd,yXo),e(nd,cX),e(cX,xXo),e(nd,$Xo),e(No,kXo),e(No,Ry),e(Ry,SXo),e(Ry,Vpe),e(Vpe,RXo),e(Ry,PXo),e(No,BXo),e(No,gt),M(Py,gt,null),e(gt,IXo),e(gt,Xpe),e(Xpe,NXo),e(gt,qXo),e(gt,sd),e(sd,jXo),e(sd,zpe),e(zpe,DXo),e(sd,GXo),e(sd,fX),e(fX,OXo),e(sd,VXo),e(gt,XXo),M(rv,gt,null),e(No,zXo),e(No,ao),M(By,ao,null),e(ao,WXo),e(ao,Wpe),e(Wpe,QXo),e(ao,HXo),e(ao,Da),e(Da,UXo),e(Da,Qpe),e(Qpe,JXo),e(Da,YXo),e(Da,Hpe),e(Hpe,KXo),e(Da,ZXo),e(Da,Upe),e(Upe,ezo),e(Da,ozo),e(ao,rzo),e(ao,H),e(H,tv),e(tv,Jpe),e(Jpe,tzo),e(tv,azo),e(tv,mX),e(mX,nzo),e(tv,szo),e(H,lzo),e(H,av),e(av,Ype),e(Ype,izo),e(av,dzo),e(av,gX),e(gX,czo),e(av,fzo),e(H,mzo),e(H,nv),e(nv,Kpe),e(Kpe,gzo),e(nv,hzo),e(nv,hX),e(hX,pzo),e(nv,uzo),e(H,_zo),e(H,sv),e(sv,Zpe),e(Zpe,bzo),e(sv,vzo),e(sv,pX),e(pX,Fzo),e(sv,Tzo),e(H,Mzo),e(H,lv),e(lv,eue),e(eue,Ezo),e(lv,Czo),e(lv,uX),e(uX,wzo),e(lv,Azo),e(H,Lzo),e(H,iv),e(iv,oue),e(oue,yzo),e(iv,xzo),e(iv,_X),e(_X,$zo),e(iv,kzo),e(H,Szo),e(H,dv),e(dv,rue),e(rue,Rzo),e(dv,Pzo),e(dv,bX),e(bX,Bzo),e(dv,Izo),e(H,Nzo),e(H,cv),e(cv,tue),e(tue,qzo),e(cv,jzo),e(cv,vX),e(vX,Dzo),e(cv,Gzo),e(H,Ozo),e(H,fv),e(fv,aue),e(aue,Vzo),e(fv,Xzo),e(fv,FX),e(FX,zzo),e(fv,Wzo),e(H,Qzo),e(H,mv),e(mv,nue),e(nue,Hzo),e(mv,Uzo),e(mv,TX),e(TX,Jzo),e(mv,Yzo),e(H,Kzo),e(H,gv),e(gv,sue),e(sue,Zzo),e(gv,eWo),e(gv,MX),e(MX,oWo),e(gv,rWo),e(H,tWo),e(H,hv),e(hv,lue),e(lue,aWo),e(hv,nWo),e(hv,EX),e(EX,sWo),e(hv,lWo),e(H,iWo),e(H,pv),e(pv,iue),e(iue,dWo),e(pv,cWo),e(pv,CX),e(CX,fWo),e(pv,mWo),e(H,gWo),e(H,uv),e(uv,due),e(due,hWo),e(uv,pWo),e(uv,wX),e(wX,uWo),e(uv,_Wo),e(H,bWo),e(H,_v),e(_v,cue),e(cue,vWo),e(_v,FWo),e(_v,AX),e(AX,TWo),e(_v,MWo),e(H,EWo),e(H,bv),e(bv,fue),e(fue,CWo),e(bv,wWo),e(bv,LX),e(LX,AWo),e(bv,LWo),e(H,yWo),e(H,vv),e(vv,mue),e(mue,xWo),e(vv,$Wo),e(vv,yX),e(yX,kWo),e(vv,SWo),e(H,RWo),e(H,Fv),e(Fv,gue),e(gue,PWo),e(Fv,BWo),e(Fv,xX),e(xX,IWo),e(Fv,NWo),e(H,qWo),e(H,Tv),e(Tv,hue),e(hue,jWo),e(Tv,DWo),e(Tv,$X),e($X,GWo),e(Tv,OWo),e(H,VWo),e(H,Mv),e(Mv,pue),e(pue,XWo),e(Mv,zWo),e(Mv,kX),e(kX,WWo),e(Mv,QWo),e(H,HWo),e(H,Ev),e(Ev,uue),e(uue,UWo),e(Ev,JWo),e(Ev,SX),e(SX,YWo),e(Ev,KWo),e(H,ZWo),e(H,Cv),e(Cv,_ue),e(_ue,eQo),e(Cv,oQo),e(Cv,RX),e(RX,rQo),e(Cv,tQo),e(H,aQo),e(H,wv),e(wv,bue),e(bue,nQo),e(wv,sQo),e(wv,PX),e(PX,lQo),e(wv,iQo),e(H,dQo),e(H,Av),e(Av,vue),e(vue,cQo),e(Av,fQo),e(Av,BX),e(BX,mQo),e(Av,gQo),e(H,hQo),e(H,Lv),e(Lv,Fue),e(Fue,pQo),e(Lv,uQo),e(Lv,IX),e(IX,_Qo),e(Lv,bQo),e(H,vQo),e(H,yv),e(yv,Tue),e(Tue,FQo),e(yv,TQo),e(yv,NX),e(NX,MQo),e(yv,EQo),e(H,CQo),e(H,xv),e(xv,Mue),e(Mue,wQo),e(xv,AQo),e(xv,qX),e(qX,LQo),e(xv,yQo),e(H,xQo),e(H,$v),e($v,Eue),e(Eue,$Qo),e($v,kQo),e($v,jX),e(jX,SQo),e($v,RQo),e(H,PQo),e(H,kv),e(kv,Cue),e(Cue,BQo),e(kv,IQo),e(kv,DX),e(DX,NQo),e(kv,qQo),e(H,jQo),e(H,Sv),e(Sv,wue),e(wue,DQo),e(Sv,GQo),e(Sv,GX),e(GX,OQo),e(Sv,VQo),e(H,XQo),e(H,Rv),e(Rv,Aue),e(Aue,zQo),e(Rv,WQo),e(Rv,OX),e(OX,QQo),e(Rv,HQo),e(H,UQo),e(H,Pv),e(Pv,Lue),e(Lue,JQo),e(Pv,YQo),e(Pv,VX),e(VX,KQo),e(Pv,ZQo),e(H,eHo),e(H,Bv),e(Bv,yue),e(yue,oHo),e(Bv,rHo),e(Bv,XX),e(XX,tHo),e(Bv,aHo),e(H,nHo),e(H,Iv),e(Iv,xue),e(xue,sHo),e(Iv,lHo),e(Iv,zX),e(zX,iHo),e(Iv,dHo),e(H,cHo),e(H,Nv),e(Nv,$ue),e($ue,fHo),e(Nv,mHo),e(Nv,WX),e(WX,gHo),e(Nv,hHo),e(ao,pHo),e(ao,qv),e(qv,uHo),e(qv,kue),e(kue,_Ho),e(qv,bHo),e(qv,Sue),e(Sue,vHo),e(ao,FHo),M(jv,ao,null),b(f,xGe,_),b(f,ld,_),e(ld,Dv),e(Dv,Rue),M(Iy,Rue,null),e(ld,THo),e(ld,Pue),e(Pue,MHo),b(f,$Ge,_),b(f,qo,_),M(Ny,qo,null),e(qo,EHo),e(qo,id),e(id,CHo),e(id,QX),e(QX,wHo),e(id,AHo),e(id,HX),e(HX,LHo),e(id,yHo),e(qo,xHo),e(qo,qy),e(qy,$Ho),e(qy,Bue),e(Bue,kHo),e(qy,SHo),e(qo,RHo),e(qo,ht),M(jy,ht,null),e(ht,PHo),e(ht,Iue),e(Iue,BHo),e(ht,IHo),e(ht,dd),e(dd,NHo),e(dd,Nue),e(Nue,qHo),e(dd,jHo),e(dd,UX),e(UX,DHo),e(dd,GHo),e(ht,OHo),M(Gv,ht,null),e(qo,VHo),e(qo,no),M(Dy,no,null),e(no,XHo),e(no,que),e(que,zHo),e(no,WHo),e(no,Ga),e(Ga,QHo),e(Ga,jue),e(jue,HHo),e(Ga,UHo),e(Ga,Due),e(Due,JHo),e(Ga,YHo),e(Ga,Gue),e(Gue,KHo),e(Ga,ZHo),e(no,eUo),e(no,V),e(V,Ov),e(Ov,Oue),e(Oue,oUo),e(Ov,rUo),e(Ov,JX),e(JX,tUo),e(Ov,aUo),e(V,nUo),e(V,Vv),e(Vv,Vue),e(Vue,sUo),e(Vv,lUo),e(Vv,YX),e(YX,iUo),e(Vv,dUo),e(V,cUo),e(V,Xv),e(Xv,Xue),e(Xue,fUo),e(Xv,mUo),e(Xv,KX),e(KX,gUo),e(Xv,hUo),e(V,pUo),e(V,zv),e(zv,zue),e(zue,uUo),e(zv,_Uo),e(zv,ZX),e(ZX,bUo),e(zv,vUo),e(V,FUo),e(V,Wv),e(Wv,Wue),e(Wue,TUo),e(Wv,MUo),e(Wv,ez),e(ez,EUo),e(Wv,CUo),e(V,wUo),e(V,Qv),e(Qv,Que),e(Que,AUo),e(Qv,LUo),e(Qv,oz),e(oz,yUo),e(Qv,xUo),e(V,$Uo),e(V,Hv),e(Hv,Hue),e(Hue,kUo),e(Hv,SUo),e(Hv,rz),e(rz,RUo),e(Hv,PUo),e(V,BUo),e(V,Uv),e(Uv,Uue),e(Uue,IUo),e(Uv,NUo),e(Uv,tz),e(tz,qUo),e(Uv,jUo),e(V,DUo),e(V,Jv),e(Jv,Jue),e(Jue,GUo),e(Jv,OUo),e(Jv,az),e(az,VUo),e(Jv,XUo),e(V,zUo),e(V,Yv),e(Yv,Yue),e(Yue,WUo),e(Yv,QUo),e(Yv,nz),e(nz,HUo),e(Yv,UUo),e(V,JUo),e(V,Kv),e(Kv,Kue),e(Kue,YUo),e(Kv,KUo),e(Kv,sz),e(sz,ZUo),e(Kv,eJo),e(V,oJo),e(V,Zv),e(Zv,Zue),e(Zue,rJo),e(Zv,tJo),e(Zv,lz),e(lz,aJo),e(Zv,nJo),e(V,sJo),e(V,eF),e(eF,e_e),e(e_e,lJo),e(eF,iJo),e(eF,iz),e(iz,dJo),e(eF,cJo),e(V,fJo),e(V,oF),e(oF,o_e),e(o_e,mJo),e(oF,gJo),e(oF,dz),e(dz,hJo),e(oF,pJo),e(V,uJo),e(V,rF),e(rF,r_e),e(r_e,_Jo),e(rF,bJo),e(rF,cz),e(cz,vJo),e(rF,FJo),e(V,TJo),e(V,tF),e(tF,t_e),e(t_e,MJo),e(tF,EJo),e(tF,fz),e(fz,CJo),e(tF,wJo),e(V,AJo),e(V,aF),e(aF,a_e),e(a_e,LJo),e(aF,yJo),e(aF,mz),e(mz,xJo),e(aF,$Jo),e(V,kJo),e(V,nF),e(nF,n_e),e(n_e,SJo),e(nF,RJo),e(nF,gz),e(gz,PJo),e(nF,BJo),e(V,IJo),e(V,sF),e(sF,s_e),e(s_e,NJo),e(sF,qJo),e(sF,hz),e(hz,jJo),e(sF,DJo),e(V,GJo),e(V,lF),e(lF,l_e),e(l_e,OJo),e(lF,VJo),e(lF,pz),e(pz,XJo),e(lF,zJo),e(V,WJo),e(V,iF),e(iF,i_e),e(i_e,QJo),e(iF,HJo),e(iF,uz),e(uz,UJo),e(iF,JJo),e(V,YJo),e(V,dF),e(dF,d_e),e(d_e,KJo),e(dF,ZJo),e(dF,_z),e(_z,eYo),e(dF,oYo),e(V,rYo),e(V,cF),e(cF,c_e),e(c_e,tYo),e(cF,aYo),e(cF,bz),e(bz,nYo),e(cF,sYo),e(V,lYo),e(V,fF),e(fF,f_e),e(f_e,iYo),e(fF,dYo),e(fF,vz),e(vz,cYo),e(fF,fYo),e(V,mYo),e(V,mF),e(mF,m_e),e(m_e,gYo),e(mF,hYo),e(mF,Fz),e(Fz,pYo),e(mF,uYo),e(V,_Yo),e(V,gF),e(gF,g_e),e(g_e,bYo),e(gF,vYo),e(gF,Tz),e(Tz,FYo),e(gF,TYo),e(V,MYo),e(V,hF),e(hF,h_e),e(h_e,EYo),e(hF,CYo),e(hF,Mz),e(Mz,wYo),e(hF,AYo),e(V,LYo),e(V,pF),e(pF,p_e),e(p_e,yYo),e(pF,xYo),e(pF,Ez),e(Ez,$Yo),e(pF,kYo),e(V,SYo),e(V,uF),e(uF,u_e),e(u_e,RYo),e(uF,PYo),e(uF,Cz),e(Cz,BYo),e(uF,IYo),e(V,NYo),e(V,_F),e(_F,__e),e(__e,qYo),e(_F,jYo),e(_F,wz),e(wz,DYo),e(_F,GYo),e(V,OYo),e(V,bF),e(bF,b_e),e(b_e,VYo),e(bF,XYo),e(bF,Az),e(Az,zYo),e(bF,WYo),e(V,QYo),e(V,vF),e(vF,v_e),e(v_e,HYo),e(vF,UYo),e(vF,Lz),e(Lz,JYo),e(vF,YYo),e(V,KYo),e(V,FF),e(FF,F_e),e(F_e,ZYo),e(FF,eKo),e(FF,yz),e(yz,oKo),e(FF,rKo),e(V,tKo),e(V,TF),e(TF,T_e),e(T_e,aKo),e(TF,nKo),e(TF,xz),e(xz,sKo),e(TF,lKo),e(V,iKo),e(V,MF),e(MF,M_e),e(M_e,dKo),e(MF,cKo),e(MF,$z),e($z,fKo),e(MF,mKo),e(V,gKo),e(V,EF),e(EF,E_e),e(E_e,hKo),e(EF,pKo),e(EF,kz),e(kz,uKo),e(EF,_Ko),e(V,bKo),e(V,CF),e(CF,C_e),e(C_e,vKo),e(CF,FKo),e(CF,Sz),e(Sz,TKo),e(CF,MKo),e(V,EKo),e(V,wF),e(wF,w_e),e(w_e,CKo),e(wF,wKo),e(wF,Rz),e(Rz,AKo),e(wF,LKo),e(V,yKo),e(V,AF),e(AF,A_e),e(A_e,xKo),e(AF,$Ko),e(AF,Pz),e(Pz,kKo),e(AF,SKo),e(V,RKo),e(V,LF),e(LF,L_e),e(L_e,PKo),e(LF,BKo),e(LF,Bz),e(Bz,IKo),e(LF,NKo),e(no,qKo),e(no,yF),e(yF,jKo),e(yF,y_e),e(y_e,DKo),e(yF,GKo),e(yF,x_e),e(x_e,OKo),e(no,VKo),M(xF,no,null),b(f,kGe,_),b(f,cd,_),e(cd,$F),e($F,$_e),M(Gy,$_e,null),e(cd,XKo),e(cd,k_e),e(k_e,zKo),b(f,SGe,_),b(f,jo,_),M(Oy,jo,null),e(jo,WKo),e(jo,fd),e(fd,QKo),e(fd,Iz),e(Iz,HKo),e(fd,UKo),e(fd,Nz),e(Nz,JKo),e(fd,YKo),e(jo,KKo),e(jo,Vy),e(Vy,ZKo),e(Vy,S_e),e(S_e,eZo),e(Vy,oZo),e(jo,rZo),e(jo,pt),M(Xy,pt,null),e(pt,tZo),e(pt,R_e),e(R_e,aZo),e(pt,nZo),e(pt,md),e(md,sZo),e(md,P_e),e(P_e,lZo),e(md,iZo),e(md,qz),e(qz,dZo),e(md,cZo),e(pt,fZo),M(kF,pt,null),e(jo,mZo),e(jo,so),M(zy,so,null),e(so,gZo),e(so,B_e),e(B_e,hZo),e(so,pZo),e(so,Oa),e(Oa,uZo),e(Oa,I_e),e(I_e,_Zo),e(Oa,bZo),e(Oa,N_e),e(N_e,vZo),e(Oa,FZo),e(Oa,q_e),e(q_e,TZo),e(Oa,MZo),e(so,EZo),e(so,j_e),e(j_e,SF),e(SF,D_e),e(D_e,CZo),e(SF,wZo),e(SF,jz),e(jz,AZo),e(SF,LZo),e(so,yZo),e(so,RF),e(RF,xZo),e(RF,G_e),e(G_e,$Zo),e(RF,kZo),e(RF,O_e),e(O_e,SZo),e(so,RZo),M(PF,so,null),b(f,RGe,_),b(f,gd,_),e(gd,BF),e(BF,V_e),M(Wy,V_e,null),e(gd,PZo),e(gd,X_e),e(X_e,BZo),b(f,PGe,_),b(f,Do,_),M(Qy,Do,null),e(Do,IZo),e(Do,hd),e(hd,NZo),e(hd,Dz),e(Dz,qZo),e(hd,jZo),e(hd,Gz),e(Gz,DZo),e(hd,GZo),e(Do,OZo),e(Do,Hy),e(Hy,VZo),e(Hy,z_e),e(z_e,XZo),e(Hy,zZo),e(Do,WZo),e(Do,ut),M(Uy,ut,null),e(ut,QZo),e(ut,W_e),e(W_e,HZo),e(ut,UZo),e(ut,pd),e(pd,JZo),e(pd,Q_e),e(Q_e,YZo),e(pd,KZo),e(pd,Oz),e(Oz,ZZo),e(pd,eer),e(ut,oer),M(IF,ut,null),e(Do,rer),e(Do,lo),M(Jy,lo,null),e(lo,ter),e(lo,H_e),e(H_e,aer),e(lo,ner),e(lo,Va),e(Va,ser),e(Va,U_e),e(U_e,ler),e(Va,ier),e(Va,J_e),e(J_e,der),e(Va,cer),e(Va,Y_e),e(Y_e,fer),e(Va,mer),e(lo,ger),e(lo,Fe),e(Fe,NF),e(NF,K_e),e(K_e,her),e(NF,per),e(NF,Vz),e(Vz,uer),e(NF,_er),e(Fe,ber),e(Fe,qF),e(qF,Z_e),e(Z_e,ver),e(qF,Fer),e(qF,Xz),e(Xz,Ter),e(qF,Mer),e(Fe,Eer),e(Fe,jF),e(jF,e1e),e(e1e,Cer),e(jF,wer),e(jF,zz),e(zz,Aer),e(jF,Ler),e(Fe,yer),e(Fe,DF),e(DF,o1e),e(o1e,xer),e(DF,$er),e(DF,Wz),e(Wz,ker),e(DF,Ser),e(Fe,Rer),e(Fe,Os),e(Os,r1e),e(r1e,Per),e(Os,Ber),e(Os,Qz),e(Qz,Ier),e(Os,Ner),e(Os,Hz),e(Hz,qer),e(Os,jer),e(Fe,Der),e(Fe,GF),e(GF,t1e),e(t1e,Ger),e(GF,Oer),e(GF,Uz),e(Uz,Ver),e(GF,Xer),e(Fe,zer),e(Fe,Vs),e(Vs,a1e),e(a1e,Wer),e(Vs,Qer),e(Vs,Jz),e(Jz,Her),e(Vs,Uer),e(Vs,Yz),e(Yz,Jer),e(Vs,Yer),e(Fe,Ker),e(Fe,_t),e(_t,n1e),e(n1e,Zer),e(_t,eor),e(_t,Kz),e(Kz,oor),e(_t,ror),e(_t,Zz),e(Zz,tor),e(_t,aor),e(_t,eW),e(eW,nor),e(_t,sor),e(Fe,lor),e(Fe,OF),e(OF,s1e),e(s1e,ior),e(OF,dor),e(OF,oW),e(oW,cor),e(OF,mor),e(Fe,gor),e(Fe,VF),e(VF,l1e),e(l1e,hor),e(VF,por),e(VF,rW),e(rW,uor),e(VF,_or),e(Fe,bor),e(Fe,XF),e(XF,i1e),e(i1e,vor),e(XF,For),e(XF,tW),e(tW,Tor),e(XF,Mor),e(Fe,Eor),e(Fe,zF),e(zF,d1e),e(d1e,Cor),e(zF,wor),e(zF,aW),e(aW,Aor),e(zF,Lor),e(Fe,yor),e(Fe,WF),e(WF,c1e),e(c1e,xor),e(WF,$or),e(WF,nW),e(nW,kor),e(WF,Sor),e(Fe,Ror),e(Fe,QF),e(QF,f1e),e(f1e,Por),e(QF,Bor),e(QF,sW),e(sW,Ior),e(QF,Nor),e(Fe,qor),e(Fe,HF),e(HF,m1e),e(m1e,jor),e(HF,Dor),e(HF,lW),e(lW,Gor),e(HF,Oor),e(lo,Vor),e(lo,UF),e(UF,Xor),e(UF,g1e),e(g1e,zor),e(UF,Wor),e(UF,h1e),e(h1e,Qor),e(lo,Hor),M(JF,lo,null),b(f,BGe,_),b(f,ud,_),e(ud,YF),e(YF,p1e),M(Yy,p1e,null),e(ud,Uor),e(ud,u1e),e(u1e,Jor),b(f,IGe,_),b(f,Go,_),M(Ky,Go,null),e(Go,Yor),e(Go,_d),e(_d,Kor),e(_d,iW),e(iW,Zor),e(_d,err),e(_d,dW),e(dW,orr),e(_d,rrr),e(Go,trr),e(Go,Zy),e(Zy,arr),e(Zy,_1e),e(_1e,nrr),e(Zy,srr),e(Go,lrr),e(Go,bt),M(e8,bt,null),e(bt,irr),e(bt,b1e),e(b1e,drr),e(bt,crr),e(bt,bd),e(bd,frr),e(bd,v1e),e(v1e,mrr),e(bd,grr),e(bd,cW),e(cW,hrr),e(bd,prr),e(bt,urr),M(KF,bt,null),e(Go,_rr),e(Go,io),M(o8,io,null),e(io,brr),e(io,F1e),e(F1e,vrr),e(io,Frr),e(io,Xa),e(Xa,Trr),e(Xa,T1e),e(T1e,Mrr),e(Xa,Err),e(Xa,M1e),e(M1e,Crr),e(Xa,wrr),e(Xa,E1e),e(E1e,Arr),e(Xa,Lrr),e(io,yrr),e(io,C1e),e(C1e,ZF),e(ZF,w1e),e(w1e,xrr),e(ZF,$rr),e(ZF,fW),e(fW,krr),e(ZF,Srr),e(io,Rrr),e(io,e6),e(e6,Prr),e(e6,A1e),e(A1e,Brr),e(e6,Irr),e(e6,L1e),e(L1e,Nrr),e(io,qrr),M(o6,io,null),b(f,NGe,_),b(f,vd,_),e(vd,r6),e(r6,y1e),M(r8,y1e,null),e(vd,jrr),e(vd,x1e),e(x1e,Drr),b(f,qGe,_),b(f,Oo,_),M(t8,Oo,null),e(Oo,Grr),e(Oo,Fd),e(Fd,Orr),e(Fd,mW),e(mW,Vrr),e(Fd,Xrr),e(Fd,gW),e(gW,zrr),e(Fd,Wrr),e(Oo,Qrr),e(Oo,a8),e(a8,Hrr),e(a8,$1e),e($1e,Urr),e(a8,Jrr),e(Oo,Yrr),e(Oo,vt),M(n8,vt,null),e(vt,Krr),e(vt,k1e),e(k1e,Zrr),e(vt,etr),e(vt,Td),e(Td,otr),e(Td,S1e),e(S1e,rtr),e(Td,ttr),e(Td,hW),e(hW,atr),e(Td,ntr),e(vt,str),M(t6,vt,null),e(Oo,ltr),e(Oo,co),M(s8,co,null),e(co,itr),e(co,R1e),e(R1e,dtr),e(co,ctr),e(co,za),e(za,ftr),e(za,P1e),e(P1e,mtr),e(za,gtr),e(za,B1e),e(B1e,htr),e(za,ptr),e(za,I1e),e(I1e,utr),e(za,_tr),e(co,btr),e(co,N1e),e(N1e,a6),e(a6,q1e),e(q1e,vtr),e(a6,Ftr),e(a6,pW),e(pW,Ttr),e(a6,Mtr),e(co,Etr),e(co,n6),e(n6,Ctr),e(n6,j1e),e(j1e,wtr),e(n6,Atr),e(n6,D1e),e(D1e,Ltr),e(co,ytr),M(s6,co,null),b(f,jGe,_),b(f,Md,_),e(Md,l6),e(l6,G1e),M(l8,G1e,null),e(Md,xtr),e(Md,O1e),e(O1e,$tr),b(f,DGe,_),b(f,Vo,_),M(i8,Vo,null),e(Vo,ktr),e(Vo,Ed),e(Ed,Str),e(Ed,uW),e(uW,Rtr),e(Ed,Ptr),e(Ed,_W),e(_W,Btr),e(Ed,Itr),e(Vo,Ntr),e(Vo,d8),e(d8,qtr),e(d8,V1e),e(V1e,jtr),e(d8,Dtr),e(Vo,Gtr),e(Vo,Ft),M(c8,Ft,null),e(Ft,Otr),e(Ft,X1e),e(X1e,Vtr),e(Ft,Xtr),e(Ft,Cd),e(Cd,ztr),e(Cd,z1e),e(z1e,Wtr),e(Cd,Qtr),e(Cd,bW),e(bW,Htr),e(Cd,Utr),e(Ft,Jtr),M(i6,Ft,null),e(Vo,Ytr),e(Vo,fo),M(f8,fo,null),e(fo,Ktr),e(fo,W1e),e(W1e,Ztr),e(fo,ear),e(fo,Wa),e(Wa,oar),e(Wa,Q1e),e(Q1e,rar),e(Wa,tar),e(Wa,H1e),e(H1e,aar),e(Wa,nar),e(Wa,U1e),e(U1e,sar),e(Wa,lar),e(fo,iar),e(fo,Pe),e(Pe,d6),e(d6,J1e),e(J1e,dar),e(d6,car),e(d6,vW),e(vW,far),e(d6,mar),e(Pe,gar),e(Pe,c6),e(c6,Y1e),e(Y1e,har),e(c6,par),e(c6,FW),e(FW,uar),e(c6,_ar),e(Pe,bar),e(Pe,f6),e(f6,K1e),e(K1e,Far),e(f6,Tar),e(f6,TW),e(TW,Mar),e(f6,Ear),e(Pe,Car),e(Pe,m6),e(m6,Z1e),e(Z1e,war),e(m6,Aar),e(m6,MW),e(MW,Lar),e(m6,yar),e(Pe,xar),e(Pe,g6),e(g6,e7e),e(e7e,$ar),e(g6,kar),e(g6,EW),e(EW,Sar),e(g6,Rar),e(Pe,Par),e(Pe,h6),e(h6,o7e),e(o7e,Bar),e(h6,Iar),e(h6,CW),e(CW,Nar),e(h6,qar),e(Pe,jar),e(Pe,p6),e(p6,r7e),e(r7e,Dar),e(p6,Gar),e(p6,wW),e(wW,Oar),e(p6,Var),e(Pe,Xar),e(Pe,u6),e(u6,t7e),e(t7e,zar),e(u6,War),e(u6,AW),e(AW,Qar),e(u6,Har),e(Pe,Uar),e(Pe,_6),e(_6,a7e),e(a7e,Jar),e(_6,Yar),e(_6,LW),e(LW,Kar),e(_6,Zar),e(fo,enr),e(fo,b6),e(b6,onr),e(b6,n7e),e(n7e,rnr),e(b6,tnr),e(b6,s7e),e(s7e,anr),e(fo,nnr),M(v6,fo,null),b(f,GGe,_),b(f,wd,_),e(wd,F6),e(F6,l7e),M(m8,l7e,null),e(wd,snr),e(wd,i7e),e(i7e,lnr),b(f,OGe,_),b(f,Xo,_),M(g8,Xo,null),e(Xo,inr),e(Xo,Ad),e(Ad,dnr),e(Ad,yW),e(yW,cnr),e(Ad,fnr),e(Ad,xW),e(xW,mnr),e(Ad,gnr),e(Xo,hnr),e(Xo,h8),e(h8,pnr),e(h8,d7e),e(d7e,unr),e(h8,_nr),e(Xo,bnr),e(Xo,Tt),M(p8,Tt,null),e(Tt,vnr),e(Tt,c7e),e(c7e,Fnr),e(Tt,Tnr),e(Tt,Ld),e(Ld,Mnr),e(Ld,f7e),e(f7e,Enr),e(Ld,Cnr),e(Ld,$W),e($W,wnr),e(Ld,Anr),e(Tt,Lnr),M(T6,Tt,null),e(Xo,ynr),e(Xo,mo),M(u8,mo,null),e(mo,xnr),e(mo,m7e),e(m7e,$nr),e(mo,knr),e(mo,Qa),e(Qa,Snr),e(Qa,g7e),e(g7e,Rnr),e(Qa,Pnr),e(Qa,h7e),e(h7e,Bnr),e(Qa,Inr),e(Qa,p7e),e(p7e,Nnr),e(Qa,qnr),e(mo,jnr),e(mo,et),e(et,M6),e(M6,u7e),e(u7e,Dnr),e(M6,Gnr),e(M6,kW),e(kW,Onr),e(M6,Vnr),e(et,Xnr),e(et,E6),e(E6,_7e),e(_7e,znr),e(E6,Wnr),e(E6,SW),e(SW,Qnr),e(E6,Hnr),e(et,Unr),e(et,C6),e(C6,b7e),e(b7e,Jnr),e(C6,Ynr),e(C6,RW),e(RW,Knr),e(C6,Znr),e(et,esr),e(et,w6),e(w6,v7e),e(v7e,osr),e(w6,rsr),e(w6,PW),e(PW,tsr),e(w6,asr),e(et,nsr),e(et,A6),e(A6,F7e),e(F7e,ssr),e(A6,lsr),e(A6,BW),e(BW,isr),e(A6,dsr),e(mo,csr),e(mo,L6),e(L6,fsr),e(L6,T7e),e(T7e,msr),e(L6,gsr),e(L6,M7e),e(M7e,hsr),e(mo,psr),M(y6,mo,null),b(f,VGe,_),b(f,yd,_),e(yd,x6),e(x6,E7e),M(_8,E7e,null),e(yd,usr),e(yd,C7e),e(C7e,_sr),b(f,XGe,_),b(f,zo,_),M(b8,zo,null),e(zo,bsr),e(zo,xd),e(xd,vsr),e(xd,IW),e(IW,Fsr),e(xd,Tsr),e(xd,NW),e(NW,Msr),e(xd,Esr),e(zo,Csr),e(zo,v8),e(v8,wsr),e(v8,w7e),e(w7e,Asr),e(v8,Lsr),e(zo,ysr),e(zo,Mt),M(F8,Mt,null),e(Mt,xsr),e(Mt,A7e),e(A7e,$sr),e(Mt,ksr),e(Mt,$d),e($d,Ssr),e($d,L7e),e(L7e,Rsr),e($d,Psr),e($d,qW),e(qW,Bsr),e($d,Isr),e(Mt,Nsr),M($6,Mt,null),e(zo,qsr),e(zo,go),M(T8,go,null),e(go,jsr),e(go,y7e),e(y7e,Dsr),e(go,Gsr),e(go,Ha),e(Ha,Osr),e(Ha,x7e),e(x7e,Vsr),e(Ha,Xsr),e(Ha,$7e),e($7e,zsr),e(Ha,Wsr),e(Ha,k7e),e(k7e,Qsr),e(Ha,Hsr),e(go,Usr),e(go,Le),e(Le,k6),e(k6,S7e),e(S7e,Jsr),e(k6,Ysr),e(k6,jW),e(jW,Ksr),e(k6,Zsr),e(Le,elr),e(Le,S6),e(S6,R7e),e(R7e,olr),e(S6,rlr),e(S6,DW),e(DW,tlr),e(S6,alr),e(Le,nlr),e(Le,R6),e(R6,P7e),e(P7e,slr),e(R6,llr),e(R6,GW),e(GW,ilr),e(R6,dlr),e(Le,clr),e(Le,P6),e(P6,B7e),e(B7e,flr),e(P6,mlr),e(P6,OW),e(OW,glr),e(P6,hlr),e(Le,plr),e(Le,B6),e(B6,I7e),e(I7e,ulr),e(B6,_lr),e(B6,VW),e(VW,blr),e(B6,vlr),e(Le,Flr),e(Le,I6),e(I6,N7e),e(N7e,Tlr),e(I6,Mlr),e(I6,XW),e(XW,Elr),e(I6,Clr),e(Le,wlr),e(Le,N6),e(N6,q7e),e(q7e,Alr),e(N6,Llr),e(N6,zW),e(zW,ylr),e(N6,xlr),e(Le,$lr),e(Le,q6),e(q6,j7e),e(j7e,klr),e(q6,Slr),e(q6,WW),e(WW,Rlr),e(q6,Plr),e(Le,Blr),e(Le,j6),e(j6,D7e),e(D7e,Ilr),e(j6,Nlr),e(j6,QW),e(QW,qlr),e(j6,jlr),e(Le,Dlr),e(Le,D6),e(D6,G7e),e(G7e,Glr),e(D6,Olr),e(D6,HW),e(HW,Vlr),e(D6,Xlr),e(go,zlr),e(go,G6),e(G6,Wlr),e(G6,O7e),e(O7e,Qlr),e(G6,Hlr),e(G6,V7e),e(V7e,Ulr),e(go,Jlr),M(O6,go,null),b(f,zGe,_),b(f,kd,_),e(kd,V6),e(V6,X7e),M(M8,X7e,null),e(kd,Ylr),e(kd,z7e),e(z7e,Klr),b(f,WGe,_),b(f,Wo,_),M(E8,Wo,null),e(Wo,Zlr),e(Wo,Sd),e(Sd,eir),e(Sd,UW),e(UW,oir),e(Sd,rir),e(Sd,JW),e(JW,tir),e(Sd,air),e(Wo,nir),e(Wo,C8),e(C8,sir),e(C8,W7e),e(W7e,lir),e(C8,iir),e(Wo,dir),e(Wo,Et),M(w8,Et,null),e(Et,cir),e(Et,Q7e),e(Q7e,fir),e(Et,mir),e(Et,Rd),e(Rd,gir),e(Rd,H7e),e(H7e,hir),e(Rd,pir),e(Rd,YW),e(YW,uir),e(Rd,_ir),e(Et,bir),M(X6,Et,null),e(Wo,vir),e(Wo,ho),M(A8,ho,null),e(ho,Fir),e(ho,U7e),e(U7e,Tir),e(ho,Mir),e(ho,Ua),e(Ua,Eir),e(Ua,J7e),e(J7e,Cir),e(Ua,wir),e(Ua,Y7e),e(Y7e,Air),e(Ua,Lir),e(Ua,K7e),e(K7e,yir),e(Ua,xir),e(ho,$ir),e(ho,L8),e(L8,z6),e(z6,Z7e),e(Z7e,kir),e(z6,Sir),e(z6,KW),e(KW,Rir),e(z6,Pir),e(L8,Bir),e(L8,W6),e(W6,e2e),e(e2e,Iir),e(W6,Nir),e(W6,ZW),e(ZW,qir),e(W6,jir),e(ho,Dir),e(ho,Q6),e(Q6,Gir),e(Q6,o2e),e(o2e,Oir),e(Q6,Vir),e(Q6,r2e),e(r2e,Xir),e(ho,zir),M(H6,ho,null),b(f,QGe,_),b(f,Pd,_),e(Pd,U6),e(U6,t2e),M(y8,t2e,null),e(Pd,Wir),e(Pd,a2e),e(a2e,Qir),b(f,HGe,_),b(f,Qo,_),M(x8,Qo,null),e(Qo,Hir),e(Qo,Bd),e(Bd,Uir),e(Bd,eQ),e(eQ,Jir),e(Bd,Yir),e(Bd,oQ),e(oQ,Kir),e(Bd,Zir),e(Qo,edr),e(Qo,$8),e($8,odr),e($8,n2e),e(n2e,rdr),e($8,tdr),e(Qo,adr),e(Qo,Ct),M(k8,Ct,null),e(Ct,ndr),e(Ct,s2e),e(s2e,sdr),e(Ct,ldr),e(Ct,Id),e(Id,idr),e(Id,l2e),e(l2e,ddr),e(Id,cdr),e(Id,rQ),e(rQ,fdr),e(Id,mdr),e(Ct,gdr),M(J6,Ct,null),e(Qo,hdr),e(Qo,po),M(S8,po,null),e(po,pdr),e(po,i2e),e(i2e,udr),e(po,_dr),e(po,Ja),e(Ja,bdr),e(Ja,d2e),e(d2e,vdr),e(Ja,Fdr),e(Ja,c2e),e(c2e,Tdr),e(Ja,Mdr),e(Ja,f2e),e(f2e,Edr),e(Ja,Cdr),e(po,wdr),e(po,ot),e(ot,Y6),e(Y6,m2e),e(m2e,Adr),e(Y6,Ldr),e(Y6,tQ),e(tQ,ydr),e(Y6,xdr),e(ot,$dr),e(ot,K6),e(K6,g2e),e(g2e,kdr),e(K6,Sdr),e(K6,aQ),e(aQ,Rdr),e(K6,Pdr),e(ot,Bdr),e(ot,Z6),e(Z6,h2e),e(h2e,Idr),e(Z6,Ndr),e(Z6,nQ),e(nQ,qdr),e(Z6,jdr),e(ot,Ddr),e(ot,eT),e(eT,p2e),e(p2e,Gdr),e(eT,Odr),e(eT,sQ),e(sQ,Vdr),e(eT,Xdr),e(ot,zdr),e(ot,oT),e(oT,u2e),e(u2e,Wdr),e(oT,Qdr),e(oT,lQ),e(lQ,Hdr),e(oT,Udr),e(po,Jdr),e(po,rT),e(rT,Ydr),e(rT,_2e),e(_2e,Kdr),e(rT,Zdr),e(rT,b2e),e(b2e,ecr),e(po,ocr),M(tT,po,null),b(f,UGe,_),b(f,Nd,_),e(Nd,aT),e(aT,v2e),M(R8,v2e,null),e(Nd,rcr),e(Nd,F2e),e(F2e,tcr),b(f,JGe,_),b(f,Ho,_),M(P8,Ho,null),e(Ho,acr),e(Ho,qd),e(qd,ncr),e(qd,iQ),e(iQ,scr),e(qd,lcr),e(qd,dQ),e(dQ,icr),e(qd,dcr),e(Ho,ccr),e(Ho,B8),e(B8,fcr),e(B8,T2e),e(T2e,mcr),e(B8,gcr),e(Ho,hcr),e(Ho,wt),M(I8,wt,null),e(wt,pcr),e(wt,M2e),e(M2e,ucr),e(wt,_cr),e(wt,jd),e(jd,bcr),e(jd,E2e),e(E2e,vcr),e(jd,Fcr),e(jd,cQ),e(cQ,Tcr),e(jd,Mcr),e(wt,Ecr),M(nT,wt,null),e(Ho,Ccr),e(Ho,uo),M(N8,uo,null),e(uo,wcr),e(uo,C2e),e(C2e,Acr),e(uo,Lcr),e(uo,Ya),e(Ya,ycr),e(Ya,w2e),e(w2e,xcr),e(Ya,$cr),e(Ya,A2e),e(A2e,kcr),e(Ya,Scr),e(Ya,L2e),e(L2e,Rcr),e(Ya,Pcr),e(uo,Bcr),e(uo,Dd),e(Dd,sT),e(sT,y2e),e(y2e,Icr),e(sT,Ncr),e(sT,fQ),e(fQ,qcr),e(sT,jcr),e(Dd,Dcr),e(Dd,lT),e(lT,x2e),e(x2e,Gcr),e(lT,Ocr),e(lT,mQ),e(mQ,Vcr),e(lT,Xcr),e(Dd,zcr),e(Dd,iT),e(iT,$2e),e($2e,Wcr),e(iT,Qcr),e(iT,gQ),e(gQ,Hcr),e(iT,Ucr),e(uo,Jcr),e(uo,dT),e(dT,Ycr),e(dT,k2e),e(k2e,Kcr),e(dT,Zcr),e(dT,S2e),e(S2e,efr),e(uo,ofr),M(cT,uo,null),b(f,YGe,_),b(f,Gd,_),e(Gd,fT),e(fT,R2e),M(q8,R2e,null),e(Gd,rfr),e(Gd,P2e),e(P2e,tfr),b(f,KGe,_),b(f,Uo,_),M(j8,Uo,null),e(Uo,afr),e(Uo,Od),e(Od,nfr),e(Od,hQ),e(hQ,sfr),e(Od,lfr),e(Od,pQ),e(pQ,ifr),e(Od,dfr),e(Uo,cfr),e(Uo,D8),e(D8,ffr),e(D8,B2e),e(B2e,mfr),e(D8,gfr),e(Uo,hfr),e(Uo,At),M(G8,At,null),e(At,pfr),e(At,I2e),e(I2e,ufr),e(At,_fr),e(At,Vd),e(Vd,bfr),e(Vd,N2e),e(N2e,vfr),e(Vd,Ffr),e(Vd,uQ),e(uQ,Tfr),e(Vd,Mfr),e(At,Efr),M(mT,At,null),e(Uo,Cfr),e(Uo,_o),M(O8,_o,null),e(_o,wfr),e(_o,q2e),e(q2e,Afr),e(_o,Lfr),e(_o,Ka),e(Ka,yfr),e(Ka,j2e),e(j2e,xfr),e(Ka,$fr),e(Ka,D2e),e(D2e,kfr),e(Ka,Sfr),e(Ka,G2e),e(G2e,Rfr),e(Ka,Pfr),e(_o,Bfr),e(_o,V8),e(V8,gT),e(gT,O2e),e(O2e,Ifr),e(gT,Nfr),e(gT,_Q),e(_Q,qfr),e(gT,jfr),e(V8,Dfr),e(V8,hT),e(hT,V2e),e(V2e,Gfr),e(hT,Ofr),e(hT,bQ),e(bQ,Vfr),e(hT,Xfr),e(_o,zfr),e(_o,pT),e(pT,Wfr),e(pT,X2e),e(X2e,Qfr),e(pT,Hfr),e(pT,z2e),e(z2e,Ufr),e(_o,Jfr),M(uT,_o,null),b(f,ZGe,_),b(f,Xd,_),e(Xd,_T),e(_T,W2e),M(X8,W2e,null),e(Xd,Yfr),e(Xd,Q2e),e(Q2e,Kfr),b(f,eOe,_),b(f,Jo,_),M(z8,Jo,null),e(Jo,Zfr),e(Jo,zd),e(zd,emr),e(zd,vQ),e(vQ,omr),e(zd,rmr),e(zd,FQ),e(FQ,tmr),e(zd,amr),e(Jo,nmr),e(Jo,W8),e(W8,smr),e(W8,H2e),e(H2e,lmr),e(W8,imr),e(Jo,dmr),e(Jo,Lt),M(Q8,Lt,null),e(Lt,cmr),e(Lt,U2e),e(U2e,fmr),e(Lt,mmr),e(Lt,Wd),e(Wd,gmr),e(Wd,J2e),e(J2e,hmr),e(Wd,pmr),e(Wd,TQ),e(TQ,umr),e(Wd,_mr),e(Lt,bmr),M(bT,Lt,null),e(Jo,vmr),e(Jo,bo),M(H8,bo,null),e(bo,Fmr),e(bo,Y2e),e(Y2e,Tmr),e(bo,Mmr),e(bo,Za),e(Za,Emr),e(Za,K2e),e(K2e,Cmr),e(Za,wmr),e(Za,Z2e),e(Z2e,Amr),e(Za,Lmr),e(Za,ebe),e(ebe,ymr),e(Za,xmr),e(bo,$mr),e(bo,obe),e(obe,vT),e(vT,rbe),e(rbe,kmr),e(vT,Smr),e(vT,MQ),e(MQ,Rmr),e(vT,Pmr),e(bo,Bmr),e(bo,FT),e(FT,Imr),e(FT,tbe),e(tbe,Nmr),e(FT,qmr),e(FT,abe),e(abe,jmr),e(bo,Dmr),M(TT,bo,null),b(f,oOe,_),b(f,Qd,_),e(Qd,MT),e(MT,nbe),M(U8,nbe,null),e(Qd,Gmr),e(Qd,sbe),e(sbe,Omr),b(f,rOe,_),b(f,Yo,_),M(J8,Yo,null),e(Yo,Vmr),e(Yo,Hd),e(Hd,Xmr),e(Hd,EQ),e(EQ,zmr),e(Hd,Wmr),e(Hd,CQ),e(CQ,Qmr),e(Hd,Hmr),e(Yo,Umr),e(Yo,Y8),e(Y8,Jmr),e(Y8,lbe),e(lbe,Ymr),e(Y8,Kmr),e(Yo,Zmr),e(Yo,yt),M(K8,yt,null),e(yt,egr),e(yt,ibe),e(ibe,ogr),e(yt,rgr),e(yt,Ud),e(Ud,tgr),e(Ud,dbe),e(dbe,agr),e(Ud,ngr),e(Ud,wQ),e(wQ,sgr),e(Ud,lgr),e(yt,igr),M(ET,yt,null),e(Yo,dgr),e(Yo,vo),M(Z8,vo,null),e(vo,cgr),e(vo,cbe),e(cbe,fgr),e(vo,mgr),e(vo,en),e(en,ggr),e(en,fbe),e(fbe,hgr),e(en,pgr),e(en,mbe),e(mbe,ugr),e(en,_gr),e(en,gbe),e(gbe,bgr),e(en,vgr),e(vo,Fgr),e(vo,on),e(on,CT),e(CT,hbe),e(hbe,Tgr),e(CT,Mgr),e(CT,AQ),e(AQ,Egr),e(CT,Cgr),e(on,wgr),e(on,wT),e(wT,pbe),e(pbe,Agr),e(wT,Lgr),e(wT,LQ),e(LQ,ygr),e(wT,xgr),e(on,$gr),e(on,AT),e(AT,ube),e(ube,kgr),e(AT,Sgr),e(AT,yQ),e(yQ,Rgr),e(AT,Pgr),e(on,Bgr),e(on,LT),e(LT,_be),e(_be,Igr),e(LT,Ngr),e(LT,xQ),e(xQ,qgr),e(LT,jgr),e(vo,Dgr),e(vo,yT),e(yT,Ggr),e(yT,bbe),e(bbe,Ogr),e(yT,Vgr),e(yT,vbe),e(vbe,Xgr),e(vo,zgr),M(xT,vo,null),b(f,tOe,_),b(f,Jd,_),e(Jd,$T),e($T,Fbe),M(e9,Fbe,null),e(Jd,Wgr),e(Jd,Tbe),e(Tbe,Qgr),b(f,aOe,_),b(f,Ko,_),M(o9,Ko,null),e(Ko,Hgr),e(Ko,Yd),e(Yd,Ugr),e(Yd,$Q),e($Q,Jgr),e(Yd,Ygr),e(Yd,kQ),e(kQ,Kgr),e(Yd,Zgr),e(Ko,ehr),e(Ko,r9),e(r9,ohr),e(r9,Mbe),e(Mbe,rhr),e(r9,thr),e(Ko,ahr),e(Ko,xt),M(t9,xt,null),e(xt,nhr),e(xt,Ebe),e(Ebe,shr),e(xt,lhr),e(xt,Kd),e(Kd,ihr),e(Kd,Cbe),e(Cbe,dhr),e(Kd,chr),e(Kd,SQ),e(SQ,fhr),e(Kd,mhr),e(xt,ghr),M(kT,xt,null),e(Ko,hhr),e(Ko,Fo),M(a9,Fo,null),e(Fo,phr),e(Fo,wbe),e(wbe,uhr),e(Fo,_hr),e(Fo,rn),e(rn,bhr),e(rn,Abe),e(Abe,vhr),e(rn,Fhr),e(rn,Lbe),e(Lbe,Thr),e(rn,Mhr),e(rn,ybe),e(ybe,Ehr),e(rn,Chr),e(Fo,whr),e(Fo,xbe),e(xbe,ST),e(ST,$be),e($be,Ahr),e(ST,Lhr),e(ST,RQ),e(RQ,yhr),e(ST,xhr),e(Fo,$hr),e(Fo,RT),e(RT,khr),e(RT,kbe),e(kbe,Shr),e(RT,Rhr),e(RT,Sbe),e(Sbe,Phr),e(Fo,Bhr),M(PT,Fo,null),b(f,nOe,_),b(f,Zd,_),e(Zd,BT),e(BT,Rbe),M(n9,Rbe,null),e(Zd,Ihr),e(Zd,Pbe),e(Pbe,Nhr),b(f,sOe,_),b(f,Zo,_),M(s9,Zo,null),e(Zo,qhr),e(Zo,ec),e(ec,jhr),e(ec,PQ),e(PQ,Dhr),e(ec,Ghr),e(ec,BQ),e(BQ,Ohr),e(ec,Vhr),e(Zo,Xhr),e(Zo,l9),e(l9,zhr),e(l9,Bbe),e(Bbe,Whr),e(l9,Qhr),e(Zo,Hhr),e(Zo,$t),M(i9,$t,null),e($t,Uhr),e($t,Ibe),e(Ibe,Jhr),e($t,Yhr),e($t,oc),e(oc,Khr),e(oc,Nbe),e(Nbe,Zhr),e(oc,epr),e(oc,IQ),e(IQ,opr),e(oc,rpr),e($t,tpr),M(IT,$t,null),e(Zo,apr),e(Zo,Lr),M(d9,Lr,null),e(Lr,npr),e(Lr,qbe),e(qbe,spr),e(Lr,lpr),e(Lr,tn),e(tn,ipr),e(tn,jbe),e(jbe,dpr),e(tn,cpr),e(tn,Dbe),e(Dbe,fpr),e(tn,mpr),e(tn,Gbe),e(Gbe,gpr),e(tn,hpr),e(Lr,ppr),e(Lr,q),e(q,NT),e(NT,Obe),e(Obe,upr),e(NT,_pr),e(NT,NQ),e(NQ,bpr),e(NT,vpr),e(q,Fpr),e(q,qT),e(qT,Vbe),e(Vbe,Tpr),e(qT,Mpr),e(qT,qQ),e(qQ,Epr),e(qT,Cpr),e(q,wpr),e(q,jT),e(jT,Xbe),e(Xbe,Apr),e(jT,Lpr),e(jT,jQ),e(jQ,ypr),e(jT,xpr),e(q,$pr),e(q,DT),e(DT,zbe),e(zbe,kpr),e(DT,Spr),e(DT,DQ),e(DQ,Rpr),e(DT,Ppr),e(q,Bpr),e(q,GT),e(GT,Wbe),e(Wbe,Ipr),e(GT,Npr),e(GT,GQ),e(GQ,qpr),e(GT,jpr),e(q,Dpr),e(q,OT),e(OT,Qbe),e(Qbe,Gpr),e(OT,Opr),e(OT,OQ),e(OQ,Vpr),e(OT,Xpr),e(q,zpr),e(q,VT),e(VT,Hbe),e(Hbe,Wpr),e(VT,Qpr),e(VT,VQ),e(VQ,Hpr),e(VT,Upr),e(q,Jpr),e(q,XT),e(XT,Ube),e(Ube,Ypr),e(XT,Kpr),e(XT,XQ),e(XQ,Zpr),e(XT,eur),e(q,our),e(q,zT),e(zT,Jbe),e(Jbe,rur),e(zT,tur),e(zT,zQ),e(zQ,aur),e(zT,nur),e(q,sur),e(q,WT),e(WT,Ybe),e(Ybe,lur),e(WT,iur),e(WT,WQ),e(WQ,dur),e(WT,cur),e(q,fur),e(q,QT),e(QT,Kbe),e(Kbe,mur),e(QT,gur),e(QT,QQ),e(QQ,hur),e(QT,pur),e(q,uur),e(q,HT),e(HT,Zbe),e(Zbe,_ur),e(HT,bur),e(HT,HQ),e(HQ,vur),e(HT,Fur),e(q,Tur),e(q,UT),e(UT,eve),e(eve,Mur),e(UT,Eur),e(UT,UQ),e(UQ,Cur),e(UT,wur),e(q,Aur),e(q,JT),e(JT,ove),e(ove,Lur),e(JT,yur),e(JT,JQ),e(JQ,xur),e(JT,$ur),e(q,kur),e(q,YT),e(YT,rve),e(rve,Sur),e(YT,Rur),e(YT,YQ),e(YQ,Pur),e(YT,Bur),e(q,Iur),e(q,KT),e(KT,tve),e(tve,Nur),e(KT,qur),e(KT,KQ),e(KQ,jur),e(KT,Dur),e(q,Gur),e(q,ZT),e(ZT,ave),e(ave,Our),e(ZT,Vur),e(ZT,ZQ),e(ZQ,Xur),e(ZT,zur),e(q,Wur),e(q,Xs),e(Xs,nve),e(nve,Qur),e(Xs,Hur),e(Xs,eH),e(eH,Uur),e(Xs,Jur),e(Xs,oH),e(oH,Yur),e(Xs,Kur),e(q,Zur),e(q,eM),e(eM,sve),e(sve,e_r),e(eM,o_r),e(eM,rH),e(rH,r_r),e(eM,t_r),e(q,a_r),e(q,oM),e(oM,lve),e(lve,n_r),e(oM,s_r),e(oM,tH),e(tH,l_r),e(oM,i_r),e(q,d_r),e(q,rM),e(rM,ive),e(ive,c_r),e(rM,f_r),e(rM,aH),e(aH,m_r),e(rM,g_r),e(q,h_r),e(q,tM),e(tM,dve),e(dve,p_r),e(tM,u_r),e(tM,nH),e(nH,__r),e(tM,b_r),e(q,v_r),e(q,aM),e(aM,cve),e(cve,F_r),e(aM,T_r),e(aM,sH),e(sH,M_r),e(aM,E_r),e(q,C_r),e(q,nM),e(nM,fve),e(fve,w_r),e(nM,A_r),e(nM,lH),e(lH,L_r),e(nM,y_r),e(q,x_r),e(q,sM),e(sM,mve),e(mve,$_r),e(sM,k_r),e(sM,iH),e(iH,S_r),e(sM,R_r),e(q,P_r),e(q,lM),e(lM,gve),e(gve,B_r),e(lM,I_r),e(lM,dH),e(dH,N_r),e(lM,q_r),e(q,j_r),e(q,iM),e(iM,hve),e(hve,D_r),e(iM,G_r),e(iM,cH),e(cH,O_r),e(iM,V_r),e(q,X_r),e(q,dM),e(dM,pve),e(pve,z_r),e(dM,W_r),e(dM,fH),e(fH,Q_r),e(dM,H_r),e(q,U_r),e(q,cM),e(cM,uve),e(uve,J_r),e(cM,Y_r),e(cM,mH),e(mH,K_r),e(cM,Z_r),e(q,e1r),e(q,fM),e(fM,_ve),e(_ve,o1r),e(fM,r1r),e(fM,gH),e(gH,t1r),e(fM,a1r),e(q,n1r),e(q,mM),e(mM,bve),e(bve,s1r),e(mM,l1r),e(mM,hH),e(hH,i1r),e(mM,d1r),e(q,c1r),e(q,gM),e(gM,vve),e(vve,f1r),e(gM,m1r),e(gM,pH),e(pH,g1r),e(gM,h1r),e(q,p1r),e(q,hM),e(hM,Fve),e(Fve,u1r),e(hM,_1r),e(hM,uH),e(uH,b1r),e(hM,v1r),e(q,F1r),e(q,pM),e(pM,Tve),e(Tve,T1r),e(pM,M1r),e(pM,_H),e(_H,E1r),e(pM,C1r),e(q,w1r),e(q,uM),e(uM,Mve),e(Mve,A1r),e(uM,L1r),e(uM,bH),e(bH,y1r),e(uM,x1r),e(q,$1r),e(q,_M),e(_M,Eve),e(Eve,k1r),e(_M,S1r),e(_M,vH),e(vH,R1r),e(_M,P1r),e(q,B1r),e(q,bM),e(bM,Cve),e(Cve,I1r),e(bM,N1r),e(bM,FH),e(FH,q1r),e(bM,j1r),e(q,D1r),e(q,vM),e(vM,wve),e(wve,G1r),e(vM,O1r),e(vM,TH),e(TH,V1r),e(vM,X1r),e(q,z1r),e(q,FM),e(FM,Ave),e(Ave,W1r),e(FM,Q1r),e(FM,MH),e(MH,H1r),e(FM,U1r),e(q,J1r),e(q,TM),e(TM,Lve),e(Lve,Y1r),e(TM,K1r),e(TM,EH),e(EH,Z1r),e(TM,e7r),e(q,o7r),e(q,MM),e(MM,yve),e(yve,r7r),e(MM,t7r),e(MM,CH),e(CH,a7r),e(MM,n7r),e(q,s7r),e(q,EM),e(EM,xve),e(xve,l7r),e(EM,i7r),e(EM,wH),e(wH,d7r),e(EM,c7r),e(q,f7r),e(q,CM),e(CM,$ve),e($ve,m7r),e(CM,g7r),e(CM,AH),e(AH,h7r),e(CM,p7r),e(q,u7r),e(q,wM),e(wM,kve),e(kve,_7r),e(wM,b7r),e(wM,LH),e(LH,v7r),e(wM,F7r),e(q,T7r),e(q,AM),e(AM,Sve),e(Sve,M7r),e(AM,E7r),e(AM,yH),e(yH,C7r),e(AM,w7r),e(q,A7r),e(q,LM),e(LM,Rve),e(Rve,L7r),e(LM,y7r),e(LM,xH),e(xH,x7r),e(LM,$7r),e(q,k7r),e(q,yM),e(yM,Pve),e(Pve,S7r),e(yM,R7r),e(yM,$H),e($H,P7r),e(yM,B7r),e(Lr,I7r),M(xM,Lr,null),b(f,lOe,_),b(f,rc,_),e(rc,$M),e($M,Bve),M(c9,Bve,null),e(rc,N7r),e(rc,Ive),e(Ive,q7r),b(f,iOe,_),b(f,er,_),M(f9,er,null),e(er,j7r),e(er,tc),e(tc,D7r),e(tc,kH),e(kH,G7r),e(tc,O7r),e(tc,SH),e(SH,V7r),e(tc,X7r),e(er,z7r),e(er,m9),e(m9,W7r),e(m9,Nve),e(Nve,Q7r),e(m9,H7r),e(er,U7r),e(er,kt),M(g9,kt,null),e(kt,J7r),e(kt,qve),e(qve,Y7r),e(kt,K7r),e(kt,ac),e(ac,Z7r),e(ac,jve),e(jve,e2r),e(ac,o2r),e(ac,RH),e(RH,r2r),e(ac,t2r),e(kt,a2r),M(kM,kt,null),e(er,n2r),e(er,yr),M(h9,yr,null),e(yr,s2r),e(yr,Dve),e(Dve,l2r),e(yr,i2r),e(yr,an),e(an,d2r),e(an,Gve),e(Gve,c2r),e(an,f2r),e(an,Ove),e(Ove,m2r),e(an,g2r),e(an,Vve),e(Vve,h2r),e(an,p2r),e(yr,u2r),e(yr,se),e(se,SM),e(SM,Xve),e(Xve,_2r),e(SM,b2r),e(SM,PH),e(PH,v2r),e(SM,F2r),e(se,T2r),e(se,RM),e(RM,zve),e(zve,M2r),e(RM,E2r),e(RM,BH),e(BH,C2r),e(RM,w2r),e(se,A2r),e(se,PM),e(PM,Wve),e(Wve,L2r),e(PM,y2r),e(PM,IH),e(IH,x2r),e(PM,$2r),e(se,k2r),e(se,BM),e(BM,Qve),e(Qve,S2r),e(BM,R2r),e(BM,NH),e(NH,P2r),e(BM,B2r),e(se,I2r),e(se,IM),e(IM,Hve),e(Hve,N2r),e(IM,q2r),e(IM,qH),e(qH,j2r),e(IM,D2r),e(se,G2r),e(se,NM),e(NM,Uve),e(Uve,O2r),e(NM,V2r),e(NM,jH),e(jH,X2r),e(NM,z2r),e(se,W2r),e(se,qM),e(qM,Jve),e(Jve,Q2r),e(qM,H2r),e(qM,DH),e(DH,U2r),e(qM,J2r),e(se,Y2r),e(se,jM),e(jM,Yve),e(Yve,K2r),e(jM,Z2r),e(jM,GH),e(GH,ebr),e(jM,obr),e(se,rbr),e(se,DM),e(DM,Kve),e(Kve,tbr),e(DM,abr),e(DM,OH),e(OH,nbr),e(DM,sbr),e(se,lbr),e(se,GM),e(GM,Zve),e(Zve,ibr),e(GM,dbr),e(GM,VH),e(VH,cbr),e(GM,fbr),e(se,mbr),e(se,OM),e(OM,eFe),e(eFe,gbr),e(OM,hbr),e(OM,XH),e(XH,pbr),e(OM,ubr),e(se,_br),e(se,VM),e(VM,oFe),e(oFe,bbr),e(VM,vbr),e(VM,zH),e(zH,Fbr),e(VM,Tbr),e(se,Mbr),e(se,XM),e(XM,rFe),e(rFe,Ebr),e(XM,Cbr),e(XM,WH),e(WH,wbr),e(XM,Abr),e(se,Lbr),e(se,zM),e(zM,tFe),e(tFe,ybr),e(zM,xbr),e(zM,QH),e(QH,$br),e(zM,kbr),e(se,Sbr),e(se,WM),e(WM,aFe),e(aFe,Rbr),e(WM,Pbr),e(WM,HH),e(HH,Bbr),e(WM,Ibr),e(se,Nbr),e(se,QM),e(QM,nFe),e(nFe,qbr),e(QM,jbr),e(QM,UH),e(UH,Dbr),e(QM,Gbr),e(se,Obr),e(se,HM),e(HM,sFe),e(sFe,Vbr),e(HM,Xbr),e(HM,JH),e(JH,zbr),e(HM,Wbr),e(se,Qbr),e(se,UM),e(UM,lFe),e(lFe,Hbr),e(UM,Ubr),e(UM,YH),e(YH,Jbr),e(UM,Ybr),e(se,Kbr),e(se,JM),e(JM,iFe),e(iFe,Zbr),e(JM,evr),e(JM,KH),e(KH,ovr),e(JM,rvr),e(se,tvr),e(se,YM),e(YM,dFe),e(dFe,avr),e(YM,nvr),e(YM,ZH),e(ZH,svr),e(YM,lvr),e(se,ivr),e(se,KM),e(KM,cFe),e(cFe,dvr),e(KM,cvr),e(KM,eU),e(eU,fvr),e(KM,mvr),e(se,gvr),e(se,ZM),e(ZM,fFe),e(fFe,hvr),e(ZM,pvr),e(ZM,oU),e(oU,uvr),e(ZM,_vr),e(se,bvr),e(se,e4),e(e4,mFe),e(mFe,vvr),e(e4,Fvr),e(e4,rU),e(rU,Tvr),e(e4,Mvr),e(yr,Evr),M(o4,yr,null),b(f,dOe,_),b(f,nc,_),e(nc,r4),e(r4,gFe),M(p9,gFe,null),e(nc,Cvr),e(nc,hFe),e(hFe,wvr),b(f,cOe,_),b(f,or,_),M(u9,or,null),e(or,Avr),e(or,sc),e(sc,Lvr),e(sc,tU),e(tU,yvr),e(sc,xvr),e(sc,aU),e(aU,$vr),e(sc,kvr),e(or,Svr),e(or,_9),e(_9,Rvr),e(_9,pFe),e(pFe,Pvr),e(_9,Bvr),e(or,Ivr),e(or,St),M(b9,St,null),e(St,Nvr),e(St,uFe),e(uFe,qvr),e(St,jvr),e(St,lc),e(lc,Dvr),e(lc,_Fe),e(_Fe,Gvr),e(lc,Ovr),e(lc,nU),e(nU,Vvr),e(lc,Xvr),e(St,zvr),M(t4,St,null),e(or,Wvr),e(or,xr),M(v9,xr,null),e(xr,Qvr),e(xr,bFe),e(bFe,Hvr),e(xr,Uvr),e(xr,nn),e(nn,Jvr),e(nn,vFe),e(vFe,Yvr),e(nn,Kvr),e(nn,FFe),e(FFe,Zvr),e(nn,eFr),e(nn,TFe),e(TFe,oFr),e(nn,rFr),e(xr,tFr),e(xr,Me),e(Me,a4),e(a4,MFe),e(MFe,aFr),e(a4,nFr),e(a4,sU),e(sU,sFr),e(a4,lFr),e(Me,iFr),e(Me,n4),e(n4,EFe),e(EFe,dFr),e(n4,cFr),e(n4,lU),e(lU,fFr),e(n4,mFr),e(Me,gFr),e(Me,s4),e(s4,CFe),e(CFe,hFr),e(s4,pFr),e(s4,iU),e(iU,uFr),e(s4,_Fr),e(Me,bFr),e(Me,l4),e(l4,wFe),e(wFe,vFr),e(l4,FFr),e(l4,dU),e(dU,TFr),e(l4,MFr),e(Me,EFr),e(Me,i4),e(i4,AFe),e(AFe,CFr),e(i4,wFr),e(i4,cU),e(cU,AFr),e(i4,LFr),e(Me,yFr),e(Me,d4),e(d4,LFe),e(LFe,xFr),e(d4,$Fr),e(d4,fU),e(fU,kFr),e(d4,SFr),e(Me,RFr),e(Me,c4),e(c4,yFe),e(yFe,PFr),e(c4,BFr),e(c4,mU),e(mU,IFr),e(c4,NFr),e(Me,qFr),e(Me,f4),e(f4,xFe),e(xFe,jFr),e(f4,DFr),e(f4,gU),e(gU,GFr),e(f4,OFr),e(Me,VFr),e(Me,m4),e(m4,$Fe),e($Fe,XFr),e(m4,zFr),e(m4,hU),e(hU,WFr),e(m4,QFr),e(Me,HFr),e(Me,g4),e(g4,kFe),e(kFe,UFr),e(g4,JFr),e(g4,pU),e(pU,YFr),e(g4,KFr),e(Me,ZFr),e(Me,h4),e(h4,SFe),e(SFe,e6r),e(h4,o6r),e(h4,uU),e(uU,r6r),e(h4,t6r),e(Me,a6r),e(Me,p4),e(p4,RFe),e(RFe,n6r),e(p4,s6r),e(p4,_U),e(_U,l6r),e(p4,i6r),e(Me,d6r),e(Me,u4),e(u4,PFe),e(PFe,c6r),e(u4,f6r),e(u4,bU),e(bU,m6r),e(u4,g6r),e(xr,h6r),M(_4,xr,null),b(f,fOe,_),b(f,ic,_),e(ic,b4),e(b4,BFe),M(F9,BFe,null),e(ic,p6r),e(ic,IFe),e(IFe,u6r),b(f,mOe,_),b(f,rr,_),M(T9,rr,null),e(rr,_6r),e(rr,dc),e(dc,b6r),e(dc,vU),e(vU,v6r),e(dc,F6r),e(dc,FU),e(FU,T6r),e(dc,M6r),e(rr,E6r),e(rr,M9),e(M9,C6r),e(M9,NFe),e(NFe,w6r),e(M9,A6r),e(rr,L6r),e(rr,Rt),M(E9,Rt,null),e(Rt,y6r),e(Rt,qFe),e(qFe,x6r),e(Rt,$6r),e(Rt,cc),e(cc,k6r),e(cc,jFe),e(jFe,S6r),e(cc,R6r),e(cc,TU),e(TU,P6r),e(cc,B6r),e(Rt,I6r),M(v4,Rt,null),e(rr,N6r),e(rr,$r),M(C9,$r,null),e($r,q6r),e($r,DFe),e(DFe,j6r),e($r,D6r),e($r,sn),e(sn,G6r),e(sn,GFe),e(GFe,O6r),e(sn,V6r),e(sn,OFe),e(OFe,X6r),e(sn,z6r),e(sn,VFe),e(VFe,W6r),e(sn,Q6r),e($r,H6r),e($r,ln),e(ln,F4),e(F4,XFe),e(XFe,U6r),e(F4,J6r),e(F4,MU),e(MU,Y6r),e(F4,K6r),e(ln,Z6r),e(ln,T4),e(T4,zFe),e(zFe,eTr),e(T4,oTr),e(T4,EU),e(EU,rTr),e(T4,tTr),e(ln,aTr),e(ln,M4),e(M4,WFe),e(WFe,nTr),e(M4,sTr),e(M4,CU),e(CU,lTr),e(M4,iTr),e(ln,dTr),e(ln,E4),e(E4,QFe),e(QFe,cTr),e(E4,fTr),e(E4,wU),e(wU,mTr),e(E4,gTr),e($r,hTr),M(C4,$r,null),b(f,gOe,_),b(f,fc,_),e(fc,w4),e(w4,HFe),M(w9,HFe,null),e(fc,pTr),e(fc,UFe),e(UFe,uTr),b(f,hOe,_),b(f,tr,_),M(A9,tr,null),e(tr,_Tr),e(tr,mc),e(mc,bTr),e(mc,AU),e(AU,vTr),e(mc,FTr),e(mc,LU),e(LU,TTr),e(mc,MTr),e(tr,ETr),e(tr,L9),e(L9,CTr),e(L9,JFe),e(JFe,wTr),e(L9,ATr),e(tr,LTr),e(tr,Pt),M(y9,Pt,null),e(Pt,yTr),e(Pt,YFe),e(YFe,xTr),e(Pt,$Tr),e(Pt,gc),e(gc,kTr),e(gc,KFe),e(KFe,STr),e(gc,RTr),e(gc,yU),e(yU,PTr),e(gc,BTr),e(Pt,ITr),M(A4,Pt,null),e(tr,NTr),e(tr,kr),M(x9,kr,null),e(kr,qTr),e(kr,ZFe),e(ZFe,jTr),e(kr,DTr),e(kr,dn),e(dn,GTr),e(dn,e6e),e(e6e,OTr),e(dn,VTr),e(dn,o6e),e(o6e,XTr),e(dn,zTr),e(dn,r6e),e(r6e,WTr),e(dn,QTr),e(kr,HTr),e(kr,ie),e(ie,L4),e(L4,t6e),e(t6e,UTr),e(L4,JTr),e(L4,xU),e(xU,YTr),e(L4,KTr),e(ie,ZTr),e(ie,y4),e(y4,a6e),e(a6e,eMr),e(y4,oMr),e(y4,$U),e($U,rMr),e(y4,tMr),e(ie,aMr),e(ie,x4),e(x4,n6e),e(n6e,nMr),e(x4,sMr),e(x4,kU),e(kU,lMr),e(x4,iMr),e(ie,dMr),e(ie,$4),e($4,s6e),e(s6e,cMr),e($4,fMr),e($4,SU),e(SU,mMr),e($4,gMr),e(ie,hMr),e(ie,k4),e(k4,l6e),e(l6e,pMr),e(k4,uMr),e(k4,RU),e(RU,_Mr),e(k4,bMr),e(ie,vMr),e(ie,S4),e(S4,i6e),e(i6e,FMr),e(S4,TMr),e(S4,PU),e(PU,MMr),e(S4,EMr),e(ie,CMr),e(ie,R4),e(R4,d6e),e(d6e,wMr),e(R4,AMr),e(R4,BU),e(BU,LMr),e(R4,yMr),e(ie,xMr),e(ie,P4),e(P4,c6e),e(c6e,$Mr),e(P4,kMr),e(P4,IU),e(IU,SMr),e(P4,RMr),e(ie,PMr),e(ie,B4),e(B4,f6e),e(f6e,BMr),e(B4,IMr),e(B4,NU),e(NU,NMr),e(B4,qMr),e(ie,jMr),e(ie,I4),e(I4,m6e),e(m6e,DMr),e(I4,GMr),e(I4,qU),e(qU,OMr),e(I4,VMr),e(ie,XMr),e(ie,N4),e(N4,g6e),e(g6e,zMr),e(N4,WMr),e(N4,jU),e(jU,QMr),e(N4,HMr),e(ie,UMr),e(ie,q4),e(q4,h6e),e(h6e,JMr),e(q4,YMr),e(q4,DU),e(DU,KMr),e(q4,ZMr),e(ie,e4r),e(ie,j4),e(j4,p6e),e(p6e,o4r),e(j4,r4r),e(j4,GU),e(GU,t4r),e(j4,a4r),e(ie,n4r),e(ie,D4),e(D4,u6e),e(u6e,s4r),e(D4,l4r),e(D4,OU),e(OU,i4r),e(D4,d4r),e(ie,c4r),e(ie,G4),e(G4,_6e),e(_6e,f4r),e(G4,m4r),e(G4,VU),e(VU,g4r),e(G4,h4r),e(ie,p4r),e(ie,O4),e(O4,b6e),e(b6e,u4r),e(O4,_4r),e(O4,XU),e(XU,b4r),e(O4,v4r),e(ie,F4r),e(ie,V4),e(V4,v6e),e(v6e,T4r),e(V4,M4r),e(V4,zU),e(zU,E4r),e(V4,C4r),e(ie,w4r),e(ie,X4),e(X4,F6e),e(F6e,A4r),e(X4,L4r),e(X4,WU),e(WU,y4r),e(X4,x4r),e(ie,$4r),e(ie,z4),e(z4,T6e),e(T6e,k4r),e(z4,S4r),e(z4,QU),e(QU,R4r),e(z4,P4r),e(ie,B4r),e(ie,W4),e(W4,M6e),e(M6e,I4r),e(W4,N4r),e(W4,HU),e(HU,q4r),e(W4,j4r),e(kr,D4r),M(Q4,kr,null),b(f,pOe,_),b(f,hc,_),e(hc,H4),e(H4,E6e),M($9,E6e,null),e(hc,G4r),e(hc,C6e),e(C6e,O4r),b(f,uOe,_),b(f,ar,_),M(k9,ar,null),e(ar,V4r),e(ar,pc),e(pc,X4r),e(pc,UU),e(UU,z4r),e(pc,W4r),e(pc,JU),e(JU,Q4r),e(pc,H4r),e(ar,U4r),e(ar,S9),e(S9,J4r),e(S9,w6e),e(w6e,Y4r),e(S9,K4r),e(ar,Z4r),e(ar,Bt),M(R9,Bt,null),e(Bt,eEr),e(Bt,A6e),e(A6e,oEr),e(Bt,rEr),e(Bt,uc),e(uc,tEr),e(uc,L6e),e(L6e,aEr),e(uc,nEr),e(uc,YU),e(YU,sEr),e(uc,lEr),e(Bt,iEr),M(U4,Bt,null),e(ar,dEr),e(ar,Sr),M(P9,Sr,null),e(Sr,cEr),e(Sr,y6e),e(y6e,fEr),e(Sr,mEr),e(Sr,cn),e(cn,gEr),e(cn,x6e),e(x6e,hEr),e(cn,pEr),e(cn,$6e),e($6e,uEr),e(cn,_Er),e(cn,k6e),e(k6e,bEr),e(cn,vEr),e(Sr,FEr),e(Sr,ye),e(ye,J4),e(J4,S6e),e(S6e,TEr),e(J4,MEr),e(J4,KU),e(KU,EEr),e(J4,CEr),e(ye,wEr),e(ye,Y4),e(Y4,R6e),e(R6e,AEr),e(Y4,LEr),e(Y4,ZU),e(ZU,yEr),e(Y4,xEr),e(ye,$Er),e(ye,K4),e(K4,P6e),e(P6e,kEr),e(K4,SEr),e(K4,eJ),e(eJ,REr),e(K4,PEr),e(ye,BEr),e(ye,Z4),e(Z4,B6e),e(B6e,IEr),e(Z4,NEr),e(Z4,oJ),e(oJ,qEr),e(Z4,jEr),e(ye,DEr),e(ye,eE),e(eE,I6e),e(I6e,GEr),e(eE,OEr),e(eE,rJ),e(rJ,VEr),e(eE,XEr),e(ye,zEr),e(ye,oE),e(oE,N6e),e(N6e,WEr),e(oE,QEr),e(oE,tJ),e(tJ,HEr),e(oE,UEr),e(ye,JEr),e(ye,rE),e(rE,q6e),e(q6e,YEr),e(rE,KEr),e(rE,aJ),e(aJ,ZEr),e(rE,eCr),e(ye,oCr),e(ye,tE),e(tE,j6e),e(j6e,rCr),e(tE,tCr),e(tE,nJ),e(nJ,aCr),e(tE,nCr),e(ye,sCr),e(ye,aE),e(aE,D6e),e(D6e,lCr),e(aE,iCr),e(aE,sJ),e(sJ,dCr),e(aE,cCr),e(ye,fCr),e(ye,nE),e(nE,G6e),e(G6e,mCr),e(nE,gCr),e(nE,lJ),e(lJ,hCr),e(nE,pCr),e(Sr,uCr),M(sE,Sr,null),b(f,_Oe,_),b(f,_c,_),e(_c,lE),e(lE,O6e),M(B9,O6e,null),e(_c,_Cr),e(_c,V6e),e(V6e,bCr),b(f,bOe,_),b(f,nr,_),M(I9,nr,null),e(nr,vCr),e(nr,bc),e(bc,FCr),e(bc,iJ),e(iJ,TCr),e(bc,MCr),e(bc,dJ),e(dJ,ECr),e(bc,CCr),e(nr,wCr),e(nr,N9),e(N9,ACr),e(N9,X6e),e(X6e,LCr),e(N9,yCr),e(nr,xCr),e(nr,It),M(q9,It,null),e(It,$Cr),e(It,z6e),e(z6e,kCr),e(It,SCr),e(It,vc),e(vc,RCr),e(vc,W6e),e(W6e,PCr),e(vc,BCr),e(vc,cJ),e(cJ,ICr),e(vc,NCr),e(It,qCr),M(iE,It,null),e(nr,jCr),e(nr,Rr),M(j9,Rr,null),e(Rr,DCr),e(Rr,Q6e),e(Q6e,GCr),e(Rr,OCr),e(Rr,fn),e(fn,VCr),e(fn,H6e),e(H6e,XCr),e(fn,zCr),e(fn,U6e),e(U6e,WCr),e(fn,QCr),e(fn,J6e),e(J6e,HCr),e(fn,UCr),e(Rr,JCr),e(Rr,te),e(te,dE),e(dE,Y6e),e(Y6e,YCr),e(dE,KCr),e(dE,fJ),e(fJ,ZCr),e(dE,e5r),e(te,o5r),e(te,cE),e(cE,K6e),e(K6e,r5r),e(cE,t5r),e(cE,mJ),e(mJ,a5r),e(cE,n5r),e(te,s5r),e(te,fE),e(fE,Z6e),e(Z6e,l5r),e(fE,i5r),e(fE,gJ),e(gJ,d5r),e(fE,c5r),e(te,f5r),e(te,mE),e(mE,eTe),e(eTe,m5r),e(mE,g5r),e(mE,hJ),e(hJ,h5r),e(mE,p5r),e(te,u5r),e(te,gE),e(gE,oTe),e(oTe,_5r),e(gE,b5r),e(gE,pJ),e(pJ,v5r),e(gE,F5r),e(te,T5r),e(te,hE),e(hE,rTe),e(rTe,M5r),e(hE,E5r),e(hE,uJ),e(uJ,C5r),e(hE,w5r),e(te,A5r),e(te,pE),e(pE,tTe),e(tTe,L5r),e(pE,y5r),e(pE,_J),e(_J,x5r),e(pE,$5r),e(te,k5r),e(te,uE),e(uE,aTe),e(aTe,S5r),e(uE,R5r),e(uE,bJ),e(bJ,P5r),e(uE,B5r),e(te,I5r),e(te,_E),e(_E,nTe),e(nTe,N5r),e(_E,q5r),e(_E,vJ),e(vJ,j5r),e(_E,D5r),e(te,G5r),e(te,bE),e(bE,sTe),e(sTe,O5r),e(bE,V5r),e(bE,FJ),e(FJ,X5r),e(bE,z5r),e(te,W5r),e(te,vE),e(vE,lTe),e(lTe,Q5r),e(vE,H5r),e(vE,TJ),e(TJ,U5r),e(vE,J5r),e(te,Y5r),e(te,FE),e(FE,iTe),e(iTe,K5r),e(FE,Z5r),e(FE,MJ),e(MJ,e3r),e(FE,o3r),e(te,r3r),e(te,TE),e(TE,dTe),e(dTe,t3r),e(TE,a3r),e(TE,EJ),e(EJ,n3r),e(TE,s3r),e(te,l3r),e(te,ME),e(ME,cTe),e(cTe,i3r),e(ME,d3r),e(ME,CJ),e(CJ,c3r),e(ME,f3r),e(te,m3r),e(te,EE),e(EE,fTe),e(fTe,g3r),e(EE,h3r),e(EE,wJ),e(wJ,p3r),e(EE,u3r),e(te,_3r),e(te,CE),e(CE,mTe),e(mTe,b3r),e(CE,v3r),e(CE,AJ),e(AJ,F3r),e(CE,T3r),e(te,M3r),e(te,wE),e(wE,gTe),e(gTe,E3r),e(wE,C3r),e(wE,LJ),e(LJ,w3r),e(wE,A3r),e(te,L3r),e(te,AE),e(AE,hTe),e(hTe,y3r),e(AE,x3r),e(AE,yJ),e(yJ,$3r),e(AE,k3r),e(te,S3r),e(te,LE),e(LE,pTe),e(pTe,R3r),e(LE,P3r),e(LE,xJ),e(xJ,B3r),e(LE,I3r),e(te,N3r),e(te,yE),e(yE,uTe),e(uTe,q3r),e(yE,j3r),e(yE,$J),e($J,D3r),e(yE,G3r),e(te,O3r),e(te,xE),e(xE,_Te),e(_Te,V3r),e(xE,X3r),e(xE,kJ),e(kJ,z3r),e(xE,W3r),e(te,Q3r),e(te,$E),e($E,bTe),e(bTe,H3r),e($E,U3r),e($E,SJ),e(SJ,J3r),e($E,Y3r),e(te,K3r),e(te,kE),e(kE,vTe),e(vTe,Z3r),e(kE,e0r),e(kE,RJ),e(RJ,o0r),e(kE,r0r),e(te,t0r),e(te,SE),e(SE,FTe),e(FTe,a0r),e(SE,n0r),e(SE,PJ),e(PJ,s0r),e(SE,l0r),e(te,i0r),e(te,RE),e(RE,TTe),e(TTe,d0r),e(RE,c0r),e(RE,BJ),e(BJ,f0r),e(RE,m0r),e(te,g0r),e(te,PE),e(PE,MTe),e(MTe,h0r),e(PE,p0r),e(PE,IJ),e(IJ,u0r),e(PE,_0r),e(Rr,b0r),M(BE,Rr,null),b(f,vOe,_),b(f,Fc,_),e(Fc,IE),e(IE,ETe),M(D9,ETe,null),e(Fc,v0r),e(Fc,CTe),e(CTe,F0r),b(f,FOe,_),b(f,sr,_),M(G9,sr,null),e(sr,T0r),e(sr,Tc),e(Tc,M0r),e(Tc,NJ),e(NJ,E0r),e(Tc,C0r),e(Tc,qJ),e(qJ,w0r),e(Tc,A0r),e(sr,L0r),e(sr,O9),e(O9,y0r),e(O9,wTe),e(wTe,x0r),e(O9,$0r),e(sr,k0r),e(sr,Nt),M(V9,Nt,null),e(Nt,S0r),e(Nt,ATe),e(ATe,R0r),e(Nt,P0r),e(Nt,Mc),e(Mc,B0r),e(Mc,LTe),e(LTe,I0r),e(Mc,N0r),e(Mc,jJ),e(jJ,q0r),e(Mc,j0r),e(Nt,D0r),M(NE,Nt,null),e(sr,G0r),e(sr,Pr),M(X9,Pr,null),e(Pr,O0r),e(Pr,yTe),e(yTe,V0r),e(Pr,X0r),e(Pr,mn),e(mn,z0r),e(mn,xTe),e(xTe,W0r),e(mn,Q0r),e(mn,$Te),e($Te,H0r),e(mn,U0r),e(mn,kTe),e(kTe,J0r),e(mn,Y0r),e(Pr,K0r),e(Pr,ue),e(ue,qE),e(qE,STe),e(STe,Z0r),e(qE,ewr),e(qE,DJ),e(DJ,owr),e(qE,rwr),e(ue,twr),e(ue,jE),e(jE,RTe),e(RTe,awr),e(jE,nwr),e(jE,GJ),e(GJ,swr),e(jE,lwr),e(ue,iwr),e(ue,DE),e(DE,PTe),e(PTe,dwr),e(DE,cwr),e(DE,OJ),e(OJ,fwr),e(DE,mwr),e(ue,gwr),e(ue,GE),e(GE,BTe),e(BTe,hwr),e(GE,pwr),e(GE,VJ),e(VJ,uwr),e(GE,_wr),e(ue,bwr),e(ue,OE),e(OE,ITe),e(ITe,vwr),e(OE,Fwr),e(OE,XJ),e(XJ,Twr),e(OE,Mwr),e(ue,Ewr),e(ue,VE),e(VE,NTe),e(NTe,Cwr),e(VE,wwr),e(VE,zJ),e(zJ,Awr),e(VE,Lwr),e(ue,ywr),e(ue,XE),e(XE,qTe),e(qTe,xwr),e(XE,$wr),e(XE,WJ),e(WJ,kwr),e(XE,Swr),e(ue,Rwr),e(ue,zE),e(zE,jTe),e(jTe,Pwr),e(zE,Bwr),e(zE,QJ),e(QJ,Iwr),e(zE,Nwr),e(ue,qwr),e(ue,WE),e(WE,DTe),e(DTe,jwr),e(WE,Dwr),e(WE,HJ),e(HJ,Gwr),e(WE,Owr),e(ue,Vwr),e(ue,QE),e(QE,GTe),e(GTe,Xwr),e(QE,zwr),e(QE,UJ),e(UJ,Wwr),e(QE,Qwr),e(ue,Hwr),e(ue,HE),e(HE,OTe),e(OTe,Uwr),e(HE,Jwr),e(HE,JJ),e(JJ,Ywr),e(HE,Kwr),e(ue,Zwr),e(ue,UE),e(UE,VTe),e(VTe,eAr),e(UE,oAr),e(UE,YJ),e(YJ,rAr),e(UE,tAr),e(ue,aAr),e(ue,JE),e(JE,XTe),e(XTe,nAr),e(JE,sAr),e(JE,KJ),e(KJ,lAr),e(JE,iAr),e(ue,dAr),e(ue,YE),e(YE,zTe),e(zTe,cAr),e(YE,fAr),e(YE,ZJ),e(ZJ,mAr),e(YE,gAr),e(ue,hAr),e(ue,KE),e(KE,WTe),e(WTe,pAr),e(KE,uAr),e(KE,eY),e(eY,_Ar),e(KE,bAr),e(ue,vAr),e(ue,ZE),e(ZE,QTe),e(QTe,FAr),e(ZE,TAr),e(ZE,oY),e(oY,MAr),e(ZE,EAr),e(ue,CAr),e(ue,eC),e(eC,HTe),e(HTe,wAr),e(eC,AAr),e(eC,rY),e(rY,LAr),e(eC,yAr),e(Pr,xAr),M(oC,Pr,null),b(f,TOe,_),b(f,Ec,_),e(Ec,rC),e(rC,UTe),M(z9,UTe,null),e(Ec,$Ar),e(Ec,JTe),e(JTe,kAr),b(f,MOe,_),b(f,lr,_),M(W9,lr,null),e(lr,SAr),e(lr,Cc),e(Cc,RAr),e(Cc,tY),e(tY,PAr),e(Cc,BAr),e(Cc,aY),e(aY,IAr),e(Cc,NAr),e(lr,qAr),e(lr,Q9),e(Q9,jAr),e(Q9,YTe),e(YTe,DAr),e(Q9,GAr),e(lr,OAr),e(lr,qt),M(H9,qt,null),e(qt,VAr),e(qt,KTe),e(KTe,XAr),e(qt,zAr),e(qt,wc),e(wc,WAr),e(wc,ZTe),e(ZTe,QAr),e(wc,HAr),e(wc,nY),e(nY,UAr),e(wc,JAr),e(qt,YAr),M(tC,qt,null),e(lr,KAr),e(lr,Br),M(U9,Br,null),e(Br,ZAr),e(Br,eMe),e(eMe,eLr),e(Br,oLr),e(Br,gn),e(gn,rLr),e(gn,oMe),e(oMe,tLr),e(gn,aLr),e(gn,rMe),e(rMe,nLr),e(gn,sLr),e(gn,tMe),e(tMe,lLr),e(gn,iLr),e(Br,dLr),e(Br,J9),e(J9,aC),e(aC,aMe),e(aMe,cLr),e(aC,fLr),e(aC,sY),e(sY,mLr),e(aC,gLr),e(J9,hLr),e(J9,nC),e(nC,nMe),e(nMe,pLr),e(nC,uLr),e(nC,lY),e(lY,_Lr),e(nC,bLr),e(Br,vLr),M(sC,Br,null),b(f,EOe,_),b(f,Ac,_),e(Ac,lC),e(lC,sMe),M(Y9,sMe,null),e(Ac,FLr),e(Ac,lMe),e(lMe,TLr),b(f,COe,_),b(f,ir,_),M(K9,ir,null),e(ir,MLr),e(ir,Lc),e(Lc,ELr),e(Lc,iY),e(iY,CLr),e(Lc,wLr),e(Lc,dY),e(dY,ALr),e(Lc,LLr),e(ir,yLr),e(ir,Z9),e(Z9,xLr),e(Z9,iMe),e(iMe,$Lr),e(Z9,kLr),e(ir,SLr),e(ir,jt),M(ex,jt,null),e(jt,RLr),e(jt,dMe),e(dMe,PLr),e(jt,BLr),e(jt,yc),e(yc,ILr),e(yc,cMe),e(cMe,NLr),e(yc,qLr),e(yc,cY),e(cY,jLr),e(yc,DLr),e(jt,GLr),M(iC,jt,null),e(ir,OLr),e(ir,Ir),M(ox,Ir,null),e(Ir,VLr),e(Ir,fMe),e(fMe,XLr),e(Ir,zLr),e(Ir,hn),e(hn,WLr),e(hn,mMe),e(mMe,QLr),e(hn,HLr),e(hn,gMe),e(gMe,ULr),e(hn,JLr),e(hn,hMe),e(hMe,YLr),e(hn,KLr),e(Ir,ZLr),e(Ir,pMe),e(pMe,dC),e(dC,uMe),e(uMe,eyr),e(dC,oyr),e(dC,fY),e(fY,ryr),e(dC,tyr),e(Ir,ayr),M(cC,Ir,null),b(f,wOe,_),b(f,xc,_),e(xc,fC),e(fC,_Me),M(rx,_Me,null),e(xc,nyr),e(xc,bMe),e(bMe,syr),b(f,AOe,_),b(f,dr,_),M(tx,dr,null),e(dr,lyr),e(dr,$c),e($c,iyr),e($c,mY),e(mY,dyr),e($c,cyr),e($c,gY),e(gY,fyr),e($c,myr),e(dr,gyr),e(dr,ax),e(ax,hyr),e(ax,vMe),e(vMe,pyr),e(ax,uyr),e(dr,_yr),e(dr,Dt),M(nx,Dt,null),e(Dt,byr),e(Dt,FMe),e(FMe,vyr),e(Dt,Fyr),e(Dt,kc),e(kc,Tyr),e(kc,TMe),e(TMe,Myr),e(kc,Eyr),e(kc,hY),e(hY,Cyr),e(kc,wyr),e(Dt,Ayr),M(mC,Dt,null),e(dr,Lyr),e(dr,Nr),M(sx,Nr,null),e(Nr,yyr),e(Nr,MMe),e(MMe,xyr),e(Nr,$yr),e(Nr,pn),e(pn,kyr),e(pn,EMe),e(EMe,Syr),e(pn,Ryr),e(pn,CMe),e(CMe,Pyr),e(pn,Byr),e(pn,wMe),e(wMe,Iyr),e(pn,Nyr),e(Nr,qyr),e(Nr,de),e(de,gC),e(gC,AMe),e(AMe,jyr),e(gC,Dyr),e(gC,pY),e(pY,Gyr),e(gC,Oyr),e(de,Vyr),e(de,hC),e(hC,LMe),e(LMe,Xyr),e(hC,zyr),e(hC,uY),e(uY,Wyr),e(hC,Qyr),e(de,Hyr),e(de,pC),e(pC,yMe),e(yMe,Uyr),e(pC,Jyr),e(pC,_Y),e(_Y,Yyr),e(pC,Kyr),e(de,Zyr),e(de,uC),e(uC,xMe),e(xMe,e8r),e(uC,o8r),e(uC,bY),e(bY,r8r),e(uC,t8r),e(de,a8r),e(de,_C),e(_C,$Me),e($Me,n8r),e(_C,s8r),e(_C,vY),e(vY,l8r),e(_C,i8r),e(de,d8r),e(de,bC),e(bC,kMe),e(kMe,c8r),e(bC,f8r),e(bC,FY),e(FY,m8r),e(bC,g8r),e(de,h8r),e(de,vC),e(vC,SMe),e(SMe,p8r),e(vC,u8r),e(vC,TY),e(TY,_8r),e(vC,b8r),e(de,v8r),e(de,FC),e(FC,RMe),e(RMe,F8r),e(FC,T8r),e(FC,MY),e(MY,M8r),e(FC,E8r),e(de,C8r),e(de,TC),e(TC,PMe),e(PMe,w8r),e(TC,A8r),e(TC,EY),e(EY,L8r),e(TC,y8r),e(de,x8r),e(de,MC),e(MC,BMe),e(BMe,$8r),e(MC,k8r),e(MC,CY),e(CY,S8r),e(MC,R8r),e(de,P8r),e(de,EC),e(EC,IMe),e(IMe,B8r),e(EC,I8r),e(EC,wY),e(wY,N8r),e(EC,q8r),e(de,j8r),e(de,CC),e(CC,NMe),e(NMe,D8r),e(CC,G8r),e(CC,AY),e(AY,O8r),e(CC,V8r),e(de,X8r),e(de,wC),e(wC,qMe),e(qMe,z8r),e(wC,W8r),e(wC,LY),e(LY,Q8r),e(wC,H8r),e(de,U8r),e(de,AC),e(AC,jMe),e(jMe,J8r),e(AC,Y8r),e(AC,yY),e(yY,K8r),e(AC,Z8r),e(de,e9r),e(de,LC),e(LC,DMe),e(DMe,o9r),e(LC,r9r),e(LC,xY),e(xY,t9r),e(LC,a9r),e(de,n9r),e(de,yC),e(yC,GMe),e(GMe,s9r),e(yC,l9r),e(yC,$Y),e($Y,i9r),e(yC,d9r),e(de,c9r),e(de,xC),e(xC,OMe),e(OMe,f9r),e(xC,m9r),e(xC,kY),e(kY,g9r),e(xC,h9r),e(de,p9r),e(de,$C),e($C,VMe),e(VMe,u9r),e($C,_9r),e($C,SY),e(SY,b9r),e($C,v9r),e(de,F9r),e(de,kC),e(kC,XMe),e(XMe,T9r),e(kC,M9r),e(kC,RY),e(RY,E9r),e(kC,C9r),e(de,w9r),e(de,SC),e(SC,zMe),e(zMe,A9r),e(SC,L9r),e(SC,PY),e(PY,y9r),e(SC,x9r),e(Nr,$9r),M(RC,Nr,null),b(f,LOe,_),b(f,Sc,_),e(Sc,PC),e(PC,WMe),M(lx,WMe,null),e(Sc,k9r),e(Sc,QMe),e(QMe,S9r),b(f,yOe,_),b(f,cr,_),M(ix,cr,null),e(cr,R9r),e(cr,Rc),e(Rc,P9r),e(Rc,BY),e(BY,B9r),e(Rc,I9r),e(Rc,IY),e(IY,N9r),e(Rc,q9r),e(cr,j9r),e(cr,dx),e(dx,D9r),e(dx,HMe),e(HMe,G9r),e(dx,O9r),e(cr,V9r),e(cr,Gt),M(cx,Gt,null),e(Gt,X9r),e(Gt,UMe),e(UMe,z9r),e(Gt,W9r),e(Gt,Pc),e(Pc,Q9r),e(Pc,JMe),e(JMe,H9r),e(Pc,U9r),e(Pc,NY),e(NY,J9r),e(Pc,Y9r),e(Gt,K9r),M(BC,Gt,null),e(cr,Z9r),e(cr,qr),M(fx,qr,null),e(qr,exr),e(qr,YMe),e(YMe,oxr),e(qr,rxr),e(qr,un),e(un,txr),e(un,KMe),e(KMe,axr),e(un,nxr),e(un,ZMe),e(ZMe,sxr),e(un,lxr),e(un,e4e),e(e4e,ixr),e(un,dxr),e(qr,cxr),e(qr,ce),e(ce,IC),e(IC,o4e),e(o4e,fxr),e(IC,mxr),e(IC,qY),e(qY,gxr),e(IC,hxr),e(ce,pxr),e(ce,NC),e(NC,r4e),e(r4e,uxr),e(NC,_xr),e(NC,jY),e(jY,bxr),e(NC,vxr),e(ce,Fxr),e(ce,qC),e(qC,t4e),e(t4e,Txr),e(qC,Mxr),e(qC,DY),e(DY,Exr),e(qC,Cxr),e(ce,wxr),e(ce,jC),e(jC,a4e),e(a4e,Axr),e(jC,Lxr),e(jC,GY),e(GY,yxr),e(jC,xxr),e(ce,$xr),e(ce,DC),e(DC,n4e),e(n4e,kxr),e(DC,Sxr),e(DC,OY),e(OY,Rxr),e(DC,Pxr),e(ce,Bxr),e(ce,GC),e(GC,s4e),e(s4e,Ixr),e(GC,Nxr),e(GC,VY),e(VY,qxr),e(GC,jxr),e(ce,Dxr),e(ce,OC),e(OC,l4e),e(l4e,Gxr),e(OC,Oxr),e(OC,XY),e(XY,Vxr),e(OC,Xxr),e(ce,zxr),e(ce,VC),e(VC,i4e),e(i4e,Wxr),e(VC,Qxr),e(VC,zY),e(zY,Hxr),e(VC,Uxr),e(ce,Jxr),e(ce,XC),e(XC,d4e),e(d4e,Yxr),e(XC,Kxr),e(XC,WY),e(WY,Zxr),e(XC,e$r),e(ce,o$r),e(ce,zC),e(zC,c4e),e(c4e,r$r),e(zC,t$r),e(zC,QY),e(QY,a$r),e(zC,n$r),e(ce,s$r),e(ce,WC),e(WC,f4e),e(f4e,l$r),e(WC,i$r),e(WC,HY),e(HY,d$r),e(WC,c$r),e(ce,f$r),e(ce,QC),e(QC,m4e),e(m4e,m$r),e(QC,g$r),e(QC,UY),e(UY,h$r),e(QC,p$r),e(ce,u$r),e(ce,HC),e(HC,g4e),e(g4e,_$r),e(HC,b$r),e(HC,JY),e(JY,v$r),e(HC,F$r),e(ce,T$r),e(ce,UC),e(UC,h4e),e(h4e,M$r),e(UC,E$r),e(UC,YY),e(YY,C$r),e(UC,w$r),e(ce,A$r),e(ce,JC),e(JC,p4e),e(p4e,L$r),e(JC,y$r),e(JC,KY),e(KY,x$r),e(JC,$$r),e(ce,k$r),e(ce,YC),e(YC,u4e),e(u4e,S$r),e(YC,R$r),e(YC,ZY),e(ZY,P$r),e(YC,B$r),e(ce,I$r),e(ce,KC),e(KC,_4e),e(_4e,N$r),e(KC,q$r),e(KC,eK),e(eK,j$r),e(KC,D$r),e(ce,G$r),e(ce,ZC),e(ZC,b4e),e(b4e,O$r),e(ZC,V$r),e(ZC,oK),e(oK,X$r),e(ZC,z$r),e(ce,W$r),e(ce,e5),e(e5,v4e),e(v4e,Q$r),e(e5,H$r),e(e5,rK),e(rK,U$r),e(e5,J$r),e(ce,Y$r),e(ce,o5),e(o5,F4e),e(F4e,K$r),e(o5,Z$r),e(o5,tK),e(tK,ekr),e(o5,okr),e(qr,rkr),M(r5,qr,null),b(f,xOe,_),b(f,Bc,_),e(Bc,t5),e(t5,T4e),M(mx,T4e,null),e(Bc,tkr),e(Bc,M4e),e(M4e,akr),b(f,$Oe,_),b(f,fr,_),M(gx,fr,null),e(fr,nkr),e(fr,Ic),e(Ic,skr),e(Ic,aK),e(aK,lkr),e(Ic,ikr),e(Ic,nK),e(nK,dkr),e(Ic,ckr),e(fr,fkr),e(fr,hx),e(hx,mkr),e(hx,E4e),e(E4e,gkr),e(hx,hkr),e(fr,pkr),e(fr,Ot),M(px,Ot,null),e(Ot,ukr),e(Ot,C4e),e(C4e,_kr),e(Ot,bkr),e(Ot,Nc),e(Nc,vkr),e(Nc,w4e),e(w4e,Fkr),e(Nc,Tkr),e(Nc,sK),e(sK,Mkr),e(Nc,Ekr),e(Ot,Ckr),M(a5,Ot,null),e(fr,wkr),e(fr,jr),M(ux,jr,null),e(jr,Akr),e(jr,A4e),e(A4e,Lkr),e(jr,ykr),e(jr,_n),e(_n,xkr),e(_n,L4e),e(L4e,$kr),e(_n,kkr),e(_n,y4e),e(y4e,Skr),e(_n,Rkr),e(_n,x4e),e(x4e,Pkr),e(_n,Bkr),e(jr,Ikr),e(jr,$4e),e($4e,n5),e(n5,k4e),e(k4e,Nkr),e(n5,qkr),e(n5,lK),e(lK,jkr),e(n5,Dkr),e(jr,Gkr),M(s5,jr,null),b(f,kOe,_),b(f,qc,_),e(qc,l5),e(l5,S4e),M(_x,S4e,null),e(qc,Okr),e(qc,R4e),e(R4e,Vkr),b(f,SOe,_),b(f,mr,_),M(bx,mr,null),e(mr,Xkr),e(mr,jc),e(jc,zkr),e(jc,iK),e(iK,Wkr),e(jc,Qkr),e(jc,dK),e(dK,Hkr),e(jc,Ukr),e(mr,Jkr),e(mr,vx),e(vx,Ykr),e(vx,P4e),e(P4e,Kkr),e(vx,Zkr),e(mr,eSr),e(mr,Vt),M(Fx,Vt,null),e(Vt,oSr),e(Vt,B4e),e(B4e,rSr),e(Vt,tSr),e(Vt,Dc),e(Dc,aSr),e(Dc,I4e),e(I4e,nSr),e(Dc,sSr),e(Dc,cK),e(cK,lSr),e(Dc,iSr),e(Vt,dSr),M(i5,Vt,null),e(mr,cSr),e(mr,Dr),M(Tx,Dr,null),e(Dr,fSr),e(Dr,N4e),e(N4e,mSr),e(Dr,gSr),e(Dr,bn),e(bn,hSr),e(bn,q4e),e(q4e,pSr),e(bn,uSr),e(bn,j4e),e(j4e,_Sr),e(bn,bSr),e(bn,D4e),e(D4e,vSr),e(bn,FSr),e(Dr,TSr),e(Dr,G4e),e(G4e,d5),e(d5,O4e),e(O4e,MSr),e(d5,ESr),e(d5,fK),e(fK,CSr),e(d5,wSr),e(Dr,ASr),M(c5,Dr,null),b(f,ROe,_),b(f,Gc,_),e(Gc,f5),e(f5,V4e),M(Mx,V4e,null),e(Gc,LSr),e(Gc,X4e),e(X4e,ySr),b(f,POe,_),b(f,gr,_),M(Ex,gr,null),e(gr,xSr),e(gr,Oc),e(Oc,$Sr),e(Oc,mK),e(mK,kSr),e(Oc,SSr),e(Oc,gK),e(gK,RSr),e(Oc,PSr),e(gr,BSr),e(gr,Cx),e(Cx,ISr),e(Cx,z4e),e(z4e,NSr),e(Cx,qSr),e(gr,jSr),e(gr,Xt),M(wx,Xt,null),e(Xt,DSr),e(Xt,W4e),e(W4e,GSr),e(Xt,OSr),e(Xt,Vc),e(Vc,VSr),e(Vc,Q4e),e(Q4e,XSr),e(Vc,zSr),e(Vc,hK),e(hK,WSr),e(Vc,QSr),e(Xt,HSr),M(m5,Xt,null),e(gr,USr),e(gr,Gr),M(Ax,Gr,null),e(Gr,JSr),e(Gr,H4e),e(H4e,YSr),e(Gr,KSr),e(Gr,vn),e(vn,ZSr),e(vn,U4e),e(U4e,eRr),e(vn,oRr),e(vn,J4e),e(J4e,rRr),e(vn,tRr),e(vn,Y4e),e(Y4e,aRr),e(vn,nRr),e(Gr,sRr),e(Gr,oe),e(oe,g5),e(g5,K4e),e(K4e,lRr),e(g5,iRr),e(g5,pK),e(pK,dRr),e(g5,cRr),e(oe,fRr),e(oe,h5),e(h5,Z4e),e(Z4e,mRr),e(h5,gRr),e(h5,uK),e(uK,hRr),e(h5,pRr),e(oe,uRr),e(oe,p5),e(p5,eEe),e(eEe,_Rr),e(p5,bRr),e(p5,_K),e(_K,vRr),e(p5,FRr),e(oe,TRr),e(oe,u5),e(u5,oEe),e(oEe,MRr),e(u5,ERr),e(u5,bK),e(bK,CRr),e(u5,wRr),e(oe,ARr),e(oe,_5),e(_5,rEe),e(rEe,LRr),e(_5,yRr),e(_5,vK),e(vK,xRr),e(_5,$Rr),e(oe,kRr),e(oe,b5),e(b5,tEe),e(tEe,SRr),e(b5,RRr),e(b5,FK),e(FK,PRr),e(b5,BRr),e(oe,IRr),e(oe,v5),e(v5,aEe),e(aEe,NRr),e(v5,qRr),e(v5,TK),e(TK,jRr),e(v5,DRr),e(oe,GRr),e(oe,F5),e(F5,nEe),e(nEe,ORr),e(F5,VRr),e(F5,MK),e(MK,XRr),e(F5,zRr),e(oe,WRr),e(oe,T5),e(T5,sEe),e(sEe,QRr),e(T5,HRr),e(T5,EK),e(EK,URr),e(T5,JRr),e(oe,YRr),e(oe,M5),e(M5,lEe),e(lEe,KRr),e(M5,ZRr),e(M5,CK),e(CK,ePr),e(M5,oPr),e(oe,rPr),e(oe,E5),e(E5,iEe),e(iEe,tPr),e(E5,aPr),e(E5,wK),e(wK,nPr),e(E5,sPr),e(oe,lPr),e(oe,C5),e(C5,dEe),e(dEe,iPr),e(C5,dPr),e(C5,AK),e(AK,cPr),e(C5,fPr),e(oe,mPr),e(oe,w5),e(w5,cEe),e(cEe,gPr),e(w5,hPr),e(w5,LK),e(LK,pPr),e(w5,uPr),e(oe,_Pr),e(oe,A5),e(A5,fEe),e(fEe,bPr),e(A5,vPr),e(A5,yK),e(yK,FPr),e(A5,TPr),e(oe,MPr),e(oe,L5),e(L5,mEe),e(mEe,EPr),e(L5,CPr),e(L5,xK),e(xK,wPr),e(L5,APr),e(oe,LPr),e(oe,y5),e(y5,gEe),e(gEe,yPr),e(y5,xPr),e(y5,$K),e($K,$Pr),e(y5,kPr),e(oe,SPr),e(oe,x5),e(x5,hEe),e(hEe,RPr),e(x5,PPr),e(x5,kK),e(kK,BPr),e(x5,IPr),e(oe,NPr),e(oe,$5),e($5,pEe),e(pEe,qPr),e($5,jPr),e($5,SK),e(SK,DPr),e($5,GPr),e(oe,OPr),e(oe,k5),e(k5,uEe),e(uEe,VPr),e(k5,XPr),e(k5,RK),e(RK,zPr),e(k5,WPr),e(oe,QPr),e(oe,S5),e(S5,_Ee),e(_Ee,HPr),e(S5,UPr),e(S5,PK),e(PK,JPr),e(S5,YPr),e(oe,KPr),e(oe,R5),e(R5,bEe),e(bEe,ZPr),e(R5,eBr),e(R5,BK),e(BK,oBr),e(R5,rBr),e(oe,tBr),e(oe,P5),e(P5,vEe),e(vEe,aBr),e(P5,nBr),e(P5,IK),e(IK,sBr),e(P5,lBr),e(oe,iBr),e(oe,B5),e(B5,FEe),e(FEe,dBr),e(B5,cBr),e(B5,NK),e(NK,fBr),e(B5,mBr),e(oe,gBr),e(oe,I5),e(I5,TEe),e(TEe,hBr),e(I5,pBr),e(I5,qK),e(qK,uBr),e(I5,_Br),e(oe,bBr),e(oe,N5),e(N5,MEe),e(MEe,vBr),e(N5,FBr),e(N5,jK),e(jK,TBr),e(N5,MBr),e(oe,EBr),e(oe,q5),e(q5,EEe),e(EEe,CBr),e(q5,wBr),e(q5,DK),e(DK,ABr),e(q5,LBr),e(oe,yBr),e(oe,j5),e(j5,CEe),e(CEe,xBr),e(j5,$Br),e(j5,GK),e(GK,kBr),e(j5,SBr),e(Gr,RBr),M(D5,Gr,null),b(f,BOe,_),b(f,Xc,_),e(Xc,G5),e(G5,wEe),M(Lx,wEe,null),e(Xc,PBr),e(Xc,AEe),e(AEe,BBr),b(f,IOe,_),b(f,hr,_),M(yx,hr,null),e(hr,IBr),e(hr,zc),e(zc,NBr),e(zc,OK),e(OK,qBr),e(zc,jBr),e(zc,VK),e(VK,DBr),e(zc,GBr),e(hr,OBr),e(hr,xx),e(xx,VBr),e(xx,LEe),e(LEe,XBr),e(xx,zBr),e(hr,WBr),e(hr,zt),M($x,zt,null),e(zt,QBr),e(zt,yEe),e(yEe,HBr),e(zt,UBr),e(zt,Wc),e(Wc,JBr),e(Wc,xEe),e(xEe,YBr),e(Wc,KBr),e(Wc,XK),e(XK,ZBr),e(Wc,eIr),e(zt,oIr),M(O5,zt,null),e(hr,rIr),e(hr,Or),M(kx,Or,null),e(Or,tIr),e(Or,$Ee),e($Ee,aIr),e(Or,nIr),e(Or,Fn),e(Fn,sIr),e(Fn,kEe),e(kEe,lIr),e(Fn,iIr),e(Fn,SEe),e(SEe,dIr),e(Fn,cIr),e(Fn,REe),e(REe,fIr),e(Fn,mIr),e(Or,gIr),e(Or,xe),e(xe,V5),e(V5,PEe),e(PEe,hIr),e(V5,pIr),e(V5,zK),e(zK,uIr),e(V5,_Ir),e(xe,bIr),e(xe,X5),e(X5,BEe),e(BEe,vIr),e(X5,FIr),e(X5,WK),e(WK,TIr),e(X5,MIr),e(xe,EIr),e(xe,z5),e(z5,IEe),e(IEe,CIr),e(z5,wIr),e(z5,QK),e(QK,AIr),e(z5,LIr),e(xe,yIr),e(xe,W5),e(W5,NEe),e(NEe,xIr),e(W5,$Ir),e(W5,HK),e(HK,kIr),e(W5,SIr),e(xe,RIr),e(xe,Q5),e(Q5,qEe),e(qEe,PIr),e(Q5,BIr),e(Q5,UK),e(UK,IIr),e(Q5,NIr),e(xe,qIr),e(xe,H5),e(H5,jEe),e(jEe,jIr),e(H5,DIr),e(H5,JK),e(JK,GIr),e(H5,OIr),e(xe,VIr),e(xe,U5),e(U5,DEe),e(DEe,XIr),e(U5,zIr),e(U5,YK),e(YK,WIr),e(U5,QIr),e(xe,HIr),e(xe,J5),e(J5,GEe),e(GEe,UIr),e(J5,JIr),e(J5,KK),e(KK,YIr),e(J5,KIr),e(xe,ZIr),e(xe,Y5),e(Y5,OEe),e(OEe,eNr),e(Y5,oNr),e(Y5,ZK),e(ZK,rNr),e(Y5,tNr),e(xe,aNr),e(xe,K5),e(K5,VEe),e(VEe,nNr),e(K5,sNr),e(K5,eZ),e(eZ,lNr),e(K5,iNr),e(Or,dNr),M(Z5,Or,null),b(f,NOe,_),b(f,Qc,_),e(Qc,e3),e(e3,XEe),M(Sx,XEe,null),e(Qc,cNr),e(Qc,zEe),e(zEe,fNr),b(f,qOe,_),b(f,pr,_),M(Rx,pr,null),e(pr,mNr),e(pr,Hc),e(Hc,gNr),e(Hc,oZ),e(oZ,hNr),e(Hc,pNr),e(Hc,rZ),e(rZ,uNr),e(Hc,_Nr),e(pr,bNr),e(pr,Px),e(Px,vNr),e(Px,WEe),e(WEe,FNr),e(Px,TNr),e(pr,MNr),e(pr,Wt),M(Bx,Wt,null),e(Wt,ENr),e(Wt,QEe),e(QEe,CNr),e(Wt,wNr),e(Wt,Uc),e(Uc,ANr),e(Uc,HEe),e(HEe,LNr),e(Uc,yNr),e(Uc,tZ),e(tZ,xNr),e(Uc,$Nr),e(Wt,kNr),M(o3,Wt,null),e(pr,SNr),e(pr,Vr),M(Ix,Vr,null),e(Vr,RNr),e(Vr,UEe),e(UEe,PNr),e(Vr,BNr),e(Vr,Tn),e(Tn,INr),e(Tn,JEe),e(JEe,NNr),e(Tn,qNr),e(Tn,YEe),e(YEe,jNr),e(Tn,DNr),e(Tn,KEe),e(KEe,GNr),e(Tn,ONr),e(Vr,VNr),e(Vr,Ee),e(Ee,r3),e(r3,ZEe),e(ZEe,XNr),e(r3,zNr),e(r3,aZ),e(aZ,WNr),e(r3,QNr),e(Ee,HNr),e(Ee,t3),e(t3,eCe),e(eCe,UNr),e(t3,JNr),e(t3,nZ),e(nZ,YNr),e(t3,KNr),e(Ee,ZNr),e(Ee,a3),e(a3,oCe),e(oCe,eqr),e(a3,oqr),e(a3,sZ),e(sZ,rqr),e(a3,tqr),e(Ee,aqr),e(Ee,n3),e(n3,rCe),e(rCe,nqr),e(n3,sqr),e(n3,lZ),e(lZ,lqr),e(n3,iqr),e(Ee,dqr),e(Ee,s3),e(s3,tCe),e(tCe,cqr),e(s3,fqr),e(s3,iZ),e(iZ,mqr),e(s3,gqr),e(Ee,hqr),e(Ee,l3),e(l3,aCe),e(aCe,pqr),e(l3,uqr),e(l3,dZ),e(dZ,_qr),e(l3,bqr),e(Ee,vqr),e(Ee,i3),e(i3,nCe),e(nCe,Fqr),e(i3,Tqr),e(i3,cZ),e(cZ,Mqr),e(i3,Eqr),e(Ee,Cqr),e(Ee,d3),e(d3,sCe),e(sCe,wqr),e(d3,Aqr),e(d3,fZ),e(fZ,Lqr),e(d3,yqr),e(Ee,xqr),e(Ee,c3),e(c3,lCe),e(lCe,$qr),e(c3,kqr),e(c3,mZ),e(mZ,Sqr),e(c3,Rqr),e(Ee,Pqr),e(Ee,f3),e(f3,iCe),e(iCe,Bqr),e(f3,Iqr),e(f3,gZ),e(gZ,Nqr),e(f3,qqr),e(Ee,jqr),e(Ee,m3),e(m3,dCe),e(dCe,Dqr),e(m3,Gqr),e(m3,hZ),e(hZ,Oqr),e(m3,Vqr),e(Ee,Xqr),e(Ee,g3),e(g3,cCe),e(cCe,zqr),e(g3,Wqr),e(g3,pZ),e(pZ,Qqr),e(g3,Hqr),e(Ee,Uqr),e(Ee,h3),e(h3,fCe),e(fCe,Jqr),e(h3,Yqr),e(h3,uZ),e(uZ,Kqr),e(h3,Zqr),e(Vr,ejr),M(p3,Vr,null),b(f,jOe,_),b(f,Jc,_),e(Jc,u3),e(u3,mCe),M(Nx,mCe,null),e(Jc,ojr),e(Jc,gCe),e(gCe,rjr),b(f,DOe,_),b(f,ur,_),M(qx,ur,null),e(ur,tjr),e(ur,Yc),e(Yc,ajr),e(Yc,_Z),e(_Z,njr),e(Yc,sjr),e(Yc,bZ),e(bZ,ljr),e(Yc,ijr),e(ur,djr),e(ur,jx),e(jx,cjr),e(jx,hCe),e(hCe,fjr),e(jx,mjr),e(ur,gjr),e(ur,Qt),M(Dx,Qt,null),e(Qt,hjr),e(Qt,pCe),e(pCe,pjr),e(Qt,ujr),e(Qt,Kc),e(Kc,_jr),e(Kc,uCe),e(uCe,bjr),e(Kc,vjr),e(Kc,vZ),e(vZ,Fjr),e(Kc,Tjr),e(Qt,Mjr),M(_3,Qt,null),e(ur,Ejr),e(ur,Xr),M(Gx,Xr,null),e(Xr,Cjr),e(Xr,_Ce),e(_Ce,wjr),e(Xr,Ajr),e(Xr,Mn),e(Mn,Ljr),e(Mn,bCe),e(bCe,yjr),e(Mn,xjr),e(Mn,vCe),e(vCe,$jr),e(Mn,kjr),e(Mn,FCe),e(FCe,Sjr),e(Mn,Rjr),e(Xr,Pjr),e(Xr,$e),e($e,b3),e(b3,TCe),e(TCe,Bjr),e(b3,Ijr),e(b3,FZ),e(FZ,Njr),e(b3,qjr),e($e,jjr),e($e,v3),e(v3,MCe),e(MCe,Djr),e(v3,Gjr),e(v3,TZ),e(TZ,Ojr),e(v3,Vjr),e($e,Xjr),e($e,F3),e(F3,ECe),e(ECe,zjr),e(F3,Wjr),e(F3,MZ),e(MZ,Qjr),e(F3,Hjr),e($e,Ujr),e($e,T3),e(T3,CCe),e(CCe,Jjr),e(T3,Yjr),e(T3,EZ),e(EZ,Kjr),e(T3,Zjr),e($e,eDr),e($e,M3),e(M3,wCe),e(wCe,oDr),e(M3,rDr),e(M3,CZ),e(CZ,tDr),e(M3,aDr),e($e,nDr),e($e,E3),e(E3,ACe),e(ACe,sDr),e(E3,lDr),e(E3,wZ),e(wZ,iDr),e(E3,dDr),e($e,cDr),e($e,C3),e(C3,LCe),e(LCe,fDr),e(C3,mDr),e(C3,AZ),e(AZ,gDr),e(C3,hDr),e($e,pDr),e($e,w3),e(w3,yCe),e(yCe,uDr),e(w3,_Dr),e(w3,LZ),e(LZ,bDr),e(w3,vDr),e($e,FDr),e($e,A3),e(A3,xCe),e(xCe,TDr),e(A3,MDr),e(A3,yZ),e(yZ,EDr),e(A3,CDr),e($e,wDr),e($e,L3),e(L3,$Ce),e($Ce,ADr),e(L3,LDr),e(L3,xZ),e(xZ,yDr),e(L3,xDr),e(Xr,$Dr),M(y3,Xr,null),b(f,GOe,_),b(f,Zc,_),e(Zc,x3),e(x3,kCe),M(Ox,kCe,null),e(Zc,kDr),e(Zc,SCe),e(SCe,SDr),b(f,OOe,_),b(f,_r,_),M(Vx,_r,null),e(_r,RDr),e(_r,ef),e(ef,PDr),e(ef,$Z),e($Z,BDr),e(ef,IDr),e(ef,kZ),e(kZ,NDr),e(ef,qDr),e(_r,jDr),e(_r,Xx),e(Xx,DDr),e(Xx,RCe),e(RCe,GDr),e(Xx,ODr),e(_r,VDr),e(_r,Ht),M(zx,Ht,null),e(Ht,XDr),e(Ht,PCe),e(PCe,zDr),e(Ht,WDr),e(Ht,of),e(of,QDr),e(of,BCe),e(BCe,HDr),e(of,UDr),e(of,SZ),e(SZ,JDr),e(of,YDr),e(Ht,KDr),M($3,Ht,null),e(_r,ZDr),e(_r,zr),M(Wx,zr,null),e(zr,eGr),e(zr,ICe),e(ICe,oGr),e(zr,rGr),e(zr,En),e(En,tGr),e(En,NCe),e(NCe,aGr),e(En,nGr),e(En,qCe),e(qCe,sGr),e(En,lGr),e(En,jCe),e(jCe,iGr),e(En,dGr),e(zr,cGr),e(zr,ke),e(ke,k3),e(k3,DCe),e(DCe,fGr),e(k3,mGr),e(k3,RZ),e(RZ,gGr),e(k3,hGr),e(ke,pGr),e(ke,S3),e(S3,GCe),e(GCe,uGr),e(S3,_Gr),e(S3,PZ),e(PZ,bGr),e(S3,vGr),e(ke,FGr),e(ke,R3),e(R3,OCe),e(OCe,TGr),e(R3,MGr),e(R3,BZ),e(BZ,EGr),e(R3,CGr),e(ke,wGr),e(ke,P3),e(P3,VCe),e(VCe,AGr),e(P3,LGr),e(P3,IZ),e(IZ,yGr),e(P3,xGr),e(ke,$Gr),e(ke,B3),e(B3,XCe),e(XCe,kGr),e(B3,SGr),e(B3,NZ),e(NZ,RGr),e(B3,PGr),e(ke,BGr),e(ke,I3),e(I3,zCe),e(zCe,IGr),e(I3,NGr),e(I3,qZ),e(qZ,qGr),e(I3,jGr),e(ke,DGr),e(ke,N3),e(N3,WCe),e(WCe,GGr),e(N3,OGr),e(N3,jZ),e(jZ,VGr),e(N3,XGr),e(ke,zGr),e(ke,q3),e(q3,QCe),e(QCe,WGr),e(q3,QGr),e(q3,DZ),e(DZ,HGr),e(q3,UGr),e(ke,JGr),e(ke,j3),e(j3,HCe),e(HCe,YGr),e(j3,KGr),e(j3,GZ),e(GZ,ZGr),e(j3,eOr),e(ke,oOr),e(ke,D3),e(D3,UCe),e(UCe,rOr),e(D3,tOr),e(D3,OZ),e(OZ,aOr),e(D3,nOr),e(zr,sOr),M(G3,zr,null),b(f,VOe,_),b(f,rf,_),e(rf,O3),e(O3,JCe),M(Qx,JCe,null),e(rf,lOr),e(rf,YCe),e(YCe,iOr),b(f,XOe,_),b(f,br,_),M(Hx,br,null),e(br,dOr),e(br,tf),e(tf,cOr),e(tf,VZ),e(VZ,fOr),e(tf,mOr),e(tf,XZ),e(XZ,gOr),e(tf,hOr),e(br,pOr),e(br,Ux),e(Ux,uOr),e(Ux,KCe),e(KCe,_Or),e(Ux,bOr),e(br,vOr),e(br,Ut),M(Jx,Ut,null),e(Ut,FOr),e(Ut,ZCe),e(ZCe,TOr),e(Ut,MOr),e(Ut,af),e(af,EOr),e(af,e5e),e(e5e,COr),e(af,wOr),e(af,zZ),e(zZ,AOr),e(af,LOr),e(Ut,yOr),M(V3,Ut,null),e(br,xOr),e(br,Wr),M(Yx,Wr,null),e(Wr,$Or),e(Wr,o5e),e(o5e,kOr),e(Wr,SOr),e(Wr,Cn),e(Cn,ROr),e(Cn,r5e),e(r5e,POr),e(Cn,BOr),e(Cn,t5e),e(t5e,IOr),e(Cn,NOr),e(Cn,a5e),e(a5e,qOr),e(Cn,jOr),e(Wr,DOr),e(Wr,Se),e(Se,X3),e(X3,n5e),e(n5e,GOr),e(X3,OOr),e(X3,WZ),e(WZ,VOr),e(X3,XOr),e(Se,zOr),e(Se,z3),e(z3,s5e),e(s5e,WOr),e(z3,QOr),e(z3,QZ),e(QZ,HOr),e(z3,UOr),e(Se,JOr),e(Se,W3),e(W3,l5e),e(l5e,YOr),e(W3,KOr),e(W3,HZ),e(HZ,ZOr),e(W3,eVr),e(Se,oVr),e(Se,Q3),e(Q3,i5e),e(i5e,rVr),e(Q3,tVr),e(Q3,UZ),e(UZ,aVr),e(Q3,nVr),e(Se,sVr),e(Se,H3),e(H3,d5e),e(d5e,lVr),e(H3,iVr),e(H3,JZ),e(JZ,dVr),e(H3,cVr),e(Se,fVr),e(Se,U3),e(U3,c5e),e(c5e,mVr),e(U3,gVr),e(U3,YZ),e(YZ,hVr),e(U3,pVr),e(Se,uVr),e(Se,J3),e(J3,f5e),e(f5e,_Vr),e(J3,bVr),e(J3,KZ),e(KZ,vVr),e(J3,FVr),e(Se,TVr),e(Se,Y3),e(Y3,m5e),e(m5e,MVr),e(Y3,EVr),e(Y3,ZZ),e(ZZ,CVr),e(Y3,wVr),e(Se,AVr),e(Se,K3),e(K3,g5e),e(g5e,LVr),e(K3,yVr),e(K3,eee),e(eee,xVr),e(K3,$Vr),e(Se,kVr),e(Se,Z3),e(Z3,h5e),e(h5e,SVr),e(Z3,RVr),e(Z3,oee),e(oee,PVr),e(Z3,BVr),e(Wr,IVr),M(e0,Wr,null),b(f,zOe,_),b(f,nf,_),e(nf,o0),e(o0,p5e),M(Kx,p5e,null),e(nf,NVr),e(nf,u5e),e(u5e,qVr),b(f,WOe,_),b(f,vr,_),M(Zx,vr,null),e(vr,jVr),e(vr,sf),e(sf,DVr),e(sf,ree),e(ree,GVr),e(sf,OVr),e(sf,tee),e(tee,VVr),e(sf,XVr),e(vr,zVr),e(vr,e$),e(e$,WVr),e(e$,_5e),e(_5e,QVr),e(e$,HVr),e(vr,UVr),e(vr,Jt),M(o$,Jt,null),e(Jt,JVr),e(Jt,b5e),e(b5e,YVr),e(Jt,KVr),e(Jt,lf),e(lf,ZVr),e(lf,v5e),e(v5e,eXr),e(lf,oXr),e(lf,aee),e(aee,rXr),e(lf,tXr),e(Jt,aXr),M(r0,Jt,null),e(vr,nXr),e(vr,Qr),M(r$,Qr,null),e(Qr,sXr),e(Qr,F5e),e(F5e,lXr),e(Qr,iXr),e(Qr,wn),e(wn,dXr),e(wn,T5e),e(T5e,cXr),e(wn,fXr),e(wn,M5e),e(M5e,mXr),e(wn,gXr),e(wn,E5e),e(E5e,hXr),e(wn,pXr),e(Qr,uXr),e(Qr,Re),e(Re,t0),e(t0,C5e),e(C5e,_Xr),e(t0,bXr),e(t0,nee),e(nee,vXr),e(t0,FXr),e(Re,TXr),e(Re,a0),e(a0,w5e),e(w5e,MXr),e(a0,EXr),e(a0,see),e(see,CXr),e(a0,wXr),e(Re,AXr),e(Re,n0),e(n0,A5e),e(A5e,LXr),e(n0,yXr),e(n0,lee),e(lee,xXr),e(n0,$Xr),e(Re,kXr),e(Re,s0),e(s0,L5e),e(L5e,SXr),e(s0,RXr),e(s0,iee),e(iee,PXr),e(s0,BXr),e(Re,IXr),e(Re,l0),e(l0,y5e),e(y5e,NXr),e(l0,qXr),e(l0,dee),e(dee,jXr),e(l0,DXr),e(Re,GXr),e(Re,i0),e(i0,x5e),e(x5e,OXr),e(i0,VXr),e(i0,cee),e(cee,XXr),e(i0,zXr),e(Re,WXr),e(Re,d0),e(d0,$5e),e($5e,QXr),e(d0,HXr),e(d0,fee),e(fee,UXr),e(d0,JXr),e(Re,YXr),e(Re,c0),e(c0,k5e),e(k5e,KXr),e(c0,ZXr),e(c0,mee),e(mee,ezr),e(c0,ozr),e(Re,rzr),e(Re,f0),e(f0,S5e),e(S5e,tzr),e(f0,azr),e(f0,gee),e(gee,nzr),e(f0,szr),e(Re,lzr),e(Re,m0),e(m0,R5e),e(R5e,izr),e(m0,dzr),e(m0,hee),e(hee,czr),e(m0,fzr),e(Qr,mzr),M(g0,Qr,null),b(f,QOe,_),b(f,df,_),e(df,h0),e(h0,P5e),M(t$,P5e,null),e(df,gzr),e(df,B5e),e(B5e,hzr),b(f,HOe,_),b(f,Fr,_),M(a$,Fr,null),e(Fr,pzr),e(Fr,cf),e(cf,uzr),e(cf,pee),e(pee,_zr),e(cf,bzr),e(cf,uee),e(uee,vzr),e(cf,Fzr),e(Fr,Tzr),e(Fr,n$),e(n$,Mzr),e(n$,I5e),e(I5e,Ezr),e(n$,Czr),e(Fr,wzr),e(Fr,Yt),M(s$,Yt,null),e(Yt,Azr),e(Yt,N5e),e(N5e,Lzr),e(Yt,yzr),e(Yt,ff),e(ff,xzr),e(ff,q5e),e(q5e,$zr),e(ff,kzr),e(ff,_ee),e(_ee,Szr),e(ff,Rzr),e(Yt,Pzr),M(p0,Yt,null),e(Fr,Bzr),e(Fr,Hr),M(l$,Hr,null),e(Hr,Izr),e(Hr,j5e),e(j5e,Nzr),e(Hr,qzr),e(Hr,An),e(An,jzr),e(An,D5e),e(D5e,Dzr),e(An,Gzr),e(An,G5e),e(G5e,Ozr),e(An,Vzr),e(An,O5e),e(O5e,Xzr),e(An,zzr),e(Hr,Wzr),e(Hr,Ve),e(Ve,u0),e(u0,V5e),e(V5e,Qzr),e(u0,Hzr),e(u0,bee),e(bee,Uzr),e(u0,Jzr),e(Ve,Yzr),e(Ve,_0),e(_0,X5e),e(X5e,Kzr),e(_0,Zzr),e(_0,vee),e(vee,eWr),e(_0,oWr),e(Ve,rWr),e(Ve,b0),e(b0,z5e),e(z5e,tWr),e(b0,aWr),e(b0,Fee),e(Fee,nWr),e(b0,sWr),e(Ve,lWr),e(Ve,v0),e(v0,W5e),e(W5e,iWr),e(v0,dWr),e(v0,Tee),e(Tee,cWr),e(v0,fWr),e(Ve,mWr),e(Ve,F0),e(F0,Q5e),e(Q5e,gWr),e(F0,hWr),e(F0,Mee),e(Mee,pWr),e(F0,uWr),e(Ve,_Wr),e(Ve,T0),e(T0,H5e),e(H5e,bWr),e(T0,vWr),e(T0,Eee),e(Eee,FWr),e(T0,TWr),e(Ve,MWr),e(Ve,M0),e(M0,U5e),e(U5e,EWr),e(M0,CWr),e(M0,Cee),e(Cee,wWr),e(M0,AWr),e(Ve,LWr),e(Ve,E0),e(E0,J5e),e(J5e,yWr),e(E0,xWr),e(E0,wee),e(wee,$Wr),e(E0,kWr),e(Hr,SWr),M(C0,Hr,null),b(f,UOe,_),b(f,mf,_),e(mf,w0),e(w0,Y5e),M(i$,Y5e,null),e(mf,RWr),e(mf,K5e),e(K5e,PWr),b(f,JOe,_),b(f,Tr,_),M(d$,Tr,null),e(Tr,BWr),e(Tr,gf),e(gf,IWr),e(gf,Aee),e(Aee,NWr),e(gf,qWr),e(gf,Lee),e(Lee,jWr),e(gf,DWr),e(Tr,GWr),e(Tr,c$),e(c$,OWr),e(c$,Z5e),e(Z5e,VWr),e(c$,XWr),e(Tr,zWr),e(Tr,Kt),M(f$,Kt,null),e(Kt,WWr),e(Kt,e3e),e(e3e,QWr),e(Kt,HWr),e(Kt,hf),e(hf,UWr),e(hf,o3e),e(o3e,JWr),e(hf,YWr),e(hf,yee),e(yee,KWr),e(hf,ZWr),e(Kt,eQr),M(A0,Kt,null),e(Tr,oQr),e(Tr,Ur),M(m$,Ur,null),e(Ur,rQr),e(Ur,r3e),e(r3e,tQr),e(Ur,aQr),e(Ur,Ln),e(Ln,nQr),e(Ln,t3e),e(t3e,sQr),e(Ln,lQr),e(Ln,a3e),e(a3e,iQr),e(Ln,dQr),e(Ln,n3e),e(n3e,cQr),e(Ln,fQr),e(Ur,mQr),e(Ur,Xe),e(Xe,L0),e(L0,s3e),e(s3e,gQr),e(L0,hQr),e(L0,xee),e(xee,pQr),e(L0,uQr),e(Xe,_Qr),e(Xe,y0),e(y0,l3e),e(l3e,bQr),e(y0,vQr),e(y0,$ee),e($ee,FQr),e(y0,TQr),e(Xe,MQr),e(Xe,x0),e(x0,i3e),e(i3e,EQr),e(x0,CQr),e(x0,kee),e(kee,wQr),e(x0,AQr),e(Xe,LQr),e(Xe,$0),e($0,d3e),e(d3e,yQr),e($0,xQr),e($0,See),e(See,$Qr),e($0,kQr),e(Xe,SQr),e(Xe,k0),e(k0,c3e),e(c3e,RQr),e(k0,PQr),e(k0,Ree),e(Ree,BQr),e(k0,IQr),e(Xe,NQr),e(Xe,S0),e(S0,f3e),e(f3e,qQr),e(S0,jQr),e(S0,Pee),e(Pee,DQr),e(S0,GQr),e(Xe,OQr),e(Xe,R0),e(R0,m3e),e(m3e,VQr),e(R0,XQr),e(R0,Bee),e(Bee,zQr),e(R0,WQr),e(Xe,QQr),e(Xe,P0),e(P0,g3e),e(g3e,HQr),e(P0,UQr),e(P0,Iee),e(Iee,JQr),e(P0,YQr),e(Ur,KQr),M(B0,Ur,null),b(f,YOe,_),b(f,pf,_),e(pf,I0),e(I0,h3e),M(g$,h3e,null),e(pf,ZQr),e(pf,p3e),e(p3e,eHr),b(f,KOe,_),b(f,Mr,_),M(h$,Mr,null),e(Mr,oHr),e(Mr,uf),e(uf,rHr),e(uf,Nee),e(Nee,tHr),e(uf,aHr),e(uf,qee),e(qee,nHr),e(uf,sHr),e(Mr,lHr),e(Mr,p$),e(p$,iHr),e(p$,u3e),e(u3e,dHr),e(p$,cHr),e(Mr,fHr),e(Mr,Zt),M(u$,Zt,null),e(Zt,mHr),e(Zt,_3e),e(_3e,gHr),e(Zt,hHr),e(Zt,_f),e(_f,pHr),e(_f,b3e),e(b3e,uHr),e(_f,_Hr),e(_f,jee),e(jee,bHr),e(_f,vHr),e(Zt,FHr),M(N0,Zt,null),e(Mr,THr),e(Mr,Jr),M(_$,Jr,null),e(Jr,MHr),e(Jr,v3e),e(v3e,EHr),e(Jr,CHr),e(Jr,yn),e(yn,wHr),e(yn,F3e),e(F3e,AHr),e(yn,LHr),e(yn,T3e),e(T3e,yHr),e(yn,xHr),e(yn,M3e),e(M3e,$Hr),e(yn,kHr),e(Jr,SHr),e(Jr,E3e),e(E3e,q0),e(q0,C3e),e(C3e,RHr),e(q0,PHr),e(q0,Dee),e(Dee,BHr),e(q0,IHr),e(Jr,NHr),M(j0,Jr,null),b(f,ZOe,_),b(f,bf,_),e(bf,D0),e(D0,w3e),M(b$,w3e,null),e(bf,qHr),e(bf,A3e),e(A3e,jHr),b(f,eVe,_),b(f,Er,_),M(v$,Er,null),e(Er,DHr),e(Er,vf),e(vf,GHr),e(vf,Gee),e(Gee,OHr),e(vf,VHr),e(vf,Oee),e(Oee,XHr),e(vf,zHr),e(Er,WHr),e(Er,F$),e(F$,QHr),e(F$,L3e),e(L3e,HHr),e(F$,UHr),e(Er,JHr),e(Er,ea),M(T$,ea,null),e(ea,YHr),e(ea,y3e),e(y3e,KHr),e(ea,ZHr),e(ea,Ff),e(Ff,eUr),e(Ff,x3e),e(x3e,oUr),e(Ff,rUr),e(Ff,Vee),e(Vee,tUr),e(Ff,aUr),e(ea,nUr),M(G0,ea,null),e(Er,sUr),e(Er,Yr),M(M$,Yr,null),e(Yr,lUr),e(Yr,$3e),e($3e,iUr),e(Yr,dUr),e(Yr,xn),e(xn,cUr),e(xn,k3e),e(k3e,fUr),e(xn,mUr),e(xn,S3e),e(S3e,gUr),e(xn,hUr),e(xn,R3e),e(R3e,pUr),e(xn,uUr),e(Yr,_Ur),e(Yr,E$),e(E$,O0),e(O0,P3e),e(P3e,bUr),e(O0,vUr),e(O0,Xee),e(Xee,FUr),e(O0,TUr),e(E$,MUr),e(E$,V0),e(V0,B3e),e(B3e,EUr),e(V0,CUr),e(V0,zee),e(zee,wUr),e(V0,AUr),e(Yr,LUr),M(X0,Yr,null),b(f,oVe,_),b(f,Tf,_),e(Tf,z0),e(z0,I3e),M(C$,I3e,null),e(Tf,yUr),e(Tf,N3e),e(N3e,xUr),b(f,rVe,_),b(f,Cr,_),M(w$,Cr,null),e(Cr,$Ur),e(Cr,Mf),e(Mf,kUr),e(Mf,Wee),e(Wee,SUr),e(Mf,RUr),e(Mf,Qee),e(Qee,PUr),e(Mf,BUr),e(Cr,IUr),e(Cr,A$),e(A$,NUr),e(A$,q3e),e(q3e,qUr),e(A$,jUr),e(Cr,DUr),e(Cr,oa),M(L$,oa,null),e(oa,GUr),e(oa,j3e),e(j3e,OUr),e(oa,VUr),e(oa,Ef),e(Ef,XUr),e(Ef,D3e),e(D3e,zUr),e(Ef,WUr),e(Ef,Hee),e(Hee,QUr),e(Ef,HUr),e(oa,UUr),M(W0,oa,null),e(Cr,JUr),e(Cr,Kr),M(y$,Kr,null),e(Kr,YUr),e(Kr,G3e),e(G3e,KUr),e(Kr,ZUr),e(Kr,$n),e($n,eJr),e($n,O3e),e(O3e,oJr),e($n,rJr),e($n,V3e),e(V3e,tJr),e($n,aJr),e($n,X3e),e(X3e,nJr),e($n,sJr),e(Kr,lJr),e(Kr,z3e),e(z3e,Q0),e(Q0,W3e),e(W3e,iJr),e(Q0,dJr),e(Q0,Uee),e(Uee,cJr),e(Q0,fJr),e(Kr,mJr),M(H0,Kr,null),tVe=!0},p(f,[_]){const x$={};_&2&&(x$.$$scope={dirty:_,ctx:f}),Sf.$set(x$);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:f}),jg.$set(Q3e);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:f}),Th.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:f}),rp.$set(U3e);const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),tp.$set($$);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),Ep.$set(J3e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Cp.$set(kn);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),Lp.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),A_.$set(K3e);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),y_.$set(Z3e);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),v1.$set(k$);const e0e={};_&2&&(e0e.$$scope={dirty:_,ctx:f}),T1.$set(e0e);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),l7.$set(S$);const o0e={};_&2&&(o0e.$$scope={dirty:_,ctx:f}),d7.$set(o0e);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),Q7.$set(R$);const r0e={};_&2&&(r0e.$$scope={dirty:_,ctx:f}),U7.$set(r0e);const t0e={};_&2&&(t0e.$$scope={dirty:_,ctx:f}),h2.$set(t0e);const a0e={};_&2&&(a0e.$$scope={dirty:_,ctx:f}),u2.$set(a0e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),mb.$set(Cf);const n0e={};_&2&&(n0e.$$scope={dirty:_,ctx:f}),hb.$set(n0e);const s0e={};_&2&&(s0e.$$scope={dirty:_,ctx:f}),zb.$set(s0e);const l0e={};_&2&&(l0e.$$scope={dirty:_,ctx:f}),Qb.$set(l0e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),ev.$set(P$);const i0e={};_&2&&(i0e.$$scope={dirty:_,ctx:f}),rv.$set(i0e);const d0e={};_&2&&(d0e.$$scope={dirty:_,ctx:f}),jv.$set(d0e);const c0e={};_&2&&(c0e.$$scope={dirty:_,ctx:f}),Gv.$set(c0e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),xF.$set(rt);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),kF.$set(B$);const f0e={};_&2&&(f0e.$$scope={dirty:_,ctx:f}),PF.$set(f0e);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),IF.$set(I$);const m0e={};_&2&&(m0e.$$scope={dirty:_,ctx:f}),JF.$set(m0e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),KF.$set(tt);const g0e={};_&2&&(g0e.$$scope={dirty:_,ctx:f}),o6.$set(g0e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),t6.$set(wf);const h0e={};_&2&&(h0e.$$scope={dirty:_,ctx:f}),s6.$set(h0e);const p0e={};_&2&&(p0e.$$scope={dirty:_,ctx:f}),i6.$set(p0e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),v6.$set(L);const U0={};_&2&&(U0.$$scope={dirty:_,ctx:f}),T6.$set(U0);const u0e={};_&2&&(u0e.$$scope={dirty:_,ctx:f}),y6.$set(u0e);const _0e={};_&2&&(_0e.$$scope={dirty:_,ctx:f}),$6.$set(_0e);const J0={};_&2&&(J0.$$scope={dirty:_,ctx:f}),O6.$set(J0);const b0e={};_&2&&(b0e.$$scope={dirty:_,ctx:f}),X6.$set(b0e);const v0e={};_&2&&(v0e.$$scope={dirty:_,ctx:f}),H6.$set(v0e);const Y0={};_&2&&(Y0.$$scope={dirty:_,ctx:f}),J6.$set(Y0);const F0e={};_&2&&(F0e.$$scope={dirty:_,ctx:f}),tT.$set(F0e);const T0e={};_&2&&(T0e.$$scope={dirty:_,ctx:f}),nT.$set(T0e);const K0={};_&2&&(K0.$$scope={dirty:_,ctx:f}),cT.$set(K0);const M0e={};_&2&&(M0e.$$scope={dirty:_,ctx:f}),mT.$set(M0e);const E0e={};_&2&&(E0e.$$scope={dirty:_,ctx:f}),uT.$set(E0e);const Z0={};_&2&&(Z0.$$scope={dirty:_,ctx:f}),bT.$set(Z0);const C0e={};_&2&&(C0e.$$scope={dirty:_,ctx:f}),TT.$set(C0e);const w0e={};_&2&&(w0e.$$scope={dirty:_,ctx:f}),ET.$set(w0e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),xT.$set(ew);const A0e={};_&2&&(A0e.$$scope={dirty:_,ctx:f}),kT.$set(A0e);const L0e={};_&2&&(L0e.$$scope={dirty:_,ctx:f}),PT.$set(L0e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),IT.$set(ow);const y0e={};_&2&&(y0e.$$scope={dirty:_,ctx:f}),xM.$set(y0e);const x0e={};_&2&&(x0e.$$scope={dirty:_,ctx:f}),kM.$set(x0e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),o4.$set(rw);const $0e={};_&2&&($0e.$$scope={dirty:_,ctx:f}),t4.$set($0e);const k0e={};_&2&&(k0e.$$scope={dirty:_,ctx:f}),_4.$set(k0e);const tw={};_&2&&(tw.$$scope={dirty:_,ctx:f}),v4.$set(tw);const S0e={};_&2&&(S0e.$$scope={dirty:_,ctx:f}),C4.$set(S0e);const R0e={};_&2&&(R0e.$$scope={dirty:_,ctx:f}),A4.$set(R0e);const aw={};_&2&&(aw.$$scope={dirty:_,ctx:f}),Q4.$set(aw);const P0e={};_&2&&(P0e.$$scope={dirty:_,ctx:f}),U4.$set(P0e);const B0e={};_&2&&(B0e.$$scope={dirty:_,ctx:f}),sE.$set(B0e);const nw={};_&2&&(nw.$$scope={dirty:_,ctx:f}),iE.$set(nw);const I0e={};_&2&&(I0e.$$scope={dirty:_,ctx:f}),BE.$set(I0e);const N0e={};_&2&&(N0e.$$scope={dirty:_,ctx:f}),NE.$set(N0e);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),oC.$set(sw);const q0e={};_&2&&(q0e.$$scope={dirty:_,ctx:f}),tC.$set(q0e);const j0e={};_&2&&(j0e.$$scope={dirty:_,ctx:f}),sC.$set(j0e);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),iC.$set(lw);const D0e={};_&2&&(D0e.$$scope={dirty:_,ctx:f}),cC.$set(D0e);const G0e={};_&2&&(G0e.$$scope={dirty:_,ctx:f}),mC.$set(G0e);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),RC.$set(iw);const O0e={};_&2&&(O0e.$$scope={dirty:_,ctx:f}),BC.$set(O0e);const V0e={};_&2&&(V0e.$$scope={dirty:_,ctx:f}),r5.$set(V0e);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),a5.$set(dw);const X0e={};_&2&&(X0e.$$scope={dirty:_,ctx:f}),s5.$set(X0e);const z0e={};_&2&&(z0e.$$scope={dirty:_,ctx:f}),i5.$set(z0e);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),c5.$set(cw);const W0e={};_&2&&(W0e.$$scope={dirty:_,ctx:f}),m5.$set(W0e);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:f}),D5.$set(Q0e);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),O5.$set(fw);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:f}),Z5.$set(H0e);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:f}),o3.$set(U0e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),p3.$set(mw);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:f}),_3.$set(J0e);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:f}),y3.$set(Y0e);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),$3.$set(gw);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:f}),G3.$set(K0e);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:f}),V3.$set(Z0e);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),e0.$set(hw);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),r0.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),g0.$set(owe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),p0.$set(pw);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),C0.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),A0.$set(twe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),B0.$set(uw);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),N0.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),j0.$set(nwe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),G0.$set(_w);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),X0.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),W0.$set(lwe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),H0.$set(bw)},i(f){tVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(Sf.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(wL.$$.fragment,f),E(jg.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(kL.$$.fragment,f),E(Th.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(NL.$$.fragment,f),E(rp.$$.fragment,f),E(tp.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(VL.$$.fragment,f),E(Ep.$$.fragment,f),E(Cp.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(Lp.$$.fragment,f),E(UL.$$.fragment,f),E(A_.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(y_.$$.fragment,f),E(ey.$$.fragment,f),E(v1.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(T1.$$.fragment,f),E(ny.$$.fragment,f),E(l7.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(d7.$$.fragment,f),E(cy.$$.fragment,f),E(Q7.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(U7.$$.fragment,f),E(py.$$.fragment,f),E(h2.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(u2.$$.fragment,f),E(Fy.$$.fragment,f),E(mb.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(hb.$$.fragment,f),E(wy.$$.fragment,f),E(zb.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Qb.$$.fragment,f),E($y.$$.fragment,f),E(ev.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(rv.$$.fragment,f),E(By.$$.fragment,f),E(jv.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gv.$$.fragment,f),E(Dy.$$.fragment,f),E(xF.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(kF.$$.fragment,f),E(zy.$$.fragment,f),E(PF.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(IF.$$.fragment,f),E(Jy.$$.fragment,f),E(JF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(KF.$$.fragment,f),E(o8.$$.fragment,f),E(o6.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(t6.$$.fragment,f),E(s8.$$.fragment,f),E(s6.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(i6.$$.fragment,f),E(f8.$$.fragment,f),E(v6.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(T6.$$.fragment,f),E(u8.$$.fragment,f),E(y6.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E($6.$$.fragment,f),E(T8.$$.fragment,f),E(O6.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(X6.$$.fragment,f),E(A8.$$.fragment,f),E(H6.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(J6.$$.fragment,f),E(S8.$$.fragment,f),E(tT.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(nT.$$.fragment,f),E(N8.$$.fragment,f),E(cT.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(mT.$$.fragment,f),E(O8.$$.fragment,f),E(uT.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(bT.$$.fragment,f),E(H8.$$.fragment,f),E(TT.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(ET.$$.fragment,f),E(Z8.$$.fragment,f),E(xT.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(kT.$$.fragment,f),E(a9.$$.fragment,f),E(PT.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(IT.$$.fragment,f),E(d9.$$.fragment,f),E(xM.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(kM.$$.fragment,f),E(h9.$$.fragment,f),E(o4.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(t4.$$.fragment,f),E(v9.$$.fragment,f),E(_4.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(v4.$$.fragment,f),E(C9.$$.fragment,f),E(C4.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(A4.$$.fragment,f),E(x9.$$.fragment,f),E(Q4.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(U4.$$.fragment,f),E(P9.$$.fragment,f),E(sE.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(iE.$$.fragment,f),E(j9.$$.fragment,f),E(BE.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(NE.$$.fragment,f),E(X9.$$.fragment,f),E(oC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(tC.$$.fragment,f),E(U9.$$.fragment,f),E(sC.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(iC.$$.fragment,f),E(ox.$$.fragment,f),E(cC.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(mC.$$.fragment,f),E(sx.$$.fragment,f),E(RC.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(BC.$$.fragment,f),E(fx.$$.fragment,f),E(r5.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(a5.$$.fragment,f),E(ux.$$.fragment,f),E(s5.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(i5.$$.fragment,f),E(Tx.$$.fragment,f),E(c5.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(m5.$$.fragment,f),E(Ax.$$.fragment,f),E(D5.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(O5.$$.fragment,f),E(kx.$$.fragment,f),E(Z5.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(o3.$$.fragment,f),E(Ix.$$.fragment,f),E(p3.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(_3.$$.fragment,f),E(Gx.$$.fragment,f),E(y3.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E($3.$$.fragment,f),E(Wx.$$.fragment,f),E(G3.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(V3.$$.fragment,f),E(Yx.$$.fragment,f),E(e0.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(r0.$$.fragment,f),E(r$.$$.fragment,f),E(g0.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(p0.$$.fragment,f),E(l$.$$.fragment,f),E(C0.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(A0.$$.fragment,f),E(m$.$$.fragment,f),E(B0.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(u$.$$.fragment,f),E(N0.$$.fragment,f),E(_$.$$.fragment,f),E(j0.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(G0.$$.fragment,f),E(M$.$$.fragment,f),E(X0.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(W0.$$.fragment,f),E(y$.$$.fragment,f),E(H0.$$.fragment,f),tVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(Sf.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(wL.$$.fragment,f),C(jg.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(kL.$$.fragment,f),C(Th.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(NL.$$.fragment,f),C(rp.$$.fragment,f),C(tp.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(VL.$$.fragment,f),C(Ep.$$.fragment,f),C(Cp.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(Lp.$$.fragment,f),C(UL.$$.fragment,f),C(A_.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(y_.$$.fragment,f),C(ey.$$.fragment,f),C(v1.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(T1.$$.fragment,f),C(ny.$$.fragment,f),C(l7.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(d7.$$.fragment,f),C(cy.$$.fragment,f),C(Q7.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(U7.$$.fragment,f),C(py.$$.fragment,f),C(h2.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(u2.$$.fragment,f),C(Fy.$$.fragment,f),C(mb.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(hb.$$.fragment,f),C(wy.$$.fragment,f),C(zb.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Qb.$$.fragment,f),C($y.$$.fragment,f),C(ev.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(rv.$$.fragment,f),C(By.$$.fragment,f),C(jv.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gv.$$.fragment,f),C(Dy.$$.fragment,f),C(xF.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(kF.$$.fragment,f),C(zy.$$.fragment,f),C(PF.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(IF.$$.fragment,f),C(Jy.$$.fragment,f),C(JF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(KF.$$.fragment,f),C(o8.$$.fragment,f),C(o6.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(t6.$$.fragment,f),C(s8.$$.fragment,f),C(s6.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(i6.$$.fragment,f),C(f8.$$.fragment,f),C(v6.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(T6.$$.fragment,f),C(u8.$$.fragment,f),C(y6.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C($6.$$.fragment,f),C(T8.$$.fragment,f),C(O6.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(X6.$$.fragment,f),C(A8.$$.fragment,f),C(H6.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(J6.$$.fragment,f),C(S8.$$.fragment,f),C(tT.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(nT.$$.fragment,f),C(N8.$$.fragment,f),C(cT.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(mT.$$.fragment,f),C(O8.$$.fragment,f),C(uT.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(bT.$$.fragment,f),C(H8.$$.fragment,f),C(TT.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(ET.$$.fragment,f),C(Z8.$$.fragment,f),C(xT.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(kT.$$.fragment,f),C(a9.$$.fragment,f),C(PT.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(IT.$$.fragment,f),C(d9.$$.fragment,f),C(xM.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(kM.$$.fragment,f),C(h9.$$.fragment,f),C(o4.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(t4.$$.fragment,f),C(v9.$$.fragment,f),C(_4.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(v4.$$.fragment,f),C(C9.$$.fragment,f),C(C4.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(A4.$$.fragment,f),C(x9.$$.fragment,f),C(Q4.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(U4.$$.fragment,f),C(P9.$$.fragment,f),C(sE.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(iE.$$.fragment,f),C(j9.$$.fragment,f),C(BE.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(NE.$$.fragment,f),C(X9.$$.fragment,f),C(oC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(tC.$$.fragment,f),C(U9.$$.fragment,f),C(sC.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(iC.$$.fragment,f),C(ox.$$.fragment,f),C(cC.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(mC.$$.fragment,f),C(sx.$$.fragment,f),C(RC.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(BC.$$.fragment,f),C(fx.$$.fragment,f),C(r5.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(a5.$$.fragment,f),C(ux.$$.fragment,f),C(s5.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(i5.$$.fragment,f),C(Tx.$$.fragment,f),C(c5.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(m5.$$.fragment,f),C(Ax.$$.fragment,f),C(D5.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(O5.$$.fragment,f),C(kx.$$.fragment,f),C(Z5.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(o3.$$.fragment,f),C(Ix.$$.fragment,f),C(p3.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(_3.$$.fragment,f),C(Gx.$$.fragment,f),C(y3.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C($3.$$.fragment,f),C(Wx.$$.fragment,f),C(G3.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(V3.$$.fragment,f),C(Yx.$$.fragment,f),C(e0.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(r0.$$.fragment,f),C(r$.$$.fragment,f),C(g0.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(p0.$$.fragment,f),C(l$.$$.fragment,f),C(C0.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(A0.$$.fragment,f),C(m$.$$.fragment,f),C(B0.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(u$.$$.fragment,f),C(N0.$$.fragment,f),C(_$.$$.fragment,f),C(j0.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(G0.$$.fragment,f),C(M$.$$.fragment,f),C(X0.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(W0.$$.fragment,f),C(y$.$$.fragment,f),C(H0.$$.fragment,f),tVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(KDe),f&&t(Li),w(vL),f&&t(ZDe),f&&t(In),f&&t(eGe),w(FL,f),f&&t(oGe),f&&t(Jk),f&&t(rGe),w(Sf,f),f&&t(tGe),f&&t(yi),w(TL),f&&t(aGe),f&&t(wo),w(ML),w(wL),w(jg),w(AL),f&&t(nGe),f&&t($i),w(LL),f&&t(sGe),f&&t(Ao),w(yL),w(kL),w(Th),w(SL),f&&t(lGe),f&&t(ki),w(RL),f&&t(iGe),f&&t(Lo),w(PL),w(NL),w(rp),w(tp),w(qL),f&&t(dGe),f&&t(Si),w(jL),f&&t(cGe),f&&t(yo),w(DL),w(VL),w(Ep),w(Cp),w(XL),f&&t(fGe),f&&t(Pi),w(zL),f&&t(mGe),f&&t(xo),w(WL),w(HL),w(Lp),w(UL),w(A_),f&&t(gGe),f&&t(Ni),w(JL),f&&t(hGe),f&&t($o),w(YL),w(ZL),w(y_),w(ey),w(v1),f&&t(pGe),f&&t(Di),w(oy),f&&t(uGe),f&&t(ko),w(ry),w(ay),w(T1),w(ny),w(l7),f&&t(_Ge),f&&t(Vi),w(sy),f&&t(bGe),f&&t(So),w(ly),w(dy),w(d7),w(cy),w(Q7),f&&t(vGe),f&&t(Wi),w(fy),f&&t(FGe),f&&t(Ro),w(my),w(hy),w(U7),w(py),w(h2),f&&t(TGe),f&&t(Ui),w(uy),f&&t(MGe),f&&t(Po),w(_y),w(vy),w(u2),w(Fy),w(mb),f&&t(EGe),f&&t(Ki),w(Ty),f&&t(CGe),f&&t(Bo),w(My),w(Cy),w(hb),w(wy),w(zb),f&&t(wGe),f&&t(od),w(Ay),f&&t(AGe),f&&t(Io),w(Ly),w(xy),w(Qb),w($y),w(ev),f&&t(LGe),f&&t(ad),w(ky),f&&t(yGe),f&&t(No),w(Sy),w(Py),w(rv),w(By),w(jv),f&&t(xGe),f&&t(ld),w(Iy),f&&t($Ge),f&&t(qo),w(Ny),w(jy),w(Gv),w(Dy),w(xF),f&&t(kGe),f&&t(cd),w(Gy),f&&t(SGe),f&&t(jo),w(Oy),w(Xy),w(kF),w(zy),w(PF),f&&t(RGe),f&&t(gd),w(Wy),f&&t(PGe),f&&t(Do),w(Qy),w(Uy),w(IF),w(Jy),w(JF),f&&t(BGe),f&&t(ud),w(Yy),f&&t(IGe),f&&t(Go),w(Ky),w(e8),w(KF),w(o8),w(o6),f&&t(NGe),f&&t(vd),w(r8),f&&t(qGe),f&&t(Oo),w(t8),w(n8),w(t6),w(s8),w(s6),f&&t(jGe),f&&t(Md),w(l8),f&&t(DGe),f&&t(Vo),w(i8),w(c8),w(i6),w(f8),w(v6),f&&t(GGe),f&&t(wd),w(m8),f&&t(OGe),f&&t(Xo),w(g8),w(p8),w(T6),w(u8),w(y6),f&&t(VGe),f&&t(yd),w(_8),f&&t(XGe),f&&t(zo),w(b8),w(F8),w($6),w(T8),w(O6),f&&t(zGe),f&&t(kd),w(M8),f&&t(WGe),f&&t(Wo),w(E8),w(w8),w(X6),w(A8),w(H6),f&&t(QGe),f&&t(Pd),w(y8),f&&t(HGe),f&&t(Qo),w(x8),w(k8),w(J6),w(S8),w(tT),f&&t(UGe),f&&t(Nd),w(R8),f&&t(JGe),f&&t(Ho),w(P8),w(I8),w(nT),w(N8),w(cT),f&&t(YGe),f&&t(Gd),w(q8),f&&t(KGe),f&&t(Uo),w(j8),w(G8),w(mT),w(O8),w(uT),f&&t(ZGe),f&&t(Xd),w(X8),f&&t(eOe),f&&t(Jo),w(z8),w(Q8),w(bT),w(H8),w(TT),f&&t(oOe),f&&t(Qd),w(U8),f&&t(rOe),f&&t(Yo),w(J8),w(K8),w(ET),w(Z8),w(xT),f&&t(tOe),f&&t(Jd),w(e9),f&&t(aOe),f&&t(Ko),w(o9),w(t9),w(kT),w(a9),w(PT),f&&t(nOe),f&&t(Zd),w(n9),f&&t(sOe),f&&t(Zo),w(s9),w(i9),w(IT),w(d9),w(xM),f&&t(lOe),f&&t(rc),w(c9),f&&t(iOe),f&&t(er),w(f9),w(g9),w(kM),w(h9),w(o4),f&&t(dOe),f&&t(nc),w(p9),f&&t(cOe),f&&t(or),w(u9),w(b9),w(t4),w(v9),w(_4),f&&t(fOe),f&&t(ic),w(F9),f&&t(mOe),f&&t(rr),w(T9),w(E9),w(v4),w(C9),w(C4),f&&t(gOe),f&&t(fc),w(w9),f&&t(hOe),f&&t(tr),w(A9),w(y9),w(A4),w(x9),w(Q4),f&&t(pOe),f&&t(hc),w($9),f&&t(uOe),f&&t(ar),w(k9),w(R9),w(U4),w(P9),w(sE),f&&t(_Oe),f&&t(_c),w(B9),f&&t(bOe),f&&t(nr),w(I9),w(q9),w(iE),w(j9),w(BE),f&&t(vOe),f&&t(Fc),w(D9),f&&t(FOe),f&&t(sr),w(G9),w(V9),w(NE),w(X9),w(oC),f&&t(TOe),f&&t(Ec),w(z9),f&&t(MOe),f&&t(lr),w(W9),w(H9),w(tC),w(U9),w(sC),f&&t(EOe),f&&t(Ac),w(Y9),f&&t(COe),f&&t(ir),w(K9),w(ex),w(iC),w(ox),w(cC),f&&t(wOe),f&&t(xc),w(rx),f&&t(AOe),f&&t(dr),w(tx),w(nx),w(mC),w(sx),w(RC),f&&t(LOe),f&&t(Sc),w(lx),f&&t(yOe),f&&t(cr),w(ix),w(cx),w(BC),w(fx),w(r5),f&&t(xOe),f&&t(Bc),w(mx),f&&t($Oe),f&&t(fr),w(gx),w(px),w(a5),w(ux),w(s5),f&&t(kOe),f&&t(qc),w(_x),f&&t(SOe),f&&t(mr),w(bx),w(Fx),w(i5),w(Tx),w(c5),f&&t(ROe),f&&t(Gc),w(Mx),f&&t(POe),f&&t(gr),w(Ex),w(wx),w(m5),w(Ax),w(D5),f&&t(BOe),f&&t(Xc),w(Lx),f&&t(IOe),f&&t(hr),w(yx),w($x),w(O5),w(kx),w(Z5),f&&t(NOe),f&&t(Qc),w(Sx),f&&t(qOe),f&&t(pr),w(Rx),w(Bx),w(o3),w(Ix),w(p3),f&&t(jOe),f&&t(Jc),w(Nx),f&&t(DOe),f&&t(ur),w(qx),w(Dx),w(_3),w(Gx),w(y3),f&&t(GOe),f&&t(Zc),w(Ox),f&&t(OOe),f&&t(_r),w(Vx),w(zx),w($3),w(Wx),w(G3),f&&t(VOe),f&&t(rf),w(Qx),f&&t(XOe),f&&t(br),w(Hx),w(Jx),w(V3),w(Yx),w(e0),f&&t(zOe),f&&t(nf),w(Kx),f&&t(WOe),f&&t(vr),w(Zx),w(o$),w(r0),w(r$),w(g0),f&&t(QOe),f&&t(df),w(t$),f&&t(HOe),f&&t(Fr),w(a$),w(s$),w(p0),w(l$),w(C0),f&&t(UOe),f&&t(mf),w(i$),f&&t(JOe),f&&t(Tr),w(d$),w(f$),w(A0),w(m$),w(B0),f&&t(YOe),f&&t(pf),w(g$),f&&t(KOe),f&&t(Mr),w(h$),w(u$),w(N0),w(_$),w(j0),f&&t(ZOe),f&&t(bf),w(b$),f&&t(eVe),f&&t(Er),w(v$),w(T$),w(G0),w(M$),w(X0),f&&t(oVe),f&&t(Tf),w(C$),f&&t(rVe),f&&t(Cr),w(w$),w(L$),w(W0),w(y$),w(H0)}}}const bDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vDt(y){return _qt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ADt extends gqt{constructor(g){super();hqt(this,g,vDt,_Dt,pqt,{})}}export{ADt as default,bDt as metadata};
