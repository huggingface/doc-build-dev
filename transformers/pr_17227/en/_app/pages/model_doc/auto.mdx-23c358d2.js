import{S as T8t,i as M8t,s as E8t,e as a,k as l,w as F,t as o,M as C8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as w8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function A8t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,c6,pf,De,We,gi,yn,f6,Ln,xn,m6,hi,$n,g6,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),c6=o(")."),pf=l(),De=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),f6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),m6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),g6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var k$=s(p);m=r(k$,"NewModelConfig"),k$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var S$=s(ci);hf=r(S$,"model_type"),S$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var R$=s(fi);mi=r(R$,'"new-model"'),R$.forEach(t),c6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),f6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var P$=s(Ln);xn=r(P$,"PreTrainedModel"),P$.forEach(t),m6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),g6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var B$=s(pi);_f=r(B$,"NewModelConfig"),B$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,c6),b(Qe,pf,Ae),b(Qe,De,Ae),e(De,We),e(De,gi),e(gi,yn),e(De,f6),e(De,Ln),e(Ln,xn),e(De,m6),e(De,hi),e(hi,$n),e(De,g6),e(De,pi),e(pi,_f),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(De)}}}function y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function $8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function S8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,c6,pf,De,We,gi,yn,f6,Ln,xn,m6,hi,$n,g6,pi,_f,Ca,Qe,Ae,k$,_i,S$,R$,Eo,wa,P$,uf,B$,cGe,ZIe,ui,bf,kee,h6,fGe,See,mGe,eqe,kn,gGe,Ree,hGe,pGe,Pee,_Ge,uGe,oqe,p6,rqe,I$,bGe,tqe,vf,aqe,bi,Ff,Bee,_6,vGe,Iee,FGe,nqe,Co,u6,TGe,b6,MGe,q$,EGe,CGe,wGe,v6,AGe,qee,yGe,LGe,xGe,Er,F6,$Ge,Nee,kGe,SGe,vi,RGe,jee,PGe,BGe,Dee,IGe,qGe,NGe,A,Tf,Gee,jGe,DGe,N$,GGe,OGe,VGe,Mf,Oee,XGe,zGe,j$,WGe,QGe,HGe,Ef,Vee,UGe,JGe,D$,YGe,KGe,ZGe,Cf,Xee,eOe,oOe,G$,rOe,tOe,aOe,wf,zee,nOe,sOe,O$,lOe,iOe,dOe,Af,Wee,cOe,fOe,V$,mOe,gOe,hOe,yf,Qee,pOe,_Oe,X$,uOe,bOe,vOe,Lf,Hee,FOe,TOe,z$,MOe,EOe,COe,xf,Uee,wOe,AOe,W$,yOe,LOe,xOe,$f,Jee,$Oe,kOe,Q$,SOe,ROe,POe,kf,Yee,BOe,IOe,H$,qOe,NOe,jOe,Sf,Kee,DOe,GOe,U$,OOe,VOe,XOe,Rf,Zee,zOe,WOe,J$,QOe,HOe,UOe,Pf,eoe,JOe,YOe,Y$,KOe,ZOe,eVe,Bf,ooe,oVe,rVe,K$,tVe,aVe,nVe,If,roe,sVe,lVe,Z$,iVe,dVe,cVe,qf,toe,fVe,mVe,ek,gVe,hVe,pVe,Nf,aoe,_Ve,uVe,ok,bVe,vVe,FVe,jf,noe,TVe,MVe,rk,EVe,CVe,wVe,Df,soe,AVe,yVe,tk,LVe,xVe,$Ve,Gf,loe,kVe,SVe,ak,RVe,PVe,BVe,Of,ioe,IVe,qVe,nk,NVe,jVe,DVe,Vf,doe,GVe,OVe,sk,VVe,XVe,zVe,Xf,coe,WVe,QVe,lk,HVe,UVe,JVe,zf,foe,YVe,KVe,ik,ZVe,eXe,oXe,Wf,moe,rXe,tXe,dk,aXe,nXe,sXe,Qf,goe,lXe,iXe,ck,dXe,cXe,fXe,Hf,hoe,mXe,gXe,fk,hXe,pXe,_Xe,Uf,poe,uXe,bXe,mk,vXe,FXe,TXe,Jf,_oe,MXe,EXe,gk,CXe,wXe,AXe,Yf,uoe,yXe,LXe,hk,xXe,$Xe,kXe,Kf,boe,SXe,RXe,pk,PXe,BXe,IXe,Zf,voe,qXe,NXe,_k,jXe,DXe,GXe,em,Foe,OXe,VXe,uk,XXe,zXe,WXe,om,Toe,QXe,HXe,bk,UXe,JXe,YXe,rm,Moe,KXe,ZXe,vk,eze,oze,rze,tm,Eoe,tze,aze,Fk,nze,sze,lze,am,Coe,ize,dze,Tk,cze,fze,mze,nm,woe,gze,hze,Mk,pze,_ze,uze,sm,Aoe,bze,vze,Ek,Fze,Tze,Mze,lm,yoe,Eze,Cze,Ck,wze,Aze,yze,im,Loe,Lze,xze,wk,$ze,kze,Sze,dm,xoe,Rze,Pze,Ak,Bze,Ize,qze,cm,$oe,Nze,jze,yk,Dze,Gze,Oze,fm,koe,Vze,Xze,Lk,zze,Wze,Qze,mm,Soe,Hze,Uze,xk,Jze,Yze,Kze,gm,Roe,Zze,eWe,$k,oWe,rWe,tWe,hm,Poe,aWe,nWe,kk,sWe,lWe,iWe,pm,Boe,dWe,cWe,Sk,fWe,mWe,gWe,_m,Ioe,hWe,pWe,Rk,_We,uWe,bWe,um,qoe,vWe,FWe,Pk,TWe,MWe,EWe,bm,Noe,CWe,wWe,Bk,AWe,yWe,LWe,vm,joe,xWe,$We,Ik,kWe,SWe,RWe,Fm,Doe,PWe,BWe,qk,IWe,qWe,NWe,Tm,Goe,jWe,DWe,Nk,GWe,OWe,VWe,Mm,Ooe,XWe,zWe,jk,WWe,QWe,HWe,Em,Voe,UWe,JWe,Dk,YWe,KWe,ZWe,Cm,Xoe,eQe,oQe,Gk,rQe,tQe,aQe,wm,zoe,nQe,sQe,Ok,lQe,iQe,dQe,Am,Woe,cQe,fQe,Vk,mQe,gQe,hQe,ym,Qoe,pQe,_Qe,Xk,uQe,bQe,vQe,Lm,Hoe,FQe,TQe,zk,MQe,EQe,CQe,xm,Uoe,wQe,AQe,Wk,yQe,LQe,xQe,$m,Joe,$Qe,kQe,Qk,SQe,RQe,PQe,km,Yoe,BQe,IQe,Hk,qQe,NQe,jQe,Sm,Koe,DQe,GQe,Uk,OQe,VQe,XQe,Rm,Zoe,zQe,WQe,Jk,QQe,HQe,UQe,Pm,ere,JQe,YQe,Yk,KQe,ZQe,eHe,Bm,ore,oHe,rHe,Kk,tHe,aHe,nHe,Im,rre,sHe,lHe,Zk,iHe,dHe,cHe,qm,tre,fHe,mHe,eS,gHe,hHe,pHe,Nm,are,_He,uHe,oS,bHe,vHe,FHe,jm,nre,THe,MHe,rS,EHe,CHe,wHe,Dm,sre,AHe,yHe,tS,LHe,xHe,$He,Gm,lre,kHe,SHe,aS,RHe,PHe,BHe,Om,ire,IHe,qHe,nS,NHe,jHe,DHe,Vm,dre,GHe,OHe,sS,VHe,XHe,zHe,Xm,cre,WHe,QHe,lS,HHe,UHe,JHe,zm,fre,YHe,KHe,iS,ZHe,eUe,oUe,Wm,mre,rUe,tUe,dS,aUe,nUe,sUe,Qm,gre,lUe,iUe,cS,dUe,cUe,fUe,Hm,hre,mUe,gUe,fS,hUe,pUe,_Ue,Um,pre,uUe,bUe,mS,vUe,FUe,TUe,Jm,_re,MUe,EUe,gS,CUe,wUe,AUe,Ym,ure,yUe,LUe,hS,xUe,$Ue,kUe,Km,bre,SUe,RUe,pS,PUe,BUe,IUe,Zm,vre,qUe,NUe,_S,jUe,DUe,GUe,eg,Fre,OUe,VUe,uS,XUe,zUe,WUe,og,Tre,QUe,HUe,bS,UUe,JUe,YUe,rg,Mre,KUe,ZUe,vS,eJe,oJe,rJe,tg,Ere,tJe,aJe,FS,nJe,sJe,lJe,ag,Cre,iJe,dJe,TS,cJe,fJe,mJe,ng,wre,gJe,hJe,MS,pJe,_Je,uJe,sg,Are,bJe,vJe,ES,FJe,TJe,MJe,lg,yre,EJe,CJe,CS,wJe,AJe,yJe,ig,Lre,LJe,xJe,wS,$Je,kJe,SJe,dg,xre,RJe,PJe,AS,BJe,IJe,qJe,cg,$re,NJe,jJe,yS,DJe,GJe,OJe,fg,kre,VJe,XJe,LS,zJe,WJe,QJe,mg,Sre,HJe,UJe,xS,JJe,YJe,KJe,gg,Rre,ZJe,eYe,$S,oYe,rYe,tYe,hg,Pre,aYe,nYe,kS,sYe,lYe,iYe,pg,Bre,dYe,cYe,SS,fYe,mYe,gYe,_g,Ire,hYe,pYe,RS,_Ye,uYe,bYe,ug,qre,vYe,FYe,PS,TYe,MYe,EYe,bg,Nre,CYe,wYe,BS,AYe,yYe,LYe,vg,xYe,Fg,T6,$Ye,jre,kYe,sqe,Fi,Tg,Dre,M6,SYe,Gre,RYe,lqe,wo,E6,PYe,C6,BYe,IS,IYe,qYe,NYe,w6,jYe,Ore,DYe,GYe,OYe,Cr,A6,VYe,Vre,XYe,zYe,Aa,WYe,Xre,QYe,HYe,zre,UYe,JYe,Wre,YYe,KYe,ZYe,k,Sn,Qre,eKe,oKe,qS,rKe,tKe,NS,aKe,nKe,sKe,Rn,Hre,lKe,iKe,jS,dKe,cKe,DS,fKe,mKe,gKe,Pn,Ure,hKe,pKe,GS,_Ke,uKe,OS,bKe,vKe,FKe,Mg,Jre,TKe,MKe,VS,EKe,CKe,wKe,Bn,Yre,AKe,yKe,XS,LKe,xKe,zS,$Ke,kKe,SKe,Eg,Kre,RKe,PKe,WS,BKe,IKe,qKe,Cg,Zre,NKe,jKe,QS,DKe,GKe,OKe,wg,ete,VKe,XKe,HS,zKe,WKe,QKe,In,ote,HKe,UKe,US,JKe,YKe,JS,KKe,ZKe,eZe,qn,rte,oZe,rZe,YS,tZe,aZe,KS,nZe,sZe,lZe,Nn,tte,iZe,dZe,ZS,cZe,fZe,eR,mZe,gZe,hZe,Ag,ate,pZe,_Ze,oR,uZe,bZe,vZe,yg,nte,FZe,TZe,rR,MZe,EZe,CZe,jn,ste,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,Lg,lte,SZe,RZe,nR,PZe,BZe,IZe,Dn,ite,qZe,NZe,sR,jZe,DZe,lR,GZe,OZe,VZe,Gn,dte,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,On,cte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,xg,fte,aeo,neo,mR,seo,leo,ieo,Vn,mte,deo,ceo,gR,feo,meo,hR,geo,heo,peo,Xn,gte,_eo,ueo,pR,beo,veo,_R,Feo,Teo,Meo,zn,hte,Eeo,Ceo,uR,weo,Aeo,bR,yeo,Leo,xeo,Wn,pte,$eo,keo,vR,Seo,Reo,FR,Peo,Beo,Ieo,Qn,_te,qeo,Neo,TR,jeo,Deo,MR,Geo,Oeo,Veo,Hn,ute,Xeo,zeo,ER,Weo,Qeo,CR,Heo,Ueo,Jeo,$g,bte,Yeo,Keo,wR,Zeo,eoo,ooo,Un,vte,roo,too,AR,aoo,noo,yR,soo,loo,ioo,kg,Fte,doo,coo,LR,foo,moo,goo,Jn,Tte,hoo,poo,xR,_oo,uoo,$R,boo,voo,Foo,Yn,Mte,Too,Moo,kR,Eoo,Coo,SR,woo,Aoo,yoo,Kn,Ete,Loo,xoo,RR,$oo,koo,PR,Soo,Roo,Poo,Zn,Cte,Boo,Ioo,BR,qoo,Noo,IR,joo,Doo,Goo,es,wte,Ooo,Voo,qR,Xoo,zoo,NR,Woo,Qoo,Hoo,Sg,Ate,Uoo,Joo,jR,Yoo,Koo,Zoo,os,yte,ero,oro,DR,rro,tro,GR,aro,nro,sro,rs,Lte,lro,iro,OR,dro,cro,VR,fro,mro,gro,ts,xte,hro,pro,XR,_ro,uro,zR,bro,vro,Fro,as,$te,Tro,Mro,WR,Ero,Cro,QR,wro,Aro,yro,ns,kte,Lro,xro,HR,$ro,kro,UR,Sro,Rro,Pro,ss,Ste,Bro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,Rg,Rte,Oro,Vro,KR,Xro,zro,Wro,ls,Pte,Qro,Hro,ZR,Uro,Jro,eP,Yro,Kro,Zro,Pg,Bte,eto,oto,oP,rto,tto,ato,Bg,Ite,nto,sto,rP,lto,ito,dto,is,qte,cto,fto,tP,mto,gto,aP,hto,pto,_to,ds,Nte,uto,bto,nP,vto,Fto,sP,Tto,Mto,Eto,cs,jte,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,Ig,Dte,kto,Sto,dP,Rto,Pto,Bto,fs,Gte,Ito,qto,cP,Nto,jto,fP,Dto,Gto,Oto,ms,Ote,Vto,Xto,mP,zto,Wto,gP,Qto,Hto,Uto,gs,Vte,Jto,Yto,hP,Kto,Zto,pP,eao,oao,rao,hs,Xte,tao,aao,_P,nao,sao,uP,lao,iao,dao,ps,zte,cao,fao,bP,mao,gao,vP,hao,pao,_ao,qg,Wte,uao,bao,FP,vao,Fao,Tao,_s,Qte,Mao,Eao,TP,Cao,wao,MP,Aao,yao,Lao,Ng,Hte,xao,$ao,EP,kao,Sao,Rao,jg,Ute,Pao,Bao,CP,Iao,qao,Nao,Dg,Jte,jao,Dao,wP,Gao,Oao,Vao,Gg,Yte,Xao,zao,AP,Wao,Qao,Hao,us,Kte,Uao,Jao,yP,Yao,Kao,LP,Zao,eno,ono,Og,Zte,rno,tno,xP,ano,nno,sno,bs,eae,lno,ino,$P,dno,cno,kP,fno,mno,gno,vs,oae,hno,pno,SP,_no,uno,RP,bno,vno,Fno,Fs,rae,Tno,Mno,PP,Eno,Cno,BP,wno,Ano,yno,Ts,tae,Lno,xno,IP,$no,kno,qP,Sno,Rno,Pno,Ms,aae,Bno,Ino,NP,qno,Nno,jP,jno,Dno,Gno,Es,nae,Ono,Vno,DP,Xno,zno,GP,Wno,Qno,Hno,Vg,sae,Uno,Jno,OP,Yno,Kno,Zno,Xg,lae,eso,oso,VP,rso,tso,aso,Cs,iae,nso,sso,XP,lso,iso,zP,dso,cso,fso,ws,dae,mso,gso,WP,hso,pso,QP,_so,uso,bso,As,cae,vso,Fso,HP,Tso,Mso,UP,Eso,Cso,wso,zg,fae,Aso,yso,JP,Lso,xso,$so,Wg,mae,kso,Sso,YP,Rso,Pso,Bso,Qg,gae,Iso,qso,KP,Nso,jso,Dso,ys,hae,Gso,Oso,ZP,Vso,Xso,eB,zso,Wso,Qso,Hg,pae,Hso,Uso,oB,Jso,Yso,Kso,Ug,_ae,Zso,elo,rB,olo,rlo,tlo,Jg,uae,alo,nlo,tB,slo,llo,ilo,Ls,bae,dlo,clo,aB,flo,mlo,nB,glo,hlo,plo,Yg,vae,_lo,ulo,sB,blo,vlo,Flo,Kg,Fae,Tlo,Mlo,lB,Elo,Clo,wlo,xs,Tae,Alo,ylo,iB,Llo,xlo,dB,$lo,klo,Slo,$s,Mae,Rlo,Plo,cB,Blo,Ilo,fB,qlo,Nlo,jlo,ks,Eae,Dlo,Glo,mB,Olo,Vlo,gB,Xlo,zlo,Wlo,Ss,Cae,Qlo,Hlo,hB,Ulo,Jlo,pB,Ylo,Klo,Zlo,Zg,eio,eh,y6,oio,wae,rio,iqe,Ti,oh,Aae,L6,tio,yae,aio,dqe,Ao,x6,nio,$6,sio,_B,lio,iio,dio,k6,cio,Lae,fio,mio,gio,He,S6,hio,xae,pio,_io,ya,uio,$ae,bio,vio,kae,Fio,Tio,Sae,Mio,Eio,Cio,Z,rh,Rae,wio,Aio,uB,yio,Lio,xio,th,Pae,$io,kio,bB,Sio,Rio,Pio,ah,Bae,Bio,Iio,vB,qio,Nio,jio,nh,Iae,Dio,Gio,FB,Oio,Vio,Xio,sh,qae,zio,Wio,TB,Qio,Hio,Uio,lh,Nae,Jio,Yio,MB,Kio,Zio,edo,ih,jae,odo,rdo,EB,tdo,ado,ndo,dh,Dae,sdo,ldo,CB,ido,ddo,cdo,ch,Gae,fdo,mdo,wB,gdo,hdo,pdo,fh,Oae,_do,udo,AB,bdo,vdo,Fdo,mh,Vae,Tdo,Mdo,yB,Edo,Cdo,wdo,gh,Xae,Ado,ydo,LB,Ldo,xdo,$do,hh,zae,kdo,Sdo,xB,Rdo,Pdo,Bdo,ph,Wae,Ido,qdo,$B,Ndo,jdo,Ddo,_h,Qae,Gdo,Odo,kB,Vdo,Xdo,zdo,uh,Hae,Wdo,Qdo,SB,Hdo,Udo,Jdo,bh,Uae,Ydo,Kdo,RB,Zdo,eco,oco,vh,Jae,rco,tco,PB,aco,nco,sco,Fh,Yae,lco,ico,BB,dco,cco,fco,Th,Kae,mco,gco,IB,hco,pco,_co,Mh,Zae,uco,bco,qB,vco,Fco,Tco,Eh,ene,Mco,Eco,NB,Cco,wco,Aco,Ch,one,yco,Lco,jB,xco,$co,kco,wh,rne,Sco,Rco,DB,Pco,Bco,Ico,Ah,tne,qco,Nco,GB,jco,Dco,Gco,yh,ane,Oco,Vco,OB,Xco,zco,Wco,Lh,Qco,xh,Hco,$h,R6,Uco,nne,Jco,cqe,Mi,kh,sne,P6,Yco,lne,Kco,fqe,yo,B6,Zco,I6,efo,VB,ofo,rfo,tfo,q6,afo,ine,nfo,sfo,lfo,Ue,N6,ifo,dne,dfo,cfo,Ei,ffo,cne,mfo,gfo,fne,hfo,pfo,_fo,pe,Sh,mne,ufo,bfo,XB,vfo,Ffo,Tfo,Rh,gne,Mfo,Efo,hne,Cfo,wfo,Afo,Ph,pne,yfo,Lfo,zB,xfo,$fo,kfo,Bh,_ne,Sfo,Rfo,WB,Pfo,Bfo,Ifo,Ih,une,qfo,Nfo,QB,jfo,Dfo,Gfo,qh,bne,Ofo,Vfo,HB,Xfo,zfo,Wfo,Nh,vne,Qfo,Hfo,UB,Ufo,Jfo,Yfo,jh,Fne,Kfo,Zfo,JB,emo,omo,rmo,Dh,Tne,tmo,amo,YB,nmo,smo,lmo,Gh,Mne,imo,dmo,KB,cmo,fmo,mmo,Oh,Ene,gmo,hmo,ZB,pmo,_mo,umo,Vh,Cne,bmo,vmo,eI,Fmo,Tmo,Mmo,Xh,wne,Emo,Cmo,oI,wmo,Amo,ymo,zh,Ane,Lmo,xmo,rI,$mo,kmo,Smo,Wh,yne,Rmo,Pmo,tI,Bmo,Imo,qmo,Qh,Lne,Nmo,jmo,aI,Dmo,Gmo,Omo,Hh,Vmo,Uh,Xmo,Jh,j6,zmo,xne,Wmo,mqe,Ci,Yh,$ne,D6,Qmo,kne,Hmo,gqe,Lo,G6,Umo,wi,Jmo,nI,Ymo,Kmo,sI,Zmo,ego,ogo,O6,rgo,Sne,tgo,ago,ngo,tt,V6,sgo,Rne,lgo,igo,Ai,dgo,Pne,cgo,fgo,lI,mgo,ggo,hgo,Kh,pgo,Je,X6,_go,Bne,ugo,bgo,La,vgo,Ine,Fgo,Tgo,qne,Mgo,Ego,Nne,Cgo,wgo,Ago,x,Zh,jne,ygo,Lgo,iI,xgo,$go,kgo,ep,Dne,Sgo,Rgo,dI,Pgo,Bgo,Igo,op,Gne,qgo,Ngo,cI,jgo,Dgo,Ggo,rp,One,Ogo,Vgo,fI,Xgo,zgo,Wgo,tp,Vne,Qgo,Hgo,mI,Ugo,Jgo,Ygo,ap,Xne,Kgo,Zgo,gI,eho,oho,rho,np,zne,tho,aho,hI,nho,sho,lho,sp,Wne,iho,dho,pI,cho,fho,mho,lp,Qne,gho,hho,_I,pho,_ho,uho,ip,Hne,bho,vho,uI,Fho,Tho,Mho,dp,Une,Eho,Cho,bI,who,Aho,yho,cp,Jne,Lho,xho,vI,$ho,kho,Sho,fp,Yne,Rho,Pho,FI,Bho,Iho,qho,mp,Kne,Nho,jho,TI,Dho,Gho,Oho,gp,Zne,Vho,Xho,MI,zho,Who,Qho,hp,ese,Hho,Uho,EI,Jho,Yho,Kho,pp,ose,Zho,epo,CI,opo,rpo,tpo,_p,rse,apo,npo,wI,spo,lpo,ipo,up,tse,dpo,cpo,AI,fpo,mpo,gpo,bp,ase,hpo,ppo,yI,_po,upo,bpo,vp,nse,vpo,Fpo,LI,Tpo,Mpo,Epo,Fp,sse,Cpo,wpo,xI,Apo,ypo,Lpo,Tp,lse,xpo,$po,$I,kpo,Spo,Rpo,Mp,ise,Ppo,Bpo,kI,Ipo,qpo,Npo,Ep,dse,jpo,Dpo,SI,Gpo,Opo,Vpo,Cp,cse,Xpo,zpo,RI,Wpo,Qpo,Hpo,wp,fse,Upo,Jpo,PI,Ypo,Kpo,Zpo,Ap,mse,e_o,o_o,BI,r_o,t_o,a_o,yp,gse,n_o,s_o,II,l_o,i_o,d_o,Lp,hse,c_o,f_o,qI,m_o,g_o,h_o,xp,pse,p_o,__o,NI,u_o,b_o,v_o,Rs,_se,F_o,T_o,jI,M_o,E_o,DI,C_o,w_o,A_o,$p,use,y_o,L_o,GI,x_o,$_o,k_o,kp,bse,S_o,R_o,OI,P_o,B_o,I_o,Sp,vse,q_o,N_o,VI,j_o,D_o,G_o,Rp,Fse,O_o,V_o,XI,X_o,z_o,W_o,Pp,Tse,Q_o,H_o,zI,U_o,J_o,Y_o,Bp,Mse,K_o,Z_o,WI,euo,ouo,ruo,Ip,Ese,tuo,auo,QI,nuo,suo,luo,qp,Cse,iuo,duo,HI,cuo,fuo,muo,Np,wse,guo,huo,UI,puo,_uo,uuo,jp,Ase,buo,vuo,JI,Fuo,Tuo,Muo,Dp,yse,Euo,Cuo,YI,wuo,Auo,yuo,Gp,Lse,Luo,xuo,KI,$uo,kuo,Suo,Op,xse,Ruo,Puo,ZI,Buo,Iuo,quo,Vp,$se,Nuo,juo,eq,Duo,Guo,Ouo,Xp,kse,Vuo,Xuo,oq,zuo,Wuo,Quo,zp,Sse,Huo,Uuo,rq,Juo,Yuo,Kuo,Wp,Rse,Zuo,e2o,tq,o2o,r2o,t2o,Qp,Pse,a2o,n2o,aq,s2o,l2o,i2o,Hp,Bse,d2o,c2o,nq,f2o,m2o,g2o,Up,Ise,h2o,p2o,sq,_2o,u2o,b2o,Jp,qse,v2o,F2o,lq,T2o,M2o,E2o,Yp,Nse,C2o,w2o,iq,A2o,y2o,L2o,Kp,jse,x2o,$2o,dq,k2o,S2o,R2o,Zp,Dse,P2o,B2o,cq,I2o,q2o,N2o,e_,Gse,j2o,D2o,fq,G2o,O2o,V2o,o_,Ose,X2o,z2o,mq,W2o,Q2o,H2o,r_,Vse,U2o,J2o,gq,Y2o,K2o,Z2o,t_,Xse,e1o,o1o,hq,r1o,t1o,a1o,a_,zse,n1o,s1o,pq,l1o,i1o,d1o,n_,Wse,c1o,f1o,_q,m1o,g1o,h1o,s_,Qse,p1o,_1o,uq,u1o,b1o,v1o,l_,Hse,F1o,T1o,bq,M1o,E1o,C1o,i_,Use,w1o,A1o,vq,y1o,L1o,x1o,d_,Jse,$1o,k1o,Fq,S1o,R1o,P1o,c_,Yse,B1o,I1o,Tq,q1o,N1o,j1o,f_,Kse,D1o,G1o,Mq,O1o,V1o,X1o,m_,Zse,z1o,W1o,Eq,Q1o,H1o,U1o,g_,ele,J1o,Y1o,Cq,K1o,Z1o,e7o,h_,ole,o7o,r7o,wq,t7o,a7o,n7o,p_,rle,s7o,l7o,Aq,i7o,d7o,c7o,__,tle,f7o,m7o,yq,g7o,h7o,p7o,u_,ale,_7o,u7o,Lq,b7o,v7o,F7o,b_,nle,T7o,M7o,xq,E7o,C7o,w7o,v_,sle,A7o,y7o,$q,L7o,x7o,$7o,F_,lle,k7o,S7o,kq,R7o,P7o,B7o,T_,ile,I7o,q7o,Sq,N7o,j7o,D7o,M_,dle,G7o,O7o,Rq,V7o,X7o,z7o,E_,cle,W7o,Q7o,Pq,H7o,U7o,J7o,C_,fle,Y7o,K7o,Bq,Z7o,ebo,obo,w_,mle,rbo,tbo,Iq,abo,nbo,sbo,A_,gle,lbo,ibo,qq,dbo,cbo,fbo,y_,hle,mbo,gbo,Nq,hbo,pbo,_bo,L_,ple,ubo,bbo,jq,vbo,Fbo,Tbo,x_,_le,Mbo,Ebo,Dq,Cbo,wbo,Abo,$_,ule,ybo,Lbo,Gq,xbo,$bo,kbo,k_,ble,Sbo,Rbo,Oq,Pbo,Bbo,Ibo,S_,vle,qbo,Nbo,Vq,jbo,Dbo,Gbo,R_,Fle,Obo,Vbo,Xq,Xbo,zbo,Wbo,P_,Tle,Qbo,Hbo,zq,Ubo,Jbo,Ybo,B_,Mle,Kbo,Zbo,Wq,evo,ovo,rvo,I_,Ele,tvo,avo,Qq,nvo,svo,lvo,q_,Cle,ivo,dvo,Hq,cvo,fvo,mvo,N_,wle,gvo,hvo,Uq,pvo,_vo,uvo,j_,Ale,bvo,vvo,Jq,Fvo,Tvo,Mvo,D_,yle,Evo,Cvo,Yq,wvo,Avo,yvo,G_,Lle,Lvo,xvo,Kq,$vo,kvo,Svo,O_,xle,Rvo,Pvo,Zq,Bvo,Ivo,qvo,V_,Nvo,$le,jvo,Dvo,kle,Gvo,Ovo,X_,hqe,yi,z_,Sle,z6,Vvo,Rle,Xvo,pqe,xo,W6,zvo,Li,Wvo,eN,Qvo,Hvo,oN,Uvo,Jvo,Yvo,Q6,Kvo,Ple,Zvo,eFo,oFo,at,H6,rFo,Ble,tFo,aFo,xi,nFo,Ile,sFo,lFo,rN,iFo,dFo,cFo,W_,fFo,Ye,U6,mFo,qle,gFo,hFo,xa,pFo,Nle,_Fo,uFo,jle,bFo,vFo,Dle,FFo,TFo,MFo,G,Q_,Gle,EFo,CFo,tN,wFo,AFo,yFo,H_,Ole,LFo,xFo,aN,$Fo,kFo,SFo,U_,Vle,RFo,PFo,nN,BFo,IFo,qFo,J_,Xle,NFo,jFo,sN,DFo,GFo,OFo,Y_,zle,VFo,XFo,lN,zFo,WFo,QFo,K_,Wle,HFo,UFo,iN,JFo,YFo,KFo,Z_,Qle,ZFo,eTo,dN,oTo,rTo,tTo,eu,Hle,aTo,nTo,cN,sTo,lTo,iTo,ou,Ule,dTo,cTo,fN,fTo,mTo,gTo,ru,Jle,hTo,pTo,mN,_To,uTo,bTo,tu,Yle,vTo,FTo,gN,TTo,MTo,ETo,au,Kle,CTo,wTo,hN,ATo,yTo,LTo,nu,Zle,xTo,$To,pN,kTo,STo,RTo,su,eie,PTo,BTo,_N,ITo,qTo,NTo,lu,oie,jTo,DTo,uN,GTo,OTo,VTo,iu,rie,XTo,zTo,bN,WTo,QTo,HTo,du,tie,UTo,JTo,vN,YTo,KTo,ZTo,cu,aie,eMo,oMo,FN,rMo,tMo,aMo,fu,nie,nMo,sMo,TN,lMo,iMo,dMo,mu,sie,cMo,fMo,MN,mMo,gMo,hMo,gu,lie,pMo,_Mo,EN,uMo,bMo,vMo,hu,iie,FMo,TMo,CN,MMo,EMo,CMo,pu,die,wMo,AMo,wN,yMo,LMo,xMo,_u,cie,$Mo,kMo,AN,SMo,RMo,PMo,uu,fie,BMo,IMo,yN,qMo,NMo,jMo,bu,mie,DMo,GMo,LN,OMo,VMo,XMo,vu,gie,zMo,WMo,xN,QMo,HMo,UMo,Fu,hie,JMo,YMo,$N,KMo,ZMo,e4o,Tu,pie,o4o,r4o,kN,t4o,a4o,n4o,Mu,_ie,s4o,l4o,SN,i4o,d4o,c4o,Eu,uie,f4o,m4o,RN,g4o,h4o,p4o,Cu,bie,_4o,u4o,PN,b4o,v4o,F4o,wu,vie,T4o,M4o,BN,E4o,C4o,w4o,Au,Fie,A4o,y4o,IN,L4o,x4o,$4o,yu,Tie,k4o,S4o,qN,R4o,P4o,B4o,Lu,Mie,I4o,q4o,NN,N4o,j4o,D4o,xu,Eie,G4o,O4o,jN,V4o,X4o,z4o,$u,Cie,W4o,Q4o,DN,H4o,U4o,J4o,ku,wie,Y4o,K4o,GN,Z4o,eEo,oEo,Su,Aie,rEo,tEo,ON,aEo,nEo,sEo,Ru,yie,lEo,iEo,VN,dEo,cEo,fEo,Pu,Lie,mEo,gEo,XN,hEo,pEo,_Eo,Bu,uEo,xie,bEo,vEo,$ie,FEo,TEo,Iu,_qe,$i,qu,kie,J6,MEo,Sie,EEo,uqe,$o,Y6,CEo,ki,wEo,zN,AEo,yEo,WN,LEo,xEo,$Eo,K6,kEo,Rie,SEo,REo,PEo,nt,Z6,BEo,Pie,IEo,qEo,Si,NEo,Bie,jEo,DEo,QN,GEo,OEo,VEo,Nu,XEo,Ke,ey,zEo,Iie,WEo,QEo,$a,HEo,qie,UEo,JEo,Nie,YEo,KEo,jie,ZEo,eCo,oCo,z,ju,Die,rCo,tCo,HN,aCo,nCo,sCo,Du,Gie,lCo,iCo,UN,dCo,cCo,fCo,Gu,Oie,mCo,gCo,JN,hCo,pCo,_Co,Ou,Vie,uCo,bCo,YN,vCo,FCo,TCo,Vu,Xie,MCo,ECo,KN,CCo,wCo,ACo,Xu,zie,yCo,LCo,ZN,xCo,$Co,kCo,zu,Wie,SCo,RCo,ej,PCo,BCo,ICo,Wu,Qie,qCo,NCo,oj,jCo,DCo,GCo,Qu,Hie,OCo,VCo,rj,XCo,zCo,WCo,Hu,Uie,QCo,HCo,tj,UCo,JCo,YCo,Uu,Jie,KCo,ZCo,aj,e5o,o5o,r5o,Ju,Yie,t5o,a5o,nj,n5o,s5o,l5o,Yu,Kie,i5o,d5o,sj,c5o,f5o,m5o,Ku,Zie,g5o,h5o,lj,p5o,_5o,u5o,Zu,ede,b5o,v5o,ij,F5o,T5o,M5o,e2,ode,E5o,C5o,dj,w5o,A5o,y5o,o2,rde,L5o,x5o,cj,$5o,k5o,S5o,r2,tde,R5o,P5o,fj,B5o,I5o,q5o,t2,ade,N5o,j5o,mj,D5o,G5o,O5o,a2,nde,V5o,X5o,gj,z5o,W5o,Q5o,n2,sde,H5o,U5o,hj,J5o,Y5o,K5o,s2,lde,Z5o,e3o,pj,o3o,r3o,t3o,l2,ide,a3o,n3o,_j,s3o,l3o,i3o,i2,dde,d3o,c3o,uj,f3o,m3o,g3o,d2,cde,h3o,p3o,bj,_3o,u3o,b3o,c2,fde,v3o,F3o,vj,T3o,M3o,E3o,f2,mde,C3o,w3o,Fj,A3o,y3o,L3o,m2,gde,x3o,$3o,Tj,k3o,S3o,R3o,g2,hde,P3o,B3o,Mj,I3o,q3o,N3o,h2,pde,j3o,D3o,Ej,G3o,O3o,V3o,p2,_de,X3o,z3o,Cj,W3o,Q3o,H3o,_2,ude,U3o,J3o,wj,Y3o,K3o,Z3o,u2,bde,ewo,owo,Aj,rwo,two,awo,b2,vde,nwo,swo,yj,lwo,iwo,dwo,v2,Fde,cwo,fwo,Lj,mwo,gwo,hwo,F2,Tde,pwo,_wo,xj,uwo,bwo,vwo,T2,Fwo,Mde,Two,Mwo,Ede,Ewo,Cwo,M2,bqe,Ri,E2,Cde,oy,wwo,wde,Awo,vqe,ko,ry,ywo,Pi,Lwo,$j,xwo,$wo,kj,kwo,Swo,Rwo,ty,Pwo,Ade,Bwo,Iwo,qwo,st,ay,Nwo,yde,jwo,Dwo,Bi,Gwo,Lde,Owo,Vwo,Sj,Xwo,zwo,Wwo,C2,Qwo,Ze,ny,Hwo,xde,Uwo,Jwo,ka,Ywo,$de,Kwo,Zwo,kde,e0o,o0o,Sde,r0o,t0o,a0o,W,w2,Rde,n0o,s0o,Rj,l0o,i0o,d0o,A2,Pde,c0o,f0o,Pj,m0o,g0o,h0o,y2,Bde,p0o,_0o,Bj,u0o,b0o,v0o,L2,Ide,F0o,T0o,Ij,M0o,E0o,C0o,x2,qde,w0o,A0o,qj,y0o,L0o,x0o,$2,Nde,$0o,k0o,Nj,S0o,R0o,P0o,k2,jde,B0o,I0o,jj,q0o,N0o,j0o,S2,Dde,D0o,G0o,Dj,O0o,V0o,X0o,R2,Gde,z0o,W0o,Gj,Q0o,H0o,U0o,P2,Ode,J0o,Y0o,Oj,K0o,Z0o,eAo,B2,Vde,oAo,rAo,Vj,tAo,aAo,nAo,I2,Xde,sAo,lAo,Xj,iAo,dAo,cAo,q2,zde,fAo,mAo,zj,gAo,hAo,pAo,N2,Wde,_Ao,uAo,Wj,bAo,vAo,FAo,j2,Qde,TAo,MAo,Qj,EAo,CAo,wAo,D2,Hde,AAo,yAo,Hj,LAo,xAo,$Ao,G2,Ude,kAo,SAo,Uj,RAo,PAo,BAo,O2,Jde,IAo,qAo,Jj,NAo,jAo,DAo,V2,Yde,GAo,OAo,Yj,VAo,XAo,zAo,X2,Kde,WAo,QAo,Kj,HAo,UAo,JAo,z2,Zde,YAo,KAo,Zj,ZAo,e6o,o6o,W2,ece,r6o,t6o,eD,a6o,n6o,s6o,Q2,oce,l6o,i6o,oD,d6o,c6o,f6o,H2,rce,m6o,g6o,rD,h6o,p6o,_6o,U2,tce,u6o,b6o,tD,v6o,F6o,T6o,J2,ace,M6o,E6o,aD,C6o,w6o,A6o,Y2,nce,y6o,L6o,nD,x6o,$6o,k6o,K2,sce,S6o,R6o,sD,P6o,B6o,I6o,Z2,lce,q6o,N6o,lD,j6o,D6o,G6o,e1,ice,O6o,V6o,iD,X6o,z6o,W6o,o1,dce,Q6o,H6o,cce,U6o,J6o,Y6o,r1,fce,K6o,Z6o,dD,eyo,oyo,ryo,t1,mce,tyo,ayo,cD,nyo,syo,lyo,a1,gce,iyo,dyo,fD,cyo,fyo,myo,n1,hce,gyo,hyo,mD,pyo,_yo,uyo,s1,byo,pce,vyo,Fyo,_ce,Tyo,Myo,l1,Fqe,Ii,i1,uce,sy,Eyo,bce,Cyo,Tqe,So,ly,wyo,qi,Ayo,gD,yyo,Lyo,hD,xyo,$yo,kyo,iy,Syo,vce,Ryo,Pyo,Byo,lt,dy,Iyo,Fce,qyo,Nyo,Ni,jyo,Tce,Dyo,Gyo,pD,Oyo,Vyo,Xyo,d1,zyo,eo,cy,Wyo,Mce,Qyo,Hyo,Sa,Uyo,Ece,Jyo,Yyo,Cce,Kyo,Zyo,wce,eLo,oLo,rLo,_e,c1,Ace,tLo,aLo,_D,nLo,sLo,lLo,f1,yce,iLo,dLo,uD,cLo,fLo,mLo,m1,Lce,gLo,hLo,bD,pLo,_Lo,uLo,g1,xce,bLo,vLo,vD,FLo,TLo,MLo,h1,$ce,ELo,CLo,FD,wLo,ALo,yLo,p1,kce,LLo,xLo,TD,$Lo,kLo,SLo,_1,Sce,RLo,PLo,MD,BLo,ILo,qLo,u1,Rce,NLo,jLo,ED,DLo,GLo,OLo,b1,Pce,VLo,XLo,CD,zLo,WLo,QLo,v1,Bce,HLo,ULo,wD,JLo,YLo,KLo,F1,Ice,ZLo,e8o,AD,o8o,r8o,t8o,T1,qce,a8o,n8o,yD,s8o,l8o,i8o,M1,Nce,d8o,c8o,LD,f8o,m8o,g8o,E1,jce,h8o,p8o,xD,_8o,u8o,b8o,C1,Dce,v8o,F8o,$D,T8o,M8o,E8o,w1,Gce,C8o,w8o,kD,A8o,y8o,L8o,A1,x8o,Oce,$8o,k8o,Vce,S8o,R8o,y1,Mqe,ji,L1,Xce,fy,P8o,zce,B8o,Eqe,Ro,my,I8o,Di,q8o,SD,N8o,j8o,RD,D8o,G8o,O8o,gy,V8o,Wce,X8o,z8o,W8o,it,hy,Q8o,Qce,H8o,U8o,Gi,J8o,Hce,Y8o,K8o,PD,Z8o,e9o,o9o,x1,r9o,oo,py,t9o,Uce,a9o,n9o,Ra,s9o,Jce,l9o,i9o,Yce,d9o,c9o,Kce,f9o,m9o,g9o,N,$1,Zce,h9o,p9o,BD,_9o,u9o,b9o,k1,efe,v9o,F9o,ID,T9o,M9o,E9o,S1,ofe,C9o,w9o,qD,A9o,y9o,L9o,R1,rfe,x9o,$9o,ND,k9o,S9o,R9o,P1,tfe,P9o,B9o,jD,I9o,q9o,N9o,B1,afe,j9o,D9o,DD,G9o,O9o,V9o,I1,nfe,X9o,z9o,GD,W9o,Q9o,H9o,q1,sfe,U9o,J9o,OD,Y9o,K9o,Z9o,N1,lfe,exo,oxo,VD,rxo,txo,axo,j1,ife,nxo,sxo,XD,lxo,ixo,dxo,D1,dfe,cxo,fxo,zD,mxo,gxo,hxo,G1,cfe,pxo,_xo,WD,uxo,bxo,vxo,O1,ffe,Fxo,Txo,QD,Mxo,Exo,Cxo,V1,mfe,wxo,Axo,HD,yxo,Lxo,xxo,X1,gfe,$xo,kxo,UD,Sxo,Rxo,Pxo,z1,hfe,Bxo,Ixo,JD,qxo,Nxo,jxo,W1,pfe,Dxo,Gxo,YD,Oxo,Vxo,Xxo,Q1,_fe,zxo,Wxo,KD,Qxo,Hxo,Uxo,H1,ufe,Jxo,Yxo,ZD,Kxo,Zxo,e$o,U1,bfe,o$o,r$o,eG,t$o,a$o,n$o,J1,vfe,s$o,l$o,oG,i$o,d$o,c$o,Y1,Ffe,f$o,m$o,rG,g$o,h$o,p$o,K1,Tfe,_$o,u$o,tG,b$o,v$o,F$o,Z1,Mfe,T$o,M$o,aG,E$o,C$o,w$o,e7,Efe,A$o,y$o,nG,L$o,x$o,$$o,o7,Cfe,k$o,S$o,sG,R$o,P$o,B$o,r7,wfe,I$o,q$o,lG,N$o,j$o,D$o,t7,Afe,G$o,O$o,iG,V$o,X$o,z$o,a7,yfe,W$o,Q$o,dG,H$o,U$o,J$o,n7,Lfe,Y$o,K$o,cG,Z$o,eko,oko,s7,xfe,rko,tko,fG,ako,nko,sko,l7,$fe,lko,iko,mG,dko,cko,fko,i7,kfe,mko,gko,gG,hko,pko,_ko,d7,Sfe,uko,bko,hG,vko,Fko,Tko,c7,Rfe,Mko,Eko,pG,Cko,wko,Ako,f7,Pfe,yko,Lko,_G,xko,$ko,kko,m7,Bfe,Sko,Rko,uG,Pko,Bko,Iko,g7,Ife,qko,Nko,bG,jko,Dko,Gko,h7,qfe,Oko,Vko,vG,Xko,zko,Wko,p7,Nfe,Qko,Hko,FG,Uko,Jko,Yko,_7,jfe,Kko,Zko,TG,eSo,oSo,rSo,u7,Dfe,tSo,aSo,MG,nSo,sSo,lSo,b7,Gfe,iSo,dSo,EG,cSo,fSo,mSo,v7,Ofe,gSo,hSo,CG,pSo,_So,uSo,F7,Vfe,bSo,vSo,wG,FSo,TSo,MSo,T7,Xfe,ESo,CSo,AG,wSo,ASo,ySo,M7,LSo,zfe,xSo,$So,Wfe,kSo,SSo,E7,Cqe,Oi,C7,Qfe,_y,RSo,Hfe,PSo,wqe,Po,uy,BSo,Vi,ISo,yG,qSo,NSo,LG,jSo,DSo,GSo,by,OSo,Ufe,VSo,XSo,zSo,dt,vy,WSo,Jfe,QSo,HSo,Xi,USo,Yfe,JSo,YSo,xG,KSo,ZSo,eRo,w7,oRo,ro,Fy,rRo,Kfe,tRo,aRo,Pa,nRo,Zfe,sRo,lRo,eme,iRo,dRo,ome,cRo,fRo,mRo,Y,A7,rme,gRo,hRo,$G,pRo,_Ro,uRo,y7,tme,bRo,vRo,kG,FRo,TRo,MRo,L7,ame,ERo,CRo,SG,wRo,ARo,yRo,x7,nme,LRo,xRo,RG,$Ro,kRo,SRo,$7,sme,RRo,PRo,PG,BRo,IRo,qRo,k7,lme,NRo,jRo,BG,DRo,GRo,ORo,S7,ime,VRo,XRo,IG,zRo,WRo,QRo,R7,dme,HRo,URo,qG,JRo,YRo,KRo,P7,cme,ZRo,ePo,NG,oPo,rPo,tPo,B7,fme,aPo,nPo,jG,sPo,lPo,iPo,I7,mme,dPo,cPo,DG,fPo,mPo,gPo,q7,gme,hPo,pPo,GG,_Po,uPo,bPo,N7,hme,vPo,FPo,OG,TPo,MPo,EPo,j7,pme,CPo,wPo,VG,APo,yPo,LPo,D7,_me,xPo,$Po,XG,kPo,SPo,RPo,G7,ume,PPo,BPo,zG,IPo,qPo,NPo,O7,bme,jPo,DPo,WG,GPo,OPo,VPo,V7,vme,XPo,zPo,QG,WPo,QPo,HPo,X7,Fme,UPo,JPo,HG,YPo,KPo,ZPo,z7,Tme,eBo,oBo,UG,rBo,tBo,aBo,W7,Mme,nBo,sBo,JG,lBo,iBo,dBo,Q7,Eme,cBo,fBo,YG,mBo,gBo,hBo,H7,Cme,pBo,_Bo,KG,uBo,bBo,vBo,U7,wme,FBo,TBo,ZG,MBo,EBo,CBo,J7,Ame,wBo,ABo,eO,yBo,LBo,xBo,Y7,yme,$Bo,kBo,oO,SBo,RBo,PBo,K7,Lme,BBo,IBo,rO,qBo,NBo,jBo,Z7,xme,DBo,GBo,tO,OBo,VBo,XBo,eb,$me,zBo,WBo,aO,QBo,HBo,UBo,ob,JBo,kme,YBo,KBo,Sme,ZBo,eIo,rb,Aqe,zi,tb,Rme,Ty,oIo,Pme,rIo,yqe,Bo,My,tIo,Wi,aIo,nO,nIo,sIo,sO,lIo,iIo,dIo,Ey,cIo,Bme,fIo,mIo,gIo,ct,Cy,hIo,Ime,pIo,_Io,Qi,uIo,qme,bIo,vIo,lO,FIo,TIo,MIo,ab,EIo,to,wy,CIo,Nme,wIo,AIo,Ba,yIo,jme,LIo,xIo,Dme,$Io,kIo,Gme,SIo,RIo,PIo,Yr,nb,Ome,BIo,IIo,iO,qIo,NIo,jIo,sb,Vme,DIo,GIo,dO,OIo,VIo,XIo,lb,Xme,zIo,WIo,cO,QIo,HIo,UIo,ib,zme,JIo,YIo,fO,KIo,ZIo,eqo,db,Wme,oqo,rqo,mO,tqo,aqo,nqo,cb,sqo,Qme,lqo,iqo,Hme,dqo,cqo,fb,Lqe,Hi,mb,Ume,Ay,fqo,Jme,mqo,xqe,Io,yy,gqo,Ui,hqo,gO,pqo,_qo,hO,uqo,bqo,vqo,Ly,Fqo,Yme,Tqo,Mqo,Eqo,ft,xy,Cqo,Kme,wqo,Aqo,Ji,yqo,Zme,Lqo,xqo,pO,$qo,kqo,Sqo,gb,Rqo,ao,$y,Pqo,ege,Bqo,Iqo,Ia,qqo,oge,Nqo,jqo,rge,Dqo,Gqo,tge,Oqo,Vqo,Xqo,U,hb,age,zqo,Wqo,_O,Qqo,Hqo,Uqo,pb,nge,Jqo,Yqo,uO,Kqo,Zqo,eNo,_b,sge,oNo,rNo,bO,tNo,aNo,nNo,ub,lge,sNo,lNo,vO,iNo,dNo,cNo,bb,ige,fNo,mNo,FO,gNo,hNo,pNo,vb,dge,_No,uNo,TO,bNo,vNo,FNo,Fb,cge,TNo,MNo,MO,ENo,CNo,wNo,Tb,fge,ANo,yNo,EO,LNo,xNo,$No,Mb,mge,kNo,SNo,CO,RNo,PNo,BNo,Eb,gge,INo,qNo,wO,NNo,jNo,DNo,Cb,hge,GNo,ONo,AO,VNo,XNo,zNo,wb,pge,WNo,QNo,yO,HNo,UNo,JNo,Ab,_ge,YNo,KNo,LO,ZNo,ejo,ojo,yb,uge,rjo,tjo,xO,ajo,njo,sjo,Lb,bge,ljo,ijo,$O,djo,cjo,fjo,xb,vge,mjo,gjo,kO,hjo,pjo,_jo,$b,Fge,ujo,bjo,SO,vjo,Fjo,Tjo,kb,Tge,Mjo,Ejo,RO,Cjo,wjo,Ajo,Sb,Mge,yjo,Ljo,PO,xjo,$jo,kjo,Rb,Ege,Sjo,Rjo,BO,Pjo,Bjo,Ijo,Pb,Cge,qjo,Njo,IO,jjo,Djo,Gjo,Bb,wge,Ojo,Vjo,qO,Xjo,zjo,Wjo,Ib,Age,Qjo,Hjo,NO,Ujo,Jjo,Yjo,qb,yge,Kjo,Zjo,jO,eDo,oDo,rDo,Nb,Lge,tDo,aDo,DO,nDo,sDo,lDo,jb,xge,iDo,dDo,GO,cDo,fDo,mDo,Db,$ge,gDo,hDo,OO,pDo,_Do,uDo,Gb,kge,bDo,vDo,VO,FDo,TDo,MDo,Ob,Sge,EDo,CDo,XO,wDo,ADo,yDo,Vb,Rge,LDo,xDo,zO,$Do,kDo,SDo,Xb,Pge,RDo,PDo,WO,BDo,IDo,qDo,zb,Bge,NDo,jDo,QO,DDo,GDo,ODo,Wb,Ige,VDo,XDo,HO,zDo,WDo,QDo,Qb,HDo,qge,UDo,JDo,Nge,YDo,KDo,Hb,$qe,Yi,Ub,jge,ky,ZDo,Dge,eGo,kqe,qo,Sy,oGo,Ki,rGo,UO,tGo,aGo,JO,nGo,sGo,lGo,Ry,iGo,Gge,dGo,cGo,fGo,mt,Py,mGo,Oge,gGo,hGo,Zi,pGo,Vge,_Go,uGo,YO,bGo,vGo,FGo,Jb,TGo,no,By,MGo,Xge,EGo,CGo,qa,wGo,zge,AGo,yGo,Wge,LGo,xGo,Qge,$Go,kGo,SGo,V,Yb,Hge,RGo,PGo,KO,BGo,IGo,qGo,Kb,Uge,NGo,jGo,ZO,DGo,GGo,OGo,Zb,Jge,VGo,XGo,eV,zGo,WGo,QGo,ev,Yge,HGo,UGo,oV,JGo,YGo,KGo,ov,Kge,ZGo,eOo,rV,oOo,rOo,tOo,rv,Zge,aOo,nOo,tV,sOo,lOo,iOo,tv,ehe,dOo,cOo,aV,fOo,mOo,gOo,av,ohe,hOo,pOo,nV,_Oo,uOo,bOo,nv,rhe,vOo,FOo,sV,TOo,MOo,EOo,sv,the,COo,wOo,lV,AOo,yOo,LOo,lv,ahe,xOo,$Oo,iV,kOo,SOo,ROo,iv,nhe,POo,BOo,dV,IOo,qOo,NOo,dv,she,jOo,DOo,cV,GOo,OOo,VOo,cv,lhe,XOo,zOo,fV,WOo,QOo,HOo,fv,ihe,UOo,JOo,mV,YOo,KOo,ZOo,mv,dhe,eVo,oVo,gV,rVo,tVo,aVo,gv,che,nVo,sVo,hV,lVo,iVo,dVo,hv,fhe,cVo,fVo,pV,mVo,gVo,hVo,pv,mhe,pVo,_Vo,_V,uVo,bVo,vVo,_v,ghe,FVo,TVo,uV,MVo,EVo,CVo,uv,hhe,wVo,AVo,bV,yVo,LVo,xVo,bv,phe,$Vo,kVo,vV,SVo,RVo,PVo,vv,_he,BVo,IVo,FV,qVo,NVo,jVo,Fv,uhe,DVo,GVo,TV,OVo,VVo,XVo,Tv,bhe,zVo,WVo,MV,QVo,HVo,UVo,Mv,vhe,JVo,YVo,EV,KVo,ZVo,eXo,Ev,Fhe,oXo,rXo,CV,tXo,aXo,nXo,Cv,The,sXo,lXo,wV,iXo,dXo,cXo,wv,Mhe,fXo,mXo,AV,gXo,hXo,pXo,Av,Ehe,_Xo,uXo,yV,bXo,vXo,FXo,yv,Che,TXo,MXo,LV,EXo,CXo,wXo,Lv,whe,AXo,yXo,xV,LXo,xXo,$Xo,xv,Ahe,kXo,SXo,$V,RXo,PXo,BXo,$v,yhe,IXo,qXo,kV,NXo,jXo,DXo,kv,Lhe,GXo,OXo,SV,VXo,XXo,zXo,Sv,xhe,WXo,QXo,RV,HXo,UXo,JXo,Rv,$he,YXo,KXo,PV,ZXo,ezo,ozo,Pv,khe,rzo,tzo,BV,azo,nzo,szo,Bv,She,lzo,izo,IV,dzo,czo,fzo,Iv,mzo,Rhe,gzo,hzo,Phe,pzo,_zo,qv,Sqe,ed,Nv,Bhe,Iy,uzo,Ihe,bzo,Rqe,No,qy,vzo,od,Fzo,qV,Tzo,Mzo,NV,Ezo,Czo,wzo,Ny,Azo,qhe,yzo,Lzo,xzo,gt,jy,$zo,Nhe,kzo,Szo,rd,Rzo,jhe,Pzo,Bzo,jV,Izo,qzo,Nzo,jv,jzo,so,Dy,Dzo,Dhe,Gzo,Ozo,Na,Vzo,Ghe,Xzo,zzo,Ohe,Wzo,Qzo,Vhe,Hzo,Uzo,Jzo,Xhe,Dv,zhe,Yzo,Kzo,DV,Zzo,eWo,oWo,Gv,rWo,Whe,tWo,aWo,Qhe,nWo,sWo,Ov,Pqe,td,Vv,Hhe,Gy,lWo,Uhe,iWo,Bqe,jo,Oy,dWo,ad,cWo,GV,fWo,mWo,OV,gWo,hWo,pWo,Vy,_Wo,Jhe,uWo,bWo,vWo,ht,Xy,FWo,Yhe,TWo,MWo,nd,EWo,Khe,CWo,wWo,VV,AWo,yWo,LWo,Xv,xWo,lo,zy,$Wo,Zhe,kWo,SWo,ja,RWo,epe,PWo,BWo,ope,IWo,qWo,rpe,NWo,jWo,DWo,Fe,zv,tpe,GWo,OWo,XV,VWo,XWo,zWo,Wv,ape,WWo,QWo,zV,HWo,UWo,JWo,Qv,npe,YWo,KWo,WV,ZWo,eQo,oQo,Ps,spe,rQo,tQo,QV,aQo,nQo,HV,sQo,lQo,iQo,Hv,lpe,dQo,cQo,UV,fQo,mQo,gQo,pt,ipe,hQo,pQo,JV,_Qo,uQo,YV,bQo,vQo,KV,FQo,TQo,MQo,Uv,dpe,EQo,CQo,ZV,wQo,AQo,yQo,Jv,cpe,LQo,xQo,eX,$Qo,kQo,SQo,Yv,fpe,RQo,PQo,oX,BQo,IQo,qQo,Kv,mpe,NQo,jQo,rX,DQo,GQo,OQo,Zv,gpe,VQo,XQo,tX,zQo,WQo,QQo,eF,hpe,HQo,UQo,aX,JQo,YQo,KQo,oF,ppe,ZQo,eHo,nX,oHo,rHo,tHo,rF,aHo,_pe,nHo,sHo,upe,lHo,iHo,tF,Iqe,sd,aF,bpe,Wy,dHo,vpe,cHo,qqe,Do,Qy,fHo,ld,mHo,sX,gHo,hHo,lX,pHo,_Ho,uHo,Hy,bHo,Fpe,vHo,FHo,THo,_t,Uy,MHo,Tpe,EHo,CHo,id,wHo,Mpe,AHo,yHo,iX,LHo,xHo,$Ho,nF,kHo,io,Jy,SHo,Epe,RHo,PHo,Da,BHo,Cpe,IHo,qHo,wpe,NHo,jHo,Ape,DHo,GHo,OHo,ype,sF,Lpe,VHo,XHo,dX,zHo,WHo,QHo,lF,HHo,xpe,UHo,JHo,$pe,YHo,KHo,iF,Nqe,dd,dF,kpe,Yy,ZHo,Spe,eUo,jqe,Go,Ky,oUo,cd,rUo,cX,tUo,aUo,fX,nUo,sUo,lUo,Zy,iUo,Rpe,dUo,cUo,fUo,ut,eL,mUo,Ppe,gUo,hUo,fd,pUo,Bpe,_Uo,uUo,mX,bUo,vUo,FUo,cF,TUo,co,oL,MUo,Ipe,EUo,CUo,Ga,wUo,qpe,AUo,yUo,Npe,LUo,xUo,jpe,$Uo,kUo,SUo,Se,fF,Dpe,RUo,PUo,gX,BUo,IUo,qUo,mF,Gpe,NUo,jUo,hX,DUo,GUo,OUo,gF,Ope,VUo,XUo,pX,zUo,WUo,QUo,hF,Vpe,HUo,UUo,_X,JUo,YUo,KUo,pF,Xpe,ZUo,eJo,uX,oJo,rJo,tJo,_F,zpe,aJo,nJo,bX,sJo,lJo,iJo,uF,Wpe,dJo,cJo,vX,fJo,mJo,gJo,bF,Qpe,hJo,pJo,FX,_Jo,uJo,bJo,vF,Hpe,vJo,FJo,TX,TJo,MJo,EJo,FF,CJo,Upe,wJo,AJo,Jpe,yJo,LJo,TF,Dqe,md,MF,Ype,rL,xJo,Kpe,$Jo,Gqe,Oo,tL,kJo,gd,SJo,MX,RJo,PJo,EX,BJo,IJo,qJo,aL,NJo,Zpe,jJo,DJo,GJo,bt,nL,OJo,e_e,VJo,XJo,hd,zJo,o_e,WJo,QJo,CX,HJo,UJo,JJo,EF,YJo,fo,sL,KJo,r_e,ZJo,eYo,Oa,oYo,t_e,rYo,tYo,a_e,aYo,nYo,n_e,sYo,lYo,iYo,Kr,CF,s_e,dYo,cYo,wX,fYo,mYo,gYo,wF,l_e,hYo,pYo,AX,_Yo,uYo,bYo,AF,i_e,vYo,FYo,yX,TYo,MYo,EYo,yF,d_e,CYo,wYo,LX,AYo,yYo,LYo,LF,c_e,xYo,$Yo,xX,kYo,SYo,RYo,xF,PYo,f_e,BYo,IYo,m_e,qYo,NYo,$F,Oqe,pd,kF,g_e,lL,jYo,h_e,DYo,Vqe,Vo,iL,GYo,_d,OYo,$X,VYo,XYo,kX,zYo,WYo,QYo,dL,HYo,p_e,UYo,JYo,YYo,vt,cL,KYo,__e,ZYo,eKo,ud,oKo,u_e,rKo,tKo,SX,aKo,nKo,sKo,SF,lKo,mo,fL,iKo,b_e,dKo,cKo,Va,fKo,v_e,mKo,gKo,F_e,hKo,pKo,T_e,_Ko,uKo,bKo,Re,RF,M_e,vKo,FKo,RX,TKo,MKo,EKo,PF,E_e,CKo,wKo,PX,AKo,yKo,LKo,BF,C_e,xKo,$Ko,BX,kKo,SKo,RKo,IF,w_e,PKo,BKo,IX,IKo,qKo,NKo,qF,A_e,jKo,DKo,qX,GKo,OKo,VKo,NF,y_e,XKo,zKo,NX,WKo,QKo,HKo,jF,L_e,UKo,JKo,jX,YKo,KKo,ZKo,DF,x_e,eZo,oZo,DX,rZo,tZo,aZo,GF,$_e,nZo,sZo,GX,lZo,iZo,dZo,OF,cZo,k_e,fZo,mZo,S_e,gZo,hZo,VF,Xqe,bd,XF,R_e,mL,pZo,P_e,_Zo,zqe,Xo,gL,uZo,vd,bZo,OX,vZo,FZo,VX,TZo,MZo,EZo,hL,CZo,B_e,wZo,AZo,yZo,Ft,pL,LZo,I_e,xZo,$Zo,Fd,kZo,q_e,SZo,RZo,XX,PZo,BZo,IZo,zF,qZo,go,_L,NZo,N_e,jZo,DZo,Xa,GZo,j_e,OZo,VZo,D_e,XZo,zZo,G_e,WZo,QZo,HZo,uL,WF,O_e,UZo,JZo,zX,YZo,KZo,ZZo,QF,V_e,eer,oer,WX,rer,ter,aer,HF,ner,X_e,ser,ler,z_e,ier,der,UF,Wqe,Td,JF,W_e,bL,cer,Q_e,fer,Qqe,zo,vL,mer,Md,ger,QX,her,per,HX,_er,uer,ber,FL,ver,H_e,Fer,Ter,Mer,Tt,TL,Eer,U_e,Cer,wer,Ed,Aer,J_e,yer,Ler,UX,xer,$er,ker,YF,Ser,ho,ML,Rer,Y_e,Per,Ber,za,Ier,K_e,qer,Ner,Z_e,jer,Der,eue,Ger,Oer,Ver,Zr,KF,oue,Xer,zer,JX,Wer,Qer,Her,ZF,rue,Uer,Jer,YX,Yer,Ker,Zer,eT,tue,eor,oor,KX,ror,tor,aor,oT,aue,nor,sor,ZX,lor,ior,dor,rT,nue,cor,mor,ez,gor,hor,por,tT,_or,sue,uor,bor,lue,vor,For,aT,Hqe,Cd,nT,iue,EL,Tor,due,Mor,Uqe,Wo,CL,Eor,wd,Cor,oz,wor,Aor,rz,yor,Lor,xor,wL,$or,cue,kor,Sor,Ror,Mt,AL,Por,fue,Bor,Ior,Ad,qor,mue,Nor,jor,tz,Dor,Gor,Oor,sT,Vor,po,yL,Xor,gue,zor,Wor,Wa,Qor,hue,Hor,Uor,pue,Jor,Yor,_ue,Kor,Zor,err,yd,lT,uue,orr,rrr,az,trr,arr,nrr,iT,bue,srr,lrr,nz,irr,drr,crr,dT,vue,frr,mrr,sz,grr,hrr,prr,cT,_rr,Fue,urr,brr,Tue,vrr,Frr,fT,Jqe,Ld,mT,Mue,LL,Trr,Eue,Mrr,Yqe,Qo,xL,Err,xd,Crr,lz,wrr,Arr,iz,yrr,Lrr,xrr,$L,$rr,Cue,krr,Srr,Rrr,Et,kL,Prr,wue,Brr,Irr,$d,qrr,Aue,Nrr,jrr,dz,Drr,Grr,Orr,gT,Vrr,_o,SL,Xrr,yue,zrr,Wrr,Qa,Qrr,Lue,Hrr,Urr,xue,Jrr,Yrr,$ue,Krr,Zrr,etr,RL,hT,kue,otr,rtr,cz,ttr,atr,ntr,pT,Sue,str,ltr,fz,itr,dtr,ctr,_T,ftr,Rue,mtr,gtr,Pue,htr,ptr,uT,Kqe,kd,bT,Bue,PL,_tr,Iue,utr,Zqe,Ho,BL,btr,Sd,vtr,mz,Ftr,Ttr,gz,Mtr,Etr,Ctr,IL,wtr,que,Atr,ytr,Ltr,Ct,qL,xtr,Nue,$tr,ktr,Rd,Str,jue,Rtr,Ptr,hz,Btr,Itr,qtr,vT,Ntr,uo,NL,jtr,Due,Dtr,Gtr,Ha,Otr,Gue,Vtr,Xtr,Oue,ztr,Wtr,Vue,Qtr,Htr,Utr,Xue,FT,zue,Jtr,Ytr,pz,Ktr,Ztr,ear,TT,oar,Wue,rar,tar,Que,aar,nar,MT,eNe,Pd,ET,Hue,jL,sar,Uue,lar,oNe,Uo,DL,iar,Bd,dar,_z,car,far,uz,mar,gar,har,GL,par,Jue,_ar,uar,bar,wt,OL,Far,Yue,Tar,Mar,Id,Ear,Kue,Car,war,bz,Aar,yar,Lar,CT,xar,bo,VL,$ar,Zue,kar,Sar,Ua,Rar,e2e,Par,Bar,o2e,Iar,qar,r2e,Nar,jar,Dar,Ja,wT,t2e,Gar,Oar,vz,Var,Xar,zar,AT,a2e,War,Qar,Fz,Har,Uar,Jar,yT,n2e,Yar,Kar,Tz,Zar,enr,onr,LT,s2e,rnr,tnr,Mz,anr,nnr,snr,xT,lnr,l2e,inr,dnr,i2e,cnr,fnr,$T,rNe,qd,kT,d2e,XL,mnr,c2e,gnr,tNe,Jo,zL,hnr,Nd,pnr,Ez,_nr,unr,Cz,bnr,vnr,Fnr,WL,Tnr,f2e,Mnr,Enr,Cnr,At,QL,wnr,m2e,Anr,ynr,jd,Lnr,g2e,xnr,$nr,wz,knr,Snr,Rnr,ST,Pnr,vo,HL,Bnr,h2e,Inr,qnr,Ya,Nnr,p2e,jnr,Dnr,_2e,Gnr,Onr,u2e,Vnr,Xnr,znr,b2e,RT,v2e,Wnr,Qnr,Az,Hnr,Unr,Jnr,PT,Ynr,F2e,Knr,Znr,T2e,esr,osr,BT,aNe,Dd,IT,M2e,UL,rsr,E2e,tsr,nNe,Yo,JL,asr,Gd,nsr,yz,ssr,lsr,Lz,isr,dsr,csr,YL,fsr,C2e,msr,gsr,hsr,yt,KL,psr,w2e,_sr,usr,Od,bsr,A2e,vsr,Fsr,xz,Tsr,Msr,Esr,qT,Csr,wr,ZL,wsr,y2e,Asr,ysr,Ka,Lsr,L2e,xsr,$sr,x2e,ksr,Ssr,$2e,Rsr,Psr,Bsr,q,NT,k2e,Isr,qsr,$z,Nsr,jsr,Dsr,jT,S2e,Gsr,Osr,kz,Vsr,Xsr,zsr,DT,R2e,Wsr,Qsr,Sz,Hsr,Usr,Jsr,GT,P2e,Ysr,Ksr,Rz,Zsr,elr,olr,OT,B2e,rlr,tlr,Pz,alr,nlr,slr,VT,I2e,llr,ilr,Bz,dlr,clr,flr,XT,q2e,mlr,glr,Iz,hlr,plr,_lr,zT,N2e,ulr,blr,qz,vlr,Flr,Tlr,WT,j2e,Mlr,Elr,Nz,Clr,wlr,Alr,QT,D2e,ylr,Llr,jz,xlr,$lr,klr,HT,G2e,Slr,Rlr,Dz,Plr,Blr,Ilr,UT,O2e,qlr,Nlr,Gz,jlr,Dlr,Glr,JT,V2e,Olr,Vlr,Oz,Xlr,zlr,Wlr,YT,X2e,Qlr,Hlr,Vz,Ulr,Jlr,Ylr,KT,z2e,Klr,Zlr,Xz,eir,oir,rir,ZT,W2e,tir,air,zz,nir,sir,lir,eM,Q2e,iir,dir,Wz,cir,fir,mir,Bs,H2e,gir,hir,Qz,pir,_ir,Hz,uir,bir,vir,oM,U2e,Fir,Tir,Uz,Mir,Eir,Cir,rM,J2e,wir,Air,Jz,yir,Lir,xir,tM,Y2e,$ir,kir,Yz,Sir,Rir,Pir,aM,K2e,Bir,Iir,Kz,qir,Nir,jir,nM,Z2e,Dir,Gir,Zz,Oir,Vir,Xir,sM,e1e,zir,Wir,eW,Qir,Hir,Uir,lM,o1e,Jir,Yir,oW,Kir,Zir,edr,iM,r1e,odr,rdr,rW,tdr,adr,ndr,dM,t1e,sdr,ldr,tW,idr,ddr,cdr,cM,a1e,fdr,mdr,aW,gdr,hdr,pdr,fM,n1e,_dr,udr,nW,bdr,vdr,Fdr,mM,s1e,Tdr,Mdr,sW,Edr,Cdr,wdr,gM,l1e,Adr,ydr,lW,Ldr,xdr,$dr,hM,i1e,kdr,Sdr,iW,Rdr,Pdr,Bdr,pM,d1e,Idr,qdr,dW,Ndr,jdr,Ddr,_M,c1e,Gdr,Odr,cW,Vdr,Xdr,zdr,uM,f1e,Wdr,Qdr,fW,Hdr,Udr,Jdr,bM,m1e,Ydr,Kdr,mW,Zdr,ecr,ocr,vM,g1e,rcr,tcr,gW,acr,ncr,scr,FM,h1e,lcr,icr,hW,dcr,ccr,fcr,TM,p1e,mcr,gcr,pW,hcr,pcr,_cr,MM,_1e,ucr,bcr,_W,vcr,Fcr,Tcr,EM,u1e,Mcr,Ecr,uW,Ccr,wcr,Acr,CM,b1e,ycr,Lcr,bW,xcr,$cr,kcr,wM,v1e,Scr,Rcr,vW,Pcr,Bcr,Icr,AM,F1e,qcr,Ncr,FW,jcr,Dcr,Gcr,yM,T1e,Ocr,Vcr,TW,Xcr,zcr,Wcr,LM,M1e,Qcr,Hcr,MW,Ucr,Jcr,Ycr,xM,E1e,Kcr,Zcr,EW,efr,ofr,rfr,$M,sNe,Vd,kM,C1e,e8,tfr,w1e,afr,lNe,Ko,o8,nfr,Xd,sfr,CW,lfr,ifr,wW,dfr,cfr,ffr,r8,mfr,A1e,gfr,hfr,pfr,Lt,t8,_fr,y1e,ufr,bfr,zd,vfr,L1e,Ffr,Tfr,AW,Mfr,Efr,Cfr,SM,wfr,Ar,a8,Afr,x1e,yfr,Lfr,Za,xfr,$1e,$fr,kfr,k1e,Sfr,Rfr,S1e,Pfr,Bfr,Ifr,se,RM,R1e,qfr,Nfr,yW,jfr,Dfr,Gfr,PM,P1e,Ofr,Vfr,LW,Xfr,zfr,Wfr,BM,B1e,Qfr,Hfr,xW,Ufr,Jfr,Yfr,IM,I1e,Kfr,Zfr,$W,emr,omr,rmr,qM,q1e,tmr,amr,kW,nmr,smr,lmr,NM,N1e,imr,dmr,SW,cmr,fmr,mmr,jM,j1e,gmr,hmr,RW,pmr,_mr,umr,DM,D1e,bmr,vmr,PW,Fmr,Tmr,Mmr,GM,G1e,Emr,Cmr,BW,wmr,Amr,ymr,OM,O1e,Lmr,xmr,IW,$mr,kmr,Smr,VM,V1e,Rmr,Pmr,qW,Bmr,Imr,qmr,XM,X1e,Nmr,jmr,NW,Dmr,Gmr,Omr,zM,z1e,Vmr,Xmr,jW,zmr,Wmr,Qmr,WM,W1e,Hmr,Umr,DW,Jmr,Ymr,Kmr,QM,Q1e,Zmr,egr,GW,ogr,rgr,tgr,HM,H1e,agr,ngr,OW,sgr,lgr,igr,UM,U1e,dgr,cgr,VW,fgr,mgr,ggr,JM,J1e,hgr,pgr,XW,_gr,ugr,bgr,YM,Y1e,vgr,Fgr,zW,Tgr,Mgr,Egr,KM,K1e,Cgr,wgr,WW,Agr,ygr,Lgr,ZM,Z1e,xgr,$gr,QW,kgr,Sgr,Rgr,e4,e7e,Pgr,Bgr,HW,Igr,qgr,Ngr,o4,o7e,jgr,Dgr,UW,Ggr,Ogr,Vgr,r4,iNe,Wd,t4,r7e,n8,Xgr,t7e,zgr,dNe,Zo,s8,Wgr,Qd,Qgr,JW,Hgr,Ugr,YW,Jgr,Ygr,Kgr,l8,Zgr,a7e,ehr,ohr,rhr,xt,i8,thr,n7e,ahr,nhr,Hd,shr,s7e,lhr,ihr,KW,dhr,chr,fhr,a4,mhr,yr,d8,ghr,l7e,hhr,phr,en,_hr,i7e,uhr,bhr,d7e,vhr,Fhr,c7e,Thr,Mhr,Ehr,Te,n4,f7e,Chr,whr,ZW,Ahr,yhr,Lhr,s4,m7e,xhr,$hr,eQ,khr,Shr,Rhr,l4,g7e,Phr,Bhr,oQ,Ihr,qhr,Nhr,i4,h7e,jhr,Dhr,rQ,Ghr,Ohr,Vhr,d4,p7e,Xhr,zhr,tQ,Whr,Qhr,Hhr,c4,_7e,Uhr,Jhr,aQ,Yhr,Khr,Zhr,f4,u7e,epr,opr,b7e,rpr,tpr,apr,m4,v7e,npr,spr,nQ,lpr,ipr,dpr,g4,F7e,cpr,fpr,sQ,mpr,gpr,hpr,h4,T7e,ppr,_pr,lQ,upr,bpr,vpr,p4,M7e,Fpr,Tpr,iQ,Mpr,Epr,Cpr,_4,E7e,wpr,Apr,dQ,ypr,Lpr,xpr,u4,C7e,$pr,kpr,cQ,Spr,Rpr,Ppr,b4,cNe,Ud,v4,w7e,c8,Bpr,A7e,Ipr,fNe,er,f8,qpr,Jd,Npr,fQ,jpr,Dpr,mQ,Gpr,Opr,Vpr,m8,Xpr,y7e,zpr,Wpr,Qpr,$t,g8,Hpr,L7e,Upr,Jpr,Yd,Ypr,x7e,Kpr,Zpr,gQ,e_r,o_r,r_r,F4,t_r,Lr,h8,a_r,$7e,n_r,s_r,on,l_r,k7e,i_r,d_r,S7e,c_r,f_r,R7e,m_r,g_r,h_r,rn,T4,P7e,p_r,__r,hQ,u_r,b_r,v_r,M4,B7e,F_r,T_r,pQ,M_r,E_r,C_r,E4,I7e,w_r,A_r,_Q,y_r,L_r,x_r,C4,q7e,$_r,k_r,uQ,S_r,R_r,P_r,w4,mNe,Kd,A4,N7e,p8,B_r,j7e,I_r,gNe,or,_8,q_r,Zd,N_r,bQ,j_r,D_r,vQ,G_r,O_r,V_r,u8,X_r,D7e,z_r,W_r,Q_r,kt,b8,H_r,G7e,U_r,J_r,ec,Y_r,O7e,K_r,Z_r,FQ,eur,our,rur,y4,tur,xr,v8,aur,V7e,nur,sur,tn,lur,X7e,iur,dur,z7e,cur,fur,W7e,mur,gur,hur,ie,L4,Q7e,pur,_ur,TQ,uur,bur,vur,x4,H7e,Fur,Tur,MQ,Mur,Eur,Cur,$4,U7e,wur,Aur,EQ,yur,Lur,xur,k4,J7e,$ur,kur,CQ,Sur,Rur,Pur,S4,Y7e,Bur,Iur,wQ,qur,Nur,jur,R4,K7e,Dur,Gur,AQ,Our,Vur,Xur,P4,Z7e,zur,Wur,yQ,Qur,Hur,Uur,B4,ebe,Jur,Yur,LQ,Kur,Zur,e2r,I4,obe,o2r,r2r,xQ,t2r,a2r,n2r,q4,rbe,s2r,l2r,$Q,i2r,d2r,c2r,N4,tbe,f2r,m2r,kQ,g2r,h2r,p2r,j4,abe,_2r,u2r,SQ,b2r,v2r,F2r,D4,nbe,T2r,M2r,RQ,E2r,C2r,w2r,G4,sbe,A2r,y2r,PQ,L2r,x2r,$2r,O4,lbe,k2r,S2r,BQ,R2r,P2r,B2r,V4,ibe,I2r,q2r,IQ,N2r,j2r,D2r,X4,dbe,G2r,O2r,qQ,V2r,X2r,z2r,z4,cbe,W2r,Q2r,NQ,H2r,U2r,J2r,W4,fbe,Y2r,K2r,jQ,Z2r,e1r,o1r,Q4,mbe,r1r,t1r,DQ,a1r,n1r,s1r,H4,hNe,oc,U4,gbe,F8,l1r,hbe,i1r,pNe,rr,T8,d1r,rc,c1r,GQ,f1r,m1r,OQ,g1r,h1r,p1r,M8,_1r,pbe,u1r,b1r,v1r,St,E8,F1r,_be,T1r,M1r,tc,E1r,ube,C1r,w1r,VQ,A1r,y1r,L1r,J4,x1r,$r,C8,$1r,bbe,k1r,S1r,an,R1r,vbe,P1r,B1r,Fbe,I1r,q1r,Tbe,N1r,j1r,D1r,ye,Y4,Mbe,G1r,O1r,XQ,V1r,X1r,z1r,K4,Ebe,W1r,Q1r,zQ,H1r,U1r,J1r,Z4,Cbe,Y1r,K1r,WQ,Z1r,e7r,o7r,eE,wbe,r7r,t7r,QQ,a7r,n7r,s7r,oE,Abe,l7r,i7r,HQ,d7r,c7r,f7r,rE,ybe,m7r,g7r,UQ,h7r,p7r,_7r,tE,Lbe,u7r,b7r,JQ,v7r,F7r,T7r,aE,xbe,M7r,E7r,YQ,C7r,w7r,A7r,nE,$be,y7r,L7r,KQ,x7r,$7r,k7r,sE,kbe,S7r,R7r,ZQ,P7r,B7r,I7r,lE,_Ne,ac,iE,Sbe,w8,q7r,Rbe,N7r,uNe,tr,A8,j7r,nc,D7r,eH,G7r,O7r,oH,V7r,X7r,z7r,y8,W7r,Pbe,Q7r,H7r,U7r,Rt,L8,J7r,Bbe,Y7r,K7r,sc,Z7r,Ibe,ebr,obr,rH,rbr,tbr,abr,dE,nbr,kr,x8,sbr,qbe,lbr,ibr,nn,dbr,Nbe,cbr,fbr,jbe,mbr,gbr,Dbe,hbr,pbr,_br,ee,cE,Gbe,ubr,bbr,tH,vbr,Fbr,Tbr,fE,Obe,Mbr,Ebr,aH,Cbr,wbr,Abr,mE,Vbe,ybr,Lbr,nH,xbr,$br,kbr,gE,Xbe,Sbr,Rbr,sH,Pbr,Bbr,Ibr,hE,zbe,qbr,Nbr,lH,jbr,Dbr,Gbr,pE,Wbe,Obr,Vbr,iH,Xbr,zbr,Wbr,_E,Qbe,Qbr,Hbr,dH,Ubr,Jbr,Ybr,uE,Hbe,Kbr,Zbr,cH,evr,ovr,rvr,bE,Ube,tvr,avr,fH,nvr,svr,lvr,vE,Jbe,ivr,dvr,mH,cvr,fvr,mvr,FE,Ybe,gvr,hvr,gH,pvr,_vr,uvr,TE,Kbe,bvr,vvr,hH,Fvr,Tvr,Mvr,ME,Zbe,Evr,Cvr,pH,wvr,Avr,yvr,EE,eve,Lvr,xvr,_H,$vr,kvr,Svr,CE,ove,Rvr,Pvr,uH,Bvr,Ivr,qvr,wE,rve,Nvr,jvr,bH,Dvr,Gvr,Ovr,AE,tve,Vvr,Xvr,vH,zvr,Wvr,Qvr,yE,ave,Hvr,Uvr,FH,Jvr,Yvr,Kvr,LE,nve,Zvr,eFr,TH,oFr,rFr,tFr,xE,sve,aFr,nFr,MH,sFr,lFr,iFr,$E,lve,dFr,cFr,EH,fFr,mFr,gFr,kE,ive,hFr,pFr,CH,_Fr,uFr,bFr,SE,dve,vFr,FFr,wH,TFr,MFr,EFr,RE,cve,CFr,wFr,AH,AFr,yFr,LFr,PE,fve,xFr,$Fr,yH,kFr,SFr,RFr,BE,mve,PFr,BFr,LH,IFr,qFr,NFr,IE,bNe,lc,qE,gve,$8,jFr,hve,DFr,vNe,ar,k8,GFr,ic,OFr,xH,VFr,XFr,$H,zFr,WFr,QFr,S8,HFr,pve,UFr,JFr,YFr,Pt,R8,KFr,_ve,ZFr,eTr,dc,oTr,uve,rTr,tTr,kH,aTr,nTr,sTr,NE,lTr,Sr,P8,iTr,bve,dTr,cTr,sn,fTr,vve,mTr,gTr,Fve,hTr,pTr,Tve,_Tr,uTr,bTr,he,jE,Mve,vTr,FTr,SH,TTr,MTr,ETr,DE,Eve,CTr,wTr,RH,ATr,yTr,LTr,GE,Cve,xTr,$Tr,PH,kTr,STr,RTr,OE,wve,PTr,BTr,BH,ITr,qTr,NTr,VE,Ave,jTr,DTr,IH,GTr,OTr,VTr,XE,yve,XTr,zTr,qH,WTr,QTr,HTr,zE,Lve,UTr,JTr,NH,YTr,KTr,ZTr,WE,xve,eMr,oMr,jH,rMr,tMr,aMr,QE,$ve,nMr,sMr,DH,lMr,iMr,dMr,HE,kve,cMr,fMr,GH,mMr,gMr,hMr,UE,Sve,pMr,_Mr,OH,uMr,bMr,vMr,JE,Rve,FMr,TMr,VH,MMr,EMr,CMr,YE,Pve,wMr,AMr,XH,yMr,LMr,xMr,KE,Bve,$Mr,kMr,zH,SMr,RMr,PMr,ZE,Ive,BMr,IMr,WH,qMr,NMr,jMr,eC,qve,DMr,GMr,QH,OMr,VMr,XMr,oC,Nve,zMr,WMr,HH,QMr,HMr,UMr,rC,FNe,cc,tC,jve,B8,JMr,Dve,YMr,TNe,nr,I8,KMr,fc,ZMr,UH,e4r,o4r,JH,r4r,t4r,a4r,q8,n4r,Gve,s4r,l4r,i4r,Bt,N8,d4r,Ove,c4r,f4r,mc,m4r,Vve,g4r,h4r,YH,p4r,_4r,u4r,aC,b4r,Rr,j8,v4r,Xve,F4r,T4r,ln,M4r,zve,E4r,C4r,Wve,w4r,A4r,Qve,y4r,L4r,x4r,D8,nC,Hve,$4r,k4r,KH,S4r,R4r,P4r,sC,Uve,B4r,I4r,ZH,q4r,N4r,j4r,lC,MNe,gc,iC,Jve,G8,D4r,Yve,G4r,ENe,sr,O8,O4r,hc,V4r,eU,X4r,z4r,oU,W4r,Q4r,H4r,V8,U4r,Kve,J4r,Y4r,K4r,It,X8,Z4r,Zve,eEr,oEr,pc,rEr,eFe,tEr,aEr,rU,nEr,sEr,lEr,dC,iEr,Pr,z8,dEr,oFe,cEr,fEr,dn,mEr,rFe,gEr,hEr,tFe,pEr,_Er,aFe,uEr,bEr,vEr,nFe,cC,sFe,FEr,TEr,tU,MEr,EEr,CEr,fC,CNe,_c,mC,lFe,W8,wEr,iFe,AEr,wNe,lr,Q8,yEr,uc,LEr,aU,xEr,$Er,nU,kEr,SEr,REr,H8,PEr,dFe,BEr,IEr,qEr,qt,U8,NEr,cFe,jEr,DEr,bc,GEr,fFe,OEr,VEr,sU,XEr,zEr,WEr,gC,QEr,Br,J8,HEr,mFe,UEr,JEr,cn,YEr,gFe,KEr,ZEr,hFe,eCr,oCr,pFe,rCr,tCr,aCr,de,hC,_Fe,nCr,sCr,lU,lCr,iCr,dCr,pC,uFe,cCr,fCr,iU,mCr,gCr,hCr,_C,bFe,pCr,_Cr,dU,uCr,bCr,vCr,uC,vFe,FCr,TCr,cU,MCr,ECr,CCr,bC,FFe,wCr,ACr,fU,yCr,LCr,xCr,vC,TFe,$Cr,kCr,mU,SCr,RCr,PCr,FC,MFe,BCr,ICr,gU,qCr,NCr,jCr,TC,EFe,DCr,GCr,hU,OCr,VCr,XCr,MC,CFe,zCr,WCr,pU,QCr,HCr,UCr,EC,wFe,JCr,YCr,_U,KCr,ZCr,e5r,CC,AFe,o5r,r5r,uU,t5r,a5r,n5r,wC,yFe,s5r,l5r,bU,i5r,d5r,c5r,AC,LFe,f5r,m5r,vU,g5r,h5r,p5r,yC,xFe,_5r,u5r,FU,b5r,v5r,F5r,LC,$Fe,T5r,M5r,TU,E5r,C5r,w5r,xC,kFe,A5r,y5r,MU,L5r,x5r,$5r,$C,SFe,k5r,S5r,EU,R5r,P5r,B5r,kC,RFe,I5r,q5r,CU,N5r,j5r,D5r,SC,PFe,G5r,O5r,wU,V5r,X5r,z5r,RC,BFe,W5r,Q5r,AU,H5r,U5r,J5r,PC,ANe,vc,BC,IFe,Y8,Y5r,qFe,K5r,yNe,ir,K8,Z5r,Fc,e3r,yU,o3r,r3r,LU,t3r,a3r,n3r,Z8,s3r,NFe,l3r,i3r,d3r,Nt,e9,c3r,jFe,f3r,m3r,Tc,g3r,DFe,h3r,p3r,xU,_3r,u3r,b3r,IC,v3r,Ir,o9,F3r,GFe,T3r,M3r,fn,E3r,OFe,C3r,w3r,VFe,A3r,y3r,XFe,L3r,x3r,$3r,ce,qC,zFe,k3r,S3r,$U,R3r,P3r,B3r,NC,WFe,I3r,q3r,kU,N3r,j3r,D3r,jC,QFe,G3r,O3r,SU,V3r,X3r,z3r,DC,HFe,W3r,Q3r,RU,H3r,U3r,J3r,GC,UFe,Y3r,K3r,PU,Z3r,ewr,owr,OC,JFe,rwr,twr,BU,awr,nwr,swr,VC,YFe,lwr,iwr,IU,dwr,cwr,fwr,XC,KFe,mwr,gwr,qU,hwr,pwr,_wr,zC,ZFe,uwr,bwr,NU,vwr,Fwr,Twr,WC,eTe,Mwr,Ewr,jU,Cwr,wwr,Awr,QC,oTe,ywr,Lwr,DU,xwr,$wr,kwr,HC,rTe,Swr,Rwr,GU,Pwr,Bwr,Iwr,UC,tTe,qwr,Nwr,OU,jwr,Dwr,Gwr,JC,aTe,Owr,Vwr,VU,Xwr,zwr,Wwr,YC,nTe,Qwr,Hwr,XU,Uwr,Jwr,Ywr,KC,sTe,Kwr,Zwr,zU,e0r,o0r,r0r,ZC,lTe,t0r,a0r,WU,n0r,s0r,l0r,e5,iTe,i0r,d0r,QU,c0r,f0r,m0r,o5,dTe,g0r,h0r,HU,p0r,_0r,u0r,r5,cTe,b0r,v0r,UU,F0r,T0r,M0r,t5,LNe,Mc,a5,fTe,r9,E0r,mTe,C0r,xNe,dr,t9,w0r,Ec,A0r,JU,y0r,L0r,YU,x0r,$0r,k0r,a9,S0r,gTe,R0r,P0r,B0r,jt,n9,I0r,hTe,q0r,N0r,Cc,j0r,pTe,D0r,G0r,KU,O0r,V0r,X0r,n5,z0r,qr,s9,W0r,_Te,Q0r,H0r,mn,U0r,uTe,J0r,Y0r,bTe,K0r,Z0r,vTe,eAr,oAr,rAr,FTe,s5,TTe,tAr,aAr,ZU,nAr,sAr,lAr,l5,$Ne,wc,i5,MTe,l9,iAr,ETe,dAr,kNe,cr,i9,cAr,Ac,fAr,eJ,mAr,gAr,oJ,hAr,pAr,_Ar,d9,uAr,CTe,bAr,vAr,FAr,Dt,c9,TAr,wTe,MAr,EAr,yc,CAr,ATe,wAr,AAr,rJ,yAr,LAr,xAr,d5,$Ar,Nr,f9,kAr,yTe,SAr,RAr,gn,PAr,LTe,BAr,IAr,xTe,qAr,NAr,$Te,jAr,DAr,GAr,kTe,c5,STe,OAr,VAr,tJ,XAr,zAr,WAr,f5,SNe,Lc,m5,RTe,m9,QAr,PTe,HAr,RNe,fr,g9,UAr,xc,JAr,aJ,YAr,KAr,nJ,ZAr,e6r,o6r,h9,r6r,BTe,t6r,a6r,n6r,Gt,p9,s6r,ITe,l6r,i6r,$c,d6r,qTe,c6r,f6r,sJ,m6r,g6r,h6r,g5,p6r,jr,_9,_6r,NTe,u6r,b6r,hn,v6r,jTe,F6r,T6r,DTe,M6r,E6r,GTe,C6r,w6r,A6r,oe,h5,OTe,y6r,L6r,lJ,x6r,$6r,k6r,p5,VTe,S6r,R6r,iJ,P6r,B6r,I6r,_5,XTe,q6r,N6r,dJ,j6r,D6r,G6r,u5,zTe,O6r,V6r,cJ,X6r,z6r,W6r,b5,WTe,Q6r,H6r,fJ,U6r,J6r,Y6r,v5,QTe,K6r,Z6r,mJ,eyr,oyr,ryr,F5,HTe,tyr,ayr,gJ,nyr,syr,lyr,T5,UTe,iyr,dyr,hJ,cyr,fyr,myr,M5,JTe,gyr,hyr,pJ,pyr,_yr,uyr,E5,YTe,byr,vyr,_J,Fyr,Tyr,Myr,C5,KTe,Eyr,Cyr,uJ,wyr,Ayr,yyr,w5,ZTe,Lyr,xyr,bJ,$yr,kyr,Syr,A5,eMe,Ryr,Pyr,vJ,Byr,Iyr,qyr,y5,oMe,Nyr,jyr,FJ,Dyr,Gyr,Oyr,L5,rMe,Vyr,Xyr,TJ,zyr,Wyr,Qyr,x5,tMe,Hyr,Uyr,MJ,Jyr,Yyr,Kyr,$5,aMe,Zyr,eLr,EJ,oLr,rLr,tLr,k5,nMe,aLr,nLr,CJ,sLr,lLr,iLr,S5,sMe,dLr,cLr,wJ,fLr,mLr,gLr,R5,lMe,hLr,pLr,AJ,_Lr,uLr,bLr,P5,iMe,vLr,FLr,yJ,TLr,MLr,ELr,B5,dMe,CLr,wLr,LJ,ALr,yLr,LLr,I5,cMe,xLr,$Lr,xJ,kLr,SLr,RLr,q5,fMe,PLr,BLr,$J,ILr,qLr,NLr,N5,mMe,jLr,DLr,kJ,GLr,OLr,VLr,j5,gMe,XLr,zLr,SJ,WLr,QLr,HLr,D5,PNe,kc,G5,hMe,u9,ULr,pMe,JLr,BNe,mr,b9,YLr,Sc,KLr,RJ,ZLr,e8r,PJ,o8r,r8r,t8r,v9,a8r,_Me,n8r,s8r,l8r,Ot,F9,i8r,uMe,d8r,c8r,Rc,f8r,bMe,m8r,g8r,BJ,h8r,p8r,_8r,O5,u8r,Dr,T9,b8r,vMe,v8r,F8r,pn,T8r,FMe,M8r,E8r,TMe,C8r,w8r,MMe,A8r,y8r,L8r,Le,V5,EMe,x8r,$8r,IJ,k8r,S8r,R8r,X5,CMe,P8r,B8r,qJ,I8r,q8r,N8r,z5,wMe,j8r,D8r,NJ,G8r,O8r,V8r,W5,AMe,X8r,z8r,jJ,W8r,Q8r,H8r,Q5,yMe,U8r,J8r,DJ,Y8r,K8r,Z8r,H5,LMe,e9r,o9r,GJ,r9r,t9r,a9r,U5,xMe,n9r,s9r,OJ,l9r,i9r,d9r,J5,$Me,c9r,f9r,VJ,m9r,g9r,h9r,Y5,kMe,p9r,_9r,XJ,u9r,b9r,v9r,K5,SMe,F9r,T9r,zJ,M9r,E9r,C9r,Z5,INe,Pc,e3,RMe,M9,w9r,PMe,A9r,qNe,gr,E9,y9r,Bc,L9r,WJ,x9r,$9r,QJ,k9r,S9r,R9r,C9,P9r,BMe,B9r,I9r,q9r,Vt,w9,N9r,IMe,j9r,D9r,Ic,G9r,qMe,O9r,V9r,HJ,X9r,z9r,W9r,o3,Q9r,Gr,A9,H9r,NMe,U9r,J9r,_n,Y9r,jMe,K9r,Z9r,DMe,exr,oxr,GMe,rxr,txr,axr,Me,r3,OMe,nxr,sxr,UJ,lxr,ixr,dxr,t3,VMe,cxr,fxr,JJ,mxr,gxr,hxr,a3,XMe,pxr,_xr,YJ,uxr,bxr,vxr,n3,zMe,Fxr,Txr,KJ,Mxr,Exr,Cxr,s3,WMe,wxr,Axr,ZJ,yxr,Lxr,xxr,l3,QMe,$xr,kxr,eY,Sxr,Rxr,Pxr,i3,HMe,Bxr,Ixr,oY,qxr,Nxr,jxr,d3,UMe,Dxr,Gxr,rY,Oxr,Vxr,Xxr,c3,JMe,zxr,Wxr,tY,Qxr,Hxr,Uxr,f3,YMe,Jxr,Yxr,aY,Kxr,Zxr,e$r,m3,KMe,o$r,r$r,nY,t$r,a$r,n$r,g3,ZMe,s$r,l$r,sY,i$r,d$r,c$r,h3,NNe,qc,p3,e4e,y9,f$r,o4e,m$r,jNe,hr,L9,g$r,Nc,h$r,lY,p$r,_$r,iY,u$r,b$r,v$r,x9,F$r,r4e,T$r,M$r,E$r,Xt,$9,C$r,t4e,w$r,A$r,jc,y$r,a4e,L$r,x$r,dY,$$r,k$r,S$r,_3,R$r,Or,k9,P$r,n4e,B$r,I$r,un,q$r,s4e,N$r,j$r,l4e,D$r,G$r,i4e,O$r,V$r,X$r,xe,u3,d4e,z$r,W$r,cY,Q$r,H$r,U$r,b3,c4e,J$r,Y$r,fY,K$r,Z$r,ekr,v3,f4e,okr,rkr,mY,tkr,akr,nkr,F3,m4e,skr,lkr,gY,ikr,dkr,ckr,T3,g4e,fkr,mkr,hY,gkr,hkr,pkr,M3,h4e,_kr,ukr,pY,bkr,vkr,Fkr,E3,p4e,Tkr,Mkr,_Y,Ekr,Ckr,wkr,C3,_4e,Akr,ykr,uY,Lkr,xkr,$kr,w3,u4e,kkr,Skr,bY,Rkr,Pkr,Bkr,A3,b4e,Ikr,qkr,vY,Nkr,jkr,Dkr,y3,DNe,Dc,L3,v4e,S9,Gkr,F4e,Okr,GNe,pr,R9,Vkr,Gc,Xkr,FY,zkr,Wkr,TY,Qkr,Hkr,Ukr,P9,Jkr,T4e,Ykr,Kkr,Zkr,zt,B9,eSr,M4e,oSr,rSr,Oc,tSr,E4e,aSr,nSr,MY,sSr,lSr,iSr,x3,dSr,Vr,I9,cSr,C4e,fSr,mSr,bn,gSr,w4e,hSr,pSr,A4e,_Sr,uSr,y4e,bSr,vSr,FSr,Pe,$3,L4e,TSr,MSr,EY,ESr,CSr,wSr,k3,x4e,ASr,ySr,CY,LSr,xSr,$Sr,S3,$4e,kSr,SSr,wY,RSr,PSr,BSr,R3,k4e,ISr,qSr,AY,NSr,jSr,DSr,P3,S4e,GSr,OSr,yY,VSr,XSr,zSr,B3,R4e,WSr,QSr,LY,HSr,USr,JSr,I3,P4e,YSr,KSr,xY,ZSr,eRr,oRr,q3,B4e,rRr,tRr,$Y,aRr,nRr,sRr,N3,I4e,lRr,iRr,kY,dRr,cRr,fRr,j3,ONe,Vc,D3,q4e,q9,mRr,N4e,gRr,VNe,_r,N9,hRr,Xc,pRr,SY,_Rr,uRr,RY,bRr,vRr,FRr,j9,TRr,j4e,MRr,ERr,CRr,Wt,D9,wRr,D4e,ARr,yRr,zc,LRr,G4e,xRr,$Rr,PY,kRr,SRr,RRr,G3,PRr,Xr,G9,BRr,O4e,IRr,qRr,vn,NRr,V4e,jRr,DRr,X4e,GRr,ORr,z4e,VRr,XRr,zRr,$e,O3,W4e,WRr,QRr,BY,HRr,URr,JRr,V3,Q4e,YRr,KRr,IY,ZRr,ePr,oPr,X3,H4e,rPr,tPr,qY,aPr,nPr,sPr,z3,U4e,lPr,iPr,NY,dPr,cPr,fPr,W3,J4e,mPr,gPr,jY,hPr,pPr,_Pr,Q3,Y4e,uPr,bPr,DY,vPr,FPr,TPr,H3,K4e,MPr,EPr,GY,CPr,wPr,APr,U3,Z4e,yPr,LPr,OY,xPr,$Pr,kPr,J3,eEe,SPr,RPr,VY,PPr,BPr,IPr,Y3,oEe,qPr,NPr,XY,jPr,DPr,GPr,K3,XNe,Wc,Z3,rEe,O9,OPr,tEe,VPr,zNe,ur,V9,XPr,Qc,zPr,zY,WPr,QPr,WY,HPr,UPr,JPr,X9,YPr,aEe,KPr,ZPr,eBr,Qt,z9,oBr,nEe,rBr,tBr,Hc,aBr,sEe,nBr,sBr,QY,lBr,iBr,dBr,ew,cBr,zr,W9,fBr,lEe,mBr,gBr,Fn,hBr,iEe,pBr,_Br,dEe,uBr,bBr,cEe,vBr,FBr,TBr,ke,ow,fEe,MBr,EBr,HY,CBr,wBr,ABr,rw,mEe,yBr,LBr,UY,xBr,$Br,kBr,tw,gEe,SBr,RBr,JY,PBr,BBr,IBr,aw,hEe,qBr,NBr,YY,jBr,DBr,GBr,nw,pEe,OBr,VBr,KY,XBr,zBr,WBr,sw,_Ee,QBr,HBr,ZY,UBr,JBr,YBr,lw,uEe,KBr,ZBr,eK,eIr,oIr,rIr,iw,bEe,tIr,aIr,oK,nIr,sIr,lIr,dw,vEe,iIr,dIr,rK,cIr,fIr,mIr,cw,FEe,gIr,hIr,tK,pIr,_Ir,uIr,fw,WNe,Uc,mw,TEe,Q9,bIr,MEe,vIr,QNe,br,H9,FIr,Jc,TIr,aK,MIr,EIr,nK,CIr,wIr,AIr,U9,yIr,EEe,LIr,xIr,$Ir,Ht,J9,kIr,CEe,SIr,RIr,Yc,PIr,wEe,BIr,IIr,sK,qIr,NIr,jIr,gw,DIr,Wr,Y9,GIr,AEe,OIr,VIr,Tn,XIr,yEe,zIr,WIr,LEe,QIr,HIr,xEe,UIr,JIr,YIr,Ge,hw,$Ee,KIr,ZIr,lK,eqr,oqr,rqr,pw,kEe,tqr,aqr,iK,nqr,sqr,lqr,_w,SEe,iqr,dqr,dK,cqr,fqr,mqr,uw,REe,gqr,hqr,cK,pqr,_qr,uqr,bw,PEe,bqr,vqr,fK,Fqr,Tqr,Mqr,vw,BEe,Eqr,Cqr,mK,wqr,Aqr,yqr,Fw,IEe,Lqr,xqr,gK,$qr,kqr,Sqr,Tw,qEe,Rqr,Pqr,hK,Bqr,Iqr,qqr,Mw,HNe,Kc,Ew,NEe,K9,Nqr,jEe,jqr,UNe,vr,Z9,Dqr,Zc,Gqr,pK,Oqr,Vqr,_K,Xqr,zqr,Wqr,ex,Qqr,DEe,Hqr,Uqr,Jqr,Ut,ox,Yqr,GEe,Kqr,Zqr,ef,eNr,OEe,oNr,rNr,uK,tNr,aNr,nNr,Cw,sNr,Qr,rx,lNr,VEe,iNr,dNr,Mn,cNr,XEe,fNr,mNr,zEe,gNr,hNr,WEe,pNr,_Nr,uNr,Oe,ww,QEe,bNr,vNr,bK,FNr,TNr,MNr,Aw,HEe,ENr,CNr,vK,wNr,ANr,yNr,yw,UEe,LNr,xNr,FK,$Nr,kNr,SNr,Lw,JEe,RNr,PNr,TK,BNr,INr,qNr,xw,YEe,NNr,jNr,MK,DNr,GNr,ONr,$w,KEe,VNr,XNr,EK,zNr,WNr,QNr,kw,ZEe,HNr,UNr,CK,JNr,YNr,KNr,Sw,eCe,ZNr,ejr,wK,ojr,rjr,tjr,Rw,JNe,of,Pw,oCe,tx,ajr,rCe,njr,YNe,Fr,ax,sjr,rf,ljr,AK,ijr,djr,yK,cjr,fjr,mjr,nx,gjr,tCe,hjr,pjr,_jr,Jt,sx,ujr,aCe,bjr,vjr,tf,Fjr,nCe,Tjr,Mjr,LK,Ejr,Cjr,wjr,Bw,Ajr,Hr,lx,yjr,sCe,Ljr,xjr,En,$jr,lCe,kjr,Sjr,iCe,Rjr,Pjr,dCe,Bjr,Ijr,qjr,cCe,Iw,fCe,Njr,jjr,xK,Djr,Gjr,Ojr,qw,KNe,af,Nw,mCe,ix,Vjr,gCe,Xjr,ZNe,Tr,dx,zjr,nf,Wjr,$K,Qjr,Hjr,kK,Ujr,Jjr,Yjr,cx,Kjr,hCe,Zjr,eDr,oDr,Yt,fx,rDr,pCe,tDr,aDr,sf,nDr,_Ce,sDr,lDr,SK,iDr,dDr,cDr,jw,fDr,Ur,mx,mDr,uCe,gDr,hDr,Cn,pDr,bCe,_Dr,uDr,vCe,bDr,vDr,FCe,FDr,TDr,MDr,gx,Dw,TCe,EDr,CDr,RK,wDr,ADr,yDr,Gw,MCe,LDr,xDr,PK,$Dr,kDr,SDr,Ow,eje,lf,Vw,ECe,hx,RDr,CCe,PDr,oje,Mr,px,BDr,df,IDr,BK,qDr,NDr,IK,jDr,DDr,GDr,_x,ODr,wCe,VDr,XDr,zDr,Kt,ux,WDr,ACe,QDr,HDr,cf,UDr,yCe,JDr,YDr,qK,KDr,ZDr,eGr,Xw,oGr,Jr,bx,rGr,LCe,tGr,aGr,wn,nGr,xCe,sGr,lGr,$Ce,iGr,dGr,kCe,cGr,fGr,mGr,SCe,zw,RCe,gGr,hGr,NK,pGr,_Gr,uGr,Ww,rje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),h6=new re({}),p6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new bGr({props:{warning:!0,$$slots:{default:[A8t]},$$scope:{ctx:L}}}),_6=new re({}),u6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L575"}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L598"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),T6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L721"}}),M6=new re({}),E6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L388"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17227/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L598"}}),L6=new re({}),x6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17227/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),Lh=new bGr({props:{$$slots:{default:[x8t]},$$scope:{ctx:L}}}),xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),R6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),P6=new re({}),B6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L87"}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L101"}}),Hh=new bGr({props:{$$slots:{default:[k8t]},$$scope:{ctx:L}}}),Uh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),j6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L254"}}),D6=new re({}),G6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L727"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Kh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),z6=new re({}),W6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L734"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),J6=new re({}),Y6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L749"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L756"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L763"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L772"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L806"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L813"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L799"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L781"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L788"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L822"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L861"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L868"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L891"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L875"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L882"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L900"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L907"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),LL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L854"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L829"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L836"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L845"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <code>TFOPTForCausalLM</code> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),$8=new re({}),k8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),G8=new re({}),O8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),W8=new re({}),Q8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),q9=new re({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),hx=new re({}),px=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),c6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),f6=o("AutoConfig"),Ln=o(", "),xn=a("a"),m6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),g6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),k$=o("will create a model that is an instance of "),_i=a("a"),S$=o("BertModel"),R$=o("."),Eo=l(),wa=a("p"),P$=o("There is one class of "),uf=a("code"),B$=o("AutoModel"),cGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZIe=l(),ui=a("h2"),bf=a("a"),kee=a("span"),F(h6.$$.fragment),fGe=l(),See=a("span"),mGe=o("Extending the Auto Classes"),eqe=l(),kn=a("p"),gGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ree=a("code"),hGe=o("NewModel"),pGe=o(", make sure you have a "),Pee=a("code"),_Ge=o("NewModelConfig"),uGe=o(` then you can add those to the auto
classes like this:`),oqe=l(),F(p6.$$.fragment),rqe=l(),I$=a("p"),bGe=o("You will then be able to use the auto classes like you would usually do!"),tqe=l(),F(vf.$$.fragment),aqe=l(),bi=a("h2"),Ff=a("a"),Bee=a("span"),F(_6.$$.fragment),vGe=l(),Iee=a("span"),FGe=o("AutoConfig"),nqe=l(),Co=a("div"),F(u6.$$.fragment),TGe=l(),b6=a("p"),MGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=a("a"),EGe=o("from_pretrained()"),CGe=o(" class method."),wGe=l(),v6=a("p"),AGe=o("This class cannot be instantiated directly using "),qee=a("code"),yGe=o("__init__()"),LGe=o(" (throws an error)."),xGe=l(),Er=a("div"),F(F6.$$.fragment),$Ge=l(),Nee=a("p"),kGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SGe=l(),vi=a("p"),RGe=o("The configuration class to instantiate is selected based on the "),jee=a("code"),PGe=o("model_type"),BGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Dee=a("code"),IGe=o("pretrained_model_name_or_path"),qGe=o(":"),NGe=l(),A=a("ul"),Tf=a("li"),Gee=a("strong"),jGe=o("albert"),DGe=o(" \u2014 "),N$=a("a"),GGe=o("AlbertConfig"),OGe=o(" (ALBERT model)"),VGe=l(),Mf=a("li"),Oee=a("strong"),XGe=o("bart"),zGe=o(" \u2014 "),j$=a("a"),WGe=o("BartConfig"),QGe=o(" (BART model)"),HGe=l(),Ef=a("li"),Vee=a("strong"),UGe=o("beit"),JGe=o(" \u2014 "),D$=a("a"),YGe=o("BeitConfig"),KGe=o(" (BEiT model)"),ZGe=l(),Cf=a("li"),Xee=a("strong"),eOe=o("bert"),oOe=o(" \u2014 "),G$=a("a"),rOe=o("BertConfig"),tOe=o(" (BERT model)"),aOe=l(),wf=a("li"),zee=a("strong"),nOe=o("bert-generation"),sOe=o(" \u2014 "),O$=a("a"),lOe=o("BertGenerationConfig"),iOe=o(" (Bert Generation model)"),dOe=l(),Af=a("li"),Wee=a("strong"),cOe=o("big_bird"),fOe=o(" \u2014 "),V$=a("a"),mOe=o("BigBirdConfig"),gOe=o(" (BigBird model)"),hOe=l(),yf=a("li"),Qee=a("strong"),pOe=o("bigbird_pegasus"),_Oe=o(" \u2014 "),X$=a("a"),uOe=o("BigBirdPegasusConfig"),bOe=o(" (BigBirdPegasus model)"),vOe=l(),Lf=a("li"),Hee=a("strong"),FOe=o("blenderbot"),TOe=o(" \u2014 "),z$=a("a"),MOe=o("BlenderbotConfig"),EOe=o(" (Blenderbot model)"),COe=l(),xf=a("li"),Uee=a("strong"),wOe=o("blenderbot-small"),AOe=o(" \u2014 "),W$=a("a"),yOe=o("BlenderbotSmallConfig"),LOe=o(" (BlenderbotSmall model)"),xOe=l(),$f=a("li"),Jee=a("strong"),$Oe=o("camembert"),kOe=o(" \u2014 "),Q$=a("a"),SOe=o("CamembertConfig"),ROe=o(" (CamemBERT model)"),POe=l(),kf=a("li"),Yee=a("strong"),BOe=o("canine"),IOe=o(" \u2014 "),H$=a("a"),qOe=o("CanineConfig"),NOe=o(" (Canine model)"),jOe=l(),Sf=a("li"),Kee=a("strong"),DOe=o("clip"),GOe=o(" \u2014 "),U$=a("a"),OOe=o("CLIPConfig"),VOe=o(" (CLIP model)"),XOe=l(),Rf=a("li"),Zee=a("strong"),zOe=o("convbert"),WOe=o(" \u2014 "),J$=a("a"),QOe=o("ConvBertConfig"),HOe=o(" (ConvBERT model)"),UOe=l(),Pf=a("li"),eoe=a("strong"),JOe=o("convnext"),YOe=o(" \u2014 "),Y$=a("a"),KOe=o("ConvNextConfig"),ZOe=o(" (ConvNext model)"),eVe=l(),Bf=a("li"),ooe=a("strong"),oVe=o("ctrl"),rVe=o(" \u2014 "),K$=a("a"),tVe=o("CTRLConfig"),aVe=o(" (CTRL model)"),nVe=l(),If=a("li"),roe=a("strong"),sVe=o("data2vec-audio"),lVe=o(" \u2014 "),Z$=a("a"),iVe=o("Data2VecAudioConfig"),dVe=o(" (Data2VecAudio model)"),cVe=l(),qf=a("li"),toe=a("strong"),fVe=o("data2vec-text"),mVe=o(" \u2014 "),ek=a("a"),gVe=o("Data2VecTextConfig"),hVe=o(" (Data2VecText model)"),pVe=l(),Nf=a("li"),aoe=a("strong"),_Ve=o("data2vec-vision"),uVe=o(" \u2014 "),ok=a("a"),bVe=o("Data2VecVisionConfig"),vVe=o(" (Data2VecVision model)"),FVe=l(),jf=a("li"),noe=a("strong"),TVe=o("deberta"),MVe=o(" \u2014 "),rk=a("a"),EVe=o("DebertaConfig"),CVe=o(" (DeBERTa model)"),wVe=l(),Df=a("li"),soe=a("strong"),AVe=o("deberta-v2"),yVe=o(" \u2014 "),tk=a("a"),LVe=o("DebertaV2Config"),xVe=o(" (DeBERTa-v2 model)"),$Ve=l(),Gf=a("li"),loe=a("strong"),kVe=o("decision_transformer"),SVe=o(" \u2014 "),ak=a("a"),RVe=o("DecisionTransformerConfig"),PVe=o(" (Decision Transformer model)"),BVe=l(),Of=a("li"),ioe=a("strong"),IVe=o("deit"),qVe=o(" \u2014 "),nk=a("a"),NVe=o("DeiTConfig"),jVe=o(" (DeiT model)"),DVe=l(),Vf=a("li"),doe=a("strong"),GVe=o("detr"),OVe=o(" \u2014 "),sk=a("a"),VVe=o("DetrConfig"),XVe=o(" (DETR model)"),zVe=l(),Xf=a("li"),coe=a("strong"),WVe=o("distilbert"),QVe=o(" \u2014 "),lk=a("a"),HVe=o("DistilBertConfig"),UVe=o(" (DistilBERT model)"),JVe=l(),zf=a("li"),foe=a("strong"),YVe=o("dpr"),KVe=o(" \u2014 "),ik=a("a"),ZVe=o("DPRConfig"),eXe=o(" (DPR model)"),oXe=l(),Wf=a("li"),moe=a("strong"),rXe=o("dpt"),tXe=o(" \u2014 "),dk=a("a"),aXe=o("DPTConfig"),nXe=o(" (DPT model)"),sXe=l(),Qf=a("li"),goe=a("strong"),lXe=o("electra"),iXe=o(" \u2014 "),ck=a("a"),dXe=o("ElectraConfig"),cXe=o(" (ELECTRA model)"),fXe=l(),Hf=a("li"),hoe=a("strong"),mXe=o("encoder-decoder"),gXe=o(" \u2014 "),fk=a("a"),hXe=o("EncoderDecoderConfig"),pXe=o(" (Encoder decoder model)"),_Xe=l(),Uf=a("li"),poe=a("strong"),uXe=o("flaubert"),bXe=o(" \u2014 "),mk=a("a"),vXe=o("FlaubertConfig"),FXe=o(" (FlauBERT model)"),TXe=l(),Jf=a("li"),_oe=a("strong"),MXe=o("flava"),EXe=o(" \u2014 "),gk=a("a"),CXe=o("FlavaConfig"),wXe=o(" (Flava model)"),AXe=l(),Yf=a("li"),uoe=a("strong"),yXe=o("fnet"),LXe=o(" \u2014 "),hk=a("a"),xXe=o("FNetConfig"),$Xe=o(" (FNet model)"),kXe=l(),Kf=a("li"),boe=a("strong"),SXe=o("fsmt"),RXe=o(" \u2014 "),pk=a("a"),PXe=o("FSMTConfig"),BXe=o(" (FairSeq Machine-Translation model)"),IXe=l(),Zf=a("li"),voe=a("strong"),qXe=o("funnel"),NXe=o(" \u2014 "),_k=a("a"),jXe=o("FunnelConfig"),DXe=o(" (Funnel Transformer model)"),GXe=l(),em=a("li"),Foe=a("strong"),OXe=o("glpn"),VXe=o(" \u2014 "),uk=a("a"),XXe=o("GLPNConfig"),zXe=o(" (GLPN model)"),WXe=l(),om=a("li"),Toe=a("strong"),QXe=o("gpt2"),HXe=o(" \u2014 "),bk=a("a"),UXe=o("GPT2Config"),JXe=o(" (OpenAI GPT-2 model)"),YXe=l(),rm=a("li"),Moe=a("strong"),KXe=o("gpt_neo"),ZXe=o(" \u2014 "),vk=a("a"),eze=o("GPTNeoConfig"),oze=o(" (GPT Neo model)"),rze=l(),tm=a("li"),Eoe=a("strong"),tze=o("gptj"),aze=o(" \u2014 "),Fk=a("a"),nze=o("GPTJConfig"),sze=o(" (GPT-J model)"),lze=l(),am=a("li"),Coe=a("strong"),ize=o("hubert"),dze=o(" \u2014 "),Tk=a("a"),cze=o("HubertConfig"),fze=o(" (Hubert model)"),mze=l(),nm=a("li"),woe=a("strong"),gze=o("ibert"),hze=o(" \u2014 "),Mk=a("a"),pze=o("IBertConfig"),_ze=o(" (I-BERT model)"),uze=l(),sm=a("li"),Aoe=a("strong"),bze=o("imagegpt"),vze=o(" \u2014 "),Ek=a("a"),Fze=o("ImageGPTConfig"),Tze=o(" (ImageGPT model)"),Mze=l(),lm=a("li"),yoe=a("strong"),Eze=o("layoutlm"),Cze=o(" \u2014 "),Ck=a("a"),wze=o("LayoutLMConfig"),Aze=o(" (LayoutLM model)"),yze=l(),im=a("li"),Loe=a("strong"),Lze=o("layoutlmv2"),xze=o(" \u2014 "),wk=a("a"),$ze=o("LayoutLMv2Config"),kze=o(" (LayoutLMv2 model)"),Sze=l(),dm=a("li"),xoe=a("strong"),Rze=o("led"),Pze=o(" \u2014 "),Ak=a("a"),Bze=o("LEDConfig"),Ize=o(" (LED model)"),qze=l(),cm=a("li"),$oe=a("strong"),Nze=o("longformer"),jze=o(" \u2014 "),yk=a("a"),Dze=o("LongformerConfig"),Gze=o(" (Longformer model)"),Oze=l(),fm=a("li"),koe=a("strong"),Vze=o("luke"),Xze=o(" \u2014 "),Lk=a("a"),zze=o("LukeConfig"),Wze=o(" (LUKE model)"),Qze=l(),mm=a("li"),Soe=a("strong"),Hze=o("lxmert"),Uze=o(" \u2014 "),xk=a("a"),Jze=o("LxmertConfig"),Yze=o(" (LXMERT model)"),Kze=l(),gm=a("li"),Roe=a("strong"),Zze=o("m2m_100"),eWe=o(" \u2014 "),$k=a("a"),oWe=o("M2M100Config"),rWe=o(" (M2M100 model)"),tWe=l(),hm=a("li"),Poe=a("strong"),aWe=o("marian"),nWe=o(" \u2014 "),kk=a("a"),sWe=o("MarianConfig"),lWe=o(" (Marian model)"),iWe=l(),pm=a("li"),Boe=a("strong"),dWe=o("maskformer"),cWe=o(" \u2014 "),Sk=a("a"),fWe=o("MaskFormerConfig"),mWe=o(" (MaskFormer model)"),gWe=l(),_m=a("li"),Ioe=a("strong"),hWe=o("mbart"),pWe=o(" \u2014 "),Rk=a("a"),_We=o("MBartConfig"),uWe=o(" (mBART model)"),bWe=l(),um=a("li"),qoe=a("strong"),vWe=o("megatron-bert"),FWe=o(" \u2014 "),Pk=a("a"),TWe=o("MegatronBertConfig"),MWe=o(" (MegatronBert model)"),EWe=l(),bm=a("li"),Noe=a("strong"),CWe=o("mobilebert"),wWe=o(" \u2014 "),Bk=a("a"),AWe=o("MobileBertConfig"),yWe=o(" (MobileBERT model)"),LWe=l(),vm=a("li"),joe=a("strong"),xWe=o("mpnet"),$We=o(" \u2014 "),Ik=a("a"),kWe=o("MPNetConfig"),SWe=o(" (MPNet model)"),RWe=l(),Fm=a("li"),Doe=a("strong"),PWe=o("mt5"),BWe=o(" \u2014 "),qk=a("a"),IWe=o("MT5Config"),qWe=o(" (mT5 model)"),NWe=l(),Tm=a("li"),Goe=a("strong"),jWe=o("nystromformer"),DWe=o(" \u2014 "),Nk=a("a"),GWe=o("NystromformerConfig"),OWe=o(" (Nystromformer model)"),VWe=l(),Mm=a("li"),Ooe=a("strong"),XWe=o("openai-gpt"),zWe=o(" \u2014 "),jk=a("a"),WWe=o("OpenAIGPTConfig"),QWe=o(" (OpenAI GPT model)"),HWe=l(),Em=a("li"),Voe=a("strong"),UWe=o("opt"),JWe=o(" \u2014 "),Dk=a("a"),YWe=o("OPTConfig"),KWe=o(" (OPT model)"),ZWe=l(),Cm=a("li"),Xoe=a("strong"),eQe=o("pegasus"),oQe=o(" \u2014 "),Gk=a("a"),rQe=o("PegasusConfig"),tQe=o(" (Pegasus model)"),aQe=l(),wm=a("li"),zoe=a("strong"),nQe=o("perceiver"),sQe=o(" \u2014 "),Ok=a("a"),lQe=o("PerceiverConfig"),iQe=o(" (Perceiver model)"),dQe=l(),Am=a("li"),Woe=a("strong"),cQe=o("plbart"),fQe=o(" \u2014 "),Vk=a("a"),mQe=o("PLBartConfig"),gQe=o(" (PLBart model)"),hQe=l(),ym=a("li"),Qoe=a("strong"),pQe=o("poolformer"),_Qe=o(" \u2014 "),Xk=a("a"),uQe=o("PoolFormerConfig"),bQe=o(" (PoolFormer model)"),vQe=l(),Lm=a("li"),Hoe=a("strong"),FQe=o("prophetnet"),TQe=o(" \u2014 "),zk=a("a"),MQe=o("ProphetNetConfig"),EQe=o(" (ProphetNet model)"),CQe=l(),xm=a("li"),Uoe=a("strong"),wQe=o("qdqbert"),AQe=o(" \u2014 "),Wk=a("a"),yQe=o("QDQBertConfig"),LQe=o(" (QDQBert model)"),xQe=l(),$m=a("li"),Joe=a("strong"),$Qe=o("rag"),kQe=o(" \u2014 "),Qk=a("a"),SQe=o("RagConfig"),RQe=o(" (RAG model)"),PQe=l(),km=a("li"),Yoe=a("strong"),BQe=o("realm"),IQe=o(" \u2014 "),Hk=a("a"),qQe=o("RealmConfig"),NQe=o(" (Realm model)"),jQe=l(),Sm=a("li"),Koe=a("strong"),DQe=o("reformer"),GQe=o(" \u2014 "),Uk=a("a"),OQe=o("ReformerConfig"),VQe=o(" (Reformer model)"),XQe=l(),Rm=a("li"),Zoe=a("strong"),zQe=o("regnet"),WQe=o(" \u2014 "),Jk=a("a"),QQe=o("RegNetConfig"),HQe=o(" (RegNet model)"),UQe=l(),Pm=a("li"),ere=a("strong"),JQe=o("rembert"),YQe=o(" \u2014 "),Yk=a("a"),KQe=o("RemBertConfig"),ZQe=o(" (RemBERT model)"),eHe=l(),Bm=a("li"),ore=a("strong"),oHe=o("resnet"),rHe=o(" \u2014 "),Kk=a("a"),tHe=o("ResNetConfig"),aHe=o(" (ResNet model)"),nHe=l(),Im=a("li"),rre=a("strong"),sHe=o("retribert"),lHe=o(" \u2014 "),Zk=a("a"),iHe=o("RetriBertConfig"),dHe=o(" (RetriBERT model)"),cHe=l(),qm=a("li"),tre=a("strong"),fHe=o("roberta"),mHe=o(" \u2014 "),eS=a("a"),gHe=o("RobertaConfig"),hHe=o(" (RoBERTa model)"),pHe=l(),Nm=a("li"),are=a("strong"),_He=o("roformer"),uHe=o(" \u2014 "),oS=a("a"),bHe=o("RoFormerConfig"),vHe=o(" (RoFormer model)"),FHe=l(),jm=a("li"),nre=a("strong"),THe=o("segformer"),MHe=o(" \u2014 "),rS=a("a"),EHe=o("SegformerConfig"),CHe=o(" (SegFormer model)"),wHe=l(),Dm=a("li"),sre=a("strong"),AHe=o("sew"),yHe=o(" \u2014 "),tS=a("a"),LHe=o("SEWConfig"),xHe=o(" (SEW model)"),$He=l(),Gm=a("li"),lre=a("strong"),kHe=o("sew-d"),SHe=o(" \u2014 "),aS=a("a"),RHe=o("SEWDConfig"),PHe=o(" (SEW-D model)"),BHe=l(),Om=a("li"),ire=a("strong"),IHe=o("speech-encoder-decoder"),qHe=o(" \u2014 "),nS=a("a"),NHe=o("SpeechEncoderDecoderConfig"),jHe=o(" (Speech Encoder decoder model)"),DHe=l(),Vm=a("li"),dre=a("strong"),GHe=o("speech_to_text"),OHe=o(" \u2014 "),sS=a("a"),VHe=o("Speech2TextConfig"),XHe=o(" (Speech2Text model)"),zHe=l(),Xm=a("li"),cre=a("strong"),WHe=o("speech_to_text_2"),QHe=o(" \u2014 "),lS=a("a"),HHe=o("Speech2Text2Config"),UHe=o(" (Speech2Text2 model)"),JHe=l(),zm=a("li"),fre=a("strong"),YHe=o("splinter"),KHe=o(" \u2014 "),iS=a("a"),ZHe=o("SplinterConfig"),eUe=o(" (Splinter model)"),oUe=l(),Wm=a("li"),mre=a("strong"),rUe=o("squeezebert"),tUe=o(" \u2014 "),dS=a("a"),aUe=o("SqueezeBertConfig"),nUe=o(" (SqueezeBERT model)"),sUe=l(),Qm=a("li"),gre=a("strong"),lUe=o("swin"),iUe=o(" \u2014 "),cS=a("a"),dUe=o("SwinConfig"),cUe=o(" (Swin model)"),fUe=l(),Hm=a("li"),hre=a("strong"),mUe=o("t5"),gUe=o(" \u2014 "),fS=a("a"),hUe=o("T5Config"),pUe=o(" (T5 model)"),_Ue=l(),Um=a("li"),pre=a("strong"),uUe=o("tapas"),bUe=o(" \u2014 "),mS=a("a"),vUe=o("TapasConfig"),FUe=o(" (TAPAS model)"),TUe=l(),Jm=a("li"),_re=a("strong"),MUe=o("trajectory_transformer"),EUe=o(" \u2014 "),gS=a("a"),CUe=o("TrajectoryTransformerConfig"),wUe=o(" (Trajectory Transformer model)"),AUe=l(),Ym=a("li"),ure=a("strong"),yUe=o("transfo-xl"),LUe=o(" \u2014 "),hS=a("a"),xUe=o("TransfoXLConfig"),$Ue=o(" (Transformer-XL model)"),kUe=l(),Km=a("li"),bre=a("strong"),SUe=o("trocr"),RUe=o(" \u2014 "),pS=a("a"),PUe=o("TrOCRConfig"),BUe=o(" (TrOCR model)"),IUe=l(),Zm=a("li"),vre=a("strong"),qUe=o("unispeech"),NUe=o(" \u2014 "),_S=a("a"),jUe=o("UniSpeechConfig"),DUe=o(" (UniSpeech model)"),GUe=l(),eg=a("li"),Fre=a("strong"),OUe=o("unispeech-sat"),VUe=o(" \u2014 "),uS=a("a"),XUe=o("UniSpeechSatConfig"),zUe=o(" (UniSpeechSat model)"),WUe=l(),og=a("li"),Tre=a("strong"),QUe=o("van"),HUe=o(" \u2014 "),bS=a("a"),UUe=o("VanConfig"),JUe=o(" (VAN model)"),YUe=l(),rg=a("li"),Mre=a("strong"),KUe=o("vilt"),ZUe=o(" \u2014 "),vS=a("a"),eJe=o("ViltConfig"),oJe=o(" (ViLT model)"),rJe=l(),tg=a("li"),Ere=a("strong"),tJe=o("vision-encoder-decoder"),aJe=o(" \u2014 "),FS=a("a"),nJe=o("VisionEncoderDecoderConfig"),sJe=o(" (Vision Encoder decoder model)"),lJe=l(),ag=a("li"),Cre=a("strong"),iJe=o("vision-text-dual-encoder"),dJe=o(" \u2014 "),TS=a("a"),cJe=o("VisionTextDualEncoderConfig"),fJe=o(" (VisionTextDualEncoder model)"),mJe=l(),ng=a("li"),wre=a("strong"),gJe=o("visual_bert"),hJe=o(" \u2014 "),MS=a("a"),pJe=o("VisualBertConfig"),_Je=o(" (VisualBert model)"),uJe=l(),sg=a("li"),Are=a("strong"),bJe=o("vit"),vJe=o(" \u2014 "),ES=a("a"),FJe=o("ViTConfig"),TJe=o(" (ViT model)"),MJe=l(),lg=a("li"),yre=a("strong"),EJe=o("vit_mae"),CJe=o(" \u2014 "),CS=a("a"),wJe=o("ViTMAEConfig"),AJe=o(" (ViTMAE model)"),yJe=l(),ig=a("li"),Lre=a("strong"),LJe=o("wav2vec2"),xJe=o(" \u2014 "),wS=a("a"),$Je=o("Wav2Vec2Config"),kJe=o(" (Wav2Vec2 model)"),SJe=l(),dg=a("li"),xre=a("strong"),RJe=o("wav2vec2-conformer"),PJe=o(" \u2014 "),AS=a("a"),BJe=o("Wav2Vec2ConformerConfig"),IJe=o(" (Wav2Vec2-Conformer model)"),qJe=l(),cg=a("li"),$re=a("strong"),NJe=o("wavlm"),jJe=o(" \u2014 "),yS=a("a"),DJe=o("WavLMConfig"),GJe=o(" (WavLM model)"),OJe=l(),fg=a("li"),kre=a("strong"),VJe=o("xglm"),XJe=o(" \u2014 "),LS=a("a"),zJe=o("XGLMConfig"),WJe=o(" (XGLM model)"),QJe=l(),mg=a("li"),Sre=a("strong"),HJe=o("xlm"),UJe=o(" \u2014 "),xS=a("a"),JJe=o("XLMConfig"),YJe=o(" (XLM model)"),KJe=l(),gg=a("li"),Rre=a("strong"),ZJe=o("xlm-prophetnet"),eYe=o(" \u2014 "),$S=a("a"),oYe=o("XLMProphetNetConfig"),rYe=o(" (XLMProphetNet model)"),tYe=l(),hg=a("li"),Pre=a("strong"),aYe=o("xlm-roberta"),nYe=o(" \u2014 "),kS=a("a"),sYe=o("XLMRobertaConfig"),lYe=o(" (XLM-RoBERTa model)"),iYe=l(),pg=a("li"),Bre=a("strong"),dYe=o("xlm-roberta-xl"),cYe=o(" \u2014 "),SS=a("a"),fYe=o("XLMRobertaXLConfig"),mYe=o(" (XLM-RoBERTa-XL model)"),gYe=l(),_g=a("li"),Ire=a("strong"),hYe=o("xlnet"),pYe=o(" \u2014 "),RS=a("a"),_Ye=o("XLNetConfig"),uYe=o(" (XLNet model)"),bYe=l(),ug=a("li"),qre=a("strong"),vYe=o("yolos"),FYe=o(" \u2014 "),PS=a("a"),TYe=o("YolosConfig"),MYe=o(" (YOLOS model)"),EYe=l(),bg=a("li"),Nre=a("strong"),CYe=o("yoso"),wYe=o(" \u2014 "),BS=a("a"),AYe=o("YosoConfig"),yYe=o(" (YOSO model)"),LYe=l(),F(vg.$$.fragment),xYe=l(),Fg=a("div"),F(T6.$$.fragment),$Ye=l(),jre=a("p"),kYe=o("Register a new configuration for this class."),sqe=l(),Fi=a("h2"),Tg=a("a"),Dre=a("span"),F(M6.$$.fragment),SYe=l(),Gre=a("span"),RYe=o("AutoTokenizer"),lqe=l(),wo=a("div"),F(E6.$$.fragment),PYe=l(),C6=a("p"),BYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),IS=a("a"),IYe=o("AutoTokenizer.from_pretrained()"),qYe=o(" class method."),NYe=l(),w6=a("p"),jYe=o("This class cannot be instantiated directly using "),Ore=a("code"),DYe=o("__init__()"),GYe=o(" (throws an error)."),OYe=l(),Cr=a("div"),F(A6.$$.fragment),VYe=l(),Vre=a("p"),XYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zYe=l(),Aa=a("p"),WYe=o("The tokenizer class to instantiate is selected based on the "),Xre=a("code"),QYe=o("model_type"),HYe=o(` property of the config object (either
passed as an argument or loaded from `),zre=a("code"),UYe=o("pretrained_model_name_or_path"),JYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wre=a("code"),YYe=o("pretrained_model_name_or_path"),KYe=o(":"),ZYe=l(),k=a("ul"),Sn=a("li"),Qre=a("strong"),eKe=o("albert"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("AlbertTokenizer"),tKe=o(" or "),NS=a("a"),aKe=o("AlbertTokenizerFast"),nKe=o(" (ALBERT model)"),sKe=l(),Rn=a("li"),Hre=a("strong"),lKe=o("bart"),iKe=o(" \u2014 "),jS=a("a"),dKe=o("BartTokenizer"),cKe=o(" or "),DS=a("a"),fKe=o("BartTokenizerFast"),mKe=o(" (BART model)"),gKe=l(),Pn=a("li"),Ure=a("strong"),hKe=o("barthez"),pKe=o(" \u2014 "),GS=a("a"),_Ke=o("BarthezTokenizer"),uKe=o(" or "),OS=a("a"),bKe=o("BarthezTokenizerFast"),vKe=o(" (BARThez model)"),FKe=l(),Mg=a("li"),Jre=a("strong"),TKe=o("bartpho"),MKe=o(" \u2014 "),VS=a("a"),EKe=o("BartphoTokenizer"),CKe=o(" (BARTpho model)"),wKe=l(),Bn=a("li"),Yre=a("strong"),AKe=o("bert"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BertTokenizer"),xKe=o(" or "),zS=a("a"),$Ke=o("BertTokenizerFast"),kKe=o(" (BERT model)"),SKe=l(),Eg=a("li"),Kre=a("strong"),RKe=o("bert-generation"),PKe=o(" \u2014 "),WS=a("a"),BKe=o("BertGenerationTokenizer"),IKe=o(" (Bert Generation model)"),qKe=l(),Cg=a("li"),Zre=a("strong"),NKe=o("bert-japanese"),jKe=o(" \u2014 "),QS=a("a"),DKe=o("BertJapaneseTokenizer"),GKe=o(" (BertJapanese model)"),OKe=l(),wg=a("li"),ete=a("strong"),VKe=o("bertweet"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("BertweetTokenizer"),WKe=o(" (Bertweet model)"),QKe=l(),In=a("li"),ote=a("strong"),HKe=o("big_bird"),UKe=o(" \u2014 "),US=a("a"),JKe=o("BigBirdTokenizer"),YKe=o(" or "),JS=a("a"),KKe=o("BigBirdTokenizerFast"),ZKe=o(" (BigBird model)"),eZe=l(),qn=a("li"),rte=a("strong"),oZe=o("bigbird_pegasus"),rZe=o(" \u2014 "),YS=a("a"),tZe=o("PegasusTokenizer"),aZe=o(" or "),KS=a("a"),nZe=o("PegasusTokenizerFast"),sZe=o(" (BigBirdPegasus model)"),lZe=l(),Nn=a("li"),tte=a("strong"),iZe=o("blenderbot"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("BlenderbotTokenizer"),fZe=o(" or "),eR=a("a"),mZe=o("BlenderbotTokenizerFast"),gZe=o(" (Blenderbot model)"),hZe=l(),Ag=a("li"),ate=a("strong"),pZe=o("blenderbot-small"),_Ze=o(" \u2014 "),oR=a("a"),uZe=o("BlenderbotSmallTokenizer"),bZe=o(" (BlenderbotSmall model)"),vZe=l(),yg=a("li"),nte=a("strong"),FZe=o("byt5"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("ByT5Tokenizer"),EZe=o(" (ByT5 model)"),CZe=l(),jn=a("li"),ste=a("strong"),wZe=o("camembert"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("CamembertTokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("CamembertTokenizerFast"),$Ze=o(" (CamemBERT model)"),kZe=l(),Lg=a("li"),lte=a("strong"),SZe=o("canine"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("CanineTokenizer"),BZe=o(" (Canine model)"),IZe=l(),Dn=a("li"),ite=a("strong"),qZe=o("clip"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("CLIPTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("CLIPTokenizerFast"),OZe=o(" (CLIP model)"),VZe=l(),Gn=a("li"),dte=a("strong"),XZe=o("convbert"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("ConvBertTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("ConvBertTokenizerFast"),UZe=o(" (ConvBERT model)"),JZe=l(),On=a("li"),cte=a("strong"),YZe=o("cpm"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("CpmTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("CpmTokenizerFast"),reo=o(" (CPM model)"),teo=l(),xg=a("li"),fte=a("strong"),aeo=o("ctrl"),neo=o(" \u2014 "),mR=a("a"),seo=o("CTRLTokenizer"),leo=o(" (CTRL model)"),ieo=l(),Vn=a("li"),mte=a("strong"),deo=o("data2vec-text"),ceo=o(" \u2014 "),gR=a("a"),feo=o("RobertaTokenizer"),meo=o(" or "),hR=a("a"),geo=o("RobertaTokenizerFast"),heo=o(" (Data2VecText model)"),peo=l(),Xn=a("li"),gte=a("strong"),_eo=o("deberta"),ueo=o(" \u2014 "),pR=a("a"),beo=o("DebertaTokenizer"),veo=o(" or "),_R=a("a"),Feo=o("DebertaTokenizerFast"),Teo=o(" (DeBERTa model)"),Meo=l(),zn=a("li"),hte=a("strong"),Eeo=o("deberta-v2"),Ceo=o(" \u2014 "),uR=a("a"),weo=o("DebertaV2Tokenizer"),Aeo=o(" or "),bR=a("a"),yeo=o("DebertaV2TokenizerFast"),Leo=o(" (DeBERTa-v2 model)"),xeo=l(),Wn=a("li"),pte=a("strong"),$eo=o("distilbert"),keo=o(" \u2014 "),vR=a("a"),Seo=o("DistilBertTokenizer"),Reo=o(" or "),FR=a("a"),Peo=o("DistilBertTokenizerFast"),Beo=o(" (DistilBERT model)"),Ieo=l(),Qn=a("li"),_te=a("strong"),qeo=o("dpr"),Neo=o(" \u2014 "),TR=a("a"),jeo=o("DPRQuestionEncoderTokenizer"),Deo=o(" or "),MR=a("a"),Geo=o("DPRQuestionEncoderTokenizerFast"),Oeo=o(" (DPR model)"),Veo=l(),Hn=a("li"),ute=a("strong"),Xeo=o("electra"),zeo=o(" \u2014 "),ER=a("a"),Weo=o("ElectraTokenizer"),Qeo=o(" or "),CR=a("a"),Heo=o("ElectraTokenizerFast"),Ueo=o(" (ELECTRA model)"),Jeo=l(),$g=a("li"),bte=a("strong"),Yeo=o("flaubert"),Keo=o(" \u2014 "),wR=a("a"),Zeo=o("FlaubertTokenizer"),eoo=o(" (FlauBERT model)"),ooo=l(),Un=a("li"),vte=a("strong"),roo=o("fnet"),too=o(" \u2014 "),AR=a("a"),aoo=o("FNetTokenizer"),noo=o(" or "),yR=a("a"),soo=o("FNetTokenizerFast"),loo=o(" (FNet model)"),ioo=l(),kg=a("li"),Fte=a("strong"),doo=o("fsmt"),coo=o(" \u2014 "),LR=a("a"),foo=o("FSMTTokenizer"),moo=o(" (FairSeq Machine-Translation model)"),goo=l(),Jn=a("li"),Tte=a("strong"),hoo=o("funnel"),poo=o(" \u2014 "),xR=a("a"),_oo=o("FunnelTokenizer"),uoo=o(" or "),$R=a("a"),boo=o("FunnelTokenizerFast"),voo=o(" (Funnel Transformer model)"),Foo=l(),Yn=a("li"),Mte=a("strong"),Too=o("gpt2"),Moo=o(" \u2014 "),kR=a("a"),Eoo=o("GPT2Tokenizer"),Coo=o(" or "),SR=a("a"),woo=o("GPT2TokenizerFast"),Aoo=o(" (OpenAI GPT-2 model)"),yoo=l(),Kn=a("li"),Ete=a("strong"),Loo=o("gpt_neo"),xoo=o(" \u2014 "),RR=a("a"),$oo=o("GPT2Tokenizer"),koo=o(" or "),PR=a("a"),Soo=o("GPT2TokenizerFast"),Roo=o(" (GPT Neo model)"),Poo=l(),Zn=a("li"),Cte=a("strong"),Boo=o("gptj"),Ioo=o(" \u2014 "),BR=a("a"),qoo=o("GPT2Tokenizer"),Noo=o(" or "),IR=a("a"),joo=o("GPT2TokenizerFast"),Doo=o(" (GPT-J model)"),Goo=l(),es=a("li"),wte=a("strong"),Ooo=o("herbert"),Voo=o(" \u2014 "),qR=a("a"),Xoo=o("HerbertTokenizer"),zoo=o(" or "),NR=a("a"),Woo=o("HerbertTokenizerFast"),Qoo=o(" (HerBERT model)"),Hoo=l(),Sg=a("li"),Ate=a("strong"),Uoo=o("hubert"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("Wav2Vec2CTCTokenizer"),Koo=o(" (Hubert model)"),Zoo=l(),os=a("li"),yte=a("strong"),ero=o("ibert"),oro=o(" \u2014 "),DR=a("a"),rro=o("RobertaTokenizer"),tro=o(" or "),GR=a("a"),aro=o("RobertaTokenizerFast"),nro=o(" (I-BERT model)"),sro=l(),rs=a("li"),Lte=a("strong"),lro=o("layoutlm"),iro=o(" \u2014 "),OR=a("a"),dro=o("LayoutLMTokenizer"),cro=o(" or "),VR=a("a"),fro=o("LayoutLMTokenizerFast"),mro=o(" (LayoutLM model)"),gro=l(),ts=a("li"),xte=a("strong"),hro=o("layoutlmv2"),pro=o(" \u2014 "),XR=a("a"),_ro=o("LayoutLMv2Tokenizer"),uro=o(" or "),zR=a("a"),bro=o("LayoutLMv2TokenizerFast"),vro=o(" (LayoutLMv2 model)"),Fro=l(),as=a("li"),$te=a("strong"),Tro=o("layoutxlm"),Mro=o(" \u2014 "),WR=a("a"),Ero=o("LayoutXLMTokenizer"),Cro=o(" or "),QR=a("a"),wro=o("LayoutXLMTokenizerFast"),Aro=o(" (LayoutXLM model)"),yro=l(),ns=a("li"),kte=a("strong"),Lro=o("led"),xro=o(" \u2014 "),HR=a("a"),$ro=o("LEDTokenizer"),kro=o(" or "),UR=a("a"),Sro=o("LEDTokenizerFast"),Rro=o(" (LED model)"),Pro=l(),ss=a("li"),Ste=a("strong"),Bro=o("longformer"),Iro=o(" \u2014 "),JR=a("a"),qro=o("LongformerTokenizer"),Nro=o(" or "),YR=a("a"),jro=o("LongformerTokenizerFast"),Dro=o(" (Longformer model)"),Gro=l(),Rg=a("li"),Rte=a("strong"),Oro=o("luke"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("LukeTokenizer"),zro=o(" (LUKE model)"),Wro=l(),ls=a("li"),Pte=a("strong"),Qro=o("lxmert"),Hro=o(" \u2014 "),ZR=a("a"),Uro=o("LxmertTokenizer"),Jro=o(" or "),eP=a("a"),Yro=o("LxmertTokenizerFast"),Kro=o(" (LXMERT model)"),Zro=l(),Pg=a("li"),Bte=a("strong"),eto=o("m2m_100"),oto=o(" \u2014 "),oP=a("a"),rto=o("M2M100Tokenizer"),tto=o(" (M2M100 model)"),ato=l(),Bg=a("li"),Ite=a("strong"),nto=o("marian"),sto=o(" \u2014 "),rP=a("a"),lto=o("MarianTokenizer"),ito=o(" (Marian model)"),dto=l(),is=a("li"),qte=a("strong"),cto=o("mbart"),fto=o(" \u2014 "),tP=a("a"),mto=o("MBartTokenizer"),gto=o(" or "),aP=a("a"),hto=o("MBartTokenizerFast"),pto=o(" (mBART model)"),_to=l(),ds=a("li"),Nte=a("strong"),uto=o("mbart50"),bto=o(" \u2014 "),nP=a("a"),vto=o("MBart50Tokenizer"),Fto=o(" or "),sP=a("a"),Tto=o("MBart50TokenizerFast"),Mto=o(" (mBART-50 model)"),Eto=l(),cs=a("li"),jte=a("strong"),Cto=o("megatron-bert"),wto=o(" \u2014 "),lP=a("a"),Ato=o("BertTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("BertTokenizerFast"),xto=o(" (MegatronBert model)"),$to=l(),Ig=a("li"),Dte=a("strong"),kto=o("mluke"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("MLukeTokenizer"),Pto=o(" (mLUKE model)"),Bto=l(),fs=a("li"),Gte=a("strong"),Ito=o("mobilebert"),qto=o(" \u2014 "),cP=a("a"),Nto=o("MobileBertTokenizer"),jto=o(" or "),fP=a("a"),Dto=o("MobileBertTokenizerFast"),Gto=o(" (MobileBERT model)"),Oto=l(),ms=a("li"),Ote=a("strong"),Vto=o("mpnet"),Xto=o(" \u2014 "),mP=a("a"),zto=o("MPNetTokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("MPNetTokenizerFast"),Hto=o(" (MPNet model)"),Uto=l(),gs=a("li"),Vte=a("strong"),Jto=o("mt5"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("MT5Tokenizer"),Zto=o(" or "),pP=a("a"),eao=o("MT5TokenizerFast"),oao=o(" (mT5 model)"),rao=l(),hs=a("li"),Xte=a("strong"),tao=o("nystromformer"),aao=o(" \u2014 "),_P=a("a"),nao=o("AlbertTokenizer"),sao=o(" or "),uP=a("a"),lao=o("AlbertTokenizerFast"),iao=o(" (Nystromformer model)"),dao=l(),ps=a("li"),zte=a("strong"),cao=o("openai-gpt"),fao=o(" \u2014 "),bP=a("a"),mao=o("OpenAIGPTTokenizer"),gao=o(" or "),vP=a("a"),hao=o("OpenAIGPTTokenizerFast"),pao=o(" (OpenAI GPT model)"),_ao=l(),qg=a("li"),Wte=a("strong"),uao=o("opt"),bao=o(" \u2014 "),FP=a("a"),vao=o("GPT2Tokenizer"),Fao=o(" (OPT model)"),Tao=l(),_s=a("li"),Qte=a("strong"),Mao=o("pegasus"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("PegasusTokenizer"),wao=o(" or "),MP=a("a"),Aao=o("PegasusTokenizerFast"),yao=o(" (Pegasus model)"),Lao=l(),Ng=a("li"),Hte=a("strong"),xao=o("perceiver"),$ao=o(" \u2014 "),EP=a("a"),kao=o("PerceiverTokenizer"),Sao=o(" (Perceiver model)"),Rao=l(),jg=a("li"),Ute=a("strong"),Pao=o("phobert"),Bao=o(" \u2014 "),CP=a("a"),Iao=o("PhobertTokenizer"),qao=o(" (PhoBERT model)"),Nao=l(),Dg=a("li"),Jte=a("strong"),jao=o("plbart"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("PLBartTokenizer"),Oao=o(" (PLBart model)"),Vao=l(),Gg=a("li"),Yte=a("strong"),Xao=o("prophetnet"),zao=o(" \u2014 "),AP=a("a"),Wao=o("ProphetNetTokenizer"),Qao=o(" (ProphetNet model)"),Hao=l(),us=a("li"),Kte=a("strong"),Uao=o("qdqbert"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("BertTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("BertTokenizerFast"),eno=o(" (QDQBert model)"),ono=l(),Og=a("li"),Zte=a("strong"),rno=o("rag"),tno=o(" \u2014 "),xP=a("a"),ano=o("RagTokenizer"),nno=o(" (RAG model)"),sno=l(),bs=a("li"),eae=a("strong"),lno=o("realm"),ino=o(" \u2014 "),$P=a("a"),dno=o("RealmTokenizer"),cno=o(" or "),kP=a("a"),fno=o("RealmTokenizerFast"),mno=o(" (Realm model)"),gno=l(),vs=a("li"),oae=a("strong"),hno=o("reformer"),pno=o(" \u2014 "),SP=a("a"),_no=o("ReformerTokenizer"),uno=o(" or "),RP=a("a"),bno=o("ReformerTokenizerFast"),vno=o(" (Reformer model)"),Fno=l(),Fs=a("li"),rae=a("strong"),Tno=o("rembert"),Mno=o(" \u2014 "),PP=a("a"),Eno=o("RemBertTokenizer"),Cno=o(" or "),BP=a("a"),wno=o("RemBertTokenizerFast"),Ano=o(" (RemBERT model)"),yno=l(),Ts=a("li"),tae=a("strong"),Lno=o("retribert"),xno=o(" \u2014 "),IP=a("a"),$no=o("RetriBertTokenizer"),kno=o(" or "),qP=a("a"),Sno=o("RetriBertTokenizerFast"),Rno=o(" (RetriBERT model)"),Pno=l(),Ms=a("li"),aae=a("strong"),Bno=o("roberta"),Ino=o(" \u2014 "),NP=a("a"),qno=o("RobertaTokenizer"),Nno=o(" or "),jP=a("a"),jno=o("RobertaTokenizerFast"),Dno=o(" (RoBERTa model)"),Gno=l(),Es=a("li"),nae=a("strong"),Ono=o("roformer"),Vno=o(" \u2014 "),DP=a("a"),Xno=o("RoFormerTokenizer"),zno=o(" or "),GP=a("a"),Wno=o("RoFormerTokenizerFast"),Qno=o(" (RoFormer model)"),Hno=l(),Vg=a("li"),sae=a("strong"),Uno=o("speech_to_text"),Jno=o(" \u2014 "),OP=a("a"),Yno=o("Speech2TextTokenizer"),Kno=o(" (Speech2Text model)"),Zno=l(),Xg=a("li"),lae=a("strong"),eso=o("speech_to_text_2"),oso=o(" \u2014 "),VP=a("a"),rso=o("Speech2Text2Tokenizer"),tso=o(" (Speech2Text2 model)"),aso=l(),Cs=a("li"),iae=a("strong"),nso=o("splinter"),sso=o(" \u2014 "),XP=a("a"),lso=o("SplinterTokenizer"),iso=o(" or "),zP=a("a"),dso=o("SplinterTokenizerFast"),cso=o(" (Splinter model)"),fso=l(),ws=a("li"),dae=a("strong"),mso=o("squeezebert"),gso=o(" \u2014 "),WP=a("a"),hso=o("SqueezeBertTokenizer"),pso=o(" or "),QP=a("a"),_so=o("SqueezeBertTokenizerFast"),uso=o(" (SqueezeBERT model)"),bso=l(),As=a("li"),cae=a("strong"),vso=o("t5"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("T5Tokenizer"),Mso=o(" or "),UP=a("a"),Eso=o("T5TokenizerFast"),Cso=o(" (T5 model)"),wso=l(),zg=a("li"),fae=a("strong"),Aso=o("tapas"),yso=o(" \u2014 "),JP=a("a"),Lso=o("TapasTokenizer"),xso=o(" (TAPAS model)"),$so=l(),Wg=a("li"),mae=a("strong"),kso=o("tapex"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("TapexTokenizer"),Pso=o(" (TAPEX model)"),Bso=l(),Qg=a("li"),gae=a("strong"),Iso=o("transfo-xl"),qso=o(" \u2014 "),KP=a("a"),Nso=o("TransfoXLTokenizer"),jso=o(" (Transformer-XL model)"),Dso=l(),ys=a("li"),hae=a("strong"),Gso=o("visual_bert"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("BertTokenizer"),Xso=o(" or "),eB=a("a"),zso=o("BertTokenizerFast"),Wso=o(" (VisualBert model)"),Qso=l(),Hg=a("li"),pae=a("strong"),Hso=o("wav2vec2"),Uso=o(" \u2014 "),oB=a("a"),Jso=o("Wav2Vec2CTCTokenizer"),Yso=o(" (Wav2Vec2 model)"),Kso=l(),Ug=a("li"),_ae=a("strong"),Zso=o("wav2vec2-conformer"),elo=o(" \u2014 "),rB=a("a"),olo=o("Wav2Vec2CTCTokenizer"),rlo=o(" (Wav2Vec2-Conformer model)"),tlo=l(),Jg=a("li"),uae=a("strong"),alo=o("wav2vec2_phoneme"),nlo=o(" \u2014 "),tB=a("a"),slo=o("Wav2Vec2PhonemeCTCTokenizer"),llo=o(" (Wav2Vec2Phoneme model)"),ilo=l(),Ls=a("li"),bae=a("strong"),dlo=o("xglm"),clo=o(" \u2014 "),aB=a("a"),flo=o("XGLMTokenizer"),mlo=o(" or "),nB=a("a"),glo=o("XGLMTokenizerFast"),hlo=o(" (XGLM model)"),plo=l(),Yg=a("li"),vae=a("strong"),_lo=o("xlm"),ulo=o(" \u2014 "),sB=a("a"),blo=o("XLMTokenizer"),vlo=o(" (XLM model)"),Flo=l(),Kg=a("li"),Fae=a("strong"),Tlo=o("xlm-prophetnet"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("XLMProphetNetTokenizer"),Clo=o(" (XLMProphetNet model)"),wlo=l(),xs=a("li"),Tae=a("strong"),Alo=o("xlm-roberta"),ylo=o(" \u2014 "),iB=a("a"),Llo=o("XLMRobertaTokenizer"),xlo=o(" or "),dB=a("a"),$lo=o("XLMRobertaTokenizerFast"),klo=o(" (XLM-RoBERTa model)"),Slo=l(),$s=a("li"),Mae=a("strong"),Rlo=o("xlm-roberta-xl"),Plo=o(" \u2014 "),cB=a("a"),Blo=o("RobertaTokenizer"),Ilo=o(" or "),fB=a("a"),qlo=o("RobertaTokenizerFast"),Nlo=o(" (XLM-RoBERTa-XL model)"),jlo=l(),ks=a("li"),Eae=a("strong"),Dlo=o("xlnet"),Glo=o(" \u2014 "),mB=a("a"),Olo=o("XLNetTokenizer"),Vlo=o(" or "),gB=a("a"),Xlo=o("XLNetTokenizerFast"),zlo=o(" (XLNet model)"),Wlo=l(),Ss=a("li"),Cae=a("strong"),Qlo=o("yoso"),Hlo=o(" \u2014 "),hB=a("a"),Ulo=o("AlbertTokenizer"),Jlo=o(" or "),pB=a("a"),Ylo=o("AlbertTokenizerFast"),Klo=o(" (YOSO model)"),Zlo=l(),F(Zg.$$.fragment),eio=l(),eh=a("div"),F(y6.$$.fragment),oio=l(),wae=a("p"),rio=o("Register a new tokenizer in this mapping."),iqe=l(),Ti=a("h2"),oh=a("a"),Aae=a("span"),F(L6.$$.fragment),tio=l(),yae=a("span"),aio=o("AutoFeatureExtractor"),dqe=l(),Ao=a("div"),F(x6.$$.fragment),nio=l(),$6=a("p"),sio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_B=a("a"),lio=o("AutoFeatureExtractor.from_pretrained()"),iio=o(" class method."),dio=l(),k6=a("p"),cio=o("This class cannot be instantiated directly using "),Lae=a("code"),fio=o("__init__()"),mio=o(" (throws an error)."),gio=l(),He=a("div"),F(S6.$$.fragment),hio=l(),xae=a("p"),pio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_io=l(),ya=a("p"),uio=o("The feature extractor class to instantiate is selected based on the "),$ae=a("code"),bio=o("model_type"),vio=o(` property of the config object
(either passed as an argument or loaded from `),kae=a("code"),Fio=o("pretrained_model_name_or_path"),Tio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sae=a("code"),Mio=o("pretrained_model_name_or_path"),Eio=o(":"),Cio=l(),Z=a("ul"),rh=a("li"),Rae=a("strong"),wio=o("beit"),Aio=o(" \u2014 "),uB=a("a"),yio=o("BeitFeatureExtractor"),Lio=o(" (BEiT model)"),xio=l(),th=a("li"),Pae=a("strong"),$io=o("clip"),kio=o(" \u2014 "),bB=a("a"),Sio=o("CLIPFeatureExtractor"),Rio=o(" (CLIP model)"),Pio=l(),ah=a("li"),Bae=a("strong"),Bio=o("convnext"),Iio=o(" \u2014 "),vB=a("a"),qio=o("ConvNextFeatureExtractor"),Nio=o(" (ConvNext model)"),jio=l(),nh=a("li"),Iae=a("strong"),Dio=o("data2vec-audio"),Gio=o(" \u2014 "),FB=a("a"),Oio=o("Wav2Vec2FeatureExtractor"),Vio=o(" (Data2VecAudio model)"),Xio=l(),sh=a("li"),qae=a("strong"),zio=o("data2vec-vision"),Wio=o(" \u2014 "),TB=a("a"),Qio=o("BeitFeatureExtractor"),Hio=o(" (Data2VecVision model)"),Uio=l(),lh=a("li"),Nae=a("strong"),Jio=o("deit"),Yio=o(" \u2014 "),MB=a("a"),Kio=o("DeiTFeatureExtractor"),Zio=o(" (DeiT model)"),edo=l(),ih=a("li"),jae=a("strong"),odo=o("detr"),rdo=o(" \u2014 "),EB=a("a"),tdo=o("DetrFeatureExtractor"),ado=o(" (DETR model)"),ndo=l(),dh=a("li"),Dae=a("strong"),sdo=o("dpt"),ldo=o(" \u2014 "),CB=a("a"),ido=o("DPTFeatureExtractor"),ddo=o(" (DPT model)"),cdo=l(),ch=a("li"),Gae=a("strong"),fdo=o("flava"),mdo=o(" \u2014 "),wB=a("a"),gdo=o("FlavaFeatureExtractor"),hdo=o(" (Flava model)"),pdo=l(),fh=a("li"),Oae=a("strong"),_do=o("glpn"),udo=o(" \u2014 "),AB=a("a"),bdo=o("GLPNFeatureExtractor"),vdo=o(" (GLPN model)"),Fdo=l(),mh=a("li"),Vae=a("strong"),Tdo=o("hubert"),Mdo=o(" \u2014 "),yB=a("a"),Edo=o("Wav2Vec2FeatureExtractor"),Cdo=o(" (Hubert model)"),wdo=l(),gh=a("li"),Xae=a("strong"),Ado=o("layoutlmv2"),ydo=o(" \u2014 "),LB=a("a"),Ldo=o("LayoutLMv2FeatureExtractor"),xdo=o(" (LayoutLMv2 model)"),$do=l(),hh=a("li"),zae=a("strong"),kdo=o("maskformer"),Sdo=o(" \u2014 "),xB=a("a"),Rdo=o("MaskFormerFeatureExtractor"),Pdo=o(" (MaskFormer model)"),Bdo=l(),ph=a("li"),Wae=a("strong"),Ido=o("perceiver"),qdo=o(" \u2014 "),$B=a("a"),Ndo=o("PerceiverFeatureExtractor"),jdo=o(" (Perceiver model)"),Ddo=l(),_h=a("li"),Qae=a("strong"),Gdo=o("poolformer"),Odo=o(" \u2014 "),kB=a("a"),Vdo=o("PoolFormerFeatureExtractor"),Xdo=o(" (PoolFormer model)"),zdo=l(),uh=a("li"),Hae=a("strong"),Wdo=o("regnet"),Qdo=o(" \u2014 "),SB=a("a"),Hdo=o("ConvNextFeatureExtractor"),Udo=o(" (RegNet model)"),Jdo=l(),bh=a("li"),Uae=a("strong"),Ydo=o("resnet"),Kdo=o(" \u2014 "),RB=a("a"),Zdo=o("ConvNextFeatureExtractor"),eco=o(" (ResNet model)"),oco=l(),vh=a("li"),Jae=a("strong"),rco=o("segformer"),tco=o(" \u2014 "),PB=a("a"),aco=o("SegformerFeatureExtractor"),nco=o(" (SegFormer model)"),sco=l(),Fh=a("li"),Yae=a("strong"),lco=o("speech_to_text"),ico=o(" \u2014 "),BB=a("a"),dco=o("Speech2TextFeatureExtractor"),cco=o(" (Speech2Text model)"),fco=l(),Th=a("li"),Kae=a("strong"),mco=o("swin"),gco=o(" \u2014 "),IB=a("a"),hco=o("ViTFeatureExtractor"),pco=o(" (Swin model)"),_co=l(),Mh=a("li"),Zae=a("strong"),uco=o("van"),bco=o(" \u2014 "),qB=a("a"),vco=o("ConvNextFeatureExtractor"),Fco=o(" (VAN model)"),Tco=l(),Eh=a("li"),ene=a("strong"),Mco=o("vit"),Eco=o(" \u2014 "),NB=a("a"),Cco=o("ViTFeatureExtractor"),wco=o(" (ViT model)"),Aco=l(),Ch=a("li"),one=a("strong"),yco=o("vit_mae"),Lco=o(" \u2014 "),jB=a("a"),xco=o("ViTFeatureExtractor"),$co=o(" (ViTMAE model)"),kco=l(),wh=a("li"),rne=a("strong"),Sco=o("wav2vec2"),Rco=o(" \u2014 "),DB=a("a"),Pco=o("Wav2Vec2FeatureExtractor"),Bco=o(" (Wav2Vec2 model)"),Ico=l(),Ah=a("li"),tne=a("strong"),qco=o("wav2vec2-conformer"),Nco=o(" \u2014 "),GB=a("a"),jco=o("Wav2Vec2FeatureExtractor"),Dco=o(" (Wav2Vec2-Conformer model)"),Gco=l(),yh=a("li"),ane=a("strong"),Oco=o("yolos"),Vco=o(" \u2014 "),OB=a("a"),Xco=o("YolosFeatureExtractor"),zco=o(" (YOLOS model)"),Wco=l(),F(Lh.$$.fragment),Qco=l(),F(xh.$$.fragment),Hco=l(),$h=a("div"),F(R6.$$.fragment),Uco=l(),nne=a("p"),Jco=o("Register a new feature extractor for this class."),cqe=l(),Mi=a("h2"),kh=a("a"),sne=a("span"),F(P6.$$.fragment),Yco=l(),lne=a("span"),Kco=o("AutoProcessor"),fqe=l(),yo=a("div"),F(B6.$$.fragment),Zco=l(),I6=a("p"),efo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VB=a("a"),ofo=o("AutoProcessor.from_pretrained()"),rfo=o(" class method."),tfo=l(),q6=a("p"),afo=o("This class cannot be instantiated directly using "),ine=a("code"),nfo=o("__init__()"),sfo=o(" (throws an error)."),lfo=l(),Ue=a("div"),F(N6.$$.fragment),ifo=l(),dne=a("p"),dfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cfo=l(),Ei=a("p"),ffo=o("The processor class to instantiate is selected based on the "),cne=a("code"),mfo=o("model_type"),gfo=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),hfo=o("pretrained_model_name_or_path"),pfo=o(" if possible):"),_fo=l(),pe=a("ul"),Sh=a("li"),mne=a("strong"),ufo=o("clip"),bfo=o(" \u2014 "),XB=a("a"),vfo=o("CLIPProcessor"),Ffo=o(" (CLIP model)"),Tfo=l(),Rh=a("li"),gne=a("strong"),Mfo=o("flava"),Efo=o(" \u2014 "),hne=a("code"),Cfo=o("FLAVAProcessor"),wfo=o(" (Flava model)"),Afo=l(),Ph=a("li"),pne=a("strong"),yfo=o("layoutlmv2"),Lfo=o(" \u2014 "),zB=a("a"),xfo=o("LayoutLMv2Processor"),$fo=o(" (LayoutLMv2 model)"),kfo=l(),Bh=a("li"),_ne=a("strong"),Sfo=o("layoutxlm"),Rfo=o(" \u2014 "),WB=a("a"),Pfo=o("LayoutXLMProcessor"),Bfo=o(" (LayoutXLM model)"),Ifo=l(),Ih=a("li"),une=a("strong"),qfo=o("sew"),Nfo=o(" \u2014 "),QB=a("a"),jfo=o("Wav2Vec2Processor"),Dfo=o(" (SEW model)"),Gfo=l(),qh=a("li"),bne=a("strong"),Ofo=o("sew-d"),Vfo=o(" \u2014 "),HB=a("a"),Xfo=o("Wav2Vec2Processor"),zfo=o(" (SEW-D model)"),Wfo=l(),Nh=a("li"),vne=a("strong"),Qfo=o("speech_to_text"),Hfo=o(" \u2014 "),UB=a("a"),Ufo=o("Speech2TextProcessor"),Jfo=o(" (Speech2Text model)"),Yfo=l(),jh=a("li"),Fne=a("strong"),Kfo=o("speech_to_text_2"),Zfo=o(" \u2014 "),JB=a("a"),emo=o("Speech2Text2Processor"),omo=o(" (Speech2Text2 model)"),rmo=l(),Dh=a("li"),Tne=a("strong"),tmo=o("trocr"),amo=o(" \u2014 "),YB=a("a"),nmo=o("TrOCRProcessor"),smo=o(" (TrOCR model)"),lmo=l(),Gh=a("li"),Mne=a("strong"),imo=o("unispeech"),dmo=o(" \u2014 "),KB=a("a"),cmo=o("Wav2Vec2Processor"),fmo=o(" (UniSpeech model)"),mmo=l(),Oh=a("li"),Ene=a("strong"),gmo=o("unispeech-sat"),hmo=o(" \u2014 "),ZB=a("a"),pmo=o("Wav2Vec2Processor"),_mo=o(" (UniSpeechSat model)"),umo=l(),Vh=a("li"),Cne=a("strong"),bmo=o("vilt"),vmo=o(" \u2014 "),eI=a("a"),Fmo=o("ViltProcessor"),Tmo=o(" (ViLT model)"),Mmo=l(),Xh=a("li"),wne=a("strong"),Emo=o("vision-text-dual-encoder"),Cmo=o(" \u2014 "),oI=a("a"),wmo=o("VisionTextDualEncoderProcessor"),Amo=o(" (VisionTextDualEncoder model)"),ymo=l(),zh=a("li"),Ane=a("strong"),Lmo=o("wav2vec2"),xmo=o(" \u2014 "),rI=a("a"),$mo=o("Wav2Vec2Processor"),kmo=o(" (Wav2Vec2 model)"),Smo=l(),Wh=a("li"),yne=a("strong"),Rmo=o("wav2vec2-conformer"),Pmo=o(" \u2014 "),tI=a("a"),Bmo=o("Wav2Vec2Processor"),Imo=o(" (Wav2Vec2-Conformer model)"),qmo=l(),Qh=a("li"),Lne=a("strong"),Nmo=o("wavlm"),jmo=o(" \u2014 "),aI=a("a"),Dmo=o("Wav2Vec2Processor"),Gmo=o(" (WavLM model)"),Omo=l(),F(Hh.$$.fragment),Vmo=l(),F(Uh.$$.fragment),Xmo=l(),Jh=a("div"),F(j6.$$.fragment),zmo=l(),xne=a("p"),Wmo=o("Register a new processor for this class."),mqe=l(),Ci=a("h2"),Yh=a("a"),$ne=a("span"),F(D6.$$.fragment),Qmo=l(),kne=a("span"),Hmo=o("AutoModel"),gqe=l(),Lo=a("div"),F(G6.$$.fragment),Umo=l(),wi=a("p"),Jmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nI=a("a"),Ymo=o("from_pretrained()"),Kmo=o(" class method or the "),sI=a("a"),Zmo=o("from_config()"),ego=o(` class
method.`),ogo=l(),O6=a("p"),rgo=o("This class cannot be instantiated directly using "),Sne=a("code"),tgo=o("__init__()"),ago=o(" (throws an error)."),ngo=l(),tt=a("div"),F(V6.$$.fragment),sgo=l(),Rne=a("p"),lgo=o("Instantiates one of the base model classes of the library from a configuration."),igo=l(),Ai=a("p"),dgo=o(`Note:
Loading a model from its configuration file does `),Pne=a("strong"),cgo=o("not"),fgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lI=a("a"),mgo=o("from_pretrained()"),ggo=o(" to load the model weights."),hgo=l(),F(Kh.$$.fragment),pgo=l(),Je=a("div"),F(X6.$$.fragment),_go=l(),Bne=a("p"),ugo=o("Instantiate one of the base model classes of the library from a pretrained model."),bgo=l(),La=a("p"),vgo=o("The model class to instantiate is selected based on the "),Ine=a("code"),Fgo=o("model_type"),Tgo=o(` property of the config object (either
passed as an argument or loaded from `),qne=a("code"),Mgo=o("pretrained_model_name_or_path"),Ego=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=a("code"),Cgo=o("pretrained_model_name_or_path"),wgo=o(":"),Ago=l(),x=a("ul"),Zh=a("li"),jne=a("strong"),ygo=o("albert"),Lgo=o(" \u2014 "),iI=a("a"),xgo=o("AlbertModel"),$go=o(" (ALBERT model)"),kgo=l(),ep=a("li"),Dne=a("strong"),Sgo=o("bart"),Rgo=o(" \u2014 "),dI=a("a"),Pgo=o("BartModel"),Bgo=o(" (BART model)"),Igo=l(),op=a("li"),Gne=a("strong"),qgo=o("beit"),Ngo=o(" \u2014 "),cI=a("a"),jgo=o("BeitModel"),Dgo=o(" (BEiT model)"),Ggo=l(),rp=a("li"),One=a("strong"),Ogo=o("bert"),Vgo=o(" \u2014 "),fI=a("a"),Xgo=o("BertModel"),zgo=o(" (BERT model)"),Wgo=l(),tp=a("li"),Vne=a("strong"),Qgo=o("bert-generation"),Hgo=o(" \u2014 "),mI=a("a"),Ugo=o("BertGenerationEncoder"),Jgo=o(" (Bert Generation model)"),Ygo=l(),ap=a("li"),Xne=a("strong"),Kgo=o("big_bird"),Zgo=o(" \u2014 "),gI=a("a"),eho=o("BigBirdModel"),oho=o(" (BigBird model)"),rho=l(),np=a("li"),zne=a("strong"),tho=o("bigbird_pegasus"),aho=o(" \u2014 "),hI=a("a"),nho=o("BigBirdPegasusModel"),sho=o(" (BigBirdPegasus model)"),lho=l(),sp=a("li"),Wne=a("strong"),iho=o("blenderbot"),dho=o(" \u2014 "),pI=a("a"),cho=o("BlenderbotModel"),fho=o(" (Blenderbot model)"),mho=l(),lp=a("li"),Qne=a("strong"),gho=o("blenderbot-small"),hho=o(" \u2014 "),_I=a("a"),pho=o("BlenderbotSmallModel"),_ho=o(" (BlenderbotSmall model)"),uho=l(),ip=a("li"),Hne=a("strong"),bho=o("camembert"),vho=o(" \u2014 "),uI=a("a"),Fho=o("CamembertModel"),Tho=o(" (CamemBERT model)"),Mho=l(),dp=a("li"),Une=a("strong"),Eho=o("canine"),Cho=o(" \u2014 "),bI=a("a"),who=o("CanineModel"),Aho=o(" (Canine model)"),yho=l(),cp=a("li"),Jne=a("strong"),Lho=o("clip"),xho=o(" \u2014 "),vI=a("a"),$ho=o("CLIPModel"),kho=o(" (CLIP model)"),Sho=l(),fp=a("li"),Yne=a("strong"),Rho=o("convbert"),Pho=o(" \u2014 "),FI=a("a"),Bho=o("ConvBertModel"),Iho=o(" (ConvBERT model)"),qho=l(),mp=a("li"),Kne=a("strong"),Nho=o("convnext"),jho=o(" \u2014 "),TI=a("a"),Dho=o("ConvNextModel"),Gho=o(" (ConvNext model)"),Oho=l(),gp=a("li"),Zne=a("strong"),Vho=o("ctrl"),Xho=o(" \u2014 "),MI=a("a"),zho=o("CTRLModel"),Who=o(" (CTRL model)"),Qho=l(),hp=a("li"),ese=a("strong"),Hho=o("data2vec-audio"),Uho=o(" \u2014 "),EI=a("a"),Jho=o("Data2VecAudioModel"),Yho=o(" (Data2VecAudio model)"),Kho=l(),pp=a("li"),ose=a("strong"),Zho=o("data2vec-text"),epo=o(" \u2014 "),CI=a("a"),opo=o("Data2VecTextModel"),rpo=o(" (Data2VecText model)"),tpo=l(),_p=a("li"),rse=a("strong"),apo=o("data2vec-vision"),npo=o(" \u2014 "),wI=a("a"),spo=o("Data2VecVisionModel"),lpo=o(" (Data2VecVision model)"),ipo=l(),up=a("li"),tse=a("strong"),dpo=o("deberta"),cpo=o(" \u2014 "),AI=a("a"),fpo=o("DebertaModel"),mpo=o(" (DeBERTa model)"),gpo=l(),bp=a("li"),ase=a("strong"),hpo=o("deberta-v2"),ppo=o(" \u2014 "),yI=a("a"),_po=o("DebertaV2Model"),upo=o(" (DeBERTa-v2 model)"),bpo=l(),vp=a("li"),nse=a("strong"),vpo=o("decision_transformer"),Fpo=o(" \u2014 "),LI=a("a"),Tpo=o("DecisionTransformerModel"),Mpo=o(" (Decision Transformer model)"),Epo=l(),Fp=a("li"),sse=a("strong"),Cpo=o("deit"),wpo=o(" \u2014 "),xI=a("a"),Apo=o("DeiTModel"),ypo=o(" (DeiT model)"),Lpo=l(),Tp=a("li"),lse=a("strong"),xpo=o("detr"),$po=o(" \u2014 "),$I=a("a"),kpo=o("DetrModel"),Spo=o(" (DETR model)"),Rpo=l(),Mp=a("li"),ise=a("strong"),Ppo=o("distilbert"),Bpo=o(" \u2014 "),kI=a("a"),Ipo=o("DistilBertModel"),qpo=o(" (DistilBERT model)"),Npo=l(),Ep=a("li"),dse=a("strong"),jpo=o("dpr"),Dpo=o(" \u2014 "),SI=a("a"),Gpo=o("DPRQuestionEncoder"),Opo=o(" (DPR model)"),Vpo=l(),Cp=a("li"),cse=a("strong"),Xpo=o("dpt"),zpo=o(" \u2014 "),RI=a("a"),Wpo=o("DPTModel"),Qpo=o(" (DPT model)"),Hpo=l(),wp=a("li"),fse=a("strong"),Upo=o("electra"),Jpo=o(" \u2014 "),PI=a("a"),Ypo=o("ElectraModel"),Kpo=o(" (ELECTRA model)"),Zpo=l(),Ap=a("li"),mse=a("strong"),e_o=o("flaubert"),o_o=o(" \u2014 "),BI=a("a"),r_o=o("FlaubertModel"),t_o=o(" (FlauBERT model)"),a_o=l(),yp=a("li"),gse=a("strong"),n_o=o("flava"),s_o=o(" \u2014 "),II=a("a"),l_o=o("FlavaModel"),i_o=o(" (Flava model)"),d_o=l(),Lp=a("li"),hse=a("strong"),c_o=o("fnet"),f_o=o(" \u2014 "),qI=a("a"),m_o=o("FNetModel"),g_o=o(" (FNet model)"),h_o=l(),xp=a("li"),pse=a("strong"),p_o=o("fsmt"),__o=o(" \u2014 "),NI=a("a"),u_o=o("FSMTModel"),b_o=o(" (FairSeq Machine-Translation model)"),v_o=l(),Rs=a("li"),_se=a("strong"),F_o=o("funnel"),T_o=o(" \u2014 "),jI=a("a"),M_o=o("FunnelModel"),E_o=o(" or "),DI=a("a"),C_o=o("FunnelBaseModel"),w_o=o(" (Funnel Transformer model)"),A_o=l(),$p=a("li"),use=a("strong"),y_o=o("glpn"),L_o=o(" \u2014 "),GI=a("a"),x_o=o("GLPNModel"),$_o=o(" (GLPN model)"),k_o=l(),kp=a("li"),bse=a("strong"),S_o=o("gpt2"),R_o=o(" \u2014 "),OI=a("a"),P_o=o("GPT2Model"),B_o=o(" (OpenAI GPT-2 model)"),I_o=l(),Sp=a("li"),vse=a("strong"),q_o=o("gpt_neo"),N_o=o(" \u2014 "),VI=a("a"),j_o=o("GPTNeoModel"),D_o=o(" (GPT Neo model)"),G_o=l(),Rp=a("li"),Fse=a("strong"),O_o=o("gptj"),V_o=o(" \u2014 "),XI=a("a"),X_o=o("GPTJModel"),z_o=o(" (GPT-J model)"),W_o=l(),Pp=a("li"),Tse=a("strong"),Q_o=o("hubert"),H_o=o(" \u2014 "),zI=a("a"),U_o=o("HubertModel"),J_o=o(" (Hubert model)"),Y_o=l(),Bp=a("li"),Mse=a("strong"),K_o=o("ibert"),Z_o=o(" \u2014 "),WI=a("a"),euo=o("IBertModel"),ouo=o(" (I-BERT model)"),ruo=l(),Ip=a("li"),Ese=a("strong"),tuo=o("imagegpt"),auo=o(" \u2014 "),QI=a("a"),nuo=o("ImageGPTModel"),suo=o(" (ImageGPT model)"),luo=l(),qp=a("li"),Cse=a("strong"),iuo=o("layoutlm"),duo=o(" \u2014 "),HI=a("a"),cuo=o("LayoutLMModel"),fuo=o(" (LayoutLM model)"),muo=l(),Np=a("li"),wse=a("strong"),guo=o("layoutlmv2"),huo=o(" \u2014 "),UI=a("a"),puo=o("LayoutLMv2Model"),_uo=o(" (LayoutLMv2 model)"),uuo=l(),jp=a("li"),Ase=a("strong"),buo=o("led"),vuo=o(" \u2014 "),JI=a("a"),Fuo=o("LEDModel"),Tuo=o(" (LED model)"),Muo=l(),Dp=a("li"),yse=a("strong"),Euo=o("longformer"),Cuo=o(" \u2014 "),YI=a("a"),wuo=o("LongformerModel"),Auo=o(" (Longformer model)"),yuo=l(),Gp=a("li"),Lse=a("strong"),Luo=o("luke"),xuo=o(" \u2014 "),KI=a("a"),$uo=o("LukeModel"),kuo=o(" (LUKE model)"),Suo=l(),Op=a("li"),xse=a("strong"),Ruo=o("lxmert"),Puo=o(" \u2014 "),ZI=a("a"),Buo=o("LxmertModel"),Iuo=o(" (LXMERT model)"),quo=l(),Vp=a("li"),$se=a("strong"),Nuo=o("m2m_100"),juo=o(" \u2014 "),eq=a("a"),Duo=o("M2M100Model"),Guo=o(" (M2M100 model)"),Ouo=l(),Xp=a("li"),kse=a("strong"),Vuo=o("marian"),Xuo=o(" \u2014 "),oq=a("a"),zuo=o("MarianModel"),Wuo=o(" (Marian model)"),Quo=l(),zp=a("li"),Sse=a("strong"),Huo=o("maskformer"),Uuo=o(" \u2014 "),rq=a("a"),Juo=o("MaskFormerModel"),Yuo=o(" (MaskFormer model)"),Kuo=l(),Wp=a("li"),Rse=a("strong"),Zuo=o("mbart"),e2o=o(" \u2014 "),tq=a("a"),o2o=o("MBartModel"),r2o=o(" (mBART model)"),t2o=l(),Qp=a("li"),Pse=a("strong"),a2o=o("megatron-bert"),n2o=o(" \u2014 "),aq=a("a"),s2o=o("MegatronBertModel"),l2o=o(" (MegatronBert model)"),i2o=l(),Hp=a("li"),Bse=a("strong"),d2o=o("mobilebert"),c2o=o(" \u2014 "),nq=a("a"),f2o=o("MobileBertModel"),m2o=o(" (MobileBERT model)"),g2o=l(),Up=a("li"),Ise=a("strong"),h2o=o("mpnet"),p2o=o(" \u2014 "),sq=a("a"),_2o=o("MPNetModel"),u2o=o(" (MPNet model)"),b2o=l(),Jp=a("li"),qse=a("strong"),v2o=o("mt5"),F2o=o(" \u2014 "),lq=a("a"),T2o=o("MT5Model"),M2o=o(" (mT5 model)"),E2o=l(),Yp=a("li"),Nse=a("strong"),C2o=o("nystromformer"),w2o=o(" \u2014 "),iq=a("a"),A2o=o("NystromformerModel"),y2o=o(" (Nystromformer model)"),L2o=l(),Kp=a("li"),jse=a("strong"),x2o=o("openai-gpt"),$2o=o(" \u2014 "),dq=a("a"),k2o=o("OpenAIGPTModel"),S2o=o(" (OpenAI GPT model)"),R2o=l(),Zp=a("li"),Dse=a("strong"),P2o=o("opt"),B2o=o(" \u2014 "),cq=a("a"),I2o=o("OPTModel"),q2o=o(" (OPT model)"),N2o=l(),e_=a("li"),Gse=a("strong"),j2o=o("pegasus"),D2o=o(" \u2014 "),fq=a("a"),G2o=o("PegasusModel"),O2o=o(" (Pegasus model)"),V2o=l(),o_=a("li"),Ose=a("strong"),X2o=o("perceiver"),z2o=o(" \u2014 "),mq=a("a"),W2o=o("PerceiverModel"),Q2o=o(" (Perceiver model)"),H2o=l(),r_=a("li"),Vse=a("strong"),U2o=o("plbart"),J2o=o(" \u2014 "),gq=a("a"),Y2o=o("PLBartModel"),K2o=o(" (PLBart model)"),Z2o=l(),t_=a("li"),Xse=a("strong"),e1o=o("poolformer"),o1o=o(" \u2014 "),hq=a("a"),r1o=o("PoolFormerModel"),t1o=o(" (PoolFormer model)"),a1o=l(),a_=a("li"),zse=a("strong"),n1o=o("prophetnet"),s1o=o(" \u2014 "),pq=a("a"),l1o=o("ProphetNetModel"),i1o=o(" (ProphetNet model)"),d1o=l(),n_=a("li"),Wse=a("strong"),c1o=o("qdqbert"),f1o=o(" \u2014 "),_q=a("a"),m1o=o("QDQBertModel"),g1o=o(" (QDQBert model)"),h1o=l(),s_=a("li"),Qse=a("strong"),p1o=o("reformer"),_1o=o(" \u2014 "),uq=a("a"),u1o=o("ReformerModel"),b1o=o(" (Reformer model)"),v1o=l(),l_=a("li"),Hse=a("strong"),F1o=o("regnet"),T1o=o(" \u2014 "),bq=a("a"),M1o=o("RegNetModel"),E1o=o(" (RegNet model)"),C1o=l(),i_=a("li"),Use=a("strong"),w1o=o("rembert"),A1o=o(" \u2014 "),vq=a("a"),y1o=o("RemBertModel"),L1o=o(" (RemBERT model)"),x1o=l(),d_=a("li"),Jse=a("strong"),$1o=o("resnet"),k1o=o(" \u2014 "),Fq=a("a"),S1o=o("ResNetModel"),R1o=o(" (ResNet model)"),P1o=l(),c_=a("li"),Yse=a("strong"),B1o=o("retribert"),I1o=o(" \u2014 "),Tq=a("a"),q1o=o("RetriBertModel"),N1o=o(" (RetriBERT model)"),j1o=l(),f_=a("li"),Kse=a("strong"),D1o=o("roberta"),G1o=o(" \u2014 "),Mq=a("a"),O1o=o("RobertaModel"),V1o=o(" (RoBERTa model)"),X1o=l(),m_=a("li"),Zse=a("strong"),z1o=o("roformer"),W1o=o(" \u2014 "),Eq=a("a"),Q1o=o("RoFormerModel"),H1o=o(" (RoFormer model)"),U1o=l(),g_=a("li"),ele=a("strong"),J1o=o("segformer"),Y1o=o(" \u2014 "),Cq=a("a"),K1o=o("SegformerModel"),Z1o=o(" (SegFormer model)"),e7o=l(),h_=a("li"),ole=a("strong"),o7o=o("sew"),r7o=o(" \u2014 "),wq=a("a"),t7o=o("SEWModel"),a7o=o(" (SEW model)"),n7o=l(),p_=a("li"),rle=a("strong"),s7o=o("sew-d"),l7o=o(" \u2014 "),Aq=a("a"),i7o=o("SEWDModel"),d7o=o(" (SEW-D model)"),c7o=l(),__=a("li"),tle=a("strong"),f7o=o("speech_to_text"),m7o=o(" \u2014 "),yq=a("a"),g7o=o("Speech2TextModel"),h7o=o(" (Speech2Text model)"),p7o=l(),u_=a("li"),ale=a("strong"),_7o=o("splinter"),u7o=o(" \u2014 "),Lq=a("a"),b7o=o("SplinterModel"),v7o=o(" (Splinter model)"),F7o=l(),b_=a("li"),nle=a("strong"),T7o=o("squeezebert"),M7o=o(" \u2014 "),xq=a("a"),E7o=o("SqueezeBertModel"),C7o=o(" (SqueezeBERT model)"),w7o=l(),v_=a("li"),sle=a("strong"),A7o=o("swin"),y7o=o(" \u2014 "),$q=a("a"),L7o=o("SwinModel"),x7o=o(" (Swin model)"),$7o=l(),F_=a("li"),lle=a("strong"),k7o=o("t5"),S7o=o(" \u2014 "),kq=a("a"),R7o=o("T5Model"),P7o=o(" (T5 model)"),B7o=l(),T_=a("li"),ile=a("strong"),I7o=o("tapas"),q7o=o(" \u2014 "),Sq=a("a"),N7o=o("TapasModel"),j7o=o(" (TAPAS model)"),D7o=l(),M_=a("li"),dle=a("strong"),G7o=o("trajectory_transformer"),O7o=o(" \u2014 "),Rq=a("a"),V7o=o("TrajectoryTransformerModel"),X7o=o(" (Trajectory Transformer model)"),z7o=l(),E_=a("li"),cle=a("strong"),W7o=o("transfo-xl"),Q7o=o(" \u2014 "),Pq=a("a"),H7o=o("TransfoXLModel"),U7o=o(" (Transformer-XL model)"),J7o=l(),C_=a("li"),fle=a("strong"),Y7o=o("unispeech"),K7o=o(" \u2014 "),Bq=a("a"),Z7o=o("UniSpeechModel"),ebo=o(" (UniSpeech model)"),obo=l(),w_=a("li"),mle=a("strong"),rbo=o("unispeech-sat"),tbo=o(" \u2014 "),Iq=a("a"),abo=o("UniSpeechSatModel"),nbo=o(" (UniSpeechSat model)"),sbo=l(),A_=a("li"),gle=a("strong"),lbo=o("van"),ibo=o(" \u2014 "),qq=a("a"),dbo=o("VanModel"),cbo=o(" (VAN model)"),fbo=l(),y_=a("li"),hle=a("strong"),mbo=o("vilt"),gbo=o(" \u2014 "),Nq=a("a"),hbo=o("ViltModel"),pbo=o(" (ViLT model)"),_bo=l(),L_=a("li"),ple=a("strong"),ubo=o("vision-text-dual-encoder"),bbo=o(" \u2014 "),jq=a("a"),vbo=o("VisionTextDualEncoderModel"),Fbo=o(" (VisionTextDualEncoder model)"),Tbo=l(),x_=a("li"),_le=a("strong"),Mbo=o("visual_bert"),Ebo=o(" \u2014 "),Dq=a("a"),Cbo=o("VisualBertModel"),wbo=o(" (VisualBert model)"),Abo=l(),$_=a("li"),ule=a("strong"),ybo=o("vit"),Lbo=o(" \u2014 "),Gq=a("a"),xbo=o("ViTModel"),$bo=o(" (ViT model)"),kbo=l(),k_=a("li"),ble=a("strong"),Sbo=o("vit_mae"),Rbo=o(" \u2014 "),Oq=a("a"),Pbo=o("ViTMAEModel"),Bbo=o(" (ViTMAE model)"),Ibo=l(),S_=a("li"),vle=a("strong"),qbo=o("wav2vec2"),Nbo=o(" \u2014 "),Vq=a("a"),jbo=o("Wav2Vec2Model"),Dbo=o(" (Wav2Vec2 model)"),Gbo=l(),R_=a("li"),Fle=a("strong"),Obo=o("wav2vec2-conformer"),Vbo=o(" \u2014 "),Xq=a("a"),Xbo=o("Wav2Vec2ConformerModel"),zbo=o(" (Wav2Vec2-Conformer model)"),Wbo=l(),P_=a("li"),Tle=a("strong"),Qbo=o("wavlm"),Hbo=o(" \u2014 "),zq=a("a"),Ubo=o("WavLMModel"),Jbo=o(" (WavLM model)"),Ybo=l(),B_=a("li"),Mle=a("strong"),Kbo=o("xglm"),Zbo=o(" \u2014 "),Wq=a("a"),evo=o("XGLMModel"),ovo=o(" (XGLM model)"),rvo=l(),I_=a("li"),Ele=a("strong"),tvo=o("xlm"),avo=o(" \u2014 "),Qq=a("a"),nvo=o("XLMModel"),svo=o(" (XLM model)"),lvo=l(),q_=a("li"),Cle=a("strong"),ivo=o("xlm-prophetnet"),dvo=o(" \u2014 "),Hq=a("a"),cvo=o("XLMProphetNetModel"),fvo=o(" (XLMProphetNet model)"),mvo=l(),N_=a("li"),wle=a("strong"),gvo=o("xlm-roberta"),hvo=o(" \u2014 "),Uq=a("a"),pvo=o("XLMRobertaModel"),_vo=o(" (XLM-RoBERTa model)"),uvo=l(),j_=a("li"),Ale=a("strong"),bvo=o("xlm-roberta-xl"),vvo=o(" \u2014 "),Jq=a("a"),Fvo=o("XLMRobertaXLModel"),Tvo=o(" (XLM-RoBERTa-XL model)"),Mvo=l(),D_=a("li"),yle=a("strong"),Evo=o("xlnet"),Cvo=o(" \u2014 "),Yq=a("a"),wvo=o("XLNetModel"),Avo=o(" (XLNet model)"),yvo=l(),G_=a("li"),Lle=a("strong"),Lvo=o("yolos"),xvo=o(" \u2014 "),Kq=a("a"),$vo=o("YolosModel"),kvo=o(" (YOLOS model)"),Svo=l(),O_=a("li"),xle=a("strong"),Rvo=o("yoso"),Pvo=o(" \u2014 "),Zq=a("a"),Bvo=o("YosoModel"),Ivo=o(" (YOSO model)"),qvo=l(),V_=a("p"),Nvo=o("The model is set in evaluation mode by default using "),$le=a("code"),jvo=o("model.eval()"),Dvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=a("code"),Gvo=o("model.train()"),Ovo=l(),F(X_.$$.fragment),hqe=l(),yi=a("h2"),z_=a("a"),Sle=a("span"),F(z6.$$.fragment),Vvo=l(),Rle=a("span"),Xvo=o("AutoModelForPreTraining"),pqe=l(),xo=a("div"),F(W6.$$.fragment),zvo=l(),Li=a("p"),Wvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eN=a("a"),Qvo=o("from_pretrained()"),Hvo=o(" class method or the "),oN=a("a"),Uvo=o("from_config()"),Jvo=o(` class
method.`),Yvo=l(),Q6=a("p"),Kvo=o("This class cannot be instantiated directly using "),Ple=a("code"),Zvo=o("__init__()"),eFo=o(" (throws an error)."),oFo=l(),at=a("div"),F(H6.$$.fragment),rFo=l(),Ble=a("p"),tFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aFo=l(),xi=a("p"),nFo=o(`Note:
Loading a model from its configuration file does `),Ile=a("strong"),sFo=o("not"),lFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=a("a"),iFo=o("from_pretrained()"),dFo=o(" to load the model weights."),cFo=l(),F(W_.$$.fragment),fFo=l(),Ye=a("div"),F(U6.$$.fragment),mFo=l(),qle=a("p"),gFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hFo=l(),xa=a("p"),pFo=o("The model class to instantiate is selected based on the "),Nle=a("code"),_Fo=o("model_type"),uFo=o(` property of the config object (either
passed as an argument or loaded from `),jle=a("code"),bFo=o("pretrained_model_name_or_path"),vFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=a("code"),FFo=o("pretrained_model_name_or_path"),TFo=o(":"),MFo=l(),G=a("ul"),Q_=a("li"),Gle=a("strong"),EFo=o("albert"),CFo=o(" \u2014 "),tN=a("a"),wFo=o("AlbertForPreTraining"),AFo=o(" (ALBERT model)"),yFo=l(),H_=a("li"),Ole=a("strong"),LFo=o("bart"),xFo=o(" \u2014 "),aN=a("a"),$Fo=o("BartForConditionalGeneration"),kFo=o(" (BART model)"),SFo=l(),U_=a("li"),Vle=a("strong"),RFo=o("bert"),PFo=o(" \u2014 "),nN=a("a"),BFo=o("BertForPreTraining"),IFo=o(" (BERT model)"),qFo=l(),J_=a("li"),Xle=a("strong"),NFo=o("big_bird"),jFo=o(" \u2014 "),sN=a("a"),DFo=o("BigBirdForPreTraining"),GFo=o(" (BigBird model)"),OFo=l(),Y_=a("li"),zle=a("strong"),VFo=o("camembert"),XFo=o(" \u2014 "),lN=a("a"),zFo=o("CamembertForMaskedLM"),WFo=o(" (CamemBERT model)"),QFo=l(),K_=a("li"),Wle=a("strong"),HFo=o("ctrl"),UFo=o(" \u2014 "),iN=a("a"),JFo=o("CTRLLMHeadModel"),YFo=o(" (CTRL model)"),KFo=l(),Z_=a("li"),Qle=a("strong"),ZFo=o("data2vec-text"),eTo=o(" \u2014 "),dN=a("a"),oTo=o("Data2VecTextForMaskedLM"),rTo=o(" (Data2VecText model)"),tTo=l(),eu=a("li"),Hle=a("strong"),aTo=o("deberta"),nTo=o(" \u2014 "),cN=a("a"),sTo=o("DebertaForMaskedLM"),lTo=o(" (DeBERTa model)"),iTo=l(),ou=a("li"),Ule=a("strong"),dTo=o("deberta-v2"),cTo=o(" \u2014 "),fN=a("a"),fTo=o("DebertaV2ForMaskedLM"),mTo=o(" (DeBERTa-v2 model)"),gTo=l(),ru=a("li"),Jle=a("strong"),hTo=o("distilbert"),pTo=o(" \u2014 "),mN=a("a"),_To=o("DistilBertForMaskedLM"),uTo=o(" (DistilBERT model)"),bTo=l(),tu=a("li"),Yle=a("strong"),vTo=o("electra"),FTo=o(" \u2014 "),gN=a("a"),TTo=o("ElectraForPreTraining"),MTo=o(" (ELECTRA model)"),ETo=l(),au=a("li"),Kle=a("strong"),CTo=o("flaubert"),wTo=o(" \u2014 "),hN=a("a"),ATo=o("FlaubertWithLMHeadModel"),yTo=o(" (FlauBERT model)"),LTo=l(),nu=a("li"),Zle=a("strong"),xTo=o("flava"),$To=o(" \u2014 "),pN=a("a"),kTo=o("FlavaForPreTraining"),STo=o(" (Flava model)"),RTo=l(),su=a("li"),eie=a("strong"),PTo=o("fnet"),BTo=o(" \u2014 "),_N=a("a"),ITo=o("FNetForPreTraining"),qTo=o(" (FNet model)"),NTo=l(),lu=a("li"),oie=a("strong"),jTo=o("fsmt"),DTo=o(" \u2014 "),uN=a("a"),GTo=o("FSMTForConditionalGeneration"),OTo=o(" (FairSeq Machine-Translation model)"),VTo=l(),iu=a("li"),rie=a("strong"),XTo=o("funnel"),zTo=o(" \u2014 "),bN=a("a"),WTo=o("FunnelForPreTraining"),QTo=o(" (Funnel Transformer model)"),HTo=l(),du=a("li"),tie=a("strong"),UTo=o("gpt2"),JTo=o(" \u2014 "),vN=a("a"),YTo=o("GPT2LMHeadModel"),KTo=o(" (OpenAI GPT-2 model)"),ZTo=l(),cu=a("li"),aie=a("strong"),eMo=o("ibert"),oMo=o(" \u2014 "),FN=a("a"),rMo=o("IBertForMaskedLM"),tMo=o(" (I-BERT model)"),aMo=l(),fu=a("li"),nie=a("strong"),nMo=o("layoutlm"),sMo=o(" \u2014 "),TN=a("a"),lMo=o("LayoutLMForMaskedLM"),iMo=o(" (LayoutLM model)"),dMo=l(),mu=a("li"),sie=a("strong"),cMo=o("longformer"),fMo=o(" \u2014 "),MN=a("a"),mMo=o("LongformerForMaskedLM"),gMo=o(" (Longformer model)"),hMo=l(),gu=a("li"),lie=a("strong"),pMo=o("lxmert"),_Mo=o(" \u2014 "),EN=a("a"),uMo=o("LxmertForPreTraining"),bMo=o(" (LXMERT model)"),vMo=l(),hu=a("li"),iie=a("strong"),FMo=o("megatron-bert"),TMo=o(" \u2014 "),CN=a("a"),MMo=o("MegatronBertForPreTraining"),EMo=o(" (MegatronBert model)"),CMo=l(),pu=a("li"),die=a("strong"),wMo=o("mobilebert"),AMo=o(" \u2014 "),wN=a("a"),yMo=o("MobileBertForPreTraining"),LMo=o(" (MobileBERT model)"),xMo=l(),_u=a("li"),cie=a("strong"),$Mo=o("mpnet"),kMo=o(" \u2014 "),AN=a("a"),SMo=o("MPNetForMaskedLM"),RMo=o(" (MPNet model)"),PMo=l(),uu=a("li"),fie=a("strong"),BMo=o("openai-gpt"),IMo=o(" \u2014 "),yN=a("a"),qMo=o("OpenAIGPTLMHeadModel"),NMo=o(" (OpenAI GPT model)"),jMo=l(),bu=a("li"),mie=a("strong"),DMo=o("retribert"),GMo=o(" \u2014 "),LN=a("a"),OMo=o("RetriBertModel"),VMo=o(" (RetriBERT model)"),XMo=l(),vu=a("li"),gie=a("strong"),zMo=o("roberta"),WMo=o(" \u2014 "),xN=a("a"),QMo=o("RobertaForMaskedLM"),HMo=o(" (RoBERTa model)"),UMo=l(),Fu=a("li"),hie=a("strong"),JMo=o("splinter"),YMo=o(" \u2014 "),$N=a("a"),KMo=o("SplinterForPreTraining"),ZMo=o(" (Splinter model)"),e4o=l(),Tu=a("li"),pie=a("strong"),o4o=o("squeezebert"),r4o=o(" \u2014 "),kN=a("a"),t4o=o("SqueezeBertForMaskedLM"),a4o=o(" (SqueezeBERT model)"),n4o=l(),Mu=a("li"),_ie=a("strong"),s4o=o("t5"),l4o=o(" \u2014 "),SN=a("a"),i4o=o("T5ForConditionalGeneration"),d4o=o(" (T5 model)"),c4o=l(),Eu=a("li"),uie=a("strong"),f4o=o("tapas"),m4o=o(" \u2014 "),RN=a("a"),g4o=o("TapasForMaskedLM"),h4o=o(" (TAPAS model)"),p4o=l(),Cu=a("li"),bie=a("strong"),_4o=o("transfo-xl"),u4o=o(" \u2014 "),PN=a("a"),b4o=o("TransfoXLLMHeadModel"),v4o=o(" (Transformer-XL model)"),F4o=l(),wu=a("li"),vie=a("strong"),T4o=o("unispeech"),M4o=o(" \u2014 "),BN=a("a"),E4o=o("UniSpeechForPreTraining"),C4o=o(" (UniSpeech model)"),w4o=l(),Au=a("li"),Fie=a("strong"),A4o=o("unispeech-sat"),y4o=o(" \u2014 "),IN=a("a"),L4o=o("UniSpeechSatForPreTraining"),x4o=o(" (UniSpeechSat model)"),$4o=l(),yu=a("li"),Tie=a("strong"),k4o=o("visual_bert"),S4o=o(" \u2014 "),qN=a("a"),R4o=o("VisualBertForPreTraining"),P4o=o(" (VisualBert model)"),B4o=l(),Lu=a("li"),Mie=a("strong"),I4o=o("vit_mae"),q4o=o(" \u2014 "),NN=a("a"),N4o=o("ViTMAEForPreTraining"),j4o=o(" (ViTMAE model)"),D4o=l(),xu=a("li"),Eie=a("strong"),G4o=o("wav2vec2"),O4o=o(" \u2014 "),jN=a("a"),V4o=o("Wav2Vec2ForPreTraining"),X4o=o(" (Wav2Vec2 model)"),z4o=l(),$u=a("li"),Cie=a("strong"),W4o=o("wav2vec2-conformer"),Q4o=o(" \u2014 "),DN=a("a"),H4o=o("Wav2Vec2ConformerForPreTraining"),U4o=o(" (Wav2Vec2-Conformer model)"),J4o=l(),ku=a("li"),wie=a("strong"),Y4o=o("xlm"),K4o=o(" \u2014 "),GN=a("a"),Z4o=o("XLMWithLMHeadModel"),eEo=o(" (XLM model)"),oEo=l(),Su=a("li"),Aie=a("strong"),rEo=o("xlm-roberta"),tEo=o(" \u2014 "),ON=a("a"),aEo=o("XLMRobertaForMaskedLM"),nEo=o(" (XLM-RoBERTa model)"),sEo=l(),Ru=a("li"),yie=a("strong"),lEo=o("xlm-roberta-xl"),iEo=o(" \u2014 "),VN=a("a"),dEo=o("XLMRobertaXLForMaskedLM"),cEo=o(" (XLM-RoBERTa-XL model)"),fEo=l(),Pu=a("li"),Lie=a("strong"),mEo=o("xlnet"),gEo=o(" \u2014 "),XN=a("a"),hEo=o("XLNetLMHeadModel"),pEo=o(" (XLNet model)"),_Eo=l(),Bu=a("p"),uEo=o("The model is set in evaluation mode by default using "),xie=a("code"),bEo=o("model.eval()"),vEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=a("code"),FEo=o("model.train()"),TEo=l(),F(Iu.$$.fragment),_qe=l(),$i=a("h2"),qu=a("a"),kie=a("span"),F(J6.$$.fragment),MEo=l(),Sie=a("span"),EEo=o("AutoModelForCausalLM"),uqe=l(),$o=a("div"),F(Y6.$$.fragment),CEo=l(),ki=a("p"),wEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zN=a("a"),AEo=o("from_pretrained()"),yEo=o(" class method or the "),WN=a("a"),LEo=o("from_config()"),xEo=o(` class
method.`),$Eo=l(),K6=a("p"),kEo=o("This class cannot be instantiated directly using "),Rie=a("code"),SEo=o("__init__()"),REo=o(" (throws an error)."),PEo=l(),nt=a("div"),F(Z6.$$.fragment),BEo=l(),Pie=a("p"),IEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qEo=l(),Si=a("p"),NEo=o(`Note:
Loading a model from its configuration file does `),Bie=a("strong"),jEo=o("not"),DEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),GEo=o("from_pretrained()"),OEo=o(" to load the model weights."),VEo=l(),F(Nu.$$.fragment),XEo=l(),Ke=a("div"),F(ey.$$.fragment),zEo=l(),Iie=a("p"),WEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QEo=l(),$a=a("p"),HEo=o("The model class to instantiate is selected based on the "),qie=a("code"),UEo=o("model_type"),JEo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),YEo=o("pretrained_model_name_or_path"),KEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=a("code"),ZEo=o("pretrained_model_name_or_path"),eCo=o(":"),oCo=l(),z=a("ul"),ju=a("li"),Die=a("strong"),rCo=o("bart"),tCo=o(" \u2014 "),HN=a("a"),aCo=o("BartForCausalLM"),nCo=o(" (BART model)"),sCo=l(),Du=a("li"),Gie=a("strong"),lCo=o("bert"),iCo=o(" \u2014 "),UN=a("a"),dCo=o("BertLMHeadModel"),cCo=o(" (BERT model)"),fCo=l(),Gu=a("li"),Oie=a("strong"),mCo=o("bert-generation"),gCo=o(" \u2014 "),JN=a("a"),hCo=o("BertGenerationDecoder"),pCo=o(" (Bert Generation model)"),_Co=l(),Ou=a("li"),Vie=a("strong"),uCo=o("big_bird"),bCo=o(" \u2014 "),YN=a("a"),vCo=o("BigBirdForCausalLM"),FCo=o(" (BigBird model)"),TCo=l(),Vu=a("li"),Xie=a("strong"),MCo=o("bigbird_pegasus"),ECo=o(" \u2014 "),KN=a("a"),CCo=o("BigBirdPegasusForCausalLM"),wCo=o(" (BigBirdPegasus model)"),ACo=l(),Xu=a("li"),zie=a("strong"),yCo=o("blenderbot"),LCo=o(" \u2014 "),ZN=a("a"),xCo=o("BlenderbotForCausalLM"),$Co=o(" (Blenderbot model)"),kCo=l(),zu=a("li"),Wie=a("strong"),SCo=o("blenderbot-small"),RCo=o(" \u2014 "),ej=a("a"),PCo=o("BlenderbotSmallForCausalLM"),BCo=o(" (BlenderbotSmall model)"),ICo=l(),Wu=a("li"),Qie=a("strong"),qCo=o("camembert"),NCo=o(" \u2014 "),oj=a("a"),jCo=o("CamembertForCausalLM"),DCo=o(" (CamemBERT model)"),GCo=l(),Qu=a("li"),Hie=a("strong"),OCo=o("ctrl"),VCo=o(" \u2014 "),rj=a("a"),XCo=o("CTRLLMHeadModel"),zCo=o(" (CTRL model)"),WCo=l(),Hu=a("li"),Uie=a("strong"),QCo=o("data2vec-text"),HCo=o(" \u2014 "),tj=a("a"),UCo=o("Data2VecTextForCausalLM"),JCo=o(" (Data2VecText model)"),YCo=l(),Uu=a("li"),Jie=a("strong"),KCo=o("electra"),ZCo=o(" \u2014 "),aj=a("a"),e5o=o("ElectraForCausalLM"),o5o=o(" (ELECTRA model)"),r5o=l(),Ju=a("li"),Yie=a("strong"),t5o=o("gpt2"),a5o=o(" \u2014 "),nj=a("a"),n5o=o("GPT2LMHeadModel"),s5o=o(" (OpenAI GPT-2 model)"),l5o=l(),Yu=a("li"),Kie=a("strong"),i5o=o("gpt_neo"),d5o=o(" \u2014 "),sj=a("a"),c5o=o("GPTNeoForCausalLM"),f5o=o(" (GPT Neo model)"),m5o=l(),Ku=a("li"),Zie=a("strong"),g5o=o("gptj"),h5o=o(" \u2014 "),lj=a("a"),p5o=o("GPTJForCausalLM"),_5o=o(" (GPT-J model)"),u5o=l(),Zu=a("li"),ede=a("strong"),b5o=o("marian"),v5o=o(" \u2014 "),ij=a("a"),F5o=o("MarianForCausalLM"),T5o=o(" (Marian model)"),M5o=l(),e2=a("li"),ode=a("strong"),E5o=o("mbart"),C5o=o(" \u2014 "),dj=a("a"),w5o=o("MBartForCausalLM"),A5o=o(" (mBART model)"),y5o=l(),o2=a("li"),rde=a("strong"),L5o=o("megatron-bert"),x5o=o(" \u2014 "),cj=a("a"),$5o=o("MegatronBertForCausalLM"),k5o=o(" (MegatronBert model)"),S5o=l(),r2=a("li"),tde=a("strong"),R5o=o("openai-gpt"),P5o=o(" \u2014 "),fj=a("a"),B5o=o("OpenAIGPTLMHeadModel"),I5o=o(" (OpenAI GPT model)"),q5o=l(),t2=a("li"),ade=a("strong"),N5o=o("opt"),j5o=o(" \u2014 "),mj=a("a"),D5o=o("OPTForCausalLM"),G5o=o(" (OPT model)"),O5o=l(),a2=a("li"),nde=a("strong"),V5o=o("pegasus"),X5o=o(" \u2014 "),gj=a("a"),z5o=o("PegasusForCausalLM"),W5o=o(" (Pegasus model)"),Q5o=l(),n2=a("li"),sde=a("strong"),H5o=o("plbart"),U5o=o(" \u2014 "),hj=a("a"),J5o=o("PLBartForCausalLM"),Y5o=o(" (PLBart model)"),K5o=l(),s2=a("li"),lde=a("strong"),Z5o=o("prophetnet"),e3o=o(" \u2014 "),pj=a("a"),o3o=o("ProphetNetForCausalLM"),r3o=o(" (ProphetNet model)"),t3o=l(),l2=a("li"),ide=a("strong"),a3o=o("qdqbert"),n3o=o(" \u2014 "),_j=a("a"),s3o=o("QDQBertLMHeadModel"),l3o=o(" (QDQBert model)"),i3o=l(),i2=a("li"),dde=a("strong"),d3o=o("reformer"),c3o=o(" \u2014 "),uj=a("a"),f3o=o("ReformerModelWithLMHead"),m3o=o(" (Reformer model)"),g3o=l(),d2=a("li"),cde=a("strong"),h3o=o("rembert"),p3o=o(" \u2014 "),bj=a("a"),_3o=o("RemBertForCausalLM"),u3o=o(" (RemBERT model)"),b3o=l(),c2=a("li"),fde=a("strong"),v3o=o("roberta"),F3o=o(" \u2014 "),vj=a("a"),T3o=o("RobertaForCausalLM"),M3o=o(" (RoBERTa model)"),E3o=l(),f2=a("li"),mde=a("strong"),C3o=o("roformer"),w3o=o(" \u2014 "),Fj=a("a"),A3o=o("RoFormerForCausalLM"),y3o=o(" (RoFormer model)"),L3o=l(),m2=a("li"),gde=a("strong"),x3o=o("speech_to_text_2"),$3o=o(" \u2014 "),Tj=a("a"),k3o=o("Speech2Text2ForCausalLM"),S3o=o(" (Speech2Text2 model)"),R3o=l(),g2=a("li"),hde=a("strong"),P3o=o("transfo-xl"),B3o=o(" \u2014 "),Mj=a("a"),I3o=o("TransfoXLLMHeadModel"),q3o=o(" (Transformer-XL model)"),N3o=l(),h2=a("li"),pde=a("strong"),j3o=o("trocr"),D3o=o(" \u2014 "),Ej=a("a"),G3o=o("TrOCRForCausalLM"),O3o=o(" (TrOCR model)"),V3o=l(),p2=a("li"),_de=a("strong"),X3o=o("xglm"),z3o=o(" \u2014 "),Cj=a("a"),W3o=o("XGLMForCausalLM"),Q3o=o(" (XGLM model)"),H3o=l(),_2=a("li"),ude=a("strong"),U3o=o("xlm"),J3o=o(" \u2014 "),wj=a("a"),Y3o=o("XLMWithLMHeadModel"),K3o=o(" (XLM model)"),Z3o=l(),u2=a("li"),bde=a("strong"),ewo=o("xlm-prophetnet"),owo=o(" \u2014 "),Aj=a("a"),rwo=o("XLMProphetNetForCausalLM"),two=o(" (XLMProphetNet model)"),awo=l(),b2=a("li"),vde=a("strong"),nwo=o("xlm-roberta"),swo=o(" \u2014 "),yj=a("a"),lwo=o("XLMRobertaForCausalLM"),iwo=o(" (XLM-RoBERTa model)"),dwo=l(),v2=a("li"),Fde=a("strong"),cwo=o("xlm-roberta-xl"),fwo=o(" \u2014 "),Lj=a("a"),mwo=o("XLMRobertaXLForCausalLM"),gwo=o(" (XLM-RoBERTa-XL model)"),hwo=l(),F2=a("li"),Tde=a("strong"),pwo=o("xlnet"),_wo=o(" \u2014 "),xj=a("a"),uwo=o("XLNetLMHeadModel"),bwo=o(" (XLNet model)"),vwo=l(),T2=a("p"),Fwo=o("The model is set in evaluation mode by default using "),Mde=a("code"),Two=o("model.eval()"),Mwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=a("code"),Ewo=o("model.train()"),Cwo=l(),F(M2.$$.fragment),bqe=l(),Ri=a("h2"),E2=a("a"),Cde=a("span"),F(oy.$$.fragment),wwo=l(),wde=a("span"),Awo=o("AutoModelForMaskedLM"),vqe=l(),ko=a("div"),F(ry.$$.fragment),ywo=l(),Pi=a("p"),Lwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$j=a("a"),xwo=o("from_pretrained()"),$wo=o(" class method or the "),kj=a("a"),kwo=o("from_config()"),Swo=o(` class
method.`),Rwo=l(),ty=a("p"),Pwo=o("This class cannot be instantiated directly using "),Ade=a("code"),Bwo=o("__init__()"),Iwo=o(" (throws an error)."),qwo=l(),st=a("div"),F(ay.$$.fragment),Nwo=l(),yde=a("p"),jwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Dwo=l(),Bi=a("p"),Gwo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),Owo=o("not"),Vwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),Xwo=o("from_pretrained()"),zwo=o(" to load the model weights."),Wwo=l(),F(C2.$$.fragment),Qwo=l(),Ze=a("div"),F(ny.$$.fragment),Hwo=l(),xde=a("p"),Uwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jwo=l(),ka=a("p"),Ywo=o("The model class to instantiate is selected based on the "),$de=a("code"),Kwo=o("model_type"),Zwo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),e0o=o("pretrained_model_name_or_path"),o0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),r0o=o("pretrained_model_name_or_path"),t0o=o(":"),a0o=l(),W=a("ul"),w2=a("li"),Rde=a("strong"),n0o=o("albert"),s0o=o(" \u2014 "),Rj=a("a"),l0o=o("AlbertForMaskedLM"),i0o=o(" (ALBERT model)"),d0o=l(),A2=a("li"),Pde=a("strong"),c0o=o("bart"),f0o=o(" \u2014 "),Pj=a("a"),m0o=o("BartForConditionalGeneration"),g0o=o(" (BART model)"),h0o=l(),y2=a("li"),Bde=a("strong"),p0o=o("bert"),_0o=o(" \u2014 "),Bj=a("a"),u0o=o("BertForMaskedLM"),b0o=o(" (BERT model)"),v0o=l(),L2=a("li"),Ide=a("strong"),F0o=o("big_bird"),T0o=o(" \u2014 "),Ij=a("a"),M0o=o("BigBirdForMaskedLM"),E0o=o(" (BigBird model)"),C0o=l(),x2=a("li"),qde=a("strong"),w0o=o("camembert"),A0o=o(" \u2014 "),qj=a("a"),y0o=o("CamembertForMaskedLM"),L0o=o(" (CamemBERT model)"),x0o=l(),$2=a("li"),Nde=a("strong"),$0o=o("convbert"),k0o=o(" \u2014 "),Nj=a("a"),S0o=o("ConvBertForMaskedLM"),R0o=o(" (ConvBERT model)"),P0o=l(),k2=a("li"),jde=a("strong"),B0o=o("data2vec-text"),I0o=o(" \u2014 "),jj=a("a"),q0o=o("Data2VecTextForMaskedLM"),N0o=o(" (Data2VecText model)"),j0o=l(),S2=a("li"),Dde=a("strong"),D0o=o("deberta"),G0o=o(" \u2014 "),Dj=a("a"),O0o=o("DebertaForMaskedLM"),V0o=o(" (DeBERTa model)"),X0o=l(),R2=a("li"),Gde=a("strong"),z0o=o("deberta-v2"),W0o=o(" \u2014 "),Gj=a("a"),Q0o=o("DebertaV2ForMaskedLM"),H0o=o(" (DeBERTa-v2 model)"),U0o=l(),P2=a("li"),Ode=a("strong"),J0o=o("distilbert"),Y0o=o(" \u2014 "),Oj=a("a"),K0o=o("DistilBertForMaskedLM"),Z0o=o(" (DistilBERT model)"),eAo=l(),B2=a("li"),Vde=a("strong"),oAo=o("electra"),rAo=o(" \u2014 "),Vj=a("a"),tAo=o("ElectraForMaskedLM"),aAo=o(" (ELECTRA model)"),nAo=l(),I2=a("li"),Xde=a("strong"),sAo=o("flaubert"),lAo=o(" \u2014 "),Xj=a("a"),iAo=o("FlaubertWithLMHeadModel"),dAo=o(" (FlauBERT model)"),cAo=l(),q2=a("li"),zde=a("strong"),fAo=o("fnet"),mAo=o(" \u2014 "),zj=a("a"),gAo=o("FNetForMaskedLM"),hAo=o(" (FNet model)"),pAo=l(),N2=a("li"),Wde=a("strong"),_Ao=o("funnel"),uAo=o(" \u2014 "),Wj=a("a"),bAo=o("FunnelForMaskedLM"),vAo=o(" (Funnel Transformer model)"),FAo=l(),j2=a("li"),Qde=a("strong"),TAo=o("ibert"),MAo=o(" \u2014 "),Qj=a("a"),EAo=o("IBertForMaskedLM"),CAo=o(" (I-BERT model)"),wAo=l(),D2=a("li"),Hde=a("strong"),AAo=o("layoutlm"),yAo=o(" \u2014 "),Hj=a("a"),LAo=o("LayoutLMForMaskedLM"),xAo=o(" (LayoutLM model)"),$Ao=l(),G2=a("li"),Ude=a("strong"),kAo=o("longformer"),SAo=o(" \u2014 "),Uj=a("a"),RAo=o("LongformerForMaskedLM"),PAo=o(" (Longformer model)"),BAo=l(),O2=a("li"),Jde=a("strong"),IAo=o("mbart"),qAo=o(" \u2014 "),Jj=a("a"),NAo=o("MBartForConditionalGeneration"),jAo=o(" (mBART model)"),DAo=l(),V2=a("li"),Yde=a("strong"),GAo=o("megatron-bert"),OAo=o(" \u2014 "),Yj=a("a"),VAo=o("MegatronBertForMaskedLM"),XAo=o(" (MegatronBert model)"),zAo=l(),X2=a("li"),Kde=a("strong"),WAo=o("mobilebert"),QAo=o(" \u2014 "),Kj=a("a"),HAo=o("MobileBertForMaskedLM"),UAo=o(" (MobileBERT model)"),JAo=l(),z2=a("li"),Zde=a("strong"),YAo=o("mpnet"),KAo=o(" \u2014 "),Zj=a("a"),ZAo=o("MPNetForMaskedLM"),e6o=o(" (MPNet model)"),o6o=l(),W2=a("li"),ece=a("strong"),r6o=o("nystromformer"),t6o=o(" \u2014 "),eD=a("a"),a6o=o("NystromformerForMaskedLM"),n6o=o(" (Nystromformer model)"),s6o=l(),Q2=a("li"),oce=a("strong"),l6o=o("perceiver"),i6o=o(" \u2014 "),oD=a("a"),d6o=o("PerceiverForMaskedLM"),c6o=o(" (Perceiver model)"),f6o=l(),H2=a("li"),rce=a("strong"),m6o=o("qdqbert"),g6o=o(" \u2014 "),rD=a("a"),h6o=o("QDQBertForMaskedLM"),p6o=o(" (QDQBert model)"),_6o=l(),U2=a("li"),tce=a("strong"),u6o=o("reformer"),b6o=o(" \u2014 "),tD=a("a"),v6o=o("ReformerForMaskedLM"),F6o=o(" (Reformer model)"),T6o=l(),J2=a("li"),ace=a("strong"),M6o=o("rembert"),E6o=o(" \u2014 "),aD=a("a"),C6o=o("RemBertForMaskedLM"),w6o=o(" (RemBERT model)"),A6o=l(),Y2=a("li"),nce=a("strong"),y6o=o("roberta"),L6o=o(" \u2014 "),nD=a("a"),x6o=o("RobertaForMaskedLM"),$6o=o(" (RoBERTa model)"),k6o=l(),K2=a("li"),sce=a("strong"),S6o=o("roformer"),R6o=o(" \u2014 "),sD=a("a"),P6o=o("RoFormerForMaskedLM"),B6o=o(" (RoFormer model)"),I6o=l(),Z2=a("li"),lce=a("strong"),q6o=o("squeezebert"),N6o=o(" \u2014 "),lD=a("a"),j6o=o("SqueezeBertForMaskedLM"),D6o=o(" (SqueezeBERT model)"),G6o=l(),e1=a("li"),ice=a("strong"),O6o=o("tapas"),V6o=o(" \u2014 "),iD=a("a"),X6o=o("TapasForMaskedLM"),z6o=o(" (TAPAS model)"),W6o=l(),o1=a("li"),dce=a("strong"),Q6o=o("wav2vec2"),H6o=o(" \u2014 "),cce=a("code"),U6o=o("Wav2Vec2ForMaskedLM"),J6o=o(" (Wav2Vec2 model)"),Y6o=l(),r1=a("li"),fce=a("strong"),K6o=o("xlm"),Z6o=o(" \u2014 "),dD=a("a"),eyo=o("XLMWithLMHeadModel"),oyo=o(" (XLM model)"),ryo=l(),t1=a("li"),mce=a("strong"),tyo=o("xlm-roberta"),ayo=o(" \u2014 "),cD=a("a"),nyo=o("XLMRobertaForMaskedLM"),syo=o(" (XLM-RoBERTa model)"),lyo=l(),a1=a("li"),gce=a("strong"),iyo=o("xlm-roberta-xl"),dyo=o(" \u2014 "),fD=a("a"),cyo=o("XLMRobertaXLForMaskedLM"),fyo=o(" (XLM-RoBERTa-XL model)"),myo=l(),n1=a("li"),hce=a("strong"),gyo=o("yoso"),hyo=o(" \u2014 "),mD=a("a"),pyo=o("YosoForMaskedLM"),_yo=o(" (YOSO model)"),uyo=l(),s1=a("p"),byo=o("The model is set in evaluation mode by default using "),pce=a("code"),vyo=o("model.eval()"),Fyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),Tyo=o("model.train()"),Myo=l(),F(l1.$$.fragment),Fqe=l(),Ii=a("h2"),i1=a("a"),uce=a("span"),F(sy.$$.fragment),Eyo=l(),bce=a("span"),Cyo=o("AutoModelForSeq2SeqLM"),Tqe=l(),So=a("div"),F(ly.$$.fragment),wyo=l(),qi=a("p"),Ayo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gD=a("a"),yyo=o("from_pretrained()"),Lyo=o(" class method or the "),hD=a("a"),xyo=o("from_config()"),$yo=o(` class
method.`),kyo=l(),iy=a("p"),Syo=o("This class cannot be instantiated directly using "),vce=a("code"),Ryo=o("__init__()"),Pyo=o(" (throws an error)."),Byo=l(),lt=a("div"),F(dy.$$.fragment),Iyo=l(),Fce=a("p"),qyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nyo=l(),Ni=a("p"),jyo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),Dyo=o("not"),Gyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=a("a"),Oyo=o("from_pretrained()"),Vyo=o(" to load the model weights."),Xyo=l(),F(d1.$$.fragment),zyo=l(),eo=a("div"),F(cy.$$.fragment),Wyo=l(),Mce=a("p"),Qyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hyo=l(),Sa=a("p"),Uyo=o("The model class to instantiate is selected based on the "),Ece=a("code"),Jyo=o("model_type"),Yyo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),Kyo=o("pretrained_model_name_or_path"),Zyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),eLo=o("pretrained_model_name_or_path"),oLo=o(":"),rLo=l(),_e=a("ul"),c1=a("li"),Ace=a("strong"),tLo=o("bart"),aLo=o(" \u2014 "),_D=a("a"),nLo=o("BartForConditionalGeneration"),sLo=o(" (BART model)"),lLo=l(),f1=a("li"),yce=a("strong"),iLo=o("bigbird_pegasus"),dLo=o(" \u2014 "),uD=a("a"),cLo=o("BigBirdPegasusForConditionalGeneration"),fLo=o(" (BigBirdPegasus model)"),mLo=l(),m1=a("li"),Lce=a("strong"),gLo=o("blenderbot"),hLo=o(" \u2014 "),bD=a("a"),pLo=o("BlenderbotForConditionalGeneration"),_Lo=o(" (Blenderbot model)"),uLo=l(),g1=a("li"),xce=a("strong"),bLo=o("blenderbot-small"),vLo=o(" \u2014 "),vD=a("a"),FLo=o("BlenderbotSmallForConditionalGeneration"),TLo=o(" (BlenderbotSmall model)"),MLo=l(),h1=a("li"),$ce=a("strong"),ELo=o("encoder-decoder"),CLo=o(" \u2014 "),FD=a("a"),wLo=o("EncoderDecoderModel"),ALo=o(" (Encoder decoder model)"),yLo=l(),p1=a("li"),kce=a("strong"),LLo=o("fsmt"),xLo=o(" \u2014 "),TD=a("a"),$Lo=o("FSMTForConditionalGeneration"),kLo=o(" (FairSeq Machine-Translation model)"),SLo=l(),_1=a("li"),Sce=a("strong"),RLo=o("led"),PLo=o(" \u2014 "),MD=a("a"),BLo=o("LEDForConditionalGeneration"),ILo=o(" (LED model)"),qLo=l(),u1=a("li"),Rce=a("strong"),NLo=o("m2m_100"),jLo=o(" \u2014 "),ED=a("a"),DLo=o("M2M100ForConditionalGeneration"),GLo=o(" (M2M100 model)"),OLo=l(),b1=a("li"),Pce=a("strong"),VLo=o("marian"),XLo=o(" \u2014 "),CD=a("a"),zLo=o("MarianMTModel"),WLo=o(" (Marian model)"),QLo=l(),v1=a("li"),Bce=a("strong"),HLo=o("mbart"),ULo=o(" \u2014 "),wD=a("a"),JLo=o("MBartForConditionalGeneration"),YLo=o(" (mBART model)"),KLo=l(),F1=a("li"),Ice=a("strong"),ZLo=o("mt5"),e8o=o(" \u2014 "),AD=a("a"),o8o=o("MT5ForConditionalGeneration"),r8o=o(" (mT5 model)"),t8o=l(),T1=a("li"),qce=a("strong"),a8o=o("pegasus"),n8o=o(" \u2014 "),yD=a("a"),s8o=o("PegasusForConditionalGeneration"),l8o=o(" (Pegasus model)"),i8o=l(),M1=a("li"),Nce=a("strong"),d8o=o("plbart"),c8o=o(" \u2014 "),LD=a("a"),f8o=o("PLBartForConditionalGeneration"),m8o=o(" (PLBart model)"),g8o=l(),E1=a("li"),jce=a("strong"),h8o=o("prophetnet"),p8o=o(" \u2014 "),xD=a("a"),_8o=o("ProphetNetForConditionalGeneration"),u8o=o(" (ProphetNet model)"),b8o=l(),C1=a("li"),Dce=a("strong"),v8o=o("t5"),F8o=o(" \u2014 "),$D=a("a"),T8o=o("T5ForConditionalGeneration"),M8o=o(" (T5 model)"),E8o=l(),w1=a("li"),Gce=a("strong"),C8o=o("xlm-prophetnet"),w8o=o(" \u2014 "),kD=a("a"),A8o=o("XLMProphetNetForConditionalGeneration"),y8o=o(" (XLMProphetNet model)"),L8o=l(),A1=a("p"),x8o=o("The model is set in evaluation mode by default using "),Oce=a("code"),$8o=o("model.eval()"),k8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),S8o=o("model.train()"),R8o=l(),F(y1.$$.fragment),Mqe=l(),ji=a("h2"),L1=a("a"),Xce=a("span"),F(fy.$$.fragment),P8o=l(),zce=a("span"),B8o=o("AutoModelForSequenceClassification"),Eqe=l(),Ro=a("div"),F(my.$$.fragment),I8o=l(),Di=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SD=a("a"),N8o=o("from_pretrained()"),j8o=o(" class method or the "),RD=a("a"),D8o=o("from_config()"),G8o=o(` class
method.`),O8o=l(),gy=a("p"),V8o=o("This class cannot be instantiated directly using "),Wce=a("code"),X8o=o("__init__()"),z8o=o(" (throws an error)."),W8o=l(),it=a("div"),F(hy.$$.fragment),Q8o=l(),Qce=a("p"),H8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U8o=l(),Gi=a("p"),J8o=o(`Note:
Loading a model from its configuration file does `),Hce=a("strong"),Y8o=o("not"),K8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),Z8o=o("from_pretrained()"),e9o=o(" to load the model weights."),o9o=l(),F(x1.$$.fragment),r9o=l(),oo=a("div"),F(py.$$.fragment),t9o=l(),Uce=a("p"),a9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9o=l(),Ra=a("p"),s9o=o("The model class to instantiate is selected based on the "),Jce=a("code"),l9o=o("model_type"),i9o=o(` property of the config object (either
passed as an argument or loaded from `),Yce=a("code"),d9o=o("pretrained_model_name_or_path"),c9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=a("code"),f9o=o("pretrained_model_name_or_path"),m9o=o(":"),g9o=l(),N=a("ul"),$1=a("li"),Zce=a("strong"),h9o=o("albert"),p9o=o(" \u2014 "),BD=a("a"),_9o=o("AlbertForSequenceClassification"),u9o=o(" (ALBERT model)"),b9o=l(),k1=a("li"),efe=a("strong"),v9o=o("bart"),F9o=o(" \u2014 "),ID=a("a"),T9o=o("BartForSequenceClassification"),M9o=o(" (BART model)"),E9o=l(),S1=a("li"),ofe=a("strong"),C9o=o("bert"),w9o=o(" \u2014 "),qD=a("a"),A9o=o("BertForSequenceClassification"),y9o=o(" (BERT model)"),L9o=l(),R1=a("li"),rfe=a("strong"),x9o=o("big_bird"),$9o=o(" \u2014 "),ND=a("a"),k9o=o("BigBirdForSequenceClassification"),S9o=o(" (BigBird model)"),R9o=l(),P1=a("li"),tfe=a("strong"),P9o=o("bigbird_pegasus"),B9o=o(" \u2014 "),jD=a("a"),I9o=o("BigBirdPegasusForSequenceClassification"),q9o=o(" (BigBirdPegasus model)"),N9o=l(),B1=a("li"),afe=a("strong"),j9o=o("camembert"),D9o=o(" \u2014 "),DD=a("a"),G9o=o("CamembertForSequenceClassification"),O9o=o(" (CamemBERT model)"),V9o=l(),I1=a("li"),nfe=a("strong"),X9o=o("canine"),z9o=o(" \u2014 "),GD=a("a"),W9o=o("CanineForSequenceClassification"),Q9o=o(" (Canine model)"),H9o=l(),q1=a("li"),sfe=a("strong"),U9o=o("convbert"),J9o=o(" \u2014 "),OD=a("a"),Y9o=o("ConvBertForSequenceClassification"),K9o=o(" (ConvBERT model)"),Z9o=l(),N1=a("li"),lfe=a("strong"),exo=o("ctrl"),oxo=o(" \u2014 "),VD=a("a"),rxo=o("CTRLForSequenceClassification"),txo=o(" (CTRL model)"),axo=l(),j1=a("li"),ife=a("strong"),nxo=o("data2vec-text"),sxo=o(" \u2014 "),XD=a("a"),lxo=o("Data2VecTextForSequenceClassification"),ixo=o(" (Data2VecText model)"),dxo=l(),D1=a("li"),dfe=a("strong"),cxo=o("deberta"),fxo=o(" \u2014 "),zD=a("a"),mxo=o("DebertaForSequenceClassification"),gxo=o(" (DeBERTa model)"),hxo=l(),G1=a("li"),cfe=a("strong"),pxo=o("deberta-v2"),_xo=o(" \u2014 "),WD=a("a"),uxo=o("DebertaV2ForSequenceClassification"),bxo=o(" (DeBERTa-v2 model)"),vxo=l(),O1=a("li"),ffe=a("strong"),Fxo=o("distilbert"),Txo=o(" \u2014 "),QD=a("a"),Mxo=o("DistilBertForSequenceClassification"),Exo=o(" (DistilBERT model)"),Cxo=l(),V1=a("li"),mfe=a("strong"),wxo=o("electra"),Axo=o(" \u2014 "),HD=a("a"),yxo=o("ElectraForSequenceClassification"),Lxo=o(" (ELECTRA model)"),xxo=l(),X1=a("li"),gfe=a("strong"),$xo=o("flaubert"),kxo=o(" \u2014 "),UD=a("a"),Sxo=o("FlaubertForSequenceClassification"),Rxo=o(" (FlauBERT model)"),Pxo=l(),z1=a("li"),hfe=a("strong"),Bxo=o("fnet"),Ixo=o(" \u2014 "),JD=a("a"),qxo=o("FNetForSequenceClassification"),Nxo=o(" (FNet model)"),jxo=l(),W1=a("li"),pfe=a("strong"),Dxo=o("funnel"),Gxo=o(" \u2014 "),YD=a("a"),Oxo=o("FunnelForSequenceClassification"),Vxo=o(" (Funnel Transformer model)"),Xxo=l(),Q1=a("li"),_fe=a("strong"),zxo=o("gpt2"),Wxo=o(" \u2014 "),KD=a("a"),Qxo=o("GPT2ForSequenceClassification"),Hxo=o(" (OpenAI GPT-2 model)"),Uxo=l(),H1=a("li"),ufe=a("strong"),Jxo=o("gpt_neo"),Yxo=o(" \u2014 "),ZD=a("a"),Kxo=o("GPTNeoForSequenceClassification"),Zxo=o(" (GPT Neo model)"),e$o=l(),U1=a("li"),bfe=a("strong"),o$o=o("gptj"),r$o=o(" \u2014 "),eG=a("a"),t$o=o("GPTJForSequenceClassification"),a$o=o(" (GPT-J model)"),n$o=l(),J1=a("li"),vfe=a("strong"),s$o=o("ibert"),l$o=o(" \u2014 "),oG=a("a"),i$o=o("IBertForSequenceClassification"),d$o=o(" (I-BERT model)"),c$o=l(),Y1=a("li"),Ffe=a("strong"),f$o=o("layoutlm"),m$o=o(" \u2014 "),rG=a("a"),g$o=o("LayoutLMForSequenceClassification"),h$o=o(" (LayoutLM model)"),p$o=l(),K1=a("li"),Tfe=a("strong"),_$o=o("layoutlmv2"),u$o=o(" \u2014 "),tG=a("a"),b$o=o("LayoutLMv2ForSequenceClassification"),v$o=o(" (LayoutLMv2 model)"),F$o=l(),Z1=a("li"),Mfe=a("strong"),T$o=o("led"),M$o=o(" \u2014 "),aG=a("a"),E$o=o("LEDForSequenceClassification"),C$o=o(" (LED model)"),w$o=l(),e7=a("li"),Efe=a("strong"),A$o=o("longformer"),y$o=o(" \u2014 "),nG=a("a"),L$o=o("LongformerForSequenceClassification"),x$o=o(" (Longformer model)"),$$o=l(),o7=a("li"),Cfe=a("strong"),k$o=o("mbart"),S$o=o(" \u2014 "),sG=a("a"),R$o=o("MBartForSequenceClassification"),P$o=o(" (mBART model)"),B$o=l(),r7=a("li"),wfe=a("strong"),I$o=o("megatron-bert"),q$o=o(" \u2014 "),lG=a("a"),N$o=o("MegatronBertForSequenceClassification"),j$o=o(" (MegatronBert model)"),D$o=l(),t7=a("li"),Afe=a("strong"),G$o=o("mobilebert"),O$o=o(" \u2014 "),iG=a("a"),V$o=o("MobileBertForSequenceClassification"),X$o=o(" (MobileBERT model)"),z$o=l(),a7=a("li"),yfe=a("strong"),W$o=o("mpnet"),Q$o=o(" \u2014 "),dG=a("a"),H$o=o("MPNetForSequenceClassification"),U$o=o(" (MPNet model)"),J$o=l(),n7=a("li"),Lfe=a("strong"),Y$o=o("nystromformer"),K$o=o(" \u2014 "),cG=a("a"),Z$o=o("NystromformerForSequenceClassification"),eko=o(" (Nystromformer model)"),oko=l(),s7=a("li"),xfe=a("strong"),rko=o("openai-gpt"),tko=o(" \u2014 "),fG=a("a"),ako=o("OpenAIGPTForSequenceClassification"),nko=o(" (OpenAI GPT model)"),sko=l(),l7=a("li"),$fe=a("strong"),lko=o("perceiver"),iko=o(" \u2014 "),mG=a("a"),dko=o("PerceiverForSequenceClassification"),cko=o(" (Perceiver model)"),fko=l(),i7=a("li"),kfe=a("strong"),mko=o("plbart"),gko=o(" \u2014 "),gG=a("a"),hko=o("PLBartForSequenceClassification"),pko=o(" (PLBart model)"),_ko=l(),d7=a("li"),Sfe=a("strong"),uko=o("qdqbert"),bko=o(" \u2014 "),hG=a("a"),vko=o("QDQBertForSequenceClassification"),Fko=o(" (QDQBert model)"),Tko=l(),c7=a("li"),Rfe=a("strong"),Mko=o("reformer"),Eko=o(" \u2014 "),pG=a("a"),Cko=o("ReformerForSequenceClassification"),wko=o(" (Reformer model)"),Ako=l(),f7=a("li"),Pfe=a("strong"),yko=o("rembert"),Lko=o(" \u2014 "),_G=a("a"),xko=o("RemBertForSequenceClassification"),$ko=o(" (RemBERT model)"),kko=l(),m7=a("li"),Bfe=a("strong"),Sko=o("roberta"),Rko=o(" \u2014 "),uG=a("a"),Pko=o("RobertaForSequenceClassification"),Bko=o(" (RoBERTa model)"),Iko=l(),g7=a("li"),Ife=a("strong"),qko=o("roformer"),Nko=o(" \u2014 "),bG=a("a"),jko=o("RoFormerForSequenceClassification"),Dko=o(" (RoFormer model)"),Gko=l(),h7=a("li"),qfe=a("strong"),Oko=o("squeezebert"),Vko=o(" \u2014 "),vG=a("a"),Xko=o("SqueezeBertForSequenceClassification"),zko=o(" (SqueezeBERT model)"),Wko=l(),p7=a("li"),Nfe=a("strong"),Qko=o("tapas"),Hko=o(" \u2014 "),FG=a("a"),Uko=o("TapasForSequenceClassification"),Jko=o(" (TAPAS model)"),Yko=l(),_7=a("li"),jfe=a("strong"),Kko=o("transfo-xl"),Zko=o(" \u2014 "),TG=a("a"),eSo=o("TransfoXLForSequenceClassification"),oSo=o(" (Transformer-XL model)"),rSo=l(),u7=a("li"),Dfe=a("strong"),tSo=o("xlm"),aSo=o(" \u2014 "),MG=a("a"),nSo=o("XLMForSequenceClassification"),sSo=o(" (XLM model)"),lSo=l(),b7=a("li"),Gfe=a("strong"),iSo=o("xlm-roberta"),dSo=o(" \u2014 "),EG=a("a"),cSo=o("XLMRobertaForSequenceClassification"),fSo=o(" (XLM-RoBERTa model)"),mSo=l(),v7=a("li"),Ofe=a("strong"),gSo=o("xlm-roberta-xl"),hSo=o(" \u2014 "),CG=a("a"),pSo=o("XLMRobertaXLForSequenceClassification"),_So=o(" (XLM-RoBERTa-XL model)"),uSo=l(),F7=a("li"),Vfe=a("strong"),bSo=o("xlnet"),vSo=o(" \u2014 "),wG=a("a"),FSo=o("XLNetForSequenceClassification"),TSo=o(" (XLNet model)"),MSo=l(),T7=a("li"),Xfe=a("strong"),ESo=o("yoso"),CSo=o(" \u2014 "),AG=a("a"),wSo=o("YosoForSequenceClassification"),ASo=o(" (YOSO model)"),ySo=l(),M7=a("p"),LSo=o("The model is set in evaluation mode by default using "),zfe=a("code"),xSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),kSo=o("model.train()"),SSo=l(),F(E7.$$.fragment),Cqe=l(),Oi=a("h2"),C7=a("a"),Qfe=a("span"),F(_y.$$.fragment),RSo=l(),Hfe=a("span"),PSo=o("AutoModelForMultipleChoice"),wqe=l(),Po=a("div"),F(uy.$$.fragment),BSo=l(),Vi=a("p"),ISo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yG=a("a"),qSo=o("from_pretrained()"),NSo=o(" class method or the "),LG=a("a"),jSo=o("from_config()"),DSo=o(` class
method.`),GSo=l(),by=a("p"),OSo=o("This class cannot be instantiated directly using "),Ufe=a("code"),VSo=o("__init__()"),XSo=o(" (throws an error)."),zSo=l(),dt=a("div"),F(vy.$$.fragment),WSo=l(),Jfe=a("p"),QSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HSo=l(),Xi=a("p"),USo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),JSo=o("not"),YSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),KSo=o("from_pretrained()"),ZSo=o(" to load the model weights."),eRo=l(),F(w7.$$.fragment),oRo=l(),ro=a("div"),F(Fy.$$.fragment),rRo=l(),Kfe=a("p"),tRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aRo=l(),Pa=a("p"),nRo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),sRo=o("model_type"),lRo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),iRo=o("pretrained_model_name_or_path"),dRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),cRo=o("pretrained_model_name_or_path"),fRo=o(":"),mRo=l(),Y=a("ul"),A7=a("li"),rme=a("strong"),gRo=o("albert"),hRo=o(" \u2014 "),$G=a("a"),pRo=o("AlbertForMultipleChoice"),_Ro=o(" (ALBERT model)"),uRo=l(),y7=a("li"),tme=a("strong"),bRo=o("bert"),vRo=o(" \u2014 "),kG=a("a"),FRo=o("BertForMultipleChoice"),TRo=o(" (BERT model)"),MRo=l(),L7=a("li"),ame=a("strong"),ERo=o("big_bird"),CRo=o(" \u2014 "),SG=a("a"),wRo=o("BigBirdForMultipleChoice"),ARo=o(" (BigBird model)"),yRo=l(),x7=a("li"),nme=a("strong"),LRo=o("camembert"),xRo=o(" \u2014 "),RG=a("a"),$Ro=o("CamembertForMultipleChoice"),kRo=o(" (CamemBERT model)"),SRo=l(),$7=a("li"),sme=a("strong"),RRo=o("canine"),PRo=o(" \u2014 "),PG=a("a"),BRo=o("CanineForMultipleChoice"),IRo=o(" (Canine model)"),qRo=l(),k7=a("li"),lme=a("strong"),NRo=o("convbert"),jRo=o(" \u2014 "),BG=a("a"),DRo=o("ConvBertForMultipleChoice"),GRo=o(" (ConvBERT model)"),ORo=l(),S7=a("li"),ime=a("strong"),VRo=o("data2vec-text"),XRo=o(" \u2014 "),IG=a("a"),zRo=o("Data2VecTextForMultipleChoice"),WRo=o(" (Data2VecText model)"),QRo=l(),R7=a("li"),dme=a("strong"),HRo=o("deberta-v2"),URo=o(" \u2014 "),qG=a("a"),JRo=o("DebertaV2ForMultipleChoice"),YRo=o(" (DeBERTa-v2 model)"),KRo=l(),P7=a("li"),cme=a("strong"),ZRo=o("distilbert"),ePo=o(" \u2014 "),NG=a("a"),oPo=o("DistilBertForMultipleChoice"),rPo=o(" (DistilBERT model)"),tPo=l(),B7=a("li"),fme=a("strong"),aPo=o("electra"),nPo=o(" \u2014 "),jG=a("a"),sPo=o("ElectraForMultipleChoice"),lPo=o(" (ELECTRA model)"),iPo=l(),I7=a("li"),mme=a("strong"),dPo=o("flaubert"),cPo=o(" \u2014 "),DG=a("a"),fPo=o("FlaubertForMultipleChoice"),mPo=o(" (FlauBERT model)"),gPo=l(),q7=a("li"),gme=a("strong"),hPo=o("fnet"),pPo=o(" \u2014 "),GG=a("a"),_Po=o("FNetForMultipleChoice"),uPo=o(" (FNet model)"),bPo=l(),N7=a("li"),hme=a("strong"),vPo=o("funnel"),FPo=o(" \u2014 "),OG=a("a"),TPo=o("FunnelForMultipleChoice"),MPo=o(" (Funnel Transformer model)"),EPo=l(),j7=a("li"),pme=a("strong"),CPo=o("ibert"),wPo=o(" \u2014 "),VG=a("a"),APo=o("IBertForMultipleChoice"),yPo=o(" (I-BERT model)"),LPo=l(),D7=a("li"),_me=a("strong"),xPo=o("longformer"),$Po=o(" \u2014 "),XG=a("a"),kPo=o("LongformerForMultipleChoice"),SPo=o(" (Longformer model)"),RPo=l(),G7=a("li"),ume=a("strong"),PPo=o("megatron-bert"),BPo=o(" \u2014 "),zG=a("a"),IPo=o("MegatronBertForMultipleChoice"),qPo=o(" (MegatronBert model)"),NPo=l(),O7=a("li"),bme=a("strong"),jPo=o("mobilebert"),DPo=o(" \u2014 "),WG=a("a"),GPo=o("MobileBertForMultipleChoice"),OPo=o(" (MobileBERT model)"),VPo=l(),V7=a("li"),vme=a("strong"),XPo=o("mpnet"),zPo=o(" \u2014 "),QG=a("a"),WPo=o("MPNetForMultipleChoice"),QPo=o(" (MPNet model)"),HPo=l(),X7=a("li"),Fme=a("strong"),UPo=o("nystromformer"),JPo=o(" \u2014 "),HG=a("a"),YPo=o("NystromformerForMultipleChoice"),KPo=o(" (Nystromformer model)"),ZPo=l(),z7=a("li"),Tme=a("strong"),eBo=o("qdqbert"),oBo=o(" \u2014 "),UG=a("a"),rBo=o("QDQBertForMultipleChoice"),tBo=o(" (QDQBert model)"),aBo=l(),W7=a("li"),Mme=a("strong"),nBo=o("rembert"),sBo=o(" \u2014 "),JG=a("a"),lBo=o("RemBertForMultipleChoice"),iBo=o(" (RemBERT model)"),dBo=l(),Q7=a("li"),Eme=a("strong"),cBo=o("roberta"),fBo=o(" \u2014 "),YG=a("a"),mBo=o("RobertaForMultipleChoice"),gBo=o(" (RoBERTa model)"),hBo=l(),H7=a("li"),Cme=a("strong"),pBo=o("roformer"),_Bo=o(" \u2014 "),KG=a("a"),uBo=o("RoFormerForMultipleChoice"),bBo=o(" (RoFormer model)"),vBo=l(),U7=a("li"),wme=a("strong"),FBo=o("squeezebert"),TBo=o(" \u2014 "),ZG=a("a"),MBo=o("SqueezeBertForMultipleChoice"),EBo=o(" (SqueezeBERT model)"),CBo=l(),J7=a("li"),Ame=a("strong"),wBo=o("xlm"),ABo=o(" \u2014 "),eO=a("a"),yBo=o("XLMForMultipleChoice"),LBo=o(" (XLM model)"),xBo=l(),Y7=a("li"),yme=a("strong"),$Bo=o("xlm-roberta"),kBo=o(" \u2014 "),oO=a("a"),SBo=o("XLMRobertaForMultipleChoice"),RBo=o(" (XLM-RoBERTa model)"),PBo=l(),K7=a("li"),Lme=a("strong"),BBo=o("xlm-roberta-xl"),IBo=o(" \u2014 "),rO=a("a"),qBo=o("XLMRobertaXLForMultipleChoice"),NBo=o(" (XLM-RoBERTa-XL model)"),jBo=l(),Z7=a("li"),xme=a("strong"),DBo=o("xlnet"),GBo=o(" \u2014 "),tO=a("a"),OBo=o("XLNetForMultipleChoice"),VBo=o(" (XLNet model)"),XBo=l(),eb=a("li"),$me=a("strong"),zBo=o("yoso"),WBo=o(" \u2014 "),aO=a("a"),QBo=o("YosoForMultipleChoice"),HBo=o(" (YOSO model)"),UBo=l(),ob=a("p"),JBo=o("The model is set in evaluation mode by default using "),kme=a("code"),YBo=o("model.eval()"),KBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),ZBo=o("model.train()"),eIo=l(),F(rb.$$.fragment),Aqe=l(),zi=a("h2"),tb=a("a"),Rme=a("span"),F(Ty.$$.fragment),oIo=l(),Pme=a("span"),rIo=o("AutoModelForNextSentencePrediction"),yqe=l(),Bo=a("div"),F(My.$$.fragment),tIo=l(),Wi=a("p"),aIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nO=a("a"),nIo=o("from_pretrained()"),sIo=o(" class method or the "),sO=a("a"),lIo=o("from_config()"),iIo=o(` class
method.`),dIo=l(),Ey=a("p"),cIo=o("This class cannot be instantiated directly using "),Bme=a("code"),fIo=o("__init__()"),mIo=o(" (throws an error)."),gIo=l(),ct=a("div"),F(Cy.$$.fragment),hIo=l(),Ime=a("p"),pIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Io=l(),Qi=a("p"),uIo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),bIo=o("not"),vIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),FIo=o("from_pretrained()"),TIo=o(" to load the model weights."),MIo=l(),F(ab.$$.fragment),EIo=l(),to=a("div"),F(wy.$$.fragment),CIo=l(),Nme=a("p"),wIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AIo=l(),Ba=a("p"),yIo=o("The model class to instantiate is selected based on the "),jme=a("code"),LIo=o("model_type"),xIo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),$Io=o("pretrained_model_name_or_path"),kIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),SIo=o("pretrained_model_name_or_path"),RIo=o(":"),PIo=l(),Yr=a("ul"),nb=a("li"),Ome=a("strong"),BIo=o("bert"),IIo=o(" \u2014 "),iO=a("a"),qIo=o("BertForNextSentencePrediction"),NIo=o(" (BERT model)"),jIo=l(),sb=a("li"),Vme=a("strong"),DIo=o("fnet"),GIo=o(" \u2014 "),dO=a("a"),OIo=o("FNetForNextSentencePrediction"),VIo=o(" (FNet model)"),XIo=l(),lb=a("li"),Xme=a("strong"),zIo=o("megatron-bert"),WIo=o(" \u2014 "),cO=a("a"),QIo=o("MegatronBertForNextSentencePrediction"),HIo=o(" (MegatronBert model)"),UIo=l(),ib=a("li"),zme=a("strong"),JIo=o("mobilebert"),YIo=o(" \u2014 "),fO=a("a"),KIo=o("MobileBertForNextSentencePrediction"),ZIo=o(" (MobileBERT model)"),eqo=l(),db=a("li"),Wme=a("strong"),oqo=o("qdqbert"),rqo=o(" \u2014 "),mO=a("a"),tqo=o("QDQBertForNextSentencePrediction"),aqo=o(" (QDQBert model)"),nqo=l(),cb=a("p"),sqo=o("The model is set in evaluation mode by default using "),Qme=a("code"),lqo=o("model.eval()"),iqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),dqo=o("model.train()"),cqo=l(),F(fb.$$.fragment),Lqe=l(),Hi=a("h2"),mb=a("a"),Ume=a("span"),F(Ay.$$.fragment),fqo=l(),Jme=a("span"),mqo=o("AutoModelForTokenClassification"),xqe=l(),Io=a("div"),F(yy.$$.fragment),gqo=l(),Ui=a("p"),hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gO=a("a"),pqo=o("from_pretrained()"),_qo=o(" class method or the "),hO=a("a"),uqo=o("from_config()"),bqo=o(` class
method.`),vqo=l(),Ly=a("p"),Fqo=o("This class cannot be instantiated directly using "),Yme=a("code"),Tqo=o("__init__()"),Mqo=o(" (throws an error)."),Eqo=l(),ft=a("div"),F(xy.$$.fragment),Cqo=l(),Kme=a("p"),wqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Aqo=l(),Ji=a("p"),yqo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),Lqo=o("not"),xqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),$qo=o("from_pretrained()"),kqo=o(" to load the model weights."),Sqo=l(),F(gb.$$.fragment),Rqo=l(),ao=a("div"),F($y.$$.fragment),Pqo=l(),ege=a("p"),Bqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iqo=l(),Ia=a("p"),qqo=o("The model class to instantiate is selected based on the "),oge=a("code"),Nqo=o("model_type"),jqo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),Dqo=o("pretrained_model_name_or_path"),Gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),Oqo=o("pretrained_model_name_or_path"),Vqo=o(":"),Xqo=l(),U=a("ul"),hb=a("li"),age=a("strong"),zqo=o("albert"),Wqo=o(" \u2014 "),_O=a("a"),Qqo=o("AlbertForTokenClassification"),Hqo=o(" (ALBERT model)"),Uqo=l(),pb=a("li"),nge=a("strong"),Jqo=o("bert"),Yqo=o(" \u2014 "),uO=a("a"),Kqo=o("BertForTokenClassification"),Zqo=o(" (BERT model)"),eNo=l(),_b=a("li"),sge=a("strong"),oNo=o("big_bird"),rNo=o(" \u2014 "),bO=a("a"),tNo=o("BigBirdForTokenClassification"),aNo=o(" (BigBird model)"),nNo=l(),ub=a("li"),lge=a("strong"),sNo=o("camembert"),lNo=o(" \u2014 "),vO=a("a"),iNo=o("CamembertForTokenClassification"),dNo=o(" (CamemBERT model)"),cNo=l(),bb=a("li"),ige=a("strong"),fNo=o("canine"),mNo=o(" \u2014 "),FO=a("a"),gNo=o("CanineForTokenClassification"),hNo=o(" (Canine model)"),pNo=l(),vb=a("li"),dge=a("strong"),_No=o("convbert"),uNo=o(" \u2014 "),TO=a("a"),bNo=o("ConvBertForTokenClassification"),vNo=o(" (ConvBERT model)"),FNo=l(),Fb=a("li"),cge=a("strong"),TNo=o("data2vec-text"),MNo=o(" \u2014 "),MO=a("a"),ENo=o("Data2VecTextForTokenClassification"),CNo=o(" (Data2VecText model)"),wNo=l(),Tb=a("li"),fge=a("strong"),ANo=o("deberta"),yNo=o(" \u2014 "),EO=a("a"),LNo=o("DebertaForTokenClassification"),xNo=o(" (DeBERTa model)"),$No=l(),Mb=a("li"),mge=a("strong"),kNo=o("deberta-v2"),SNo=o(" \u2014 "),CO=a("a"),RNo=o("DebertaV2ForTokenClassification"),PNo=o(" (DeBERTa-v2 model)"),BNo=l(),Eb=a("li"),gge=a("strong"),INo=o("distilbert"),qNo=o(" \u2014 "),wO=a("a"),NNo=o("DistilBertForTokenClassification"),jNo=o(" (DistilBERT model)"),DNo=l(),Cb=a("li"),hge=a("strong"),GNo=o("electra"),ONo=o(" \u2014 "),AO=a("a"),VNo=o("ElectraForTokenClassification"),XNo=o(" (ELECTRA model)"),zNo=l(),wb=a("li"),pge=a("strong"),WNo=o("flaubert"),QNo=o(" \u2014 "),yO=a("a"),HNo=o("FlaubertForTokenClassification"),UNo=o(" (FlauBERT model)"),JNo=l(),Ab=a("li"),_ge=a("strong"),YNo=o("fnet"),KNo=o(" \u2014 "),LO=a("a"),ZNo=o("FNetForTokenClassification"),ejo=o(" (FNet model)"),ojo=l(),yb=a("li"),uge=a("strong"),rjo=o("funnel"),tjo=o(" \u2014 "),xO=a("a"),ajo=o("FunnelForTokenClassification"),njo=o(" (Funnel Transformer model)"),sjo=l(),Lb=a("li"),bge=a("strong"),ljo=o("gpt2"),ijo=o(" \u2014 "),$O=a("a"),djo=o("GPT2ForTokenClassification"),cjo=o(" (OpenAI GPT-2 model)"),fjo=l(),xb=a("li"),vge=a("strong"),mjo=o("ibert"),gjo=o(" \u2014 "),kO=a("a"),hjo=o("IBertForTokenClassification"),pjo=o(" (I-BERT model)"),_jo=l(),$b=a("li"),Fge=a("strong"),ujo=o("layoutlm"),bjo=o(" \u2014 "),SO=a("a"),vjo=o("LayoutLMForTokenClassification"),Fjo=o(" (LayoutLM model)"),Tjo=l(),kb=a("li"),Tge=a("strong"),Mjo=o("layoutlmv2"),Ejo=o(" \u2014 "),RO=a("a"),Cjo=o("LayoutLMv2ForTokenClassification"),wjo=o(" (LayoutLMv2 model)"),Ajo=l(),Sb=a("li"),Mge=a("strong"),yjo=o("longformer"),Ljo=o(" \u2014 "),PO=a("a"),xjo=o("LongformerForTokenClassification"),$jo=o(" (Longformer model)"),kjo=l(),Rb=a("li"),Ege=a("strong"),Sjo=o("megatron-bert"),Rjo=o(" \u2014 "),BO=a("a"),Pjo=o("MegatronBertForTokenClassification"),Bjo=o(" (MegatronBert model)"),Ijo=l(),Pb=a("li"),Cge=a("strong"),qjo=o("mobilebert"),Njo=o(" \u2014 "),IO=a("a"),jjo=o("MobileBertForTokenClassification"),Djo=o(" (MobileBERT model)"),Gjo=l(),Bb=a("li"),wge=a("strong"),Ojo=o("mpnet"),Vjo=o(" \u2014 "),qO=a("a"),Xjo=o("MPNetForTokenClassification"),zjo=o(" (MPNet model)"),Wjo=l(),Ib=a("li"),Age=a("strong"),Qjo=o("nystromformer"),Hjo=o(" \u2014 "),NO=a("a"),Ujo=o("NystromformerForTokenClassification"),Jjo=o(" (Nystromformer model)"),Yjo=l(),qb=a("li"),yge=a("strong"),Kjo=o("qdqbert"),Zjo=o(" \u2014 "),jO=a("a"),eDo=o("QDQBertForTokenClassification"),oDo=o(" (QDQBert model)"),rDo=l(),Nb=a("li"),Lge=a("strong"),tDo=o("rembert"),aDo=o(" \u2014 "),DO=a("a"),nDo=o("RemBertForTokenClassification"),sDo=o(" (RemBERT model)"),lDo=l(),jb=a("li"),xge=a("strong"),iDo=o("roberta"),dDo=o(" \u2014 "),GO=a("a"),cDo=o("RobertaForTokenClassification"),fDo=o(" (RoBERTa model)"),mDo=l(),Db=a("li"),$ge=a("strong"),gDo=o("roformer"),hDo=o(" \u2014 "),OO=a("a"),pDo=o("RoFormerForTokenClassification"),_Do=o(" (RoFormer model)"),uDo=l(),Gb=a("li"),kge=a("strong"),bDo=o("squeezebert"),vDo=o(" \u2014 "),VO=a("a"),FDo=o("SqueezeBertForTokenClassification"),TDo=o(" (SqueezeBERT model)"),MDo=l(),Ob=a("li"),Sge=a("strong"),EDo=o("xlm"),CDo=o(" \u2014 "),XO=a("a"),wDo=o("XLMForTokenClassification"),ADo=o(" (XLM model)"),yDo=l(),Vb=a("li"),Rge=a("strong"),LDo=o("xlm-roberta"),xDo=o(" \u2014 "),zO=a("a"),$Do=o("XLMRobertaForTokenClassification"),kDo=o(" (XLM-RoBERTa model)"),SDo=l(),Xb=a("li"),Pge=a("strong"),RDo=o("xlm-roberta-xl"),PDo=o(" \u2014 "),WO=a("a"),BDo=o("XLMRobertaXLForTokenClassification"),IDo=o(" (XLM-RoBERTa-XL model)"),qDo=l(),zb=a("li"),Bge=a("strong"),NDo=o("xlnet"),jDo=o(" \u2014 "),QO=a("a"),DDo=o("XLNetForTokenClassification"),GDo=o(" (XLNet model)"),ODo=l(),Wb=a("li"),Ige=a("strong"),VDo=o("yoso"),XDo=o(" \u2014 "),HO=a("a"),zDo=o("YosoForTokenClassification"),WDo=o(" (YOSO model)"),QDo=l(),Qb=a("p"),HDo=o("The model is set in evaluation mode by default using "),qge=a("code"),UDo=o("model.eval()"),JDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),YDo=o("model.train()"),KDo=l(),F(Hb.$$.fragment),$qe=l(),Yi=a("h2"),Ub=a("a"),jge=a("span"),F(ky.$$.fragment),ZDo=l(),Dge=a("span"),eGo=o("AutoModelForQuestionAnswering"),kqe=l(),qo=a("div"),F(Sy.$$.fragment),oGo=l(),Ki=a("p"),rGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UO=a("a"),tGo=o("from_pretrained()"),aGo=o(" class method or the "),JO=a("a"),nGo=o("from_config()"),sGo=o(` class
method.`),lGo=l(),Ry=a("p"),iGo=o("This class cannot be instantiated directly using "),Gge=a("code"),dGo=o("__init__()"),cGo=o(" (throws an error)."),fGo=l(),mt=a("div"),F(Py.$$.fragment),mGo=l(),Oge=a("p"),gGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hGo=l(),Zi=a("p"),pGo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),_Go=o("not"),uGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),bGo=o("from_pretrained()"),vGo=o(" to load the model weights."),FGo=l(),F(Jb.$$.fragment),TGo=l(),no=a("div"),F(By.$$.fragment),MGo=l(),Xge=a("p"),EGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CGo=l(),qa=a("p"),wGo=o("The model class to instantiate is selected based on the "),zge=a("code"),AGo=o("model_type"),yGo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),LGo=o("pretrained_model_name_or_path"),xGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),$Go=o("pretrained_model_name_or_path"),kGo=o(":"),SGo=l(),V=a("ul"),Yb=a("li"),Hge=a("strong"),RGo=o("albert"),PGo=o(" \u2014 "),KO=a("a"),BGo=o("AlbertForQuestionAnswering"),IGo=o(" (ALBERT model)"),qGo=l(),Kb=a("li"),Uge=a("strong"),NGo=o("bart"),jGo=o(" \u2014 "),ZO=a("a"),DGo=o("BartForQuestionAnswering"),GGo=o(" (BART model)"),OGo=l(),Zb=a("li"),Jge=a("strong"),VGo=o("bert"),XGo=o(" \u2014 "),eV=a("a"),zGo=o("BertForQuestionAnswering"),WGo=o(" (BERT model)"),QGo=l(),ev=a("li"),Yge=a("strong"),HGo=o("big_bird"),UGo=o(" \u2014 "),oV=a("a"),JGo=o("BigBirdForQuestionAnswering"),YGo=o(" (BigBird model)"),KGo=l(),ov=a("li"),Kge=a("strong"),ZGo=o("bigbird_pegasus"),eOo=o(" \u2014 "),rV=a("a"),oOo=o("BigBirdPegasusForQuestionAnswering"),rOo=o(" (BigBirdPegasus model)"),tOo=l(),rv=a("li"),Zge=a("strong"),aOo=o("camembert"),nOo=o(" \u2014 "),tV=a("a"),sOo=o("CamembertForQuestionAnswering"),lOo=o(" (CamemBERT model)"),iOo=l(),tv=a("li"),ehe=a("strong"),dOo=o("canine"),cOo=o(" \u2014 "),aV=a("a"),fOo=o("CanineForQuestionAnswering"),mOo=o(" (Canine model)"),gOo=l(),av=a("li"),ohe=a("strong"),hOo=o("convbert"),pOo=o(" \u2014 "),nV=a("a"),_Oo=o("ConvBertForQuestionAnswering"),uOo=o(" (ConvBERT model)"),bOo=l(),nv=a("li"),rhe=a("strong"),vOo=o("data2vec-text"),FOo=o(" \u2014 "),sV=a("a"),TOo=o("Data2VecTextForQuestionAnswering"),MOo=o(" (Data2VecText model)"),EOo=l(),sv=a("li"),the=a("strong"),COo=o("deberta"),wOo=o(" \u2014 "),lV=a("a"),AOo=o("DebertaForQuestionAnswering"),yOo=o(" (DeBERTa model)"),LOo=l(),lv=a("li"),ahe=a("strong"),xOo=o("deberta-v2"),$Oo=o(" \u2014 "),iV=a("a"),kOo=o("DebertaV2ForQuestionAnswering"),SOo=o(" (DeBERTa-v2 model)"),ROo=l(),iv=a("li"),nhe=a("strong"),POo=o("distilbert"),BOo=o(" \u2014 "),dV=a("a"),IOo=o("DistilBertForQuestionAnswering"),qOo=o(" (DistilBERT model)"),NOo=l(),dv=a("li"),she=a("strong"),jOo=o("electra"),DOo=o(" \u2014 "),cV=a("a"),GOo=o("ElectraForQuestionAnswering"),OOo=o(" (ELECTRA model)"),VOo=l(),cv=a("li"),lhe=a("strong"),XOo=o("flaubert"),zOo=o(" \u2014 "),fV=a("a"),WOo=o("FlaubertForQuestionAnsweringSimple"),QOo=o(" (FlauBERT model)"),HOo=l(),fv=a("li"),ihe=a("strong"),UOo=o("fnet"),JOo=o(" \u2014 "),mV=a("a"),YOo=o("FNetForQuestionAnswering"),KOo=o(" (FNet model)"),ZOo=l(),mv=a("li"),dhe=a("strong"),eVo=o("funnel"),oVo=o(" \u2014 "),gV=a("a"),rVo=o("FunnelForQuestionAnswering"),tVo=o(" (Funnel Transformer model)"),aVo=l(),gv=a("li"),che=a("strong"),nVo=o("gptj"),sVo=o(" \u2014 "),hV=a("a"),lVo=o("GPTJForQuestionAnswering"),iVo=o(" (GPT-J model)"),dVo=l(),hv=a("li"),fhe=a("strong"),cVo=o("ibert"),fVo=o(" \u2014 "),pV=a("a"),mVo=o("IBertForQuestionAnswering"),gVo=o(" (I-BERT model)"),hVo=l(),pv=a("li"),mhe=a("strong"),pVo=o("layoutlmv2"),_Vo=o(" \u2014 "),_V=a("a"),uVo=o("LayoutLMv2ForQuestionAnswering"),bVo=o(" (LayoutLMv2 model)"),vVo=l(),_v=a("li"),ghe=a("strong"),FVo=o("led"),TVo=o(" \u2014 "),uV=a("a"),MVo=o("LEDForQuestionAnswering"),EVo=o(" (LED model)"),CVo=l(),uv=a("li"),hhe=a("strong"),wVo=o("longformer"),AVo=o(" \u2014 "),bV=a("a"),yVo=o("LongformerForQuestionAnswering"),LVo=o(" (Longformer model)"),xVo=l(),bv=a("li"),phe=a("strong"),$Vo=o("lxmert"),kVo=o(" \u2014 "),vV=a("a"),SVo=o("LxmertForQuestionAnswering"),RVo=o(" (LXMERT model)"),PVo=l(),vv=a("li"),_he=a("strong"),BVo=o("mbart"),IVo=o(" \u2014 "),FV=a("a"),qVo=o("MBartForQuestionAnswering"),NVo=o(" (mBART model)"),jVo=l(),Fv=a("li"),uhe=a("strong"),DVo=o("megatron-bert"),GVo=o(" \u2014 "),TV=a("a"),OVo=o("MegatronBertForQuestionAnswering"),VVo=o(" (MegatronBert model)"),XVo=l(),Tv=a("li"),bhe=a("strong"),zVo=o("mobilebert"),WVo=o(" \u2014 "),MV=a("a"),QVo=o("MobileBertForQuestionAnswering"),HVo=o(" (MobileBERT model)"),UVo=l(),Mv=a("li"),vhe=a("strong"),JVo=o("mpnet"),YVo=o(" \u2014 "),EV=a("a"),KVo=o("MPNetForQuestionAnswering"),ZVo=o(" (MPNet model)"),eXo=l(),Ev=a("li"),Fhe=a("strong"),oXo=o("nystromformer"),rXo=o(" \u2014 "),CV=a("a"),tXo=o("NystromformerForQuestionAnswering"),aXo=o(" (Nystromformer model)"),nXo=l(),Cv=a("li"),The=a("strong"),sXo=o("qdqbert"),lXo=o(" \u2014 "),wV=a("a"),iXo=o("QDQBertForQuestionAnswering"),dXo=o(" (QDQBert model)"),cXo=l(),wv=a("li"),Mhe=a("strong"),fXo=o("reformer"),mXo=o(" \u2014 "),AV=a("a"),gXo=o("ReformerForQuestionAnswering"),hXo=o(" (Reformer model)"),pXo=l(),Av=a("li"),Ehe=a("strong"),_Xo=o("rembert"),uXo=o(" \u2014 "),yV=a("a"),bXo=o("RemBertForQuestionAnswering"),vXo=o(" (RemBERT model)"),FXo=l(),yv=a("li"),Che=a("strong"),TXo=o("roberta"),MXo=o(" \u2014 "),LV=a("a"),EXo=o("RobertaForQuestionAnswering"),CXo=o(" (RoBERTa model)"),wXo=l(),Lv=a("li"),whe=a("strong"),AXo=o("roformer"),yXo=o(" \u2014 "),xV=a("a"),LXo=o("RoFormerForQuestionAnswering"),xXo=o(" (RoFormer model)"),$Xo=l(),xv=a("li"),Ahe=a("strong"),kXo=o("splinter"),SXo=o(" \u2014 "),$V=a("a"),RXo=o("SplinterForQuestionAnswering"),PXo=o(" (Splinter model)"),BXo=l(),$v=a("li"),yhe=a("strong"),IXo=o("squeezebert"),qXo=o(" \u2014 "),kV=a("a"),NXo=o("SqueezeBertForQuestionAnswering"),jXo=o(" (SqueezeBERT model)"),DXo=l(),kv=a("li"),Lhe=a("strong"),GXo=o("xlm"),OXo=o(" \u2014 "),SV=a("a"),VXo=o("XLMForQuestionAnsweringSimple"),XXo=o(" (XLM model)"),zXo=l(),Sv=a("li"),xhe=a("strong"),WXo=o("xlm-roberta"),QXo=o(" \u2014 "),RV=a("a"),HXo=o("XLMRobertaForQuestionAnswering"),UXo=o(" (XLM-RoBERTa model)"),JXo=l(),Rv=a("li"),$he=a("strong"),YXo=o("xlm-roberta-xl"),KXo=o(" \u2014 "),PV=a("a"),ZXo=o("XLMRobertaXLForQuestionAnswering"),ezo=o(" (XLM-RoBERTa-XL model)"),ozo=l(),Pv=a("li"),khe=a("strong"),rzo=o("xlnet"),tzo=o(" \u2014 "),BV=a("a"),azo=o("XLNetForQuestionAnsweringSimple"),nzo=o(" (XLNet model)"),szo=l(),Bv=a("li"),She=a("strong"),lzo=o("yoso"),izo=o(" \u2014 "),IV=a("a"),dzo=o("YosoForQuestionAnswering"),czo=o(" (YOSO model)"),fzo=l(),Iv=a("p"),mzo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),gzo=o("model.eval()"),hzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),pzo=o("model.train()"),_zo=l(),F(qv.$$.fragment),Sqe=l(),ed=a("h2"),Nv=a("a"),Bhe=a("span"),F(Iy.$$.fragment),uzo=l(),Ihe=a("span"),bzo=o("AutoModelForTableQuestionAnswering"),Rqe=l(),No=a("div"),F(qy.$$.fragment),vzo=l(),od=a("p"),Fzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qV=a("a"),Tzo=o("from_pretrained()"),Mzo=o(" class method or the "),NV=a("a"),Ezo=o("from_config()"),Czo=o(` class
method.`),wzo=l(),Ny=a("p"),Azo=o("This class cannot be instantiated directly using "),qhe=a("code"),yzo=o("__init__()"),Lzo=o(" (throws an error)."),xzo=l(),gt=a("div"),F(jy.$$.fragment),$zo=l(),Nhe=a("p"),kzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Szo=l(),rd=a("p"),Rzo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),Pzo=o("not"),Bzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),Izo=o("from_pretrained()"),qzo=o(" to load the model weights."),Nzo=l(),F(jv.$$.fragment),jzo=l(),so=a("div"),F(Dy.$$.fragment),Dzo=l(),Dhe=a("p"),Gzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ozo=l(),Na=a("p"),Vzo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),Xzo=o("model_type"),zzo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),Wzo=o("pretrained_model_name_or_path"),Qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),Hzo=o("pretrained_model_name_or_path"),Uzo=o(":"),Jzo=l(),Xhe=a("ul"),Dv=a("li"),zhe=a("strong"),Yzo=o("tapas"),Kzo=o(" \u2014 "),DV=a("a"),Zzo=o("TapasForQuestionAnswering"),eWo=o(" (TAPAS model)"),oWo=l(),Gv=a("p"),rWo=o("The model is set in evaluation mode by default using "),Whe=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),nWo=o("model.train()"),sWo=l(),F(Ov.$$.fragment),Pqe=l(),td=a("h2"),Vv=a("a"),Hhe=a("span"),F(Gy.$$.fragment),lWo=l(),Uhe=a("span"),iWo=o("AutoModelForImageClassification"),Bqe=l(),jo=a("div"),F(Oy.$$.fragment),dWo=l(),ad=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GV=a("a"),fWo=o("from_pretrained()"),mWo=o(" class method or the "),OV=a("a"),gWo=o("from_config()"),hWo=o(` class
method.`),pWo=l(),Vy=a("p"),_Wo=o("This class cannot be instantiated directly using "),Jhe=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),ht=a("div"),F(Xy.$$.fragment),FWo=l(),Yhe=a("p"),TWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MWo=l(),nd=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),CWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),AWo=o("from_pretrained()"),yWo=o(" to load the model weights."),LWo=l(),F(Xv.$$.fragment),xWo=l(),lo=a("div"),F(zy.$$.fragment),$Wo=l(),Zhe=a("p"),kWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SWo=l(),ja=a("p"),RWo=o("The model class to instantiate is selected based on the "),epe=a("code"),PWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(":"),DWo=l(),Fe=a("ul"),zv=a("li"),tpe=a("strong"),GWo=o("beit"),OWo=o(" \u2014 "),XV=a("a"),VWo=o("BeitForImageClassification"),XWo=o(" (BEiT model)"),zWo=l(),Wv=a("li"),ape=a("strong"),WWo=o("convnext"),QWo=o(" \u2014 "),zV=a("a"),HWo=o("ConvNextForImageClassification"),UWo=o(" (ConvNext model)"),JWo=l(),Qv=a("li"),npe=a("strong"),YWo=o("data2vec-vision"),KWo=o(" \u2014 "),WV=a("a"),ZWo=o("Data2VecVisionForImageClassification"),eQo=o(" (Data2VecVision model)"),oQo=l(),Ps=a("li"),spe=a("strong"),rQo=o("deit"),tQo=o(" \u2014 "),QV=a("a"),aQo=o("DeiTForImageClassification"),nQo=o(" or "),HV=a("a"),sQo=o("DeiTForImageClassificationWithTeacher"),lQo=o(" (DeiT model)"),iQo=l(),Hv=a("li"),lpe=a("strong"),dQo=o("imagegpt"),cQo=o(" \u2014 "),UV=a("a"),fQo=o("ImageGPTForImageClassification"),mQo=o(" (ImageGPT model)"),gQo=l(),pt=a("li"),ipe=a("strong"),hQo=o("perceiver"),pQo=o(" \u2014 "),JV=a("a"),_Qo=o("PerceiverForImageClassificationLearned"),uQo=o(" or "),YV=a("a"),bQo=o("PerceiverForImageClassificationFourier"),vQo=o(" or "),KV=a("a"),FQo=o("PerceiverForImageClassificationConvProcessing"),TQo=o(" (Perceiver model)"),MQo=l(),Uv=a("li"),dpe=a("strong"),EQo=o("poolformer"),CQo=o(" \u2014 "),ZV=a("a"),wQo=o("PoolFormerForImageClassification"),AQo=o(" (PoolFormer model)"),yQo=l(),Jv=a("li"),cpe=a("strong"),LQo=o("regnet"),xQo=o(" \u2014 "),eX=a("a"),$Qo=o("RegNetForImageClassification"),kQo=o(" (RegNet model)"),SQo=l(),Yv=a("li"),fpe=a("strong"),RQo=o("resnet"),PQo=o(" \u2014 "),oX=a("a"),BQo=o("ResNetForImageClassification"),IQo=o(" (ResNet model)"),qQo=l(),Kv=a("li"),mpe=a("strong"),NQo=o("segformer"),jQo=o(" \u2014 "),rX=a("a"),DQo=o("SegformerForImageClassification"),GQo=o(" (SegFormer model)"),OQo=l(),Zv=a("li"),gpe=a("strong"),VQo=o("swin"),XQo=o(" \u2014 "),tX=a("a"),zQo=o("SwinForImageClassification"),WQo=o(" (Swin model)"),QQo=l(),eF=a("li"),hpe=a("strong"),HQo=o("van"),UQo=o(" \u2014 "),aX=a("a"),JQo=o("VanForImageClassification"),YQo=o(" (VAN model)"),KQo=l(),oF=a("li"),ppe=a("strong"),ZQo=o("vit"),eHo=o(" \u2014 "),nX=a("a"),oHo=o("ViTForImageClassification"),rHo=o(" (ViT model)"),tHo=l(),rF=a("p"),aHo=o("The model is set in evaluation mode by default using "),_pe=a("code"),nHo=o("model.eval()"),sHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),lHo=o("model.train()"),iHo=l(),F(tF.$$.fragment),Iqe=l(),sd=a("h2"),aF=a("a"),bpe=a("span"),F(Wy.$$.fragment),dHo=l(),vpe=a("span"),cHo=o("AutoModelForVision2Seq"),qqe=l(),Do=a("div"),F(Qy.$$.fragment),fHo=l(),ld=a("p"),mHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sX=a("a"),gHo=o("from_pretrained()"),hHo=o(" class method or the "),lX=a("a"),pHo=o("from_config()"),_Ho=o(` class
method.`),uHo=l(),Hy=a("p"),bHo=o("This class cannot be instantiated directly using "),Fpe=a("code"),vHo=o("__init__()"),FHo=o(" (throws an error)."),THo=l(),_t=a("div"),F(Uy.$$.fragment),MHo=l(),Tpe=a("p"),EHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CHo=l(),id=a("p"),wHo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),AHo=o("not"),yHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),LHo=o("from_pretrained()"),xHo=o(" to load the model weights."),$Ho=l(),F(nF.$$.fragment),kHo=l(),io=a("div"),F(Jy.$$.fragment),SHo=l(),Epe=a("p"),RHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PHo=l(),Da=a("p"),BHo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),IHo=o("model_type"),qHo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(":"),OHo=l(),ype=a("ul"),sF=a("li"),Lpe=a("strong"),VHo=o("vision-encoder-decoder"),XHo=o(" \u2014 "),dX=a("a"),zHo=o("VisionEncoderDecoderModel"),WHo=o(" (Vision Encoder decoder model)"),QHo=l(),lF=a("p"),HHo=o("The model is set in evaluation mode by default using "),xpe=a("code"),UHo=o("model.eval()"),JHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),YHo=o("model.train()"),KHo=l(),F(iF.$$.fragment),Nqe=l(),dd=a("h2"),dF=a("a"),kpe=a("span"),F(Yy.$$.fragment),ZHo=l(),Spe=a("span"),eUo=o("AutoModelForAudioClassification"),jqe=l(),Go=a("div"),F(Ky.$$.fragment),oUo=l(),cd=a("p"),rUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),cX=a("a"),tUo=o("from_pretrained()"),aUo=o(" class method or the "),fX=a("a"),nUo=o("from_config()"),sUo=o(` class
method.`),lUo=l(),Zy=a("p"),iUo=o("This class cannot be instantiated directly using "),Rpe=a("code"),dUo=o("__init__()"),cUo=o(" (throws an error)."),fUo=l(),ut=a("div"),F(eL.$$.fragment),mUo=l(),Ppe=a("p"),gUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hUo=l(),fd=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),_Uo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),bUo=o("from_pretrained()"),vUo=o(" to load the model weights."),FUo=l(),F(cF.$$.fragment),TUo=l(),co=a("div"),F(oL.$$.fragment),MUo=l(),Ipe=a("p"),EUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),CUo=l(),Ga=a("p"),wUo=o("The model class to instantiate is selected based on the "),qpe=a("code"),AUo=o("model_type"),yUo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),LUo=o("pretrained_model_name_or_path"),xUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(":"),SUo=l(),Se=a("ul"),fF=a("li"),Dpe=a("strong"),RUo=o("data2vec-audio"),PUo=o(" \u2014 "),gX=a("a"),BUo=o("Data2VecAudioForSequenceClassification"),IUo=o(" (Data2VecAudio model)"),qUo=l(),mF=a("li"),Gpe=a("strong"),NUo=o("hubert"),jUo=o(" \u2014 "),hX=a("a"),DUo=o("HubertForSequenceClassification"),GUo=o(" (Hubert model)"),OUo=l(),gF=a("li"),Ope=a("strong"),VUo=o("sew"),XUo=o(" \u2014 "),pX=a("a"),zUo=o("SEWForSequenceClassification"),WUo=o(" (SEW model)"),QUo=l(),hF=a("li"),Vpe=a("strong"),HUo=o("sew-d"),UUo=o(" \u2014 "),_X=a("a"),JUo=o("SEWDForSequenceClassification"),YUo=o(" (SEW-D model)"),KUo=l(),pF=a("li"),Xpe=a("strong"),ZUo=o("unispeech"),eJo=o(" \u2014 "),uX=a("a"),oJo=o("UniSpeechForSequenceClassification"),rJo=o(" (UniSpeech model)"),tJo=l(),_F=a("li"),zpe=a("strong"),aJo=o("unispeech-sat"),nJo=o(" \u2014 "),bX=a("a"),sJo=o("UniSpeechSatForSequenceClassification"),lJo=o(" (UniSpeechSat model)"),iJo=l(),uF=a("li"),Wpe=a("strong"),dJo=o("wav2vec2"),cJo=o(" \u2014 "),vX=a("a"),fJo=o("Wav2Vec2ForSequenceClassification"),mJo=o(" (Wav2Vec2 model)"),gJo=l(),bF=a("li"),Qpe=a("strong"),hJo=o("wav2vec2-conformer"),pJo=o(" \u2014 "),FX=a("a"),_Jo=o("Wav2Vec2ConformerForSequenceClassification"),uJo=o(" (Wav2Vec2-Conformer model)"),bJo=l(),vF=a("li"),Hpe=a("strong"),vJo=o("wavlm"),FJo=o(" \u2014 "),TX=a("a"),TJo=o("WavLMForSequenceClassification"),MJo=o(" (WavLM model)"),EJo=l(),FF=a("p"),CJo=o("The model is set in evaluation mode by default using "),Upe=a("code"),wJo=o("model.eval()"),AJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),yJo=o("model.train()"),LJo=l(),F(TF.$$.fragment),Dqe=l(),md=a("h2"),MF=a("a"),Ype=a("span"),F(rL.$$.fragment),xJo=l(),Kpe=a("span"),$Jo=o("AutoModelForAudioFrameClassification"),Gqe=l(),Oo=a("div"),F(tL.$$.fragment),kJo=l(),gd=a("p"),SJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MX=a("a"),RJo=o("from_pretrained()"),PJo=o(" class method or the "),EX=a("a"),BJo=o("from_config()"),IJo=o(` class
method.`),qJo=l(),aL=a("p"),NJo=o("This class cannot be instantiated directly using "),Zpe=a("code"),jJo=o("__init__()"),DJo=o(" (throws an error)."),GJo=l(),bt=a("div"),F(nL.$$.fragment),OJo=l(),e_e=a("p"),VJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XJo=l(),hd=a("p"),zJo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),WJo=o("not"),QJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),HJo=o("from_pretrained()"),UJo=o(" to load the model weights."),JJo=l(),F(EF.$$.fragment),YJo=l(),fo=a("div"),F(sL.$$.fragment),KJo=l(),r_e=a("p"),ZJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eYo=l(),Oa=a("p"),oYo=o("The model class to instantiate is selected based on the "),t_e=a("code"),rYo=o("model_type"),tYo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(":"),iYo=l(),Kr=a("ul"),CF=a("li"),s_e=a("strong"),dYo=o("data2vec-audio"),cYo=o(" \u2014 "),wX=a("a"),fYo=o("Data2VecAudioForAudioFrameClassification"),mYo=o(" (Data2VecAudio model)"),gYo=l(),wF=a("li"),l_e=a("strong"),hYo=o("unispeech-sat"),pYo=o(" \u2014 "),AX=a("a"),_Yo=o("UniSpeechSatForAudioFrameClassification"),uYo=o(" (UniSpeechSat model)"),bYo=l(),AF=a("li"),i_e=a("strong"),vYo=o("wav2vec2"),FYo=o(" \u2014 "),yX=a("a"),TYo=o("Wav2Vec2ForAudioFrameClassification"),MYo=o(" (Wav2Vec2 model)"),EYo=l(),yF=a("li"),d_e=a("strong"),CYo=o("wav2vec2-conformer"),wYo=o(" \u2014 "),LX=a("a"),AYo=o("Wav2Vec2ConformerForAudioFrameClassification"),yYo=o(" (Wav2Vec2-Conformer model)"),LYo=l(),LF=a("li"),c_e=a("strong"),xYo=o("wavlm"),$Yo=o(" \u2014 "),xX=a("a"),kYo=o("WavLMForAudioFrameClassification"),SYo=o(" (WavLM model)"),RYo=l(),xF=a("p"),PYo=o("The model is set in evaluation mode by default using "),f_e=a("code"),BYo=o("model.eval()"),IYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),qYo=o("model.train()"),NYo=l(),F($F.$$.fragment),Oqe=l(),pd=a("h2"),kF=a("a"),g_e=a("span"),F(lL.$$.fragment),jYo=l(),h_e=a("span"),DYo=o("AutoModelForCTC"),Vqe=l(),Vo=a("div"),F(iL.$$.fragment),GYo=l(),_d=a("p"),OYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$X=a("a"),VYo=o("from_pretrained()"),XYo=o(" class method or the "),kX=a("a"),zYo=o("from_config()"),WYo=o(` class
method.`),QYo=l(),dL=a("p"),HYo=o("This class cannot be instantiated directly using "),p_e=a("code"),UYo=o("__init__()"),JYo=o(" (throws an error)."),YYo=l(),vt=a("div"),F(cL.$$.fragment),KYo=l(),__e=a("p"),ZYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eKo=l(),ud=a("p"),oKo=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),rKo=o("not"),tKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),aKo=o("from_pretrained()"),nKo=o(" to load the model weights."),sKo=l(),F(SF.$$.fragment),lKo=l(),mo=a("div"),F(fL.$$.fragment),iKo=l(),b_e=a("p"),dKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cKo=l(),Va=a("p"),fKo=o("The model class to instantiate is selected based on the "),v_e=a("code"),mKo=o("model_type"),gKo=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),hKo=o("pretrained_model_name_or_path"),pKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),_Ko=o("pretrained_model_name_or_path"),uKo=o(":"),bKo=l(),Re=a("ul"),RF=a("li"),M_e=a("strong"),vKo=o("data2vec-audio"),FKo=o(" \u2014 "),RX=a("a"),TKo=o("Data2VecAudioForCTC"),MKo=o(" (Data2VecAudio model)"),EKo=l(),PF=a("li"),E_e=a("strong"),CKo=o("hubert"),wKo=o(" \u2014 "),PX=a("a"),AKo=o("HubertForCTC"),yKo=o(" (Hubert model)"),LKo=l(),BF=a("li"),C_e=a("strong"),xKo=o("sew"),$Ko=o(" \u2014 "),BX=a("a"),kKo=o("SEWForCTC"),SKo=o(" (SEW model)"),RKo=l(),IF=a("li"),w_e=a("strong"),PKo=o("sew-d"),BKo=o(" \u2014 "),IX=a("a"),IKo=o("SEWDForCTC"),qKo=o(" (SEW-D model)"),NKo=l(),qF=a("li"),A_e=a("strong"),jKo=o("unispeech"),DKo=o(" \u2014 "),qX=a("a"),GKo=o("UniSpeechForCTC"),OKo=o(" (UniSpeech model)"),VKo=l(),NF=a("li"),y_e=a("strong"),XKo=o("unispeech-sat"),zKo=o(" \u2014 "),NX=a("a"),WKo=o("UniSpeechSatForCTC"),QKo=o(" (UniSpeechSat model)"),HKo=l(),jF=a("li"),L_e=a("strong"),UKo=o("wav2vec2"),JKo=o(" \u2014 "),jX=a("a"),YKo=o("Wav2Vec2ForCTC"),KKo=o(" (Wav2Vec2 model)"),ZKo=l(),DF=a("li"),x_e=a("strong"),eZo=o("wav2vec2-conformer"),oZo=o(" \u2014 "),DX=a("a"),rZo=o("Wav2Vec2ConformerForCTC"),tZo=o(" (Wav2Vec2-Conformer model)"),aZo=l(),GF=a("li"),$_e=a("strong"),nZo=o("wavlm"),sZo=o(" \u2014 "),GX=a("a"),lZo=o("WavLMForCTC"),iZo=o(" (WavLM model)"),dZo=l(),OF=a("p"),cZo=o("The model is set in evaluation mode by default using "),k_e=a("code"),fZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),gZo=o("model.train()"),hZo=l(),F(VF.$$.fragment),Xqe=l(),bd=a("h2"),XF=a("a"),R_e=a("span"),F(mL.$$.fragment),pZo=l(),P_e=a("span"),_Zo=o("AutoModelForSpeechSeq2Seq"),zqe=l(),Xo=a("div"),F(gL.$$.fragment),uZo=l(),vd=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OX=a("a"),vZo=o("from_pretrained()"),FZo=o(" class method or the "),VX=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),hL=a("p"),CZo=o("This class cannot be instantiated directly using "),B_e=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),Ft=a("div"),F(pL.$$.fragment),LZo=l(),I_e=a("p"),xZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Zo=l(),Fd=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),PZo=o("from_pretrained()"),BZo=o(" to load the model weights."),IZo=l(),F(zF.$$.fragment),qZo=l(),go=a("div"),F(_L.$$.fragment),NZo=l(),N_e=a("p"),jZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DZo=l(),Xa=a("p"),GZo=o("The model class to instantiate is selected based on the "),j_e=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(":"),HZo=l(),uL=a("ul"),WF=a("li"),O_e=a("strong"),UZo=o("speech-encoder-decoder"),JZo=o(" \u2014 "),zX=a("a"),YZo=o("SpeechEncoderDecoderModel"),KZo=o(" (Speech Encoder decoder model)"),ZZo=l(),QF=a("li"),V_e=a("strong"),eer=o("speech_to_text"),oer=o(" \u2014 "),WX=a("a"),rer=o("Speech2TextForConditionalGeneration"),ter=o(" (Speech2Text model)"),aer=l(),HF=a("p"),ner=o("The model is set in evaluation mode by default using "),X_e=a("code"),ser=o("model.eval()"),ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),ier=o("model.train()"),der=l(),F(UF.$$.fragment),Wqe=l(),Td=a("h2"),JF=a("a"),W_e=a("span"),F(bL.$$.fragment),cer=l(),Q_e=a("span"),fer=o("AutoModelForAudioXVector"),Qqe=l(),zo=a("div"),F(vL.$$.fragment),mer=l(),Md=a("p"),ger=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QX=a("a"),her=o("from_pretrained()"),per=o(" class method or the "),HX=a("a"),_er=o("from_config()"),uer=o(` class
method.`),ber=l(),FL=a("p"),ver=o("This class cannot be instantiated directly using "),H_e=a("code"),Fer=o("__init__()"),Ter=o(" (throws an error)."),Mer=l(),Tt=a("div"),F(TL.$$.fragment),Eer=l(),U_e=a("p"),Cer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wer=l(),Ed=a("p"),Aer=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),yer=o("not"),Ler=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),xer=o("from_pretrained()"),$er=o(" to load the model weights."),ker=l(),F(YF.$$.fragment),Ser=l(),ho=a("div"),F(ML.$$.fragment),Rer=l(),Y_e=a("p"),Per=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ber=l(),za=a("p"),Ier=o("The model class to instantiate is selected based on the "),K_e=a("code"),qer=o("model_type"),Ner=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(":"),Ver=l(),Zr=a("ul"),KF=a("li"),oue=a("strong"),Xer=o("data2vec-audio"),zer=o(" \u2014 "),JX=a("a"),Wer=o("Data2VecAudioForXVector"),Qer=o(" (Data2VecAudio model)"),Her=l(),ZF=a("li"),rue=a("strong"),Uer=o("unispeech-sat"),Jer=o(" \u2014 "),YX=a("a"),Yer=o("UniSpeechSatForXVector"),Ker=o(" (UniSpeechSat model)"),Zer=l(),eT=a("li"),tue=a("strong"),eor=o("wav2vec2"),oor=o(" \u2014 "),KX=a("a"),ror=o("Wav2Vec2ForXVector"),tor=o(" (Wav2Vec2 model)"),aor=l(),oT=a("li"),aue=a("strong"),nor=o("wav2vec2-conformer"),sor=o(" \u2014 "),ZX=a("a"),lor=o("Wav2Vec2ConformerForXVector"),ior=o(" (Wav2Vec2-Conformer model)"),dor=l(),rT=a("li"),nue=a("strong"),cor=o("wavlm"),mor=o(" \u2014 "),ez=a("a"),gor=o("WavLMForXVector"),hor=o(" (WavLM model)"),por=l(),tT=a("p"),_or=o("The model is set in evaluation mode by default using "),sue=a("code"),uor=o("model.eval()"),bor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),vor=o("model.train()"),For=l(),F(aT.$$.fragment),Hqe=l(),Cd=a("h2"),nT=a("a"),iue=a("span"),F(EL.$$.fragment),Tor=l(),due=a("span"),Mor=o("AutoModelForMaskedImageModeling"),Uqe=l(),Wo=a("div"),F(CL.$$.fragment),Eor=l(),wd=a("p"),Cor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oz=a("a"),wor=o("from_pretrained()"),Aor=o(" class method or the "),rz=a("a"),yor=o("from_config()"),Lor=o(` class
method.`),xor=l(),wL=a("p"),$or=o("This class cannot be instantiated directly using "),cue=a("code"),kor=o("__init__()"),Sor=o(" (throws an error)."),Ror=l(),Mt=a("div"),F(AL.$$.fragment),Por=l(),fue=a("p"),Bor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ior=l(),Ad=a("p"),qor=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),Nor=o("not"),jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),Dor=o("from_pretrained()"),Gor=o(" to load the model weights."),Oor=l(),F(sT.$$.fragment),Vor=l(),po=a("div"),F(yL.$$.fragment),Xor=l(),gue=a("p"),zor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wor=l(),Wa=a("p"),Qor=o("The model class to instantiate is selected based on the "),hue=a("code"),Hor=o("model_type"),Uor=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(":"),err=l(),yd=a("ul"),lT=a("li"),uue=a("strong"),orr=o("deit"),rrr=o(" \u2014 "),az=a("a"),trr=o("DeiTForMaskedImageModeling"),arr=o(" (DeiT model)"),nrr=l(),iT=a("li"),bue=a("strong"),srr=o("swin"),lrr=o(" \u2014 "),nz=a("a"),irr=o("SwinForMaskedImageModeling"),drr=o(" (Swin model)"),crr=l(),dT=a("li"),vue=a("strong"),frr=o("vit"),mrr=o(" \u2014 "),sz=a("a"),grr=o("ViTForMaskedImageModeling"),hrr=o(" (ViT model)"),prr=l(),cT=a("p"),_rr=o("The model is set in evaluation mode by default using "),Fue=a("code"),urr=o("model.eval()"),brr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),vrr=o("model.train()"),Frr=l(),F(fT.$$.fragment),Jqe=l(),Ld=a("h2"),mT=a("a"),Mue=a("span"),F(LL.$$.fragment),Trr=l(),Eue=a("span"),Mrr=o("AutoModelForObjectDetection"),Yqe=l(),Qo=a("div"),F(xL.$$.fragment),Err=l(),xd=a("p"),Crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lz=a("a"),wrr=o("from_pretrained()"),Arr=o(" class method or the "),iz=a("a"),yrr=o("from_config()"),Lrr=o(` class
method.`),xrr=l(),$L=a("p"),$rr=o("This class cannot be instantiated directly using "),Cue=a("code"),krr=o("__init__()"),Srr=o(" (throws an error)."),Rrr=l(),Et=a("div"),F(kL.$$.fragment),Prr=l(),wue=a("p"),Brr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Irr=l(),$d=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),Nrr=o("not"),jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),Drr=o("from_pretrained()"),Grr=o(" to load the model weights."),Orr=l(),F(gT.$$.fragment),Vrr=l(),_o=a("div"),F(SL.$$.fragment),Xrr=l(),yue=a("p"),zrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wrr=l(),Qa=a("p"),Qrr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Hrr=o("model_type"),Urr=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(":"),etr=l(),RL=a("ul"),hT=a("li"),kue=a("strong"),otr=o("detr"),rtr=o(" \u2014 "),cz=a("a"),ttr=o("DetrForObjectDetection"),atr=o(" (DETR model)"),ntr=l(),pT=a("li"),Sue=a("strong"),str=o("yolos"),ltr=o(" \u2014 "),fz=a("a"),itr=o("YolosForObjectDetection"),dtr=o(" (YOLOS model)"),ctr=l(),_T=a("p"),ftr=o("The model is set in evaluation mode by default using "),Rue=a("code"),mtr=o("model.eval()"),gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),htr=o("model.train()"),ptr=l(),F(uT.$$.fragment),Kqe=l(),kd=a("h2"),bT=a("a"),Bue=a("span"),F(PL.$$.fragment),_tr=l(),Iue=a("span"),utr=o("AutoModelForImageSegmentation"),Zqe=l(),Ho=a("div"),F(BL.$$.fragment),btr=l(),Sd=a("p"),vtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mz=a("a"),Ftr=o("from_pretrained()"),Ttr=o(" class method or the "),gz=a("a"),Mtr=o("from_config()"),Etr=o(` class
method.`),Ctr=l(),IL=a("p"),wtr=o("This class cannot be instantiated directly using "),que=a("code"),Atr=o("__init__()"),ytr=o(" (throws an error)."),Ltr=l(),Ct=a("div"),F(qL.$$.fragment),xtr=l(),Nue=a("p"),$tr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ktr=l(),Rd=a("p"),Str=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),Rtr=o("not"),Ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Btr=o("from_pretrained()"),Itr=o(" to load the model weights."),qtr=l(),F(vT.$$.fragment),Ntr=l(),uo=a("div"),F(NL.$$.fragment),jtr=l(),Due=a("p"),Dtr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gtr=l(),Ha=a("p"),Otr=o("The model class to instantiate is selected based on the "),Gue=a("code"),Vtr=o("model_type"),Xtr=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),ztr=o("pretrained_model_name_or_path"),Wtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),Qtr=o("pretrained_model_name_or_path"),Htr=o(":"),Utr=l(),Xue=a("ul"),FT=a("li"),zue=a("strong"),Jtr=o("detr"),Ytr=o(" \u2014 "),pz=a("a"),Ktr=o("DetrForSegmentation"),Ztr=o(" (DETR model)"),ear=l(),TT=a("p"),oar=o("The model is set in evaluation mode by default using "),Wue=a("code"),rar=o("model.eval()"),tar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),aar=o("model.train()"),nar=l(),F(MT.$$.fragment),eNe=l(),Pd=a("h2"),ET=a("a"),Hue=a("span"),F(jL.$$.fragment),sar=l(),Uue=a("span"),lar=o("AutoModelForSemanticSegmentation"),oNe=l(),Uo=a("div"),F(DL.$$.fragment),iar=l(),Bd=a("p"),dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_z=a("a"),car=o("from_pretrained()"),far=o(" class method or the "),uz=a("a"),mar=o("from_config()"),gar=o(` class
method.`),har=l(),GL=a("p"),par=o("This class cannot be instantiated directly using "),Jue=a("code"),_ar=o("__init__()"),uar=o(" (throws an error)."),bar=l(),wt=a("div"),F(OL.$$.fragment),Far=l(),Yue=a("p"),Tar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Mar=l(),Id=a("p"),Ear=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),Car=o("not"),war=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),Aar=o("from_pretrained()"),yar=o(" to load the model weights."),Lar=l(),F(CT.$$.fragment),xar=l(),bo=a("div"),F(VL.$$.fragment),$ar=l(),Zue=a("p"),kar=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Sar=l(),Ua=a("p"),Rar=o("The model class to instantiate is selected based on the "),e2e=a("code"),Par=o("model_type"),Bar=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),Iar=o("pretrained_model_name_or_path"),qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),Nar=o("pretrained_model_name_or_path"),jar=o(":"),Dar=l(),Ja=a("ul"),wT=a("li"),t2e=a("strong"),Gar=o("beit"),Oar=o(" \u2014 "),vz=a("a"),Var=o("BeitForSemanticSegmentation"),Xar=o(" (BEiT model)"),zar=l(),AT=a("li"),a2e=a("strong"),War=o("data2vec-vision"),Qar=o(" \u2014 "),Fz=a("a"),Har=o("Data2VecVisionForSemanticSegmentation"),Uar=o(" (Data2VecVision model)"),Jar=l(),yT=a("li"),n2e=a("strong"),Yar=o("dpt"),Kar=o(" \u2014 "),Tz=a("a"),Zar=o("DPTForSemanticSegmentation"),enr=o(" (DPT model)"),onr=l(),LT=a("li"),s2e=a("strong"),rnr=o("segformer"),tnr=o(" \u2014 "),Mz=a("a"),anr=o("SegformerForSemanticSegmentation"),nnr=o(" (SegFormer model)"),snr=l(),xT=a("p"),lnr=o("The model is set in evaluation mode by default using "),l2e=a("code"),inr=o("model.eval()"),dnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),cnr=o("model.train()"),fnr=l(),F($T.$$.fragment),rNe=l(),qd=a("h2"),kT=a("a"),d2e=a("span"),F(XL.$$.fragment),mnr=l(),c2e=a("span"),gnr=o("AutoModelForInstanceSegmentation"),tNe=l(),Jo=a("div"),F(zL.$$.fragment),hnr=l(),Nd=a("p"),pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ez=a("a"),_nr=o("from_pretrained()"),unr=o(" class method or the "),Cz=a("a"),bnr=o("from_config()"),vnr=o(` class
method.`),Fnr=l(),WL=a("p"),Tnr=o("This class cannot be instantiated directly using "),f2e=a("code"),Mnr=o("__init__()"),Enr=o(" (throws an error)."),Cnr=l(),At=a("div"),F(QL.$$.fragment),wnr=l(),m2e=a("p"),Anr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ynr=l(),jd=a("p"),Lnr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),xnr=o("not"),$nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),knr=o("from_pretrained()"),Snr=o(" to load the model weights."),Rnr=l(),F(ST.$$.fragment),Pnr=l(),vo=a("div"),F(HL.$$.fragment),Bnr=l(),h2e=a("p"),Inr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),qnr=l(),Ya=a("p"),Nnr=o("The model class to instantiate is selected based on the "),p2e=a("code"),jnr=o("model_type"),Dnr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(":"),znr=l(),b2e=a("ul"),RT=a("li"),v2e=a("strong"),Wnr=o("maskformer"),Qnr=o(" \u2014 "),Az=a("a"),Hnr=o("MaskFormerForInstanceSegmentation"),Unr=o(" (MaskFormer model)"),Jnr=l(),PT=a("p"),Ynr=o("The model is set in evaluation mode by default using "),F2e=a("code"),Knr=o("model.eval()"),Znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),esr=o("model.train()"),osr=l(),F(BT.$$.fragment),aNe=l(),Dd=a("h2"),IT=a("a"),M2e=a("span"),F(UL.$$.fragment),rsr=l(),E2e=a("span"),tsr=o("TFAutoModel"),nNe=l(),Yo=a("div"),F(JL.$$.fragment),asr=l(),Gd=a("p"),nsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yz=a("a"),ssr=o("from_pretrained()"),lsr=o(" class method or the "),Lz=a("a"),isr=o("from_config()"),dsr=o(` class
method.`),csr=l(),YL=a("p"),fsr=o("This class cannot be instantiated directly using "),C2e=a("code"),msr=o("__init__()"),gsr=o(" (throws an error)."),hsr=l(),yt=a("div"),F(KL.$$.fragment),psr=l(),w2e=a("p"),_sr=o("Instantiates one of the base model classes of the library from a configuration."),usr=l(),Od=a("p"),bsr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),vsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Tsr=o("from_pretrained()"),Msr=o(" to load the model weights."),Esr=l(),F(qT.$$.fragment),Csr=l(),wr=a("div"),F(ZL.$$.fragment),wsr=l(),y2e=a("p"),Asr=o("Instantiate one of the base model classes of the library from a pretrained model."),ysr=l(),Ka=a("p"),Lsr=o("The model class to instantiate is selected based on the "),L2e=a("code"),xsr=o("model_type"),$sr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(":"),Bsr=l(),q=a("ul"),NT=a("li"),k2e=a("strong"),Isr=o("albert"),qsr=o(" \u2014 "),$z=a("a"),Nsr=o("TFAlbertModel"),jsr=o(" (ALBERT model)"),Dsr=l(),jT=a("li"),S2e=a("strong"),Gsr=o("bart"),Osr=o(" \u2014 "),kz=a("a"),Vsr=o("TFBartModel"),Xsr=o(" (BART model)"),zsr=l(),DT=a("li"),R2e=a("strong"),Wsr=o("bert"),Qsr=o(" \u2014 "),Sz=a("a"),Hsr=o("TFBertModel"),Usr=o(" (BERT model)"),Jsr=l(),GT=a("li"),P2e=a("strong"),Ysr=o("blenderbot"),Ksr=o(" \u2014 "),Rz=a("a"),Zsr=o("TFBlenderbotModel"),elr=o(" (Blenderbot model)"),olr=l(),OT=a("li"),B2e=a("strong"),rlr=o("blenderbot-small"),tlr=o(" \u2014 "),Pz=a("a"),alr=o("TFBlenderbotSmallModel"),nlr=o(" (BlenderbotSmall model)"),slr=l(),VT=a("li"),I2e=a("strong"),llr=o("camembert"),ilr=o(" \u2014 "),Bz=a("a"),dlr=o("TFCamembertModel"),clr=o(" (CamemBERT model)"),flr=l(),XT=a("li"),q2e=a("strong"),mlr=o("clip"),glr=o(" \u2014 "),Iz=a("a"),hlr=o("TFCLIPModel"),plr=o(" (CLIP model)"),_lr=l(),zT=a("li"),N2e=a("strong"),ulr=o("convbert"),blr=o(" \u2014 "),qz=a("a"),vlr=o("TFConvBertModel"),Flr=o(" (ConvBERT model)"),Tlr=l(),WT=a("li"),j2e=a("strong"),Mlr=o("convnext"),Elr=o(" \u2014 "),Nz=a("a"),Clr=o("TFConvNextModel"),wlr=o(" (ConvNext model)"),Alr=l(),QT=a("li"),D2e=a("strong"),ylr=o("ctrl"),Llr=o(" \u2014 "),jz=a("a"),xlr=o("TFCTRLModel"),$lr=o(" (CTRL model)"),klr=l(),HT=a("li"),G2e=a("strong"),Slr=o("data2vec-vision"),Rlr=o(" \u2014 "),Dz=a("a"),Plr=o("TFData2VecVisionModel"),Blr=o(" (Data2VecVision model)"),Ilr=l(),UT=a("li"),O2e=a("strong"),qlr=o("deberta"),Nlr=o(" \u2014 "),Gz=a("a"),jlr=o("TFDebertaModel"),Dlr=o(" (DeBERTa model)"),Glr=l(),JT=a("li"),V2e=a("strong"),Olr=o("deberta-v2"),Vlr=o(" \u2014 "),Oz=a("a"),Xlr=o("TFDebertaV2Model"),zlr=o(" (DeBERTa-v2 model)"),Wlr=l(),YT=a("li"),X2e=a("strong"),Qlr=o("distilbert"),Hlr=o(" \u2014 "),Vz=a("a"),Ulr=o("TFDistilBertModel"),Jlr=o(" (DistilBERT model)"),Ylr=l(),KT=a("li"),z2e=a("strong"),Klr=o("dpr"),Zlr=o(" \u2014 "),Xz=a("a"),eir=o("TFDPRQuestionEncoder"),oir=o(" (DPR model)"),rir=l(),ZT=a("li"),W2e=a("strong"),tir=o("electra"),air=o(" \u2014 "),zz=a("a"),nir=o("TFElectraModel"),sir=o(" (ELECTRA model)"),lir=l(),eM=a("li"),Q2e=a("strong"),iir=o("flaubert"),dir=o(" \u2014 "),Wz=a("a"),cir=o("TFFlaubertModel"),fir=o(" (FlauBERT model)"),mir=l(),Bs=a("li"),H2e=a("strong"),gir=o("funnel"),hir=o(" \u2014 "),Qz=a("a"),pir=o("TFFunnelModel"),_ir=o(" or "),Hz=a("a"),uir=o("TFFunnelBaseModel"),bir=o(" (Funnel Transformer model)"),vir=l(),oM=a("li"),U2e=a("strong"),Fir=o("gpt2"),Tir=o(" \u2014 "),Uz=a("a"),Mir=o("TFGPT2Model"),Eir=o(" (OpenAI GPT-2 model)"),Cir=l(),rM=a("li"),J2e=a("strong"),wir=o("gptj"),Air=o(" \u2014 "),Jz=a("a"),yir=o("TFGPTJModel"),Lir=o(" (GPT-J model)"),xir=l(),tM=a("li"),Y2e=a("strong"),$ir=o("hubert"),kir=o(" \u2014 "),Yz=a("a"),Sir=o("TFHubertModel"),Rir=o(" (Hubert model)"),Pir=l(),aM=a("li"),K2e=a("strong"),Bir=o("layoutlm"),Iir=o(" \u2014 "),Kz=a("a"),qir=o("TFLayoutLMModel"),Nir=o(" (LayoutLM model)"),jir=l(),nM=a("li"),Z2e=a("strong"),Dir=o("led"),Gir=o(" \u2014 "),Zz=a("a"),Oir=o("TFLEDModel"),Vir=o(" (LED model)"),Xir=l(),sM=a("li"),e1e=a("strong"),zir=o("longformer"),Wir=o(" \u2014 "),eW=a("a"),Qir=o("TFLongformerModel"),Hir=o(" (Longformer model)"),Uir=l(),lM=a("li"),o1e=a("strong"),Jir=o("lxmert"),Yir=o(" \u2014 "),oW=a("a"),Kir=o("TFLxmertModel"),Zir=o(" (LXMERT model)"),edr=l(),iM=a("li"),r1e=a("strong"),odr=o("marian"),rdr=o(" \u2014 "),rW=a("a"),tdr=o("TFMarianModel"),adr=o(" (Marian model)"),ndr=l(),dM=a("li"),t1e=a("strong"),sdr=o("mbart"),ldr=o(" \u2014 "),tW=a("a"),idr=o("TFMBartModel"),ddr=o(" (mBART model)"),cdr=l(),cM=a("li"),a1e=a("strong"),fdr=o("mobilebert"),mdr=o(" \u2014 "),aW=a("a"),gdr=o("TFMobileBertModel"),hdr=o(" (MobileBERT model)"),pdr=l(),fM=a("li"),n1e=a("strong"),_dr=o("mpnet"),udr=o(" \u2014 "),nW=a("a"),bdr=o("TFMPNetModel"),vdr=o(" (MPNet model)"),Fdr=l(),mM=a("li"),s1e=a("strong"),Tdr=o("mt5"),Mdr=o(" \u2014 "),sW=a("a"),Edr=o("TFMT5Model"),Cdr=o(" (mT5 model)"),wdr=l(),gM=a("li"),l1e=a("strong"),Adr=o("openai-gpt"),ydr=o(" \u2014 "),lW=a("a"),Ldr=o("TFOpenAIGPTModel"),xdr=o(" (OpenAI GPT model)"),$dr=l(),hM=a("li"),i1e=a("strong"),kdr=o("opt"),Sdr=o(" \u2014 "),iW=a("a"),Rdr=o("TFOPTModel"),Pdr=o(" (OPT model)"),Bdr=l(),pM=a("li"),d1e=a("strong"),Idr=o("pegasus"),qdr=o(" \u2014 "),dW=a("a"),Ndr=o("TFPegasusModel"),jdr=o(" (Pegasus model)"),Ddr=l(),_M=a("li"),c1e=a("strong"),Gdr=o("rembert"),Odr=o(" \u2014 "),cW=a("a"),Vdr=o("TFRemBertModel"),Xdr=o(" (RemBERT model)"),zdr=l(),uM=a("li"),f1e=a("strong"),Wdr=o("roberta"),Qdr=o(" \u2014 "),fW=a("a"),Hdr=o("TFRobertaModel"),Udr=o(" (RoBERTa model)"),Jdr=l(),bM=a("li"),m1e=a("strong"),Ydr=o("roformer"),Kdr=o(" \u2014 "),mW=a("a"),Zdr=o("TFRoFormerModel"),ecr=o(" (RoFormer model)"),ocr=l(),vM=a("li"),g1e=a("strong"),rcr=o("speech_to_text"),tcr=o(" \u2014 "),gW=a("a"),acr=o("TFSpeech2TextModel"),ncr=o(" (Speech2Text model)"),scr=l(),FM=a("li"),h1e=a("strong"),lcr=o("swin"),icr=o(" \u2014 "),hW=a("a"),dcr=o("TFSwinModel"),ccr=o(" (Swin model)"),fcr=l(),TM=a("li"),p1e=a("strong"),mcr=o("t5"),gcr=o(" \u2014 "),pW=a("a"),hcr=o("TFT5Model"),pcr=o(" (T5 model)"),_cr=l(),MM=a("li"),_1e=a("strong"),ucr=o("tapas"),bcr=o(" \u2014 "),_W=a("a"),vcr=o("TFTapasModel"),Fcr=o(" (TAPAS model)"),Tcr=l(),EM=a("li"),u1e=a("strong"),Mcr=o("transfo-xl"),Ecr=o(" \u2014 "),uW=a("a"),Ccr=o("TFTransfoXLModel"),wcr=o(" (Transformer-XL model)"),Acr=l(),CM=a("li"),b1e=a("strong"),ycr=o("vit"),Lcr=o(" \u2014 "),bW=a("a"),xcr=o("TFViTModel"),$cr=o(" (ViT model)"),kcr=l(),wM=a("li"),v1e=a("strong"),Scr=o("vit_mae"),Rcr=o(" \u2014 "),vW=a("a"),Pcr=o("TFViTMAEModel"),Bcr=o(" (ViTMAE model)"),Icr=l(),AM=a("li"),F1e=a("strong"),qcr=o("wav2vec2"),Ncr=o(" \u2014 "),FW=a("a"),jcr=o("TFWav2Vec2Model"),Dcr=o(" (Wav2Vec2 model)"),Gcr=l(),yM=a("li"),T1e=a("strong"),Ocr=o("xlm"),Vcr=o(" \u2014 "),TW=a("a"),Xcr=o("TFXLMModel"),zcr=o(" (XLM model)"),Wcr=l(),LM=a("li"),M1e=a("strong"),Qcr=o("xlm-roberta"),Hcr=o(" \u2014 "),MW=a("a"),Ucr=o("TFXLMRobertaModel"),Jcr=o(" (XLM-RoBERTa model)"),Ycr=l(),xM=a("li"),E1e=a("strong"),Kcr=o("xlnet"),Zcr=o(" \u2014 "),EW=a("a"),efr=o("TFXLNetModel"),ofr=o(" (XLNet model)"),rfr=l(),F($M.$$.fragment),sNe=l(),Vd=a("h2"),kM=a("a"),C1e=a("span"),F(e8.$$.fragment),tfr=l(),w1e=a("span"),afr=o("TFAutoModelForPreTraining"),lNe=l(),Ko=a("div"),F(o8.$$.fragment),nfr=l(),Xd=a("p"),sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=a("a"),lfr=o("from_pretrained()"),ifr=o(" class method or the "),wW=a("a"),dfr=o("from_config()"),cfr=o(` class
method.`),ffr=l(),r8=a("p"),mfr=o("This class cannot be instantiated directly using "),A1e=a("code"),gfr=o("__init__()"),hfr=o(" (throws an error)."),pfr=l(),Lt=a("div"),F(t8.$$.fragment),_fr=l(),y1e=a("p"),ufr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bfr=l(),zd=a("p"),vfr=o(`Note:
Loading a model from its configuration file does `),L1e=a("strong"),Ffr=o("not"),Tfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" to load the model weights."),Cfr=l(),F(SM.$$.fragment),wfr=l(),Ar=a("div"),F(a8.$$.fragment),Afr=l(),x1e=a("p"),yfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lfr=l(),Za=a("p"),xfr=o("The model class to instantiate is selected based on the "),$1e=a("code"),$fr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),Sfr=o("pretrained_model_name_or_path"),Rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),Pfr=o("pretrained_model_name_or_path"),Bfr=o(":"),Ifr=l(),se=a("ul"),RM=a("li"),R1e=a("strong"),qfr=o("albert"),Nfr=o(" \u2014 "),yW=a("a"),jfr=o("TFAlbertForPreTraining"),Dfr=o(" (ALBERT model)"),Gfr=l(),PM=a("li"),P1e=a("strong"),Ofr=o("bart"),Vfr=o(" \u2014 "),LW=a("a"),Xfr=o("TFBartForConditionalGeneration"),zfr=o(" (BART model)"),Wfr=l(),BM=a("li"),B1e=a("strong"),Qfr=o("bert"),Hfr=o(" \u2014 "),xW=a("a"),Ufr=o("TFBertForPreTraining"),Jfr=o(" (BERT model)"),Yfr=l(),IM=a("li"),I1e=a("strong"),Kfr=o("camembert"),Zfr=o(" \u2014 "),$W=a("a"),emr=o("TFCamembertForMaskedLM"),omr=o(" (CamemBERT model)"),rmr=l(),qM=a("li"),q1e=a("strong"),tmr=o("ctrl"),amr=o(" \u2014 "),kW=a("a"),nmr=o("TFCTRLLMHeadModel"),smr=o(" (CTRL model)"),lmr=l(),NM=a("li"),N1e=a("strong"),imr=o("distilbert"),dmr=o(" \u2014 "),SW=a("a"),cmr=o("TFDistilBertForMaskedLM"),fmr=o(" (DistilBERT model)"),mmr=l(),jM=a("li"),j1e=a("strong"),gmr=o("electra"),hmr=o(" \u2014 "),RW=a("a"),pmr=o("TFElectraForPreTraining"),_mr=o(" (ELECTRA model)"),umr=l(),DM=a("li"),D1e=a("strong"),bmr=o("flaubert"),vmr=o(" \u2014 "),PW=a("a"),Fmr=o("TFFlaubertWithLMHeadModel"),Tmr=o(" (FlauBERT model)"),Mmr=l(),GM=a("li"),G1e=a("strong"),Emr=o("funnel"),Cmr=o(" \u2014 "),BW=a("a"),wmr=o("TFFunnelForPreTraining"),Amr=o(" (Funnel Transformer model)"),ymr=l(),OM=a("li"),O1e=a("strong"),Lmr=o("gpt2"),xmr=o(" \u2014 "),IW=a("a"),$mr=o("TFGPT2LMHeadModel"),kmr=o(" (OpenAI GPT-2 model)"),Smr=l(),VM=a("li"),V1e=a("strong"),Rmr=o("layoutlm"),Pmr=o(" \u2014 "),qW=a("a"),Bmr=o("TFLayoutLMForMaskedLM"),Imr=o(" (LayoutLM model)"),qmr=l(),XM=a("li"),X1e=a("strong"),Nmr=o("lxmert"),jmr=o(" \u2014 "),NW=a("a"),Dmr=o("TFLxmertForPreTraining"),Gmr=o(" (LXMERT model)"),Omr=l(),zM=a("li"),z1e=a("strong"),Vmr=o("mobilebert"),Xmr=o(" \u2014 "),jW=a("a"),zmr=o("TFMobileBertForPreTraining"),Wmr=o(" (MobileBERT model)"),Qmr=l(),WM=a("li"),W1e=a("strong"),Hmr=o("mpnet"),Umr=o(" \u2014 "),DW=a("a"),Jmr=o("TFMPNetForMaskedLM"),Ymr=o(" (MPNet model)"),Kmr=l(),QM=a("li"),Q1e=a("strong"),Zmr=o("openai-gpt"),egr=o(" \u2014 "),GW=a("a"),ogr=o("TFOpenAIGPTLMHeadModel"),rgr=o(" (OpenAI GPT model)"),tgr=l(),HM=a("li"),H1e=a("strong"),agr=o("roberta"),ngr=o(" \u2014 "),OW=a("a"),sgr=o("TFRobertaForMaskedLM"),lgr=o(" (RoBERTa model)"),igr=l(),UM=a("li"),U1e=a("strong"),dgr=o("t5"),cgr=o(" \u2014 "),VW=a("a"),fgr=o("TFT5ForConditionalGeneration"),mgr=o(" (T5 model)"),ggr=l(),JM=a("li"),J1e=a("strong"),hgr=o("tapas"),pgr=o(" \u2014 "),XW=a("a"),_gr=o("TFTapasForMaskedLM"),ugr=o(" (TAPAS model)"),bgr=l(),YM=a("li"),Y1e=a("strong"),vgr=o("transfo-xl"),Fgr=o(" \u2014 "),zW=a("a"),Tgr=o("TFTransfoXLLMHeadModel"),Mgr=o(" (Transformer-XL model)"),Egr=l(),KM=a("li"),K1e=a("strong"),Cgr=o("vit_mae"),wgr=o(" \u2014 "),WW=a("a"),Agr=o("TFViTMAEForPreTraining"),ygr=o(" (ViTMAE model)"),Lgr=l(),ZM=a("li"),Z1e=a("strong"),xgr=o("xlm"),$gr=o(" \u2014 "),QW=a("a"),kgr=o("TFXLMWithLMHeadModel"),Sgr=o(" (XLM model)"),Rgr=l(),e4=a("li"),e7e=a("strong"),Pgr=o("xlm-roberta"),Bgr=o(" \u2014 "),HW=a("a"),Igr=o("TFXLMRobertaForMaskedLM"),qgr=o(" (XLM-RoBERTa model)"),Ngr=l(),o4=a("li"),o7e=a("strong"),jgr=o("xlnet"),Dgr=o(" \u2014 "),UW=a("a"),Ggr=o("TFXLNetLMHeadModel"),Ogr=o(" (XLNet model)"),Vgr=l(),F(r4.$$.fragment),iNe=l(),Wd=a("h2"),t4=a("a"),r7e=a("span"),F(n8.$$.fragment),Xgr=l(),t7e=a("span"),zgr=o("TFAutoModelForCausalLM"),dNe=l(),Zo=a("div"),F(s8.$$.fragment),Wgr=l(),Qd=a("p"),Qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JW=a("a"),Hgr=o("from_pretrained()"),Ugr=o(" class method or the "),YW=a("a"),Jgr=o("from_config()"),Ygr=o(` class
method.`),Kgr=l(),l8=a("p"),Zgr=o("This class cannot be instantiated directly using "),a7e=a("code"),ehr=o("__init__()"),ohr=o(" (throws an error)."),rhr=l(),xt=a("div"),F(i8.$$.fragment),thr=l(),n7e=a("p"),ahr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nhr=l(),Hd=a("p"),shr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),lhr=o("not"),ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),dhr=o("from_pretrained()"),chr=o(" to load the model weights."),fhr=l(),F(a4.$$.fragment),mhr=l(),yr=a("div"),F(d8.$$.fragment),ghr=l(),l7e=a("p"),hhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),phr=l(),en=a("p"),_hr=o("The model class to instantiate is selected based on the "),i7e=a("code"),uhr=o("model_type"),bhr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),vhr=o("pretrained_model_name_or_path"),Fhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),Thr=o("pretrained_model_name_or_path"),Mhr=o(":"),Ehr=l(),Te=a("ul"),n4=a("li"),f7e=a("strong"),Chr=o("bert"),whr=o(" \u2014 "),ZW=a("a"),Ahr=o("TFBertLMHeadModel"),yhr=o(" (BERT model)"),Lhr=l(),s4=a("li"),m7e=a("strong"),xhr=o("camembert"),$hr=o(" \u2014 "),eQ=a("a"),khr=o("TFCamembertForCausalLM"),Shr=o(" (CamemBERT model)"),Rhr=l(),l4=a("li"),g7e=a("strong"),Phr=o("ctrl"),Bhr=o(" \u2014 "),oQ=a("a"),Ihr=o("TFCTRLLMHeadModel"),qhr=o(" (CTRL model)"),Nhr=l(),i4=a("li"),h7e=a("strong"),jhr=o("gpt2"),Dhr=o(" \u2014 "),rQ=a("a"),Ghr=o("TFGPT2LMHeadModel"),Ohr=o(" (OpenAI GPT-2 model)"),Vhr=l(),d4=a("li"),p7e=a("strong"),Xhr=o("gptj"),zhr=o(" \u2014 "),tQ=a("a"),Whr=o("TFGPTJForCausalLM"),Qhr=o(" (GPT-J model)"),Hhr=l(),c4=a("li"),_7e=a("strong"),Uhr=o("openai-gpt"),Jhr=o(" \u2014 "),aQ=a("a"),Yhr=o("TFOpenAIGPTLMHeadModel"),Khr=o(" (OpenAI GPT model)"),Zhr=l(),f4=a("li"),u7e=a("strong"),epr=o("opt"),opr=o(" \u2014 "),b7e=a("code"),rpr=o("TFOPTForCausalLM"),tpr=o(" (OPT model)"),apr=l(),m4=a("li"),v7e=a("strong"),npr=o("rembert"),spr=o(" \u2014 "),nQ=a("a"),lpr=o("TFRemBertForCausalLM"),ipr=o(" (RemBERT model)"),dpr=l(),g4=a("li"),F7e=a("strong"),cpr=o("roberta"),fpr=o(" \u2014 "),sQ=a("a"),mpr=o("TFRobertaForCausalLM"),gpr=o(" (RoBERTa model)"),hpr=l(),h4=a("li"),T7e=a("strong"),ppr=o("roformer"),_pr=o(" \u2014 "),lQ=a("a"),upr=o("TFRoFormerForCausalLM"),bpr=o(" (RoFormer model)"),vpr=l(),p4=a("li"),M7e=a("strong"),Fpr=o("transfo-xl"),Tpr=o(" \u2014 "),iQ=a("a"),Mpr=o("TFTransfoXLLMHeadModel"),Epr=o(" (Transformer-XL model)"),Cpr=l(),_4=a("li"),E7e=a("strong"),wpr=o("xlm"),Apr=o(" \u2014 "),dQ=a("a"),ypr=o("TFXLMWithLMHeadModel"),Lpr=o(" (XLM model)"),xpr=l(),u4=a("li"),C7e=a("strong"),$pr=o("xlnet"),kpr=o(" \u2014 "),cQ=a("a"),Spr=o("TFXLNetLMHeadModel"),Rpr=o(" (XLNet model)"),Ppr=l(),F(b4.$$.fragment),cNe=l(),Ud=a("h2"),v4=a("a"),w7e=a("span"),F(c8.$$.fragment),Bpr=l(),A7e=a("span"),Ipr=o("TFAutoModelForImageClassification"),fNe=l(),er=a("div"),F(f8.$$.fragment),qpr=l(),Jd=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fQ=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),mQ=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),m8=a("p"),Xpr=o("This class cannot be instantiated directly using "),y7e=a("code"),zpr=o("__init__()"),Wpr=o(" (throws an error)."),Qpr=l(),$t=a("div"),F(g8.$$.fragment),Hpr=l(),L7e=a("p"),Upr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jpr=l(),Yd=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(F4.$$.fragment),t_r=l(),Lr=a("div"),F(h8.$$.fragment),a_r=l(),$7e=a("p"),n_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s_r=l(),on=a("p"),l_r=o("The model class to instantiate is selected based on the "),k7e=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),rn=a("ul"),T4=a("li"),P7e=a("strong"),p_r=o("convnext"),__r=o(" \u2014 "),hQ=a("a"),u_r=o("TFConvNextForImageClassification"),b_r=o(" (ConvNext model)"),v_r=l(),M4=a("li"),B7e=a("strong"),F_r=o("data2vec-vision"),T_r=o(" \u2014 "),pQ=a("a"),M_r=o("TFData2VecVisionForImageClassification"),E_r=o(" (Data2VecVision model)"),C_r=l(),E4=a("li"),I7e=a("strong"),w_r=o("swin"),A_r=o(" \u2014 "),_Q=a("a"),y_r=o("TFSwinForImageClassification"),L_r=o(" (Swin model)"),x_r=l(),C4=a("li"),q7e=a("strong"),$_r=o("vit"),k_r=o(" \u2014 "),uQ=a("a"),S_r=o("TFViTForImageClassification"),R_r=o(" (ViT model)"),P_r=l(),F(w4.$$.fragment),mNe=l(),Kd=a("h2"),A4=a("a"),N7e=a("span"),F(p8.$$.fragment),B_r=l(),j7e=a("span"),I_r=o("TFAutoModelForMaskedLM"),gNe=l(),or=a("div"),F(_8.$$.fragment),q_r=l(),Zd=a("p"),N_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bQ=a("a"),j_r=o("from_pretrained()"),D_r=o(" class method or the "),vQ=a("a"),G_r=o("from_config()"),O_r=o(` class
method.`),V_r=l(),u8=a("p"),X_r=o("This class cannot be instantiated directly using "),D7e=a("code"),z_r=o("__init__()"),W_r=o(" (throws an error)."),Q_r=l(),kt=a("div"),F(b8.$$.fragment),H_r=l(),G7e=a("p"),U_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J_r=l(),ec=a("p"),Y_r=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),K_r=o("not"),Z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),eur=o("from_pretrained()"),our=o(" to load the model weights."),rur=l(),F(y4.$$.fragment),tur=l(),xr=a("div"),F(v8.$$.fragment),aur=l(),V7e=a("p"),nur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sur=l(),tn=a("p"),lur=o("The model class to instantiate is selected based on the "),X7e=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),ie=a("ul"),L4=a("li"),Q7e=a("strong"),pur=o("albert"),_ur=o(" \u2014 "),TQ=a("a"),uur=o("TFAlbertForMaskedLM"),bur=o(" (ALBERT model)"),vur=l(),x4=a("li"),H7e=a("strong"),Fur=o("bert"),Tur=o(" \u2014 "),MQ=a("a"),Mur=o("TFBertForMaskedLM"),Eur=o(" (BERT model)"),Cur=l(),$4=a("li"),U7e=a("strong"),wur=o("camembert"),Aur=o(" \u2014 "),EQ=a("a"),yur=o("TFCamembertForMaskedLM"),Lur=o(" (CamemBERT model)"),xur=l(),k4=a("li"),J7e=a("strong"),$ur=o("convbert"),kur=o(" \u2014 "),CQ=a("a"),Sur=o("TFConvBertForMaskedLM"),Rur=o(" (ConvBERT model)"),Pur=l(),S4=a("li"),Y7e=a("strong"),Bur=o("deberta"),Iur=o(" \u2014 "),wQ=a("a"),qur=o("TFDebertaForMaskedLM"),Nur=o(" (DeBERTa model)"),jur=l(),R4=a("li"),K7e=a("strong"),Dur=o("deberta-v2"),Gur=o(" \u2014 "),AQ=a("a"),Our=o("TFDebertaV2ForMaskedLM"),Vur=o(" (DeBERTa-v2 model)"),Xur=l(),P4=a("li"),Z7e=a("strong"),zur=o("distilbert"),Wur=o(" \u2014 "),yQ=a("a"),Qur=o("TFDistilBertForMaskedLM"),Hur=o(" (DistilBERT model)"),Uur=l(),B4=a("li"),ebe=a("strong"),Jur=o("electra"),Yur=o(" \u2014 "),LQ=a("a"),Kur=o("TFElectraForMaskedLM"),Zur=o(" (ELECTRA model)"),e2r=l(),I4=a("li"),obe=a("strong"),o2r=o("flaubert"),r2r=o(" \u2014 "),xQ=a("a"),t2r=o("TFFlaubertWithLMHeadModel"),a2r=o(" (FlauBERT model)"),n2r=l(),q4=a("li"),rbe=a("strong"),s2r=o("funnel"),l2r=o(" \u2014 "),$Q=a("a"),i2r=o("TFFunnelForMaskedLM"),d2r=o(" (Funnel Transformer model)"),c2r=l(),N4=a("li"),tbe=a("strong"),f2r=o("layoutlm"),m2r=o(" \u2014 "),kQ=a("a"),g2r=o("TFLayoutLMForMaskedLM"),h2r=o(" (LayoutLM model)"),p2r=l(),j4=a("li"),abe=a("strong"),_2r=o("longformer"),u2r=o(" \u2014 "),SQ=a("a"),b2r=o("TFLongformerForMaskedLM"),v2r=o(" (Longformer model)"),F2r=l(),D4=a("li"),nbe=a("strong"),T2r=o("mobilebert"),M2r=o(" \u2014 "),RQ=a("a"),E2r=o("TFMobileBertForMaskedLM"),C2r=o(" (MobileBERT model)"),w2r=l(),G4=a("li"),sbe=a("strong"),A2r=o("mpnet"),y2r=o(" \u2014 "),PQ=a("a"),L2r=o("TFMPNetForMaskedLM"),x2r=o(" (MPNet model)"),$2r=l(),O4=a("li"),lbe=a("strong"),k2r=o("rembert"),S2r=o(" \u2014 "),BQ=a("a"),R2r=o("TFRemBertForMaskedLM"),P2r=o(" (RemBERT model)"),B2r=l(),V4=a("li"),ibe=a("strong"),I2r=o("roberta"),q2r=o(" \u2014 "),IQ=a("a"),N2r=o("TFRobertaForMaskedLM"),j2r=o(" (RoBERTa model)"),D2r=l(),X4=a("li"),dbe=a("strong"),G2r=o("roformer"),O2r=o(" \u2014 "),qQ=a("a"),V2r=o("TFRoFormerForMaskedLM"),X2r=o(" (RoFormer model)"),z2r=l(),z4=a("li"),cbe=a("strong"),W2r=o("tapas"),Q2r=o(" \u2014 "),NQ=a("a"),H2r=o("TFTapasForMaskedLM"),U2r=o(" (TAPAS model)"),J2r=l(),W4=a("li"),fbe=a("strong"),Y2r=o("xlm"),K2r=o(" \u2014 "),jQ=a("a"),Z2r=o("TFXLMWithLMHeadModel"),e1r=o(" (XLM model)"),o1r=l(),Q4=a("li"),mbe=a("strong"),r1r=o("xlm-roberta"),t1r=o(" \u2014 "),DQ=a("a"),a1r=o("TFXLMRobertaForMaskedLM"),n1r=o(" (XLM-RoBERTa model)"),s1r=l(),F(H4.$$.fragment),hNe=l(),oc=a("h2"),U4=a("a"),gbe=a("span"),F(F8.$$.fragment),l1r=l(),hbe=a("span"),i1r=o("TFAutoModelForSeq2SeqLM"),pNe=l(),rr=a("div"),F(T8.$$.fragment),d1r=l(),rc=a("p"),c1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GQ=a("a"),f1r=o("from_pretrained()"),m1r=o(" class method or the "),OQ=a("a"),g1r=o("from_config()"),h1r=o(` class
method.`),p1r=l(),M8=a("p"),_1r=o("This class cannot be instantiated directly using "),pbe=a("code"),u1r=o("__init__()"),b1r=o(" (throws an error)."),v1r=l(),St=a("div"),F(E8.$$.fragment),F1r=l(),_be=a("p"),T1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M1r=l(),tc=a("p"),E1r=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),C1r=o("not"),w1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),A1r=o("from_pretrained()"),y1r=o(" to load the model weights."),L1r=l(),F(J4.$$.fragment),x1r=l(),$r=a("div"),F(C8.$$.fragment),$1r=l(),bbe=a("p"),k1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S1r=l(),an=a("p"),R1r=o("The model class to instantiate is selected based on the "),vbe=a("code"),P1r=o("model_type"),B1r=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),I1r=o("pretrained_model_name_or_path"),q1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),N1r=o("pretrained_model_name_or_path"),j1r=o(":"),D1r=l(),ye=a("ul"),Y4=a("li"),Mbe=a("strong"),G1r=o("bart"),O1r=o(" \u2014 "),XQ=a("a"),V1r=o("TFBartForConditionalGeneration"),X1r=o(" (BART model)"),z1r=l(),K4=a("li"),Ebe=a("strong"),W1r=o("blenderbot"),Q1r=o(" \u2014 "),zQ=a("a"),H1r=o("TFBlenderbotForConditionalGeneration"),U1r=o(" (Blenderbot model)"),J1r=l(),Z4=a("li"),Cbe=a("strong"),Y1r=o("blenderbot-small"),K1r=o(" \u2014 "),WQ=a("a"),Z1r=o("TFBlenderbotSmallForConditionalGeneration"),e7r=o(" (BlenderbotSmall model)"),o7r=l(),eE=a("li"),wbe=a("strong"),r7r=o("encoder-decoder"),t7r=o(" \u2014 "),QQ=a("a"),a7r=o("TFEncoderDecoderModel"),n7r=o(" (Encoder decoder model)"),s7r=l(),oE=a("li"),Abe=a("strong"),l7r=o("led"),i7r=o(" \u2014 "),HQ=a("a"),d7r=o("TFLEDForConditionalGeneration"),c7r=o(" (LED model)"),f7r=l(),rE=a("li"),ybe=a("strong"),m7r=o("marian"),g7r=o(" \u2014 "),UQ=a("a"),h7r=o("TFMarianMTModel"),p7r=o(" (Marian model)"),_7r=l(),tE=a("li"),Lbe=a("strong"),u7r=o("mbart"),b7r=o(" \u2014 "),JQ=a("a"),v7r=o("TFMBartForConditionalGeneration"),F7r=o(" (mBART model)"),T7r=l(),aE=a("li"),xbe=a("strong"),M7r=o("mt5"),E7r=o(" \u2014 "),YQ=a("a"),C7r=o("TFMT5ForConditionalGeneration"),w7r=o(" (mT5 model)"),A7r=l(),nE=a("li"),$be=a("strong"),y7r=o("pegasus"),L7r=o(" \u2014 "),KQ=a("a"),x7r=o("TFPegasusForConditionalGeneration"),$7r=o(" (Pegasus model)"),k7r=l(),sE=a("li"),kbe=a("strong"),S7r=o("t5"),R7r=o(" \u2014 "),ZQ=a("a"),P7r=o("TFT5ForConditionalGeneration"),B7r=o(" (T5 model)"),I7r=l(),F(lE.$$.fragment),_Ne=l(),ac=a("h2"),iE=a("a"),Sbe=a("span"),F(w8.$$.fragment),q7r=l(),Rbe=a("span"),N7r=o("TFAutoModelForSequenceClassification"),uNe=l(),tr=a("div"),F(A8.$$.fragment),j7r=l(),nc=a("p"),D7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eH=a("a"),G7r=o("from_pretrained()"),O7r=o(" class method or the "),oH=a("a"),V7r=o("from_config()"),X7r=o(` class
method.`),z7r=l(),y8=a("p"),W7r=o("This class cannot be instantiated directly using "),Pbe=a("code"),Q7r=o("__init__()"),H7r=o(" (throws an error)."),U7r=l(),Rt=a("div"),F(L8.$$.fragment),J7r=l(),Bbe=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K7r=l(),sc=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),ebr=o("not"),obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),rbr=o("from_pretrained()"),tbr=o(" to load the model weights."),abr=l(),F(dE.$$.fragment),nbr=l(),kr=a("div"),F(x8.$$.fragment),sbr=l(),qbe=a("p"),lbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ibr=l(),nn=a("p"),dbr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),cbr=o("model_type"),fbr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(":"),_br=l(),ee=a("ul"),cE=a("li"),Gbe=a("strong"),ubr=o("albert"),bbr=o(" \u2014 "),tH=a("a"),vbr=o("TFAlbertForSequenceClassification"),Fbr=o(" (ALBERT model)"),Tbr=l(),fE=a("li"),Obe=a("strong"),Mbr=o("bert"),Ebr=o(" \u2014 "),aH=a("a"),Cbr=o("TFBertForSequenceClassification"),wbr=o(" (BERT model)"),Abr=l(),mE=a("li"),Vbe=a("strong"),ybr=o("camembert"),Lbr=o(" \u2014 "),nH=a("a"),xbr=o("TFCamembertForSequenceClassification"),$br=o(" (CamemBERT model)"),kbr=l(),gE=a("li"),Xbe=a("strong"),Sbr=o("convbert"),Rbr=o(" \u2014 "),sH=a("a"),Pbr=o("TFConvBertForSequenceClassification"),Bbr=o(" (ConvBERT model)"),Ibr=l(),hE=a("li"),zbe=a("strong"),qbr=o("ctrl"),Nbr=o(" \u2014 "),lH=a("a"),jbr=o("TFCTRLForSequenceClassification"),Dbr=o(" (CTRL model)"),Gbr=l(),pE=a("li"),Wbe=a("strong"),Obr=o("deberta"),Vbr=o(" \u2014 "),iH=a("a"),Xbr=o("TFDebertaForSequenceClassification"),zbr=o(" (DeBERTa model)"),Wbr=l(),_E=a("li"),Qbe=a("strong"),Qbr=o("deberta-v2"),Hbr=o(" \u2014 "),dH=a("a"),Ubr=o("TFDebertaV2ForSequenceClassification"),Jbr=o(" (DeBERTa-v2 model)"),Ybr=l(),uE=a("li"),Hbe=a("strong"),Kbr=o("distilbert"),Zbr=o(" \u2014 "),cH=a("a"),evr=o("TFDistilBertForSequenceClassification"),ovr=o(" (DistilBERT model)"),rvr=l(),bE=a("li"),Ube=a("strong"),tvr=o("electra"),avr=o(" \u2014 "),fH=a("a"),nvr=o("TFElectraForSequenceClassification"),svr=o(" (ELECTRA model)"),lvr=l(),vE=a("li"),Jbe=a("strong"),ivr=o("flaubert"),dvr=o(" \u2014 "),mH=a("a"),cvr=o("TFFlaubertForSequenceClassification"),fvr=o(" (FlauBERT model)"),mvr=l(),FE=a("li"),Ybe=a("strong"),gvr=o("funnel"),hvr=o(" \u2014 "),gH=a("a"),pvr=o("TFFunnelForSequenceClassification"),_vr=o(" (Funnel Transformer model)"),uvr=l(),TE=a("li"),Kbe=a("strong"),bvr=o("gpt2"),vvr=o(" \u2014 "),hH=a("a"),Fvr=o("TFGPT2ForSequenceClassification"),Tvr=o(" (OpenAI GPT-2 model)"),Mvr=l(),ME=a("li"),Zbe=a("strong"),Evr=o("gptj"),Cvr=o(" \u2014 "),pH=a("a"),wvr=o("TFGPTJForSequenceClassification"),Avr=o(" (GPT-J model)"),yvr=l(),EE=a("li"),eve=a("strong"),Lvr=o("layoutlm"),xvr=o(" \u2014 "),_H=a("a"),$vr=o("TFLayoutLMForSequenceClassification"),kvr=o(" (LayoutLM model)"),Svr=l(),CE=a("li"),ove=a("strong"),Rvr=o("longformer"),Pvr=o(" \u2014 "),uH=a("a"),Bvr=o("TFLongformerForSequenceClassification"),Ivr=o(" (Longformer model)"),qvr=l(),wE=a("li"),rve=a("strong"),Nvr=o("mobilebert"),jvr=o(" \u2014 "),bH=a("a"),Dvr=o("TFMobileBertForSequenceClassification"),Gvr=o(" (MobileBERT model)"),Ovr=l(),AE=a("li"),tve=a("strong"),Vvr=o("mpnet"),Xvr=o(" \u2014 "),vH=a("a"),zvr=o("TFMPNetForSequenceClassification"),Wvr=o(" (MPNet model)"),Qvr=l(),yE=a("li"),ave=a("strong"),Hvr=o("openai-gpt"),Uvr=o(" \u2014 "),FH=a("a"),Jvr=o("TFOpenAIGPTForSequenceClassification"),Yvr=o(" (OpenAI GPT model)"),Kvr=l(),LE=a("li"),nve=a("strong"),Zvr=o("rembert"),eFr=o(" \u2014 "),TH=a("a"),oFr=o("TFRemBertForSequenceClassification"),rFr=o(" (RemBERT model)"),tFr=l(),xE=a("li"),sve=a("strong"),aFr=o("roberta"),nFr=o(" \u2014 "),MH=a("a"),sFr=o("TFRobertaForSequenceClassification"),lFr=o(" (RoBERTa model)"),iFr=l(),$E=a("li"),lve=a("strong"),dFr=o("roformer"),cFr=o(" \u2014 "),EH=a("a"),fFr=o("TFRoFormerForSequenceClassification"),mFr=o(" (RoFormer model)"),gFr=l(),kE=a("li"),ive=a("strong"),hFr=o("tapas"),pFr=o(" \u2014 "),CH=a("a"),_Fr=o("TFTapasForSequenceClassification"),uFr=o(" (TAPAS model)"),bFr=l(),SE=a("li"),dve=a("strong"),vFr=o("transfo-xl"),FFr=o(" \u2014 "),wH=a("a"),TFr=o("TFTransfoXLForSequenceClassification"),MFr=o(" (Transformer-XL model)"),EFr=l(),RE=a("li"),cve=a("strong"),CFr=o("xlm"),wFr=o(" \u2014 "),AH=a("a"),AFr=o("TFXLMForSequenceClassification"),yFr=o(" (XLM model)"),LFr=l(),PE=a("li"),fve=a("strong"),xFr=o("xlm-roberta"),$Fr=o(" \u2014 "),yH=a("a"),kFr=o("TFXLMRobertaForSequenceClassification"),SFr=o(" (XLM-RoBERTa model)"),RFr=l(),BE=a("li"),mve=a("strong"),PFr=o("xlnet"),BFr=o(" \u2014 "),LH=a("a"),IFr=o("TFXLNetForSequenceClassification"),qFr=o(" (XLNet model)"),NFr=l(),F(IE.$$.fragment),bNe=l(),lc=a("h2"),qE=a("a"),gve=a("span"),F($8.$$.fragment),jFr=l(),hve=a("span"),DFr=o("TFAutoModelForMultipleChoice"),vNe=l(),ar=a("div"),F(k8.$$.fragment),GFr=l(),ic=a("p"),OFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xH=a("a"),VFr=o("from_pretrained()"),XFr=o(" class method or the "),$H=a("a"),zFr=o("from_config()"),WFr=o(` class
method.`),QFr=l(),S8=a("p"),HFr=o("This class cannot be instantiated directly using "),pve=a("code"),UFr=o("__init__()"),JFr=o(" (throws an error)."),YFr=l(),Pt=a("div"),F(R8.$$.fragment),KFr=l(),_ve=a("p"),ZFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eTr=l(),dc=a("p"),oTr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),rTr=o("not"),tTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),aTr=o("from_pretrained()"),nTr=o(" to load the model weights."),sTr=l(),F(NE.$$.fragment),lTr=l(),Sr=a("div"),F(P8.$$.fragment),iTr=l(),bve=a("p"),dTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cTr=l(),sn=a("p"),fTr=o("The model class to instantiate is selected based on the "),vve=a("code"),mTr=o("model_type"),gTr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),hTr=o("pretrained_model_name_or_path"),pTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),_Tr=o("pretrained_model_name_or_path"),uTr=o(":"),bTr=l(),he=a("ul"),jE=a("li"),Mve=a("strong"),vTr=o("albert"),FTr=o(" \u2014 "),SH=a("a"),TTr=o("TFAlbertForMultipleChoice"),MTr=o(" (ALBERT model)"),ETr=l(),DE=a("li"),Eve=a("strong"),CTr=o("bert"),wTr=o(" \u2014 "),RH=a("a"),ATr=o("TFBertForMultipleChoice"),yTr=o(" (BERT model)"),LTr=l(),GE=a("li"),Cve=a("strong"),xTr=o("camembert"),$Tr=o(" \u2014 "),PH=a("a"),kTr=o("TFCamembertForMultipleChoice"),STr=o(" (CamemBERT model)"),RTr=l(),OE=a("li"),wve=a("strong"),PTr=o("convbert"),BTr=o(" \u2014 "),BH=a("a"),ITr=o("TFConvBertForMultipleChoice"),qTr=o(" (ConvBERT model)"),NTr=l(),VE=a("li"),Ave=a("strong"),jTr=o("distilbert"),DTr=o(" \u2014 "),IH=a("a"),GTr=o("TFDistilBertForMultipleChoice"),OTr=o(" (DistilBERT model)"),VTr=l(),XE=a("li"),yve=a("strong"),XTr=o("electra"),zTr=o(" \u2014 "),qH=a("a"),WTr=o("TFElectraForMultipleChoice"),QTr=o(" (ELECTRA model)"),HTr=l(),zE=a("li"),Lve=a("strong"),UTr=o("flaubert"),JTr=o(" \u2014 "),NH=a("a"),YTr=o("TFFlaubertForMultipleChoice"),KTr=o(" (FlauBERT model)"),ZTr=l(),WE=a("li"),xve=a("strong"),eMr=o("funnel"),oMr=o(" \u2014 "),jH=a("a"),rMr=o("TFFunnelForMultipleChoice"),tMr=o(" (Funnel Transformer model)"),aMr=l(),QE=a("li"),$ve=a("strong"),nMr=o("longformer"),sMr=o(" \u2014 "),DH=a("a"),lMr=o("TFLongformerForMultipleChoice"),iMr=o(" (Longformer model)"),dMr=l(),HE=a("li"),kve=a("strong"),cMr=o("mobilebert"),fMr=o(" \u2014 "),GH=a("a"),mMr=o("TFMobileBertForMultipleChoice"),gMr=o(" (MobileBERT model)"),hMr=l(),UE=a("li"),Sve=a("strong"),pMr=o("mpnet"),_Mr=o(" \u2014 "),OH=a("a"),uMr=o("TFMPNetForMultipleChoice"),bMr=o(" (MPNet model)"),vMr=l(),JE=a("li"),Rve=a("strong"),FMr=o("rembert"),TMr=o(" \u2014 "),VH=a("a"),MMr=o("TFRemBertForMultipleChoice"),EMr=o(" (RemBERT model)"),CMr=l(),YE=a("li"),Pve=a("strong"),wMr=o("roberta"),AMr=o(" \u2014 "),XH=a("a"),yMr=o("TFRobertaForMultipleChoice"),LMr=o(" (RoBERTa model)"),xMr=l(),KE=a("li"),Bve=a("strong"),$Mr=o("roformer"),kMr=o(" \u2014 "),zH=a("a"),SMr=o("TFRoFormerForMultipleChoice"),RMr=o(" (RoFormer model)"),PMr=l(),ZE=a("li"),Ive=a("strong"),BMr=o("xlm"),IMr=o(" \u2014 "),WH=a("a"),qMr=o("TFXLMForMultipleChoice"),NMr=o(" (XLM model)"),jMr=l(),eC=a("li"),qve=a("strong"),DMr=o("xlm-roberta"),GMr=o(" \u2014 "),QH=a("a"),OMr=o("TFXLMRobertaForMultipleChoice"),VMr=o(" (XLM-RoBERTa model)"),XMr=l(),oC=a("li"),Nve=a("strong"),zMr=o("xlnet"),WMr=o(" \u2014 "),HH=a("a"),QMr=o("TFXLNetForMultipleChoice"),HMr=o(" (XLNet model)"),UMr=l(),F(rC.$$.fragment),FNe=l(),cc=a("h2"),tC=a("a"),jve=a("span"),F(B8.$$.fragment),JMr=l(),Dve=a("span"),YMr=o("TFAutoModelForNextSentencePrediction"),TNe=l(),nr=a("div"),F(I8.$$.fragment),KMr=l(),fc=a("p"),ZMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=a("a"),e4r=o("from_pretrained()"),o4r=o(" class method or the "),JH=a("a"),r4r=o("from_config()"),t4r=o(` class
method.`),a4r=l(),q8=a("p"),n4r=o("This class cannot be instantiated directly using "),Gve=a("code"),s4r=o("__init__()"),l4r=o(" (throws an error)."),i4r=l(),Bt=a("div"),F(N8.$$.fragment),d4r=l(),Ove=a("p"),c4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f4r=l(),mc=a("p"),m4r=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),g4r=o("not"),h4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),p4r=o("from_pretrained()"),_4r=o(" to load the model weights."),u4r=l(),F(aC.$$.fragment),b4r=l(),Rr=a("div"),F(j8.$$.fragment),v4r=l(),Xve=a("p"),F4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T4r=l(),ln=a("p"),M4r=o("The model class to instantiate is selected based on the "),zve=a("code"),E4r=o("model_type"),C4r=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(":"),x4r=l(),D8=a("ul"),nC=a("li"),Hve=a("strong"),$4r=o("bert"),k4r=o(" \u2014 "),KH=a("a"),S4r=o("TFBertForNextSentencePrediction"),R4r=o(" (BERT model)"),P4r=l(),sC=a("li"),Uve=a("strong"),B4r=o("mobilebert"),I4r=o(" \u2014 "),ZH=a("a"),q4r=o("TFMobileBertForNextSentencePrediction"),N4r=o(" (MobileBERT model)"),j4r=l(),F(lC.$$.fragment),MNe=l(),gc=a("h2"),iC=a("a"),Jve=a("span"),F(G8.$$.fragment),D4r=l(),Yve=a("span"),G4r=o("TFAutoModelForTableQuestionAnswering"),ENe=l(),sr=a("div"),F(O8.$$.fragment),O4r=l(),hc=a("p"),V4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eU=a("a"),X4r=o("from_pretrained()"),z4r=o(" class method or the "),oU=a("a"),W4r=o("from_config()"),Q4r=o(` class
method.`),H4r=l(),V8=a("p"),U4r=o("This class cannot be instantiated directly using "),Kve=a("code"),J4r=o("__init__()"),Y4r=o(" (throws an error)."),K4r=l(),It=a("div"),F(X8.$$.fragment),Z4r=l(),Zve=a("p"),eEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oEr=l(),pc=a("p"),rEr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),tEr=o("not"),aEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),nEr=o("from_pretrained()"),sEr=o(" to load the model weights."),lEr=l(),F(dC.$$.fragment),iEr=l(),Pr=a("div"),F(z8.$$.fragment),dEr=l(),oFe=a("p"),cEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fEr=l(),dn=a("p"),mEr=o("The model class to instantiate is selected based on the "),rFe=a("code"),gEr=o("model_type"),hEr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),uEr=o("pretrained_model_name_or_path"),bEr=o(":"),vEr=l(),nFe=a("ul"),cC=a("li"),sFe=a("strong"),FEr=o("tapas"),TEr=o(" \u2014 "),tU=a("a"),MEr=o("TFTapasForQuestionAnswering"),EEr=o(" (TAPAS model)"),CEr=l(),F(fC.$$.fragment),CNe=l(),_c=a("h2"),mC=a("a"),lFe=a("span"),F(W8.$$.fragment),wEr=l(),iFe=a("span"),AEr=o("TFAutoModelForTokenClassification"),wNe=l(),lr=a("div"),F(Q8.$$.fragment),yEr=l(),uc=a("p"),LEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aU=a("a"),xEr=o("from_pretrained()"),$Er=o(" class method or the "),nU=a("a"),kEr=o("from_config()"),SEr=o(` class
method.`),REr=l(),H8=a("p"),PEr=o("This class cannot be instantiated directly using "),dFe=a("code"),BEr=o("__init__()"),IEr=o(" (throws an error)."),qEr=l(),qt=a("div"),F(U8.$$.fragment),NEr=l(),cFe=a("p"),jEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DEr=l(),bc=a("p"),GEr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),OEr=o("not"),VEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),XEr=o("from_pretrained()"),zEr=o(" to load the model weights."),WEr=l(),F(gC.$$.fragment),QEr=l(),Br=a("div"),F(J8.$$.fragment),HEr=l(),mFe=a("p"),UEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JEr=l(),cn=a("p"),YEr=o("The model class to instantiate is selected based on the "),gFe=a("code"),KEr=o("model_type"),ZEr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(":"),aCr=l(),de=a("ul"),hC=a("li"),_Fe=a("strong"),nCr=o("albert"),sCr=o(" \u2014 "),lU=a("a"),lCr=o("TFAlbertForTokenClassification"),iCr=o(" (ALBERT model)"),dCr=l(),pC=a("li"),uFe=a("strong"),cCr=o("bert"),fCr=o(" \u2014 "),iU=a("a"),mCr=o("TFBertForTokenClassification"),gCr=o(" (BERT model)"),hCr=l(),_C=a("li"),bFe=a("strong"),pCr=o("camembert"),_Cr=o(" \u2014 "),dU=a("a"),uCr=o("TFCamembertForTokenClassification"),bCr=o(" (CamemBERT model)"),vCr=l(),uC=a("li"),vFe=a("strong"),FCr=o("convbert"),TCr=o(" \u2014 "),cU=a("a"),MCr=o("TFConvBertForTokenClassification"),ECr=o(" (ConvBERT model)"),CCr=l(),bC=a("li"),FFe=a("strong"),wCr=o("deberta"),ACr=o(" \u2014 "),fU=a("a"),yCr=o("TFDebertaForTokenClassification"),LCr=o(" (DeBERTa model)"),xCr=l(),vC=a("li"),TFe=a("strong"),$Cr=o("deberta-v2"),kCr=o(" \u2014 "),mU=a("a"),SCr=o("TFDebertaV2ForTokenClassification"),RCr=o(" (DeBERTa-v2 model)"),PCr=l(),FC=a("li"),MFe=a("strong"),BCr=o("distilbert"),ICr=o(" \u2014 "),gU=a("a"),qCr=o("TFDistilBertForTokenClassification"),NCr=o(" (DistilBERT model)"),jCr=l(),TC=a("li"),EFe=a("strong"),DCr=o("electra"),GCr=o(" \u2014 "),hU=a("a"),OCr=o("TFElectraForTokenClassification"),VCr=o(" (ELECTRA model)"),XCr=l(),MC=a("li"),CFe=a("strong"),zCr=o("flaubert"),WCr=o(" \u2014 "),pU=a("a"),QCr=o("TFFlaubertForTokenClassification"),HCr=o(" (FlauBERT model)"),UCr=l(),EC=a("li"),wFe=a("strong"),JCr=o("funnel"),YCr=o(" \u2014 "),_U=a("a"),KCr=o("TFFunnelForTokenClassification"),ZCr=o(" (Funnel Transformer model)"),e5r=l(),CC=a("li"),AFe=a("strong"),o5r=o("layoutlm"),r5r=o(" \u2014 "),uU=a("a"),t5r=o("TFLayoutLMForTokenClassification"),a5r=o(" (LayoutLM model)"),n5r=l(),wC=a("li"),yFe=a("strong"),s5r=o("longformer"),l5r=o(" \u2014 "),bU=a("a"),i5r=o("TFLongformerForTokenClassification"),d5r=o(" (Longformer model)"),c5r=l(),AC=a("li"),LFe=a("strong"),f5r=o("mobilebert"),m5r=o(" \u2014 "),vU=a("a"),g5r=o("TFMobileBertForTokenClassification"),h5r=o(" (MobileBERT model)"),p5r=l(),yC=a("li"),xFe=a("strong"),_5r=o("mpnet"),u5r=o(" \u2014 "),FU=a("a"),b5r=o("TFMPNetForTokenClassification"),v5r=o(" (MPNet model)"),F5r=l(),LC=a("li"),$Fe=a("strong"),T5r=o("rembert"),M5r=o(" \u2014 "),TU=a("a"),E5r=o("TFRemBertForTokenClassification"),C5r=o(" (RemBERT model)"),w5r=l(),xC=a("li"),kFe=a("strong"),A5r=o("roberta"),y5r=o(" \u2014 "),MU=a("a"),L5r=o("TFRobertaForTokenClassification"),x5r=o(" (RoBERTa model)"),$5r=l(),$C=a("li"),SFe=a("strong"),k5r=o("roformer"),S5r=o(" \u2014 "),EU=a("a"),R5r=o("TFRoFormerForTokenClassification"),P5r=o(" (RoFormer model)"),B5r=l(),kC=a("li"),RFe=a("strong"),I5r=o("xlm"),q5r=o(" \u2014 "),CU=a("a"),N5r=o("TFXLMForTokenClassification"),j5r=o(" (XLM model)"),D5r=l(),SC=a("li"),PFe=a("strong"),G5r=o("xlm-roberta"),O5r=o(" \u2014 "),wU=a("a"),V5r=o("TFXLMRobertaForTokenClassification"),X5r=o(" (XLM-RoBERTa model)"),z5r=l(),RC=a("li"),BFe=a("strong"),W5r=o("xlnet"),Q5r=o(" \u2014 "),AU=a("a"),H5r=o("TFXLNetForTokenClassification"),U5r=o(" (XLNet model)"),J5r=l(),F(PC.$$.fragment),ANe=l(),vc=a("h2"),BC=a("a"),IFe=a("span"),F(Y8.$$.fragment),Y5r=l(),qFe=a("span"),K5r=o("TFAutoModelForQuestionAnswering"),yNe=l(),ir=a("div"),F(K8.$$.fragment),Z5r=l(),Fc=a("p"),e3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yU=a("a"),o3r=o("from_pretrained()"),r3r=o(" class method or the "),LU=a("a"),t3r=o("from_config()"),a3r=o(` class
method.`),n3r=l(),Z8=a("p"),s3r=o("This class cannot be instantiated directly using "),NFe=a("code"),l3r=o("__init__()"),i3r=o(" (throws an error)."),d3r=l(),Nt=a("div"),F(e9.$$.fragment),c3r=l(),jFe=a("p"),f3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m3r=l(),Tc=a("p"),g3r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),h3r=o("not"),p3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),_3r=o("from_pretrained()"),u3r=o(" to load the model weights."),b3r=l(),F(IC.$$.fragment),v3r=l(),Ir=a("div"),F(o9.$$.fragment),F3r=l(),GFe=a("p"),T3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M3r=l(),fn=a("p"),E3r=o("The model class to instantiate is selected based on the "),OFe=a("code"),C3r=o("model_type"),w3r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),A3r=o("pretrained_model_name_or_path"),y3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),L3r=o("pretrained_model_name_or_path"),x3r=o(":"),$3r=l(),ce=a("ul"),qC=a("li"),zFe=a("strong"),k3r=o("albert"),S3r=o(" \u2014 "),$U=a("a"),R3r=o("TFAlbertForQuestionAnswering"),P3r=o(" (ALBERT model)"),B3r=l(),NC=a("li"),WFe=a("strong"),I3r=o("bert"),q3r=o(" \u2014 "),kU=a("a"),N3r=o("TFBertForQuestionAnswering"),j3r=o(" (BERT model)"),D3r=l(),jC=a("li"),QFe=a("strong"),G3r=o("camembert"),O3r=o(" \u2014 "),SU=a("a"),V3r=o("TFCamembertForQuestionAnswering"),X3r=o(" (CamemBERT model)"),z3r=l(),DC=a("li"),HFe=a("strong"),W3r=o("convbert"),Q3r=o(" \u2014 "),RU=a("a"),H3r=o("TFConvBertForQuestionAnswering"),U3r=o(" (ConvBERT model)"),J3r=l(),GC=a("li"),UFe=a("strong"),Y3r=o("deberta"),K3r=o(" \u2014 "),PU=a("a"),Z3r=o("TFDebertaForQuestionAnswering"),ewr=o(" (DeBERTa model)"),owr=l(),OC=a("li"),JFe=a("strong"),rwr=o("deberta-v2"),twr=o(" \u2014 "),BU=a("a"),awr=o("TFDebertaV2ForQuestionAnswering"),nwr=o(" (DeBERTa-v2 model)"),swr=l(),VC=a("li"),YFe=a("strong"),lwr=o("distilbert"),iwr=o(" \u2014 "),IU=a("a"),dwr=o("TFDistilBertForQuestionAnswering"),cwr=o(" (DistilBERT model)"),fwr=l(),XC=a("li"),KFe=a("strong"),mwr=o("electra"),gwr=o(" \u2014 "),qU=a("a"),hwr=o("TFElectraForQuestionAnswering"),pwr=o(" (ELECTRA model)"),_wr=l(),zC=a("li"),ZFe=a("strong"),uwr=o("flaubert"),bwr=o(" \u2014 "),NU=a("a"),vwr=o("TFFlaubertForQuestionAnsweringSimple"),Fwr=o(" (FlauBERT model)"),Twr=l(),WC=a("li"),eTe=a("strong"),Mwr=o("funnel"),Ewr=o(" \u2014 "),jU=a("a"),Cwr=o("TFFunnelForQuestionAnswering"),wwr=o(" (Funnel Transformer model)"),Awr=l(),QC=a("li"),oTe=a("strong"),ywr=o("gptj"),Lwr=o(" \u2014 "),DU=a("a"),xwr=o("TFGPTJForQuestionAnswering"),$wr=o(" (GPT-J model)"),kwr=l(),HC=a("li"),rTe=a("strong"),Swr=o("longformer"),Rwr=o(" \u2014 "),GU=a("a"),Pwr=o("TFLongformerForQuestionAnswering"),Bwr=o(" (Longformer model)"),Iwr=l(),UC=a("li"),tTe=a("strong"),qwr=o("mobilebert"),Nwr=o(" \u2014 "),OU=a("a"),jwr=o("TFMobileBertForQuestionAnswering"),Dwr=o(" (MobileBERT model)"),Gwr=l(),JC=a("li"),aTe=a("strong"),Owr=o("mpnet"),Vwr=o(" \u2014 "),VU=a("a"),Xwr=o("TFMPNetForQuestionAnswering"),zwr=o(" (MPNet model)"),Wwr=l(),YC=a("li"),nTe=a("strong"),Qwr=o("rembert"),Hwr=o(" \u2014 "),XU=a("a"),Uwr=o("TFRemBertForQuestionAnswering"),Jwr=o(" (RemBERT model)"),Ywr=l(),KC=a("li"),sTe=a("strong"),Kwr=o("roberta"),Zwr=o(" \u2014 "),zU=a("a"),e0r=o("TFRobertaForQuestionAnswering"),o0r=o(" (RoBERTa model)"),r0r=l(),ZC=a("li"),lTe=a("strong"),t0r=o("roformer"),a0r=o(" \u2014 "),WU=a("a"),n0r=o("TFRoFormerForQuestionAnswering"),s0r=o(" (RoFormer model)"),l0r=l(),e5=a("li"),iTe=a("strong"),i0r=o("xlm"),d0r=o(" \u2014 "),QU=a("a"),c0r=o("TFXLMForQuestionAnsweringSimple"),f0r=o(" (XLM model)"),m0r=l(),o5=a("li"),dTe=a("strong"),g0r=o("xlm-roberta"),h0r=o(" \u2014 "),HU=a("a"),p0r=o("TFXLMRobertaForQuestionAnswering"),_0r=o(" (XLM-RoBERTa model)"),u0r=l(),r5=a("li"),cTe=a("strong"),b0r=o("xlnet"),v0r=o(" \u2014 "),UU=a("a"),F0r=o("TFXLNetForQuestionAnsweringSimple"),T0r=o(" (XLNet model)"),M0r=l(),F(t5.$$.fragment),LNe=l(),Mc=a("h2"),a5=a("a"),fTe=a("span"),F(r9.$$.fragment),E0r=l(),mTe=a("span"),C0r=o("TFAutoModelForVision2Seq"),xNe=l(),dr=a("div"),F(t9.$$.fragment),w0r=l(),Ec=a("p"),A0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JU=a("a"),y0r=o("from_pretrained()"),L0r=o(" class method or the "),YU=a("a"),x0r=o("from_config()"),$0r=o(` class
method.`),k0r=l(),a9=a("p"),S0r=o("This class cannot be instantiated directly using "),gTe=a("code"),R0r=o("__init__()"),P0r=o(" (throws an error)."),B0r=l(),jt=a("div"),F(n9.$$.fragment),I0r=l(),hTe=a("p"),q0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N0r=l(),Cc=a("p"),j0r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),D0r=o("not"),G0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),O0r=o("from_pretrained()"),V0r=o(" to load the model weights."),X0r=l(),F(n5.$$.fragment),z0r=l(),qr=a("div"),F(s9.$$.fragment),W0r=l(),_Te=a("p"),Q0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),H0r=l(),mn=a("p"),U0r=o("The model class to instantiate is selected based on the "),uTe=a("code"),J0r=o("model_type"),Y0r=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),FTe=a("ul"),s5=a("li"),TTe=a("strong"),tAr=o("vision-encoder-decoder"),aAr=o(" \u2014 "),ZU=a("a"),nAr=o("TFVisionEncoderDecoderModel"),sAr=o(" (Vision Encoder decoder model)"),lAr=l(),F(l5.$$.fragment),$Ne=l(),wc=a("h2"),i5=a("a"),MTe=a("span"),F(l9.$$.fragment),iAr=l(),ETe=a("span"),dAr=o("TFAutoModelForSpeechSeq2Seq"),kNe=l(),cr=a("div"),F(i9.$$.fragment),cAr=l(),Ac=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eJ=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),oJ=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),d9=a("p"),uAr=o("This class cannot be instantiated directly using "),CTe=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),Dt=a("div"),F(c9.$$.fragment),TAr=l(),wTe=a("p"),MAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EAr=l(),yc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),F(d5.$$.fragment),$Ar=l(),Nr=a("div"),F(f9.$$.fragment),kAr=l(),yTe=a("p"),SAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RAr=l(),gn=a("p"),PAr=o("The model class to instantiate is selected based on the "),LTe=a("code"),BAr=o("model_type"),IAr=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),qAr=o("pretrained_model_name_or_path"),NAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),kTe=a("ul"),c5=a("li"),STe=a("strong"),OAr=o("speech_to_text"),VAr=o(" \u2014 "),tJ=a("a"),XAr=o("TFSpeech2TextForConditionalGeneration"),zAr=o(" (Speech2Text model)"),WAr=l(),F(f5.$$.fragment),SNe=l(),Lc=a("h2"),m5=a("a"),RTe=a("span"),F(m9.$$.fragment),QAr=l(),PTe=a("span"),HAr=o("FlaxAutoModel"),RNe=l(),fr=a("div"),F(g9.$$.fragment),UAr=l(),xc=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aJ=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),nJ=a("a"),ZAr=o("from_config()"),e6r=o(` class
method.`),o6r=l(),h9=a("p"),r6r=o("This class cannot be instantiated directly using "),BTe=a("code"),t6r=o("__init__()"),a6r=o(" (throws an error)."),n6r=l(),Gt=a("div"),F(p9.$$.fragment),s6r=l(),ITe=a("p"),l6r=o("Instantiates one of the base model classes of the library from a configuration."),i6r=l(),$c=a("p"),d6r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),c6r=o("not"),f6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),m6r=o("from_pretrained()"),g6r=o(" to load the model weights."),h6r=l(),F(g5.$$.fragment),p6r=l(),jr=a("div"),F(_9.$$.fragment),_6r=l(),NTe=a("p"),u6r=o("Instantiate one of the base model classes of the library from a pretrained model."),b6r=l(),hn=a("p"),v6r=o("The model class to instantiate is selected based on the "),jTe=a("code"),F6r=o("model_type"),T6r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),C6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),oe=a("ul"),h5=a("li"),OTe=a("strong"),y6r=o("albert"),L6r=o(" \u2014 "),lJ=a("a"),x6r=o("FlaxAlbertModel"),$6r=o(" (ALBERT model)"),k6r=l(),p5=a("li"),VTe=a("strong"),S6r=o("bart"),R6r=o(" \u2014 "),iJ=a("a"),P6r=o("FlaxBartModel"),B6r=o(" (BART model)"),I6r=l(),_5=a("li"),XTe=a("strong"),q6r=o("beit"),N6r=o(" \u2014 "),dJ=a("a"),j6r=o("FlaxBeitModel"),D6r=o(" (BEiT model)"),G6r=l(),u5=a("li"),zTe=a("strong"),O6r=o("bert"),V6r=o(" \u2014 "),cJ=a("a"),X6r=o("FlaxBertModel"),z6r=o(" (BERT model)"),W6r=l(),b5=a("li"),WTe=a("strong"),Q6r=o("big_bird"),H6r=o(" \u2014 "),fJ=a("a"),U6r=o("FlaxBigBirdModel"),J6r=o(" (BigBird model)"),Y6r=l(),v5=a("li"),QTe=a("strong"),K6r=o("blenderbot"),Z6r=o(" \u2014 "),mJ=a("a"),eyr=o("FlaxBlenderbotModel"),oyr=o(" (Blenderbot model)"),ryr=l(),F5=a("li"),HTe=a("strong"),tyr=o("blenderbot-small"),ayr=o(" \u2014 "),gJ=a("a"),nyr=o("FlaxBlenderbotSmallModel"),syr=o(" (BlenderbotSmall model)"),lyr=l(),T5=a("li"),UTe=a("strong"),iyr=o("clip"),dyr=o(" \u2014 "),hJ=a("a"),cyr=o("FlaxCLIPModel"),fyr=o(" (CLIP model)"),myr=l(),M5=a("li"),JTe=a("strong"),gyr=o("distilbert"),hyr=o(" \u2014 "),pJ=a("a"),pyr=o("FlaxDistilBertModel"),_yr=o(" (DistilBERT model)"),uyr=l(),E5=a("li"),YTe=a("strong"),byr=o("electra"),vyr=o(" \u2014 "),_J=a("a"),Fyr=o("FlaxElectraModel"),Tyr=o(" (ELECTRA model)"),Myr=l(),C5=a("li"),KTe=a("strong"),Eyr=o("gpt2"),Cyr=o(" \u2014 "),uJ=a("a"),wyr=o("FlaxGPT2Model"),Ayr=o(" (OpenAI GPT-2 model)"),yyr=l(),w5=a("li"),ZTe=a("strong"),Lyr=o("gpt_neo"),xyr=o(" \u2014 "),bJ=a("a"),$yr=o("FlaxGPTNeoModel"),kyr=o(" (GPT Neo model)"),Syr=l(),A5=a("li"),eMe=a("strong"),Ryr=o("gptj"),Pyr=o(" \u2014 "),vJ=a("a"),Byr=o("FlaxGPTJModel"),Iyr=o(" (GPT-J model)"),qyr=l(),y5=a("li"),oMe=a("strong"),Nyr=o("marian"),jyr=o(" \u2014 "),FJ=a("a"),Dyr=o("FlaxMarianModel"),Gyr=o(" (Marian model)"),Oyr=l(),L5=a("li"),rMe=a("strong"),Vyr=o("mbart"),Xyr=o(" \u2014 "),TJ=a("a"),zyr=o("FlaxMBartModel"),Wyr=o(" (mBART model)"),Qyr=l(),x5=a("li"),tMe=a("strong"),Hyr=o("mt5"),Uyr=o(" \u2014 "),MJ=a("a"),Jyr=o("FlaxMT5Model"),Yyr=o(" (mT5 model)"),Kyr=l(),$5=a("li"),aMe=a("strong"),Zyr=o("opt"),eLr=o(" \u2014 "),EJ=a("a"),oLr=o("FlaxOPTModel"),rLr=o(" (OPT model)"),tLr=l(),k5=a("li"),nMe=a("strong"),aLr=o("pegasus"),nLr=o(" \u2014 "),CJ=a("a"),sLr=o("FlaxPegasusModel"),lLr=o(" (Pegasus model)"),iLr=l(),S5=a("li"),sMe=a("strong"),dLr=o("roberta"),cLr=o(" \u2014 "),wJ=a("a"),fLr=o("FlaxRobertaModel"),mLr=o(" (RoBERTa model)"),gLr=l(),R5=a("li"),lMe=a("strong"),hLr=o("roformer"),pLr=o(" \u2014 "),AJ=a("a"),_Lr=o("FlaxRoFormerModel"),uLr=o(" (RoFormer model)"),bLr=l(),P5=a("li"),iMe=a("strong"),vLr=o("t5"),FLr=o(" \u2014 "),yJ=a("a"),TLr=o("FlaxT5Model"),MLr=o(" (T5 model)"),ELr=l(),B5=a("li"),dMe=a("strong"),CLr=o("vision-text-dual-encoder"),wLr=o(" \u2014 "),LJ=a("a"),ALr=o("FlaxVisionTextDualEncoderModel"),yLr=o(" (VisionTextDualEncoder model)"),LLr=l(),I5=a("li"),cMe=a("strong"),xLr=o("vit"),$Lr=o(" \u2014 "),xJ=a("a"),kLr=o("FlaxViTModel"),SLr=o(" (ViT model)"),RLr=l(),q5=a("li"),fMe=a("strong"),PLr=o("wav2vec2"),BLr=o(" \u2014 "),$J=a("a"),ILr=o("FlaxWav2Vec2Model"),qLr=o(" (Wav2Vec2 model)"),NLr=l(),N5=a("li"),mMe=a("strong"),jLr=o("xglm"),DLr=o(" \u2014 "),kJ=a("a"),GLr=o("FlaxXGLMModel"),OLr=o(" (XGLM model)"),VLr=l(),j5=a("li"),gMe=a("strong"),XLr=o("xlm-roberta"),zLr=o(" \u2014 "),SJ=a("a"),WLr=o("FlaxXLMRobertaModel"),QLr=o(" (XLM-RoBERTa model)"),HLr=l(),F(D5.$$.fragment),PNe=l(),kc=a("h2"),G5=a("a"),hMe=a("span"),F(u9.$$.fragment),ULr=l(),pMe=a("span"),JLr=o("FlaxAutoModelForCausalLM"),BNe=l(),mr=a("div"),F(b9.$$.fragment),YLr=l(),Sc=a("p"),KLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=a("a"),ZLr=o("from_pretrained()"),e8r=o(" class method or the "),PJ=a("a"),o8r=o("from_config()"),r8r=o(` class
method.`),t8r=l(),v9=a("p"),a8r=o("This class cannot be instantiated directly using "),_Me=a("code"),n8r=o("__init__()"),s8r=o(" (throws an error)."),l8r=l(),Ot=a("div"),F(F9.$$.fragment),i8r=l(),uMe=a("p"),d8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c8r=l(),Rc=a("p"),f8r=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),m8r=o("not"),g8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),h8r=o("from_pretrained()"),p8r=o(" to load the model weights."),_8r=l(),F(O5.$$.fragment),u8r=l(),Dr=a("div"),F(T9.$$.fragment),b8r=l(),vMe=a("p"),v8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F8r=l(),pn=a("p"),T8r=o("The model class to instantiate is selected based on the "),FMe=a("code"),M8r=o("model_type"),E8r=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),A8r=o("pretrained_model_name_or_path"),y8r=o(":"),L8r=l(),Le=a("ul"),V5=a("li"),EMe=a("strong"),x8r=o("bart"),$8r=o(" \u2014 "),IJ=a("a"),k8r=o("FlaxBartForCausalLM"),S8r=o(" (BART model)"),R8r=l(),X5=a("li"),CMe=a("strong"),P8r=o("bert"),B8r=o(" \u2014 "),qJ=a("a"),I8r=o("FlaxBertForCausalLM"),q8r=o(" (BERT model)"),N8r=l(),z5=a("li"),wMe=a("strong"),j8r=o("big_bird"),D8r=o(" \u2014 "),NJ=a("a"),G8r=o("FlaxBigBirdForCausalLM"),O8r=o(" (BigBird model)"),V8r=l(),W5=a("li"),AMe=a("strong"),X8r=o("electra"),z8r=o(" \u2014 "),jJ=a("a"),W8r=o("FlaxElectraForCausalLM"),Q8r=o(" (ELECTRA model)"),H8r=l(),Q5=a("li"),yMe=a("strong"),U8r=o("gpt2"),J8r=o(" \u2014 "),DJ=a("a"),Y8r=o("FlaxGPT2LMHeadModel"),K8r=o(" (OpenAI GPT-2 model)"),Z8r=l(),H5=a("li"),LMe=a("strong"),e9r=o("gpt_neo"),o9r=o(" \u2014 "),GJ=a("a"),r9r=o("FlaxGPTNeoForCausalLM"),t9r=o(" (GPT Neo model)"),a9r=l(),U5=a("li"),xMe=a("strong"),n9r=o("gptj"),s9r=o(" \u2014 "),OJ=a("a"),l9r=o("FlaxGPTJForCausalLM"),i9r=o(" (GPT-J model)"),d9r=l(),J5=a("li"),$Me=a("strong"),c9r=o("opt"),f9r=o(" \u2014 "),VJ=a("a"),m9r=o("FlaxOPTForCausalLM"),g9r=o(" (OPT model)"),h9r=l(),Y5=a("li"),kMe=a("strong"),p9r=o("roberta"),_9r=o(" \u2014 "),XJ=a("a"),u9r=o("FlaxRobertaForCausalLM"),b9r=o(" (RoBERTa model)"),v9r=l(),K5=a("li"),SMe=a("strong"),F9r=o("xglm"),T9r=o(" \u2014 "),zJ=a("a"),M9r=o("FlaxXGLMForCausalLM"),E9r=o(" (XGLM model)"),C9r=l(),F(Z5.$$.fragment),INe=l(),Pc=a("h2"),e3=a("a"),RMe=a("span"),F(M9.$$.fragment),w9r=l(),PMe=a("span"),A9r=o("FlaxAutoModelForPreTraining"),qNe=l(),gr=a("div"),F(E9.$$.fragment),y9r=l(),Bc=a("p"),L9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WJ=a("a"),x9r=o("from_pretrained()"),$9r=o(" class method or the "),QJ=a("a"),k9r=o("from_config()"),S9r=o(` class
method.`),R9r=l(),C9=a("p"),P9r=o("This class cannot be instantiated directly using "),BMe=a("code"),B9r=o("__init__()"),I9r=o(" (throws an error)."),q9r=l(),Vt=a("div"),F(w9.$$.fragment),N9r=l(),IMe=a("p"),j9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D9r=l(),Ic=a("p"),G9r=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),O9r=o("not"),V9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),X9r=o("from_pretrained()"),z9r=o(" to load the model weights."),W9r=l(),F(o3.$$.fragment),Q9r=l(),Gr=a("div"),F(A9.$$.fragment),H9r=l(),NMe=a("p"),U9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J9r=l(),_n=a("p"),Y9r=o("The model class to instantiate is selected based on the "),jMe=a("code"),K9r=o("model_type"),Z9r=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(":"),axr=l(),Me=a("ul"),r3=a("li"),OMe=a("strong"),nxr=o("albert"),sxr=o(" \u2014 "),UJ=a("a"),lxr=o("FlaxAlbertForPreTraining"),ixr=o(" (ALBERT model)"),dxr=l(),t3=a("li"),VMe=a("strong"),cxr=o("bart"),fxr=o(" \u2014 "),JJ=a("a"),mxr=o("FlaxBartForConditionalGeneration"),gxr=o(" (BART model)"),hxr=l(),a3=a("li"),XMe=a("strong"),pxr=o("bert"),_xr=o(" \u2014 "),YJ=a("a"),uxr=o("FlaxBertForPreTraining"),bxr=o(" (BERT model)"),vxr=l(),n3=a("li"),zMe=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),KJ=a("a"),Mxr=o("FlaxBigBirdForPreTraining"),Exr=o(" (BigBird model)"),Cxr=l(),s3=a("li"),WMe=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),ZJ=a("a"),yxr=o("FlaxElectraForPreTraining"),Lxr=o(" (ELECTRA model)"),xxr=l(),l3=a("li"),QMe=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),eY=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Pxr=l(),i3=a("li"),HMe=a("strong"),Bxr=o("mt5"),Ixr=o(" \u2014 "),oY=a("a"),qxr=o("FlaxMT5ForConditionalGeneration"),Nxr=o(" (mT5 model)"),jxr=l(),d3=a("li"),UMe=a("strong"),Dxr=o("roberta"),Gxr=o(" \u2014 "),rY=a("a"),Oxr=o("FlaxRobertaForMaskedLM"),Vxr=o(" (RoBERTa model)"),Xxr=l(),c3=a("li"),JMe=a("strong"),zxr=o("roformer"),Wxr=o(" \u2014 "),tY=a("a"),Qxr=o("FlaxRoFormerForMaskedLM"),Hxr=o(" (RoFormer model)"),Uxr=l(),f3=a("li"),YMe=a("strong"),Jxr=o("t5"),Yxr=o(" \u2014 "),aY=a("a"),Kxr=o("FlaxT5ForConditionalGeneration"),Zxr=o(" (T5 model)"),e$r=l(),m3=a("li"),KMe=a("strong"),o$r=o("wav2vec2"),r$r=o(" \u2014 "),nY=a("a"),t$r=o("FlaxWav2Vec2ForPreTraining"),a$r=o(" (Wav2Vec2 model)"),n$r=l(),g3=a("li"),ZMe=a("strong"),s$r=o("xlm-roberta"),l$r=o(" \u2014 "),sY=a("a"),i$r=o("FlaxXLMRobertaForMaskedLM"),d$r=o(" (XLM-RoBERTa model)"),c$r=l(),F(h3.$$.fragment),NNe=l(),qc=a("h2"),p3=a("a"),e4e=a("span"),F(y9.$$.fragment),f$r=l(),o4e=a("span"),m$r=o("FlaxAutoModelForMaskedLM"),jNe=l(),hr=a("div"),F(L9.$$.fragment),g$r=l(),Nc=a("p"),h$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lY=a("a"),p$r=o("from_pretrained()"),_$r=o(" class method or the "),iY=a("a"),u$r=o("from_config()"),b$r=o(` class
method.`),v$r=l(),x9=a("p"),F$r=o("This class cannot be instantiated directly using "),r4e=a("code"),T$r=o("__init__()"),M$r=o(" (throws an error)."),E$r=l(),Xt=a("div"),F($9.$$.fragment),C$r=l(),t4e=a("p"),w$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A$r=l(),jc=a("p"),y$r=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),L$r=o("not"),x$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),$$r=o("from_pretrained()"),k$r=o(" to load the model weights."),S$r=l(),F(_3.$$.fragment),R$r=l(),Or=a("div"),F(k9.$$.fragment),P$r=l(),n4e=a("p"),B$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I$r=l(),un=a("p"),q$r=o("The model class to instantiate is selected based on the "),s4e=a("code"),N$r=o("model_type"),j$r=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),D$r=o("pretrained_model_name_or_path"),G$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),O$r=o("pretrained_model_name_or_path"),V$r=o(":"),X$r=l(),xe=a("ul"),u3=a("li"),d4e=a("strong"),z$r=o("albert"),W$r=o(" \u2014 "),cY=a("a"),Q$r=o("FlaxAlbertForMaskedLM"),H$r=o(" (ALBERT model)"),U$r=l(),b3=a("li"),c4e=a("strong"),J$r=o("bart"),Y$r=o(" \u2014 "),fY=a("a"),K$r=o("FlaxBartForConditionalGeneration"),Z$r=o(" (BART model)"),ekr=l(),v3=a("li"),f4e=a("strong"),okr=o("bert"),rkr=o(" \u2014 "),mY=a("a"),tkr=o("FlaxBertForMaskedLM"),akr=o(" (BERT model)"),nkr=l(),F3=a("li"),m4e=a("strong"),skr=o("big_bird"),lkr=o(" \u2014 "),gY=a("a"),ikr=o("FlaxBigBirdForMaskedLM"),dkr=o(" (BigBird model)"),ckr=l(),T3=a("li"),g4e=a("strong"),fkr=o("distilbert"),mkr=o(" \u2014 "),hY=a("a"),gkr=o("FlaxDistilBertForMaskedLM"),hkr=o(" (DistilBERT model)"),pkr=l(),M3=a("li"),h4e=a("strong"),_kr=o("electra"),ukr=o(" \u2014 "),pY=a("a"),bkr=o("FlaxElectraForMaskedLM"),vkr=o(" (ELECTRA model)"),Fkr=l(),E3=a("li"),p4e=a("strong"),Tkr=o("mbart"),Mkr=o(" \u2014 "),_Y=a("a"),Ekr=o("FlaxMBartForConditionalGeneration"),Ckr=o(" (mBART model)"),wkr=l(),C3=a("li"),_4e=a("strong"),Akr=o("roberta"),ykr=o(" \u2014 "),uY=a("a"),Lkr=o("FlaxRobertaForMaskedLM"),xkr=o(" (RoBERTa model)"),$kr=l(),w3=a("li"),u4e=a("strong"),kkr=o("roformer"),Skr=o(" \u2014 "),bY=a("a"),Rkr=o("FlaxRoFormerForMaskedLM"),Pkr=o(" (RoFormer model)"),Bkr=l(),A3=a("li"),b4e=a("strong"),Ikr=o("xlm-roberta"),qkr=o(" \u2014 "),vY=a("a"),Nkr=o("FlaxXLMRobertaForMaskedLM"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),F(y3.$$.fragment),DNe=l(),Dc=a("h2"),L3=a("a"),v4e=a("span"),F(S9.$$.fragment),Gkr=l(),F4e=a("span"),Okr=o("FlaxAutoModelForSeq2SeqLM"),GNe=l(),pr=a("div"),F(R9.$$.fragment),Vkr=l(),Gc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FY=a("a"),zkr=o("from_pretrained()"),Wkr=o(" class method or the "),TY=a("a"),Qkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),P9=a("p"),Jkr=o("This class cannot be instantiated directly using "),T4e=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),zt=a("div"),F(B9.$$.fragment),eSr=l(),M4e=a("p"),oSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rSr=l(),Oc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(x3.$$.fragment),dSr=l(),Vr=a("div"),F(I9.$$.fragment),cSr=l(),C4e=a("p"),fSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mSr=l(),bn=a("p"),gSr=o("The model class to instantiate is selected based on the "),w4e=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Pe=a("ul"),$3=a("li"),L4e=a("strong"),TSr=o("bart"),MSr=o(" \u2014 "),EY=a("a"),ESr=o("FlaxBartForConditionalGeneration"),CSr=o(" (BART model)"),wSr=l(),k3=a("li"),x4e=a("strong"),ASr=o("blenderbot"),ySr=o(" \u2014 "),CY=a("a"),LSr=o("FlaxBlenderbotForConditionalGeneration"),xSr=o(" (Blenderbot model)"),$Sr=l(),S3=a("li"),$4e=a("strong"),kSr=o("blenderbot-small"),SSr=o(" \u2014 "),wY=a("a"),RSr=o("FlaxBlenderbotSmallForConditionalGeneration"),PSr=o(" (BlenderbotSmall model)"),BSr=l(),R3=a("li"),k4e=a("strong"),ISr=o("encoder-decoder"),qSr=o(" \u2014 "),AY=a("a"),NSr=o("FlaxEncoderDecoderModel"),jSr=o(" (Encoder decoder model)"),DSr=l(),P3=a("li"),S4e=a("strong"),GSr=o("marian"),OSr=o(" \u2014 "),yY=a("a"),VSr=o("FlaxMarianMTModel"),XSr=o(" (Marian model)"),zSr=l(),B3=a("li"),R4e=a("strong"),WSr=o("mbart"),QSr=o(" \u2014 "),LY=a("a"),HSr=o("FlaxMBartForConditionalGeneration"),USr=o(" (mBART model)"),JSr=l(),I3=a("li"),P4e=a("strong"),YSr=o("mt5"),KSr=o(" \u2014 "),xY=a("a"),ZSr=o("FlaxMT5ForConditionalGeneration"),eRr=o(" (mT5 model)"),oRr=l(),q3=a("li"),B4e=a("strong"),rRr=o("pegasus"),tRr=o(" \u2014 "),$Y=a("a"),aRr=o("FlaxPegasusForConditionalGeneration"),nRr=o(" (Pegasus model)"),sRr=l(),N3=a("li"),I4e=a("strong"),lRr=o("t5"),iRr=o(" \u2014 "),kY=a("a"),dRr=o("FlaxT5ForConditionalGeneration"),cRr=o(" (T5 model)"),fRr=l(),F(j3.$$.fragment),ONe=l(),Vc=a("h2"),D3=a("a"),q4e=a("span"),F(q9.$$.fragment),mRr=l(),N4e=a("span"),gRr=o("FlaxAutoModelForSequenceClassification"),VNe=l(),_r=a("div"),F(N9.$$.fragment),hRr=l(),Xc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SY=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),RY=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),j9=a("p"),TRr=o("This class cannot be instantiated directly using "),j4e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Wt=a("div"),F(D9.$$.fragment),wRr=l(),D4e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yRr=l(),zc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(G3.$$.fragment),PRr=l(),Xr=a("div"),F(G9.$$.fragment),BRr=l(),O4e=a("p"),IRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qRr=l(),vn=a("p"),NRr=o("The model class to instantiate is selected based on the "),V4e=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),$e=a("ul"),O3=a("li"),W4e=a("strong"),WRr=o("albert"),QRr=o(" \u2014 "),BY=a("a"),HRr=o("FlaxAlbertForSequenceClassification"),URr=o(" (ALBERT model)"),JRr=l(),V3=a("li"),Q4e=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),IY=a("a"),ZRr=o("FlaxBartForSequenceClassification"),ePr=o(" (BART model)"),oPr=l(),X3=a("li"),H4e=a("strong"),rPr=o("bert"),tPr=o(" \u2014 "),qY=a("a"),aPr=o("FlaxBertForSequenceClassification"),nPr=o(" (BERT model)"),sPr=l(),z3=a("li"),U4e=a("strong"),lPr=o("big_bird"),iPr=o(" \u2014 "),NY=a("a"),dPr=o("FlaxBigBirdForSequenceClassification"),cPr=o(" (BigBird model)"),fPr=l(),W3=a("li"),J4e=a("strong"),mPr=o("distilbert"),gPr=o(" \u2014 "),jY=a("a"),hPr=o("FlaxDistilBertForSequenceClassification"),pPr=o(" (DistilBERT model)"),_Pr=l(),Q3=a("li"),Y4e=a("strong"),uPr=o("electra"),bPr=o(" \u2014 "),DY=a("a"),vPr=o("FlaxElectraForSequenceClassification"),FPr=o(" (ELECTRA model)"),TPr=l(),H3=a("li"),K4e=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),GY=a("a"),CPr=o("FlaxMBartForSequenceClassification"),wPr=o(" (mBART model)"),APr=l(),U3=a("li"),Z4e=a("strong"),yPr=o("roberta"),LPr=o(" \u2014 "),OY=a("a"),xPr=o("FlaxRobertaForSequenceClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),J3=a("li"),eEe=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),VY=a("a"),PPr=o("FlaxRoFormerForSequenceClassification"),BPr=o(" (RoFormer model)"),IPr=l(),Y3=a("li"),oEe=a("strong"),qPr=o("xlm-roberta"),NPr=o(" \u2014 "),XY=a("a"),jPr=o("FlaxXLMRobertaForSequenceClassification"),DPr=o(" (XLM-RoBERTa model)"),GPr=l(),F(K3.$$.fragment),XNe=l(),Wc=a("h2"),Z3=a("a"),rEe=a("span"),F(O9.$$.fragment),OPr=l(),tEe=a("span"),VPr=o("FlaxAutoModelForQuestionAnswering"),zNe=l(),ur=a("div"),F(V9.$$.fragment),XPr=l(),Qc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),WY=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),X9=a("p"),YPr=o("This class cannot be instantiated directly using "),aEe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Qt=a("div"),F(z9.$$.fragment),oBr=l(),nEe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tBr=l(),Hc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(ew.$$.fragment),cBr=l(),zr=a("div"),F(W9.$$.fragment),fBr=l(),lEe=a("p"),mBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gBr=l(),Fn=a("p"),hBr=o("The model class to instantiate is selected based on the "),iEe=a("code"),pBr=o("model_type"),_Br=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),uBr=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),ke=a("ul"),ow=a("li"),fEe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),HY=a("a"),CBr=o("FlaxAlbertForQuestionAnswering"),wBr=o(" (ALBERT model)"),ABr=l(),rw=a("li"),mEe=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),UY=a("a"),xBr=o("FlaxBartForQuestionAnswering"),$Br=o(" (BART model)"),kBr=l(),tw=a("li"),gEe=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),JY=a("a"),PBr=o("FlaxBertForQuestionAnswering"),BBr=o(" (BERT model)"),IBr=l(),aw=a("li"),hEe=a("strong"),qBr=o("big_bird"),NBr=o(" \u2014 "),YY=a("a"),jBr=o("FlaxBigBirdForQuestionAnswering"),DBr=o(" (BigBird model)"),GBr=l(),nw=a("li"),pEe=a("strong"),OBr=o("distilbert"),VBr=o(" \u2014 "),KY=a("a"),XBr=o("FlaxDistilBertForQuestionAnswering"),zBr=o(" (DistilBERT model)"),WBr=l(),sw=a("li"),_Ee=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),ZY=a("a"),UBr=o("FlaxElectraForQuestionAnswering"),JBr=o(" (ELECTRA model)"),YBr=l(),lw=a("li"),uEe=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),eK=a("a"),eIr=o("FlaxMBartForQuestionAnswering"),oIr=o(" (mBART model)"),rIr=l(),iw=a("li"),bEe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),oK=a("a"),nIr=o("FlaxRobertaForQuestionAnswering"),sIr=o(" (RoBERTa model)"),lIr=l(),dw=a("li"),vEe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),rK=a("a"),cIr=o("FlaxRoFormerForQuestionAnswering"),fIr=o(" (RoFormer model)"),mIr=l(),cw=a("li"),FEe=a("strong"),gIr=o("xlm-roberta"),hIr=o(" \u2014 "),tK=a("a"),pIr=o("FlaxXLMRobertaForQuestionAnswering"),_Ir=o(" (XLM-RoBERTa model)"),uIr=l(),F(fw.$$.fragment),WNe=l(),Uc=a("h2"),mw=a("a"),TEe=a("span"),F(Q9.$$.fragment),bIr=l(),MEe=a("span"),vIr=o("FlaxAutoModelForTokenClassification"),QNe=l(),br=a("div"),F(H9.$$.fragment),FIr=l(),Jc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),nK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),U9=a("p"),yIr=o("This class cannot be instantiated directly using "),EEe=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Ht=a("div"),F(J9.$$.fragment),kIr=l(),CEe=a("p"),SIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RIr=l(),Yc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),qIr=o("from_pretrained()"),NIr=o(" to load the model weights."),jIr=l(),F(gw.$$.fragment),DIr=l(),Wr=a("div"),F(Y9.$$.fragment),GIr=l(),AEe=a("p"),OIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VIr=l(),Tn=a("p"),XIr=o("The model class to instantiate is selected based on the "),yEe=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),LEe=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),Ge=a("ul"),hw=a("li"),$Ee=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),lK=a("a"),eqr=o("FlaxAlbertForTokenClassification"),oqr=o(" (ALBERT model)"),rqr=l(),pw=a("li"),kEe=a("strong"),tqr=o("bert"),aqr=o(" \u2014 "),iK=a("a"),nqr=o("FlaxBertForTokenClassification"),sqr=o(" (BERT model)"),lqr=l(),_w=a("li"),SEe=a("strong"),iqr=o("big_bird"),dqr=o(" \u2014 "),dK=a("a"),cqr=o("FlaxBigBirdForTokenClassification"),fqr=o(" (BigBird model)"),mqr=l(),uw=a("li"),REe=a("strong"),gqr=o("distilbert"),hqr=o(" \u2014 "),cK=a("a"),pqr=o("FlaxDistilBertForTokenClassification"),_qr=o(" (DistilBERT model)"),uqr=l(),bw=a("li"),PEe=a("strong"),bqr=o("electra"),vqr=o(" \u2014 "),fK=a("a"),Fqr=o("FlaxElectraForTokenClassification"),Tqr=o(" (ELECTRA model)"),Mqr=l(),vw=a("li"),BEe=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),mK=a("a"),wqr=o("FlaxRobertaForTokenClassification"),Aqr=o(" (RoBERTa model)"),yqr=l(),Fw=a("li"),IEe=a("strong"),Lqr=o("roformer"),xqr=o(" \u2014 "),gK=a("a"),$qr=o("FlaxRoFormerForTokenClassification"),kqr=o(" (RoFormer model)"),Sqr=l(),Tw=a("li"),qEe=a("strong"),Rqr=o("xlm-roberta"),Pqr=o(" \u2014 "),hK=a("a"),Bqr=o("FlaxXLMRobertaForTokenClassification"),Iqr=o(" (XLM-RoBERTa model)"),qqr=l(),F(Mw.$$.fragment),HNe=l(),Kc=a("h2"),Ew=a("a"),NEe=a("span"),F(K9.$$.fragment),Nqr=l(),jEe=a("span"),jqr=o("FlaxAutoModelForMultipleChoice"),UNe=l(),vr=a("div"),F(Z9.$$.fragment),Dqr=l(),Zc=a("p"),Gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=a("a"),Oqr=o("from_pretrained()"),Vqr=o(" class method or the "),_K=a("a"),Xqr=o("from_config()"),zqr=o(` class
method.`),Wqr=l(),ex=a("p"),Qqr=o("This class cannot be instantiated directly using "),DEe=a("code"),Hqr=o("__init__()"),Uqr=o(" (throws an error)."),Jqr=l(),Ut=a("div"),F(ox.$$.fragment),Yqr=l(),GEe=a("p"),Kqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zqr=l(),ef=a("p"),eNr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),oNr=o("not"),rNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),tNr=o("from_pretrained()"),aNr=o(" to load the model weights."),nNr=l(),F(Cw.$$.fragment),sNr=l(),Qr=a("div"),F(rx.$$.fragment),lNr=l(),VEe=a("p"),iNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNr=l(),Mn=a("p"),cNr=o("The model class to instantiate is selected based on the "),XEe=a("code"),fNr=o("model_type"),mNr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=a("code"),pNr=o("pretrained_model_name_or_path"),_Nr=o(":"),uNr=l(),Oe=a("ul"),ww=a("li"),QEe=a("strong"),bNr=o("albert"),vNr=o(" \u2014 "),bK=a("a"),FNr=o("FlaxAlbertForMultipleChoice"),TNr=o(" (ALBERT model)"),MNr=l(),Aw=a("li"),HEe=a("strong"),ENr=o("bert"),CNr=o(" \u2014 "),vK=a("a"),wNr=o("FlaxBertForMultipleChoice"),ANr=o(" (BERT model)"),yNr=l(),yw=a("li"),UEe=a("strong"),LNr=o("big_bird"),xNr=o(" \u2014 "),FK=a("a"),$Nr=o("FlaxBigBirdForMultipleChoice"),kNr=o(" (BigBird model)"),SNr=l(),Lw=a("li"),JEe=a("strong"),RNr=o("distilbert"),PNr=o(" \u2014 "),TK=a("a"),BNr=o("FlaxDistilBertForMultipleChoice"),INr=o(" (DistilBERT model)"),qNr=l(),xw=a("li"),YEe=a("strong"),NNr=o("electra"),jNr=o(" \u2014 "),MK=a("a"),DNr=o("FlaxElectraForMultipleChoice"),GNr=o(" (ELECTRA model)"),ONr=l(),$w=a("li"),KEe=a("strong"),VNr=o("roberta"),XNr=o(" \u2014 "),EK=a("a"),zNr=o("FlaxRobertaForMultipleChoice"),WNr=o(" (RoBERTa model)"),QNr=l(),kw=a("li"),ZEe=a("strong"),HNr=o("roformer"),UNr=o(" \u2014 "),CK=a("a"),JNr=o("FlaxRoFormerForMultipleChoice"),YNr=o(" (RoFormer model)"),KNr=l(),Sw=a("li"),eCe=a("strong"),ZNr=o("xlm-roberta"),ejr=o(" \u2014 "),wK=a("a"),ojr=o("FlaxXLMRobertaForMultipleChoice"),rjr=o(" (XLM-RoBERTa model)"),tjr=l(),F(Rw.$$.fragment),JNe=l(),of=a("h2"),Pw=a("a"),oCe=a("span"),F(tx.$$.fragment),ajr=l(),rCe=a("span"),njr=o("FlaxAutoModelForNextSentencePrediction"),YNe=l(),Fr=a("div"),F(ax.$$.fragment),sjr=l(),rf=a("p"),ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AK=a("a"),ijr=o("from_pretrained()"),djr=o(" class method or the "),yK=a("a"),cjr=o("from_config()"),fjr=o(` class
method.`),mjr=l(),nx=a("p"),gjr=o("This class cannot be instantiated directly using "),tCe=a("code"),hjr=o("__init__()"),pjr=o(" (throws an error)."),_jr=l(),Jt=a("div"),F(sx.$$.fragment),ujr=l(),aCe=a("p"),bjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vjr=l(),tf=a("p"),Fjr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),Tjr=o("not"),Mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" to load the model weights."),wjr=l(),F(Bw.$$.fragment),Ajr=l(),Hr=a("div"),F(lx.$$.fragment),yjr=l(),sCe=a("p"),Ljr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xjr=l(),En=a("p"),$jr=o("The model class to instantiate is selected based on the "),lCe=a("code"),kjr=o("model_type"),Sjr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),Rjr=o("pretrained_model_name_or_path"),Pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(":"),qjr=l(),cCe=a("ul"),Iw=a("li"),fCe=a("strong"),Njr=o("bert"),jjr=o(" \u2014 "),xK=a("a"),Djr=o("FlaxBertForNextSentencePrediction"),Gjr=o(" (BERT model)"),Ojr=l(),F(qw.$$.fragment),KNe=l(),af=a("h2"),Nw=a("a"),mCe=a("span"),F(ix.$$.fragment),Vjr=l(),gCe=a("span"),Xjr=o("FlaxAutoModelForImageClassification"),ZNe=l(),Tr=a("div"),F(dx.$$.fragment),zjr=l(),nf=a("p"),Wjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$K=a("a"),Qjr=o("from_pretrained()"),Hjr=o(" class method or the "),kK=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),cx=a("p"),Kjr=o("This class cannot be instantiated directly using "),hCe=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Yt=a("div"),F(fx.$$.fragment),rDr=l(),pCe=a("p"),tDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aDr=l(),sf=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(jw.$$.fragment),fDr=l(),Ur=a("div"),F(mx.$$.fragment),mDr=l(),uCe=a("p"),gDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hDr=l(),Cn=a("p"),pDr=o("The model class to instantiate is selected based on the "),bCe=a("code"),_Dr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),gx=a("ul"),Dw=a("li"),TCe=a("strong"),EDr=o("beit"),CDr=o(" \u2014 "),RK=a("a"),wDr=o("FlaxBeitForImageClassification"),ADr=o(" (BEiT model)"),yDr=l(),Gw=a("li"),MCe=a("strong"),LDr=o("vit"),xDr=o(" \u2014 "),PK=a("a"),$Dr=o("FlaxViTForImageClassification"),kDr=o(" (ViT model)"),SDr=l(),F(Ow.$$.fragment),eje=l(),lf=a("h2"),Vw=a("a"),ECe=a("span"),F(hx.$$.fragment),RDr=l(),CCe=a("span"),PDr=o("FlaxAutoModelForVision2Seq"),oje=l(),Mr=a("div"),F(px.$$.fragment),BDr=l(),df=a("p"),IDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BK=a("a"),qDr=o("from_pretrained()"),NDr=o(" class method or the "),IK=a("a"),jDr=o("from_config()"),DDr=o(` class
method.`),GDr=l(),_x=a("p"),ODr=o("This class cannot be instantiated directly using "),wCe=a("code"),VDr=o("__init__()"),XDr=o(" (throws an error)."),zDr=l(),Kt=a("div"),F(ux.$$.fragment),WDr=l(),ACe=a("p"),QDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HDr=l(),cf=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),JDr=o("not"),YDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),KDr=o("from_pretrained()"),ZDr=o(" to load the model weights."),eGr=l(),F(Xw.$$.fragment),oGr=l(),Jr=a("div"),F(bx.$$.fragment),rGr=l(),LCe=a("p"),tGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aGr=l(),wn=a("p"),nGr=o("The model class to instantiate is selected based on the "),xCe=a("code"),sGr=o("model_type"),lGr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),cGr=o("pretrained_model_name_or_path"),fGr=o(":"),mGr=l(),SCe=a("ul"),zw=a("li"),RCe=a("strong"),gGr=o("vision-encoder-decoder"),hGr=o(" \u2014 "),NK=a("a"),pGr=o("FlaxVisionEncoderDecoderModel"),_Gr=o(" (Vision Encoder decoder model)"),uGr=l(),F(Ww.$$.fragment),this.h()},l(f){const u=C8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vx=s(p);m=n(vx,"A",{id:!0,class:!0,href:!0});var PCe=s(m);_=n(PCe,"SPAN",{});var BCe=s(_);T(d.$$.fragment,BCe),BCe.forEach(t),PCe.forEach(t),h=i(vx),Mo=n(vx,"SPAN",{});var ICe=s(Mo);ci=r(ICe,"Auto Classes"),ICe.forEach(t),vx.forEach(t),hf=i(f),rt=n(f,"P",{});var Fx=s(rt);fi=r(Fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Fx,"CODE",{});var qCe=s(mi);c6=r(qCe,"from_pretrained()"),qCe.forEach(t),pf=r(Fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var NCe=s(yn);f6=r(NCe,"AutoConfig"),NCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var jCe=s(xn);m6=r(jCe,"AutoModel"),jCe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var DCe=s($n);g6=r(DCe,"AutoTokenizer"),DCe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Tx=s(Ae);k$=r(Tx,"will create a model that is an instance of "),_i=n(Tx,"A",{href:!0});var GCe=s(_i);S$=r(GCe,"BertModel"),GCe.forEach(t),R$=r(Tx,"."),Tx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Mx=s(wa);P$=r(Mx,"There is one class of "),uf=n(Mx,"CODE",{});var OCe=s(uf);B$=r(OCe,"AutoModel"),OCe.forEach(t),cGe=r(Mx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mx.forEach(t),ZIe=i(f),ui=n(f,"H2",{class:!0});var Ex=s(ui);bf=n(Ex,"A",{id:!0,class:!0,href:!0});var VCe=s(bf);kee=n(VCe,"SPAN",{});var XCe=s(kee);T(h6.$$.fragment,XCe),XCe.forEach(t),VCe.forEach(t),fGe=i(Ex),See=n(Ex,"SPAN",{});var zCe=s(See);mGe=r(zCe,"Extending the Auto Classes"),zCe.forEach(t),Ex.forEach(t),eqe=i(f),kn=n(f,"P",{});var ff=s(kn);gGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ree=n(ff,"CODE",{});var WCe=s(Ree);hGe=r(WCe,"NewModel"),WCe.forEach(t),pGe=r(ff,", make sure you have a "),Pee=n(ff,"CODE",{});var QCe=s(Pee);_Ge=r(QCe,"NewModelConfig"),QCe.forEach(t),uGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),oqe=i(f),T(p6.$$.fragment,f),rqe=i(f),I$=n(f,"P",{});var HCe=s(I$);bGe=r(HCe,"You will then be able to use the auto classes like you would usually do!"),HCe.forEach(t),tqe=i(f),T(vf.$$.fragment,f),aqe=i(f),bi=n(f,"H2",{class:!0});var Cx=s(bi);Ff=n(Cx,"A",{id:!0,class:!0,href:!0});var UCe=s(Ff);Bee=n(UCe,"SPAN",{});var JCe=s(Bee);T(_6.$$.fragment,JCe),JCe.forEach(t),UCe.forEach(t),vGe=i(Cx),Iee=n(Cx,"SPAN",{});var YCe=s(Iee);FGe=r(YCe,"AutoConfig"),YCe.forEach(t),Cx.forEach(t),nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(u6.$$.fragment,et),TGe=i(et),b6=n(et,"P",{});var wx=s(b6);MGe=r(wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=n(wx,"A",{href:!0});var KCe=s(q$);EGe=r(KCe,"from_pretrained()"),KCe.forEach(t),CGe=r(wx," class method."),wx.forEach(t),wGe=i(et),v6=n(et,"P",{});var Ax=s(v6);AGe=r(Ax,"This class cannot be instantiated directly using "),qee=n(Ax,"CODE",{});var ZCe=s(qee);yGe=r(ZCe,"__init__()"),ZCe.forEach(t),LGe=r(Ax," (throws an error)."),Ax.forEach(t),xGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(F6.$$.fragment,ot),$Ge=i(ot),Nee=n(ot,"P",{});var e5e=s(Nee);kGe=r(e5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e5e.forEach(t),SGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);RGe=r(mf,"The configuration class to instantiate is selected based on the "),jee=n(mf,"CODE",{});var o5e=s(jee);PGe=r(o5e,"model_type"),o5e.forEach(t),BGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Dee=n(mf,"CODE",{});var r5e=s(Dee);IGe=r(r5e,"pretrained_model_name_or_path"),r5e.forEach(t),qGe=r(mf,":"),mf.forEach(t),NGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Qw=s(Tf);Gee=n(Qw,"STRONG",{});var t5e=s(Gee);jGe=r(t5e,"albert"),t5e.forEach(t),DGe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var a5e=s(N$);GGe=r(a5e,"AlbertConfig"),a5e.forEach(t),OGe=r(Qw," (ALBERT model)"),Qw.forEach(t),VGe=i(y),Mf=n(y,"LI",{});var Hw=s(Mf);Oee=n(Hw,"STRONG",{});var n5e=s(Oee);XGe=r(n5e,"bart"),n5e.forEach(t),zGe=r(Hw," \u2014 "),j$=n(Hw,"A",{href:!0});var s5e=s(j$);WGe=r(s5e,"BartConfig"),s5e.forEach(t),QGe=r(Hw," (BART model)"),Hw.forEach(t),HGe=i(y),Ef=n(y,"LI",{});var Uw=s(Ef);Vee=n(Uw,"STRONG",{});var l5e=s(Vee);UGe=r(l5e,"beit"),l5e.forEach(t),JGe=r(Uw," \u2014 "),D$=n(Uw,"A",{href:!0});var i5e=s(D$);YGe=r(i5e,"BeitConfig"),i5e.forEach(t),KGe=r(Uw," (BEiT model)"),Uw.forEach(t),ZGe=i(y),Cf=n(y,"LI",{});var Jw=s(Cf);Xee=n(Jw,"STRONG",{});var d5e=s(Xee);eOe=r(d5e,"bert"),d5e.forEach(t),oOe=r(Jw," \u2014 "),G$=n(Jw,"A",{href:!0});var c5e=s(G$);rOe=r(c5e,"BertConfig"),c5e.forEach(t),tOe=r(Jw," (BERT model)"),Jw.forEach(t),aOe=i(y),wf=n(y,"LI",{});var Yw=s(wf);zee=n(Yw,"STRONG",{});var f5e=s(zee);nOe=r(f5e,"bert-generation"),f5e.forEach(t),sOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var m5e=s(O$);lOe=r(m5e,"BertGenerationConfig"),m5e.forEach(t),iOe=r(Yw," (Bert Generation model)"),Yw.forEach(t),dOe=i(y),Af=n(y,"LI",{});var Kw=s(Af);Wee=n(Kw,"STRONG",{});var g5e=s(Wee);cOe=r(g5e,"big_bird"),g5e.forEach(t),fOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var h5e=s(V$);mOe=r(h5e,"BigBirdConfig"),h5e.forEach(t),gOe=r(Kw," (BigBird model)"),Kw.forEach(t),hOe=i(y),yf=n(y,"LI",{});var Zw=s(yf);Qee=n(Zw,"STRONG",{});var p5e=s(Qee);pOe=r(p5e,"bigbird_pegasus"),p5e.forEach(t),_Oe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var _5e=s(X$);uOe=r(_5e,"BigBirdPegasusConfig"),_5e.forEach(t),bOe=r(Zw," (BigBirdPegasus model)"),Zw.forEach(t),vOe=i(y),Lf=n(y,"LI",{});var e0=s(Lf);Hee=n(e0,"STRONG",{});var u5e=s(Hee);FOe=r(u5e,"blenderbot"),u5e.forEach(t),TOe=r(e0," \u2014 "),z$=n(e0,"A",{href:!0});var b5e=s(z$);MOe=r(b5e,"BlenderbotConfig"),b5e.forEach(t),EOe=r(e0," (Blenderbot model)"),e0.forEach(t),COe=i(y),xf=n(y,"LI",{});var o0=s(xf);Uee=n(o0,"STRONG",{});var v5e=s(Uee);wOe=r(v5e,"blenderbot-small"),v5e.forEach(t),AOe=r(o0," \u2014 "),W$=n(o0,"A",{href:!0});var F5e=s(W$);yOe=r(F5e,"BlenderbotSmallConfig"),F5e.forEach(t),LOe=r(o0," (BlenderbotSmall model)"),o0.forEach(t),xOe=i(y),$f=n(y,"LI",{});var r0=s($f);Jee=n(r0,"STRONG",{});var T5e=s(Jee);$Oe=r(T5e,"camembert"),T5e.forEach(t),kOe=r(r0," \u2014 "),Q$=n(r0,"A",{href:!0});var M5e=s(Q$);SOe=r(M5e,"CamembertConfig"),M5e.forEach(t),ROe=r(r0," (CamemBERT model)"),r0.forEach(t),POe=i(y),kf=n(y,"LI",{});var t0=s(kf);Yee=n(t0,"STRONG",{});var E5e=s(Yee);BOe=r(E5e,"canine"),E5e.forEach(t),IOe=r(t0," \u2014 "),H$=n(t0,"A",{href:!0});var C5e=s(H$);qOe=r(C5e,"CanineConfig"),C5e.forEach(t),NOe=r(t0," (Canine model)"),t0.forEach(t),jOe=i(y),Sf=n(y,"LI",{});var a0=s(Sf);Kee=n(a0,"STRONG",{});var w5e=s(Kee);DOe=r(w5e,"clip"),w5e.forEach(t),GOe=r(a0," \u2014 "),U$=n(a0,"A",{href:!0});var A5e=s(U$);OOe=r(A5e,"CLIPConfig"),A5e.forEach(t),VOe=r(a0," (CLIP model)"),a0.forEach(t),XOe=i(y),Rf=n(y,"LI",{});var n0=s(Rf);Zee=n(n0,"STRONG",{});var y5e=s(Zee);zOe=r(y5e,"convbert"),y5e.forEach(t),WOe=r(n0," \u2014 "),J$=n(n0,"A",{href:!0});var L5e=s(J$);QOe=r(L5e,"ConvBertConfig"),L5e.forEach(t),HOe=r(n0," (ConvBERT model)"),n0.forEach(t),UOe=i(y),Pf=n(y,"LI",{});var s0=s(Pf);eoe=n(s0,"STRONG",{});var x5e=s(eoe);JOe=r(x5e,"convnext"),x5e.forEach(t),YOe=r(s0," \u2014 "),Y$=n(s0,"A",{href:!0});var $5e=s(Y$);KOe=r($5e,"ConvNextConfig"),$5e.forEach(t),ZOe=r(s0," (ConvNext model)"),s0.forEach(t),eVe=i(y),Bf=n(y,"LI",{});var l0=s(Bf);ooe=n(l0,"STRONG",{});var k5e=s(ooe);oVe=r(k5e,"ctrl"),k5e.forEach(t),rVe=r(l0," \u2014 "),K$=n(l0,"A",{href:!0});var S5e=s(K$);tVe=r(S5e,"CTRLConfig"),S5e.forEach(t),aVe=r(l0," (CTRL model)"),l0.forEach(t),nVe=i(y),If=n(y,"LI",{});var i0=s(If);roe=n(i0,"STRONG",{});var R5e=s(roe);sVe=r(R5e,"data2vec-audio"),R5e.forEach(t),lVe=r(i0," \u2014 "),Z$=n(i0,"A",{href:!0});var P5e=s(Z$);iVe=r(P5e,"Data2VecAudioConfig"),P5e.forEach(t),dVe=r(i0," (Data2VecAudio model)"),i0.forEach(t),cVe=i(y),qf=n(y,"LI",{});var d0=s(qf);toe=n(d0,"STRONG",{});var B5e=s(toe);fVe=r(B5e,"data2vec-text"),B5e.forEach(t),mVe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var I5e=s(ek);gVe=r(I5e,"Data2VecTextConfig"),I5e.forEach(t),hVe=r(d0," (Data2VecText model)"),d0.forEach(t),pVe=i(y),Nf=n(y,"LI",{});var c0=s(Nf);aoe=n(c0,"STRONG",{});var q5e=s(aoe);_Ve=r(q5e,"data2vec-vision"),q5e.forEach(t),uVe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var N5e=s(ok);bVe=r(N5e,"Data2VecVisionConfig"),N5e.forEach(t),vVe=r(c0," (Data2VecVision model)"),c0.forEach(t),FVe=i(y),jf=n(y,"LI",{});var f0=s(jf);noe=n(f0,"STRONG",{});var j5e=s(noe);TVe=r(j5e,"deberta"),j5e.forEach(t),MVe=r(f0," \u2014 "),rk=n(f0,"A",{href:!0});var D5e=s(rk);EVe=r(D5e,"DebertaConfig"),D5e.forEach(t),CVe=r(f0," (DeBERTa model)"),f0.forEach(t),wVe=i(y),Df=n(y,"LI",{});var m0=s(Df);soe=n(m0,"STRONG",{});var G5e=s(soe);AVe=r(G5e,"deberta-v2"),G5e.forEach(t),yVe=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var O5e=s(tk);LVe=r(O5e,"DebertaV2Config"),O5e.forEach(t),xVe=r(m0," (DeBERTa-v2 model)"),m0.forEach(t),$Ve=i(y),Gf=n(y,"LI",{});var g0=s(Gf);loe=n(g0,"STRONG",{});var V5e=s(loe);kVe=r(V5e,"decision_transformer"),V5e.forEach(t),SVe=r(g0," \u2014 "),ak=n(g0,"A",{href:!0});var X5e=s(ak);RVe=r(X5e,"DecisionTransformerConfig"),X5e.forEach(t),PVe=r(g0," (Decision Transformer model)"),g0.forEach(t),BVe=i(y),Of=n(y,"LI",{});var h0=s(Of);ioe=n(h0,"STRONG",{});var z5e=s(ioe);IVe=r(z5e,"deit"),z5e.forEach(t),qVe=r(h0," \u2014 "),nk=n(h0,"A",{href:!0});var W5e=s(nk);NVe=r(W5e,"DeiTConfig"),W5e.forEach(t),jVe=r(h0," (DeiT model)"),h0.forEach(t),DVe=i(y),Vf=n(y,"LI",{});var p0=s(Vf);doe=n(p0,"STRONG",{});var Q5e=s(doe);GVe=r(Q5e,"detr"),Q5e.forEach(t),OVe=r(p0," \u2014 "),sk=n(p0,"A",{href:!0});var vGr=s(sk);VVe=r(vGr,"DetrConfig"),vGr.forEach(t),XVe=r(p0," (DETR model)"),p0.forEach(t),zVe=i(y),Xf=n(y,"LI",{});var H5e=s(Xf);coe=n(H5e,"STRONG",{});var FGr=s(coe);WVe=r(FGr,"distilbert"),FGr.forEach(t),QVe=r(H5e," \u2014 "),lk=n(H5e,"A",{href:!0});var TGr=s(lk);HVe=r(TGr,"DistilBertConfig"),TGr.forEach(t),UVe=r(H5e," (DistilBERT model)"),H5e.forEach(t),JVe=i(y),zf=n(y,"LI",{});var U5e=s(zf);foe=n(U5e,"STRONG",{});var MGr=s(foe);YVe=r(MGr,"dpr"),MGr.forEach(t),KVe=r(U5e," \u2014 "),ik=n(U5e,"A",{href:!0});var EGr=s(ik);ZVe=r(EGr,"DPRConfig"),EGr.forEach(t),eXe=r(U5e," (DPR model)"),U5e.forEach(t),oXe=i(y),Wf=n(y,"LI",{});var J5e=s(Wf);moe=n(J5e,"STRONG",{});var CGr=s(moe);rXe=r(CGr,"dpt"),CGr.forEach(t),tXe=r(J5e," \u2014 "),dk=n(J5e,"A",{href:!0});var wGr=s(dk);aXe=r(wGr,"DPTConfig"),wGr.forEach(t),nXe=r(J5e," (DPT model)"),J5e.forEach(t),sXe=i(y),Qf=n(y,"LI",{});var Y5e=s(Qf);goe=n(Y5e,"STRONG",{});var AGr=s(goe);lXe=r(AGr,"electra"),AGr.forEach(t),iXe=r(Y5e," \u2014 "),ck=n(Y5e,"A",{href:!0});var yGr=s(ck);dXe=r(yGr,"ElectraConfig"),yGr.forEach(t),cXe=r(Y5e," (ELECTRA model)"),Y5e.forEach(t),fXe=i(y),Hf=n(y,"LI",{});var K5e=s(Hf);hoe=n(K5e,"STRONG",{});var LGr=s(hoe);mXe=r(LGr,"encoder-decoder"),LGr.forEach(t),gXe=r(K5e," \u2014 "),fk=n(K5e,"A",{href:!0});var xGr=s(fk);hXe=r(xGr,"EncoderDecoderConfig"),xGr.forEach(t),pXe=r(K5e," (Encoder decoder model)"),K5e.forEach(t),_Xe=i(y),Uf=n(y,"LI",{});var Z5e=s(Uf);poe=n(Z5e,"STRONG",{});var $Gr=s(poe);uXe=r($Gr,"flaubert"),$Gr.forEach(t),bXe=r(Z5e," \u2014 "),mk=n(Z5e,"A",{href:!0});var kGr=s(mk);vXe=r(kGr,"FlaubertConfig"),kGr.forEach(t),FXe=r(Z5e," (FlauBERT model)"),Z5e.forEach(t),TXe=i(y),Jf=n(y,"LI",{});var e3e=s(Jf);_oe=n(e3e,"STRONG",{});var SGr=s(_oe);MXe=r(SGr,"flava"),SGr.forEach(t),EXe=r(e3e," \u2014 "),gk=n(e3e,"A",{href:!0});var RGr=s(gk);CXe=r(RGr,"FlavaConfig"),RGr.forEach(t),wXe=r(e3e," (Flava model)"),e3e.forEach(t),AXe=i(y),Yf=n(y,"LI",{});var o3e=s(Yf);uoe=n(o3e,"STRONG",{});var PGr=s(uoe);yXe=r(PGr,"fnet"),PGr.forEach(t),LXe=r(o3e," \u2014 "),hk=n(o3e,"A",{href:!0});var BGr=s(hk);xXe=r(BGr,"FNetConfig"),BGr.forEach(t),$Xe=r(o3e," (FNet model)"),o3e.forEach(t),kXe=i(y),Kf=n(y,"LI",{});var r3e=s(Kf);boe=n(r3e,"STRONG",{});var IGr=s(boe);SXe=r(IGr,"fsmt"),IGr.forEach(t),RXe=r(r3e," \u2014 "),pk=n(r3e,"A",{href:!0});var qGr=s(pk);PXe=r(qGr,"FSMTConfig"),qGr.forEach(t),BXe=r(r3e," (FairSeq Machine-Translation model)"),r3e.forEach(t),IXe=i(y),Zf=n(y,"LI",{});var t3e=s(Zf);voe=n(t3e,"STRONG",{});var NGr=s(voe);qXe=r(NGr,"funnel"),NGr.forEach(t),NXe=r(t3e," \u2014 "),_k=n(t3e,"A",{href:!0});var jGr=s(_k);jXe=r(jGr,"FunnelConfig"),jGr.forEach(t),DXe=r(t3e," (Funnel Transformer model)"),t3e.forEach(t),GXe=i(y),em=n(y,"LI",{});var a3e=s(em);Foe=n(a3e,"STRONG",{});var DGr=s(Foe);OXe=r(DGr,"glpn"),DGr.forEach(t),VXe=r(a3e," \u2014 "),uk=n(a3e,"A",{href:!0});var GGr=s(uk);XXe=r(GGr,"GLPNConfig"),GGr.forEach(t),zXe=r(a3e," (GLPN model)"),a3e.forEach(t),WXe=i(y),om=n(y,"LI",{});var n3e=s(om);Toe=n(n3e,"STRONG",{});var OGr=s(Toe);QXe=r(OGr,"gpt2"),OGr.forEach(t),HXe=r(n3e," \u2014 "),bk=n(n3e,"A",{href:!0});var VGr=s(bk);UXe=r(VGr,"GPT2Config"),VGr.forEach(t),JXe=r(n3e," (OpenAI GPT-2 model)"),n3e.forEach(t),YXe=i(y),rm=n(y,"LI",{});var s3e=s(rm);Moe=n(s3e,"STRONG",{});var XGr=s(Moe);KXe=r(XGr,"gpt_neo"),XGr.forEach(t),ZXe=r(s3e," \u2014 "),vk=n(s3e,"A",{href:!0});var zGr=s(vk);eze=r(zGr,"GPTNeoConfig"),zGr.forEach(t),oze=r(s3e," (GPT Neo model)"),s3e.forEach(t),rze=i(y),tm=n(y,"LI",{});var l3e=s(tm);Eoe=n(l3e,"STRONG",{});var WGr=s(Eoe);tze=r(WGr,"gptj"),WGr.forEach(t),aze=r(l3e," \u2014 "),Fk=n(l3e,"A",{href:!0});var QGr=s(Fk);nze=r(QGr,"GPTJConfig"),QGr.forEach(t),sze=r(l3e," (GPT-J model)"),l3e.forEach(t),lze=i(y),am=n(y,"LI",{});var i3e=s(am);Coe=n(i3e,"STRONG",{});var HGr=s(Coe);ize=r(HGr,"hubert"),HGr.forEach(t),dze=r(i3e," \u2014 "),Tk=n(i3e,"A",{href:!0});var UGr=s(Tk);cze=r(UGr,"HubertConfig"),UGr.forEach(t),fze=r(i3e," (Hubert model)"),i3e.forEach(t),mze=i(y),nm=n(y,"LI",{});var d3e=s(nm);woe=n(d3e,"STRONG",{});var JGr=s(woe);gze=r(JGr,"ibert"),JGr.forEach(t),hze=r(d3e," \u2014 "),Mk=n(d3e,"A",{href:!0});var YGr=s(Mk);pze=r(YGr,"IBertConfig"),YGr.forEach(t),_ze=r(d3e," (I-BERT model)"),d3e.forEach(t),uze=i(y),sm=n(y,"LI",{});var c3e=s(sm);Aoe=n(c3e,"STRONG",{});var KGr=s(Aoe);bze=r(KGr,"imagegpt"),KGr.forEach(t),vze=r(c3e," \u2014 "),Ek=n(c3e,"A",{href:!0});var ZGr=s(Ek);Fze=r(ZGr,"ImageGPTConfig"),ZGr.forEach(t),Tze=r(c3e," (ImageGPT model)"),c3e.forEach(t),Mze=i(y),lm=n(y,"LI",{});var f3e=s(lm);yoe=n(f3e,"STRONG",{});var eOr=s(yoe);Eze=r(eOr,"layoutlm"),eOr.forEach(t),Cze=r(f3e," \u2014 "),Ck=n(f3e,"A",{href:!0});var oOr=s(Ck);wze=r(oOr,"LayoutLMConfig"),oOr.forEach(t),Aze=r(f3e," (LayoutLM model)"),f3e.forEach(t),yze=i(y),im=n(y,"LI",{});var m3e=s(im);Loe=n(m3e,"STRONG",{});var rOr=s(Loe);Lze=r(rOr,"layoutlmv2"),rOr.forEach(t),xze=r(m3e," \u2014 "),wk=n(m3e,"A",{href:!0});var tOr=s(wk);$ze=r(tOr,"LayoutLMv2Config"),tOr.forEach(t),kze=r(m3e," (LayoutLMv2 model)"),m3e.forEach(t),Sze=i(y),dm=n(y,"LI",{});var g3e=s(dm);xoe=n(g3e,"STRONG",{});var aOr=s(xoe);Rze=r(aOr,"led"),aOr.forEach(t),Pze=r(g3e," \u2014 "),Ak=n(g3e,"A",{href:!0});var nOr=s(Ak);Bze=r(nOr,"LEDConfig"),nOr.forEach(t),Ize=r(g3e," (LED model)"),g3e.forEach(t),qze=i(y),cm=n(y,"LI",{});var h3e=s(cm);$oe=n(h3e,"STRONG",{});var sOr=s($oe);Nze=r(sOr,"longformer"),sOr.forEach(t),jze=r(h3e," \u2014 "),yk=n(h3e,"A",{href:!0});var lOr=s(yk);Dze=r(lOr,"LongformerConfig"),lOr.forEach(t),Gze=r(h3e," (Longformer model)"),h3e.forEach(t),Oze=i(y),fm=n(y,"LI",{});var p3e=s(fm);koe=n(p3e,"STRONG",{});var iOr=s(koe);Vze=r(iOr,"luke"),iOr.forEach(t),Xze=r(p3e," \u2014 "),Lk=n(p3e,"A",{href:!0});var dOr=s(Lk);zze=r(dOr,"LukeConfig"),dOr.forEach(t),Wze=r(p3e," (LUKE model)"),p3e.forEach(t),Qze=i(y),mm=n(y,"LI",{});var _3e=s(mm);Soe=n(_3e,"STRONG",{});var cOr=s(Soe);Hze=r(cOr,"lxmert"),cOr.forEach(t),Uze=r(_3e," \u2014 "),xk=n(_3e,"A",{href:!0});var fOr=s(xk);Jze=r(fOr,"LxmertConfig"),fOr.forEach(t),Yze=r(_3e," (LXMERT model)"),_3e.forEach(t),Kze=i(y),gm=n(y,"LI",{});var u3e=s(gm);Roe=n(u3e,"STRONG",{});var mOr=s(Roe);Zze=r(mOr,"m2m_100"),mOr.forEach(t),eWe=r(u3e," \u2014 "),$k=n(u3e,"A",{href:!0});var gOr=s($k);oWe=r(gOr,"M2M100Config"),gOr.forEach(t),rWe=r(u3e," (M2M100 model)"),u3e.forEach(t),tWe=i(y),hm=n(y,"LI",{});var b3e=s(hm);Poe=n(b3e,"STRONG",{});var hOr=s(Poe);aWe=r(hOr,"marian"),hOr.forEach(t),nWe=r(b3e," \u2014 "),kk=n(b3e,"A",{href:!0});var pOr=s(kk);sWe=r(pOr,"MarianConfig"),pOr.forEach(t),lWe=r(b3e," (Marian model)"),b3e.forEach(t),iWe=i(y),pm=n(y,"LI",{});var v3e=s(pm);Boe=n(v3e,"STRONG",{});var _Or=s(Boe);dWe=r(_Or,"maskformer"),_Or.forEach(t),cWe=r(v3e," \u2014 "),Sk=n(v3e,"A",{href:!0});var uOr=s(Sk);fWe=r(uOr,"MaskFormerConfig"),uOr.forEach(t),mWe=r(v3e," (MaskFormer model)"),v3e.forEach(t),gWe=i(y),_m=n(y,"LI",{});var F3e=s(_m);Ioe=n(F3e,"STRONG",{});var bOr=s(Ioe);hWe=r(bOr,"mbart"),bOr.forEach(t),pWe=r(F3e," \u2014 "),Rk=n(F3e,"A",{href:!0});var vOr=s(Rk);_We=r(vOr,"MBartConfig"),vOr.forEach(t),uWe=r(F3e," (mBART model)"),F3e.forEach(t),bWe=i(y),um=n(y,"LI",{});var T3e=s(um);qoe=n(T3e,"STRONG",{});var FOr=s(qoe);vWe=r(FOr,"megatron-bert"),FOr.forEach(t),FWe=r(T3e," \u2014 "),Pk=n(T3e,"A",{href:!0});var TOr=s(Pk);TWe=r(TOr,"MegatronBertConfig"),TOr.forEach(t),MWe=r(T3e," (MegatronBert model)"),T3e.forEach(t),EWe=i(y),bm=n(y,"LI",{});var M3e=s(bm);Noe=n(M3e,"STRONG",{});var MOr=s(Noe);CWe=r(MOr,"mobilebert"),MOr.forEach(t),wWe=r(M3e," \u2014 "),Bk=n(M3e,"A",{href:!0});var EOr=s(Bk);AWe=r(EOr,"MobileBertConfig"),EOr.forEach(t),yWe=r(M3e," (MobileBERT model)"),M3e.forEach(t),LWe=i(y),vm=n(y,"LI",{});var E3e=s(vm);joe=n(E3e,"STRONG",{});var COr=s(joe);xWe=r(COr,"mpnet"),COr.forEach(t),$We=r(E3e," \u2014 "),Ik=n(E3e,"A",{href:!0});var wOr=s(Ik);kWe=r(wOr,"MPNetConfig"),wOr.forEach(t),SWe=r(E3e," (MPNet model)"),E3e.forEach(t),RWe=i(y),Fm=n(y,"LI",{});var C3e=s(Fm);Doe=n(C3e,"STRONG",{});var AOr=s(Doe);PWe=r(AOr,"mt5"),AOr.forEach(t),BWe=r(C3e," \u2014 "),qk=n(C3e,"A",{href:!0});var yOr=s(qk);IWe=r(yOr,"MT5Config"),yOr.forEach(t),qWe=r(C3e," (mT5 model)"),C3e.forEach(t),NWe=i(y),Tm=n(y,"LI",{});var w3e=s(Tm);Goe=n(w3e,"STRONG",{});var LOr=s(Goe);jWe=r(LOr,"nystromformer"),LOr.forEach(t),DWe=r(w3e," \u2014 "),Nk=n(w3e,"A",{href:!0});var xOr=s(Nk);GWe=r(xOr,"NystromformerConfig"),xOr.forEach(t),OWe=r(w3e," (Nystromformer model)"),w3e.forEach(t),VWe=i(y),Mm=n(y,"LI",{});var A3e=s(Mm);Ooe=n(A3e,"STRONG",{});var $Or=s(Ooe);XWe=r($Or,"openai-gpt"),$Or.forEach(t),zWe=r(A3e," \u2014 "),jk=n(A3e,"A",{href:!0});var kOr=s(jk);WWe=r(kOr,"OpenAIGPTConfig"),kOr.forEach(t),QWe=r(A3e," (OpenAI GPT model)"),A3e.forEach(t),HWe=i(y),Em=n(y,"LI",{});var y3e=s(Em);Voe=n(y3e,"STRONG",{});var SOr=s(Voe);UWe=r(SOr,"opt"),SOr.forEach(t),JWe=r(y3e," \u2014 "),Dk=n(y3e,"A",{href:!0});var ROr=s(Dk);YWe=r(ROr,"OPTConfig"),ROr.forEach(t),KWe=r(y3e," (OPT model)"),y3e.forEach(t),ZWe=i(y),Cm=n(y,"LI",{});var L3e=s(Cm);Xoe=n(L3e,"STRONG",{});var POr=s(Xoe);eQe=r(POr,"pegasus"),POr.forEach(t),oQe=r(L3e," \u2014 "),Gk=n(L3e,"A",{href:!0});var BOr=s(Gk);rQe=r(BOr,"PegasusConfig"),BOr.forEach(t),tQe=r(L3e," (Pegasus model)"),L3e.forEach(t),aQe=i(y),wm=n(y,"LI",{});var x3e=s(wm);zoe=n(x3e,"STRONG",{});var IOr=s(zoe);nQe=r(IOr,"perceiver"),IOr.forEach(t),sQe=r(x3e," \u2014 "),Ok=n(x3e,"A",{href:!0});var qOr=s(Ok);lQe=r(qOr,"PerceiverConfig"),qOr.forEach(t),iQe=r(x3e," (Perceiver model)"),x3e.forEach(t),dQe=i(y),Am=n(y,"LI",{});var $3e=s(Am);Woe=n($3e,"STRONG",{});var NOr=s(Woe);cQe=r(NOr,"plbart"),NOr.forEach(t),fQe=r($3e," \u2014 "),Vk=n($3e,"A",{href:!0});var jOr=s(Vk);mQe=r(jOr,"PLBartConfig"),jOr.forEach(t),gQe=r($3e," (PLBart model)"),$3e.forEach(t),hQe=i(y),ym=n(y,"LI",{});var k3e=s(ym);Qoe=n(k3e,"STRONG",{});var DOr=s(Qoe);pQe=r(DOr,"poolformer"),DOr.forEach(t),_Qe=r(k3e," \u2014 "),Xk=n(k3e,"A",{href:!0});var GOr=s(Xk);uQe=r(GOr,"PoolFormerConfig"),GOr.forEach(t),bQe=r(k3e," (PoolFormer model)"),k3e.forEach(t),vQe=i(y),Lm=n(y,"LI",{});var S3e=s(Lm);Hoe=n(S3e,"STRONG",{});var OOr=s(Hoe);FQe=r(OOr,"prophetnet"),OOr.forEach(t),TQe=r(S3e," \u2014 "),zk=n(S3e,"A",{href:!0});var VOr=s(zk);MQe=r(VOr,"ProphetNetConfig"),VOr.forEach(t),EQe=r(S3e," (ProphetNet model)"),S3e.forEach(t),CQe=i(y),xm=n(y,"LI",{});var R3e=s(xm);Uoe=n(R3e,"STRONG",{});var XOr=s(Uoe);wQe=r(XOr,"qdqbert"),XOr.forEach(t),AQe=r(R3e," \u2014 "),Wk=n(R3e,"A",{href:!0});var zOr=s(Wk);yQe=r(zOr,"QDQBertConfig"),zOr.forEach(t),LQe=r(R3e," (QDQBert model)"),R3e.forEach(t),xQe=i(y),$m=n(y,"LI",{});var P3e=s($m);Joe=n(P3e,"STRONG",{});var WOr=s(Joe);$Qe=r(WOr,"rag"),WOr.forEach(t),kQe=r(P3e," \u2014 "),Qk=n(P3e,"A",{href:!0});var QOr=s(Qk);SQe=r(QOr,"RagConfig"),QOr.forEach(t),RQe=r(P3e," (RAG model)"),P3e.forEach(t),PQe=i(y),km=n(y,"LI",{});var B3e=s(km);Yoe=n(B3e,"STRONG",{});var HOr=s(Yoe);BQe=r(HOr,"realm"),HOr.forEach(t),IQe=r(B3e," \u2014 "),Hk=n(B3e,"A",{href:!0});var UOr=s(Hk);qQe=r(UOr,"RealmConfig"),UOr.forEach(t),NQe=r(B3e," (Realm model)"),B3e.forEach(t),jQe=i(y),Sm=n(y,"LI",{});var I3e=s(Sm);Koe=n(I3e,"STRONG",{});var JOr=s(Koe);DQe=r(JOr,"reformer"),JOr.forEach(t),GQe=r(I3e," \u2014 "),Uk=n(I3e,"A",{href:!0});var YOr=s(Uk);OQe=r(YOr,"ReformerConfig"),YOr.forEach(t),VQe=r(I3e," (Reformer model)"),I3e.forEach(t),XQe=i(y),Rm=n(y,"LI",{});var q3e=s(Rm);Zoe=n(q3e,"STRONG",{});var KOr=s(Zoe);zQe=r(KOr,"regnet"),KOr.forEach(t),WQe=r(q3e," \u2014 "),Jk=n(q3e,"A",{href:!0});var ZOr=s(Jk);QQe=r(ZOr,"RegNetConfig"),ZOr.forEach(t),HQe=r(q3e," (RegNet model)"),q3e.forEach(t),UQe=i(y),Pm=n(y,"LI",{});var N3e=s(Pm);ere=n(N3e,"STRONG",{});var eVr=s(ere);JQe=r(eVr,"rembert"),eVr.forEach(t),YQe=r(N3e," \u2014 "),Yk=n(N3e,"A",{href:!0});var oVr=s(Yk);KQe=r(oVr,"RemBertConfig"),oVr.forEach(t),ZQe=r(N3e," (RemBERT model)"),N3e.forEach(t),eHe=i(y),Bm=n(y,"LI",{});var j3e=s(Bm);ore=n(j3e,"STRONG",{});var rVr=s(ore);oHe=r(rVr,"resnet"),rVr.forEach(t),rHe=r(j3e," \u2014 "),Kk=n(j3e,"A",{href:!0});var tVr=s(Kk);tHe=r(tVr,"ResNetConfig"),tVr.forEach(t),aHe=r(j3e," (ResNet model)"),j3e.forEach(t),nHe=i(y),Im=n(y,"LI",{});var D3e=s(Im);rre=n(D3e,"STRONG",{});var aVr=s(rre);sHe=r(aVr,"retribert"),aVr.forEach(t),lHe=r(D3e," \u2014 "),Zk=n(D3e,"A",{href:!0});var nVr=s(Zk);iHe=r(nVr,"RetriBertConfig"),nVr.forEach(t),dHe=r(D3e," (RetriBERT model)"),D3e.forEach(t),cHe=i(y),qm=n(y,"LI",{});var G3e=s(qm);tre=n(G3e,"STRONG",{});var sVr=s(tre);fHe=r(sVr,"roberta"),sVr.forEach(t),mHe=r(G3e," \u2014 "),eS=n(G3e,"A",{href:!0});var lVr=s(eS);gHe=r(lVr,"RobertaConfig"),lVr.forEach(t),hHe=r(G3e," (RoBERTa model)"),G3e.forEach(t),pHe=i(y),Nm=n(y,"LI",{});var O3e=s(Nm);are=n(O3e,"STRONG",{});var iVr=s(are);_He=r(iVr,"roformer"),iVr.forEach(t),uHe=r(O3e," \u2014 "),oS=n(O3e,"A",{href:!0});var dVr=s(oS);bHe=r(dVr,"RoFormerConfig"),dVr.forEach(t),vHe=r(O3e," (RoFormer model)"),O3e.forEach(t),FHe=i(y),jm=n(y,"LI",{});var V3e=s(jm);nre=n(V3e,"STRONG",{});var cVr=s(nre);THe=r(cVr,"segformer"),cVr.forEach(t),MHe=r(V3e," \u2014 "),rS=n(V3e,"A",{href:!0});var fVr=s(rS);EHe=r(fVr,"SegformerConfig"),fVr.forEach(t),CHe=r(V3e," (SegFormer model)"),V3e.forEach(t),wHe=i(y),Dm=n(y,"LI",{});var X3e=s(Dm);sre=n(X3e,"STRONG",{});var mVr=s(sre);AHe=r(mVr,"sew"),mVr.forEach(t),yHe=r(X3e," \u2014 "),tS=n(X3e,"A",{href:!0});var gVr=s(tS);LHe=r(gVr,"SEWConfig"),gVr.forEach(t),xHe=r(X3e," (SEW model)"),X3e.forEach(t),$He=i(y),Gm=n(y,"LI",{});var z3e=s(Gm);lre=n(z3e,"STRONG",{});var hVr=s(lre);kHe=r(hVr,"sew-d"),hVr.forEach(t),SHe=r(z3e," \u2014 "),aS=n(z3e,"A",{href:!0});var pVr=s(aS);RHe=r(pVr,"SEWDConfig"),pVr.forEach(t),PHe=r(z3e," (SEW-D model)"),z3e.forEach(t),BHe=i(y),Om=n(y,"LI",{});var W3e=s(Om);ire=n(W3e,"STRONG",{});var _Vr=s(ire);IHe=r(_Vr,"speech-encoder-decoder"),_Vr.forEach(t),qHe=r(W3e," \u2014 "),nS=n(W3e,"A",{href:!0});var uVr=s(nS);NHe=r(uVr,"SpeechEncoderDecoderConfig"),uVr.forEach(t),jHe=r(W3e," (Speech Encoder decoder model)"),W3e.forEach(t),DHe=i(y),Vm=n(y,"LI",{});var Q3e=s(Vm);dre=n(Q3e,"STRONG",{});var bVr=s(dre);GHe=r(bVr,"speech_to_text"),bVr.forEach(t),OHe=r(Q3e," \u2014 "),sS=n(Q3e,"A",{href:!0});var vVr=s(sS);VHe=r(vVr,"Speech2TextConfig"),vVr.forEach(t),XHe=r(Q3e," (Speech2Text model)"),Q3e.forEach(t),zHe=i(y),Xm=n(y,"LI",{});var H3e=s(Xm);cre=n(H3e,"STRONG",{});var FVr=s(cre);WHe=r(FVr,"speech_to_text_2"),FVr.forEach(t),QHe=r(H3e," \u2014 "),lS=n(H3e,"A",{href:!0});var TVr=s(lS);HHe=r(TVr,"Speech2Text2Config"),TVr.forEach(t),UHe=r(H3e," (Speech2Text2 model)"),H3e.forEach(t),JHe=i(y),zm=n(y,"LI",{});var U3e=s(zm);fre=n(U3e,"STRONG",{});var MVr=s(fre);YHe=r(MVr,"splinter"),MVr.forEach(t),KHe=r(U3e," \u2014 "),iS=n(U3e,"A",{href:!0});var EVr=s(iS);ZHe=r(EVr,"SplinterConfig"),EVr.forEach(t),eUe=r(U3e," (Splinter model)"),U3e.forEach(t),oUe=i(y),Wm=n(y,"LI",{});var J3e=s(Wm);mre=n(J3e,"STRONG",{});var CVr=s(mre);rUe=r(CVr,"squeezebert"),CVr.forEach(t),tUe=r(J3e," \u2014 "),dS=n(J3e,"A",{href:!0});var wVr=s(dS);aUe=r(wVr,"SqueezeBertConfig"),wVr.forEach(t),nUe=r(J3e," (SqueezeBERT model)"),J3e.forEach(t),sUe=i(y),Qm=n(y,"LI",{});var Y3e=s(Qm);gre=n(Y3e,"STRONG",{});var AVr=s(gre);lUe=r(AVr,"swin"),AVr.forEach(t),iUe=r(Y3e," \u2014 "),cS=n(Y3e,"A",{href:!0});var yVr=s(cS);dUe=r(yVr,"SwinConfig"),yVr.forEach(t),cUe=r(Y3e," (Swin model)"),Y3e.forEach(t),fUe=i(y),Hm=n(y,"LI",{});var K3e=s(Hm);hre=n(K3e,"STRONG",{});var LVr=s(hre);mUe=r(LVr,"t5"),LVr.forEach(t),gUe=r(K3e," \u2014 "),fS=n(K3e,"A",{href:!0});var xVr=s(fS);hUe=r(xVr,"T5Config"),xVr.forEach(t),pUe=r(K3e," (T5 model)"),K3e.forEach(t),_Ue=i(y),Um=n(y,"LI",{});var Z3e=s(Um);pre=n(Z3e,"STRONG",{});var $Vr=s(pre);uUe=r($Vr,"tapas"),$Vr.forEach(t),bUe=r(Z3e," \u2014 "),mS=n(Z3e,"A",{href:!0});var kVr=s(mS);vUe=r(kVr,"TapasConfig"),kVr.forEach(t),FUe=r(Z3e," (TAPAS model)"),Z3e.forEach(t),TUe=i(y),Jm=n(y,"LI",{});var ewe=s(Jm);_re=n(ewe,"STRONG",{});var SVr=s(_re);MUe=r(SVr,"trajectory_transformer"),SVr.forEach(t),EUe=r(ewe," \u2014 "),gS=n(ewe,"A",{href:!0});var RVr=s(gS);CUe=r(RVr,"TrajectoryTransformerConfig"),RVr.forEach(t),wUe=r(ewe," (Trajectory Transformer model)"),ewe.forEach(t),AUe=i(y),Ym=n(y,"LI",{});var owe=s(Ym);ure=n(owe,"STRONG",{});var PVr=s(ure);yUe=r(PVr,"transfo-xl"),PVr.forEach(t),LUe=r(owe," \u2014 "),hS=n(owe,"A",{href:!0});var BVr=s(hS);xUe=r(BVr,"TransfoXLConfig"),BVr.forEach(t),$Ue=r(owe," (Transformer-XL model)"),owe.forEach(t),kUe=i(y),Km=n(y,"LI",{});var rwe=s(Km);bre=n(rwe,"STRONG",{});var IVr=s(bre);SUe=r(IVr,"trocr"),IVr.forEach(t),RUe=r(rwe," \u2014 "),pS=n(rwe,"A",{href:!0});var qVr=s(pS);PUe=r(qVr,"TrOCRConfig"),qVr.forEach(t),BUe=r(rwe," (TrOCR model)"),rwe.forEach(t),IUe=i(y),Zm=n(y,"LI",{});var twe=s(Zm);vre=n(twe,"STRONG",{});var NVr=s(vre);qUe=r(NVr,"unispeech"),NVr.forEach(t),NUe=r(twe," \u2014 "),_S=n(twe,"A",{href:!0});var jVr=s(_S);jUe=r(jVr,"UniSpeechConfig"),jVr.forEach(t),DUe=r(twe," (UniSpeech model)"),twe.forEach(t),GUe=i(y),eg=n(y,"LI",{});var awe=s(eg);Fre=n(awe,"STRONG",{});var DVr=s(Fre);OUe=r(DVr,"unispeech-sat"),DVr.forEach(t),VUe=r(awe," \u2014 "),uS=n(awe,"A",{href:!0});var GVr=s(uS);XUe=r(GVr,"UniSpeechSatConfig"),GVr.forEach(t),zUe=r(awe," (UniSpeechSat model)"),awe.forEach(t),WUe=i(y),og=n(y,"LI",{});var nwe=s(og);Tre=n(nwe,"STRONG",{});var OVr=s(Tre);QUe=r(OVr,"van"),OVr.forEach(t),HUe=r(nwe," \u2014 "),bS=n(nwe,"A",{href:!0});var VVr=s(bS);UUe=r(VVr,"VanConfig"),VVr.forEach(t),JUe=r(nwe," (VAN model)"),nwe.forEach(t),YUe=i(y),rg=n(y,"LI",{});var swe=s(rg);Mre=n(swe,"STRONG",{});var XVr=s(Mre);KUe=r(XVr,"vilt"),XVr.forEach(t),ZUe=r(swe," \u2014 "),vS=n(swe,"A",{href:!0});var zVr=s(vS);eJe=r(zVr,"ViltConfig"),zVr.forEach(t),oJe=r(swe," (ViLT model)"),swe.forEach(t),rJe=i(y),tg=n(y,"LI",{});var lwe=s(tg);Ere=n(lwe,"STRONG",{});var WVr=s(Ere);tJe=r(WVr,"vision-encoder-decoder"),WVr.forEach(t),aJe=r(lwe," \u2014 "),FS=n(lwe,"A",{href:!0});var QVr=s(FS);nJe=r(QVr,"VisionEncoderDecoderConfig"),QVr.forEach(t),sJe=r(lwe," (Vision Encoder decoder model)"),lwe.forEach(t),lJe=i(y),ag=n(y,"LI",{});var iwe=s(ag);Cre=n(iwe,"STRONG",{});var HVr=s(Cre);iJe=r(HVr,"vision-text-dual-encoder"),HVr.forEach(t),dJe=r(iwe," \u2014 "),TS=n(iwe,"A",{href:!0});var UVr=s(TS);cJe=r(UVr,"VisionTextDualEncoderConfig"),UVr.forEach(t),fJe=r(iwe," (VisionTextDualEncoder model)"),iwe.forEach(t),mJe=i(y),ng=n(y,"LI",{});var dwe=s(ng);wre=n(dwe,"STRONG",{});var JVr=s(wre);gJe=r(JVr,"visual_bert"),JVr.forEach(t),hJe=r(dwe," \u2014 "),MS=n(dwe,"A",{href:!0});var YVr=s(MS);pJe=r(YVr,"VisualBertConfig"),YVr.forEach(t),_Je=r(dwe," (VisualBert model)"),dwe.forEach(t),uJe=i(y),sg=n(y,"LI",{});var cwe=s(sg);Are=n(cwe,"STRONG",{});var KVr=s(Are);bJe=r(KVr,"vit"),KVr.forEach(t),vJe=r(cwe," \u2014 "),ES=n(cwe,"A",{href:!0});var ZVr=s(ES);FJe=r(ZVr,"ViTConfig"),ZVr.forEach(t),TJe=r(cwe," (ViT model)"),cwe.forEach(t),MJe=i(y),lg=n(y,"LI",{});var fwe=s(lg);yre=n(fwe,"STRONG",{});var eXr=s(yre);EJe=r(eXr,"vit_mae"),eXr.forEach(t),CJe=r(fwe," \u2014 "),CS=n(fwe,"A",{href:!0});var oXr=s(CS);wJe=r(oXr,"ViTMAEConfig"),oXr.forEach(t),AJe=r(fwe," (ViTMAE model)"),fwe.forEach(t),yJe=i(y),ig=n(y,"LI",{});var mwe=s(ig);Lre=n(mwe,"STRONG",{});var rXr=s(Lre);LJe=r(rXr,"wav2vec2"),rXr.forEach(t),xJe=r(mwe," \u2014 "),wS=n(mwe,"A",{href:!0});var tXr=s(wS);$Je=r(tXr,"Wav2Vec2Config"),tXr.forEach(t),kJe=r(mwe," (Wav2Vec2 model)"),mwe.forEach(t),SJe=i(y),dg=n(y,"LI",{});var gwe=s(dg);xre=n(gwe,"STRONG",{});var aXr=s(xre);RJe=r(aXr,"wav2vec2-conformer"),aXr.forEach(t),PJe=r(gwe," \u2014 "),AS=n(gwe,"A",{href:!0});var nXr=s(AS);BJe=r(nXr,"Wav2Vec2ConformerConfig"),nXr.forEach(t),IJe=r(gwe," (Wav2Vec2-Conformer model)"),gwe.forEach(t),qJe=i(y),cg=n(y,"LI",{});var hwe=s(cg);$re=n(hwe,"STRONG",{});var sXr=s($re);NJe=r(sXr,"wavlm"),sXr.forEach(t),jJe=r(hwe," \u2014 "),yS=n(hwe,"A",{href:!0});var lXr=s(yS);DJe=r(lXr,"WavLMConfig"),lXr.forEach(t),GJe=r(hwe," (WavLM model)"),hwe.forEach(t),OJe=i(y),fg=n(y,"LI",{});var pwe=s(fg);kre=n(pwe,"STRONG",{});var iXr=s(kre);VJe=r(iXr,"xglm"),iXr.forEach(t),XJe=r(pwe," \u2014 "),LS=n(pwe,"A",{href:!0});var dXr=s(LS);zJe=r(dXr,"XGLMConfig"),dXr.forEach(t),WJe=r(pwe," (XGLM model)"),pwe.forEach(t),QJe=i(y),mg=n(y,"LI",{});var _we=s(mg);Sre=n(_we,"STRONG",{});var cXr=s(Sre);HJe=r(cXr,"xlm"),cXr.forEach(t),UJe=r(_we," \u2014 "),xS=n(_we,"A",{href:!0});var fXr=s(xS);JJe=r(fXr,"XLMConfig"),fXr.forEach(t),YJe=r(_we," (XLM model)"),_we.forEach(t),KJe=i(y),gg=n(y,"LI",{});var uwe=s(gg);Rre=n(uwe,"STRONG",{});var mXr=s(Rre);ZJe=r(mXr,"xlm-prophetnet"),mXr.forEach(t),eYe=r(uwe," \u2014 "),$S=n(uwe,"A",{href:!0});var gXr=s($S);oYe=r(gXr,"XLMProphetNetConfig"),gXr.forEach(t),rYe=r(uwe," (XLMProphetNet model)"),uwe.forEach(t),tYe=i(y),hg=n(y,"LI",{});var bwe=s(hg);Pre=n(bwe,"STRONG",{});var hXr=s(Pre);aYe=r(hXr,"xlm-roberta"),hXr.forEach(t),nYe=r(bwe," \u2014 "),kS=n(bwe,"A",{href:!0});var pXr=s(kS);sYe=r(pXr,"XLMRobertaConfig"),pXr.forEach(t),lYe=r(bwe," (XLM-RoBERTa model)"),bwe.forEach(t),iYe=i(y),pg=n(y,"LI",{});var vwe=s(pg);Bre=n(vwe,"STRONG",{});var _Xr=s(Bre);dYe=r(_Xr,"xlm-roberta-xl"),_Xr.forEach(t),cYe=r(vwe," \u2014 "),SS=n(vwe,"A",{href:!0});var uXr=s(SS);fYe=r(uXr,"XLMRobertaXLConfig"),uXr.forEach(t),mYe=r(vwe," (XLM-RoBERTa-XL model)"),vwe.forEach(t),gYe=i(y),_g=n(y,"LI",{});var Fwe=s(_g);Ire=n(Fwe,"STRONG",{});var bXr=s(Ire);hYe=r(bXr,"xlnet"),bXr.forEach(t),pYe=r(Fwe," \u2014 "),RS=n(Fwe,"A",{href:!0});var vXr=s(RS);_Ye=r(vXr,"XLNetConfig"),vXr.forEach(t),uYe=r(Fwe," (XLNet model)"),Fwe.forEach(t),bYe=i(y),ug=n(y,"LI",{});var Twe=s(ug);qre=n(Twe,"STRONG",{});var FXr=s(qre);vYe=r(FXr,"yolos"),FXr.forEach(t),FYe=r(Twe," \u2014 "),PS=n(Twe,"A",{href:!0});var TXr=s(PS);TYe=r(TXr,"YolosConfig"),TXr.forEach(t),MYe=r(Twe," (YOLOS model)"),Twe.forEach(t),EYe=i(y),bg=n(y,"LI",{});var Mwe=s(bg);Nre=n(Mwe,"STRONG",{});var MXr=s(Nre);CYe=r(MXr,"yoso"),MXr.forEach(t),wYe=r(Mwe," \u2014 "),BS=n(Mwe,"A",{href:!0});var EXr=s(BS);AYe=r(EXr,"YosoConfig"),EXr.forEach(t),yYe=r(Mwe," (YOSO model)"),Mwe.forEach(t),y.forEach(t),LYe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),xYe=i(et),Fg=n(et,"DIV",{class:!0});var tje=s(Fg);T(T6.$$.fragment,tje),$Ye=i(tje),jre=n(tje,"P",{});var CXr=s(jre);kYe=r(CXr,"Register a new configuration for this class."),CXr.forEach(t),tje.forEach(t),et.forEach(t),sqe=i(f),Fi=n(f,"H2",{class:!0});var aje=s(Fi);Tg=n(aje,"A",{id:!0,class:!0,href:!0});var wXr=s(Tg);Dre=n(wXr,"SPAN",{});var AXr=s(Dre);T(M6.$$.fragment,AXr),AXr.forEach(t),wXr.forEach(t),SYe=i(aje),Gre=n(aje,"SPAN",{});var yXr=s(Gre);RYe=r(yXr,"AutoTokenizer"),yXr.forEach(t),aje.forEach(t),lqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(E6.$$.fragment,Is),PYe=i(Is),C6=n(Is,"P",{});var nje=s(C6);BYe=r(nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),IS=n(nje,"A",{href:!0});var LXr=s(IS);IYe=r(LXr,"AutoTokenizer.from_pretrained()"),LXr.forEach(t),qYe=r(nje," class method."),nje.forEach(t),NYe=i(Is),w6=n(Is,"P",{});var sje=s(w6);jYe=r(sje,"This class cannot be instantiated directly using "),Ore=n(sje,"CODE",{});var xXr=s(Ore);DYe=r(xXr,"__init__()"),xXr.forEach(t),GYe=r(sje," (throws an error)."),sje.forEach(t),OYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(A6.$$.fragment,qs),VYe=i(qs),Vre=n(qs,"P",{});var $Xr=s(Vre);XYe=r($Xr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Xr.forEach(t),zYe=i(qs),Aa=n(qs,"P",{});var _0=s(Aa);WYe=r(_0,"The tokenizer class to instantiate is selected based on the "),Xre=n(_0,"CODE",{});var kXr=s(Xre);QYe=r(kXr,"model_type"),kXr.forEach(t),HYe=r(_0,` property of the config object (either
passed as an argument or loaded from `),zre=n(_0,"CODE",{});var SXr=s(zre);UYe=r(SXr,"pretrained_model_name_or_path"),SXr.forEach(t),JYe=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wre=n(_0,"CODE",{});var RXr=s(Wre);YYe=r(RXr,"pretrained_model_name_or_path"),RXr.forEach(t),KYe=r(_0,":"),_0.forEach(t),ZYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var yx=s(Sn);Qre=n(yx,"STRONG",{});var PXr=s(Qre);eKe=r(PXr,"albert"),PXr.forEach(t),oKe=r(yx," \u2014 "),qS=n(yx,"A",{href:!0});var BXr=s(qS);rKe=r(BXr,"AlbertTokenizer"),BXr.forEach(t),tKe=r(yx," or "),NS=n(yx,"A",{href:!0});var IXr=s(NS);aKe=r(IXr,"AlbertTokenizerFast"),IXr.forEach(t),nKe=r(yx," (ALBERT model)"),yx.forEach(t),sKe=i(S),Rn=n(S,"LI",{});var Lx=s(Rn);Hre=n(Lx,"STRONG",{});var qXr=s(Hre);lKe=r(qXr,"bart"),qXr.forEach(t),iKe=r(Lx," \u2014 "),jS=n(Lx,"A",{href:!0});var NXr=s(jS);dKe=r(NXr,"BartTokenizer"),NXr.forEach(t),cKe=r(Lx," or "),DS=n(Lx,"A",{href:!0});var jXr=s(DS);fKe=r(jXr,"BartTokenizerFast"),jXr.forEach(t),mKe=r(Lx," (BART model)"),Lx.forEach(t),gKe=i(S),Pn=n(S,"LI",{});var xx=s(Pn);Ure=n(xx,"STRONG",{});var DXr=s(Ure);hKe=r(DXr,"barthez"),DXr.forEach(t),pKe=r(xx," \u2014 "),GS=n(xx,"A",{href:!0});var GXr=s(GS);_Ke=r(GXr,"BarthezTokenizer"),GXr.forEach(t),uKe=r(xx," or "),OS=n(xx,"A",{href:!0});var OXr=s(OS);bKe=r(OXr,"BarthezTokenizerFast"),OXr.forEach(t),vKe=r(xx," (BARThez model)"),xx.forEach(t),FKe=i(S),Mg=n(S,"LI",{});var Ewe=s(Mg);Jre=n(Ewe,"STRONG",{});var VXr=s(Jre);TKe=r(VXr,"bartpho"),VXr.forEach(t),MKe=r(Ewe," \u2014 "),VS=n(Ewe,"A",{href:!0});var XXr=s(VS);EKe=r(XXr,"BartphoTokenizer"),XXr.forEach(t),CKe=r(Ewe," (BARTpho model)"),Ewe.forEach(t),wKe=i(S),Bn=n(S,"LI",{});var $x=s(Bn);Yre=n($x,"STRONG",{});var zXr=s(Yre);AKe=r(zXr,"bert"),zXr.forEach(t),yKe=r($x," \u2014 "),XS=n($x,"A",{href:!0});var WXr=s(XS);LKe=r(WXr,"BertTokenizer"),WXr.forEach(t),xKe=r($x," or "),zS=n($x,"A",{href:!0});var QXr=s(zS);$Ke=r(QXr,"BertTokenizerFast"),QXr.forEach(t),kKe=r($x," (BERT model)"),$x.forEach(t),SKe=i(S),Eg=n(S,"LI",{});var Cwe=s(Eg);Kre=n(Cwe,"STRONG",{});var HXr=s(Kre);RKe=r(HXr,"bert-generation"),HXr.forEach(t),PKe=r(Cwe," \u2014 "),WS=n(Cwe,"A",{href:!0});var UXr=s(WS);BKe=r(UXr,"BertGenerationTokenizer"),UXr.forEach(t),IKe=r(Cwe," (Bert Generation model)"),Cwe.forEach(t),qKe=i(S),Cg=n(S,"LI",{});var wwe=s(Cg);Zre=n(wwe,"STRONG",{});var JXr=s(Zre);NKe=r(JXr,"bert-japanese"),JXr.forEach(t),jKe=r(wwe," \u2014 "),QS=n(wwe,"A",{href:!0});var YXr=s(QS);DKe=r(YXr,"BertJapaneseTokenizer"),YXr.forEach(t),GKe=r(wwe," (BertJapanese model)"),wwe.forEach(t),OKe=i(S),wg=n(S,"LI",{});var Awe=s(wg);ete=n(Awe,"STRONG",{});var KXr=s(ete);VKe=r(KXr,"bertweet"),KXr.forEach(t),XKe=r(Awe," \u2014 "),HS=n(Awe,"A",{href:!0});var ZXr=s(HS);zKe=r(ZXr,"BertweetTokenizer"),ZXr.forEach(t),WKe=r(Awe," (Bertweet model)"),Awe.forEach(t),QKe=i(S),In=n(S,"LI",{});var kx=s(In);ote=n(kx,"STRONG",{});var ezr=s(ote);HKe=r(ezr,"big_bird"),ezr.forEach(t),UKe=r(kx," \u2014 "),US=n(kx,"A",{href:!0});var ozr=s(US);JKe=r(ozr,"BigBirdTokenizer"),ozr.forEach(t),YKe=r(kx," or "),JS=n(kx,"A",{href:!0});var rzr=s(JS);KKe=r(rzr,"BigBirdTokenizerFast"),rzr.forEach(t),ZKe=r(kx," (BigBird model)"),kx.forEach(t),eZe=i(S),qn=n(S,"LI",{});var Sx=s(qn);rte=n(Sx,"STRONG",{});var tzr=s(rte);oZe=r(tzr,"bigbird_pegasus"),tzr.forEach(t),rZe=r(Sx," \u2014 "),YS=n(Sx,"A",{href:!0});var azr=s(YS);tZe=r(azr,"PegasusTokenizer"),azr.forEach(t),aZe=r(Sx," or "),KS=n(Sx,"A",{href:!0});var nzr=s(KS);nZe=r(nzr,"PegasusTokenizerFast"),nzr.forEach(t),sZe=r(Sx," (BigBirdPegasus model)"),Sx.forEach(t),lZe=i(S),Nn=n(S,"LI",{});var Rx=s(Nn);tte=n(Rx,"STRONG",{});var szr=s(tte);iZe=r(szr,"blenderbot"),szr.forEach(t),dZe=r(Rx," \u2014 "),ZS=n(Rx,"A",{href:!0});var lzr=s(ZS);cZe=r(lzr,"BlenderbotTokenizer"),lzr.forEach(t),fZe=r(Rx," or "),eR=n(Rx,"A",{href:!0});var izr=s(eR);mZe=r(izr,"BlenderbotTokenizerFast"),izr.forEach(t),gZe=r(Rx," (Blenderbot model)"),Rx.forEach(t),hZe=i(S),Ag=n(S,"LI",{});var ywe=s(Ag);ate=n(ywe,"STRONG",{});var dzr=s(ate);pZe=r(dzr,"blenderbot-small"),dzr.forEach(t),_Ze=r(ywe," \u2014 "),oR=n(ywe,"A",{href:!0});var czr=s(oR);uZe=r(czr,"BlenderbotSmallTokenizer"),czr.forEach(t),bZe=r(ywe," (BlenderbotSmall model)"),ywe.forEach(t),vZe=i(S),yg=n(S,"LI",{});var Lwe=s(yg);nte=n(Lwe,"STRONG",{});var fzr=s(nte);FZe=r(fzr,"byt5"),fzr.forEach(t),TZe=r(Lwe," \u2014 "),rR=n(Lwe,"A",{href:!0});var mzr=s(rR);MZe=r(mzr,"ByT5Tokenizer"),mzr.forEach(t),EZe=r(Lwe," (ByT5 model)"),Lwe.forEach(t),CZe=i(S),jn=n(S,"LI",{});var Px=s(jn);ste=n(Px,"STRONG",{});var gzr=s(ste);wZe=r(gzr,"camembert"),gzr.forEach(t),AZe=r(Px," \u2014 "),tR=n(Px,"A",{href:!0});var hzr=s(tR);yZe=r(hzr,"CamembertTokenizer"),hzr.forEach(t),LZe=r(Px," or "),aR=n(Px,"A",{href:!0});var pzr=s(aR);xZe=r(pzr,"CamembertTokenizerFast"),pzr.forEach(t),$Ze=r(Px," (CamemBERT model)"),Px.forEach(t),kZe=i(S),Lg=n(S,"LI",{});var xwe=s(Lg);lte=n(xwe,"STRONG",{});var _zr=s(lte);SZe=r(_zr,"canine"),_zr.forEach(t),RZe=r(xwe," \u2014 "),nR=n(xwe,"A",{href:!0});var uzr=s(nR);PZe=r(uzr,"CanineTokenizer"),uzr.forEach(t),BZe=r(xwe," (Canine model)"),xwe.forEach(t),IZe=i(S),Dn=n(S,"LI",{});var Bx=s(Dn);ite=n(Bx,"STRONG",{});var bzr=s(ite);qZe=r(bzr,"clip"),bzr.forEach(t),NZe=r(Bx," \u2014 "),sR=n(Bx,"A",{href:!0});var vzr=s(sR);jZe=r(vzr,"CLIPTokenizer"),vzr.forEach(t),DZe=r(Bx," or "),lR=n(Bx,"A",{href:!0});var Fzr=s(lR);GZe=r(Fzr,"CLIPTokenizerFast"),Fzr.forEach(t),OZe=r(Bx," (CLIP model)"),Bx.forEach(t),VZe=i(S),Gn=n(S,"LI",{});var Ix=s(Gn);dte=n(Ix,"STRONG",{});var Tzr=s(dte);XZe=r(Tzr,"convbert"),Tzr.forEach(t),zZe=r(Ix," \u2014 "),iR=n(Ix,"A",{href:!0});var Mzr=s(iR);WZe=r(Mzr,"ConvBertTokenizer"),Mzr.forEach(t),QZe=r(Ix," or "),dR=n(Ix,"A",{href:!0});var Ezr=s(dR);HZe=r(Ezr,"ConvBertTokenizerFast"),Ezr.forEach(t),UZe=r(Ix," (ConvBERT model)"),Ix.forEach(t),JZe=i(S),On=n(S,"LI",{});var qx=s(On);cte=n(qx,"STRONG",{});var Czr=s(cte);YZe=r(Czr,"cpm"),Czr.forEach(t),KZe=r(qx," \u2014 "),cR=n(qx,"A",{href:!0});var wzr=s(cR);ZZe=r(wzr,"CpmTokenizer"),wzr.forEach(t),eeo=r(qx," or "),fR=n(qx,"A",{href:!0});var Azr=s(fR);oeo=r(Azr,"CpmTokenizerFast"),Azr.forEach(t),reo=r(qx," (CPM model)"),qx.forEach(t),teo=i(S),xg=n(S,"LI",{});var $we=s(xg);fte=n($we,"STRONG",{});var yzr=s(fte);aeo=r(yzr,"ctrl"),yzr.forEach(t),neo=r($we," \u2014 "),mR=n($we,"A",{href:!0});var Lzr=s(mR);seo=r(Lzr,"CTRLTokenizer"),Lzr.forEach(t),leo=r($we," (CTRL model)"),$we.forEach(t),ieo=i(S),Vn=n(S,"LI",{});var Nx=s(Vn);mte=n(Nx,"STRONG",{});var xzr=s(mte);deo=r(xzr,"data2vec-text"),xzr.forEach(t),ceo=r(Nx," \u2014 "),gR=n(Nx,"A",{href:!0});var $zr=s(gR);feo=r($zr,"RobertaTokenizer"),$zr.forEach(t),meo=r(Nx," or "),hR=n(Nx,"A",{href:!0});var kzr=s(hR);geo=r(kzr,"RobertaTokenizerFast"),kzr.forEach(t),heo=r(Nx," (Data2VecText model)"),Nx.forEach(t),peo=i(S),Xn=n(S,"LI",{});var jx=s(Xn);gte=n(jx,"STRONG",{});var Szr=s(gte);_eo=r(Szr,"deberta"),Szr.forEach(t),ueo=r(jx," \u2014 "),pR=n(jx,"A",{href:!0});var Rzr=s(pR);beo=r(Rzr,"DebertaTokenizer"),Rzr.forEach(t),veo=r(jx," or "),_R=n(jx,"A",{href:!0});var Pzr=s(_R);Feo=r(Pzr,"DebertaTokenizerFast"),Pzr.forEach(t),Teo=r(jx," (DeBERTa model)"),jx.forEach(t),Meo=i(S),zn=n(S,"LI",{});var Dx=s(zn);hte=n(Dx,"STRONG",{});var Bzr=s(hte);Eeo=r(Bzr,"deberta-v2"),Bzr.forEach(t),Ceo=r(Dx," \u2014 "),uR=n(Dx,"A",{href:!0});var Izr=s(uR);weo=r(Izr,"DebertaV2Tokenizer"),Izr.forEach(t),Aeo=r(Dx," or "),bR=n(Dx,"A",{href:!0});var qzr=s(bR);yeo=r(qzr,"DebertaV2TokenizerFast"),qzr.forEach(t),Leo=r(Dx," (DeBERTa-v2 model)"),Dx.forEach(t),xeo=i(S),Wn=n(S,"LI",{});var Gx=s(Wn);pte=n(Gx,"STRONG",{});var Nzr=s(pte);$eo=r(Nzr,"distilbert"),Nzr.forEach(t),keo=r(Gx," \u2014 "),vR=n(Gx,"A",{href:!0});var jzr=s(vR);Seo=r(jzr,"DistilBertTokenizer"),jzr.forEach(t),Reo=r(Gx," or "),FR=n(Gx,"A",{href:!0});var Dzr=s(FR);Peo=r(Dzr,"DistilBertTokenizerFast"),Dzr.forEach(t),Beo=r(Gx," (DistilBERT model)"),Gx.forEach(t),Ieo=i(S),Qn=n(S,"LI",{});var Ox=s(Qn);_te=n(Ox,"STRONG",{});var Gzr=s(_te);qeo=r(Gzr,"dpr"),Gzr.forEach(t),Neo=r(Ox," \u2014 "),TR=n(Ox,"A",{href:!0});var Ozr=s(TR);jeo=r(Ozr,"DPRQuestionEncoderTokenizer"),Ozr.forEach(t),Deo=r(Ox," or "),MR=n(Ox,"A",{href:!0});var Vzr=s(MR);Geo=r(Vzr,"DPRQuestionEncoderTokenizerFast"),Vzr.forEach(t),Oeo=r(Ox," (DPR model)"),Ox.forEach(t),Veo=i(S),Hn=n(S,"LI",{});var Vx=s(Hn);ute=n(Vx,"STRONG",{});var Xzr=s(ute);Xeo=r(Xzr,"electra"),Xzr.forEach(t),zeo=r(Vx," \u2014 "),ER=n(Vx,"A",{href:!0});var zzr=s(ER);Weo=r(zzr,"ElectraTokenizer"),zzr.forEach(t),Qeo=r(Vx," or "),CR=n(Vx,"A",{href:!0});var Wzr=s(CR);Heo=r(Wzr,"ElectraTokenizerFast"),Wzr.forEach(t),Ueo=r(Vx," (ELECTRA model)"),Vx.forEach(t),Jeo=i(S),$g=n(S,"LI",{});var kwe=s($g);bte=n(kwe,"STRONG",{});var Qzr=s(bte);Yeo=r(Qzr,"flaubert"),Qzr.forEach(t),Keo=r(kwe," \u2014 "),wR=n(kwe,"A",{href:!0});var Hzr=s(wR);Zeo=r(Hzr,"FlaubertTokenizer"),Hzr.forEach(t),eoo=r(kwe," (FlauBERT model)"),kwe.forEach(t),ooo=i(S),Un=n(S,"LI",{});var Xx=s(Un);vte=n(Xx,"STRONG",{});var Uzr=s(vte);roo=r(Uzr,"fnet"),Uzr.forEach(t),too=r(Xx," \u2014 "),AR=n(Xx,"A",{href:!0});var Jzr=s(AR);aoo=r(Jzr,"FNetTokenizer"),Jzr.forEach(t),noo=r(Xx," or "),yR=n(Xx,"A",{href:!0});var Yzr=s(yR);soo=r(Yzr,"FNetTokenizerFast"),Yzr.forEach(t),loo=r(Xx," (FNet model)"),Xx.forEach(t),ioo=i(S),kg=n(S,"LI",{});var Swe=s(kg);Fte=n(Swe,"STRONG",{});var Kzr=s(Fte);doo=r(Kzr,"fsmt"),Kzr.forEach(t),coo=r(Swe," \u2014 "),LR=n(Swe,"A",{href:!0});var Zzr=s(LR);foo=r(Zzr,"FSMTTokenizer"),Zzr.forEach(t),moo=r(Swe," (FairSeq Machine-Translation model)"),Swe.forEach(t),goo=i(S),Jn=n(S,"LI",{});var zx=s(Jn);Tte=n(zx,"STRONG",{});var eWr=s(Tte);hoo=r(eWr,"funnel"),eWr.forEach(t),poo=r(zx," \u2014 "),xR=n(zx,"A",{href:!0});var oWr=s(xR);_oo=r(oWr,"FunnelTokenizer"),oWr.forEach(t),uoo=r(zx," or "),$R=n(zx,"A",{href:!0});var rWr=s($R);boo=r(rWr,"FunnelTokenizerFast"),rWr.forEach(t),voo=r(zx," (Funnel Transformer model)"),zx.forEach(t),Foo=i(S),Yn=n(S,"LI",{});var Wx=s(Yn);Mte=n(Wx,"STRONG",{});var tWr=s(Mte);Too=r(tWr,"gpt2"),tWr.forEach(t),Moo=r(Wx," \u2014 "),kR=n(Wx,"A",{href:!0});var aWr=s(kR);Eoo=r(aWr,"GPT2Tokenizer"),aWr.forEach(t),Coo=r(Wx," or "),SR=n(Wx,"A",{href:!0});var nWr=s(SR);woo=r(nWr,"GPT2TokenizerFast"),nWr.forEach(t),Aoo=r(Wx," (OpenAI GPT-2 model)"),Wx.forEach(t),yoo=i(S),Kn=n(S,"LI",{});var Qx=s(Kn);Ete=n(Qx,"STRONG",{});var sWr=s(Ete);Loo=r(sWr,"gpt_neo"),sWr.forEach(t),xoo=r(Qx," \u2014 "),RR=n(Qx,"A",{href:!0});var lWr=s(RR);$oo=r(lWr,"GPT2Tokenizer"),lWr.forEach(t),koo=r(Qx," or "),PR=n(Qx,"A",{href:!0});var iWr=s(PR);Soo=r(iWr,"GPT2TokenizerFast"),iWr.forEach(t),Roo=r(Qx," (GPT Neo model)"),Qx.forEach(t),Poo=i(S),Zn=n(S,"LI",{});var Hx=s(Zn);Cte=n(Hx,"STRONG",{});var dWr=s(Cte);Boo=r(dWr,"gptj"),dWr.forEach(t),Ioo=r(Hx," \u2014 "),BR=n(Hx,"A",{href:!0});var cWr=s(BR);qoo=r(cWr,"GPT2Tokenizer"),cWr.forEach(t),Noo=r(Hx," or "),IR=n(Hx,"A",{href:!0});var fWr=s(IR);joo=r(fWr,"GPT2TokenizerFast"),fWr.forEach(t),Doo=r(Hx," (GPT-J model)"),Hx.forEach(t),Goo=i(S),es=n(S,"LI",{});var Ux=s(es);wte=n(Ux,"STRONG",{});var mWr=s(wte);Ooo=r(mWr,"herbert"),mWr.forEach(t),Voo=r(Ux," \u2014 "),qR=n(Ux,"A",{href:!0});var gWr=s(qR);Xoo=r(gWr,"HerbertTokenizer"),gWr.forEach(t),zoo=r(Ux," or "),NR=n(Ux,"A",{href:!0});var hWr=s(NR);Woo=r(hWr,"HerbertTokenizerFast"),hWr.forEach(t),Qoo=r(Ux," (HerBERT model)"),Ux.forEach(t),Hoo=i(S),Sg=n(S,"LI",{});var Rwe=s(Sg);Ate=n(Rwe,"STRONG",{});var pWr=s(Ate);Uoo=r(pWr,"hubert"),pWr.forEach(t),Joo=r(Rwe," \u2014 "),jR=n(Rwe,"A",{href:!0});var _Wr=s(jR);Yoo=r(_Wr,"Wav2Vec2CTCTokenizer"),_Wr.forEach(t),Koo=r(Rwe," (Hubert model)"),Rwe.forEach(t),Zoo=i(S),os=n(S,"LI",{});var Jx=s(os);yte=n(Jx,"STRONG",{});var uWr=s(yte);ero=r(uWr,"ibert"),uWr.forEach(t),oro=r(Jx," \u2014 "),DR=n(Jx,"A",{href:!0});var bWr=s(DR);rro=r(bWr,"RobertaTokenizer"),bWr.forEach(t),tro=r(Jx," or "),GR=n(Jx,"A",{href:!0});var vWr=s(GR);aro=r(vWr,"RobertaTokenizerFast"),vWr.forEach(t),nro=r(Jx," (I-BERT model)"),Jx.forEach(t),sro=i(S),rs=n(S,"LI",{});var Yx=s(rs);Lte=n(Yx,"STRONG",{});var FWr=s(Lte);lro=r(FWr,"layoutlm"),FWr.forEach(t),iro=r(Yx," \u2014 "),OR=n(Yx,"A",{href:!0});var TWr=s(OR);dro=r(TWr,"LayoutLMTokenizer"),TWr.forEach(t),cro=r(Yx," or "),VR=n(Yx,"A",{href:!0});var MWr=s(VR);fro=r(MWr,"LayoutLMTokenizerFast"),MWr.forEach(t),mro=r(Yx," (LayoutLM model)"),Yx.forEach(t),gro=i(S),ts=n(S,"LI",{});var Kx=s(ts);xte=n(Kx,"STRONG",{});var EWr=s(xte);hro=r(EWr,"layoutlmv2"),EWr.forEach(t),pro=r(Kx," \u2014 "),XR=n(Kx,"A",{href:!0});var CWr=s(XR);_ro=r(CWr,"LayoutLMv2Tokenizer"),CWr.forEach(t),uro=r(Kx," or "),zR=n(Kx,"A",{href:!0});var wWr=s(zR);bro=r(wWr,"LayoutLMv2TokenizerFast"),wWr.forEach(t),vro=r(Kx," (LayoutLMv2 model)"),Kx.forEach(t),Fro=i(S),as=n(S,"LI",{});var Zx=s(as);$te=n(Zx,"STRONG",{});var AWr=s($te);Tro=r(AWr,"layoutxlm"),AWr.forEach(t),Mro=r(Zx," \u2014 "),WR=n(Zx,"A",{href:!0});var yWr=s(WR);Ero=r(yWr,"LayoutXLMTokenizer"),yWr.forEach(t),Cro=r(Zx," or "),QR=n(Zx,"A",{href:!0});var LWr=s(QR);wro=r(LWr,"LayoutXLMTokenizerFast"),LWr.forEach(t),Aro=r(Zx," (LayoutXLM model)"),Zx.forEach(t),yro=i(S),ns=n(S,"LI",{});var e$=s(ns);kte=n(e$,"STRONG",{});var xWr=s(kte);Lro=r(xWr,"led"),xWr.forEach(t),xro=r(e$," \u2014 "),HR=n(e$,"A",{href:!0});var $Wr=s(HR);$ro=r($Wr,"LEDTokenizer"),$Wr.forEach(t),kro=r(e$," or "),UR=n(e$,"A",{href:!0});var kWr=s(UR);Sro=r(kWr,"LEDTokenizerFast"),kWr.forEach(t),Rro=r(e$," (LED model)"),e$.forEach(t),Pro=i(S),ss=n(S,"LI",{});var o$=s(ss);Ste=n(o$,"STRONG",{});var SWr=s(Ste);Bro=r(SWr,"longformer"),SWr.forEach(t),Iro=r(o$," \u2014 "),JR=n(o$,"A",{href:!0});var RWr=s(JR);qro=r(RWr,"LongformerTokenizer"),RWr.forEach(t),Nro=r(o$," or "),YR=n(o$,"A",{href:!0});var PWr=s(YR);jro=r(PWr,"LongformerTokenizerFast"),PWr.forEach(t),Dro=r(o$," (Longformer model)"),o$.forEach(t),Gro=i(S),Rg=n(S,"LI",{});var Pwe=s(Rg);Rte=n(Pwe,"STRONG",{});var BWr=s(Rte);Oro=r(BWr,"luke"),BWr.forEach(t),Vro=r(Pwe," \u2014 "),KR=n(Pwe,"A",{href:!0});var IWr=s(KR);Xro=r(IWr,"LukeTokenizer"),IWr.forEach(t),zro=r(Pwe," (LUKE model)"),Pwe.forEach(t),Wro=i(S),ls=n(S,"LI",{});var r$=s(ls);Pte=n(r$,"STRONG",{});var qWr=s(Pte);Qro=r(qWr,"lxmert"),qWr.forEach(t),Hro=r(r$," \u2014 "),ZR=n(r$,"A",{href:!0});var NWr=s(ZR);Uro=r(NWr,"LxmertTokenizer"),NWr.forEach(t),Jro=r(r$," or "),eP=n(r$,"A",{href:!0});var jWr=s(eP);Yro=r(jWr,"LxmertTokenizerFast"),jWr.forEach(t),Kro=r(r$," (LXMERT model)"),r$.forEach(t),Zro=i(S),Pg=n(S,"LI",{});var Bwe=s(Pg);Bte=n(Bwe,"STRONG",{});var DWr=s(Bte);eto=r(DWr,"m2m_100"),DWr.forEach(t),oto=r(Bwe," \u2014 "),oP=n(Bwe,"A",{href:!0});var GWr=s(oP);rto=r(GWr,"M2M100Tokenizer"),GWr.forEach(t),tto=r(Bwe," (M2M100 model)"),Bwe.forEach(t),ato=i(S),Bg=n(S,"LI",{});var Iwe=s(Bg);Ite=n(Iwe,"STRONG",{});var OWr=s(Ite);nto=r(OWr,"marian"),OWr.forEach(t),sto=r(Iwe," \u2014 "),rP=n(Iwe,"A",{href:!0});var VWr=s(rP);lto=r(VWr,"MarianTokenizer"),VWr.forEach(t),ito=r(Iwe," (Marian model)"),Iwe.forEach(t),dto=i(S),is=n(S,"LI",{});var t$=s(is);qte=n(t$,"STRONG",{});var XWr=s(qte);cto=r(XWr,"mbart"),XWr.forEach(t),fto=r(t$," \u2014 "),tP=n(t$,"A",{href:!0});var zWr=s(tP);mto=r(zWr,"MBartTokenizer"),zWr.forEach(t),gto=r(t$," or "),aP=n(t$,"A",{href:!0});var WWr=s(aP);hto=r(WWr,"MBartTokenizerFast"),WWr.forEach(t),pto=r(t$," (mBART model)"),t$.forEach(t),_to=i(S),ds=n(S,"LI",{});var a$=s(ds);Nte=n(a$,"STRONG",{});var QWr=s(Nte);uto=r(QWr,"mbart50"),QWr.forEach(t),bto=r(a$," \u2014 "),nP=n(a$,"A",{href:!0});var HWr=s(nP);vto=r(HWr,"MBart50Tokenizer"),HWr.forEach(t),Fto=r(a$," or "),sP=n(a$,"A",{href:!0});var UWr=s(sP);Tto=r(UWr,"MBart50TokenizerFast"),UWr.forEach(t),Mto=r(a$," (mBART-50 model)"),a$.forEach(t),Eto=i(S),cs=n(S,"LI",{});var n$=s(cs);jte=n(n$,"STRONG",{});var JWr=s(jte);Cto=r(JWr,"megatron-bert"),JWr.forEach(t),wto=r(n$," \u2014 "),lP=n(n$,"A",{href:!0});var YWr=s(lP);Ato=r(YWr,"BertTokenizer"),YWr.forEach(t),yto=r(n$," or "),iP=n(n$,"A",{href:!0});var KWr=s(iP);Lto=r(KWr,"BertTokenizerFast"),KWr.forEach(t),xto=r(n$," (MegatronBert model)"),n$.forEach(t),$to=i(S),Ig=n(S,"LI",{});var qwe=s(Ig);Dte=n(qwe,"STRONG",{});var ZWr=s(Dte);kto=r(ZWr,"mluke"),ZWr.forEach(t),Sto=r(qwe," \u2014 "),dP=n(qwe,"A",{href:!0});var eQr=s(dP);Rto=r(eQr,"MLukeTokenizer"),eQr.forEach(t),Pto=r(qwe," (mLUKE model)"),qwe.forEach(t),Bto=i(S),fs=n(S,"LI",{});var s$=s(fs);Gte=n(s$,"STRONG",{});var oQr=s(Gte);Ito=r(oQr,"mobilebert"),oQr.forEach(t),qto=r(s$," \u2014 "),cP=n(s$,"A",{href:!0});var rQr=s(cP);Nto=r(rQr,"MobileBertTokenizer"),rQr.forEach(t),jto=r(s$," or "),fP=n(s$,"A",{href:!0});var tQr=s(fP);Dto=r(tQr,"MobileBertTokenizerFast"),tQr.forEach(t),Gto=r(s$," (MobileBERT model)"),s$.forEach(t),Oto=i(S),ms=n(S,"LI",{});var l$=s(ms);Ote=n(l$,"STRONG",{});var aQr=s(Ote);Vto=r(aQr,"mpnet"),aQr.forEach(t),Xto=r(l$," \u2014 "),mP=n(l$,"A",{href:!0});var nQr=s(mP);zto=r(nQr,"MPNetTokenizer"),nQr.forEach(t),Wto=r(l$," or "),gP=n(l$,"A",{href:!0});var sQr=s(gP);Qto=r(sQr,"MPNetTokenizerFast"),sQr.forEach(t),Hto=r(l$," (MPNet model)"),l$.forEach(t),Uto=i(S),gs=n(S,"LI",{});var i$=s(gs);Vte=n(i$,"STRONG",{});var lQr=s(Vte);Jto=r(lQr,"mt5"),lQr.forEach(t),Yto=r(i$," \u2014 "),hP=n(i$,"A",{href:!0});var iQr=s(hP);Kto=r(iQr,"MT5Tokenizer"),iQr.forEach(t),Zto=r(i$," or "),pP=n(i$,"A",{href:!0});var dQr=s(pP);eao=r(dQr,"MT5TokenizerFast"),dQr.forEach(t),oao=r(i$," (mT5 model)"),i$.forEach(t),rao=i(S),hs=n(S,"LI",{});var d$=s(hs);Xte=n(d$,"STRONG",{});var cQr=s(Xte);tao=r(cQr,"nystromformer"),cQr.forEach(t),aao=r(d$," \u2014 "),_P=n(d$,"A",{href:!0});var fQr=s(_P);nao=r(fQr,"AlbertTokenizer"),fQr.forEach(t),sao=r(d$," or "),uP=n(d$,"A",{href:!0});var mQr=s(uP);lao=r(mQr,"AlbertTokenizerFast"),mQr.forEach(t),iao=r(d$," (Nystromformer model)"),d$.forEach(t),dao=i(S),ps=n(S,"LI",{});var c$=s(ps);zte=n(c$,"STRONG",{});var gQr=s(zte);cao=r(gQr,"openai-gpt"),gQr.forEach(t),fao=r(c$," \u2014 "),bP=n(c$,"A",{href:!0});var hQr=s(bP);mao=r(hQr,"OpenAIGPTTokenizer"),hQr.forEach(t),gao=r(c$," or "),vP=n(c$,"A",{href:!0});var pQr=s(vP);hao=r(pQr,"OpenAIGPTTokenizerFast"),pQr.forEach(t),pao=r(c$," (OpenAI GPT model)"),c$.forEach(t),_ao=i(S),qg=n(S,"LI",{});var Nwe=s(qg);Wte=n(Nwe,"STRONG",{});var _Qr=s(Wte);uao=r(_Qr,"opt"),_Qr.forEach(t),bao=r(Nwe," \u2014 "),FP=n(Nwe,"A",{href:!0});var uQr=s(FP);vao=r(uQr,"GPT2Tokenizer"),uQr.forEach(t),Fao=r(Nwe," (OPT model)"),Nwe.forEach(t),Tao=i(S),_s=n(S,"LI",{});var f$=s(_s);Qte=n(f$,"STRONG",{});var bQr=s(Qte);Mao=r(bQr,"pegasus"),bQr.forEach(t),Eao=r(f$," \u2014 "),TP=n(f$,"A",{href:!0});var vQr=s(TP);Cao=r(vQr,"PegasusTokenizer"),vQr.forEach(t),wao=r(f$," or "),MP=n(f$,"A",{href:!0});var FQr=s(MP);Aao=r(FQr,"PegasusTokenizerFast"),FQr.forEach(t),yao=r(f$," (Pegasus model)"),f$.forEach(t),Lao=i(S),Ng=n(S,"LI",{});var jwe=s(Ng);Hte=n(jwe,"STRONG",{});var TQr=s(Hte);xao=r(TQr,"perceiver"),TQr.forEach(t),$ao=r(jwe," \u2014 "),EP=n(jwe,"A",{href:!0});var MQr=s(EP);kao=r(MQr,"PerceiverTokenizer"),MQr.forEach(t),Sao=r(jwe," (Perceiver model)"),jwe.forEach(t),Rao=i(S),jg=n(S,"LI",{});var Dwe=s(jg);Ute=n(Dwe,"STRONG",{});var EQr=s(Ute);Pao=r(EQr,"phobert"),EQr.forEach(t),Bao=r(Dwe," \u2014 "),CP=n(Dwe,"A",{href:!0});var CQr=s(CP);Iao=r(CQr,"PhobertTokenizer"),CQr.forEach(t),qao=r(Dwe," (PhoBERT model)"),Dwe.forEach(t),Nao=i(S),Dg=n(S,"LI",{});var Gwe=s(Dg);Jte=n(Gwe,"STRONG",{});var wQr=s(Jte);jao=r(wQr,"plbart"),wQr.forEach(t),Dao=r(Gwe," \u2014 "),wP=n(Gwe,"A",{href:!0});var AQr=s(wP);Gao=r(AQr,"PLBartTokenizer"),AQr.forEach(t),Oao=r(Gwe," (PLBart model)"),Gwe.forEach(t),Vao=i(S),Gg=n(S,"LI",{});var Owe=s(Gg);Yte=n(Owe,"STRONG",{});var yQr=s(Yte);Xao=r(yQr,"prophetnet"),yQr.forEach(t),zao=r(Owe," \u2014 "),AP=n(Owe,"A",{href:!0});var LQr=s(AP);Wao=r(LQr,"ProphetNetTokenizer"),LQr.forEach(t),Qao=r(Owe," (ProphetNet model)"),Owe.forEach(t),Hao=i(S),us=n(S,"LI",{});var m$=s(us);Kte=n(m$,"STRONG",{});var xQr=s(Kte);Uao=r(xQr,"qdqbert"),xQr.forEach(t),Jao=r(m$," \u2014 "),yP=n(m$,"A",{href:!0});var $Qr=s(yP);Yao=r($Qr,"BertTokenizer"),$Qr.forEach(t),Kao=r(m$," or "),LP=n(m$,"A",{href:!0});var kQr=s(LP);Zao=r(kQr,"BertTokenizerFast"),kQr.forEach(t),eno=r(m$," (QDQBert model)"),m$.forEach(t),ono=i(S),Og=n(S,"LI",{});var Vwe=s(Og);Zte=n(Vwe,"STRONG",{});var SQr=s(Zte);rno=r(SQr,"rag"),SQr.forEach(t),tno=r(Vwe," \u2014 "),xP=n(Vwe,"A",{href:!0});var RQr=s(xP);ano=r(RQr,"RagTokenizer"),RQr.forEach(t),nno=r(Vwe," (RAG model)"),Vwe.forEach(t),sno=i(S),bs=n(S,"LI",{});var g$=s(bs);eae=n(g$,"STRONG",{});var PQr=s(eae);lno=r(PQr,"realm"),PQr.forEach(t),ino=r(g$," \u2014 "),$P=n(g$,"A",{href:!0});var BQr=s($P);dno=r(BQr,"RealmTokenizer"),BQr.forEach(t),cno=r(g$," or "),kP=n(g$,"A",{href:!0});var IQr=s(kP);fno=r(IQr,"RealmTokenizerFast"),IQr.forEach(t),mno=r(g$," (Realm model)"),g$.forEach(t),gno=i(S),vs=n(S,"LI",{});var h$=s(vs);oae=n(h$,"STRONG",{});var qQr=s(oae);hno=r(qQr,"reformer"),qQr.forEach(t),pno=r(h$," \u2014 "),SP=n(h$,"A",{href:!0});var NQr=s(SP);_no=r(NQr,"ReformerTokenizer"),NQr.forEach(t),uno=r(h$," or "),RP=n(h$,"A",{href:!0});var jQr=s(RP);bno=r(jQr,"ReformerTokenizerFast"),jQr.forEach(t),vno=r(h$," (Reformer model)"),h$.forEach(t),Fno=i(S),Fs=n(S,"LI",{});var p$=s(Fs);rae=n(p$,"STRONG",{});var DQr=s(rae);Tno=r(DQr,"rembert"),DQr.forEach(t),Mno=r(p$," \u2014 "),PP=n(p$,"A",{href:!0});var GQr=s(PP);Eno=r(GQr,"RemBertTokenizer"),GQr.forEach(t),Cno=r(p$," or "),BP=n(p$,"A",{href:!0});var OQr=s(BP);wno=r(OQr,"RemBertTokenizerFast"),OQr.forEach(t),Ano=r(p$," (RemBERT model)"),p$.forEach(t),yno=i(S),Ts=n(S,"LI",{});var _$=s(Ts);tae=n(_$,"STRONG",{});var VQr=s(tae);Lno=r(VQr,"retribert"),VQr.forEach(t),xno=r(_$," \u2014 "),IP=n(_$,"A",{href:!0});var XQr=s(IP);$no=r(XQr,"RetriBertTokenizer"),XQr.forEach(t),kno=r(_$," or "),qP=n(_$,"A",{href:!0});var zQr=s(qP);Sno=r(zQr,"RetriBertTokenizerFast"),zQr.forEach(t),Rno=r(_$," (RetriBERT model)"),_$.forEach(t),Pno=i(S),Ms=n(S,"LI",{});var u$=s(Ms);aae=n(u$,"STRONG",{});var WQr=s(aae);Bno=r(WQr,"roberta"),WQr.forEach(t),Ino=r(u$," \u2014 "),NP=n(u$,"A",{href:!0});var QQr=s(NP);qno=r(QQr,"RobertaTokenizer"),QQr.forEach(t),Nno=r(u$," or "),jP=n(u$,"A",{href:!0});var HQr=s(jP);jno=r(HQr,"RobertaTokenizerFast"),HQr.forEach(t),Dno=r(u$," (RoBERTa model)"),u$.forEach(t),Gno=i(S),Es=n(S,"LI",{});var b$=s(Es);nae=n(b$,"STRONG",{});var UQr=s(nae);Ono=r(UQr,"roformer"),UQr.forEach(t),Vno=r(b$," \u2014 "),DP=n(b$,"A",{href:!0});var JQr=s(DP);Xno=r(JQr,"RoFormerTokenizer"),JQr.forEach(t),zno=r(b$," or "),GP=n(b$,"A",{href:!0});var YQr=s(GP);Wno=r(YQr,"RoFormerTokenizerFast"),YQr.forEach(t),Qno=r(b$," (RoFormer model)"),b$.forEach(t),Hno=i(S),Vg=n(S,"LI",{});var Xwe=s(Vg);sae=n(Xwe,"STRONG",{});var KQr=s(sae);Uno=r(KQr,"speech_to_text"),KQr.forEach(t),Jno=r(Xwe," \u2014 "),OP=n(Xwe,"A",{href:!0});var ZQr=s(OP);Yno=r(ZQr,"Speech2TextTokenizer"),ZQr.forEach(t),Kno=r(Xwe," (Speech2Text model)"),Xwe.forEach(t),Zno=i(S),Xg=n(S,"LI",{});var zwe=s(Xg);lae=n(zwe,"STRONG",{});var eHr=s(lae);eso=r(eHr,"speech_to_text_2"),eHr.forEach(t),oso=r(zwe," \u2014 "),VP=n(zwe,"A",{href:!0});var oHr=s(VP);rso=r(oHr,"Speech2Text2Tokenizer"),oHr.forEach(t),tso=r(zwe," (Speech2Text2 model)"),zwe.forEach(t),aso=i(S),Cs=n(S,"LI",{});var v$=s(Cs);iae=n(v$,"STRONG",{});var rHr=s(iae);nso=r(rHr,"splinter"),rHr.forEach(t),sso=r(v$," \u2014 "),XP=n(v$,"A",{href:!0});var tHr=s(XP);lso=r(tHr,"SplinterTokenizer"),tHr.forEach(t),iso=r(v$," or "),zP=n(v$,"A",{href:!0});var aHr=s(zP);dso=r(aHr,"SplinterTokenizerFast"),aHr.forEach(t),cso=r(v$," (Splinter model)"),v$.forEach(t),fso=i(S),ws=n(S,"LI",{});var F$=s(ws);dae=n(F$,"STRONG",{});var nHr=s(dae);mso=r(nHr,"squeezebert"),nHr.forEach(t),gso=r(F$," \u2014 "),WP=n(F$,"A",{href:!0});var sHr=s(WP);hso=r(sHr,"SqueezeBertTokenizer"),sHr.forEach(t),pso=r(F$," or "),QP=n(F$,"A",{href:!0});var lHr=s(QP);_so=r(lHr,"SqueezeBertTokenizerFast"),lHr.forEach(t),uso=r(F$," (SqueezeBERT model)"),F$.forEach(t),bso=i(S),As=n(S,"LI",{});var T$=s(As);cae=n(T$,"STRONG",{});var iHr=s(cae);vso=r(iHr,"t5"),iHr.forEach(t),Fso=r(T$," \u2014 "),HP=n(T$,"A",{href:!0});var dHr=s(HP);Tso=r(dHr,"T5Tokenizer"),dHr.forEach(t),Mso=r(T$," or "),UP=n(T$,"A",{href:!0});var cHr=s(UP);Eso=r(cHr,"T5TokenizerFast"),cHr.forEach(t),Cso=r(T$," (T5 model)"),T$.forEach(t),wso=i(S),zg=n(S,"LI",{});var Wwe=s(zg);fae=n(Wwe,"STRONG",{});var fHr=s(fae);Aso=r(fHr,"tapas"),fHr.forEach(t),yso=r(Wwe," \u2014 "),JP=n(Wwe,"A",{href:!0});var mHr=s(JP);Lso=r(mHr,"TapasTokenizer"),mHr.forEach(t),xso=r(Wwe," (TAPAS model)"),Wwe.forEach(t),$so=i(S),Wg=n(S,"LI",{});var Qwe=s(Wg);mae=n(Qwe,"STRONG",{});var gHr=s(mae);kso=r(gHr,"tapex"),gHr.forEach(t),Sso=r(Qwe," \u2014 "),YP=n(Qwe,"A",{href:!0});var hHr=s(YP);Rso=r(hHr,"TapexTokenizer"),hHr.forEach(t),Pso=r(Qwe," (TAPEX model)"),Qwe.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var Hwe=s(Qg);gae=n(Hwe,"STRONG",{});var pHr=s(gae);Iso=r(pHr,"transfo-xl"),pHr.forEach(t),qso=r(Hwe," \u2014 "),KP=n(Hwe,"A",{href:!0});var _Hr=s(KP);Nso=r(_Hr,"TransfoXLTokenizer"),_Hr.forEach(t),jso=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),Dso=i(S),ys=n(S,"LI",{});var M$=s(ys);hae=n(M$,"STRONG",{});var uHr=s(hae);Gso=r(uHr,"visual_bert"),uHr.forEach(t),Oso=r(M$," \u2014 "),ZP=n(M$,"A",{href:!0});var bHr=s(ZP);Vso=r(bHr,"BertTokenizer"),bHr.forEach(t),Xso=r(M$," or "),eB=n(M$,"A",{href:!0});var vHr=s(eB);zso=r(vHr,"BertTokenizerFast"),vHr.forEach(t),Wso=r(M$," (VisualBert model)"),M$.forEach(t),Qso=i(S),Hg=n(S,"LI",{});var Uwe=s(Hg);pae=n(Uwe,"STRONG",{});var FHr=s(pae);Hso=r(FHr,"wav2vec2"),FHr.forEach(t),Uso=r(Uwe," \u2014 "),oB=n(Uwe,"A",{href:!0});var THr=s(oB);Jso=r(THr,"Wav2Vec2CTCTokenizer"),THr.forEach(t),Yso=r(Uwe," (Wav2Vec2 model)"),Uwe.forEach(t),Kso=i(S),Ug=n(S,"LI",{});var Jwe=s(Ug);_ae=n(Jwe,"STRONG",{});var MHr=s(_ae);Zso=r(MHr,"wav2vec2-conformer"),MHr.forEach(t),elo=r(Jwe," \u2014 "),rB=n(Jwe,"A",{href:!0});var EHr=s(rB);olo=r(EHr,"Wav2Vec2CTCTokenizer"),EHr.forEach(t),rlo=r(Jwe," (Wav2Vec2-Conformer model)"),Jwe.forEach(t),tlo=i(S),Jg=n(S,"LI",{});var Ywe=s(Jg);uae=n(Ywe,"STRONG",{});var CHr=s(uae);alo=r(CHr,"wav2vec2_phoneme"),CHr.forEach(t),nlo=r(Ywe," \u2014 "),tB=n(Ywe,"A",{href:!0});var wHr=s(tB);slo=r(wHr,"Wav2Vec2PhonemeCTCTokenizer"),wHr.forEach(t),llo=r(Ywe," (Wav2Vec2Phoneme model)"),Ywe.forEach(t),ilo=i(S),Ls=n(S,"LI",{});var E$=s(Ls);bae=n(E$,"STRONG",{});var AHr=s(bae);dlo=r(AHr,"xglm"),AHr.forEach(t),clo=r(E$," \u2014 "),aB=n(E$,"A",{href:!0});var yHr=s(aB);flo=r(yHr,"XGLMTokenizer"),yHr.forEach(t),mlo=r(E$," or "),nB=n(E$,"A",{href:!0});var LHr=s(nB);glo=r(LHr,"XGLMTokenizerFast"),LHr.forEach(t),hlo=r(E$," (XGLM model)"),E$.forEach(t),plo=i(S),Yg=n(S,"LI",{});var Kwe=s(Yg);vae=n(Kwe,"STRONG",{});var xHr=s(vae);_lo=r(xHr,"xlm"),xHr.forEach(t),ulo=r(Kwe," \u2014 "),sB=n(Kwe,"A",{href:!0});var $Hr=s(sB);blo=r($Hr,"XLMTokenizer"),$Hr.forEach(t),vlo=r(Kwe," (XLM model)"),Kwe.forEach(t),Flo=i(S),Kg=n(S,"LI",{});var Zwe=s(Kg);Fae=n(Zwe,"STRONG",{});var kHr=s(Fae);Tlo=r(kHr,"xlm-prophetnet"),kHr.forEach(t),Mlo=r(Zwe," \u2014 "),lB=n(Zwe,"A",{href:!0});var SHr=s(lB);Elo=r(SHr,"XLMProphetNetTokenizer"),SHr.forEach(t),Clo=r(Zwe," (XLMProphetNet model)"),Zwe.forEach(t),wlo=i(S),xs=n(S,"LI",{});var C$=s(xs);Tae=n(C$,"STRONG",{});var RHr=s(Tae);Alo=r(RHr,"xlm-roberta"),RHr.forEach(t),ylo=r(C$," \u2014 "),iB=n(C$,"A",{href:!0});var PHr=s(iB);Llo=r(PHr,"XLMRobertaTokenizer"),PHr.forEach(t),xlo=r(C$," or "),dB=n(C$,"A",{href:!0});var BHr=s(dB);$lo=r(BHr,"XLMRobertaTokenizerFast"),BHr.forEach(t),klo=r(C$," (XLM-RoBERTa model)"),C$.forEach(t),Slo=i(S),$s=n(S,"LI",{});var w$=s($s);Mae=n(w$,"STRONG",{});var IHr=s(Mae);Rlo=r(IHr,"xlm-roberta-xl"),IHr.forEach(t),Plo=r(w$," \u2014 "),cB=n(w$,"A",{href:!0});var qHr=s(cB);Blo=r(qHr,"RobertaTokenizer"),qHr.forEach(t),Ilo=r(w$," or "),fB=n(w$,"A",{href:!0});var NHr=s(fB);qlo=r(NHr,"RobertaTokenizerFast"),NHr.forEach(t),Nlo=r(w$," (XLM-RoBERTa-XL model)"),w$.forEach(t),jlo=i(S),ks=n(S,"LI",{});var A$=s(ks);Eae=n(A$,"STRONG",{});var jHr=s(Eae);Dlo=r(jHr,"xlnet"),jHr.forEach(t),Glo=r(A$," \u2014 "),mB=n(A$,"A",{href:!0});var DHr=s(mB);Olo=r(DHr,"XLNetTokenizer"),DHr.forEach(t),Vlo=r(A$," or "),gB=n(A$,"A",{href:!0});var GHr=s(gB);Xlo=r(GHr,"XLNetTokenizerFast"),GHr.forEach(t),zlo=r(A$," (XLNet model)"),A$.forEach(t),Wlo=i(S),Ss=n(S,"LI",{});var y$=s(Ss);Cae=n(y$,"STRONG",{});var OHr=s(Cae);Qlo=r(OHr,"yoso"),OHr.forEach(t),Hlo=r(y$," \u2014 "),hB=n(y$,"A",{href:!0});var VHr=s(hB);Ulo=r(VHr,"AlbertTokenizer"),VHr.forEach(t),Jlo=r(y$," or "),pB=n(y$,"A",{href:!0});var XHr=s(pB);Ylo=r(XHr,"AlbertTokenizerFast"),XHr.forEach(t),Klo=r(y$," (YOSO model)"),y$.forEach(t),S.forEach(t),Zlo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),eio=i(Is),eh=n(Is,"DIV",{class:!0});var lje=s(eh);T(y6.$$.fragment,lje),oio=i(lje),wae=n(lje,"P",{});var zHr=s(wae);rio=r(zHr,"Register a new tokenizer in this mapping."),zHr.forEach(t),lje.forEach(t),Is.forEach(t),iqe=i(f),Ti=n(f,"H2",{class:!0});var ije=s(Ti);oh=n(ije,"A",{id:!0,class:!0,href:!0});var WHr=s(oh);Aae=n(WHr,"SPAN",{});var QHr=s(Aae);T(L6.$$.fragment,QHr),QHr.forEach(t),WHr.forEach(t),tio=i(ije),yae=n(ije,"SPAN",{});var HHr=s(yae);aio=r(HHr,"AutoFeatureExtractor"),HHr.forEach(t),ije.forEach(t),dqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(x6.$$.fragment,Ns),nio=i(Ns),$6=n(Ns,"P",{});var dje=s($6);sio=r(dje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_B=n(dje,"A",{href:!0});var UHr=s(_B);lio=r(UHr,"AutoFeatureExtractor.from_pretrained()"),UHr.forEach(t),iio=r(dje," class method."),dje.forEach(t),dio=i(Ns),k6=n(Ns,"P",{});var cje=s(k6);cio=r(cje,"This class cannot be instantiated directly using "),Lae=n(cje,"CODE",{});var JHr=s(Lae);fio=r(JHr,"__init__()"),JHr.forEach(t),mio=r(cje," (throws an error)."),cje.forEach(t),gio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(S6.$$.fragment,Zt),hio=i(Zt),xae=n(Zt,"P",{});var YHr=s(xae);pio=r(YHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),YHr.forEach(t),_io=i(Zt),ya=n(Zt,"P",{});var u0=s(ya);uio=r(u0,"The feature extractor class to instantiate is selected based on the "),$ae=n(u0,"CODE",{});var KHr=s($ae);bio=r(KHr,"model_type"),KHr.forEach(t),vio=r(u0,` property of the config object
(either passed as an argument or loaded from `),kae=n(u0,"CODE",{});var ZHr=s(kae);Fio=r(ZHr,"pretrained_model_name_or_path"),ZHr.forEach(t),Tio=r(u0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sae=n(u0,"CODE",{});var eUr=s(Sae);Mio=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),Eio=r(u0,":"),u0.forEach(t),Cio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);rh=n(te,"LI",{});var e0e=s(rh);Rae=n(e0e,"STRONG",{});var oUr=s(Rae);wio=r(oUr,"beit"),oUr.forEach(t),Aio=r(e0e," \u2014 "),uB=n(e0e,"A",{href:!0});var rUr=s(uB);yio=r(rUr,"BeitFeatureExtractor"),rUr.forEach(t),Lio=r(e0e," (BEiT model)"),e0e.forEach(t),xio=i(te),th=n(te,"LI",{});var o0e=s(th);Pae=n(o0e,"STRONG",{});var tUr=s(Pae);$io=r(tUr,"clip"),tUr.forEach(t),kio=r(o0e," \u2014 "),bB=n(o0e,"A",{href:!0});var aUr=s(bB);Sio=r(aUr,"CLIPFeatureExtractor"),aUr.forEach(t),Rio=r(o0e," (CLIP model)"),o0e.forEach(t),Pio=i(te),ah=n(te,"LI",{});var r0e=s(ah);Bae=n(r0e,"STRONG",{});var nUr=s(Bae);Bio=r(nUr,"convnext"),nUr.forEach(t),Iio=r(r0e," \u2014 "),vB=n(r0e,"A",{href:!0});var sUr=s(vB);qio=r(sUr,"ConvNextFeatureExtractor"),sUr.forEach(t),Nio=r(r0e," (ConvNext model)"),r0e.forEach(t),jio=i(te),nh=n(te,"LI",{});var t0e=s(nh);Iae=n(t0e,"STRONG",{});var lUr=s(Iae);Dio=r(lUr,"data2vec-audio"),lUr.forEach(t),Gio=r(t0e," \u2014 "),FB=n(t0e,"A",{href:!0});var iUr=s(FB);Oio=r(iUr,"Wav2Vec2FeatureExtractor"),iUr.forEach(t),Vio=r(t0e," (Data2VecAudio model)"),t0e.forEach(t),Xio=i(te),sh=n(te,"LI",{});var a0e=s(sh);qae=n(a0e,"STRONG",{});var dUr=s(qae);zio=r(dUr,"data2vec-vision"),dUr.forEach(t),Wio=r(a0e," \u2014 "),TB=n(a0e,"A",{href:!0});var cUr=s(TB);Qio=r(cUr,"BeitFeatureExtractor"),cUr.forEach(t),Hio=r(a0e," (Data2VecVision model)"),a0e.forEach(t),Uio=i(te),lh=n(te,"LI",{});var n0e=s(lh);Nae=n(n0e,"STRONG",{});var fUr=s(Nae);Jio=r(fUr,"deit"),fUr.forEach(t),Yio=r(n0e," \u2014 "),MB=n(n0e,"A",{href:!0});var mUr=s(MB);Kio=r(mUr,"DeiTFeatureExtractor"),mUr.forEach(t),Zio=r(n0e," (DeiT model)"),n0e.forEach(t),edo=i(te),ih=n(te,"LI",{});var s0e=s(ih);jae=n(s0e,"STRONG",{});var gUr=s(jae);odo=r(gUr,"detr"),gUr.forEach(t),rdo=r(s0e," \u2014 "),EB=n(s0e,"A",{href:!0});var hUr=s(EB);tdo=r(hUr,"DetrFeatureExtractor"),hUr.forEach(t),ado=r(s0e," (DETR model)"),s0e.forEach(t),ndo=i(te),dh=n(te,"LI",{});var l0e=s(dh);Dae=n(l0e,"STRONG",{});var pUr=s(Dae);sdo=r(pUr,"dpt"),pUr.forEach(t),ldo=r(l0e," \u2014 "),CB=n(l0e,"A",{href:!0});var _Ur=s(CB);ido=r(_Ur,"DPTFeatureExtractor"),_Ur.forEach(t),ddo=r(l0e," (DPT model)"),l0e.forEach(t),cdo=i(te),ch=n(te,"LI",{});var i0e=s(ch);Gae=n(i0e,"STRONG",{});var uUr=s(Gae);fdo=r(uUr,"flava"),uUr.forEach(t),mdo=r(i0e," \u2014 "),wB=n(i0e,"A",{href:!0});var bUr=s(wB);gdo=r(bUr,"FlavaFeatureExtractor"),bUr.forEach(t),hdo=r(i0e," (Flava model)"),i0e.forEach(t),pdo=i(te),fh=n(te,"LI",{});var d0e=s(fh);Oae=n(d0e,"STRONG",{});var vUr=s(Oae);_do=r(vUr,"glpn"),vUr.forEach(t),udo=r(d0e," \u2014 "),AB=n(d0e,"A",{href:!0});var FUr=s(AB);bdo=r(FUr,"GLPNFeatureExtractor"),FUr.forEach(t),vdo=r(d0e," (GLPN model)"),d0e.forEach(t),Fdo=i(te),mh=n(te,"LI",{});var c0e=s(mh);Vae=n(c0e,"STRONG",{});var TUr=s(Vae);Tdo=r(TUr,"hubert"),TUr.forEach(t),Mdo=r(c0e," \u2014 "),yB=n(c0e,"A",{href:!0});var MUr=s(yB);Edo=r(MUr,"Wav2Vec2FeatureExtractor"),MUr.forEach(t),Cdo=r(c0e," (Hubert model)"),c0e.forEach(t),wdo=i(te),gh=n(te,"LI",{});var f0e=s(gh);Xae=n(f0e,"STRONG",{});var EUr=s(Xae);Ado=r(EUr,"layoutlmv2"),EUr.forEach(t),ydo=r(f0e," \u2014 "),LB=n(f0e,"A",{href:!0});var CUr=s(LB);Ldo=r(CUr,"LayoutLMv2FeatureExtractor"),CUr.forEach(t),xdo=r(f0e," (LayoutLMv2 model)"),f0e.forEach(t),$do=i(te),hh=n(te,"LI",{});var m0e=s(hh);zae=n(m0e,"STRONG",{});var wUr=s(zae);kdo=r(wUr,"maskformer"),wUr.forEach(t),Sdo=r(m0e," \u2014 "),xB=n(m0e,"A",{href:!0});var AUr=s(xB);Rdo=r(AUr,"MaskFormerFeatureExtractor"),AUr.forEach(t),Pdo=r(m0e," (MaskFormer model)"),m0e.forEach(t),Bdo=i(te),ph=n(te,"LI",{});var g0e=s(ph);Wae=n(g0e,"STRONG",{});var yUr=s(Wae);Ido=r(yUr,"perceiver"),yUr.forEach(t),qdo=r(g0e," \u2014 "),$B=n(g0e,"A",{href:!0});var LUr=s($B);Ndo=r(LUr,"PerceiverFeatureExtractor"),LUr.forEach(t),jdo=r(g0e," (Perceiver model)"),g0e.forEach(t),Ddo=i(te),_h=n(te,"LI",{});var h0e=s(_h);Qae=n(h0e,"STRONG",{});var xUr=s(Qae);Gdo=r(xUr,"poolformer"),xUr.forEach(t),Odo=r(h0e," \u2014 "),kB=n(h0e,"A",{href:!0});var $Ur=s(kB);Vdo=r($Ur,"PoolFormerFeatureExtractor"),$Ur.forEach(t),Xdo=r(h0e," (PoolFormer model)"),h0e.forEach(t),zdo=i(te),uh=n(te,"LI",{});var p0e=s(uh);Hae=n(p0e,"STRONG",{});var kUr=s(Hae);Wdo=r(kUr,"regnet"),kUr.forEach(t),Qdo=r(p0e," \u2014 "),SB=n(p0e,"A",{href:!0});var SUr=s(SB);Hdo=r(SUr,"ConvNextFeatureExtractor"),SUr.forEach(t),Udo=r(p0e," (RegNet model)"),p0e.forEach(t),Jdo=i(te),bh=n(te,"LI",{});var _0e=s(bh);Uae=n(_0e,"STRONG",{});var RUr=s(Uae);Ydo=r(RUr,"resnet"),RUr.forEach(t),Kdo=r(_0e," \u2014 "),RB=n(_0e,"A",{href:!0});var PUr=s(RB);Zdo=r(PUr,"ConvNextFeatureExtractor"),PUr.forEach(t),eco=r(_0e," (ResNet model)"),_0e.forEach(t),oco=i(te),vh=n(te,"LI",{});var u0e=s(vh);Jae=n(u0e,"STRONG",{});var BUr=s(Jae);rco=r(BUr,"segformer"),BUr.forEach(t),tco=r(u0e," \u2014 "),PB=n(u0e,"A",{href:!0});var IUr=s(PB);aco=r(IUr,"SegformerFeatureExtractor"),IUr.forEach(t),nco=r(u0e," (SegFormer model)"),u0e.forEach(t),sco=i(te),Fh=n(te,"LI",{});var b0e=s(Fh);Yae=n(b0e,"STRONG",{});var qUr=s(Yae);lco=r(qUr,"speech_to_text"),qUr.forEach(t),ico=r(b0e," \u2014 "),BB=n(b0e,"A",{href:!0});var NUr=s(BB);dco=r(NUr,"Speech2TextFeatureExtractor"),NUr.forEach(t),cco=r(b0e," (Speech2Text model)"),b0e.forEach(t),fco=i(te),Th=n(te,"LI",{});var v0e=s(Th);Kae=n(v0e,"STRONG",{});var jUr=s(Kae);mco=r(jUr,"swin"),jUr.forEach(t),gco=r(v0e," \u2014 "),IB=n(v0e,"A",{href:!0});var DUr=s(IB);hco=r(DUr,"ViTFeatureExtractor"),DUr.forEach(t),pco=r(v0e," (Swin model)"),v0e.forEach(t),_co=i(te),Mh=n(te,"LI",{});var F0e=s(Mh);Zae=n(F0e,"STRONG",{});var GUr=s(Zae);uco=r(GUr,"van"),GUr.forEach(t),bco=r(F0e," \u2014 "),qB=n(F0e,"A",{href:!0});var OUr=s(qB);vco=r(OUr,"ConvNextFeatureExtractor"),OUr.forEach(t),Fco=r(F0e," (VAN model)"),F0e.forEach(t),Tco=i(te),Eh=n(te,"LI",{});var T0e=s(Eh);ene=n(T0e,"STRONG",{});var VUr=s(ene);Mco=r(VUr,"vit"),VUr.forEach(t),Eco=r(T0e," \u2014 "),NB=n(T0e,"A",{href:!0});var XUr=s(NB);Cco=r(XUr,"ViTFeatureExtractor"),XUr.forEach(t),wco=r(T0e," (ViT model)"),T0e.forEach(t),Aco=i(te),Ch=n(te,"LI",{});var M0e=s(Ch);one=n(M0e,"STRONG",{});var zUr=s(one);yco=r(zUr,"vit_mae"),zUr.forEach(t),Lco=r(M0e," \u2014 "),jB=n(M0e,"A",{href:!0});var WUr=s(jB);xco=r(WUr,"ViTFeatureExtractor"),WUr.forEach(t),$co=r(M0e," (ViTMAE model)"),M0e.forEach(t),kco=i(te),wh=n(te,"LI",{});var E0e=s(wh);rne=n(E0e,"STRONG",{});var QUr=s(rne);Sco=r(QUr,"wav2vec2"),QUr.forEach(t),Rco=r(E0e," \u2014 "),DB=n(E0e,"A",{href:!0});var HUr=s(DB);Pco=r(HUr,"Wav2Vec2FeatureExtractor"),HUr.forEach(t),Bco=r(E0e," (Wav2Vec2 model)"),E0e.forEach(t),Ico=i(te),Ah=n(te,"LI",{});var C0e=s(Ah);tne=n(C0e,"STRONG",{});var UUr=s(tne);qco=r(UUr,"wav2vec2-conformer"),UUr.forEach(t),Nco=r(C0e," \u2014 "),GB=n(C0e,"A",{href:!0});var JUr=s(GB);jco=r(JUr,"Wav2Vec2FeatureExtractor"),JUr.forEach(t),Dco=r(C0e," (Wav2Vec2-Conformer model)"),C0e.forEach(t),Gco=i(te),yh=n(te,"LI",{});var w0e=s(yh);ane=n(w0e,"STRONG",{});var YUr=s(ane);Oco=r(YUr,"yolos"),YUr.forEach(t),Vco=r(w0e," \u2014 "),OB=n(w0e,"A",{href:!0});var KUr=s(OB);Xco=r(KUr,"YolosFeatureExtractor"),KUr.forEach(t),zco=r(w0e," (YOLOS model)"),w0e.forEach(t),te.forEach(t),Wco=i(Zt),T(Lh.$$.fragment,Zt),Qco=i(Zt),T(xh.$$.fragment,Zt),Zt.forEach(t),Hco=i(Ns),$h=n(Ns,"DIV",{class:!0});var fje=s($h);T(R6.$$.fragment,fje),Uco=i(fje),nne=n(fje,"P",{});var ZUr=s(nne);Jco=r(ZUr,"Register a new feature extractor for this class."),ZUr.forEach(t),fje.forEach(t),Ns.forEach(t),cqe=i(f),Mi=n(f,"H2",{class:!0});var mje=s(Mi);kh=n(mje,"A",{id:!0,class:!0,href:!0});var eJr=s(kh);sne=n(eJr,"SPAN",{});var oJr=s(sne);T(P6.$$.fragment,oJr),oJr.forEach(t),eJr.forEach(t),Yco=i(mje),lne=n(mje,"SPAN",{});var rJr=s(lne);Kco=r(rJr,"AutoProcessor"),rJr.forEach(t),mje.forEach(t),fqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(B6.$$.fragment,js),Zco=i(js),I6=n(js,"P",{});var gje=s(I6);efo=r(gje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VB=n(gje,"A",{href:!0});var tJr=s(VB);ofo=r(tJr,"AutoProcessor.from_pretrained()"),tJr.forEach(t),rfo=r(gje," class method."),gje.forEach(t),tfo=i(js),q6=n(js,"P",{});var hje=s(q6);afo=r(hje,"This class cannot be instantiated directly using "),ine=n(hje,"CODE",{});var aJr=s(ine);nfo=r(aJr,"__init__()"),aJr.forEach(t),sfo=r(hje," (throws an error)."),hje.forEach(t),lfo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(N6.$$.fragment,ea),ifo=i(ea),dne=n(ea,"P",{});var nJr=s(dne);dfo=r(nJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nJr.forEach(t),cfo=i(ea),Ei=n(ea,"P",{});var jK=s(Ei);ffo=r(jK,"The processor class to instantiate is selected based on the "),cne=n(jK,"CODE",{});var sJr=s(cne);mfo=r(sJr,"model_type"),sJr.forEach(t),gfo=r(jK,` property of the config object (either
passed as an argument or loaded from `),fne=n(jK,"CODE",{});var lJr=s(fne);hfo=r(lJr,"pretrained_model_name_or_path"),lJr.forEach(t),pfo=r(jK," if possible):"),jK.forEach(t),_fo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Sh=n(be,"LI",{});var A0e=s(Sh);mne=n(A0e,"STRONG",{});var iJr=s(mne);ufo=r(iJr,"clip"),iJr.forEach(t),bfo=r(A0e," \u2014 "),XB=n(A0e,"A",{href:!0});var dJr=s(XB);vfo=r(dJr,"CLIPProcessor"),dJr.forEach(t),Ffo=r(A0e," (CLIP model)"),A0e.forEach(t),Tfo=i(be),Rh=n(be,"LI",{});var y0e=s(Rh);gne=n(y0e,"STRONG",{});var cJr=s(gne);Mfo=r(cJr,"flava"),cJr.forEach(t),Efo=r(y0e," \u2014 "),hne=n(y0e,"CODE",{});var fJr=s(hne);Cfo=r(fJr,"FLAVAProcessor"),fJr.forEach(t),wfo=r(y0e," (Flava model)"),y0e.forEach(t),Afo=i(be),Ph=n(be,"LI",{});var L0e=s(Ph);pne=n(L0e,"STRONG",{});var mJr=s(pne);yfo=r(mJr,"layoutlmv2"),mJr.forEach(t),Lfo=r(L0e," \u2014 "),zB=n(L0e,"A",{href:!0});var gJr=s(zB);xfo=r(gJr,"LayoutLMv2Processor"),gJr.forEach(t),$fo=r(L0e," (LayoutLMv2 model)"),L0e.forEach(t),kfo=i(be),Bh=n(be,"LI",{});var x0e=s(Bh);_ne=n(x0e,"STRONG",{});var hJr=s(_ne);Sfo=r(hJr,"layoutxlm"),hJr.forEach(t),Rfo=r(x0e," \u2014 "),WB=n(x0e,"A",{href:!0});var pJr=s(WB);Pfo=r(pJr,"LayoutXLMProcessor"),pJr.forEach(t),Bfo=r(x0e," (LayoutXLM model)"),x0e.forEach(t),Ifo=i(be),Ih=n(be,"LI",{});var $0e=s(Ih);une=n($0e,"STRONG",{});var _Jr=s(une);qfo=r(_Jr,"sew"),_Jr.forEach(t),Nfo=r($0e," \u2014 "),QB=n($0e,"A",{href:!0});var uJr=s(QB);jfo=r(uJr,"Wav2Vec2Processor"),uJr.forEach(t),Dfo=r($0e," (SEW model)"),$0e.forEach(t),Gfo=i(be),qh=n(be,"LI",{});var k0e=s(qh);bne=n(k0e,"STRONG",{});var bJr=s(bne);Ofo=r(bJr,"sew-d"),bJr.forEach(t),Vfo=r(k0e," \u2014 "),HB=n(k0e,"A",{href:!0});var vJr=s(HB);Xfo=r(vJr,"Wav2Vec2Processor"),vJr.forEach(t),zfo=r(k0e," (SEW-D model)"),k0e.forEach(t),Wfo=i(be),Nh=n(be,"LI",{});var S0e=s(Nh);vne=n(S0e,"STRONG",{});var FJr=s(vne);Qfo=r(FJr,"speech_to_text"),FJr.forEach(t),Hfo=r(S0e," \u2014 "),UB=n(S0e,"A",{href:!0});var TJr=s(UB);Ufo=r(TJr,"Speech2TextProcessor"),TJr.forEach(t),Jfo=r(S0e," (Speech2Text model)"),S0e.forEach(t),Yfo=i(be),jh=n(be,"LI",{});var R0e=s(jh);Fne=n(R0e,"STRONG",{});var MJr=s(Fne);Kfo=r(MJr,"speech_to_text_2"),MJr.forEach(t),Zfo=r(R0e," \u2014 "),JB=n(R0e,"A",{href:!0});var EJr=s(JB);emo=r(EJr,"Speech2Text2Processor"),EJr.forEach(t),omo=r(R0e," (Speech2Text2 model)"),R0e.forEach(t),rmo=i(be),Dh=n(be,"LI",{});var P0e=s(Dh);Tne=n(P0e,"STRONG",{});var CJr=s(Tne);tmo=r(CJr,"trocr"),CJr.forEach(t),amo=r(P0e," \u2014 "),YB=n(P0e,"A",{href:!0});var wJr=s(YB);nmo=r(wJr,"TrOCRProcessor"),wJr.forEach(t),smo=r(P0e," (TrOCR model)"),P0e.forEach(t),lmo=i(be),Gh=n(be,"LI",{});var B0e=s(Gh);Mne=n(B0e,"STRONG",{});var AJr=s(Mne);imo=r(AJr,"unispeech"),AJr.forEach(t),dmo=r(B0e," \u2014 "),KB=n(B0e,"A",{href:!0});var yJr=s(KB);cmo=r(yJr,"Wav2Vec2Processor"),yJr.forEach(t),fmo=r(B0e," (UniSpeech model)"),B0e.forEach(t),mmo=i(be),Oh=n(be,"LI",{});var I0e=s(Oh);Ene=n(I0e,"STRONG",{});var LJr=s(Ene);gmo=r(LJr,"unispeech-sat"),LJr.forEach(t),hmo=r(I0e," \u2014 "),ZB=n(I0e,"A",{href:!0});var xJr=s(ZB);pmo=r(xJr,"Wav2Vec2Processor"),xJr.forEach(t),_mo=r(I0e," (UniSpeechSat model)"),I0e.forEach(t),umo=i(be),Vh=n(be,"LI",{});var q0e=s(Vh);Cne=n(q0e,"STRONG",{});var $Jr=s(Cne);bmo=r($Jr,"vilt"),$Jr.forEach(t),vmo=r(q0e," \u2014 "),eI=n(q0e,"A",{href:!0});var kJr=s(eI);Fmo=r(kJr,"ViltProcessor"),kJr.forEach(t),Tmo=r(q0e," (ViLT model)"),q0e.forEach(t),Mmo=i(be),Xh=n(be,"LI",{});var N0e=s(Xh);wne=n(N0e,"STRONG",{});var SJr=s(wne);Emo=r(SJr,"vision-text-dual-encoder"),SJr.forEach(t),Cmo=r(N0e," \u2014 "),oI=n(N0e,"A",{href:!0});var RJr=s(oI);wmo=r(RJr,"VisionTextDualEncoderProcessor"),RJr.forEach(t),Amo=r(N0e," (VisionTextDualEncoder model)"),N0e.forEach(t),ymo=i(be),zh=n(be,"LI",{});var j0e=s(zh);Ane=n(j0e,"STRONG",{});var PJr=s(Ane);Lmo=r(PJr,"wav2vec2"),PJr.forEach(t),xmo=r(j0e," \u2014 "),rI=n(j0e,"A",{href:!0});var BJr=s(rI);$mo=r(BJr,"Wav2Vec2Processor"),BJr.forEach(t),kmo=r(j0e," (Wav2Vec2 model)"),j0e.forEach(t),Smo=i(be),Wh=n(be,"LI",{});var D0e=s(Wh);yne=n(D0e,"STRONG",{});var IJr=s(yne);Rmo=r(IJr,"wav2vec2-conformer"),IJr.forEach(t),Pmo=r(D0e," \u2014 "),tI=n(D0e,"A",{href:!0});var qJr=s(tI);Bmo=r(qJr,"Wav2Vec2Processor"),qJr.forEach(t),Imo=r(D0e," (Wav2Vec2-Conformer model)"),D0e.forEach(t),qmo=i(be),Qh=n(be,"LI",{});var G0e=s(Qh);Lne=n(G0e,"STRONG",{});var NJr=s(Lne);Nmo=r(NJr,"wavlm"),NJr.forEach(t),jmo=r(G0e," \u2014 "),aI=n(G0e,"A",{href:!0});var jJr=s(aI);Dmo=r(jJr,"Wav2Vec2Processor"),jJr.forEach(t),Gmo=r(G0e," (WavLM model)"),G0e.forEach(t),be.forEach(t),Omo=i(ea),T(Hh.$$.fragment,ea),Vmo=i(ea),T(Uh.$$.fragment,ea),ea.forEach(t),Xmo=i(js),Jh=n(js,"DIV",{class:!0});var pje=s(Jh);T(j6.$$.fragment,pje),zmo=i(pje),xne=n(pje,"P",{});var DJr=s(xne);Wmo=r(DJr,"Register a new processor for this class."),DJr.forEach(t),pje.forEach(t),js.forEach(t),mqe=i(f),Ci=n(f,"H2",{class:!0});var _je=s(Ci);Yh=n(_je,"A",{id:!0,class:!0,href:!0});var GJr=s(Yh);$ne=n(GJr,"SPAN",{});var OJr=s($ne);T(D6.$$.fragment,OJr),OJr.forEach(t),GJr.forEach(t),Qmo=i(_je),kne=n(_je,"SPAN",{});var VJr=s(kne);Hmo=r(VJr,"AutoModel"),VJr.forEach(t),_je.forEach(t),gqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(G6.$$.fragment,Ds),Umo=i(Ds),wi=n(Ds,"P",{});var DK=s(wi);Jmo=r(DK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nI=n(DK,"A",{href:!0});var XJr=s(nI);Ymo=r(XJr,"from_pretrained()"),XJr.forEach(t),Kmo=r(DK," class method or the "),sI=n(DK,"A",{href:!0});var zJr=s(sI);Zmo=r(zJr,"from_config()"),zJr.forEach(t),ego=r(DK,` class
method.`),DK.forEach(t),ogo=i(Ds),O6=n(Ds,"P",{});var uje=s(O6);rgo=r(uje,"This class cannot be instantiated directly using "),Sne=n(uje,"CODE",{});var WJr=s(Sne);tgo=r(WJr,"__init__()"),WJr.forEach(t),ago=r(uje," (throws an error)."),uje.forEach(t),ngo=i(Ds),tt=n(Ds,"DIV",{class:!0});var b0=s(tt);T(V6.$$.fragment,b0),sgo=i(b0),Rne=n(b0,"P",{});var QJr=s(Rne);lgo=r(QJr,"Instantiates one of the base model classes of the library from a configuration."),QJr.forEach(t),igo=i(b0),Ai=n(b0,"P",{});var GK=s(Ai);dgo=r(GK,`Note:
Loading a model from its configuration file does `),Pne=n(GK,"STRONG",{});var HJr=s(Pne);cgo=r(HJr,"not"),HJr.forEach(t),fgo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lI=n(GK,"A",{href:!0});var UJr=s(lI);mgo=r(UJr,"from_pretrained()"),UJr.forEach(t),ggo=r(GK," to load the model weights."),GK.forEach(t),hgo=i(b0),T(Kh.$$.fragment,b0),b0.forEach(t),pgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(X6.$$.fragment,oa),_go=i(oa),Bne=n(oa,"P",{});var JJr=s(Bne);ugo=r(JJr,"Instantiate one of the base model classes of the library from a pretrained model."),JJr.forEach(t),bgo=i(oa),La=n(oa,"P",{});var v0=s(La);vgo=r(v0,"The model class to instantiate is selected based on the "),Ine=n(v0,"CODE",{});var YJr=s(Ine);Fgo=r(YJr,"model_type"),YJr.forEach(t),Tgo=r(v0,` property of the config object (either
passed as an argument or loaded from `),qne=n(v0,"CODE",{});var KJr=s(qne);Mgo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),Ego=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=n(v0,"CODE",{});var ZJr=s(Nne);Cgo=r(ZJr,"pretrained_model_name_or_path"),ZJr.forEach(t),wgo=r(v0,":"),v0.forEach(t),Ago=i(oa),x=n(oa,"UL",{});var $=s(x);Zh=n($,"LI",{});var O0e=s(Zh);jne=n(O0e,"STRONG",{});var eYr=s(jne);ygo=r(eYr,"albert"),eYr.forEach(t),Lgo=r(O0e," \u2014 "),iI=n(O0e,"A",{href:!0});var oYr=s(iI);xgo=r(oYr,"AlbertModel"),oYr.forEach(t),$go=r(O0e," (ALBERT model)"),O0e.forEach(t),kgo=i($),ep=n($,"LI",{});var V0e=s(ep);Dne=n(V0e,"STRONG",{});var rYr=s(Dne);Sgo=r(rYr,"bart"),rYr.forEach(t),Rgo=r(V0e," \u2014 "),dI=n(V0e,"A",{href:!0});var tYr=s(dI);Pgo=r(tYr,"BartModel"),tYr.forEach(t),Bgo=r(V0e," (BART model)"),V0e.forEach(t),Igo=i($),op=n($,"LI",{});var X0e=s(op);Gne=n(X0e,"STRONG",{});var aYr=s(Gne);qgo=r(aYr,"beit"),aYr.forEach(t),Ngo=r(X0e," \u2014 "),cI=n(X0e,"A",{href:!0});var nYr=s(cI);jgo=r(nYr,"BeitModel"),nYr.forEach(t),Dgo=r(X0e," (BEiT model)"),X0e.forEach(t),Ggo=i($),rp=n($,"LI",{});var z0e=s(rp);One=n(z0e,"STRONG",{});var sYr=s(One);Ogo=r(sYr,"bert"),sYr.forEach(t),Vgo=r(z0e," \u2014 "),fI=n(z0e,"A",{href:!0});var lYr=s(fI);Xgo=r(lYr,"BertModel"),lYr.forEach(t),zgo=r(z0e," (BERT model)"),z0e.forEach(t),Wgo=i($),tp=n($,"LI",{});var W0e=s(tp);Vne=n(W0e,"STRONG",{});var iYr=s(Vne);Qgo=r(iYr,"bert-generation"),iYr.forEach(t),Hgo=r(W0e," \u2014 "),mI=n(W0e,"A",{href:!0});var dYr=s(mI);Ugo=r(dYr,"BertGenerationEncoder"),dYr.forEach(t),Jgo=r(W0e," (Bert Generation model)"),W0e.forEach(t),Ygo=i($),ap=n($,"LI",{});var Q0e=s(ap);Xne=n(Q0e,"STRONG",{});var cYr=s(Xne);Kgo=r(cYr,"big_bird"),cYr.forEach(t),Zgo=r(Q0e," \u2014 "),gI=n(Q0e,"A",{href:!0});var fYr=s(gI);eho=r(fYr,"BigBirdModel"),fYr.forEach(t),oho=r(Q0e," (BigBird model)"),Q0e.forEach(t),rho=i($),np=n($,"LI",{});var H0e=s(np);zne=n(H0e,"STRONG",{});var mYr=s(zne);tho=r(mYr,"bigbird_pegasus"),mYr.forEach(t),aho=r(H0e," \u2014 "),hI=n(H0e,"A",{href:!0});var gYr=s(hI);nho=r(gYr,"BigBirdPegasusModel"),gYr.forEach(t),sho=r(H0e," (BigBirdPegasus model)"),H0e.forEach(t),lho=i($),sp=n($,"LI",{});var U0e=s(sp);Wne=n(U0e,"STRONG",{});var hYr=s(Wne);iho=r(hYr,"blenderbot"),hYr.forEach(t),dho=r(U0e," \u2014 "),pI=n(U0e,"A",{href:!0});var pYr=s(pI);cho=r(pYr,"BlenderbotModel"),pYr.forEach(t),fho=r(U0e," (Blenderbot model)"),U0e.forEach(t),mho=i($),lp=n($,"LI",{});var J0e=s(lp);Qne=n(J0e,"STRONG",{});var _Yr=s(Qne);gho=r(_Yr,"blenderbot-small"),_Yr.forEach(t),hho=r(J0e," \u2014 "),_I=n(J0e,"A",{href:!0});var uYr=s(_I);pho=r(uYr,"BlenderbotSmallModel"),uYr.forEach(t),_ho=r(J0e," (BlenderbotSmall model)"),J0e.forEach(t),uho=i($),ip=n($,"LI",{});var Y0e=s(ip);Hne=n(Y0e,"STRONG",{});var bYr=s(Hne);bho=r(bYr,"camembert"),bYr.forEach(t),vho=r(Y0e," \u2014 "),uI=n(Y0e,"A",{href:!0});var vYr=s(uI);Fho=r(vYr,"CamembertModel"),vYr.forEach(t),Tho=r(Y0e," (CamemBERT model)"),Y0e.forEach(t),Mho=i($),dp=n($,"LI",{});var K0e=s(dp);Une=n(K0e,"STRONG",{});var FYr=s(Une);Eho=r(FYr,"canine"),FYr.forEach(t),Cho=r(K0e," \u2014 "),bI=n(K0e,"A",{href:!0});var TYr=s(bI);who=r(TYr,"CanineModel"),TYr.forEach(t),Aho=r(K0e," (Canine model)"),K0e.forEach(t),yho=i($),cp=n($,"LI",{});var Z0e=s(cp);Jne=n(Z0e,"STRONG",{});var MYr=s(Jne);Lho=r(MYr,"clip"),MYr.forEach(t),xho=r(Z0e," \u2014 "),vI=n(Z0e,"A",{href:!0});var EYr=s(vI);$ho=r(EYr,"CLIPModel"),EYr.forEach(t),kho=r(Z0e," (CLIP model)"),Z0e.forEach(t),Sho=i($),fp=n($,"LI",{});var eAe=s(fp);Yne=n(eAe,"STRONG",{});var CYr=s(Yne);Rho=r(CYr,"convbert"),CYr.forEach(t),Pho=r(eAe," \u2014 "),FI=n(eAe,"A",{href:!0});var wYr=s(FI);Bho=r(wYr,"ConvBertModel"),wYr.forEach(t),Iho=r(eAe," (ConvBERT model)"),eAe.forEach(t),qho=i($),mp=n($,"LI",{});var oAe=s(mp);Kne=n(oAe,"STRONG",{});var AYr=s(Kne);Nho=r(AYr,"convnext"),AYr.forEach(t),jho=r(oAe," \u2014 "),TI=n(oAe,"A",{href:!0});var yYr=s(TI);Dho=r(yYr,"ConvNextModel"),yYr.forEach(t),Gho=r(oAe," (ConvNext model)"),oAe.forEach(t),Oho=i($),gp=n($,"LI",{});var rAe=s(gp);Zne=n(rAe,"STRONG",{});var LYr=s(Zne);Vho=r(LYr,"ctrl"),LYr.forEach(t),Xho=r(rAe," \u2014 "),MI=n(rAe,"A",{href:!0});var xYr=s(MI);zho=r(xYr,"CTRLModel"),xYr.forEach(t),Who=r(rAe," (CTRL model)"),rAe.forEach(t),Qho=i($),hp=n($,"LI",{});var tAe=s(hp);ese=n(tAe,"STRONG",{});var $Yr=s(ese);Hho=r($Yr,"data2vec-audio"),$Yr.forEach(t),Uho=r(tAe," \u2014 "),EI=n(tAe,"A",{href:!0});var kYr=s(EI);Jho=r(kYr,"Data2VecAudioModel"),kYr.forEach(t),Yho=r(tAe," (Data2VecAudio model)"),tAe.forEach(t),Kho=i($),pp=n($,"LI",{});var aAe=s(pp);ose=n(aAe,"STRONG",{});var SYr=s(ose);Zho=r(SYr,"data2vec-text"),SYr.forEach(t),epo=r(aAe," \u2014 "),CI=n(aAe,"A",{href:!0});var RYr=s(CI);opo=r(RYr,"Data2VecTextModel"),RYr.forEach(t),rpo=r(aAe," (Data2VecText model)"),aAe.forEach(t),tpo=i($),_p=n($,"LI",{});var nAe=s(_p);rse=n(nAe,"STRONG",{});var PYr=s(rse);apo=r(PYr,"data2vec-vision"),PYr.forEach(t),npo=r(nAe," \u2014 "),wI=n(nAe,"A",{href:!0});var BYr=s(wI);spo=r(BYr,"Data2VecVisionModel"),BYr.forEach(t),lpo=r(nAe," (Data2VecVision model)"),nAe.forEach(t),ipo=i($),up=n($,"LI",{});var sAe=s(up);tse=n(sAe,"STRONG",{});var IYr=s(tse);dpo=r(IYr,"deberta"),IYr.forEach(t),cpo=r(sAe," \u2014 "),AI=n(sAe,"A",{href:!0});var qYr=s(AI);fpo=r(qYr,"DebertaModel"),qYr.forEach(t),mpo=r(sAe," (DeBERTa model)"),sAe.forEach(t),gpo=i($),bp=n($,"LI",{});var lAe=s(bp);ase=n(lAe,"STRONG",{});var NYr=s(ase);hpo=r(NYr,"deberta-v2"),NYr.forEach(t),ppo=r(lAe," \u2014 "),yI=n(lAe,"A",{href:!0});var jYr=s(yI);_po=r(jYr,"DebertaV2Model"),jYr.forEach(t),upo=r(lAe," (DeBERTa-v2 model)"),lAe.forEach(t),bpo=i($),vp=n($,"LI",{});var iAe=s(vp);nse=n(iAe,"STRONG",{});var DYr=s(nse);vpo=r(DYr,"decision_transformer"),DYr.forEach(t),Fpo=r(iAe," \u2014 "),LI=n(iAe,"A",{href:!0});var GYr=s(LI);Tpo=r(GYr,"DecisionTransformerModel"),GYr.forEach(t),Mpo=r(iAe," (Decision Transformer model)"),iAe.forEach(t),Epo=i($),Fp=n($,"LI",{});var dAe=s(Fp);sse=n(dAe,"STRONG",{});var OYr=s(sse);Cpo=r(OYr,"deit"),OYr.forEach(t),wpo=r(dAe," \u2014 "),xI=n(dAe,"A",{href:!0});var VYr=s(xI);Apo=r(VYr,"DeiTModel"),VYr.forEach(t),ypo=r(dAe," (DeiT model)"),dAe.forEach(t),Lpo=i($),Tp=n($,"LI",{});var cAe=s(Tp);lse=n(cAe,"STRONG",{});var XYr=s(lse);xpo=r(XYr,"detr"),XYr.forEach(t),$po=r(cAe," \u2014 "),$I=n(cAe,"A",{href:!0});var zYr=s($I);kpo=r(zYr,"DetrModel"),zYr.forEach(t),Spo=r(cAe," (DETR model)"),cAe.forEach(t),Rpo=i($),Mp=n($,"LI",{});var fAe=s(Mp);ise=n(fAe,"STRONG",{});var WYr=s(ise);Ppo=r(WYr,"distilbert"),WYr.forEach(t),Bpo=r(fAe," \u2014 "),kI=n(fAe,"A",{href:!0});var QYr=s(kI);Ipo=r(QYr,"DistilBertModel"),QYr.forEach(t),qpo=r(fAe," (DistilBERT model)"),fAe.forEach(t),Npo=i($),Ep=n($,"LI",{});var mAe=s(Ep);dse=n(mAe,"STRONG",{});var HYr=s(dse);jpo=r(HYr,"dpr"),HYr.forEach(t),Dpo=r(mAe," \u2014 "),SI=n(mAe,"A",{href:!0});var UYr=s(SI);Gpo=r(UYr,"DPRQuestionEncoder"),UYr.forEach(t),Opo=r(mAe," (DPR model)"),mAe.forEach(t),Vpo=i($),Cp=n($,"LI",{});var gAe=s(Cp);cse=n(gAe,"STRONG",{});var JYr=s(cse);Xpo=r(JYr,"dpt"),JYr.forEach(t),zpo=r(gAe," \u2014 "),RI=n(gAe,"A",{href:!0});var YYr=s(RI);Wpo=r(YYr,"DPTModel"),YYr.forEach(t),Qpo=r(gAe," (DPT model)"),gAe.forEach(t),Hpo=i($),wp=n($,"LI",{});var hAe=s(wp);fse=n(hAe,"STRONG",{});var KYr=s(fse);Upo=r(KYr,"electra"),KYr.forEach(t),Jpo=r(hAe," \u2014 "),PI=n(hAe,"A",{href:!0});var ZYr=s(PI);Ypo=r(ZYr,"ElectraModel"),ZYr.forEach(t),Kpo=r(hAe," (ELECTRA model)"),hAe.forEach(t),Zpo=i($),Ap=n($,"LI",{});var pAe=s(Ap);mse=n(pAe,"STRONG",{});var eKr=s(mse);e_o=r(eKr,"flaubert"),eKr.forEach(t),o_o=r(pAe," \u2014 "),BI=n(pAe,"A",{href:!0});var oKr=s(BI);r_o=r(oKr,"FlaubertModel"),oKr.forEach(t),t_o=r(pAe," (FlauBERT model)"),pAe.forEach(t),a_o=i($),yp=n($,"LI",{});var _Ae=s(yp);gse=n(_Ae,"STRONG",{});var rKr=s(gse);n_o=r(rKr,"flava"),rKr.forEach(t),s_o=r(_Ae," \u2014 "),II=n(_Ae,"A",{href:!0});var tKr=s(II);l_o=r(tKr,"FlavaModel"),tKr.forEach(t),i_o=r(_Ae," (Flava model)"),_Ae.forEach(t),d_o=i($),Lp=n($,"LI",{});var uAe=s(Lp);hse=n(uAe,"STRONG",{});var aKr=s(hse);c_o=r(aKr,"fnet"),aKr.forEach(t),f_o=r(uAe," \u2014 "),qI=n(uAe,"A",{href:!0});var nKr=s(qI);m_o=r(nKr,"FNetModel"),nKr.forEach(t),g_o=r(uAe," (FNet model)"),uAe.forEach(t),h_o=i($),xp=n($,"LI",{});var bAe=s(xp);pse=n(bAe,"STRONG",{});var sKr=s(pse);p_o=r(sKr,"fsmt"),sKr.forEach(t),__o=r(bAe," \u2014 "),NI=n(bAe,"A",{href:!0});var lKr=s(NI);u_o=r(lKr,"FSMTModel"),lKr.forEach(t),b_o=r(bAe," (FairSeq Machine-Translation model)"),bAe.forEach(t),v_o=i($),Rs=n($,"LI",{});var L$=s(Rs);_se=n(L$,"STRONG",{});var iKr=s(_se);F_o=r(iKr,"funnel"),iKr.forEach(t),T_o=r(L$," \u2014 "),jI=n(L$,"A",{href:!0});var dKr=s(jI);M_o=r(dKr,"FunnelModel"),dKr.forEach(t),E_o=r(L$," or "),DI=n(L$,"A",{href:!0});var cKr=s(DI);C_o=r(cKr,"FunnelBaseModel"),cKr.forEach(t),w_o=r(L$," (Funnel Transformer model)"),L$.forEach(t),A_o=i($),$p=n($,"LI",{});var vAe=s($p);use=n(vAe,"STRONG",{});var fKr=s(use);y_o=r(fKr,"glpn"),fKr.forEach(t),L_o=r(vAe," \u2014 "),GI=n(vAe,"A",{href:!0});var mKr=s(GI);x_o=r(mKr,"GLPNModel"),mKr.forEach(t),$_o=r(vAe," (GLPN model)"),vAe.forEach(t),k_o=i($),kp=n($,"LI",{});var FAe=s(kp);bse=n(FAe,"STRONG",{});var gKr=s(bse);S_o=r(gKr,"gpt2"),gKr.forEach(t),R_o=r(FAe," \u2014 "),OI=n(FAe,"A",{href:!0});var hKr=s(OI);P_o=r(hKr,"GPT2Model"),hKr.forEach(t),B_o=r(FAe," (OpenAI GPT-2 model)"),FAe.forEach(t),I_o=i($),Sp=n($,"LI",{});var TAe=s(Sp);vse=n(TAe,"STRONG",{});var pKr=s(vse);q_o=r(pKr,"gpt_neo"),pKr.forEach(t),N_o=r(TAe," \u2014 "),VI=n(TAe,"A",{href:!0});var _Kr=s(VI);j_o=r(_Kr,"GPTNeoModel"),_Kr.forEach(t),D_o=r(TAe," (GPT Neo model)"),TAe.forEach(t),G_o=i($),Rp=n($,"LI",{});var MAe=s(Rp);Fse=n(MAe,"STRONG",{});var uKr=s(Fse);O_o=r(uKr,"gptj"),uKr.forEach(t),V_o=r(MAe," \u2014 "),XI=n(MAe,"A",{href:!0});var bKr=s(XI);X_o=r(bKr,"GPTJModel"),bKr.forEach(t),z_o=r(MAe," (GPT-J model)"),MAe.forEach(t),W_o=i($),Pp=n($,"LI",{});var EAe=s(Pp);Tse=n(EAe,"STRONG",{});var vKr=s(Tse);Q_o=r(vKr,"hubert"),vKr.forEach(t),H_o=r(EAe," \u2014 "),zI=n(EAe,"A",{href:!0});var FKr=s(zI);U_o=r(FKr,"HubertModel"),FKr.forEach(t),J_o=r(EAe," (Hubert model)"),EAe.forEach(t),Y_o=i($),Bp=n($,"LI",{});var CAe=s(Bp);Mse=n(CAe,"STRONG",{});var TKr=s(Mse);K_o=r(TKr,"ibert"),TKr.forEach(t),Z_o=r(CAe," \u2014 "),WI=n(CAe,"A",{href:!0});var MKr=s(WI);euo=r(MKr,"IBertModel"),MKr.forEach(t),ouo=r(CAe," (I-BERT model)"),CAe.forEach(t),ruo=i($),Ip=n($,"LI",{});var wAe=s(Ip);Ese=n(wAe,"STRONG",{});var EKr=s(Ese);tuo=r(EKr,"imagegpt"),EKr.forEach(t),auo=r(wAe," \u2014 "),QI=n(wAe,"A",{href:!0});var CKr=s(QI);nuo=r(CKr,"ImageGPTModel"),CKr.forEach(t),suo=r(wAe," (ImageGPT model)"),wAe.forEach(t),luo=i($),qp=n($,"LI",{});var AAe=s(qp);Cse=n(AAe,"STRONG",{});var wKr=s(Cse);iuo=r(wKr,"layoutlm"),wKr.forEach(t),duo=r(AAe," \u2014 "),HI=n(AAe,"A",{href:!0});var AKr=s(HI);cuo=r(AKr,"LayoutLMModel"),AKr.forEach(t),fuo=r(AAe," (LayoutLM model)"),AAe.forEach(t),muo=i($),Np=n($,"LI",{});var yAe=s(Np);wse=n(yAe,"STRONG",{});var yKr=s(wse);guo=r(yKr,"layoutlmv2"),yKr.forEach(t),huo=r(yAe," \u2014 "),UI=n(yAe,"A",{href:!0});var LKr=s(UI);puo=r(LKr,"LayoutLMv2Model"),LKr.forEach(t),_uo=r(yAe," (LayoutLMv2 model)"),yAe.forEach(t),uuo=i($),jp=n($,"LI",{});var LAe=s(jp);Ase=n(LAe,"STRONG",{});var xKr=s(Ase);buo=r(xKr,"led"),xKr.forEach(t),vuo=r(LAe," \u2014 "),JI=n(LAe,"A",{href:!0});var $Kr=s(JI);Fuo=r($Kr,"LEDModel"),$Kr.forEach(t),Tuo=r(LAe," (LED model)"),LAe.forEach(t),Muo=i($),Dp=n($,"LI",{});var xAe=s(Dp);yse=n(xAe,"STRONG",{});var kKr=s(yse);Euo=r(kKr,"longformer"),kKr.forEach(t),Cuo=r(xAe," \u2014 "),YI=n(xAe,"A",{href:!0});var SKr=s(YI);wuo=r(SKr,"LongformerModel"),SKr.forEach(t),Auo=r(xAe," (Longformer model)"),xAe.forEach(t),yuo=i($),Gp=n($,"LI",{});var $Ae=s(Gp);Lse=n($Ae,"STRONG",{});var RKr=s(Lse);Luo=r(RKr,"luke"),RKr.forEach(t),xuo=r($Ae," \u2014 "),KI=n($Ae,"A",{href:!0});var PKr=s(KI);$uo=r(PKr,"LukeModel"),PKr.forEach(t),kuo=r($Ae," (LUKE model)"),$Ae.forEach(t),Suo=i($),Op=n($,"LI",{});var kAe=s(Op);xse=n(kAe,"STRONG",{});var BKr=s(xse);Ruo=r(BKr,"lxmert"),BKr.forEach(t),Puo=r(kAe," \u2014 "),ZI=n(kAe,"A",{href:!0});var IKr=s(ZI);Buo=r(IKr,"LxmertModel"),IKr.forEach(t),Iuo=r(kAe," (LXMERT model)"),kAe.forEach(t),quo=i($),Vp=n($,"LI",{});var SAe=s(Vp);$se=n(SAe,"STRONG",{});var qKr=s($se);Nuo=r(qKr,"m2m_100"),qKr.forEach(t),juo=r(SAe," \u2014 "),eq=n(SAe,"A",{href:!0});var NKr=s(eq);Duo=r(NKr,"M2M100Model"),NKr.forEach(t),Guo=r(SAe," (M2M100 model)"),SAe.forEach(t),Ouo=i($),Xp=n($,"LI",{});var RAe=s(Xp);kse=n(RAe,"STRONG",{});var jKr=s(kse);Vuo=r(jKr,"marian"),jKr.forEach(t),Xuo=r(RAe," \u2014 "),oq=n(RAe,"A",{href:!0});var DKr=s(oq);zuo=r(DKr,"MarianModel"),DKr.forEach(t),Wuo=r(RAe," (Marian model)"),RAe.forEach(t),Quo=i($),zp=n($,"LI",{});var PAe=s(zp);Sse=n(PAe,"STRONG",{});var GKr=s(Sse);Huo=r(GKr,"maskformer"),GKr.forEach(t),Uuo=r(PAe," \u2014 "),rq=n(PAe,"A",{href:!0});var OKr=s(rq);Juo=r(OKr,"MaskFormerModel"),OKr.forEach(t),Yuo=r(PAe," (MaskFormer model)"),PAe.forEach(t),Kuo=i($),Wp=n($,"LI",{});var BAe=s(Wp);Rse=n(BAe,"STRONG",{});var VKr=s(Rse);Zuo=r(VKr,"mbart"),VKr.forEach(t),e2o=r(BAe," \u2014 "),tq=n(BAe,"A",{href:!0});var XKr=s(tq);o2o=r(XKr,"MBartModel"),XKr.forEach(t),r2o=r(BAe," (mBART model)"),BAe.forEach(t),t2o=i($),Qp=n($,"LI",{});var IAe=s(Qp);Pse=n(IAe,"STRONG",{});var zKr=s(Pse);a2o=r(zKr,"megatron-bert"),zKr.forEach(t),n2o=r(IAe," \u2014 "),aq=n(IAe,"A",{href:!0});var WKr=s(aq);s2o=r(WKr,"MegatronBertModel"),WKr.forEach(t),l2o=r(IAe," (MegatronBert model)"),IAe.forEach(t),i2o=i($),Hp=n($,"LI",{});var qAe=s(Hp);Bse=n(qAe,"STRONG",{});var QKr=s(Bse);d2o=r(QKr,"mobilebert"),QKr.forEach(t),c2o=r(qAe," \u2014 "),nq=n(qAe,"A",{href:!0});var HKr=s(nq);f2o=r(HKr,"MobileBertModel"),HKr.forEach(t),m2o=r(qAe," (MobileBERT model)"),qAe.forEach(t),g2o=i($),Up=n($,"LI",{});var NAe=s(Up);Ise=n(NAe,"STRONG",{});var UKr=s(Ise);h2o=r(UKr,"mpnet"),UKr.forEach(t),p2o=r(NAe," \u2014 "),sq=n(NAe,"A",{href:!0});var JKr=s(sq);_2o=r(JKr,"MPNetModel"),JKr.forEach(t),u2o=r(NAe," (MPNet model)"),NAe.forEach(t),b2o=i($),Jp=n($,"LI",{});var jAe=s(Jp);qse=n(jAe,"STRONG",{});var YKr=s(qse);v2o=r(YKr,"mt5"),YKr.forEach(t),F2o=r(jAe," \u2014 "),lq=n(jAe,"A",{href:!0});var KKr=s(lq);T2o=r(KKr,"MT5Model"),KKr.forEach(t),M2o=r(jAe," (mT5 model)"),jAe.forEach(t),E2o=i($),Yp=n($,"LI",{});var DAe=s(Yp);Nse=n(DAe,"STRONG",{});var ZKr=s(Nse);C2o=r(ZKr,"nystromformer"),ZKr.forEach(t),w2o=r(DAe," \u2014 "),iq=n(DAe,"A",{href:!0});var eZr=s(iq);A2o=r(eZr,"NystromformerModel"),eZr.forEach(t),y2o=r(DAe," (Nystromformer model)"),DAe.forEach(t),L2o=i($),Kp=n($,"LI",{});var GAe=s(Kp);jse=n(GAe,"STRONG",{});var oZr=s(jse);x2o=r(oZr,"openai-gpt"),oZr.forEach(t),$2o=r(GAe," \u2014 "),dq=n(GAe,"A",{href:!0});var rZr=s(dq);k2o=r(rZr,"OpenAIGPTModel"),rZr.forEach(t),S2o=r(GAe," (OpenAI GPT model)"),GAe.forEach(t),R2o=i($),Zp=n($,"LI",{});var OAe=s(Zp);Dse=n(OAe,"STRONG",{});var tZr=s(Dse);P2o=r(tZr,"opt"),tZr.forEach(t),B2o=r(OAe," \u2014 "),cq=n(OAe,"A",{href:!0});var aZr=s(cq);I2o=r(aZr,"OPTModel"),aZr.forEach(t),q2o=r(OAe," (OPT model)"),OAe.forEach(t),N2o=i($),e_=n($,"LI",{});var VAe=s(e_);Gse=n(VAe,"STRONG",{});var nZr=s(Gse);j2o=r(nZr,"pegasus"),nZr.forEach(t),D2o=r(VAe," \u2014 "),fq=n(VAe,"A",{href:!0});var sZr=s(fq);G2o=r(sZr,"PegasusModel"),sZr.forEach(t),O2o=r(VAe," (Pegasus model)"),VAe.forEach(t),V2o=i($),o_=n($,"LI",{});var XAe=s(o_);Ose=n(XAe,"STRONG",{});var lZr=s(Ose);X2o=r(lZr,"perceiver"),lZr.forEach(t),z2o=r(XAe," \u2014 "),mq=n(XAe,"A",{href:!0});var iZr=s(mq);W2o=r(iZr,"PerceiverModel"),iZr.forEach(t),Q2o=r(XAe," (Perceiver model)"),XAe.forEach(t),H2o=i($),r_=n($,"LI",{});var zAe=s(r_);Vse=n(zAe,"STRONG",{});var dZr=s(Vse);U2o=r(dZr,"plbart"),dZr.forEach(t),J2o=r(zAe," \u2014 "),gq=n(zAe,"A",{href:!0});var cZr=s(gq);Y2o=r(cZr,"PLBartModel"),cZr.forEach(t),K2o=r(zAe," (PLBart model)"),zAe.forEach(t),Z2o=i($),t_=n($,"LI",{});var WAe=s(t_);Xse=n(WAe,"STRONG",{});var fZr=s(Xse);e1o=r(fZr,"poolformer"),fZr.forEach(t),o1o=r(WAe," \u2014 "),hq=n(WAe,"A",{href:!0});var mZr=s(hq);r1o=r(mZr,"PoolFormerModel"),mZr.forEach(t),t1o=r(WAe," (PoolFormer model)"),WAe.forEach(t),a1o=i($),a_=n($,"LI",{});var QAe=s(a_);zse=n(QAe,"STRONG",{});var gZr=s(zse);n1o=r(gZr,"prophetnet"),gZr.forEach(t),s1o=r(QAe," \u2014 "),pq=n(QAe,"A",{href:!0});var hZr=s(pq);l1o=r(hZr,"ProphetNetModel"),hZr.forEach(t),i1o=r(QAe," (ProphetNet model)"),QAe.forEach(t),d1o=i($),n_=n($,"LI",{});var HAe=s(n_);Wse=n(HAe,"STRONG",{});var pZr=s(Wse);c1o=r(pZr,"qdqbert"),pZr.forEach(t),f1o=r(HAe," \u2014 "),_q=n(HAe,"A",{href:!0});var _Zr=s(_q);m1o=r(_Zr,"QDQBertModel"),_Zr.forEach(t),g1o=r(HAe," (QDQBert model)"),HAe.forEach(t),h1o=i($),s_=n($,"LI",{});var UAe=s(s_);Qse=n(UAe,"STRONG",{});var uZr=s(Qse);p1o=r(uZr,"reformer"),uZr.forEach(t),_1o=r(UAe," \u2014 "),uq=n(UAe,"A",{href:!0});var bZr=s(uq);u1o=r(bZr,"ReformerModel"),bZr.forEach(t),b1o=r(UAe," (Reformer model)"),UAe.forEach(t),v1o=i($),l_=n($,"LI",{});var JAe=s(l_);Hse=n(JAe,"STRONG",{});var vZr=s(Hse);F1o=r(vZr,"regnet"),vZr.forEach(t),T1o=r(JAe," \u2014 "),bq=n(JAe,"A",{href:!0});var FZr=s(bq);M1o=r(FZr,"RegNetModel"),FZr.forEach(t),E1o=r(JAe," (RegNet model)"),JAe.forEach(t),C1o=i($),i_=n($,"LI",{});var YAe=s(i_);Use=n(YAe,"STRONG",{});var TZr=s(Use);w1o=r(TZr,"rembert"),TZr.forEach(t),A1o=r(YAe," \u2014 "),vq=n(YAe,"A",{href:!0});var MZr=s(vq);y1o=r(MZr,"RemBertModel"),MZr.forEach(t),L1o=r(YAe," (RemBERT model)"),YAe.forEach(t),x1o=i($),d_=n($,"LI",{});var KAe=s(d_);Jse=n(KAe,"STRONG",{});var EZr=s(Jse);$1o=r(EZr,"resnet"),EZr.forEach(t),k1o=r(KAe," \u2014 "),Fq=n(KAe,"A",{href:!0});var CZr=s(Fq);S1o=r(CZr,"ResNetModel"),CZr.forEach(t),R1o=r(KAe," (ResNet model)"),KAe.forEach(t),P1o=i($),c_=n($,"LI",{});var ZAe=s(c_);Yse=n(ZAe,"STRONG",{});var wZr=s(Yse);B1o=r(wZr,"retribert"),wZr.forEach(t),I1o=r(ZAe," \u2014 "),Tq=n(ZAe,"A",{href:!0});var AZr=s(Tq);q1o=r(AZr,"RetriBertModel"),AZr.forEach(t),N1o=r(ZAe," (RetriBERT model)"),ZAe.forEach(t),j1o=i($),f_=n($,"LI",{});var e6e=s(f_);Kse=n(e6e,"STRONG",{});var yZr=s(Kse);D1o=r(yZr,"roberta"),yZr.forEach(t),G1o=r(e6e," \u2014 "),Mq=n(e6e,"A",{href:!0});var LZr=s(Mq);O1o=r(LZr,"RobertaModel"),LZr.forEach(t),V1o=r(e6e," (RoBERTa model)"),e6e.forEach(t),X1o=i($),m_=n($,"LI",{});var o6e=s(m_);Zse=n(o6e,"STRONG",{});var xZr=s(Zse);z1o=r(xZr,"roformer"),xZr.forEach(t),W1o=r(o6e," \u2014 "),Eq=n(o6e,"A",{href:!0});var $Zr=s(Eq);Q1o=r($Zr,"RoFormerModel"),$Zr.forEach(t),H1o=r(o6e," (RoFormer model)"),o6e.forEach(t),U1o=i($),g_=n($,"LI",{});var r6e=s(g_);ele=n(r6e,"STRONG",{});var kZr=s(ele);J1o=r(kZr,"segformer"),kZr.forEach(t),Y1o=r(r6e," \u2014 "),Cq=n(r6e,"A",{href:!0});var SZr=s(Cq);K1o=r(SZr,"SegformerModel"),SZr.forEach(t),Z1o=r(r6e," (SegFormer model)"),r6e.forEach(t),e7o=i($),h_=n($,"LI",{});var t6e=s(h_);ole=n(t6e,"STRONG",{});var RZr=s(ole);o7o=r(RZr,"sew"),RZr.forEach(t),r7o=r(t6e," \u2014 "),wq=n(t6e,"A",{href:!0});var PZr=s(wq);t7o=r(PZr,"SEWModel"),PZr.forEach(t),a7o=r(t6e," (SEW model)"),t6e.forEach(t),n7o=i($),p_=n($,"LI",{});var a6e=s(p_);rle=n(a6e,"STRONG",{});var BZr=s(rle);s7o=r(BZr,"sew-d"),BZr.forEach(t),l7o=r(a6e," \u2014 "),Aq=n(a6e,"A",{href:!0});var IZr=s(Aq);i7o=r(IZr,"SEWDModel"),IZr.forEach(t),d7o=r(a6e," (SEW-D model)"),a6e.forEach(t),c7o=i($),__=n($,"LI",{});var n6e=s(__);tle=n(n6e,"STRONG",{});var qZr=s(tle);f7o=r(qZr,"speech_to_text"),qZr.forEach(t),m7o=r(n6e," \u2014 "),yq=n(n6e,"A",{href:!0});var NZr=s(yq);g7o=r(NZr,"Speech2TextModel"),NZr.forEach(t),h7o=r(n6e," (Speech2Text model)"),n6e.forEach(t),p7o=i($),u_=n($,"LI",{});var s6e=s(u_);ale=n(s6e,"STRONG",{});var jZr=s(ale);_7o=r(jZr,"splinter"),jZr.forEach(t),u7o=r(s6e," \u2014 "),Lq=n(s6e,"A",{href:!0});var DZr=s(Lq);b7o=r(DZr,"SplinterModel"),DZr.forEach(t),v7o=r(s6e," (Splinter model)"),s6e.forEach(t),F7o=i($),b_=n($,"LI",{});var l6e=s(b_);nle=n(l6e,"STRONG",{});var GZr=s(nle);T7o=r(GZr,"squeezebert"),GZr.forEach(t),M7o=r(l6e," \u2014 "),xq=n(l6e,"A",{href:!0});var OZr=s(xq);E7o=r(OZr,"SqueezeBertModel"),OZr.forEach(t),C7o=r(l6e," (SqueezeBERT model)"),l6e.forEach(t),w7o=i($),v_=n($,"LI",{});var i6e=s(v_);sle=n(i6e,"STRONG",{});var VZr=s(sle);A7o=r(VZr,"swin"),VZr.forEach(t),y7o=r(i6e," \u2014 "),$q=n(i6e,"A",{href:!0});var XZr=s($q);L7o=r(XZr,"SwinModel"),XZr.forEach(t),x7o=r(i6e," (Swin model)"),i6e.forEach(t),$7o=i($),F_=n($,"LI",{});var d6e=s(F_);lle=n(d6e,"STRONG",{});var zZr=s(lle);k7o=r(zZr,"t5"),zZr.forEach(t),S7o=r(d6e," \u2014 "),kq=n(d6e,"A",{href:!0});var WZr=s(kq);R7o=r(WZr,"T5Model"),WZr.forEach(t),P7o=r(d6e," (T5 model)"),d6e.forEach(t),B7o=i($),T_=n($,"LI",{});var c6e=s(T_);ile=n(c6e,"STRONG",{});var QZr=s(ile);I7o=r(QZr,"tapas"),QZr.forEach(t),q7o=r(c6e," \u2014 "),Sq=n(c6e,"A",{href:!0});var HZr=s(Sq);N7o=r(HZr,"TapasModel"),HZr.forEach(t),j7o=r(c6e," (TAPAS model)"),c6e.forEach(t),D7o=i($),M_=n($,"LI",{});var f6e=s(M_);dle=n(f6e,"STRONG",{});var UZr=s(dle);G7o=r(UZr,"trajectory_transformer"),UZr.forEach(t),O7o=r(f6e," \u2014 "),Rq=n(f6e,"A",{href:!0});var JZr=s(Rq);V7o=r(JZr,"TrajectoryTransformerModel"),JZr.forEach(t),X7o=r(f6e," (Trajectory Transformer model)"),f6e.forEach(t),z7o=i($),E_=n($,"LI",{});var m6e=s(E_);cle=n(m6e,"STRONG",{});var YZr=s(cle);W7o=r(YZr,"transfo-xl"),YZr.forEach(t),Q7o=r(m6e," \u2014 "),Pq=n(m6e,"A",{href:!0});var KZr=s(Pq);H7o=r(KZr,"TransfoXLModel"),KZr.forEach(t),U7o=r(m6e," (Transformer-XL model)"),m6e.forEach(t),J7o=i($),C_=n($,"LI",{});var g6e=s(C_);fle=n(g6e,"STRONG",{});var ZZr=s(fle);Y7o=r(ZZr,"unispeech"),ZZr.forEach(t),K7o=r(g6e," \u2014 "),Bq=n(g6e,"A",{href:!0});var eet=s(Bq);Z7o=r(eet,"UniSpeechModel"),eet.forEach(t),ebo=r(g6e," (UniSpeech model)"),g6e.forEach(t),obo=i($),w_=n($,"LI",{});var h6e=s(w_);mle=n(h6e,"STRONG",{});var oet=s(mle);rbo=r(oet,"unispeech-sat"),oet.forEach(t),tbo=r(h6e," \u2014 "),Iq=n(h6e,"A",{href:!0});var ret=s(Iq);abo=r(ret,"UniSpeechSatModel"),ret.forEach(t),nbo=r(h6e," (UniSpeechSat model)"),h6e.forEach(t),sbo=i($),A_=n($,"LI",{});var p6e=s(A_);gle=n(p6e,"STRONG",{});var tet=s(gle);lbo=r(tet,"van"),tet.forEach(t),ibo=r(p6e," \u2014 "),qq=n(p6e,"A",{href:!0});var aet=s(qq);dbo=r(aet,"VanModel"),aet.forEach(t),cbo=r(p6e," (VAN model)"),p6e.forEach(t),fbo=i($),y_=n($,"LI",{});var _6e=s(y_);hle=n(_6e,"STRONG",{});var net=s(hle);mbo=r(net,"vilt"),net.forEach(t),gbo=r(_6e," \u2014 "),Nq=n(_6e,"A",{href:!0});var set=s(Nq);hbo=r(set,"ViltModel"),set.forEach(t),pbo=r(_6e," (ViLT model)"),_6e.forEach(t),_bo=i($),L_=n($,"LI",{});var u6e=s(L_);ple=n(u6e,"STRONG",{});var iet=s(ple);ubo=r(iet,"vision-text-dual-encoder"),iet.forEach(t),bbo=r(u6e," \u2014 "),jq=n(u6e,"A",{href:!0});var det=s(jq);vbo=r(det,"VisionTextDualEncoderModel"),det.forEach(t),Fbo=r(u6e," (VisionTextDualEncoder model)"),u6e.forEach(t),Tbo=i($),x_=n($,"LI",{});var b6e=s(x_);_le=n(b6e,"STRONG",{});var cet=s(_le);Mbo=r(cet,"visual_bert"),cet.forEach(t),Ebo=r(b6e," \u2014 "),Dq=n(b6e,"A",{href:!0});var fet=s(Dq);Cbo=r(fet,"VisualBertModel"),fet.forEach(t),wbo=r(b6e," (VisualBert model)"),b6e.forEach(t),Abo=i($),$_=n($,"LI",{});var v6e=s($_);ule=n(v6e,"STRONG",{});var met=s(ule);ybo=r(met,"vit"),met.forEach(t),Lbo=r(v6e," \u2014 "),Gq=n(v6e,"A",{href:!0});var get=s(Gq);xbo=r(get,"ViTModel"),get.forEach(t),$bo=r(v6e," (ViT model)"),v6e.forEach(t),kbo=i($),k_=n($,"LI",{});var F6e=s(k_);ble=n(F6e,"STRONG",{});var het=s(ble);Sbo=r(het,"vit_mae"),het.forEach(t),Rbo=r(F6e," \u2014 "),Oq=n(F6e,"A",{href:!0});var pet=s(Oq);Pbo=r(pet,"ViTMAEModel"),pet.forEach(t),Bbo=r(F6e," (ViTMAE model)"),F6e.forEach(t),Ibo=i($),S_=n($,"LI",{});var T6e=s(S_);vle=n(T6e,"STRONG",{});var _et=s(vle);qbo=r(_et,"wav2vec2"),_et.forEach(t),Nbo=r(T6e," \u2014 "),Vq=n(T6e,"A",{href:!0});var uet=s(Vq);jbo=r(uet,"Wav2Vec2Model"),uet.forEach(t),Dbo=r(T6e," (Wav2Vec2 model)"),T6e.forEach(t),Gbo=i($),R_=n($,"LI",{});var M6e=s(R_);Fle=n(M6e,"STRONG",{});var bet=s(Fle);Obo=r(bet,"wav2vec2-conformer"),bet.forEach(t),Vbo=r(M6e," \u2014 "),Xq=n(M6e,"A",{href:!0});var vet=s(Xq);Xbo=r(vet,"Wav2Vec2ConformerModel"),vet.forEach(t),zbo=r(M6e," (Wav2Vec2-Conformer model)"),M6e.forEach(t),Wbo=i($),P_=n($,"LI",{});var E6e=s(P_);Tle=n(E6e,"STRONG",{});var Fet=s(Tle);Qbo=r(Fet,"wavlm"),Fet.forEach(t),Hbo=r(E6e," \u2014 "),zq=n(E6e,"A",{href:!0});var Tet=s(zq);Ubo=r(Tet,"WavLMModel"),Tet.forEach(t),Jbo=r(E6e," (WavLM model)"),E6e.forEach(t),Ybo=i($),B_=n($,"LI",{});var C6e=s(B_);Mle=n(C6e,"STRONG",{});var Met=s(Mle);Kbo=r(Met,"xglm"),Met.forEach(t),Zbo=r(C6e," \u2014 "),Wq=n(C6e,"A",{href:!0});var Eet=s(Wq);evo=r(Eet,"XGLMModel"),Eet.forEach(t),ovo=r(C6e," (XGLM model)"),C6e.forEach(t),rvo=i($),I_=n($,"LI",{});var w6e=s(I_);Ele=n(w6e,"STRONG",{});var Cet=s(Ele);tvo=r(Cet,"xlm"),Cet.forEach(t),avo=r(w6e," \u2014 "),Qq=n(w6e,"A",{href:!0});var wet=s(Qq);nvo=r(wet,"XLMModel"),wet.forEach(t),svo=r(w6e," (XLM model)"),w6e.forEach(t),lvo=i($),q_=n($,"LI",{});var A6e=s(q_);Cle=n(A6e,"STRONG",{});var Aet=s(Cle);ivo=r(Aet,"xlm-prophetnet"),Aet.forEach(t),dvo=r(A6e," \u2014 "),Hq=n(A6e,"A",{href:!0});var yet=s(Hq);cvo=r(yet,"XLMProphetNetModel"),yet.forEach(t),fvo=r(A6e," (XLMProphetNet model)"),A6e.forEach(t),mvo=i($),N_=n($,"LI",{});var y6e=s(N_);wle=n(y6e,"STRONG",{});var Let=s(wle);gvo=r(Let,"xlm-roberta"),Let.forEach(t),hvo=r(y6e," \u2014 "),Uq=n(y6e,"A",{href:!0});var xet=s(Uq);pvo=r(xet,"XLMRobertaModel"),xet.forEach(t),_vo=r(y6e," (XLM-RoBERTa model)"),y6e.forEach(t),uvo=i($),j_=n($,"LI",{});var L6e=s(j_);Ale=n(L6e,"STRONG",{});var $et=s(Ale);bvo=r($et,"xlm-roberta-xl"),$et.forEach(t),vvo=r(L6e," \u2014 "),Jq=n(L6e,"A",{href:!0});var ket=s(Jq);Fvo=r(ket,"XLMRobertaXLModel"),ket.forEach(t),Tvo=r(L6e," (XLM-RoBERTa-XL model)"),L6e.forEach(t),Mvo=i($),D_=n($,"LI",{});var x6e=s(D_);yle=n(x6e,"STRONG",{});var Set=s(yle);Evo=r(Set,"xlnet"),Set.forEach(t),Cvo=r(x6e," \u2014 "),Yq=n(x6e,"A",{href:!0});var Ret=s(Yq);wvo=r(Ret,"XLNetModel"),Ret.forEach(t),Avo=r(x6e," (XLNet model)"),x6e.forEach(t),yvo=i($),G_=n($,"LI",{});var $6e=s(G_);Lle=n($6e,"STRONG",{});var Pet=s(Lle);Lvo=r(Pet,"yolos"),Pet.forEach(t),xvo=r($6e," \u2014 "),Kq=n($6e,"A",{href:!0});var Bet=s(Kq);$vo=r(Bet,"YolosModel"),Bet.forEach(t),kvo=r($6e," (YOLOS model)"),$6e.forEach(t),Svo=i($),O_=n($,"LI",{});var k6e=s(O_);xle=n(k6e,"STRONG",{});var Iet=s(xle);Rvo=r(Iet,"yoso"),Iet.forEach(t),Pvo=r(k6e," \u2014 "),Zq=n(k6e,"A",{href:!0});var qet=s(Zq);Bvo=r(qet,"YosoModel"),qet.forEach(t),Ivo=r(k6e," (YOSO model)"),k6e.forEach(t),$.forEach(t),qvo=i(oa),V_=n(oa,"P",{});var S6e=s(V_);Nvo=r(S6e,"The model is set in evaluation mode by default using "),$le=n(S6e,"CODE",{});var Net=s($le);jvo=r(Net,"model.eval()"),Net.forEach(t),Dvo=r(S6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=n(S6e,"CODE",{});var jet=s(kle);Gvo=r(jet,"model.train()"),jet.forEach(t),S6e.forEach(t),Ovo=i(oa),T(X_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),hqe=i(f),yi=n(f,"H2",{class:!0});var bje=s(yi);z_=n(bje,"A",{id:!0,class:!0,href:!0});var Det=s(z_);Sle=n(Det,"SPAN",{});var Get=s(Sle);T(z6.$$.fragment,Get),Get.forEach(t),Det.forEach(t),Vvo=i(bje),Rle=n(bje,"SPAN",{});var Oet=s(Rle);Xvo=r(Oet,"AutoModelForPreTraining"),Oet.forEach(t),bje.forEach(t),pqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(W6.$$.fragment,Gs),zvo=i(Gs),Li=n(Gs,"P",{});var OK=s(Li);Wvo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eN=n(OK,"A",{href:!0});var Vet=s(eN);Qvo=r(Vet,"from_pretrained()"),Vet.forEach(t),Hvo=r(OK," class method or the "),oN=n(OK,"A",{href:!0});var Xet=s(oN);Uvo=r(Xet,"from_config()"),Xet.forEach(t),Jvo=r(OK,` class
method.`),OK.forEach(t),Yvo=i(Gs),Q6=n(Gs,"P",{});var vje=s(Q6);Kvo=r(vje,"This class cannot be instantiated directly using "),Ple=n(vje,"CODE",{});var zet=s(Ple);Zvo=r(zet,"__init__()"),zet.forEach(t),eFo=r(vje," (throws an error)."),vje.forEach(t),oFo=i(Gs),at=n(Gs,"DIV",{class:!0});var F0=s(at);T(H6.$$.fragment,F0),rFo=i(F0),Ble=n(F0,"P",{});var Wet=s(Ble);tFo=r(Wet,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wet.forEach(t),aFo=i(F0),xi=n(F0,"P",{});var VK=s(xi);nFo=r(VK,`Note:
Loading a model from its configuration file does `),Ile=n(VK,"STRONG",{});var Qet=s(Ile);sFo=r(Qet,"not"),Qet.forEach(t),lFo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=n(VK,"A",{href:!0});var Het=s(rN);iFo=r(Het,"from_pretrained()"),Het.forEach(t),dFo=r(VK," to load the model weights."),VK.forEach(t),cFo=i(F0),T(W_.$$.fragment,F0),F0.forEach(t),fFo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(U6.$$.fragment,ra),mFo=i(ra),qle=n(ra,"P",{});var Uet=s(qle);gFo=r(Uet,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uet.forEach(t),hFo=i(ra),xa=n(ra,"P",{});var T0=s(xa);pFo=r(T0,"The model class to instantiate is selected based on the "),Nle=n(T0,"CODE",{});var Jet=s(Nle);_Fo=r(Jet,"model_type"),Jet.forEach(t),uFo=r(T0,` property of the config object (either
passed as an argument or loaded from `),jle=n(T0,"CODE",{});var Yet=s(jle);bFo=r(Yet,"pretrained_model_name_or_path"),Yet.forEach(t),vFo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dle=n(T0,"CODE",{});var Ket=s(Dle);FFo=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),TFo=r(T0,":"),T0.forEach(t),MFo=i(ra),G=n(ra,"UL",{});var O=s(G);Q_=n(O,"LI",{});var R6e=s(Q_);Gle=n(R6e,"STRONG",{});var Zet=s(Gle);EFo=r(Zet,"albert"),Zet.forEach(t),CFo=r(R6e," \u2014 "),tN=n(R6e,"A",{href:!0});var eot=s(tN);wFo=r(eot,"AlbertForPreTraining"),eot.forEach(t),AFo=r(R6e," (ALBERT model)"),R6e.forEach(t),yFo=i(O),H_=n(O,"LI",{});var P6e=s(H_);Ole=n(P6e,"STRONG",{});var oot=s(Ole);LFo=r(oot,"bart"),oot.forEach(t),xFo=r(P6e," \u2014 "),aN=n(P6e,"A",{href:!0});var rot=s(aN);$Fo=r(rot,"BartForConditionalGeneration"),rot.forEach(t),kFo=r(P6e," (BART model)"),P6e.forEach(t),SFo=i(O),U_=n(O,"LI",{});var B6e=s(U_);Vle=n(B6e,"STRONG",{});var tot=s(Vle);RFo=r(tot,"bert"),tot.forEach(t),PFo=r(B6e," \u2014 "),nN=n(B6e,"A",{href:!0});var aot=s(nN);BFo=r(aot,"BertForPreTraining"),aot.forEach(t),IFo=r(B6e," (BERT model)"),B6e.forEach(t),qFo=i(O),J_=n(O,"LI",{});var I6e=s(J_);Xle=n(I6e,"STRONG",{});var not=s(Xle);NFo=r(not,"big_bird"),not.forEach(t),jFo=r(I6e," \u2014 "),sN=n(I6e,"A",{href:!0});var sot=s(sN);DFo=r(sot,"BigBirdForPreTraining"),sot.forEach(t),GFo=r(I6e," (BigBird model)"),I6e.forEach(t),OFo=i(O),Y_=n(O,"LI",{});var q6e=s(Y_);zle=n(q6e,"STRONG",{});var lot=s(zle);VFo=r(lot,"camembert"),lot.forEach(t),XFo=r(q6e," \u2014 "),lN=n(q6e,"A",{href:!0});var iot=s(lN);zFo=r(iot,"CamembertForMaskedLM"),iot.forEach(t),WFo=r(q6e," (CamemBERT model)"),q6e.forEach(t),QFo=i(O),K_=n(O,"LI",{});var N6e=s(K_);Wle=n(N6e,"STRONG",{});var dot=s(Wle);HFo=r(dot,"ctrl"),dot.forEach(t),UFo=r(N6e," \u2014 "),iN=n(N6e,"A",{href:!0});var cot=s(iN);JFo=r(cot,"CTRLLMHeadModel"),cot.forEach(t),YFo=r(N6e," (CTRL model)"),N6e.forEach(t),KFo=i(O),Z_=n(O,"LI",{});var j6e=s(Z_);Qle=n(j6e,"STRONG",{});var fot=s(Qle);ZFo=r(fot,"data2vec-text"),fot.forEach(t),eTo=r(j6e," \u2014 "),dN=n(j6e,"A",{href:!0});var mot=s(dN);oTo=r(mot,"Data2VecTextForMaskedLM"),mot.forEach(t),rTo=r(j6e," (Data2VecText model)"),j6e.forEach(t),tTo=i(O),eu=n(O,"LI",{});var D6e=s(eu);Hle=n(D6e,"STRONG",{});var got=s(Hle);aTo=r(got,"deberta"),got.forEach(t),nTo=r(D6e," \u2014 "),cN=n(D6e,"A",{href:!0});var hot=s(cN);sTo=r(hot,"DebertaForMaskedLM"),hot.forEach(t),lTo=r(D6e," (DeBERTa model)"),D6e.forEach(t),iTo=i(O),ou=n(O,"LI",{});var G6e=s(ou);Ule=n(G6e,"STRONG",{});var pot=s(Ule);dTo=r(pot,"deberta-v2"),pot.forEach(t),cTo=r(G6e," \u2014 "),fN=n(G6e,"A",{href:!0});var _ot=s(fN);fTo=r(_ot,"DebertaV2ForMaskedLM"),_ot.forEach(t),mTo=r(G6e," (DeBERTa-v2 model)"),G6e.forEach(t),gTo=i(O),ru=n(O,"LI",{});var O6e=s(ru);Jle=n(O6e,"STRONG",{});var uot=s(Jle);hTo=r(uot,"distilbert"),uot.forEach(t),pTo=r(O6e," \u2014 "),mN=n(O6e,"A",{href:!0});var bot=s(mN);_To=r(bot,"DistilBertForMaskedLM"),bot.forEach(t),uTo=r(O6e," (DistilBERT model)"),O6e.forEach(t),bTo=i(O),tu=n(O,"LI",{});var V6e=s(tu);Yle=n(V6e,"STRONG",{});var vot=s(Yle);vTo=r(vot,"electra"),vot.forEach(t),FTo=r(V6e," \u2014 "),gN=n(V6e,"A",{href:!0});var Fot=s(gN);TTo=r(Fot,"ElectraForPreTraining"),Fot.forEach(t),MTo=r(V6e," (ELECTRA model)"),V6e.forEach(t),ETo=i(O),au=n(O,"LI",{});var X6e=s(au);Kle=n(X6e,"STRONG",{});var Tot=s(Kle);CTo=r(Tot,"flaubert"),Tot.forEach(t),wTo=r(X6e," \u2014 "),hN=n(X6e,"A",{href:!0});var Mot=s(hN);ATo=r(Mot,"FlaubertWithLMHeadModel"),Mot.forEach(t),yTo=r(X6e," (FlauBERT model)"),X6e.forEach(t),LTo=i(O),nu=n(O,"LI",{});var z6e=s(nu);Zle=n(z6e,"STRONG",{});var Eot=s(Zle);xTo=r(Eot,"flava"),Eot.forEach(t),$To=r(z6e," \u2014 "),pN=n(z6e,"A",{href:!0});var Cot=s(pN);kTo=r(Cot,"FlavaForPreTraining"),Cot.forEach(t),STo=r(z6e," (Flava model)"),z6e.forEach(t),RTo=i(O),su=n(O,"LI",{});var W6e=s(su);eie=n(W6e,"STRONG",{});var wot=s(eie);PTo=r(wot,"fnet"),wot.forEach(t),BTo=r(W6e," \u2014 "),_N=n(W6e,"A",{href:!0});var Aot=s(_N);ITo=r(Aot,"FNetForPreTraining"),Aot.forEach(t),qTo=r(W6e," (FNet model)"),W6e.forEach(t),NTo=i(O),lu=n(O,"LI",{});var Q6e=s(lu);oie=n(Q6e,"STRONG",{});var yot=s(oie);jTo=r(yot,"fsmt"),yot.forEach(t),DTo=r(Q6e," \u2014 "),uN=n(Q6e,"A",{href:!0});var Lot=s(uN);GTo=r(Lot,"FSMTForConditionalGeneration"),Lot.forEach(t),OTo=r(Q6e," (FairSeq Machine-Translation model)"),Q6e.forEach(t),VTo=i(O),iu=n(O,"LI",{});var H6e=s(iu);rie=n(H6e,"STRONG",{});var xot=s(rie);XTo=r(xot,"funnel"),xot.forEach(t),zTo=r(H6e," \u2014 "),bN=n(H6e,"A",{href:!0});var $ot=s(bN);WTo=r($ot,"FunnelForPreTraining"),$ot.forEach(t),QTo=r(H6e," (Funnel Transformer model)"),H6e.forEach(t),HTo=i(O),du=n(O,"LI",{});var U6e=s(du);tie=n(U6e,"STRONG",{});var kot=s(tie);UTo=r(kot,"gpt2"),kot.forEach(t),JTo=r(U6e," \u2014 "),vN=n(U6e,"A",{href:!0});var Sot=s(vN);YTo=r(Sot,"GPT2LMHeadModel"),Sot.forEach(t),KTo=r(U6e," (OpenAI GPT-2 model)"),U6e.forEach(t),ZTo=i(O),cu=n(O,"LI",{});var J6e=s(cu);aie=n(J6e,"STRONG",{});var Rot=s(aie);eMo=r(Rot,"ibert"),Rot.forEach(t),oMo=r(J6e," \u2014 "),FN=n(J6e,"A",{href:!0});var Pot=s(FN);rMo=r(Pot,"IBertForMaskedLM"),Pot.forEach(t),tMo=r(J6e," (I-BERT model)"),J6e.forEach(t),aMo=i(O),fu=n(O,"LI",{});var Y6e=s(fu);nie=n(Y6e,"STRONG",{});var Bot=s(nie);nMo=r(Bot,"layoutlm"),Bot.forEach(t),sMo=r(Y6e," \u2014 "),TN=n(Y6e,"A",{href:!0});var Iot=s(TN);lMo=r(Iot,"LayoutLMForMaskedLM"),Iot.forEach(t),iMo=r(Y6e," (LayoutLM model)"),Y6e.forEach(t),dMo=i(O),mu=n(O,"LI",{});var K6e=s(mu);sie=n(K6e,"STRONG",{});var qot=s(sie);cMo=r(qot,"longformer"),qot.forEach(t),fMo=r(K6e," \u2014 "),MN=n(K6e,"A",{href:!0});var Not=s(MN);mMo=r(Not,"LongformerForMaskedLM"),Not.forEach(t),gMo=r(K6e," (Longformer model)"),K6e.forEach(t),hMo=i(O),gu=n(O,"LI",{});var Z6e=s(gu);lie=n(Z6e,"STRONG",{});var jot=s(lie);pMo=r(jot,"lxmert"),jot.forEach(t),_Mo=r(Z6e," \u2014 "),EN=n(Z6e,"A",{href:!0});var Dot=s(EN);uMo=r(Dot,"LxmertForPreTraining"),Dot.forEach(t),bMo=r(Z6e," (LXMERT model)"),Z6e.forEach(t),vMo=i(O),hu=n(O,"LI",{});var eye=s(hu);iie=n(eye,"STRONG",{});var Got=s(iie);FMo=r(Got,"megatron-bert"),Got.forEach(t),TMo=r(eye," \u2014 "),CN=n(eye,"A",{href:!0});var Oot=s(CN);MMo=r(Oot,"MegatronBertForPreTraining"),Oot.forEach(t),EMo=r(eye," (MegatronBert model)"),eye.forEach(t),CMo=i(O),pu=n(O,"LI",{});var oye=s(pu);die=n(oye,"STRONG",{});var Vot=s(die);wMo=r(Vot,"mobilebert"),Vot.forEach(t),AMo=r(oye," \u2014 "),wN=n(oye,"A",{href:!0});var Xot=s(wN);yMo=r(Xot,"MobileBertForPreTraining"),Xot.forEach(t),LMo=r(oye," (MobileBERT model)"),oye.forEach(t),xMo=i(O),_u=n(O,"LI",{});var rye=s(_u);cie=n(rye,"STRONG",{});var zot=s(cie);$Mo=r(zot,"mpnet"),zot.forEach(t),kMo=r(rye," \u2014 "),AN=n(rye,"A",{href:!0});var Wot=s(AN);SMo=r(Wot,"MPNetForMaskedLM"),Wot.forEach(t),RMo=r(rye," (MPNet model)"),rye.forEach(t),PMo=i(O),uu=n(O,"LI",{});var tye=s(uu);fie=n(tye,"STRONG",{});var Qot=s(fie);BMo=r(Qot,"openai-gpt"),Qot.forEach(t),IMo=r(tye," \u2014 "),yN=n(tye,"A",{href:!0});var Hot=s(yN);qMo=r(Hot,"OpenAIGPTLMHeadModel"),Hot.forEach(t),NMo=r(tye," (OpenAI GPT model)"),tye.forEach(t),jMo=i(O),bu=n(O,"LI",{});var aye=s(bu);mie=n(aye,"STRONG",{});var Uot=s(mie);DMo=r(Uot,"retribert"),Uot.forEach(t),GMo=r(aye," \u2014 "),LN=n(aye,"A",{href:!0});var Jot=s(LN);OMo=r(Jot,"RetriBertModel"),Jot.forEach(t),VMo=r(aye," (RetriBERT model)"),aye.forEach(t),XMo=i(O),vu=n(O,"LI",{});var nye=s(vu);gie=n(nye,"STRONG",{});var Yot=s(gie);zMo=r(Yot,"roberta"),Yot.forEach(t),WMo=r(nye," \u2014 "),xN=n(nye,"A",{href:!0});var Kot=s(xN);QMo=r(Kot,"RobertaForMaskedLM"),Kot.forEach(t),HMo=r(nye," (RoBERTa model)"),nye.forEach(t),UMo=i(O),Fu=n(O,"LI",{});var sye=s(Fu);hie=n(sye,"STRONG",{});var Zot=s(hie);JMo=r(Zot,"splinter"),Zot.forEach(t),YMo=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var ert=s($N);KMo=r(ert,"SplinterForPreTraining"),ert.forEach(t),ZMo=r(sye," (Splinter model)"),sye.forEach(t),e4o=i(O),Tu=n(O,"LI",{});var lye=s(Tu);pie=n(lye,"STRONG",{});var ort=s(pie);o4o=r(ort,"squeezebert"),ort.forEach(t),r4o=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var rrt=s(kN);t4o=r(rrt,"SqueezeBertForMaskedLM"),rrt.forEach(t),a4o=r(lye," (SqueezeBERT model)"),lye.forEach(t),n4o=i(O),Mu=n(O,"LI",{});var iye=s(Mu);_ie=n(iye,"STRONG",{});var trt=s(_ie);s4o=r(trt,"t5"),trt.forEach(t),l4o=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var art=s(SN);i4o=r(art,"T5ForConditionalGeneration"),art.forEach(t),d4o=r(iye," (T5 model)"),iye.forEach(t),c4o=i(O),Eu=n(O,"LI",{});var dye=s(Eu);uie=n(dye,"STRONG",{});var nrt=s(uie);f4o=r(nrt,"tapas"),nrt.forEach(t),m4o=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var srt=s(RN);g4o=r(srt,"TapasForMaskedLM"),srt.forEach(t),h4o=r(dye," (TAPAS model)"),dye.forEach(t),p4o=i(O),Cu=n(O,"LI",{});var cye=s(Cu);bie=n(cye,"STRONG",{});var lrt=s(bie);_4o=r(lrt,"transfo-xl"),lrt.forEach(t),u4o=r(cye," \u2014 "),PN=n(cye,"A",{href:!0});var irt=s(PN);b4o=r(irt,"TransfoXLLMHeadModel"),irt.forEach(t),v4o=r(cye," (Transformer-XL model)"),cye.forEach(t),F4o=i(O),wu=n(O,"LI",{});var fye=s(wu);vie=n(fye,"STRONG",{});var drt=s(vie);T4o=r(drt,"unispeech"),drt.forEach(t),M4o=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var crt=s(BN);E4o=r(crt,"UniSpeechForPreTraining"),crt.forEach(t),C4o=r(fye," (UniSpeech model)"),fye.forEach(t),w4o=i(O),Au=n(O,"LI",{});var mye=s(Au);Fie=n(mye,"STRONG",{});var frt=s(Fie);A4o=r(frt,"unispeech-sat"),frt.forEach(t),y4o=r(mye," \u2014 "),IN=n(mye,"A",{href:!0});var mrt=s(IN);L4o=r(mrt,"UniSpeechSatForPreTraining"),mrt.forEach(t),x4o=r(mye," (UniSpeechSat model)"),mye.forEach(t),$4o=i(O),yu=n(O,"LI",{});var gye=s(yu);Tie=n(gye,"STRONG",{});var grt=s(Tie);k4o=r(grt,"visual_bert"),grt.forEach(t),S4o=r(gye," \u2014 "),qN=n(gye,"A",{href:!0});var hrt=s(qN);R4o=r(hrt,"VisualBertForPreTraining"),hrt.forEach(t),P4o=r(gye," (VisualBert model)"),gye.forEach(t),B4o=i(O),Lu=n(O,"LI",{});var hye=s(Lu);Mie=n(hye,"STRONG",{});var prt=s(Mie);I4o=r(prt,"vit_mae"),prt.forEach(t),q4o=r(hye," \u2014 "),NN=n(hye,"A",{href:!0});var _rt=s(NN);N4o=r(_rt,"ViTMAEForPreTraining"),_rt.forEach(t),j4o=r(hye," (ViTMAE model)"),hye.forEach(t),D4o=i(O),xu=n(O,"LI",{});var pye=s(xu);Eie=n(pye,"STRONG",{});var urt=s(Eie);G4o=r(urt,"wav2vec2"),urt.forEach(t),O4o=r(pye," \u2014 "),jN=n(pye,"A",{href:!0});var brt=s(jN);V4o=r(brt,"Wav2Vec2ForPreTraining"),brt.forEach(t),X4o=r(pye," (Wav2Vec2 model)"),pye.forEach(t),z4o=i(O),$u=n(O,"LI",{});var _ye=s($u);Cie=n(_ye,"STRONG",{});var vrt=s(Cie);W4o=r(vrt,"wav2vec2-conformer"),vrt.forEach(t),Q4o=r(_ye," \u2014 "),DN=n(_ye,"A",{href:!0});var Frt=s(DN);H4o=r(Frt,"Wav2Vec2ConformerForPreTraining"),Frt.forEach(t),U4o=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),J4o=i(O),ku=n(O,"LI",{});var uye=s(ku);wie=n(uye,"STRONG",{});var Trt=s(wie);Y4o=r(Trt,"xlm"),Trt.forEach(t),K4o=r(uye," \u2014 "),GN=n(uye,"A",{href:!0});var Mrt=s(GN);Z4o=r(Mrt,"XLMWithLMHeadModel"),Mrt.forEach(t),eEo=r(uye," (XLM model)"),uye.forEach(t),oEo=i(O),Su=n(O,"LI",{});var bye=s(Su);Aie=n(bye,"STRONG",{});var Ert=s(Aie);rEo=r(Ert,"xlm-roberta"),Ert.forEach(t),tEo=r(bye," \u2014 "),ON=n(bye,"A",{href:!0});var Crt=s(ON);aEo=r(Crt,"XLMRobertaForMaskedLM"),Crt.forEach(t),nEo=r(bye," (XLM-RoBERTa model)"),bye.forEach(t),sEo=i(O),Ru=n(O,"LI",{});var vye=s(Ru);yie=n(vye,"STRONG",{});var wrt=s(yie);lEo=r(wrt,"xlm-roberta-xl"),wrt.forEach(t),iEo=r(vye," \u2014 "),VN=n(vye,"A",{href:!0});var Art=s(VN);dEo=r(Art,"XLMRobertaXLForMaskedLM"),Art.forEach(t),cEo=r(vye," (XLM-RoBERTa-XL model)"),vye.forEach(t),fEo=i(O),Pu=n(O,"LI",{});var Fye=s(Pu);Lie=n(Fye,"STRONG",{});var yrt=s(Lie);mEo=r(yrt,"xlnet"),yrt.forEach(t),gEo=r(Fye," \u2014 "),XN=n(Fye,"A",{href:!0});var Lrt=s(XN);hEo=r(Lrt,"XLNetLMHeadModel"),Lrt.forEach(t),pEo=r(Fye," (XLNet model)"),Fye.forEach(t),O.forEach(t),_Eo=i(ra),Bu=n(ra,"P",{});var Tye=s(Bu);uEo=r(Tye,"The model is set in evaluation mode by default using "),xie=n(Tye,"CODE",{});var xrt=s(xie);bEo=r(xrt,"model.eval()"),xrt.forEach(t),vEo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=n(Tye,"CODE",{});var $rt=s($ie);FEo=r($rt,"model.train()"),$rt.forEach(t),Tye.forEach(t),TEo=i(ra),T(Iu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),_qe=i(f),$i=n(f,"H2",{class:!0});var Fje=s($i);qu=n(Fje,"A",{id:!0,class:!0,href:!0});var krt=s(qu);kie=n(krt,"SPAN",{});var Srt=s(kie);T(J6.$$.fragment,Srt),Srt.forEach(t),krt.forEach(t),MEo=i(Fje),Sie=n(Fje,"SPAN",{});var Rrt=s(Sie);EEo=r(Rrt,"AutoModelForCausalLM"),Rrt.forEach(t),Fje.forEach(t),uqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(Y6.$$.fragment,Os),CEo=i(Os),ki=n(Os,"P",{});var XK=s(ki);wEo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zN=n(XK,"A",{href:!0});var Prt=s(zN);AEo=r(Prt,"from_pretrained()"),Prt.forEach(t),yEo=r(XK," class method or the "),WN=n(XK,"A",{href:!0});var Brt=s(WN);LEo=r(Brt,"from_config()"),Brt.forEach(t),xEo=r(XK,` class
method.`),XK.forEach(t),$Eo=i(Os),K6=n(Os,"P",{});var Tje=s(K6);kEo=r(Tje,"This class cannot be instantiated directly using "),Rie=n(Tje,"CODE",{});var Irt=s(Rie);SEo=r(Irt,"__init__()"),Irt.forEach(t),REo=r(Tje," (throws an error)."),Tje.forEach(t),PEo=i(Os),nt=n(Os,"DIV",{class:!0});var M0=s(nt);T(Z6.$$.fragment,M0),BEo=i(M0),Pie=n(M0,"P",{});var qrt=s(Pie);IEo=r(qrt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qrt.forEach(t),qEo=i(M0),Si=n(M0,"P",{});var zK=s(Si);NEo=r(zK,`Note:
Loading a model from its configuration file does `),Bie=n(zK,"STRONG",{});var Nrt=s(Bie);jEo=r(Nrt,"not"),Nrt.forEach(t),DEo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(zK,"A",{href:!0});var jrt=s(QN);GEo=r(jrt,"from_pretrained()"),jrt.forEach(t),OEo=r(zK," to load the model weights."),zK.forEach(t),VEo=i(M0),T(Nu.$$.fragment,M0),M0.forEach(t),XEo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(ey.$$.fragment,ta),zEo=i(ta),Iie=n(ta,"P",{});var Drt=s(Iie);WEo=r(Drt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Drt.forEach(t),QEo=i(ta),$a=n(ta,"P",{});var E0=s($a);HEo=r(E0,"The model class to instantiate is selected based on the "),qie=n(E0,"CODE",{});var Grt=s(qie);UEo=r(Grt,"model_type"),Grt.forEach(t),JEo=r(E0,` property of the config object (either
passed as an argument or loaded from `),Nie=n(E0,"CODE",{});var Ort=s(Nie);YEo=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),KEo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=n(E0,"CODE",{});var Vrt=s(jie);ZEo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),eCo=r(E0,":"),E0.forEach(t),oCo=i(ta),z=n(ta,"UL",{});var Q=s(z);ju=n(Q,"LI",{});var Mye=s(ju);Die=n(Mye,"STRONG",{});var Xrt=s(Die);rCo=r(Xrt,"bart"),Xrt.forEach(t),tCo=r(Mye," \u2014 "),HN=n(Mye,"A",{href:!0});var zrt=s(HN);aCo=r(zrt,"BartForCausalLM"),zrt.forEach(t),nCo=r(Mye," (BART model)"),Mye.forEach(t),sCo=i(Q),Du=n(Q,"LI",{});var Eye=s(Du);Gie=n(Eye,"STRONG",{});var Wrt=s(Gie);lCo=r(Wrt,"bert"),Wrt.forEach(t),iCo=r(Eye," \u2014 "),UN=n(Eye,"A",{href:!0});var Qrt=s(UN);dCo=r(Qrt,"BertLMHeadModel"),Qrt.forEach(t),cCo=r(Eye," (BERT model)"),Eye.forEach(t),fCo=i(Q),Gu=n(Q,"LI",{});var Cye=s(Gu);Oie=n(Cye,"STRONG",{});var Hrt=s(Oie);mCo=r(Hrt,"bert-generation"),Hrt.forEach(t),gCo=r(Cye," \u2014 "),JN=n(Cye,"A",{href:!0});var Urt=s(JN);hCo=r(Urt,"BertGenerationDecoder"),Urt.forEach(t),pCo=r(Cye," (Bert Generation model)"),Cye.forEach(t),_Co=i(Q),Ou=n(Q,"LI",{});var wye=s(Ou);Vie=n(wye,"STRONG",{});var Jrt=s(Vie);uCo=r(Jrt,"big_bird"),Jrt.forEach(t),bCo=r(wye," \u2014 "),YN=n(wye,"A",{href:!0});var Yrt=s(YN);vCo=r(Yrt,"BigBirdForCausalLM"),Yrt.forEach(t),FCo=r(wye," (BigBird model)"),wye.forEach(t),TCo=i(Q),Vu=n(Q,"LI",{});var Aye=s(Vu);Xie=n(Aye,"STRONG",{});var Krt=s(Xie);MCo=r(Krt,"bigbird_pegasus"),Krt.forEach(t),ECo=r(Aye," \u2014 "),KN=n(Aye,"A",{href:!0});var Zrt=s(KN);CCo=r(Zrt,"BigBirdPegasusForCausalLM"),Zrt.forEach(t),wCo=r(Aye," (BigBirdPegasus model)"),Aye.forEach(t),ACo=i(Q),Xu=n(Q,"LI",{});var yye=s(Xu);zie=n(yye,"STRONG",{});var ett=s(zie);yCo=r(ett,"blenderbot"),ett.forEach(t),LCo=r(yye," \u2014 "),ZN=n(yye,"A",{href:!0});var ott=s(ZN);xCo=r(ott,"BlenderbotForCausalLM"),ott.forEach(t),$Co=r(yye," (Blenderbot model)"),yye.forEach(t),kCo=i(Q),zu=n(Q,"LI",{});var Lye=s(zu);Wie=n(Lye,"STRONG",{});var rtt=s(Wie);SCo=r(rtt,"blenderbot-small"),rtt.forEach(t),RCo=r(Lye," \u2014 "),ej=n(Lye,"A",{href:!0});var ttt=s(ej);PCo=r(ttt,"BlenderbotSmallForCausalLM"),ttt.forEach(t),BCo=r(Lye," (BlenderbotSmall model)"),Lye.forEach(t),ICo=i(Q),Wu=n(Q,"LI",{});var xye=s(Wu);Qie=n(xye,"STRONG",{});var att=s(Qie);qCo=r(att,"camembert"),att.forEach(t),NCo=r(xye," \u2014 "),oj=n(xye,"A",{href:!0});var ntt=s(oj);jCo=r(ntt,"CamembertForCausalLM"),ntt.forEach(t),DCo=r(xye," (CamemBERT model)"),xye.forEach(t),GCo=i(Q),Qu=n(Q,"LI",{});var $ye=s(Qu);Hie=n($ye,"STRONG",{});var stt=s(Hie);OCo=r(stt,"ctrl"),stt.forEach(t),VCo=r($ye," \u2014 "),rj=n($ye,"A",{href:!0});var ltt=s(rj);XCo=r(ltt,"CTRLLMHeadModel"),ltt.forEach(t),zCo=r($ye," (CTRL model)"),$ye.forEach(t),WCo=i(Q),Hu=n(Q,"LI",{});var kye=s(Hu);Uie=n(kye,"STRONG",{});var itt=s(Uie);QCo=r(itt,"data2vec-text"),itt.forEach(t),HCo=r(kye," \u2014 "),tj=n(kye,"A",{href:!0});var dtt=s(tj);UCo=r(dtt,"Data2VecTextForCausalLM"),dtt.forEach(t),JCo=r(kye," (Data2VecText model)"),kye.forEach(t),YCo=i(Q),Uu=n(Q,"LI",{});var Sye=s(Uu);Jie=n(Sye,"STRONG",{});var ctt=s(Jie);KCo=r(ctt,"electra"),ctt.forEach(t),ZCo=r(Sye," \u2014 "),aj=n(Sye,"A",{href:!0});var ftt=s(aj);e5o=r(ftt,"ElectraForCausalLM"),ftt.forEach(t),o5o=r(Sye," (ELECTRA model)"),Sye.forEach(t),r5o=i(Q),Ju=n(Q,"LI",{});var Rye=s(Ju);Yie=n(Rye,"STRONG",{});var mtt=s(Yie);t5o=r(mtt,"gpt2"),mtt.forEach(t),a5o=r(Rye," \u2014 "),nj=n(Rye,"A",{href:!0});var gtt=s(nj);n5o=r(gtt,"GPT2LMHeadModel"),gtt.forEach(t),s5o=r(Rye," (OpenAI GPT-2 model)"),Rye.forEach(t),l5o=i(Q),Yu=n(Q,"LI",{});var Pye=s(Yu);Kie=n(Pye,"STRONG",{});var htt=s(Kie);i5o=r(htt,"gpt_neo"),htt.forEach(t),d5o=r(Pye," \u2014 "),sj=n(Pye,"A",{href:!0});var ptt=s(sj);c5o=r(ptt,"GPTNeoForCausalLM"),ptt.forEach(t),f5o=r(Pye," (GPT Neo model)"),Pye.forEach(t),m5o=i(Q),Ku=n(Q,"LI",{});var Bye=s(Ku);Zie=n(Bye,"STRONG",{});var _tt=s(Zie);g5o=r(_tt,"gptj"),_tt.forEach(t),h5o=r(Bye," \u2014 "),lj=n(Bye,"A",{href:!0});var utt=s(lj);p5o=r(utt,"GPTJForCausalLM"),utt.forEach(t),_5o=r(Bye," (GPT-J model)"),Bye.forEach(t),u5o=i(Q),Zu=n(Q,"LI",{});var Iye=s(Zu);ede=n(Iye,"STRONG",{});var btt=s(ede);b5o=r(btt,"marian"),btt.forEach(t),v5o=r(Iye," \u2014 "),ij=n(Iye,"A",{href:!0});var vtt=s(ij);F5o=r(vtt,"MarianForCausalLM"),vtt.forEach(t),T5o=r(Iye," (Marian model)"),Iye.forEach(t),M5o=i(Q),e2=n(Q,"LI",{});var qye=s(e2);ode=n(qye,"STRONG",{});var Ftt=s(ode);E5o=r(Ftt,"mbart"),Ftt.forEach(t),C5o=r(qye," \u2014 "),dj=n(qye,"A",{href:!0});var Ttt=s(dj);w5o=r(Ttt,"MBartForCausalLM"),Ttt.forEach(t),A5o=r(qye," (mBART model)"),qye.forEach(t),y5o=i(Q),o2=n(Q,"LI",{});var Nye=s(o2);rde=n(Nye,"STRONG",{});var Mtt=s(rde);L5o=r(Mtt,"megatron-bert"),Mtt.forEach(t),x5o=r(Nye," \u2014 "),cj=n(Nye,"A",{href:!0});var Ett=s(cj);$5o=r(Ett,"MegatronBertForCausalLM"),Ett.forEach(t),k5o=r(Nye," (MegatronBert model)"),Nye.forEach(t),S5o=i(Q),r2=n(Q,"LI",{});var jye=s(r2);tde=n(jye,"STRONG",{});var Ctt=s(tde);R5o=r(Ctt,"openai-gpt"),Ctt.forEach(t),P5o=r(jye," \u2014 "),fj=n(jye,"A",{href:!0});var wtt=s(fj);B5o=r(wtt,"OpenAIGPTLMHeadModel"),wtt.forEach(t),I5o=r(jye," (OpenAI GPT model)"),jye.forEach(t),q5o=i(Q),t2=n(Q,"LI",{});var Dye=s(t2);ade=n(Dye,"STRONG",{});var Att=s(ade);N5o=r(Att,"opt"),Att.forEach(t),j5o=r(Dye," \u2014 "),mj=n(Dye,"A",{href:!0});var ytt=s(mj);D5o=r(ytt,"OPTForCausalLM"),ytt.forEach(t),G5o=r(Dye," (OPT model)"),Dye.forEach(t),O5o=i(Q),a2=n(Q,"LI",{});var Gye=s(a2);nde=n(Gye,"STRONG",{});var Ltt=s(nde);V5o=r(Ltt,"pegasus"),Ltt.forEach(t),X5o=r(Gye," \u2014 "),gj=n(Gye,"A",{href:!0});var xtt=s(gj);z5o=r(xtt,"PegasusForCausalLM"),xtt.forEach(t),W5o=r(Gye," (Pegasus model)"),Gye.forEach(t),Q5o=i(Q),n2=n(Q,"LI",{});var Oye=s(n2);sde=n(Oye,"STRONG",{});var $tt=s(sde);H5o=r($tt,"plbart"),$tt.forEach(t),U5o=r(Oye," \u2014 "),hj=n(Oye,"A",{href:!0});var ktt=s(hj);J5o=r(ktt,"PLBartForCausalLM"),ktt.forEach(t),Y5o=r(Oye," (PLBart model)"),Oye.forEach(t),K5o=i(Q),s2=n(Q,"LI",{});var Vye=s(s2);lde=n(Vye,"STRONG",{});var Stt=s(lde);Z5o=r(Stt,"prophetnet"),Stt.forEach(t),e3o=r(Vye," \u2014 "),pj=n(Vye,"A",{href:!0});var Rtt=s(pj);o3o=r(Rtt,"ProphetNetForCausalLM"),Rtt.forEach(t),r3o=r(Vye," (ProphetNet model)"),Vye.forEach(t),t3o=i(Q),l2=n(Q,"LI",{});var Xye=s(l2);ide=n(Xye,"STRONG",{});var Ptt=s(ide);a3o=r(Ptt,"qdqbert"),Ptt.forEach(t),n3o=r(Xye," \u2014 "),_j=n(Xye,"A",{href:!0});var Btt=s(_j);s3o=r(Btt,"QDQBertLMHeadModel"),Btt.forEach(t),l3o=r(Xye," (QDQBert model)"),Xye.forEach(t),i3o=i(Q),i2=n(Q,"LI",{});var zye=s(i2);dde=n(zye,"STRONG",{});var Itt=s(dde);d3o=r(Itt,"reformer"),Itt.forEach(t),c3o=r(zye," \u2014 "),uj=n(zye,"A",{href:!0});var qtt=s(uj);f3o=r(qtt,"ReformerModelWithLMHead"),qtt.forEach(t),m3o=r(zye," (Reformer model)"),zye.forEach(t),g3o=i(Q),d2=n(Q,"LI",{});var Wye=s(d2);cde=n(Wye,"STRONG",{});var Ntt=s(cde);h3o=r(Ntt,"rembert"),Ntt.forEach(t),p3o=r(Wye," \u2014 "),bj=n(Wye,"A",{href:!0});var jtt=s(bj);_3o=r(jtt,"RemBertForCausalLM"),jtt.forEach(t),u3o=r(Wye," (RemBERT model)"),Wye.forEach(t),b3o=i(Q),c2=n(Q,"LI",{});var Qye=s(c2);fde=n(Qye,"STRONG",{});var Dtt=s(fde);v3o=r(Dtt,"roberta"),Dtt.forEach(t),F3o=r(Qye," \u2014 "),vj=n(Qye,"A",{href:!0});var Gtt=s(vj);T3o=r(Gtt,"RobertaForCausalLM"),Gtt.forEach(t),M3o=r(Qye," (RoBERTa model)"),Qye.forEach(t),E3o=i(Q),f2=n(Q,"LI",{});var Hye=s(f2);mde=n(Hye,"STRONG",{});var Ott=s(mde);C3o=r(Ott,"roformer"),Ott.forEach(t),w3o=r(Hye," \u2014 "),Fj=n(Hye,"A",{href:!0});var Vtt=s(Fj);A3o=r(Vtt,"RoFormerForCausalLM"),Vtt.forEach(t),y3o=r(Hye," (RoFormer model)"),Hye.forEach(t),L3o=i(Q),m2=n(Q,"LI",{});var Uye=s(m2);gde=n(Uye,"STRONG",{});var Xtt=s(gde);x3o=r(Xtt,"speech_to_text_2"),Xtt.forEach(t),$3o=r(Uye," \u2014 "),Tj=n(Uye,"A",{href:!0});var ztt=s(Tj);k3o=r(ztt,"Speech2Text2ForCausalLM"),ztt.forEach(t),S3o=r(Uye," (Speech2Text2 model)"),Uye.forEach(t),R3o=i(Q),g2=n(Q,"LI",{});var Jye=s(g2);hde=n(Jye,"STRONG",{});var Wtt=s(hde);P3o=r(Wtt,"transfo-xl"),Wtt.forEach(t),B3o=r(Jye," \u2014 "),Mj=n(Jye,"A",{href:!0});var Qtt=s(Mj);I3o=r(Qtt,"TransfoXLLMHeadModel"),Qtt.forEach(t),q3o=r(Jye," (Transformer-XL model)"),Jye.forEach(t),N3o=i(Q),h2=n(Q,"LI",{});var Yye=s(h2);pde=n(Yye,"STRONG",{});var Htt=s(pde);j3o=r(Htt,"trocr"),Htt.forEach(t),D3o=r(Yye," \u2014 "),Ej=n(Yye,"A",{href:!0});var Utt=s(Ej);G3o=r(Utt,"TrOCRForCausalLM"),Utt.forEach(t),O3o=r(Yye," (TrOCR model)"),Yye.forEach(t),V3o=i(Q),p2=n(Q,"LI",{});var Kye=s(p2);_de=n(Kye,"STRONG",{});var Jtt=s(_de);X3o=r(Jtt,"xglm"),Jtt.forEach(t),z3o=r(Kye," \u2014 "),Cj=n(Kye,"A",{href:!0});var Ytt=s(Cj);W3o=r(Ytt,"XGLMForCausalLM"),Ytt.forEach(t),Q3o=r(Kye," (XGLM model)"),Kye.forEach(t),H3o=i(Q),_2=n(Q,"LI",{});var Zye=s(_2);ude=n(Zye,"STRONG",{});var Ktt=s(ude);U3o=r(Ktt,"xlm"),Ktt.forEach(t),J3o=r(Zye," \u2014 "),wj=n(Zye,"A",{href:!0});var Ztt=s(wj);Y3o=r(Ztt,"XLMWithLMHeadModel"),Ztt.forEach(t),K3o=r(Zye," (XLM model)"),Zye.forEach(t),Z3o=i(Q),u2=n(Q,"LI",{});var eLe=s(u2);bde=n(eLe,"STRONG",{});var eat=s(bde);ewo=r(eat,"xlm-prophetnet"),eat.forEach(t),owo=r(eLe," \u2014 "),Aj=n(eLe,"A",{href:!0});var oat=s(Aj);rwo=r(oat,"XLMProphetNetForCausalLM"),oat.forEach(t),two=r(eLe," (XLMProphetNet model)"),eLe.forEach(t),awo=i(Q),b2=n(Q,"LI",{});var oLe=s(b2);vde=n(oLe,"STRONG",{});var rat=s(vde);nwo=r(rat,"xlm-roberta"),rat.forEach(t),swo=r(oLe," \u2014 "),yj=n(oLe,"A",{href:!0});var tat=s(yj);lwo=r(tat,"XLMRobertaForCausalLM"),tat.forEach(t),iwo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),dwo=i(Q),v2=n(Q,"LI",{});var rLe=s(v2);Fde=n(rLe,"STRONG",{});var aat=s(Fde);cwo=r(aat,"xlm-roberta-xl"),aat.forEach(t),fwo=r(rLe," \u2014 "),Lj=n(rLe,"A",{href:!0});var nat=s(Lj);mwo=r(nat,"XLMRobertaXLForCausalLM"),nat.forEach(t),gwo=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),hwo=i(Q),F2=n(Q,"LI",{});var tLe=s(F2);Tde=n(tLe,"STRONG",{});var sat=s(Tde);pwo=r(sat,"xlnet"),sat.forEach(t),_wo=r(tLe," \u2014 "),xj=n(tLe,"A",{href:!0});var lat=s(xj);uwo=r(lat,"XLNetLMHeadModel"),lat.forEach(t),bwo=r(tLe," (XLNet model)"),tLe.forEach(t),Q.forEach(t),vwo=i(ta),T2=n(ta,"P",{});var aLe=s(T2);Fwo=r(aLe,"The model is set in evaluation mode by default using "),Mde=n(aLe,"CODE",{});var iat=s(Mde);Two=r(iat,"model.eval()"),iat.forEach(t),Mwo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=n(aLe,"CODE",{});var dat=s(Ede);Ewo=r(dat,"model.train()"),dat.forEach(t),aLe.forEach(t),Cwo=i(ta),T(M2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),bqe=i(f),Ri=n(f,"H2",{class:!0});var Mje=s(Ri);E2=n(Mje,"A",{id:!0,class:!0,href:!0});var cat=s(E2);Cde=n(cat,"SPAN",{});var fat=s(Cde);T(oy.$$.fragment,fat),fat.forEach(t),cat.forEach(t),wwo=i(Mje),wde=n(Mje,"SPAN",{});var mat=s(wde);Awo=r(mat,"AutoModelForMaskedLM"),mat.forEach(t),Mje.forEach(t),vqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ry.$$.fragment,Vs),ywo=i(Vs),Pi=n(Vs,"P",{});var WK=s(Pi);Lwo=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$j=n(WK,"A",{href:!0});var gat=s($j);xwo=r(gat,"from_pretrained()"),gat.forEach(t),$wo=r(WK," class method or the "),kj=n(WK,"A",{href:!0});var hat=s(kj);kwo=r(hat,"from_config()"),hat.forEach(t),Swo=r(WK,` class
method.`),WK.forEach(t),Rwo=i(Vs),ty=n(Vs,"P",{});var Eje=s(ty);Pwo=r(Eje,"This class cannot be instantiated directly using "),Ade=n(Eje,"CODE",{});var pat=s(Ade);Bwo=r(pat,"__init__()"),pat.forEach(t),Iwo=r(Eje," (throws an error)."),Eje.forEach(t),qwo=i(Vs),st=n(Vs,"DIV",{class:!0});var C0=s(st);T(ay.$$.fragment,C0),Nwo=i(C0),yde=n(C0,"P",{});var _at=s(yde);jwo=r(_at,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_at.forEach(t),Dwo=i(C0),Bi=n(C0,"P",{});var QK=s(Bi);Gwo=r(QK,`Note:
Loading a model from its configuration file does `),Lde=n(QK,"STRONG",{});var uat=s(Lde);Owo=r(uat,"not"),uat.forEach(t),Vwo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(QK,"A",{href:!0});var bat=s(Sj);Xwo=r(bat,"from_pretrained()"),bat.forEach(t),zwo=r(QK," to load the model weights."),QK.forEach(t),Wwo=i(C0),T(C2.$$.fragment,C0),C0.forEach(t),Qwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(ny.$$.fragment,aa),Hwo=i(aa),xde=n(aa,"P",{});var vat=s(xde);Uwo=r(vat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vat.forEach(t),Jwo=i(aa),ka=n(aa,"P",{});var w0=s(ka);Ywo=r(w0,"The model class to instantiate is selected based on the "),$de=n(w0,"CODE",{});var Fat=s($de);Kwo=r(Fat,"model_type"),Fat.forEach(t),Zwo=r(w0,` property of the config object (either
passed as an argument or loaded from `),kde=n(w0,"CODE",{});var Tat=s(kde);e0o=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),o0o=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(w0,"CODE",{});var Mat=s(Sde);r0o=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),t0o=r(w0,":"),w0.forEach(t),a0o=i(aa),W=n(aa,"UL",{});var H=s(W);w2=n(H,"LI",{});var nLe=s(w2);Rde=n(nLe,"STRONG",{});var Eat=s(Rde);n0o=r(Eat,"albert"),Eat.forEach(t),s0o=r(nLe," \u2014 "),Rj=n(nLe,"A",{href:!0});var Cat=s(Rj);l0o=r(Cat,"AlbertForMaskedLM"),Cat.forEach(t),i0o=r(nLe," (ALBERT model)"),nLe.forEach(t),d0o=i(H),A2=n(H,"LI",{});var sLe=s(A2);Pde=n(sLe,"STRONG",{});var wat=s(Pde);c0o=r(wat,"bart"),wat.forEach(t),f0o=r(sLe," \u2014 "),Pj=n(sLe,"A",{href:!0});var Aat=s(Pj);m0o=r(Aat,"BartForConditionalGeneration"),Aat.forEach(t),g0o=r(sLe," (BART model)"),sLe.forEach(t),h0o=i(H),y2=n(H,"LI",{});var lLe=s(y2);Bde=n(lLe,"STRONG",{});var yat=s(Bde);p0o=r(yat,"bert"),yat.forEach(t),_0o=r(lLe," \u2014 "),Bj=n(lLe,"A",{href:!0});var Lat=s(Bj);u0o=r(Lat,"BertForMaskedLM"),Lat.forEach(t),b0o=r(lLe," (BERT model)"),lLe.forEach(t),v0o=i(H),L2=n(H,"LI",{});var iLe=s(L2);Ide=n(iLe,"STRONG",{});var xat=s(Ide);F0o=r(xat,"big_bird"),xat.forEach(t),T0o=r(iLe," \u2014 "),Ij=n(iLe,"A",{href:!0});var $at=s(Ij);M0o=r($at,"BigBirdForMaskedLM"),$at.forEach(t),E0o=r(iLe," (BigBird model)"),iLe.forEach(t),C0o=i(H),x2=n(H,"LI",{});var dLe=s(x2);qde=n(dLe,"STRONG",{});var kat=s(qde);w0o=r(kat,"camembert"),kat.forEach(t),A0o=r(dLe," \u2014 "),qj=n(dLe,"A",{href:!0});var Sat=s(qj);y0o=r(Sat,"CamembertForMaskedLM"),Sat.forEach(t),L0o=r(dLe," (CamemBERT model)"),dLe.forEach(t),x0o=i(H),$2=n(H,"LI",{});var cLe=s($2);Nde=n(cLe,"STRONG",{});var Rat=s(Nde);$0o=r(Rat,"convbert"),Rat.forEach(t),k0o=r(cLe," \u2014 "),Nj=n(cLe,"A",{href:!0});var Pat=s(Nj);S0o=r(Pat,"ConvBertForMaskedLM"),Pat.forEach(t),R0o=r(cLe," (ConvBERT model)"),cLe.forEach(t),P0o=i(H),k2=n(H,"LI",{});var fLe=s(k2);jde=n(fLe,"STRONG",{});var Bat=s(jde);B0o=r(Bat,"data2vec-text"),Bat.forEach(t),I0o=r(fLe," \u2014 "),jj=n(fLe,"A",{href:!0});var Iat=s(jj);q0o=r(Iat,"Data2VecTextForMaskedLM"),Iat.forEach(t),N0o=r(fLe," (Data2VecText model)"),fLe.forEach(t),j0o=i(H),S2=n(H,"LI",{});var mLe=s(S2);Dde=n(mLe,"STRONG",{});var qat=s(Dde);D0o=r(qat,"deberta"),qat.forEach(t),G0o=r(mLe," \u2014 "),Dj=n(mLe,"A",{href:!0});var Nat=s(Dj);O0o=r(Nat,"DebertaForMaskedLM"),Nat.forEach(t),V0o=r(mLe," (DeBERTa model)"),mLe.forEach(t),X0o=i(H),R2=n(H,"LI",{});var gLe=s(R2);Gde=n(gLe,"STRONG",{});var jat=s(Gde);z0o=r(jat,"deberta-v2"),jat.forEach(t),W0o=r(gLe," \u2014 "),Gj=n(gLe,"A",{href:!0});var Dat=s(Gj);Q0o=r(Dat,"DebertaV2ForMaskedLM"),Dat.forEach(t),H0o=r(gLe," (DeBERTa-v2 model)"),gLe.forEach(t),U0o=i(H),P2=n(H,"LI",{});var hLe=s(P2);Ode=n(hLe,"STRONG",{});var Gat=s(Ode);J0o=r(Gat,"distilbert"),Gat.forEach(t),Y0o=r(hLe," \u2014 "),Oj=n(hLe,"A",{href:!0});var Oat=s(Oj);K0o=r(Oat,"DistilBertForMaskedLM"),Oat.forEach(t),Z0o=r(hLe," (DistilBERT model)"),hLe.forEach(t),eAo=i(H),B2=n(H,"LI",{});var pLe=s(B2);Vde=n(pLe,"STRONG",{});var Vat=s(Vde);oAo=r(Vat,"electra"),Vat.forEach(t),rAo=r(pLe," \u2014 "),Vj=n(pLe,"A",{href:!0});var Xat=s(Vj);tAo=r(Xat,"ElectraForMaskedLM"),Xat.forEach(t),aAo=r(pLe," (ELECTRA model)"),pLe.forEach(t),nAo=i(H),I2=n(H,"LI",{});var _Le=s(I2);Xde=n(_Le,"STRONG",{});var zat=s(Xde);sAo=r(zat,"flaubert"),zat.forEach(t),lAo=r(_Le," \u2014 "),Xj=n(_Le,"A",{href:!0});var Wat=s(Xj);iAo=r(Wat,"FlaubertWithLMHeadModel"),Wat.forEach(t),dAo=r(_Le," (FlauBERT model)"),_Le.forEach(t),cAo=i(H),q2=n(H,"LI",{});var uLe=s(q2);zde=n(uLe,"STRONG",{});var Qat=s(zde);fAo=r(Qat,"fnet"),Qat.forEach(t),mAo=r(uLe," \u2014 "),zj=n(uLe,"A",{href:!0});var Hat=s(zj);gAo=r(Hat,"FNetForMaskedLM"),Hat.forEach(t),hAo=r(uLe," (FNet model)"),uLe.forEach(t),pAo=i(H),N2=n(H,"LI",{});var bLe=s(N2);Wde=n(bLe,"STRONG",{});var Uat=s(Wde);_Ao=r(Uat,"funnel"),Uat.forEach(t),uAo=r(bLe," \u2014 "),Wj=n(bLe,"A",{href:!0});var Jat=s(Wj);bAo=r(Jat,"FunnelForMaskedLM"),Jat.forEach(t),vAo=r(bLe," (Funnel Transformer model)"),bLe.forEach(t),FAo=i(H),j2=n(H,"LI",{});var vLe=s(j2);Qde=n(vLe,"STRONG",{});var Yat=s(Qde);TAo=r(Yat,"ibert"),Yat.forEach(t),MAo=r(vLe," \u2014 "),Qj=n(vLe,"A",{href:!0});var Kat=s(Qj);EAo=r(Kat,"IBertForMaskedLM"),Kat.forEach(t),CAo=r(vLe," (I-BERT model)"),vLe.forEach(t),wAo=i(H),D2=n(H,"LI",{});var FLe=s(D2);Hde=n(FLe,"STRONG",{});var Zat=s(Hde);AAo=r(Zat,"layoutlm"),Zat.forEach(t),yAo=r(FLe," \u2014 "),Hj=n(FLe,"A",{href:!0});var ent=s(Hj);LAo=r(ent,"LayoutLMForMaskedLM"),ent.forEach(t),xAo=r(FLe," (LayoutLM model)"),FLe.forEach(t),$Ao=i(H),G2=n(H,"LI",{});var TLe=s(G2);Ude=n(TLe,"STRONG",{});var ont=s(Ude);kAo=r(ont,"longformer"),ont.forEach(t),SAo=r(TLe," \u2014 "),Uj=n(TLe,"A",{href:!0});var rnt=s(Uj);RAo=r(rnt,"LongformerForMaskedLM"),rnt.forEach(t),PAo=r(TLe," (Longformer model)"),TLe.forEach(t),BAo=i(H),O2=n(H,"LI",{});var MLe=s(O2);Jde=n(MLe,"STRONG",{});var tnt=s(Jde);IAo=r(tnt,"mbart"),tnt.forEach(t),qAo=r(MLe," \u2014 "),Jj=n(MLe,"A",{href:!0});var ant=s(Jj);NAo=r(ant,"MBartForConditionalGeneration"),ant.forEach(t),jAo=r(MLe," (mBART model)"),MLe.forEach(t),DAo=i(H),V2=n(H,"LI",{});var ELe=s(V2);Yde=n(ELe,"STRONG",{});var nnt=s(Yde);GAo=r(nnt,"megatron-bert"),nnt.forEach(t),OAo=r(ELe," \u2014 "),Yj=n(ELe,"A",{href:!0});var snt=s(Yj);VAo=r(snt,"MegatronBertForMaskedLM"),snt.forEach(t),XAo=r(ELe," (MegatronBert model)"),ELe.forEach(t),zAo=i(H),X2=n(H,"LI",{});var CLe=s(X2);Kde=n(CLe,"STRONG",{});var lnt=s(Kde);WAo=r(lnt,"mobilebert"),lnt.forEach(t),QAo=r(CLe," \u2014 "),Kj=n(CLe,"A",{href:!0});var int=s(Kj);HAo=r(int,"MobileBertForMaskedLM"),int.forEach(t),UAo=r(CLe," (MobileBERT model)"),CLe.forEach(t),JAo=i(H),z2=n(H,"LI",{});var wLe=s(z2);Zde=n(wLe,"STRONG",{});var dnt=s(Zde);YAo=r(dnt,"mpnet"),dnt.forEach(t),KAo=r(wLe," \u2014 "),Zj=n(wLe,"A",{href:!0});var cnt=s(Zj);ZAo=r(cnt,"MPNetForMaskedLM"),cnt.forEach(t),e6o=r(wLe," (MPNet model)"),wLe.forEach(t),o6o=i(H),W2=n(H,"LI",{});var ALe=s(W2);ece=n(ALe,"STRONG",{});var fnt=s(ece);r6o=r(fnt,"nystromformer"),fnt.forEach(t),t6o=r(ALe," \u2014 "),eD=n(ALe,"A",{href:!0});var mnt=s(eD);a6o=r(mnt,"NystromformerForMaskedLM"),mnt.forEach(t),n6o=r(ALe," (Nystromformer model)"),ALe.forEach(t),s6o=i(H),Q2=n(H,"LI",{});var yLe=s(Q2);oce=n(yLe,"STRONG",{});var gnt=s(oce);l6o=r(gnt,"perceiver"),gnt.forEach(t),i6o=r(yLe," \u2014 "),oD=n(yLe,"A",{href:!0});var hnt=s(oD);d6o=r(hnt,"PerceiverForMaskedLM"),hnt.forEach(t),c6o=r(yLe," (Perceiver model)"),yLe.forEach(t),f6o=i(H),H2=n(H,"LI",{});var LLe=s(H2);rce=n(LLe,"STRONG",{});var pnt=s(rce);m6o=r(pnt,"qdqbert"),pnt.forEach(t),g6o=r(LLe," \u2014 "),rD=n(LLe,"A",{href:!0});var _nt=s(rD);h6o=r(_nt,"QDQBertForMaskedLM"),_nt.forEach(t),p6o=r(LLe," (QDQBert model)"),LLe.forEach(t),_6o=i(H),U2=n(H,"LI",{});var xLe=s(U2);tce=n(xLe,"STRONG",{});var unt=s(tce);u6o=r(unt,"reformer"),unt.forEach(t),b6o=r(xLe," \u2014 "),tD=n(xLe,"A",{href:!0});var bnt=s(tD);v6o=r(bnt,"ReformerForMaskedLM"),bnt.forEach(t),F6o=r(xLe," (Reformer model)"),xLe.forEach(t),T6o=i(H),J2=n(H,"LI",{});var $Le=s(J2);ace=n($Le,"STRONG",{});var vnt=s(ace);M6o=r(vnt,"rembert"),vnt.forEach(t),E6o=r($Le," \u2014 "),aD=n($Le,"A",{href:!0});var Fnt=s(aD);C6o=r(Fnt,"RemBertForMaskedLM"),Fnt.forEach(t),w6o=r($Le," (RemBERT model)"),$Le.forEach(t),A6o=i(H),Y2=n(H,"LI",{});var kLe=s(Y2);nce=n(kLe,"STRONG",{});var Tnt=s(nce);y6o=r(Tnt,"roberta"),Tnt.forEach(t),L6o=r(kLe," \u2014 "),nD=n(kLe,"A",{href:!0});var Mnt=s(nD);x6o=r(Mnt,"RobertaForMaskedLM"),Mnt.forEach(t),$6o=r(kLe," (RoBERTa model)"),kLe.forEach(t),k6o=i(H),K2=n(H,"LI",{});var SLe=s(K2);sce=n(SLe,"STRONG",{});var Ent=s(sce);S6o=r(Ent,"roformer"),Ent.forEach(t),R6o=r(SLe," \u2014 "),sD=n(SLe,"A",{href:!0});var Cnt=s(sD);P6o=r(Cnt,"RoFormerForMaskedLM"),Cnt.forEach(t),B6o=r(SLe," (RoFormer model)"),SLe.forEach(t),I6o=i(H),Z2=n(H,"LI",{});var RLe=s(Z2);lce=n(RLe,"STRONG",{});var wnt=s(lce);q6o=r(wnt,"squeezebert"),wnt.forEach(t),N6o=r(RLe," \u2014 "),lD=n(RLe,"A",{href:!0});var Ant=s(lD);j6o=r(Ant,"SqueezeBertForMaskedLM"),Ant.forEach(t),D6o=r(RLe," (SqueezeBERT model)"),RLe.forEach(t),G6o=i(H),e1=n(H,"LI",{});var PLe=s(e1);ice=n(PLe,"STRONG",{});var ynt=s(ice);O6o=r(ynt,"tapas"),ynt.forEach(t),V6o=r(PLe," \u2014 "),iD=n(PLe,"A",{href:!0});var Lnt=s(iD);X6o=r(Lnt,"TapasForMaskedLM"),Lnt.forEach(t),z6o=r(PLe," (TAPAS model)"),PLe.forEach(t),W6o=i(H),o1=n(H,"LI",{});var BLe=s(o1);dce=n(BLe,"STRONG",{});var xnt=s(dce);Q6o=r(xnt,"wav2vec2"),xnt.forEach(t),H6o=r(BLe," \u2014 "),cce=n(BLe,"CODE",{});var $nt=s(cce);U6o=r($nt,"Wav2Vec2ForMaskedLM"),$nt.forEach(t),J6o=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),Y6o=i(H),r1=n(H,"LI",{});var ILe=s(r1);fce=n(ILe,"STRONG",{});var knt=s(fce);K6o=r(knt,"xlm"),knt.forEach(t),Z6o=r(ILe," \u2014 "),dD=n(ILe,"A",{href:!0});var Snt=s(dD);eyo=r(Snt,"XLMWithLMHeadModel"),Snt.forEach(t),oyo=r(ILe," (XLM model)"),ILe.forEach(t),ryo=i(H),t1=n(H,"LI",{});var qLe=s(t1);mce=n(qLe,"STRONG",{});var Rnt=s(mce);tyo=r(Rnt,"xlm-roberta"),Rnt.forEach(t),ayo=r(qLe," \u2014 "),cD=n(qLe,"A",{href:!0});var Pnt=s(cD);nyo=r(Pnt,"XLMRobertaForMaskedLM"),Pnt.forEach(t),syo=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),lyo=i(H),a1=n(H,"LI",{});var NLe=s(a1);gce=n(NLe,"STRONG",{});var Bnt=s(gce);iyo=r(Bnt,"xlm-roberta-xl"),Bnt.forEach(t),dyo=r(NLe," \u2014 "),fD=n(NLe,"A",{href:!0});var Int=s(fD);cyo=r(Int,"XLMRobertaXLForMaskedLM"),Int.forEach(t),fyo=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),myo=i(H),n1=n(H,"LI",{});var jLe=s(n1);hce=n(jLe,"STRONG",{});var qnt=s(hce);gyo=r(qnt,"yoso"),qnt.forEach(t),hyo=r(jLe," \u2014 "),mD=n(jLe,"A",{href:!0});var Nnt=s(mD);pyo=r(Nnt,"YosoForMaskedLM"),Nnt.forEach(t),_yo=r(jLe," (YOSO model)"),jLe.forEach(t),H.forEach(t),uyo=i(aa),s1=n(aa,"P",{});var DLe=s(s1);byo=r(DLe,"The model is set in evaluation mode by default using "),pce=n(DLe,"CODE",{});var jnt=s(pce);vyo=r(jnt,"model.eval()"),jnt.forEach(t),Fyo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(DLe,"CODE",{});var Dnt=s(_ce);Tyo=r(Dnt,"model.train()"),Dnt.forEach(t),DLe.forEach(t),Myo=i(aa),T(l1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Fqe=i(f),Ii=n(f,"H2",{class:!0});var Cje=s(Ii);i1=n(Cje,"A",{id:!0,class:!0,href:!0});var Gnt=s(i1);uce=n(Gnt,"SPAN",{});var Ont=s(uce);T(sy.$$.fragment,Ont),Ont.forEach(t),Gnt.forEach(t),Eyo=i(Cje),bce=n(Cje,"SPAN",{});var Vnt=s(bce);Cyo=r(Vnt,"AutoModelForSeq2SeqLM"),Vnt.forEach(t),Cje.forEach(t),Tqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(ly.$$.fragment,Xs),wyo=i(Xs),qi=n(Xs,"P",{});var HK=s(qi);Ayo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gD=n(HK,"A",{href:!0});var Xnt=s(gD);yyo=r(Xnt,"from_pretrained()"),Xnt.forEach(t),Lyo=r(HK," class method or the "),hD=n(HK,"A",{href:!0});var znt=s(hD);xyo=r(znt,"from_config()"),znt.forEach(t),$yo=r(HK,` class
method.`),HK.forEach(t),kyo=i(Xs),iy=n(Xs,"P",{});var wje=s(iy);Syo=r(wje,"This class cannot be instantiated directly using "),vce=n(wje,"CODE",{});var Wnt=s(vce);Ryo=r(Wnt,"__init__()"),Wnt.forEach(t),Pyo=r(wje," (throws an error)."),wje.forEach(t),Byo=i(Xs),lt=n(Xs,"DIV",{class:!0});var A0=s(lt);T(dy.$$.fragment,A0),Iyo=i(A0),Fce=n(A0,"P",{});var Qnt=s(Fce);qyo=r(Qnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qnt.forEach(t),Nyo=i(A0),Ni=n(A0,"P",{});var UK=s(Ni);jyo=r(UK,`Note:
Loading a model from its configuration file does `),Tce=n(UK,"STRONG",{});var Hnt=s(Tce);Dyo=r(Hnt,"not"),Hnt.forEach(t),Gyo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=n(UK,"A",{href:!0});var Unt=s(pD);Oyo=r(Unt,"from_pretrained()"),Unt.forEach(t),Vyo=r(UK," to load the model weights."),UK.forEach(t),Xyo=i(A0),T(d1.$$.fragment,A0),A0.forEach(t),zyo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(cy.$$.fragment,na),Wyo=i(na),Mce=n(na,"P",{});var Jnt=s(Mce);Qyo=r(Jnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jnt.forEach(t),Hyo=i(na),Sa=n(na,"P",{});var y0=s(Sa);Uyo=r(y0,"The model class to instantiate is selected based on the "),Ece=n(y0,"CODE",{});var Ynt=s(Ece);Jyo=r(Ynt,"model_type"),Ynt.forEach(t),Yyo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Cce=n(y0,"CODE",{});var Knt=s(Cce);Kyo=r(Knt,"pretrained_model_name_or_path"),Knt.forEach(t),Zyo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(y0,"CODE",{});var Znt=s(wce);eLo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),oLo=r(y0,":"),y0.forEach(t),rLo=i(na),_e=n(na,"UL",{});var ve=s(_e);c1=n(ve,"LI",{});var GLe=s(c1);Ace=n(GLe,"STRONG",{});var est=s(Ace);tLo=r(est,"bart"),est.forEach(t),aLo=r(GLe," \u2014 "),_D=n(GLe,"A",{href:!0});var ost=s(_D);nLo=r(ost,"BartForConditionalGeneration"),ost.forEach(t),sLo=r(GLe," (BART model)"),GLe.forEach(t),lLo=i(ve),f1=n(ve,"LI",{});var OLe=s(f1);yce=n(OLe,"STRONG",{});var rst=s(yce);iLo=r(rst,"bigbird_pegasus"),rst.forEach(t),dLo=r(OLe," \u2014 "),uD=n(OLe,"A",{href:!0});var tst=s(uD);cLo=r(tst,"BigBirdPegasusForConditionalGeneration"),tst.forEach(t),fLo=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),mLo=i(ve),m1=n(ve,"LI",{});var VLe=s(m1);Lce=n(VLe,"STRONG",{});var ast=s(Lce);gLo=r(ast,"blenderbot"),ast.forEach(t),hLo=r(VLe," \u2014 "),bD=n(VLe,"A",{href:!0});var nst=s(bD);pLo=r(nst,"BlenderbotForConditionalGeneration"),nst.forEach(t),_Lo=r(VLe," (Blenderbot model)"),VLe.forEach(t),uLo=i(ve),g1=n(ve,"LI",{});var XLe=s(g1);xce=n(XLe,"STRONG",{});var sst=s(xce);bLo=r(sst,"blenderbot-small"),sst.forEach(t),vLo=r(XLe," \u2014 "),vD=n(XLe,"A",{href:!0});var lst=s(vD);FLo=r(lst,"BlenderbotSmallForConditionalGeneration"),lst.forEach(t),TLo=r(XLe," (BlenderbotSmall model)"),XLe.forEach(t),MLo=i(ve),h1=n(ve,"LI",{});var zLe=s(h1);$ce=n(zLe,"STRONG",{});var ist=s($ce);ELo=r(ist,"encoder-decoder"),ist.forEach(t),CLo=r(zLe," \u2014 "),FD=n(zLe,"A",{href:!0});var dst=s(FD);wLo=r(dst,"EncoderDecoderModel"),dst.forEach(t),ALo=r(zLe," (Encoder decoder model)"),zLe.forEach(t),yLo=i(ve),p1=n(ve,"LI",{});var WLe=s(p1);kce=n(WLe,"STRONG",{});var cst=s(kce);LLo=r(cst,"fsmt"),cst.forEach(t),xLo=r(WLe," \u2014 "),TD=n(WLe,"A",{href:!0});var fst=s(TD);$Lo=r(fst,"FSMTForConditionalGeneration"),fst.forEach(t),kLo=r(WLe," (FairSeq Machine-Translation model)"),WLe.forEach(t),SLo=i(ve),_1=n(ve,"LI",{});var QLe=s(_1);Sce=n(QLe,"STRONG",{});var mst=s(Sce);RLo=r(mst,"led"),mst.forEach(t),PLo=r(QLe," \u2014 "),MD=n(QLe,"A",{href:!0});var gst=s(MD);BLo=r(gst,"LEDForConditionalGeneration"),gst.forEach(t),ILo=r(QLe," (LED model)"),QLe.forEach(t),qLo=i(ve),u1=n(ve,"LI",{});var HLe=s(u1);Rce=n(HLe,"STRONG",{});var hst=s(Rce);NLo=r(hst,"m2m_100"),hst.forEach(t),jLo=r(HLe," \u2014 "),ED=n(HLe,"A",{href:!0});var pst=s(ED);DLo=r(pst,"M2M100ForConditionalGeneration"),pst.forEach(t),GLo=r(HLe," (M2M100 model)"),HLe.forEach(t),OLo=i(ve),b1=n(ve,"LI",{});var ULe=s(b1);Pce=n(ULe,"STRONG",{});var _st=s(Pce);VLo=r(_st,"marian"),_st.forEach(t),XLo=r(ULe," \u2014 "),CD=n(ULe,"A",{href:!0});var ust=s(CD);zLo=r(ust,"MarianMTModel"),ust.forEach(t),WLo=r(ULe," (Marian model)"),ULe.forEach(t),QLo=i(ve),v1=n(ve,"LI",{});var JLe=s(v1);Bce=n(JLe,"STRONG",{});var bst=s(Bce);HLo=r(bst,"mbart"),bst.forEach(t),ULo=r(JLe," \u2014 "),wD=n(JLe,"A",{href:!0});var vst=s(wD);JLo=r(vst,"MBartForConditionalGeneration"),vst.forEach(t),YLo=r(JLe," (mBART model)"),JLe.forEach(t),KLo=i(ve),F1=n(ve,"LI",{});var YLe=s(F1);Ice=n(YLe,"STRONG",{});var Fst=s(Ice);ZLo=r(Fst,"mt5"),Fst.forEach(t),e8o=r(YLe," \u2014 "),AD=n(YLe,"A",{href:!0});var Tst=s(AD);o8o=r(Tst,"MT5ForConditionalGeneration"),Tst.forEach(t),r8o=r(YLe," (mT5 model)"),YLe.forEach(t),t8o=i(ve),T1=n(ve,"LI",{});var KLe=s(T1);qce=n(KLe,"STRONG",{});var Mst=s(qce);a8o=r(Mst,"pegasus"),Mst.forEach(t),n8o=r(KLe," \u2014 "),yD=n(KLe,"A",{href:!0});var Est=s(yD);s8o=r(Est,"PegasusForConditionalGeneration"),Est.forEach(t),l8o=r(KLe," (Pegasus model)"),KLe.forEach(t),i8o=i(ve),M1=n(ve,"LI",{});var ZLe=s(M1);Nce=n(ZLe,"STRONG",{});var Cst=s(Nce);d8o=r(Cst,"plbart"),Cst.forEach(t),c8o=r(ZLe," \u2014 "),LD=n(ZLe,"A",{href:!0});var wst=s(LD);f8o=r(wst,"PLBartForConditionalGeneration"),wst.forEach(t),m8o=r(ZLe," (PLBart model)"),ZLe.forEach(t),g8o=i(ve),E1=n(ve,"LI",{});var e8e=s(E1);jce=n(e8e,"STRONG",{});var Ast=s(jce);h8o=r(Ast,"prophetnet"),Ast.forEach(t),p8o=r(e8e," \u2014 "),xD=n(e8e,"A",{href:!0});var yst=s(xD);_8o=r(yst,"ProphetNetForConditionalGeneration"),yst.forEach(t),u8o=r(e8e," (ProphetNet model)"),e8e.forEach(t),b8o=i(ve),C1=n(ve,"LI",{});var o8e=s(C1);Dce=n(o8e,"STRONG",{});var Lst=s(Dce);v8o=r(Lst,"t5"),Lst.forEach(t),F8o=r(o8e," \u2014 "),$D=n(o8e,"A",{href:!0});var xst=s($D);T8o=r(xst,"T5ForConditionalGeneration"),xst.forEach(t),M8o=r(o8e," (T5 model)"),o8e.forEach(t),E8o=i(ve),w1=n(ve,"LI",{});var r8e=s(w1);Gce=n(r8e,"STRONG",{});var $st=s(Gce);C8o=r($st,"xlm-prophetnet"),$st.forEach(t),w8o=r(r8e," \u2014 "),kD=n(r8e,"A",{href:!0});var kst=s(kD);A8o=r(kst,"XLMProphetNetForConditionalGeneration"),kst.forEach(t),y8o=r(r8e," (XLMProphetNet model)"),r8e.forEach(t),ve.forEach(t),L8o=i(na),A1=n(na,"P",{});var t8e=s(A1);x8o=r(t8e,"The model is set in evaluation mode by default using "),Oce=n(t8e,"CODE",{});var Sst=s(Oce);$8o=r(Sst,"model.eval()"),Sst.forEach(t),k8o=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n(t8e,"CODE",{});var Rst=s(Vce);S8o=r(Rst,"model.train()"),Rst.forEach(t),t8e.forEach(t),R8o=i(na),T(y1.$$.fragment,na),na.forEach(t),Xs.forEach(t),Mqe=i(f),ji=n(f,"H2",{class:!0});var Aje=s(ji);L1=n(Aje,"A",{id:!0,class:!0,href:!0});var Pst=s(L1);Xce=n(Pst,"SPAN",{});var Bst=s(Xce);T(fy.$$.fragment,Bst),Bst.forEach(t),Pst.forEach(t),P8o=i(Aje),zce=n(Aje,"SPAN",{});var Ist=s(zce);B8o=r(Ist,"AutoModelForSequenceClassification"),Ist.forEach(t),Aje.forEach(t),Eqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(my.$$.fragment,zs),I8o=i(zs),Di=n(zs,"P",{});var JK=s(Di);q8o=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SD=n(JK,"A",{href:!0});var qst=s(SD);N8o=r(qst,"from_pretrained()"),qst.forEach(t),j8o=r(JK," class method or the "),RD=n(JK,"A",{href:!0});var Nst=s(RD);D8o=r(Nst,"from_config()"),Nst.forEach(t),G8o=r(JK,` class
method.`),JK.forEach(t),O8o=i(zs),gy=n(zs,"P",{});var yje=s(gy);V8o=r(yje,"This class cannot be instantiated directly using "),Wce=n(yje,"CODE",{});var jst=s(Wce);X8o=r(jst,"__init__()"),jst.forEach(t),z8o=r(yje," (throws an error)."),yje.forEach(t),W8o=i(zs),it=n(zs,"DIV",{class:!0});var L0=s(it);T(hy.$$.fragment,L0),Q8o=i(L0),Qce=n(L0,"P",{});var Dst=s(Qce);H8o=r(Dst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dst.forEach(t),U8o=i(L0),Gi=n(L0,"P",{});var YK=s(Gi);J8o=r(YK,`Note:
Loading a model from its configuration file does `),Hce=n(YK,"STRONG",{});var Gst=s(Hce);Y8o=r(Gst,"not"),Gst.forEach(t),K8o=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(YK,"A",{href:!0});var Ost=s(PD);Z8o=r(Ost,"from_pretrained()"),Ost.forEach(t),e9o=r(YK," to load the model weights."),YK.forEach(t),o9o=i(L0),T(x1.$$.fragment,L0),L0.forEach(t),r9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(py.$$.fragment,sa),t9o=i(sa),Uce=n(sa,"P",{});var Vst=s(Uce);a9o=r(Vst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vst.forEach(t),n9o=i(sa),Ra=n(sa,"P",{});var x0=s(Ra);s9o=r(x0,"The model class to instantiate is selected based on the "),Jce=n(x0,"CODE",{});var Xst=s(Jce);l9o=r(Xst,"model_type"),Xst.forEach(t),i9o=r(x0,` property of the config object (either
passed as an argument or loaded from `),Yce=n(x0,"CODE",{});var zst=s(Yce);d9o=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),c9o=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=n(x0,"CODE",{});var Wst=s(Kce);f9o=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),m9o=r(x0,":"),x0.forEach(t),g9o=i(sa),N=n(sa,"UL",{});var D=s(N);$1=n(D,"LI",{});var a8e=s($1);Zce=n(a8e,"STRONG",{});var Qst=s(Zce);h9o=r(Qst,"albert"),Qst.forEach(t),p9o=r(a8e," \u2014 "),BD=n(a8e,"A",{href:!0});var Hst=s(BD);_9o=r(Hst,"AlbertForSequenceClassification"),Hst.forEach(t),u9o=r(a8e," (ALBERT model)"),a8e.forEach(t),b9o=i(D),k1=n(D,"LI",{});var n8e=s(k1);efe=n(n8e,"STRONG",{});var Ust=s(efe);v9o=r(Ust,"bart"),Ust.forEach(t),F9o=r(n8e," \u2014 "),ID=n(n8e,"A",{href:!0});var Jst=s(ID);T9o=r(Jst,"BartForSequenceClassification"),Jst.forEach(t),M9o=r(n8e," (BART model)"),n8e.forEach(t),E9o=i(D),S1=n(D,"LI",{});var s8e=s(S1);ofe=n(s8e,"STRONG",{});var Yst=s(ofe);C9o=r(Yst,"bert"),Yst.forEach(t),w9o=r(s8e," \u2014 "),qD=n(s8e,"A",{href:!0});var Kst=s(qD);A9o=r(Kst,"BertForSequenceClassification"),Kst.forEach(t),y9o=r(s8e," (BERT model)"),s8e.forEach(t),L9o=i(D),R1=n(D,"LI",{});var l8e=s(R1);rfe=n(l8e,"STRONG",{});var Zst=s(rfe);x9o=r(Zst,"big_bird"),Zst.forEach(t),$9o=r(l8e," \u2014 "),ND=n(l8e,"A",{href:!0});var elt=s(ND);k9o=r(elt,"BigBirdForSequenceClassification"),elt.forEach(t),S9o=r(l8e," (BigBird model)"),l8e.forEach(t),R9o=i(D),P1=n(D,"LI",{});var i8e=s(P1);tfe=n(i8e,"STRONG",{});var olt=s(tfe);P9o=r(olt,"bigbird_pegasus"),olt.forEach(t),B9o=r(i8e," \u2014 "),jD=n(i8e,"A",{href:!0});var rlt=s(jD);I9o=r(rlt,"BigBirdPegasusForSequenceClassification"),rlt.forEach(t),q9o=r(i8e," (BigBirdPegasus model)"),i8e.forEach(t),N9o=i(D),B1=n(D,"LI",{});var d8e=s(B1);afe=n(d8e,"STRONG",{});var tlt=s(afe);j9o=r(tlt,"camembert"),tlt.forEach(t),D9o=r(d8e," \u2014 "),DD=n(d8e,"A",{href:!0});var alt=s(DD);G9o=r(alt,"CamembertForSequenceClassification"),alt.forEach(t),O9o=r(d8e," (CamemBERT model)"),d8e.forEach(t),V9o=i(D),I1=n(D,"LI",{});var c8e=s(I1);nfe=n(c8e,"STRONG",{});var nlt=s(nfe);X9o=r(nlt,"canine"),nlt.forEach(t),z9o=r(c8e," \u2014 "),GD=n(c8e,"A",{href:!0});var slt=s(GD);W9o=r(slt,"CanineForSequenceClassification"),slt.forEach(t),Q9o=r(c8e," (Canine model)"),c8e.forEach(t),H9o=i(D),q1=n(D,"LI",{});var f8e=s(q1);sfe=n(f8e,"STRONG",{});var llt=s(sfe);U9o=r(llt,"convbert"),llt.forEach(t),J9o=r(f8e," \u2014 "),OD=n(f8e,"A",{href:!0});var ilt=s(OD);Y9o=r(ilt,"ConvBertForSequenceClassification"),ilt.forEach(t),K9o=r(f8e," (ConvBERT model)"),f8e.forEach(t),Z9o=i(D),N1=n(D,"LI",{});var m8e=s(N1);lfe=n(m8e,"STRONG",{});var dlt=s(lfe);exo=r(dlt,"ctrl"),dlt.forEach(t),oxo=r(m8e," \u2014 "),VD=n(m8e,"A",{href:!0});var clt=s(VD);rxo=r(clt,"CTRLForSequenceClassification"),clt.forEach(t),txo=r(m8e," (CTRL model)"),m8e.forEach(t),axo=i(D),j1=n(D,"LI",{});var g8e=s(j1);ife=n(g8e,"STRONG",{});var flt=s(ife);nxo=r(flt,"data2vec-text"),flt.forEach(t),sxo=r(g8e," \u2014 "),XD=n(g8e,"A",{href:!0});var mlt=s(XD);lxo=r(mlt,"Data2VecTextForSequenceClassification"),mlt.forEach(t),ixo=r(g8e," (Data2VecText model)"),g8e.forEach(t),dxo=i(D),D1=n(D,"LI",{});var h8e=s(D1);dfe=n(h8e,"STRONG",{});var glt=s(dfe);cxo=r(glt,"deberta"),glt.forEach(t),fxo=r(h8e," \u2014 "),zD=n(h8e,"A",{href:!0});var hlt=s(zD);mxo=r(hlt,"DebertaForSequenceClassification"),hlt.forEach(t),gxo=r(h8e," (DeBERTa model)"),h8e.forEach(t),hxo=i(D),G1=n(D,"LI",{});var p8e=s(G1);cfe=n(p8e,"STRONG",{});var plt=s(cfe);pxo=r(plt,"deberta-v2"),plt.forEach(t),_xo=r(p8e," \u2014 "),WD=n(p8e,"A",{href:!0});var _lt=s(WD);uxo=r(_lt,"DebertaV2ForSequenceClassification"),_lt.forEach(t),bxo=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),vxo=i(D),O1=n(D,"LI",{});var _8e=s(O1);ffe=n(_8e,"STRONG",{});var ult=s(ffe);Fxo=r(ult,"distilbert"),ult.forEach(t),Txo=r(_8e," \u2014 "),QD=n(_8e,"A",{href:!0});var blt=s(QD);Mxo=r(blt,"DistilBertForSequenceClassification"),blt.forEach(t),Exo=r(_8e," (DistilBERT model)"),_8e.forEach(t),Cxo=i(D),V1=n(D,"LI",{});var u8e=s(V1);mfe=n(u8e,"STRONG",{});var vlt=s(mfe);wxo=r(vlt,"electra"),vlt.forEach(t),Axo=r(u8e," \u2014 "),HD=n(u8e,"A",{href:!0});var Flt=s(HD);yxo=r(Flt,"ElectraForSequenceClassification"),Flt.forEach(t),Lxo=r(u8e," (ELECTRA model)"),u8e.forEach(t),xxo=i(D),X1=n(D,"LI",{});var b8e=s(X1);gfe=n(b8e,"STRONG",{});var Tlt=s(gfe);$xo=r(Tlt,"flaubert"),Tlt.forEach(t),kxo=r(b8e," \u2014 "),UD=n(b8e,"A",{href:!0});var Mlt=s(UD);Sxo=r(Mlt,"FlaubertForSequenceClassification"),Mlt.forEach(t),Rxo=r(b8e," (FlauBERT model)"),b8e.forEach(t),Pxo=i(D),z1=n(D,"LI",{});var v8e=s(z1);hfe=n(v8e,"STRONG",{});var Elt=s(hfe);Bxo=r(Elt,"fnet"),Elt.forEach(t),Ixo=r(v8e," \u2014 "),JD=n(v8e,"A",{href:!0});var Clt=s(JD);qxo=r(Clt,"FNetForSequenceClassification"),Clt.forEach(t),Nxo=r(v8e," (FNet model)"),v8e.forEach(t),jxo=i(D),W1=n(D,"LI",{});var F8e=s(W1);pfe=n(F8e,"STRONG",{});var wlt=s(pfe);Dxo=r(wlt,"funnel"),wlt.forEach(t),Gxo=r(F8e," \u2014 "),YD=n(F8e,"A",{href:!0});var Alt=s(YD);Oxo=r(Alt,"FunnelForSequenceClassification"),Alt.forEach(t),Vxo=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),Xxo=i(D),Q1=n(D,"LI",{});var T8e=s(Q1);_fe=n(T8e,"STRONG",{});var ylt=s(_fe);zxo=r(ylt,"gpt2"),ylt.forEach(t),Wxo=r(T8e," \u2014 "),KD=n(T8e,"A",{href:!0});var Llt=s(KD);Qxo=r(Llt,"GPT2ForSequenceClassification"),Llt.forEach(t),Hxo=r(T8e," (OpenAI GPT-2 model)"),T8e.forEach(t),Uxo=i(D),H1=n(D,"LI",{});var M8e=s(H1);ufe=n(M8e,"STRONG",{});var xlt=s(ufe);Jxo=r(xlt,"gpt_neo"),xlt.forEach(t),Yxo=r(M8e," \u2014 "),ZD=n(M8e,"A",{href:!0});var $lt=s(ZD);Kxo=r($lt,"GPTNeoForSequenceClassification"),$lt.forEach(t),Zxo=r(M8e," (GPT Neo model)"),M8e.forEach(t),e$o=i(D),U1=n(D,"LI",{});var E8e=s(U1);bfe=n(E8e,"STRONG",{});var klt=s(bfe);o$o=r(klt,"gptj"),klt.forEach(t),r$o=r(E8e," \u2014 "),eG=n(E8e,"A",{href:!0});var Slt=s(eG);t$o=r(Slt,"GPTJForSequenceClassification"),Slt.forEach(t),a$o=r(E8e," (GPT-J model)"),E8e.forEach(t),n$o=i(D),J1=n(D,"LI",{});var C8e=s(J1);vfe=n(C8e,"STRONG",{});var Rlt=s(vfe);s$o=r(Rlt,"ibert"),Rlt.forEach(t),l$o=r(C8e," \u2014 "),oG=n(C8e,"A",{href:!0});var Plt=s(oG);i$o=r(Plt,"IBertForSequenceClassification"),Plt.forEach(t),d$o=r(C8e," (I-BERT model)"),C8e.forEach(t),c$o=i(D),Y1=n(D,"LI",{});var w8e=s(Y1);Ffe=n(w8e,"STRONG",{});var Blt=s(Ffe);f$o=r(Blt,"layoutlm"),Blt.forEach(t),m$o=r(w8e," \u2014 "),rG=n(w8e,"A",{href:!0});var Ilt=s(rG);g$o=r(Ilt,"LayoutLMForSequenceClassification"),Ilt.forEach(t),h$o=r(w8e," (LayoutLM model)"),w8e.forEach(t),p$o=i(D),K1=n(D,"LI",{});var A8e=s(K1);Tfe=n(A8e,"STRONG",{});var qlt=s(Tfe);_$o=r(qlt,"layoutlmv2"),qlt.forEach(t),u$o=r(A8e," \u2014 "),tG=n(A8e,"A",{href:!0});var Nlt=s(tG);b$o=r(Nlt,"LayoutLMv2ForSequenceClassification"),Nlt.forEach(t),v$o=r(A8e," (LayoutLMv2 model)"),A8e.forEach(t),F$o=i(D),Z1=n(D,"LI",{});var y8e=s(Z1);Mfe=n(y8e,"STRONG",{});var jlt=s(Mfe);T$o=r(jlt,"led"),jlt.forEach(t),M$o=r(y8e," \u2014 "),aG=n(y8e,"A",{href:!0});var Dlt=s(aG);E$o=r(Dlt,"LEDForSequenceClassification"),Dlt.forEach(t),C$o=r(y8e," (LED model)"),y8e.forEach(t),w$o=i(D),e7=n(D,"LI",{});var L8e=s(e7);Efe=n(L8e,"STRONG",{});var Glt=s(Efe);A$o=r(Glt,"longformer"),Glt.forEach(t),y$o=r(L8e," \u2014 "),nG=n(L8e,"A",{href:!0});var Olt=s(nG);L$o=r(Olt,"LongformerForSequenceClassification"),Olt.forEach(t),x$o=r(L8e," (Longformer model)"),L8e.forEach(t),$$o=i(D),o7=n(D,"LI",{});var x8e=s(o7);Cfe=n(x8e,"STRONG",{});var Vlt=s(Cfe);k$o=r(Vlt,"mbart"),Vlt.forEach(t),S$o=r(x8e," \u2014 "),sG=n(x8e,"A",{href:!0});var Xlt=s(sG);R$o=r(Xlt,"MBartForSequenceClassification"),Xlt.forEach(t),P$o=r(x8e," (mBART model)"),x8e.forEach(t),B$o=i(D),r7=n(D,"LI",{});var $8e=s(r7);wfe=n($8e,"STRONG",{});var zlt=s(wfe);I$o=r(zlt,"megatron-bert"),zlt.forEach(t),q$o=r($8e," \u2014 "),lG=n($8e,"A",{href:!0});var Wlt=s(lG);N$o=r(Wlt,"MegatronBertForSequenceClassification"),Wlt.forEach(t),j$o=r($8e," (MegatronBert model)"),$8e.forEach(t),D$o=i(D),t7=n(D,"LI",{});var k8e=s(t7);Afe=n(k8e,"STRONG",{});var Qlt=s(Afe);G$o=r(Qlt,"mobilebert"),Qlt.forEach(t),O$o=r(k8e," \u2014 "),iG=n(k8e,"A",{href:!0});var Hlt=s(iG);V$o=r(Hlt,"MobileBertForSequenceClassification"),Hlt.forEach(t),X$o=r(k8e," (MobileBERT model)"),k8e.forEach(t),z$o=i(D),a7=n(D,"LI",{});var S8e=s(a7);yfe=n(S8e,"STRONG",{});var Ult=s(yfe);W$o=r(Ult,"mpnet"),Ult.forEach(t),Q$o=r(S8e," \u2014 "),dG=n(S8e,"A",{href:!0});var Jlt=s(dG);H$o=r(Jlt,"MPNetForSequenceClassification"),Jlt.forEach(t),U$o=r(S8e," (MPNet model)"),S8e.forEach(t),J$o=i(D),n7=n(D,"LI",{});var R8e=s(n7);Lfe=n(R8e,"STRONG",{});var Ylt=s(Lfe);Y$o=r(Ylt,"nystromformer"),Ylt.forEach(t),K$o=r(R8e," \u2014 "),cG=n(R8e,"A",{href:!0});var Klt=s(cG);Z$o=r(Klt,"NystromformerForSequenceClassification"),Klt.forEach(t),eko=r(R8e," (Nystromformer model)"),R8e.forEach(t),oko=i(D),s7=n(D,"LI",{});var P8e=s(s7);xfe=n(P8e,"STRONG",{});var Zlt=s(xfe);rko=r(Zlt,"openai-gpt"),Zlt.forEach(t),tko=r(P8e," \u2014 "),fG=n(P8e,"A",{href:!0});var eit=s(fG);ako=r(eit,"OpenAIGPTForSequenceClassification"),eit.forEach(t),nko=r(P8e," (OpenAI GPT model)"),P8e.forEach(t),sko=i(D),l7=n(D,"LI",{});var B8e=s(l7);$fe=n(B8e,"STRONG",{});var oit=s($fe);lko=r(oit,"perceiver"),oit.forEach(t),iko=r(B8e," \u2014 "),mG=n(B8e,"A",{href:!0});var rit=s(mG);dko=r(rit,"PerceiverForSequenceClassification"),rit.forEach(t),cko=r(B8e," (Perceiver model)"),B8e.forEach(t),fko=i(D),i7=n(D,"LI",{});var I8e=s(i7);kfe=n(I8e,"STRONG",{});var tit=s(kfe);mko=r(tit,"plbart"),tit.forEach(t),gko=r(I8e," \u2014 "),gG=n(I8e,"A",{href:!0});var ait=s(gG);hko=r(ait,"PLBartForSequenceClassification"),ait.forEach(t),pko=r(I8e," (PLBart model)"),I8e.forEach(t),_ko=i(D),d7=n(D,"LI",{});var q8e=s(d7);Sfe=n(q8e,"STRONG",{});var nit=s(Sfe);uko=r(nit,"qdqbert"),nit.forEach(t),bko=r(q8e," \u2014 "),hG=n(q8e,"A",{href:!0});var sit=s(hG);vko=r(sit,"QDQBertForSequenceClassification"),sit.forEach(t),Fko=r(q8e," (QDQBert model)"),q8e.forEach(t),Tko=i(D),c7=n(D,"LI",{});var N8e=s(c7);Rfe=n(N8e,"STRONG",{});var lit=s(Rfe);Mko=r(lit,"reformer"),lit.forEach(t),Eko=r(N8e," \u2014 "),pG=n(N8e,"A",{href:!0});var iit=s(pG);Cko=r(iit,"ReformerForSequenceClassification"),iit.forEach(t),wko=r(N8e," (Reformer model)"),N8e.forEach(t),Ako=i(D),f7=n(D,"LI",{});var j8e=s(f7);Pfe=n(j8e,"STRONG",{});var dit=s(Pfe);yko=r(dit,"rembert"),dit.forEach(t),Lko=r(j8e," \u2014 "),_G=n(j8e,"A",{href:!0});var cit=s(_G);xko=r(cit,"RemBertForSequenceClassification"),cit.forEach(t),$ko=r(j8e," (RemBERT model)"),j8e.forEach(t),kko=i(D),m7=n(D,"LI",{});var D8e=s(m7);Bfe=n(D8e,"STRONG",{});var fit=s(Bfe);Sko=r(fit,"roberta"),fit.forEach(t),Rko=r(D8e," \u2014 "),uG=n(D8e,"A",{href:!0});var mit=s(uG);Pko=r(mit,"RobertaForSequenceClassification"),mit.forEach(t),Bko=r(D8e," (RoBERTa model)"),D8e.forEach(t),Iko=i(D),g7=n(D,"LI",{});var G8e=s(g7);Ife=n(G8e,"STRONG",{});var git=s(Ife);qko=r(git,"roformer"),git.forEach(t),Nko=r(G8e," \u2014 "),bG=n(G8e,"A",{href:!0});var hit=s(bG);jko=r(hit,"RoFormerForSequenceClassification"),hit.forEach(t),Dko=r(G8e," (RoFormer model)"),G8e.forEach(t),Gko=i(D),h7=n(D,"LI",{});var O8e=s(h7);qfe=n(O8e,"STRONG",{});var pit=s(qfe);Oko=r(pit,"squeezebert"),pit.forEach(t),Vko=r(O8e," \u2014 "),vG=n(O8e,"A",{href:!0});var _it=s(vG);Xko=r(_it,"SqueezeBertForSequenceClassification"),_it.forEach(t),zko=r(O8e," (SqueezeBERT model)"),O8e.forEach(t),Wko=i(D),p7=n(D,"LI",{});var V8e=s(p7);Nfe=n(V8e,"STRONG",{});var uit=s(Nfe);Qko=r(uit,"tapas"),uit.forEach(t),Hko=r(V8e," \u2014 "),FG=n(V8e,"A",{href:!0});var bit=s(FG);Uko=r(bit,"TapasForSequenceClassification"),bit.forEach(t),Jko=r(V8e," (TAPAS model)"),V8e.forEach(t),Yko=i(D),_7=n(D,"LI",{});var X8e=s(_7);jfe=n(X8e,"STRONG",{});var vit=s(jfe);Kko=r(vit,"transfo-xl"),vit.forEach(t),Zko=r(X8e," \u2014 "),TG=n(X8e,"A",{href:!0});var Fit=s(TG);eSo=r(Fit,"TransfoXLForSequenceClassification"),Fit.forEach(t),oSo=r(X8e," (Transformer-XL model)"),X8e.forEach(t),rSo=i(D),u7=n(D,"LI",{});var z8e=s(u7);Dfe=n(z8e,"STRONG",{});var Tit=s(Dfe);tSo=r(Tit,"xlm"),Tit.forEach(t),aSo=r(z8e," \u2014 "),MG=n(z8e,"A",{href:!0});var Mit=s(MG);nSo=r(Mit,"XLMForSequenceClassification"),Mit.forEach(t),sSo=r(z8e," (XLM model)"),z8e.forEach(t),lSo=i(D),b7=n(D,"LI",{});var W8e=s(b7);Gfe=n(W8e,"STRONG",{});var Eit=s(Gfe);iSo=r(Eit,"xlm-roberta"),Eit.forEach(t),dSo=r(W8e," \u2014 "),EG=n(W8e,"A",{href:!0});var Cit=s(EG);cSo=r(Cit,"XLMRobertaForSequenceClassification"),Cit.forEach(t),fSo=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),mSo=i(D),v7=n(D,"LI",{});var Q8e=s(v7);Ofe=n(Q8e,"STRONG",{});var wit=s(Ofe);gSo=r(wit,"xlm-roberta-xl"),wit.forEach(t),hSo=r(Q8e," \u2014 "),CG=n(Q8e,"A",{href:!0});var Ait=s(CG);pSo=r(Ait,"XLMRobertaXLForSequenceClassification"),Ait.forEach(t),_So=r(Q8e," (XLM-RoBERTa-XL model)"),Q8e.forEach(t),uSo=i(D),F7=n(D,"LI",{});var H8e=s(F7);Vfe=n(H8e,"STRONG",{});var yit=s(Vfe);bSo=r(yit,"xlnet"),yit.forEach(t),vSo=r(H8e," \u2014 "),wG=n(H8e,"A",{href:!0});var Lit=s(wG);FSo=r(Lit,"XLNetForSequenceClassification"),Lit.forEach(t),TSo=r(H8e," (XLNet model)"),H8e.forEach(t),MSo=i(D),T7=n(D,"LI",{});var U8e=s(T7);Xfe=n(U8e,"STRONG",{});var xit=s(Xfe);ESo=r(xit,"yoso"),xit.forEach(t),CSo=r(U8e," \u2014 "),AG=n(U8e,"A",{href:!0});var $it=s(AG);wSo=r($it,"YosoForSequenceClassification"),$it.forEach(t),ASo=r(U8e," (YOSO model)"),U8e.forEach(t),D.forEach(t),ySo=i(sa),M7=n(sa,"P",{});var J8e=s(M7);LSo=r(J8e,"The model is set in evaluation mode by default using "),zfe=n(J8e,"CODE",{});var kit=s(zfe);xSo=r(kit,"model.eval()"),kit.forEach(t),$So=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(J8e,"CODE",{});var Sit=s(Wfe);kSo=r(Sit,"model.train()"),Sit.forEach(t),J8e.forEach(t),SSo=i(sa),T(E7.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Cqe=i(f),Oi=n(f,"H2",{class:!0});var Lje=s(Oi);C7=n(Lje,"A",{id:!0,class:!0,href:!0});var Rit=s(C7);Qfe=n(Rit,"SPAN",{});var Pit=s(Qfe);T(_y.$$.fragment,Pit),Pit.forEach(t),Rit.forEach(t),RSo=i(Lje),Hfe=n(Lje,"SPAN",{});var Bit=s(Hfe);PSo=r(Bit,"AutoModelForMultipleChoice"),Bit.forEach(t),Lje.forEach(t),wqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(uy.$$.fragment,Ws),BSo=i(Ws),Vi=n(Ws,"P",{});var KK=s(Vi);ISo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yG=n(KK,"A",{href:!0});var Iit=s(yG);qSo=r(Iit,"from_pretrained()"),Iit.forEach(t),NSo=r(KK," class method or the "),LG=n(KK,"A",{href:!0});var qit=s(LG);jSo=r(qit,"from_config()"),qit.forEach(t),DSo=r(KK,` class
method.`),KK.forEach(t),GSo=i(Ws),by=n(Ws,"P",{});var xje=s(by);OSo=r(xje,"This class cannot be instantiated directly using "),Ufe=n(xje,"CODE",{});var Nit=s(Ufe);VSo=r(Nit,"__init__()"),Nit.forEach(t),XSo=r(xje," (throws an error)."),xje.forEach(t),zSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var $0=s(dt);T(vy.$$.fragment,$0),WSo=i($0),Jfe=n($0,"P",{});var jit=s(Jfe);QSo=r(jit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jit.forEach(t),HSo=i($0),Xi=n($0,"P",{});var ZK=s(Xi);USo=r(ZK,`Note:
Loading a model from its configuration file does `),Yfe=n(ZK,"STRONG",{});var Dit=s(Yfe);JSo=r(Dit,"not"),Dit.forEach(t),YSo=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(ZK,"A",{href:!0});var Git=s(xG);KSo=r(Git,"from_pretrained()"),Git.forEach(t),ZSo=r(ZK," to load the model weights."),ZK.forEach(t),eRo=i($0),T(w7.$$.fragment,$0),$0.forEach(t),oRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(Fy.$$.fragment,la),rRo=i(la),Kfe=n(la,"P",{});var Oit=s(Kfe);tRo=r(Oit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Oit.forEach(t),aRo=i(la),Pa=n(la,"P",{});var k0=s(Pa);nRo=r(k0,"The model class to instantiate is selected based on the "),Zfe=n(k0,"CODE",{});var Vit=s(Zfe);sRo=r(Vit,"model_type"),Vit.forEach(t),lRo=r(k0,` property of the config object (either
passed as an argument or loaded from `),eme=n(k0,"CODE",{});var Xit=s(eme);iRo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),dRo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(k0,"CODE",{});var zit=s(ome);cRo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),fRo=r(k0,":"),k0.forEach(t),mRo=i(la),Y=n(la,"UL",{});var K=s(Y);A7=n(K,"LI",{});var Y8e=s(A7);rme=n(Y8e,"STRONG",{});var Wit=s(rme);gRo=r(Wit,"albert"),Wit.forEach(t),hRo=r(Y8e," \u2014 "),$G=n(Y8e,"A",{href:!0});var Qit=s($G);pRo=r(Qit,"AlbertForMultipleChoice"),Qit.forEach(t),_Ro=r(Y8e," (ALBERT model)"),Y8e.forEach(t),uRo=i(K),y7=n(K,"LI",{});var K8e=s(y7);tme=n(K8e,"STRONG",{});var Hit=s(tme);bRo=r(Hit,"bert"),Hit.forEach(t),vRo=r(K8e," \u2014 "),kG=n(K8e,"A",{href:!0});var Uit=s(kG);FRo=r(Uit,"BertForMultipleChoice"),Uit.forEach(t),TRo=r(K8e," (BERT model)"),K8e.forEach(t),MRo=i(K),L7=n(K,"LI",{});var Z8e=s(L7);ame=n(Z8e,"STRONG",{});var Jit=s(ame);ERo=r(Jit,"big_bird"),Jit.forEach(t),CRo=r(Z8e," \u2014 "),SG=n(Z8e,"A",{href:!0});var Yit=s(SG);wRo=r(Yit,"BigBirdForMultipleChoice"),Yit.forEach(t),ARo=r(Z8e," (BigBird model)"),Z8e.forEach(t),yRo=i(K),x7=n(K,"LI",{});var e9e=s(x7);nme=n(e9e,"STRONG",{});var Kit=s(nme);LRo=r(Kit,"camembert"),Kit.forEach(t),xRo=r(e9e," \u2014 "),RG=n(e9e,"A",{href:!0});var Zit=s(RG);$Ro=r(Zit,"CamembertForMultipleChoice"),Zit.forEach(t),kRo=r(e9e," (CamemBERT model)"),e9e.forEach(t),SRo=i(K),$7=n(K,"LI",{});var o9e=s($7);sme=n(o9e,"STRONG",{});var edt=s(sme);RRo=r(edt,"canine"),edt.forEach(t),PRo=r(o9e," \u2014 "),PG=n(o9e,"A",{href:!0});var odt=s(PG);BRo=r(odt,"CanineForMultipleChoice"),odt.forEach(t),IRo=r(o9e," (Canine model)"),o9e.forEach(t),qRo=i(K),k7=n(K,"LI",{});var r9e=s(k7);lme=n(r9e,"STRONG",{});var rdt=s(lme);NRo=r(rdt,"convbert"),rdt.forEach(t),jRo=r(r9e," \u2014 "),BG=n(r9e,"A",{href:!0});var tdt=s(BG);DRo=r(tdt,"ConvBertForMultipleChoice"),tdt.forEach(t),GRo=r(r9e," (ConvBERT model)"),r9e.forEach(t),ORo=i(K),S7=n(K,"LI",{});var t9e=s(S7);ime=n(t9e,"STRONG",{});var adt=s(ime);VRo=r(adt,"data2vec-text"),adt.forEach(t),XRo=r(t9e," \u2014 "),IG=n(t9e,"A",{href:!0});var ndt=s(IG);zRo=r(ndt,"Data2VecTextForMultipleChoice"),ndt.forEach(t),WRo=r(t9e," (Data2VecText model)"),t9e.forEach(t),QRo=i(K),R7=n(K,"LI",{});var a9e=s(R7);dme=n(a9e,"STRONG",{});var sdt=s(dme);HRo=r(sdt,"deberta-v2"),sdt.forEach(t),URo=r(a9e," \u2014 "),qG=n(a9e,"A",{href:!0});var ldt=s(qG);JRo=r(ldt,"DebertaV2ForMultipleChoice"),ldt.forEach(t),YRo=r(a9e," (DeBERTa-v2 model)"),a9e.forEach(t),KRo=i(K),P7=n(K,"LI",{});var n9e=s(P7);cme=n(n9e,"STRONG",{});var idt=s(cme);ZRo=r(idt,"distilbert"),idt.forEach(t),ePo=r(n9e," \u2014 "),NG=n(n9e,"A",{href:!0});var ddt=s(NG);oPo=r(ddt,"DistilBertForMultipleChoice"),ddt.forEach(t),rPo=r(n9e," (DistilBERT model)"),n9e.forEach(t),tPo=i(K),B7=n(K,"LI",{});var s9e=s(B7);fme=n(s9e,"STRONG",{});var cdt=s(fme);aPo=r(cdt,"electra"),cdt.forEach(t),nPo=r(s9e," \u2014 "),jG=n(s9e,"A",{href:!0});var fdt=s(jG);sPo=r(fdt,"ElectraForMultipleChoice"),fdt.forEach(t),lPo=r(s9e," (ELECTRA model)"),s9e.forEach(t),iPo=i(K),I7=n(K,"LI",{});var l9e=s(I7);mme=n(l9e,"STRONG",{});var mdt=s(mme);dPo=r(mdt,"flaubert"),mdt.forEach(t),cPo=r(l9e," \u2014 "),DG=n(l9e,"A",{href:!0});var gdt=s(DG);fPo=r(gdt,"FlaubertForMultipleChoice"),gdt.forEach(t),mPo=r(l9e," (FlauBERT model)"),l9e.forEach(t),gPo=i(K),q7=n(K,"LI",{});var i9e=s(q7);gme=n(i9e,"STRONG",{});var hdt=s(gme);hPo=r(hdt,"fnet"),hdt.forEach(t),pPo=r(i9e," \u2014 "),GG=n(i9e,"A",{href:!0});var pdt=s(GG);_Po=r(pdt,"FNetForMultipleChoice"),pdt.forEach(t),uPo=r(i9e," (FNet model)"),i9e.forEach(t),bPo=i(K),N7=n(K,"LI",{});var d9e=s(N7);hme=n(d9e,"STRONG",{});var _dt=s(hme);vPo=r(_dt,"funnel"),_dt.forEach(t),FPo=r(d9e," \u2014 "),OG=n(d9e,"A",{href:!0});var udt=s(OG);TPo=r(udt,"FunnelForMultipleChoice"),udt.forEach(t),MPo=r(d9e," (Funnel Transformer model)"),d9e.forEach(t),EPo=i(K),j7=n(K,"LI",{});var c9e=s(j7);pme=n(c9e,"STRONG",{});var bdt=s(pme);CPo=r(bdt,"ibert"),bdt.forEach(t),wPo=r(c9e," \u2014 "),VG=n(c9e,"A",{href:!0});var vdt=s(VG);APo=r(vdt,"IBertForMultipleChoice"),vdt.forEach(t),yPo=r(c9e," (I-BERT model)"),c9e.forEach(t),LPo=i(K),D7=n(K,"LI",{});var f9e=s(D7);_me=n(f9e,"STRONG",{});var Fdt=s(_me);xPo=r(Fdt,"longformer"),Fdt.forEach(t),$Po=r(f9e," \u2014 "),XG=n(f9e,"A",{href:!0});var Tdt=s(XG);kPo=r(Tdt,"LongformerForMultipleChoice"),Tdt.forEach(t),SPo=r(f9e," (Longformer model)"),f9e.forEach(t),RPo=i(K),G7=n(K,"LI",{});var m9e=s(G7);ume=n(m9e,"STRONG",{});var Mdt=s(ume);PPo=r(Mdt,"megatron-bert"),Mdt.forEach(t),BPo=r(m9e," \u2014 "),zG=n(m9e,"A",{href:!0});var Edt=s(zG);IPo=r(Edt,"MegatronBertForMultipleChoice"),Edt.forEach(t),qPo=r(m9e," (MegatronBert model)"),m9e.forEach(t),NPo=i(K),O7=n(K,"LI",{});var g9e=s(O7);bme=n(g9e,"STRONG",{});var Cdt=s(bme);jPo=r(Cdt,"mobilebert"),Cdt.forEach(t),DPo=r(g9e," \u2014 "),WG=n(g9e,"A",{href:!0});var wdt=s(WG);GPo=r(wdt,"MobileBertForMultipleChoice"),wdt.forEach(t),OPo=r(g9e," (MobileBERT model)"),g9e.forEach(t),VPo=i(K),V7=n(K,"LI",{});var h9e=s(V7);vme=n(h9e,"STRONG",{});var Adt=s(vme);XPo=r(Adt,"mpnet"),Adt.forEach(t),zPo=r(h9e," \u2014 "),QG=n(h9e,"A",{href:!0});var ydt=s(QG);WPo=r(ydt,"MPNetForMultipleChoice"),ydt.forEach(t),QPo=r(h9e," (MPNet model)"),h9e.forEach(t),HPo=i(K),X7=n(K,"LI",{});var p9e=s(X7);Fme=n(p9e,"STRONG",{});var Ldt=s(Fme);UPo=r(Ldt,"nystromformer"),Ldt.forEach(t),JPo=r(p9e," \u2014 "),HG=n(p9e,"A",{href:!0});var xdt=s(HG);YPo=r(xdt,"NystromformerForMultipleChoice"),xdt.forEach(t),KPo=r(p9e," (Nystromformer model)"),p9e.forEach(t),ZPo=i(K),z7=n(K,"LI",{});var _9e=s(z7);Tme=n(_9e,"STRONG",{});var $dt=s(Tme);eBo=r($dt,"qdqbert"),$dt.forEach(t),oBo=r(_9e," \u2014 "),UG=n(_9e,"A",{href:!0});var kdt=s(UG);rBo=r(kdt,"QDQBertForMultipleChoice"),kdt.forEach(t),tBo=r(_9e," (QDQBert model)"),_9e.forEach(t),aBo=i(K),W7=n(K,"LI",{});var u9e=s(W7);Mme=n(u9e,"STRONG",{});var Sdt=s(Mme);nBo=r(Sdt,"rembert"),Sdt.forEach(t),sBo=r(u9e," \u2014 "),JG=n(u9e,"A",{href:!0});var Rdt=s(JG);lBo=r(Rdt,"RemBertForMultipleChoice"),Rdt.forEach(t),iBo=r(u9e," (RemBERT model)"),u9e.forEach(t),dBo=i(K),Q7=n(K,"LI",{});var b9e=s(Q7);Eme=n(b9e,"STRONG",{});var Pdt=s(Eme);cBo=r(Pdt,"roberta"),Pdt.forEach(t),fBo=r(b9e," \u2014 "),YG=n(b9e,"A",{href:!0});var Bdt=s(YG);mBo=r(Bdt,"RobertaForMultipleChoice"),Bdt.forEach(t),gBo=r(b9e," (RoBERTa model)"),b9e.forEach(t),hBo=i(K),H7=n(K,"LI",{});var v9e=s(H7);Cme=n(v9e,"STRONG",{});var Idt=s(Cme);pBo=r(Idt,"roformer"),Idt.forEach(t),_Bo=r(v9e," \u2014 "),KG=n(v9e,"A",{href:!0});var qdt=s(KG);uBo=r(qdt,"RoFormerForMultipleChoice"),qdt.forEach(t),bBo=r(v9e," (RoFormer model)"),v9e.forEach(t),vBo=i(K),U7=n(K,"LI",{});var F9e=s(U7);wme=n(F9e,"STRONG",{});var Ndt=s(wme);FBo=r(Ndt,"squeezebert"),Ndt.forEach(t),TBo=r(F9e," \u2014 "),ZG=n(F9e,"A",{href:!0});var jdt=s(ZG);MBo=r(jdt,"SqueezeBertForMultipleChoice"),jdt.forEach(t),EBo=r(F9e," (SqueezeBERT model)"),F9e.forEach(t),CBo=i(K),J7=n(K,"LI",{});var T9e=s(J7);Ame=n(T9e,"STRONG",{});var Ddt=s(Ame);wBo=r(Ddt,"xlm"),Ddt.forEach(t),ABo=r(T9e," \u2014 "),eO=n(T9e,"A",{href:!0});var Gdt=s(eO);yBo=r(Gdt,"XLMForMultipleChoice"),Gdt.forEach(t),LBo=r(T9e," (XLM model)"),T9e.forEach(t),xBo=i(K),Y7=n(K,"LI",{});var M9e=s(Y7);yme=n(M9e,"STRONG",{});var Odt=s(yme);$Bo=r(Odt,"xlm-roberta"),Odt.forEach(t),kBo=r(M9e," \u2014 "),oO=n(M9e,"A",{href:!0});var Vdt=s(oO);SBo=r(Vdt,"XLMRobertaForMultipleChoice"),Vdt.forEach(t),RBo=r(M9e," (XLM-RoBERTa model)"),M9e.forEach(t),PBo=i(K),K7=n(K,"LI",{});var E9e=s(K7);Lme=n(E9e,"STRONG",{});var Xdt=s(Lme);BBo=r(Xdt,"xlm-roberta-xl"),Xdt.forEach(t),IBo=r(E9e," \u2014 "),rO=n(E9e,"A",{href:!0});var zdt=s(rO);qBo=r(zdt,"XLMRobertaXLForMultipleChoice"),zdt.forEach(t),NBo=r(E9e," (XLM-RoBERTa-XL model)"),E9e.forEach(t),jBo=i(K),Z7=n(K,"LI",{});var C9e=s(Z7);xme=n(C9e,"STRONG",{});var Wdt=s(xme);DBo=r(Wdt,"xlnet"),Wdt.forEach(t),GBo=r(C9e," \u2014 "),tO=n(C9e,"A",{href:!0});var Qdt=s(tO);OBo=r(Qdt,"XLNetForMultipleChoice"),Qdt.forEach(t),VBo=r(C9e," (XLNet model)"),C9e.forEach(t),XBo=i(K),eb=n(K,"LI",{});var w9e=s(eb);$me=n(w9e,"STRONG",{});var Hdt=s($me);zBo=r(Hdt,"yoso"),Hdt.forEach(t),WBo=r(w9e," \u2014 "),aO=n(w9e,"A",{href:!0});var Udt=s(aO);QBo=r(Udt,"YosoForMultipleChoice"),Udt.forEach(t),HBo=r(w9e," (YOSO model)"),w9e.forEach(t),K.forEach(t),UBo=i(la),ob=n(la,"P",{});var A9e=s(ob);JBo=r(A9e,"The model is set in evaluation mode by default using "),kme=n(A9e,"CODE",{});var Jdt=s(kme);YBo=r(Jdt,"model.eval()"),Jdt.forEach(t),KBo=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(A9e,"CODE",{});var Ydt=s(Sme);ZBo=r(Ydt,"model.train()"),Ydt.forEach(t),A9e.forEach(t),eIo=i(la),T(rb.$$.fragment,la),la.forEach(t),Ws.forEach(t),Aqe=i(f),zi=n(f,"H2",{class:!0});var $je=s(zi);tb=n($je,"A",{id:!0,class:!0,href:!0});var Kdt=s(tb);Rme=n(Kdt,"SPAN",{});var Zdt=s(Rme);T(Ty.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),oIo=i($je),Pme=n($je,"SPAN",{});var ect=s(Pme);rIo=r(ect,"AutoModelForNextSentencePrediction"),ect.forEach(t),$je.forEach(t),yqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(My.$$.fragment,Qs),tIo=i(Qs),Wi=n(Qs,"P",{});var eZ=s(Wi);aIo=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nO=n(eZ,"A",{href:!0});var oct=s(nO);nIo=r(oct,"from_pretrained()"),oct.forEach(t),sIo=r(eZ," class method or the "),sO=n(eZ,"A",{href:!0});var rct=s(sO);lIo=r(rct,"from_config()"),rct.forEach(t),iIo=r(eZ,` class
method.`),eZ.forEach(t),dIo=i(Qs),Ey=n(Qs,"P",{});var kje=s(Ey);cIo=r(kje,"This class cannot be instantiated directly using "),Bme=n(kje,"CODE",{});var tct=s(Bme);fIo=r(tct,"__init__()"),tct.forEach(t),mIo=r(kje," (throws an error)."),kje.forEach(t),gIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var S0=s(ct);T(Cy.$$.fragment,S0),hIo=i(S0),Ime=n(S0,"P",{});var act=s(Ime);pIo=r(act,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),act.forEach(t),_Io=i(S0),Qi=n(S0,"P",{});var oZ=s(Qi);uIo=r(oZ,`Note:
Loading a model from its configuration file does `),qme=n(oZ,"STRONG",{});var nct=s(qme);bIo=r(nct,"not"),nct.forEach(t),vIo=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(oZ,"A",{href:!0});var sct=s(lO);FIo=r(sct,"from_pretrained()"),sct.forEach(t),TIo=r(oZ," to load the model weights."),oZ.forEach(t),MIo=i(S0),T(ab.$$.fragment,S0),S0.forEach(t),EIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(wy.$$.fragment,ia),CIo=i(ia),Nme=n(ia,"P",{});var lct=s(Nme);wIo=r(lct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lct.forEach(t),AIo=i(ia),Ba=n(ia,"P",{});var R0=s(Ba);yIo=r(R0,"The model class to instantiate is selected based on the "),jme=n(R0,"CODE",{});var ict=s(jme);LIo=r(ict,"model_type"),ict.forEach(t),xIo=r(R0,` property of the config object (either
passed as an argument or loaded from `),Dme=n(R0,"CODE",{});var dct=s(Dme);$Io=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),kIo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(R0,"CODE",{});var cct=s(Gme);SIo=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),RIo=r(R0,":"),R0.forEach(t),PIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);nb=n(Hs,"LI",{});var y9e=s(nb);Ome=n(y9e,"STRONG",{});var fct=s(Ome);BIo=r(fct,"bert"),fct.forEach(t),IIo=r(y9e," \u2014 "),iO=n(y9e,"A",{href:!0});var mct=s(iO);qIo=r(mct,"BertForNextSentencePrediction"),mct.forEach(t),NIo=r(y9e," (BERT model)"),y9e.forEach(t),jIo=i(Hs),sb=n(Hs,"LI",{});var L9e=s(sb);Vme=n(L9e,"STRONG",{});var gct=s(Vme);DIo=r(gct,"fnet"),gct.forEach(t),GIo=r(L9e," \u2014 "),dO=n(L9e,"A",{href:!0});var hct=s(dO);OIo=r(hct,"FNetForNextSentencePrediction"),hct.forEach(t),VIo=r(L9e," (FNet model)"),L9e.forEach(t),XIo=i(Hs),lb=n(Hs,"LI",{});var x9e=s(lb);Xme=n(x9e,"STRONG",{});var pct=s(Xme);zIo=r(pct,"megatron-bert"),pct.forEach(t),WIo=r(x9e," \u2014 "),cO=n(x9e,"A",{href:!0});var _ct=s(cO);QIo=r(_ct,"MegatronBertForNextSentencePrediction"),_ct.forEach(t),HIo=r(x9e," (MegatronBert model)"),x9e.forEach(t),UIo=i(Hs),ib=n(Hs,"LI",{});var $9e=s(ib);zme=n($9e,"STRONG",{});var uct=s(zme);JIo=r(uct,"mobilebert"),uct.forEach(t),YIo=r($9e," \u2014 "),fO=n($9e,"A",{href:!0});var bct=s(fO);KIo=r(bct,"MobileBertForNextSentencePrediction"),bct.forEach(t),ZIo=r($9e," (MobileBERT model)"),$9e.forEach(t),eqo=i(Hs),db=n(Hs,"LI",{});var k9e=s(db);Wme=n(k9e,"STRONG",{});var vct=s(Wme);oqo=r(vct,"qdqbert"),vct.forEach(t),rqo=r(k9e," \u2014 "),mO=n(k9e,"A",{href:!0});var Fct=s(mO);tqo=r(Fct,"QDQBertForNextSentencePrediction"),Fct.forEach(t),aqo=r(k9e," (QDQBert model)"),k9e.forEach(t),Hs.forEach(t),nqo=i(ia),cb=n(ia,"P",{});var S9e=s(cb);sqo=r(S9e,"The model is set in evaluation mode by default using "),Qme=n(S9e,"CODE",{});var Tct=s(Qme);lqo=r(Tct,"model.eval()"),Tct.forEach(t),iqo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(S9e,"CODE",{});var Mct=s(Hme);dqo=r(Mct,"model.train()"),Mct.forEach(t),S9e.forEach(t),cqo=i(ia),T(fb.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Lqe=i(f),Hi=n(f,"H2",{class:!0});var Sje=s(Hi);mb=n(Sje,"A",{id:!0,class:!0,href:!0});var Ect=s(mb);Ume=n(Ect,"SPAN",{});var Cct=s(Ume);T(Ay.$$.fragment,Cct),Cct.forEach(t),Ect.forEach(t),fqo=i(Sje),Jme=n(Sje,"SPAN",{});var wct=s(Jme);mqo=r(wct,"AutoModelForTokenClassification"),wct.forEach(t),Sje.forEach(t),xqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(yy.$$.fragment,Us),gqo=i(Us),Ui=n(Us,"P",{});var rZ=s(Ui);hqo=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gO=n(rZ,"A",{href:!0});var Act=s(gO);pqo=r(Act,"from_pretrained()"),Act.forEach(t),_qo=r(rZ," class method or the "),hO=n(rZ,"A",{href:!0});var yct=s(hO);uqo=r(yct,"from_config()"),yct.forEach(t),bqo=r(rZ,` class
method.`),rZ.forEach(t),vqo=i(Us),Ly=n(Us,"P",{});var Rje=s(Ly);Fqo=r(Rje,"This class cannot be instantiated directly using "),Yme=n(Rje,"CODE",{});var Lct=s(Yme);Tqo=r(Lct,"__init__()"),Lct.forEach(t),Mqo=r(Rje," (throws an error)."),Rje.forEach(t),Eqo=i(Us),ft=n(Us,"DIV",{class:!0});var P0=s(ft);T(xy.$$.fragment,P0),Cqo=i(P0),Kme=n(P0,"P",{});var xct=s(Kme);wqo=r(xct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xct.forEach(t),Aqo=i(P0),Ji=n(P0,"P",{});var tZ=s(Ji);yqo=r(tZ,`Note:
Loading a model from its configuration file does `),Zme=n(tZ,"STRONG",{});var $ct=s(Zme);Lqo=r($ct,"not"),$ct.forEach(t),xqo=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(tZ,"A",{href:!0});var kct=s(pO);$qo=r(kct,"from_pretrained()"),kct.forEach(t),kqo=r(tZ," to load the model weights."),tZ.forEach(t),Sqo=i(P0),T(gb.$$.fragment,P0),P0.forEach(t),Rqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T($y.$$.fragment,da),Pqo=i(da),ege=n(da,"P",{});var Sct=s(ege);Bqo=r(Sct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Sct.forEach(t),Iqo=i(da),Ia=n(da,"P",{});var B0=s(Ia);qqo=r(B0,"The model class to instantiate is selected based on the "),oge=n(B0,"CODE",{});var Rct=s(oge);Nqo=r(Rct,"model_type"),Rct.forEach(t),jqo=r(B0,` property of the config object (either
passed as an argument or loaded from `),rge=n(B0,"CODE",{});var Pct=s(rge);Dqo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),Gqo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(B0,"CODE",{});var Bct=s(tge);Oqo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),Vqo=r(B0,":"),B0.forEach(t),Xqo=i(da),U=n(da,"UL",{});var J=s(U);hb=n(J,"LI",{});var R9e=s(hb);age=n(R9e,"STRONG",{});var Ict=s(age);zqo=r(Ict,"albert"),Ict.forEach(t),Wqo=r(R9e," \u2014 "),_O=n(R9e,"A",{href:!0});var qct=s(_O);Qqo=r(qct,"AlbertForTokenClassification"),qct.forEach(t),Hqo=r(R9e," (ALBERT model)"),R9e.forEach(t),Uqo=i(J),pb=n(J,"LI",{});var P9e=s(pb);nge=n(P9e,"STRONG",{});var Nct=s(nge);Jqo=r(Nct,"bert"),Nct.forEach(t),Yqo=r(P9e," \u2014 "),uO=n(P9e,"A",{href:!0});var jct=s(uO);Kqo=r(jct,"BertForTokenClassification"),jct.forEach(t),Zqo=r(P9e," (BERT model)"),P9e.forEach(t),eNo=i(J),_b=n(J,"LI",{});var B9e=s(_b);sge=n(B9e,"STRONG",{});var Dct=s(sge);oNo=r(Dct,"big_bird"),Dct.forEach(t),rNo=r(B9e," \u2014 "),bO=n(B9e,"A",{href:!0});var Gct=s(bO);tNo=r(Gct,"BigBirdForTokenClassification"),Gct.forEach(t),aNo=r(B9e," (BigBird model)"),B9e.forEach(t),nNo=i(J),ub=n(J,"LI",{});var I9e=s(ub);lge=n(I9e,"STRONG",{});var Oct=s(lge);sNo=r(Oct,"camembert"),Oct.forEach(t),lNo=r(I9e," \u2014 "),vO=n(I9e,"A",{href:!0});var Vct=s(vO);iNo=r(Vct,"CamembertForTokenClassification"),Vct.forEach(t),dNo=r(I9e," (CamemBERT model)"),I9e.forEach(t),cNo=i(J),bb=n(J,"LI",{});var q9e=s(bb);ige=n(q9e,"STRONG",{});var Xct=s(ige);fNo=r(Xct,"canine"),Xct.forEach(t),mNo=r(q9e," \u2014 "),FO=n(q9e,"A",{href:!0});var zct=s(FO);gNo=r(zct,"CanineForTokenClassification"),zct.forEach(t),hNo=r(q9e," (Canine model)"),q9e.forEach(t),pNo=i(J),vb=n(J,"LI",{});var N9e=s(vb);dge=n(N9e,"STRONG",{});var Wct=s(dge);_No=r(Wct,"convbert"),Wct.forEach(t),uNo=r(N9e," \u2014 "),TO=n(N9e,"A",{href:!0});var Qct=s(TO);bNo=r(Qct,"ConvBertForTokenClassification"),Qct.forEach(t),vNo=r(N9e," (ConvBERT model)"),N9e.forEach(t),FNo=i(J),Fb=n(J,"LI",{});var j9e=s(Fb);cge=n(j9e,"STRONG",{});var Hct=s(cge);TNo=r(Hct,"data2vec-text"),Hct.forEach(t),MNo=r(j9e," \u2014 "),MO=n(j9e,"A",{href:!0});var Uct=s(MO);ENo=r(Uct,"Data2VecTextForTokenClassification"),Uct.forEach(t),CNo=r(j9e," (Data2VecText model)"),j9e.forEach(t),wNo=i(J),Tb=n(J,"LI",{});var D9e=s(Tb);fge=n(D9e,"STRONG",{});var Jct=s(fge);ANo=r(Jct,"deberta"),Jct.forEach(t),yNo=r(D9e," \u2014 "),EO=n(D9e,"A",{href:!0});var Yct=s(EO);LNo=r(Yct,"DebertaForTokenClassification"),Yct.forEach(t),xNo=r(D9e," (DeBERTa model)"),D9e.forEach(t),$No=i(J),Mb=n(J,"LI",{});var G9e=s(Mb);mge=n(G9e,"STRONG",{});var Kct=s(mge);kNo=r(Kct,"deberta-v2"),Kct.forEach(t),SNo=r(G9e," \u2014 "),CO=n(G9e,"A",{href:!0});var Zct=s(CO);RNo=r(Zct,"DebertaV2ForTokenClassification"),Zct.forEach(t),PNo=r(G9e," (DeBERTa-v2 model)"),G9e.forEach(t),BNo=i(J),Eb=n(J,"LI",{});var O9e=s(Eb);gge=n(O9e,"STRONG",{});var eft=s(gge);INo=r(eft,"distilbert"),eft.forEach(t),qNo=r(O9e," \u2014 "),wO=n(O9e,"A",{href:!0});var oft=s(wO);NNo=r(oft,"DistilBertForTokenClassification"),oft.forEach(t),jNo=r(O9e," (DistilBERT model)"),O9e.forEach(t),DNo=i(J),Cb=n(J,"LI",{});var V9e=s(Cb);hge=n(V9e,"STRONG",{});var rft=s(hge);GNo=r(rft,"electra"),rft.forEach(t),ONo=r(V9e," \u2014 "),AO=n(V9e,"A",{href:!0});var tft=s(AO);VNo=r(tft,"ElectraForTokenClassification"),tft.forEach(t),XNo=r(V9e," (ELECTRA model)"),V9e.forEach(t),zNo=i(J),wb=n(J,"LI",{});var X9e=s(wb);pge=n(X9e,"STRONG",{});var aft=s(pge);WNo=r(aft,"flaubert"),aft.forEach(t),QNo=r(X9e," \u2014 "),yO=n(X9e,"A",{href:!0});var nft=s(yO);HNo=r(nft,"FlaubertForTokenClassification"),nft.forEach(t),UNo=r(X9e," (FlauBERT model)"),X9e.forEach(t),JNo=i(J),Ab=n(J,"LI",{});var z9e=s(Ab);_ge=n(z9e,"STRONG",{});var sft=s(_ge);YNo=r(sft,"fnet"),sft.forEach(t),KNo=r(z9e," \u2014 "),LO=n(z9e,"A",{href:!0});var lft=s(LO);ZNo=r(lft,"FNetForTokenClassification"),lft.forEach(t),ejo=r(z9e," (FNet model)"),z9e.forEach(t),ojo=i(J),yb=n(J,"LI",{});var W9e=s(yb);uge=n(W9e,"STRONG",{});var ift=s(uge);rjo=r(ift,"funnel"),ift.forEach(t),tjo=r(W9e," \u2014 "),xO=n(W9e,"A",{href:!0});var dft=s(xO);ajo=r(dft,"FunnelForTokenClassification"),dft.forEach(t),njo=r(W9e," (Funnel Transformer model)"),W9e.forEach(t),sjo=i(J),Lb=n(J,"LI",{});var Q9e=s(Lb);bge=n(Q9e,"STRONG",{});var cft=s(bge);ljo=r(cft,"gpt2"),cft.forEach(t),ijo=r(Q9e," \u2014 "),$O=n(Q9e,"A",{href:!0});var fft=s($O);djo=r(fft,"GPT2ForTokenClassification"),fft.forEach(t),cjo=r(Q9e," (OpenAI GPT-2 model)"),Q9e.forEach(t),fjo=i(J),xb=n(J,"LI",{});var H9e=s(xb);vge=n(H9e,"STRONG",{});var mft=s(vge);mjo=r(mft,"ibert"),mft.forEach(t),gjo=r(H9e," \u2014 "),kO=n(H9e,"A",{href:!0});var gft=s(kO);hjo=r(gft,"IBertForTokenClassification"),gft.forEach(t),pjo=r(H9e," (I-BERT model)"),H9e.forEach(t),_jo=i(J),$b=n(J,"LI",{});var U9e=s($b);Fge=n(U9e,"STRONG",{});var hft=s(Fge);ujo=r(hft,"layoutlm"),hft.forEach(t),bjo=r(U9e," \u2014 "),SO=n(U9e,"A",{href:!0});var pft=s(SO);vjo=r(pft,"LayoutLMForTokenClassification"),pft.forEach(t),Fjo=r(U9e," (LayoutLM model)"),U9e.forEach(t),Tjo=i(J),kb=n(J,"LI",{});var J9e=s(kb);Tge=n(J9e,"STRONG",{});var _ft=s(Tge);Mjo=r(_ft,"layoutlmv2"),_ft.forEach(t),Ejo=r(J9e," \u2014 "),RO=n(J9e,"A",{href:!0});var uft=s(RO);Cjo=r(uft,"LayoutLMv2ForTokenClassification"),uft.forEach(t),wjo=r(J9e," (LayoutLMv2 model)"),J9e.forEach(t),Ajo=i(J),Sb=n(J,"LI",{});var Y9e=s(Sb);Mge=n(Y9e,"STRONG",{});var bft=s(Mge);yjo=r(bft,"longformer"),bft.forEach(t),Ljo=r(Y9e," \u2014 "),PO=n(Y9e,"A",{href:!0});var vft=s(PO);xjo=r(vft,"LongformerForTokenClassification"),vft.forEach(t),$jo=r(Y9e," (Longformer model)"),Y9e.forEach(t),kjo=i(J),Rb=n(J,"LI",{});var K9e=s(Rb);Ege=n(K9e,"STRONG",{});var Fft=s(Ege);Sjo=r(Fft,"megatron-bert"),Fft.forEach(t),Rjo=r(K9e," \u2014 "),BO=n(K9e,"A",{href:!0});var Tft=s(BO);Pjo=r(Tft,"MegatronBertForTokenClassification"),Tft.forEach(t),Bjo=r(K9e," (MegatronBert model)"),K9e.forEach(t),Ijo=i(J),Pb=n(J,"LI",{});var Z9e=s(Pb);Cge=n(Z9e,"STRONG",{});var Mft=s(Cge);qjo=r(Mft,"mobilebert"),Mft.forEach(t),Njo=r(Z9e," \u2014 "),IO=n(Z9e,"A",{href:!0});var Eft=s(IO);jjo=r(Eft,"MobileBertForTokenClassification"),Eft.forEach(t),Djo=r(Z9e," (MobileBERT model)"),Z9e.forEach(t),Gjo=i(J),Bb=n(J,"LI",{});var exe=s(Bb);wge=n(exe,"STRONG",{});var Cft=s(wge);Ojo=r(Cft,"mpnet"),Cft.forEach(t),Vjo=r(exe," \u2014 "),qO=n(exe,"A",{href:!0});var wft=s(qO);Xjo=r(wft,"MPNetForTokenClassification"),wft.forEach(t),zjo=r(exe," (MPNet model)"),exe.forEach(t),Wjo=i(J),Ib=n(J,"LI",{});var oxe=s(Ib);Age=n(oxe,"STRONG",{});var Aft=s(Age);Qjo=r(Aft,"nystromformer"),Aft.forEach(t),Hjo=r(oxe," \u2014 "),NO=n(oxe,"A",{href:!0});var yft=s(NO);Ujo=r(yft,"NystromformerForTokenClassification"),yft.forEach(t),Jjo=r(oxe," (Nystromformer model)"),oxe.forEach(t),Yjo=i(J),qb=n(J,"LI",{});var rxe=s(qb);yge=n(rxe,"STRONG",{});var Lft=s(yge);Kjo=r(Lft,"qdqbert"),Lft.forEach(t),Zjo=r(rxe," \u2014 "),jO=n(rxe,"A",{href:!0});var xft=s(jO);eDo=r(xft,"QDQBertForTokenClassification"),xft.forEach(t),oDo=r(rxe," (QDQBert model)"),rxe.forEach(t),rDo=i(J),Nb=n(J,"LI",{});var txe=s(Nb);Lge=n(txe,"STRONG",{});var $ft=s(Lge);tDo=r($ft,"rembert"),$ft.forEach(t),aDo=r(txe," \u2014 "),DO=n(txe,"A",{href:!0});var kft=s(DO);nDo=r(kft,"RemBertForTokenClassification"),kft.forEach(t),sDo=r(txe," (RemBERT model)"),txe.forEach(t),lDo=i(J),jb=n(J,"LI",{});var axe=s(jb);xge=n(axe,"STRONG",{});var Sft=s(xge);iDo=r(Sft,"roberta"),Sft.forEach(t),dDo=r(axe," \u2014 "),GO=n(axe,"A",{href:!0});var Rft=s(GO);cDo=r(Rft,"RobertaForTokenClassification"),Rft.forEach(t),fDo=r(axe," (RoBERTa model)"),axe.forEach(t),mDo=i(J),Db=n(J,"LI",{});var nxe=s(Db);$ge=n(nxe,"STRONG",{});var Pft=s($ge);gDo=r(Pft,"roformer"),Pft.forEach(t),hDo=r(nxe," \u2014 "),OO=n(nxe,"A",{href:!0});var Bft=s(OO);pDo=r(Bft,"RoFormerForTokenClassification"),Bft.forEach(t),_Do=r(nxe," (RoFormer model)"),nxe.forEach(t),uDo=i(J),Gb=n(J,"LI",{});var sxe=s(Gb);kge=n(sxe,"STRONG",{});var Ift=s(kge);bDo=r(Ift,"squeezebert"),Ift.forEach(t),vDo=r(sxe," \u2014 "),VO=n(sxe,"A",{href:!0});var qft=s(VO);FDo=r(qft,"SqueezeBertForTokenClassification"),qft.forEach(t),TDo=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),MDo=i(J),Ob=n(J,"LI",{});var lxe=s(Ob);Sge=n(lxe,"STRONG",{});var Nft=s(Sge);EDo=r(Nft,"xlm"),Nft.forEach(t),CDo=r(lxe," \u2014 "),XO=n(lxe,"A",{href:!0});var jft=s(XO);wDo=r(jft,"XLMForTokenClassification"),jft.forEach(t),ADo=r(lxe," (XLM model)"),lxe.forEach(t),yDo=i(J),Vb=n(J,"LI",{});var ixe=s(Vb);Rge=n(ixe,"STRONG",{});var Dft=s(Rge);LDo=r(Dft,"xlm-roberta"),Dft.forEach(t),xDo=r(ixe," \u2014 "),zO=n(ixe,"A",{href:!0});var Gft=s(zO);$Do=r(Gft,"XLMRobertaForTokenClassification"),Gft.forEach(t),kDo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),SDo=i(J),Xb=n(J,"LI",{});var dxe=s(Xb);Pge=n(dxe,"STRONG",{});var Oft=s(Pge);RDo=r(Oft,"xlm-roberta-xl"),Oft.forEach(t),PDo=r(dxe," \u2014 "),WO=n(dxe,"A",{href:!0});var Vft=s(WO);BDo=r(Vft,"XLMRobertaXLForTokenClassification"),Vft.forEach(t),IDo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),qDo=i(J),zb=n(J,"LI",{});var cxe=s(zb);Bge=n(cxe,"STRONG",{});var Xft=s(Bge);NDo=r(Xft,"xlnet"),Xft.forEach(t),jDo=r(cxe," \u2014 "),QO=n(cxe,"A",{href:!0});var zft=s(QO);DDo=r(zft,"XLNetForTokenClassification"),zft.forEach(t),GDo=r(cxe," (XLNet model)"),cxe.forEach(t),ODo=i(J),Wb=n(J,"LI",{});var fxe=s(Wb);Ige=n(fxe,"STRONG",{});var Wft=s(Ige);VDo=r(Wft,"yoso"),Wft.forEach(t),XDo=r(fxe," \u2014 "),HO=n(fxe,"A",{href:!0});var Qft=s(HO);zDo=r(Qft,"YosoForTokenClassification"),Qft.forEach(t),WDo=r(fxe," (YOSO model)"),fxe.forEach(t),J.forEach(t),QDo=i(da),Qb=n(da,"P",{});var mxe=s(Qb);HDo=r(mxe,"The model is set in evaluation mode by default using "),qge=n(mxe,"CODE",{});var Hft=s(qge);UDo=r(Hft,"model.eval()"),Hft.forEach(t),JDo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(mxe,"CODE",{});var Uft=s(Nge);YDo=r(Uft,"model.train()"),Uft.forEach(t),mxe.forEach(t),KDo=i(da),T(Hb.$$.fragment,da),da.forEach(t),Us.forEach(t),$qe=i(f),Yi=n(f,"H2",{class:!0});var Pje=s(Yi);Ub=n(Pje,"A",{id:!0,class:!0,href:!0});var Jft=s(Ub);jge=n(Jft,"SPAN",{});var Yft=s(jge);T(ky.$$.fragment,Yft),Yft.forEach(t),Jft.forEach(t),ZDo=i(Pje),Dge=n(Pje,"SPAN",{});var Kft=s(Dge);eGo=r(Kft,"AutoModelForQuestionAnswering"),Kft.forEach(t),Pje.forEach(t),kqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Sy.$$.fragment,Js),oGo=i(Js),Ki=n(Js,"P",{});var aZ=s(Ki);rGo=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UO=n(aZ,"A",{href:!0});var Zft=s(UO);tGo=r(Zft,"from_pretrained()"),Zft.forEach(t),aGo=r(aZ," class method or the "),JO=n(aZ,"A",{href:!0});var emt=s(JO);nGo=r(emt,"from_config()"),emt.forEach(t),sGo=r(aZ,` class
method.`),aZ.forEach(t),lGo=i(Js),Ry=n(Js,"P",{});var Bje=s(Ry);iGo=r(Bje,"This class cannot be instantiated directly using "),Gge=n(Bje,"CODE",{});var omt=s(Gge);dGo=r(omt,"__init__()"),omt.forEach(t),cGo=r(Bje," (throws an error)."),Bje.forEach(t),fGo=i(Js),mt=n(Js,"DIV",{class:!0});var I0=s(mt);T(Py.$$.fragment,I0),mGo=i(I0),Oge=n(I0,"P",{});var rmt=s(Oge);gGo=r(rmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rmt.forEach(t),hGo=i(I0),Zi=n(I0,"P",{});var nZ=s(Zi);pGo=r(nZ,`Note:
Loading a model from its configuration file does `),Vge=n(nZ,"STRONG",{});var tmt=s(Vge);_Go=r(tmt,"not"),tmt.forEach(t),uGo=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(nZ,"A",{href:!0});var amt=s(YO);bGo=r(amt,"from_pretrained()"),amt.forEach(t),vGo=r(nZ," to load the model weights."),nZ.forEach(t),FGo=i(I0),T(Jb.$$.fragment,I0),I0.forEach(t),TGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(By.$$.fragment,ca),MGo=i(ca),Xge=n(ca,"P",{});var nmt=s(Xge);EGo=r(nmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nmt.forEach(t),CGo=i(ca),qa=n(ca,"P",{});var q0=s(qa);wGo=r(q0,"The model class to instantiate is selected based on the "),zge=n(q0,"CODE",{});var smt=s(zge);AGo=r(smt,"model_type"),smt.forEach(t),yGo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Wge=n(q0,"CODE",{});var lmt=s(Wge);LGo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),xGo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(q0,"CODE",{});var imt=s(Qge);$Go=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),kGo=r(q0,":"),q0.forEach(t),SGo=i(ca),V=n(ca,"UL",{});var X=s(V);Yb=n(X,"LI",{});var gxe=s(Yb);Hge=n(gxe,"STRONG",{});var dmt=s(Hge);RGo=r(dmt,"albert"),dmt.forEach(t),PGo=r(gxe," \u2014 "),KO=n(gxe,"A",{href:!0});var cmt=s(KO);BGo=r(cmt,"AlbertForQuestionAnswering"),cmt.forEach(t),IGo=r(gxe," (ALBERT model)"),gxe.forEach(t),qGo=i(X),Kb=n(X,"LI",{});var hxe=s(Kb);Uge=n(hxe,"STRONG",{});var fmt=s(Uge);NGo=r(fmt,"bart"),fmt.forEach(t),jGo=r(hxe," \u2014 "),ZO=n(hxe,"A",{href:!0});var mmt=s(ZO);DGo=r(mmt,"BartForQuestionAnswering"),mmt.forEach(t),GGo=r(hxe," (BART model)"),hxe.forEach(t),OGo=i(X),Zb=n(X,"LI",{});var pxe=s(Zb);Jge=n(pxe,"STRONG",{});var gmt=s(Jge);VGo=r(gmt,"bert"),gmt.forEach(t),XGo=r(pxe," \u2014 "),eV=n(pxe,"A",{href:!0});var hmt=s(eV);zGo=r(hmt,"BertForQuestionAnswering"),hmt.forEach(t),WGo=r(pxe," (BERT model)"),pxe.forEach(t),QGo=i(X),ev=n(X,"LI",{});var _xe=s(ev);Yge=n(_xe,"STRONG",{});var pmt=s(Yge);HGo=r(pmt,"big_bird"),pmt.forEach(t),UGo=r(_xe," \u2014 "),oV=n(_xe,"A",{href:!0});var _mt=s(oV);JGo=r(_mt,"BigBirdForQuestionAnswering"),_mt.forEach(t),YGo=r(_xe," (BigBird model)"),_xe.forEach(t),KGo=i(X),ov=n(X,"LI",{});var uxe=s(ov);Kge=n(uxe,"STRONG",{});var umt=s(Kge);ZGo=r(umt,"bigbird_pegasus"),umt.forEach(t),eOo=r(uxe," \u2014 "),rV=n(uxe,"A",{href:!0});var bmt=s(rV);oOo=r(bmt,"BigBirdPegasusForQuestionAnswering"),bmt.forEach(t),rOo=r(uxe," (BigBirdPegasus model)"),uxe.forEach(t),tOo=i(X),rv=n(X,"LI",{});var bxe=s(rv);Zge=n(bxe,"STRONG",{});var vmt=s(Zge);aOo=r(vmt,"camembert"),vmt.forEach(t),nOo=r(bxe," \u2014 "),tV=n(bxe,"A",{href:!0});var Fmt=s(tV);sOo=r(Fmt,"CamembertForQuestionAnswering"),Fmt.forEach(t),lOo=r(bxe," (CamemBERT model)"),bxe.forEach(t),iOo=i(X),tv=n(X,"LI",{});var vxe=s(tv);ehe=n(vxe,"STRONG",{});var Tmt=s(ehe);dOo=r(Tmt,"canine"),Tmt.forEach(t),cOo=r(vxe," \u2014 "),aV=n(vxe,"A",{href:!0});var Mmt=s(aV);fOo=r(Mmt,"CanineForQuestionAnswering"),Mmt.forEach(t),mOo=r(vxe," (Canine model)"),vxe.forEach(t),gOo=i(X),av=n(X,"LI",{});var Fxe=s(av);ohe=n(Fxe,"STRONG",{});var Emt=s(ohe);hOo=r(Emt,"convbert"),Emt.forEach(t),pOo=r(Fxe," \u2014 "),nV=n(Fxe,"A",{href:!0});var Cmt=s(nV);_Oo=r(Cmt,"ConvBertForQuestionAnswering"),Cmt.forEach(t),uOo=r(Fxe," (ConvBERT model)"),Fxe.forEach(t),bOo=i(X),nv=n(X,"LI",{});var Txe=s(nv);rhe=n(Txe,"STRONG",{});var wmt=s(rhe);vOo=r(wmt,"data2vec-text"),wmt.forEach(t),FOo=r(Txe," \u2014 "),sV=n(Txe,"A",{href:!0});var Amt=s(sV);TOo=r(Amt,"Data2VecTextForQuestionAnswering"),Amt.forEach(t),MOo=r(Txe," (Data2VecText model)"),Txe.forEach(t),EOo=i(X),sv=n(X,"LI",{});var Mxe=s(sv);the=n(Mxe,"STRONG",{});var ymt=s(the);COo=r(ymt,"deberta"),ymt.forEach(t),wOo=r(Mxe," \u2014 "),lV=n(Mxe,"A",{href:!0});var Lmt=s(lV);AOo=r(Lmt,"DebertaForQuestionAnswering"),Lmt.forEach(t),yOo=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),LOo=i(X),lv=n(X,"LI",{});var Exe=s(lv);ahe=n(Exe,"STRONG",{});var xmt=s(ahe);xOo=r(xmt,"deberta-v2"),xmt.forEach(t),$Oo=r(Exe," \u2014 "),iV=n(Exe,"A",{href:!0});var $mt=s(iV);kOo=r($mt,"DebertaV2ForQuestionAnswering"),$mt.forEach(t),SOo=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),ROo=i(X),iv=n(X,"LI",{});var Cxe=s(iv);nhe=n(Cxe,"STRONG",{});var kmt=s(nhe);POo=r(kmt,"distilbert"),kmt.forEach(t),BOo=r(Cxe," \u2014 "),dV=n(Cxe,"A",{href:!0});var Smt=s(dV);IOo=r(Smt,"DistilBertForQuestionAnswering"),Smt.forEach(t),qOo=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),NOo=i(X),dv=n(X,"LI",{});var wxe=s(dv);she=n(wxe,"STRONG",{});var Rmt=s(she);jOo=r(Rmt,"electra"),Rmt.forEach(t),DOo=r(wxe," \u2014 "),cV=n(wxe,"A",{href:!0});var Pmt=s(cV);GOo=r(Pmt,"ElectraForQuestionAnswering"),Pmt.forEach(t),OOo=r(wxe," (ELECTRA model)"),wxe.forEach(t),VOo=i(X),cv=n(X,"LI",{});var Axe=s(cv);lhe=n(Axe,"STRONG",{});var Bmt=s(lhe);XOo=r(Bmt,"flaubert"),Bmt.forEach(t),zOo=r(Axe," \u2014 "),fV=n(Axe,"A",{href:!0});var Imt=s(fV);WOo=r(Imt,"FlaubertForQuestionAnsweringSimple"),Imt.forEach(t),QOo=r(Axe," (FlauBERT model)"),Axe.forEach(t),HOo=i(X),fv=n(X,"LI",{});var yxe=s(fv);ihe=n(yxe,"STRONG",{});var qmt=s(ihe);UOo=r(qmt,"fnet"),qmt.forEach(t),JOo=r(yxe," \u2014 "),mV=n(yxe,"A",{href:!0});var Nmt=s(mV);YOo=r(Nmt,"FNetForQuestionAnswering"),Nmt.forEach(t),KOo=r(yxe," (FNet model)"),yxe.forEach(t),ZOo=i(X),mv=n(X,"LI",{});var Lxe=s(mv);dhe=n(Lxe,"STRONG",{});var jmt=s(dhe);eVo=r(jmt,"funnel"),jmt.forEach(t),oVo=r(Lxe," \u2014 "),gV=n(Lxe,"A",{href:!0});var Dmt=s(gV);rVo=r(Dmt,"FunnelForQuestionAnswering"),Dmt.forEach(t),tVo=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),aVo=i(X),gv=n(X,"LI",{});var xxe=s(gv);che=n(xxe,"STRONG",{});var Gmt=s(che);nVo=r(Gmt,"gptj"),Gmt.forEach(t),sVo=r(xxe," \u2014 "),hV=n(xxe,"A",{href:!0});var Omt=s(hV);lVo=r(Omt,"GPTJForQuestionAnswering"),Omt.forEach(t),iVo=r(xxe," (GPT-J model)"),xxe.forEach(t),dVo=i(X),hv=n(X,"LI",{});var $xe=s(hv);fhe=n($xe,"STRONG",{});var Vmt=s(fhe);cVo=r(Vmt,"ibert"),Vmt.forEach(t),fVo=r($xe," \u2014 "),pV=n($xe,"A",{href:!0});var Xmt=s(pV);mVo=r(Xmt,"IBertForQuestionAnswering"),Xmt.forEach(t),gVo=r($xe," (I-BERT model)"),$xe.forEach(t),hVo=i(X),pv=n(X,"LI",{});var kxe=s(pv);mhe=n(kxe,"STRONG",{});var zmt=s(mhe);pVo=r(zmt,"layoutlmv2"),zmt.forEach(t),_Vo=r(kxe," \u2014 "),_V=n(kxe,"A",{href:!0});var Wmt=s(_V);uVo=r(Wmt,"LayoutLMv2ForQuestionAnswering"),Wmt.forEach(t),bVo=r(kxe," (LayoutLMv2 model)"),kxe.forEach(t),vVo=i(X),_v=n(X,"LI",{});var Sxe=s(_v);ghe=n(Sxe,"STRONG",{});var Qmt=s(ghe);FVo=r(Qmt,"led"),Qmt.forEach(t),TVo=r(Sxe," \u2014 "),uV=n(Sxe,"A",{href:!0});var Hmt=s(uV);MVo=r(Hmt,"LEDForQuestionAnswering"),Hmt.forEach(t),EVo=r(Sxe," (LED model)"),Sxe.forEach(t),CVo=i(X),uv=n(X,"LI",{});var Rxe=s(uv);hhe=n(Rxe,"STRONG",{});var Umt=s(hhe);wVo=r(Umt,"longformer"),Umt.forEach(t),AVo=r(Rxe," \u2014 "),bV=n(Rxe,"A",{href:!0});var Jmt=s(bV);yVo=r(Jmt,"LongformerForQuestionAnswering"),Jmt.forEach(t),LVo=r(Rxe," (Longformer model)"),Rxe.forEach(t),xVo=i(X),bv=n(X,"LI",{});var Pxe=s(bv);phe=n(Pxe,"STRONG",{});var Ymt=s(phe);$Vo=r(Ymt,"lxmert"),Ymt.forEach(t),kVo=r(Pxe," \u2014 "),vV=n(Pxe,"A",{href:!0});var Kmt=s(vV);SVo=r(Kmt,"LxmertForQuestionAnswering"),Kmt.forEach(t),RVo=r(Pxe," (LXMERT model)"),Pxe.forEach(t),PVo=i(X),vv=n(X,"LI",{});var Bxe=s(vv);_he=n(Bxe,"STRONG",{});var Zmt=s(_he);BVo=r(Zmt,"mbart"),Zmt.forEach(t),IVo=r(Bxe," \u2014 "),FV=n(Bxe,"A",{href:!0});var egt=s(FV);qVo=r(egt,"MBartForQuestionAnswering"),egt.forEach(t),NVo=r(Bxe," (mBART model)"),Bxe.forEach(t),jVo=i(X),Fv=n(X,"LI",{});var Ixe=s(Fv);uhe=n(Ixe,"STRONG",{});var ogt=s(uhe);DVo=r(ogt,"megatron-bert"),ogt.forEach(t),GVo=r(Ixe," \u2014 "),TV=n(Ixe,"A",{href:!0});var rgt=s(TV);OVo=r(rgt,"MegatronBertForQuestionAnswering"),rgt.forEach(t),VVo=r(Ixe," (MegatronBert model)"),Ixe.forEach(t),XVo=i(X),Tv=n(X,"LI",{});var qxe=s(Tv);bhe=n(qxe,"STRONG",{});var tgt=s(bhe);zVo=r(tgt,"mobilebert"),tgt.forEach(t),WVo=r(qxe," \u2014 "),MV=n(qxe,"A",{href:!0});var agt=s(MV);QVo=r(agt,"MobileBertForQuestionAnswering"),agt.forEach(t),HVo=r(qxe," (MobileBERT model)"),qxe.forEach(t),UVo=i(X),Mv=n(X,"LI",{});var Nxe=s(Mv);vhe=n(Nxe,"STRONG",{});var ngt=s(vhe);JVo=r(ngt,"mpnet"),ngt.forEach(t),YVo=r(Nxe," \u2014 "),EV=n(Nxe,"A",{href:!0});var sgt=s(EV);KVo=r(sgt,"MPNetForQuestionAnswering"),sgt.forEach(t),ZVo=r(Nxe," (MPNet model)"),Nxe.forEach(t),eXo=i(X),Ev=n(X,"LI",{});var jxe=s(Ev);Fhe=n(jxe,"STRONG",{});var lgt=s(Fhe);oXo=r(lgt,"nystromformer"),lgt.forEach(t),rXo=r(jxe," \u2014 "),CV=n(jxe,"A",{href:!0});var igt=s(CV);tXo=r(igt,"NystromformerForQuestionAnswering"),igt.forEach(t),aXo=r(jxe," (Nystromformer model)"),jxe.forEach(t),nXo=i(X),Cv=n(X,"LI",{});var Dxe=s(Cv);The=n(Dxe,"STRONG",{});var dgt=s(The);sXo=r(dgt,"qdqbert"),dgt.forEach(t),lXo=r(Dxe," \u2014 "),wV=n(Dxe,"A",{href:!0});var cgt=s(wV);iXo=r(cgt,"QDQBertForQuestionAnswering"),cgt.forEach(t),dXo=r(Dxe," (QDQBert model)"),Dxe.forEach(t),cXo=i(X),wv=n(X,"LI",{});var Gxe=s(wv);Mhe=n(Gxe,"STRONG",{});var fgt=s(Mhe);fXo=r(fgt,"reformer"),fgt.forEach(t),mXo=r(Gxe," \u2014 "),AV=n(Gxe,"A",{href:!0});var mgt=s(AV);gXo=r(mgt,"ReformerForQuestionAnswering"),mgt.forEach(t),hXo=r(Gxe," (Reformer model)"),Gxe.forEach(t),pXo=i(X),Av=n(X,"LI",{});var Oxe=s(Av);Ehe=n(Oxe,"STRONG",{});var ggt=s(Ehe);_Xo=r(ggt,"rembert"),ggt.forEach(t),uXo=r(Oxe," \u2014 "),yV=n(Oxe,"A",{href:!0});var hgt=s(yV);bXo=r(hgt,"RemBertForQuestionAnswering"),hgt.forEach(t),vXo=r(Oxe," (RemBERT model)"),Oxe.forEach(t),FXo=i(X),yv=n(X,"LI",{});var Vxe=s(yv);Che=n(Vxe,"STRONG",{});var pgt=s(Che);TXo=r(pgt,"roberta"),pgt.forEach(t),MXo=r(Vxe," \u2014 "),LV=n(Vxe,"A",{href:!0});var _gt=s(LV);EXo=r(_gt,"RobertaForQuestionAnswering"),_gt.forEach(t),CXo=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),wXo=i(X),Lv=n(X,"LI",{});var Xxe=s(Lv);whe=n(Xxe,"STRONG",{});var ugt=s(whe);AXo=r(ugt,"roformer"),ugt.forEach(t),yXo=r(Xxe," \u2014 "),xV=n(Xxe,"A",{href:!0});var bgt=s(xV);LXo=r(bgt,"RoFormerForQuestionAnswering"),bgt.forEach(t),xXo=r(Xxe," (RoFormer model)"),Xxe.forEach(t),$Xo=i(X),xv=n(X,"LI",{});var zxe=s(xv);Ahe=n(zxe,"STRONG",{});var vgt=s(Ahe);kXo=r(vgt,"splinter"),vgt.forEach(t),SXo=r(zxe," \u2014 "),$V=n(zxe,"A",{href:!0});var Fgt=s($V);RXo=r(Fgt,"SplinterForQuestionAnswering"),Fgt.forEach(t),PXo=r(zxe," (Splinter model)"),zxe.forEach(t),BXo=i(X),$v=n(X,"LI",{});var Wxe=s($v);yhe=n(Wxe,"STRONG",{});var Tgt=s(yhe);IXo=r(Tgt,"squeezebert"),Tgt.forEach(t),qXo=r(Wxe," \u2014 "),kV=n(Wxe,"A",{href:!0});var Mgt=s(kV);NXo=r(Mgt,"SqueezeBertForQuestionAnswering"),Mgt.forEach(t),jXo=r(Wxe," (SqueezeBERT model)"),Wxe.forEach(t),DXo=i(X),kv=n(X,"LI",{});var Qxe=s(kv);Lhe=n(Qxe,"STRONG",{});var Egt=s(Lhe);GXo=r(Egt,"xlm"),Egt.forEach(t),OXo=r(Qxe," \u2014 "),SV=n(Qxe,"A",{href:!0});var Cgt=s(SV);VXo=r(Cgt,"XLMForQuestionAnsweringSimple"),Cgt.forEach(t),XXo=r(Qxe," (XLM model)"),Qxe.forEach(t),zXo=i(X),Sv=n(X,"LI",{});var Hxe=s(Sv);xhe=n(Hxe,"STRONG",{});var wgt=s(xhe);WXo=r(wgt,"xlm-roberta"),wgt.forEach(t),QXo=r(Hxe," \u2014 "),RV=n(Hxe,"A",{href:!0});var Agt=s(RV);HXo=r(Agt,"XLMRobertaForQuestionAnswering"),Agt.forEach(t),UXo=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),JXo=i(X),Rv=n(X,"LI",{});var Uxe=s(Rv);$he=n(Uxe,"STRONG",{});var ygt=s($he);YXo=r(ygt,"xlm-roberta-xl"),ygt.forEach(t),KXo=r(Uxe," \u2014 "),PV=n(Uxe,"A",{href:!0});var Lgt=s(PV);ZXo=r(Lgt,"XLMRobertaXLForQuestionAnswering"),Lgt.forEach(t),ezo=r(Uxe," (XLM-RoBERTa-XL model)"),Uxe.forEach(t),ozo=i(X),Pv=n(X,"LI",{});var Jxe=s(Pv);khe=n(Jxe,"STRONG",{});var xgt=s(khe);rzo=r(xgt,"xlnet"),xgt.forEach(t),tzo=r(Jxe," \u2014 "),BV=n(Jxe,"A",{href:!0});var $gt=s(BV);azo=r($gt,"XLNetForQuestionAnsweringSimple"),$gt.forEach(t),nzo=r(Jxe," (XLNet model)"),Jxe.forEach(t),szo=i(X),Bv=n(X,"LI",{});var Yxe=s(Bv);She=n(Yxe,"STRONG",{});var kgt=s(She);lzo=r(kgt,"yoso"),kgt.forEach(t),izo=r(Yxe," \u2014 "),IV=n(Yxe,"A",{href:!0});var Sgt=s(IV);dzo=r(Sgt,"YosoForQuestionAnswering"),Sgt.forEach(t),czo=r(Yxe," (YOSO model)"),Yxe.forEach(t),X.forEach(t),fzo=i(ca),Iv=n(ca,"P",{});var Kxe=s(Iv);mzo=r(Kxe,"The model is set in evaluation mode by default using "),Rhe=n(Kxe,"CODE",{});var Rgt=s(Rhe);gzo=r(Rgt,"model.eval()"),Rgt.forEach(t),hzo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(Kxe,"CODE",{});var Pgt=s(Phe);pzo=r(Pgt,"model.train()"),Pgt.forEach(t),Kxe.forEach(t),_zo=i(ca),T(qv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Sqe=i(f),ed=n(f,"H2",{class:!0});var Ije=s(ed);Nv=n(Ije,"A",{id:!0,class:!0,href:!0});var Bgt=s(Nv);Bhe=n(Bgt,"SPAN",{});var Igt=s(Bhe);T(Iy.$$.fragment,Igt),Igt.forEach(t),Bgt.forEach(t),uzo=i(Ije),Ihe=n(Ije,"SPAN",{});var qgt=s(Ihe);bzo=r(qgt,"AutoModelForTableQuestionAnswering"),qgt.forEach(t),Ije.forEach(t),Rqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(qy.$$.fragment,Ys),vzo=i(Ys),od=n(Ys,"P",{});var sZ=s(od);Fzo=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qV=n(sZ,"A",{href:!0});var Ngt=s(qV);Tzo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),Mzo=r(sZ," class method or the "),NV=n(sZ,"A",{href:!0});var jgt=s(NV);Ezo=r(jgt,"from_config()"),jgt.forEach(t),Czo=r(sZ,` class
method.`),sZ.forEach(t),wzo=i(Ys),Ny=n(Ys,"P",{});var qje=s(Ny);Azo=r(qje,"This class cannot be instantiated directly using "),qhe=n(qje,"CODE",{});var Dgt=s(qhe);yzo=r(Dgt,"__init__()"),Dgt.forEach(t),Lzo=r(qje," (throws an error)."),qje.forEach(t),xzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var N0=s(gt);T(jy.$$.fragment,N0),$zo=i(N0),Nhe=n(N0,"P",{});var Ggt=s(Nhe);kzo=r(Ggt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ggt.forEach(t),Szo=i(N0),rd=n(N0,"P",{});var lZ=s(rd);Rzo=r(lZ,`Note:
Loading a model from its configuration file does `),jhe=n(lZ,"STRONG",{});var Ogt=s(jhe);Pzo=r(Ogt,"not"),Ogt.forEach(t),Bzo=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(lZ,"A",{href:!0});var Vgt=s(jV);Izo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),qzo=r(lZ," to load the model weights."),lZ.forEach(t),Nzo=i(N0),T(jv.$$.fragment,N0),N0.forEach(t),jzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Dy.$$.fragment,fa),Dzo=i(fa),Dhe=n(fa,"P",{});var Xgt=s(Dhe);Gzo=r(Xgt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xgt.forEach(t),Ozo=i(fa),Na=n(fa,"P",{});var j0=s(Na);Vzo=r(j0,"The model class to instantiate is selected based on the "),Ghe=n(j0,"CODE",{});var zgt=s(Ghe);Xzo=r(zgt,"model_type"),zgt.forEach(t),zzo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(j0,"CODE",{});var Wgt=s(Ohe);Wzo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),Qzo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(j0,"CODE",{});var Qgt=s(Vhe);Hzo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),Uzo=r(j0,":"),j0.forEach(t),Jzo=i(fa),Xhe=n(fa,"UL",{});var Hgt=s(Xhe);Dv=n(Hgt,"LI",{});var Zxe=s(Dv);zhe=n(Zxe,"STRONG",{});var Ugt=s(zhe);Yzo=r(Ugt,"tapas"),Ugt.forEach(t),Kzo=r(Zxe," \u2014 "),DV=n(Zxe,"A",{href:!0});var Jgt=s(DV);Zzo=r(Jgt,"TapasForQuestionAnswering"),Jgt.forEach(t),eWo=r(Zxe," (TAPAS model)"),Zxe.forEach(t),Hgt.forEach(t),oWo=i(fa),Gv=n(fa,"P",{});var e$e=s(Gv);rWo=r(e$e,"The model is set in evaluation mode by default using "),Whe=n(e$e,"CODE",{});var Ygt=s(Whe);tWo=r(Ygt,"model.eval()"),Ygt.forEach(t),aWo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(e$e,"CODE",{});var Kgt=s(Qhe);nWo=r(Kgt,"model.train()"),Kgt.forEach(t),e$e.forEach(t),sWo=i(fa),T(Ov.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Pqe=i(f),td=n(f,"H2",{class:!0});var Nje=s(td);Vv=n(Nje,"A",{id:!0,class:!0,href:!0});var Zgt=s(Vv);Hhe=n(Zgt,"SPAN",{});var eht=s(Hhe);T(Gy.$$.fragment,eht),eht.forEach(t),Zgt.forEach(t),lWo=i(Nje),Uhe=n(Nje,"SPAN",{});var oht=s(Uhe);iWo=r(oht,"AutoModelForImageClassification"),oht.forEach(t),Nje.forEach(t),Bqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Oy.$$.fragment,Ks),dWo=i(Ks),ad=n(Ks,"P",{});var iZ=s(ad);cWo=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GV=n(iZ,"A",{href:!0});var rht=s(GV);fWo=r(rht,"from_pretrained()"),rht.forEach(t),mWo=r(iZ," class method or the "),OV=n(iZ,"A",{href:!0});var tht=s(OV);gWo=r(tht,"from_config()"),tht.forEach(t),hWo=r(iZ,` class
method.`),iZ.forEach(t),pWo=i(Ks),Vy=n(Ks,"P",{});var jje=s(Vy);_Wo=r(jje,"This class cannot be instantiated directly using "),Jhe=n(jje,"CODE",{});var aht=s(Jhe);uWo=r(aht,"__init__()"),aht.forEach(t),bWo=r(jje," (throws an error)."),jje.forEach(t),vWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var D0=s(ht);T(Xy.$$.fragment,D0),FWo=i(D0),Yhe=n(D0,"P",{});var nht=s(Yhe);TWo=r(nht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nht.forEach(t),MWo=i(D0),nd=n(D0,"P",{});var dZ=s(nd);EWo=r(dZ,`Note:
Loading a model from its configuration file does `),Khe=n(dZ,"STRONG",{});var sht=s(Khe);CWo=r(sht,"not"),sht.forEach(t),wWo=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(dZ,"A",{href:!0});var lht=s(VV);AWo=r(lht,"from_pretrained()"),lht.forEach(t),yWo=r(dZ," to load the model weights."),dZ.forEach(t),LWo=i(D0),T(Xv.$$.fragment,D0),D0.forEach(t),xWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(zy.$$.fragment,ma),$Wo=i(ma),Zhe=n(ma,"P",{});var iht=s(Zhe);kWo=r(iht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iht.forEach(t),SWo=i(ma),ja=n(ma,"P",{});var G0=s(ja);RWo=r(G0,"The model class to instantiate is selected based on the "),epe=n(G0,"CODE",{});var dht=s(epe);PWo=r(dht,"model_type"),dht.forEach(t),BWo=r(G0,` property of the config object (either
passed as an argument or loaded from `),ope=n(G0,"CODE",{});var cht=s(ope);IWo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),qWo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(G0,"CODE",{});var fht=s(rpe);NWo=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),jWo=r(G0,":"),G0.forEach(t),DWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);zv=n(Ee,"LI",{});var o$e=s(zv);tpe=n(o$e,"STRONG",{});var mht=s(tpe);GWo=r(mht,"beit"),mht.forEach(t),OWo=r(o$e," \u2014 "),XV=n(o$e,"A",{href:!0});var ght=s(XV);VWo=r(ght,"BeitForImageClassification"),ght.forEach(t),XWo=r(o$e," (BEiT model)"),o$e.forEach(t),zWo=i(Ee),Wv=n(Ee,"LI",{});var r$e=s(Wv);ape=n(r$e,"STRONG",{});var hht=s(ape);WWo=r(hht,"convnext"),hht.forEach(t),QWo=r(r$e," \u2014 "),zV=n(r$e,"A",{href:!0});var pht=s(zV);HWo=r(pht,"ConvNextForImageClassification"),pht.forEach(t),UWo=r(r$e," (ConvNext model)"),r$e.forEach(t),JWo=i(Ee),Qv=n(Ee,"LI",{});var t$e=s(Qv);npe=n(t$e,"STRONG",{});var _ht=s(npe);YWo=r(_ht,"data2vec-vision"),_ht.forEach(t),KWo=r(t$e," \u2014 "),WV=n(t$e,"A",{href:!0});var uht=s(WV);ZWo=r(uht,"Data2VecVisionForImageClassification"),uht.forEach(t),eQo=r(t$e," (Data2VecVision model)"),t$e.forEach(t),oQo=i(Ee),Ps=n(Ee,"LI",{});var x$=s(Ps);spe=n(x$,"STRONG",{});var bht=s(spe);rQo=r(bht,"deit"),bht.forEach(t),tQo=r(x$," \u2014 "),QV=n(x$,"A",{href:!0});var vht=s(QV);aQo=r(vht,"DeiTForImageClassification"),vht.forEach(t),nQo=r(x$," or "),HV=n(x$,"A",{href:!0});var Fht=s(HV);sQo=r(Fht,"DeiTForImageClassificationWithTeacher"),Fht.forEach(t),lQo=r(x$," (DeiT model)"),x$.forEach(t),iQo=i(Ee),Hv=n(Ee,"LI",{});var a$e=s(Hv);lpe=n(a$e,"STRONG",{});var Tht=s(lpe);dQo=r(Tht,"imagegpt"),Tht.forEach(t),cQo=r(a$e," \u2014 "),UV=n(a$e,"A",{href:!0});var Mht=s(UV);fQo=r(Mht,"ImageGPTForImageClassification"),Mht.forEach(t),mQo=r(a$e," (ImageGPT model)"),a$e.forEach(t),gQo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);ipe=n(gf,"STRONG",{});var Eht=s(ipe);hQo=r(Eht,"perceiver"),Eht.forEach(t),pQo=r(gf," \u2014 "),JV=n(gf,"A",{href:!0});var Cht=s(JV);_Qo=r(Cht,"PerceiverForImageClassificationLearned"),Cht.forEach(t),uQo=r(gf," or "),YV=n(gf,"A",{href:!0});var wht=s(YV);bQo=r(wht,"PerceiverForImageClassificationFourier"),wht.forEach(t),vQo=r(gf," or "),KV=n(gf,"A",{href:!0});var Aht=s(KV);FQo=r(Aht,"PerceiverForImageClassificationConvProcessing"),Aht.forEach(t),TQo=r(gf," (Perceiver model)"),gf.forEach(t),MQo=i(Ee),Uv=n(Ee,"LI",{});var n$e=s(Uv);dpe=n(n$e,"STRONG",{});var yht=s(dpe);EQo=r(yht,"poolformer"),yht.forEach(t),CQo=r(n$e," \u2014 "),ZV=n(n$e,"A",{href:!0});var Lht=s(ZV);wQo=r(Lht,"PoolFormerForImageClassification"),Lht.forEach(t),AQo=r(n$e," (PoolFormer model)"),n$e.forEach(t),yQo=i(Ee),Jv=n(Ee,"LI",{});var s$e=s(Jv);cpe=n(s$e,"STRONG",{});var xht=s(cpe);LQo=r(xht,"regnet"),xht.forEach(t),xQo=r(s$e," \u2014 "),eX=n(s$e,"A",{href:!0});var $ht=s(eX);$Qo=r($ht,"RegNetForImageClassification"),$ht.forEach(t),kQo=r(s$e," (RegNet model)"),s$e.forEach(t),SQo=i(Ee),Yv=n(Ee,"LI",{});var l$e=s(Yv);fpe=n(l$e,"STRONG",{});var kht=s(fpe);RQo=r(kht,"resnet"),kht.forEach(t),PQo=r(l$e," \u2014 "),oX=n(l$e,"A",{href:!0});var Sht=s(oX);BQo=r(Sht,"ResNetForImageClassification"),Sht.forEach(t),IQo=r(l$e," (ResNet model)"),l$e.forEach(t),qQo=i(Ee),Kv=n(Ee,"LI",{});var i$e=s(Kv);mpe=n(i$e,"STRONG",{});var Rht=s(mpe);NQo=r(Rht,"segformer"),Rht.forEach(t),jQo=r(i$e," \u2014 "),rX=n(i$e,"A",{href:!0});var Pht=s(rX);DQo=r(Pht,"SegformerForImageClassification"),Pht.forEach(t),GQo=r(i$e," (SegFormer model)"),i$e.forEach(t),OQo=i(Ee),Zv=n(Ee,"LI",{});var d$e=s(Zv);gpe=n(d$e,"STRONG",{});var Bht=s(gpe);VQo=r(Bht,"swin"),Bht.forEach(t),XQo=r(d$e," \u2014 "),tX=n(d$e,"A",{href:!0});var Iht=s(tX);zQo=r(Iht,"SwinForImageClassification"),Iht.forEach(t),WQo=r(d$e," (Swin model)"),d$e.forEach(t),QQo=i(Ee),eF=n(Ee,"LI",{});var c$e=s(eF);hpe=n(c$e,"STRONG",{});var qht=s(hpe);HQo=r(qht,"van"),qht.forEach(t),UQo=r(c$e," \u2014 "),aX=n(c$e,"A",{href:!0});var Nht=s(aX);JQo=r(Nht,"VanForImageClassification"),Nht.forEach(t),YQo=r(c$e," (VAN model)"),c$e.forEach(t),KQo=i(Ee),oF=n(Ee,"LI",{});var f$e=s(oF);ppe=n(f$e,"STRONG",{});var jht=s(ppe);ZQo=r(jht,"vit"),jht.forEach(t),eHo=r(f$e," \u2014 "),nX=n(f$e,"A",{href:!0});var Dht=s(nX);oHo=r(Dht,"ViTForImageClassification"),Dht.forEach(t),rHo=r(f$e," (ViT model)"),f$e.forEach(t),Ee.forEach(t),tHo=i(ma),rF=n(ma,"P",{});var m$e=s(rF);aHo=r(m$e,"The model is set in evaluation mode by default using "),_pe=n(m$e,"CODE",{});var Ght=s(_pe);nHo=r(Ght,"model.eval()"),Ght.forEach(t),sHo=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(m$e,"CODE",{});var Oht=s(upe);lHo=r(Oht,"model.train()"),Oht.forEach(t),m$e.forEach(t),iHo=i(ma),T(tF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Iqe=i(f),sd=n(f,"H2",{class:!0});var Dje=s(sd);aF=n(Dje,"A",{id:!0,class:!0,href:!0});var Vht=s(aF);bpe=n(Vht,"SPAN",{});var Xht=s(bpe);T(Wy.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),dHo=i(Dje),vpe=n(Dje,"SPAN",{});var zht=s(vpe);cHo=r(zht,"AutoModelForVision2Seq"),zht.forEach(t),Dje.forEach(t),qqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Qy.$$.fragment,Zs),fHo=i(Zs),ld=n(Zs,"P",{});var cZ=s(ld);mHo=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sX=n(cZ,"A",{href:!0});var Wht=s(sX);gHo=r(Wht,"from_pretrained()"),Wht.forEach(t),hHo=r(cZ," class method or the "),lX=n(cZ,"A",{href:!0});var Qht=s(lX);pHo=r(Qht,"from_config()"),Qht.forEach(t),_Ho=r(cZ,` class
method.`),cZ.forEach(t),uHo=i(Zs),Hy=n(Zs,"P",{});var Gje=s(Hy);bHo=r(Gje,"This class cannot be instantiated directly using "),Fpe=n(Gje,"CODE",{});var Hht=s(Fpe);vHo=r(Hht,"__init__()"),Hht.forEach(t),FHo=r(Gje," (throws an error)."),Gje.forEach(t),THo=i(Zs),_t=n(Zs,"DIV",{class:!0});var O0=s(_t);T(Uy.$$.fragment,O0),MHo=i(O0),Tpe=n(O0,"P",{});var Uht=s(Tpe);EHo=r(Uht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Uht.forEach(t),CHo=i(O0),id=n(O0,"P",{});var fZ=s(id);wHo=r(fZ,`Note:
Loading a model from its configuration file does `),Mpe=n(fZ,"STRONG",{});var Jht=s(Mpe);AHo=r(Jht,"not"),Jht.forEach(t),yHo=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(fZ,"A",{href:!0});var Yht=s(iX);LHo=r(Yht,"from_pretrained()"),Yht.forEach(t),xHo=r(fZ," to load the model weights."),fZ.forEach(t),$Ho=i(O0),T(nF.$$.fragment,O0),O0.forEach(t),kHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Jy.$$.fragment,ga),SHo=i(ga),Epe=n(ga,"P",{});var Kht=s(Epe);RHo=r(Kht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kht.forEach(t),PHo=i(ga),Da=n(ga,"P",{});var V0=s(Da);BHo=r(V0,"The model class to instantiate is selected based on the "),Cpe=n(V0,"CODE",{});var Zht=s(Cpe);IHo=r(Zht,"model_type"),Zht.forEach(t),qHo=r(V0,` property of the config object (either
passed as an argument or loaded from `),wpe=n(V0,"CODE",{});var ept=s(wpe);NHo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),jHo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(V0,"CODE",{});var opt=s(Ape);DHo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),GHo=r(V0,":"),V0.forEach(t),OHo=i(ga),ype=n(ga,"UL",{});var rpt=s(ype);sF=n(rpt,"LI",{});var g$e=s(sF);Lpe=n(g$e,"STRONG",{});var tpt=s(Lpe);VHo=r(tpt,"vision-encoder-decoder"),tpt.forEach(t),XHo=r(g$e," \u2014 "),dX=n(g$e,"A",{href:!0});var apt=s(dX);zHo=r(apt,"VisionEncoderDecoderModel"),apt.forEach(t),WHo=r(g$e," (Vision Encoder decoder model)"),g$e.forEach(t),rpt.forEach(t),QHo=i(ga),lF=n(ga,"P",{});var h$e=s(lF);HHo=r(h$e,"The model is set in evaluation mode by default using "),xpe=n(h$e,"CODE",{});var npt=s(xpe);UHo=r(npt,"model.eval()"),npt.forEach(t),JHo=r(h$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(h$e,"CODE",{});var spt=s($pe);YHo=r(spt,"model.train()"),spt.forEach(t),h$e.forEach(t),KHo=i(ga),T(iF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Nqe=i(f),dd=n(f,"H2",{class:!0});var Oje=s(dd);dF=n(Oje,"A",{id:!0,class:!0,href:!0});var lpt=s(dF);kpe=n(lpt,"SPAN",{});var ipt=s(kpe);T(Yy.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),ZHo=i(Oje),Spe=n(Oje,"SPAN",{});var dpt=s(Spe);eUo=r(dpt,"AutoModelForAudioClassification"),dpt.forEach(t),Oje.forEach(t),jqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Ky.$$.fragment,el),oUo=i(el),cd=n(el,"P",{});var mZ=s(cd);rUo=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),cX=n(mZ,"A",{href:!0});var cpt=s(cX);tUo=r(cpt,"from_pretrained()"),cpt.forEach(t),aUo=r(mZ," class method or the "),fX=n(mZ,"A",{href:!0});var fpt=s(fX);nUo=r(fpt,"from_config()"),fpt.forEach(t),sUo=r(mZ,` class
method.`),mZ.forEach(t),lUo=i(el),Zy=n(el,"P",{});var Vje=s(Zy);iUo=r(Vje,"This class cannot be instantiated directly using "),Rpe=n(Vje,"CODE",{});var mpt=s(Rpe);dUo=r(mpt,"__init__()"),mpt.forEach(t),cUo=r(Vje," (throws an error)."),Vje.forEach(t),fUo=i(el),ut=n(el,"DIV",{class:!0});var X0=s(ut);T(eL.$$.fragment,X0),mUo=i(X0),Ppe=n(X0,"P",{});var gpt=s(Ppe);gUo=r(gpt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gpt.forEach(t),hUo=i(X0),fd=n(X0,"P",{});var gZ=s(fd);pUo=r(gZ,`Note:
Loading a model from its configuration file does `),Bpe=n(gZ,"STRONG",{});var hpt=s(Bpe);_Uo=r(hpt,"not"),hpt.forEach(t),uUo=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(gZ,"A",{href:!0});var ppt=s(mX);bUo=r(ppt,"from_pretrained()"),ppt.forEach(t),vUo=r(gZ," to load the model weights."),gZ.forEach(t),FUo=i(X0),T(cF.$$.fragment,X0),X0.forEach(t),TUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(oL.$$.fragment,ha),MUo=i(ha),Ipe=n(ha,"P",{});var _pt=s(Ipe);EUo=r(_pt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_pt.forEach(t),CUo=i(ha),Ga=n(ha,"P",{});var z0=s(Ga);wUo=r(z0,"The model class to instantiate is selected based on the "),qpe=n(z0,"CODE",{});var upt=s(qpe);AUo=r(upt,"model_type"),upt.forEach(t),yUo=r(z0,` property of the config object (either
passed as an argument or loaded from `),Npe=n(z0,"CODE",{});var bpt=s(Npe);LUo=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),xUo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(z0,"CODE",{});var vpt=s(jpe);$Uo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),kUo=r(z0,":"),z0.forEach(t),SUo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);fF=n(Ve,"LI",{});var p$e=s(fF);Dpe=n(p$e,"STRONG",{});var Fpt=s(Dpe);RUo=r(Fpt,"data2vec-audio"),Fpt.forEach(t),PUo=r(p$e," \u2014 "),gX=n(p$e,"A",{href:!0});var Tpt=s(gX);BUo=r(Tpt,"Data2VecAudioForSequenceClassification"),Tpt.forEach(t),IUo=r(p$e," (Data2VecAudio model)"),p$e.forEach(t),qUo=i(Ve),mF=n(Ve,"LI",{});var _$e=s(mF);Gpe=n(_$e,"STRONG",{});var Mpt=s(Gpe);NUo=r(Mpt,"hubert"),Mpt.forEach(t),jUo=r(_$e," \u2014 "),hX=n(_$e,"A",{href:!0});var Ept=s(hX);DUo=r(Ept,"HubertForSequenceClassification"),Ept.forEach(t),GUo=r(_$e," (Hubert model)"),_$e.forEach(t),OUo=i(Ve),gF=n(Ve,"LI",{});var u$e=s(gF);Ope=n(u$e,"STRONG",{});var Cpt=s(Ope);VUo=r(Cpt,"sew"),Cpt.forEach(t),XUo=r(u$e," \u2014 "),pX=n(u$e,"A",{href:!0});var wpt=s(pX);zUo=r(wpt,"SEWForSequenceClassification"),wpt.forEach(t),WUo=r(u$e," (SEW model)"),u$e.forEach(t),QUo=i(Ve),hF=n(Ve,"LI",{});var b$e=s(hF);Vpe=n(b$e,"STRONG",{});var Apt=s(Vpe);HUo=r(Apt,"sew-d"),Apt.forEach(t),UUo=r(b$e," \u2014 "),_X=n(b$e,"A",{href:!0});var ypt=s(_X);JUo=r(ypt,"SEWDForSequenceClassification"),ypt.forEach(t),YUo=r(b$e," (SEW-D model)"),b$e.forEach(t),KUo=i(Ve),pF=n(Ve,"LI",{});var v$e=s(pF);Xpe=n(v$e,"STRONG",{});var Lpt=s(Xpe);ZUo=r(Lpt,"unispeech"),Lpt.forEach(t),eJo=r(v$e," \u2014 "),uX=n(v$e,"A",{href:!0});var xpt=s(uX);oJo=r(xpt,"UniSpeechForSequenceClassification"),xpt.forEach(t),rJo=r(v$e," (UniSpeech model)"),v$e.forEach(t),tJo=i(Ve),_F=n(Ve,"LI",{});var F$e=s(_F);zpe=n(F$e,"STRONG",{});var $pt=s(zpe);aJo=r($pt,"unispeech-sat"),$pt.forEach(t),nJo=r(F$e," \u2014 "),bX=n(F$e,"A",{href:!0});var kpt=s(bX);sJo=r(kpt,"UniSpeechSatForSequenceClassification"),kpt.forEach(t),lJo=r(F$e," (UniSpeechSat model)"),F$e.forEach(t),iJo=i(Ve),uF=n(Ve,"LI",{});var T$e=s(uF);Wpe=n(T$e,"STRONG",{});var Spt=s(Wpe);dJo=r(Spt,"wav2vec2"),Spt.forEach(t),cJo=r(T$e," \u2014 "),vX=n(T$e,"A",{href:!0});var Rpt=s(vX);fJo=r(Rpt,"Wav2Vec2ForSequenceClassification"),Rpt.forEach(t),mJo=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),gJo=i(Ve),bF=n(Ve,"LI",{});var M$e=s(bF);Qpe=n(M$e,"STRONG",{});var Ppt=s(Qpe);hJo=r(Ppt,"wav2vec2-conformer"),Ppt.forEach(t),pJo=r(M$e," \u2014 "),FX=n(M$e,"A",{href:!0});var Bpt=s(FX);_Jo=r(Bpt,"Wav2Vec2ConformerForSequenceClassification"),Bpt.forEach(t),uJo=r(M$e," (Wav2Vec2-Conformer model)"),M$e.forEach(t),bJo=i(Ve),vF=n(Ve,"LI",{});var E$e=s(vF);Hpe=n(E$e,"STRONG",{});var Ipt=s(Hpe);vJo=r(Ipt,"wavlm"),Ipt.forEach(t),FJo=r(E$e," \u2014 "),TX=n(E$e,"A",{href:!0});var qpt=s(TX);TJo=r(qpt,"WavLMForSequenceClassification"),qpt.forEach(t),MJo=r(E$e," (WavLM model)"),E$e.forEach(t),Ve.forEach(t),EJo=i(ha),FF=n(ha,"P",{});var C$e=s(FF);CJo=r(C$e,"The model is set in evaluation mode by default using "),Upe=n(C$e,"CODE",{});var Npt=s(Upe);wJo=r(Npt,"model.eval()"),Npt.forEach(t),AJo=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(C$e,"CODE",{});var jpt=s(Jpe);yJo=r(jpt,"model.train()"),jpt.forEach(t),C$e.forEach(t),LJo=i(ha),T(TF.$$.fragment,ha),ha.forEach(t),el.forEach(t),Dqe=i(f),md=n(f,"H2",{class:!0});var Xje=s(md);MF=n(Xje,"A",{id:!0,class:!0,href:!0});var Dpt=s(MF);Ype=n(Dpt,"SPAN",{});var Gpt=s(Ype);T(rL.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),xJo=i(Xje),Kpe=n(Xje,"SPAN",{});var Opt=s(Kpe);$Jo=r(Opt,"AutoModelForAudioFrameClassification"),Opt.forEach(t),Xje.forEach(t),Gqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(tL.$$.fragment,ol),kJo=i(ol),gd=n(ol,"P",{});var hZ=s(gd);SJo=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MX=n(hZ,"A",{href:!0});var Vpt=s(MX);RJo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),PJo=r(hZ," class method or the "),EX=n(hZ,"A",{href:!0});var Xpt=s(EX);BJo=r(Xpt,"from_config()"),Xpt.forEach(t),IJo=r(hZ,` class
method.`),hZ.forEach(t),qJo=i(ol),aL=n(ol,"P",{});var zje=s(aL);NJo=r(zje,"This class cannot be instantiated directly using "),Zpe=n(zje,"CODE",{});var zpt=s(Zpe);jJo=r(zpt,"__init__()"),zpt.forEach(t),DJo=r(zje," (throws an error)."),zje.forEach(t),GJo=i(ol),bt=n(ol,"DIV",{class:!0});var W0=s(bt);T(nL.$$.fragment,W0),OJo=i(W0),e_e=n(W0,"P",{});var Wpt=s(e_e);VJo=r(Wpt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wpt.forEach(t),XJo=i(W0),hd=n(W0,"P",{});var pZ=s(hd);zJo=r(pZ,`Note:
Loading a model from its configuration file does `),o_e=n(pZ,"STRONG",{});var Qpt=s(o_e);WJo=r(Qpt,"not"),Qpt.forEach(t),QJo=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(pZ,"A",{href:!0});var Hpt=s(CX);HJo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),UJo=r(pZ," to load the model weights."),pZ.forEach(t),JJo=i(W0),T(EF.$$.fragment,W0),W0.forEach(t),YJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(sL.$$.fragment,pa),KJo=i(pa),r_e=n(pa,"P",{});var Upt=s(r_e);ZJo=r(Upt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Upt.forEach(t),eYo=i(pa),Oa=n(pa,"P",{});var Q0=s(Oa);oYo=r(Q0,"The model class to instantiate is selected based on the "),t_e=n(Q0,"CODE",{});var Jpt=s(t_e);rYo=r(Jpt,"model_type"),Jpt.forEach(t),tYo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),a_e=n(Q0,"CODE",{});var Ypt=s(a_e);aYo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),nYo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(Q0,"CODE",{});var Kpt=s(n_e);sYo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),lYo=r(Q0,":"),Q0.forEach(t),iYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);CF=n(rl,"LI",{});var w$e=s(CF);s_e=n(w$e,"STRONG",{});var Zpt=s(s_e);dYo=r(Zpt,"data2vec-audio"),Zpt.forEach(t),cYo=r(w$e," \u2014 "),wX=n(w$e,"A",{href:!0});var e_t=s(wX);fYo=r(e_t,"Data2VecAudioForAudioFrameClassification"),e_t.forEach(t),mYo=r(w$e," (Data2VecAudio model)"),w$e.forEach(t),gYo=i(rl),wF=n(rl,"LI",{});var A$e=s(wF);l_e=n(A$e,"STRONG",{});var o_t=s(l_e);hYo=r(o_t,"unispeech-sat"),o_t.forEach(t),pYo=r(A$e," \u2014 "),AX=n(A$e,"A",{href:!0});var r_t=s(AX);_Yo=r(r_t,"UniSpeechSatForAudioFrameClassification"),r_t.forEach(t),uYo=r(A$e," (UniSpeechSat model)"),A$e.forEach(t),bYo=i(rl),AF=n(rl,"LI",{});var y$e=s(AF);i_e=n(y$e,"STRONG",{});var t_t=s(i_e);vYo=r(t_t,"wav2vec2"),t_t.forEach(t),FYo=r(y$e," \u2014 "),yX=n(y$e,"A",{href:!0});var a_t=s(yX);TYo=r(a_t,"Wav2Vec2ForAudioFrameClassification"),a_t.forEach(t),MYo=r(y$e," (Wav2Vec2 model)"),y$e.forEach(t),EYo=i(rl),yF=n(rl,"LI",{});var L$e=s(yF);d_e=n(L$e,"STRONG",{});var n_t=s(d_e);CYo=r(n_t,"wav2vec2-conformer"),n_t.forEach(t),wYo=r(L$e," \u2014 "),LX=n(L$e,"A",{href:!0});var s_t=s(LX);AYo=r(s_t,"Wav2Vec2ConformerForAudioFrameClassification"),s_t.forEach(t),yYo=r(L$e," (Wav2Vec2-Conformer model)"),L$e.forEach(t),LYo=i(rl),LF=n(rl,"LI",{});var x$e=s(LF);c_e=n(x$e,"STRONG",{});var l_t=s(c_e);xYo=r(l_t,"wavlm"),l_t.forEach(t),$Yo=r(x$e," \u2014 "),xX=n(x$e,"A",{href:!0});var i_t=s(xX);kYo=r(i_t,"WavLMForAudioFrameClassification"),i_t.forEach(t),SYo=r(x$e," (WavLM model)"),x$e.forEach(t),rl.forEach(t),RYo=i(pa),xF=n(pa,"P",{});var $$e=s(xF);PYo=r($$e,"The model is set in evaluation mode by default using "),f_e=n($$e,"CODE",{});var d_t=s(f_e);BYo=r(d_t,"model.eval()"),d_t.forEach(t),IYo=r($$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n($$e,"CODE",{});var c_t=s(m_e);qYo=r(c_t,"model.train()"),c_t.forEach(t),$$e.forEach(t),NYo=i(pa),T($F.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Oqe=i(f),pd=n(f,"H2",{class:!0});var Wje=s(pd);kF=n(Wje,"A",{id:!0,class:!0,href:!0});var f_t=s(kF);g_e=n(f_t,"SPAN",{});var m_t=s(g_e);T(lL.$$.fragment,m_t),m_t.forEach(t),f_t.forEach(t),jYo=i(Wje),h_e=n(Wje,"SPAN",{});var g_t=s(h_e);DYo=r(g_t,"AutoModelForCTC"),g_t.forEach(t),Wje.forEach(t),Vqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(iL.$$.fragment,tl),GYo=i(tl),_d=n(tl,"P",{});var _Z=s(_d);OYo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$X=n(_Z,"A",{href:!0});var h_t=s($X);VYo=r(h_t,"from_pretrained()"),h_t.forEach(t),XYo=r(_Z," class method or the "),kX=n(_Z,"A",{href:!0});var p_t=s(kX);zYo=r(p_t,"from_config()"),p_t.forEach(t),WYo=r(_Z,` class
method.`),_Z.forEach(t),QYo=i(tl),dL=n(tl,"P",{});var Qje=s(dL);HYo=r(Qje,"This class cannot be instantiated directly using "),p_e=n(Qje,"CODE",{});var __t=s(p_e);UYo=r(__t,"__init__()"),__t.forEach(t),JYo=r(Qje," (throws an error)."),Qje.forEach(t),YYo=i(tl),vt=n(tl,"DIV",{class:!0});var H0=s(vt);T(cL.$$.fragment,H0),KYo=i(H0),__e=n(H0,"P",{});var u_t=s(__e);ZYo=r(u_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),u_t.forEach(t),eKo=i(H0),ud=n(H0,"P",{});var uZ=s(ud);oKo=r(uZ,`Note:
Loading a model from its configuration file does `),u_e=n(uZ,"STRONG",{});var b_t=s(u_e);rKo=r(b_t,"not"),b_t.forEach(t),tKo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(uZ,"A",{href:!0});var v_t=s(SX);aKo=r(v_t,"from_pretrained()"),v_t.forEach(t),nKo=r(uZ," to load the model weights."),uZ.forEach(t),sKo=i(H0),T(SF.$$.fragment,H0),H0.forEach(t),lKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(fL.$$.fragment,_a),iKo=i(_a),b_e=n(_a,"P",{});var F_t=s(b_e);dKo=r(F_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),F_t.forEach(t),cKo=i(_a),Va=n(_a,"P",{});var U0=s(Va);fKo=r(U0,"The model class to instantiate is selected based on the "),v_e=n(U0,"CODE",{});var T_t=s(v_e);mKo=r(T_t,"model_type"),T_t.forEach(t),gKo=r(U0,` property of the config object (either
passed as an argument or loaded from `),F_e=n(U0,"CODE",{});var M_t=s(F_e);hKo=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),pKo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(U0,"CODE",{});var E_t=s(T_e);_Ko=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),uKo=r(U0,":"),U0.forEach(t),bKo=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);RF=n(Xe,"LI",{});var k$e=s(RF);M_e=n(k$e,"STRONG",{});var C_t=s(M_e);vKo=r(C_t,"data2vec-audio"),C_t.forEach(t),FKo=r(k$e," \u2014 "),RX=n(k$e,"A",{href:!0});var w_t=s(RX);TKo=r(w_t,"Data2VecAudioForCTC"),w_t.forEach(t),MKo=r(k$e," (Data2VecAudio model)"),k$e.forEach(t),EKo=i(Xe),PF=n(Xe,"LI",{});var S$e=s(PF);E_e=n(S$e,"STRONG",{});var A_t=s(E_e);CKo=r(A_t,"hubert"),A_t.forEach(t),wKo=r(S$e," \u2014 "),PX=n(S$e,"A",{href:!0});var y_t=s(PX);AKo=r(y_t,"HubertForCTC"),y_t.forEach(t),yKo=r(S$e," (Hubert model)"),S$e.forEach(t),LKo=i(Xe),BF=n(Xe,"LI",{});var R$e=s(BF);C_e=n(R$e,"STRONG",{});var L_t=s(C_e);xKo=r(L_t,"sew"),L_t.forEach(t),$Ko=r(R$e," \u2014 "),BX=n(R$e,"A",{href:!0});var x_t=s(BX);kKo=r(x_t,"SEWForCTC"),x_t.forEach(t),SKo=r(R$e," (SEW model)"),R$e.forEach(t),RKo=i(Xe),IF=n(Xe,"LI",{});var P$e=s(IF);w_e=n(P$e,"STRONG",{});var $_t=s(w_e);PKo=r($_t,"sew-d"),$_t.forEach(t),BKo=r(P$e," \u2014 "),IX=n(P$e,"A",{href:!0});var k_t=s(IX);IKo=r(k_t,"SEWDForCTC"),k_t.forEach(t),qKo=r(P$e," (SEW-D model)"),P$e.forEach(t),NKo=i(Xe),qF=n(Xe,"LI",{});var B$e=s(qF);A_e=n(B$e,"STRONG",{});var S_t=s(A_e);jKo=r(S_t,"unispeech"),S_t.forEach(t),DKo=r(B$e," \u2014 "),qX=n(B$e,"A",{href:!0});var R_t=s(qX);GKo=r(R_t,"UniSpeechForCTC"),R_t.forEach(t),OKo=r(B$e," (UniSpeech model)"),B$e.forEach(t),VKo=i(Xe),NF=n(Xe,"LI",{});var I$e=s(NF);y_e=n(I$e,"STRONG",{});var P_t=s(y_e);XKo=r(P_t,"unispeech-sat"),P_t.forEach(t),zKo=r(I$e," \u2014 "),NX=n(I$e,"A",{href:!0});var B_t=s(NX);WKo=r(B_t,"UniSpeechSatForCTC"),B_t.forEach(t),QKo=r(I$e," (UniSpeechSat model)"),I$e.forEach(t),HKo=i(Xe),jF=n(Xe,"LI",{});var q$e=s(jF);L_e=n(q$e,"STRONG",{});var I_t=s(L_e);UKo=r(I_t,"wav2vec2"),I_t.forEach(t),JKo=r(q$e," \u2014 "),jX=n(q$e,"A",{href:!0});var q_t=s(jX);YKo=r(q_t,"Wav2Vec2ForCTC"),q_t.forEach(t),KKo=r(q$e," (Wav2Vec2 model)"),q$e.forEach(t),ZKo=i(Xe),DF=n(Xe,"LI",{});var N$e=s(DF);x_e=n(N$e,"STRONG",{});var N_t=s(x_e);eZo=r(N_t,"wav2vec2-conformer"),N_t.forEach(t),oZo=r(N$e," \u2014 "),DX=n(N$e,"A",{href:!0});var j_t=s(DX);rZo=r(j_t,"Wav2Vec2ConformerForCTC"),j_t.forEach(t),tZo=r(N$e," (Wav2Vec2-Conformer model)"),N$e.forEach(t),aZo=i(Xe),GF=n(Xe,"LI",{});var j$e=s(GF);$_e=n(j$e,"STRONG",{});var D_t=s($_e);nZo=r(D_t,"wavlm"),D_t.forEach(t),sZo=r(j$e," \u2014 "),GX=n(j$e,"A",{href:!0});var G_t=s(GX);lZo=r(G_t,"WavLMForCTC"),G_t.forEach(t),iZo=r(j$e," (WavLM model)"),j$e.forEach(t),Xe.forEach(t),dZo=i(_a),OF=n(_a,"P",{});var D$e=s(OF);cZo=r(D$e,"The model is set in evaluation mode by default using "),k_e=n(D$e,"CODE",{});var O_t=s(k_e);fZo=r(O_t,"model.eval()"),O_t.forEach(t),mZo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(D$e,"CODE",{});var V_t=s(S_e);gZo=r(V_t,"model.train()"),V_t.forEach(t),D$e.forEach(t),hZo=i(_a),T(VF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Xqe=i(f),bd=n(f,"H2",{class:!0});var Hje=s(bd);XF=n(Hje,"A",{id:!0,class:!0,href:!0});var X_t=s(XF);R_e=n(X_t,"SPAN",{});var z_t=s(R_e);T(mL.$$.fragment,z_t),z_t.forEach(t),X_t.forEach(t),pZo=i(Hje),P_e=n(Hje,"SPAN",{});var W_t=s(P_e);_Zo=r(W_t,"AutoModelForSpeechSeq2Seq"),W_t.forEach(t),Hje.forEach(t),zqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(gL.$$.fragment,al),uZo=i(al),vd=n(al,"P",{});var bZ=s(vd);bZo=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OX=n(bZ,"A",{href:!0});var Q_t=s(OX);vZo=r(Q_t,"from_pretrained()"),Q_t.forEach(t),FZo=r(bZ," class method or the "),VX=n(bZ,"A",{href:!0});var H_t=s(VX);TZo=r(H_t,"from_config()"),H_t.forEach(t),MZo=r(bZ,` class
method.`),bZ.forEach(t),EZo=i(al),hL=n(al,"P",{});var Uje=s(hL);CZo=r(Uje,"This class cannot be instantiated directly using "),B_e=n(Uje,"CODE",{});var U_t=s(B_e);wZo=r(U_t,"__init__()"),U_t.forEach(t),AZo=r(Uje," (throws an error)."),Uje.forEach(t),yZo=i(al),Ft=n(al,"DIV",{class:!0});var J0=s(Ft);T(pL.$$.fragment,J0),LZo=i(J0),I_e=n(J0,"P",{});var J_t=s(I_e);xZo=r(J_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J_t.forEach(t),$Zo=i(J0),Fd=n(J0,"P",{});var vZ=s(Fd);kZo=r(vZ,`Note:
Loading a model from its configuration file does `),q_e=n(vZ,"STRONG",{});var Y_t=s(q_e);SZo=r(Y_t,"not"),Y_t.forEach(t),RZo=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(vZ,"A",{href:!0});var K_t=s(XX);PZo=r(K_t,"from_pretrained()"),K_t.forEach(t),BZo=r(vZ," to load the model weights."),vZ.forEach(t),IZo=i(J0),T(zF.$$.fragment,J0),J0.forEach(t),qZo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(_L.$$.fragment,ua),NZo=i(ua),N_e=n(ua,"P",{});var Z_t=s(N_e);jZo=r(Z_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Z_t.forEach(t),DZo=i(ua),Xa=n(ua,"P",{});var Y0=s(Xa);GZo=r(Y0,"The model class to instantiate is selected based on the "),j_e=n(Y0,"CODE",{});var eut=s(j_e);OZo=r(eut,"model_type"),eut.forEach(t),VZo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),D_e=n(Y0,"CODE",{});var out=s(D_e);XZo=r(out,"pretrained_model_name_or_path"),out.forEach(t),zZo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(Y0,"CODE",{});var rut=s(G_e);WZo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),QZo=r(Y0,":"),Y0.forEach(t),HZo=i(ua),uL=n(ua,"UL",{});var Jje=s(uL);WF=n(Jje,"LI",{});var G$e=s(WF);O_e=n(G$e,"STRONG",{});var tut=s(O_e);UZo=r(tut,"speech-encoder-decoder"),tut.forEach(t),JZo=r(G$e," \u2014 "),zX=n(G$e,"A",{href:!0});var aut=s(zX);YZo=r(aut,"SpeechEncoderDecoderModel"),aut.forEach(t),KZo=r(G$e," (Speech Encoder decoder model)"),G$e.forEach(t),ZZo=i(Jje),QF=n(Jje,"LI",{});var O$e=s(QF);V_e=n(O$e,"STRONG",{});var nut=s(V_e);eer=r(nut,"speech_to_text"),nut.forEach(t),oer=r(O$e," \u2014 "),WX=n(O$e,"A",{href:!0});var sut=s(WX);rer=r(sut,"Speech2TextForConditionalGeneration"),sut.forEach(t),ter=r(O$e," (Speech2Text model)"),O$e.forEach(t),Jje.forEach(t),aer=i(ua),HF=n(ua,"P",{});var V$e=s(HF);ner=r(V$e,"The model is set in evaluation mode by default using "),X_e=n(V$e,"CODE",{});var lut=s(X_e);ser=r(lut,"model.eval()"),lut.forEach(t),ler=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(V$e,"CODE",{});var iut=s(z_e);ier=r(iut,"model.train()"),iut.forEach(t),V$e.forEach(t),der=i(ua),T(UF.$$.fragment,ua),ua.forEach(t),al.forEach(t),Wqe=i(f),Td=n(f,"H2",{class:!0});var Yje=s(Td);JF=n(Yje,"A",{id:!0,class:!0,href:!0});var dut=s(JF);W_e=n(dut,"SPAN",{});var cut=s(W_e);T(bL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),cer=i(Yje),Q_e=n(Yje,"SPAN",{});var fut=s(Q_e);fer=r(fut,"AutoModelForAudioXVector"),fut.forEach(t),Yje.forEach(t),Qqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(vL.$$.fragment,nl),mer=i(nl),Md=n(nl,"P",{});var FZ=s(Md);ger=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QX=n(FZ,"A",{href:!0});var mut=s(QX);her=r(mut,"from_pretrained()"),mut.forEach(t),per=r(FZ," class method or the "),HX=n(FZ,"A",{href:!0});var gut=s(HX);_er=r(gut,"from_config()"),gut.forEach(t),uer=r(FZ,` class
method.`),FZ.forEach(t),ber=i(nl),FL=n(nl,"P",{});var Kje=s(FL);ver=r(Kje,"This class cannot be instantiated directly using "),H_e=n(Kje,"CODE",{});var hut=s(H_e);Fer=r(hut,"__init__()"),hut.forEach(t),Ter=r(Kje," (throws an error)."),Kje.forEach(t),Mer=i(nl),Tt=n(nl,"DIV",{class:!0});var K0=s(Tt);T(TL.$$.fragment,K0),Eer=i(K0),U_e=n(K0,"P",{});var put=s(U_e);Cer=r(put,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),put.forEach(t),wer=i(K0),Ed=n(K0,"P",{});var TZ=s(Ed);Aer=r(TZ,`Note:
Loading a model from its configuration file does `),J_e=n(TZ,"STRONG",{});var _ut=s(J_e);yer=r(_ut,"not"),_ut.forEach(t),Ler=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(TZ,"A",{href:!0});var uut=s(UX);xer=r(uut,"from_pretrained()"),uut.forEach(t),$er=r(TZ," to load the model weights."),TZ.forEach(t),ker=i(K0),T(YF.$$.fragment,K0),K0.forEach(t),Ser=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(ML.$$.fragment,ba),Rer=i(ba),Y_e=n(ba,"P",{});var but=s(Y_e);Per=r(but,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),but.forEach(t),Ber=i(ba),za=n(ba,"P",{});var Z0=s(za);Ier=r(Z0,"The model class to instantiate is selected based on the "),K_e=n(Z0,"CODE",{});var vut=s(K_e);qer=r(vut,"model_type"),vut.forEach(t),Ner=r(Z0,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(Z0,"CODE",{});var Fut=s(Z_e);jer=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Der=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(Z0,"CODE",{});var Tut=s(eue);Ger=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Oer=r(Z0,":"),Z0.forEach(t),Ver=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);KF=n(sl,"LI",{});var X$e=s(KF);oue=n(X$e,"STRONG",{});var Mut=s(oue);Xer=r(Mut,"data2vec-audio"),Mut.forEach(t),zer=r(X$e," \u2014 "),JX=n(X$e,"A",{href:!0});var Eut=s(JX);Wer=r(Eut,"Data2VecAudioForXVector"),Eut.forEach(t),Qer=r(X$e," (Data2VecAudio model)"),X$e.forEach(t),Her=i(sl),ZF=n(sl,"LI",{});var z$e=s(ZF);rue=n(z$e,"STRONG",{});var Cut=s(rue);Uer=r(Cut,"unispeech-sat"),Cut.forEach(t),Jer=r(z$e," \u2014 "),YX=n(z$e,"A",{href:!0});var wut=s(YX);Yer=r(wut,"UniSpeechSatForXVector"),wut.forEach(t),Ker=r(z$e," (UniSpeechSat model)"),z$e.forEach(t),Zer=i(sl),eT=n(sl,"LI",{});var W$e=s(eT);tue=n(W$e,"STRONG",{});var Aut=s(tue);eor=r(Aut,"wav2vec2"),Aut.forEach(t),oor=r(W$e," \u2014 "),KX=n(W$e,"A",{href:!0});var yut=s(KX);ror=r(yut,"Wav2Vec2ForXVector"),yut.forEach(t),tor=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),aor=i(sl),oT=n(sl,"LI",{});var Q$e=s(oT);aue=n(Q$e,"STRONG",{});var Lut=s(aue);nor=r(Lut,"wav2vec2-conformer"),Lut.forEach(t),sor=r(Q$e," \u2014 "),ZX=n(Q$e,"A",{href:!0});var xut=s(ZX);lor=r(xut,"Wav2Vec2ConformerForXVector"),xut.forEach(t),ior=r(Q$e," (Wav2Vec2-Conformer model)"),Q$e.forEach(t),dor=i(sl),rT=n(sl,"LI",{});var H$e=s(rT);nue=n(H$e,"STRONG",{});var $ut=s(nue);cor=r($ut,"wavlm"),$ut.forEach(t),mor=r(H$e," \u2014 "),ez=n(H$e,"A",{href:!0});var kut=s(ez);gor=r(kut,"WavLMForXVector"),kut.forEach(t),hor=r(H$e," (WavLM model)"),H$e.forEach(t),sl.forEach(t),por=i(ba),tT=n(ba,"P",{});var U$e=s(tT);_or=r(U$e,"The model is set in evaluation mode by default using "),sue=n(U$e,"CODE",{});var Sut=s(sue);uor=r(Sut,"model.eval()"),Sut.forEach(t),bor=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(U$e,"CODE",{});var Rut=s(lue);vor=r(Rut,"model.train()"),Rut.forEach(t),U$e.forEach(t),For=i(ba),T(aT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Hqe=i(f),Cd=n(f,"H2",{class:!0});var Zje=s(Cd);nT=n(Zje,"A",{id:!0,class:!0,href:!0});var Put=s(nT);iue=n(Put,"SPAN",{});var But=s(iue);T(EL.$$.fragment,But),But.forEach(t),Put.forEach(t),Tor=i(Zje),due=n(Zje,"SPAN",{});var Iut=s(due);Mor=r(Iut,"AutoModelForMaskedImageModeling"),Iut.forEach(t),Zje.forEach(t),Uqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(CL.$$.fragment,ll),Eor=i(ll),wd=n(ll,"P",{});var MZ=s(wd);Cor=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oz=n(MZ,"A",{href:!0});var qut=s(oz);wor=r(qut,"from_pretrained()"),qut.forEach(t),Aor=r(MZ," class method or the "),rz=n(MZ,"A",{href:!0});var Nut=s(rz);yor=r(Nut,"from_config()"),Nut.forEach(t),Lor=r(MZ,` class
method.`),MZ.forEach(t),xor=i(ll),wL=n(ll,"P",{});var eDe=s(wL);$or=r(eDe,"This class cannot be instantiated directly using "),cue=n(eDe,"CODE",{});var jut=s(cue);kor=r(jut,"__init__()"),jut.forEach(t),Sor=r(eDe," (throws an error)."),eDe.forEach(t),Ror=i(ll),Mt=n(ll,"DIV",{class:!0});var eA=s(Mt);T(AL.$$.fragment,eA),Por=i(eA),fue=n(eA,"P",{});var Dut=s(fue);Bor=r(Dut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dut.forEach(t),Ior=i(eA),Ad=n(eA,"P",{});var EZ=s(Ad);qor=r(EZ,`Note:
Loading a model from its configuration file does `),mue=n(EZ,"STRONG",{});var Gut=s(mue);Nor=r(Gut,"not"),Gut.forEach(t),jor=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(EZ,"A",{href:!0});var Out=s(tz);Dor=r(Out,"from_pretrained()"),Out.forEach(t),Gor=r(EZ," to load the model weights."),EZ.forEach(t),Oor=i(eA),T(sT.$$.fragment,eA),eA.forEach(t),Vor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(yL.$$.fragment,va),Xor=i(va),gue=n(va,"P",{});var Vut=s(gue);zor=r(Vut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Vut.forEach(t),Wor=i(va),Wa=n(va,"P",{});var oA=s(Wa);Qor=r(oA,"The model class to instantiate is selected based on the "),hue=n(oA,"CODE",{});var Xut=s(hue);Hor=r(Xut,"model_type"),Xut.forEach(t),Uor=r(oA,` property of the config object (either
passed as an argument or loaded from `),pue=n(oA,"CODE",{});var zut=s(pue);Jor=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),Yor=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(oA,"CODE",{});var Wut=s(_ue);Kor=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),Zor=r(oA,":"),oA.forEach(t),err=i(va),yd=n(va,"UL",{});var CZ=s(yd);lT=n(CZ,"LI",{});var J$e=s(lT);uue=n(J$e,"STRONG",{});var Qut=s(uue);orr=r(Qut,"deit"),Qut.forEach(t),rrr=r(J$e," \u2014 "),az=n(J$e,"A",{href:!0});var Hut=s(az);trr=r(Hut,"DeiTForMaskedImageModeling"),Hut.forEach(t),arr=r(J$e," (DeiT model)"),J$e.forEach(t),nrr=i(CZ),iT=n(CZ,"LI",{});var Y$e=s(iT);bue=n(Y$e,"STRONG",{});var Uut=s(bue);srr=r(Uut,"swin"),Uut.forEach(t),lrr=r(Y$e," \u2014 "),nz=n(Y$e,"A",{href:!0});var Jut=s(nz);irr=r(Jut,"SwinForMaskedImageModeling"),Jut.forEach(t),drr=r(Y$e," (Swin model)"),Y$e.forEach(t),crr=i(CZ),dT=n(CZ,"LI",{});var K$e=s(dT);vue=n(K$e,"STRONG",{});var Yut=s(vue);frr=r(Yut,"vit"),Yut.forEach(t),mrr=r(K$e," \u2014 "),sz=n(K$e,"A",{href:!0});var Kut=s(sz);grr=r(Kut,"ViTForMaskedImageModeling"),Kut.forEach(t),hrr=r(K$e," (ViT model)"),K$e.forEach(t),CZ.forEach(t),prr=i(va),cT=n(va,"P",{});var Z$e=s(cT);_rr=r(Z$e,"The model is set in evaluation mode by default using "),Fue=n(Z$e,"CODE",{});var Zut=s(Fue);urr=r(Zut,"model.eval()"),Zut.forEach(t),brr=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(Z$e,"CODE",{});var e2t=s(Tue);vrr=r(e2t,"model.train()"),e2t.forEach(t),Z$e.forEach(t),Frr=i(va),T(fT.$$.fragment,va),va.forEach(t),ll.forEach(t),Jqe=i(f),Ld=n(f,"H2",{class:!0});var oDe=s(Ld);mT=n(oDe,"A",{id:!0,class:!0,href:!0});var o2t=s(mT);Mue=n(o2t,"SPAN",{});var r2t=s(Mue);T(LL.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),Trr=i(oDe),Eue=n(oDe,"SPAN",{});var t2t=s(Eue);Mrr=r(t2t,"AutoModelForObjectDetection"),t2t.forEach(t),oDe.forEach(t),Yqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(xL.$$.fragment,il),Err=i(il),xd=n(il,"P",{});var wZ=s(xd);Crr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lz=n(wZ,"A",{href:!0});var a2t=s(lz);wrr=r(a2t,"from_pretrained()"),a2t.forEach(t),Arr=r(wZ," class method or the "),iz=n(wZ,"A",{href:!0});var n2t=s(iz);yrr=r(n2t,"from_config()"),n2t.forEach(t),Lrr=r(wZ,` class
method.`),wZ.forEach(t),xrr=i(il),$L=n(il,"P",{});var rDe=s($L);$rr=r(rDe,"This class cannot be instantiated directly using "),Cue=n(rDe,"CODE",{});var s2t=s(Cue);krr=r(s2t,"__init__()"),s2t.forEach(t),Srr=r(rDe," (throws an error)."),rDe.forEach(t),Rrr=i(il),Et=n(il,"DIV",{class:!0});var rA=s(Et);T(kL.$$.fragment,rA),Prr=i(rA),wue=n(rA,"P",{});var l2t=s(wue);Brr=r(l2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l2t.forEach(t),Irr=i(rA),$d=n(rA,"P",{});var AZ=s($d);qrr=r(AZ,`Note:
Loading a model from its configuration file does `),Aue=n(AZ,"STRONG",{});var i2t=s(Aue);Nrr=r(i2t,"not"),i2t.forEach(t),jrr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(AZ,"A",{href:!0});var d2t=s(dz);Drr=r(d2t,"from_pretrained()"),d2t.forEach(t),Grr=r(AZ," to load the model weights."),AZ.forEach(t),Orr=i(rA),T(gT.$$.fragment,rA),rA.forEach(t),Vrr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(SL.$$.fragment,Fa),Xrr=i(Fa),yue=n(Fa,"P",{});var c2t=s(yue);zrr=r(c2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),c2t.forEach(t),Wrr=i(Fa),Qa=n(Fa,"P",{});var tA=s(Qa);Qrr=r(tA,"The model class to instantiate is selected based on the "),Lue=n(tA,"CODE",{});var f2t=s(Lue);Hrr=r(f2t,"model_type"),f2t.forEach(t),Urr=r(tA,` property of the config object (either
passed as an argument or loaded from `),xue=n(tA,"CODE",{});var m2t=s(xue);Jrr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Yrr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(tA,"CODE",{});var g2t=s($ue);Krr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),Zrr=r(tA,":"),tA.forEach(t),etr=i(Fa),RL=n(Fa,"UL",{});var tDe=s(RL);hT=n(tDe,"LI",{});var eke=s(hT);kue=n(eke,"STRONG",{});var h2t=s(kue);otr=r(h2t,"detr"),h2t.forEach(t),rtr=r(eke," \u2014 "),cz=n(eke,"A",{href:!0});var p2t=s(cz);ttr=r(p2t,"DetrForObjectDetection"),p2t.forEach(t),atr=r(eke," (DETR model)"),eke.forEach(t),ntr=i(tDe),pT=n(tDe,"LI",{});var oke=s(pT);Sue=n(oke,"STRONG",{});var _2t=s(Sue);str=r(_2t,"yolos"),_2t.forEach(t),ltr=r(oke," \u2014 "),fz=n(oke,"A",{href:!0});var u2t=s(fz);itr=r(u2t,"YolosForObjectDetection"),u2t.forEach(t),dtr=r(oke," (YOLOS model)"),oke.forEach(t),tDe.forEach(t),ctr=i(Fa),_T=n(Fa,"P",{});var rke=s(_T);ftr=r(rke,"The model is set in evaluation mode by default using "),Rue=n(rke,"CODE",{});var b2t=s(Rue);mtr=r(b2t,"model.eval()"),b2t.forEach(t),gtr=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(rke,"CODE",{});var v2t=s(Pue);htr=r(v2t,"model.train()"),v2t.forEach(t),rke.forEach(t),ptr=i(Fa),T(uT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Kqe=i(f),kd=n(f,"H2",{class:!0});var aDe=s(kd);bT=n(aDe,"A",{id:!0,class:!0,href:!0});var F2t=s(bT);Bue=n(F2t,"SPAN",{});var T2t=s(Bue);T(PL.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),_tr=i(aDe),Iue=n(aDe,"SPAN",{});var M2t=s(Iue);utr=r(M2t,"AutoModelForImageSegmentation"),M2t.forEach(t),aDe.forEach(t),Zqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(BL.$$.fragment,dl),btr=i(dl),Sd=n(dl,"P",{});var yZ=s(Sd);vtr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mz=n(yZ,"A",{href:!0});var E2t=s(mz);Ftr=r(E2t,"from_pretrained()"),E2t.forEach(t),Ttr=r(yZ," class method or the "),gz=n(yZ,"A",{href:!0});var C2t=s(gz);Mtr=r(C2t,"from_config()"),C2t.forEach(t),Etr=r(yZ,` class
method.`),yZ.forEach(t),Ctr=i(dl),IL=n(dl,"P",{});var nDe=s(IL);wtr=r(nDe,"This class cannot be instantiated directly using "),que=n(nDe,"CODE",{});var w2t=s(que);Atr=r(w2t,"__init__()"),w2t.forEach(t),ytr=r(nDe," (throws an error)."),nDe.forEach(t),Ltr=i(dl),Ct=n(dl,"DIV",{class:!0});var aA=s(Ct);T(qL.$$.fragment,aA),xtr=i(aA),Nue=n(aA,"P",{});var A2t=s(Nue);$tr=r(A2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),A2t.forEach(t),ktr=i(aA),Rd=n(aA,"P",{});var LZ=s(Rd);Str=r(LZ,`Note:
Loading a model from its configuration file does `),jue=n(LZ,"STRONG",{});var y2t=s(jue);Rtr=r(y2t,"not"),y2t.forEach(t),Ptr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(LZ,"A",{href:!0});var L2t=s(hz);Btr=r(L2t,"from_pretrained()"),L2t.forEach(t),Itr=r(LZ," to load the model weights."),LZ.forEach(t),qtr=i(aA),T(vT.$$.fragment,aA),aA.forEach(t),Ntr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(NL.$$.fragment,Ta),jtr=i(Ta),Due=n(Ta,"P",{});var x2t=s(Due);Dtr=r(x2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),x2t.forEach(t),Gtr=i(Ta),Ha=n(Ta,"P",{});var nA=s(Ha);Otr=r(nA,"The model class to instantiate is selected based on the "),Gue=n(nA,"CODE",{});var $2t=s(Gue);Vtr=r($2t,"model_type"),$2t.forEach(t),Xtr=r(nA,` property of the config object (either
passed as an argument or loaded from `),Oue=n(nA,"CODE",{});var k2t=s(Oue);ztr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Wtr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(nA,"CODE",{});var S2t=s(Vue);Qtr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Htr=r(nA,":"),nA.forEach(t),Utr=i(Ta),Xue=n(Ta,"UL",{});var R2t=s(Xue);FT=n(R2t,"LI",{});var tke=s(FT);zue=n(tke,"STRONG",{});var P2t=s(zue);Jtr=r(P2t,"detr"),P2t.forEach(t),Ytr=r(tke," \u2014 "),pz=n(tke,"A",{href:!0});var B2t=s(pz);Ktr=r(B2t,"DetrForSegmentation"),B2t.forEach(t),Ztr=r(tke," (DETR model)"),tke.forEach(t),R2t.forEach(t),ear=i(Ta),TT=n(Ta,"P",{});var ake=s(TT);oar=r(ake,"The model is set in evaluation mode by default using "),Wue=n(ake,"CODE",{});var I2t=s(Wue);rar=r(I2t,"model.eval()"),I2t.forEach(t),tar=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(ake,"CODE",{});var q2t=s(Que);aar=r(q2t,"model.train()"),q2t.forEach(t),ake.forEach(t),nar=i(Ta),T(MT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),eNe=i(f),Pd=n(f,"H2",{class:!0});var sDe=s(Pd);ET=n(sDe,"A",{id:!0,class:!0,href:!0});var N2t=s(ET);Hue=n(N2t,"SPAN",{});var j2t=s(Hue);T(jL.$$.fragment,j2t),j2t.forEach(t),N2t.forEach(t),sar=i(sDe),Uue=n(sDe,"SPAN",{});var D2t=s(Uue);lar=r(D2t,"AutoModelForSemanticSegmentation"),D2t.forEach(t),sDe.forEach(t),oNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(DL.$$.fragment,cl),iar=i(cl),Bd=n(cl,"P",{});var xZ=s(Bd);dar=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_z=n(xZ,"A",{href:!0});var G2t=s(_z);car=r(G2t,"from_pretrained()"),G2t.forEach(t),far=r(xZ," class method or the "),uz=n(xZ,"A",{href:!0});var O2t=s(uz);mar=r(O2t,"from_config()"),O2t.forEach(t),gar=r(xZ,` class
method.`),xZ.forEach(t),har=i(cl),GL=n(cl,"P",{});var lDe=s(GL);par=r(lDe,"This class cannot be instantiated directly using "),Jue=n(lDe,"CODE",{});var V2t=s(Jue);_ar=r(V2t,"__init__()"),V2t.forEach(t),uar=r(lDe," (throws an error)."),lDe.forEach(t),bar=i(cl),wt=n(cl,"DIV",{class:!0});var sA=s(wt);T(OL.$$.fragment,sA),Far=i(sA),Yue=n(sA,"P",{});var X2t=s(Yue);Tar=r(X2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),X2t.forEach(t),Mar=i(sA),Id=n(sA,"P",{});var $Z=s(Id);Ear=r($Z,`Note:
Loading a model from its configuration file does `),Kue=n($Z,"STRONG",{});var z2t=s(Kue);Car=r(z2t,"not"),z2t.forEach(t),war=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n($Z,"A",{href:!0});var W2t=s(bz);Aar=r(W2t,"from_pretrained()"),W2t.forEach(t),yar=r($Z," to load the model weights."),$Z.forEach(t),Lar=i(sA),T(CT.$$.fragment,sA),sA.forEach(t),xar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(VL.$$.fragment,Ma),$ar=i(Ma),Zue=n(Ma,"P",{});var Q2t=s(Zue);kar=r(Q2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Q2t.forEach(t),Sar=i(Ma),Ua=n(Ma,"P",{});var lA=s(Ua);Rar=r(lA,"The model class to instantiate is selected based on the "),e2e=n(lA,"CODE",{});var H2t=s(e2e);Par=r(H2t,"model_type"),H2t.forEach(t),Bar=r(lA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(lA,"CODE",{});var U2t=s(o2e);Iar=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),qar=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(lA,"CODE",{});var J2t=s(r2e);Nar=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),jar=r(lA,":"),lA.forEach(t),Dar=i(Ma),Ja=n(Ma,"UL",{});var iA=s(Ja);wT=n(iA,"LI",{});var nke=s(wT);t2e=n(nke,"STRONG",{});var Y2t=s(t2e);Gar=r(Y2t,"beit"),Y2t.forEach(t),Oar=r(nke," \u2014 "),vz=n(nke,"A",{href:!0});var K2t=s(vz);Var=r(K2t,"BeitForSemanticSegmentation"),K2t.forEach(t),Xar=r(nke," (BEiT model)"),nke.forEach(t),zar=i(iA),AT=n(iA,"LI",{});var ske=s(AT);a2e=n(ske,"STRONG",{});var Z2t=s(a2e);War=r(Z2t,"data2vec-vision"),Z2t.forEach(t),Qar=r(ske," \u2014 "),Fz=n(ske,"A",{href:!0});var e1t=s(Fz);Har=r(e1t,"Data2VecVisionForSemanticSegmentation"),e1t.forEach(t),Uar=r(ske," (Data2VecVision model)"),ske.forEach(t),Jar=i(iA),yT=n(iA,"LI",{});var lke=s(yT);n2e=n(lke,"STRONG",{});var o1t=s(n2e);Yar=r(o1t,"dpt"),o1t.forEach(t),Kar=r(lke," \u2014 "),Tz=n(lke,"A",{href:!0});var r1t=s(Tz);Zar=r(r1t,"DPTForSemanticSegmentation"),r1t.forEach(t),enr=r(lke," (DPT model)"),lke.forEach(t),onr=i(iA),LT=n(iA,"LI",{});var ike=s(LT);s2e=n(ike,"STRONG",{});var t1t=s(s2e);rnr=r(t1t,"segformer"),t1t.forEach(t),tnr=r(ike," \u2014 "),Mz=n(ike,"A",{href:!0});var a1t=s(Mz);anr=r(a1t,"SegformerForSemanticSegmentation"),a1t.forEach(t),nnr=r(ike," (SegFormer model)"),ike.forEach(t),iA.forEach(t),snr=i(Ma),xT=n(Ma,"P",{});var dke=s(xT);lnr=r(dke,"The model is set in evaluation mode by default using "),l2e=n(dke,"CODE",{});var n1t=s(l2e);inr=r(n1t,"model.eval()"),n1t.forEach(t),dnr=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(dke,"CODE",{});var s1t=s(i2e);cnr=r(s1t,"model.train()"),s1t.forEach(t),dke.forEach(t),fnr=i(Ma),T($T.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),rNe=i(f),qd=n(f,"H2",{class:!0});var iDe=s(qd);kT=n(iDe,"A",{id:!0,class:!0,href:!0});var l1t=s(kT);d2e=n(l1t,"SPAN",{});var i1t=s(d2e);T(XL.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),mnr=i(iDe),c2e=n(iDe,"SPAN",{});var d1t=s(c2e);gnr=r(d1t,"AutoModelForInstanceSegmentation"),d1t.forEach(t),iDe.forEach(t),tNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(zL.$$.fragment,fl),hnr=i(fl),Nd=n(fl,"P",{});var kZ=s(Nd);pnr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ez=n(kZ,"A",{href:!0});var c1t=s(Ez);_nr=r(c1t,"from_pretrained()"),c1t.forEach(t),unr=r(kZ," class method or the "),Cz=n(kZ,"A",{href:!0});var f1t=s(Cz);bnr=r(f1t,"from_config()"),f1t.forEach(t),vnr=r(kZ,` class
method.`),kZ.forEach(t),Fnr=i(fl),WL=n(fl,"P",{});var dDe=s(WL);Tnr=r(dDe,"This class cannot be instantiated directly using "),f2e=n(dDe,"CODE",{});var m1t=s(f2e);Mnr=r(m1t,"__init__()"),m1t.forEach(t),Enr=r(dDe," (throws an error)."),dDe.forEach(t),Cnr=i(fl),At=n(fl,"DIV",{class:!0});var dA=s(At);T(QL.$$.fragment,dA),wnr=i(dA),m2e=n(dA,"P",{});var g1t=s(m2e);Anr=r(g1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),g1t.forEach(t),ynr=i(dA),jd=n(dA,"P",{});var SZ=s(jd);Lnr=r(SZ,`Note:
Loading a model from its configuration file does `),g2e=n(SZ,"STRONG",{});var h1t=s(g2e);xnr=r(h1t,"not"),h1t.forEach(t),$nr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(SZ,"A",{href:!0});var p1t=s(wz);knr=r(p1t,"from_pretrained()"),p1t.forEach(t),Snr=r(SZ," to load the model weights."),SZ.forEach(t),Rnr=i(dA),T(ST.$$.fragment,dA),dA.forEach(t),Pnr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(HL.$$.fragment,Ea),Bnr=i(Ea),h2e=n(Ea,"P",{});var _1t=s(h2e);Inr=r(_1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_1t.forEach(t),qnr=i(Ea),Ya=n(Ea,"P",{});var cA=s(Ya);Nnr=r(cA,"The model class to instantiate is selected based on the "),p2e=n(cA,"CODE",{});var u1t=s(p2e);jnr=r(u1t,"model_type"),u1t.forEach(t),Dnr=r(cA,` property of the config object (either
passed as an argument or loaded from `),_2e=n(cA,"CODE",{});var b1t=s(_2e);Gnr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Onr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(cA,"CODE",{});var v1t=s(u2e);Vnr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Xnr=r(cA,":"),cA.forEach(t),znr=i(Ea),b2e=n(Ea,"UL",{});var F1t=s(b2e);RT=n(F1t,"LI",{});var cke=s(RT);v2e=n(cke,"STRONG",{});var T1t=s(v2e);Wnr=r(T1t,"maskformer"),T1t.forEach(t),Qnr=r(cke," \u2014 "),Az=n(cke,"A",{href:!0});var M1t=s(Az);Hnr=r(M1t,"MaskFormerForInstanceSegmentation"),M1t.forEach(t),Unr=r(cke," (MaskFormer model)"),cke.forEach(t),F1t.forEach(t),Jnr=i(Ea),PT=n(Ea,"P",{});var fke=s(PT);Ynr=r(fke,"The model is set in evaluation mode by default using "),F2e=n(fke,"CODE",{});var E1t=s(F2e);Knr=r(E1t,"model.eval()"),E1t.forEach(t),Znr=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(fke,"CODE",{});var C1t=s(T2e);esr=r(C1t,"model.train()"),C1t.forEach(t),fke.forEach(t),osr=i(Ea),T(BT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),aNe=i(f),Dd=n(f,"H2",{class:!0});var cDe=s(Dd);IT=n(cDe,"A",{id:!0,class:!0,href:!0});var w1t=s(IT);M2e=n(w1t,"SPAN",{});var A1t=s(M2e);T(UL.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),rsr=i(cDe),E2e=n(cDe,"SPAN",{});var y1t=s(E2e);tsr=r(y1t,"TFAutoModel"),y1t.forEach(t),cDe.forEach(t),nNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(JL.$$.fragment,ml),asr=i(ml),Gd=n(ml,"P",{});var RZ=s(Gd);nsr=r(RZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yz=n(RZ,"A",{href:!0});var L1t=s(yz);ssr=r(L1t,"from_pretrained()"),L1t.forEach(t),lsr=r(RZ," class method or the "),Lz=n(RZ,"A",{href:!0});var x1t=s(Lz);isr=r(x1t,"from_config()"),x1t.forEach(t),dsr=r(RZ,` class
method.`),RZ.forEach(t),csr=i(ml),YL=n(ml,"P",{});var fDe=s(YL);fsr=r(fDe,"This class cannot be instantiated directly using "),C2e=n(fDe,"CODE",{});var $1t=s(C2e);msr=r($1t,"__init__()"),$1t.forEach(t),gsr=r(fDe," (throws an error)."),fDe.forEach(t),hsr=i(ml),yt=n(ml,"DIV",{class:!0});var fA=s(yt);T(KL.$$.fragment,fA),psr=i(fA),w2e=n(fA,"P",{});var k1t=s(w2e);_sr=r(k1t,"Instantiates one of the base model classes of the library from a configuration."),k1t.forEach(t),usr=i(fA),Od=n(fA,"P",{});var PZ=s(Od);bsr=r(PZ,`Note:
Loading a model from its configuration file does `),A2e=n(PZ,"STRONG",{});var S1t=s(A2e);vsr=r(S1t,"not"),S1t.forEach(t),Fsr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(PZ,"A",{href:!0});var R1t=s(xz);Tsr=r(R1t,"from_pretrained()"),R1t.forEach(t),Msr=r(PZ," to load the model weights."),PZ.forEach(t),Esr=i(fA),T(qT.$$.fragment,fA),fA.forEach(t),Csr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(ZL.$$.fragment,gl),wsr=i(gl),y2e=n(gl,"P",{});var P1t=s(y2e);Asr=r(P1t,"Instantiate one of the base model classes of the library from a pretrained model."),P1t.forEach(t),ysr=i(gl),Ka=n(gl,"P",{});var mA=s(Ka);Lsr=r(mA,"The model class to instantiate is selected based on the "),L2e=n(mA,"CODE",{});var B1t=s(L2e);xsr=r(B1t,"model_type"),B1t.forEach(t),$sr=r(mA,` property of the config object (either
passed as an argument or loaded from `),x2e=n(mA,"CODE",{});var I1t=s(x2e);ksr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Ssr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(mA,"CODE",{});var q1t=s($2e);Rsr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Psr=r(mA,":"),mA.forEach(t),Bsr=i(gl),q=n(gl,"UL",{});var j=s(q);NT=n(j,"LI",{});var mke=s(NT);k2e=n(mke,"STRONG",{});var N1t=s(k2e);Isr=r(N1t,"albert"),N1t.forEach(t),qsr=r(mke," \u2014 "),$z=n(mke,"A",{href:!0});var j1t=s($z);Nsr=r(j1t,"TFAlbertModel"),j1t.forEach(t),jsr=r(mke," (ALBERT model)"),mke.forEach(t),Dsr=i(j),jT=n(j,"LI",{});var gke=s(jT);S2e=n(gke,"STRONG",{});var D1t=s(S2e);Gsr=r(D1t,"bart"),D1t.forEach(t),Osr=r(gke," \u2014 "),kz=n(gke,"A",{href:!0});var G1t=s(kz);Vsr=r(G1t,"TFBartModel"),G1t.forEach(t),Xsr=r(gke," (BART model)"),gke.forEach(t),zsr=i(j),DT=n(j,"LI",{});var hke=s(DT);R2e=n(hke,"STRONG",{});var O1t=s(R2e);Wsr=r(O1t,"bert"),O1t.forEach(t),Qsr=r(hke," \u2014 "),Sz=n(hke,"A",{href:!0});var V1t=s(Sz);Hsr=r(V1t,"TFBertModel"),V1t.forEach(t),Usr=r(hke," (BERT model)"),hke.forEach(t),Jsr=i(j),GT=n(j,"LI",{});var pke=s(GT);P2e=n(pke,"STRONG",{});var X1t=s(P2e);Ysr=r(X1t,"blenderbot"),X1t.forEach(t),Ksr=r(pke," \u2014 "),Rz=n(pke,"A",{href:!0});var z1t=s(Rz);Zsr=r(z1t,"TFBlenderbotModel"),z1t.forEach(t),elr=r(pke," (Blenderbot model)"),pke.forEach(t),olr=i(j),OT=n(j,"LI",{});var _ke=s(OT);B2e=n(_ke,"STRONG",{});var W1t=s(B2e);rlr=r(W1t,"blenderbot-small"),W1t.forEach(t),tlr=r(_ke," \u2014 "),Pz=n(_ke,"A",{href:!0});var Q1t=s(Pz);alr=r(Q1t,"TFBlenderbotSmallModel"),Q1t.forEach(t),nlr=r(_ke," (BlenderbotSmall model)"),_ke.forEach(t),slr=i(j),VT=n(j,"LI",{});var uke=s(VT);I2e=n(uke,"STRONG",{});var H1t=s(I2e);llr=r(H1t,"camembert"),H1t.forEach(t),ilr=r(uke," \u2014 "),Bz=n(uke,"A",{href:!0});var U1t=s(Bz);dlr=r(U1t,"TFCamembertModel"),U1t.forEach(t),clr=r(uke," (CamemBERT model)"),uke.forEach(t),flr=i(j),XT=n(j,"LI",{});var bke=s(XT);q2e=n(bke,"STRONG",{});var J1t=s(q2e);mlr=r(J1t,"clip"),J1t.forEach(t),glr=r(bke," \u2014 "),Iz=n(bke,"A",{href:!0});var Y1t=s(Iz);hlr=r(Y1t,"TFCLIPModel"),Y1t.forEach(t),plr=r(bke," (CLIP model)"),bke.forEach(t),_lr=i(j),zT=n(j,"LI",{});var vke=s(zT);N2e=n(vke,"STRONG",{});var K1t=s(N2e);ulr=r(K1t,"convbert"),K1t.forEach(t),blr=r(vke," \u2014 "),qz=n(vke,"A",{href:!0});var Z1t=s(qz);vlr=r(Z1t,"TFConvBertModel"),Z1t.forEach(t),Flr=r(vke," (ConvBERT model)"),vke.forEach(t),Tlr=i(j),WT=n(j,"LI",{});var Fke=s(WT);j2e=n(Fke,"STRONG",{});var e7t=s(j2e);Mlr=r(e7t,"convnext"),e7t.forEach(t),Elr=r(Fke," \u2014 "),Nz=n(Fke,"A",{href:!0});var o7t=s(Nz);Clr=r(o7t,"TFConvNextModel"),o7t.forEach(t),wlr=r(Fke," (ConvNext model)"),Fke.forEach(t),Alr=i(j),QT=n(j,"LI",{});var Tke=s(QT);D2e=n(Tke,"STRONG",{});var r7t=s(D2e);ylr=r(r7t,"ctrl"),r7t.forEach(t),Llr=r(Tke," \u2014 "),jz=n(Tke,"A",{href:!0});var t7t=s(jz);xlr=r(t7t,"TFCTRLModel"),t7t.forEach(t),$lr=r(Tke," (CTRL model)"),Tke.forEach(t),klr=i(j),HT=n(j,"LI",{});var Mke=s(HT);G2e=n(Mke,"STRONG",{});var a7t=s(G2e);Slr=r(a7t,"data2vec-vision"),a7t.forEach(t),Rlr=r(Mke," \u2014 "),Dz=n(Mke,"A",{href:!0});var n7t=s(Dz);Plr=r(n7t,"TFData2VecVisionModel"),n7t.forEach(t),Blr=r(Mke," (Data2VecVision model)"),Mke.forEach(t),Ilr=i(j),UT=n(j,"LI",{});var Eke=s(UT);O2e=n(Eke,"STRONG",{});var s7t=s(O2e);qlr=r(s7t,"deberta"),s7t.forEach(t),Nlr=r(Eke," \u2014 "),Gz=n(Eke,"A",{href:!0});var l7t=s(Gz);jlr=r(l7t,"TFDebertaModel"),l7t.forEach(t),Dlr=r(Eke," (DeBERTa model)"),Eke.forEach(t),Glr=i(j),JT=n(j,"LI",{});var Cke=s(JT);V2e=n(Cke,"STRONG",{});var i7t=s(V2e);Olr=r(i7t,"deberta-v2"),i7t.forEach(t),Vlr=r(Cke," \u2014 "),Oz=n(Cke,"A",{href:!0});var d7t=s(Oz);Xlr=r(d7t,"TFDebertaV2Model"),d7t.forEach(t),zlr=r(Cke," (DeBERTa-v2 model)"),Cke.forEach(t),Wlr=i(j),YT=n(j,"LI",{});var wke=s(YT);X2e=n(wke,"STRONG",{});var c7t=s(X2e);Qlr=r(c7t,"distilbert"),c7t.forEach(t),Hlr=r(wke," \u2014 "),Vz=n(wke,"A",{href:!0});var f7t=s(Vz);Ulr=r(f7t,"TFDistilBertModel"),f7t.forEach(t),Jlr=r(wke," (DistilBERT model)"),wke.forEach(t),Ylr=i(j),KT=n(j,"LI",{});var Ake=s(KT);z2e=n(Ake,"STRONG",{});var m7t=s(z2e);Klr=r(m7t,"dpr"),m7t.forEach(t),Zlr=r(Ake," \u2014 "),Xz=n(Ake,"A",{href:!0});var g7t=s(Xz);eir=r(g7t,"TFDPRQuestionEncoder"),g7t.forEach(t),oir=r(Ake," (DPR model)"),Ake.forEach(t),rir=i(j),ZT=n(j,"LI",{});var yke=s(ZT);W2e=n(yke,"STRONG",{});var h7t=s(W2e);tir=r(h7t,"electra"),h7t.forEach(t),air=r(yke," \u2014 "),zz=n(yke,"A",{href:!0});var p7t=s(zz);nir=r(p7t,"TFElectraModel"),p7t.forEach(t),sir=r(yke," (ELECTRA model)"),yke.forEach(t),lir=i(j),eM=n(j,"LI",{});var Lke=s(eM);Q2e=n(Lke,"STRONG",{});var _7t=s(Q2e);iir=r(_7t,"flaubert"),_7t.forEach(t),dir=r(Lke," \u2014 "),Wz=n(Lke,"A",{href:!0});var u7t=s(Wz);cir=r(u7t,"TFFlaubertModel"),u7t.forEach(t),fir=r(Lke," (FlauBERT model)"),Lke.forEach(t),mir=i(j),Bs=n(j,"LI",{});var $$=s(Bs);H2e=n($$,"STRONG",{});var b7t=s(H2e);gir=r(b7t,"funnel"),b7t.forEach(t),hir=r($$," \u2014 "),Qz=n($$,"A",{href:!0});var v7t=s(Qz);pir=r(v7t,"TFFunnelModel"),v7t.forEach(t),_ir=r($$," or "),Hz=n($$,"A",{href:!0});var F7t=s(Hz);uir=r(F7t,"TFFunnelBaseModel"),F7t.forEach(t),bir=r($$," (Funnel Transformer model)"),$$.forEach(t),vir=i(j),oM=n(j,"LI",{});var xke=s(oM);U2e=n(xke,"STRONG",{});var T7t=s(U2e);Fir=r(T7t,"gpt2"),T7t.forEach(t),Tir=r(xke," \u2014 "),Uz=n(xke,"A",{href:!0});var M7t=s(Uz);Mir=r(M7t,"TFGPT2Model"),M7t.forEach(t),Eir=r(xke," (OpenAI GPT-2 model)"),xke.forEach(t),Cir=i(j),rM=n(j,"LI",{});var $ke=s(rM);J2e=n($ke,"STRONG",{});var E7t=s(J2e);wir=r(E7t,"gptj"),E7t.forEach(t),Air=r($ke," \u2014 "),Jz=n($ke,"A",{href:!0});var C7t=s(Jz);yir=r(C7t,"TFGPTJModel"),C7t.forEach(t),Lir=r($ke," (GPT-J model)"),$ke.forEach(t),xir=i(j),tM=n(j,"LI",{});var kke=s(tM);Y2e=n(kke,"STRONG",{});var w7t=s(Y2e);$ir=r(w7t,"hubert"),w7t.forEach(t),kir=r(kke," \u2014 "),Yz=n(kke,"A",{href:!0});var A7t=s(Yz);Sir=r(A7t,"TFHubertModel"),A7t.forEach(t),Rir=r(kke," (Hubert model)"),kke.forEach(t),Pir=i(j),aM=n(j,"LI",{});var Ske=s(aM);K2e=n(Ske,"STRONG",{});var y7t=s(K2e);Bir=r(y7t,"layoutlm"),y7t.forEach(t),Iir=r(Ske," \u2014 "),Kz=n(Ske,"A",{href:!0});var L7t=s(Kz);qir=r(L7t,"TFLayoutLMModel"),L7t.forEach(t),Nir=r(Ske," (LayoutLM model)"),Ske.forEach(t),jir=i(j),nM=n(j,"LI",{});var Rke=s(nM);Z2e=n(Rke,"STRONG",{});var x7t=s(Z2e);Dir=r(x7t,"led"),x7t.forEach(t),Gir=r(Rke," \u2014 "),Zz=n(Rke,"A",{href:!0});var $7t=s(Zz);Oir=r($7t,"TFLEDModel"),$7t.forEach(t),Vir=r(Rke," (LED model)"),Rke.forEach(t),Xir=i(j),sM=n(j,"LI",{});var Pke=s(sM);e1e=n(Pke,"STRONG",{});var k7t=s(e1e);zir=r(k7t,"longformer"),k7t.forEach(t),Wir=r(Pke," \u2014 "),eW=n(Pke,"A",{href:!0});var S7t=s(eW);Qir=r(S7t,"TFLongformerModel"),S7t.forEach(t),Hir=r(Pke," (Longformer model)"),Pke.forEach(t),Uir=i(j),lM=n(j,"LI",{});var Bke=s(lM);o1e=n(Bke,"STRONG",{});var R7t=s(o1e);Jir=r(R7t,"lxmert"),R7t.forEach(t),Yir=r(Bke," \u2014 "),oW=n(Bke,"A",{href:!0});var P7t=s(oW);Kir=r(P7t,"TFLxmertModel"),P7t.forEach(t),Zir=r(Bke," (LXMERT model)"),Bke.forEach(t),edr=i(j),iM=n(j,"LI",{});var Ike=s(iM);r1e=n(Ike,"STRONG",{});var B7t=s(r1e);odr=r(B7t,"marian"),B7t.forEach(t),rdr=r(Ike," \u2014 "),rW=n(Ike,"A",{href:!0});var I7t=s(rW);tdr=r(I7t,"TFMarianModel"),I7t.forEach(t),adr=r(Ike," (Marian model)"),Ike.forEach(t),ndr=i(j),dM=n(j,"LI",{});var qke=s(dM);t1e=n(qke,"STRONG",{});var q7t=s(t1e);sdr=r(q7t,"mbart"),q7t.forEach(t),ldr=r(qke," \u2014 "),tW=n(qke,"A",{href:!0});var N7t=s(tW);idr=r(N7t,"TFMBartModel"),N7t.forEach(t),ddr=r(qke," (mBART model)"),qke.forEach(t),cdr=i(j),cM=n(j,"LI",{});var Nke=s(cM);a1e=n(Nke,"STRONG",{});var j7t=s(a1e);fdr=r(j7t,"mobilebert"),j7t.forEach(t),mdr=r(Nke," \u2014 "),aW=n(Nke,"A",{href:!0});var D7t=s(aW);gdr=r(D7t,"TFMobileBertModel"),D7t.forEach(t),hdr=r(Nke," (MobileBERT model)"),Nke.forEach(t),pdr=i(j),fM=n(j,"LI",{});var jke=s(fM);n1e=n(jke,"STRONG",{});var G7t=s(n1e);_dr=r(G7t,"mpnet"),G7t.forEach(t),udr=r(jke," \u2014 "),nW=n(jke,"A",{href:!0});var O7t=s(nW);bdr=r(O7t,"TFMPNetModel"),O7t.forEach(t),vdr=r(jke," (MPNet model)"),jke.forEach(t),Fdr=i(j),mM=n(j,"LI",{});var Dke=s(mM);s1e=n(Dke,"STRONG",{});var V7t=s(s1e);Tdr=r(V7t,"mt5"),V7t.forEach(t),Mdr=r(Dke," \u2014 "),sW=n(Dke,"A",{href:!0});var X7t=s(sW);Edr=r(X7t,"TFMT5Model"),X7t.forEach(t),Cdr=r(Dke," (mT5 model)"),Dke.forEach(t),wdr=i(j),gM=n(j,"LI",{});var Gke=s(gM);l1e=n(Gke,"STRONG",{});var z7t=s(l1e);Adr=r(z7t,"openai-gpt"),z7t.forEach(t),ydr=r(Gke," \u2014 "),lW=n(Gke,"A",{href:!0});var W7t=s(lW);Ldr=r(W7t,"TFOpenAIGPTModel"),W7t.forEach(t),xdr=r(Gke," (OpenAI GPT model)"),Gke.forEach(t),$dr=i(j),hM=n(j,"LI",{});var Oke=s(hM);i1e=n(Oke,"STRONG",{});var Q7t=s(i1e);kdr=r(Q7t,"opt"),Q7t.forEach(t),Sdr=r(Oke," \u2014 "),iW=n(Oke,"A",{href:!0});var H7t=s(iW);Rdr=r(H7t,"TFOPTModel"),H7t.forEach(t),Pdr=r(Oke," (OPT model)"),Oke.forEach(t),Bdr=i(j),pM=n(j,"LI",{});var Vke=s(pM);d1e=n(Vke,"STRONG",{});var U7t=s(d1e);Idr=r(U7t,"pegasus"),U7t.forEach(t),qdr=r(Vke," \u2014 "),dW=n(Vke,"A",{href:!0});var J7t=s(dW);Ndr=r(J7t,"TFPegasusModel"),J7t.forEach(t),jdr=r(Vke," (Pegasus model)"),Vke.forEach(t),Ddr=i(j),_M=n(j,"LI",{});var Xke=s(_M);c1e=n(Xke,"STRONG",{});var Y7t=s(c1e);Gdr=r(Y7t,"rembert"),Y7t.forEach(t),Odr=r(Xke," \u2014 "),cW=n(Xke,"A",{href:!0});var K7t=s(cW);Vdr=r(K7t,"TFRemBertModel"),K7t.forEach(t),Xdr=r(Xke," (RemBERT model)"),Xke.forEach(t),zdr=i(j),uM=n(j,"LI",{});var zke=s(uM);f1e=n(zke,"STRONG",{});var Z7t=s(f1e);Wdr=r(Z7t,"roberta"),Z7t.forEach(t),Qdr=r(zke," \u2014 "),fW=n(zke,"A",{href:!0});var ebt=s(fW);Hdr=r(ebt,"TFRobertaModel"),ebt.forEach(t),Udr=r(zke," (RoBERTa model)"),zke.forEach(t),Jdr=i(j),bM=n(j,"LI",{});var Wke=s(bM);m1e=n(Wke,"STRONG",{});var obt=s(m1e);Ydr=r(obt,"roformer"),obt.forEach(t),Kdr=r(Wke," \u2014 "),mW=n(Wke,"A",{href:!0});var rbt=s(mW);Zdr=r(rbt,"TFRoFormerModel"),rbt.forEach(t),ecr=r(Wke," (RoFormer model)"),Wke.forEach(t),ocr=i(j),vM=n(j,"LI",{});var Qke=s(vM);g1e=n(Qke,"STRONG",{});var tbt=s(g1e);rcr=r(tbt,"speech_to_text"),tbt.forEach(t),tcr=r(Qke," \u2014 "),gW=n(Qke,"A",{href:!0});var abt=s(gW);acr=r(abt,"TFSpeech2TextModel"),abt.forEach(t),ncr=r(Qke," (Speech2Text model)"),Qke.forEach(t),scr=i(j),FM=n(j,"LI",{});var Hke=s(FM);h1e=n(Hke,"STRONG",{});var nbt=s(h1e);lcr=r(nbt,"swin"),nbt.forEach(t),icr=r(Hke," \u2014 "),hW=n(Hke,"A",{href:!0});var sbt=s(hW);dcr=r(sbt,"TFSwinModel"),sbt.forEach(t),ccr=r(Hke," (Swin model)"),Hke.forEach(t),fcr=i(j),TM=n(j,"LI",{});var Uke=s(TM);p1e=n(Uke,"STRONG",{});var lbt=s(p1e);mcr=r(lbt,"t5"),lbt.forEach(t),gcr=r(Uke," \u2014 "),pW=n(Uke,"A",{href:!0});var ibt=s(pW);hcr=r(ibt,"TFT5Model"),ibt.forEach(t),pcr=r(Uke," (T5 model)"),Uke.forEach(t),_cr=i(j),MM=n(j,"LI",{});var Jke=s(MM);_1e=n(Jke,"STRONG",{});var dbt=s(_1e);ucr=r(dbt,"tapas"),dbt.forEach(t),bcr=r(Jke," \u2014 "),_W=n(Jke,"A",{href:!0});var cbt=s(_W);vcr=r(cbt,"TFTapasModel"),cbt.forEach(t),Fcr=r(Jke," (TAPAS model)"),Jke.forEach(t),Tcr=i(j),EM=n(j,"LI",{});var Yke=s(EM);u1e=n(Yke,"STRONG",{});var fbt=s(u1e);Mcr=r(fbt,"transfo-xl"),fbt.forEach(t),Ecr=r(Yke," \u2014 "),uW=n(Yke,"A",{href:!0});var mbt=s(uW);Ccr=r(mbt,"TFTransfoXLModel"),mbt.forEach(t),wcr=r(Yke," (Transformer-XL model)"),Yke.forEach(t),Acr=i(j),CM=n(j,"LI",{});var Kke=s(CM);b1e=n(Kke,"STRONG",{});var gbt=s(b1e);ycr=r(gbt,"vit"),gbt.forEach(t),Lcr=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var hbt=s(bW);xcr=r(hbt,"TFViTModel"),hbt.forEach(t),$cr=r(Kke," (ViT model)"),Kke.forEach(t),kcr=i(j),wM=n(j,"LI",{});var Zke=s(wM);v1e=n(Zke,"STRONG",{});var pbt=s(v1e);Scr=r(pbt,"vit_mae"),pbt.forEach(t),Rcr=r(Zke," \u2014 "),vW=n(Zke,"A",{href:!0});var _bt=s(vW);Pcr=r(_bt,"TFViTMAEModel"),_bt.forEach(t),Bcr=r(Zke," (ViTMAE model)"),Zke.forEach(t),Icr=i(j),AM=n(j,"LI",{});var eSe=s(AM);F1e=n(eSe,"STRONG",{});var ubt=s(F1e);qcr=r(ubt,"wav2vec2"),ubt.forEach(t),Ncr=r(eSe," \u2014 "),FW=n(eSe,"A",{href:!0});var bbt=s(FW);jcr=r(bbt,"TFWav2Vec2Model"),bbt.forEach(t),Dcr=r(eSe," (Wav2Vec2 model)"),eSe.forEach(t),Gcr=i(j),yM=n(j,"LI",{});var oSe=s(yM);T1e=n(oSe,"STRONG",{});var vbt=s(T1e);Ocr=r(vbt,"xlm"),vbt.forEach(t),Vcr=r(oSe," \u2014 "),TW=n(oSe,"A",{href:!0});var Fbt=s(TW);Xcr=r(Fbt,"TFXLMModel"),Fbt.forEach(t),zcr=r(oSe," (XLM model)"),oSe.forEach(t),Wcr=i(j),LM=n(j,"LI",{});var rSe=s(LM);M1e=n(rSe,"STRONG",{});var Tbt=s(M1e);Qcr=r(Tbt,"xlm-roberta"),Tbt.forEach(t),Hcr=r(rSe," \u2014 "),MW=n(rSe,"A",{href:!0});var Mbt=s(MW);Ucr=r(Mbt,"TFXLMRobertaModel"),Mbt.forEach(t),Jcr=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),Ycr=i(j),xM=n(j,"LI",{});var tSe=s(xM);E1e=n(tSe,"STRONG",{});var Ebt=s(E1e);Kcr=r(Ebt,"xlnet"),Ebt.forEach(t),Zcr=r(tSe," \u2014 "),EW=n(tSe,"A",{href:!0});var Cbt=s(EW);efr=r(Cbt,"TFXLNetModel"),Cbt.forEach(t),ofr=r(tSe," (XLNet model)"),tSe.forEach(t),j.forEach(t),rfr=i(gl),T($M.$$.fragment,gl),gl.forEach(t),ml.forEach(t),sNe=i(f),Vd=n(f,"H2",{class:!0});var mDe=s(Vd);kM=n(mDe,"A",{id:!0,class:!0,href:!0});var wbt=s(kM);C1e=n(wbt,"SPAN",{});var Abt=s(C1e);T(e8.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),tfr=i(mDe),w1e=n(mDe,"SPAN",{});var ybt=s(w1e);afr=r(ybt,"TFAutoModelForPreTraining"),ybt.forEach(t),mDe.forEach(t),lNe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(o8.$$.fragment,hl),nfr=i(hl),Xd=n(hl,"P",{});var BZ=s(Xd);sfr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=n(BZ,"A",{href:!0});var Lbt=s(CW);lfr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),ifr=r(BZ," class method or the "),wW=n(BZ,"A",{href:!0});var xbt=s(wW);dfr=r(xbt,"from_config()"),xbt.forEach(t),cfr=r(BZ,` class
method.`),BZ.forEach(t),ffr=i(hl),r8=n(hl,"P",{});var gDe=s(r8);mfr=r(gDe,"This class cannot be instantiated directly using "),A1e=n(gDe,"CODE",{});var $bt=s(A1e);gfr=r($bt,"__init__()"),$bt.forEach(t),hfr=r(gDe," (throws an error)."),gDe.forEach(t),pfr=i(hl),Lt=n(hl,"DIV",{class:!0});var gA=s(Lt);T(t8.$$.fragment,gA),_fr=i(gA),y1e=n(gA,"P",{});var kbt=s(y1e);ufr=r(kbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kbt.forEach(t),bfr=i(gA),zd=n(gA,"P",{});var IZ=s(zd);vfr=r(IZ,`Note:
Loading a model from its configuration file does `),L1e=n(IZ,"STRONG",{});var Sbt=s(L1e);Ffr=r(Sbt,"not"),Sbt.forEach(t),Tfr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(IZ,"A",{href:!0});var Rbt=s(AW);Mfr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),Efr=r(IZ," to load the model weights."),IZ.forEach(t),Cfr=i(gA),T(SM.$$.fragment,gA),gA.forEach(t),wfr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(a8.$$.fragment,pl),Afr=i(pl),x1e=n(pl,"P",{});var Pbt=s(x1e);yfr=r(Pbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pbt.forEach(t),Lfr=i(pl),Za=n(pl,"P",{});var hA=s(Za);xfr=r(hA,"The model class to instantiate is selected based on the "),$1e=n(hA,"CODE",{});var Bbt=s($1e);$fr=r(Bbt,"model_type"),Bbt.forEach(t),kfr=r(hA,` property of the config object (either
passed as an argument or loaded from `),k1e=n(hA,"CODE",{});var Ibt=s(k1e);Sfr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Rfr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(hA,"CODE",{});var qbt=s(S1e);Pfr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Bfr=r(hA,":"),hA.forEach(t),Ifr=i(pl),se=n(pl,"UL",{});var le=s(se);RM=n(le,"LI",{});var aSe=s(RM);R1e=n(aSe,"STRONG",{});var Nbt=s(R1e);qfr=r(Nbt,"albert"),Nbt.forEach(t),Nfr=r(aSe," \u2014 "),yW=n(aSe,"A",{href:!0});var jbt=s(yW);jfr=r(jbt,"TFAlbertForPreTraining"),jbt.forEach(t),Dfr=r(aSe," (ALBERT model)"),aSe.forEach(t),Gfr=i(le),PM=n(le,"LI",{});var nSe=s(PM);P1e=n(nSe,"STRONG",{});var Dbt=s(P1e);Ofr=r(Dbt,"bart"),Dbt.forEach(t),Vfr=r(nSe," \u2014 "),LW=n(nSe,"A",{href:!0});var Gbt=s(LW);Xfr=r(Gbt,"TFBartForConditionalGeneration"),Gbt.forEach(t),zfr=r(nSe," (BART model)"),nSe.forEach(t),Wfr=i(le),BM=n(le,"LI",{});var sSe=s(BM);B1e=n(sSe,"STRONG",{});var Obt=s(B1e);Qfr=r(Obt,"bert"),Obt.forEach(t),Hfr=r(sSe," \u2014 "),xW=n(sSe,"A",{href:!0});var Vbt=s(xW);Ufr=r(Vbt,"TFBertForPreTraining"),Vbt.forEach(t),Jfr=r(sSe," (BERT model)"),sSe.forEach(t),Yfr=i(le),IM=n(le,"LI",{});var lSe=s(IM);I1e=n(lSe,"STRONG",{});var Xbt=s(I1e);Kfr=r(Xbt,"camembert"),Xbt.forEach(t),Zfr=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var zbt=s($W);emr=r(zbt,"TFCamembertForMaskedLM"),zbt.forEach(t),omr=r(lSe," (CamemBERT model)"),lSe.forEach(t),rmr=i(le),qM=n(le,"LI",{});var iSe=s(qM);q1e=n(iSe,"STRONG",{});var Wbt=s(q1e);tmr=r(Wbt,"ctrl"),Wbt.forEach(t),amr=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var Qbt=s(kW);nmr=r(Qbt,"TFCTRLLMHeadModel"),Qbt.forEach(t),smr=r(iSe," (CTRL model)"),iSe.forEach(t),lmr=i(le),NM=n(le,"LI",{});var dSe=s(NM);N1e=n(dSe,"STRONG",{});var Hbt=s(N1e);imr=r(Hbt,"distilbert"),Hbt.forEach(t),dmr=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var Ubt=s(SW);cmr=r(Ubt,"TFDistilBertForMaskedLM"),Ubt.forEach(t),fmr=r(dSe," (DistilBERT model)"),dSe.forEach(t),mmr=i(le),jM=n(le,"LI",{});var cSe=s(jM);j1e=n(cSe,"STRONG",{});var Jbt=s(j1e);gmr=r(Jbt,"electra"),Jbt.forEach(t),hmr=r(cSe," \u2014 "),RW=n(cSe,"A",{href:!0});var Ybt=s(RW);pmr=r(Ybt,"TFElectraForPreTraining"),Ybt.forEach(t),_mr=r(cSe," (ELECTRA model)"),cSe.forEach(t),umr=i(le),DM=n(le,"LI",{});var fSe=s(DM);D1e=n(fSe,"STRONG",{});var Kbt=s(D1e);bmr=r(Kbt,"flaubert"),Kbt.forEach(t),vmr=r(fSe," \u2014 "),PW=n(fSe,"A",{href:!0});var Zbt=s(PW);Fmr=r(Zbt,"TFFlaubertWithLMHeadModel"),Zbt.forEach(t),Tmr=r(fSe," (FlauBERT model)"),fSe.forEach(t),Mmr=i(le),GM=n(le,"LI",{});var mSe=s(GM);G1e=n(mSe,"STRONG",{});var evt=s(G1e);Emr=r(evt,"funnel"),evt.forEach(t),Cmr=r(mSe," \u2014 "),BW=n(mSe,"A",{href:!0});var ovt=s(BW);wmr=r(ovt,"TFFunnelForPreTraining"),ovt.forEach(t),Amr=r(mSe," (Funnel Transformer model)"),mSe.forEach(t),ymr=i(le),OM=n(le,"LI",{});var gSe=s(OM);O1e=n(gSe,"STRONG",{});var rvt=s(O1e);Lmr=r(rvt,"gpt2"),rvt.forEach(t),xmr=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var tvt=s(IW);$mr=r(tvt,"TFGPT2LMHeadModel"),tvt.forEach(t),kmr=r(gSe," (OpenAI GPT-2 model)"),gSe.forEach(t),Smr=i(le),VM=n(le,"LI",{});var hSe=s(VM);V1e=n(hSe,"STRONG",{});var avt=s(V1e);Rmr=r(avt,"layoutlm"),avt.forEach(t),Pmr=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var nvt=s(qW);Bmr=r(nvt,"TFLayoutLMForMaskedLM"),nvt.forEach(t),Imr=r(hSe," (LayoutLM model)"),hSe.forEach(t),qmr=i(le),XM=n(le,"LI",{});var pSe=s(XM);X1e=n(pSe,"STRONG",{});var svt=s(X1e);Nmr=r(svt,"lxmert"),svt.forEach(t),jmr=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var lvt=s(NW);Dmr=r(lvt,"TFLxmertForPreTraining"),lvt.forEach(t),Gmr=r(pSe," (LXMERT model)"),pSe.forEach(t),Omr=i(le),zM=n(le,"LI",{});var _Se=s(zM);z1e=n(_Se,"STRONG",{});var ivt=s(z1e);Vmr=r(ivt,"mobilebert"),ivt.forEach(t),Xmr=r(_Se," \u2014 "),jW=n(_Se,"A",{href:!0});var dvt=s(jW);zmr=r(dvt,"TFMobileBertForPreTraining"),dvt.forEach(t),Wmr=r(_Se," (MobileBERT model)"),_Se.forEach(t),Qmr=i(le),WM=n(le,"LI",{});var uSe=s(WM);W1e=n(uSe,"STRONG",{});var cvt=s(W1e);Hmr=r(cvt,"mpnet"),cvt.forEach(t),Umr=r(uSe," \u2014 "),DW=n(uSe,"A",{href:!0});var fvt=s(DW);Jmr=r(fvt,"TFMPNetForMaskedLM"),fvt.forEach(t),Ymr=r(uSe," (MPNet model)"),uSe.forEach(t),Kmr=i(le),QM=n(le,"LI",{});var bSe=s(QM);Q1e=n(bSe,"STRONG",{});var mvt=s(Q1e);Zmr=r(mvt,"openai-gpt"),mvt.forEach(t),egr=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var gvt=s(GW);ogr=r(gvt,"TFOpenAIGPTLMHeadModel"),gvt.forEach(t),rgr=r(bSe," (OpenAI GPT model)"),bSe.forEach(t),tgr=i(le),HM=n(le,"LI",{});var vSe=s(HM);H1e=n(vSe,"STRONG",{});var hvt=s(H1e);agr=r(hvt,"roberta"),hvt.forEach(t),ngr=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var pvt=s(OW);sgr=r(pvt,"TFRobertaForMaskedLM"),pvt.forEach(t),lgr=r(vSe," (RoBERTa model)"),vSe.forEach(t),igr=i(le),UM=n(le,"LI",{});var FSe=s(UM);U1e=n(FSe,"STRONG",{});var _vt=s(U1e);dgr=r(_vt,"t5"),_vt.forEach(t),cgr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var uvt=s(VW);fgr=r(uvt,"TFT5ForConditionalGeneration"),uvt.forEach(t),mgr=r(FSe," (T5 model)"),FSe.forEach(t),ggr=i(le),JM=n(le,"LI",{});var TSe=s(JM);J1e=n(TSe,"STRONG",{});var bvt=s(J1e);hgr=r(bvt,"tapas"),bvt.forEach(t),pgr=r(TSe," \u2014 "),XW=n(TSe,"A",{href:!0});var vvt=s(XW);_gr=r(vvt,"TFTapasForMaskedLM"),vvt.forEach(t),ugr=r(TSe," (TAPAS model)"),TSe.forEach(t),bgr=i(le),YM=n(le,"LI",{});var MSe=s(YM);Y1e=n(MSe,"STRONG",{});var Fvt=s(Y1e);vgr=r(Fvt,"transfo-xl"),Fvt.forEach(t),Fgr=r(MSe," \u2014 "),zW=n(MSe,"A",{href:!0});var Tvt=s(zW);Tgr=r(Tvt,"TFTransfoXLLMHeadModel"),Tvt.forEach(t),Mgr=r(MSe," (Transformer-XL model)"),MSe.forEach(t),Egr=i(le),KM=n(le,"LI",{});var ESe=s(KM);K1e=n(ESe,"STRONG",{});var Mvt=s(K1e);Cgr=r(Mvt,"vit_mae"),Mvt.forEach(t),wgr=r(ESe," \u2014 "),WW=n(ESe,"A",{href:!0});var Evt=s(WW);Agr=r(Evt,"TFViTMAEForPreTraining"),Evt.forEach(t),ygr=r(ESe," (ViTMAE model)"),ESe.forEach(t),Lgr=i(le),ZM=n(le,"LI",{});var CSe=s(ZM);Z1e=n(CSe,"STRONG",{});var Cvt=s(Z1e);xgr=r(Cvt,"xlm"),Cvt.forEach(t),$gr=r(CSe," \u2014 "),QW=n(CSe,"A",{href:!0});var wvt=s(QW);kgr=r(wvt,"TFXLMWithLMHeadModel"),wvt.forEach(t),Sgr=r(CSe," (XLM model)"),CSe.forEach(t),Rgr=i(le),e4=n(le,"LI",{});var wSe=s(e4);e7e=n(wSe,"STRONG",{});var Avt=s(e7e);Pgr=r(Avt,"xlm-roberta"),Avt.forEach(t),Bgr=r(wSe," \u2014 "),HW=n(wSe,"A",{href:!0});var yvt=s(HW);Igr=r(yvt,"TFXLMRobertaForMaskedLM"),yvt.forEach(t),qgr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),Ngr=i(le),o4=n(le,"LI",{});var ASe=s(o4);o7e=n(ASe,"STRONG",{});var Lvt=s(o7e);jgr=r(Lvt,"xlnet"),Lvt.forEach(t),Dgr=r(ASe," \u2014 "),UW=n(ASe,"A",{href:!0});var xvt=s(UW);Ggr=r(xvt,"TFXLNetLMHeadModel"),xvt.forEach(t),Ogr=r(ASe," (XLNet model)"),ASe.forEach(t),le.forEach(t),Vgr=i(pl),T(r4.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iNe=i(f),Wd=n(f,"H2",{class:!0});var hDe=s(Wd);t4=n(hDe,"A",{id:!0,class:!0,href:!0});var $vt=s(t4);r7e=n($vt,"SPAN",{});var kvt=s(r7e);T(n8.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),Xgr=i(hDe),t7e=n(hDe,"SPAN",{});var Svt=s(t7e);zgr=r(Svt,"TFAutoModelForCausalLM"),Svt.forEach(t),hDe.forEach(t),dNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(s8.$$.fragment,_l),Wgr=i(_l),Qd=n(_l,"P",{});var qZ=s(Qd);Qgr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JW=n(qZ,"A",{href:!0});var Rvt=s(JW);Hgr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),Ugr=r(qZ," class method or the "),YW=n(qZ,"A",{href:!0});var Pvt=s(YW);Jgr=r(Pvt,"from_config()"),Pvt.forEach(t),Ygr=r(qZ,` class
method.`),qZ.forEach(t),Kgr=i(_l),l8=n(_l,"P",{});var pDe=s(l8);Zgr=r(pDe,"This class cannot be instantiated directly using "),a7e=n(pDe,"CODE",{});var Bvt=s(a7e);ehr=r(Bvt,"__init__()"),Bvt.forEach(t),ohr=r(pDe," (throws an error)."),pDe.forEach(t),rhr=i(_l),xt=n(_l,"DIV",{class:!0});var pA=s(xt);T(i8.$$.fragment,pA),thr=i(pA),n7e=n(pA,"P",{});var Ivt=s(n7e);ahr=r(Ivt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ivt.forEach(t),nhr=i(pA),Hd=n(pA,"P",{});var NZ=s(Hd);shr=r(NZ,`Note:
Loading a model from its configuration file does `),s7e=n(NZ,"STRONG",{});var qvt=s(s7e);lhr=r(qvt,"not"),qvt.forEach(t),ihr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(NZ,"A",{href:!0});var Nvt=s(KW);dhr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),chr=r(NZ," to load the model weights."),NZ.forEach(t),fhr=i(pA),T(a4.$$.fragment,pA),pA.forEach(t),mhr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(d8.$$.fragment,ul),ghr=i(ul),l7e=n(ul,"P",{});var jvt=s(l7e);hhr=r(jvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jvt.forEach(t),phr=i(ul),en=n(ul,"P",{});var _A=s(en);_hr=r(_A,"The model class to instantiate is selected based on the "),i7e=n(_A,"CODE",{});var Dvt=s(i7e);uhr=r(Dvt,"model_type"),Dvt.forEach(t),bhr=r(_A,` property of the config object (either
passed as an argument or loaded from `),d7e=n(_A,"CODE",{});var Gvt=s(d7e);vhr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),Fhr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(_A,"CODE",{});var Ovt=s(c7e);Thr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),Mhr=r(_A,":"),_A.forEach(t),Ehr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);n4=n(Ce,"LI",{});var ySe=s(n4);f7e=n(ySe,"STRONG",{});var Vvt=s(f7e);Chr=r(Vvt,"bert"),Vvt.forEach(t),whr=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var Xvt=s(ZW);Ahr=r(Xvt,"TFBertLMHeadModel"),Xvt.forEach(t),yhr=r(ySe," (BERT model)"),ySe.forEach(t),Lhr=i(Ce),s4=n(Ce,"LI",{});var LSe=s(s4);m7e=n(LSe,"STRONG",{});var zvt=s(m7e);xhr=r(zvt,"camembert"),zvt.forEach(t),$hr=r(LSe," \u2014 "),eQ=n(LSe,"A",{href:!0});var Wvt=s(eQ);khr=r(Wvt,"TFCamembertForCausalLM"),Wvt.forEach(t),Shr=r(LSe," (CamemBERT model)"),LSe.forEach(t),Rhr=i(Ce),l4=n(Ce,"LI",{});var xSe=s(l4);g7e=n(xSe,"STRONG",{});var Qvt=s(g7e);Phr=r(Qvt,"ctrl"),Qvt.forEach(t),Bhr=r(xSe," \u2014 "),oQ=n(xSe,"A",{href:!0});var Hvt=s(oQ);Ihr=r(Hvt,"TFCTRLLMHeadModel"),Hvt.forEach(t),qhr=r(xSe," (CTRL model)"),xSe.forEach(t),Nhr=i(Ce),i4=n(Ce,"LI",{});var $Se=s(i4);h7e=n($Se,"STRONG",{});var Uvt=s(h7e);jhr=r(Uvt,"gpt2"),Uvt.forEach(t),Dhr=r($Se," \u2014 "),rQ=n($Se,"A",{href:!0});var Jvt=s(rQ);Ghr=r(Jvt,"TFGPT2LMHeadModel"),Jvt.forEach(t),Ohr=r($Se," (OpenAI GPT-2 model)"),$Se.forEach(t),Vhr=i(Ce),d4=n(Ce,"LI",{});var kSe=s(d4);p7e=n(kSe,"STRONG",{});var Yvt=s(p7e);Xhr=r(Yvt,"gptj"),Yvt.forEach(t),zhr=r(kSe," \u2014 "),tQ=n(kSe,"A",{href:!0});var Kvt=s(tQ);Whr=r(Kvt,"TFGPTJForCausalLM"),Kvt.forEach(t),Qhr=r(kSe," (GPT-J model)"),kSe.forEach(t),Hhr=i(Ce),c4=n(Ce,"LI",{});var SSe=s(c4);_7e=n(SSe,"STRONG",{});var Zvt=s(_7e);Uhr=r(Zvt,"openai-gpt"),Zvt.forEach(t),Jhr=r(SSe," \u2014 "),aQ=n(SSe,"A",{href:!0});var eFt=s(aQ);Yhr=r(eFt,"TFOpenAIGPTLMHeadModel"),eFt.forEach(t),Khr=r(SSe," (OpenAI GPT model)"),SSe.forEach(t),Zhr=i(Ce),f4=n(Ce,"LI",{});var RSe=s(f4);u7e=n(RSe,"STRONG",{});var oFt=s(u7e);epr=r(oFt,"opt"),oFt.forEach(t),opr=r(RSe," \u2014 "),b7e=n(RSe,"CODE",{});var rFt=s(b7e);rpr=r(rFt,"TFOPTForCausalLM"),rFt.forEach(t),tpr=r(RSe," (OPT model)"),RSe.forEach(t),apr=i(Ce),m4=n(Ce,"LI",{});var PSe=s(m4);v7e=n(PSe,"STRONG",{});var tFt=s(v7e);npr=r(tFt,"rembert"),tFt.forEach(t),spr=r(PSe," \u2014 "),nQ=n(PSe,"A",{href:!0});var aFt=s(nQ);lpr=r(aFt,"TFRemBertForCausalLM"),aFt.forEach(t),ipr=r(PSe," (RemBERT model)"),PSe.forEach(t),dpr=i(Ce),g4=n(Ce,"LI",{});var BSe=s(g4);F7e=n(BSe,"STRONG",{});var nFt=s(F7e);cpr=r(nFt,"roberta"),nFt.forEach(t),fpr=r(BSe," \u2014 "),sQ=n(BSe,"A",{href:!0});var sFt=s(sQ);mpr=r(sFt,"TFRobertaForCausalLM"),sFt.forEach(t),gpr=r(BSe," (RoBERTa model)"),BSe.forEach(t),hpr=i(Ce),h4=n(Ce,"LI",{});var ISe=s(h4);T7e=n(ISe,"STRONG",{});var lFt=s(T7e);ppr=r(lFt,"roformer"),lFt.forEach(t),_pr=r(ISe," \u2014 "),lQ=n(ISe,"A",{href:!0});var iFt=s(lQ);upr=r(iFt,"TFRoFormerForCausalLM"),iFt.forEach(t),bpr=r(ISe," (RoFormer model)"),ISe.forEach(t),vpr=i(Ce),p4=n(Ce,"LI",{});var qSe=s(p4);M7e=n(qSe,"STRONG",{});var dFt=s(M7e);Fpr=r(dFt,"transfo-xl"),dFt.forEach(t),Tpr=r(qSe," \u2014 "),iQ=n(qSe,"A",{href:!0});var cFt=s(iQ);Mpr=r(cFt,"TFTransfoXLLMHeadModel"),cFt.forEach(t),Epr=r(qSe," (Transformer-XL model)"),qSe.forEach(t),Cpr=i(Ce),_4=n(Ce,"LI",{});var NSe=s(_4);E7e=n(NSe,"STRONG",{});var fFt=s(E7e);wpr=r(fFt,"xlm"),fFt.forEach(t),Apr=r(NSe," \u2014 "),dQ=n(NSe,"A",{href:!0});var mFt=s(dQ);ypr=r(mFt,"TFXLMWithLMHeadModel"),mFt.forEach(t),Lpr=r(NSe," (XLM model)"),NSe.forEach(t),xpr=i(Ce),u4=n(Ce,"LI",{});var jSe=s(u4);C7e=n(jSe,"STRONG",{});var gFt=s(C7e);$pr=r(gFt,"xlnet"),gFt.forEach(t),kpr=r(jSe," \u2014 "),cQ=n(jSe,"A",{href:!0});var hFt=s(cQ);Spr=r(hFt,"TFXLNetLMHeadModel"),hFt.forEach(t),Rpr=r(jSe," (XLNet model)"),jSe.forEach(t),Ce.forEach(t),Ppr=i(ul),T(b4.$$.fragment,ul),ul.forEach(t),_l.forEach(t),cNe=i(f),Ud=n(f,"H2",{class:!0});var _De=s(Ud);v4=n(_De,"A",{id:!0,class:!0,href:!0});var pFt=s(v4);w7e=n(pFt,"SPAN",{});var _Ft=s(w7e);T(c8.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),Bpr=i(_De),A7e=n(_De,"SPAN",{});var uFt=s(A7e);Ipr=r(uFt,"TFAutoModelForImageClassification"),uFt.forEach(t),_De.forEach(t),fNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(f8.$$.fragment,bl),qpr=i(bl),Jd=n(bl,"P",{});var jZ=s(Jd);Npr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fQ=n(jZ,"A",{href:!0});var bFt=s(fQ);jpr=r(bFt,"from_pretrained()"),bFt.forEach(t),Dpr=r(jZ," class method or the "),mQ=n(jZ,"A",{href:!0});var vFt=s(mQ);Gpr=r(vFt,"from_config()"),vFt.forEach(t),Opr=r(jZ,` class
method.`),jZ.forEach(t),Vpr=i(bl),m8=n(bl,"P",{});var uDe=s(m8);Xpr=r(uDe,"This class cannot be instantiated directly using "),y7e=n(uDe,"CODE",{});var FFt=s(y7e);zpr=r(FFt,"__init__()"),FFt.forEach(t),Wpr=r(uDe," (throws an error)."),uDe.forEach(t),Qpr=i(bl),$t=n(bl,"DIV",{class:!0});var uA=s($t);T(g8.$$.fragment,uA),Hpr=i(uA),L7e=n(uA,"P",{});var TFt=s(L7e);Upr=r(TFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TFt.forEach(t),Jpr=i(uA),Yd=n(uA,"P",{});var DZ=s(Yd);Ypr=r(DZ,`Note:
Loading a model from its configuration file does `),x7e=n(DZ,"STRONG",{});var MFt=s(x7e);Kpr=r(MFt,"not"),MFt.forEach(t),Zpr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(DZ,"A",{href:!0});var EFt=s(gQ);e_r=r(EFt,"from_pretrained()"),EFt.forEach(t),o_r=r(DZ," to load the model weights."),DZ.forEach(t),r_r=i(uA),T(F4.$$.fragment,uA),uA.forEach(t),t_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(h8.$$.fragment,vl),a_r=i(vl),$7e=n(vl,"P",{});var CFt=s($7e);n_r=r(CFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CFt.forEach(t),s_r=i(vl),on=n(vl,"P",{});var bA=s(on);l_r=r(bA,"The model class to instantiate is selected based on the "),k7e=n(bA,"CODE",{});var wFt=s(k7e);i_r=r(wFt,"model_type"),wFt.forEach(t),d_r=r(bA,` property of the config object (either
passed as an argument or loaded from `),S7e=n(bA,"CODE",{});var AFt=s(S7e);c_r=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),f_r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(bA,"CODE",{});var yFt=s(R7e);m_r=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),g_r=r(bA,":"),bA.forEach(t),h_r=i(vl),rn=n(vl,"UL",{});var vA=s(rn);T4=n(vA,"LI",{});var DSe=s(T4);P7e=n(DSe,"STRONG",{});var LFt=s(P7e);p_r=r(LFt,"convnext"),LFt.forEach(t),__r=r(DSe," \u2014 "),hQ=n(DSe,"A",{href:!0});var xFt=s(hQ);u_r=r(xFt,"TFConvNextForImageClassification"),xFt.forEach(t),b_r=r(DSe," (ConvNext model)"),DSe.forEach(t),v_r=i(vA),M4=n(vA,"LI",{});var GSe=s(M4);B7e=n(GSe,"STRONG",{});var $Ft=s(B7e);F_r=r($Ft,"data2vec-vision"),$Ft.forEach(t),T_r=r(GSe," \u2014 "),pQ=n(GSe,"A",{href:!0});var kFt=s(pQ);M_r=r(kFt,"TFData2VecVisionForImageClassification"),kFt.forEach(t),E_r=r(GSe," (Data2VecVision model)"),GSe.forEach(t),C_r=i(vA),E4=n(vA,"LI",{});var OSe=s(E4);I7e=n(OSe,"STRONG",{});var SFt=s(I7e);w_r=r(SFt,"swin"),SFt.forEach(t),A_r=r(OSe," \u2014 "),_Q=n(OSe,"A",{href:!0});var RFt=s(_Q);y_r=r(RFt,"TFSwinForImageClassification"),RFt.forEach(t),L_r=r(OSe," (Swin model)"),OSe.forEach(t),x_r=i(vA),C4=n(vA,"LI",{});var VSe=s(C4);q7e=n(VSe,"STRONG",{});var PFt=s(q7e);$_r=r(PFt,"vit"),PFt.forEach(t),k_r=r(VSe," \u2014 "),uQ=n(VSe,"A",{href:!0});var BFt=s(uQ);S_r=r(BFt,"TFViTForImageClassification"),BFt.forEach(t),R_r=r(VSe," (ViT model)"),VSe.forEach(t),vA.forEach(t),P_r=i(vl),T(w4.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mNe=i(f),Kd=n(f,"H2",{class:!0});var bDe=s(Kd);A4=n(bDe,"A",{id:!0,class:!0,href:!0});var IFt=s(A4);N7e=n(IFt,"SPAN",{});var qFt=s(N7e);T(p8.$$.fragment,qFt),qFt.forEach(t),IFt.forEach(t),B_r=i(bDe),j7e=n(bDe,"SPAN",{});var NFt=s(j7e);I_r=r(NFt,"TFAutoModelForMaskedLM"),NFt.forEach(t),bDe.forEach(t),gNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(_8.$$.fragment,Fl),q_r=i(Fl),Zd=n(Fl,"P",{});var GZ=s(Zd);N_r=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bQ=n(GZ,"A",{href:!0});var jFt=s(bQ);j_r=r(jFt,"from_pretrained()"),jFt.forEach(t),D_r=r(GZ," class method or the "),vQ=n(GZ,"A",{href:!0});var DFt=s(vQ);G_r=r(DFt,"from_config()"),DFt.forEach(t),O_r=r(GZ,` class
method.`),GZ.forEach(t),V_r=i(Fl),u8=n(Fl,"P",{});var vDe=s(u8);X_r=r(vDe,"This class cannot be instantiated directly using "),D7e=n(vDe,"CODE",{});var GFt=s(D7e);z_r=r(GFt,"__init__()"),GFt.forEach(t),W_r=r(vDe," (throws an error)."),vDe.forEach(t),Q_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var FA=s(kt);T(b8.$$.fragment,FA),H_r=i(FA),G7e=n(FA,"P",{});var OFt=s(G7e);U_r=r(OFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OFt.forEach(t),J_r=i(FA),ec=n(FA,"P",{});var OZ=s(ec);Y_r=r(OZ,`Note:
Loading a model from its configuration file does `),O7e=n(OZ,"STRONG",{});var VFt=s(O7e);K_r=r(VFt,"not"),VFt.forEach(t),Z_r=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(OZ,"A",{href:!0});var XFt=s(FQ);eur=r(XFt,"from_pretrained()"),XFt.forEach(t),our=r(OZ," to load the model weights."),OZ.forEach(t),rur=i(FA),T(y4.$$.fragment,FA),FA.forEach(t),tur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(v8.$$.fragment,Tl),aur=i(Tl),V7e=n(Tl,"P",{});var zFt=s(V7e);nur=r(zFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zFt.forEach(t),sur=i(Tl),tn=n(Tl,"P",{});var TA=s(tn);lur=r(TA,"The model class to instantiate is selected based on the "),X7e=n(TA,"CODE",{});var WFt=s(X7e);iur=r(WFt,"model_type"),WFt.forEach(t),dur=r(TA,` property of the config object (either
passed as an argument or loaded from `),z7e=n(TA,"CODE",{});var QFt=s(z7e);cur=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),fur=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(TA,"CODE",{});var HFt=s(W7e);mur=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),gur=r(TA,":"),TA.forEach(t),hur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);L4=n(fe,"LI",{});var XSe=s(L4);Q7e=n(XSe,"STRONG",{});var UFt=s(Q7e);pur=r(UFt,"albert"),UFt.forEach(t),_ur=r(XSe," \u2014 "),TQ=n(XSe,"A",{href:!0});var JFt=s(TQ);uur=r(JFt,"TFAlbertForMaskedLM"),JFt.forEach(t),bur=r(XSe," (ALBERT model)"),XSe.forEach(t),vur=i(fe),x4=n(fe,"LI",{});var zSe=s(x4);H7e=n(zSe,"STRONG",{});var YFt=s(H7e);Fur=r(YFt,"bert"),YFt.forEach(t),Tur=r(zSe," \u2014 "),MQ=n(zSe,"A",{href:!0});var KFt=s(MQ);Mur=r(KFt,"TFBertForMaskedLM"),KFt.forEach(t),Eur=r(zSe," (BERT model)"),zSe.forEach(t),Cur=i(fe),$4=n(fe,"LI",{});var WSe=s($4);U7e=n(WSe,"STRONG",{});var ZFt=s(U7e);wur=r(ZFt,"camembert"),ZFt.forEach(t),Aur=r(WSe," \u2014 "),EQ=n(WSe,"A",{href:!0});var eTt=s(EQ);yur=r(eTt,"TFCamembertForMaskedLM"),eTt.forEach(t),Lur=r(WSe," (CamemBERT model)"),WSe.forEach(t),xur=i(fe),k4=n(fe,"LI",{});var QSe=s(k4);J7e=n(QSe,"STRONG",{});var oTt=s(J7e);$ur=r(oTt,"convbert"),oTt.forEach(t),kur=r(QSe," \u2014 "),CQ=n(QSe,"A",{href:!0});var rTt=s(CQ);Sur=r(rTt,"TFConvBertForMaskedLM"),rTt.forEach(t),Rur=r(QSe," (ConvBERT model)"),QSe.forEach(t),Pur=i(fe),S4=n(fe,"LI",{});var HSe=s(S4);Y7e=n(HSe,"STRONG",{});var tTt=s(Y7e);Bur=r(tTt,"deberta"),tTt.forEach(t),Iur=r(HSe," \u2014 "),wQ=n(HSe,"A",{href:!0});var aTt=s(wQ);qur=r(aTt,"TFDebertaForMaskedLM"),aTt.forEach(t),Nur=r(HSe," (DeBERTa model)"),HSe.forEach(t),jur=i(fe),R4=n(fe,"LI",{});var USe=s(R4);K7e=n(USe,"STRONG",{});var nTt=s(K7e);Dur=r(nTt,"deberta-v2"),nTt.forEach(t),Gur=r(USe," \u2014 "),AQ=n(USe,"A",{href:!0});var sTt=s(AQ);Our=r(sTt,"TFDebertaV2ForMaskedLM"),sTt.forEach(t),Vur=r(USe," (DeBERTa-v2 model)"),USe.forEach(t),Xur=i(fe),P4=n(fe,"LI",{});var JSe=s(P4);Z7e=n(JSe,"STRONG",{});var lTt=s(Z7e);zur=r(lTt,"distilbert"),lTt.forEach(t),Wur=r(JSe," \u2014 "),yQ=n(JSe,"A",{href:!0});var iTt=s(yQ);Qur=r(iTt,"TFDistilBertForMaskedLM"),iTt.forEach(t),Hur=r(JSe," (DistilBERT model)"),JSe.forEach(t),Uur=i(fe),B4=n(fe,"LI",{});var YSe=s(B4);ebe=n(YSe,"STRONG",{});var dTt=s(ebe);Jur=r(dTt,"electra"),dTt.forEach(t),Yur=r(YSe," \u2014 "),LQ=n(YSe,"A",{href:!0});var cTt=s(LQ);Kur=r(cTt,"TFElectraForMaskedLM"),cTt.forEach(t),Zur=r(YSe," (ELECTRA model)"),YSe.forEach(t),e2r=i(fe),I4=n(fe,"LI",{});var KSe=s(I4);obe=n(KSe,"STRONG",{});var fTt=s(obe);o2r=r(fTt,"flaubert"),fTt.forEach(t),r2r=r(KSe," \u2014 "),xQ=n(KSe,"A",{href:!0});var mTt=s(xQ);t2r=r(mTt,"TFFlaubertWithLMHeadModel"),mTt.forEach(t),a2r=r(KSe," (FlauBERT model)"),KSe.forEach(t),n2r=i(fe),q4=n(fe,"LI",{});var ZSe=s(q4);rbe=n(ZSe,"STRONG",{});var gTt=s(rbe);s2r=r(gTt,"funnel"),gTt.forEach(t),l2r=r(ZSe," \u2014 "),$Q=n(ZSe,"A",{href:!0});var hTt=s($Q);i2r=r(hTt,"TFFunnelForMaskedLM"),hTt.forEach(t),d2r=r(ZSe," (Funnel Transformer model)"),ZSe.forEach(t),c2r=i(fe),N4=n(fe,"LI",{});var eRe=s(N4);tbe=n(eRe,"STRONG",{});var pTt=s(tbe);f2r=r(pTt,"layoutlm"),pTt.forEach(t),m2r=r(eRe," \u2014 "),kQ=n(eRe,"A",{href:!0});var _Tt=s(kQ);g2r=r(_Tt,"TFLayoutLMForMaskedLM"),_Tt.forEach(t),h2r=r(eRe," (LayoutLM model)"),eRe.forEach(t),p2r=i(fe),j4=n(fe,"LI",{});var oRe=s(j4);abe=n(oRe,"STRONG",{});var uTt=s(abe);_2r=r(uTt,"longformer"),uTt.forEach(t),u2r=r(oRe," \u2014 "),SQ=n(oRe,"A",{href:!0});var bTt=s(SQ);b2r=r(bTt,"TFLongformerForMaskedLM"),bTt.forEach(t),v2r=r(oRe," (Longformer model)"),oRe.forEach(t),F2r=i(fe),D4=n(fe,"LI",{});var rRe=s(D4);nbe=n(rRe,"STRONG",{});var vTt=s(nbe);T2r=r(vTt,"mobilebert"),vTt.forEach(t),M2r=r(rRe," \u2014 "),RQ=n(rRe,"A",{href:!0});var FTt=s(RQ);E2r=r(FTt,"TFMobileBertForMaskedLM"),FTt.forEach(t),C2r=r(rRe," (MobileBERT model)"),rRe.forEach(t),w2r=i(fe),G4=n(fe,"LI",{});var tRe=s(G4);sbe=n(tRe,"STRONG",{});var TTt=s(sbe);A2r=r(TTt,"mpnet"),TTt.forEach(t),y2r=r(tRe," \u2014 "),PQ=n(tRe,"A",{href:!0});var MTt=s(PQ);L2r=r(MTt,"TFMPNetForMaskedLM"),MTt.forEach(t),x2r=r(tRe," (MPNet model)"),tRe.forEach(t),$2r=i(fe),O4=n(fe,"LI",{});var aRe=s(O4);lbe=n(aRe,"STRONG",{});var ETt=s(lbe);k2r=r(ETt,"rembert"),ETt.forEach(t),S2r=r(aRe," \u2014 "),BQ=n(aRe,"A",{href:!0});var CTt=s(BQ);R2r=r(CTt,"TFRemBertForMaskedLM"),CTt.forEach(t),P2r=r(aRe," (RemBERT model)"),aRe.forEach(t),B2r=i(fe),V4=n(fe,"LI",{});var nRe=s(V4);ibe=n(nRe,"STRONG",{});var wTt=s(ibe);I2r=r(wTt,"roberta"),wTt.forEach(t),q2r=r(nRe," \u2014 "),IQ=n(nRe,"A",{href:!0});var ATt=s(IQ);N2r=r(ATt,"TFRobertaForMaskedLM"),ATt.forEach(t),j2r=r(nRe," (RoBERTa model)"),nRe.forEach(t),D2r=i(fe),X4=n(fe,"LI",{});var sRe=s(X4);dbe=n(sRe,"STRONG",{});var yTt=s(dbe);G2r=r(yTt,"roformer"),yTt.forEach(t),O2r=r(sRe," \u2014 "),qQ=n(sRe,"A",{href:!0});var LTt=s(qQ);V2r=r(LTt,"TFRoFormerForMaskedLM"),LTt.forEach(t),X2r=r(sRe," (RoFormer model)"),sRe.forEach(t),z2r=i(fe),z4=n(fe,"LI",{});var lRe=s(z4);cbe=n(lRe,"STRONG",{});var xTt=s(cbe);W2r=r(xTt,"tapas"),xTt.forEach(t),Q2r=r(lRe," \u2014 "),NQ=n(lRe,"A",{href:!0});var $Tt=s(NQ);H2r=r($Tt,"TFTapasForMaskedLM"),$Tt.forEach(t),U2r=r(lRe," (TAPAS model)"),lRe.forEach(t),J2r=i(fe),W4=n(fe,"LI",{});var iRe=s(W4);fbe=n(iRe,"STRONG",{});var kTt=s(fbe);Y2r=r(kTt,"xlm"),kTt.forEach(t),K2r=r(iRe," \u2014 "),jQ=n(iRe,"A",{href:!0});var STt=s(jQ);Z2r=r(STt,"TFXLMWithLMHeadModel"),STt.forEach(t),e1r=r(iRe," (XLM model)"),iRe.forEach(t),o1r=i(fe),Q4=n(fe,"LI",{});var dRe=s(Q4);mbe=n(dRe,"STRONG",{});var RTt=s(mbe);r1r=r(RTt,"xlm-roberta"),RTt.forEach(t),t1r=r(dRe," \u2014 "),DQ=n(dRe,"A",{href:!0});var PTt=s(DQ);a1r=r(PTt,"TFXLMRobertaForMaskedLM"),PTt.forEach(t),n1r=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),fe.forEach(t),s1r=i(Tl),T(H4.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hNe=i(f),oc=n(f,"H2",{class:!0});var FDe=s(oc);U4=n(FDe,"A",{id:!0,class:!0,href:!0});var BTt=s(U4);gbe=n(BTt,"SPAN",{});var ITt=s(gbe);T(F8.$$.fragment,ITt),ITt.forEach(t),BTt.forEach(t),l1r=i(FDe),hbe=n(FDe,"SPAN",{});var qTt=s(hbe);i1r=r(qTt,"TFAutoModelForSeq2SeqLM"),qTt.forEach(t),FDe.forEach(t),pNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(T8.$$.fragment,Ml),d1r=i(Ml),rc=n(Ml,"P",{});var VZ=s(rc);c1r=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GQ=n(VZ,"A",{href:!0});var NTt=s(GQ);f1r=r(NTt,"from_pretrained()"),NTt.forEach(t),m1r=r(VZ," class method or the "),OQ=n(VZ,"A",{href:!0});var jTt=s(OQ);g1r=r(jTt,"from_config()"),jTt.forEach(t),h1r=r(VZ,` class
method.`),VZ.forEach(t),p1r=i(Ml),M8=n(Ml,"P",{});var TDe=s(M8);_1r=r(TDe,"This class cannot be instantiated directly using "),pbe=n(TDe,"CODE",{});var DTt=s(pbe);u1r=r(DTt,"__init__()"),DTt.forEach(t),b1r=r(TDe," (throws an error)."),TDe.forEach(t),v1r=i(Ml),St=n(Ml,"DIV",{class:!0});var MA=s(St);T(E8.$$.fragment,MA),F1r=i(MA),_be=n(MA,"P",{});var GTt=s(_be);T1r=r(GTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GTt.forEach(t),M1r=i(MA),tc=n(MA,"P",{});var XZ=s(tc);E1r=r(XZ,`Note:
Loading a model from its configuration file does `),ube=n(XZ,"STRONG",{});var OTt=s(ube);C1r=r(OTt,"not"),OTt.forEach(t),w1r=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(XZ,"A",{href:!0});var VTt=s(VQ);A1r=r(VTt,"from_pretrained()"),VTt.forEach(t),y1r=r(XZ," to load the model weights."),XZ.forEach(t),L1r=i(MA),T(J4.$$.fragment,MA),MA.forEach(t),x1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(C8.$$.fragment,El),$1r=i(El),bbe=n(El,"P",{});var XTt=s(bbe);k1r=r(XTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XTt.forEach(t),S1r=i(El),an=n(El,"P",{});var EA=s(an);R1r=r(EA,"The model class to instantiate is selected based on the "),vbe=n(EA,"CODE",{});var zTt=s(vbe);P1r=r(zTt,"model_type"),zTt.forEach(t),B1r=r(EA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(EA,"CODE",{});var WTt=s(Fbe);I1r=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),q1r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(EA,"CODE",{});var QTt=s(Tbe);N1r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),j1r=r(EA,":"),EA.forEach(t),D1r=i(El),ye=n(El,"UL",{});var Be=s(ye);Y4=n(Be,"LI",{});var cRe=s(Y4);Mbe=n(cRe,"STRONG",{});var HTt=s(Mbe);G1r=r(HTt,"bart"),HTt.forEach(t),O1r=r(cRe," \u2014 "),XQ=n(cRe,"A",{href:!0});var UTt=s(XQ);V1r=r(UTt,"TFBartForConditionalGeneration"),UTt.forEach(t),X1r=r(cRe," (BART model)"),cRe.forEach(t),z1r=i(Be),K4=n(Be,"LI",{});var fRe=s(K4);Ebe=n(fRe,"STRONG",{});var JTt=s(Ebe);W1r=r(JTt,"blenderbot"),JTt.forEach(t),Q1r=r(fRe," \u2014 "),zQ=n(fRe,"A",{href:!0});var YTt=s(zQ);H1r=r(YTt,"TFBlenderbotForConditionalGeneration"),YTt.forEach(t),U1r=r(fRe," (Blenderbot model)"),fRe.forEach(t),J1r=i(Be),Z4=n(Be,"LI",{});var mRe=s(Z4);Cbe=n(mRe,"STRONG",{});var KTt=s(Cbe);Y1r=r(KTt,"blenderbot-small"),KTt.forEach(t),K1r=r(mRe," \u2014 "),WQ=n(mRe,"A",{href:!0});var ZTt=s(WQ);Z1r=r(ZTt,"TFBlenderbotSmallForConditionalGeneration"),ZTt.forEach(t),e7r=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),o7r=i(Be),eE=n(Be,"LI",{});var gRe=s(eE);wbe=n(gRe,"STRONG",{});var eMt=s(wbe);r7r=r(eMt,"encoder-decoder"),eMt.forEach(t),t7r=r(gRe," \u2014 "),QQ=n(gRe,"A",{href:!0});var oMt=s(QQ);a7r=r(oMt,"TFEncoderDecoderModel"),oMt.forEach(t),n7r=r(gRe," (Encoder decoder model)"),gRe.forEach(t),s7r=i(Be),oE=n(Be,"LI",{});var hRe=s(oE);Abe=n(hRe,"STRONG",{});var rMt=s(Abe);l7r=r(rMt,"led"),rMt.forEach(t),i7r=r(hRe," \u2014 "),HQ=n(hRe,"A",{href:!0});var tMt=s(HQ);d7r=r(tMt,"TFLEDForConditionalGeneration"),tMt.forEach(t),c7r=r(hRe," (LED model)"),hRe.forEach(t),f7r=i(Be),rE=n(Be,"LI",{});var pRe=s(rE);ybe=n(pRe,"STRONG",{});var aMt=s(ybe);m7r=r(aMt,"marian"),aMt.forEach(t),g7r=r(pRe," \u2014 "),UQ=n(pRe,"A",{href:!0});var nMt=s(UQ);h7r=r(nMt,"TFMarianMTModel"),nMt.forEach(t),p7r=r(pRe," (Marian model)"),pRe.forEach(t),_7r=i(Be),tE=n(Be,"LI",{});var _Re=s(tE);Lbe=n(_Re,"STRONG",{});var sMt=s(Lbe);u7r=r(sMt,"mbart"),sMt.forEach(t),b7r=r(_Re," \u2014 "),JQ=n(_Re,"A",{href:!0});var lMt=s(JQ);v7r=r(lMt,"TFMBartForConditionalGeneration"),lMt.forEach(t),F7r=r(_Re," (mBART model)"),_Re.forEach(t),T7r=i(Be),aE=n(Be,"LI",{});var uRe=s(aE);xbe=n(uRe,"STRONG",{});var iMt=s(xbe);M7r=r(iMt,"mt5"),iMt.forEach(t),E7r=r(uRe," \u2014 "),YQ=n(uRe,"A",{href:!0});var dMt=s(YQ);C7r=r(dMt,"TFMT5ForConditionalGeneration"),dMt.forEach(t),w7r=r(uRe," (mT5 model)"),uRe.forEach(t),A7r=i(Be),nE=n(Be,"LI",{});var bRe=s(nE);$be=n(bRe,"STRONG",{});var cMt=s($be);y7r=r(cMt,"pegasus"),cMt.forEach(t),L7r=r(bRe," \u2014 "),KQ=n(bRe,"A",{href:!0});var fMt=s(KQ);x7r=r(fMt,"TFPegasusForConditionalGeneration"),fMt.forEach(t),$7r=r(bRe," (Pegasus model)"),bRe.forEach(t),k7r=i(Be),sE=n(Be,"LI",{});var vRe=s(sE);kbe=n(vRe,"STRONG",{});var mMt=s(kbe);S7r=r(mMt,"t5"),mMt.forEach(t),R7r=r(vRe," \u2014 "),ZQ=n(vRe,"A",{href:!0});var gMt=s(ZQ);P7r=r(gMt,"TFT5ForConditionalGeneration"),gMt.forEach(t),B7r=r(vRe," (T5 model)"),vRe.forEach(t),Be.forEach(t),I7r=i(El),T(lE.$$.fragment,El),El.forEach(t),Ml.forEach(t),_Ne=i(f),ac=n(f,"H2",{class:!0});var MDe=s(ac);iE=n(MDe,"A",{id:!0,class:!0,href:!0});var hMt=s(iE);Sbe=n(hMt,"SPAN",{});var pMt=s(Sbe);T(w8.$$.fragment,pMt),pMt.forEach(t),hMt.forEach(t),q7r=i(MDe),Rbe=n(MDe,"SPAN",{});var _Mt=s(Rbe);N7r=r(_Mt,"TFAutoModelForSequenceClassification"),_Mt.forEach(t),MDe.forEach(t),uNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(A8.$$.fragment,Cl),j7r=i(Cl),nc=n(Cl,"P",{});var zZ=s(nc);D7r=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eH=n(zZ,"A",{href:!0});var uMt=s(eH);G7r=r(uMt,"from_pretrained()"),uMt.forEach(t),O7r=r(zZ," class method or the "),oH=n(zZ,"A",{href:!0});var bMt=s(oH);V7r=r(bMt,"from_config()"),bMt.forEach(t),X7r=r(zZ,` class
method.`),zZ.forEach(t),z7r=i(Cl),y8=n(Cl,"P",{});var EDe=s(y8);W7r=r(EDe,"This class cannot be instantiated directly using "),Pbe=n(EDe,"CODE",{});var vMt=s(Pbe);Q7r=r(vMt,"__init__()"),vMt.forEach(t),H7r=r(EDe," (throws an error)."),EDe.forEach(t),U7r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var CA=s(Rt);T(L8.$$.fragment,CA),J7r=i(CA),Bbe=n(CA,"P",{});var FMt=s(Bbe);Y7r=r(FMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FMt.forEach(t),K7r=i(CA),sc=n(CA,"P",{});var WZ=s(sc);Z7r=r(WZ,`Note:
Loading a model from its configuration file does `),Ibe=n(WZ,"STRONG",{});var TMt=s(Ibe);ebr=r(TMt,"not"),TMt.forEach(t),obr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(WZ,"A",{href:!0});var MMt=s(rH);rbr=r(MMt,"from_pretrained()"),MMt.forEach(t),tbr=r(WZ," to load the model weights."),WZ.forEach(t),abr=i(CA),T(dE.$$.fragment,CA),CA.forEach(t),nbr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(x8.$$.fragment,wl),sbr=i(wl),qbe=n(wl,"P",{});var EMt=s(qbe);lbr=r(EMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EMt.forEach(t),ibr=i(wl),nn=n(wl,"P",{});var wA=s(nn);dbr=r(wA,"The model class to instantiate is selected based on the "),Nbe=n(wA,"CODE",{});var CMt=s(Nbe);cbr=r(CMt,"model_type"),CMt.forEach(t),fbr=r(wA,` property of the config object (either
passed as an argument or loaded from `),jbe=n(wA,"CODE",{});var wMt=s(jbe);mbr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),gbr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(wA,"CODE",{});var AMt=s(Dbe);hbr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),pbr=r(wA,":"),wA.forEach(t),_br=i(wl),ee=n(wl,"UL",{});var ae=s(ee);cE=n(ae,"LI",{});var FRe=s(cE);Gbe=n(FRe,"STRONG",{});var yMt=s(Gbe);ubr=r(yMt,"albert"),yMt.forEach(t),bbr=r(FRe," \u2014 "),tH=n(FRe,"A",{href:!0});var LMt=s(tH);vbr=r(LMt,"TFAlbertForSequenceClassification"),LMt.forEach(t),Fbr=r(FRe," (ALBERT model)"),FRe.forEach(t),Tbr=i(ae),fE=n(ae,"LI",{});var TRe=s(fE);Obe=n(TRe,"STRONG",{});var xMt=s(Obe);Mbr=r(xMt,"bert"),xMt.forEach(t),Ebr=r(TRe," \u2014 "),aH=n(TRe,"A",{href:!0});var $Mt=s(aH);Cbr=r($Mt,"TFBertForSequenceClassification"),$Mt.forEach(t),wbr=r(TRe," (BERT model)"),TRe.forEach(t),Abr=i(ae),mE=n(ae,"LI",{});var MRe=s(mE);Vbe=n(MRe,"STRONG",{});var kMt=s(Vbe);ybr=r(kMt,"camembert"),kMt.forEach(t),Lbr=r(MRe," \u2014 "),nH=n(MRe,"A",{href:!0});var SMt=s(nH);xbr=r(SMt,"TFCamembertForSequenceClassification"),SMt.forEach(t),$br=r(MRe," (CamemBERT model)"),MRe.forEach(t),kbr=i(ae),gE=n(ae,"LI",{});var ERe=s(gE);Xbe=n(ERe,"STRONG",{});var RMt=s(Xbe);Sbr=r(RMt,"convbert"),RMt.forEach(t),Rbr=r(ERe," \u2014 "),sH=n(ERe,"A",{href:!0});var PMt=s(sH);Pbr=r(PMt,"TFConvBertForSequenceClassification"),PMt.forEach(t),Bbr=r(ERe," (ConvBERT model)"),ERe.forEach(t),Ibr=i(ae),hE=n(ae,"LI",{});var CRe=s(hE);zbe=n(CRe,"STRONG",{});var BMt=s(zbe);qbr=r(BMt,"ctrl"),BMt.forEach(t),Nbr=r(CRe," \u2014 "),lH=n(CRe,"A",{href:!0});var IMt=s(lH);jbr=r(IMt,"TFCTRLForSequenceClassification"),IMt.forEach(t),Dbr=r(CRe," (CTRL model)"),CRe.forEach(t),Gbr=i(ae),pE=n(ae,"LI",{});var wRe=s(pE);Wbe=n(wRe,"STRONG",{});var qMt=s(Wbe);Obr=r(qMt,"deberta"),qMt.forEach(t),Vbr=r(wRe," \u2014 "),iH=n(wRe,"A",{href:!0});var NMt=s(iH);Xbr=r(NMt,"TFDebertaForSequenceClassification"),NMt.forEach(t),zbr=r(wRe," (DeBERTa model)"),wRe.forEach(t),Wbr=i(ae),_E=n(ae,"LI",{});var ARe=s(_E);Qbe=n(ARe,"STRONG",{});var jMt=s(Qbe);Qbr=r(jMt,"deberta-v2"),jMt.forEach(t),Hbr=r(ARe," \u2014 "),dH=n(ARe,"A",{href:!0});var DMt=s(dH);Ubr=r(DMt,"TFDebertaV2ForSequenceClassification"),DMt.forEach(t),Jbr=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),Ybr=i(ae),uE=n(ae,"LI",{});var yRe=s(uE);Hbe=n(yRe,"STRONG",{});var GMt=s(Hbe);Kbr=r(GMt,"distilbert"),GMt.forEach(t),Zbr=r(yRe," \u2014 "),cH=n(yRe,"A",{href:!0});var OMt=s(cH);evr=r(OMt,"TFDistilBertForSequenceClassification"),OMt.forEach(t),ovr=r(yRe," (DistilBERT model)"),yRe.forEach(t),rvr=i(ae),bE=n(ae,"LI",{});var LRe=s(bE);Ube=n(LRe,"STRONG",{});var VMt=s(Ube);tvr=r(VMt,"electra"),VMt.forEach(t),avr=r(LRe," \u2014 "),fH=n(LRe,"A",{href:!0});var XMt=s(fH);nvr=r(XMt,"TFElectraForSequenceClassification"),XMt.forEach(t),svr=r(LRe," (ELECTRA model)"),LRe.forEach(t),lvr=i(ae),vE=n(ae,"LI",{});var xRe=s(vE);Jbe=n(xRe,"STRONG",{});var zMt=s(Jbe);ivr=r(zMt,"flaubert"),zMt.forEach(t),dvr=r(xRe," \u2014 "),mH=n(xRe,"A",{href:!0});var WMt=s(mH);cvr=r(WMt,"TFFlaubertForSequenceClassification"),WMt.forEach(t),fvr=r(xRe," (FlauBERT model)"),xRe.forEach(t),mvr=i(ae),FE=n(ae,"LI",{});var $Re=s(FE);Ybe=n($Re,"STRONG",{});var QMt=s(Ybe);gvr=r(QMt,"funnel"),QMt.forEach(t),hvr=r($Re," \u2014 "),gH=n($Re,"A",{href:!0});var HMt=s(gH);pvr=r(HMt,"TFFunnelForSequenceClassification"),HMt.forEach(t),_vr=r($Re," (Funnel Transformer model)"),$Re.forEach(t),uvr=i(ae),TE=n(ae,"LI",{});var kRe=s(TE);Kbe=n(kRe,"STRONG",{});var UMt=s(Kbe);bvr=r(UMt,"gpt2"),UMt.forEach(t),vvr=r(kRe," \u2014 "),hH=n(kRe,"A",{href:!0});var JMt=s(hH);Fvr=r(JMt,"TFGPT2ForSequenceClassification"),JMt.forEach(t),Tvr=r(kRe," (OpenAI GPT-2 model)"),kRe.forEach(t),Mvr=i(ae),ME=n(ae,"LI",{});var SRe=s(ME);Zbe=n(SRe,"STRONG",{});var YMt=s(Zbe);Evr=r(YMt,"gptj"),YMt.forEach(t),Cvr=r(SRe," \u2014 "),pH=n(SRe,"A",{href:!0});var KMt=s(pH);wvr=r(KMt,"TFGPTJForSequenceClassification"),KMt.forEach(t),Avr=r(SRe," (GPT-J model)"),SRe.forEach(t),yvr=i(ae),EE=n(ae,"LI",{});var RRe=s(EE);eve=n(RRe,"STRONG",{});var ZMt=s(eve);Lvr=r(ZMt,"layoutlm"),ZMt.forEach(t),xvr=r(RRe," \u2014 "),_H=n(RRe,"A",{href:!0});var e4t=s(_H);$vr=r(e4t,"TFLayoutLMForSequenceClassification"),e4t.forEach(t),kvr=r(RRe," (LayoutLM model)"),RRe.forEach(t),Svr=i(ae),CE=n(ae,"LI",{});var PRe=s(CE);ove=n(PRe,"STRONG",{});var o4t=s(ove);Rvr=r(o4t,"longformer"),o4t.forEach(t),Pvr=r(PRe," \u2014 "),uH=n(PRe,"A",{href:!0});var r4t=s(uH);Bvr=r(r4t,"TFLongformerForSequenceClassification"),r4t.forEach(t),Ivr=r(PRe," (Longformer model)"),PRe.forEach(t),qvr=i(ae),wE=n(ae,"LI",{});var BRe=s(wE);rve=n(BRe,"STRONG",{});var t4t=s(rve);Nvr=r(t4t,"mobilebert"),t4t.forEach(t),jvr=r(BRe," \u2014 "),bH=n(BRe,"A",{href:!0});var a4t=s(bH);Dvr=r(a4t,"TFMobileBertForSequenceClassification"),a4t.forEach(t),Gvr=r(BRe," (MobileBERT model)"),BRe.forEach(t),Ovr=i(ae),AE=n(ae,"LI",{});var IRe=s(AE);tve=n(IRe,"STRONG",{});var n4t=s(tve);Vvr=r(n4t,"mpnet"),n4t.forEach(t),Xvr=r(IRe," \u2014 "),vH=n(IRe,"A",{href:!0});var s4t=s(vH);zvr=r(s4t,"TFMPNetForSequenceClassification"),s4t.forEach(t),Wvr=r(IRe," (MPNet model)"),IRe.forEach(t),Qvr=i(ae),yE=n(ae,"LI",{});var qRe=s(yE);ave=n(qRe,"STRONG",{});var l4t=s(ave);Hvr=r(l4t,"openai-gpt"),l4t.forEach(t),Uvr=r(qRe," \u2014 "),FH=n(qRe,"A",{href:!0});var i4t=s(FH);Jvr=r(i4t,"TFOpenAIGPTForSequenceClassification"),i4t.forEach(t),Yvr=r(qRe," (OpenAI GPT model)"),qRe.forEach(t),Kvr=i(ae),LE=n(ae,"LI",{});var NRe=s(LE);nve=n(NRe,"STRONG",{});var d4t=s(nve);Zvr=r(d4t,"rembert"),d4t.forEach(t),eFr=r(NRe," \u2014 "),TH=n(NRe,"A",{href:!0});var c4t=s(TH);oFr=r(c4t,"TFRemBertForSequenceClassification"),c4t.forEach(t),rFr=r(NRe," (RemBERT model)"),NRe.forEach(t),tFr=i(ae),xE=n(ae,"LI",{});var jRe=s(xE);sve=n(jRe,"STRONG",{});var f4t=s(sve);aFr=r(f4t,"roberta"),f4t.forEach(t),nFr=r(jRe," \u2014 "),MH=n(jRe,"A",{href:!0});var m4t=s(MH);sFr=r(m4t,"TFRobertaForSequenceClassification"),m4t.forEach(t),lFr=r(jRe," (RoBERTa model)"),jRe.forEach(t),iFr=i(ae),$E=n(ae,"LI",{});var DRe=s($E);lve=n(DRe,"STRONG",{});var g4t=s(lve);dFr=r(g4t,"roformer"),g4t.forEach(t),cFr=r(DRe," \u2014 "),EH=n(DRe,"A",{href:!0});var h4t=s(EH);fFr=r(h4t,"TFRoFormerForSequenceClassification"),h4t.forEach(t),mFr=r(DRe," (RoFormer model)"),DRe.forEach(t),gFr=i(ae),kE=n(ae,"LI",{});var GRe=s(kE);ive=n(GRe,"STRONG",{});var p4t=s(ive);hFr=r(p4t,"tapas"),p4t.forEach(t),pFr=r(GRe," \u2014 "),CH=n(GRe,"A",{href:!0});var _4t=s(CH);_Fr=r(_4t,"TFTapasForSequenceClassification"),_4t.forEach(t),uFr=r(GRe," (TAPAS model)"),GRe.forEach(t),bFr=i(ae),SE=n(ae,"LI",{});var ORe=s(SE);dve=n(ORe,"STRONG",{});var u4t=s(dve);vFr=r(u4t,"transfo-xl"),u4t.forEach(t),FFr=r(ORe," \u2014 "),wH=n(ORe,"A",{href:!0});var b4t=s(wH);TFr=r(b4t,"TFTransfoXLForSequenceClassification"),b4t.forEach(t),MFr=r(ORe," (Transformer-XL model)"),ORe.forEach(t),EFr=i(ae),RE=n(ae,"LI",{});var VRe=s(RE);cve=n(VRe,"STRONG",{});var v4t=s(cve);CFr=r(v4t,"xlm"),v4t.forEach(t),wFr=r(VRe," \u2014 "),AH=n(VRe,"A",{href:!0});var F4t=s(AH);AFr=r(F4t,"TFXLMForSequenceClassification"),F4t.forEach(t),yFr=r(VRe," (XLM model)"),VRe.forEach(t),LFr=i(ae),PE=n(ae,"LI",{});var XRe=s(PE);fve=n(XRe,"STRONG",{});var T4t=s(fve);xFr=r(T4t,"xlm-roberta"),T4t.forEach(t),$Fr=r(XRe," \u2014 "),yH=n(XRe,"A",{href:!0});var M4t=s(yH);kFr=r(M4t,"TFXLMRobertaForSequenceClassification"),M4t.forEach(t),SFr=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),RFr=i(ae),BE=n(ae,"LI",{});var zRe=s(BE);mve=n(zRe,"STRONG",{});var E4t=s(mve);PFr=r(E4t,"xlnet"),E4t.forEach(t),BFr=r(zRe," \u2014 "),LH=n(zRe,"A",{href:!0});var C4t=s(LH);IFr=r(C4t,"TFXLNetForSequenceClassification"),C4t.forEach(t),qFr=r(zRe," (XLNet model)"),zRe.forEach(t),ae.forEach(t),NFr=i(wl),T(IE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bNe=i(f),lc=n(f,"H2",{class:!0});var CDe=s(lc);qE=n(CDe,"A",{id:!0,class:!0,href:!0});var w4t=s(qE);gve=n(w4t,"SPAN",{});var A4t=s(gve);T($8.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),jFr=i(CDe),hve=n(CDe,"SPAN",{});var y4t=s(hve);DFr=r(y4t,"TFAutoModelForMultipleChoice"),y4t.forEach(t),CDe.forEach(t),vNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(k8.$$.fragment,Al),GFr=i(Al),ic=n(Al,"P",{});var QZ=s(ic);OFr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xH=n(QZ,"A",{href:!0});var L4t=s(xH);VFr=r(L4t,"from_pretrained()"),L4t.forEach(t),XFr=r(QZ," class method or the "),$H=n(QZ,"A",{href:!0});var x4t=s($H);zFr=r(x4t,"from_config()"),x4t.forEach(t),WFr=r(QZ,` class
method.`),QZ.forEach(t),QFr=i(Al),S8=n(Al,"P",{});var wDe=s(S8);HFr=r(wDe,"This class cannot be instantiated directly using "),pve=n(wDe,"CODE",{});var $4t=s(pve);UFr=r($4t,"__init__()"),$4t.forEach(t),JFr=r(wDe," (throws an error)."),wDe.forEach(t),YFr=i(Al),Pt=n(Al,"DIV",{class:!0});var AA=s(Pt);T(R8.$$.fragment,AA),KFr=i(AA),_ve=n(AA,"P",{});var k4t=s(_ve);ZFr=r(k4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k4t.forEach(t),eTr=i(AA),dc=n(AA,"P",{});var HZ=s(dc);oTr=r(HZ,`Note:
Loading a model from its configuration file does `),uve=n(HZ,"STRONG",{});var S4t=s(uve);rTr=r(S4t,"not"),S4t.forEach(t),tTr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(HZ,"A",{href:!0});var R4t=s(kH);aTr=r(R4t,"from_pretrained()"),R4t.forEach(t),nTr=r(HZ," to load the model weights."),HZ.forEach(t),sTr=i(AA),T(NE.$$.fragment,AA),AA.forEach(t),lTr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(P8.$$.fragment,yl),iTr=i(yl),bve=n(yl,"P",{});var P4t=s(bve);dTr=r(P4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P4t.forEach(t),cTr=i(yl),sn=n(yl,"P",{});var yA=s(sn);fTr=r(yA,"The model class to instantiate is selected based on the "),vve=n(yA,"CODE",{});var B4t=s(vve);mTr=r(B4t,"model_type"),B4t.forEach(t),gTr=r(yA,` property of the config object (either
passed as an argument or loaded from `),Fve=n(yA,"CODE",{});var I4t=s(Fve);hTr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),pTr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(yA,"CODE",{});var q4t=s(Tve);_Tr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),uTr=r(yA,":"),yA.forEach(t),bTr=i(yl),he=n(yl,"UL",{});var ue=s(he);jE=n(ue,"LI",{});var WRe=s(jE);Mve=n(WRe,"STRONG",{});var N4t=s(Mve);vTr=r(N4t,"albert"),N4t.forEach(t),FTr=r(WRe," \u2014 "),SH=n(WRe,"A",{href:!0});var j4t=s(SH);TTr=r(j4t,"TFAlbertForMultipleChoice"),j4t.forEach(t),MTr=r(WRe," (ALBERT model)"),WRe.forEach(t),ETr=i(ue),DE=n(ue,"LI",{});var QRe=s(DE);Eve=n(QRe,"STRONG",{});var D4t=s(Eve);CTr=r(D4t,"bert"),D4t.forEach(t),wTr=r(QRe," \u2014 "),RH=n(QRe,"A",{href:!0});var G4t=s(RH);ATr=r(G4t,"TFBertForMultipleChoice"),G4t.forEach(t),yTr=r(QRe," (BERT model)"),QRe.forEach(t),LTr=i(ue),GE=n(ue,"LI",{});var HRe=s(GE);Cve=n(HRe,"STRONG",{});var O4t=s(Cve);xTr=r(O4t,"camembert"),O4t.forEach(t),$Tr=r(HRe," \u2014 "),PH=n(HRe,"A",{href:!0});var V4t=s(PH);kTr=r(V4t,"TFCamembertForMultipleChoice"),V4t.forEach(t),STr=r(HRe," (CamemBERT model)"),HRe.forEach(t),RTr=i(ue),OE=n(ue,"LI",{});var URe=s(OE);wve=n(URe,"STRONG",{});var X4t=s(wve);PTr=r(X4t,"convbert"),X4t.forEach(t),BTr=r(URe," \u2014 "),BH=n(URe,"A",{href:!0});var z4t=s(BH);ITr=r(z4t,"TFConvBertForMultipleChoice"),z4t.forEach(t),qTr=r(URe," (ConvBERT model)"),URe.forEach(t),NTr=i(ue),VE=n(ue,"LI",{});var JRe=s(VE);Ave=n(JRe,"STRONG",{});var W4t=s(Ave);jTr=r(W4t,"distilbert"),W4t.forEach(t),DTr=r(JRe," \u2014 "),IH=n(JRe,"A",{href:!0});var Q4t=s(IH);GTr=r(Q4t,"TFDistilBertForMultipleChoice"),Q4t.forEach(t),OTr=r(JRe," (DistilBERT model)"),JRe.forEach(t),VTr=i(ue),XE=n(ue,"LI",{});var YRe=s(XE);yve=n(YRe,"STRONG",{});var H4t=s(yve);XTr=r(H4t,"electra"),H4t.forEach(t),zTr=r(YRe," \u2014 "),qH=n(YRe,"A",{href:!0});var U4t=s(qH);WTr=r(U4t,"TFElectraForMultipleChoice"),U4t.forEach(t),QTr=r(YRe," (ELECTRA model)"),YRe.forEach(t),HTr=i(ue),zE=n(ue,"LI",{});var KRe=s(zE);Lve=n(KRe,"STRONG",{});var J4t=s(Lve);UTr=r(J4t,"flaubert"),J4t.forEach(t),JTr=r(KRe," \u2014 "),NH=n(KRe,"A",{href:!0});var Y4t=s(NH);YTr=r(Y4t,"TFFlaubertForMultipleChoice"),Y4t.forEach(t),KTr=r(KRe," (FlauBERT model)"),KRe.forEach(t),ZTr=i(ue),WE=n(ue,"LI",{});var ZRe=s(WE);xve=n(ZRe,"STRONG",{});var K4t=s(xve);eMr=r(K4t,"funnel"),K4t.forEach(t),oMr=r(ZRe," \u2014 "),jH=n(ZRe,"A",{href:!0});var Z4t=s(jH);rMr=r(Z4t,"TFFunnelForMultipleChoice"),Z4t.forEach(t),tMr=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),aMr=i(ue),QE=n(ue,"LI",{});var ePe=s(QE);$ve=n(ePe,"STRONG",{});var eEt=s($ve);nMr=r(eEt,"longformer"),eEt.forEach(t),sMr=r(ePe," \u2014 "),DH=n(ePe,"A",{href:!0});var oEt=s(DH);lMr=r(oEt,"TFLongformerForMultipleChoice"),oEt.forEach(t),iMr=r(ePe," (Longformer model)"),ePe.forEach(t),dMr=i(ue),HE=n(ue,"LI",{});var oPe=s(HE);kve=n(oPe,"STRONG",{});var rEt=s(kve);cMr=r(rEt,"mobilebert"),rEt.forEach(t),fMr=r(oPe," \u2014 "),GH=n(oPe,"A",{href:!0});var tEt=s(GH);mMr=r(tEt,"TFMobileBertForMultipleChoice"),tEt.forEach(t),gMr=r(oPe," (MobileBERT model)"),oPe.forEach(t),hMr=i(ue),UE=n(ue,"LI",{});var rPe=s(UE);Sve=n(rPe,"STRONG",{});var aEt=s(Sve);pMr=r(aEt,"mpnet"),aEt.forEach(t),_Mr=r(rPe," \u2014 "),OH=n(rPe,"A",{href:!0});var nEt=s(OH);uMr=r(nEt,"TFMPNetForMultipleChoice"),nEt.forEach(t),bMr=r(rPe," (MPNet model)"),rPe.forEach(t),vMr=i(ue),JE=n(ue,"LI",{});var tPe=s(JE);Rve=n(tPe,"STRONG",{});var sEt=s(Rve);FMr=r(sEt,"rembert"),sEt.forEach(t),TMr=r(tPe," \u2014 "),VH=n(tPe,"A",{href:!0});var lEt=s(VH);MMr=r(lEt,"TFRemBertForMultipleChoice"),lEt.forEach(t),EMr=r(tPe," (RemBERT model)"),tPe.forEach(t),CMr=i(ue),YE=n(ue,"LI",{});var aPe=s(YE);Pve=n(aPe,"STRONG",{});var iEt=s(Pve);wMr=r(iEt,"roberta"),iEt.forEach(t),AMr=r(aPe," \u2014 "),XH=n(aPe,"A",{href:!0});var dEt=s(XH);yMr=r(dEt,"TFRobertaForMultipleChoice"),dEt.forEach(t),LMr=r(aPe," (RoBERTa model)"),aPe.forEach(t),xMr=i(ue),KE=n(ue,"LI",{});var nPe=s(KE);Bve=n(nPe,"STRONG",{});var cEt=s(Bve);$Mr=r(cEt,"roformer"),cEt.forEach(t),kMr=r(nPe," \u2014 "),zH=n(nPe,"A",{href:!0});var fEt=s(zH);SMr=r(fEt,"TFRoFormerForMultipleChoice"),fEt.forEach(t),RMr=r(nPe," (RoFormer model)"),nPe.forEach(t),PMr=i(ue),ZE=n(ue,"LI",{});var sPe=s(ZE);Ive=n(sPe,"STRONG",{});var mEt=s(Ive);BMr=r(mEt,"xlm"),mEt.forEach(t),IMr=r(sPe," \u2014 "),WH=n(sPe,"A",{href:!0});var gEt=s(WH);qMr=r(gEt,"TFXLMForMultipleChoice"),gEt.forEach(t),NMr=r(sPe," (XLM model)"),sPe.forEach(t),jMr=i(ue),eC=n(ue,"LI",{});var lPe=s(eC);qve=n(lPe,"STRONG",{});var hEt=s(qve);DMr=r(hEt,"xlm-roberta"),hEt.forEach(t),GMr=r(lPe," \u2014 "),QH=n(lPe,"A",{href:!0});var pEt=s(QH);OMr=r(pEt,"TFXLMRobertaForMultipleChoice"),pEt.forEach(t),VMr=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),XMr=i(ue),oC=n(ue,"LI",{});var iPe=s(oC);Nve=n(iPe,"STRONG",{});var _Et=s(Nve);zMr=r(_Et,"xlnet"),_Et.forEach(t),WMr=r(iPe," \u2014 "),HH=n(iPe,"A",{href:!0});var uEt=s(HH);QMr=r(uEt,"TFXLNetForMultipleChoice"),uEt.forEach(t),HMr=r(iPe," (XLNet model)"),iPe.forEach(t),ue.forEach(t),UMr=i(yl),T(rC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),FNe=i(f),cc=n(f,"H2",{class:!0});var ADe=s(cc);tC=n(ADe,"A",{id:!0,class:!0,href:!0});var bEt=s(tC);jve=n(bEt,"SPAN",{});var vEt=s(jve);T(B8.$$.fragment,vEt),vEt.forEach(t),bEt.forEach(t),JMr=i(ADe),Dve=n(ADe,"SPAN",{});var FEt=s(Dve);YMr=r(FEt,"TFAutoModelForNextSentencePrediction"),FEt.forEach(t),ADe.forEach(t),TNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(I8.$$.fragment,Ll),KMr=i(Ll),fc=n(Ll,"P",{});var UZ=s(fc);ZMr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=n(UZ,"A",{href:!0});var TEt=s(UH);e4r=r(TEt,"from_pretrained()"),TEt.forEach(t),o4r=r(UZ," class method or the "),JH=n(UZ,"A",{href:!0});var MEt=s(JH);r4r=r(MEt,"from_config()"),MEt.forEach(t),t4r=r(UZ,` class
method.`),UZ.forEach(t),a4r=i(Ll),q8=n(Ll,"P",{});var yDe=s(q8);n4r=r(yDe,"This class cannot be instantiated directly using "),Gve=n(yDe,"CODE",{});var EEt=s(Gve);s4r=r(EEt,"__init__()"),EEt.forEach(t),l4r=r(yDe," (throws an error)."),yDe.forEach(t),i4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var LA=s(Bt);T(N8.$$.fragment,LA),d4r=i(LA),Ove=n(LA,"P",{});var CEt=s(Ove);c4r=r(CEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CEt.forEach(t),f4r=i(LA),mc=n(LA,"P",{});var JZ=s(mc);m4r=r(JZ,`Note:
Loading a model from its configuration file does `),Vve=n(JZ,"STRONG",{});var wEt=s(Vve);g4r=r(wEt,"not"),wEt.forEach(t),h4r=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(JZ,"A",{href:!0});var AEt=s(YH);p4r=r(AEt,"from_pretrained()"),AEt.forEach(t),_4r=r(JZ," to load the model weights."),JZ.forEach(t),u4r=i(LA),T(aC.$$.fragment,LA),LA.forEach(t),b4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(j8.$$.fragment,xl),v4r=i(xl),Xve=n(xl,"P",{});var yEt=s(Xve);F4r=r(yEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yEt.forEach(t),T4r=i(xl),ln=n(xl,"P",{});var xA=s(ln);M4r=r(xA,"The model class to instantiate is selected based on the "),zve=n(xA,"CODE",{});var LEt=s(zve);E4r=r(LEt,"model_type"),LEt.forEach(t),C4r=r(xA,` property of the config object (either
passed as an argument or loaded from `),Wve=n(xA,"CODE",{});var xEt=s(Wve);w4r=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),A4r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(xA,"CODE",{});var $Et=s(Qve);y4r=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),L4r=r(xA,":"),xA.forEach(t),x4r=i(xl),D8=n(xl,"UL",{});var LDe=s(D8);nC=n(LDe,"LI",{});var dPe=s(nC);Hve=n(dPe,"STRONG",{});var kEt=s(Hve);$4r=r(kEt,"bert"),kEt.forEach(t),k4r=r(dPe," \u2014 "),KH=n(dPe,"A",{href:!0});var SEt=s(KH);S4r=r(SEt,"TFBertForNextSentencePrediction"),SEt.forEach(t),R4r=r(dPe," (BERT model)"),dPe.forEach(t),P4r=i(LDe),sC=n(LDe,"LI",{});var cPe=s(sC);Uve=n(cPe,"STRONG",{});var REt=s(Uve);B4r=r(REt,"mobilebert"),REt.forEach(t),I4r=r(cPe," \u2014 "),ZH=n(cPe,"A",{href:!0});var PEt=s(ZH);q4r=r(PEt,"TFMobileBertForNextSentencePrediction"),PEt.forEach(t),N4r=r(cPe," (MobileBERT model)"),cPe.forEach(t),LDe.forEach(t),j4r=i(xl),T(lC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),MNe=i(f),gc=n(f,"H2",{class:!0});var xDe=s(gc);iC=n(xDe,"A",{id:!0,class:!0,href:!0});var BEt=s(iC);Jve=n(BEt,"SPAN",{});var IEt=s(Jve);T(G8.$$.fragment,IEt),IEt.forEach(t),BEt.forEach(t),D4r=i(xDe),Yve=n(xDe,"SPAN",{});var qEt=s(Yve);G4r=r(qEt,"TFAutoModelForTableQuestionAnswering"),qEt.forEach(t),xDe.forEach(t),ENe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(O8.$$.fragment,$l),O4r=i($l),hc=n($l,"P",{});var YZ=s(hc);V4r=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eU=n(YZ,"A",{href:!0});var NEt=s(eU);X4r=r(NEt,"from_pretrained()"),NEt.forEach(t),z4r=r(YZ," class method or the "),oU=n(YZ,"A",{href:!0});var jEt=s(oU);W4r=r(jEt,"from_config()"),jEt.forEach(t),Q4r=r(YZ,` class
method.`),YZ.forEach(t),H4r=i($l),V8=n($l,"P",{});var $De=s(V8);U4r=r($De,"This class cannot be instantiated directly using "),Kve=n($De,"CODE",{});var DEt=s(Kve);J4r=r(DEt,"__init__()"),DEt.forEach(t),Y4r=r($De," (throws an error)."),$De.forEach(t),K4r=i($l),It=n($l,"DIV",{class:!0});var $A=s(It);T(X8.$$.fragment,$A),Z4r=i($A),Zve=n($A,"P",{});var GEt=s(Zve);eEr=r(GEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GEt.forEach(t),oEr=i($A),pc=n($A,"P",{});var KZ=s(pc);rEr=r(KZ,`Note:
Loading a model from its configuration file does `),eFe=n(KZ,"STRONG",{});var OEt=s(eFe);tEr=r(OEt,"not"),OEt.forEach(t),aEr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(KZ,"A",{href:!0});var VEt=s(rU);nEr=r(VEt,"from_pretrained()"),VEt.forEach(t),sEr=r(KZ," to load the model weights."),KZ.forEach(t),lEr=i($A),T(dC.$$.fragment,$A),$A.forEach(t),iEr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(z8.$$.fragment,kl),dEr=i(kl),oFe=n(kl,"P",{});var XEt=s(oFe);cEr=r(XEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),XEt.forEach(t),fEr=i(kl),dn=n(kl,"P",{});var kA=s(dn);mEr=r(kA,"The model class to instantiate is selected based on the "),rFe=n(kA,"CODE",{});var zEt=s(rFe);gEr=r(zEt,"model_type"),zEt.forEach(t),hEr=r(kA,` property of the config object (either
passed as an argument or loaded from `),tFe=n(kA,"CODE",{});var WEt=s(tFe);pEr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),_Er=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(kA,"CODE",{});var QEt=s(aFe);uEr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),bEr=r(kA,":"),kA.forEach(t),vEr=i(kl),nFe=n(kl,"UL",{});var HEt=s(nFe);cC=n(HEt,"LI",{});var fPe=s(cC);sFe=n(fPe,"STRONG",{});var UEt=s(sFe);FEr=r(UEt,"tapas"),UEt.forEach(t),TEr=r(fPe," \u2014 "),tU=n(fPe,"A",{href:!0});var JEt=s(tU);MEr=r(JEt,"TFTapasForQuestionAnswering"),JEt.forEach(t),EEr=r(fPe," (TAPAS model)"),fPe.forEach(t),HEt.forEach(t),CEr=i(kl),T(fC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CNe=i(f),_c=n(f,"H2",{class:!0});var kDe=s(_c);mC=n(kDe,"A",{id:!0,class:!0,href:!0});var YEt=s(mC);lFe=n(YEt,"SPAN",{});var KEt=s(lFe);T(W8.$$.fragment,KEt),KEt.forEach(t),YEt.forEach(t),wEr=i(kDe),iFe=n(kDe,"SPAN",{});var ZEt=s(iFe);AEr=r(ZEt,"TFAutoModelForTokenClassification"),ZEt.forEach(t),kDe.forEach(t),wNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(Q8.$$.fragment,Sl),yEr=i(Sl),uc=n(Sl,"P",{});var ZZ=s(uc);LEr=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aU=n(ZZ,"A",{href:!0});var eCt=s(aU);xEr=r(eCt,"from_pretrained()"),eCt.forEach(t),$Er=r(ZZ," class method or the "),nU=n(ZZ,"A",{href:!0});var oCt=s(nU);kEr=r(oCt,"from_config()"),oCt.forEach(t),SEr=r(ZZ,` class
method.`),ZZ.forEach(t),REr=i(Sl),H8=n(Sl,"P",{});var SDe=s(H8);PEr=r(SDe,"This class cannot be instantiated directly using "),dFe=n(SDe,"CODE",{});var rCt=s(dFe);BEr=r(rCt,"__init__()"),rCt.forEach(t),IEr=r(SDe," (throws an error)."),SDe.forEach(t),qEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var SA=s(qt);T(U8.$$.fragment,SA),NEr=i(SA),cFe=n(SA,"P",{});var tCt=s(cFe);jEr=r(tCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tCt.forEach(t),DEr=i(SA),bc=n(SA,"P",{});var eee=s(bc);GEr=r(eee,`Note:
Loading a model from its configuration file does `),fFe=n(eee,"STRONG",{});var aCt=s(fFe);OEr=r(aCt,"not"),aCt.forEach(t),VEr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(eee,"A",{href:!0});var nCt=s(sU);XEr=r(nCt,"from_pretrained()"),nCt.forEach(t),zEr=r(eee," to load the model weights."),eee.forEach(t),WEr=i(SA),T(gC.$$.fragment,SA),SA.forEach(t),QEr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(J8.$$.fragment,Rl),HEr=i(Rl),mFe=n(Rl,"P",{});var sCt=s(mFe);UEr=r(sCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sCt.forEach(t),JEr=i(Rl),cn=n(Rl,"P",{});var RA=s(cn);YEr=r(RA,"The model class to instantiate is selected based on the "),gFe=n(RA,"CODE",{});var lCt=s(gFe);KEr=r(lCt,"model_type"),lCt.forEach(t),ZEr=r(RA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(RA,"CODE",{});var iCt=s(hFe);eCr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),oCr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(RA,"CODE",{});var dCt=s(pFe);rCr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),tCr=r(RA,":"),RA.forEach(t),aCr=i(Rl),de=n(Rl,"UL",{});var me=s(de);hC=n(me,"LI",{});var mPe=s(hC);_Fe=n(mPe,"STRONG",{});var cCt=s(_Fe);nCr=r(cCt,"albert"),cCt.forEach(t),sCr=r(mPe," \u2014 "),lU=n(mPe,"A",{href:!0});var fCt=s(lU);lCr=r(fCt,"TFAlbertForTokenClassification"),fCt.forEach(t),iCr=r(mPe," (ALBERT model)"),mPe.forEach(t),dCr=i(me),pC=n(me,"LI",{});var gPe=s(pC);uFe=n(gPe,"STRONG",{});var mCt=s(uFe);cCr=r(mCt,"bert"),mCt.forEach(t),fCr=r(gPe," \u2014 "),iU=n(gPe,"A",{href:!0});var gCt=s(iU);mCr=r(gCt,"TFBertForTokenClassification"),gCt.forEach(t),gCr=r(gPe," (BERT model)"),gPe.forEach(t),hCr=i(me),_C=n(me,"LI",{});var hPe=s(_C);bFe=n(hPe,"STRONG",{});var hCt=s(bFe);pCr=r(hCt,"camembert"),hCt.forEach(t),_Cr=r(hPe," \u2014 "),dU=n(hPe,"A",{href:!0});var pCt=s(dU);uCr=r(pCt,"TFCamembertForTokenClassification"),pCt.forEach(t),bCr=r(hPe," (CamemBERT model)"),hPe.forEach(t),vCr=i(me),uC=n(me,"LI",{});var pPe=s(uC);vFe=n(pPe,"STRONG",{});var _Ct=s(vFe);FCr=r(_Ct,"convbert"),_Ct.forEach(t),TCr=r(pPe," \u2014 "),cU=n(pPe,"A",{href:!0});var uCt=s(cU);MCr=r(uCt,"TFConvBertForTokenClassification"),uCt.forEach(t),ECr=r(pPe," (ConvBERT model)"),pPe.forEach(t),CCr=i(me),bC=n(me,"LI",{});var _Pe=s(bC);FFe=n(_Pe,"STRONG",{});var bCt=s(FFe);wCr=r(bCt,"deberta"),bCt.forEach(t),ACr=r(_Pe," \u2014 "),fU=n(_Pe,"A",{href:!0});var vCt=s(fU);yCr=r(vCt,"TFDebertaForTokenClassification"),vCt.forEach(t),LCr=r(_Pe," (DeBERTa model)"),_Pe.forEach(t),xCr=i(me),vC=n(me,"LI",{});var uPe=s(vC);TFe=n(uPe,"STRONG",{});var FCt=s(TFe);$Cr=r(FCt,"deberta-v2"),FCt.forEach(t),kCr=r(uPe," \u2014 "),mU=n(uPe,"A",{href:!0});var TCt=s(mU);SCr=r(TCt,"TFDebertaV2ForTokenClassification"),TCt.forEach(t),RCr=r(uPe," (DeBERTa-v2 model)"),uPe.forEach(t),PCr=i(me),FC=n(me,"LI",{});var bPe=s(FC);MFe=n(bPe,"STRONG",{});var MCt=s(MFe);BCr=r(MCt,"distilbert"),MCt.forEach(t),ICr=r(bPe," \u2014 "),gU=n(bPe,"A",{href:!0});var ECt=s(gU);qCr=r(ECt,"TFDistilBertForTokenClassification"),ECt.forEach(t),NCr=r(bPe," (DistilBERT model)"),bPe.forEach(t),jCr=i(me),TC=n(me,"LI",{});var vPe=s(TC);EFe=n(vPe,"STRONG",{});var CCt=s(EFe);DCr=r(CCt,"electra"),CCt.forEach(t),GCr=r(vPe," \u2014 "),hU=n(vPe,"A",{href:!0});var wCt=s(hU);OCr=r(wCt,"TFElectraForTokenClassification"),wCt.forEach(t),VCr=r(vPe," (ELECTRA model)"),vPe.forEach(t),XCr=i(me),MC=n(me,"LI",{});var FPe=s(MC);CFe=n(FPe,"STRONG",{});var ACt=s(CFe);zCr=r(ACt,"flaubert"),ACt.forEach(t),WCr=r(FPe," \u2014 "),pU=n(FPe,"A",{href:!0});var yCt=s(pU);QCr=r(yCt,"TFFlaubertForTokenClassification"),yCt.forEach(t),HCr=r(FPe," (FlauBERT model)"),FPe.forEach(t),UCr=i(me),EC=n(me,"LI",{});var TPe=s(EC);wFe=n(TPe,"STRONG",{});var LCt=s(wFe);JCr=r(LCt,"funnel"),LCt.forEach(t),YCr=r(TPe," \u2014 "),_U=n(TPe,"A",{href:!0});var xCt=s(_U);KCr=r(xCt,"TFFunnelForTokenClassification"),xCt.forEach(t),ZCr=r(TPe," (Funnel Transformer model)"),TPe.forEach(t),e5r=i(me),CC=n(me,"LI",{});var MPe=s(CC);AFe=n(MPe,"STRONG",{});var $Ct=s(AFe);o5r=r($Ct,"layoutlm"),$Ct.forEach(t),r5r=r(MPe," \u2014 "),uU=n(MPe,"A",{href:!0});var kCt=s(uU);t5r=r(kCt,"TFLayoutLMForTokenClassification"),kCt.forEach(t),a5r=r(MPe," (LayoutLM model)"),MPe.forEach(t),n5r=i(me),wC=n(me,"LI",{});var EPe=s(wC);yFe=n(EPe,"STRONG",{});var SCt=s(yFe);s5r=r(SCt,"longformer"),SCt.forEach(t),l5r=r(EPe," \u2014 "),bU=n(EPe,"A",{href:!0});var RCt=s(bU);i5r=r(RCt,"TFLongformerForTokenClassification"),RCt.forEach(t),d5r=r(EPe," (Longformer model)"),EPe.forEach(t),c5r=i(me),AC=n(me,"LI",{});var CPe=s(AC);LFe=n(CPe,"STRONG",{});var PCt=s(LFe);f5r=r(PCt,"mobilebert"),PCt.forEach(t),m5r=r(CPe," \u2014 "),vU=n(CPe,"A",{href:!0});var BCt=s(vU);g5r=r(BCt,"TFMobileBertForTokenClassification"),BCt.forEach(t),h5r=r(CPe," (MobileBERT model)"),CPe.forEach(t),p5r=i(me),yC=n(me,"LI",{});var wPe=s(yC);xFe=n(wPe,"STRONG",{});var ICt=s(xFe);_5r=r(ICt,"mpnet"),ICt.forEach(t),u5r=r(wPe," \u2014 "),FU=n(wPe,"A",{href:!0});var qCt=s(FU);b5r=r(qCt,"TFMPNetForTokenClassification"),qCt.forEach(t),v5r=r(wPe," (MPNet model)"),wPe.forEach(t),F5r=i(me),LC=n(me,"LI",{});var APe=s(LC);$Fe=n(APe,"STRONG",{});var NCt=s($Fe);T5r=r(NCt,"rembert"),NCt.forEach(t),M5r=r(APe," \u2014 "),TU=n(APe,"A",{href:!0});var jCt=s(TU);E5r=r(jCt,"TFRemBertForTokenClassification"),jCt.forEach(t),C5r=r(APe," (RemBERT model)"),APe.forEach(t),w5r=i(me),xC=n(me,"LI",{});var yPe=s(xC);kFe=n(yPe,"STRONG",{});var DCt=s(kFe);A5r=r(DCt,"roberta"),DCt.forEach(t),y5r=r(yPe," \u2014 "),MU=n(yPe,"A",{href:!0});var GCt=s(MU);L5r=r(GCt,"TFRobertaForTokenClassification"),GCt.forEach(t),x5r=r(yPe," (RoBERTa model)"),yPe.forEach(t),$5r=i(me),$C=n(me,"LI",{});var LPe=s($C);SFe=n(LPe,"STRONG",{});var OCt=s(SFe);k5r=r(OCt,"roformer"),OCt.forEach(t),S5r=r(LPe," \u2014 "),EU=n(LPe,"A",{href:!0});var VCt=s(EU);R5r=r(VCt,"TFRoFormerForTokenClassification"),VCt.forEach(t),P5r=r(LPe," (RoFormer model)"),LPe.forEach(t),B5r=i(me),kC=n(me,"LI",{});var xPe=s(kC);RFe=n(xPe,"STRONG",{});var XCt=s(RFe);I5r=r(XCt,"xlm"),XCt.forEach(t),q5r=r(xPe," \u2014 "),CU=n(xPe,"A",{href:!0});var zCt=s(CU);N5r=r(zCt,"TFXLMForTokenClassification"),zCt.forEach(t),j5r=r(xPe," (XLM model)"),xPe.forEach(t),D5r=i(me),SC=n(me,"LI",{});var $Pe=s(SC);PFe=n($Pe,"STRONG",{});var WCt=s(PFe);G5r=r(WCt,"xlm-roberta"),WCt.forEach(t),O5r=r($Pe," \u2014 "),wU=n($Pe,"A",{href:!0});var QCt=s(wU);V5r=r(QCt,"TFXLMRobertaForTokenClassification"),QCt.forEach(t),X5r=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),z5r=i(me),RC=n(me,"LI",{});var kPe=s(RC);BFe=n(kPe,"STRONG",{});var HCt=s(BFe);W5r=r(HCt,"xlnet"),HCt.forEach(t),Q5r=r(kPe," \u2014 "),AU=n(kPe,"A",{href:!0});var UCt=s(AU);H5r=r(UCt,"TFXLNetForTokenClassification"),UCt.forEach(t),U5r=r(kPe," (XLNet model)"),kPe.forEach(t),me.forEach(t),J5r=i(Rl),T(PC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ANe=i(f),vc=n(f,"H2",{class:!0});var RDe=s(vc);BC=n(RDe,"A",{id:!0,class:!0,href:!0});var JCt=s(BC);IFe=n(JCt,"SPAN",{});var YCt=s(IFe);T(Y8.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),Y5r=i(RDe),qFe=n(RDe,"SPAN",{});var KCt=s(qFe);K5r=r(KCt,"TFAutoModelForQuestionAnswering"),KCt.forEach(t),RDe.forEach(t),yNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(K8.$$.fragment,Pl),Z5r=i(Pl),Fc=n(Pl,"P",{});var oee=s(Fc);e3r=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yU=n(oee,"A",{href:!0});var ZCt=s(yU);o3r=r(ZCt,"from_pretrained()"),ZCt.forEach(t),r3r=r(oee," class method or the "),LU=n(oee,"A",{href:!0});var e5t=s(LU);t3r=r(e5t,"from_config()"),e5t.forEach(t),a3r=r(oee,` class
method.`),oee.forEach(t),n3r=i(Pl),Z8=n(Pl,"P",{});var PDe=s(Z8);s3r=r(PDe,"This class cannot be instantiated directly using "),NFe=n(PDe,"CODE",{});var o5t=s(NFe);l3r=r(o5t,"__init__()"),o5t.forEach(t),i3r=r(PDe," (throws an error)."),PDe.forEach(t),d3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var PA=s(Nt);T(e9.$$.fragment,PA),c3r=i(PA),jFe=n(PA,"P",{});var r5t=s(jFe);f3r=r(r5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r5t.forEach(t),m3r=i(PA),Tc=n(PA,"P",{});var ree=s(Tc);g3r=r(ree,`Note:
Loading a model from its configuration file does `),DFe=n(ree,"STRONG",{});var t5t=s(DFe);h3r=r(t5t,"not"),t5t.forEach(t),p3r=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(ree,"A",{href:!0});var a5t=s(xU);_3r=r(a5t,"from_pretrained()"),a5t.forEach(t),u3r=r(ree," to load the model weights."),ree.forEach(t),b3r=i(PA),T(IC.$$.fragment,PA),PA.forEach(t),v3r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(o9.$$.fragment,Bl),F3r=i(Bl),GFe=n(Bl,"P",{});var n5t=s(GFe);T3r=r(n5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n5t.forEach(t),M3r=i(Bl),fn=n(Bl,"P",{});var BA=s(fn);E3r=r(BA,"The model class to instantiate is selected based on the "),OFe=n(BA,"CODE",{});var s5t=s(OFe);C3r=r(s5t,"model_type"),s5t.forEach(t),w3r=r(BA,` property of the config object (either
passed as an argument or loaded from `),VFe=n(BA,"CODE",{});var l5t=s(VFe);A3r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),y3r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(BA,"CODE",{});var i5t=s(XFe);L3r=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),x3r=r(BA,":"),BA.forEach(t),$3r=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);qC=n(ge,"LI",{});var SPe=s(qC);zFe=n(SPe,"STRONG",{});var d5t=s(zFe);k3r=r(d5t,"albert"),d5t.forEach(t),S3r=r(SPe," \u2014 "),$U=n(SPe,"A",{href:!0});var c5t=s($U);R3r=r(c5t,"TFAlbertForQuestionAnswering"),c5t.forEach(t),P3r=r(SPe," (ALBERT model)"),SPe.forEach(t),B3r=i(ge),NC=n(ge,"LI",{});var RPe=s(NC);WFe=n(RPe,"STRONG",{});var f5t=s(WFe);I3r=r(f5t,"bert"),f5t.forEach(t),q3r=r(RPe," \u2014 "),kU=n(RPe,"A",{href:!0});var m5t=s(kU);N3r=r(m5t,"TFBertForQuestionAnswering"),m5t.forEach(t),j3r=r(RPe," (BERT model)"),RPe.forEach(t),D3r=i(ge),jC=n(ge,"LI",{});var PPe=s(jC);QFe=n(PPe,"STRONG",{});var g5t=s(QFe);G3r=r(g5t,"camembert"),g5t.forEach(t),O3r=r(PPe," \u2014 "),SU=n(PPe,"A",{href:!0});var h5t=s(SU);V3r=r(h5t,"TFCamembertForQuestionAnswering"),h5t.forEach(t),X3r=r(PPe," (CamemBERT model)"),PPe.forEach(t),z3r=i(ge),DC=n(ge,"LI",{});var BPe=s(DC);HFe=n(BPe,"STRONG",{});var p5t=s(HFe);W3r=r(p5t,"convbert"),p5t.forEach(t),Q3r=r(BPe," \u2014 "),RU=n(BPe,"A",{href:!0});var _5t=s(RU);H3r=r(_5t,"TFConvBertForQuestionAnswering"),_5t.forEach(t),U3r=r(BPe," (ConvBERT model)"),BPe.forEach(t),J3r=i(ge),GC=n(ge,"LI",{});var IPe=s(GC);UFe=n(IPe,"STRONG",{});var u5t=s(UFe);Y3r=r(u5t,"deberta"),u5t.forEach(t),K3r=r(IPe," \u2014 "),PU=n(IPe,"A",{href:!0});var b5t=s(PU);Z3r=r(b5t,"TFDebertaForQuestionAnswering"),b5t.forEach(t),ewr=r(IPe," (DeBERTa model)"),IPe.forEach(t),owr=i(ge),OC=n(ge,"LI",{});var qPe=s(OC);JFe=n(qPe,"STRONG",{});var v5t=s(JFe);rwr=r(v5t,"deberta-v2"),v5t.forEach(t),twr=r(qPe," \u2014 "),BU=n(qPe,"A",{href:!0});var F5t=s(BU);awr=r(F5t,"TFDebertaV2ForQuestionAnswering"),F5t.forEach(t),nwr=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),swr=i(ge),VC=n(ge,"LI",{});var NPe=s(VC);YFe=n(NPe,"STRONG",{});var T5t=s(YFe);lwr=r(T5t,"distilbert"),T5t.forEach(t),iwr=r(NPe," \u2014 "),IU=n(NPe,"A",{href:!0});var M5t=s(IU);dwr=r(M5t,"TFDistilBertForQuestionAnswering"),M5t.forEach(t),cwr=r(NPe," (DistilBERT model)"),NPe.forEach(t),fwr=i(ge),XC=n(ge,"LI",{});var jPe=s(XC);KFe=n(jPe,"STRONG",{});var E5t=s(KFe);mwr=r(E5t,"electra"),E5t.forEach(t),gwr=r(jPe," \u2014 "),qU=n(jPe,"A",{href:!0});var C5t=s(qU);hwr=r(C5t,"TFElectraForQuestionAnswering"),C5t.forEach(t),pwr=r(jPe," (ELECTRA model)"),jPe.forEach(t),_wr=i(ge),zC=n(ge,"LI",{});var DPe=s(zC);ZFe=n(DPe,"STRONG",{});var w5t=s(ZFe);uwr=r(w5t,"flaubert"),w5t.forEach(t),bwr=r(DPe," \u2014 "),NU=n(DPe,"A",{href:!0});var A5t=s(NU);vwr=r(A5t,"TFFlaubertForQuestionAnsweringSimple"),A5t.forEach(t),Fwr=r(DPe," (FlauBERT model)"),DPe.forEach(t),Twr=i(ge),WC=n(ge,"LI",{});var GPe=s(WC);eTe=n(GPe,"STRONG",{});var y5t=s(eTe);Mwr=r(y5t,"funnel"),y5t.forEach(t),Ewr=r(GPe," \u2014 "),jU=n(GPe,"A",{href:!0});var L5t=s(jU);Cwr=r(L5t,"TFFunnelForQuestionAnswering"),L5t.forEach(t),wwr=r(GPe," (Funnel Transformer model)"),GPe.forEach(t),Awr=i(ge),QC=n(ge,"LI",{});var OPe=s(QC);oTe=n(OPe,"STRONG",{});var x5t=s(oTe);ywr=r(x5t,"gptj"),x5t.forEach(t),Lwr=r(OPe," \u2014 "),DU=n(OPe,"A",{href:!0});var $5t=s(DU);xwr=r($5t,"TFGPTJForQuestionAnswering"),$5t.forEach(t),$wr=r(OPe," (GPT-J model)"),OPe.forEach(t),kwr=i(ge),HC=n(ge,"LI",{});var VPe=s(HC);rTe=n(VPe,"STRONG",{});var k5t=s(rTe);Swr=r(k5t,"longformer"),k5t.forEach(t),Rwr=r(VPe," \u2014 "),GU=n(VPe,"A",{href:!0});var S5t=s(GU);Pwr=r(S5t,"TFLongformerForQuestionAnswering"),S5t.forEach(t),Bwr=r(VPe," (Longformer model)"),VPe.forEach(t),Iwr=i(ge),UC=n(ge,"LI",{});var XPe=s(UC);tTe=n(XPe,"STRONG",{});var R5t=s(tTe);qwr=r(R5t,"mobilebert"),R5t.forEach(t),Nwr=r(XPe," \u2014 "),OU=n(XPe,"A",{href:!0});var P5t=s(OU);jwr=r(P5t,"TFMobileBertForQuestionAnswering"),P5t.forEach(t),Dwr=r(XPe," (MobileBERT model)"),XPe.forEach(t),Gwr=i(ge),JC=n(ge,"LI",{});var zPe=s(JC);aTe=n(zPe,"STRONG",{});var B5t=s(aTe);Owr=r(B5t,"mpnet"),B5t.forEach(t),Vwr=r(zPe," \u2014 "),VU=n(zPe,"A",{href:!0});var I5t=s(VU);Xwr=r(I5t,"TFMPNetForQuestionAnswering"),I5t.forEach(t),zwr=r(zPe," (MPNet model)"),zPe.forEach(t),Wwr=i(ge),YC=n(ge,"LI",{});var WPe=s(YC);nTe=n(WPe,"STRONG",{});var q5t=s(nTe);Qwr=r(q5t,"rembert"),q5t.forEach(t),Hwr=r(WPe," \u2014 "),XU=n(WPe,"A",{href:!0});var N5t=s(XU);Uwr=r(N5t,"TFRemBertForQuestionAnswering"),N5t.forEach(t),Jwr=r(WPe," (RemBERT model)"),WPe.forEach(t),Ywr=i(ge),KC=n(ge,"LI",{});var QPe=s(KC);sTe=n(QPe,"STRONG",{});var j5t=s(sTe);Kwr=r(j5t,"roberta"),j5t.forEach(t),Zwr=r(QPe," \u2014 "),zU=n(QPe,"A",{href:!0});var D5t=s(zU);e0r=r(D5t,"TFRobertaForQuestionAnswering"),D5t.forEach(t),o0r=r(QPe," (RoBERTa model)"),QPe.forEach(t),r0r=i(ge),ZC=n(ge,"LI",{});var HPe=s(ZC);lTe=n(HPe,"STRONG",{});var G5t=s(lTe);t0r=r(G5t,"roformer"),G5t.forEach(t),a0r=r(HPe," \u2014 "),WU=n(HPe,"A",{href:!0});var O5t=s(WU);n0r=r(O5t,"TFRoFormerForQuestionAnswering"),O5t.forEach(t),s0r=r(HPe," (RoFormer model)"),HPe.forEach(t),l0r=i(ge),e5=n(ge,"LI",{});var UPe=s(e5);iTe=n(UPe,"STRONG",{});var V5t=s(iTe);i0r=r(V5t,"xlm"),V5t.forEach(t),d0r=r(UPe," \u2014 "),QU=n(UPe,"A",{href:!0});var X5t=s(QU);c0r=r(X5t,"TFXLMForQuestionAnsweringSimple"),X5t.forEach(t),f0r=r(UPe," (XLM model)"),UPe.forEach(t),m0r=i(ge),o5=n(ge,"LI",{});var JPe=s(o5);dTe=n(JPe,"STRONG",{});var z5t=s(dTe);g0r=r(z5t,"xlm-roberta"),z5t.forEach(t),h0r=r(JPe," \u2014 "),HU=n(JPe,"A",{href:!0});var W5t=s(HU);p0r=r(W5t,"TFXLMRobertaForQuestionAnswering"),W5t.forEach(t),_0r=r(JPe," (XLM-RoBERTa model)"),JPe.forEach(t),u0r=i(ge),r5=n(ge,"LI",{});var YPe=s(r5);cTe=n(YPe,"STRONG",{});var Q5t=s(cTe);b0r=r(Q5t,"xlnet"),Q5t.forEach(t),v0r=r(YPe," \u2014 "),UU=n(YPe,"A",{href:!0});var H5t=s(UU);F0r=r(H5t,"TFXLNetForQuestionAnsweringSimple"),H5t.forEach(t),T0r=r(YPe," (XLNet model)"),YPe.forEach(t),ge.forEach(t),M0r=i(Bl),T(t5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),LNe=i(f),Mc=n(f,"H2",{class:!0});var BDe=s(Mc);a5=n(BDe,"A",{id:!0,class:!0,href:!0});var U5t=s(a5);fTe=n(U5t,"SPAN",{});var J5t=s(fTe);T(r9.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),E0r=i(BDe),mTe=n(BDe,"SPAN",{});var Y5t=s(mTe);C0r=r(Y5t,"TFAutoModelForVision2Seq"),Y5t.forEach(t),BDe.forEach(t),xNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(t9.$$.fragment,Il),w0r=i(Il),Ec=n(Il,"P",{});var tee=s(Ec);A0r=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JU=n(tee,"A",{href:!0});var K5t=s(JU);y0r=r(K5t,"from_pretrained()"),K5t.forEach(t),L0r=r(tee," class method or the "),YU=n(tee,"A",{href:!0});var Z5t=s(YU);x0r=r(Z5t,"from_config()"),Z5t.forEach(t),$0r=r(tee,` class
method.`),tee.forEach(t),k0r=i(Il),a9=n(Il,"P",{});var IDe=s(a9);S0r=r(IDe,"This class cannot be instantiated directly using "),gTe=n(IDe,"CODE",{});var e3t=s(gTe);R0r=r(e3t,"__init__()"),e3t.forEach(t),P0r=r(IDe," (throws an error)."),IDe.forEach(t),B0r=i(Il),jt=n(Il,"DIV",{class:!0});var IA=s(jt);T(n9.$$.fragment,IA),I0r=i(IA),hTe=n(IA,"P",{});var o3t=s(hTe);q0r=r(o3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o3t.forEach(t),N0r=i(IA),Cc=n(IA,"P",{});var aee=s(Cc);j0r=r(aee,`Note:
Loading a model from its configuration file does `),pTe=n(aee,"STRONG",{});var r3t=s(pTe);D0r=r(r3t,"not"),r3t.forEach(t),G0r=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(aee,"A",{href:!0});var t3t=s(KU);O0r=r(t3t,"from_pretrained()"),t3t.forEach(t),V0r=r(aee," to load the model weights."),aee.forEach(t),X0r=i(IA),T(n5.$$.fragment,IA),IA.forEach(t),z0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(s9.$$.fragment,ql),W0r=i(ql),_Te=n(ql,"P",{});var a3t=s(_Te);Q0r=r(a3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a3t.forEach(t),H0r=i(ql),mn=n(ql,"P",{});var qA=s(mn);U0r=r(qA,"The model class to instantiate is selected based on the "),uTe=n(qA,"CODE",{});var n3t=s(uTe);J0r=r(n3t,"model_type"),n3t.forEach(t),Y0r=r(qA,` property of the config object (either
passed as an argument or loaded from `),bTe=n(qA,"CODE",{});var s3t=s(bTe);K0r=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),Z0r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(qA,"CODE",{});var l3t=s(vTe);eAr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),oAr=r(qA,":"),qA.forEach(t),rAr=i(ql),FTe=n(ql,"UL",{});var i3t=s(FTe);s5=n(i3t,"LI",{});var KPe=s(s5);TTe=n(KPe,"STRONG",{});var d3t=s(TTe);tAr=r(d3t,"vision-encoder-decoder"),d3t.forEach(t),aAr=r(KPe," \u2014 "),ZU=n(KPe,"A",{href:!0});var c3t=s(ZU);nAr=r(c3t,"TFVisionEncoderDecoderModel"),c3t.forEach(t),sAr=r(KPe," (Vision Encoder decoder model)"),KPe.forEach(t),i3t.forEach(t),lAr=i(ql),T(l5.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$Ne=i(f),wc=n(f,"H2",{class:!0});var qDe=s(wc);i5=n(qDe,"A",{id:!0,class:!0,href:!0});var f3t=s(i5);MTe=n(f3t,"SPAN",{});var m3t=s(MTe);T(l9.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),iAr=i(qDe),ETe=n(qDe,"SPAN",{});var g3t=s(ETe);dAr=r(g3t,"TFAutoModelForSpeechSeq2Seq"),g3t.forEach(t),qDe.forEach(t),kNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(i9.$$.fragment,Nl),cAr=i(Nl),Ac=n(Nl,"P",{});var nee=s(Ac);fAr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eJ=n(nee,"A",{href:!0});var h3t=s(eJ);mAr=r(h3t,"from_pretrained()"),h3t.forEach(t),gAr=r(nee," class method or the "),oJ=n(nee,"A",{href:!0});var p3t=s(oJ);hAr=r(p3t,"from_config()"),p3t.forEach(t),pAr=r(nee,` class
method.`),nee.forEach(t),_Ar=i(Nl),d9=n(Nl,"P",{});var NDe=s(d9);uAr=r(NDe,"This class cannot be instantiated directly using "),CTe=n(NDe,"CODE",{});var _3t=s(CTe);bAr=r(_3t,"__init__()"),_3t.forEach(t),vAr=r(NDe," (throws an error)."),NDe.forEach(t),FAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var NA=s(Dt);T(c9.$$.fragment,NA),TAr=i(NA),wTe=n(NA,"P",{});var u3t=s(wTe);MAr=r(u3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u3t.forEach(t),EAr=i(NA),yc=n(NA,"P",{});var see=s(yc);CAr=r(see,`Note:
Loading a model from its configuration file does `),ATe=n(see,"STRONG",{});var b3t=s(ATe);wAr=r(b3t,"not"),b3t.forEach(t),AAr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(see,"A",{href:!0});var v3t=s(rJ);yAr=r(v3t,"from_pretrained()"),v3t.forEach(t),LAr=r(see," to load the model weights."),see.forEach(t),xAr=i(NA),T(d5.$$.fragment,NA),NA.forEach(t),$Ar=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(f9.$$.fragment,jl),kAr=i(jl),yTe=n(jl,"P",{});var F3t=s(yTe);SAr=r(F3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F3t.forEach(t),RAr=i(jl),gn=n(jl,"P",{});var jA=s(gn);PAr=r(jA,"The model class to instantiate is selected based on the "),LTe=n(jA,"CODE",{});var T3t=s(LTe);BAr=r(T3t,"model_type"),T3t.forEach(t),IAr=r(jA,` property of the config object (either
passed as an argument or loaded from `),xTe=n(jA,"CODE",{});var M3t=s(xTe);qAr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),NAr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(jA,"CODE",{});var E3t=s($Te);jAr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),DAr=r(jA,":"),jA.forEach(t),GAr=i(jl),kTe=n(jl,"UL",{});var C3t=s(kTe);c5=n(C3t,"LI",{});var ZPe=s(c5);STe=n(ZPe,"STRONG",{});var w3t=s(STe);OAr=r(w3t,"speech_to_text"),w3t.forEach(t),VAr=r(ZPe," \u2014 "),tJ=n(ZPe,"A",{href:!0});var A3t=s(tJ);XAr=r(A3t,"TFSpeech2TextForConditionalGeneration"),A3t.forEach(t),zAr=r(ZPe," (Speech2Text model)"),ZPe.forEach(t),C3t.forEach(t),WAr=i(jl),T(f5.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),SNe=i(f),Lc=n(f,"H2",{class:!0});var jDe=s(Lc);m5=n(jDe,"A",{id:!0,class:!0,href:!0});var y3t=s(m5);RTe=n(y3t,"SPAN",{});var L3t=s(RTe);T(m9.$$.fragment,L3t),L3t.forEach(t),y3t.forEach(t),QAr=i(jDe),PTe=n(jDe,"SPAN",{});var x3t=s(PTe);HAr=r(x3t,"FlaxAutoModel"),x3t.forEach(t),jDe.forEach(t),RNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(g9.$$.fragment,Dl),UAr=i(Dl),xc=n(Dl,"P",{});var lee=s(xc);JAr=r(lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aJ=n(lee,"A",{href:!0});var $3t=s(aJ);YAr=r($3t,"from_pretrained()"),$3t.forEach(t),KAr=r(lee," class method or the "),nJ=n(lee,"A",{href:!0});var k3t=s(nJ);ZAr=r(k3t,"from_config()"),k3t.forEach(t),e6r=r(lee,` class
method.`),lee.forEach(t),o6r=i(Dl),h9=n(Dl,"P",{});var DDe=s(h9);r6r=r(DDe,"This class cannot be instantiated directly using "),BTe=n(DDe,"CODE",{});var S3t=s(BTe);t6r=r(S3t,"__init__()"),S3t.forEach(t),a6r=r(DDe," (throws an error)."),DDe.forEach(t),n6r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var DA=s(Gt);T(p9.$$.fragment,DA),s6r=i(DA),ITe=n(DA,"P",{});var R3t=s(ITe);l6r=r(R3t,"Instantiates one of the base model classes of the library from a configuration."),R3t.forEach(t),i6r=i(DA),$c=n(DA,"P",{});var iee=s($c);d6r=r(iee,`Note:
Loading a model from its configuration file does `),qTe=n(iee,"STRONG",{});var P3t=s(qTe);c6r=r(P3t,"not"),P3t.forEach(t),f6r=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(iee,"A",{href:!0});var B3t=s(sJ);m6r=r(B3t,"from_pretrained()"),B3t.forEach(t),g6r=r(iee," to load the model weights."),iee.forEach(t),h6r=i(DA),T(g5.$$.fragment,DA),DA.forEach(t),p6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(_9.$$.fragment,Gl),_6r=i(Gl),NTe=n(Gl,"P",{});var I3t=s(NTe);u6r=r(I3t,"Instantiate one of the base model classes of the library from a pretrained model."),I3t.forEach(t),b6r=i(Gl),hn=n(Gl,"P",{});var GA=s(hn);v6r=r(GA,"The model class to instantiate is selected based on the "),jTe=n(GA,"CODE",{});var q3t=s(jTe);F6r=r(q3t,"model_type"),q3t.forEach(t),T6r=r(GA,` property of the config object (either
passed as an argument or loaded from `),DTe=n(GA,"CODE",{});var N3t=s(DTe);M6r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),E6r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(GA,"CODE",{});var j3t=s(GTe);C6r=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),w6r=r(GA,":"),GA.forEach(t),A6r=i(Gl),oe=n(Gl,"UL",{});var ne=s(oe);h5=n(ne,"LI",{});var eBe=s(h5);OTe=n(eBe,"STRONG",{});var D3t=s(OTe);y6r=r(D3t,"albert"),D3t.forEach(t),L6r=r(eBe," \u2014 "),lJ=n(eBe,"A",{href:!0});var G3t=s(lJ);x6r=r(G3t,"FlaxAlbertModel"),G3t.forEach(t),$6r=r(eBe," (ALBERT model)"),eBe.forEach(t),k6r=i(ne),p5=n(ne,"LI",{});var oBe=s(p5);VTe=n(oBe,"STRONG",{});var O3t=s(VTe);S6r=r(O3t,"bart"),O3t.forEach(t),R6r=r(oBe," \u2014 "),iJ=n(oBe,"A",{href:!0});var V3t=s(iJ);P6r=r(V3t,"FlaxBartModel"),V3t.forEach(t),B6r=r(oBe," (BART model)"),oBe.forEach(t),I6r=i(ne),_5=n(ne,"LI",{});var rBe=s(_5);XTe=n(rBe,"STRONG",{});var X3t=s(XTe);q6r=r(X3t,"beit"),X3t.forEach(t),N6r=r(rBe," \u2014 "),dJ=n(rBe,"A",{href:!0});var z3t=s(dJ);j6r=r(z3t,"FlaxBeitModel"),z3t.forEach(t),D6r=r(rBe," (BEiT model)"),rBe.forEach(t),G6r=i(ne),u5=n(ne,"LI",{});var tBe=s(u5);zTe=n(tBe,"STRONG",{});var W3t=s(zTe);O6r=r(W3t,"bert"),W3t.forEach(t),V6r=r(tBe," \u2014 "),cJ=n(tBe,"A",{href:!0});var Q3t=s(cJ);X6r=r(Q3t,"FlaxBertModel"),Q3t.forEach(t),z6r=r(tBe," (BERT model)"),tBe.forEach(t),W6r=i(ne),b5=n(ne,"LI",{});var aBe=s(b5);WTe=n(aBe,"STRONG",{});var H3t=s(WTe);Q6r=r(H3t,"big_bird"),H3t.forEach(t),H6r=r(aBe," \u2014 "),fJ=n(aBe,"A",{href:!0});var U3t=s(fJ);U6r=r(U3t,"FlaxBigBirdModel"),U3t.forEach(t),J6r=r(aBe," (BigBird model)"),aBe.forEach(t),Y6r=i(ne),v5=n(ne,"LI",{});var nBe=s(v5);QTe=n(nBe,"STRONG",{});var J3t=s(QTe);K6r=r(J3t,"blenderbot"),J3t.forEach(t),Z6r=r(nBe," \u2014 "),mJ=n(nBe,"A",{href:!0});var Y3t=s(mJ);eyr=r(Y3t,"FlaxBlenderbotModel"),Y3t.forEach(t),oyr=r(nBe," (Blenderbot model)"),nBe.forEach(t),ryr=i(ne),F5=n(ne,"LI",{});var sBe=s(F5);HTe=n(sBe,"STRONG",{});var K3t=s(HTe);tyr=r(K3t,"blenderbot-small"),K3t.forEach(t),ayr=r(sBe," \u2014 "),gJ=n(sBe,"A",{href:!0});var Z3t=s(gJ);nyr=r(Z3t,"FlaxBlenderbotSmallModel"),Z3t.forEach(t),syr=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),lyr=i(ne),T5=n(ne,"LI",{});var lBe=s(T5);UTe=n(lBe,"STRONG",{});var ewt=s(UTe);iyr=r(ewt,"clip"),ewt.forEach(t),dyr=r(lBe," \u2014 "),hJ=n(lBe,"A",{href:!0});var owt=s(hJ);cyr=r(owt,"FlaxCLIPModel"),owt.forEach(t),fyr=r(lBe," (CLIP model)"),lBe.forEach(t),myr=i(ne),M5=n(ne,"LI",{});var iBe=s(M5);JTe=n(iBe,"STRONG",{});var rwt=s(JTe);gyr=r(rwt,"distilbert"),rwt.forEach(t),hyr=r(iBe," \u2014 "),pJ=n(iBe,"A",{href:!0});var twt=s(pJ);pyr=r(twt,"FlaxDistilBertModel"),twt.forEach(t),_yr=r(iBe," (DistilBERT model)"),iBe.forEach(t),uyr=i(ne),E5=n(ne,"LI",{});var dBe=s(E5);YTe=n(dBe,"STRONG",{});var awt=s(YTe);byr=r(awt,"electra"),awt.forEach(t),vyr=r(dBe," \u2014 "),_J=n(dBe,"A",{href:!0});var nwt=s(_J);Fyr=r(nwt,"FlaxElectraModel"),nwt.forEach(t),Tyr=r(dBe," (ELECTRA model)"),dBe.forEach(t),Myr=i(ne),C5=n(ne,"LI",{});var cBe=s(C5);KTe=n(cBe,"STRONG",{});var swt=s(KTe);Eyr=r(swt,"gpt2"),swt.forEach(t),Cyr=r(cBe," \u2014 "),uJ=n(cBe,"A",{href:!0});var lwt=s(uJ);wyr=r(lwt,"FlaxGPT2Model"),lwt.forEach(t),Ayr=r(cBe," (OpenAI GPT-2 model)"),cBe.forEach(t),yyr=i(ne),w5=n(ne,"LI",{});var fBe=s(w5);ZTe=n(fBe,"STRONG",{});var iwt=s(ZTe);Lyr=r(iwt,"gpt_neo"),iwt.forEach(t),xyr=r(fBe," \u2014 "),bJ=n(fBe,"A",{href:!0});var dwt=s(bJ);$yr=r(dwt,"FlaxGPTNeoModel"),dwt.forEach(t),kyr=r(fBe," (GPT Neo model)"),fBe.forEach(t),Syr=i(ne),A5=n(ne,"LI",{});var mBe=s(A5);eMe=n(mBe,"STRONG",{});var cwt=s(eMe);Ryr=r(cwt,"gptj"),cwt.forEach(t),Pyr=r(mBe," \u2014 "),vJ=n(mBe,"A",{href:!0});var fwt=s(vJ);Byr=r(fwt,"FlaxGPTJModel"),fwt.forEach(t),Iyr=r(mBe," (GPT-J model)"),mBe.forEach(t),qyr=i(ne),y5=n(ne,"LI",{});var gBe=s(y5);oMe=n(gBe,"STRONG",{});var mwt=s(oMe);Nyr=r(mwt,"marian"),mwt.forEach(t),jyr=r(gBe," \u2014 "),FJ=n(gBe,"A",{href:!0});var gwt=s(FJ);Dyr=r(gwt,"FlaxMarianModel"),gwt.forEach(t),Gyr=r(gBe," (Marian model)"),gBe.forEach(t),Oyr=i(ne),L5=n(ne,"LI",{});var hBe=s(L5);rMe=n(hBe,"STRONG",{});var hwt=s(rMe);Vyr=r(hwt,"mbart"),hwt.forEach(t),Xyr=r(hBe," \u2014 "),TJ=n(hBe,"A",{href:!0});var pwt=s(TJ);zyr=r(pwt,"FlaxMBartModel"),pwt.forEach(t),Wyr=r(hBe," (mBART model)"),hBe.forEach(t),Qyr=i(ne),x5=n(ne,"LI",{});var pBe=s(x5);tMe=n(pBe,"STRONG",{});var _wt=s(tMe);Hyr=r(_wt,"mt5"),_wt.forEach(t),Uyr=r(pBe," \u2014 "),MJ=n(pBe,"A",{href:!0});var uwt=s(MJ);Jyr=r(uwt,"FlaxMT5Model"),uwt.forEach(t),Yyr=r(pBe," (mT5 model)"),pBe.forEach(t),Kyr=i(ne),$5=n(ne,"LI",{});var _Be=s($5);aMe=n(_Be,"STRONG",{});var bwt=s(aMe);Zyr=r(bwt,"opt"),bwt.forEach(t),eLr=r(_Be," \u2014 "),EJ=n(_Be,"A",{href:!0});var vwt=s(EJ);oLr=r(vwt,"FlaxOPTModel"),vwt.forEach(t),rLr=r(_Be," (OPT model)"),_Be.forEach(t),tLr=i(ne),k5=n(ne,"LI",{});var uBe=s(k5);nMe=n(uBe,"STRONG",{});var Fwt=s(nMe);aLr=r(Fwt,"pegasus"),Fwt.forEach(t),nLr=r(uBe," \u2014 "),CJ=n(uBe,"A",{href:!0});var Twt=s(CJ);sLr=r(Twt,"FlaxPegasusModel"),Twt.forEach(t),lLr=r(uBe," (Pegasus model)"),uBe.forEach(t),iLr=i(ne),S5=n(ne,"LI",{});var bBe=s(S5);sMe=n(bBe,"STRONG",{});var Mwt=s(sMe);dLr=r(Mwt,"roberta"),Mwt.forEach(t),cLr=r(bBe," \u2014 "),wJ=n(bBe,"A",{href:!0});var Ewt=s(wJ);fLr=r(Ewt,"FlaxRobertaModel"),Ewt.forEach(t),mLr=r(bBe," (RoBERTa model)"),bBe.forEach(t),gLr=i(ne),R5=n(ne,"LI",{});var vBe=s(R5);lMe=n(vBe,"STRONG",{});var Cwt=s(lMe);hLr=r(Cwt,"roformer"),Cwt.forEach(t),pLr=r(vBe," \u2014 "),AJ=n(vBe,"A",{href:!0});var wwt=s(AJ);_Lr=r(wwt,"FlaxRoFormerModel"),wwt.forEach(t),uLr=r(vBe," (RoFormer model)"),vBe.forEach(t),bLr=i(ne),P5=n(ne,"LI",{});var FBe=s(P5);iMe=n(FBe,"STRONG",{});var Awt=s(iMe);vLr=r(Awt,"t5"),Awt.forEach(t),FLr=r(FBe," \u2014 "),yJ=n(FBe,"A",{href:!0});var ywt=s(yJ);TLr=r(ywt,"FlaxT5Model"),ywt.forEach(t),MLr=r(FBe," (T5 model)"),FBe.forEach(t),ELr=i(ne),B5=n(ne,"LI",{});var TBe=s(B5);dMe=n(TBe,"STRONG",{});var Lwt=s(dMe);CLr=r(Lwt,"vision-text-dual-encoder"),Lwt.forEach(t),wLr=r(TBe," \u2014 "),LJ=n(TBe,"A",{href:!0});var xwt=s(LJ);ALr=r(xwt,"FlaxVisionTextDualEncoderModel"),xwt.forEach(t),yLr=r(TBe," (VisionTextDualEncoder model)"),TBe.forEach(t),LLr=i(ne),I5=n(ne,"LI",{});var MBe=s(I5);cMe=n(MBe,"STRONG",{});var $wt=s(cMe);xLr=r($wt,"vit"),$wt.forEach(t),$Lr=r(MBe," \u2014 "),xJ=n(MBe,"A",{href:!0});var kwt=s(xJ);kLr=r(kwt,"FlaxViTModel"),kwt.forEach(t),SLr=r(MBe," (ViT model)"),MBe.forEach(t),RLr=i(ne),q5=n(ne,"LI",{});var EBe=s(q5);fMe=n(EBe,"STRONG",{});var Swt=s(fMe);PLr=r(Swt,"wav2vec2"),Swt.forEach(t),BLr=r(EBe," \u2014 "),$J=n(EBe,"A",{href:!0});var Rwt=s($J);ILr=r(Rwt,"FlaxWav2Vec2Model"),Rwt.forEach(t),qLr=r(EBe," (Wav2Vec2 model)"),EBe.forEach(t),NLr=i(ne),N5=n(ne,"LI",{});var CBe=s(N5);mMe=n(CBe,"STRONG",{});var Pwt=s(mMe);jLr=r(Pwt,"xglm"),Pwt.forEach(t),DLr=r(CBe," \u2014 "),kJ=n(CBe,"A",{href:!0});var Bwt=s(kJ);GLr=r(Bwt,"FlaxXGLMModel"),Bwt.forEach(t),OLr=r(CBe," (XGLM model)"),CBe.forEach(t),VLr=i(ne),j5=n(ne,"LI",{});var wBe=s(j5);gMe=n(wBe,"STRONG",{});var Iwt=s(gMe);XLr=r(Iwt,"xlm-roberta"),Iwt.forEach(t),zLr=r(wBe," \u2014 "),SJ=n(wBe,"A",{href:!0});var qwt=s(SJ);WLr=r(qwt,"FlaxXLMRobertaModel"),qwt.forEach(t),QLr=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),ne.forEach(t),HLr=i(Gl),T(D5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),PNe=i(f),kc=n(f,"H2",{class:!0});var GDe=s(kc);G5=n(GDe,"A",{id:!0,class:!0,href:!0});var Nwt=s(G5);hMe=n(Nwt,"SPAN",{});var jwt=s(hMe);T(u9.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),ULr=i(GDe),pMe=n(GDe,"SPAN",{});var Dwt=s(pMe);JLr=r(Dwt,"FlaxAutoModelForCausalLM"),Dwt.forEach(t),GDe.forEach(t),BNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(b9.$$.fragment,Ol),YLr=i(Ol),Sc=n(Ol,"P",{});var dee=s(Sc);KLr=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=n(dee,"A",{href:!0});var Gwt=s(RJ);ZLr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),e8r=r(dee," class method or the "),PJ=n(dee,"A",{href:!0});var Owt=s(PJ);o8r=r(Owt,"from_config()"),Owt.forEach(t),r8r=r(dee,` class
method.`),dee.forEach(t),t8r=i(Ol),v9=n(Ol,"P",{});var ODe=s(v9);a8r=r(ODe,"This class cannot be instantiated directly using "),_Me=n(ODe,"CODE",{});var Vwt=s(_Me);n8r=r(Vwt,"__init__()"),Vwt.forEach(t),s8r=r(ODe," (throws an error)."),ODe.forEach(t),l8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var OA=s(Ot);T(F9.$$.fragment,OA),i8r=i(OA),uMe=n(OA,"P",{});var Xwt=s(uMe);d8r=r(Xwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xwt.forEach(t),c8r=i(OA),Rc=n(OA,"P",{});var cee=s(Rc);f8r=r(cee,`Note:
Loading a model from its configuration file does `),bMe=n(cee,"STRONG",{});var zwt=s(bMe);m8r=r(zwt,"not"),zwt.forEach(t),g8r=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(cee,"A",{href:!0});var Wwt=s(BJ);h8r=r(Wwt,"from_pretrained()"),Wwt.forEach(t),p8r=r(cee," to load the model weights."),cee.forEach(t),_8r=i(OA),T(O5.$$.fragment,OA),OA.forEach(t),u8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(T9.$$.fragment,Vl),b8r=i(Vl),vMe=n(Vl,"P",{});var Qwt=s(vMe);v8r=r(Qwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qwt.forEach(t),F8r=i(Vl),pn=n(Vl,"P",{});var VA=s(pn);T8r=r(VA,"The model class to instantiate is selected based on the "),FMe=n(VA,"CODE",{});var Hwt=s(FMe);M8r=r(Hwt,"model_type"),Hwt.forEach(t),E8r=r(VA,` property of the config object (either
passed as an argument or loaded from `),TMe=n(VA,"CODE",{});var Uwt=s(TMe);C8r=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),w8r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(VA,"CODE",{});var Jwt=s(MMe);A8r=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),y8r=r(VA,":"),VA.forEach(t),L8r=i(Vl),Le=n(Vl,"UL",{});var Ie=s(Le);V5=n(Ie,"LI",{});var ABe=s(V5);EMe=n(ABe,"STRONG",{});var Ywt=s(EMe);x8r=r(Ywt,"bart"),Ywt.forEach(t),$8r=r(ABe," \u2014 "),IJ=n(ABe,"A",{href:!0});var Kwt=s(IJ);k8r=r(Kwt,"FlaxBartForCausalLM"),Kwt.forEach(t),S8r=r(ABe," (BART model)"),ABe.forEach(t),R8r=i(Ie),X5=n(Ie,"LI",{});var yBe=s(X5);CMe=n(yBe,"STRONG",{});var Zwt=s(CMe);P8r=r(Zwt,"bert"),Zwt.forEach(t),B8r=r(yBe," \u2014 "),qJ=n(yBe,"A",{href:!0});var e0t=s(qJ);I8r=r(e0t,"FlaxBertForCausalLM"),e0t.forEach(t),q8r=r(yBe," (BERT model)"),yBe.forEach(t),N8r=i(Ie),z5=n(Ie,"LI",{});var LBe=s(z5);wMe=n(LBe,"STRONG",{});var o0t=s(wMe);j8r=r(o0t,"big_bird"),o0t.forEach(t),D8r=r(LBe," \u2014 "),NJ=n(LBe,"A",{href:!0});var r0t=s(NJ);G8r=r(r0t,"FlaxBigBirdForCausalLM"),r0t.forEach(t),O8r=r(LBe," (BigBird model)"),LBe.forEach(t),V8r=i(Ie),W5=n(Ie,"LI",{});var xBe=s(W5);AMe=n(xBe,"STRONG",{});var t0t=s(AMe);X8r=r(t0t,"electra"),t0t.forEach(t),z8r=r(xBe," \u2014 "),jJ=n(xBe,"A",{href:!0});var a0t=s(jJ);W8r=r(a0t,"FlaxElectraForCausalLM"),a0t.forEach(t),Q8r=r(xBe," (ELECTRA model)"),xBe.forEach(t),H8r=i(Ie),Q5=n(Ie,"LI",{});var $Be=s(Q5);yMe=n($Be,"STRONG",{});var n0t=s(yMe);U8r=r(n0t,"gpt2"),n0t.forEach(t),J8r=r($Be," \u2014 "),DJ=n($Be,"A",{href:!0});var s0t=s(DJ);Y8r=r(s0t,"FlaxGPT2LMHeadModel"),s0t.forEach(t),K8r=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),Z8r=i(Ie),H5=n(Ie,"LI",{});var kBe=s(H5);LMe=n(kBe,"STRONG",{});var l0t=s(LMe);e9r=r(l0t,"gpt_neo"),l0t.forEach(t),o9r=r(kBe," \u2014 "),GJ=n(kBe,"A",{href:!0});var i0t=s(GJ);r9r=r(i0t,"FlaxGPTNeoForCausalLM"),i0t.forEach(t),t9r=r(kBe," (GPT Neo model)"),kBe.forEach(t),a9r=i(Ie),U5=n(Ie,"LI",{});var SBe=s(U5);xMe=n(SBe,"STRONG",{});var d0t=s(xMe);n9r=r(d0t,"gptj"),d0t.forEach(t),s9r=r(SBe," \u2014 "),OJ=n(SBe,"A",{href:!0});var c0t=s(OJ);l9r=r(c0t,"FlaxGPTJForCausalLM"),c0t.forEach(t),i9r=r(SBe," (GPT-J model)"),SBe.forEach(t),d9r=i(Ie),J5=n(Ie,"LI",{});var RBe=s(J5);$Me=n(RBe,"STRONG",{});var f0t=s($Me);c9r=r(f0t,"opt"),f0t.forEach(t),f9r=r(RBe," \u2014 "),VJ=n(RBe,"A",{href:!0});var m0t=s(VJ);m9r=r(m0t,"FlaxOPTForCausalLM"),m0t.forEach(t),g9r=r(RBe," (OPT model)"),RBe.forEach(t),h9r=i(Ie),Y5=n(Ie,"LI",{});var PBe=s(Y5);kMe=n(PBe,"STRONG",{});var g0t=s(kMe);p9r=r(g0t,"roberta"),g0t.forEach(t),_9r=r(PBe," \u2014 "),XJ=n(PBe,"A",{href:!0});var h0t=s(XJ);u9r=r(h0t,"FlaxRobertaForCausalLM"),h0t.forEach(t),b9r=r(PBe," (RoBERTa model)"),PBe.forEach(t),v9r=i(Ie),K5=n(Ie,"LI",{});var BBe=s(K5);SMe=n(BBe,"STRONG",{});var p0t=s(SMe);F9r=r(p0t,"xglm"),p0t.forEach(t),T9r=r(BBe," \u2014 "),zJ=n(BBe,"A",{href:!0});var _0t=s(zJ);M9r=r(_0t,"FlaxXGLMForCausalLM"),_0t.forEach(t),E9r=r(BBe," (XGLM model)"),BBe.forEach(t),Ie.forEach(t),C9r=i(Vl),T(Z5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),INe=i(f),Pc=n(f,"H2",{class:!0});var VDe=s(Pc);e3=n(VDe,"A",{id:!0,class:!0,href:!0});var u0t=s(e3);RMe=n(u0t,"SPAN",{});var b0t=s(RMe);T(M9.$$.fragment,b0t),b0t.forEach(t),u0t.forEach(t),w9r=i(VDe),PMe=n(VDe,"SPAN",{});var v0t=s(PMe);A9r=r(v0t,"FlaxAutoModelForPreTraining"),v0t.forEach(t),VDe.forEach(t),qNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(E9.$$.fragment,Xl),y9r=i(Xl),Bc=n(Xl,"P",{});var fee=s(Bc);L9r=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WJ=n(fee,"A",{href:!0});var F0t=s(WJ);x9r=r(F0t,"from_pretrained()"),F0t.forEach(t),$9r=r(fee," class method or the "),QJ=n(fee,"A",{href:!0});var T0t=s(QJ);k9r=r(T0t,"from_config()"),T0t.forEach(t),S9r=r(fee,` class
method.`),fee.forEach(t),R9r=i(Xl),C9=n(Xl,"P",{});var XDe=s(C9);P9r=r(XDe,"This class cannot be instantiated directly using "),BMe=n(XDe,"CODE",{});var M0t=s(BMe);B9r=r(M0t,"__init__()"),M0t.forEach(t),I9r=r(XDe," (throws an error)."),XDe.forEach(t),q9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var XA=s(Vt);T(w9.$$.fragment,XA),N9r=i(XA),IMe=n(XA,"P",{});var E0t=s(IMe);j9r=r(E0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E0t.forEach(t),D9r=i(XA),Ic=n(XA,"P",{});var mee=s(Ic);G9r=r(mee,`Note:
Loading a model from its configuration file does `),qMe=n(mee,"STRONG",{});var C0t=s(qMe);O9r=r(C0t,"not"),C0t.forEach(t),V9r=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(mee,"A",{href:!0});var w0t=s(HJ);X9r=r(w0t,"from_pretrained()"),w0t.forEach(t),z9r=r(mee," to load the model weights."),mee.forEach(t),W9r=i(XA),T(o3.$$.fragment,XA),XA.forEach(t),Q9r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(A9.$$.fragment,zl),H9r=i(zl),NMe=n(zl,"P",{});var A0t=s(NMe);U9r=r(A0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A0t.forEach(t),J9r=i(zl),_n=n(zl,"P",{});var zA=s(_n);Y9r=r(zA,"The model class to instantiate is selected based on the "),jMe=n(zA,"CODE",{});var y0t=s(jMe);K9r=r(y0t,"model_type"),y0t.forEach(t),Z9r=r(zA,` property of the config object (either
passed as an argument or loaded from `),DMe=n(zA,"CODE",{});var L0t=s(DMe);exr=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),oxr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(zA,"CODE",{});var x0t=s(GMe);rxr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),txr=r(zA,":"),zA.forEach(t),axr=i(zl),Me=n(zl,"UL",{});var we=s(Me);r3=n(we,"LI",{});var IBe=s(r3);OMe=n(IBe,"STRONG",{});var $0t=s(OMe);nxr=r($0t,"albert"),$0t.forEach(t),sxr=r(IBe," \u2014 "),UJ=n(IBe,"A",{href:!0});var k0t=s(UJ);lxr=r(k0t,"FlaxAlbertForPreTraining"),k0t.forEach(t),ixr=r(IBe," (ALBERT model)"),IBe.forEach(t),dxr=i(we),t3=n(we,"LI",{});var qBe=s(t3);VMe=n(qBe,"STRONG",{});var S0t=s(VMe);cxr=r(S0t,"bart"),S0t.forEach(t),fxr=r(qBe," \u2014 "),JJ=n(qBe,"A",{href:!0});var R0t=s(JJ);mxr=r(R0t,"FlaxBartForConditionalGeneration"),R0t.forEach(t),gxr=r(qBe," (BART model)"),qBe.forEach(t),hxr=i(we),a3=n(we,"LI",{});var NBe=s(a3);XMe=n(NBe,"STRONG",{});var P0t=s(XMe);pxr=r(P0t,"bert"),P0t.forEach(t),_xr=r(NBe," \u2014 "),YJ=n(NBe,"A",{href:!0});var B0t=s(YJ);uxr=r(B0t,"FlaxBertForPreTraining"),B0t.forEach(t),bxr=r(NBe," (BERT model)"),NBe.forEach(t),vxr=i(we),n3=n(we,"LI",{});var jBe=s(n3);zMe=n(jBe,"STRONG",{});var I0t=s(zMe);Fxr=r(I0t,"big_bird"),I0t.forEach(t),Txr=r(jBe," \u2014 "),KJ=n(jBe,"A",{href:!0});var q0t=s(KJ);Mxr=r(q0t,"FlaxBigBirdForPreTraining"),q0t.forEach(t),Exr=r(jBe," (BigBird model)"),jBe.forEach(t),Cxr=i(we),s3=n(we,"LI",{});var DBe=s(s3);WMe=n(DBe,"STRONG",{});var N0t=s(WMe);wxr=r(N0t,"electra"),N0t.forEach(t),Axr=r(DBe," \u2014 "),ZJ=n(DBe,"A",{href:!0});var j0t=s(ZJ);yxr=r(j0t,"FlaxElectraForPreTraining"),j0t.forEach(t),Lxr=r(DBe," (ELECTRA model)"),DBe.forEach(t),xxr=i(we),l3=n(we,"LI",{});var GBe=s(l3);QMe=n(GBe,"STRONG",{});var D0t=s(QMe);$xr=r(D0t,"mbart"),D0t.forEach(t),kxr=r(GBe," \u2014 "),eY=n(GBe,"A",{href:!0});var G0t=s(eY);Sxr=r(G0t,"FlaxMBartForConditionalGeneration"),G0t.forEach(t),Rxr=r(GBe," (mBART model)"),GBe.forEach(t),Pxr=i(we),i3=n(we,"LI",{});var OBe=s(i3);HMe=n(OBe,"STRONG",{});var O0t=s(HMe);Bxr=r(O0t,"mt5"),O0t.forEach(t),Ixr=r(OBe," \u2014 "),oY=n(OBe,"A",{href:!0});var V0t=s(oY);qxr=r(V0t,"FlaxMT5ForConditionalGeneration"),V0t.forEach(t),Nxr=r(OBe," (mT5 model)"),OBe.forEach(t),jxr=i(we),d3=n(we,"LI",{});var VBe=s(d3);UMe=n(VBe,"STRONG",{});var X0t=s(UMe);Dxr=r(X0t,"roberta"),X0t.forEach(t),Gxr=r(VBe," \u2014 "),rY=n(VBe,"A",{href:!0});var z0t=s(rY);Oxr=r(z0t,"FlaxRobertaForMaskedLM"),z0t.forEach(t),Vxr=r(VBe," (RoBERTa model)"),VBe.forEach(t),Xxr=i(we),c3=n(we,"LI",{});var XBe=s(c3);JMe=n(XBe,"STRONG",{});var W0t=s(JMe);zxr=r(W0t,"roformer"),W0t.forEach(t),Wxr=r(XBe," \u2014 "),tY=n(XBe,"A",{href:!0});var Q0t=s(tY);Qxr=r(Q0t,"FlaxRoFormerForMaskedLM"),Q0t.forEach(t),Hxr=r(XBe," (RoFormer model)"),XBe.forEach(t),Uxr=i(we),f3=n(we,"LI",{});var zBe=s(f3);YMe=n(zBe,"STRONG",{});var H0t=s(YMe);Jxr=r(H0t,"t5"),H0t.forEach(t),Yxr=r(zBe," \u2014 "),aY=n(zBe,"A",{href:!0});var U0t=s(aY);Kxr=r(U0t,"FlaxT5ForConditionalGeneration"),U0t.forEach(t),Zxr=r(zBe," (T5 model)"),zBe.forEach(t),e$r=i(we),m3=n(we,"LI",{});var WBe=s(m3);KMe=n(WBe,"STRONG",{});var J0t=s(KMe);o$r=r(J0t,"wav2vec2"),J0t.forEach(t),r$r=r(WBe," \u2014 "),nY=n(WBe,"A",{href:!0});var Y0t=s(nY);t$r=r(Y0t,"FlaxWav2Vec2ForPreTraining"),Y0t.forEach(t),a$r=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),n$r=i(we),g3=n(we,"LI",{});var QBe=s(g3);ZMe=n(QBe,"STRONG",{});var K0t=s(ZMe);s$r=r(K0t,"xlm-roberta"),K0t.forEach(t),l$r=r(QBe," \u2014 "),sY=n(QBe,"A",{href:!0});var Z0t=s(sY);i$r=r(Z0t,"FlaxXLMRobertaForMaskedLM"),Z0t.forEach(t),d$r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),we.forEach(t),c$r=i(zl),T(h3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NNe=i(f),qc=n(f,"H2",{class:!0});var zDe=s(qc);p3=n(zDe,"A",{id:!0,class:!0,href:!0});var eAt=s(p3);e4e=n(eAt,"SPAN",{});var oAt=s(e4e);T(y9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),f$r=i(zDe),o4e=n(zDe,"SPAN",{});var rAt=s(o4e);m$r=r(rAt,"FlaxAutoModelForMaskedLM"),rAt.forEach(t),zDe.forEach(t),jNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(L9.$$.fragment,Wl),g$r=i(Wl),Nc=n(Wl,"P",{});var gee=s(Nc);h$r=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lY=n(gee,"A",{href:!0});var tAt=s(lY);p$r=r(tAt,"from_pretrained()"),tAt.forEach(t),_$r=r(gee," class method or the "),iY=n(gee,"A",{href:!0});var aAt=s(iY);u$r=r(aAt,"from_config()"),aAt.forEach(t),b$r=r(gee,` class
method.`),gee.forEach(t),v$r=i(Wl),x9=n(Wl,"P",{});var WDe=s(x9);F$r=r(WDe,"This class cannot be instantiated directly using "),r4e=n(WDe,"CODE",{});var nAt=s(r4e);T$r=r(nAt,"__init__()"),nAt.forEach(t),M$r=r(WDe," (throws an error)."),WDe.forEach(t),E$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var WA=s(Xt);T($9.$$.fragment,WA),C$r=i(WA),t4e=n(WA,"P",{});var sAt=s(t4e);w$r=r(sAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sAt.forEach(t),A$r=i(WA),jc=n(WA,"P",{});var hee=s(jc);y$r=r(hee,`Note:
Loading a model from its configuration file does `),a4e=n(hee,"STRONG",{});var lAt=s(a4e);L$r=r(lAt,"not"),lAt.forEach(t),x$r=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(hee,"A",{href:!0});var iAt=s(dY);$$r=r(iAt,"from_pretrained()"),iAt.forEach(t),k$r=r(hee," to load the model weights."),hee.forEach(t),S$r=i(WA),T(_3.$$.fragment,WA),WA.forEach(t),R$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(k9.$$.fragment,Ql),P$r=i(Ql),n4e=n(Ql,"P",{});var dAt=s(n4e);B$r=r(dAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dAt.forEach(t),I$r=i(Ql),un=n(Ql,"P",{});var QA=s(un);q$r=r(QA,"The model class to instantiate is selected based on the "),s4e=n(QA,"CODE",{});var cAt=s(s4e);N$r=r(cAt,"model_type"),cAt.forEach(t),j$r=r(QA,` property of the config object (either
passed as an argument or loaded from `),l4e=n(QA,"CODE",{});var fAt=s(l4e);D$r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),G$r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(QA,"CODE",{});var mAt=s(i4e);O$r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),V$r=r(QA,":"),QA.forEach(t),X$r=i(Ql),xe=n(Ql,"UL",{});var qe=s(xe);u3=n(qe,"LI",{});var HBe=s(u3);d4e=n(HBe,"STRONG",{});var gAt=s(d4e);z$r=r(gAt,"albert"),gAt.forEach(t),W$r=r(HBe," \u2014 "),cY=n(HBe,"A",{href:!0});var hAt=s(cY);Q$r=r(hAt,"FlaxAlbertForMaskedLM"),hAt.forEach(t),H$r=r(HBe," (ALBERT model)"),HBe.forEach(t),U$r=i(qe),b3=n(qe,"LI",{});var UBe=s(b3);c4e=n(UBe,"STRONG",{});var pAt=s(c4e);J$r=r(pAt,"bart"),pAt.forEach(t),Y$r=r(UBe," \u2014 "),fY=n(UBe,"A",{href:!0});var _At=s(fY);K$r=r(_At,"FlaxBartForConditionalGeneration"),_At.forEach(t),Z$r=r(UBe," (BART model)"),UBe.forEach(t),ekr=i(qe),v3=n(qe,"LI",{});var JBe=s(v3);f4e=n(JBe,"STRONG",{});var uAt=s(f4e);okr=r(uAt,"bert"),uAt.forEach(t),rkr=r(JBe," \u2014 "),mY=n(JBe,"A",{href:!0});var bAt=s(mY);tkr=r(bAt,"FlaxBertForMaskedLM"),bAt.forEach(t),akr=r(JBe," (BERT model)"),JBe.forEach(t),nkr=i(qe),F3=n(qe,"LI",{});var YBe=s(F3);m4e=n(YBe,"STRONG",{});var vAt=s(m4e);skr=r(vAt,"big_bird"),vAt.forEach(t),lkr=r(YBe," \u2014 "),gY=n(YBe,"A",{href:!0});var FAt=s(gY);ikr=r(FAt,"FlaxBigBirdForMaskedLM"),FAt.forEach(t),dkr=r(YBe," (BigBird model)"),YBe.forEach(t),ckr=i(qe),T3=n(qe,"LI",{});var KBe=s(T3);g4e=n(KBe,"STRONG",{});var TAt=s(g4e);fkr=r(TAt,"distilbert"),TAt.forEach(t),mkr=r(KBe," \u2014 "),hY=n(KBe,"A",{href:!0});var MAt=s(hY);gkr=r(MAt,"FlaxDistilBertForMaskedLM"),MAt.forEach(t),hkr=r(KBe," (DistilBERT model)"),KBe.forEach(t),pkr=i(qe),M3=n(qe,"LI",{});var ZBe=s(M3);h4e=n(ZBe,"STRONG",{});var EAt=s(h4e);_kr=r(EAt,"electra"),EAt.forEach(t),ukr=r(ZBe," \u2014 "),pY=n(ZBe,"A",{href:!0});var CAt=s(pY);bkr=r(CAt,"FlaxElectraForMaskedLM"),CAt.forEach(t),vkr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),Fkr=i(qe),E3=n(qe,"LI",{});var eIe=s(E3);p4e=n(eIe,"STRONG",{});var wAt=s(p4e);Tkr=r(wAt,"mbart"),wAt.forEach(t),Mkr=r(eIe," \u2014 "),_Y=n(eIe,"A",{href:!0});var AAt=s(_Y);Ekr=r(AAt,"FlaxMBartForConditionalGeneration"),AAt.forEach(t),Ckr=r(eIe," (mBART model)"),eIe.forEach(t),wkr=i(qe),C3=n(qe,"LI",{});var oIe=s(C3);_4e=n(oIe,"STRONG",{});var yAt=s(_4e);Akr=r(yAt,"roberta"),yAt.forEach(t),ykr=r(oIe," \u2014 "),uY=n(oIe,"A",{href:!0});var LAt=s(uY);Lkr=r(LAt,"FlaxRobertaForMaskedLM"),LAt.forEach(t),xkr=r(oIe," (RoBERTa model)"),oIe.forEach(t),$kr=i(qe),w3=n(qe,"LI",{});var rIe=s(w3);u4e=n(rIe,"STRONG",{});var xAt=s(u4e);kkr=r(xAt,"roformer"),xAt.forEach(t),Skr=r(rIe," \u2014 "),bY=n(rIe,"A",{href:!0});var $At=s(bY);Rkr=r($At,"FlaxRoFormerForMaskedLM"),$At.forEach(t),Pkr=r(rIe," (RoFormer model)"),rIe.forEach(t),Bkr=i(qe),A3=n(qe,"LI",{});var tIe=s(A3);b4e=n(tIe,"STRONG",{});var kAt=s(b4e);Ikr=r(kAt,"xlm-roberta"),kAt.forEach(t),qkr=r(tIe," \u2014 "),vY=n(tIe,"A",{href:!0});var SAt=s(vY);Nkr=r(SAt,"FlaxXLMRobertaForMaskedLM"),SAt.forEach(t),jkr=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),qe.forEach(t),Dkr=i(Ql),T(y3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),DNe=i(f),Dc=n(f,"H2",{class:!0});var QDe=s(Dc);L3=n(QDe,"A",{id:!0,class:!0,href:!0});var RAt=s(L3);v4e=n(RAt,"SPAN",{});var PAt=s(v4e);T(S9.$$.fragment,PAt),PAt.forEach(t),RAt.forEach(t),Gkr=i(QDe),F4e=n(QDe,"SPAN",{});var BAt=s(F4e);Okr=r(BAt,"FlaxAutoModelForSeq2SeqLM"),BAt.forEach(t),QDe.forEach(t),GNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(R9.$$.fragment,Hl),Vkr=i(Hl),Gc=n(Hl,"P",{});var pee=s(Gc);Xkr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FY=n(pee,"A",{href:!0});var IAt=s(FY);zkr=r(IAt,"from_pretrained()"),IAt.forEach(t),Wkr=r(pee," class method or the "),TY=n(pee,"A",{href:!0});var qAt=s(TY);Qkr=r(qAt,"from_config()"),qAt.forEach(t),Hkr=r(pee,` class
method.`),pee.forEach(t),Ukr=i(Hl),P9=n(Hl,"P",{});var HDe=s(P9);Jkr=r(HDe,"This class cannot be instantiated directly using "),T4e=n(HDe,"CODE",{});var NAt=s(T4e);Ykr=r(NAt,"__init__()"),NAt.forEach(t),Kkr=r(HDe," (throws an error)."),HDe.forEach(t),Zkr=i(Hl),zt=n(Hl,"DIV",{class:!0});var HA=s(zt);T(B9.$$.fragment,HA),eSr=i(HA),M4e=n(HA,"P",{});var jAt=s(M4e);oSr=r(jAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jAt.forEach(t),rSr=i(HA),Oc=n(HA,"P",{});var _ee=s(Oc);tSr=r(_ee,`Note:
Loading a model from its configuration file does `),E4e=n(_ee,"STRONG",{});var DAt=s(E4e);aSr=r(DAt,"not"),DAt.forEach(t),nSr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(_ee,"A",{href:!0});var GAt=s(MY);sSr=r(GAt,"from_pretrained()"),GAt.forEach(t),lSr=r(_ee," to load the model weights."),_ee.forEach(t),iSr=i(HA),T(x3.$$.fragment,HA),HA.forEach(t),dSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(I9.$$.fragment,Ul),cSr=i(Ul),C4e=n(Ul,"P",{});var OAt=s(C4e);fSr=r(OAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OAt.forEach(t),mSr=i(Ul),bn=n(Ul,"P",{});var UA=s(bn);gSr=r(UA,"The model class to instantiate is selected based on the "),w4e=n(UA,"CODE",{});var VAt=s(w4e);hSr=r(VAt,"model_type"),VAt.forEach(t),pSr=r(UA,` property of the config object (either
passed as an argument or loaded from `),A4e=n(UA,"CODE",{});var XAt=s(A4e);_Sr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),uSr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(UA,"CODE",{});var zAt=s(y4e);bSr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),vSr=r(UA,":"),UA.forEach(t),FSr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);$3=n(ze,"LI",{});var aIe=s($3);L4e=n(aIe,"STRONG",{});var WAt=s(L4e);TSr=r(WAt,"bart"),WAt.forEach(t),MSr=r(aIe," \u2014 "),EY=n(aIe,"A",{href:!0});var QAt=s(EY);ESr=r(QAt,"FlaxBartForConditionalGeneration"),QAt.forEach(t),CSr=r(aIe," (BART model)"),aIe.forEach(t),wSr=i(ze),k3=n(ze,"LI",{});var nIe=s(k3);x4e=n(nIe,"STRONG",{});var HAt=s(x4e);ASr=r(HAt,"blenderbot"),HAt.forEach(t),ySr=r(nIe," \u2014 "),CY=n(nIe,"A",{href:!0});var UAt=s(CY);LSr=r(UAt,"FlaxBlenderbotForConditionalGeneration"),UAt.forEach(t),xSr=r(nIe," (Blenderbot model)"),nIe.forEach(t),$Sr=i(ze),S3=n(ze,"LI",{});var sIe=s(S3);$4e=n(sIe,"STRONG",{});var JAt=s($4e);kSr=r(JAt,"blenderbot-small"),JAt.forEach(t),SSr=r(sIe," \u2014 "),wY=n(sIe,"A",{href:!0});var YAt=s(wY);RSr=r(YAt,"FlaxBlenderbotSmallForConditionalGeneration"),YAt.forEach(t),PSr=r(sIe," (BlenderbotSmall model)"),sIe.forEach(t),BSr=i(ze),R3=n(ze,"LI",{});var lIe=s(R3);k4e=n(lIe,"STRONG",{});var KAt=s(k4e);ISr=r(KAt,"encoder-decoder"),KAt.forEach(t),qSr=r(lIe," \u2014 "),AY=n(lIe,"A",{href:!0});var ZAt=s(AY);NSr=r(ZAt,"FlaxEncoderDecoderModel"),ZAt.forEach(t),jSr=r(lIe," (Encoder decoder model)"),lIe.forEach(t),DSr=i(ze),P3=n(ze,"LI",{});var iIe=s(P3);S4e=n(iIe,"STRONG",{});var e6t=s(S4e);GSr=r(e6t,"marian"),e6t.forEach(t),OSr=r(iIe," \u2014 "),yY=n(iIe,"A",{href:!0});var o6t=s(yY);VSr=r(o6t,"FlaxMarianMTModel"),o6t.forEach(t),XSr=r(iIe," (Marian model)"),iIe.forEach(t),zSr=i(ze),B3=n(ze,"LI",{});var dIe=s(B3);R4e=n(dIe,"STRONG",{});var r6t=s(R4e);WSr=r(r6t,"mbart"),r6t.forEach(t),QSr=r(dIe," \u2014 "),LY=n(dIe,"A",{href:!0});var t6t=s(LY);HSr=r(t6t,"FlaxMBartForConditionalGeneration"),t6t.forEach(t),USr=r(dIe," (mBART model)"),dIe.forEach(t),JSr=i(ze),I3=n(ze,"LI",{});var cIe=s(I3);P4e=n(cIe,"STRONG",{});var a6t=s(P4e);YSr=r(a6t,"mt5"),a6t.forEach(t),KSr=r(cIe," \u2014 "),xY=n(cIe,"A",{href:!0});var n6t=s(xY);ZSr=r(n6t,"FlaxMT5ForConditionalGeneration"),n6t.forEach(t),eRr=r(cIe," (mT5 model)"),cIe.forEach(t),oRr=i(ze),q3=n(ze,"LI",{});var fIe=s(q3);B4e=n(fIe,"STRONG",{});var s6t=s(B4e);rRr=r(s6t,"pegasus"),s6t.forEach(t),tRr=r(fIe," \u2014 "),$Y=n(fIe,"A",{href:!0});var l6t=s($Y);aRr=r(l6t,"FlaxPegasusForConditionalGeneration"),l6t.forEach(t),nRr=r(fIe," (Pegasus model)"),fIe.forEach(t),sRr=i(ze),N3=n(ze,"LI",{});var mIe=s(N3);I4e=n(mIe,"STRONG",{});var i6t=s(I4e);lRr=r(i6t,"t5"),i6t.forEach(t),iRr=r(mIe," \u2014 "),kY=n(mIe,"A",{href:!0});var d6t=s(kY);dRr=r(d6t,"FlaxT5ForConditionalGeneration"),d6t.forEach(t),cRr=r(mIe," (T5 model)"),mIe.forEach(t),ze.forEach(t),fRr=i(Ul),T(j3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ONe=i(f),Vc=n(f,"H2",{class:!0});var UDe=s(Vc);D3=n(UDe,"A",{id:!0,class:!0,href:!0});var c6t=s(D3);q4e=n(c6t,"SPAN",{});var f6t=s(q4e);T(q9.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),mRr=i(UDe),N4e=n(UDe,"SPAN",{});var m6t=s(N4e);gRr=r(m6t,"FlaxAutoModelForSequenceClassification"),m6t.forEach(t),UDe.forEach(t),VNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(N9.$$.fragment,Jl),hRr=i(Jl),Xc=n(Jl,"P",{});var uee=s(Xc);pRr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SY=n(uee,"A",{href:!0});var g6t=s(SY);_Rr=r(g6t,"from_pretrained()"),g6t.forEach(t),uRr=r(uee," class method or the "),RY=n(uee,"A",{href:!0});var h6t=s(RY);bRr=r(h6t,"from_config()"),h6t.forEach(t),vRr=r(uee,` class
method.`),uee.forEach(t),FRr=i(Jl),j9=n(Jl,"P",{});var JDe=s(j9);TRr=r(JDe,"This class cannot be instantiated directly using "),j4e=n(JDe,"CODE",{});var p6t=s(j4e);MRr=r(p6t,"__init__()"),p6t.forEach(t),ERr=r(JDe," (throws an error)."),JDe.forEach(t),CRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var JA=s(Wt);T(D9.$$.fragment,JA),wRr=i(JA),D4e=n(JA,"P",{});var _6t=s(D4e);ARr=r(_6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_6t.forEach(t),yRr=i(JA),zc=n(JA,"P",{});var bee=s(zc);LRr=r(bee,`Note:
Loading a model from its configuration file does `),G4e=n(bee,"STRONG",{});var u6t=s(G4e);xRr=r(u6t,"not"),u6t.forEach(t),$Rr=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(bee,"A",{href:!0});var b6t=s(PY);kRr=r(b6t,"from_pretrained()"),b6t.forEach(t),SRr=r(bee," to load the model weights."),bee.forEach(t),RRr=i(JA),T(G3.$$.fragment,JA),JA.forEach(t),PRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(G9.$$.fragment,Yl),BRr=i(Yl),O4e=n(Yl,"P",{});var v6t=s(O4e);IRr=r(v6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v6t.forEach(t),qRr=i(Yl),vn=n(Yl,"P",{});var YA=s(vn);NRr=r(YA,"The model class to instantiate is selected based on the "),V4e=n(YA,"CODE",{});var F6t=s(V4e);jRr=r(F6t,"model_type"),F6t.forEach(t),DRr=r(YA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(YA,"CODE",{});var T6t=s(X4e);GRr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),ORr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(YA,"CODE",{});var M6t=s(z4e);VRr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),XRr=r(YA,":"),YA.forEach(t),zRr=i(Yl),$e=n(Yl,"UL",{});var Ne=s($e);O3=n(Ne,"LI",{});var gIe=s(O3);W4e=n(gIe,"STRONG",{});var E6t=s(W4e);WRr=r(E6t,"albert"),E6t.forEach(t),QRr=r(gIe," \u2014 "),BY=n(gIe,"A",{href:!0});var C6t=s(BY);HRr=r(C6t,"FlaxAlbertForSequenceClassification"),C6t.forEach(t),URr=r(gIe," (ALBERT model)"),gIe.forEach(t),JRr=i(Ne),V3=n(Ne,"LI",{});var hIe=s(V3);Q4e=n(hIe,"STRONG",{});var w6t=s(Q4e);YRr=r(w6t,"bart"),w6t.forEach(t),KRr=r(hIe," \u2014 "),IY=n(hIe,"A",{href:!0});var A6t=s(IY);ZRr=r(A6t,"FlaxBartForSequenceClassification"),A6t.forEach(t),ePr=r(hIe," (BART model)"),hIe.forEach(t),oPr=i(Ne),X3=n(Ne,"LI",{});var pIe=s(X3);H4e=n(pIe,"STRONG",{});var y6t=s(H4e);rPr=r(y6t,"bert"),y6t.forEach(t),tPr=r(pIe," \u2014 "),qY=n(pIe,"A",{href:!0});var L6t=s(qY);aPr=r(L6t,"FlaxBertForSequenceClassification"),L6t.forEach(t),nPr=r(pIe," (BERT model)"),pIe.forEach(t),sPr=i(Ne),z3=n(Ne,"LI",{});var _Ie=s(z3);U4e=n(_Ie,"STRONG",{});var x6t=s(U4e);lPr=r(x6t,"big_bird"),x6t.forEach(t),iPr=r(_Ie," \u2014 "),NY=n(_Ie,"A",{href:!0});var $6t=s(NY);dPr=r($6t,"FlaxBigBirdForSequenceClassification"),$6t.forEach(t),cPr=r(_Ie," (BigBird model)"),_Ie.forEach(t),fPr=i(Ne),W3=n(Ne,"LI",{});var uIe=s(W3);J4e=n(uIe,"STRONG",{});var k6t=s(J4e);mPr=r(k6t,"distilbert"),k6t.forEach(t),gPr=r(uIe," \u2014 "),jY=n(uIe,"A",{href:!0});var S6t=s(jY);hPr=r(S6t,"FlaxDistilBertForSequenceClassification"),S6t.forEach(t),pPr=r(uIe," (DistilBERT model)"),uIe.forEach(t),_Pr=i(Ne),Q3=n(Ne,"LI",{});var bIe=s(Q3);Y4e=n(bIe,"STRONG",{});var R6t=s(Y4e);uPr=r(R6t,"electra"),R6t.forEach(t),bPr=r(bIe," \u2014 "),DY=n(bIe,"A",{href:!0});var P6t=s(DY);vPr=r(P6t,"FlaxElectraForSequenceClassification"),P6t.forEach(t),FPr=r(bIe," (ELECTRA model)"),bIe.forEach(t),TPr=i(Ne),H3=n(Ne,"LI",{});var vIe=s(H3);K4e=n(vIe,"STRONG",{});var B6t=s(K4e);MPr=r(B6t,"mbart"),B6t.forEach(t),EPr=r(vIe," \u2014 "),GY=n(vIe,"A",{href:!0});var I6t=s(GY);CPr=r(I6t,"FlaxMBartForSequenceClassification"),I6t.forEach(t),wPr=r(vIe," (mBART model)"),vIe.forEach(t),APr=i(Ne),U3=n(Ne,"LI",{});var FIe=s(U3);Z4e=n(FIe,"STRONG",{});var q6t=s(Z4e);yPr=r(q6t,"roberta"),q6t.forEach(t),LPr=r(FIe," \u2014 "),OY=n(FIe,"A",{href:!0});var N6t=s(OY);xPr=r(N6t,"FlaxRobertaForSequenceClassification"),N6t.forEach(t),$Pr=r(FIe," (RoBERTa model)"),FIe.forEach(t),kPr=i(Ne),J3=n(Ne,"LI",{});var TIe=s(J3);eEe=n(TIe,"STRONG",{});var j6t=s(eEe);SPr=r(j6t,"roformer"),j6t.forEach(t),RPr=r(TIe," \u2014 "),VY=n(TIe,"A",{href:!0});var D6t=s(VY);PPr=r(D6t,"FlaxRoFormerForSequenceClassification"),D6t.forEach(t),BPr=r(TIe," (RoFormer model)"),TIe.forEach(t),IPr=i(Ne),Y3=n(Ne,"LI",{});var MIe=s(Y3);oEe=n(MIe,"STRONG",{});var G6t=s(oEe);qPr=r(G6t,"xlm-roberta"),G6t.forEach(t),NPr=r(MIe," \u2014 "),XY=n(MIe,"A",{href:!0});var O6t=s(XY);jPr=r(O6t,"FlaxXLMRobertaForSequenceClassification"),O6t.forEach(t),DPr=r(MIe," (XLM-RoBERTa model)"),MIe.forEach(t),Ne.forEach(t),GPr=i(Yl),T(K3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XNe=i(f),Wc=n(f,"H2",{class:!0});var YDe=s(Wc);Z3=n(YDe,"A",{id:!0,class:!0,href:!0});var V6t=s(Z3);rEe=n(V6t,"SPAN",{});var X6t=s(rEe);T(O9.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),OPr=i(YDe),tEe=n(YDe,"SPAN",{});var z6t=s(tEe);VPr=r(z6t,"FlaxAutoModelForQuestionAnswering"),z6t.forEach(t),YDe.forEach(t),zNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(V9.$$.fragment,Kl),XPr=i(Kl),Qc=n(Kl,"P",{});var vee=s(Qc);zPr=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zY=n(vee,"A",{href:!0});var W6t=s(zY);WPr=r(W6t,"from_pretrained()"),W6t.forEach(t),QPr=r(vee," class method or the "),WY=n(vee,"A",{href:!0});var Q6t=s(WY);HPr=r(Q6t,"from_config()"),Q6t.forEach(t),UPr=r(vee,` class
method.`),vee.forEach(t),JPr=i(Kl),X9=n(Kl,"P",{});var KDe=s(X9);YPr=r(KDe,"This class cannot be instantiated directly using "),aEe=n(KDe,"CODE",{});var H6t=s(aEe);KPr=r(H6t,"__init__()"),H6t.forEach(t),ZPr=r(KDe," (throws an error)."),KDe.forEach(t),eBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var KA=s(Qt);T(z9.$$.fragment,KA),oBr=i(KA),nEe=n(KA,"P",{});var U6t=s(nEe);rBr=r(U6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U6t.forEach(t),tBr=i(KA),Hc=n(KA,"P",{});var Fee=s(Hc);aBr=r(Fee,`Note:
Loading a model from its configuration file does `),sEe=n(Fee,"STRONG",{});var J6t=s(sEe);nBr=r(J6t,"not"),J6t.forEach(t),sBr=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Fee,"A",{href:!0});var Y6t=s(QY);lBr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),iBr=r(Fee," to load the model weights."),Fee.forEach(t),dBr=i(KA),T(ew.$$.fragment,KA),KA.forEach(t),cBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(W9.$$.fragment,Zl),fBr=i(Zl),lEe=n(Zl,"P",{});var K6t=s(lEe);mBr=r(K6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K6t.forEach(t),gBr=i(Zl),Fn=n(Zl,"P",{});var ZA=s(Fn);hBr=r(ZA,"The model class to instantiate is selected based on the "),iEe=n(ZA,"CODE",{});var Z6t=s(iEe);pBr=r(Z6t,"model_type"),Z6t.forEach(t),_Br=r(ZA,` property of the config object (either
passed as an argument or loaded from `),dEe=n(ZA,"CODE",{});var eyt=s(dEe);uBr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),bBr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(ZA,"CODE",{});var oyt=s(cEe);vBr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),FBr=r(ZA,":"),ZA.forEach(t),TBr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);ow=n(je,"LI",{});var EIe=s(ow);fEe=n(EIe,"STRONG",{});var ryt=s(fEe);MBr=r(ryt,"albert"),ryt.forEach(t),EBr=r(EIe," \u2014 "),HY=n(EIe,"A",{href:!0});var tyt=s(HY);CBr=r(tyt,"FlaxAlbertForQuestionAnswering"),tyt.forEach(t),wBr=r(EIe," (ALBERT model)"),EIe.forEach(t),ABr=i(je),rw=n(je,"LI",{});var CIe=s(rw);mEe=n(CIe,"STRONG",{});var ayt=s(mEe);yBr=r(ayt,"bart"),ayt.forEach(t),LBr=r(CIe," \u2014 "),UY=n(CIe,"A",{href:!0});var nyt=s(UY);xBr=r(nyt,"FlaxBartForQuestionAnswering"),nyt.forEach(t),$Br=r(CIe," (BART model)"),CIe.forEach(t),kBr=i(je),tw=n(je,"LI",{});var wIe=s(tw);gEe=n(wIe,"STRONG",{});var syt=s(gEe);SBr=r(syt,"bert"),syt.forEach(t),RBr=r(wIe," \u2014 "),JY=n(wIe,"A",{href:!0});var lyt=s(JY);PBr=r(lyt,"FlaxBertForQuestionAnswering"),lyt.forEach(t),BBr=r(wIe," (BERT model)"),wIe.forEach(t),IBr=i(je),aw=n(je,"LI",{});var AIe=s(aw);hEe=n(AIe,"STRONG",{});var iyt=s(hEe);qBr=r(iyt,"big_bird"),iyt.forEach(t),NBr=r(AIe," \u2014 "),YY=n(AIe,"A",{href:!0});var dyt=s(YY);jBr=r(dyt,"FlaxBigBirdForQuestionAnswering"),dyt.forEach(t),DBr=r(AIe," (BigBird model)"),AIe.forEach(t),GBr=i(je),nw=n(je,"LI",{});var yIe=s(nw);pEe=n(yIe,"STRONG",{});var cyt=s(pEe);OBr=r(cyt,"distilbert"),cyt.forEach(t),VBr=r(yIe," \u2014 "),KY=n(yIe,"A",{href:!0});var fyt=s(KY);XBr=r(fyt,"FlaxDistilBertForQuestionAnswering"),fyt.forEach(t),zBr=r(yIe," (DistilBERT model)"),yIe.forEach(t),WBr=i(je),sw=n(je,"LI",{});var LIe=s(sw);_Ee=n(LIe,"STRONG",{});var myt=s(_Ee);QBr=r(myt,"electra"),myt.forEach(t),HBr=r(LIe," \u2014 "),ZY=n(LIe,"A",{href:!0});var gyt=s(ZY);UBr=r(gyt,"FlaxElectraForQuestionAnswering"),gyt.forEach(t),JBr=r(LIe," (ELECTRA model)"),LIe.forEach(t),YBr=i(je),lw=n(je,"LI",{});var xIe=s(lw);uEe=n(xIe,"STRONG",{});var hyt=s(uEe);KBr=r(hyt,"mbart"),hyt.forEach(t),ZBr=r(xIe," \u2014 "),eK=n(xIe,"A",{href:!0});var pyt=s(eK);eIr=r(pyt,"FlaxMBartForQuestionAnswering"),pyt.forEach(t),oIr=r(xIe," (mBART model)"),xIe.forEach(t),rIr=i(je),iw=n(je,"LI",{});var $Ie=s(iw);bEe=n($Ie,"STRONG",{});var _yt=s(bEe);tIr=r(_yt,"roberta"),_yt.forEach(t),aIr=r($Ie," \u2014 "),oK=n($Ie,"A",{href:!0});var uyt=s(oK);nIr=r(uyt,"FlaxRobertaForQuestionAnswering"),uyt.forEach(t),sIr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),lIr=i(je),dw=n(je,"LI",{});var kIe=s(dw);vEe=n(kIe,"STRONG",{});var byt=s(vEe);iIr=r(byt,"roformer"),byt.forEach(t),dIr=r(kIe," \u2014 "),rK=n(kIe,"A",{href:!0});var vyt=s(rK);cIr=r(vyt,"FlaxRoFormerForQuestionAnswering"),vyt.forEach(t),fIr=r(kIe," (RoFormer model)"),kIe.forEach(t),mIr=i(je),cw=n(je,"LI",{});var SIe=s(cw);FEe=n(SIe,"STRONG",{});var Fyt=s(FEe);gIr=r(Fyt,"xlm-roberta"),Fyt.forEach(t),hIr=r(SIe," \u2014 "),tK=n(SIe,"A",{href:!0});var Tyt=s(tK);pIr=r(Tyt,"FlaxXLMRobertaForQuestionAnswering"),Tyt.forEach(t),_Ir=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),je.forEach(t),uIr=i(Zl),T(fw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WNe=i(f),Uc=n(f,"H2",{class:!0});var ZDe=s(Uc);mw=n(ZDe,"A",{id:!0,class:!0,href:!0});var Myt=s(mw);TEe=n(Myt,"SPAN",{});var Eyt=s(TEe);T(Q9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),bIr=i(ZDe),MEe=n(ZDe,"SPAN",{});var Cyt=s(MEe);vIr=r(Cyt,"FlaxAutoModelForTokenClassification"),Cyt.forEach(t),ZDe.forEach(t),QNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(H9.$$.fragment,ei),FIr=i(ei),Jc=n(ei,"P",{});var Tee=s(Jc);TIr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aK=n(Tee,"A",{href:!0});var wyt=s(aK);MIr=r(wyt,"from_pretrained()"),wyt.forEach(t),EIr=r(Tee," class method or the "),nK=n(Tee,"A",{href:!0});var Ayt=s(nK);CIr=r(Ayt,"from_config()"),Ayt.forEach(t),wIr=r(Tee,` class
method.`),Tee.forEach(t),AIr=i(ei),U9=n(ei,"P",{});var eGe=s(U9);yIr=r(eGe,"This class cannot be instantiated directly using "),EEe=n(eGe,"CODE",{});var yyt=s(EEe);LIr=r(yyt,"__init__()"),yyt.forEach(t),xIr=r(eGe," (throws an error)."),eGe.forEach(t),$Ir=i(ei),Ht=n(ei,"DIV",{class:!0});var e6=s(Ht);T(J9.$$.fragment,e6),kIr=i(e6),CEe=n(e6,"P",{});var Lyt=s(CEe);SIr=r(Lyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lyt.forEach(t),RIr=i(e6),Yc=n(e6,"P",{});var Mee=s(Yc);PIr=r(Mee,`Note:
Loading a model from its configuration file does `),wEe=n(Mee,"STRONG",{});var xyt=s(wEe);BIr=r(xyt,"not"),xyt.forEach(t),IIr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(Mee,"A",{href:!0});var $yt=s(sK);qIr=r($yt,"from_pretrained()"),$yt.forEach(t),NIr=r(Mee," to load the model weights."),Mee.forEach(t),jIr=i(e6),T(gw.$$.fragment,e6),e6.forEach(t),DIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Y9.$$.fragment,oi),GIr=i(oi),AEe=n(oi,"P",{});var kyt=s(AEe);OIr=r(kyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kyt.forEach(t),VIr=i(oi),Tn=n(oi,"P",{});var o6=s(Tn);XIr=r(o6,"The model class to instantiate is selected based on the "),yEe=n(o6,"CODE",{});var Syt=s(yEe);zIr=r(Syt,"model_type"),Syt.forEach(t),WIr=r(o6,` property of the config object (either
passed as an argument or loaded from `),LEe=n(o6,"CODE",{});var Ryt=s(LEe);QIr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),HIr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(o6,"CODE",{});var Pyt=s(xEe);UIr=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),JIr=r(o6,":"),o6.forEach(t),YIr=i(oi),Ge=n(oi,"UL",{});var Fo=s(Ge);hw=n(Fo,"LI",{});var RIe=s(hw);$Ee=n(RIe,"STRONG",{});var Byt=s($Ee);KIr=r(Byt,"albert"),Byt.forEach(t),ZIr=r(RIe," \u2014 "),lK=n(RIe,"A",{href:!0});var Iyt=s(lK);eqr=r(Iyt,"FlaxAlbertForTokenClassification"),Iyt.forEach(t),oqr=r(RIe," (ALBERT model)"),RIe.forEach(t),rqr=i(Fo),pw=n(Fo,"LI",{});var PIe=s(pw);kEe=n(PIe,"STRONG",{});var qyt=s(kEe);tqr=r(qyt,"bert"),qyt.forEach(t),aqr=r(PIe," \u2014 "),iK=n(PIe,"A",{href:!0});var Nyt=s(iK);nqr=r(Nyt,"FlaxBertForTokenClassification"),Nyt.forEach(t),sqr=r(PIe," (BERT model)"),PIe.forEach(t),lqr=i(Fo),_w=n(Fo,"LI",{});var BIe=s(_w);SEe=n(BIe,"STRONG",{});var jyt=s(SEe);iqr=r(jyt,"big_bird"),jyt.forEach(t),dqr=r(BIe," \u2014 "),dK=n(BIe,"A",{href:!0});var Dyt=s(dK);cqr=r(Dyt,"FlaxBigBirdForTokenClassification"),Dyt.forEach(t),fqr=r(BIe," (BigBird model)"),BIe.forEach(t),mqr=i(Fo),uw=n(Fo,"LI",{});var IIe=s(uw);REe=n(IIe,"STRONG",{});var Gyt=s(REe);gqr=r(Gyt,"distilbert"),Gyt.forEach(t),hqr=r(IIe," \u2014 "),cK=n(IIe,"A",{href:!0});var Oyt=s(cK);pqr=r(Oyt,"FlaxDistilBertForTokenClassification"),Oyt.forEach(t),_qr=r(IIe," (DistilBERT model)"),IIe.forEach(t),uqr=i(Fo),bw=n(Fo,"LI",{});var qIe=s(bw);PEe=n(qIe,"STRONG",{});var Vyt=s(PEe);bqr=r(Vyt,"electra"),Vyt.forEach(t),vqr=r(qIe," \u2014 "),fK=n(qIe,"A",{href:!0});var Xyt=s(fK);Fqr=r(Xyt,"FlaxElectraForTokenClassification"),Xyt.forEach(t),Tqr=r(qIe," (ELECTRA model)"),qIe.forEach(t),Mqr=i(Fo),vw=n(Fo,"LI",{});var NIe=s(vw);BEe=n(NIe,"STRONG",{});var zyt=s(BEe);Eqr=r(zyt,"roberta"),zyt.forEach(t),Cqr=r(NIe," \u2014 "),mK=n(NIe,"A",{href:!0});var Wyt=s(mK);wqr=r(Wyt,"FlaxRobertaForTokenClassification"),Wyt.forEach(t),Aqr=r(NIe," (RoBERTa model)"),NIe.forEach(t),yqr=i(Fo),Fw=n(Fo,"LI",{});var jIe=s(Fw);IEe=n(jIe,"STRONG",{});var Qyt=s(IEe);Lqr=r(Qyt,"roformer"),Qyt.forEach(t),xqr=r(jIe," \u2014 "),gK=n(jIe,"A",{href:!0});var Hyt=s(gK);$qr=r(Hyt,"FlaxRoFormerForTokenClassification"),Hyt.forEach(t),kqr=r(jIe," (RoFormer model)"),jIe.forEach(t),Sqr=i(Fo),Tw=n(Fo,"LI",{});var DIe=s(Tw);qEe=n(DIe,"STRONG",{});var Uyt=s(qEe);Rqr=r(Uyt,"xlm-roberta"),Uyt.forEach(t),Pqr=r(DIe," \u2014 "),hK=n(DIe,"A",{href:!0});var Jyt=s(hK);Bqr=r(Jyt,"FlaxXLMRobertaForTokenClassification"),Jyt.forEach(t),Iqr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),Fo.forEach(t),qqr=i(oi),T(Mw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),HNe=i(f),Kc=n(f,"H2",{class:!0});var oGe=s(Kc);Ew=n(oGe,"A",{id:!0,class:!0,href:!0});var Yyt=s(Ew);NEe=n(Yyt,"SPAN",{});var Kyt=s(NEe);T(K9.$$.fragment,Kyt),Kyt.forEach(t),Yyt.forEach(t),Nqr=i(oGe),jEe=n(oGe,"SPAN",{});var Zyt=s(jEe);jqr=r(Zyt,"FlaxAutoModelForMultipleChoice"),Zyt.forEach(t),oGe.forEach(t),UNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Z9.$$.fragment,ri),Dqr=i(ri),Zc=n(ri,"P",{});var Eee=s(Zc);Gqr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=n(Eee,"A",{href:!0});var eLt=s(pK);Oqr=r(eLt,"from_pretrained()"),eLt.forEach(t),Vqr=r(Eee," class method or the "),_K=n(Eee,"A",{href:!0});var oLt=s(_K);Xqr=r(oLt,"from_config()"),oLt.forEach(t),zqr=r(Eee,` class
method.`),Eee.forEach(t),Wqr=i(ri),ex=n(ri,"P",{});var rGe=s(ex);Qqr=r(rGe,"This class cannot be instantiated directly using "),DEe=n(rGe,"CODE",{});var rLt=s(DEe);Hqr=r(rLt,"__init__()"),rLt.forEach(t),Uqr=r(rGe," (throws an error)."),rGe.forEach(t),Jqr=i(ri),Ut=n(ri,"DIV",{class:!0});var r6=s(Ut);T(ox.$$.fragment,r6),Yqr=i(r6),GEe=n(r6,"P",{});var tLt=s(GEe);Kqr=r(tLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tLt.forEach(t),Zqr=i(r6),ef=n(r6,"P",{});var Cee=s(ef);eNr=r(Cee,`Note:
Loading a model from its configuration file does `),OEe=n(Cee,"STRONG",{});var aLt=s(OEe);oNr=r(aLt,"not"),aLt.forEach(t),rNr=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Cee,"A",{href:!0});var nLt=s(uK);tNr=r(nLt,"from_pretrained()"),nLt.forEach(t),aNr=r(Cee," to load the model weights."),Cee.forEach(t),nNr=i(r6),T(Cw.$$.fragment,r6),r6.forEach(t),sNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(rx.$$.fragment,ti),lNr=i(ti),VEe=n(ti,"P",{});var sLt=s(VEe);iNr=r(sLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sLt.forEach(t),dNr=i(ti),Mn=n(ti,"P",{});var t6=s(Mn);cNr=r(t6,"The model class to instantiate is selected based on the "),XEe=n(t6,"CODE",{});var lLt=s(XEe);fNr=r(lLt,"model_type"),lLt.forEach(t),mNr=r(t6,` property of the config object (either
passed as an argument or loaded from `),zEe=n(t6,"CODE",{});var iLt=s(zEe);gNr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),hNr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=n(t6,"CODE",{});var dLt=s(WEe);pNr=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),_Nr=r(t6,":"),t6.forEach(t),uNr=i(ti),Oe=n(ti,"UL",{});var To=s(Oe);ww=n(To,"LI",{});var GIe=s(ww);QEe=n(GIe,"STRONG",{});var cLt=s(QEe);bNr=r(cLt,"albert"),cLt.forEach(t),vNr=r(GIe," \u2014 "),bK=n(GIe,"A",{href:!0});var fLt=s(bK);FNr=r(fLt,"FlaxAlbertForMultipleChoice"),fLt.forEach(t),TNr=r(GIe," (ALBERT model)"),GIe.forEach(t),MNr=i(To),Aw=n(To,"LI",{});var OIe=s(Aw);HEe=n(OIe,"STRONG",{});var mLt=s(HEe);ENr=r(mLt,"bert"),mLt.forEach(t),CNr=r(OIe," \u2014 "),vK=n(OIe,"A",{href:!0});var gLt=s(vK);wNr=r(gLt,"FlaxBertForMultipleChoice"),gLt.forEach(t),ANr=r(OIe," (BERT model)"),OIe.forEach(t),yNr=i(To),yw=n(To,"LI",{});var VIe=s(yw);UEe=n(VIe,"STRONG",{});var hLt=s(UEe);LNr=r(hLt,"big_bird"),hLt.forEach(t),xNr=r(VIe," \u2014 "),FK=n(VIe,"A",{href:!0});var pLt=s(FK);$Nr=r(pLt,"FlaxBigBirdForMultipleChoice"),pLt.forEach(t),kNr=r(VIe," (BigBird model)"),VIe.forEach(t),SNr=i(To),Lw=n(To,"LI",{});var XIe=s(Lw);JEe=n(XIe,"STRONG",{});var _Lt=s(JEe);RNr=r(_Lt,"distilbert"),_Lt.forEach(t),PNr=r(XIe," \u2014 "),TK=n(XIe,"A",{href:!0});var uLt=s(TK);BNr=r(uLt,"FlaxDistilBertForMultipleChoice"),uLt.forEach(t),INr=r(XIe," (DistilBERT model)"),XIe.forEach(t),qNr=i(To),xw=n(To,"LI",{});var zIe=s(xw);YEe=n(zIe,"STRONG",{});var bLt=s(YEe);NNr=r(bLt,"electra"),bLt.forEach(t),jNr=r(zIe," \u2014 "),MK=n(zIe,"A",{href:!0});var vLt=s(MK);DNr=r(vLt,"FlaxElectraForMultipleChoice"),vLt.forEach(t),GNr=r(zIe," (ELECTRA model)"),zIe.forEach(t),ONr=i(To),$w=n(To,"LI",{});var WIe=s($w);KEe=n(WIe,"STRONG",{});var FLt=s(KEe);VNr=r(FLt,"roberta"),FLt.forEach(t),XNr=r(WIe," \u2014 "),EK=n(WIe,"A",{href:!0});var TLt=s(EK);zNr=r(TLt,"FlaxRobertaForMultipleChoice"),TLt.forEach(t),WNr=r(WIe," (RoBERTa model)"),WIe.forEach(t),QNr=i(To),kw=n(To,"LI",{});var QIe=s(kw);ZEe=n(QIe,"STRONG",{});var MLt=s(ZEe);HNr=r(MLt,"roformer"),MLt.forEach(t),UNr=r(QIe," \u2014 "),CK=n(QIe,"A",{href:!0});var ELt=s(CK);JNr=r(ELt,"FlaxRoFormerForMultipleChoice"),ELt.forEach(t),YNr=r(QIe," (RoFormer model)"),QIe.forEach(t),KNr=i(To),Sw=n(To,"LI",{});var HIe=s(Sw);eCe=n(HIe,"STRONG",{});var CLt=s(eCe);ZNr=r(CLt,"xlm-roberta"),CLt.forEach(t),ejr=r(HIe," \u2014 "),wK=n(HIe,"A",{href:!0});var wLt=s(wK);ojr=r(wLt,"FlaxXLMRobertaForMultipleChoice"),wLt.forEach(t),rjr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),To.forEach(t),tjr=i(ti),T(Rw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),JNe=i(f),of=n(f,"H2",{class:!0});var tGe=s(of);Pw=n(tGe,"A",{id:!0,class:!0,href:!0});var ALt=s(Pw);oCe=n(ALt,"SPAN",{});var yLt=s(oCe);T(tx.$$.fragment,yLt),yLt.forEach(t),ALt.forEach(t),ajr=i(tGe),rCe=n(tGe,"SPAN",{});var LLt=s(rCe);njr=r(LLt,"FlaxAutoModelForNextSentencePrediction"),LLt.forEach(t),tGe.forEach(t),YNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(ax.$$.fragment,ai),sjr=i(ai),rf=n(ai,"P",{});var wee=s(rf);ljr=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AK=n(wee,"A",{href:!0});var xLt=s(AK);ijr=r(xLt,"from_pretrained()"),xLt.forEach(t),djr=r(wee," class method or the "),yK=n(wee,"A",{href:!0});var $Lt=s(yK);cjr=r($Lt,"from_config()"),$Lt.forEach(t),fjr=r(wee,` class
method.`),wee.forEach(t),mjr=i(ai),nx=n(ai,"P",{});var aGe=s(nx);gjr=r(aGe,"This class cannot be instantiated directly using "),tCe=n(aGe,"CODE",{});var kLt=s(tCe);hjr=r(kLt,"__init__()"),kLt.forEach(t),pjr=r(aGe," (throws an error)."),aGe.forEach(t),_jr=i(ai),Jt=n(ai,"DIV",{class:!0});var a6=s(Jt);T(sx.$$.fragment,a6),ujr=i(a6),aCe=n(a6,"P",{});var SLt=s(aCe);bjr=r(SLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SLt.forEach(t),vjr=i(a6),tf=n(a6,"P",{});var Aee=s(tf);Fjr=r(Aee,`Note:
Loading a model from its configuration file does `),nCe=n(Aee,"STRONG",{});var RLt=s(nCe);Tjr=r(RLt,"not"),RLt.forEach(t),Mjr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Aee,"A",{href:!0});var PLt=s(LK);Ejr=r(PLt,"from_pretrained()"),PLt.forEach(t),Cjr=r(Aee," to load the model weights."),Aee.forEach(t),wjr=i(a6),T(Bw.$$.fragment,a6),a6.forEach(t),Ajr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(lx.$$.fragment,ni),yjr=i(ni),sCe=n(ni,"P",{});var BLt=s(sCe);Ljr=r(BLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BLt.forEach(t),xjr=i(ni),En=n(ni,"P",{});var n6=s(En);$jr=r(n6,"The model class to instantiate is selected based on the "),lCe=n(n6,"CODE",{});var ILt=s(lCe);kjr=r(ILt,"model_type"),ILt.forEach(t),Sjr=r(n6,` property of the config object (either
passed as an argument or loaded from `),iCe=n(n6,"CODE",{});var qLt=s(iCe);Rjr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),Pjr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(n6,"CODE",{});var NLt=s(dCe);Bjr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),Ijr=r(n6,":"),n6.forEach(t),qjr=i(ni),cCe=n(ni,"UL",{});var jLt=s(cCe);Iw=n(jLt,"LI",{});var UIe=s(Iw);fCe=n(UIe,"STRONG",{});var DLt=s(fCe);Njr=r(DLt,"bert"),DLt.forEach(t),jjr=r(UIe," \u2014 "),xK=n(UIe,"A",{href:!0});var GLt=s(xK);Djr=r(GLt,"FlaxBertForNextSentencePrediction"),GLt.forEach(t),Gjr=r(UIe," (BERT model)"),UIe.forEach(t),jLt.forEach(t),Ojr=i(ni),T(qw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),KNe=i(f),af=n(f,"H2",{class:!0});var nGe=s(af);Nw=n(nGe,"A",{id:!0,class:!0,href:!0});var OLt=s(Nw);mCe=n(OLt,"SPAN",{});var VLt=s(mCe);T(ix.$$.fragment,VLt),VLt.forEach(t),OLt.forEach(t),Vjr=i(nGe),gCe=n(nGe,"SPAN",{});var XLt=s(gCe);Xjr=r(XLt,"FlaxAutoModelForImageClassification"),XLt.forEach(t),nGe.forEach(t),ZNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(dx.$$.fragment,si),zjr=i(si),nf=n(si,"P",{});var yee=s(nf);Wjr=r(yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$K=n(yee,"A",{href:!0});var zLt=s($K);Qjr=r(zLt,"from_pretrained()"),zLt.forEach(t),Hjr=r(yee," class method or the "),kK=n(yee,"A",{href:!0});var WLt=s(kK);Ujr=r(WLt,"from_config()"),WLt.forEach(t),Jjr=r(yee,` class
method.`),yee.forEach(t),Yjr=i(si),cx=n(si,"P",{});var sGe=s(cx);Kjr=r(sGe,"This class cannot be instantiated directly using "),hCe=n(sGe,"CODE",{});var QLt=s(hCe);Zjr=r(QLt,"__init__()"),QLt.forEach(t),eDr=r(sGe," (throws an error)."),sGe.forEach(t),oDr=i(si),Yt=n(si,"DIV",{class:!0});var s6=s(Yt);T(fx.$$.fragment,s6),rDr=i(s6),pCe=n(s6,"P",{});var HLt=s(pCe);tDr=r(HLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HLt.forEach(t),aDr=i(s6),sf=n(s6,"P",{});var Lee=s(sf);nDr=r(Lee,`Note:
Loading a model from its configuration file does `),_Ce=n(Lee,"STRONG",{});var ULt=s(_Ce);sDr=r(ULt,"not"),ULt.forEach(t),lDr=r(Lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(Lee,"A",{href:!0});var JLt=s(SK);iDr=r(JLt,"from_pretrained()"),JLt.forEach(t),dDr=r(Lee," to load the model weights."),Lee.forEach(t),cDr=i(s6),T(jw.$$.fragment,s6),s6.forEach(t),fDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(mx.$$.fragment,li),mDr=i(li),uCe=n(li,"P",{});var YLt=s(uCe);gDr=r(YLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YLt.forEach(t),hDr=i(li),Cn=n(li,"P",{});var l6=s(Cn);pDr=r(l6,"The model class to instantiate is selected based on the "),bCe=n(l6,"CODE",{});var KLt=s(bCe);_Dr=r(KLt,"model_type"),KLt.forEach(t),uDr=r(l6,` property of the config object (either
passed as an argument or loaded from `),vCe=n(l6,"CODE",{});var ZLt=s(vCe);bDr=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),vDr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(l6,"CODE",{});var e8t=s(FCe);FDr=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),TDr=r(l6,":"),l6.forEach(t),MDr=i(li),gx=n(li,"UL",{});var lGe=s(gx);Dw=n(lGe,"LI",{});var JIe=s(Dw);TCe=n(JIe,"STRONG",{});var o8t=s(TCe);EDr=r(o8t,"beit"),o8t.forEach(t),CDr=r(JIe," \u2014 "),RK=n(JIe,"A",{href:!0});var r8t=s(RK);wDr=r(r8t,"FlaxBeitForImageClassification"),r8t.forEach(t),ADr=r(JIe," (BEiT model)"),JIe.forEach(t),yDr=i(lGe),Gw=n(lGe,"LI",{});var YIe=s(Gw);MCe=n(YIe,"STRONG",{});var t8t=s(MCe);LDr=r(t8t,"vit"),t8t.forEach(t),xDr=r(YIe," \u2014 "),PK=n(YIe,"A",{href:!0});var a8t=s(PK);$Dr=r(a8t,"FlaxViTForImageClassification"),a8t.forEach(t),kDr=r(YIe," (ViT model)"),YIe.forEach(t),lGe.forEach(t),SDr=i(li),T(Ow.$$.fragment,li),li.forEach(t),si.forEach(t),eje=i(f),lf=n(f,"H2",{class:!0});var iGe=s(lf);Vw=n(iGe,"A",{id:!0,class:!0,href:!0});var n8t=s(Vw);ECe=n(n8t,"SPAN",{});var s8t=s(ECe);T(hx.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),RDr=i(iGe),CCe=n(iGe,"SPAN",{});var l8t=s(CCe);PDr=r(l8t,"FlaxAutoModelForVision2Seq"),l8t.forEach(t),iGe.forEach(t),oje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(px.$$.fragment,ii),BDr=i(ii),df=n(ii,"P",{});var xee=s(df);IDr=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BK=n(xee,"A",{href:!0});var i8t=s(BK);qDr=r(i8t,"from_pretrained()"),i8t.forEach(t),NDr=r(xee," class method or the "),IK=n(xee,"A",{href:!0});var d8t=s(IK);jDr=r(d8t,"from_config()"),d8t.forEach(t),DDr=r(xee,` class
method.`),xee.forEach(t),GDr=i(ii),_x=n(ii,"P",{});var dGe=s(_x);ODr=r(dGe,"This class cannot be instantiated directly using "),wCe=n(dGe,"CODE",{});var c8t=s(wCe);VDr=r(c8t,"__init__()"),c8t.forEach(t),XDr=r(dGe," (throws an error)."),dGe.forEach(t),zDr=i(ii),Kt=n(ii,"DIV",{class:!0});var i6=s(Kt);T(ux.$$.fragment,i6),WDr=i(i6),ACe=n(i6,"P",{});var f8t=s(ACe);QDr=r(f8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f8t.forEach(t),HDr=i(i6),cf=n(i6,"P",{});var $ee=s(cf);UDr=r($ee,`Note:
Loading a model from its configuration file does `),yCe=n($ee,"STRONG",{});var m8t=s(yCe);JDr=r(m8t,"not"),m8t.forEach(t),YDr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n($ee,"A",{href:!0});var g8t=s(qK);KDr=r(g8t,"from_pretrained()"),g8t.forEach(t),ZDr=r($ee," to load the model weights."),$ee.forEach(t),eGr=i(i6),T(Xw.$$.fragment,i6),i6.forEach(t),oGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(bx.$$.fragment,di),rGr=i(di),LCe=n(di,"P",{});var h8t=s(LCe);tGr=r(h8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h8t.forEach(t),aGr=i(di),wn=n(di,"P",{});var d6=s(wn);nGr=r(d6,"The model class to instantiate is selected based on the "),xCe=n(d6,"CODE",{});var p8t=s(xCe);sGr=r(p8t,"model_type"),p8t.forEach(t),lGr=r(d6,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(d6,"CODE",{});var _8t=s($Ce);iGr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),dGr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(d6,"CODE",{});var u8t=s(kCe);cGr=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),fGr=r(d6,":"),d6.forEach(t),mGr=i(di),SCe=n(di,"UL",{});var b8t=s(SCe);zw=n(b8t,"LI",{});var KIe=s(zw);RCe=n(KIe,"STRONG",{});var v8t=s(RCe);gGr=r(v8t,"vision-encoder-decoder"),v8t.forEach(t),hGr=r(KIe," \u2014 "),NK=n(KIe,"A",{href:!0});var F8t=s(NK);pGr=r(F8t,"FlaxVisionEncoderDecoderModel"),F8t.forEach(t),_Gr=r(KIe," (Vision Encoder decoder model)"),KIe.forEach(t),b8t.forEach(t),uGr=i(di),T(Ww.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Cxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(q$,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(N$,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig"),c(j$,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig"),c(D$,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig"),c(G$,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig"),c(O$,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(V$,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig"),c(X$,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(z$,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(W$,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Q$,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig"),c(H$,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig"),c(U$,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig"),c(J$,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig"),c(Y$,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig"),c(K$,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig"),c(Z$,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ek,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(ok,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(rk,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig"),c(tk,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ak,"href","/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(nk,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig"),c(sk,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig"),c(lk,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ik,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig"),c(dk,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig"),c(ck,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig"),c(fk,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(mk,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig"),c(gk,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig"),c(hk,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig"),c(pk,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig"),c(_k,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig"),c(uk,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNConfig"),c(bk,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config"),c(vk,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Fk,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig"),c(Tk,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig"),c(Mk,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig"),c(Ek,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ck,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(wk,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ak,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig"),c(yk,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig"),c(Lk,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeConfig"),c(xk,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig"),c($k,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config"),c(kk,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig"),c(Sk,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Rk,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig"),c(Pk,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Bk,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ik,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig"),c(qk,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config"),c(Nk,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(jk,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Dk,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"),c(Gk,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ok,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Vk,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig"),c(Xk,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(zk,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Wk,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Qk,"href","/docs/transformers/pr_17227/en/model_doc/rag#transformers.RagConfig"),c(Hk,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmConfig"),c(Uk,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig"),c(Jk,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig"),c(Yk,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig"),c(Kk,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig"),c(Zk,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig"),c(eS,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig"),c(oS,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig"),c(rS,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig"),c(tS,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig"),c(aS,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig"),c(nS,"href","/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sS,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lS,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(iS,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig"),c(dS,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(cS,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig"),c(fS,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config"),c(mS,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig"),c(gS,"href","/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(hS,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(pS,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRConfig"),c(_S,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(uS,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bS,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig"),c(vS,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltConfig"),c(FS,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(TS,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(MS,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(ES,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig"),c(CS,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(wS,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(AS,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(yS,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig"),c(LS,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig"),c(xS,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig"),c($S,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(kS,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(SS,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(RS,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig"),c(PS,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig"),c(BS,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(IS,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(qS,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(NS,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(jS,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartTokenizer"),c(DS,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartTokenizerFast"),c(GS,"href","/docs/transformers/pr_17227/en/model_doc/barthez#transformers.BarthezTokenizer"),c(OS,"href","/docs/transformers/pr_17227/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(VS,"href","/docs/transformers/pr_17227/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(XS,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(zS,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(WS,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(QS,"href","/docs/transformers/pr_17227/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(HS,"href","/docs/transformers/pr_17227/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(US,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(JS,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(YS,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KS,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(eR,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(oR,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(rR,"href","/docs/transformers/pr_17227/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(tR,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertTokenizer"),c(aR,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(nR,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineTokenizer"),c(sR,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPTokenizer"),c(lR,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(iR,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(dR,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17227/en/model_doc/cpm#transformers.CpmTokenizer"),c(fR,"href","/docs/transformers/pr_17227/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(mR,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(gR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pR,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaTokenizer"),c(_R,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(uR,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(bR,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(vR,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(FR,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(TR,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(MR,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ER,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraTokenizer"),c(CR,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(wR,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(AR,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetTokenizer"),c(yR,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(LR,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(xR,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelTokenizer"),c($R,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(kR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qR,"href","/docs/transformers/pr_17227/en/model_doc/herbert#transformers.HerbertTokenizer"),c(NR,"href","/docs/transformers/pr_17227/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(WR,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(QR,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(HR,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDTokenizer"),c(UR,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDTokenizerFast"),c(JR,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerTokenizer"),c(YR,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(KR,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeTokenizer"),c(ZR,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(eP,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(oP,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(rP,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianTokenizer"),c(tP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartTokenizer"),c(aP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(nP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(sP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(lP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(iP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17227/en/model_doc/mluke#transformers.MLukeTokenizer"),c(cP,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(fP,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(mP,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(gP,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(hP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Tokenizer"),c(pP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5TokenizerFast"),c(_P,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(uP,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(vP,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(FP,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TP,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MP,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EP,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CP,"href","/docs/transformers/pr_17227/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wP,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartTokenizer"),c(AP,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17227/en/model_doc/rag#transformers.RagTokenizer"),c($P,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmTokenizer"),c(kP,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmTokenizerFast"),c(SP,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerTokenizer"),c(RP,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(PP,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertTokenizer"),c(BP,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qP,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jP,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DP,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(GP,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(OP,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(VP,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(XP,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterTokenizer"),c(zP,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(WP,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(QP,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Tokenizer"),c(UP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5TokenizerFast"),c(JP,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasTokenizer"),c(YP,"href","/docs/transformers/pr_17227/en/model_doc/tapex#transformers.TapexTokenizer"),c(KP,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ZP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(eB,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(aB,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMTokenizer"),c(nB,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(sB,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMTokenizer"),c(lB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(iB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(dB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(gB,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(hB,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(pB,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(_B,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(uB,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LB,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(xB,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c($B,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(GB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoProcessor"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(VB,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(XB,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPProcessor"),c(zB,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(WB,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(QB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(JB,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(YB,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRProcessor"),c(KB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eI,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltProcessor"),c(oI,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(rI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"id","transformers.AutoModel"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(nI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iI,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertModel"),c(dI,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartModel"),c(cI,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitModel"),c(fI,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel"),c(mI,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(gI,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdModel"),c(hI,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(pI,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(_I,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(uI,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertModel"),c(bI,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineModel"),c(vI,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPModel"),c(FI,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertModel"),c(TI,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextModel"),c(MI,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLModel"),c(EI,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(CI,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(wI,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(AI,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaModel"),c(yI,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(LI,"href","/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(xI,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTModel"),c($I,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrModel"),c(kI,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertModel"),c(SI,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(RI,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTModel"),c(PI,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraModel"),c(BI,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertModel"),c(II,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaModel"),c(qI,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetModel"),c(NI,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTModel"),c(jI,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelModel"),c(DI,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelBaseModel"),c(GI,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNModel"),c(OI,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Model"),c(VI,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(XI,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJModel"),c(zI,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertModel"),c(WI,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertModel"),c(QI,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HI,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UI,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JI,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDModel"),c(YI,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerModel"),c(KI,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeModel"),c(ZI,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertModel"),c(eq,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Model"),c(oq,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianModel"),c(rq,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tq,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartModel"),c(aq,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(nq,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertModel"),c(sq,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetModel"),c(lq,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Model"),c(iq,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dq,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cq,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel"),c(fq,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusModel"),c(mq,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverModel"),c(gq,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartModel"),c(hq,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerModel"),c(pq,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_q,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertModel"),c(uq,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModel"),c(bq,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetModel"),c(vq,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertModel"),c(Fq,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetModel"),c(Tq,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel"),c(Mq,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaModel"),c(Eq,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerModel"),c(Cq,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerModel"),c(wq,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWModel"),c(Aq,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDModel"),c(yq,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Lq,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterModel"),c(xq,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($q,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinModel"),c(kq,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Model"),c(Sq,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasModel"),c(Rq,"href","/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Pq,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Bq,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Iq,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qq,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanModel"),c(Nq,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltModel"),c(jq,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Dq,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Gq,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTModel"),c(Oq,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Vq,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Xq,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(zq,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMModel"),c(Wq,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMModel"),c(Qq,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMModel"),c(Hq,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Uq,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Jq,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Yq,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetModel"),c(Kq,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosModel"),c(Zq,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForPreTraining"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(eN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tN,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aN,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nN,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForPreTraining"),c(sN,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lN,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iN,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dN,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cN,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fN,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mN,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hN,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaForPreTraining"),c(_N,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uN,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bN,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(vN,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FN,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(TN,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MN,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EN,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(CN,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(wN,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(AN,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yN,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LN,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel"),c(xN,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($N,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(kN,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RN,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(PN,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BN,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(IN,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qN,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(NN,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(jN,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(DN,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(GN,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ON,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XN,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForCausalLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(zN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HN,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForCausalLM"),c(UN,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertLMHeadModel"),c(JN,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(YN,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(KN,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ZN,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ej,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(oj,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(rj,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tj,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(aj,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForCausalLM"),c(nj,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(lj,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ij,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianForCausalLM"),c(dj,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cj,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fj,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mj,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTForCausalLM"),c(gj,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hj,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pj,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_j,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(uj,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bj,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vj,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Fj,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Tj,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Mj,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Cj,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wj,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Aj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(yj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Lj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xj,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForMaskedLM"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c($j,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kj,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sj,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rj,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(qj,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zj,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eD,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rD,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(aD,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sD,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dD,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cD,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fD,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mD,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForSeq2SeqLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(gD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_D,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(TD,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianMTModel"),c(wD,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForSequenceClassification"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(SD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BD,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.AutoModelForMultipleChoice"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForNextSentencePrediction"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(nO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(dO,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(cO,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(fO,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(mO,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForTokenClassification"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(gO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(vO,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForTokenClassification"),c(TO,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(EO,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(CO,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(wO,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(yO,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(xO,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c($O,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(RO,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(PO,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(BO,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(NO,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(jO,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(OO,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(VO,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(zO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(WO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QO,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(HO,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForQuestionAnswering"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mV,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(RV,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(IV,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(qV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForImageClassification"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(GV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForImageClassification"),c(zV,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(WV,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(QV,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassification"),c(HV,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(UV,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(JV,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(YV,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(KV,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(ZV,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(eX,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(oX,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(rX,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(tX,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForImageClassification"),c(aX,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanForImageClassification"),c(nX,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForVision2Seq"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForAudioClassification"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForAudioFrameClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(MX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(AX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(yX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(LX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(xX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForCTC"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c($X,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(PX,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForCTC"),c(BX,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForCTC"),c(IX,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForCTC"),c(qX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(GX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(WX,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForAudioXVector"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(QX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(YX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(KX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(ZX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(ez,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForMaskedImageModeling"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(nz,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(sz,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForObjectDetection"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(lz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fz,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForImageSegmentation"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForSemanticSegmentation"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Fz,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Tz,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Mz,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForInstanceSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.TFAutoModel"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertModel"),c(kz,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartModel"),c(Sz,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertModel"),c(Rz,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Pz,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Bz,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertModel"),c(Iz,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.TFCLIPModel"),c(qz,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertModel"),c(Nz,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextModel"),c(jz,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Dz,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Gz,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaModel"),c(Oz,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Vz,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Xz,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(zz,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraModel"),c(Wz,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Qz,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelModel"),c(Hz,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Uz,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Jz,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJModel"),c(Yz,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.TFHubertModel"),c(Kz,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Zz,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDModel"),c(eW,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerModel"),c(oW,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertModel"),c(rW,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianModel"),c(tW,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartModel"),c(aW,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(nW,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetModel"),c(sW,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5Model"),c(lW,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(iW,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTModel"),c(dW,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusModel"),c(cW,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertModel"),c(fW,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaModel"),c(mW,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerModel"),c(gW,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(hW,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinModel"),c(pW,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5Model"),c(_W,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasModel"),c(uW,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bW,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTModel"),c(vW,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(FW,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TW,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMModel"),c(MW,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(EW,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForPreTraining"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(CW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(LW,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForPreTraining"),c($W,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kW,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SW,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RW,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(PW,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BW,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(IW,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qW,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(NW,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(jW,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(DW,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(GW,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OW,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VW,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(XW,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(zW,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WW,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(QW,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HW,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(UW,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForCausalLM"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(oQ,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tQ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(aQ,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(sQ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(lQ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(iQ,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForImageClassification"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(pQ,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(_Q,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(uQ,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMaskedLM"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(QQ,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HQ,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianMTModel"),c(JQ,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForSequenceClassification"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(eH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForMultipleChoice"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(xH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(ZH,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(eU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.TFAutoModelForTokenClassification"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(aU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(iU,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(cU,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(mU,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(gU,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(hU,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(pU,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(_U,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uU,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(bU,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(vU,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(FU,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(TU,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(EU,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(CU,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(wU,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(AU,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.TFAutoModelForQuestionAnswering"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(yU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(jU,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(HU,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForVision2Seq"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(JU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModel"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertModel"),c(iJ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartModel"),c(dJ,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitModel"),c(cJ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertModel"),c(fJ,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(mJ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(gJ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(hJ,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.FlaxCLIPModel"),c(pJ,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(_J,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraModel"),c(uJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(bJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(vJ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(FJ,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianModel"),c(TJ,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartModel"),c(MJ,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5Model"),c(EJ,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTModel"),c(CJ,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wJ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AJ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(yJ,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5Model"),c(LJ,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xJ,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTModel"),c($J,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(kJ,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(SJ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForCausalLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(qJ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(NJ,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(jJ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(DJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(GJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(OJ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(VJ,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(XJ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(zJ,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForPreTraining"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(JJ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(KJ,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ZJ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(eY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aY,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(sY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForMaskedLM"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(lY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(fY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(hY,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(yY,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(LY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForTokenClassification"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(dK,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(cK,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fK,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(mK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(gK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(hK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(AK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForImageClassification"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c($K,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(PK,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(BK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,c6),e(rt,pf),b(f,De,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,f6),e(We,Ln),e(We,xn),e(xn,m6),e(We,hi),e(We,$n),e($n,g6),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,k$),e(Ae,_i),e(_i,S$),e(Ae,R$),b(f,Eo,u),b(f,wa,u),e(wa,P$),e(wa,uf),e(uf,B$),e(wa,cGe),b(f,ZIe,u),b(f,ui,u),e(ui,bf),e(bf,kee),M(h6,kee,null),e(ui,fGe),e(ui,See),e(See,mGe),b(f,eqe,u),b(f,kn,u),e(kn,gGe),e(kn,Ree),e(Ree,hGe),e(kn,pGe),e(kn,Pee),e(Pee,_Ge),e(kn,uGe),b(f,oqe,u),M(p6,f,u),b(f,rqe,u),b(f,I$,u),e(I$,bGe),b(f,tqe,u),M(vf,f,u),b(f,aqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Bee),M(_6,Bee,null),e(bi,vGe),e(bi,Iee),e(Iee,FGe),b(f,nqe,u),b(f,Co,u),M(u6,Co,null),e(Co,TGe),e(Co,b6),e(b6,MGe),e(b6,q$),e(q$,EGe),e(b6,CGe),e(Co,wGe),e(Co,v6),e(v6,AGe),e(v6,qee),e(qee,yGe),e(v6,LGe),e(Co,xGe),e(Co,Er),M(F6,Er,null),e(Er,$Ge),e(Er,Nee),e(Nee,kGe),e(Er,SGe),e(Er,vi),e(vi,RGe),e(vi,jee),e(jee,PGe),e(vi,BGe),e(vi,Dee),e(Dee,IGe),e(vi,qGe),e(Er,NGe),e(Er,A),e(A,Tf),e(Tf,Gee),e(Gee,jGe),e(Tf,DGe),e(Tf,N$),e(N$,GGe),e(Tf,OGe),e(A,VGe),e(A,Mf),e(Mf,Oee),e(Oee,XGe),e(Mf,zGe),e(Mf,j$),e(j$,WGe),e(Mf,QGe),e(A,HGe),e(A,Ef),e(Ef,Vee),e(Vee,UGe),e(Ef,JGe),e(Ef,D$),e(D$,YGe),e(Ef,KGe),e(A,ZGe),e(A,Cf),e(Cf,Xee),e(Xee,eOe),e(Cf,oOe),e(Cf,G$),e(G$,rOe),e(Cf,tOe),e(A,aOe),e(A,wf),e(wf,zee),e(zee,nOe),e(wf,sOe),e(wf,O$),e(O$,lOe),e(wf,iOe),e(A,dOe),e(A,Af),e(Af,Wee),e(Wee,cOe),e(Af,fOe),e(Af,V$),e(V$,mOe),e(Af,gOe),e(A,hOe),e(A,yf),e(yf,Qee),e(Qee,pOe),e(yf,_Oe),e(yf,X$),e(X$,uOe),e(yf,bOe),e(A,vOe),e(A,Lf),e(Lf,Hee),e(Hee,FOe),e(Lf,TOe),e(Lf,z$),e(z$,MOe),e(Lf,EOe),e(A,COe),e(A,xf),e(xf,Uee),e(Uee,wOe),e(xf,AOe),e(xf,W$),e(W$,yOe),e(xf,LOe),e(A,xOe),e(A,$f),e($f,Jee),e(Jee,$Oe),e($f,kOe),e($f,Q$),e(Q$,SOe),e($f,ROe),e(A,POe),e(A,kf),e(kf,Yee),e(Yee,BOe),e(kf,IOe),e(kf,H$),e(H$,qOe),e(kf,NOe),e(A,jOe),e(A,Sf),e(Sf,Kee),e(Kee,DOe),e(Sf,GOe),e(Sf,U$),e(U$,OOe),e(Sf,VOe),e(A,XOe),e(A,Rf),e(Rf,Zee),e(Zee,zOe),e(Rf,WOe),e(Rf,J$),e(J$,QOe),e(Rf,HOe),e(A,UOe),e(A,Pf),e(Pf,eoe),e(eoe,JOe),e(Pf,YOe),e(Pf,Y$),e(Y$,KOe),e(Pf,ZOe),e(A,eVe),e(A,Bf),e(Bf,ooe),e(ooe,oVe),e(Bf,rVe),e(Bf,K$),e(K$,tVe),e(Bf,aVe),e(A,nVe),e(A,If),e(If,roe),e(roe,sVe),e(If,lVe),e(If,Z$),e(Z$,iVe),e(If,dVe),e(A,cVe),e(A,qf),e(qf,toe),e(toe,fVe),e(qf,mVe),e(qf,ek),e(ek,gVe),e(qf,hVe),e(A,pVe),e(A,Nf),e(Nf,aoe),e(aoe,_Ve),e(Nf,uVe),e(Nf,ok),e(ok,bVe),e(Nf,vVe),e(A,FVe),e(A,jf),e(jf,noe),e(noe,TVe),e(jf,MVe),e(jf,rk),e(rk,EVe),e(jf,CVe),e(A,wVe),e(A,Df),e(Df,soe),e(soe,AVe),e(Df,yVe),e(Df,tk),e(tk,LVe),e(Df,xVe),e(A,$Ve),e(A,Gf),e(Gf,loe),e(loe,kVe),e(Gf,SVe),e(Gf,ak),e(ak,RVe),e(Gf,PVe),e(A,BVe),e(A,Of),e(Of,ioe),e(ioe,IVe),e(Of,qVe),e(Of,nk),e(nk,NVe),e(Of,jVe),e(A,DVe),e(A,Vf),e(Vf,doe),e(doe,GVe),e(Vf,OVe),e(Vf,sk),e(sk,VVe),e(Vf,XVe),e(A,zVe),e(A,Xf),e(Xf,coe),e(coe,WVe),e(Xf,QVe),e(Xf,lk),e(lk,HVe),e(Xf,UVe),e(A,JVe),e(A,zf),e(zf,foe),e(foe,YVe),e(zf,KVe),e(zf,ik),e(ik,ZVe),e(zf,eXe),e(A,oXe),e(A,Wf),e(Wf,moe),e(moe,rXe),e(Wf,tXe),e(Wf,dk),e(dk,aXe),e(Wf,nXe),e(A,sXe),e(A,Qf),e(Qf,goe),e(goe,lXe),e(Qf,iXe),e(Qf,ck),e(ck,dXe),e(Qf,cXe),e(A,fXe),e(A,Hf),e(Hf,hoe),e(hoe,mXe),e(Hf,gXe),e(Hf,fk),e(fk,hXe),e(Hf,pXe),e(A,_Xe),e(A,Uf),e(Uf,poe),e(poe,uXe),e(Uf,bXe),e(Uf,mk),e(mk,vXe),e(Uf,FXe),e(A,TXe),e(A,Jf),e(Jf,_oe),e(_oe,MXe),e(Jf,EXe),e(Jf,gk),e(gk,CXe),e(Jf,wXe),e(A,AXe),e(A,Yf),e(Yf,uoe),e(uoe,yXe),e(Yf,LXe),e(Yf,hk),e(hk,xXe),e(Yf,$Xe),e(A,kXe),e(A,Kf),e(Kf,boe),e(boe,SXe),e(Kf,RXe),e(Kf,pk),e(pk,PXe),e(Kf,BXe),e(A,IXe),e(A,Zf),e(Zf,voe),e(voe,qXe),e(Zf,NXe),e(Zf,_k),e(_k,jXe),e(Zf,DXe),e(A,GXe),e(A,em),e(em,Foe),e(Foe,OXe),e(em,VXe),e(em,uk),e(uk,XXe),e(em,zXe),e(A,WXe),e(A,om),e(om,Toe),e(Toe,QXe),e(om,HXe),e(om,bk),e(bk,UXe),e(om,JXe),e(A,YXe),e(A,rm),e(rm,Moe),e(Moe,KXe),e(rm,ZXe),e(rm,vk),e(vk,eze),e(rm,oze),e(A,rze),e(A,tm),e(tm,Eoe),e(Eoe,tze),e(tm,aze),e(tm,Fk),e(Fk,nze),e(tm,sze),e(A,lze),e(A,am),e(am,Coe),e(Coe,ize),e(am,dze),e(am,Tk),e(Tk,cze),e(am,fze),e(A,mze),e(A,nm),e(nm,woe),e(woe,gze),e(nm,hze),e(nm,Mk),e(Mk,pze),e(nm,_ze),e(A,uze),e(A,sm),e(sm,Aoe),e(Aoe,bze),e(sm,vze),e(sm,Ek),e(Ek,Fze),e(sm,Tze),e(A,Mze),e(A,lm),e(lm,yoe),e(yoe,Eze),e(lm,Cze),e(lm,Ck),e(Ck,wze),e(lm,Aze),e(A,yze),e(A,im),e(im,Loe),e(Loe,Lze),e(im,xze),e(im,wk),e(wk,$ze),e(im,kze),e(A,Sze),e(A,dm),e(dm,xoe),e(xoe,Rze),e(dm,Pze),e(dm,Ak),e(Ak,Bze),e(dm,Ize),e(A,qze),e(A,cm),e(cm,$oe),e($oe,Nze),e(cm,jze),e(cm,yk),e(yk,Dze),e(cm,Gze),e(A,Oze),e(A,fm),e(fm,koe),e(koe,Vze),e(fm,Xze),e(fm,Lk),e(Lk,zze),e(fm,Wze),e(A,Qze),e(A,mm),e(mm,Soe),e(Soe,Hze),e(mm,Uze),e(mm,xk),e(xk,Jze),e(mm,Yze),e(A,Kze),e(A,gm),e(gm,Roe),e(Roe,Zze),e(gm,eWe),e(gm,$k),e($k,oWe),e(gm,rWe),e(A,tWe),e(A,hm),e(hm,Poe),e(Poe,aWe),e(hm,nWe),e(hm,kk),e(kk,sWe),e(hm,lWe),e(A,iWe),e(A,pm),e(pm,Boe),e(Boe,dWe),e(pm,cWe),e(pm,Sk),e(Sk,fWe),e(pm,mWe),e(A,gWe),e(A,_m),e(_m,Ioe),e(Ioe,hWe),e(_m,pWe),e(_m,Rk),e(Rk,_We),e(_m,uWe),e(A,bWe),e(A,um),e(um,qoe),e(qoe,vWe),e(um,FWe),e(um,Pk),e(Pk,TWe),e(um,MWe),e(A,EWe),e(A,bm),e(bm,Noe),e(Noe,CWe),e(bm,wWe),e(bm,Bk),e(Bk,AWe),e(bm,yWe),e(A,LWe),e(A,vm),e(vm,joe),e(joe,xWe),e(vm,$We),e(vm,Ik),e(Ik,kWe),e(vm,SWe),e(A,RWe),e(A,Fm),e(Fm,Doe),e(Doe,PWe),e(Fm,BWe),e(Fm,qk),e(qk,IWe),e(Fm,qWe),e(A,NWe),e(A,Tm),e(Tm,Goe),e(Goe,jWe),e(Tm,DWe),e(Tm,Nk),e(Nk,GWe),e(Tm,OWe),e(A,VWe),e(A,Mm),e(Mm,Ooe),e(Ooe,XWe),e(Mm,zWe),e(Mm,jk),e(jk,WWe),e(Mm,QWe),e(A,HWe),e(A,Em),e(Em,Voe),e(Voe,UWe),e(Em,JWe),e(Em,Dk),e(Dk,YWe),e(Em,KWe),e(A,ZWe),e(A,Cm),e(Cm,Xoe),e(Xoe,eQe),e(Cm,oQe),e(Cm,Gk),e(Gk,rQe),e(Cm,tQe),e(A,aQe),e(A,wm),e(wm,zoe),e(zoe,nQe),e(wm,sQe),e(wm,Ok),e(Ok,lQe),e(wm,iQe),e(A,dQe),e(A,Am),e(Am,Woe),e(Woe,cQe),e(Am,fQe),e(Am,Vk),e(Vk,mQe),e(Am,gQe),e(A,hQe),e(A,ym),e(ym,Qoe),e(Qoe,pQe),e(ym,_Qe),e(ym,Xk),e(Xk,uQe),e(ym,bQe),e(A,vQe),e(A,Lm),e(Lm,Hoe),e(Hoe,FQe),e(Lm,TQe),e(Lm,zk),e(zk,MQe),e(Lm,EQe),e(A,CQe),e(A,xm),e(xm,Uoe),e(Uoe,wQe),e(xm,AQe),e(xm,Wk),e(Wk,yQe),e(xm,LQe),e(A,xQe),e(A,$m),e($m,Joe),e(Joe,$Qe),e($m,kQe),e($m,Qk),e(Qk,SQe),e($m,RQe),e(A,PQe),e(A,km),e(km,Yoe),e(Yoe,BQe),e(km,IQe),e(km,Hk),e(Hk,qQe),e(km,NQe),e(A,jQe),e(A,Sm),e(Sm,Koe),e(Koe,DQe),e(Sm,GQe),e(Sm,Uk),e(Uk,OQe),e(Sm,VQe),e(A,XQe),e(A,Rm),e(Rm,Zoe),e(Zoe,zQe),e(Rm,WQe),e(Rm,Jk),e(Jk,QQe),e(Rm,HQe),e(A,UQe),e(A,Pm),e(Pm,ere),e(ere,JQe),e(Pm,YQe),e(Pm,Yk),e(Yk,KQe),e(Pm,ZQe),e(A,eHe),e(A,Bm),e(Bm,ore),e(ore,oHe),e(Bm,rHe),e(Bm,Kk),e(Kk,tHe),e(Bm,aHe),e(A,nHe),e(A,Im),e(Im,rre),e(rre,sHe),e(Im,lHe),e(Im,Zk),e(Zk,iHe),e(Im,dHe),e(A,cHe),e(A,qm),e(qm,tre),e(tre,fHe),e(qm,mHe),e(qm,eS),e(eS,gHe),e(qm,hHe),e(A,pHe),e(A,Nm),e(Nm,are),e(are,_He),e(Nm,uHe),e(Nm,oS),e(oS,bHe),e(Nm,vHe),e(A,FHe),e(A,jm),e(jm,nre),e(nre,THe),e(jm,MHe),e(jm,rS),e(rS,EHe),e(jm,CHe),e(A,wHe),e(A,Dm),e(Dm,sre),e(sre,AHe),e(Dm,yHe),e(Dm,tS),e(tS,LHe),e(Dm,xHe),e(A,$He),e(A,Gm),e(Gm,lre),e(lre,kHe),e(Gm,SHe),e(Gm,aS),e(aS,RHe),e(Gm,PHe),e(A,BHe),e(A,Om),e(Om,ire),e(ire,IHe),e(Om,qHe),e(Om,nS),e(nS,NHe),e(Om,jHe),e(A,DHe),e(A,Vm),e(Vm,dre),e(dre,GHe),e(Vm,OHe),e(Vm,sS),e(sS,VHe),e(Vm,XHe),e(A,zHe),e(A,Xm),e(Xm,cre),e(cre,WHe),e(Xm,QHe),e(Xm,lS),e(lS,HHe),e(Xm,UHe),e(A,JHe),e(A,zm),e(zm,fre),e(fre,YHe),e(zm,KHe),e(zm,iS),e(iS,ZHe),e(zm,eUe),e(A,oUe),e(A,Wm),e(Wm,mre),e(mre,rUe),e(Wm,tUe),e(Wm,dS),e(dS,aUe),e(Wm,nUe),e(A,sUe),e(A,Qm),e(Qm,gre),e(gre,lUe),e(Qm,iUe),e(Qm,cS),e(cS,dUe),e(Qm,cUe),e(A,fUe),e(A,Hm),e(Hm,hre),e(hre,mUe),e(Hm,gUe),e(Hm,fS),e(fS,hUe),e(Hm,pUe),e(A,_Ue),e(A,Um),e(Um,pre),e(pre,uUe),e(Um,bUe),e(Um,mS),e(mS,vUe),e(Um,FUe),e(A,TUe),e(A,Jm),e(Jm,_re),e(_re,MUe),e(Jm,EUe),e(Jm,gS),e(gS,CUe),e(Jm,wUe),e(A,AUe),e(A,Ym),e(Ym,ure),e(ure,yUe),e(Ym,LUe),e(Ym,hS),e(hS,xUe),e(Ym,$Ue),e(A,kUe),e(A,Km),e(Km,bre),e(bre,SUe),e(Km,RUe),e(Km,pS),e(pS,PUe),e(Km,BUe),e(A,IUe),e(A,Zm),e(Zm,vre),e(vre,qUe),e(Zm,NUe),e(Zm,_S),e(_S,jUe),e(Zm,DUe),e(A,GUe),e(A,eg),e(eg,Fre),e(Fre,OUe),e(eg,VUe),e(eg,uS),e(uS,XUe),e(eg,zUe),e(A,WUe),e(A,og),e(og,Tre),e(Tre,QUe),e(og,HUe),e(og,bS),e(bS,UUe),e(og,JUe),e(A,YUe),e(A,rg),e(rg,Mre),e(Mre,KUe),e(rg,ZUe),e(rg,vS),e(vS,eJe),e(rg,oJe),e(A,rJe),e(A,tg),e(tg,Ere),e(Ere,tJe),e(tg,aJe),e(tg,FS),e(FS,nJe),e(tg,sJe),e(A,lJe),e(A,ag),e(ag,Cre),e(Cre,iJe),e(ag,dJe),e(ag,TS),e(TS,cJe),e(ag,fJe),e(A,mJe),e(A,ng),e(ng,wre),e(wre,gJe),e(ng,hJe),e(ng,MS),e(MS,pJe),e(ng,_Je),e(A,uJe),e(A,sg),e(sg,Are),e(Are,bJe),e(sg,vJe),e(sg,ES),e(ES,FJe),e(sg,TJe),e(A,MJe),e(A,lg),e(lg,yre),e(yre,EJe),e(lg,CJe),e(lg,CS),e(CS,wJe),e(lg,AJe),e(A,yJe),e(A,ig),e(ig,Lre),e(Lre,LJe),e(ig,xJe),e(ig,wS),e(wS,$Je),e(ig,kJe),e(A,SJe),e(A,dg),e(dg,xre),e(xre,RJe),e(dg,PJe),e(dg,AS),e(AS,BJe),e(dg,IJe),e(A,qJe),e(A,cg),e(cg,$re),e($re,NJe),e(cg,jJe),e(cg,yS),e(yS,DJe),e(cg,GJe),e(A,OJe),e(A,fg),e(fg,kre),e(kre,VJe),e(fg,XJe),e(fg,LS),e(LS,zJe),e(fg,WJe),e(A,QJe),e(A,mg),e(mg,Sre),e(Sre,HJe),e(mg,UJe),e(mg,xS),e(xS,JJe),e(mg,YJe),e(A,KJe),e(A,gg),e(gg,Rre),e(Rre,ZJe),e(gg,eYe),e(gg,$S),e($S,oYe),e(gg,rYe),e(A,tYe),e(A,hg),e(hg,Pre),e(Pre,aYe),e(hg,nYe),e(hg,kS),e(kS,sYe),e(hg,lYe),e(A,iYe),e(A,pg),e(pg,Bre),e(Bre,dYe),e(pg,cYe),e(pg,SS),e(SS,fYe),e(pg,mYe),e(A,gYe),e(A,_g),e(_g,Ire),e(Ire,hYe),e(_g,pYe),e(_g,RS),e(RS,_Ye),e(_g,uYe),e(A,bYe),e(A,ug),e(ug,qre),e(qre,vYe),e(ug,FYe),e(ug,PS),e(PS,TYe),e(ug,MYe),e(A,EYe),e(A,bg),e(bg,Nre),e(Nre,CYe),e(bg,wYe),e(bg,BS),e(BS,AYe),e(bg,yYe),e(Er,LYe),M(vg,Er,null),e(Co,xYe),e(Co,Fg),M(T6,Fg,null),e(Fg,$Ye),e(Fg,jre),e(jre,kYe),b(f,sqe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,Dre),M(M6,Dre,null),e(Fi,SYe),e(Fi,Gre),e(Gre,RYe),b(f,lqe,u),b(f,wo,u),M(E6,wo,null),e(wo,PYe),e(wo,C6),e(C6,BYe),e(C6,IS),e(IS,IYe),e(C6,qYe),e(wo,NYe),e(wo,w6),e(w6,jYe),e(w6,Ore),e(Ore,DYe),e(w6,GYe),e(wo,OYe),e(wo,Cr),M(A6,Cr,null),e(Cr,VYe),e(Cr,Vre),e(Vre,XYe),e(Cr,zYe),e(Cr,Aa),e(Aa,WYe),e(Aa,Xre),e(Xre,QYe),e(Aa,HYe),e(Aa,zre),e(zre,UYe),e(Aa,JYe),e(Aa,Wre),e(Wre,YYe),e(Aa,KYe),e(Cr,ZYe),e(Cr,k),e(k,Sn),e(Sn,Qre),e(Qre,eKe),e(Sn,oKe),e(Sn,qS),e(qS,rKe),e(Sn,tKe),e(Sn,NS),e(NS,aKe),e(Sn,nKe),e(k,sKe),e(k,Rn),e(Rn,Hre),e(Hre,lKe),e(Rn,iKe),e(Rn,jS),e(jS,dKe),e(Rn,cKe),e(Rn,DS),e(DS,fKe),e(Rn,mKe),e(k,gKe),e(k,Pn),e(Pn,Ure),e(Ure,hKe),e(Pn,pKe),e(Pn,GS),e(GS,_Ke),e(Pn,uKe),e(Pn,OS),e(OS,bKe),e(Pn,vKe),e(k,FKe),e(k,Mg),e(Mg,Jre),e(Jre,TKe),e(Mg,MKe),e(Mg,VS),e(VS,EKe),e(Mg,CKe),e(k,wKe),e(k,Bn),e(Bn,Yre),e(Yre,AKe),e(Bn,yKe),e(Bn,XS),e(XS,LKe),e(Bn,xKe),e(Bn,zS),e(zS,$Ke),e(Bn,kKe),e(k,SKe),e(k,Eg),e(Eg,Kre),e(Kre,RKe),e(Eg,PKe),e(Eg,WS),e(WS,BKe),e(Eg,IKe),e(k,qKe),e(k,Cg),e(Cg,Zre),e(Zre,NKe),e(Cg,jKe),e(Cg,QS),e(QS,DKe),e(Cg,GKe),e(k,OKe),e(k,wg),e(wg,ete),e(ete,VKe),e(wg,XKe),e(wg,HS),e(HS,zKe),e(wg,WKe),e(k,QKe),e(k,In),e(In,ote),e(ote,HKe),e(In,UKe),e(In,US),e(US,JKe),e(In,YKe),e(In,JS),e(JS,KKe),e(In,ZKe),e(k,eZe),e(k,qn),e(qn,rte),e(rte,oZe),e(qn,rZe),e(qn,YS),e(YS,tZe),e(qn,aZe),e(qn,KS),e(KS,nZe),e(qn,sZe),e(k,lZe),e(k,Nn),e(Nn,tte),e(tte,iZe),e(Nn,dZe),e(Nn,ZS),e(ZS,cZe),e(Nn,fZe),e(Nn,eR),e(eR,mZe),e(Nn,gZe),e(k,hZe),e(k,Ag),e(Ag,ate),e(ate,pZe),e(Ag,_Ze),e(Ag,oR),e(oR,uZe),e(Ag,bZe),e(k,vZe),e(k,yg),e(yg,nte),e(nte,FZe),e(yg,TZe),e(yg,rR),e(rR,MZe),e(yg,EZe),e(k,CZe),e(k,jn),e(jn,ste),e(ste,wZe),e(jn,AZe),e(jn,tR),e(tR,yZe),e(jn,LZe),e(jn,aR),e(aR,xZe),e(jn,$Ze),e(k,kZe),e(k,Lg),e(Lg,lte),e(lte,SZe),e(Lg,RZe),e(Lg,nR),e(nR,PZe),e(Lg,BZe),e(k,IZe),e(k,Dn),e(Dn,ite),e(ite,qZe),e(Dn,NZe),e(Dn,sR),e(sR,jZe),e(Dn,DZe),e(Dn,lR),e(lR,GZe),e(Dn,OZe),e(k,VZe),e(k,Gn),e(Gn,dte),e(dte,XZe),e(Gn,zZe),e(Gn,iR),e(iR,WZe),e(Gn,QZe),e(Gn,dR),e(dR,HZe),e(Gn,UZe),e(k,JZe),e(k,On),e(On,cte),e(cte,YZe),e(On,KZe),e(On,cR),e(cR,ZZe),e(On,eeo),e(On,fR),e(fR,oeo),e(On,reo),e(k,teo),e(k,xg),e(xg,fte),e(fte,aeo),e(xg,neo),e(xg,mR),e(mR,seo),e(xg,leo),e(k,ieo),e(k,Vn),e(Vn,mte),e(mte,deo),e(Vn,ceo),e(Vn,gR),e(gR,feo),e(Vn,meo),e(Vn,hR),e(hR,geo),e(Vn,heo),e(k,peo),e(k,Xn),e(Xn,gte),e(gte,_eo),e(Xn,ueo),e(Xn,pR),e(pR,beo),e(Xn,veo),e(Xn,_R),e(_R,Feo),e(Xn,Teo),e(k,Meo),e(k,zn),e(zn,hte),e(hte,Eeo),e(zn,Ceo),e(zn,uR),e(uR,weo),e(zn,Aeo),e(zn,bR),e(bR,yeo),e(zn,Leo),e(k,xeo),e(k,Wn),e(Wn,pte),e(pte,$eo),e(Wn,keo),e(Wn,vR),e(vR,Seo),e(Wn,Reo),e(Wn,FR),e(FR,Peo),e(Wn,Beo),e(k,Ieo),e(k,Qn),e(Qn,_te),e(_te,qeo),e(Qn,Neo),e(Qn,TR),e(TR,jeo),e(Qn,Deo),e(Qn,MR),e(MR,Geo),e(Qn,Oeo),e(k,Veo),e(k,Hn),e(Hn,ute),e(ute,Xeo),e(Hn,zeo),e(Hn,ER),e(ER,Weo),e(Hn,Qeo),e(Hn,CR),e(CR,Heo),e(Hn,Ueo),e(k,Jeo),e(k,$g),e($g,bte),e(bte,Yeo),e($g,Keo),e($g,wR),e(wR,Zeo),e($g,eoo),e(k,ooo),e(k,Un),e(Un,vte),e(vte,roo),e(Un,too),e(Un,AR),e(AR,aoo),e(Un,noo),e(Un,yR),e(yR,soo),e(Un,loo),e(k,ioo),e(k,kg),e(kg,Fte),e(Fte,doo),e(kg,coo),e(kg,LR),e(LR,foo),e(kg,moo),e(k,goo),e(k,Jn),e(Jn,Tte),e(Tte,hoo),e(Jn,poo),e(Jn,xR),e(xR,_oo),e(Jn,uoo),e(Jn,$R),e($R,boo),e(Jn,voo),e(k,Foo),e(k,Yn),e(Yn,Mte),e(Mte,Too),e(Yn,Moo),e(Yn,kR),e(kR,Eoo),e(Yn,Coo),e(Yn,SR),e(SR,woo),e(Yn,Aoo),e(k,yoo),e(k,Kn),e(Kn,Ete),e(Ete,Loo),e(Kn,xoo),e(Kn,RR),e(RR,$oo),e(Kn,koo),e(Kn,PR),e(PR,Soo),e(Kn,Roo),e(k,Poo),e(k,Zn),e(Zn,Cte),e(Cte,Boo),e(Zn,Ioo),e(Zn,BR),e(BR,qoo),e(Zn,Noo),e(Zn,IR),e(IR,joo),e(Zn,Doo),e(k,Goo),e(k,es),e(es,wte),e(wte,Ooo),e(es,Voo),e(es,qR),e(qR,Xoo),e(es,zoo),e(es,NR),e(NR,Woo),e(es,Qoo),e(k,Hoo),e(k,Sg),e(Sg,Ate),e(Ate,Uoo),e(Sg,Joo),e(Sg,jR),e(jR,Yoo),e(Sg,Koo),e(k,Zoo),e(k,os),e(os,yte),e(yte,ero),e(os,oro),e(os,DR),e(DR,rro),e(os,tro),e(os,GR),e(GR,aro),e(os,nro),e(k,sro),e(k,rs),e(rs,Lte),e(Lte,lro),e(rs,iro),e(rs,OR),e(OR,dro),e(rs,cro),e(rs,VR),e(VR,fro),e(rs,mro),e(k,gro),e(k,ts),e(ts,xte),e(xte,hro),e(ts,pro),e(ts,XR),e(XR,_ro),e(ts,uro),e(ts,zR),e(zR,bro),e(ts,vro),e(k,Fro),e(k,as),e(as,$te),e($te,Tro),e(as,Mro),e(as,WR),e(WR,Ero),e(as,Cro),e(as,QR),e(QR,wro),e(as,Aro),e(k,yro),e(k,ns),e(ns,kte),e(kte,Lro),e(ns,xro),e(ns,HR),e(HR,$ro),e(ns,kro),e(ns,UR),e(UR,Sro),e(ns,Rro),e(k,Pro),e(k,ss),e(ss,Ste),e(Ste,Bro),e(ss,Iro),e(ss,JR),e(JR,qro),e(ss,Nro),e(ss,YR),e(YR,jro),e(ss,Dro),e(k,Gro),e(k,Rg),e(Rg,Rte),e(Rte,Oro),e(Rg,Vro),e(Rg,KR),e(KR,Xro),e(Rg,zro),e(k,Wro),e(k,ls),e(ls,Pte),e(Pte,Qro),e(ls,Hro),e(ls,ZR),e(ZR,Uro),e(ls,Jro),e(ls,eP),e(eP,Yro),e(ls,Kro),e(k,Zro),e(k,Pg),e(Pg,Bte),e(Bte,eto),e(Pg,oto),e(Pg,oP),e(oP,rto),e(Pg,tto),e(k,ato),e(k,Bg),e(Bg,Ite),e(Ite,nto),e(Bg,sto),e(Bg,rP),e(rP,lto),e(Bg,ito),e(k,dto),e(k,is),e(is,qte),e(qte,cto),e(is,fto),e(is,tP),e(tP,mto),e(is,gto),e(is,aP),e(aP,hto),e(is,pto),e(k,_to),e(k,ds),e(ds,Nte),e(Nte,uto),e(ds,bto),e(ds,nP),e(nP,vto),e(ds,Fto),e(ds,sP),e(sP,Tto),e(ds,Mto),e(k,Eto),e(k,cs),e(cs,jte),e(jte,Cto),e(cs,wto),e(cs,lP),e(lP,Ato),e(cs,yto),e(cs,iP),e(iP,Lto),e(cs,xto),e(k,$to),e(k,Ig),e(Ig,Dte),e(Dte,kto),e(Ig,Sto),e(Ig,dP),e(dP,Rto),e(Ig,Pto),e(k,Bto),e(k,fs),e(fs,Gte),e(Gte,Ito),e(fs,qto),e(fs,cP),e(cP,Nto),e(fs,jto),e(fs,fP),e(fP,Dto),e(fs,Gto),e(k,Oto),e(k,ms),e(ms,Ote),e(Ote,Vto),e(ms,Xto),e(ms,mP),e(mP,zto),e(ms,Wto),e(ms,gP),e(gP,Qto),e(ms,Hto),e(k,Uto),e(k,gs),e(gs,Vte),e(Vte,Jto),e(gs,Yto),e(gs,hP),e(hP,Kto),e(gs,Zto),e(gs,pP),e(pP,eao),e(gs,oao),e(k,rao),e(k,hs),e(hs,Xte),e(Xte,tao),e(hs,aao),e(hs,_P),e(_P,nao),e(hs,sao),e(hs,uP),e(uP,lao),e(hs,iao),e(k,dao),e(k,ps),e(ps,zte),e(zte,cao),e(ps,fao),e(ps,bP),e(bP,mao),e(ps,gao),e(ps,vP),e(vP,hao),e(ps,pao),e(k,_ao),e(k,qg),e(qg,Wte),e(Wte,uao),e(qg,bao),e(qg,FP),e(FP,vao),e(qg,Fao),e(k,Tao),e(k,_s),e(_s,Qte),e(Qte,Mao),e(_s,Eao),e(_s,TP),e(TP,Cao),e(_s,wao),e(_s,MP),e(MP,Aao),e(_s,yao),e(k,Lao),e(k,Ng),e(Ng,Hte),e(Hte,xao),e(Ng,$ao),e(Ng,EP),e(EP,kao),e(Ng,Sao),e(k,Rao),e(k,jg),e(jg,Ute),e(Ute,Pao),e(jg,Bao),e(jg,CP),e(CP,Iao),e(jg,qao),e(k,Nao),e(k,Dg),e(Dg,Jte),e(Jte,jao),e(Dg,Dao),e(Dg,wP),e(wP,Gao),e(Dg,Oao),e(k,Vao),e(k,Gg),e(Gg,Yte),e(Yte,Xao),e(Gg,zao),e(Gg,AP),e(AP,Wao),e(Gg,Qao),e(k,Hao),e(k,us),e(us,Kte),e(Kte,Uao),e(us,Jao),e(us,yP),e(yP,Yao),e(us,Kao),e(us,LP),e(LP,Zao),e(us,eno),e(k,ono),e(k,Og),e(Og,Zte),e(Zte,rno),e(Og,tno),e(Og,xP),e(xP,ano),e(Og,nno),e(k,sno),e(k,bs),e(bs,eae),e(eae,lno),e(bs,ino),e(bs,$P),e($P,dno),e(bs,cno),e(bs,kP),e(kP,fno),e(bs,mno),e(k,gno),e(k,vs),e(vs,oae),e(oae,hno),e(vs,pno),e(vs,SP),e(SP,_no),e(vs,uno),e(vs,RP),e(RP,bno),e(vs,vno),e(k,Fno),e(k,Fs),e(Fs,rae),e(rae,Tno),e(Fs,Mno),e(Fs,PP),e(PP,Eno),e(Fs,Cno),e(Fs,BP),e(BP,wno),e(Fs,Ano),e(k,yno),e(k,Ts),e(Ts,tae),e(tae,Lno),e(Ts,xno),e(Ts,IP),e(IP,$no),e(Ts,kno),e(Ts,qP),e(qP,Sno),e(Ts,Rno),e(k,Pno),e(k,Ms),e(Ms,aae),e(aae,Bno),e(Ms,Ino),e(Ms,NP),e(NP,qno),e(Ms,Nno),e(Ms,jP),e(jP,jno),e(Ms,Dno),e(k,Gno),e(k,Es),e(Es,nae),e(nae,Ono),e(Es,Vno),e(Es,DP),e(DP,Xno),e(Es,zno),e(Es,GP),e(GP,Wno),e(Es,Qno),e(k,Hno),e(k,Vg),e(Vg,sae),e(sae,Uno),e(Vg,Jno),e(Vg,OP),e(OP,Yno),e(Vg,Kno),e(k,Zno),e(k,Xg),e(Xg,lae),e(lae,eso),e(Xg,oso),e(Xg,VP),e(VP,rso),e(Xg,tso),e(k,aso),e(k,Cs),e(Cs,iae),e(iae,nso),e(Cs,sso),e(Cs,XP),e(XP,lso),e(Cs,iso),e(Cs,zP),e(zP,dso),e(Cs,cso),e(k,fso),e(k,ws),e(ws,dae),e(dae,mso),e(ws,gso),e(ws,WP),e(WP,hso),e(ws,pso),e(ws,QP),e(QP,_so),e(ws,uso),e(k,bso),e(k,As),e(As,cae),e(cae,vso),e(As,Fso),e(As,HP),e(HP,Tso),e(As,Mso),e(As,UP),e(UP,Eso),e(As,Cso),e(k,wso),e(k,zg),e(zg,fae),e(fae,Aso),e(zg,yso),e(zg,JP),e(JP,Lso),e(zg,xso),e(k,$so),e(k,Wg),e(Wg,mae),e(mae,kso),e(Wg,Sso),e(Wg,YP),e(YP,Rso),e(Wg,Pso),e(k,Bso),e(k,Qg),e(Qg,gae),e(gae,Iso),e(Qg,qso),e(Qg,KP),e(KP,Nso),e(Qg,jso),e(k,Dso),e(k,ys),e(ys,hae),e(hae,Gso),e(ys,Oso),e(ys,ZP),e(ZP,Vso),e(ys,Xso),e(ys,eB),e(eB,zso),e(ys,Wso),e(k,Qso),e(k,Hg),e(Hg,pae),e(pae,Hso),e(Hg,Uso),e(Hg,oB),e(oB,Jso),e(Hg,Yso),e(k,Kso),e(k,Ug),e(Ug,_ae),e(_ae,Zso),e(Ug,elo),e(Ug,rB),e(rB,olo),e(Ug,rlo),e(k,tlo),e(k,Jg),e(Jg,uae),e(uae,alo),e(Jg,nlo),e(Jg,tB),e(tB,slo),e(Jg,llo),e(k,ilo),e(k,Ls),e(Ls,bae),e(bae,dlo),e(Ls,clo),e(Ls,aB),e(aB,flo),e(Ls,mlo),e(Ls,nB),e(nB,glo),e(Ls,hlo),e(k,plo),e(k,Yg),e(Yg,vae),e(vae,_lo),e(Yg,ulo),e(Yg,sB),e(sB,blo),e(Yg,vlo),e(k,Flo),e(k,Kg),e(Kg,Fae),e(Fae,Tlo),e(Kg,Mlo),e(Kg,lB),e(lB,Elo),e(Kg,Clo),e(k,wlo),e(k,xs),e(xs,Tae),e(Tae,Alo),e(xs,ylo),e(xs,iB),e(iB,Llo),e(xs,xlo),e(xs,dB),e(dB,$lo),e(xs,klo),e(k,Slo),e(k,$s),e($s,Mae),e(Mae,Rlo),e($s,Plo),e($s,cB),e(cB,Blo),e($s,Ilo),e($s,fB),e(fB,qlo),e($s,Nlo),e(k,jlo),e(k,ks),e(ks,Eae),e(Eae,Dlo),e(ks,Glo),e(ks,mB),e(mB,Olo),e(ks,Vlo),e(ks,gB),e(gB,Xlo),e(ks,zlo),e(k,Wlo),e(k,Ss),e(Ss,Cae),e(Cae,Qlo),e(Ss,Hlo),e(Ss,hB),e(hB,Ulo),e(Ss,Jlo),e(Ss,pB),e(pB,Ylo),e(Ss,Klo),e(Cr,Zlo),M(Zg,Cr,null),e(wo,eio),e(wo,eh),M(y6,eh,null),e(eh,oio),e(eh,wae),e(wae,rio),b(f,iqe,u),b(f,Ti,u),e(Ti,oh),e(oh,Aae),M(L6,Aae,null),e(Ti,tio),e(Ti,yae),e(yae,aio),b(f,dqe,u),b(f,Ao,u),M(x6,Ao,null),e(Ao,nio),e(Ao,$6),e($6,sio),e($6,_B),e(_B,lio),e($6,iio),e(Ao,dio),e(Ao,k6),e(k6,cio),e(k6,Lae),e(Lae,fio),e(k6,mio),e(Ao,gio),e(Ao,He),M(S6,He,null),e(He,hio),e(He,xae),e(xae,pio),e(He,_io),e(He,ya),e(ya,uio),e(ya,$ae),e($ae,bio),e(ya,vio),e(ya,kae),e(kae,Fio),e(ya,Tio),e(ya,Sae),e(Sae,Mio),e(ya,Eio),e(He,Cio),e(He,Z),e(Z,rh),e(rh,Rae),e(Rae,wio),e(rh,Aio),e(rh,uB),e(uB,yio),e(rh,Lio),e(Z,xio),e(Z,th),e(th,Pae),e(Pae,$io),e(th,kio),e(th,bB),e(bB,Sio),e(th,Rio),e(Z,Pio),e(Z,ah),e(ah,Bae),e(Bae,Bio),e(ah,Iio),e(ah,vB),e(vB,qio),e(ah,Nio),e(Z,jio),e(Z,nh),e(nh,Iae),e(Iae,Dio),e(nh,Gio),e(nh,FB),e(FB,Oio),e(nh,Vio),e(Z,Xio),e(Z,sh),e(sh,qae),e(qae,zio),e(sh,Wio),e(sh,TB),e(TB,Qio),e(sh,Hio),e(Z,Uio),e(Z,lh),e(lh,Nae),e(Nae,Jio),e(lh,Yio),e(lh,MB),e(MB,Kio),e(lh,Zio),e(Z,edo),e(Z,ih),e(ih,jae),e(jae,odo),e(ih,rdo),e(ih,EB),e(EB,tdo),e(ih,ado),e(Z,ndo),e(Z,dh),e(dh,Dae),e(Dae,sdo),e(dh,ldo),e(dh,CB),e(CB,ido),e(dh,ddo),e(Z,cdo),e(Z,ch),e(ch,Gae),e(Gae,fdo),e(ch,mdo),e(ch,wB),e(wB,gdo),e(ch,hdo),e(Z,pdo),e(Z,fh),e(fh,Oae),e(Oae,_do),e(fh,udo),e(fh,AB),e(AB,bdo),e(fh,vdo),e(Z,Fdo),e(Z,mh),e(mh,Vae),e(Vae,Tdo),e(mh,Mdo),e(mh,yB),e(yB,Edo),e(mh,Cdo),e(Z,wdo),e(Z,gh),e(gh,Xae),e(Xae,Ado),e(gh,ydo),e(gh,LB),e(LB,Ldo),e(gh,xdo),e(Z,$do),e(Z,hh),e(hh,zae),e(zae,kdo),e(hh,Sdo),e(hh,xB),e(xB,Rdo),e(hh,Pdo),e(Z,Bdo),e(Z,ph),e(ph,Wae),e(Wae,Ido),e(ph,qdo),e(ph,$B),e($B,Ndo),e(ph,jdo),e(Z,Ddo),e(Z,_h),e(_h,Qae),e(Qae,Gdo),e(_h,Odo),e(_h,kB),e(kB,Vdo),e(_h,Xdo),e(Z,zdo),e(Z,uh),e(uh,Hae),e(Hae,Wdo),e(uh,Qdo),e(uh,SB),e(SB,Hdo),e(uh,Udo),e(Z,Jdo),e(Z,bh),e(bh,Uae),e(Uae,Ydo),e(bh,Kdo),e(bh,RB),e(RB,Zdo),e(bh,eco),e(Z,oco),e(Z,vh),e(vh,Jae),e(Jae,rco),e(vh,tco),e(vh,PB),e(PB,aco),e(vh,nco),e(Z,sco),e(Z,Fh),e(Fh,Yae),e(Yae,lco),e(Fh,ico),e(Fh,BB),e(BB,dco),e(Fh,cco),e(Z,fco),e(Z,Th),e(Th,Kae),e(Kae,mco),e(Th,gco),e(Th,IB),e(IB,hco),e(Th,pco),e(Z,_co),e(Z,Mh),e(Mh,Zae),e(Zae,uco),e(Mh,bco),e(Mh,qB),e(qB,vco),e(Mh,Fco),e(Z,Tco),e(Z,Eh),e(Eh,ene),e(ene,Mco),e(Eh,Eco),e(Eh,NB),e(NB,Cco),e(Eh,wco),e(Z,Aco),e(Z,Ch),e(Ch,one),e(one,yco),e(Ch,Lco),e(Ch,jB),e(jB,xco),e(Ch,$co),e(Z,kco),e(Z,wh),e(wh,rne),e(rne,Sco),e(wh,Rco),e(wh,DB),e(DB,Pco),e(wh,Bco),e(Z,Ico),e(Z,Ah),e(Ah,tne),e(tne,qco),e(Ah,Nco),e(Ah,GB),e(GB,jco),e(Ah,Dco),e(Z,Gco),e(Z,yh),e(yh,ane),e(ane,Oco),e(yh,Vco),e(yh,OB),e(OB,Xco),e(yh,zco),e(He,Wco),M(Lh,He,null),e(He,Qco),M(xh,He,null),e(Ao,Hco),e(Ao,$h),M(R6,$h,null),e($h,Uco),e($h,nne),e(nne,Jco),b(f,cqe,u),b(f,Mi,u),e(Mi,kh),e(kh,sne),M(P6,sne,null),e(Mi,Yco),e(Mi,lne),e(lne,Kco),b(f,fqe,u),b(f,yo,u),M(B6,yo,null),e(yo,Zco),e(yo,I6),e(I6,efo),e(I6,VB),e(VB,ofo),e(I6,rfo),e(yo,tfo),e(yo,q6),e(q6,afo),e(q6,ine),e(ine,nfo),e(q6,sfo),e(yo,lfo),e(yo,Ue),M(N6,Ue,null),e(Ue,ifo),e(Ue,dne),e(dne,dfo),e(Ue,cfo),e(Ue,Ei),e(Ei,ffo),e(Ei,cne),e(cne,mfo),e(Ei,gfo),e(Ei,fne),e(fne,hfo),e(Ei,pfo),e(Ue,_fo),e(Ue,pe),e(pe,Sh),e(Sh,mne),e(mne,ufo),e(Sh,bfo),e(Sh,XB),e(XB,vfo),e(Sh,Ffo),e(pe,Tfo),e(pe,Rh),e(Rh,gne),e(gne,Mfo),e(Rh,Efo),e(Rh,hne),e(hne,Cfo),e(Rh,wfo),e(pe,Afo),e(pe,Ph),e(Ph,pne),e(pne,yfo),e(Ph,Lfo),e(Ph,zB),e(zB,xfo),e(Ph,$fo),e(pe,kfo),e(pe,Bh),e(Bh,_ne),e(_ne,Sfo),e(Bh,Rfo),e(Bh,WB),e(WB,Pfo),e(Bh,Bfo),e(pe,Ifo),e(pe,Ih),e(Ih,une),e(une,qfo),e(Ih,Nfo),e(Ih,QB),e(QB,jfo),e(Ih,Dfo),e(pe,Gfo),e(pe,qh),e(qh,bne),e(bne,Ofo),e(qh,Vfo),e(qh,HB),e(HB,Xfo),e(qh,zfo),e(pe,Wfo),e(pe,Nh),e(Nh,vne),e(vne,Qfo),e(Nh,Hfo),e(Nh,UB),e(UB,Ufo),e(Nh,Jfo),e(pe,Yfo),e(pe,jh),e(jh,Fne),e(Fne,Kfo),e(jh,Zfo),e(jh,JB),e(JB,emo),e(jh,omo),e(pe,rmo),e(pe,Dh),e(Dh,Tne),e(Tne,tmo),e(Dh,amo),e(Dh,YB),e(YB,nmo),e(Dh,smo),e(pe,lmo),e(pe,Gh),e(Gh,Mne),e(Mne,imo),e(Gh,dmo),e(Gh,KB),e(KB,cmo),e(Gh,fmo),e(pe,mmo),e(pe,Oh),e(Oh,Ene),e(Ene,gmo),e(Oh,hmo),e(Oh,ZB),e(ZB,pmo),e(Oh,_mo),e(pe,umo),e(pe,Vh),e(Vh,Cne),e(Cne,bmo),e(Vh,vmo),e(Vh,eI),e(eI,Fmo),e(Vh,Tmo),e(pe,Mmo),e(pe,Xh),e(Xh,wne),e(wne,Emo),e(Xh,Cmo),e(Xh,oI),e(oI,wmo),e(Xh,Amo),e(pe,ymo),e(pe,zh),e(zh,Ane),e(Ane,Lmo),e(zh,xmo),e(zh,rI),e(rI,$mo),e(zh,kmo),e(pe,Smo),e(pe,Wh),e(Wh,yne),e(yne,Rmo),e(Wh,Pmo),e(Wh,tI),e(tI,Bmo),e(Wh,Imo),e(pe,qmo),e(pe,Qh),e(Qh,Lne),e(Lne,Nmo),e(Qh,jmo),e(Qh,aI),e(aI,Dmo),e(Qh,Gmo),e(Ue,Omo),M(Hh,Ue,null),e(Ue,Vmo),M(Uh,Ue,null),e(yo,Xmo),e(yo,Jh),M(j6,Jh,null),e(Jh,zmo),e(Jh,xne),e(xne,Wmo),b(f,mqe,u),b(f,Ci,u),e(Ci,Yh),e(Yh,$ne),M(D6,$ne,null),e(Ci,Qmo),e(Ci,kne),e(kne,Hmo),b(f,gqe,u),b(f,Lo,u),M(G6,Lo,null),e(Lo,Umo),e(Lo,wi),e(wi,Jmo),e(wi,nI),e(nI,Ymo),e(wi,Kmo),e(wi,sI),e(sI,Zmo),e(wi,ego),e(Lo,ogo),e(Lo,O6),e(O6,rgo),e(O6,Sne),e(Sne,tgo),e(O6,ago),e(Lo,ngo),e(Lo,tt),M(V6,tt,null),e(tt,sgo),e(tt,Rne),e(Rne,lgo),e(tt,igo),e(tt,Ai),e(Ai,dgo),e(Ai,Pne),e(Pne,cgo),e(Ai,fgo),e(Ai,lI),e(lI,mgo),e(Ai,ggo),e(tt,hgo),M(Kh,tt,null),e(Lo,pgo),e(Lo,Je),M(X6,Je,null),e(Je,_go),e(Je,Bne),e(Bne,ugo),e(Je,bgo),e(Je,La),e(La,vgo),e(La,Ine),e(Ine,Fgo),e(La,Tgo),e(La,qne),e(qne,Mgo),e(La,Ego),e(La,Nne),e(Nne,Cgo),e(La,wgo),e(Je,Ago),e(Je,x),e(x,Zh),e(Zh,jne),e(jne,ygo),e(Zh,Lgo),e(Zh,iI),e(iI,xgo),e(Zh,$go),e(x,kgo),e(x,ep),e(ep,Dne),e(Dne,Sgo),e(ep,Rgo),e(ep,dI),e(dI,Pgo),e(ep,Bgo),e(x,Igo),e(x,op),e(op,Gne),e(Gne,qgo),e(op,Ngo),e(op,cI),e(cI,jgo),e(op,Dgo),e(x,Ggo),e(x,rp),e(rp,One),e(One,Ogo),e(rp,Vgo),e(rp,fI),e(fI,Xgo),e(rp,zgo),e(x,Wgo),e(x,tp),e(tp,Vne),e(Vne,Qgo),e(tp,Hgo),e(tp,mI),e(mI,Ugo),e(tp,Jgo),e(x,Ygo),e(x,ap),e(ap,Xne),e(Xne,Kgo),e(ap,Zgo),e(ap,gI),e(gI,eho),e(ap,oho),e(x,rho),e(x,np),e(np,zne),e(zne,tho),e(np,aho),e(np,hI),e(hI,nho),e(np,sho),e(x,lho),e(x,sp),e(sp,Wne),e(Wne,iho),e(sp,dho),e(sp,pI),e(pI,cho),e(sp,fho),e(x,mho),e(x,lp),e(lp,Qne),e(Qne,gho),e(lp,hho),e(lp,_I),e(_I,pho),e(lp,_ho),e(x,uho),e(x,ip),e(ip,Hne),e(Hne,bho),e(ip,vho),e(ip,uI),e(uI,Fho),e(ip,Tho),e(x,Mho),e(x,dp),e(dp,Une),e(Une,Eho),e(dp,Cho),e(dp,bI),e(bI,who),e(dp,Aho),e(x,yho),e(x,cp),e(cp,Jne),e(Jne,Lho),e(cp,xho),e(cp,vI),e(vI,$ho),e(cp,kho),e(x,Sho),e(x,fp),e(fp,Yne),e(Yne,Rho),e(fp,Pho),e(fp,FI),e(FI,Bho),e(fp,Iho),e(x,qho),e(x,mp),e(mp,Kne),e(Kne,Nho),e(mp,jho),e(mp,TI),e(TI,Dho),e(mp,Gho),e(x,Oho),e(x,gp),e(gp,Zne),e(Zne,Vho),e(gp,Xho),e(gp,MI),e(MI,zho),e(gp,Who),e(x,Qho),e(x,hp),e(hp,ese),e(ese,Hho),e(hp,Uho),e(hp,EI),e(EI,Jho),e(hp,Yho),e(x,Kho),e(x,pp),e(pp,ose),e(ose,Zho),e(pp,epo),e(pp,CI),e(CI,opo),e(pp,rpo),e(x,tpo),e(x,_p),e(_p,rse),e(rse,apo),e(_p,npo),e(_p,wI),e(wI,spo),e(_p,lpo),e(x,ipo),e(x,up),e(up,tse),e(tse,dpo),e(up,cpo),e(up,AI),e(AI,fpo),e(up,mpo),e(x,gpo),e(x,bp),e(bp,ase),e(ase,hpo),e(bp,ppo),e(bp,yI),e(yI,_po),e(bp,upo),e(x,bpo),e(x,vp),e(vp,nse),e(nse,vpo),e(vp,Fpo),e(vp,LI),e(LI,Tpo),e(vp,Mpo),e(x,Epo),e(x,Fp),e(Fp,sse),e(sse,Cpo),e(Fp,wpo),e(Fp,xI),e(xI,Apo),e(Fp,ypo),e(x,Lpo),e(x,Tp),e(Tp,lse),e(lse,xpo),e(Tp,$po),e(Tp,$I),e($I,kpo),e(Tp,Spo),e(x,Rpo),e(x,Mp),e(Mp,ise),e(ise,Ppo),e(Mp,Bpo),e(Mp,kI),e(kI,Ipo),e(Mp,qpo),e(x,Npo),e(x,Ep),e(Ep,dse),e(dse,jpo),e(Ep,Dpo),e(Ep,SI),e(SI,Gpo),e(Ep,Opo),e(x,Vpo),e(x,Cp),e(Cp,cse),e(cse,Xpo),e(Cp,zpo),e(Cp,RI),e(RI,Wpo),e(Cp,Qpo),e(x,Hpo),e(x,wp),e(wp,fse),e(fse,Upo),e(wp,Jpo),e(wp,PI),e(PI,Ypo),e(wp,Kpo),e(x,Zpo),e(x,Ap),e(Ap,mse),e(mse,e_o),e(Ap,o_o),e(Ap,BI),e(BI,r_o),e(Ap,t_o),e(x,a_o),e(x,yp),e(yp,gse),e(gse,n_o),e(yp,s_o),e(yp,II),e(II,l_o),e(yp,i_o),e(x,d_o),e(x,Lp),e(Lp,hse),e(hse,c_o),e(Lp,f_o),e(Lp,qI),e(qI,m_o),e(Lp,g_o),e(x,h_o),e(x,xp),e(xp,pse),e(pse,p_o),e(xp,__o),e(xp,NI),e(NI,u_o),e(xp,b_o),e(x,v_o),e(x,Rs),e(Rs,_se),e(_se,F_o),e(Rs,T_o),e(Rs,jI),e(jI,M_o),e(Rs,E_o),e(Rs,DI),e(DI,C_o),e(Rs,w_o),e(x,A_o),e(x,$p),e($p,use),e(use,y_o),e($p,L_o),e($p,GI),e(GI,x_o),e($p,$_o),e(x,k_o),e(x,kp),e(kp,bse),e(bse,S_o),e(kp,R_o),e(kp,OI),e(OI,P_o),e(kp,B_o),e(x,I_o),e(x,Sp),e(Sp,vse),e(vse,q_o),e(Sp,N_o),e(Sp,VI),e(VI,j_o),e(Sp,D_o),e(x,G_o),e(x,Rp),e(Rp,Fse),e(Fse,O_o),e(Rp,V_o),e(Rp,XI),e(XI,X_o),e(Rp,z_o),e(x,W_o),e(x,Pp),e(Pp,Tse),e(Tse,Q_o),e(Pp,H_o),e(Pp,zI),e(zI,U_o),e(Pp,J_o),e(x,Y_o),e(x,Bp),e(Bp,Mse),e(Mse,K_o),e(Bp,Z_o),e(Bp,WI),e(WI,euo),e(Bp,ouo),e(x,ruo),e(x,Ip),e(Ip,Ese),e(Ese,tuo),e(Ip,auo),e(Ip,QI),e(QI,nuo),e(Ip,suo),e(x,luo),e(x,qp),e(qp,Cse),e(Cse,iuo),e(qp,duo),e(qp,HI),e(HI,cuo),e(qp,fuo),e(x,muo),e(x,Np),e(Np,wse),e(wse,guo),e(Np,huo),e(Np,UI),e(UI,puo),e(Np,_uo),e(x,uuo),e(x,jp),e(jp,Ase),e(Ase,buo),e(jp,vuo),e(jp,JI),e(JI,Fuo),e(jp,Tuo),e(x,Muo),e(x,Dp),e(Dp,yse),e(yse,Euo),e(Dp,Cuo),e(Dp,YI),e(YI,wuo),e(Dp,Auo),e(x,yuo),e(x,Gp),e(Gp,Lse),e(Lse,Luo),e(Gp,xuo),e(Gp,KI),e(KI,$uo),e(Gp,kuo),e(x,Suo),e(x,Op),e(Op,xse),e(xse,Ruo),e(Op,Puo),e(Op,ZI),e(ZI,Buo),e(Op,Iuo),e(x,quo),e(x,Vp),e(Vp,$se),e($se,Nuo),e(Vp,juo),e(Vp,eq),e(eq,Duo),e(Vp,Guo),e(x,Ouo),e(x,Xp),e(Xp,kse),e(kse,Vuo),e(Xp,Xuo),e(Xp,oq),e(oq,zuo),e(Xp,Wuo),e(x,Quo),e(x,zp),e(zp,Sse),e(Sse,Huo),e(zp,Uuo),e(zp,rq),e(rq,Juo),e(zp,Yuo),e(x,Kuo),e(x,Wp),e(Wp,Rse),e(Rse,Zuo),e(Wp,e2o),e(Wp,tq),e(tq,o2o),e(Wp,r2o),e(x,t2o),e(x,Qp),e(Qp,Pse),e(Pse,a2o),e(Qp,n2o),e(Qp,aq),e(aq,s2o),e(Qp,l2o),e(x,i2o),e(x,Hp),e(Hp,Bse),e(Bse,d2o),e(Hp,c2o),e(Hp,nq),e(nq,f2o),e(Hp,m2o),e(x,g2o),e(x,Up),e(Up,Ise),e(Ise,h2o),e(Up,p2o),e(Up,sq),e(sq,_2o),e(Up,u2o),e(x,b2o),e(x,Jp),e(Jp,qse),e(qse,v2o),e(Jp,F2o),e(Jp,lq),e(lq,T2o),e(Jp,M2o),e(x,E2o),e(x,Yp),e(Yp,Nse),e(Nse,C2o),e(Yp,w2o),e(Yp,iq),e(iq,A2o),e(Yp,y2o),e(x,L2o),e(x,Kp),e(Kp,jse),e(jse,x2o),e(Kp,$2o),e(Kp,dq),e(dq,k2o),e(Kp,S2o),e(x,R2o),e(x,Zp),e(Zp,Dse),e(Dse,P2o),e(Zp,B2o),e(Zp,cq),e(cq,I2o),e(Zp,q2o),e(x,N2o),e(x,e_),e(e_,Gse),e(Gse,j2o),e(e_,D2o),e(e_,fq),e(fq,G2o),e(e_,O2o),e(x,V2o),e(x,o_),e(o_,Ose),e(Ose,X2o),e(o_,z2o),e(o_,mq),e(mq,W2o),e(o_,Q2o),e(x,H2o),e(x,r_),e(r_,Vse),e(Vse,U2o),e(r_,J2o),e(r_,gq),e(gq,Y2o),e(r_,K2o),e(x,Z2o),e(x,t_),e(t_,Xse),e(Xse,e1o),e(t_,o1o),e(t_,hq),e(hq,r1o),e(t_,t1o),e(x,a1o),e(x,a_),e(a_,zse),e(zse,n1o),e(a_,s1o),e(a_,pq),e(pq,l1o),e(a_,i1o),e(x,d1o),e(x,n_),e(n_,Wse),e(Wse,c1o),e(n_,f1o),e(n_,_q),e(_q,m1o),e(n_,g1o),e(x,h1o),e(x,s_),e(s_,Qse),e(Qse,p1o),e(s_,_1o),e(s_,uq),e(uq,u1o),e(s_,b1o),e(x,v1o),e(x,l_),e(l_,Hse),e(Hse,F1o),e(l_,T1o),e(l_,bq),e(bq,M1o),e(l_,E1o),e(x,C1o),e(x,i_),e(i_,Use),e(Use,w1o),e(i_,A1o),e(i_,vq),e(vq,y1o),e(i_,L1o),e(x,x1o),e(x,d_),e(d_,Jse),e(Jse,$1o),e(d_,k1o),e(d_,Fq),e(Fq,S1o),e(d_,R1o),e(x,P1o),e(x,c_),e(c_,Yse),e(Yse,B1o),e(c_,I1o),e(c_,Tq),e(Tq,q1o),e(c_,N1o),e(x,j1o),e(x,f_),e(f_,Kse),e(Kse,D1o),e(f_,G1o),e(f_,Mq),e(Mq,O1o),e(f_,V1o),e(x,X1o),e(x,m_),e(m_,Zse),e(Zse,z1o),e(m_,W1o),e(m_,Eq),e(Eq,Q1o),e(m_,H1o),e(x,U1o),e(x,g_),e(g_,ele),e(ele,J1o),e(g_,Y1o),e(g_,Cq),e(Cq,K1o),e(g_,Z1o),e(x,e7o),e(x,h_),e(h_,ole),e(ole,o7o),e(h_,r7o),e(h_,wq),e(wq,t7o),e(h_,a7o),e(x,n7o),e(x,p_),e(p_,rle),e(rle,s7o),e(p_,l7o),e(p_,Aq),e(Aq,i7o),e(p_,d7o),e(x,c7o),e(x,__),e(__,tle),e(tle,f7o),e(__,m7o),e(__,yq),e(yq,g7o),e(__,h7o),e(x,p7o),e(x,u_),e(u_,ale),e(ale,_7o),e(u_,u7o),e(u_,Lq),e(Lq,b7o),e(u_,v7o),e(x,F7o),e(x,b_),e(b_,nle),e(nle,T7o),e(b_,M7o),e(b_,xq),e(xq,E7o),e(b_,C7o),e(x,w7o),e(x,v_),e(v_,sle),e(sle,A7o),e(v_,y7o),e(v_,$q),e($q,L7o),e(v_,x7o),e(x,$7o),e(x,F_),e(F_,lle),e(lle,k7o),e(F_,S7o),e(F_,kq),e(kq,R7o),e(F_,P7o),e(x,B7o),e(x,T_),e(T_,ile),e(ile,I7o),e(T_,q7o),e(T_,Sq),e(Sq,N7o),e(T_,j7o),e(x,D7o),e(x,M_),e(M_,dle),e(dle,G7o),e(M_,O7o),e(M_,Rq),e(Rq,V7o),e(M_,X7o),e(x,z7o),e(x,E_),e(E_,cle),e(cle,W7o),e(E_,Q7o),e(E_,Pq),e(Pq,H7o),e(E_,U7o),e(x,J7o),e(x,C_),e(C_,fle),e(fle,Y7o),e(C_,K7o),e(C_,Bq),e(Bq,Z7o),e(C_,ebo),e(x,obo),e(x,w_),e(w_,mle),e(mle,rbo),e(w_,tbo),e(w_,Iq),e(Iq,abo),e(w_,nbo),e(x,sbo),e(x,A_),e(A_,gle),e(gle,lbo),e(A_,ibo),e(A_,qq),e(qq,dbo),e(A_,cbo),e(x,fbo),e(x,y_),e(y_,hle),e(hle,mbo),e(y_,gbo),e(y_,Nq),e(Nq,hbo),e(y_,pbo),e(x,_bo),e(x,L_),e(L_,ple),e(ple,ubo),e(L_,bbo),e(L_,jq),e(jq,vbo),e(L_,Fbo),e(x,Tbo),e(x,x_),e(x_,_le),e(_le,Mbo),e(x_,Ebo),e(x_,Dq),e(Dq,Cbo),e(x_,wbo),e(x,Abo),e(x,$_),e($_,ule),e(ule,ybo),e($_,Lbo),e($_,Gq),e(Gq,xbo),e($_,$bo),e(x,kbo),e(x,k_),e(k_,ble),e(ble,Sbo),e(k_,Rbo),e(k_,Oq),e(Oq,Pbo),e(k_,Bbo),e(x,Ibo),e(x,S_),e(S_,vle),e(vle,qbo),e(S_,Nbo),e(S_,Vq),e(Vq,jbo),e(S_,Dbo),e(x,Gbo),e(x,R_),e(R_,Fle),e(Fle,Obo),e(R_,Vbo),e(R_,Xq),e(Xq,Xbo),e(R_,zbo),e(x,Wbo),e(x,P_),e(P_,Tle),e(Tle,Qbo),e(P_,Hbo),e(P_,zq),e(zq,Ubo),e(P_,Jbo),e(x,Ybo),e(x,B_),e(B_,Mle),e(Mle,Kbo),e(B_,Zbo),e(B_,Wq),e(Wq,evo),e(B_,ovo),e(x,rvo),e(x,I_),e(I_,Ele),e(Ele,tvo),e(I_,avo),e(I_,Qq),e(Qq,nvo),e(I_,svo),e(x,lvo),e(x,q_),e(q_,Cle),e(Cle,ivo),e(q_,dvo),e(q_,Hq),e(Hq,cvo),e(q_,fvo),e(x,mvo),e(x,N_),e(N_,wle),e(wle,gvo),e(N_,hvo),e(N_,Uq),e(Uq,pvo),e(N_,_vo),e(x,uvo),e(x,j_),e(j_,Ale),e(Ale,bvo),e(j_,vvo),e(j_,Jq),e(Jq,Fvo),e(j_,Tvo),e(x,Mvo),e(x,D_),e(D_,yle),e(yle,Evo),e(D_,Cvo),e(D_,Yq),e(Yq,wvo),e(D_,Avo),e(x,yvo),e(x,G_),e(G_,Lle),e(Lle,Lvo),e(G_,xvo),e(G_,Kq),e(Kq,$vo),e(G_,kvo),e(x,Svo),e(x,O_),e(O_,xle),e(xle,Rvo),e(O_,Pvo),e(O_,Zq),e(Zq,Bvo),e(O_,Ivo),e(Je,qvo),e(Je,V_),e(V_,Nvo),e(V_,$le),e($le,jvo),e(V_,Dvo),e(V_,kle),e(kle,Gvo),e(Je,Ovo),M(X_,Je,null),b(f,hqe,u),b(f,yi,u),e(yi,z_),e(z_,Sle),M(z6,Sle,null),e(yi,Vvo),e(yi,Rle),e(Rle,Xvo),b(f,pqe,u),b(f,xo,u),M(W6,xo,null),e(xo,zvo),e(xo,Li),e(Li,Wvo),e(Li,eN),e(eN,Qvo),e(Li,Hvo),e(Li,oN),e(oN,Uvo),e(Li,Jvo),e(xo,Yvo),e(xo,Q6),e(Q6,Kvo),e(Q6,Ple),e(Ple,Zvo),e(Q6,eFo),e(xo,oFo),e(xo,at),M(H6,at,null),e(at,rFo),e(at,Ble),e(Ble,tFo),e(at,aFo),e(at,xi),e(xi,nFo),e(xi,Ile),e(Ile,sFo),e(xi,lFo),e(xi,rN),e(rN,iFo),e(xi,dFo),e(at,cFo),M(W_,at,null),e(xo,fFo),e(xo,Ye),M(U6,Ye,null),e(Ye,mFo),e(Ye,qle),e(qle,gFo),e(Ye,hFo),e(Ye,xa),e(xa,pFo),e(xa,Nle),e(Nle,_Fo),e(xa,uFo),e(xa,jle),e(jle,bFo),e(xa,vFo),e(xa,Dle),e(Dle,FFo),e(xa,TFo),e(Ye,MFo),e(Ye,G),e(G,Q_),e(Q_,Gle),e(Gle,EFo),e(Q_,CFo),e(Q_,tN),e(tN,wFo),e(Q_,AFo),e(G,yFo),e(G,H_),e(H_,Ole),e(Ole,LFo),e(H_,xFo),e(H_,aN),e(aN,$Fo),e(H_,kFo),e(G,SFo),e(G,U_),e(U_,Vle),e(Vle,RFo),e(U_,PFo),e(U_,nN),e(nN,BFo),e(U_,IFo),e(G,qFo),e(G,J_),e(J_,Xle),e(Xle,NFo),e(J_,jFo),e(J_,sN),e(sN,DFo),e(J_,GFo),e(G,OFo),e(G,Y_),e(Y_,zle),e(zle,VFo),e(Y_,XFo),e(Y_,lN),e(lN,zFo),e(Y_,WFo),e(G,QFo),e(G,K_),e(K_,Wle),e(Wle,HFo),e(K_,UFo),e(K_,iN),e(iN,JFo),e(K_,YFo),e(G,KFo),e(G,Z_),e(Z_,Qle),e(Qle,ZFo),e(Z_,eTo),e(Z_,dN),e(dN,oTo),e(Z_,rTo),e(G,tTo),e(G,eu),e(eu,Hle),e(Hle,aTo),e(eu,nTo),e(eu,cN),e(cN,sTo),e(eu,lTo),e(G,iTo),e(G,ou),e(ou,Ule),e(Ule,dTo),e(ou,cTo),e(ou,fN),e(fN,fTo),e(ou,mTo),e(G,gTo),e(G,ru),e(ru,Jle),e(Jle,hTo),e(ru,pTo),e(ru,mN),e(mN,_To),e(ru,uTo),e(G,bTo),e(G,tu),e(tu,Yle),e(Yle,vTo),e(tu,FTo),e(tu,gN),e(gN,TTo),e(tu,MTo),e(G,ETo),e(G,au),e(au,Kle),e(Kle,CTo),e(au,wTo),e(au,hN),e(hN,ATo),e(au,yTo),e(G,LTo),e(G,nu),e(nu,Zle),e(Zle,xTo),e(nu,$To),e(nu,pN),e(pN,kTo),e(nu,STo),e(G,RTo),e(G,su),e(su,eie),e(eie,PTo),e(su,BTo),e(su,_N),e(_N,ITo),e(su,qTo),e(G,NTo),e(G,lu),e(lu,oie),e(oie,jTo),e(lu,DTo),e(lu,uN),e(uN,GTo),e(lu,OTo),e(G,VTo),e(G,iu),e(iu,rie),e(rie,XTo),e(iu,zTo),e(iu,bN),e(bN,WTo),e(iu,QTo),e(G,HTo),e(G,du),e(du,tie),e(tie,UTo),e(du,JTo),e(du,vN),e(vN,YTo),e(du,KTo),e(G,ZTo),e(G,cu),e(cu,aie),e(aie,eMo),e(cu,oMo),e(cu,FN),e(FN,rMo),e(cu,tMo),e(G,aMo),e(G,fu),e(fu,nie),e(nie,nMo),e(fu,sMo),e(fu,TN),e(TN,lMo),e(fu,iMo),e(G,dMo),e(G,mu),e(mu,sie),e(sie,cMo),e(mu,fMo),e(mu,MN),e(MN,mMo),e(mu,gMo),e(G,hMo),e(G,gu),e(gu,lie),e(lie,pMo),e(gu,_Mo),e(gu,EN),e(EN,uMo),e(gu,bMo),e(G,vMo),e(G,hu),e(hu,iie),e(iie,FMo),e(hu,TMo),e(hu,CN),e(CN,MMo),e(hu,EMo),e(G,CMo),e(G,pu),e(pu,die),e(die,wMo),e(pu,AMo),e(pu,wN),e(wN,yMo),e(pu,LMo),e(G,xMo),e(G,_u),e(_u,cie),e(cie,$Mo),e(_u,kMo),e(_u,AN),e(AN,SMo),e(_u,RMo),e(G,PMo),e(G,uu),e(uu,fie),e(fie,BMo),e(uu,IMo),e(uu,yN),e(yN,qMo),e(uu,NMo),e(G,jMo),e(G,bu),e(bu,mie),e(mie,DMo),e(bu,GMo),e(bu,LN),e(LN,OMo),e(bu,VMo),e(G,XMo),e(G,vu),e(vu,gie),e(gie,zMo),e(vu,WMo),e(vu,xN),e(xN,QMo),e(vu,HMo),e(G,UMo),e(G,Fu),e(Fu,hie),e(hie,JMo),e(Fu,YMo),e(Fu,$N),e($N,KMo),e(Fu,ZMo),e(G,e4o),e(G,Tu),e(Tu,pie),e(pie,o4o),e(Tu,r4o),e(Tu,kN),e(kN,t4o),e(Tu,a4o),e(G,n4o),e(G,Mu),e(Mu,_ie),e(_ie,s4o),e(Mu,l4o),e(Mu,SN),e(SN,i4o),e(Mu,d4o),e(G,c4o),e(G,Eu),e(Eu,uie),e(uie,f4o),e(Eu,m4o),e(Eu,RN),e(RN,g4o),e(Eu,h4o),e(G,p4o),e(G,Cu),e(Cu,bie),e(bie,_4o),e(Cu,u4o),e(Cu,PN),e(PN,b4o),e(Cu,v4o),e(G,F4o),e(G,wu),e(wu,vie),e(vie,T4o),e(wu,M4o),e(wu,BN),e(BN,E4o),e(wu,C4o),e(G,w4o),e(G,Au),e(Au,Fie),e(Fie,A4o),e(Au,y4o),e(Au,IN),e(IN,L4o),e(Au,x4o),e(G,$4o),e(G,yu),e(yu,Tie),e(Tie,k4o),e(yu,S4o),e(yu,qN),e(qN,R4o),e(yu,P4o),e(G,B4o),e(G,Lu),e(Lu,Mie),e(Mie,I4o),e(Lu,q4o),e(Lu,NN),e(NN,N4o),e(Lu,j4o),e(G,D4o),e(G,xu),e(xu,Eie),e(Eie,G4o),e(xu,O4o),e(xu,jN),e(jN,V4o),e(xu,X4o),e(G,z4o),e(G,$u),e($u,Cie),e(Cie,W4o),e($u,Q4o),e($u,DN),e(DN,H4o),e($u,U4o),e(G,J4o),e(G,ku),e(ku,wie),e(wie,Y4o),e(ku,K4o),e(ku,GN),e(GN,Z4o),e(ku,eEo),e(G,oEo),e(G,Su),e(Su,Aie),e(Aie,rEo),e(Su,tEo),e(Su,ON),e(ON,aEo),e(Su,nEo),e(G,sEo),e(G,Ru),e(Ru,yie),e(yie,lEo),e(Ru,iEo),e(Ru,VN),e(VN,dEo),e(Ru,cEo),e(G,fEo),e(G,Pu),e(Pu,Lie),e(Lie,mEo),e(Pu,gEo),e(Pu,XN),e(XN,hEo),e(Pu,pEo),e(Ye,_Eo),e(Ye,Bu),e(Bu,uEo),e(Bu,xie),e(xie,bEo),e(Bu,vEo),e(Bu,$ie),e($ie,FEo),e(Ye,TEo),M(Iu,Ye,null),b(f,_qe,u),b(f,$i,u),e($i,qu),e(qu,kie),M(J6,kie,null),e($i,MEo),e($i,Sie),e(Sie,EEo),b(f,uqe,u),b(f,$o,u),M(Y6,$o,null),e($o,CEo),e($o,ki),e(ki,wEo),e(ki,zN),e(zN,AEo),e(ki,yEo),e(ki,WN),e(WN,LEo),e(ki,xEo),e($o,$Eo),e($o,K6),e(K6,kEo),e(K6,Rie),e(Rie,SEo),e(K6,REo),e($o,PEo),e($o,nt),M(Z6,nt,null),e(nt,BEo),e(nt,Pie),e(Pie,IEo),e(nt,qEo),e(nt,Si),e(Si,NEo),e(Si,Bie),e(Bie,jEo),e(Si,DEo),e(Si,QN),e(QN,GEo),e(Si,OEo),e(nt,VEo),M(Nu,nt,null),e($o,XEo),e($o,Ke),M(ey,Ke,null),e(Ke,zEo),e(Ke,Iie),e(Iie,WEo),e(Ke,QEo),e(Ke,$a),e($a,HEo),e($a,qie),e(qie,UEo),e($a,JEo),e($a,Nie),e(Nie,YEo),e($a,KEo),e($a,jie),e(jie,ZEo),e($a,eCo),e(Ke,oCo),e(Ke,z),e(z,ju),e(ju,Die),e(Die,rCo),e(ju,tCo),e(ju,HN),e(HN,aCo),e(ju,nCo),e(z,sCo),e(z,Du),e(Du,Gie),e(Gie,lCo),e(Du,iCo),e(Du,UN),e(UN,dCo),e(Du,cCo),e(z,fCo),e(z,Gu),e(Gu,Oie),e(Oie,mCo),e(Gu,gCo),e(Gu,JN),e(JN,hCo),e(Gu,pCo),e(z,_Co),e(z,Ou),e(Ou,Vie),e(Vie,uCo),e(Ou,bCo),e(Ou,YN),e(YN,vCo),e(Ou,FCo),e(z,TCo),e(z,Vu),e(Vu,Xie),e(Xie,MCo),e(Vu,ECo),e(Vu,KN),e(KN,CCo),e(Vu,wCo),e(z,ACo),e(z,Xu),e(Xu,zie),e(zie,yCo),e(Xu,LCo),e(Xu,ZN),e(ZN,xCo),e(Xu,$Co),e(z,kCo),e(z,zu),e(zu,Wie),e(Wie,SCo),e(zu,RCo),e(zu,ej),e(ej,PCo),e(zu,BCo),e(z,ICo),e(z,Wu),e(Wu,Qie),e(Qie,qCo),e(Wu,NCo),e(Wu,oj),e(oj,jCo),e(Wu,DCo),e(z,GCo),e(z,Qu),e(Qu,Hie),e(Hie,OCo),e(Qu,VCo),e(Qu,rj),e(rj,XCo),e(Qu,zCo),e(z,WCo),e(z,Hu),e(Hu,Uie),e(Uie,QCo),e(Hu,HCo),e(Hu,tj),e(tj,UCo),e(Hu,JCo),e(z,YCo),e(z,Uu),e(Uu,Jie),e(Jie,KCo),e(Uu,ZCo),e(Uu,aj),e(aj,e5o),e(Uu,o5o),e(z,r5o),e(z,Ju),e(Ju,Yie),e(Yie,t5o),e(Ju,a5o),e(Ju,nj),e(nj,n5o),e(Ju,s5o),e(z,l5o),e(z,Yu),e(Yu,Kie),e(Kie,i5o),e(Yu,d5o),e(Yu,sj),e(sj,c5o),e(Yu,f5o),e(z,m5o),e(z,Ku),e(Ku,Zie),e(Zie,g5o),e(Ku,h5o),e(Ku,lj),e(lj,p5o),e(Ku,_5o),e(z,u5o),e(z,Zu),e(Zu,ede),e(ede,b5o),e(Zu,v5o),e(Zu,ij),e(ij,F5o),e(Zu,T5o),e(z,M5o),e(z,e2),e(e2,ode),e(ode,E5o),e(e2,C5o),e(e2,dj),e(dj,w5o),e(e2,A5o),e(z,y5o),e(z,o2),e(o2,rde),e(rde,L5o),e(o2,x5o),e(o2,cj),e(cj,$5o),e(o2,k5o),e(z,S5o),e(z,r2),e(r2,tde),e(tde,R5o),e(r2,P5o),e(r2,fj),e(fj,B5o),e(r2,I5o),e(z,q5o),e(z,t2),e(t2,ade),e(ade,N5o),e(t2,j5o),e(t2,mj),e(mj,D5o),e(t2,G5o),e(z,O5o),e(z,a2),e(a2,nde),e(nde,V5o),e(a2,X5o),e(a2,gj),e(gj,z5o),e(a2,W5o),e(z,Q5o),e(z,n2),e(n2,sde),e(sde,H5o),e(n2,U5o),e(n2,hj),e(hj,J5o),e(n2,Y5o),e(z,K5o),e(z,s2),e(s2,lde),e(lde,Z5o),e(s2,e3o),e(s2,pj),e(pj,o3o),e(s2,r3o),e(z,t3o),e(z,l2),e(l2,ide),e(ide,a3o),e(l2,n3o),e(l2,_j),e(_j,s3o),e(l2,l3o),e(z,i3o),e(z,i2),e(i2,dde),e(dde,d3o),e(i2,c3o),e(i2,uj),e(uj,f3o),e(i2,m3o),e(z,g3o),e(z,d2),e(d2,cde),e(cde,h3o),e(d2,p3o),e(d2,bj),e(bj,_3o),e(d2,u3o),e(z,b3o),e(z,c2),e(c2,fde),e(fde,v3o),e(c2,F3o),e(c2,vj),e(vj,T3o),e(c2,M3o),e(z,E3o),e(z,f2),e(f2,mde),e(mde,C3o),e(f2,w3o),e(f2,Fj),e(Fj,A3o),e(f2,y3o),e(z,L3o),e(z,m2),e(m2,gde),e(gde,x3o),e(m2,$3o),e(m2,Tj),e(Tj,k3o),e(m2,S3o),e(z,R3o),e(z,g2),e(g2,hde),e(hde,P3o),e(g2,B3o),e(g2,Mj),e(Mj,I3o),e(g2,q3o),e(z,N3o),e(z,h2),e(h2,pde),e(pde,j3o),e(h2,D3o),e(h2,Ej),e(Ej,G3o),e(h2,O3o),e(z,V3o),e(z,p2),e(p2,_de),e(_de,X3o),e(p2,z3o),e(p2,Cj),e(Cj,W3o),e(p2,Q3o),e(z,H3o),e(z,_2),e(_2,ude),e(ude,U3o),e(_2,J3o),e(_2,wj),e(wj,Y3o),e(_2,K3o),e(z,Z3o),e(z,u2),e(u2,bde),e(bde,ewo),e(u2,owo),e(u2,Aj),e(Aj,rwo),e(u2,two),e(z,awo),e(z,b2),e(b2,vde),e(vde,nwo),e(b2,swo),e(b2,yj),e(yj,lwo),e(b2,iwo),e(z,dwo),e(z,v2),e(v2,Fde),e(Fde,cwo),e(v2,fwo),e(v2,Lj),e(Lj,mwo),e(v2,gwo),e(z,hwo),e(z,F2),e(F2,Tde),e(Tde,pwo),e(F2,_wo),e(F2,xj),e(xj,uwo),e(F2,bwo),e(Ke,vwo),e(Ke,T2),e(T2,Fwo),e(T2,Mde),e(Mde,Two),e(T2,Mwo),e(T2,Ede),e(Ede,Ewo),e(Ke,Cwo),M(M2,Ke,null),b(f,bqe,u),b(f,Ri,u),e(Ri,E2),e(E2,Cde),M(oy,Cde,null),e(Ri,wwo),e(Ri,wde),e(wde,Awo),b(f,vqe,u),b(f,ko,u),M(ry,ko,null),e(ko,ywo),e(ko,Pi),e(Pi,Lwo),e(Pi,$j),e($j,xwo),e(Pi,$wo),e(Pi,kj),e(kj,kwo),e(Pi,Swo),e(ko,Rwo),e(ko,ty),e(ty,Pwo),e(ty,Ade),e(Ade,Bwo),e(ty,Iwo),e(ko,qwo),e(ko,st),M(ay,st,null),e(st,Nwo),e(st,yde),e(yde,jwo),e(st,Dwo),e(st,Bi),e(Bi,Gwo),e(Bi,Lde),e(Lde,Owo),e(Bi,Vwo),e(Bi,Sj),e(Sj,Xwo),e(Bi,zwo),e(st,Wwo),M(C2,st,null),e(ko,Qwo),e(ko,Ze),M(ny,Ze,null),e(Ze,Hwo),e(Ze,xde),e(xde,Uwo),e(Ze,Jwo),e(Ze,ka),e(ka,Ywo),e(ka,$de),e($de,Kwo),e(ka,Zwo),e(ka,kde),e(kde,e0o),e(ka,o0o),e(ka,Sde),e(Sde,r0o),e(ka,t0o),e(Ze,a0o),e(Ze,W),e(W,w2),e(w2,Rde),e(Rde,n0o),e(w2,s0o),e(w2,Rj),e(Rj,l0o),e(w2,i0o),e(W,d0o),e(W,A2),e(A2,Pde),e(Pde,c0o),e(A2,f0o),e(A2,Pj),e(Pj,m0o),e(A2,g0o),e(W,h0o),e(W,y2),e(y2,Bde),e(Bde,p0o),e(y2,_0o),e(y2,Bj),e(Bj,u0o),e(y2,b0o),e(W,v0o),e(W,L2),e(L2,Ide),e(Ide,F0o),e(L2,T0o),e(L2,Ij),e(Ij,M0o),e(L2,E0o),e(W,C0o),e(W,x2),e(x2,qde),e(qde,w0o),e(x2,A0o),e(x2,qj),e(qj,y0o),e(x2,L0o),e(W,x0o),e(W,$2),e($2,Nde),e(Nde,$0o),e($2,k0o),e($2,Nj),e(Nj,S0o),e($2,R0o),e(W,P0o),e(W,k2),e(k2,jde),e(jde,B0o),e(k2,I0o),e(k2,jj),e(jj,q0o),e(k2,N0o),e(W,j0o),e(W,S2),e(S2,Dde),e(Dde,D0o),e(S2,G0o),e(S2,Dj),e(Dj,O0o),e(S2,V0o),e(W,X0o),e(W,R2),e(R2,Gde),e(Gde,z0o),e(R2,W0o),e(R2,Gj),e(Gj,Q0o),e(R2,H0o),e(W,U0o),e(W,P2),e(P2,Ode),e(Ode,J0o),e(P2,Y0o),e(P2,Oj),e(Oj,K0o),e(P2,Z0o),e(W,eAo),e(W,B2),e(B2,Vde),e(Vde,oAo),e(B2,rAo),e(B2,Vj),e(Vj,tAo),e(B2,aAo),e(W,nAo),e(W,I2),e(I2,Xde),e(Xde,sAo),e(I2,lAo),e(I2,Xj),e(Xj,iAo),e(I2,dAo),e(W,cAo),e(W,q2),e(q2,zde),e(zde,fAo),e(q2,mAo),e(q2,zj),e(zj,gAo),e(q2,hAo),e(W,pAo),e(W,N2),e(N2,Wde),e(Wde,_Ao),e(N2,uAo),e(N2,Wj),e(Wj,bAo),e(N2,vAo),e(W,FAo),e(W,j2),e(j2,Qde),e(Qde,TAo),e(j2,MAo),e(j2,Qj),e(Qj,EAo),e(j2,CAo),e(W,wAo),e(W,D2),e(D2,Hde),e(Hde,AAo),e(D2,yAo),e(D2,Hj),e(Hj,LAo),e(D2,xAo),e(W,$Ao),e(W,G2),e(G2,Ude),e(Ude,kAo),e(G2,SAo),e(G2,Uj),e(Uj,RAo),e(G2,PAo),e(W,BAo),e(W,O2),e(O2,Jde),e(Jde,IAo),e(O2,qAo),e(O2,Jj),e(Jj,NAo),e(O2,jAo),e(W,DAo),e(W,V2),e(V2,Yde),e(Yde,GAo),e(V2,OAo),e(V2,Yj),e(Yj,VAo),e(V2,XAo),e(W,zAo),e(W,X2),e(X2,Kde),e(Kde,WAo),e(X2,QAo),e(X2,Kj),e(Kj,HAo),e(X2,UAo),e(W,JAo),e(W,z2),e(z2,Zde),e(Zde,YAo),e(z2,KAo),e(z2,Zj),e(Zj,ZAo),e(z2,e6o),e(W,o6o),e(W,W2),e(W2,ece),e(ece,r6o),e(W2,t6o),e(W2,eD),e(eD,a6o),e(W2,n6o),e(W,s6o),e(W,Q2),e(Q2,oce),e(oce,l6o),e(Q2,i6o),e(Q2,oD),e(oD,d6o),e(Q2,c6o),e(W,f6o),e(W,H2),e(H2,rce),e(rce,m6o),e(H2,g6o),e(H2,rD),e(rD,h6o),e(H2,p6o),e(W,_6o),e(W,U2),e(U2,tce),e(tce,u6o),e(U2,b6o),e(U2,tD),e(tD,v6o),e(U2,F6o),e(W,T6o),e(W,J2),e(J2,ace),e(ace,M6o),e(J2,E6o),e(J2,aD),e(aD,C6o),e(J2,w6o),e(W,A6o),e(W,Y2),e(Y2,nce),e(nce,y6o),e(Y2,L6o),e(Y2,nD),e(nD,x6o),e(Y2,$6o),e(W,k6o),e(W,K2),e(K2,sce),e(sce,S6o),e(K2,R6o),e(K2,sD),e(sD,P6o),e(K2,B6o),e(W,I6o),e(W,Z2),e(Z2,lce),e(lce,q6o),e(Z2,N6o),e(Z2,lD),e(lD,j6o),e(Z2,D6o),e(W,G6o),e(W,e1),e(e1,ice),e(ice,O6o),e(e1,V6o),e(e1,iD),e(iD,X6o),e(e1,z6o),e(W,W6o),e(W,o1),e(o1,dce),e(dce,Q6o),e(o1,H6o),e(o1,cce),e(cce,U6o),e(o1,J6o),e(W,Y6o),e(W,r1),e(r1,fce),e(fce,K6o),e(r1,Z6o),e(r1,dD),e(dD,eyo),e(r1,oyo),e(W,ryo),e(W,t1),e(t1,mce),e(mce,tyo),e(t1,ayo),e(t1,cD),e(cD,nyo),e(t1,syo),e(W,lyo),e(W,a1),e(a1,gce),e(gce,iyo),e(a1,dyo),e(a1,fD),e(fD,cyo),e(a1,fyo),e(W,myo),e(W,n1),e(n1,hce),e(hce,gyo),e(n1,hyo),e(n1,mD),e(mD,pyo),e(n1,_yo),e(Ze,uyo),e(Ze,s1),e(s1,byo),e(s1,pce),e(pce,vyo),e(s1,Fyo),e(s1,_ce),e(_ce,Tyo),e(Ze,Myo),M(l1,Ze,null),b(f,Fqe,u),b(f,Ii,u),e(Ii,i1),e(i1,uce),M(sy,uce,null),e(Ii,Eyo),e(Ii,bce),e(bce,Cyo),b(f,Tqe,u),b(f,So,u),M(ly,So,null),e(So,wyo),e(So,qi),e(qi,Ayo),e(qi,gD),e(gD,yyo),e(qi,Lyo),e(qi,hD),e(hD,xyo),e(qi,$yo),e(So,kyo),e(So,iy),e(iy,Syo),e(iy,vce),e(vce,Ryo),e(iy,Pyo),e(So,Byo),e(So,lt),M(dy,lt,null),e(lt,Iyo),e(lt,Fce),e(Fce,qyo),e(lt,Nyo),e(lt,Ni),e(Ni,jyo),e(Ni,Tce),e(Tce,Dyo),e(Ni,Gyo),e(Ni,pD),e(pD,Oyo),e(Ni,Vyo),e(lt,Xyo),M(d1,lt,null),e(So,zyo),e(So,eo),M(cy,eo,null),e(eo,Wyo),e(eo,Mce),e(Mce,Qyo),e(eo,Hyo),e(eo,Sa),e(Sa,Uyo),e(Sa,Ece),e(Ece,Jyo),e(Sa,Yyo),e(Sa,Cce),e(Cce,Kyo),e(Sa,Zyo),e(Sa,wce),e(wce,eLo),e(Sa,oLo),e(eo,rLo),e(eo,_e),e(_e,c1),e(c1,Ace),e(Ace,tLo),e(c1,aLo),e(c1,_D),e(_D,nLo),e(c1,sLo),e(_e,lLo),e(_e,f1),e(f1,yce),e(yce,iLo),e(f1,dLo),e(f1,uD),e(uD,cLo),e(f1,fLo),e(_e,mLo),e(_e,m1),e(m1,Lce),e(Lce,gLo),e(m1,hLo),e(m1,bD),e(bD,pLo),e(m1,_Lo),e(_e,uLo),e(_e,g1),e(g1,xce),e(xce,bLo),e(g1,vLo),e(g1,vD),e(vD,FLo),e(g1,TLo),e(_e,MLo),e(_e,h1),e(h1,$ce),e($ce,ELo),e(h1,CLo),e(h1,FD),e(FD,wLo),e(h1,ALo),e(_e,yLo),e(_e,p1),e(p1,kce),e(kce,LLo),e(p1,xLo),e(p1,TD),e(TD,$Lo),e(p1,kLo),e(_e,SLo),e(_e,_1),e(_1,Sce),e(Sce,RLo),e(_1,PLo),e(_1,MD),e(MD,BLo),e(_1,ILo),e(_e,qLo),e(_e,u1),e(u1,Rce),e(Rce,NLo),e(u1,jLo),e(u1,ED),e(ED,DLo),e(u1,GLo),e(_e,OLo),e(_e,b1),e(b1,Pce),e(Pce,VLo),e(b1,XLo),e(b1,CD),e(CD,zLo),e(b1,WLo),e(_e,QLo),e(_e,v1),e(v1,Bce),e(Bce,HLo),e(v1,ULo),e(v1,wD),e(wD,JLo),e(v1,YLo),e(_e,KLo),e(_e,F1),e(F1,Ice),e(Ice,ZLo),e(F1,e8o),e(F1,AD),e(AD,o8o),e(F1,r8o),e(_e,t8o),e(_e,T1),e(T1,qce),e(qce,a8o),e(T1,n8o),e(T1,yD),e(yD,s8o),e(T1,l8o),e(_e,i8o),e(_e,M1),e(M1,Nce),e(Nce,d8o),e(M1,c8o),e(M1,LD),e(LD,f8o),e(M1,m8o),e(_e,g8o),e(_e,E1),e(E1,jce),e(jce,h8o),e(E1,p8o),e(E1,xD),e(xD,_8o),e(E1,u8o),e(_e,b8o),e(_e,C1),e(C1,Dce),e(Dce,v8o),e(C1,F8o),e(C1,$D),e($D,T8o),e(C1,M8o),e(_e,E8o),e(_e,w1),e(w1,Gce),e(Gce,C8o),e(w1,w8o),e(w1,kD),e(kD,A8o),e(w1,y8o),e(eo,L8o),e(eo,A1),e(A1,x8o),e(A1,Oce),e(Oce,$8o),e(A1,k8o),e(A1,Vce),e(Vce,S8o),e(eo,R8o),M(y1,eo,null),b(f,Mqe,u),b(f,ji,u),e(ji,L1),e(L1,Xce),M(fy,Xce,null),e(ji,P8o),e(ji,zce),e(zce,B8o),b(f,Eqe,u),b(f,Ro,u),M(my,Ro,null),e(Ro,I8o),e(Ro,Di),e(Di,q8o),e(Di,SD),e(SD,N8o),e(Di,j8o),e(Di,RD),e(RD,D8o),e(Di,G8o),e(Ro,O8o),e(Ro,gy),e(gy,V8o),e(gy,Wce),e(Wce,X8o),e(gy,z8o),e(Ro,W8o),e(Ro,it),M(hy,it,null),e(it,Q8o),e(it,Qce),e(Qce,H8o),e(it,U8o),e(it,Gi),e(Gi,J8o),e(Gi,Hce),e(Hce,Y8o),e(Gi,K8o),e(Gi,PD),e(PD,Z8o),e(Gi,e9o),e(it,o9o),M(x1,it,null),e(Ro,r9o),e(Ro,oo),M(py,oo,null),e(oo,t9o),e(oo,Uce),e(Uce,a9o),e(oo,n9o),e(oo,Ra),e(Ra,s9o),e(Ra,Jce),e(Jce,l9o),e(Ra,i9o),e(Ra,Yce),e(Yce,d9o),e(Ra,c9o),e(Ra,Kce),e(Kce,f9o),e(Ra,m9o),e(oo,g9o),e(oo,N),e(N,$1),e($1,Zce),e(Zce,h9o),e($1,p9o),e($1,BD),e(BD,_9o),e($1,u9o),e(N,b9o),e(N,k1),e(k1,efe),e(efe,v9o),e(k1,F9o),e(k1,ID),e(ID,T9o),e(k1,M9o),e(N,E9o),e(N,S1),e(S1,ofe),e(ofe,C9o),e(S1,w9o),e(S1,qD),e(qD,A9o),e(S1,y9o),e(N,L9o),e(N,R1),e(R1,rfe),e(rfe,x9o),e(R1,$9o),e(R1,ND),e(ND,k9o),e(R1,S9o),e(N,R9o),e(N,P1),e(P1,tfe),e(tfe,P9o),e(P1,B9o),e(P1,jD),e(jD,I9o),e(P1,q9o),e(N,N9o),e(N,B1),e(B1,afe),e(afe,j9o),e(B1,D9o),e(B1,DD),e(DD,G9o),e(B1,O9o),e(N,V9o),e(N,I1),e(I1,nfe),e(nfe,X9o),e(I1,z9o),e(I1,GD),e(GD,W9o),e(I1,Q9o),e(N,H9o),e(N,q1),e(q1,sfe),e(sfe,U9o),e(q1,J9o),e(q1,OD),e(OD,Y9o),e(q1,K9o),e(N,Z9o),e(N,N1),e(N1,lfe),e(lfe,exo),e(N1,oxo),e(N1,VD),e(VD,rxo),e(N1,txo),e(N,axo),e(N,j1),e(j1,ife),e(ife,nxo),e(j1,sxo),e(j1,XD),e(XD,lxo),e(j1,ixo),e(N,dxo),e(N,D1),e(D1,dfe),e(dfe,cxo),e(D1,fxo),e(D1,zD),e(zD,mxo),e(D1,gxo),e(N,hxo),e(N,G1),e(G1,cfe),e(cfe,pxo),e(G1,_xo),e(G1,WD),e(WD,uxo),e(G1,bxo),e(N,vxo),e(N,O1),e(O1,ffe),e(ffe,Fxo),e(O1,Txo),e(O1,QD),e(QD,Mxo),e(O1,Exo),e(N,Cxo),e(N,V1),e(V1,mfe),e(mfe,wxo),e(V1,Axo),e(V1,HD),e(HD,yxo),e(V1,Lxo),e(N,xxo),e(N,X1),e(X1,gfe),e(gfe,$xo),e(X1,kxo),e(X1,UD),e(UD,Sxo),e(X1,Rxo),e(N,Pxo),e(N,z1),e(z1,hfe),e(hfe,Bxo),e(z1,Ixo),e(z1,JD),e(JD,qxo),e(z1,Nxo),e(N,jxo),e(N,W1),e(W1,pfe),e(pfe,Dxo),e(W1,Gxo),e(W1,YD),e(YD,Oxo),e(W1,Vxo),e(N,Xxo),e(N,Q1),e(Q1,_fe),e(_fe,zxo),e(Q1,Wxo),e(Q1,KD),e(KD,Qxo),e(Q1,Hxo),e(N,Uxo),e(N,H1),e(H1,ufe),e(ufe,Jxo),e(H1,Yxo),e(H1,ZD),e(ZD,Kxo),e(H1,Zxo),e(N,e$o),e(N,U1),e(U1,bfe),e(bfe,o$o),e(U1,r$o),e(U1,eG),e(eG,t$o),e(U1,a$o),e(N,n$o),e(N,J1),e(J1,vfe),e(vfe,s$o),e(J1,l$o),e(J1,oG),e(oG,i$o),e(J1,d$o),e(N,c$o),e(N,Y1),e(Y1,Ffe),e(Ffe,f$o),e(Y1,m$o),e(Y1,rG),e(rG,g$o),e(Y1,h$o),e(N,p$o),e(N,K1),e(K1,Tfe),e(Tfe,_$o),e(K1,u$o),e(K1,tG),e(tG,b$o),e(K1,v$o),e(N,F$o),e(N,Z1),e(Z1,Mfe),e(Mfe,T$o),e(Z1,M$o),e(Z1,aG),e(aG,E$o),e(Z1,C$o),e(N,w$o),e(N,e7),e(e7,Efe),e(Efe,A$o),e(e7,y$o),e(e7,nG),e(nG,L$o),e(e7,x$o),e(N,$$o),e(N,o7),e(o7,Cfe),e(Cfe,k$o),e(o7,S$o),e(o7,sG),e(sG,R$o),e(o7,P$o),e(N,B$o),e(N,r7),e(r7,wfe),e(wfe,I$o),e(r7,q$o),e(r7,lG),e(lG,N$o),e(r7,j$o),e(N,D$o),e(N,t7),e(t7,Afe),e(Afe,G$o),e(t7,O$o),e(t7,iG),e(iG,V$o),e(t7,X$o),e(N,z$o),e(N,a7),e(a7,yfe),e(yfe,W$o),e(a7,Q$o),e(a7,dG),e(dG,H$o),e(a7,U$o),e(N,J$o),e(N,n7),e(n7,Lfe),e(Lfe,Y$o),e(n7,K$o),e(n7,cG),e(cG,Z$o),e(n7,eko),e(N,oko),e(N,s7),e(s7,xfe),e(xfe,rko),e(s7,tko),e(s7,fG),e(fG,ako),e(s7,nko),e(N,sko),e(N,l7),e(l7,$fe),e($fe,lko),e(l7,iko),e(l7,mG),e(mG,dko),e(l7,cko),e(N,fko),e(N,i7),e(i7,kfe),e(kfe,mko),e(i7,gko),e(i7,gG),e(gG,hko),e(i7,pko),e(N,_ko),e(N,d7),e(d7,Sfe),e(Sfe,uko),e(d7,bko),e(d7,hG),e(hG,vko),e(d7,Fko),e(N,Tko),e(N,c7),e(c7,Rfe),e(Rfe,Mko),e(c7,Eko),e(c7,pG),e(pG,Cko),e(c7,wko),e(N,Ako),e(N,f7),e(f7,Pfe),e(Pfe,yko),e(f7,Lko),e(f7,_G),e(_G,xko),e(f7,$ko),e(N,kko),e(N,m7),e(m7,Bfe),e(Bfe,Sko),e(m7,Rko),e(m7,uG),e(uG,Pko),e(m7,Bko),e(N,Iko),e(N,g7),e(g7,Ife),e(Ife,qko),e(g7,Nko),e(g7,bG),e(bG,jko),e(g7,Dko),e(N,Gko),e(N,h7),e(h7,qfe),e(qfe,Oko),e(h7,Vko),e(h7,vG),e(vG,Xko),e(h7,zko),e(N,Wko),e(N,p7),e(p7,Nfe),e(Nfe,Qko),e(p7,Hko),e(p7,FG),e(FG,Uko),e(p7,Jko),e(N,Yko),e(N,_7),e(_7,jfe),e(jfe,Kko),e(_7,Zko),e(_7,TG),e(TG,eSo),e(_7,oSo),e(N,rSo),e(N,u7),e(u7,Dfe),e(Dfe,tSo),e(u7,aSo),e(u7,MG),e(MG,nSo),e(u7,sSo),e(N,lSo),e(N,b7),e(b7,Gfe),e(Gfe,iSo),e(b7,dSo),e(b7,EG),e(EG,cSo),e(b7,fSo),e(N,mSo),e(N,v7),e(v7,Ofe),e(Ofe,gSo),e(v7,hSo),e(v7,CG),e(CG,pSo),e(v7,_So),e(N,uSo),e(N,F7),e(F7,Vfe),e(Vfe,bSo),e(F7,vSo),e(F7,wG),e(wG,FSo),e(F7,TSo),e(N,MSo),e(N,T7),e(T7,Xfe),e(Xfe,ESo),e(T7,CSo),e(T7,AG),e(AG,wSo),e(T7,ASo),e(oo,ySo),e(oo,M7),e(M7,LSo),e(M7,zfe),e(zfe,xSo),e(M7,$So),e(M7,Wfe),e(Wfe,kSo),e(oo,SSo),M(E7,oo,null),b(f,Cqe,u),b(f,Oi,u),e(Oi,C7),e(C7,Qfe),M(_y,Qfe,null),e(Oi,RSo),e(Oi,Hfe),e(Hfe,PSo),b(f,wqe,u),b(f,Po,u),M(uy,Po,null),e(Po,BSo),e(Po,Vi),e(Vi,ISo),e(Vi,yG),e(yG,qSo),e(Vi,NSo),e(Vi,LG),e(LG,jSo),e(Vi,DSo),e(Po,GSo),e(Po,by),e(by,OSo),e(by,Ufe),e(Ufe,VSo),e(by,XSo),e(Po,zSo),e(Po,dt),M(vy,dt,null),e(dt,WSo),e(dt,Jfe),e(Jfe,QSo),e(dt,HSo),e(dt,Xi),e(Xi,USo),e(Xi,Yfe),e(Yfe,JSo),e(Xi,YSo),e(Xi,xG),e(xG,KSo),e(Xi,ZSo),e(dt,eRo),M(w7,dt,null),e(Po,oRo),e(Po,ro),M(Fy,ro,null),e(ro,rRo),e(ro,Kfe),e(Kfe,tRo),e(ro,aRo),e(ro,Pa),e(Pa,nRo),e(Pa,Zfe),e(Zfe,sRo),e(Pa,lRo),e(Pa,eme),e(eme,iRo),e(Pa,dRo),e(Pa,ome),e(ome,cRo),e(Pa,fRo),e(ro,mRo),e(ro,Y),e(Y,A7),e(A7,rme),e(rme,gRo),e(A7,hRo),e(A7,$G),e($G,pRo),e(A7,_Ro),e(Y,uRo),e(Y,y7),e(y7,tme),e(tme,bRo),e(y7,vRo),e(y7,kG),e(kG,FRo),e(y7,TRo),e(Y,MRo),e(Y,L7),e(L7,ame),e(ame,ERo),e(L7,CRo),e(L7,SG),e(SG,wRo),e(L7,ARo),e(Y,yRo),e(Y,x7),e(x7,nme),e(nme,LRo),e(x7,xRo),e(x7,RG),e(RG,$Ro),e(x7,kRo),e(Y,SRo),e(Y,$7),e($7,sme),e(sme,RRo),e($7,PRo),e($7,PG),e(PG,BRo),e($7,IRo),e(Y,qRo),e(Y,k7),e(k7,lme),e(lme,NRo),e(k7,jRo),e(k7,BG),e(BG,DRo),e(k7,GRo),e(Y,ORo),e(Y,S7),e(S7,ime),e(ime,VRo),e(S7,XRo),e(S7,IG),e(IG,zRo),e(S7,WRo),e(Y,QRo),e(Y,R7),e(R7,dme),e(dme,HRo),e(R7,URo),e(R7,qG),e(qG,JRo),e(R7,YRo),e(Y,KRo),e(Y,P7),e(P7,cme),e(cme,ZRo),e(P7,ePo),e(P7,NG),e(NG,oPo),e(P7,rPo),e(Y,tPo),e(Y,B7),e(B7,fme),e(fme,aPo),e(B7,nPo),e(B7,jG),e(jG,sPo),e(B7,lPo),e(Y,iPo),e(Y,I7),e(I7,mme),e(mme,dPo),e(I7,cPo),e(I7,DG),e(DG,fPo),e(I7,mPo),e(Y,gPo),e(Y,q7),e(q7,gme),e(gme,hPo),e(q7,pPo),e(q7,GG),e(GG,_Po),e(q7,uPo),e(Y,bPo),e(Y,N7),e(N7,hme),e(hme,vPo),e(N7,FPo),e(N7,OG),e(OG,TPo),e(N7,MPo),e(Y,EPo),e(Y,j7),e(j7,pme),e(pme,CPo),e(j7,wPo),e(j7,VG),e(VG,APo),e(j7,yPo),e(Y,LPo),e(Y,D7),e(D7,_me),e(_me,xPo),e(D7,$Po),e(D7,XG),e(XG,kPo),e(D7,SPo),e(Y,RPo),e(Y,G7),e(G7,ume),e(ume,PPo),e(G7,BPo),e(G7,zG),e(zG,IPo),e(G7,qPo),e(Y,NPo),e(Y,O7),e(O7,bme),e(bme,jPo),e(O7,DPo),e(O7,WG),e(WG,GPo),e(O7,OPo),e(Y,VPo),e(Y,V7),e(V7,vme),e(vme,XPo),e(V7,zPo),e(V7,QG),e(QG,WPo),e(V7,QPo),e(Y,HPo),e(Y,X7),e(X7,Fme),e(Fme,UPo),e(X7,JPo),e(X7,HG),e(HG,YPo),e(X7,KPo),e(Y,ZPo),e(Y,z7),e(z7,Tme),e(Tme,eBo),e(z7,oBo),e(z7,UG),e(UG,rBo),e(z7,tBo),e(Y,aBo),e(Y,W7),e(W7,Mme),e(Mme,nBo),e(W7,sBo),e(W7,JG),e(JG,lBo),e(W7,iBo),e(Y,dBo),e(Y,Q7),e(Q7,Eme),e(Eme,cBo),e(Q7,fBo),e(Q7,YG),e(YG,mBo),e(Q7,gBo),e(Y,hBo),e(Y,H7),e(H7,Cme),e(Cme,pBo),e(H7,_Bo),e(H7,KG),e(KG,uBo),e(H7,bBo),e(Y,vBo),e(Y,U7),e(U7,wme),e(wme,FBo),e(U7,TBo),e(U7,ZG),e(ZG,MBo),e(U7,EBo),e(Y,CBo),e(Y,J7),e(J7,Ame),e(Ame,wBo),e(J7,ABo),e(J7,eO),e(eO,yBo),e(J7,LBo),e(Y,xBo),e(Y,Y7),e(Y7,yme),e(yme,$Bo),e(Y7,kBo),e(Y7,oO),e(oO,SBo),e(Y7,RBo),e(Y,PBo),e(Y,K7),e(K7,Lme),e(Lme,BBo),e(K7,IBo),e(K7,rO),e(rO,qBo),e(K7,NBo),e(Y,jBo),e(Y,Z7),e(Z7,xme),e(xme,DBo),e(Z7,GBo),e(Z7,tO),e(tO,OBo),e(Z7,VBo),e(Y,XBo),e(Y,eb),e(eb,$me),e($me,zBo),e(eb,WBo),e(eb,aO),e(aO,QBo),e(eb,HBo),e(ro,UBo),e(ro,ob),e(ob,JBo),e(ob,kme),e(kme,YBo),e(ob,KBo),e(ob,Sme),e(Sme,ZBo),e(ro,eIo),M(rb,ro,null),b(f,Aqe,u),b(f,zi,u),e(zi,tb),e(tb,Rme),M(Ty,Rme,null),e(zi,oIo),e(zi,Pme),e(Pme,rIo),b(f,yqe,u),b(f,Bo,u),M(My,Bo,null),e(Bo,tIo),e(Bo,Wi),e(Wi,aIo),e(Wi,nO),e(nO,nIo),e(Wi,sIo),e(Wi,sO),e(sO,lIo),e(Wi,iIo),e(Bo,dIo),e(Bo,Ey),e(Ey,cIo),e(Ey,Bme),e(Bme,fIo),e(Ey,mIo),e(Bo,gIo),e(Bo,ct),M(Cy,ct,null),e(ct,hIo),e(ct,Ime),e(Ime,pIo),e(ct,_Io),e(ct,Qi),e(Qi,uIo),e(Qi,qme),e(qme,bIo),e(Qi,vIo),e(Qi,lO),e(lO,FIo),e(Qi,TIo),e(ct,MIo),M(ab,ct,null),e(Bo,EIo),e(Bo,to),M(wy,to,null),e(to,CIo),e(to,Nme),e(Nme,wIo),e(to,AIo),e(to,Ba),e(Ba,yIo),e(Ba,jme),e(jme,LIo),e(Ba,xIo),e(Ba,Dme),e(Dme,$Io),e(Ba,kIo),e(Ba,Gme),e(Gme,SIo),e(Ba,RIo),e(to,PIo),e(to,Yr),e(Yr,nb),e(nb,Ome),e(Ome,BIo),e(nb,IIo),e(nb,iO),e(iO,qIo),e(nb,NIo),e(Yr,jIo),e(Yr,sb),e(sb,Vme),e(Vme,DIo),e(sb,GIo),e(sb,dO),e(dO,OIo),e(sb,VIo),e(Yr,XIo),e(Yr,lb),e(lb,Xme),e(Xme,zIo),e(lb,WIo),e(lb,cO),e(cO,QIo),e(lb,HIo),e(Yr,UIo),e(Yr,ib),e(ib,zme),e(zme,JIo),e(ib,YIo),e(ib,fO),e(fO,KIo),e(ib,ZIo),e(Yr,eqo),e(Yr,db),e(db,Wme),e(Wme,oqo),e(db,rqo),e(db,mO),e(mO,tqo),e(db,aqo),e(to,nqo),e(to,cb),e(cb,sqo),e(cb,Qme),e(Qme,lqo),e(cb,iqo),e(cb,Hme),e(Hme,dqo),e(to,cqo),M(fb,to,null),b(f,Lqe,u),b(f,Hi,u),e(Hi,mb),e(mb,Ume),M(Ay,Ume,null),e(Hi,fqo),e(Hi,Jme),e(Jme,mqo),b(f,xqe,u),b(f,Io,u),M(yy,Io,null),e(Io,gqo),e(Io,Ui),e(Ui,hqo),e(Ui,gO),e(gO,pqo),e(Ui,_qo),e(Ui,hO),e(hO,uqo),e(Ui,bqo),e(Io,vqo),e(Io,Ly),e(Ly,Fqo),e(Ly,Yme),e(Yme,Tqo),e(Ly,Mqo),e(Io,Eqo),e(Io,ft),M(xy,ft,null),e(ft,Cqo),e(ft,Kme),e(Kme,wqo),e(ft,Aqo),e(ft,Ji),e(Ji,yqo),e(Ji,Zme),e(Zme,Lqo),e(Ji,xqo),e(Ji,pO),e(pO,$qo),e(Ji,kqo),e(ft,Sqo),M(gb,ft,null),e(Io,Rqo),e(Io,ao),M($y,ao,null),e(ao,Pqo),e(ao,ege),e(ege,Bqo),e(ao,Iqo),e(ao,Ia),e(Ia,qqo),e(Ia,oge),e(oge,Nqo),e(Ia,jqo),e(Ia,rge),e(rge,Dqo),e(Ia,Gqo),e(Ia,tge),e(tge,Oqo),e(Ia,Vqo),e(ao,Xqo),e(ao,U),e(U,hb),e(hb,age),e(age,zqo),e(hb,Wqo),e(hb,_O),e(_O,Qqo),e(hb,Hqo),e(U,Uqo),e(U,pb),e(pb,nge),e(nge,Jqo),e(pb,Yqo),e(pb,uO),e(uO,Kqo),e(pb,Zqo),e(U,eNo),e(U,_b),e(_b,sge),e(sge,oNo),e(_b,rNo),e(_b,bO),e(bO,tNo),e(_b,aNo),e(U,nNo),e(U,ub),e(ub,lge),e(lge,sNo),e(ub,lNo),e(ub,vO),e(vO,iNo),e(ub,dNo),e(U,cNo),e(U,bb),e(bb,ige),e(ige,fNo),e(bb,mNo),e(bb,FO),e(FO,gNo),e(bb,hNo),e(U,pNo),e(U,vb),e(vb,dge),e(dge,_No),e(vb,uNo),e(vb,TO),e(TO,bNo),e(vb,vNo),e(U,FNo),e(U,Fb),e(Fb,cge),e(cge,TNo),e(Fb,MNo),e(Fb,MO),e(MO,ENo),e(Fb,CNo),e(U,wNo),e(U,Tb),e(Tb,fge),e(fge,ANo),e(Tb,yNo),e(Tb,EO),e(EO,LNo),e(Tb,xNo),e(U,$No),e(U,Mb),e(Mb,mge),e(mge,kNo),e(Mb,SNo),e(Mb,CO),e(CO,RNo),e(Mb,PNo),e(U,BNo),e(U,Eb),e(Eb,gge),e(gge,INo),e(Eb,qNo),e(Eb,wO),e(wO,NNo),e(Eb,jNo),e(U,DNo),e(U,Cb),e(Cb,hge),e(hge,GNo),e(Cb,ONo),e(Cb,AO),e(AO,VNo),e(Cb,XNo),e(U,zNo),e(U,wb),e(wb,pge),e(pge,WNo),e(wb,QNo),e(wb,yO),e(yO,HNo),e(wb,UNo),e(U,JNo),e(U,Ab),e(Ab,_ge),e(_ge,YNo),e(Ab,KNo),e(Ab,LO),e(LO,ZNo),e(Ab,ejo),e(U,ojo),e(U,yb),e(yb,uge),e(uge,rjo),e(yb,tjo),e(yb,xO),e(xO,ajo),e(yb,njo),e(U,sjo),e(U,Lb),e(Lb,bge),e(bge,ljo),e(Lb,ijo),e(Lb,$O),e($O,djo),e(Lb,cjo),e(U,fjo),e(U,xb),e(xb,vge),e(vge,mjo),e(xb,gjo),e(xb,kO),e(kO,hjo),e(xb,pjo),e(U,_jo),e(U,$b),e($b,Fge),e(Fge,ujo),e($b,bjo),e($b,SO),e(SO,vjo),e($b,Fjo),e(U,Tjo),e(U,kb),e(kb,Tge),e(Tge,Mjo),e(kb,Ejo),e(kb,RO),e(RO,Cjo),e(kb,wjo),e(U,Ajo),e(U,Sb),e(Sb,Mge),e(Mge,yjo),e(Sb,Ljo),e(Sb,PO),e(PO,xjo),e(Sb,$jo),e(U,kjo),e(U,Rb),e(Rb,Ege),e(Ege,Sjo),e(Rb,Rjo),e(Rb,BO),e(BO,Pjo),e(Rb,Bjo),e(U,Ijo),e(U,Pb),e(Pb,Cge),e(Cge,qjo),e(Pb,Njo),e(Pb,IO),e(IO,jjo),e(Pb,Djo),e(U,Gjo),e(U,Bb),e(Bb,wge),e(wge,Ojo),e(Bb,Vjo),e(Bb,qO),e(qO,Xjo),e(Bb,zjo),e(U,Wjo),e(U,Ib),e(Ib,Age),e(Age,Qjo),e(Ib,Hjo),e(Ib,NO),e(NO,Ujo),e(Ib,Jjo),e(U,Yjo),e(U,qb),e(qb,yge),e(yge,Kjo),e(qb,Zjo),e(qb,jO),e(jO,eDo),e(qb,oDo),e(U,rDo),e(U,Nb),e(Nb,Lge),e(Lge,tDo),e(Nb,aDo),e(Nb,DO),e(DO,nDo),e(Nb,sDo),e(U,lDo),e(U,jb),e(jb,xge),e(xge,iDo),e(jb,dDo),e(jb,GO),e(GO,cDo),e(jb,fDo),e(U,mDo),e(U,Db),e(Db,$ge),e($ge,gDo),e(Db,hDo),e(Db,OO),e(OO,pDo),e(Db,_Do),e(U,uDo),e(U,Gb),e(Gb,kge),e(kge,bDo),e(Gb,vDo),e(Gb,VO),e(VO,FDo),e(Gb,TDo),e(U,MDo),e(U,Ob),e(Ob,Sge),e(Sge,EDo),e(Ob,CDo),e(Ob,XO),e(XO,wDo),e(Ob,ADo),e(U,yDo),e(U,Vb),e(Vb,Rge),e(Rge,LDo),e(Vb,xDo),e(Vb,zO),e(zO,$Do),e(Vb,kDo),e(U,SDo),e(U,Xb),e(Xb,Pge),e(Pge,RDo),e(Xb,PDo),e(Xb,WO),e(WO,BDo),e(Xb,IDo),e(U,qDo),e(U,zb),e(zb,Bge),e(Bge,NDo),e(zb,jDo),e(zb,QO),e(QO,DDo),e(zb,GDo),e(U,ODo),e(U,Wb),e(Wb,Ige),e(Ige,VDo),e(Wb,XDo),e(Wb,HO),e(HO,zDo),e(Wb,WDo),e(ao,QDo),e(ao,Qb),e(Qb,HDo),e(Qb,qge),e(qge,UDo),e(Qb,JDo),e(Qb,Nge),e(Nge,YDo),e(ao,KDo),M(Hb,ao,null),b(f,$qe,u),b(f,Yi,u),e(Yi,Ub),e(Ub,jge),M(ky,jge,null),e(Yi,ZDo),e(Yi,Dge),e(Dge,eGo),b(f,kqe,u),b(f,qo,u),M(Sy,qo,null),e(qo,oGo),e(qo,Ki),e(Ki,rGo),e(Ki,UO),e(UO,tGo),e(Ki,aGo),e(Ki,JO),e(JO,nGo),e(Ki,sGo),e(qo,lGo),e(qo,Ry),e(Ry,iGo),e(Ry,Gge),e(Gge,dGo),e(Ry,cGo),e(qo,fGo),e(qo,mt),M(Py,mt,null),e(mt,mGo),e(mt,Oge),e(Oge,gGo),e(mt,hGo),e(mt,Zi),e(Zi,pGo),e(Zi,Vge),e(Vge,_Go),e(Zi,uGo),e(Zi,YO),e(YO,bGo),e(Zi,vGo),e(mt,FGo),M(Jb,mt,null),e(qo,TGo),e(qo,no),M(By,no,null),e(no,MGo),e(no,Xge),e(Xge,EGo),e(no,CGo),e(no,qa),e(qa,wGo),e(qa,zge),e(zge,AGo),e(qa,yGo),e(qa,Wge),e(Wge,LGo),e(qa,xGo),e(qa,Qge),e(Qge,$Go),e(qa,kGo),e(no,SGo),e(no,V),e(V,Yb),e(Yb,Hge),e(Hge,RGo),e(Yb,PGo),e(Yb,KO),e(KO,BGo),e(Yb,IGo),e(V,qGo),e(V,Kb),e(Kb,Uge),e(Uge,NGo),e(Kb,jGo),e(Kb,ZO),e(ZO,DGo),e(Kb,GGo),e(V,OGo),e(V,Zb),e(Zb,Jge),e(Jge,VGo),e(Zb,XGo),e(Zb,eV),e(eV,zGo),e(Zb,WGo),e(V,QGo),e(V,ev),e(ev,Yge),e(Yge,HGo),e(ev,UGo),e(ev,oV),e(oV,JGo),e(ev,YGo),e(V,KGo),e(V,ov),e(ov,Kge),e(Kge,ZGo),e(ov,eOo),e(ov,rV),e(rV,oOo),e(ov,rOo),e(V,tOo),e(V,rv),e(rv,Zge),e(Zge,aOo),e(rv,nOo),e(rv,tV),e(tV,sOo),e(rv,lOo),e(V,iOo),e(V,tv),e(tv,ehe),e(ehe,dOo),e(tv,cOo),e(tv,aV),e(aV,fOo),e(tv,mOo),e(V,gOo),e(V,av),e(av,ohe),e(ohe,hOo),e(av,pOo),e(av,nV),e(nV,_Oo),e(av,uOo),e(V,bOo),e(V,nv),e(nv,rhe),e(rhe,vOo),e(nv,FOo),e(nv,sV),e(sV,TOo),e(nv,MOo),e(V,EOo),e(V,sv),e(sv,the),e(the,COo),e(sv,wOo),e(sv,lV),e(lV,AOo),e(sv,yOo),e(V,LOo),e(V,lv),e(lv,ahe),e(ahe,xOo),e(lv,$Oo),e(lv,iV),e(iV,kOo),e(lv,SOo),e(V,ROo),e(V,iv),e(iv,nhe),e(nhe,POo),e(iv,BOo),e(iv,dV),e(dV,IOo),e(iv,qOo),e(V,NOo),e(V,dv),e(dv,she),e(she,jOo),e(dv,DOo),e(dv,cV),e(cV,GOo),e(dv,OOo),e(V,VOo),e(V,cv),e(cv,lhe),e(lhe,XOo),e(cv,zOo),e(cv,fV),e(fV,WOo),e(cv,QOo),e(V,HOo),e(V,fv),e(fv,ihe),e(ihe,UOo),e(fv,JOo),e(fv,mV),e(mV,YOo),e(fv,KOo),e(V,ZOo),e(V,mv),e(mv,dhe),e(dhe,eVo),e(mv,oVo),e(mv,gV),e(gV,rVo),e(mv,tVo),e(V,aVo),e(V,gv),e(gv,che),e(che,nVo),e(gv,sVo),e(gv,hV),e(hV,lVo),e(gv,iVo),e(V,dVo),e(V,hv),e(hv,fhe),e(fhe,cVo),e(hv,fVo),e(hv,pV),e(pV,mVo),e(hv,gVo),e(V,hVo),e(V,pv),e(pv,mhe),e(mhe,pVo),e(pv,_Vo),e(pv,_V),e(_V,uVo),e(pv,bVo),e(V,vVo),e(V,_v),e(_v,ghe),e(ghe,FVo),e(_v,TVo),e(_v,uV),e(uV,MVo),e(_v,EVo),e(V,CVo),e(V,uv),e(uv,hhe),e(hhe,wVo),e(uv,AVo),e(uv,bV),e(bV,yVo),e(uv,LVo),e(V,xVo),e(V,bv),e(bv,phe),e(phe,$Vo),e(bv,kVo),e(bv,vV),e(vV,SVo),e(bv,RVo),e(V,PVo),e(V,vv),e(vv,_he),e(_he,BVo),e(vv,IVo),e(vv,FV),e(FV,qVo),e(vv,NVo),e(V,jVo),e(V,Fv),e(Fv,uhe),e(uhe,DVo),e(Fv,GVo),e(Fv,TV),e(TV,OVo),e(Fv,VVo),e(V,XVo),e(V,Tv),e(Tv,bhe),e(bhe,zVo),e(Tv,WVo),e(Tv,MV),e(MV,QVo),e(Tv,HVo),e(V,UVo),e(V,Mv),e(Mv,vhe),e(vhe,JVo),e(Mv,YVo),e(Mv,EV),e(EV,KVo),e(Mv,ZVo),e(V,eXo),e(V,Ev),e(Ev,Fhe),e(Fhe,oXo),e(Ev,rXo),e(Ev,CV),e(CV,tXo),e(Ev,aXo),e(V,nXo),e(V,Cv),e(Cv,The),e(The,sXo),e(Cv,lXo),e(Cv,wV),e(wV,iXo),e(Cv,dXo),e(V,cXo),e(V,wv),e(wv,Mhe),e(Mhe,fXo),e(wv,mXo),e(wv,AV),e(AV,gXo),e(wv,hXo),e(V,pXo),e(V,Av),e(Av,Ehe),e(Ehe,_Xo),e(Av,uXo),e(Av,yV),e(yV,bXo),e(Av,vXo),e(V,FXo),e(V,yv),e(yv,Che),e(Che,TXo),e(yv,MXo),e(yv,LV),e(LV,EXo),e(yv,CXo),e(V,wXo),e(V,Lv),e(Lv,whe),e(whe,AXo),e(Lv,yXo),e(Lv,xV),e(xV,LXo),e(Lv,xXo),e(V,$Xo),e(V,xv),e(xv,Ahe),e(Ahe,kXo),e(xv,SXo),e(xv,$V),e($V,RXo),e(xv,PXo),e(V,BXo),e(V,$v),e($v,yhe),e(yhe,IXo),e($v,qXo),e($v,kV),e(kV,NXo),e($v,jXo),e(V,DXo),e(V,kv),e(kv,Lhe),e(Lhe,GXo),e(kv,OXo),e(kv,SV),e(SV,VXo),e(kv,XXo),e(V,zXo),e(V,Sv),e(Sv,xhe),e(xhe,WXo),e(Sv,QXo),e(Sv,RV),e(RV,HXo),e(Sv,UXo),e(V,JXo),e(V,Rv),e(Rv,$he),e($he,YXo),e(Rv,KXo),e(Rv,PV),e(PV,ZXo),e(Rv,ezo),e(V,ozo),e(V,Pv),e(Pv,khe),e(khe,rzo),e(Pv,tzo),e(Pv,BV),e(BV,azo),e(Pv,nzo),e(V,szo),e(V,Bv),e(Bv,She),e(She,lzo),e(Bv,izo),e(Bv,IV),e(IV,dzo),e(Bv,czo),e(no,fzo),e(no,Iv),e(Iv,mzo),e(Iv,Rhe),e(Rhe,gzo),e(Iv,hzo),e(Iv,Phe),e(Phe,pzo),e(no,_zo),M(qv,no,null),b(f,Sqe,u),b(f,ed,u),e(ed,Nv),e(Nv,Bhe),M(Iy,Bhe,null),e(ed,uzo),e(ed,Ihe),e(Ihe,bzo),b(f,Rqe,u),b(f,No,u),M(qy,No,null),e(No,vzo),e(No,od),e(od,Fzo),e(od,qV),e(qV,Tzo),e(od,Mzo),e(od,NV),e(NV,Ezo),e(od,Czo),e(No,wzo),e(No,Ny),e(Ny,Azo),e(Ny,qhe),e(qhe,yzo),e(Ny,Lzo),e(No,xzo),e(No,gt),M(jy,gt,null),e(gt,$zo),e(gt,Nhe),e(Nhe,kzo),e(gt,Szo),e(gt,rd),e(rd,Rzo),e(rd,jhe),e(jhe,Pzo),e(rd,Bzo),e(rd,jV),e(jV,Izo),e(rd,qzo),e(gt,Nzo),M(jv,gt,null),e(No,jzo),e(No,so),M(Dy,so,null),e(so,Dzo),e(so,Dhe),e(Dhe,Gzo),e(so,Ozo),e(so,Na),e(Na,Vzo),e(Na,Ghe),e(Ghe,Xzo),e(Na,zzo),e(Na,Ohe),e(Ohe,Wzo),e(Na,Qzo),e(Na,Vhe),e(Vhe,Hzo),e(Na,Uzo),e(so,Jzo),e(so,Xhe),e(Xhe,Dv),e(Dv,zhe),e(zhe,Yzo),e(Dv,Kzo),e(Dv,DV),e(DV,Zzo),e(Dv,eWo),e(so,oWo),e(so,Gv),e(Gv,rWo),e(Gv,Whe),e(Whe,tWo),e(Gv,aWo),e(Gv,Qhe),e(Qhe,nWo),e(so,sWo),M(Ov,so,null),b(f,Pqe,u),b(f,td,u),e(td,Vv),e(Vv,Hhe),M(Gy,Hhe,null),e(td,lWo),e(td,Uhe),e(Uhe,iWo),b(f,Bqe,u),b(f,jo,u),M(Oy,jo,null),e(jo,dWo),e(jo,ad),e(ad,cWo),e(ad,GV),e(GV,fWo),e(ad,mWo),e(ad,OV),e(OV,gWo),e(ad,hWo),e(jo,pWo),e(jo,Vy),e(Vy,_Wo),e(Vy,Jhe),e(Jhe,uWo),e(Vy,bWo),e(jo,vWo),e(jo,ht),M(Xy,ht,null),e(ht,FWo),e(ht,Yhe),e(Yhe,TWo),e(ht,MWo),e(ht,nd),e(nd,EWo),e(nd,Khe),e(Khe,CWo),e(nd,wWo),e(nd,VV),e(VV,AWo),e(nd,yWo),e(ht,LWo),M(Xv,ht,null),e(jo,xWo),e(jo,lo),M(zy,lo,null),e(lo,$Wo),e(lo,Zhe),e(Zhe,kWo),e(lo,SWo),e(lo,ja),e(ja,RWo),e(ja,epe),e(epe,PWo),e(ja,BWo),e(ja,ope),e(ope,IWo),e(ja,qWo),e(ja,rpe),e(rpe,NWo),e(ja,jWo),e(lo,DWo),e(lo,Fe),e(Fe,zv),e(zv,tpe),e(tpe,GWo),e(zv,OWo),e(zv,XV),e(XV,VWo),e(zv,XWo),e(Fe,zWo),e(Fe,Wv),e(Wv,ape),e(ape,WWo),e(Wv,QWo),e(Wv,zV),e(zV,HWo),e(Wv,UWo),e(Fe,JWo),e(Fe,Qv),e(Qv,npe),e(npe,YWo),e(Qv,KWo),e(Qv,WV),e(WV,ZWo),e(Qv,eQo),e(Fe,oQo),e(Fe,Ps),e(Ps,spe),e(spe,rQo),e(Ps,tQo),e(Ps,QV),e(QV,aQo),e(Ps,nQo),e(Ps,HV),e(HV,sQo),e(Ps,lQo),e(Fe,iQo),e(Fe,Hv),e(Hv,lpe),e(lpe,dQo),e(Hv,cQo),e(Hv,UV),e(UV,fQo),e(Hv,mQo),e(Fe,gQo),e(Fe,pt),e(pt,ipe),e(ipe,hQo),e(pt,pQo),e(pt,JV),e(JV,_Qo),e(pt,uQo),e(pt,YV),e(YV,bQo),e(pt,vQo),e(pt,KV),e(KV,FQo),e(pt,TQo),e(Fe,MQo),e(Fe,Uv),e(Uv,dpe),e(dpe,EQo),e(Uv,CQo),e(Uv,ZV),e(ZV,wQo),e(Uv,AQo),e(Fe,yQo),e(Fe,Jv),e(Jv,cpe),e(cpe,LQo),e(Jv,xQo),e(Jv,eX),e(eX,$Qo),e(Jv,kQo),e(Fe,SQo),e(Fe,Yv),e(Yv,fpe),e(fpe,RQo),e(Yv,PQo),e(Yv,oX),e(oX,BQo),e(Yv,IQo),e(Fe,qQo),e(Fe,Kv),e(Kv,mpe),e(mpe,NQo),e(Kv,jQo),e(Kv,rX),e(rX,DQo),e(Kv,GQo),e(Fe,OQo),e(Fe,Zv),e(Zv,gpe),e(gpe,VQo),e(Zv,XQo),e(Zv,tX),e(tX,zQo),e(Zv,WQo),e(Fe,QQo),e(Fe,eF),e(eF,hpe),e(hpe,HQo),e(eF,UQo),e(eF,aX),e(aX,JQo),e(eF,YQo),e(Fe,KQo),e(Fe,oF),e(oF,ppe),e(ppe,ZQo),e(oF,eHo),e(oF,nX),e(nX,oHo),e(oF,rHo),e(lo,tHo),e(lo,rF),e(rF,aHo),e(rF,_pe),e(_pe,nHo),e(rF,sHo),e(rF,upe),e(upe,lHo),e(lo,iHo),M(tF,lo,null),b(f,Iqe,u),b(f,sd,u),e(sd,aF),e(aF,bpe),M(Wy,bpe,null),e(sd,dHo),e(sd,vpe),e(vpe,cHo),b(f,qqe,u),b(f,Do,u),M(Qy,Do,null),e(Do,fHo),e(Do,ld),e(ld,mHo),e(ld,sX),e(sX,gHo),e(ld,hHo),e(ld,lX),e(lX,pHo),e(ld,_Ho),e(Do,uHo),e(Do,Hy),e(Hy,bHo),e(Hy,Fpe),e(Fpe,vHo),e(Hy,FHo),e(Do,THo),e(Do,_t),M(Uy,_t,null),e(_t,MHo),e(_t,Tpe),e(Tpe,EHo),e(_t,CHo),e(_t,id),e(id,wHo),e(id,Mpe),e(Mpe,AHo),e(id,yHo),e(id,iX),e(iX,LHo),e(id,xHo),e(_t,$Ho),M(nF,_t,null),e(Do,kHo),e(Do,io),M(Jy,io,null),e(io,SHo),e(io,Epe),e(Epe,RHo),e(io,PHo),e(io,Da),e(Da,BHo),e(Da,Cpe),e(Cpe,IHo),e(Da,qHo),e(Da,wpe),e(wpe,NHo),e(Da,jHo),e(Da,Ape),e(Ape,DHo),e(Da,GHo),e(io,OHo),e(io,ype),e(ype,sF),e(sF,Lpe),e(Lpe,VHo),e(sF,XHo),e(sF,dX),e(dX,zHo),e(sF,WHo),e(io,QHo),e(io,lF),e(lF,HHo),e(lF,xpe),e(xpe,UHo),e(lF,JHo),e(lF,$pe),e($pe,YHo),e(io,KHo),M(iF,io,null),b(f,Nqe,u),b(f,dd,u),e(dd,dF),e(dF,kpe),M(Yy,kpe,null),e(dd,ZHo),e(dd,Spe),e(Spe,eUo),b(f,jqe,u),b(f,Go,u),M(Ky,Go,null),e(Go,oUo),e(Go,cd),e(cd,rUo),e(cd,cX),e(cX,tUo),e(cd,aUo),e(cd,fX),e(fX,nUo),e(cd,sUo),e(Go,lUo),e(Go,Zy),e(Zy,iUo),e(Zy,Rpe),e(Rpe,dUo),e(Zy,cUo),e(Go,fUo),e(Go,ut),M(eL,ut,null),e(ut,mUo),e(ut,Ppe),e(Ppe,gUo),e(ut,hUo),e(ut,fd),e(fd,pUo),e(fd,Bpe),e(Bpe,_Uo),e(fd,uUo),e(fd,mX),e(mX,bUo),e(fd,vUo),e(ut,FUo),M(cF,ut,null),e(Go,TUo),e(Go,co),M(oL,co,null),e(co,MUo),e(co,Ipe),e(Ipe,EUo),e(co,CUo),e(co,Ga),e(Ga,wUo),e(Ga,qpe),e(qpe,AUo),e(Ga,yUo),e(Ga,Npe),e(Npe,LUo),e(Ga,xUo),e(Ga,jpe),e(jpe,$Uo),e(Ga,kUo),e(co,SUo),e(co,Se),e(Se,fF),e(fF,Dpe),e(Dpe,RUo),e(fF,PUo),e(fF,gX),e(gX,BUo),e(fF,IUo),e(Se,qUo),e(Se,mF),e(mF,Gpe),e(Gpe,NUo),e(mF,jUo),e(mF,hX),e(hX,DUo),e(mF,GUo),e(Se,OUo),e(Se,gF),e(gF,Ope),e(Ope,VUo),e(gF,XUo),e(gF,pX),e(pX,zUo),e(gF,WUo),e(Se,QUo),e(Se,hF),e(hF,Vpe),e(Vpe,HUo),e(hF,UUo),e(hF,_X),e(_X,JUo),e(hF,YUo),e(Se,KUo),e(Se,pF),e(pF,Xpe),e(Xpe,ZUo),e(pF,eJo),e(pF,uX),e(uX,oJo),e(pF,rJo),e(Se,tJo),e(Se,_F),e(_F,zpe),e(zpe,aJo),e(_F,nJo),e(_F,bX),e(bX,sJo),e(_F,lJo),e(Se,iJo),e(Se,uF),e(uF,Wpe),e(Wpe,dJo),e(uF,cJo),e(uF,vX),e(vX,fJo),e(uF,mJo),e(Se,gJo),e(Se,bF),e(bF,Qpe),e(Qpe,hJo),e(bF,pJo),e(bF,FX),e(FX,_Jo),e(bF,uJo),e(Se,bJo),e(Se,vF),e(vF,Hpe),e(Hpe,vJo),e(vF,FJo),e(vF,TX),e(TX,TJo),e(vF,MJo),e(co,EJo),e(co,FF),e(FF,CJo),e(FF,Upe),e(Upe,wJo),e(FF,AJo),e(FF,Jpe),e(Jpe,yJo),e(co,LJo),M(TF,co,null),b(f,Dqe,u),b(f,md,u),e(md,MF),e(MF,Ype),M(rL,Ype,null),e(md,xJo),e(md,Kpe),e(Kpe,$Jo),b(f,Gqe,u),b(f,Oo,u),M(tL,Oo,null),e(Oo,kJo),e(Oo,gd),e(gd,SJo),e(gd,MX),e(MX,RJo),e(gd,PJo),e(gd,EX),e(EX,BJo),e(gd,IJo),e(Oo,qJo),e(Oo,aL),e(aL,NJo),e(aL,Zpe),e(Zpe,jJo),e(aL,DJo),e(Oo,GJo),e(Oo,bt),M(nL,bt,null),e(bt,OJo),e(bt,e_e),e(e_e,VJo),e(bt,XJo),e(bt,hd),e(hd,zJo),e(hd,o_e),e(o_e,WJo),e(hd,QJo),e(hd,CX),e(CX,HJo),e(hd,UJo),e(bt,JJo),M(EF,bt,null),e(Oo,YJo),e(Oo,fo),M(sL,fo,null),e(fo,KJo),e(fo,r_e),e(r_e,ZJo),e(fo,eYo),e(fo,Oa),e(Oa,oYo),e(Oa,t_e),e(t_e,rYo),e(Oa,tYo),e(Oa,a_e),e(a_e,aYo),e(Oa,nYo),e(Oa,n_e),e(n_e,sYo),e(Oa,lYo),e(fo,iYo),e(fo,Kr),e(Kr,CF),e(CF,s_e),e(s_e,dYo),e(CF,cYo),e(CF,wX),e(wX,fYo),e(CF,mYo),e(Kr,gYo),e(Kr,wF),e(wF,l_e),e(l_e,hYo),e(wF,pYo),e(wF,AX),e(AX,_Yo),e(wF,uYo),e(Kr,bYo),e(Kr,AF),e(AF,i_e),e(i_e,vYo),e(AF,FYo),e(AF,yX),e(yX,TYo),e(AF,MYo),e(Kr,EYo),e(Kr,yF),e(yF,d_e),e(d_e,CYo),e(yF,wYo),e(yF,LX),e(LX,AYo),e(yF,yYo),e(Kr,LYo),e(Kr,LF),e(LF,c_e),e(c_e,xYo),e(LF,$Yo),e(LF,xX),e(xX,kYo),e(LF,SYo),e(fo,RYo),e(fo,xF),e(xF,PYo),e(xF,f_e),e(f_e,BYo),e(xF,IYo),e(xF,m_e),e(m_e,qYo),e(fo,NYo),M($F,fo,null),b(f,Oqe,u),b(f,pd,u),e(pd,kF),e(kF,g_e),M(lL,g_e,null),e(pd,jYo),e(pd,h_e),e(h_e,DYo),b(f,Vqe,u),b(f,Vo,u),M(iL,Vo,null),e(Vo,GYo),e(Vo,_d),e(_d,OYo),e(_d,$X),e($X,VYo),e(_d,XYo),e(_d,kX),e(kX,zYo),e(_d,WYo),e(Vo,QYo),e(Vo,dL),e(dL,HYo),e(dL,p_e),e(p_e,UYo),e(dL,JYo),e(Vo,YYo),e(Vo,vt),M(cL,vt,null),e(vt,KYo),e(vt,__e),e(__e,ZYo),e(vt,eKo),e(vt,ud),e(ud,oKo),e(ud,u_e),e(u_e,rKo),e(ud,tKo),e(ud,SX),e(SX,aKo),e(ud,nKo),e(vt,sKo),M(SF,vt,null),e(Vo,lKo),e(Vo,mo),M(fL,mo,null),e(mo,iKo),e(mo,b_e),e(b_e,dKo),e(mo,cKo),e(mo,Va),e(Va,fKo),e(Va,v_e),e(v_e,mKo),e(Va,gKo),e(Va,F_e),e(F_e,hKo),e(Va,pKo),e(Va,T_e),e(T_e,_Ko),e(Va,uKo),e(mo,bKo),e(mo,Re),e(Re,RF),e(RF,M_e),e(M_e,vKo),e(RF,FKo),e(RF,RX),e(RX,TKo),e(RF,MKo),e(Re,EKo),e(Re,PF),e(PF,E_e),e(E_e,CKo),e(PF,wKo),e(PF,PX),e(PX,AKo),e(PF,yKo),e(Re,LKo),e(Re,BF),e(BF,C_e),e(C_e,xKo),e(BF,$Ko),e(BF,BX),e(BX,kKo),e(BF,SKo),e(Re,RKo),e(Re,IF),e(IF,w_e),e(w_e,PKo),e(IF,BKo),e(IF,IX),e(IX,IKo),e(IF,qKo),e(Re,NKo),e(Re,qF),e(qF,A_e),e(A_e,jKo),e(qF,DKo),e(qF,qX),e(qX,GKo),e(qF,OKo),e(Re,VKo),e(Re,NF),e(NF,y_e),e(y_e,XKo),e(NF,zKo),e(NF,NX),e(NX,WKo),e(NF,QKo),e(Re,HKo),e(Re,jF),e(jF,L_e),e(L_e,UKo),e(jF,JKo),e(jF,jX),e(jX,YKo),e(jF,KKo),e(Re,ZKo),e(Re,DF),e(DF,x_e),e(x_e,eZo),e(DF,oZo),e(DF,DX),e(DX,rZo),e(DF,tZo),e(Re,aZo),e(Re,GF),e(GF,$_e),e($_e,nZo),e(GF,sZo),e(GF,GX),e(GX,lZo),e(GF,iZo),e(mo,dZo),e(mo,OF),e(OF,cZo),e(OF,k_e),e(k_e,fZo),e(OF,mZo),e(OF,S_e),e(S_e,gZo),e(mo,hZo),M(VF,mo,null),b(f,Xqe,u),b(f,bd,u),e(bd,XF),e(XF,R_e),M(mL,R_e,null),e(bd,pZo),e(bd,P_e),e(P_e,_Zo),b(f,zqe,u),b(f,Xo,u),M(gL,Xo,null),e(Xo,uZo),e(Xo,vd),e(vd,bZo),e(vd,OX),e(OX,vZo),e(vd,FZo),e(vd,VX),e(VX,TZo),e(vd,MZo),e(Xo,EZo),e(Xo,hL),e(hL,CZo),e(hL,B_e),e(B_e,wZo),e(hL,AZo),e(Xo,yZo),e(Xo,Ft),M(pL,Ft,null),e(Ft,LZo),e(Ft,I_e),e(I_e,xZo),e(Ft,$Zo),e(Ft,Fd),e(Fd,kZo),e(Fd,q_e),e(q_e,SZo),e(Fd,RZo),e(Fd,XX),e(XX,PZo),e(Fd,BZo),e(Ft,IZo),M(zF,Ft,null),e(Xo,qZo),e(Xo,go),M(_L,go,null),e(go,NZo),e(go,N_e),e(N_e,jZo),e(go,DZo),e(go,Xa),e(Xa,GZo),e(Xa,j_e),e(j_e,OZo),e(Xa,VZo),e(Xa,D_e),e(D_e,XZo),e(Xa,zZo),e(Xa,G_e),e(G_e,WZo),e(Xa,QZo),e(go,HZo),e(go,uL),e(uL,WF),e(WF,O_e),e(O_e,UZo),e(WF,JZo),e(WF,zX),e(zX,YZo),e(WF,KZo),e(uL,ZZo),e(uL,QF),e(QF,V_e),e(V_e,eer),e(QF,oer),e(QF,WX),e(WX,rer),e(QF,ter),e(go,aer),e(go,HF),e(HF,ner),e(HF,X_e),e(X_e,ser),e(HF,ler),e(HF,z_e),e(z_e,ier),e(go,der),M(UF,go,null),b(f,Wqe,u),b(f,Td,u),e(Td,JF),e(JF,W_e),M(bL,W_e,null),e(Td,cer),e(Td,Q_e),e(Q_e,fer),b(f,Qqe,u),b(f,zo,u),M(vL,zo,null),e(zo,mer),e(zo,Md),e(Md,ger),e(Md,QX),e(QX,her),e(Md,per),e(Md,HX),e(HX,_er),e(Md,uer),e(zo,ber),e(zo,FL),e(FL,ver),e(FL,H_e),e(H_e,Fer),e(FL,Ter),e(zo,Mer),e(zo,Tt),M(TL,Tt,null),e(Tt,Eer),e(Tt,U_e),e(U_e,Cer),e(Tt,wer),e(Tt,Ed),e(Ed,Aer),e(Ed,J_e),e(J_e,yer),e(Ed,Ler),e(Ed,UX),e(UX,xer),e(Ed,$er),e(Tt,ker),M(YF,Tt,null),e(zo,Ser),e(zo,ho),M(ML,ho,null),e(ho,Rer),e(ho,Y_e),e(Y_e,Per),e(ho,Ber),e(ho,za),e(za,Ier),e(za,K_e),e(K_e,qer),e(za,Ner),e(za,Z_e),e(Z_e,jer),e(za,Der),e(za,eue),e(eue,Ger),e(za,Oer),e(ho,Ver),e(ho,Zr),e(Zr,KF),e(KF,oue),e(oue,Xer),e(KF,zer),e(KF,JX),e(JX,Wer),e(KF,Qer),e(Zr,Her),e(Zr,ZF),e(ZF,rue),e(rue,Uer),e(ZF,Jer),e(ZF,YX),e(YX,Yer),e(ZF,Ker),e(Zr,Zer),e(Zr,eT),e(eT,tue),e(tue,eor),e(eT,oor),e(eT,KX),e(KX,ror),e(eT,tor),e(Zr,aor),e(Zr,oT),e(oT,aue),e(aue,nor),e(oT,sor),e(oT,ZX),e(ZX,lor),e(oT,ior),e(Zr,dor),e(Zr,rT),e(rT,nue),e(nue,cor),e(rT,mor),e(rT,ez),e(ez,gor),e(rT,hor),e(ho,por),e(ho,tT),e(tT,_or),e(tT,sue),e(sue,uor),e(tT,bor),e(tT,lue),e(lue,vor),e(ho,For),M(aT,ho,null),b(f,Hqe,u),b(f,Cd,u),e(Cd,nT),e(nT,iue),M(EL,iue,null),e(Cd,Tor),e(Cd,due),e(due,Mor),b(f,Uqe,u),b(f,Wo,u),M(CL,Wo,null),e(Wo,Eor),e(Wo,wd),e(wd,Cor),e(wd,oz),e(oz,wor),e(wd,Aor),e(wd,rz),e(rz,yor),e(wd,Lor),e(Wo,xor),e(Wo,wL),e(wL,$or),e(wL,cue),e(cue,kor),e(wL,Sor),e(Wo,Ror),e(Wo,Mt),M(AL,Mt,null),e(Mt,Por),e(Mt,fue),e(fue,Bor),e(Mt,Ior),e(Mt,Ad),e(Ad,qor),e(Ad,mue),e(mue,Nor),e(Ad,jor),e(Ad,tz),e(tz,Dor),e(Ad,Gor),e(Mt,Oor),M(sT,Mt,null),e(Wo,Vor),e(Wo,po),M(yL,po,null),e(po,Xor),e(po,gue),e(gue,zor),e(po,Wor),e(po,Wa),e(Wa,Qor),e(Wa,hue),e(hue,Hor),e(Wa,Uor),e(Wa,pue),e(pue,Jor),e(Wa,Yor),e(Wa,_ue),e(_ue,Kor),e(Wa,Zor),e(po,err),e(po,yd),e(yd,lT),e(lT,uue),e(uue,orr),e(lT,rrr),e(lT,az),e(az,trr),e(lT,arr),e(yd,nrr),e(yd,iT),e(iT,bue),e(bue,srr),e(iT,lrr),e(iT,nz),e(nz,irr),e(iT,drr),e(yd,crr),e(yd,dT),e(dT,vue),e(vue,frr),e(dT,mrr),e(dT,sz),e(sz,grr),e(dT,hrr),e(po,prr),e(po,cT),e(cT,_rr),e(cT,Fue),e(Fue,urr),e(cT,brr),e(cT,Tue),e(Tue,vrr),e(po,Frr),M(fT,po,null),b(f,Jqe,u),b(f,Ld,u),e(Ld,mT),e(mT,Mue),M(LL,Mue,null),e(Ld,Trr),e(Ld,Eue),e(Eue,Mrr),b(f,Yqe,u),b(f,Qo,u),M(xL,Qo,null),e(Qo,Err),e(Qo,xd),e(xd,Crr),e(xd,lz),e(lz,wrr),e(xd,Arr),e(xd,iz),e(iz,yrr),e(xd,Lrr),e(Qo,xrr),e(Qo,$L),e($L,$rr),e($L,Cue),e(Cue,krr),e($L,Srr),e(Qo,Rrr),e(Qo,Et),M(kL,Et,null),e(Et,Prr),e(Et,wue),e(wue,Brr),e(Et,Irr),e(Et,$d),e($d,qrr),e($d,Aue),e(Aue,Nrr),e($d,jrr),e($d,dz),e(dz,Drr),e($d,Grr),e(Et,Orr),M(gT,Et,null),e(Qo,Vrr),e(Qo,_o),M(SL,_o,null),e(_o,Xrr),e(_o,yue),e(yue,zrr),e(_o,Wrr),e(_o,Qa),e(Qa,Qrr),e(Qa,Lue),e(Lue,Hrr),e(Qa,Urr),e(Qa,xue),e(xue,Jrr),e(Qa,Yrr),e(Qa,$ue),e($ue,Krr),e(Qa,Zrr),e(_o,etr),e(_o,RL),e(RL,hT),e(hT,kue),e(kue,otr),e(hT,rtr),e(hT,cz),e(cz,ttr),e(hT,atr),e(RL,ntr),e(RL,pT),e(pT,Sue),e(Sue,str),e(pT,ltr),e(pT,fz),e(fz,itr),e(pT,dtr),e(_o,ctr),e(_o,_T),e(_T,ftr),e(_T,Rue),e(Rue,mtr),e(_T,gtr),e(_T,Pue),e(Pue,htr),e(_o,ptr),M(uT,_o,null),b(f,Kqe,u),b(f,kd,u),e(kd,bT),e(bT,Bue),M(PL,Bue,null),e(kd,_tr),e(kd,Iue),e(Iue,utr),b(f,Zqe,u),b(f,Ho,u),M(BL,Ho,null),e(Ho,btr),e(Ho,Sd),e(Sd,vtr),e(Sd,mz),e(mz,Ftr),e(Sd,Ttr),e(Sd,gz),e(gz,Mtr),e(Sd,Etr),e(Ho,Ctr),e(Ho,IL),e(IL,wtr),e(IL,que),e(que,Atr),e(IL,ytr),e(Ho,Ltr),e(Ho,Ct),M(qL,Ct,null),e(Ct,xtr),e(Ct,Nue),e(Nue,$tr),e(Ct,ktr),e(Ct,Rd),e(Rd,Str),e(Rd,jue),e(jue,Rtr),e(Rd,Ptr),e(Rd,hz),e(hz,Btr),e(Rd,Itr),e(Ct,qtr),M(vT,Ct,null),e(Ho,Ntr),e(Ho,uo),M(NL,uo,null),e(uo,jtr),e(uo,Due),e(Due,Dtr),e(uo,Gtr),e(uo,Ha),e(Ha,Otr),e(Ha,Gue),e(Gue,Vtr),e(Ha,Xtr),e(Ha,Oue),e(Oue,ztr),e(Ha,Wtr),e(Ha,Vue),e(Vue,Qtr),e(Ha,Htr),e(uo,Utr),e(uo,Xue),e(Xue,FT),e(FT,zue),e(zue,Jtr),e(FT,Ytr),e(FT,pz),e(pz,Ktr),e(FT,Ztr),e(uo,ear),e(uo,TT),e(TT,oar),e(TT,Wue),e(Wue,rar),e(TT,tar),e(TT,Que),e(Que,aar),e(uo,nar),M(MT,uo,null),b(f,eNe,u),b(f,Pd,u),e(Pd,ET),e(ET,Hue),M(jL,Hue,null),e(Pd,sar),e(Pd,Uue),e(Uue,lar),b(f,oNe,u),b(f,Uo,u),M(DL,Uo,null),e(Uo,iar),e(Uo,Bd),e(Bd,dar),e(Bd,_z),e(_z,car),e(Bd,far),e(Bd,uz),e(uz,mar),e(Bd,gar),e(Uo,har),e(Uo,GL),e(GL,par),e(GL,Jue),e(Jue,_ar),e(GL,uar),e(Uo,bar),e(Uo,wt),M(OL,wt,null),e(wt,Far),e(wt,Yue),e(Yue,Tar),e(wt,Mar),e(wt,Id),e(Id,Ear),e(Id,Kue),e(Kue,Car),e(Id,war),e(Id,bz),e(bz,Aar),e(Id,yar),e(wt,Lar),M(CT,wt,null),e(Uo,xar),e(Uo,bo),M(VL,bo,null),e(bo,$ar),e(bo,Zue),e(Zue,kar),e(bo,Sar),e(bo,Ua),e(Ua,Rar),e(Ua,e2e),e(e2e,Par),e(Ua,Bar),e(Ua,o2e),e(o2e,Iar),e(Ua,qar),e(Ua,r2e),e(r2e,Nar),e(Ua,jar),e(bo,Dar),e(bo,Ja),e(Ja,wT),e(wT,t2e),e(t2e,Gar),e(wT,Oar),e(wT,vz),e(vz,Var),e(wT,Xar),e(Ja,zar),e(Ja,AT),e(AT,a2e),e(a2e,War),e(AT,Qar),e(AT,Fz),e(Fz,Har),e(AT,Uar),e(Ja,Jar),e(Ja,yT),e(yT,n2e),e(n2e,Yar),e(yT,Kar),e(yT,Tz),e(Tz,Zar),e(yT,enr),e(Ja,onr),e(Ja,LT),e(LT,s2e),e(s2e,rnr),e(LT,tnr),e(LT,Mz),e(Mz,anr),e(LT,nnr),e(bo,snr),e(bo,xT),e(xT,lnr),e(xT,l2e),e(l2e,inr),e(xT,dnr),e(xT,i2e),e(i2e,cnr),e(bo,fnr),M($T,bo,null),b(f,rNe,u),b(f,qd,u),e(qd,kT),e(kT,d2e),M(XL,d2e,null),e(qd,mnr),e(qd,c2e),e(c2e,gnr),b(f,tNe,u),b(f,Jo,u),M(zL,Jo,null),e(Jo,hnr),e(Jo,Nd),e(Nd,pnr),e(Nd,Ez),e(Ez,_nr),e(Nd,unr),e(Nd,Cz),e(Cz,bnr),e(Nd,vnr),e(Jo,Fnr),e(Jo,WL),e(WL,Tnr),e(WL,f2e),e(f2e,Mnr),e(WL,Enr),e(Jo,Cnr),e(Jo,At),M(QL,At,null),e(At,wnr),e(At,m2e),e(m2e,Anr),e(At,ynr),e(At,jd),e(jd,Lnr),e(jd,g2e),e(g2e,xnr),e(jd,$nr),e(jd,wz),e(wz,knr),e(jd,Snr),e(At,Rnr),M(ST,At,null),e(Jo,Pnr),e(Jo,vo),M(HL,vo,null),e(vo,Bnr),e(vo,h2e),e(h2e,Inr),e(vo,qnr),e(vo,Ya),e(Ya,Nnr),e(Ya,p2e),e(p2e,jnr),e(Ya,Dnr),e(Ya,_2e),e(_2e,Gnr),e(Ya,Onr),e(Ya,u2e),e(u2e,Vnr),e(Ya,Xnr),e(vo,znr),e(vo,b2e),e(b2e,RT),e(RT,v2e),e(v2e,Wnr),e(RT,Qnr),e(RT,Az),e(Az,Hnr),e(RT,Unr),e(vo,Jnr),e(vo,PT),e(PT,Ynr),e(PT,F2e),e(F2e,Knr),e(PT,Znr),e(PT,T2e),e(T2e,esr),e(vo,osr),M(BT,vo,null),b(f,aNe,u),b(f,Dd,u),e(Dd,IT),e(IT,M2e),M(UL,M2e,null),e(Dd,rsr),e(Dd,E2e),e(E2e,tsr),b(f,nNe,u),b(f,Yo,u),M(JL,Yo,null),e(Yo,asr),e(Yo,Gd),e(Gd,nsr),e(Gd,yz),e(yz,ssr),e(Gd,lsr),e(Gd,Lz),e(Lz,isr),e(Gd,dsr),e(Yo,csr),e(Yo,YL),e(YL,fsr),e(YL,C2e),e(C2e,msr),e(YL,gsr),e(Yo,hsr),e(Yo,yt),M(KL,yt,null),e(yt,psr),e(yt,w2e),e(w2e,_sr),e(yt,usr),e(yt,Od),e(Od,bsr),e(Od,A2e),e(A2e,vsr),e(Od,Fsr),e(Od,xz),e(xz,Tsr),e(Od,Msr),e(yt,Esr),M(qT,yt,null),e(Yo,Csr),e(Yo,wr),M(ZL,wr,null),e(wr,wsr),e(wr,y2e),e(y2e,Asr),e(wr,ysr),e(wr,Ka),e(Ka,Lsr),e(Ka,L2e),e(L2e,xsr),e(Ka,$sr),e(Ka,x2e),e(x2e,ksr),e(Ka,Ssr),e(Ka,$2e),e($2e,Rsr),e(Ka,Psr),e(wr,Bsr),e(wr,q),e(q,NT),e(NT,k2e),e(k2e,Isr),e(NT,qsr),e(NT,$z),e($z,Nsr),e(NT,jsr),e(q,Dsr),e(q,jT),e(jT,S2e),e(S2e,Gsr),e(jT,Osr),e(jT,kz),e(kz,Vsr),e(jT,Xsr),e(q,zsr),e(q,DT),e(DT,R2e),e(R2e,Wsr),e(DT,Qsr),e(DT,Sz),e(Sz,Hsr),e(DT,Usr),e(q,Jsr),e(q,GT),e(GT,P2e),e(P2e,Ysr),e(GT,Ksr),e(GT,Rz),e(Rz,Zsr),e(GT,elr),e(q,olr),e(q,OT),e(OT,B2e),e(B2e,rlr),e(OT,tlr),e(OT,Pz),e(Pz,alr),e(OT,nlr),e(q,slr),e(q,VT),e(VT,I2e),e(I2e,llr),e(VT,ilr),e(VT,Bz),e(Bz,dlr),e(VT,clr),e(q,flr),e(q,XT),e(XT,q2e),e(q2e,mlr),e(XT,glr),e(XT,Iz),e(Iz,hlr),e(XT,plr),e(q,_lr),e(q,zT),e(zT,N2e),e(N2e,ulr),e(zT,blr),e(zT,qz),e(qz,vlr),e(zT,Flr),e(q,Tlr),e(q,WT),e(WT,j2e),e(j2e,Mlr),e(WT,Elr),e(WT,Nz),e(Nz,Clr),e(WT,wlr),e(q,Alr),e(q,QT),e(QT,D2e),e(D2e,ylr),e(QT,Llr),e(QT,jz),e(jz,xlr),e(QT,$lr),e(q,klr),e(q,HT),e(HT,G2e),e(G2e,Slr),e(HT,Rlr),e(HT,Dz),e(Dz,Plr),e(HT,Blr),e(q,Ilr),e(q,UT),e(UT,O2e),e(O2e,qlr),e(UT,Nlr),e(UT,Gz),e(Gz,jlr),e(UT,Dlr),e(q,Glr),e(q,JT),e(JT,V2e),e(V2e,Olr),e(JT,Vlr),e(JT,Oz),e(Oz,Xlr),e(JT,zlr),e(q,Wlr),e(q,YT),e(YT,X2e),e(X2e,Qlr),e(YT,Hlr),e(YT,Vz),e(Vz,Ulr),e(YT,Jlr),e(q,Ylr),e(q,KT),e(KT,z2e),e(z2e,Klr),e(KT,Zlr),e(KT,Xz),e(Xz,eir),e(KT,oir),e(q,rir),e(q,ZT),e(ZT,W2e),e(W2e,tir),e(ZT,air),e(ZT,zz),e(zz,nir),e(ZT,sir),e(q,lir),e(q,eM),e(eM,Q2e),e(Q2e,iir),e(eM,dir),e(eM,Wz),e(Wz,cir),e(eM,fir),e(q,mir),e(q,Bs),e(Bs,H2e),e(H2e,gir),e(Bs,hir),e(Bs,Qz),e(Qz,pir),e(Bs,_ir),e(Bs,Hz),e(Hz,uir),e(Bs,bir),e(q,vir),e(q,oM),e(oM,U2e),e(U2e,Fir),e(oM,Tir),e(oM,Uz),e(Uz,Mir),e(oM,Eir),e(q,Cir),e(q,rM),e(rM,J2e),e(J2e,wir),e(rM,Air),e(rM,Jz),e(Jz,yir),e(rM,Lir),e(q,xir),e(q,tM),e(tM,Y2e),e(Y2e,$ir),e(tM,kir),e(tM,Yz),e(Yz,Sir),e(tM,Rir),e(q,Pir),e(q,aM),e(aM,K2e),e(K2e,Bir),e(aM,Iir),e(aM,Kz),e(Kz,qir),e(aM,Nir),e(q,jir),e(q,nM),e(nM,Z2e),e(Z2e,Dir),e(nM,Gir),e(nM,Zz),e(Zz,Oir),e(nM,Vir),e(q,Xir),e(q,sM),e(sM,e1e),e(e1e,zir),e(sM,Wir),e(sM,eW),e(eW,Qir),e(sM,Hir),e(q,Uir),e(q,lM),e(lM,o1e),e(o1e,Jir),e(lM,Yir),e(lM,oW),e(oW,Kir),e(lM,Zir),e(q,edr),e(q,iM),e(iM,r1e),e(r1e,odr),e(iM,rdr),e(iM,rW),e(rW,tdr),e(iM,adr),e(q,ndr),e(q,dM),e(dM,t1e),e(t1e,sdr),e(dM,ldr),e(dM,tW),e(tW,idr),e(dM,ddr),e(q,cdr),e(q,cM),e(cM,a1e),e(a1e,fdr),e(cM,mdr),e(cM,aW),e(aW,gdr),e(cM,hdr),e(q,pdr),e(q,fM),e(fM,n1e),e(n1e,_dr),e(fM,udr),e(fM,nW),e(nW,bdr),e(fM,vdr),e(q,Fdr),e(q,mM),e(mM,s1e),e(s1e,Tdr),e(mM,Mdr),e(mM,sW),e(sW,Edr),e(mM,Cdr),e(q,wdr),e(q,gM),e(gM,l1e),e(l1e,Adr),e(gM,ydr),e(gM,lW),e(lW,Ldr),e(gM,xdr),e(q,$dr),e(q,hM),e(hM,i1e),e(i1e,kdr),e(hM,Sdr),e(hM,iW),e(iW,Rdr),e(hM,Pdr),e(q,Bdr),e(q,pM),e(pM,d1e),e(d1e,Idr),e(pM,qdr),e(pM,dW),e(dW,Ndr),e(pM,jdr),e(q,Ddr),e(q,_M),e(_M,c1e),e(c1e,Gdr),e(_M,Odr),e(_M,cW),e(cW,Vdr),e(_M,Xdr),e(q,zdr),e(q,uM),e(uM,f1e),e(f1e,Wdr),e(uM,Qdr),e(uM,fW),e(fW,Hdr),e(uM,Udr),e(q,Jdr),e(q,bM),e(bM,m1e),e(m1e,Ydr),e(bM,Kdr),e(bM,mW),e(mW,Zdr),e(bM,ecr),e(q,ocr),e(q,vM),e(vM,g1e),e(g1e,rcr),e(vM,tcr),e(vM,gW),e(gW,acr),e(vM,ncr),e(q,scr),e(q,FM),e(FM,h1e),e(h1e,lcr),e(FM,icr),e(FM,hW),e(hW,dcr),e(FM,ccr),e(q,fcr),e(q,TM),e(TM,p1e),e(p1e,mcr),e(TM,gcr),e(TM,pW),e(pW,hcr),e(TM,pcr),e(q,_cr),e(q,MM),e(MM,_1e),e(_1e,ucr),e(MM,bcr),e(MM,_W),e(_W,vcr),e(MM,Fcr),e(q,Tcr),e(q,EM),e(EM,u1e),e(u1e,Mcr),e(EM,Ecr),e(EM,uW),e(uW,Ccr),e(EM,wcr),e(q,Acr),e(q,CM),e(CM,b1e),e(b1e,ycr),e(CM,Lcr),e(CM,bW),e(bW,xcr),e(CM,$cr),e(q,kcr),e(q,wM),e(wM,v1e),e(v1e,Scr),e(wM,Rcr),e(wM,vW),e(vW,Pcr),e(wM,Bcr),e(q,Icr),e(q,AM),e(AM,F1e),e(F1e,qcr),e(AM,Ncr),e(AM,FW),e(FW,jcr),e(AM,Dcr),e(q,Gcr),e(q,yM),e(yM,T1e),e(T1e,Ocr),e(yM,Vcr),e(yM,TW),e(TW,Xcr),e(yM,zcr),e(q,Wcr),e(q,LM),e(LM,M1e),e(M1e,Qcr),e(LM,Hcr),e(LM,MW),e(MW,Ucr),e(LM,Jcr),e(q,Ycr),e(q,xM),e(xM,E1e),e(E1e,Kcr),e(xM,Zcr),e(xM,EW),e(EW,efr),e(xM,ofr),e(wr,rfr),M($M,wr,null),b(f,sNe,u),b(f,Vd,u),e(Vd,kM),e(kM,C1e),M(e8,C1e,null),e(Vd,tfr),e(Vd,w1e),e(w1e,afr),b(f,lNe,u),b(f,Ko,u),M(o8,Ko,null),e(Ko,nfr),e(Ko,Xd),e(Xd,sfr),e(Xd,CW),e(CW,lfr),e(Xd,ifr),e(Xd,wW),e(wW,dfr),e(Xd,cfr),e(Ko,ffr),e(Ko,r8),e(r8,mfr),e(r8,A1e),e(A1e,gfr),e(r8,hfr),e(Ko,pfr),e(Ko,Lt),M(t8,Lt,null),e(Lt,_fr),e(Lt,y1e),e(y1e,ufr),e(Lt,bfr),e(Lt,zd),e(zd,vfr),e(zd,L1e),e(L1e,Ffr),e(zd,Tfr),e(zd,AW),e(AW,Mfr),e(zd,Efr),e(Lt,Cfr),M(SM,Lt,null),e(Ko,wfr),e(Ko,Ar),M(a8,Ar,null),e(Ar,Afr),e(Ar,x1e),e(x1e,yfr),e(Ar,Lfr),e(Ar,Za),e(Za,xfr),e(Za,$1e),e($1e,$fr),e(Za,kfr),e(Za,k1e),e(k1e,Sfr),e(Za,Rfr),e(Za,S1e),e(S1e,Pfr),e(Za,Bfr),e(Ar,Ifr),e(Ar,se),e(se,RM),e(RM,R1e),e(R1e,qfr),e(RM,Nfr),e(RM,yW),e(yW,jfr),e(RM,Dfr),e(se,Gfr),e(se,PM),e(PM,P1e),e(P1e,Ofr),e(PM,Vfr),e(PM,LW),e(LW,Xfr),e(PM,zfr),e(se,Wfr),e(se,BM),e(BM,B1e),e(B1e,Qfr),e(BM,Hfr),e(BM,xW),e(xW,Ufr),e(BM,Jfr),e(se,Yfr),e(se,IM),e(IM,I1e),e(I1e,Kfr),e(IM,Zfr),e(IM,$W),e($W,emr),e(IM,omr),e(se,rmr),e(se,qM),e(qM,q1e),e(q1e,tmr),e(qM,amr),e(qM,kW),e(kW,nmr),e(qM,smr),e(se,lmr),e(se,NM),e(NM,N1e),e(N1e,imr),e(NM,dmr),e(NM,SW),e(SW,cmr),e(NM,fmr),e(se,mmr),e(se,jM),e(jM,j1e),e(j1e,gmr),e(jM,hmr),e(jM,RW),e(RW,pmr),e(jM,_mr),e(se,umr),e(se,DM),e(DM,D1e),e(D1e,bmr),e(DM,vmr),e(DM,PW),e(PW,Fmr),e(DM,Tmr),e(se,Mmr),e(se,GM),e(GM,G1e),e(G1e,Emr),e(GM,Cmr),e(GM,BW),e(BW,wmr),e(GM,Amr),e(se,ymr),e(se,OM),e(OM,O1e),e(O1e,Lmr),e(OM,xmr),e(OM,IW),e(IW,$mr),e(OM,kmr),e(se,Smr),e(se,VM),e(VM,V1e),e(V1e,Rmr),e(VM,Pmr),e(VM,qW),e(qW,Bmr),e(VM,Imr),e(se,qmr),e(se,XM),e(XM,X1e),e(X1e,Nmr),e(XM,jmr),e(XM,NW),e(NW,Dmr),e(XM,Gmr),e(se,Omr),e(se,zM),e(zM,z1e),e(z1e,Vmr),e(zM,Xmr),e(zM,jW),e(jW,zmr),e(zM,Wmr),e(se,Qmr),e(se,WM),e(WM,W1e),e(W1e,Hmr),e(WM,Umr),e(WM,DW),e(DW,Jmr),e(WM,Ymr),e(se,Kmr),e(se,QM),e(QM,Q1e),e(Q1e,Zmr),e(QM,egr),e(QM,GW),e(GW,ogr),e(QM,rgr),e(se,tgr),e(se,HM),e(HM,H1e),e(H1e,agr),e(HM,ngr),e(HM,OW),e(OW,sgr),e(HM,lgr),e(se,igr),e(se,UM),e(UM,U1e),e(U1e,dgr),e(UM,cgr),e(UM,VW),e(VW,fgr),e(UM,mgr),e(se,ggr),e(se,JM),e(JM,J1e),e(J1e,hgr),e(JM,pgr),e(JM,XW),e(XW,_gr),e(JM,ugr),e(se,bgr),e(se,YM),e(YM,Y1e),e(Y1e,vgr),e(YM,Fgr),e(YM,zW),e(zW,Tgr),e(YM,Mgr),e(se,Egr),e(se,KM),e(KM,K1e),e(K1e,Cgr),e(KM,wgr),e(KM,WW),e(WW,Agr),e(KM,ygr),e(se,Lgr),e(se,ZM),e(ZM,Z1e),e(Z1e,xgr),e(ZM,$gr),e(ZM,QW),e(QW,kgr),e(ZM,Sgr),e(se,Rgr),e(se,e4),e(e4,e7e),e(e7e,Pgr),e(e4,Bgr),e(e4,HW),e(HW,Igr),e(e4,qgr),e(se,Ngr),e(se,o4),e(o4,o7e),e(o7e,jgr),e(o4,Dgr),e(o4,UW),e(UW,Ggr),e(o4,Ogr),e(Ar,Vgr),M(r4,Ar,null),b(f,iNe,u),b(f,Wd,u),e(Wd,t4),e(t4,r7e),M(n8,r7e,null),e(Wd,Xgr),e(Wd,t7e),e(t7e,zgr),b(f,dNe,u),b(f,Zo,u),M(s8,Zo,null),e(Zo,Wgr),e(Zo,Qd),e(Qd,Qgr),e(Qd,JW),e(JW,Hgr),e(Qd,Ugr),e(Qd,YW),e(YW,Jgr),e(Qd,Ygr),e(Zo,Kgr),e(Zo,l8),e(l8,Zgr),e(l8,a7e),e(a7e,ehr),e(l8,ohr),e(Zo,rhr),e(Zo,xt),M(i8,xt,null),e(xt,thr),e(xt,n7e),e(n7e,ahr),e(xt,nhr),e(xt,Hd),e(Hd,shr),e(Hd,s7e),e(s7e,lhr),e(Hd,ihr),e(Hd,KW),e(KW,dhr),e(Hd,chr),e(xt,fhr),M(a4,xt,null),e(Zo,mhr),e(Zo,yr),M(d8,yr,null),e(yr,ghr),e(yr,l7e),e(l7e,hhr),e(yr,phr),e(yr,en),e(en,_hr),e(en,i7e),e(i7e,uhr),e(en,bhr),e(en,d7e),e(d7e,vhr),e(en,Fhr),e(en,c7e),e(c7e,Thr),e(en,Mhr),e(yr,Ehr),e(yr,Te),e(Te,n4),e(n4,f7e),e(f7e,Chr),e(n4,whr),e(n4,ZW),e(ZW,Ahr),e(n4,yhr),e(Te,Lhr),e(Te,s4),e(s4,m7e),e(m7e,xhr),e(s4,$hr),e(s4,eQ),e(eQ,khr),e(s4,Shr),e(Te,Rhr),e(Te,l4),e(l4,g7e),e(g7e,Phr),e(l4,Bhr),e(l4,oQ),e(oQ,Ihr),e(l4,qhr),e(Te,Nhr),e(Te,i4),e(i4,h7e),e(h7e,jhr),e(i4,Dhr),e(i4,rQ),e(rQ,Ghr),e(i4,Ohr),e(Te,Vhr),e(Te,d4),e(d4,p7e),e(p7e,Xhr),e(d4,zhr),e(d4,tQ),e(tQ,Whr),e(d4,Qhr),e(Te,Hhr),e(Te,c4),e(c4,_7e),e(_7e,Uhr),e(c4,Jhr),e(c4,aQ),e(aQ,Yhr),e(c4,Khr),e(Te,Zhr),e(Te,f4),e(f4,u7e),e(u7e,epr),e(f4,opr),e(f4,b7e),e(b7e,rpr),e(f4,tpr),e(Te,apr),e(Te,m4),e(m4,v7e),e(v7e,npr),e(m4,spr),e(m4,nQ),e(nQ,lpr),e(m4,ipr),e(Te,dpr),e(Te,g4),e(g4,F7e),e(F7e,cpr),e(g4,fpr),e(g4,sQ),e(sQ,mpr),e(g4,gpr),e(Te,hpr),e(Te,h4),e(h4,T7e),e(T7e,ppr),e(h4,_pr),e(h4,lQ),e(lQ,upr),e(h4,bpr),e(Te,vpr),e(Te,p4),e(p4,M7e),e(M7e,Fpr),e(p4,Tpr),e(p4,iQ),e(iQ,Mpr),e(p4,Epr),e(Te,Cpr),e(Te,_4),e(_4,E7e),e(E7e,wpr),e(_4,Apr),e(_4,dQ),e(dQ,ypr),e(_4,Lpr),e(Te,xpr),e(Te,u4),e(u4,C7e),e(C7e,$pr),e(u4,kpr),e(u4,cQ),e(cQ,Spr),e(u4,Rpr),e(yr,Ppr),M(b4,yr,null),b(f,cNe,u),b(f,Ud,u),e(Ud,v4),e(v4,w7e),M(c8,w7e,null),e(Ud,Bpr),e(Ud,A7e),e(A7e,Ipr),b(f,fNe,u),b(f,er,u),M(f8,er,null),e(er,qpr),e(er,Jd),e(Jd,Npr),e(Jd,fQ),e(fQ,jpr),e(Jd,Dpr),e(Jd,mQ),e(mQ,Gpr),e(Jd,Opr),e(er,Vpr),e(er,m8),e(m8,Xpr),e(m8,y7e),e(y7e,zpr),e(m8,Wpr),e(er,Qpr),e(er,$t),M(g8,$t,null),e($t,Hpr),e($t,L7e),e(L7e,Upr),e($t,Jpr),e($t,Yd),e(Yd,Ypr),e(Yd,x7e),e(x7e,Kpr),e(Yd,Zpr),e(Yd,gQ),e(gQ,e_r),e(Yd,o_r),e($t,r_r),M(F4,$t,null),e(er,t_r),e(er,Lr),M(h8,Lr,null),e(Lr,a_r),e(Lr,$7e),e($7e,n_r),e(Lr,s_r),e(Lr,on),e(on,l_r),e(on,k7e),e(k7e,i_r),e(on,d_r),e(on,S7e),e(S7e,c_r),e(on,f_r),e(on,R7e),e(R7e,m_r),e(on,g_r),e(Lr,h_r),e(Lr,rn),e(rn,T4),e(T4,P7e),e(P7e,p_r),e(T4,__r),e(T4,hQ),e(hQ,u_r),e(T4,b_r),e(rn,v_r),e(rn,M4),e(M4,B7e),e(B7e,F_r),e(M4,T_r),e(M4,pQ),e(pQ,M_r),e(M4,E_r),e(rn,C_r),e(rn,E4),e(E4,I7e),e(I7e,w_r),e(E4,A_r),e(E4,_Q),e(_Q,y_r),e(E4,L_r),e(rn,x_r),e(rn,C4),e(C4,q7e),e(q7e,$_r),e(C4,k_r),e(C4,uQ),e(uQ,S_r),e(C4,R_r),e(Lr,P_r),M(w4,Lr,null),b(f,mNe,u),b(f,Kd,u),e(Kd,A4),e(A4,N7e),M(p8,N7e,null),e(Kd,B_r),e(Kd,j7e),e(j7e,I_r),b(f,gNe,u),b(f,or,u),M(_8,or,null),e(or,q_r),e(or,Zd),e(Zd,N_r),e(Zd,bQ),e(bQ,j_r),e(Zd,D_r),e(Zd,vQ),e(vQ,G_r),e(Zd,O_r),e(or,V_r),e(or,u8),e(u8,X_r),e(u8,D7e),e(D7e,z_r),e(u8,W_r),e(or,Q_r),e(or,kt),M(b8,kt,null),e(kt,H_r),e(kt,G7e),e(G7e,U_r),e(kt,J_r),e(kt,ec),e(ec,Y_r),e(ec,O7e),e(O7e,K_r),e(ec,Z_r),e(ec,FQ),e(FQ,eur),e(ec,our),e(kt,rur),M(y4,kt,null),e(or,tur),e(or,xr),M(v8,xr,null),e(xr,aur),e(xr,V7e),e(V7e,nur),e(xr,sur),e(xr,tn),e(tn,lur),e(tn,X7e),e(X7e,iur),e(tn,dur),e(tn,z7e),e(z7e,cur),e(tn,fur),e(tn,W7e),e(W7e,mur),e(tn,gur),e(xr,hur),e(xr,ie),e(ie,L4),e(L4,Q7e),e(Q7e,pur),e(L4,_ur),e(L4,TQ),e(TQ,uur),e(L4,bur),e(ie,vur),e(ie,x4),e(x4,H7e),e(H7e,Fur),e(x4,Tur),e(x4,MQ),e(MQ,Mur),e(x4,Eur),e(ie,Cur),e(ie,$4),e($4,U7e),e(U7e,wur),e($4,Aur),e($4,EQ),e(EQ,yur),e($4,Lur),e(ie,xur),e(ie,k4),e(k4,J7e),e(J7e,$ur),e(k4,kur),e(k4,CQ),e(CQ,Sur),e(k4,Rur),e(ie,Pur),e(ie,S4),e(S4,Y7e),e(Y7e,Bur),e(S4,Iur),e(S4,wQ),e(wQ,qur),e(S4,Nur),e(ie,jur),e(ie,R4),e(R4,K7e),e(K7e,Dur),e(R4,Gur),e(R4,AQ),e(AQ,Our),e(R4,Vur),e(ie,Xur),e(ie,P4),e(P4,Z7e),e(Z7e,zur),e(P4,Wur),e(P4,yQ),e(yQ,Qur),e(P4,Hur),e(ie,Uur),e(ie,B4),e(B4,ebe),e(ebe,Jur),e(B4,Yur),e(B4,LQ),e(LQ,Kur),e(B4,Zur),e(ie,e2r),e(ie,I4),e(I4,obe),e(obe,o2r),e(I4,r2r),e(I4,xQ),e(xQ,t2r),e(I4,a2r),e(ie,n2r),e(ie,q4),e(q4,rbe),e(rbe,s2r),e(q4,l2r),e(q4,$Q),e($Q,i2r),e(q4,d2r),e(ie,c2r),e(ie,N4),e(N4,tbe),e(tbe,f2r),e(N4,m2r),e(N4,kQ),e(kQ,g2r),e(N4,h2r),e(ie,p2r),e(ie,j4),e(j4,abe),e(abe,_2r),e(j4,u2r),e(j4,SQ),e(SQ,b2r),e(j4,v2r),e(ie,F2r),e(ie,D4),e(D4,nbe),e(nbe,T2r),e(D4,M2r),e(D4,RQ),e(RQ,E2r),e(D4,C2r),e(ie,w2r),e(ie,G4),e(G4,sbe),e(sbe,A2r),e(G4,y2r),e(G4,PQ),e(PQ,L2r),e(G4,x2r),e(ie,$2r),e(ie,O4),e(O4,lbe),e(lbe,k2r),e(O4,S2r),e(O4,BQ),e(BQ,R2r),e(O4,P2r),e(ie,B2r),e(ie,V4),e(V4,ibe),e(ibe,I2r),e(V4,q2r),e(V4,IQ),e(IQ,N2r),e(V4,j2r),e(ie,D2r),e(ie,X4),e(X4,dbe),e(dbe,G2r),e(X4,O2r),e(X4,qQ),e(qQ,V2r),e(X4,X2r),e(ie,z2r),e(ie,z4),e(z4,cbe),e(cbe,W2r),e(z4,Q2r),e(z4,NQ),e(NQ,H2r),e(z4,U2r),e(ie,J2r),e(ie,W4),e(W4,fbe),e(fbe,Y2r),e(W4,K2r),e(W4,jQ),e(jQ,Z2r),e(W4,e1r),e(ie,o1r),e(ie,Q4),e(Q4,mbe),e(mbe,r1r),e(Q4,t1r),e(Q4,DQ),e(DQ,a1r),e(Q4,n1r),e(xr,s1r),M(H4,xr,null),b(f,hNe,u),b(f,oc,u),e(oc,U4),e(U4,gbe),M(F8,gbe,null),e(oc,l1r),e(oc,hbe),e(hbe,i1r),b(f,pNe,u),b(f,rr,u),M(T8,rr,null),e(rr,d1r),e(rr,rc),e(rc,c1r),e(rc,GQ),e(GQ,f1r),e(rc,m1r),e(rc,OQ),e(OQ,g1r),e(rc,h1r),e(rr,p1r),e(rr,M8),e(M8,_1r),e(M8,pbe),e(pbe,u1r),e(M8,b1r),e(rr,v1r),e(rr,St),M(E8,St,null),e(St,F1r),e(St,_be),e(_be,T1r),e(St,M1r),e(St,tc),e(tc,E1r),e(tc,ube),e(ube,C1r),e(tc,w1r),e(tc,VQ),e(VQ,A1r),e(tc,y1r),e(St,L1r),M(J4,St,null),e(rr,x1r),e(rr,$r),M(C8,$r,null),e($r,$1r),e($r,bbe),e(bbe,k1r),e($r,S1r),e($r,an),e(an,R1r),e(an,vbe),e(vbe,P1r),e(an,B1r),e(an,Fbe),e(Fbe,I1r),e(an,q1r),e(an,Tbe),e(Tbe,N1r),e(an,j1r),e($r,D1r),e($r,ye),e(ye,Y4),e(Y4,Mbe),e(Mbe,G1r),e(Y4,O1r),e(Y4,XQ),e(XQ,V1r),e(Y4,X1r),e(ye,z1r),e(ye,K4),e(K4,Ebe),e(Ebe,W1r),e(K4,Q1r),e(K4,zQ),e(zQ,H1r),e(K4,U1r),e(ye,J1r),e(ye,Z4),e(Z4,Cbe),e(Cbe,Y1r),e(Z4,K1r),e(Z4,WQ),e(WQ,Z1r),e(Z4,e7r),e(ye,o7r),e(ye,eE),e(eE,wbe),e(wbe,r7r),e(eE,t7r),e(eE,QQ),e(QQ,a7r),e(eE,n7r),e(ye,s7r),e(ye,oE),e(oE,Abe),e(Abe,l7r),e(oE,i7r),e(oE,HQ),e(HQ,d7r),e(oE,c7r),e(ye,f7r),e(ye,rE),e(rE,ybe),e(ybe,m7r),e(rE,g7r),e(rE,UQ),e(UQ,h7r),e(rE,p7r),e(ye,_7r),e(ye,tE),e(tE,Lbe),e(Lbe,u7r),e(tE,b7r),e(tE,JQ),e(JQ,v7r),e(tE,F7r),e(ye,T7r),e(ye,aE),e(aE,xbe),e(xbe,M7r),e(aE,E7r),e(aE,YQ),e(YQ,C7r),e(aE,w7r),e(ye,A7r),e(ye,nE),e(nE,$be),e($be,y7r),e(nE,L7r),e(nE,KQ),e(KQ,x7r),e(nE,$7r),e(ye,k7r),e(ye,sE),e(sE,kbe),e(kbe,S7r),e(sE,R7r),e(sE,ZQ),e(ZQ,P7r),e(sE,B7r),e($r,I7r),M(lE,$r,null),b(f,_Ne,u),b(f,ac,u),e(ac,iE),e(iE,Sbe),M(w8,Sbe,null),e(ac,q7r),e(ac,Rbe),e(Rbe,N7r),b(f,uNe,u),b(f,tr,u),M(A8,tr,null),e(tr,j7r),e(tr,nc),e(nc,D7r),e(nc,eH),e(eH,G7r),e(nc,O7r),e(nc,oH),e(oH,V7r),e(nc,X7r),e(tr,z7r),e(tr,y8),e(y8,W7r),e(y8,Pbe),e(Pbe,Q7r),e(y8,H7r),e(tr,U7r),e(tr,Rt),M(L8,Rt,null),e(Rt,J7r),e(Rt,Bbe),e(Bbe,Y7r),e(Rt,K7r),e(Rt,sc),e(sc,Z7r),e(sc,Ibe),e(Ibe,ebr),e(sc,obr),e(sc,rH),e(rH,rbr),e(sc,tbr),e(Rt,abr),M(dE,Rt,null),e(tr,nbr),e(tr,kr),M(x8,kr,null),e(kr,sbr),e(kr,qbe),e(qbe,lbr),e(kr,ibr),e(kr,nn),e(nn,dbr),e(nn,Nbe),e(Nbe,cbr),e(nn,fbr),e(nn,jbe),e(jbe,mbr),e(nn,gbr),e(nn,Dbe),e(Dbe,hbr),e(nn,pbr),e(kr,_br),e(kr,ee),e(ee,cE),e(cE,Gbe),e(Gbe,ubr),e(cE,bbr),e(cE,tH),e(tH,vbr),e(cE,Fbr),e(ee,Tbr),e(ee,fE),e(fE,Obe),e(Obe,Mbr),e(fE,Ebr),e(fE,aH),e(aH,Cbr),e(fE,wbr),e(ee,Abr),e(ee,mE),e(mE,Vbe),e(Vbe,ybr),e(mE,Lbr),e(mE,nH),e(nH,xbr),e(mE,$br),e(ee,kbr),e(ee,gE),e(gE,Xbe),e(Xbe,Sbr),e(gE,Rbr),e(gE,sH),e(sH,Pbr),e(gE,Bbr),e(ee,Ibr),e(ee,hE),e(hE,zbe),e(zbe,qbr),e(hE,Nbr),e(hE,lH),e(lH,jbr),e(hE,Dbr),e(ee,Gbr),e(ee,pE),e(pE,Wbe),e(Wbe,Obr),e(pE,Vbr),e(pE,iH),e(iH,Xbr),e(pE,zbr),e(ee,Wbr),e(ee,_E),e(_E,Qbe),e(Qbe,Qbr),e(_E,Hbr),e(_E,dH),e(dH,Ubr),e(_E,Jbr),e(ee,Ybr),e(ee,uE),e(uE,Hbe),e(Hbe,Kbr),e(uE,Zbr),e(uE,cH),e(cH,evr),e(uE,ovr),e(ee,rvr),e(ee,bE),e(bE,Ube),e(Ube,tvr),e(bE,avr),e(bE,fH),e(fH,nvr),e(bE,svr),e(ee,lvr),e(ee,vE),e(vE,Jbe),e(Jbe,ivr),e(vE,dvr),e(vE,mH),e(mH,cvr),e(vE,fvr),e(ee,mvr),e(ee,FE),e(FE,Ybe),e(Ybe,gvr),e(FE,hvr),e(FE,gH),e(gH,pvr),e(FE,_vr),e(ee,uvr),e(ee,TE),e(TE,Kbe),e(Kbe,bvr),e(TE,vvr),e(TE,hH),e(hH,Fvr),e(TE,Tvr),e(ee,Mvr),e(ee,ME),e(ME,Zbe),e(Zbe,Evr),e(ME,Cvr),e(ME,pH),e(pH,wvr),e(ME,Avr),e(ee,yvr),e(ee,EE),e(EE,eve),e(eve,Lvr),e(EE,xvr),e(EE,_H),e(_H,$vr),e(EE,kvr),e(ee,Svr),e(ee,CE),e(CE,ove),e(ove,Rvr),e(CE,Pvr),e(CE,uH),e(uH,Bvr),e(CE,Ivr),e(ee,qvr),e(ee,wE),e(wE,rve),e(rve,Nvr),e(wE,jvr),e(wE,bH),e(bH,Dvr),e(wE,Gvr),e(ee,Ovr),e(ee,AE),e(AE,tve),e(tve,Vvr),e(AE,Xvr),e(AE,vH),e(vH,zvr),e(AE,Wvr),e(ee,Qvr),e(ee,yE),e(yE,ave),e(ave,Hvr),e(yE,Uvr),e(yE,FH),e(FH,Jvr),e(yE,Yvr),e(ee,Kvr),e(ee,LE),e(LE,nve),e(nve,Zvr),e(LE,eFr),e(LE,TH),e(TH,oFr),e(LE,rFr),e(ee,tFr),e(ee,xE),e(xE,sve),e(sve,aFr),e(xE,nFr),e(xE,MH),e(MH,sFr),e(xE,lFr),e(ee,iFr),e(ee,$E),e($E,lve),e(lve,dFr),e($E,cFr),e($E,EH),e(EH,fFr),e($E,mFr),e(ee,gFr),e(ee,kE),e(kE,ive),e(ive,hFr),e(kE,pFr),e(kE,CH),e(CH,_Fr),e(kE,uFr),e(ee,bFr),e(ee,SE),e(SE,dve),e(dve,vFr),e(SE,FFr),e(SE,wH),e(wH,TFr),e(SE,MFr),e(ee,EFr),e(ee,RE),e(RE,cve),e(cve,CFr),e(RE,wFr),e(RE,AH),e(AH,AFr),e(RE,yFr),e(ee,LFr),e(ee,PE),e(PE,fve),e(fve,xFr),e(PE,$Fr),e(PE,yH),e(yH,kFr),e(PE,SFr),e(ee,RFr),e(ee,BE),e(BE,mve),e(mve,PFr),e(BE,BFr),e(BE,LH),e(LH,IFr),e(BE,qFr),e(kr,NFr),M(IE,kr,null),b(f,bNe,u),b(f,lc,u),e(lc,qE),e(qE,gve),M($8,gve,null),e(lc,jFr),e(lc,hve),e(hve,DFr),b(f,vNe,u),b(f,ar,u),M(k8,ar,null),e(ar,GFr),e(ar,ic),e(ic,OFr),e(ic,xH),e(xH,VFr),e(ic,XFr),e(ic,$H),e($H,zFr),e(ic,WFr),e(ar,QFr),e(ar,S8),e(S8,HFr),e(S8,pve),e(pve,UFr),e(S8,JFr),e(ar,YFr),e(ar,Pt),M(R8,Pt,null),e(Pt,KFr),e(Pt,_ve),e(_ve,ZFr),e(Pt,eTr),e(Pt,dc),e(dc,oTr),e(dc,uve),e(uve,rTr),e(dc,tTr),e(dc,kH),e(kH,aTr),e(dc,nTr),e(Pt,sTr),M(NE,Pt,null),e(ar,lTr),e(ar,Sr),M(P8,Sr,null),e(Sr,iTr),e(Sr,bve),e(bve,dTr),e(Sr,cTr),e(Sr,sn),e(sn,fTr),e(sn,vve),e(vve,mTr),e(sn,gTr),e(sn,Fve),e(Fve,hTr),e(sn,pTr),e(sn,Tve),e(Tve,_Tr),e(sn,uTr),e(Sr,bTr),e(Sr,he),e(he,jE),e(jE,Mve),e(Mve,vTr),e(jE,FTr),e(jE,SH),e(SH,TTr),e(jE,MTr),e(he,ETr),e(he,DE),e(DE,Eve),e(Eve,CTr),e(DE,wTr),e(DE,RH),e(RH,ATr),e(DE,yTr),e(he,LTr),e(he,GE),e(GE,Cve),e(Cve,xTr),e(GE,$Tr),e(GE,PH),e(PH,kTr),e(GE,STr),e(he,RTr),e(he,OE),e(OE,wve),e(wve,PTr),e(OE,BTr),e(OE,BH),e(BH,ITr),e(OE,qTr),e(he,NTr),e(he,VE),e(VE,Ave),e(Ave,jTr),e(VE,DTr),e(VE,IH),e(IH,GTr),e(VE,OTr),e(he,VTr),e(he,XE),e(XE,yve),e(yve,XTr),e(XE,zTr),e(XE,qH),e(qH,WTr),e(XE,QTr),e(he,HTr),e(he,zE),e(zE,Lve),e(Lve,UTr),e(zE,JTr),e(zE,NH),e(NH,YTr),e(zE,KTr),e(he,ZTr),e(he,WE),e(WE,xve),e(xve,eMr),e(WE,oMr),e(WE,jH),e(jH,rMr),e(WE,tMr),e(he,aMr),e(he,QE),e(QE,$ve),e($ve,nMr),e(QE,sMr),e(QE,DH),e(DH,lMr),e(QE,iMr),e(he,dMr),e(he,HE),e(HE,kve),e(kve,cMr),e(HE,fMr),e(HE,GH),e(GH,mMr),e(HE,gMr),e(he,hMr),e(he,UE),e(UE,Sve),e(Sve,pMr),e(UE,_Mr),e(UE,OH),e(OH,uMr),e(UE,bMr),e(he,vMr),e(he,JE),e(JE,Rve),e(Rve,FMr),e(JE,TMr),e(JE,VH),e(VH,MMr),e(JE,EMr),e(he,CMr),e(he,YE),e(YE,Pve),e(Pve,wMr),e(YE,AMr),e(YE,XH),e(XH,yMr),e(YE,LMr),e(he,xMr),e(he,KE),e(KE,Bve),e(Bve,$Mr),e(KE,kMr),e(KE,zH),e(zH,SMr),e(KE,RMr),e(he,PMr),e(he,ZE),e(ZE,Ive),e(Ive,BMr),e(ZE,IMr),e(ZE,WH),e(WH,qMr),e(ZE,NMr),e(he,jMr),e(he,eC),e(eC,qve),e(qve,DMr),e(eC,GMr),e(eC,QH),e(QH,OMr),e(eC,VMr),e(he,XMr),e(he,oC),e(oC,Nve),e(Nve,zMr),e(oC,WMr),e(oC,HH),e(HH,QMr),e(oC,HMr),e(Sr,UMr),M(rC,Sr,null),b(f,FNe,u),b(f,cc,u),e(cc,tC),e(tC,jve),M(B8,jve,null),e(cc,JMr),e(cc,Dve),e(Dve,YMr),b(f,TNe,u),b(f,nr,u),M(I8,nr,null),e(nr,KMr),e(nr,fc),e(fc,ZMr),e(fc,UH),e(UH,e4r),e(fc,o4r),e(fc,JH),e(JH,r4r),e(fc,t4r),e(nr,a4r),e(nr,q8),e(q8,n4r),e(q8,Gve),e(Gve,s4r),e(q8,l4r),e(nr,i4r),e(nr,Bt),M(N8,Bt,null),e(Bt,d4r),e(Bt,Ove),e(Ove,c4r),e(Bt,f4r),e(Bt,mc),e(mc,m4r),e(mc,Vve),e(Vve,g4r),e(mc,h4r),e(mc,YH),e(YH,p4r),e(mc,_4r),e(Bt,u4r),M(aC,Bt,null),e(nr,b4r),e(nr,Rr),M(j8,Rr,null),e(Rr,v4r),e(Rr,Xve),e(Xve,F4r),e(Rr,T4r),e(Rr,ln),e(ln,M4r),e(ln,zve),e(zve,E4r),e(ln,C4r),e(ln,Wve),e(Wve,w4r),e(ln,A4r),e(ln,Qve),e(Qve,y4r),e(ln,L4r),e(Rr,x4r),e(Rr,D8),e(D8,nC),e(nC,Hve),e(Hve,$4r),e(nC,k4r),e(nC,KH),e(KH,S4r),e(nC,R4r),e(D8,P4r),e(D8,sC),e(sC,Uve),e(Uve,B4r),e(sC,I4r),e(sC,ZH),e(ZH,q4r),e(sC,N4r),e(Rr,j4r),M(lC,Rr,null),b(f,MNe,u),b(f,gc,u),e(gc,iC),e(iC,Jve),M(G8,Jve,null),e(gc,D4r),e(gc,Yve),e(Yve,G4r),b(f,ENe,u),b(f,sr,u),M(O8,sr,null),e(sr,O4r),e(sr,hc),e(hc,V4r),e(hc,eU),e(eU,X4r),e(hc,z4r),e(hc,oU),e(oU,W4r),e(hc,Q4r),e(sr,H4r),e(sr,V8),e(V8,U4r),e(V8,Kve),e(Kve,J4r),e(V8,Y4r),e(sr,K4r),e(sr,It),M(X8,It,null),e(It,Z4r),e(It,Zve),e(Zve,eEr),e(It,oEr),e(It,pc),e(pc,rEr),e(pc,eFe),e(eFe,tEr),e(pc,aEr),e(pc,rU),e(rU,nEr),e(pc,sEr),e(It,lEr),M(dC,It,null),e(sr,iEr),e(sr,Pr),M(z8,Pr,null),e(Pr,dEr),e(Pr,oFe),e(oFe,cEr),e(Pr,fEr),e(Pr,dn),e(dn,mEr),e(dn,rFe),e(rFe,gEr),e(dn,hEr),e(dn,tFe),e(tFe,pEr),e(dn,_Er),e(dn,aFe),e(aFe,uEr),e(dn,bEr),e(Pr,vEr),e(Pr,nFe),e(nFe,cC),e(cC,sFe),e(sFe,FEr),e(cC,TEr),e(cC,tU),e(tU,MEr),e(cC,EEr),e(Pr,CEr),M(fC,Pr,null),b(f,CNe,u),b(f,_c,u),e(_c,mC),e(mC,lFe),M(W8,lFe,null),e(_c,wEr),e(_c,iFe),e(iFe,AEr),b(f,wNe,u),b(f,lr,u),M(Q8,lr,null),e(lr,yEr),e(lr,uc),e(uc,LEr),e(uc,aU),e(aU,xEr),e(uc,$Er),e(uc,nU),e(nU,kEr),e(uc,SEr),e(lr,REr),e(lr,H8),e(H8,PEr),e(H8,dFe),e(dFe,BEr),e(H8,IEr),e(lr,qEr),e(lr,qt),M(U8,qt,null),e(qt,NEr),e(qt,cFe),e(cFe,jEr),e(qt,DEr),e(qt,bc),e(bc,GEr),e(bc,fFe),e(fFe,OEr),e(bc,VEr),e(bc,sU),e(sU,XEr),e(bc,zEr),e(qt,WEr),M(gC,qt,null),e(lr,QEr),e(lr,Br),M(J8,Br,null),e(Br,HEr),e(Br,mFe),e(mFe,UEr),e(Br,JEr),e(Br,cn),e(cn,YEr),e(cn,gFe),e(gFe,KEr),e(cn,ZEr),e(cn,hFe),e(hFe,eCr),e(cn,oCr),e(cn,pFe),e(pFe,rCr),e(cn,tCr),e(Br,aCr),e(Br,de),e(de,hC),e(hC,_Fe),e(_Fe,nCr),e(hC,sCr),e(hC,lU),e(lU,lCr),e(hC,iCr),e(de,dCr),e(de,pC),e(pC,uFe),e(uFe,cCr),e(pC,fCr),e(pC,iU),e(iU,mCr),e(pC,gCr),e(de,hCr),e(de,_C),e(_C,bFe),e(bFe,pCr),e(_C,_Cr),e(_C,dU),e(dU,uCr),e(_C,bCr),e(de,vCr),e(de,uC),e(uC,vFe),e(vFe,FCr),e(uC,TCr),e(uC,cU),e(cU,MCr),e(uC,ECr),e(de,CCr),e(de,bC),e(bC,FFe),e(FFe,wCr),e(bC,ACr),e(bC,fU),e(fU,yCr),e(bC,LCr),e(de,xCr),e(de,vC),e(vC,TFe),e(TFe,$Cr),e(vC,kCr),e(vC,mU),e(mU,SCr),e(vC,RCr),e(de,PCr),e(de,FC),e(FC,MFe),e(MFe,BCr),e(FC,ICr),e(FC,gU),e(gU,qCr),e(FC,NCr),e(de,jCr),e(de,TC),e(TC,EFe),e(EFe,DCr),e(TC,GCr),e(TC,hU),e(hU,OCr),e(TC,VCr),e(de,XCr),e(de,MC),e(MC,CFe),e(CFe,zCr),e(MC,WCr),e(MC,pU),e(pU,QCr),e(MC,HCr),e(de,UCr),e(de,EC),e(EC,wFe),e(wFe,JCr),e(EC,YCr),e(EC,_U),e(_U,KCr),e(EC,ZCr),e(de,e5r),e(de,CC),e(CC,AFe),e(AFe,o5r),e(CC,r5r),e(CC,uU),e(uU,t5r),e(CC,a5r),e(de,n5r),e(de,wC),e(wC,yFe),e(yFe,s5r),e(wC,l5r),e(wC,bU),e(bU,i5r),e(wC,d5r),e(de,c5r),e(de,AC),e(AC,LFe),e(LFe,f5r),e(AC,m5r),e(AC,vU),e(vU,g5r),e(AC,h5r),e(de,p5r),e(de,yC),e(yC,xFe),e(xFe,_5r),e(yC,u5r),e(yC,FU),e(FU,b5r),e(yC,v5r),e(de,F5r),e(de,LC),e(LC,$Fe),e($Fe,T5r),e(LC,M5r),e(LC,TU),e(TU,E5r),e(LC,C5r),e(de,w5r),e(de,xC),e(xC,kFe),e(kFe,A5r),e(xC,y5r),e(xC,MU),e(MU,L5r),e(xC,x5r),e(de,$5r),e(de,$C),e($C,SFe),e(SFe,k5r),e($C,S5r),e($C,EU),e(EU,R5r),e($C,P5r),e(de,B5r),e(de,kC),e(kC,RFe),e(RFe,I5r),e(kC,q5r),e(kC,CU),e(CU,N5r),e(kC,j5r),e(de,D5r),e(de,SC),e(SC,PFe),e(PFe,G5r),e(SC,O5r),e(SC,wU),e(wU,V5r),e(SC,X5r),e(de,z5r),e(de,RC),e(RC,BFe),e(BFe,W5r),e(RC,Q5r),e(RC,AU),e(AU,H5r),e(RC,U5r),e(Br,J5r),M(PC,Br,null),b(f,ANe,u),b(f,vc,u),e(vc,BC),e(BC,IFe),M(Y8,IFe,null),e(vc,Y5r),e(vc,qFe),e(qFe,K5r),b(f,yNe,u),b(f,ir,u),M(K8,ir,null),e(ir,Z5r),e(ir,Fc),e(Fc,e3r),e(Fc,yU),e(yU,o3r),e(Fc,r3r),e(Fc,LU),e(LU,t3r),e(Fc,a3r),e(ir,n3r),e(ir,Z8),e(Z8,s3r),e(Z8,NFe),e(NFe,l3r),e(Z8,i3r),e(ir,d3r),e(ir,Nt),M(e9,Nt,null),e(Nt,c3r),e(Nt,jFe),e(jFe,f3r),e(Nt,m3r),e(Nt,Tc),e(Tc,g3r),e(Tc,DFe),e(DFe,h3r),e(Tc,p3r),e(Tc,xU),e(xU,_3r),e(Tc,u3r),e(Nt,b3r),M(IC,Nt,null),e(ir,v3r),e(ir,Ir),M(o9,Ir,null),e(Ir,F3r),e(Ir,GFe),e(GFe,T3r),e(Ir,M3r),e(Ir,fn),e(fn,E3r),e(fn,OFe),e(OFe,C3r),e(fn,w3r),e(fn,VFe),e(VFe,A3r),e(fn,y3r),e(fn,XFe),e(XFe,L3r),e(fn,x3r),e(Ir,$3r),e(Ir,ce),e(ce,qC),e(qC,zFe),e(zFe,k3r),e(qC,S3r),e(qC,$U),e($U,R3r),e(qC,P3r),e(ce,B3r),e(ce,NC),e(NC,WFe),e(WFe,I3r),e(NC,q3r),e(NC,kU),e(kU,N3r),e(NC,j3r),e(ce,D3r),e(ce,jC),e(jC,QFe),e(QFe,G3r),e(jC,O3r),e(jC,SU),e(SU,V3r),e(jC,X3r),e(ce,z3r),e(ce,DC),e(DC,HFe),e(HFe,W3r),e(DC,Q3r),e(DC,RU),e(RU,H3r),e(DC,U3r),e(ce,J3r),e(ce,GC),e(GC,UFe),e(UFe,Y3r),e(GC,K3r),e(GC,PU),e(PU,Z3r),e(GC,ewr),e(ce,owr),e(ce,OC),e(OC,JFe),e(JFe,rwr),e(OC,twr),e(OC,BU),e(BU,awr),e(OC,nwr),e(ce,swr),e(ce,VC),e(VC,YFe),e(YFe,lwr),e(VC,iwr),e(VC,IU),e(IU,dwr),e(VC,cwr),e(ce,fwr),e(ce,XC),e(XC,KFe),e(KFe,mwr),e(XC,gwr),e(XC,qU),e(qU,hwr),e(XC,pwr),e(ce,_wr),e(ce,zC),e(zC,ZFe),e(ZFe,uwr),e(zC,bwr),e(zC,NU),e(NU,vwr),e(zC,Fwr),e(ce,Twr),e(ce,WC),e(WC,eTe),e(eTe,Mwr),e(WC,Ewr),e(WC,jU),e(jU,Cwr),e(WC,wwr),e(ce,Awr),e(ce,QC),e(QC,oTe),e(oTe,ywr),e(QC,Lwr),e(QC,DU),e(DU,xwr),e(QC,$wr),e(ce,kwr),e(ce,HC),e(HC,rTe),e(rTe,Swr),e(HC,Rwr),e(HC,GU),e(GU,Pwr),e(HC,Bwr),e(ce,Iwr),e(ce,UC),e(UC,tTe),e(tTe,qwr),e(UC,Nwr),e(UC,OU),e(OU,jwr),e(UC,Dwr),e(ce,Gwr),e(ce,JC),e(JC,aTe),e(aTe,Owr),e(JC,Vwr),e(JC,VU),e(VU,Xwr),e(JC,zwr),e(ce,Wwr),e(ce,YC),e(YC,nTe),e(nTe,Qwr),e(YC,Hwr),e(YC,XU),e(XU,Uwr),e(YC,Jwr),e(ce,Ywr),e(ce,KC),e(KC,sTe),e(sTe,Kwr),e(KC,Zwr),e(KC,zU),e(zU,e0r),e(KC,o0r),e(ce,r0r),e(ce,ZC),e(ZC,lTe),e(lTe,t0r),e(ZC,a0r),e(ZC,WU),e(WU,n0r),e(ZC,s0r),e(ce,l0r),e(ce,e5),e(e5,iTe),e(iTe,i0r),e(e5,d0r),e(e5,QU),e(QU,c0r),e(e5,f0r),e(ce,m0r),e(ce,o5),e(o5,dTe),e(dTe,g0r),e(o5,h0r),e(o5,HU),e(HU,p0r),e(o5,_0r),e(ce,u0r),e(ce,r5),e(r5,cTe),e(cTe,b0r),e(r5,v0r),e(r5,UU),e(UU,F0r),e(r5,T0r),e(Ir,M0r),M(t5,Ir,null),b(f,LNe,u),b(f,Mc,u),e(Mc,a5),e(a5,fTe),M(r9,fTe,null),e(Mc,E0r),e(Mc,mTe),e(mTe,C0r),b(f,xNe,u),b(f,dr,u),M(t9,dr,null),e(dr,w0r),e(dr,Ec),e(Ec,A0r),e(Ec,JU),e(JU,y0r),e(Ec,L0r),e(Ec,YU),e(YU,x0r),e(Ec,$0r),e(dr,k0r),e(dr,a9),e(a9,S0r),e(a9,gTe),e(gTe,R0r),e(a9,P0r),e(dr,B0r),e(dr,jt),M(n9,jt,null),e(jt,I0r),e(jt,hTe),e(hTe,q0r),e(jt,N0r),e(jt,Cc),e(Cc,j0r),e(Cc,pTe),e(pTe,D0r),e(Cc,G0r),e(Cc,KU),e(KU,O0r),e(Cc,V0r),e(jt,X0r),M(n5,jt,null),e(dr,z0r),e(dr,qr),M(s9,qr,null),e(qr,W0r),e(qr,_Te),e(_Te,Q0r),e(qr,H0r),e(qr,mn),e(mn,U0r),e(mn,uTe),e(uTe,J0r),e(mn,Y0r),e(mn,bTe),e(bTe,K0r),e(mn,Z0r),e(mn,vTe),e(vTe,eAr),e(mn,oAr),e(qr,rAr),e(qr,FTe),e(FTe,s5),e(s5,TTe),e(TTe,tAr),e(s5,aAr),e(s5,ZU),e(ZU,nAr),e(s5,sAr),e(qr,lAr),M(l5,qr,null),b(f,$Ne,u),b(f,wc,u),e(wc,i5),e(i5,MTe),M(l9,MTe,null),e(wc,iAr),e(wc,ETe),e(ETe,dAr),b(f,kNe,u),b(f,cr,u),M(i9,cr,null),e(cr,cAr),e(cr,Ac),e(Ac,fAr),e(Ac,eJ),e(eJ,mAr),e(Ac,gAr),e(Ac,oJ),e(oJ,hAr),e(Ac,pAr),e(cr,_Ar),e(cr,d9),e(d9,uAr),e(d9,CTe),e(CTe,bAr),e(d9,vAr),e(cr,FAr),e(cr,Dt),M(c9,Dt,null),e(Dt,TAr),e(Dt,wTe),e(wTe,MAr),e(Dt,EAr),e(Dt,yc),e(yc,CAr),e(yc,ATe),e(ATe,wAr),e(yc,AAr),e(yc,rJ),e(rJ,yAr),e(yc,LAr),e(Dt,xAr),M(d5,Dt,null),e(cr,$Ar),e(cr,Nr),M(f9,Nr,null),e(Nr,kAr),e(Nr,yTe),e(yTe,SAr),e(Nr,RAr),e(Nr,gn),e(gn,PAr),e(gn,LTe),e(LTe,BAr),e(gn,IAr),e(gn,xTe),e(xTe,qAr),e(gn,NAr),e(gn,$Te),e($Te,jAr),e(gn,DAr),e(Nr,GAr),e(Nr,kTe),e(kTe,c5),e(c5,STe),e(STe,OAr),e(c5,VAr),e(c5,tJ),e(tJ,XAr),e(c5,zAr),e(Nr,WAr),M(f5,Nr,null),b(f,SNe,u),b(f,Lc,u),e(Lc,m5),e(m5,RTe),M(m9,RTe,null),e(Lc,QAr),e(Lc,PTe),e(PTe,HAr),b(f,RNe,u),b(f,fr,u),M(g9,fr,null),e(fr,UAr),e(fr,xc),e(xc,JAr),e(xc,aJ),e(aJ,YAr),e(xc,KAr),e(xc,nJ),e(nJ,ZAr),e(xc,e6r),e(fr,o6r),e(fr,h9),e(h9,r6r),e(h9,BTe),e(BTe,t6r),e(h9,a6r),e(fr,n6r),e(fr,Gt),M(p9,Gt,null),e(Gt,s6r),e(Gt,ITe),e(ITe,l6r),e(Gt,i6r),e(Gt,$c),e($c,d6r),e($c,qTe),e(qTe,c6r),e($c,f6r),e($c,sJ),e(sJ,m6r),e($c,g6r),e(Gt,h6r),M(g5,Gt,null),e(fr,p6r),e(fr,jr),M(_9,jr,null),e(jr,_6r),e(jr,NTe),e(NTe,u6r),e(jr,b6r),e(jr,hn),e(hn,v6r),e(hn,jTe),e(jTe,F6r),e(hn,T6r),e(hn,DTe),e(DTe,M6r),e(hn,E6r),e(hn,GTe),e(GTe,C6r),e(hn,w6r),e(jr,A6r),e(jr,oe),e(oe,h5),e(h5,OTe),e(OTe,y6r),e(h5,L6r),e(h5,lJ),e(lJ,x6r),e(h5,$6r),e(oe,k6r),e(oe,p5),e(p5,VTe),e(VTe,S6r),e(p5,R6r),e(p5,iJ),e(iJ,P6r),e(p5,B6r),e(oe,I6r),e(oe,_5),e(_5,XTe),e(XTe,q6r),e(_5,N6r),e(_5,dJ),e(dJ,j6r),e(_5,D6r),e(oe,G6r),e(oe,u5),e(u5,zTe),e(zTe,O6r),e(u5,V6r),e(u5,cJ),e(cJ,X6r),e(u5,z6r),e(oe,W6r),e(oe,b5),e(b5,WTe),e(WTe,Q6r),e(b5,H6r),e(b5,fJ),e(fJ,U6r),e(b5,J6r),e(oe,Y6r),e(oe,v5),e(v5,QTe),e(QTe,K6r),e(v5,Z6r),e(v5,mJ),e(mJ,eyr),e(v5,oyr),e(oe,ryr),e(oe,F5),e(F5,HTe),e(HTe,tyr),e(F5,ayr),e(F5,gJ),e(gJ,nyr),e(F5,syr),e(oe,lyr),e(oe,T5),e(T5,UTe),e(UTe,iyr),e(T5,dyr),e(T5,hJ),e(hJ,cyr),e(T5,fyr),e(oe,myr),e(oe,M5),e(M5,JTe),e(JTe,gyr),e(M5,hyr),e(M5,pJ),e(pJ,pyr),e(M5,_yr),e(oe,uyr),e(oe,E5),e(E5,YTe),e(YTe,byr),e(E5,vyr),e(E5,_J),e(_J,Fyr),e(E5,Tyr),e(oe,Myr),e(oe,C5),e(C5,KTe),e(KTe,Eyr),e(C5,Cyr),e(C5,uJ),e(uJ,wyr),e(C5,Ayr),e(oe,yyr),e(oe,w5),e(w5,ZTe),e(ZTe,Lyr),e(w5,xyr),e(w5,bJ),e(bJ,$yr),e(w5,kyr),e(oe,Syr),e(oe,A5),e(A5,eMe),e(eMe,Ryr),e(A5,Pyr),e(A5,vJ),e(vJ,Byr),e(A5,Iyr),e(oe,qyr),e(oe,y5),e(y5,oMe),e(oMe,Nyr),e(y5,jyr),e(y5,FJ),e(FJ,Dyr),e(y5,Gyr),e(oe,Oyr),e(oe,L5),e(L5,rMe),e(rMe,Vyr),e(L5,Xyr),e(L5,TJ),e(TJ,zyr),e(L5,Wyr),e(oe,Qyr),e(oe,x5),e(x5,tMe),e(tMe,Hyr),e(x5,Uyr),e(x5,MJ),e(MJ,Jyr),e(x5,Yyr),e(oe,Kyr),e(oe,$5),e($5,aMe),e(aMe,Zyr),e($5,eLr),e($5,EJ),e(EJ,oLr),e($5,rLr),e(oe,tLr),e(oe,k5),e(k5,nMe),e(nMe,aLr),e(k5,nLr),e(k5,CJ),e(CJ,sLr),e(k5,lLr),e(oe,iLr),e(oe,S5),e(S5,sMe),e(sMe,dLr),e(S5,cLr),e(S5,wJ),e(wJ,fLr),e(S5,mLr),e(oe,gLr),e(oe,R5),e(R5,lMe),e(lMe,hLr),e(R5,pLr),e(R5,AJ),e(AJ,_Lr),e(R5,uLr),e(oe,bLr),e(oe,P5),e(P5,iMe),e(iMe,vLr),e(P5,FLr),e(P5,yJ),e(yJ,TLr),e(P5,MLr),e(oe,ELr),e(oe,B5),e(B5,dMe),e(dMe,CLr),e(B5,wLr),e(B5,LJ),e(LJ,ALr),e(B5,yLr),e(oe,LLr),e(oe,I5),e(I5,cMe),e(cMe,xLr),e(I5,$Lr),e(I5,xJ),e(xJ,kLr),e(I5,SLr),e(oe,RLr),e(oe,q5),e(q5,fMe),e(fMe,PLr),e(q5,BLr),e(q5,$J),e($J,ILr),e(q5,qLr),e(oe,NLr),e(oe,N5),e(N5,mMe),e(mMe,jLr),e(N5,DLr),e(N5,kJ),e(kJ,GLr),e(N5,OLr),e(oe,VLr),e(oe,j5),e(j5,gMe),e(gMe,XLr),e(j5,zLr),e(j5,SJ),e(SJ,WLr),e(j5,QLr),e(jr,HLr),M(D5,jr,null),b(f,PNe,u),b(f,kc,u),e(kc,G5),e(G5,hMe),M(u9,hMe,null),e(kc,ULr),e(kc,pMe),e(pMe,JLr),b(f,BNe,u),b(f,mr,u),M(b9,mr,null),e(mr,YLr),e(mr,Sc),e(Sc,KLr),e(Sc,RJ),e(RJ,ZLr),e(Sc,e8r),e(Sc,PJ),e(PJ,o8r),e(Sc,r8r),e(mr,t8r),e(mr,v9),e(v9,a8r),e(v9,_Me),e(_Me,n8r),e(v9,s8r),e(mr,l8r),e(mr,Ot),M(F9,Ot,null),e(Ot,i8r),e(Ot,uMe),e(uMe,d8r),e(Ot,c8r),e(Ot,Rc),e(Rc,f8r),e(Rc,bMe),e(bMe,m8r),e(Rc,g8r),e(Rc,BJ),e(BJ,h8r),e(Rc,p8r),e(Ot,_8r),M(O5,Ot,null),e(mr,u8r),e(mr,Dr),M(T9,Dr,null),e(Dr,b8r),e(Dr,vMe),e(vMe,v8r),e(Dr,F8r),e(Dr,pn),e(pn,T8r),e(pn,FMe),e(FMe,M8r),e(pn,E8r),e(pn,TMe),e(TMe,C8r),e(pn,w8r),e(pn,MMe),e(MMe,A8r),e(pn,y8r),e(Dr,L8r),e(Dr,Le),e(Le,V5),e(V5,EMe),e(EMe,x8r),e(V5,$8r),e(V5,IJ),e(IJ,k8r),e(V5,S8r),e(Le,R8r),e(Le,X5),e(X5,CMe),e(CMe,P8r),e(X5,B8r),e(X5,qJ),e(qJ,I8r),e(X5,q8r),e(Le,N8r),e(Le,z5),e(z5,wMe),e(wMe,j8r),e(z5,D8r),e(z5,NJ),e(NJ,G8r),e(z5,O8r),e(Le,V8r),e(Le,W5),e(W5,AMe),e(AMe,X8r),e(W5,z8r),e(W5,jJ),e(jJ,W8r),e(W5,Q8r),e(Le,H8r),e(Le,Q5),e(Q5,yMe),e(yMe,U8r),e(Q5,J8r),e(Q5,DJ),e(DJ,Y8r),e(Q5,K8r),e(Le,Z8r),e(Le,H5),e(H5,LMe),e(LMe,e9r),e(H5,o9r),e(H5,GJ),e(GJ,r9r),e(H5,t9r),e(Le,a9r),e(Le,U5),e(U5,xMe),e(xMe,n9r),e(U5,s9r),e(U5,OJ),e(OJ,l9r),e(U5,i9r),e(Le,d9r),e(Le,J5),e(J5,$Me),e($Me,c9r),e(J5,f9r),e(J5,VJ),e(VJ,m9r),e(J5,g9r),e(Le,h9r),e(Le,Y5),e(Y5,kMe),e(kMe,p9r),e(Y5,_9r),e(Y5,XJ),e(XJ,u9r),e(Y5,b9r),e(Le,v9r),e(Le,K5),e(K5,SMe),e(SMe,F9r),e(K5,T9r),e(K5,zJ),e(zJ,M9r),e(K5,E9r),e(Dr,C9r),M(Z5,Dr,null),b(f,INe,u),b(f,Pc,u),e(Pc,e3),e(e3,RMe),M(M9,RMe,null),e(Pc,w9r),e(Pc,PMe),e(PMe,A9r),b(f,qNe,u),b(f,gr,u),M(E9,gr,null),e(gr,y9r),e(gr,Bc),e(Bc,L9r),e(Bc,WJ),e(WJ,x9r),e(Bc,$9r),e(Bc,QJ),e(QJ,k9r),e(Bc,S9r),e(gr,R9r),e(gr,C9),e(C9,P9r),e(C9,BMe),e(BMe,B9r),e(C9,I9r),e(gr,q9r),e(gr,Vt),M(w9,Vt,null),e(Vt,N9r),e(Vt,IMe),e(IMe,j9r),e(Vt,D9r),e(Vt,Ic),e(Ic,G9r),e(Ic,qMe),e(qMe,O9r),e(Ic,V9r),e(Ic,HJ),e(HJ,X9r),e(Ic,z9r),e(Vt,W9r),M(o3,Vt,null),e(gr,Q9r),e(gr,Gr),M(A9,Gr,null),e(Gr,H9r),e(Gr,NMe),e(NMe,U9r),e(Gr,J9r),e(Gr,_n),e(_n,Y9r),e(_n,jMe),e(jMe,K9r),e(_n,Z9r),e(_n,DMe),e(DMe,exr),e(_n,oxr),e(_n,GMe),e(GMe,rxr),e(_n,txr),e(Gr,axr),e(Gr,Me),e(Me,r3),e(r3,OMe),e(OMe,nxr),e(r3,sxr),e(r3,UJ),e(UJ,lxr),e(r3,ixr),e(Me,dxr),e(Me,t3),e(t3,VMe),e(VMe,cxr),e(t3,fxr),e(t3,JJ),e(JJ,mxr),e(t3,gxr),e(Me,hxr),e(Me,a3),e(a3,XMe),e(XMe,pxr),e(a3,_xr),e(a3,YJ),e(YJ,uxr),e(a3,bxr),e(Me,vxr),e(Me,n3),e(n3,zMe),e(zMe,Fxr),e(n3,Txr),e(n3,KJ),e(KJ,Mxr),e(n3,Exr),e(Me,Cxr),e(Me,s3),e(s3,WMe),e(WMe,wxr),e(s3,Axr),e(s3,ZJ),e(ZJ,yxr),e(s3,Lxr),e(Me,xxr),e(Me,l3),e(l3,QMe),e(QMe,$xr),e(l3,kxr),e(l3,eY),e(eY,Sxr),e(l3,Rxr),e(Me,Pxr),e(Me,i3),e(i3,HMe),e(HMe,Bxr),e(i3,Ixr),e(i3,oY),e(oY,qxr),e(i3,Nxr),e(Me,jxr),e(Me,d3),e(d3,UMe),e(UMe,Dxr),e(d3,Gxr),e(d3,rY),e(rY,Oxr),e(d3,Vxr),e(Me,Xxr),e(Me,c3),e(c3,JMe),e(JMe,zxr),e(c3,Wxr),e(c3,tY),e(tY,Qxr),e(c3,Hxr),e(Me,Uxr),e(Me,f3),e(f3,YMe),e(YMe,Jxr),e(f3,Yxr),e(f3,aY),e(aY,Kxr),e(f3,Zxr),e(Me,e$r),e(Me,m3),e(m3,KMe),e(KMe,o$r),e(m3,r$r),e(m3,nY),e(nY,t$r),e(m3,a$r),e(Me,n$r),e(Me,g3),e(g3,ZMe),e(ZMe,s$r),e(g3,l$r),e(g3,sY),e(sY,i$r),e(g3,d$r),e(Gr,c$r),M(h3,Gr,null),b(f,NNe,u),b(f,qc,u),e(qc,p3),e(p3,e4e),M(y9,e4e,null),e(qc,f$r),e(qc,o4e),e(o4e,m$r),b(f,jNe,u),b(f,hr,u),M(L9,hr,null),e(hr,g$r),e(hr,Nc),e(Nc,h$r),e(Nc,lY),e(lY,p$r),e(Nc,_$r),e(Nc,iY),e(iY,u$r),e(Nc,b$r),e(hr,v$r),e(hr,x9),e(x9,F$r),e(x9,r4e),e(r4e,T$r),e(x9,M$r),e(hr,E$r),e(hr,Xt),M($9,Xt,null),e(Xt,C$r),e(Xt,t4e),e(t4e,w$r),e(Xt,A$r),e(Xt,jc),e(jc,y$r),e(jc,a4e),e(a4e,L$r),e(jc,x$r),e(jc,dY),e(dY,$$r),e(jc,k$r),e(Xt,S$r),M(_3,Xt,null),e(hr,R$r),e(hr,Or),M(k9,Or,null),e(Or,P$r),e(Or,n4e),e(n4e,B$r),e(Or,I$r),e(Or,un),e(un,q$r),e(un,s4e),e(s4e,N$r),e(un,j$r),e(un,l4e),e(l4e,D$r),e(un,G$r),e(un,i4e),e(i4e,O$r),e(un,V$r),e(Or,X$r),e(Or,xe),e(xe,u3),e(u3,d4e),e(d4e,z$r),e(u3,W$r),e(u3,cY),e(cY,Q$r),e(u3,H$r),e(xe,U$r),e(xe,b3),e(b3,c4e),e(c4e,J$r),e(b3,Y$r),e(b3,fY),e(fY,K$r),e(b3,Z$r),e(xe,ekr),e(xe,v3),e(v3,f4e),e(f4e,okr),e(v3,rkr),e(v3,mY),e(mY,tkr),e(v3,akr),e(xe,nkr),e(xe,F3),e(F3,m4e),e(m4e,skr),e(F3,lkr),e(F3,gY),e(gY,ikr),e(F3,dkr),e(xe,ckr),e(xe,T3),e(T3,g4e),e(g4e,fkr),e(T3,mkr),e(T3,hY),e(hY,gkr),e(T3,hkr),e(xe,pkr),e(xe,M3),e(M3,h4e),e(h4e,_kr),e(M3,ukr),e(M3,pY),e(pY,bkr),e(M3,vkr),e(xe,Fkr),e(xe,E3),e(E3,p4e),e(p4e,Tkr),e(E3,Mkr),e(E3,_Y),e(_Y,Ekr),e(E3,Ckr),e(xe,wkr),e(xe,C3),e(C3,_4e),e(_4e,Akr),e(C3,ykr),e(C3,uY),e(uY,Lkr),e(C3,xkr),e(xe,$kr),e(xe,w3),e(w3,u4e),e(u4e,kkr),e(w3,Skr),e(w3,bY),e(bY,Rkr),e(w3,Pkr),e(xe,Bkr),e(xe,A3),e(A3,b4e),e(b4e,Ikr),e(A3,qkr),e(A3,vY),e(vY,Nkr),e(A3,jkr),e(Or,Dkr),M(y3,Or,null),b(f,DNe,u),b(f,Dc,u),e(Dc,L3),e(L3,v4e),M(S9,v4e,null),e(Dc,Gkr),e(Dc,F4e),e(F4e,Okr),b(f,GNe,u),b(f,pr,u),M(R9,pr,null),e(pr,Vkr),e(pr,Gc),e(Gc,Xkr),e(Gc,FY),e(FY,zkr),e(Gc,Wkr),e(Gc,TY),e(TY,Qkr),e(Gc,Hkr),e(pr,Ukr),e(pr,P9),e(P9,Jkr),e(P9,T4e),e(T4e,Ykr),e(P9,Kkr),e(pr,Zkr),e(pr,zt),M(B9,zt,null),e(zt,eSr),e(zt,M4e),e(M4e,oSr),e(zt,rSr),e(zt,Oc),e(Oc,tSr),e(Oc,E4e),e(E4e,aSr),e(Oc,nSr),e(Oc,MY),e(MY,sSr),e(Oc,lSr),e(zt,iSr),M(x3,zt,null),e(pr,dSr),e(pr,Vr),M(I9,Vr,null),e(Vr,cSr),e(Vr,C4e),e(C4e,fSr),e(Vr,mSr),e(Vr,bn),e(bn,gSr),e(bn,w4e),e(w4e,hSr),e(bn,pSr),e(bn,A4e),e(A4e,_Sr),e(bn,uSr),e(bn,y4e),e(y4e,bSr),e(bn,vSr),e(Vr,FSr),e(Vr,Pe),e(Pe,$3),e($3,L4e),e(L4e,TSr),e($3,MSr),e($3,EY),e(EY,ESr),e($3,CSr),e(Pe,wSr),e(Pe,k3),e(k3,x4e),e(x4e,ASr),e(k3,ySr),e(k3,CY),e(CY,LSr),e(k3,xSr),e(Pe,$Sr),e(Pe,S3),e(S3,$4e),e($4e,kSr),e(S3,SSr),e(S3,wY),e(wY,RSr),e(S3,PSr),e(Pe,BSr),e(Pe,R3),e(R3,k4e),e(k4e,ISr),e(R3,qSr),e(R3,AY),e(AY,NSr),e(R3,jSr),e(Pe,DSr),e(Pe,P3),e(P3,S4e),e(S4e,GSr),e(P3,OSr),e(P3,yY),e(yY,VSr),e(P3,XSr),e(Pe,zSr),e(Pe,B3),e(B3,R4e),e(R4e,WSr),e(B3,QSr),e(B3,LY),e(LY,HSr),e(B3,USr),e(Pe,JSr),e(Pe,I3),e(I3,P4e),e(P4e,YSr),e(I3,KSr),e(I3,xY),e(xY,ZSr),e(I3,eRr),e(Pe,oRr),e(Pe,q3),e(q3,B4e),e(B4e,rRr),e(q3,tRr),e(q3,$Y),e($Y,aRr),e(q3,nRr),e(Pe,sRr),e(Pe,N3),e(N3,I4e),e(I4e,lRr),e(N3,iRr),e(N3,kY),e(kY,dRr),e(N3,cRr),e(Vr,fRr),M(j3,Vr,null),b(f,ONe,u),b(f,Vc,u),e(Vc,D3),e(D3,q4e),M(q9,q4e,null),e(Vc,mRr),e(Vc,N4e),e(N4e,gRr),b(f,VNe,u),b(f,_r,u),M(N9,_r,null),e(_r,hRr),e(_r,Xc),e(Xc,pRr),e(Xc,SY),e(SY,_Rr),e(Xc,uRr),e(Xc,RY),e(RY,bRr),e(Xc,vRr),e(_r,FRr),e(_r,j9),e(j9,TRr),e(j9,j4e),e(j4e,MRr),e(j9,ERr),e(_r,CRr),e(_r,Wt),M(D9,Wt,null),e(Wt,wRr),e(Wt,D4e),e(D4e,ARr),e(Wt,yRr),e(Wt,zc),e(zc,LRr),e(zc,G4e),e(G4e,xRr),e(zc,$Rr),e(zc,PY),e(PY,kRr),e(zc,SRr),e(Wt,RRr),M(G3,Wt,null),e(_r,PRr),e(_r,Xr),M(G9,Xr,null),e(Xr,BRr),e(Xr,O4e),e(O4e,IRr),e(Xr,qRr),e(Xr,vn),e(vn,NRr),e(vn,V4e),e(V4e,jRr),e(vn,DRr),e(vn,X4e),e(X4e,GRr),e(vn,ORr),e(vn,z4e),e(z4e,VRr),e(vn,XRr),e(Xr,zRr),e(Xr,$e),e($e,O3),e(O3,W4e),e(W4e,WRr),e(O3,QRr),e(O3,BY),e(BY,HRr),e(O3,URr),e($e,JRr),e($e,V3),e(V3,Q4e),e(Q4e,YRr),e(V3,KRr),e(V3,IY),e(IY,ZRr),e(V3,ePr),e($e,oPr),e($e,X3),e(X3,H4e),e(H4e,rPr),e(X3,tPr),e(X3,qY),e(qY,aPr),e(X3,nPr),e($e,sPr),e($e,z3),e(z3,U4e),e(U4e,lPr),e(z3,iPr),e(z3,NY),e(NY,dPr),e(z3,cPr),e($e,fPr),e($e,W3),e(W3,J4e),e(J4e,mPr),e(W3,gPr),e(W3,jY),e(jY,hPr),e(W3,pPr),e($e,_Pr),e($e,Q3),e(Q3,Y4e),e(Y4e,uPr),e(Q3,bPr),e(Q3,DY),e(DY,vPr),e(Q3,FPr),e($e,TPr),e($e,H3),e(H3,K4e),e(K4e,MPr),e(H3,EPr),e(H3,GY),e(GY,CPr),e(H3,wPr),e($e,APr),e($e,U3),e(U3,Z4e),e(Z4e,yPr),e(U3,LPr),e(U3,OY),e(OY,xPr),e(U3,$Pr),e($e,kPr),e($e,J3),e(J3,eEe),e(eEe,SPr),e(J3,RPr),e(J3,VY),e(VY,PPr),e(J3,BPr),e($e,IPr),e($e,Y3),e(Y3,oEe),e(oEe,qPr),e(Y3,NPr),e(Y3,XY),e(XY,jPr),e(Y3,DPr),e(Xr,GPr),M(K3,Xr,null),b(f,XNe,u),b(f,Wc,u),e(Wc,Z3),e(Z3,rEe),M(O9,rEe,null),e(Wc,OPr),e(Wc,tEe),e(tEe,VPr),b(f,zNe,u),b(f,ur,u),M(V9,ur,null),e(ur,XPr),e(ur,Qc),e(Qc,zPr),e(Qc,zY),e(zY,WPr),e(Qc,QPr),e(Qc,WY),e(WY,HPr),e(Qc,UPr),e(ur,JPr),e(ur,X9),e(X9,YPr),e(X9,aEe),e(aEe,KPr),e(X9,ZPr),e(ur,eBr),e(ur,Qt),M(z9,Qt,null),e(Qt,oBr),e(Qt,nEe),e(nEe,rBr),e(Qt,tBr),e(Qt,Hc),e(Hc,aBr),e(Hc,sEe),e(sEe,nBr),e(Hc,sBr),e(Hc,QY),e(QY,lBr),e(Hc,iBr),e(Qt,dBr),M(ew,Qt,null),e(ur,cBr),e(ur,zr),M(W9,zr,null),e(zr,fBr),e(zr,lEe),e(lEe,mBr),e(zr,gBr),e(zr,Fn),e(Fn,hBr),e(Fn,iEe),e(iEe,pBr),e(Fn,_Br),e(Fn,dEe),e(dEe,uBr),e(Fn,bBr),e(Fn,cEe),e(cEe,vBr),e(Fn,FBr),e(zr,TBr),e(zr,ke),e(ke,ow),e(ow,fEe),e(fEe,MBr),e(ow,EBr),e(ow,HY),e(HY,CBr),e(ow,wBr),e(ke,ABr),e(ke,rw),e(rw,mEe),e(mEe,yBr),e(rw,LBr),e(rw,UY),e(UY,xBr),e(rw,$Br),e(ke,kBr),e(ke,tw),e(tw,gEe),e(gEe,SBr),e(tw,RBr),e(tw,JY),e(JY,PBr),e(tw,BBr),e(ke,IBr),e(ke,aw),e(aw,hEe),e(hEe,qBr),e(aw,NBr),e(aw,YY),e(YY,jBr),e(aw,DBr),e(ke,GBr),e(ke,nw),e(nw,pEe),e(pEe,OBr),e(nw,VBr),e(nw,KY),e(KY,XBr),e(nw,zBr),e(ke,WBr),e(ke,sw),e(sw,_Ee),e(_Ee,QBr),e(sw,HBr),e(sw,ZY),e(ZY,UBr),e(sw,JBr),e(ke,YBr),e(ke,lw),e(lw,uEe),e(uEe,KBr),e(lw,ZBr),e(lw,eK),e(eK,eIr),e(lw,oIr),e(ke,rIr),e(ke,iw),e(iw,bEe),e(bEe,tIr),e(iw,aIr),e(iw,oK),e(oK,nIr),e(iw,sIr),e(ke,lIr),e(ke,dw),e(dw,vEe),e(vEe,iIr),e(dw,dIr),e(dw,rK),e(rK,cIr),e(dw,fIr),e(ke,mIr),e(ke,cw),e(cw,FEe),e(FEe,gIr),e(cw,hIr),e(cw,tK),e(tK,pIr),e(cw,_Ir),e(zr,uIr),M(fw,zr,null),b(f,WNe,u),b(f,Uc,u),e(Uc,mw),e(mw,TEe),M(Q9,TEe,null),e(Uc,bIr),e(Uc,MEe),e(MEe,vIr),b(f,QNe,u),b(f,br,u),M(H9,br,null),e(br,FIr),e(br,Jc),e(Jc,TIr),e(Jc,aK),e(aK,MIr),e(Jc,EIr),e(Jc,nK),e(nK,CIr),e(Jc,wIr),e(br,AIr),e(br,U9),e(U9,yIr),e(U9,EEe),e(EEe,LIr),e(U9,xIr),e(br,$Ir),e(br,Ht),M(J9,Ht,null),e(Ht,kIr),e(Ht,CEe),e(CEe,SIr),e(Ht,RIr),e(Ht,Yc),e(Yc,PIr),e(Yc,wEe),e(wEe,BIr),e(Yc,IIr),e(Yc,sK),e(sK,qIr),e(Yc,NIr),e(Ht,jIr),M(gw,Ht,null),e(br,DIr),e(br,Wr),M(Y9,Wr,null),e(Wr,GIr),e(Wr,AEe),e(AEe,OIr),e(Wr,VIr),e(Wr,Tn),e(Tn,XIr),e(Tn,yEe),e(yEe,zIr),e(Tn,WIr),e(Tn,LEe),e(LEe,QIr),e(Tn,HIr),e(Tn,xEe),e(xEe,UIr),e(Tn,JIr),e(Wr,YIr),e(Wr,Ge),e(Ge,hw),e(hw,$Ee),e($Ee,KIr),e(hw,ZIr),e(hw,lK),e(lK,eqr),e(hw,oqr),e(Ge,rqr),e(Ge,pw),e(pw,kEe),e(kEe,tqr),e(pw,aqr),e(pw,iK),e(iK,nqr),e(pw,sqr),e(Ge,lqr),e(Ge,_w),e(_w,SEe),e(SEe,iqr),e(_w,dqr),e(_w,dK),e(dK,cqr),e(_w,fqr),e(Ge,mqr),e(Ge,uw),e(uw,REe),e(REe,gqr),e(uw,hqr),e(uw,cK),e(cK,pqr),e(uw,_qr),e(Ge,uqr),e(Ge,bw),e(bw,PEe),e(PEe,bqr),e(bw,vqr),e(bw,fK),e(fK,Fqr),e(bw,Tqr),e(Ge,Mqr),e(Ge,vw),e(vw,BEe),e(BEe,Eqr),e(vw,Cqr),e(vw,mK),e(mK,wqr),e(vw,Aqr),e(Ge,yqr),e(Ge,Fw),e(Fw,IEe),e(IEe,Lqr),e(Fw,xqr),e(Fw,gK),e(gK,$qr),e(Fw,kqr),e(Ge,Sqr),e(Ge,Tw),e(Tw,qEe),e(qEe,Rqr),e(Tw,Pqr),e(Tw,hK),e(hK,Bqr),e(Tw,Iqr),e(Wr,qqr),M(Mw,Wr,null),b(f,HNe,u),b(f,Kc,u),e(Kc,Ew),e(Ew,NEe),M(K9,NEe,null),e(Kc,Nqr),e(Kc,jEe),e(jEe,jqr),b(f,UNe,u),b(f,vr,u),M(Z9,vr,null),e(vr,Dqr),e(vr,Zc),e(Zc,Gqr),e(Zc,pK),e(pK,Oqr),e(Zc,Vqr),e(Zc,_K),e(_K,Xqr),e(Zc,zqr),e(vr,Wqr),e(vr,ex),e(ex,Qqr),e(ex,DEe),e(DEe,Hqr),e(ex,Uqr),e(vr,Jqr),e(vr,Ut),M(ox,Ut,null),e(Ut,Yqr),e(Ut,GEe),e(GEe,Kqr),e(Ut,Zqr),e(Ut,ef),e(ef,eNr),e(ef,OEe),e(OEe,oNr),e(ef,rNr),e(ef,uK),e(uK,tNr),e(ef,aNr),e(Ut,nNr),M(Cw,Ut,null),e(vr,sNr),e(vr,Qr),M(rx,Qr,null),e(Qr,lNr),e(Qr,VEe),e(VEe,iNr),e(Qr,dNr),e(Qr,Mn),e(Mn,cNr),e(Mn,XEe),e(XEe,fNr),e(Mn,mNr),e(Mn,zEe),e(zEe,gNr),e(Mn,hNr),e(Mn,WEe),e(WEe,pNr),e(Mn,_Nr),e(Qr,uNr),e(Qr,Oe),e(Oe,ww),e(ww,QEe),e(QEe,bNr),e(ww,vNr),e(ww,bK),e(bK,FNr),e(ww,TNr),e(Oe,MNr),e(Oe,Aw),e(Aw,HEe),e(HEe,ENr),e(Aw,CNr),e(Aw,vK),e(vK,wNr),e(Aw,ANr),e(Oe,yNr),e(Oe,yw),e(yw,UEe),e(UEe,LNr),e(yw,xNr),e(yw,FK),e(FK,$Nr),e(yw,kNr),e(Oe,SNr),e(Oe,Lw),e(Lw,JEe),e(JEe,RNr),e(Lw,PNr),e(Lw,TK),e(TK,BNr),e(Lw,INr),e(Oe,qNr),e(Oe,xw),e(xw,YEe),e(YEe,NNr),e(xw,jNr),e(xw,MK),e(MK,DNr),e(xw,GNr),e(Oe,ONr),e(Oe,$w),e($w,KEe),e(KEe,VNr),e($w,XNr),e($w,EK),e(EK,zNr),e($w,WNr),e(Oe,QNr),e(Oe,kw),e(kw,ZEe),e(ZEe,HNr),e(kw,UNr),e(kw,CK),e(CK,JNr),e(kw,YNr),e(Oe,KNr),e(Oe,Sw),e(Sw,eCe),e(eCe,ZNr),e(Sw,ejr),e(Sw,wK),e(wK,ojr),e(Sw,rjr),e(Qr,tjr),M(Rw,Qr,null),b(f,JNe,u),b(f,of,u),e(of,Pw),e(Pw,oCe),M(tx,oCe,null),e(of,ajr),e(of,rCe),e(rCe,njr),b(f,YNe,u),b(f,Fr,u),M(ax,Fr,null),e(Fr,sjr),e(Fr,rf),e(rf,ljr),e(rf,AK),e(AK,ijr),e(rf,djr),e(rf,yK),e(yK,cjr),e(rf,fjr),e(Fr,mjr),e(Fr,nx),e(nx,gjr),e(nx,tCe),e(tCe,hjr),e(nx,pjr),e(Fr,_jr),e(Fr,Jt),M(sx,Jt,null),e(Jt,ujr),e(Jt,aCe),e(aCe,bjr),e(Jt,vjr),e(Jt,tf),e(tf,Fjr),e(tf,nCe),e(nCe,Tjr),e(tf,Mjr),e(tf,LK),e(LK,Ejr),e(tf,Cjr),e(Jt,wjr),M(Bw,Jt,null),e(Fr,Ajr),e(Fr,Hr),M(lx,Hr,null),e(Hr,yjr),e(Hr,sCe),e(sCe,Ljr),e(Hr,xjr),e(Hr,En),e(En,$jr),e(En,lCe),e(lCe,kjr),e(En,Sjr),e(En,iCe),e(iCe,Rjr),e(En,Pjr),e(En,dCe),e(dCe,Bjr),e(En,Ijr),e(Hr,qjr),e(Hr,cCe),e(cCe,Iw),e(Iw,fCe),e(fCe,Njr),e(Iw,jjr),e(Iw,xK),e(xK,Djr),e(Iw,Gjr),e(Hr,Ojr),M(qw,Hr,null),b(f,KNe,u),b(f,af,u),e(af,Nw),e(Nw,mCe),M(ix,mCe,null),e(af,Vjr),e(af,gCe),e(gCe,Xjr),b(f,ZNe,u),b(f,Tr,u),M(dx,Tr,null),e(Tr,zjr),e(Tr,nf),e(nf,Wjr),e(nf,$K),e($K,Qjr),e(nf,Hjr),e(nf,kK),e(kK,Ujr),e(nf,Jjr),e(Tr,Yjr),e(Tr,cx),e(cx,Kjr),e(cx,hCe),e(hCe,Zjr),e(cx,eDr),e(Tr,oDr),e(Tr,Yt),M(fx,Yt,null),e(Yt,rDr),e(Yt,pCe),e(pCe,tDr),e(Yt,aDr),e(Yt,sf),e(sf,nDr),e(sf,_Ce),e(_Ce,sDr),e(sf,lDr),e(sf,SK),e(SK,iDr),e(sf,dDr),e(Yt,cDr),M(jw,Yt,null),e(Tr,fDr),e(Tr,Ur),M(mx,Ur,null),e(Ur,mDr),e(Ur,uCe),e(uCe,gDr),e(Ur,hDr),e(Ur,Cn),e(Cn,pDr),e(Cn,bCe),e(bCe,_Dr),e(Cn,uDr),e(Cn,vCe),e(vCe,bDr),e(Cn,vDr),e(Cn,FCe),e(FCe,FDr),e(Cn,TDr),e(Ur,MDr),e(Ur,gx),e(gx,Dw),e(Dw,TCe),e(TCe,EDr),e(Dw,CDr),e(Dw,RK),e(RK,wDr),e(Dw,ADr),e(gx,yDr),e(gx,Gw),e(Gw,MCe),e(MCe,LDr),e(Gw,xDr),e(Gw,PK),e(PK,$Dr),e(Gw,kDr),e(Ur,SDr),M(Ow,Ur,null),b(f,eje,u),b(f,lf,u),e(lf,Vw),e(Vw,ECe),M(hx,ECe,null),e(lf,RDr),e(lf,CCe),e(CCe,PDr),b(f,oje,u),b(f,Mr,u),M(px,Mr,null),e(Mr,BDr),e(Mr,df),e(df,IDr),e(df,BK),e(BK,qDr),e(df,NDr),e(df,IK),e(IK,jDr),e(df,DDr),e(Mr,GDr),e(Mr,_x),e(_x,ODr),e(_x,wCe),e(wCe,VDr),e(_x,XDr),e(Mr,zDr),e(Mr,Kt),M(ux,Kt,null),e(Kt,WDr),e(Kt,ACe),e(ACe,QDr),e(Kt,HDr),e(Kt,cf),e(cf,UDr),e(cf,yCe),e(yCe,JDr),e(cf,YDr),e(cf,qK),e(qK,KDr),e(cf,ZDr),e(Kt,eGr),M(Xw,Kt,null),e(Mr,oGr),e(Mr,Jr),M(bx,Jr,null),e(Jr,rGr),e(Jr,LCe),e(LCe,tGr),e(Jr,aGr),e(Jr,wn),e(wn,nGr),e(wn,xCe),e(xCe,sGr),e(wn,lGr),e(wn,$Ce),e($Ce,iGr),e(wn,dGr),e(wn,kCe),e(kCe,cGr),e(wn,fGr),e(Jr,mGr),e(Jr,SCe),e(SCe,zw),e(zw,RCe),e(RCe,gGr),e(zw,hGr),e(zw,NK),e(NK,pGr),e(zw,_Gr),e(Jr,uGr),M(Ww,Jr,null),rje=!0},p(f,[u]){const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),vf.$set(vx);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),vg.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),Zg.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),Lh.$set(ICe);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),xh.$set(Fx);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),Hh.$set(qCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Uh.$set(An);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),Kh.$set(NCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),X_.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),W_.$set(DCe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),Iu.$set(Tx);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),Nu.$set(GCe);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),M2.$set(Mx);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),C2.$set(OCe);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),l1.$set(Ex);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),d1.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),y1.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),x1.$set(zCe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),E7.$set(ff);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),w7.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),rb.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),ab.$set(HCe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),fb.$set(Cx);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),gb.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),Hb.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),Jb.$set(YCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),qv.$set(et);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),jv.$set(wx);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),Ov.$set(KCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Xv.$set(Ax);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),tF.$set(ZCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),nF.$set(ot);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),iF.$set(e5e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),cF.$set(mf);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),TF.$set(o5e);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),EF.$set(r5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),$F.$set(y);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),SF.$set(Qw);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),VF.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),zF.$set(a5e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),UF.$set(Hw);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),YF.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),aT.$set(s5e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),sT.$set(Uw);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),fT.$set(l5e);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),gT.$set(i5e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),uT.$set(Jw);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),vT.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),MT.$set(c5e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),CT.$set(Yw);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),$T.$set(f5e);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),ST.$set(m5e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),BT.$set(Kw);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),qT.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),$M.$set(h5e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),SM.$set(Zw);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),r4.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),a4.$set(_5e);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),b4.$set(e0);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),F4.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),w4.$set(b5e);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),y4.$set(o0);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),H4.$set(v5e);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),J4.$set(F5e);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),lE.$set(r0);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),dE.$set(T5e);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),IE.$set(M5e);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),NE.$set(t0);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),rC.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),aC.$set(C5e);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),lC.$set(a0);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),dC.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),fC.$set(A5e);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),gC.$set(n0);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),PC.$set(y5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),IC.$set(L5e);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),t5.$set(s0);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),n5.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),l5.$set($5e);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),d5.$set(l0);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),f5.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),g5.$set(S5e);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),D5.$set(i0);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),O5.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),Z5.$set(P5e);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),o3.$set(d0);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),h3.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),_3.$set(I5e);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),y3.$set(c0);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),x3.$set(q5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),j3.$set(N5e);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),G3.$set(f0);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),K3.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),ew.$set(D5e);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),fw.$set(m0);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),gw.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),Mw.$set(O5e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),Cw.$set(g0);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),Rw.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),Bw.$set(X5e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),qw.$set(h0);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),jw.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),Ow.$set(W5e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),Xw.$set(p0);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),Ww.$set(Q5e)},i(f){rje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(vf.$$.fragment,f),E(_6.$$.fragment,f),E(u6.$$.fragment,f),E(F6.$$.fragment,f),E(vg.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(Zg.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(S6.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(N6.$$.fragment,f),E(Hh.$$.fragment,f),E(Uh.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(Kh.$$.fragment,f),E(X6.$$.fragment,f),E(X_.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(W_.$$.fragment,f),E(U6.$$.fragment,f),E(Iu.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(Nu.$$.fragment,f),E(ey.$$.fragment,f),E(M2.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(C2.$$.fragment,f),E(ny.$$.fragment,f),E(l1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(d1.$$.fragment,f),E(cy.$$.fragment,f),E(y1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(x1.$$.fragment,f),E(py.$$.fragment,f),E(E7.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(w7.$$.fragment,f),E(Fy.$$.fragment,f),E(rb.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(ab.$$.fragment,f),E(wy.$$.fragment,f),E(fb.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(gb.$$.fragment,f),E($y.$$.fragment,f),E(Hb.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(Jb.$$.fragment,f),E(By.$$.fragment,f),E(qv.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(jv.$$.fragment,f),E(Dy.$$.fragment,f),E(Ov.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Xv.$$.fragment,f),E(zy.$$.fragment,f),E(tF.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(nF.$$.fragment,f),E(Jy.$$.fragment,f),E(iF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(cF.$$.fragment,f),E(oL.$$.fragment,f),E(TF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(EF.$$.fragment,f),E(sL.$$.fragment,f),E($F.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(SF.$$.fragment,f),E(fL.$$.fragment,f),E(VF.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(zF.$$.fragment,f),E(_L.$$.fragment,f),E(UF.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(YF.$$.fragment,f),E(ML.$$.fragment,f),E(aT.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(sT.$$.fragment,f),E(yL.$$.fragment,f),E(fT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(gT.$$.fragment,f),E(SL.$$.fragment,f),E(uT.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(vT.$$.fragment,f),E(NL.$$.fragment,f),E(MT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(CT.$$.fragment,f),E(VL.$$.fragment,f),E($T.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(ST.$$.fragment,f),E(HL.$$.fragment,f),E(BT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(qT.$$.fragment,f),E(ZL.$$.fragment,f),E($M.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(SM.$$.fragment,f),E(a8.$$.fragment,f),E(r4.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(a4.$$.fragment,f),E(d8.$$.fragment,f),E(b4.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(F4.$$.fragment,f),E(h8.$$.fragment,f),E(w4.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(y4.$$.fragment,f),E(v8.$$.fragment,f),E(H4.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(J4.$$.fragment,f),E(C8.$$.fragment,f),E(lE.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(dE.$$.fragment,f),E(x8.$$.fragment,f),E(IE.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(NE.$$.fragment,f),E(P8.$$.fragment,f),E(rC.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(aC.$$.fragment,f),E(j8.$$.fragment,f),E(lC.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(dC.$$.fragment,f),E(z8.$$.fragment,f),E(fC.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(gC.$$.fragment,f),E(J8.$$.fragment,f),E(PC.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(IC.$$.fragment,f),E(o9.$$.fragment,f),E(t5.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(n5.$$.fragment,f),E(s9.$$.fragment,f),E(l5.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(d5.$$.fragment,f),E(f9.$$.fragment,f),E(f5.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(g5.$$.fragment,f),E(_9.$$.fragment,f),E(D5.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(O5.$$.fragment,f),E(T9.$$.fragment,f),E(Z5.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(o3.$$.fragment,f),E(A9.$$.fragment,f),E(h3.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(_3.$$.fragment,f),E(k9.$$.fragment,f),E(y3.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(x3.$$.fragment,f),E(I9.$$.fragment,f),E(j3.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(G3.$$.fragment,f),E(G9.$$.fragment,f),E(K3.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(ew.$$.fragment,f),E(W9.$$.fragment,f),E(fw.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(gw.$$.fragment,f),E(Y9.$$.fragment,f),E(Mw.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(Cw.$$.fragment,f),E(rx.$$.fragment,f),E(Rw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(Bw.$$.fragment,f),E(lx.$$.fragment,f),E(qw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(jw.$$.fragment,f),E(mx.$$.fragment,f),E(Ow.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(Xw.$$.fragment,f),E(bx.$$.fragment,f),E(Ww.$$.fragment,f),rje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(vf.$$.fragment,f),C(_6.$$.fragment,f),C(u6.$$.fragment,f),C(F6.$$.fragment,f),C(vg.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(Zg.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(S6.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(N6.$$.fragment,f),C(Hh.$$.fragment,f),C(Uh.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(Kh.$$.fragment,f),C(X6.$$.fragment,f),C(X_.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(W_.$$.fragment,f),C(U6.$$.fragment,f),C(Iu.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(Nu.$$.fragment,f),C(ey.$$.fragment,f),C(M2.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(C2.$$.fragment,f),C(ny.$$.fragment,f),C(l1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(d1.$$.fragment,f),C(cy.$$.fragment,f),C(y1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(x1.$$.fragment,f),C(py.$$.fragment,f),C(E7.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(w7.$$.fragment,f),C(Fy.$$.fragment,f),C(rb.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(ab.$$.fragment,f),C(wy.$$.fragment,f),C(fb.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(gb.$$.fragment,f),C($y.$$.fragment,f),C(Hb.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(Jb.$$.fragment,f),C(By.$$.fragment,f),C(qv.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(jv.$$.fragment,f),C(Dy.$$.fragment,f),C(Ov.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Xv.$$.fragment,f),C(zy.$$.fragment,f),C(tF.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(nF.$$.fragment,f),C(Jy.$$.fragment,f),C(iF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(cF.$$.fragment,f),C(oL.$$.fragment,f),C(TF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(EF.$$.fragment,f),C(sL.$$.fragment,f),C($F.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(SF.$$.fragment,f),C(fL.$$.fragment,f),C(VF.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(zF.$$.fragment,f),C(_L.$$.fragment,f),C(UF.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(YF.$$.fragment,f),C(ML.$$.fragment,f),C(aT.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(sT.$$.fragment,f),C(yL.$$.fragment,f),C(fT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(gT.$$.fragment,f),C(SL.$$.fragment,f),C(uT.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(vT.$$.fragment,f),C(NL.$$.fragment,f),C(MT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(CT.$$.fragment,f),C(VL.$$.fragment,f),C($T.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(ST.$$.fragment,f),C(HL.$$.fragment,f),C(BT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(qT.$$.fragment,f),C(ZL.$$.fragment,f),C($M.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(SM.$$.fragment,f),C(a8.$$.fragment,f),C(r4.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(a4.$$.fragment,f),C(d8.$$.fragment,f),C(b4.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(F4.$$.fragment,f),C(h8.$$.fragment,f),C(w4.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(y4.$$.fragment,f),C(v8.$$.fragment,f),C(H4.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(J4.$$.fragment,f),C(C8.$$.fragment,f),C(lE.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(dE.$$.fragment,f),C(x8.$$.fragment,f),C(IE.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(NE.$$.fragment,f),C(P8.$$.fragment,f),C(rC.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(aC.$$.fragment,f),C(j8.$$.fragment,f),C(lC.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(dC.$$.fragment,f),C(z8.$$.fragment,f),C(fC.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(gC.$$.fragment,f),C(J8.$$.fragment,f),C(PC.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(IC.$$.fragment,f),C(o9.$$.fragment,f),C(t5.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(n5.$$.fragment,f),C(s9.$$.fragment,f),C(l5.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(d5.$$.fragment,f),C(f9.$$.fragment,f),C(f5.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(g5.$$.fragment,f),C(_9.$$.fragment,f),C(D5.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(O5.$$.fragment,f),C(T9.$$.fragment,f),C(Z5.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(o3.$$.fragment,f),C(A9.$$.fragment,f),C(h3.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(_3.$$.fragment,f),C(k9.$$.fragment,f),C(y3.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(x3.$$.fragment,f),C(I9.$$.fragment,f),C(j3.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(G3.$$.fragment,f),C(G9.$$.fragment,f),C(K3.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(ew.$$.fragment,f),C(W9.$$.fragment,f),C(fw.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(gw.$$.fragment,f),C(Y9.$$.fragment,f),C(Mw.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(Cw.$$.fragment,f),C(rx.$$.fragment,f),C(Rw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(Bw.$$.fragment,f),C(lx.$$.fragment,f),C(qw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(jw.$$.fragment,f),C(mx.$$.fragment,f),C(Ow.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(Xw.$$.fragment,f),C(bx.$$.fragment,f),C(Ww.$$.fragment,f),rje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(De),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(ZIe),f&&t(ui),w(h6),f&&t(eqe),f&&t(kn),f&&t(oqe),w(p6,f),f&&t(rqe),f&&t(I$),f&&t(tqe),w(vf,f),f&&t(aqe),f&&t(bi),w(_6),f&&t(nqe),f&&t(Co),w(u6),w(F6),w(vg),w(T6),f&&t(sqe),f&&t(Fi),w(M6),f&&t(lqe),f&&t(wo),w(E6),w(A6),w(Zg),w(y6),f&&t(iqe),f&&t(Ti),w(L6),f&&t(dqe),f&&t(Ao),w(x6),w(S6),w(Lh),w(xh),w(R6),f&&t(cqe),f&&t(Mi),w(P6),f&&t(fqe),f&&t(yo),w(B6),w(N6),w(Hh),w(Uh),w(j6),f&&t(mqe),f&&t(Ci),w(D6),f&&t(gqe),f&&t(Lo),w(G6),w(V6),w(Kh),w(X6),w(X_),f&&t(hqe),f&&t(yi),w(z6),f&&t(pqe),f&&t(xo),w(W6),w(H6),w(W_),w(U6),w(Iu),f&&t(_qe),f&&t($i),w(J6),f&&t(uqe),f&&t($o),w(Y6),w(Z6),w(Nu),w(ey),w(M2),f&&t(bqe),f&&t(Ri),w(oy),f&&t(vqe),f&&t(ko),w(ry),w(ay),w(C2),w(ny),w(l1),f&&t(Fqe),f&&t(Ii),w(sy),f&&t(Tqe),f&&t(So),w(ly),w(dy),w(d1),w(cy),w(y1),f&&t(Mqe),f&&t(ji),w(fy),f&&t(Eqe),f&&t(Ro),w(my),w(hy),w(x1),w(py),w(E7),f&&t(Cqe),f&&t(Oi),w(_y),f&&t(wqe),f&&t(Po),w(uy),w(vy),w(w7),w(Fy),w(rb),f&&t(Aqe),f&&t(zi),w(Ty),f&&t(yqe),f&&t(Bo),w(My),w(Cy),w(ab),w(wy),w(fb),f&&t(Lqe),f&&t(Hi),w(Ay),f&&t(xqe),f&&t(Io),w(yy),w(xy),w(gb),w($y),w(Hb),f&&t($qe),f&&t(Yi),w(ky),f&&t(kqe),f&&t(qo),w(Sy),w(Py),w(Jb),w(By),w(qv),f&&t(Sqe),f&&t(ed),w(Iy),f&&t(Rqe),f&&t(No),w(qy),w(jy),w(jv),w(Dy),w(Ov),f&&t(Pqe),f&&t(td),w(Gy),f&&t(Bqe),f&&t(jo),w(Oy),w(Xy),w(Xv),w(zy),w(tF),f&&t(Iqe),f&&t(sd),w(Wy),f&&t(qqe),f&&t(Do),w(Qy),w(Uy),w(nF),w(Jy),w(iF),f&&t(Nqe),f&&t(dd),w(Yy),f&&t(jqe),f&&t(Go),w(Ky),w(eL),w(cF),w(oL),w(TF),f&&t(Dqe),f&&t(md),w(rL),f&&t(Gqe),f&&t(Oo),w(tL),w(nL),w(EF),w(sL),w($F),f&&t(Oqe),f&&t(pd),w(lL),f&&t(Vqe),f&&t(Vo),w(iL),w(cL),w(SF),w(fL),w(VF),f&&t(Xqe),f&&t(bd),w(mL),f&&t(zqe),f&&t(Xo),w(gL),w(pL),w(zF),w(_L),w(UF),f&&t(Wqe),f&&t(Td),w(bL),f&&t(Qqe),f&&t(zo),w(vL),w(TL),w(YF),w(ML),w(aT),f&&t(Hqe),f&&t(Cd),w(EL),f&&t(Uqe),f&&t(Wo),w(CL),w(AL),w(sT),w(yL),w(fT),f&&t(Jqe),f&&t(Ld),w(LL),f&&t(Yqe),f&&t(Qo),w(xL),w(kL),w(gT),w(SL),w(uT),f&&t(Kqe),f&&t(kd),w(PL),f&&t(Zqe),f&&t(Ho),w(BL),w(qL),w(vT),w(NL),w(MT),f&&t(eNe),f&&t(Pd),w(jL),f&&t(oNe),f&&t(Uo),w(DL),w(OL),w(CT),w(VL),w($T),f&&t(rNe),f&&t(qd),w(XL),f&&t(tNe),f&&t(Jo),w(zL),w(QL),w(ST),w(HL),w(BT),f&&t(aNe),f&&t(Dd),w(UL),f&&t(nNe),f&&t(Yo),w(JL),w(KL),w(qT),w(ZL),w($M),f&&t(sNe),f&&t(Vd),w(e8),f&&t(lNe),f&&t(Ko),w(o8),w(t8),w(SM),w(a8),w(r4),f&&t(iNe),f&&t(Wd),w(n8),f&&t(dNe),f&&t(Zo),w(s8),w(i8),w(a4),w(d8),w(b4),f&&t(cNe),f&&t(Ud),w(c8),f&&t(fNe),f&&t(er),w(f8),w(g8),w(F4),w(h8),w(w4),f&&t(mNe),f&&t(Kd),w(p8),f&&t(gNe),f&&t(or),w(_8),w(b8),w(y4),w(v8),w(H4),f&&t(hNe),f&&t(oc),w(F8),f&&t(pNe),f&&t(rr),w(T8),w(E8),w(J4),w(C8),w(lE),f&&t(_Ne),f&&t(ac),w(w8),f&&t(uNe),f&&t(tr),w(A8),w(L8),w(dE),w(x8),w(IE),f&&t(bNe),f&&t(lc),w($8),f&&t(vNe),f&&t(ar),w(k8),w(R8),w(NE),w(P8),w(rC),f&&t(FNe),f&&t(cc),w(B8),f&&t(TNe),f&&t(nr),w(I8),w(N8),w(aC),w(j8),w(lC),f&&t(MNe),f&&t(gc),w(G8),f&&t(ENe),f&&t(sr),w(O8),w(X8),w(dC),w(z8),w(fC),f&&t(CNe),f&&t(_c),w(W8),f&&t(wNe),f&&t(lr),w(Q8),w(U8),w(gC),w(J8),w(PC),f&&t(ANe),f&&t(vc),w(Y8),f&&t(yNe),f&&t(ir),w(K8),w(e9),w(IC),w(o9),w(t5),f&&t(LNe),f&&t(Mc),w(r9),f&&t(xNe),f&&t(dr),w(t9),w(n9),w(n5),w(s9),w(l5),f&&t($Ne),f&&t(wc),w(l9),f&&t(kNe),f&&t(cr),w(i9),w(c9),w(d5),w(f9),w(f5),f&&t(SNe),f&&t(Lc),w(m9),f&&t(RNe),f&&t(fr),w(g9),w(p9),w(g5),w(_9),w(D5),f&&t(PNe),f&&t(kc),w(u9),f&&t(BNe),f&&t(mr),w(b9),w(F9),w(O5),w(T9),w(Z5),f&&t(INe),f&&t(Pc),w(M9),f&&t(qNe),f&&t(gr),w(E9),w(w9),w(o3),w(A9),w(h3),f&&t(NNe),f&&t(qc),w(y9),f&&t(jNe),f&&t(hr),w(L9),w($9),w(_3),w(k9),w(y3),f&&t(DNe),f&&t(Dc),w(S9),f&&t(GNe),f&&t(pr),w(R9),w(B9),w(x3),w(I9),w(j3),f&&t(ONe),f&&t(Vc),w(q9),f&&t(VNe),f&&t(_r),w(N9),w(D9),w(G3),w(G9),w(K3),f&&t(XNe),f&&t(Wc),w(O9),f&&t(zNe),f&&t(ur),w(V9),w(z9),w(ew),w(W9),w(fw),f&&t(WNe),f&&t(Uc),w(Q9),f&&t(QNe),f&&t(br),w(H9),w(J9),w(gw),w(Y9),w(Mw),f&&t(HNe),f&&t(Kc),w(K9),f&&t(UNe),f&&t(vr),w(Z9),w(ox),w(Cw),w(rx),w(Rw),f&&t(JNe),f&&t(of),w(tx),f&&t(YNe),f&&t(Fr),w(ax),w(sx),w(Bw),w(lx),w(qw),f&&t(KNe),f&&t(af),w(ix),f&&t(ZNe),f&&t(Tr),w(dx),w(fx),w(jw),w(mx),w(Ow),f&&t(eje),f&&t(lf),w(hx),f&&t(oje),f&&t(Mr),w(px),w(ux),w(Xw),w(bx),w(Ww)}}}const Cxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wxt(L){return w8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sxt extends T8t{constructor(g){super();M8t(this,g,wxt,Ext,E8t,{})}}export{Sxt as default,Cxt as metadata};
