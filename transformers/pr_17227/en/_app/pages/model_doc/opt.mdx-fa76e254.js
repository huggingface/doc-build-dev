import{S as Sr,i as Gr,s as Ur,e as n,k as c,w as b,t as r,M as Wr,c as a,d as t,m as p,a as s,x as k,h as i,b as d,G as e,g as h,y as w,q as P,o as $,B as O,v as Hr,L as Oo}from"../../chunks/vendor-316217a5.js";import{T as Cs}from"../../chunks/Tip-27e9fea0.js";import{D as ue}from"../../chunks/Docstring-1fe4a33a.js";import{C as Fo}from"../../chunks/CodeBlock-8418a95e.js";import{I as Ye}from"../../chunks/IconCopyLink-40460835.js";import{E as $o}from"../../chunks/ExampleCodeBlock-32fc0037.js";function Br(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import OPTModel, OPTConfig

# Initializing a OPT facebook/opt-large style configuration
configuration = OPTConfig()

# Initializing a model from the facebook/opt-large style configuration
model = OPTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OPTModel, OPTConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a OPT facebook/opt-large style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = OPTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the facebook/opt-large style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OPTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function Vr(L){let m,y,T,u,v;return{c(){m=n("p"),y=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),T=n("code"),u=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),T=a(_,"CODE",{});var q=s(T);u=i(q,"Module"),q.forEach(t),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(l,_){h(l,m,_),e(m,y),e(m,T),e(T,u),e(m,v)},d(l){l&&t(m)}}}function Rr(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import GPT2Tokenizer, OPTModel
import torch

tokenizer = GPT2Tokenizer.from_pretrained("facebook/opt-350m")
model = OPTModel.from_pretrained("facebook/opt-350m")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, OPTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OPTModel.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function Kr(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import GPT2Tokenizer, OPTForCausalLM

model = OPTForCausalLM.from_pretrained("facebook/opt-350m")
tokenizer = GPT2Tokenizer.from_pretrained("facebook/opt-350m")

prompt = "Hey, are you consciours? Can you talk to me?"
inputs = tokenizer(prompt, return_tensors="pt")

# Generate
generate_ids = model.generate(inputs.input_ids, max_length=30)
tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, OPTForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OPTForCausalLM.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;Hey, are you consciours? Can you talk to me?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(prompt, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>generate_ids = model.generate(inputs.input_ids, max_length=<span class="hljs-number">30</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(generate_ids, skip_special_tokens=<span class="hljs-literal">True</span>, clean_up_tokenization_spaces=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]
<span class="hljs-string">&quot;Hey, are you consciours? Can you talk to me?\\nI&#x27;m not consciours, but I can talk to you.&quot;</span>`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function Jr(L){let m,y,T,u,v,l,_,q,Te,oe,F,V,D,J,ve,S,ye,he,A,G,Z,re,E,j,ne,X,me,ae,U,be,fe,C,ke,R,K,Y,Q,ie,we,W,Pe,z,$e;return{c(){m=n("p"),y=r("TF 2.0 models accepts two formats as inputs:"),T=c(),u=n("ul"),v=n("li"),l=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),q=n("li"),Te=r("having all inputs as a list, tuple or dict in the first positional arguments."),oe=c(),F=n("p"),V=r("This second option is useful when using "),D=n("code"),J=r("tf.keras.Model.fit"),ve=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),S=n("code"),ye=r("model(inputs)"),he=r("."),A=c(),G=n("p"),Z=r(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),re=c(),E=n("ul"),j=n("li"),ne=r("a single Tensor with "),X=n("code"),me=r("input_ids"),ae=r(" only and nothing else: "),U=n("code"),be=r("model(input_ids)"),fe=c(),C=n("li"),ke=r(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),R=n("code"),K=r("model([input_ids, attention_mask])"),Y=r(" or "),Q=n("code"),ie=r("model([input_ids, attention_mask, token_type_ids])"),we=c(),W=n("li"),Pe=r(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),z=n("code"),$e=r('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(g){m=a(g,"P",{});var x=s(m);y=i(x,"TF 2.0 models accepts two formats as inputs:"),x.forEach(t),T=p(g),u=a(g,"UL",{});var le=s(u);v=a(le,"LI",{});var Oe=s(v);l=i(Oe,"having all inputs as keyword arguments (like PyTorch models), or"),Oe.forEach(t),_=p(le),q=a(le,"LI",{});var Le=s(q);Te=i(Le,"having all inputs as a list, tuple or dict in the first positional arguments."),Le.forEach(t),le.forEach(t),oe=p(g),F=a(g,"P",{});var H=s(F);V=i(H,"This second option is useful when using "),D=a(H,"CODE",{});var Fe=s(D);J=i(Fe,"tf.keras.Model.fit"),Fe.forEach(t),ve=i(H,` method which currently requires having all the
tensors in the first argument of the model call function: `),S=a(H,"CODE",{});var qe=s(S);ye=i(qe,"model(inputs)"),qe.forEach(t),he=i(H,"."),H.forEach(t),A=p(g),G=a(g,"P",{});var Ne=s(G);Z=i(Ne,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),Ne.forEach(t),re=p(g),E=a(g,"UL",{});var N=s(E);j=a(N,"LI",{});var ee=s(j);ne=i(ee,"a single Tensor with "),X=a(ee,"CODE",{});var Ie=s(X);me=i(Ie,"input_ids"),Ie.forEach(t),ae=i(ee," only and nothing else: "),U=a(ee,"CODE",{});var Ee=s(U);be=i(Ee,"model(input_ids)"),Ee.forEach(t),ee.forEach(t),fe=p(N),C=a(N,"LI",{});var M=s(C);ke=i(M,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),R=a(M,"CODE",{});var Ae=s(R);K=i(Ae,"model([input_ids, attention_mask])"),Ae.forEach(t),Y=i(M," or "),Q=a(M,"CODE",{});var de=s(Q);ie=i(de,"model([input_ids, attention_mask, token_type_ids])"),de.forEach(t),M.forEach(t),we=p(N),W=a(N,"LI",{});var xe=s(W);Pe=i(xe,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),z=a(xe,"CODE",{});var De=s(z);$e=i(De,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),De.forEach(t),xe.forEach(t),N.forEach(t)},m(g,x){h(g,m,x),e(m,y),h(g,T,x),h(g,u,x),e(u,v),e(v,l),e(u,_),e(u,q),e(q,Te),h(g,oe,x),h(g,F,x),e(F,V),e(F,D),e(D,J),e(F,ve),e(F,S),e(S,ye),e(F,he),h(g,A,x),h(g,G,x),e(G,Z),h(g,re,x),h(g,E,x),e(E,j),e(j,ne),e(j,X),e(X,me),e(j,ae),e(j,U),e(U,be),e(E,fe),e(E,C),e(C,ke),e(C,R),e(R,K),e(C,Y),e(C,Q),e(Q,ie),e(E,we),e(E,W),e(W,Pe),e(W,z),e(z,$e)},d(g){g&&t(m),g&&t(T),g&&t(u),g&&t(oe),g&&t(F),g&&t(A),g&&t(G),g&&t(re),g&&t(E)}}}function Zr(L){let m,y,T,u,v,l,_,q,Te,oe,F,V,D,J,ve,S,ye,he,A,G,Z,re,E,j,ne,X,me,ae,U,be,fe,C,ke,R,K,Y,Q,ie,we,W,Pe,z,$e;return{c(){m=n("p"),y=r("TF 2.0 models accepts two formats as inputs:"),T=c(),u=n("ul"),v=n("li"),l=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),q=n("li"),Te=r("having all inputs as a list, tuple or dict in the first positional arguments."),oe=c(),F=n("p"),V=r("This second option is useful when using "),D=n("code"),J=r("tf.keras.Model.fit"),ve=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),S=n("code"),ye=r("model(inputs)"),he=r("."),A=c(),G=n("p"),Z=r(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),re=c(),E=n("ul"),j=n("li"),ne=r("a single Tensor with "),X=n("code"),me=r("input_ids"),ae=r(" only and nothing else: "),U=n("code"),be=r("model(input_ids)"),fe=c(),C=n("li"),ke=r(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),R=n("code"),K=r("model([input_ids, attention_mask])"),Y=r(" or "),Q=n("code"),ie=r("model([input_ids, attention_mask, token_type_ids])"),we=c(),W=n("li"),Pe=r(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),z=n("code"),$e=r('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(g){m=a(g,"P",{});var x=s(m);y=i(x,"TF 2.0 models accepts two formats as inputs:"),x.forEach(t),T=p(g),u=a(g,"UL",{});var le=s(u);v=a(le,"LI",{});var Oe=s(v);l=i(Oe,"having all inputs as keyword arguments (like PyTorch models), or"),Oe.forEach(t),_=p(le),q=a(le,"LI",{});var Le=s(q);Te=i(Le,"having all inputs as a list, tuple or dict in the first positional arguments."),Le.forEach(t),le.forEach(t),oe=p(g),F=a(g,"P",{});var H=s(F);V=i(H,"This second option is useful when using "),D=a(H,"CODE",{});var Fe=s(D);J=i(Fe,"tf.keras.Model.fit"),Fe.forEach(t),ve=i(H,` method which currently requires having all the
tensors in the first argument of the model call function: `),S=a(H,"CODE",{});var qe=s(S);ye=i(qe,"model(inputs)"),qe.forEach(t),he=i(H,"."),H.forEach(t),A=p(g),G=a(g,"P",{});var Ne=s(G);Z=i(Ne,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),Ne.forEach(t),re=p(g),E=a(g,"UL",{});var N=s(E);j=a(N,"LI",{});var ee=s(j);ne=i(ee,"a single Tensor with "),X=a(ee,"CODE",{});var Ie=s(X);me=i(Ie,"input_ids"),Ie.forEach(t),ae=i(ee," only and nothing else: "),U=a(ee,"CODE",{});var Ee=s(U);be=i(Ee,"model(input_ids)"),Ee.forEach(t),ee.forEach(t),fe=p(N),C=a(N,"LI",{});var M=s(C);ke=i(M,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),R=a(M,"CODE",{});var Ae=s(R);K=i(Ae,"model([input_ids, attention_mask])"),Ae.forEach(t),Y=i(M," or "),Q=a(M,"CODE",{});var de=s(Q);ie=i(de,"model([input_ids, attention_mask, token_type_ids])"),de.forEach(t),M.forEach(t),we=p(N),W=a(N,"LI",{});var xe=s(W);Pe=i(xe,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),z=a(xe,"CODE",{});var De=s(z);$e=i(De,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),De.forEach(t),xe.forEach(t),N.forEach(t)},m(g,x){h(g,m,x),e(m,y),h(g,T,x),h(g,u,x),e(u,v),e(v,l),e(u,_),e(u,q),e(q,Te),h(g,oe,x),h(g,F,x),e(F,V),e(F,D),e(D,J),e(F,ve),e(F,S),e(S,ye),e(F,he),h(g,A,x),h(g,G,x),e(G,Z),h(g,re,x),h(g,E,x),e(E,j),e(j,ne),e(j,X),e(X,me),e(j,ae),e(j,U),e(U,be),e(E,fe),e(E,C),e(C,ke),e(C,R),e(R,K),e(C,Y),e(C,Q),e(Q,ie),e(E,we),e(E,W),e(W,Pe),e(W,z),e(z,$e)},d(g){g&&t(m),g&&t(T),g&&t(u),g&&t(oe),g&&t(F),g&&t(A),g&&t(G),g&&t(re),g&&t(E)}}}function Xr(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import GPT2Tokenizer, TFOPTForCausalLM

model = TFOPTForCausalLM.from_pretrained("facebook/opt-350m")
tokenizer = GPT2Tokenizer.from_pretrained("facebook/opt-350m")

prompt = "Hey, are you consciours? Can you talk to me?"
inputs = tokenizer(prompt, return_tensors="tf")

# Generate
generate_ids = model.generate(inputs.input_ids, max_length=30)
tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, TFOPTForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFOPTForCausalLM.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/opt-350m&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;Hey, are you consciours? Can you talk to me?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(prompt, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Generate</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>generate_ids = model.generate(inputs.input_ids, max_length=<span class="hljs-number">30</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(generate_ids, skip_special_tokens=<span class="hljs-literal">True</span>, clean_up_tokenization_spaces=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]
<span class="hljs-string">&#x27;Hey, are you consciours? Can you talk to me?\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n&#x27;</span>`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function Yr(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import GPT2Tokenizer, FlaxOPTModel

tokenizer = GPT2Tokenizer.from_pretrained("")
model = FlaxOPTModel.from_pretrained("")

inputs = tokenizer("Hello, my dog is cute", return_tensors="jax")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, FlaxOPTModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxOPTModel.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;jax&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function Qr(L){let m,y,T,u,v;return u=new Fo({props:{code:`from transformers import GPT2Tokenizer, FlaxOPTForCausalLM

tokenizer = GPT2Tokenizer.from_pretrained("")
model = FlaxOPTForCausalLM.from_pretrained("")

inputs = tokenizer("Hello, my dog is cute", return_tensors="np")
outputs = model(**inputs)

# retrieve logts for next token
next_token_logits = outputs.logits[:, -1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, FlaxOPTForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxOPTForCausalLM.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve logts for next token</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>next_token_logits = outputs.logits[:, -<span class="hljs-number">1</span>]`}}),{c(){m=n("p"),y=r("Example:"),T=c(),b(u.$$.fragment)},l(l){m=a(l,"P",{});var _=s(m);y=i(_,"Example:"),_.forEach(t),T=p(l),k(u.$$.fragment,l)},m(l,_){h(l,m,_),e(m,y),h(l,T,_),w(u,l,_),v=!0},p:Oo,i(l){v||(P(u.$$.fragment,l),v=!0)},o(l){$(u.$$.fragment,l),v=!1},d(l){l&&t(m),l&&t(T),O(u,l)}}}function ei(L){let m,y,T,u,v,l,_,q,Te,oe,F,V,D,J,ve,S,ye,he,A,G,Z,re,E,j,ne,X,me,ae,U,be,fe,C,ke,R,K,Y,Q,ie,we,W,Pe,z,$e,g,x,le,Oe,Le,H,Fe,qe,Ne,N,ee,Ie,Ee,M,Ae,de,xe,De,wt,Gn,Un,Pt,Wn,Hn,$t,Bn,Vn,on,Se,Qe,xo,Ot,Rn,Mo,Kn,nn,ce,Ft,Jn,Ge,Zn,ho,Xn,Yn,xt,Qn,ea,ta,Ue,oa,mo,na,aa,fo,sa,ra,ia,et,an,We,tt,Eo,Mt,la,zo,da,sn,pe,Et,ca,zt,pa,go,ua,ha,ma,Ct,fa,jt,ga,_a,Ta,ge,Lt,va,He,ya,_o,ba,ka,Co,wa,Pa,$a,ot,Oa,nt,rn,Be,at,jo,qt,Fa,Lo,xa,ln,Ve,Nt,Ma,st,It,Ea,rt,dn,Re,it,qo,At,za,No,Ca,cn,te,Dt,ja,St,La,To,qa,Na,Ia,Gt,Aa,Ut,Da,Sa,Ga,lt,Ua,vo,Wt,pn,Ke,dt,Io,Ht,Wa,Ao,Ha,un,B,Bt,Ba,Do,Va,Ra,Vt,Ka,yo,Ja,Za,Xa,Rt,Ya,Kt,Qa,es,ts,ct,os,pt,Jt,ns,ut,hn,Je,ht,So,Zt,as,Go,ss,mn,Ze,Xt,rs,mt,Yt,is,ft,fn,Xe,gt,Uo,Qt,ls,Wo,ds,gn,I,eo,cs,Ho,ps,us,to,hs,bo,ms,fs,gs,oo,_s,no,Ts,vs,ys,Bo,bs,ks,Me,Vo,ao,ws,Ps,Ro,so,$s,Os,Ko,ro,Fs,xs,Jo,io,Ms,Es,_t,lo,zs,Tt,_n;return l=new Ye({}),J=new Ye({}),Ot=new Ye({}),Ft=new ue({props:{name:"class transformers.OPTConfig",anchor:"transformers.OPTConfig",parameters:[{name:"vocab_size",val:" = 50272"},{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"ffn_dim",val:" = 3072"},{name:"max_position_embeddings",val:" = 2048"},{name:"do_layer_norm_before",val:" = True"},{name:"word_embed_proj_dim",val:" = None"},{name:"dropout",val:" = 0.1"},{name:"attention_dropout",val:" = 0.0"},{name:"activation_dropout",val:" = 0.0"},{name:"num_attention_heads",val:" = 12"},{name:"activation_function",val:" = 'relu'"},{name:"layerdrop",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OPTConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 50272) &#x2014;
Vocabulary size of the OPT model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel">OPTModel</a>`,name:"vocab_size"},{anchor:"transformers.OPTConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.OPTConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of decoder layers.`,name:"num_hidden_layers"},{anchor:"transformers.OPTConfig.ffn_dim",description:`<strong>ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"ffn_dim"},{anchor:"transformers.OPTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"num_attention_heads"},{anchor:"transformers.OPTConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.OPTConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.OPTConfig.do_layer_norm_before",description:`<strong>do_layer_norm_before</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to perform layer normalization before the attention block.`,name:"do_layer_norm_before"},{anchor:"transformers.OPTConfig.word_embed_proj_dim",description:`<strong>word_embed_proj_dim</strong> (<code>int</code>, <em>optional</em>) &#x2014;
<code>word_embed_proj_dim</code> can be set to down-project word embeddings, <em>e.g.</em> <code>opt-350m</code>. Defaults to
<code>hidden_size</code>.`,name:"word_embed_proj_dim"},{anchor:"transformers.OPTConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.OPTConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.OPTConfig.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.
layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
The LayerDrop probability. See the [LayerDrop paper](see <a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>) for more
details.`,name:"activation_dropout"},{anchor:"transformers.OPTConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.OPTConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/configuration_opt.py#L32"}}),et=new $o({props:{anchor:"transformers.OPTConfig.example",$$slots:{default:[Br]},$$scope:{ctx:L}}}),Mt=new Ye({}),Et=new ue({props:{name:"class transformers.OPTModel",anchor:"transformers.OPTModel",parameters:[{name:"config",val:": OPTConfig"}],parametersDescription:[{anchor:"transformers.OPTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_opt.py#L707"}}),Lt=new ue({props:{name:"forward",anchor:"transformers.OPTModel.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.List[torch.FloatTensor]] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OPTModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer">GPT2Tokenizer</a>. See <a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.OPTModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a></p>
<p>Indices can be obtained using <code>OPTTokenizer</code>. See <a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p>If <code>past_key_values</code> is used, optionally only the last <code>decoder_input_ids</code> have to be input (see
<code>past_key_values</code>).</p>
<p>If you want to change padding behavior, you should read <code>modeling_opt._prepare_decoder_attention_mask</code>
and modify to your needs. See diagram 1 in <a href="https://arxiv.org/abs/1910.13461" rel="nofollow">the paper</a> for more
information on the default strategy.`,name:"attention_mask"},{anchor:"transformers.OPTModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(encoder_layers, encoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules in the encoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.OPTModel.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those that
don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all
<code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.OPTModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.OPTModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.OPTModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OPTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OPTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17227/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_opt.py#L724",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"
>OPTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPast"
>transformers.modeling_outputs.BaseModelOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ot=new Cs({props:{$$slots:{default:[Vr]},$$scope:{ctx:L}}}),nt=new $o({props:{anchor:"transformers.OPTModel.forward.example",$$slots:{default:[Rr]},$$scope:{ctx:L}}}),qt=new Ye({}),Nt=new ue({props:{name:"class transformers.OPTForCausalLM",anchor:"transformers.OPTForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_opt.py#L776"}}),It=new ue({props:{name:"forward",anchor:"transformers.OPTForCausalLM.forward",parameters:[{name:"input_ids",val:": LongTensor = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.List[torch.FloatTensor]] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OPTForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you
provide it.</p>
<p>Indices can be obtained using <code>OPTTokenizer</code>. See <a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.OPTForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.OPTForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(num_hidden_layers, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.OPTForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of
shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>. The two additional
tensors are only required when the model is used as a decoder in a Sequence to Sequence model.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the
cross-attention blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those
that don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of
all <code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.OPTForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation.
This is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors
than the model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.OPTForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are ignored
(masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"labels"},{anchor:"transformers.OPTForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding
(see <code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.OPTForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under
returned tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OPTForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors
for more detail.`,name:"output_hidden_states"},{anchor:"transformers.OPTForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17227/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_opt.py#L807",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"
>OPTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>)</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithPast"
>transformers.modeling_outputs.CausalLMOutputWithPast</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),rt=new $o({props:{anchor:"transformers.OPTForCausalLM.forward.example",$$slots:{default:[Kr]},$$scope:{ctx:L}}}),At=new Ye({}),Dt=new ue({props:{name:"class transformers.TFOPTModel",anchor:"transformers.TFOPTModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFOPTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_tf_opt.py#L726"}}),lt=new Cs({props:{$$slots:{default:[Jr]},$$scope:{ctx:L}}}),Wt=new ue({props:{name:"call",anchor:"transformers.TFOPTModel.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"head_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"past_key_values",val:": typing.Union[typing.Tuple[typing.Tuple[typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor]]], NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_tf_opt.py#L740"}}),Ht=new Ye({}),Bt=new ue({props:{name:"class transformers.TFOPTForCausalLM",anchor:"transformers.TFOPTForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFOPTForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_tf_opt.py#L802"}}),ct=new Cs({props:{$$slots:{default:[Zr]},$$scope:{ctx:L}}}),Jt=new ue({props:{name:"call",anchor:"transformers.TFOPTForCausalLM.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"past_key_values",val:": typing.Union[typing.Tuple[typing.Tuple[typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor]]], NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"head_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFOPTForCausalLM.call.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you
provide it.</p>
<p>Indices can be obtained using <code>OPTTokenizer</code>. See <a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFOPTForCausalLM.call.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFOPTForCausalLM.call.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(num_hidden_layers, num_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.TFOPTForCausalLM.call.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of
shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>. The two additional
tensors are only required when the model is used as a decoder in a Sequence to Sequence model.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the
cross-attention blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those
that don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of
all <code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.TFOPTForCausalLM.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation.
This is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors
than the model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFOPTForCausalLM.call.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are ignored
(masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"labels"},{anchor:"transformers.TFOPTForCausalLM.call.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding
(see <code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.TFOPTForCausalLM.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under
returned tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFOPTForCausalLM.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors
for more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFOPTForCausalLM.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17227/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_tf_opt.py#L837"}}),ut=new $o({props:{anchor:"transformers.TFOPTForCausalLM.call.example",$$slots:{default:[Xr]},$$scope:{ctx:L}}}),Zt=new Ye({}),Xt=new ue({props:{name:"class transformers.FlaxOPTModel",anchor:"transformers.FlaxOPTModel",parameters:[{name:"config",val:": OPTConfig"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"_do_init",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_flax_opt.py#L691"}}),Yt=new ue({props:{name:"__call__",anchor:"transformers.FlaxOPTModel.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"attention_mask",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"position_ids",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"head_mask",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"params",val:": dict = None"},{name:"past_key_values",val:": dict = None"},{name:"dropout_rng",val:": PRNGKey = None"},{name:"deterministic",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_flax_opt.py#L579",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_flax_outputs.FlaxBaseModelOutput"
>transformers.modeling_flax_outputs.FlaxBaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"
>OPTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_flax_outputs.FlaxBaseModelOutput"
>transformers.modeling_flax_outputs.FlaxBaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ft=new $o({props:{anchor:"transformers.FlaxOPTModel.__call__.example",$$slots:{default:[Yr]},$$scope:{ctx:L}}}),Qt=new Ye({}),eo=new ue({props:{name:"class transformers.FlaxOPTForCausalLM",anchor:"transformers.FlaxOPTForCausalLM",parameters:[{name:"config",val:": OPTConfig"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"_do_init",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxOPTForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"},{anchor:"transformers.FlaxOPTForCausalLM.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_flax_opt.py#L769"}}),lo=new ue({props:{name:"__call__",anchor:"transformers.FlaxOPTForCausalLM.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"attention_mask",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"position_ids",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"head_mask",val:": typing.Optional[jax._src.numpy.ndarray.ndarray] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"params",val:": dict = None"},{name:"past_key_values",val:": dict = None"},{name:"dropout_rng",val:": PRNGKey = None"},{name:"deterministic",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/opt/modeling_flax_opt.py#L579",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_flax_outputs.FlaxBaseModelOutput"
>transformers.modeling_flax_outputs.FlaxBaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"
>OPTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>jnp.ndarray</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(jnp.ndarray)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>jnp.ndarray</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17227/en/main_classes/output#transformers.modeling_flax_outputs.FlaxBaseModelOutput"
>transformers.modeling_flax_outputs.FlaxBaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Tt=new $o({props:{anchor:"transformers.FlaxOPTForCausalLM.__call__.example",$$slots:{default:[Qr]},$$scope:{ctx:L}}}),{c(){m=n("meta"),y=c(),T=n("h1"),u=n("a"),v=n("span"),b(l.$$.fragment),_=c(),q=n("span"),Te=r("OPT"),oe=c(),F=n("h2"),V=n("a"),D=n("span"),b(J.$$.fragment),ve=c(),S=n("span"),ye=r("Overview"),he=c(),A=n("p"),G=r("The OPT model was proposed in "),Z=n("a"),re=r("Open Pre-trained Transformer Language Models"),E=r(` by Meta AI.
OPT is a series of open-sourced large causal language models which perform similar in performance to GPT3.`),j=c(),ne=n("p"),X=r("The abstract from the paper is the following:"),me=c(),ae=n("p"),U=n("em"),be=r("Large language models, which are often trained for hundreds of thousands of compute days, have shown remarkable capabilities for zero- and few-shot learning. Given their computational cost, these models are difficult to replicate without significant capital. For the few that are available through APIs, no access is granted to the full model weights, making them difficult to study. We present Open Pre-trained Transformers (OPT), a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, which we aim to fully and responsibly share with interested researchers. We show that OPT-175B is comparable to GPT-3, while requiring only 1/7th the carbon footprint to develop. We are also releasing our logbook detailing the infrastructure challenges we faced, along with code for experimenting with all of the released models."),fe=c(),C=n("p"),ke=r("Tips:"),R=c(),K=n("ul"),Y=n("li"),Q=r("OPT has the same architecture as "),ie=n("code"),we=r("BartDecoder"),W=r("."),Pe=c(),z=n("li"),$e=r("Contrary to GPT2, OPT adds the EOS token "),g=n("code"),x=r("</s>"),le=r(" to the beginning of every prompt. "),Oe=n("strong"),Le=r("Note"),H=r(": Make sure to pass "),Fe=n("code"),qe=r("use_fast=False"),Ne=r(" when loading OPT\u2019s tokenizer with "),N=n("a"),ee=r("AutoTokenizer"),Ie=r(" to get the correct tokenizer."),Ee=c(),M=n("p"),Ae=r("This model was contributed by "),de=n("a"),xe=r("Arthur Zucker"),De=r(", "),wt=n("a"),Gn=r("Younes Belkada"),Un=r(", and "),Pt=n("a"),Wn=r("Patrick Von Platen"),Hn=r(`.
The original code can be found `),$t=n("a"),Bn=r("here"),Vn=r("."),on=c(),Se=n("h2"),Qe=n("a"),xo=n("span"),b(Ot.$$.fragment),Rn=c(),Mo=n("span"),Kn=r("OPTConfig"),nn=c(),ce=n("div"),b(Ft.$$.fragment),Jn=c(),Ge=n("p"),Zn=r("This is the configuration class to store the configuration of a "),ho=n("a"),Xn=r("OPTModel"),Yn=r(`. It is used to instantiate a OPT model
according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the OPT
`),xt=n("a"),Qn=r("facebook/opt-350m"),ea=r(" architecture."),ta=c(),Ue=n("p"),oa=r("Configuration objects inherit from "),mo=n("a"),na=r("PretrainedConfig"),aa=r(` and can be used to control the model outputs. Read the
documentation from `),fo=n("a"),sa=r("PretrainedConfig"),ra=r(" for more information."),ia=c(),b(et.$$.fragment),an=c(),We=n("h2"),tt=n("a"),Eo=n("span"),b(Mt.$$.fragment),la=c(),zo=n("span"),da=r("OPTModel"),sn=c(),pe=n("div"),b(Et.$$.fragment),ca=c(),zt=n("p"),pa=r(`The bare OPT Model outputting raw hidden-states without any specific head on top.
This model inherits from `),go=n("a"),ua=r("PreTrainedModel"),ha=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ma=c(),Ct=n("p"),fa=r("This model is also a PyTorch "),jt=n("a"),ga=r("torch.nn.Module"),_a=r(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Ta=c(),ge=n("div"),b(Lt.$$.fragment),va=c(),He=n("p"),ya=r("The "),_o=n("a"),ba=r("OPTModel"),ka=r(" forward method, overrides the "),Co=n("code"),wa=r("__call__"),Pa=r(" special method."),$a=c(),b(ot.$$.fragment),Oa=c(),b(nt.$$.fragment),rn=c(),Be=n("h2"),at=n("a"),jo=n("span"),b(qt.$$.fragment),Fa=c(),Lo=n("span"),xa=r("OPTForCausalLM"),ln=c(),Ve=n("div"),b(Nt.$$.fragment),Ma=c(),st=n("div"),b(It.$$.fragment),Ea=c(),b(rt.$$.fragment),dn=c(),Re=n("h2"),it=n("a"),qo=n("span"),b(At.$$.fragment),za=c(),No=n("span"),Ca=r("TFOPTModel"),cn=c(),te=n("div"),b(Dt.$$.fragment),ja=c(),St=n("p"),La=r(`The bare TF OPT Model outputting raw hidden-states without any specific head on top.
This model inherits from `),To=n("a"),qa=r("TFPreTrainedModel"),Na=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ia=c(),Gt=n("p"),Aa=r("This model is also a "),Ut=n("a"),Da=r("tf.keras.Model"),Sa=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ga=c(),b(lt.$$.fragment),Ua=c(),vo=n("div"),b(Wt.$$.fragment),pn=c(),Ke=n("h2"),dt=n("a"),Io=n("span"),b(Ht.$$.fragment),Wa=c(),Ao=n("span"),Ha=r("TFOPTForCausalLM"),un=c(),B=n("div"),b(Bt.$$.fragment),Ba=c(),Do=n("p"),Va=r("The OPT Model transformer with a language modeling head on top."),Ra=c(),Vt=n("p"),Ka=r("This model inherits from "),yo=n("a"),Ja=r("TFPreTrainedModel"),Za=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xa=c(),Rt=n("p"),Ya=r("This model is also a "),Kt=n("a"),Qa=r("tf.keras.Model"),es=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ts=c(),b(ct.$$.fragment),os=c(),pt=n("div"),b(Jt.$$.fragment),ns=c(),b(ut.$$.fragment),hn=c(),Je=n("h2"),ht=n("a"),So=n("span"),b(Zt.$$.fragment),as=c(),Go=n("span"),ss=r("FlaxOPTModel"),mn=c(),Ze=n("div"),b(Xt.$$.fragment),rs=c(),mt=n("div"),b(Yt.$$.fragment),is=c(),b(ft.$$.fragment),fn=c(),Xe=n("h2"),gt=n("a"),Uo=n("span"),b(Qt.$$.fragment),ls=c(),Wo=n("span"),ds=r("FlaxOPTForCausalLM"),gn=c(),I=n("div"),b(eo.$$.fragment),cs=c(),Ho=n("p"),ps=r(`OPT Model with a language modeling head on top (linear layer with weights tied to the input embeddings) e.g for
autoregressive tasks.`),us=c(),to=n("p"),hs=r("This model inherits from "),bo=n("a"),ms=r("FlaxPreTrainedModel"),fs=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gs=c(),oo=n("p"),_s=r(`This model is also a Flax Linen
`),no=n("a"),Ts=r("flax.nn.Module"),vs=r(` subclass. Use it as a
regular Flax Module and refer to the Flax documentation for all matter related to general usage and behavior.`),ys=c(),Bo=n("p"),bs=r("Finally, this model supports inherent JAX features such as:"),ks=c(),Me=n("ul"),Vo=n("li"),ao=n("a"),ws=r("Just-In-Time (JIT) compilation"),Ps=c(),Ro=n("li"),so=n("a"),$s=r("Automatic Differentiation"),Os=c(),Ko=n("li"),ro=n("a"),Fs=r("Vectorization"),xs=c(),Jo=n("li"),io=n("a"),Ms=r("Parallelization"),Es=c(),_t=n("div"),b(lo.$$.fragment),zs=c(),b(Tt.$$.fragment),this.h()},l(o){const f=Wr('[data-svelte="svelte-1phssyn"]',document.head);m=a(f,"META",{name:!0,content:!0}),f.forEach(t),y=p(o),T=a(o,"H1",{class:!0});var co=s(T);u=a(co,"A",{id:!0,class:!0,href:!0});var Zo=s(u);v=a(Zo,"SPAN",{});var Xo=s(v);k(l.$$.fragment,Xo),Xo.forEach(t),Zo.forEach(t),_=p(co),q=a(co,"SPAN",{});var Yo=s(q);Te=i(Yo,"OPT"),Yo.forEach(t),co.forEach(t),oe=p(o),F=a(o,"H2",{class:!0});var po=s(F);V=a(po,"A",{id:!0,class:!0,href:!0});var Qo=s(V);D=a(Qo,"SPAN",{});var en=s(D);k(J.$$.fragment,en),en.forEach(t),Qo.forEach(t),ve=p(po),S=a(po,"SPAN",{});var tn=s(S);ye=i(tn,"Overview"),tn.forEach(t),po.forEach(t),he=p(o),A=a(o,"P",{});var uo=s(A);G=i(uo,"The OPT model was proposed in "),Z=a(uo,"A",{href:!0,rel:!0});var js=s(Z);re=i(js,"Open Pre-trained Transformer Language Models"),js.forEach(t),E=i(uo,` by Meta AI.
OPT is a series of open-sourced large causal language models which perform similar in performance to GPT3.`),uo.forEach(t),j=p(o),ne=a(o,"P",{});var Ls=s(ne);X=i(Ls,"The abstract from the paper is the following:"),Ls.forEach(t),me=p(o),ae=a(o,"P",{});var qs=s(ae);U=a(qs,"EM",{});var Ns=s(U);be=i(Ns,"Large language models, which are often trained for hundreds of thousands of compute days, have shown remarkable capabilities for zero- and few-shot learning. Given their computational cost, these models are difficult to replicate without significant capital. For the few that are available through APIs, no access is granted to the full model weights, making them difficult to study. We present Open Pre-trained Transformers (OPT), a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, which we aim to fully and responsibly share with interested researchers. We show that OPT-175B is comparable to GPT-3, while requiring only 1/7th the carbon footprint to develop. We are also releasing our logbook detailing the infrastructure challenges we faced, along with code for experimenting with all of the released models."),Ns.forEach(t),qs.forEach(t),fe=p(o),C=a(o,"P",{});var Is=s(C);ke=i(Is,"Tips:"),Is.forEach(t),R=p(o),K=a(o,"UL",{});var Tn=s(K);Y=a(Tn,"LI",{});var vn=s(Y);Q=i(vn,"OPT has the same architecture as "),ie=a(vn,"CODE",{});var As=s(ie);we=i(As,"BartDecoder"),As.forEach(t),W=i(vn,"."),vn.forEach(t),Pe=p(Tn),z=a(Tn,"LI",{});var ze=s(z);$e=i(ze,"Contrary to GPT2, OPT adds the EOS token "),g=a(ze,"CODE",{});var Ds=s(g);x=i(Ds,"</s>"),Ds.forEach(t),le=i(ze," to the beginning of every prompt. "),Oe=a(ze,"STRONG",{});var Ss=s(Oe);Le=i(Ss,"Note"),Ss.forEach(t),H=i(ze,": Make sure to pass "),Fe=a(ze,"CODE",{});var Gs=s(Fe);qe=i(Gs,"use_fast=False"),Gs.forEach(t),Ne=i(ze," when loading OPT\u2019s tokenizer with "),N=a(ze,"A",{href:!0});var Us=s(N);ee=i(Us,"AutoTokenizer"),Us.forEach(t),Ie=i(ze," to get the correct tokenizer."),ze.forEach(t),Tn.forEach(t),Ee=p(o),M=a(o,"P",{});var Ce=s(M);Ae=i(Ce,"This model was contributed by "),de=a(Ce,"A",{href:!0,rel:!0});var Ws=s(de);xe=i(Ws,"Arthur Zucker"),Ws.forEach(t),De=i(Ce,", "),wt=a(Ce,"A",{href:!0,rel:!0});var Hs=s(wt);Gn=i(Hs,"Younes Belkada"),Hs.forEach(t),Un=i(Ce,", and "),Pt=a(Ce,"A",{href:!0,rel:!0});var Bs=s(Pt);Wn=i(Bs,"Patrick Von Platen"),Bs.forEach(t),Hn=i(Ce,`.
The original code can be found `),$t=a(Ce,"A",{href:!0,rel:!0});var Vs=s($t);Bn=i(Vs,"here"),Vs.forEach(t),Vn=i(Ce,"."),Ce.forEach(t),on=p(o),Se=a(o,"H2",{class:!0});var yn=s(Se);Qe=a(yn,"A",{id:!0,class:!0,href:!0});var Rs=s(Qe);xo=a(Rs,"SPAN",{});var Ks=s(xo);k(Ot.$$.fragment,Ks),Ks.forEach(t),Rs.forEach(t),Rn=p(yn),Mo=a(yn,"SPAN",{});var Js=s(Mo);Kn=i(Js,"OPTConfig"),Js.forEach(t),yn.forEach(t),nn=p(o),ce=a(o,"DIV",{class:!0});var vt=s(ce);k(Ft.$$.fragment,vt),Jn=p(vt),Ge=a(vt,"P",{});var ko=s(Ge);Zn=i(ko,"This is the configuration class to store the configuration of a "),ho=a(ko,"A",{href:!0});var Zs=s(ho);Xn=i(Zs,"OPTModel"),Zs.forEach(t),Yn=i(ko,`. It is used to instantiate a OPT model
according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the OPT
`),xt=a(ko,"A",{href:!0,rel:!0});var Xs=s(xt);Qn=i(Xs,"facebook/opt-350m"),Xs.forEach(t),ea=i(ko," architecture."),ko.forEach(t),ta=p(vt),Ue=a(vt,"P",{});var wo=s(Ue);oa=i(wo,"Configuration objects inherit from "),mo=a(wo,"A",{href:!0});var Ys=s(mo);na=i(Ys,"PretrainedConfig"),Ys.forEach(t),aa=i(wo,` and can be used to control the model outputs. Read the
documentation from `),fo=a(wo,"A",{href:!0});var Qs=s(fo);sa=i(Qs,"PretrainedConfig"),Qs.forEach(t),ra=i(wo," for more information."),wo.forEach(t),ia=p(vt),k(et.$$.fragment,vt),vt.forEach(t),an=p(o),We=a(o,"H2",{class:!0});var bn=s(We);tt=a(bn,"A",{id:!0,class:!0,href:!0});var er=s(tt);Eo=a(er,"SPAN",{});var tr=s(Eo);k(Mt.$$.fragment,tr),tr.forEach(t),er.forEach(t),la=p(bn),zo=a(bn,"SPAN",{});var or=s(zo);da=i(or,"OPTModel"),or.forEach(t),bn.forEach(t),sn=p(o),pe=a(o,"DIV",{class:!0});var yt=s(pe);k(Et.$$.fragment,yt),ca=p(yt),zt=a(yt,"P",{});var kn=s(zt);pa=i(kn,`The bare OPT Model outputting raw hidden-states without any specific head on top.
This model inherits from `),go=a(kn,"A",{href:!0});var nr=s(go);ua=i(nr,"PreTrainedModel"),nr.forEach(t),ha=i(kn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),kn.forEach(t),ma=p(yt),Ct=a(yt,"P",{});var wn=s(Ct);fa=i(wn,"This model is also a PyTorch "),jt=a(wn,"A",{href:!0,rel:!0});var ar=s(jt);ga=i(ar,"torch.nn.Module"),ar.forEach(t),_a=i(wn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),wn.forEach(t),Ta=p(yt),ge=a(yt,"DIV",{class:!0});var bt=s(ge);k(Lt.$$.fragment,bt),va=p(bt),He=a(bt,"P",{});var Po=s(He);ya=i(Po,"The "),_o=a(Po,"A",{href:!0});var sr=s(_o);ba=i(sr,"OPTModel"),sr.forEach(t),ka=i(Po," forward method, overrides the "),Co=a(Po,"CODE",{});var rr=s(Co);wa=i(rr,"__call__"),rr.forEach(t),Pa=i(Po," special method."),Po.forEach(t),$a=p(bt),k(ot.$$.fragment,bt),Oa=p(bt),k(nt.$$.fragment,bt),bt.forEach(t),yt.forEach(t),rn=p(o),Be=a(o,"H2",{class:!0});var Pn=s(Be);at=a(Pn,"A",{id:!0,class:!0,href:!0});var ir=s(at);jo=a(ir,"SPAN",{});var lr=s(jo);k(qt.$$.fragment,lr),lr.forEach(t),ir.forEach(t),Fa=p(Pn),Lo=a(Pn,"SPAN",{});var dr=s(Lo);xa=i(dr,"OPTForCausalLM"),dr.forEach(t),Pn.forEach(t),ln=p(o),Ve=a(o,"DIV",{class:!0});var $n=s(Ve);k(Nt.$$.fragment,$n),Ma=p($n),st=a($n,"DIV",{class:!0});var On=s(st);k(It.$$.fragment,On),Ea=p(On),k(rt.$$.fragment,On),On.forEach(t),$n.forEach(t),dn=p(o),Re=a(o,"H2",{class:!0});var Fn=s(Re);it=a(Fn,"A",{id:!0,class:!0,href:!0});var cr=s(it);qo=a(cr,"SPAN",{});var pr=s(qo);k(At.$$.fragment,pr),pr.forEach(t),cr.forEach(t),za=p(Fn),No=a(Fn,"SPAN",{});var ur=s(No);Ca=i(ur,"TFOPTModel"),ur.forEach(t),Fn.forEach(t),cn=p(o),te=a(o,"DIV",{class:!0});var je=s(te);k(Dt.$$.fragment,je),ja=p(je),St=a(je,"P",{});var xn=s(St);La=i(xn,`The bare TF OPT Model outputting raw hidden-states without any specific head on top.
This model inherits from `),To=a(xn,"A",{href:!0});var hr=s(To);qa=i(hr,"TFPreTrainedModel"),hr.forEach(t),Na=i(xn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xn.forEach(t),Ia=p(je),Gt=a(je,"P",{});var Mn=s(Gt);Aa=i(Mn,"This model is also a "),Ut=a(Mn,"A",{href:!0,rel:!0});var mr=s(Ut);Da=i(mr,"tf.keras.Model"),mr.forEach(t),Sa=i(Mn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Mn.forEach(t),Ga=p(je),k(lt.$$.fragment,je),Ua=p(je),vo=a(je,"DIV",{class:!0});var fr=s(vo);k(Wt.$$.fragment,fr),fr.forEach(t),je.forEach(t),pn=p(o),Ke=a(o,"H2",{class:!0});var En=s(Ke);dt=a(En,"A",{id:!0,class:!0,href:!0});var gr=s(dt);Io=a(gr,"SPAN",{});var _r=s(Io);k(Ht.$$.fragment,_r),_r.forEach(t),gr.forEach(t),Wa=p(En),Ao=a(En,"SPAN",{});var Tr=s(Ao);Ha=i(Tr,"TFOPTForCausalLM"),Tr.forEach(t),En.forEach(t),un=p(o),B=a(o,"DIV",{class:!0});var _e=s(B);k(Bt.$$.fragment,_e),Ba=p(_e),Do=a(_e,"P",{});var vr=s(Do);Va=i(vr,"The OPT Model transformer with a language modeling head on top."),vr.forEach(t),Ra=p(_e),Vt=a(_e,"P",{});var zn=s(Vt);Ka=i(zn,"This model inherits from "),yo=a(zn,"A",{href:!0});var yr=s(yo);Ja=i(yr,"TFPreTrainedModel"),yr.forEach(t),Za=i(zn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),zn.forEach(t),Xa=p(_e),Rt=a(_e,"P",{});var Cn=s(Rt);Ya=i(Cn,"This model is also a "),Kt=a(Cn,"A",{href:!0,rel:!0});var br=s(Kt);Qa=i(br,"tf.keras.Model"),br.forEach(t),es=i(Cn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Cn.forEach(t),ts=p(_e),k(ct.$$.fragment,_e),os=p(_e),pt=a(_e,"DIV",{class:!0});var jn=s(pt);k(Jt.$$.fragment,jn),ns=p(jn),k(ut.$$.fragment,jn),jn.forEach(t),_e.forEach(t),hn=p(o),Je=a(o,"H2",{class:!0});var Ln=s(Je);ht=a(Ln,"A",{id:!0,class:!0,href:!0});var kr=s(ht);So=a(kr,"SPAN",{});var wr=s(So);k(Zt.$$.fragment,wr),wr.forEach(t),kr.forEach(t),as=p(Ln),Go=a(Ln,"SPAN",{});var Pr=s(Go);ss=i(Pr,"FlaxOPTModel"),Pr.forEach(t),Ln.forEach(t),mn=p(o),Ze=a(o,"DIV",{class:!0});var qn=s(Ze);k(Xt.$$.fragment,qn),rs=p(qn),mt=a(qn,"DIV",{class:!0});var Nn=s(mt);k(Yt.$$.fragment,Nn),is=p(Nn),k(ft.$$.fragment,Nn),Nn.forEach(t),qn.forEach(t),fn=p(o),Xe=a(o,"H2",{class:!0});var In=s(Xe);gt=a(In,"A",{id:!0,class:!0,href:!0});var $r=s(gt);Uo=a($r,"SPAN",{});var Or=s(Uo);k(Qt.$$.fragment,Or),Or.forEach(t),$r.forEach(t),ls=p(In),Wo=a(In,"SPAN",{});var Fr=s(Wo);ds=i(Fr,"FlaxOPTForCausalLM"),Fr.forEach(t),In.forEach(t),gn=p(o),I=a(o,"DIV",{class:!0});var se=s(I);k(eo.$$.fragment,se),cs=p(se),Ho=a(se,"P",{});var xr=s(Ho);ps=i(xr,`OPT Model with a language modeling head on top (linear layer with weights tied to the input embeddings) e.g for
autoregressive tasks.`),xr.forEach(t),us=p(se),to=a(se,"P",{});var An=s(to);hs=i(An,"This model inherits from "),bo=a(An,"A",{href:!0});var Mr=s(bo);ms=i(Mr,"FlaxPreTrainedModel"),Mr.forEach(t),fs=i(An,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),An.forEach(t),gs=p(se),oo=a(se,"P",{});var Dn=s(oo);_s=i(Dn,`This model is also a Flax Linen
`),no=a(Dn,"A",{href:!0,rel:!0});var Er=s(no);Ts=i(Er,"flax.nn.Module"),Er.forEach(t),vs=i(Dn,` subclass. Use it as a
regular Flax Module and refer to the Flax documentation for all matter related to general usage and behavior.`),Dn.forEach(t),ys=p(se),Bo=a(se,"P",{});var zr=s(Bo);bs=i(zr,"Finally, this model supports inherent JAX features such as:"),zr.forEach(t),ks=p(se),Me=a(se,"UL",{});var kt=s(Me);Vo=a(kt,"LI",{});var Cr=s(Vo);ao=a(Cr,"A",{href:!0,rel:!0});var jr=s(ao);ws=i(jr,"Just-In-Time (JIT) compilation"),jr.forEach(t),Cr.forEach(t),Ps=p(kt),Ro=a(kt,"LI",{});var Lr=s(Ro);so=a(Lr,"A",{href:!0,rel:!0});var qr=s(so);$s=i(qr,"Automatic Differentiation"),qr.forEach(t),Lr.forEach(t),Os=p(kt),Ko=a(kt,"LI",{});var Nr=s(Ko);ro=a(Nr,"A",{href:!0,rel:!0});var Ir=s(ro);Fs=i(Ir,"Vectorization"),Ir.forEach(t),Nr.forEach(t),xs=p(kt),Jo=a(kt,"LI",{});var Ar=s(Jo);io=a(Ar,"A",{href:!0,rel:!0});var Dr=s(io);Ms=i(Dr,"Parallelization"),Dr.forEach(t),Ar.forEach(t),kt.forEach(t),Es=p(se),_t=a(se,"DIV",{class:!0});var Sn=s(_t);k(lo.$$.fragment,Sn),zs=p(Sn),k(Tt.$$.fragment,Sn),Sn.forEach(t),se.forEach(t),this.h()},h(){d(m,"name","hf:doc:metadata"),d(m,"content",JSON.stringify(ti)),d(u,"id","opt"),d(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u,"href","#opt"),d(T,"class","relative group"),d(V,"id","overview"),d(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V,"href","#overview"),d(F,"class","relative group"),d(Z,"href","https://arxiv.org/pdf/2205.01068"),d(Z,"rel","nofollow"),d(N,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoTokenizer"),d(de,"href","https://huggingface.co/ArthurZ"),d(de,"rel","nofollow"),d(wt,"href","https://huggingface.co/ybelkada"),d(wt,"rel","nofollow"),d(Pt,"href","https://huggingface.co/patrickvonplaten"),d(Pt,"rel","nofollow"),d($t,"href","https://github.com/facebookresearch/metaseq"),d($t,"rel","nofollow"),d(Qe,"id","transformers.OPTConfig"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#transformers.OPTConfig"),d(Se,"class","relative group"),d(ho,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel"),d(xt,"href","https://huggingface.co/facebook/opt-350m"),d(xt,"rel","nofollow"),d(mo,"href","/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig"),d(fo,"href","/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"id","transformers.OPTModel"),d(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tt,"href","#transformers.OPTModel"),d(We,"class","relative group"),d(go,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel"),d(jt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(jt,"rel","nofollow"),d(_o,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(at,"id","transformers.OPTForCausalLM"),d(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(at,"href","#transformers.OPTForCausalLM"),d(Be,"class","relative group"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"id","transformers.TFOPTModel"),d(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(it,"href","#transformers.TFOPTModel"),d(Re,"class","relative group"),d(To,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.TFPreTrainedModel"),d(Ut,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Ut,"rel","nofollow"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dt,"id","transformers.TFOPTForCausalLM"),d(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dt,"href","#transformers.TFOPTForCausalLM"),d(Ke,"class","relative group"),d(yo,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.TFPreTrainedModel"),d(Kt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Kt,"rel","nofollow"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"id","transformers.FlaxOPTModel"),d(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ht,"href","#transformers.FlaxOPTModel"),d(Je,"class","relative group"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"id","transformers.FlaxOPTForCausalLM"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#transformers.FlaxOPTForCausalLM"),d(Xe,"class","relative group"),d(bo,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.FlaxPreTrainedModel"),d(no,"href","https://flax.readthedocs.io/en/latest/_autosummary/flax.nn.module.html"),d(no,"rel","nofollow"),d(ao,"href","https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit"),d(ao,"rel","nofollow"),d(so,"href","https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation"),d(so,"rel","nofollow"),d(ro,"href","https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap"),d(ro,"rel","nofollow"),d(io,"href","https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap"),d(io,"rel","nofollow"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,f){e(document.head,m),h(o,y,f),h(o,T,f),e(T,u),e(u,v),w(l,v,null),e(T,_),e(T,q),e(q,Te),h(o,oe,f),h(o,F,f),e(F,V),e(V,D),w(J,D,null),e(F,ve),e(F,S),e(S,ye),h(o,he,f),h(o,A,f),e(A,G),e(A,Z),e(Z,re),e(A,E),h(o,j,f),h(o,ne,f),e(ne,X),h(o,me,f),h(o,ae,f),e(ae,U),e(U,be),h(o,fe,f),h(o,C,f),e(C,ke),h(o,R,f),h(o,K,f),e(K,Y),e(Y,Q),e(Y,ie),e(ie,we),e(Y,W),e(K,Pe),e(K,z),e(z,$e),e(z,g),e(g,x),e(z,le),e(z,Oe),e(Oe,Le),e(z,H),e(z,Fe),e(Fe,qe),e(z,Ne),e(z,N),e(N,ee),e(z,Ie),h(o,Ee,f),h(o,M,f),e(M,Ae),e(M,de),e(de,xe),e(M,De),e(M,wt),e(wt,Gn),e(M,Un),e(M,Pt),e(Pt,Wn),e(M,Hn),e(M,$t),e($t,Bn),e(M,Vn),h(o,on,f),h(o,Se,f),e(Se,Qe),e(Qe,xo),w(Ot,xo,null),e(Se,Rn),e(Se,Mo),e(Mo,Kn),h(o,nn,f),h(o,ce,f),w(Ft,ce,null),e(ce,Jn),e(ce,Ge),e(Ge,Zn),e(Ge,ho),e(ho,Xn),e(Ge,Yn),e(Ge,xt),e(xt,Qn),e(Ge,ea),e(ce,ta),e(ce,Ue),e(Ue,oa),e(Ue,mo),e(mo,na),e(Ue,aa),e(Ue,fo),e(fo,sa),e(Ue,ra),e(ce,ia),w(et,ce,null),h(o,an,f),h(o,We,f),e(We,tt),e(tt,Eo),w(Mt,Eo,null),e(We,la),e(We,zo),e(zo,da),h(o,sn,f),h(o,pe,f),w(Et,pe,null),e(pe,ca),e(pe,zt),e(zt,pa),e(zt,go),e(go,ua),e(zt,ha),e(pe,ma),e(pe,Ct),e(Ct,fa),e(Ct,jt),e(jt,ga),e(Ct,_a),e(pe,Ta),e(pe,ge),w(Lt,ge,null),e(ge,va),e(ge,He),e(He,ya),e(He,_o),e(_o,ba),e(He,ka),e(He,Co),e(Co,wa),e(He,Pa),e(ge,$a),w(ot,ge,null),e(ge,Oa),w(nt,ge,null),h(o,rn,f),h(o,Be,f),e(Be,at),e(at,jo),w(qt,jo,null),e(Be,Fa),e(Be,Lo),e(Lo,xa),h(o,ln,f),h(o,Ve,f),w(Nt,Ve,null),e(Ve,Ma),e(Ve,st),w(It,st,null),e(st,Ea),w(rt,st,null),h(o,dn,f),h(o,Re,f),e(Re,it),e(it,qo),w(At,qo,null),e(Re,za),e(Re,No),e(No,Ca),h(o,cn,f),h(o,te,f),w(Dt,te,null),e(te,ja),e(te,St),e(St,La),e(St,To),e(To,qa),e(St,Na),e(te,Ia),e(te,Gt),e(Gt,Aa),e(Gt,Ut),e(Ut,Da),e(Gt,Sa),e(te,Ga),w(lt,te,null),e(te,Ua),e(te,vo),w(Wt,vo,null),h(o,pn,f),h(o,Ke,f),e(Ke,dt),e(dt,Io),w(Ht,Io,null),e(Ke,Wa),e(Ke,Ao),e(Ao,Ha),h(o,un,f),h(o,B,f),w(Bt,B,null),e(B,Ba),e(B,Do),e(Do,Va),e(B,Ra),e(B,Vt),e(Vt,Ka),e(Vt,yo),e(yo,Ja),e(Vt,Za),e(B,Xa),e(B,Rt),e(Rt,Ya),e(Rt,Kt),e(Kt,Qa),e(Rt,es),e(B,ts),w(ct,B,null),e(B,os),e(B,pt),w(Jt,pt,null),e(pt,ns),w(ut,pt,null),h(o,hn,f),h(o,Je,f),e(Je,ht),e(ht,So),w(Zt,So,null),e(Je,as),e(Je,Go),e(Go,ss),h(o,mn,f),h(o,Ze,f),w(Xt,Ze,null),e(Ze,rs),e(Ze,mt),w(Yt,mt,null),e(mt,is),w(ft,mt,null),h(o,fn,f),h(o,Xe,f),e(Xe,gt),e(gt,Uo),w(Qt,Uo,null),e(Xe,ls),e(Xe,Wo),e(Wo,ds),h(o,gn,f),h(o,I,f),w(eo,I,null),e(I,cs),e(I,Ho),e(Ho,ps),e(I,us),e(I,to),e(to,hs),e(to,bo),e(bo,ms),e(to,fs),e(I,gs),e(I,oo),e(oo,_s),e(oo,no),e(no,Ts),e(oo,vs),e(I,ys),e(I,Bo),e(Bo,bs),e(I,ks),e(I,Me),e(Me,Vo),e(Vo,ao),e(ao,ws),e(Me,Ps),e(Me,Ro),e(Ro,so),e(so,$s),e(Me,Os),e(Me,Ko),e(Ko,ro),e(ro,Fs),e(Me,xs),e(Me,Jo),e(Jo,io),e(io,Ms),e(I,Es),e(I,_t),w(lo,_t,null),e(_t,zs),w(Tt,_t,null),_n=!0},p(o,[f]){const co={};f&2&&(co.$$scope={dirty:f,ctx:o}),et.$set(co);const Zo={};f&2&&(Zo.$$scope={dirty:f,ctx:o}),ot.$set(Zo);const Xo={};f&2&&(Xo.$$scope={dirty:f,ctx:o}),nt.$set(Xo);const Yo={};f&2&&(Yo.$$scope={dirty:f,ctx:o}),rt.$set(Yo);const po={};f&2&&(po.$$scope={dirty:f,ctx:o}),lt.$set(po);const Qo={};f&2&&(Qo.$$scope={dirty:f,ctx:o}),ct.$set(Qo);const en={};f&2&&(en.$$scope={dirty:f,ctx:o}),ut.$set(en);const tn={};f&2&&(tn.$$scope={dirty:f,ctx:o}),ft.$set(tn);const uo={};f&2&&(uo.$$scope={dirty:f,ctx:o}),Tt.$set(uo)},i(o){_n||(P(l.$$.fragment,o),P(J.$$.fragment,o),P(Ot.$$.fragment,o),P(Ft.$$.fragment,o),P(et.$$.fragment,o),P(Mt.$$.fragment,o),P(Et.$$.fragment,o),P(Lt.$$.fragment,o),P(ot.$$.fragment,o),P(nt.$$.fragment,o),P(qt.$$.fragment,o),P(Nt.$$.fragment,o),P(It.$$.fragment,o),P(rt.$$.fragment,o),P(At.$$.fragment,o),P(Dt.$$.fragment,o),P(lt.$$.fragment,o),P(Wt.$$.fragment,o),P(Ht.$$.fragment,o),P(Bt.$$.fragment,o),P(ct.$$.fragment,o),P(Jt.$$.fragment,o),P(ut.$$.fragment,o),P(Zt.$$.fragment,o),P(Xt.$$.fragment,o),P(Yt.$$.fragment,o),P(ft.$$.fragment,o),P(Qt.$$.fragment,o),P(eo.$$.fragment,o),P(lo.$$.fragment,o),P(Tt.$$.fragment,o),_n=!0)},o(o){$(l.$$.fragment,o),$(J.$$.fragment,o),$(Ot.$$.fragment,o),$(Ft.$$.fragment,o),$(et.$$.fragment,o),$(Mt.$$.fragment,o),$(Et.$$.fragment,o),$(Lt.$$.fragment,o),$(ot.$$.fragment,o),$(nt.$$.fragment,o),$(qt.$$.fragment,o),$(Nt.$$.fragment,o),$(It.$$.fragment,o),$(rt.$$.fragment,o),$(At.$$.fragment,o),$(Dt.$$.fragment,o),$(lt.$$.fragment,o),$(Wt.$$.fragment,o),$(Ht.$$.fragment,o),$(Bt.$$.fragment,o),$(ct.$$.fragment,o),$(Jt.$$.fragment,o),$(ut.$$.fragment,o),$(Zt.$$.fragment,o),$(Xt.$$.fragment,o),$(Yt.$$.fragment,o),$(ft.$$.fragment,o),$(Qt.$$.fragment,o),$(eo.$$.fragment,o),$(lo.$$.fragment,o),$(Tt.$$.fragment,o),_n=!1},d(o){t(m),o&&t(y),o&&t(T),O(l),o&&t(oe),o&&t(F),O(J),o&&t(he),o&&t(A),o&&t(j),o&&t(ne),o&&t(me),o&&t(ae),o&&t(fe),o&&t(C),o&&t(R),o&&t(K),o&&t(Ee),o&&t(M),o&&t(on),o&&t(Se),O(Ot),o&&t(nn),o&&t(ce),O(Ft),O(et),o&&t(an),o&&t(We),O(Mt),o&&t(sn),o&&t(pe),O(Et),O(Lt),O(ot),O(nt),o&&t(rn),o&&t(Be),O(qt),o&&t(ln),o&&t(Ve),O(Nt),O(It),O(rt),o&&t(dn),o&&t(Re),O(At),o&&t(cn),o&&t(te),O(Dt),O(lt),O(Wt),o&&t(pn),o&&t(Ke),O(Ht),o&&t(un),o&&t(B),O(Bt),O(ct),O(Jt),O(ut),o&&t(hn),o&&t(Je),O(Zt),o&&t(mn),o&&t(Ze),O(Xt),O(Yt),O(ft),o&&t(fn),o&&t(Xe),O(Qt),o&&t(gn),o&&t(I),O(eo),O(lo),O(Tt)}}}const ti={local:"opt",sections:[{local:"overview",title:"Overview"},{local:"transformers.OPTConfig",title:"OPTConfig"},{local:"transformers.OPTModel",title:"OPTModel"},{local:"transformers.OPTForCausalLM",title:"OPTForCausalLM"},{local:"transformers.TFOPTModel",title:"TFOPTModel"},{local:"transformers.TFOPTForCausalLM",title:"TFOPTForCausalLM"},{local:"transformers.FlaxOPTModel",title:"FlaxOPTModel"},{local:"transformers.FlaxOPTForCausalLM",title:"FlaxOPTForCausalLM"}],title:"OPT"};function oi(L){return Hr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class di extends Sr{constructor(m){super();Gr(this,m,oi,ei,Ur,{})}}export{di as default,ti as metadata};
