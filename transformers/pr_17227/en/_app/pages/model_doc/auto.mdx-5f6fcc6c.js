import{S as f9t,i as m9t,s as g9t,e as a,k as l,w as F,t as o,M as h9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as p9t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function _9t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,h6,pf,De,We,gi,yn,p6,Ln,xn,_6,hi,$n,u6,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),h6=o(")."),pf=l(),De=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),p6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),_6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),u6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var B$=s(p);m=r(B$,"NewModelConfig"),B$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var I$=s(ci);hf=r(I$,"model_type"),I$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var q$=s(fi);mi=r(q$,'"new-model"'),q$.forEach(t),h6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),p6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var N$=s(Ln);xn=r(N$,"PreTrainedModel"),N$.forEach(t),_6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),u6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var j$=s(pi);_f=r(j$,"NewModelConfig"),j$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,h6),b(Qe,pf,Ae),b(Qe,De,Ae),e(De,We),e(De,gi),e(gi,yn),e(De,p6),e(De,Ln),e(Ln,xn),e(De,_6),e(De,hi),e(hi,$n),e(De,u6),e(De,pi),e(pi,_f),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(De)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,h6,pf,De,We,gi,yn,p6,Ln,xn,_6,hi,$n,u6,pi,_f,Ca,Qe,Ae,B$,_i,I$,q$,Eo,wa,N$,uf,j$,AGe,pqe,ui,bf,Dee,b6,yGe,Gee,LGe,_qe,kn,xGe,Oee,$Ge,kGe,Vee,SGe,RGe,uqe,v6,bqe,D$,PGe,vqe,vf,Fqe,bi,Ff,Xee,F6,BGe,zee,IGe,Tqe,Co,T6,qGe,M6,NGe,G$,jGe,DGe,GGe,E6,OGe,Wee,VGe,XGe,zGe,Er,C6,WGe,Qee,QGe,HGe,vi,UGe,Hee,JGe,YGe,Uee,KGe,ZGe,eOe,A,Tf,Jee,oOe,rOe,O$,tOe,aOe,nOe,Mf,Yee,sOe,lOe,V$,iOe,dOe,cOe,Ef,Kee,fOe,mOe,X$,gOe,hOe,pOe,Cf,Zee,_Oe,uOe,z$,bOe,vOe,FOe,wf,eoe,TOe,MOe,W$,EOe,COe,wOe,Af,ooe,AOe,yOe,Q$,LOe,xOe,$Oe,yf,roe,kOe,SOe,H$,ROe,POe,BOe,Lf,toe,IOe,qOe,U$,NOe,jOe,DOe,xf,aoe,GOe,OOe,J$,VOe,XOe,zOe,$f,noe,WOe,QOe,Y$,HOe,UOe,JOe,kf,soe,YOe,KOe,K$,ZOe,eVe,oVe,Sf,loe,rVe,tVe,Z$,aVe,nVe,sVe,Rf,ioe,lVe,iVe,ek,dVe,cVe,fVe,Pf,doe,mVe,gVe,ok,hVe,pVe,_Ve,Bf,coe,uVe,bVe,rk,vVe,FVe,TVe,If,foe,MVe,EVe,tk,CVe,wVe,AVe,qf,moe,yVe,LVe,ak,xVe,$Ve,kVe,Nf,goe,SVe,RVe,nk,PVe,BVe,IVe,jf,hoe,qVe,NVe,sk,jVe,DVe,GVe,Df,poe,OVe,VVe,lk,XVe,zVe,WVe,Gf,_oe,QVe,HVe,ik,UVe,JVe,YVe,Of,uoe,KVe,ZVe,dk,eXe,oXe,rXe,Vf,boe,tXe,aXe,ck,nXe,sXe,lXe,Xf,voe,iXe,dXe,fk,cXe,fXe,mXe,zf,Foe,gXe,hXe,mk,pXe,_Xe,uXe,Wf,Toe,bXe,vXe,gk,FXe,TXe,MXe,Qf,Moe,EXe,CXe,hk,wXe,AXe,yXe,Hf,Eoe,LXe,xXe,pk,$Xe,kXe,SXe,Uf,Coe,RXe,PXe,_k,BXe,IXe,qXe,Jf,woe,NXe,jXe,uk,DXe,GXe,OXe,Yf,Aoe,VXe,XXe,bk,zXe,WXe,QXe,Kf,yoe,HXe,UXe,vk,JXe,YXe,KXe,Zf,Loe,ZXe,eze,Fk,oze,rze,tze,em,xoe,aze,nze,Tk,sze,lze,ize,om,$oe,dze,cze,Mk,fze,mze,gze,rm,koe,hze,pze,Ek,_ze,uze,bze,tm,Soe,vze,Fze,Ck,Tze,Mze,Eze,am,Roe,Cze,wze,wk,Aze,yze,Lze,nm,Poe,xze,$ze,Ak,kze,Sze,Rze,sm,Boe,Pze,Bze,yk,Ize,qze,Nze,lm,Ioe,jze,Dze,Lk,Gze,Oze,Vze,im,qoe,Xze,zze,xk,Wze,Qze,Hze,dm,Noe,Uze,Jze,$k,Yze,Kze,Zze,cm,joe,eWe,oWe,kk,rWe,tWe,aWe,fm,Doe,nWe,sWe,Sk,lWe,iWe,dWe,mm,Goe,cWe,fWe,Rk,mWe,gWe,hWe,gm,Ooe,pWe,_We,Pk,uWe,bWe,vWe,hm,Voe,FWe,TWe,Bk,MWe,EWe,CWe,pm,Xoe,wWe,AWe,Ik,yWe,LWe,xWe,_m,zoe,$We,kWe,qk,SWe,RWe,PWe,um,Woe,BWe,IWe,Nk,qWe,NWe,jWe,bm,Qoe,DWe,GWe,jk,OWe,VWe,XWe,vm,Hoe,zWe,WWe,Dk,QWe,HWe,UWe,Fm,Uoe,JWe,YWe,Gk,KWe,ZWe,eQe,Tm,Joe,oQe,rQe,Ok,tQe,aQe,nQe,Mm,Yoe,sQe,lQe,Vk,iQe,dQe,cQe,Em,Koe,fQe,mQe,Xk,gQe,hQe,pQe,Cm,Zoe,_Qe,uQe,zk,bQe,vQe,FQe,wm,ere,TQe,MQe,Wk,EQe,CQe,wQe,Am,ore,AQe,yQe,Qk,LQe,xQe,$Qe,ym,rre,kQe,SQe,Hk,RQe,PQe,BQe,Lm,tre,IQe,qQe,Uk,NQe,jQe,DQe,xm,are,GQe,OQe,Jk,VQe,XQe,zQe,$m,nre,WQe,QQe,Yk,HQe,UQe,JQe,km,sre,YQe,KQe,Kk,ZQe,eHe,oHe,Sm,lre,rHe,tHe,Zk,aHe,nHe,sHe,Rm,ire,lHe,iHe,eS,dHe,cHe,fHe,Pm,dre,mHe,gHe,oS,hHe,pHe,_He,Bm,cre,uHe,bHe,rS,vHe,FHe,THe,Im,fre,MHe,EHe,tS,CHe,wHe,AHe,qm,mre,yHe,LHe,aS,xHe,$He,kHe,Nm,gre,SHe,RHe,nS,PHe,BHe,IHe,jm,hre,qHe,NHe,sS,jHe,DHe,GHe,Dm,pre,OHe,VHe,lS,XHe,zHe,WHe,Gm,_re,QHe,HHe,iS,UHe,JHe,YHe,Om,ure,KHe,ZHe,dS,eUe,oUe,rUe,Vm,bre,tUe,aUe,cS,nUe,sUe,lUe,Xm,vre,iUe,dUe,fS,cUe,fUe,mUe,zm,Fre,gUe,hUe,mS,pUe,_Ue,uUe,Wm,Tre,bUe,vUe,gS,FUe,TUe,MUe,Qm,Mre,EUe,CUe,hS,wUe,AUe,yUe,Hm,Ere,LUe,xUe,pS,$Ue,kUe,SUe,Um,Cre,RUe,PUe,_S,BUe,IUe,qUe,Jm,wre,NUe,jUe,uS,DUe,GUe,OUe,Ym,Are,VUe,XUe,bS,zUe,WUe,QUe,Km,yre,HUe,UUe,vS,JUe,YUe,KUe,Zm,Lre,ZUe,eJe,FS,oJe,rJe,tJe,eg,xre,aJe,nJe,TS,sJe,lJe,iJe,og,$re,dJe,cJe,MS,fJe,mJe,gJe,rg,kre,hJe,pJe,ES,_Je,uJe,bJe,tg,Sre,vJe,FJe,CS,TJe,MJe,EJe,ag,Rre,CJe,wJe,wS,AJe,yJe,LJe,ng,Pre,xJe,$Je,AS,kJe,SJe,RJe,sg,Bre,PJe,BJe,yS,IJe,qJe,NJe,lg,Ire,jJe,DJe,LS,GJe,OJe,VJe,ig,qre,XJe,zJe,xS,WJe,QJe,HJe,dg,Nre,UJe,JJe,$S,YJe,KJe,ZJe,cg,jre,eYe,oYe,kS,rYe,tYe,aYe,fg,Dre,nYe,sYe,SS,lYe,iYe,dYe,mg,Gre,cYe,fYe,RS,mYe,gYe,hYe,gg,Ore,pYe,_Ye,PS,uYe,bYe,vYe,hg,Vre,FYe,TYe,BS,MYe,EYe,CYe,pg,Xre,wYe,AYe,IS,yYe,LYe,xYe,_g,zre,$Ye,kYe,qS,SYe,RYe,PYe,ug,Wre,BYe,IYe,NS,qYe,NYe,jYe,bg,Qre,DYe,GYe,jS,OYe,VYe,XYe,vg,Hre,zYe,WYe,DS,QYe,HYe,UYe,Fg,JYe,Tg,w6,YYe,Ure,KYe,Mqe,Fi,Mg,Jre,A6,ZYe,Yre,eKe,Eqe,wo,y6,oKe,L6,rKe,GS,tKe,aKe,nKe,x6,sKe,Kre,lKe,iKe,dKe,Cr,$6,cKe,Zre,fKe,mKe,Aa,gKe,ete,hKe,pKe,ote,_Ke,uKe,rte,bKe,vKe,FKe,k,Sn,tte,TKe,MKe,OS,EKe,CKe,VS,wKe,AKe,yKe,Rn,ate,LKe,xKe,XS,$Ke,kKe,zS,SKe,RKe,PKe,Pn,nte,BKe,IKe,WS,qKe,NKe,QS,jKe,DKe,GKe,Eg,ste,OKe,VKe,HS,XKe,zKe,WKe,Bn,lte,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Cg,ite,eZe,oZe,YS,rZe,tZe,aZe,wg,dte,nZe,sZe,KS,lZe,iZe,dZe,Ag,cte,cZe,fZe,ZS,mZe,gZe,hZe,In,fte,pZe,_Ze,eR,uZe,bZe,oR,vZe,FZe,TZe,qn,mte,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Nn,gte,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,yg,hte,IZe,qZe,sR,NZe,jZe,DZe,Lg,pte,GZe,OZe,lR,VZe,XZe,zZe,jn,_te,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,xg,ute,ZZe,eeo,cR,oeo,reo,teo,Dn,bte,aeo,neo,fR,seo,leo,mR,ieo,deo,ceo,Gn,vte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,On,Fte,beo,veo,pR,Feo,Teo,_R,Meo,Eeo,Ceo,$g,Tte,weo,Aeo,uR,yeo,Leo,xeo,Vn,Mte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,Xn,Ete,qeo,Neo,FR,jeo,Deo,TR,Geo,Oeo,Veo,zn,Cte,Xeo,zeo,MR,Weo,Qeo,ER,Heo,Ueo,Jeo,Wn,wte,Yeo,Keo,CR,Zeo,eoo,wR,ooo,roo,too,Qn,Ate,aoo,noo,AR,soo,loo,yR,ioo,doo,coo,Hn,yte,foo,moo,LR,goo,hoo,xR,poo,_oo,uoo,kg,Lte,boo,voo,$R,Foo,Too,Moo,Un,xte,Eoo,Coo,kR,woo,Aoo,SR,yoo,Loo,xoo,Sg,$te,$oo,koo,RR,Soo,Roo,Poo,Jn,kte,Boo,Ioo,PR,qoo,Noo,BR,joo,Doo,Goo,Yn,Ste,Ooo,Voo,IR,Xoo,zoo,qR,Woo,Qoo,Hoo,Kn,Rte,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,Zn,Pte,rro,tro,DR,aro,nro,GR,sro,lro,iro,es,Bte,dro,cro,OR,fro,mro,VR,gro,hro,pro,Rg,Ite,_ro,uro,XR,bro,vro,Fro,os,qte,Tro,Mro,zR,Ero,Cro,WR,wro,Aro,yro,rs,Nte,Lro,xro,QR,$ro,kro,HR,Sro,Rro,Pro,ts,jte,Bro,Iro,UR,qro,Nro,JR,jro,Dro,Gro,as,Dte,Oro,Vro,YR,Xro,zro,KR,Wro,Qro,Hro,ns,Gte,Uro,Jro,ZR,Yro,Kro,eP,Zro,eto,oto,ss,Ote,rto,tto,oP,ato,nto,rP,sto,lto,ito,Pg,Vte,dto,cto,tP,fto,mto,gto,ls,Xte,hto,pto,aP,_to,uto,nP,bto,vto,Fto,Bg,zte,Tto,Mto,sP,Eto,Cto,wto,Ig,Wte,Ato,yto,lP,Lto,xto,$to,is,Qte,kto,Sto,iP,Rto,Pto,dP,Bto,Ito,qto,ds,Hte,Nto,jto,cP,Dto,Gto,fP,Oto,Vto,Xto,cs,Ute,zto,Wto,mP,Qto,Hto,gP,Uto,Jto,Yto,qg,Jte,Kto,Zto,hP,eao,oao,rao,fs,Yte,tao,aao,pP,nao,sao,_P,lao,iao,dao,ms,Kte,cao,fao,uP,mao,gao,bP,hao,pao,_ao,gs,Zte,uao,bao,vP,vao,Fao,FP,Tao,Mao,Eao,hs,eae,Cao,wao,TP,Aao,yao,MP,Lao,xao,$ao,ps,oae,kao,Sao,EP,Rao,Pao,CP,Bao,Iao,qao,Ng,rae,Nao,jao,wP,Dao,Gao,Oao,_s,tae,Vao,Xao,AP,zao,Wao,yP,Qao,Hao,Uao,jg,aae,Jao,Yao,LP,Kao,Zao,eno,Dg,nae,ono,rno,xP,tno,ano,nno,Gg,sae,sno,lno,$P,ino,dno,cno,Og,lae,fno,mno,kP,gno,hno,pno,us,iae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,Vg,dae,Eno,Cno,PP,wno,Ano,yno,bs,cae,Lno,xno,BP,$no,kno,IP,Sno,Rno,Pno,vs,fae,Bno,Ino,qP,qno,Nno,NP,jno,Dno,Gno,Fs,mae,Ono,Vno,jP,Xno,zno,DP,Wno,Qno,Hno,Ts,gae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,Ms,hae,rso,tso,VP,aso,nso,XP,sso,lso,iso,Es,pae,dso,cso,zP,fso,mso,WP,gso,hso,pso,Xg,_ae,_so,uso,QP,bso,vso,Fso,zg,uae,Tso,Mso,HP,Eso,Cso,wso,Cs,bae,Aso,yso,UP,Lso,xso,JP,$so,kso,Sso,ws,vae,Rso,Pso,YP,Bso,Iso,KP,qso,Nso,jso,As,Fae,Dso,Gso,ZP,Oso,Vso,eB,Xso,zso,Wso,Wg,Tae,Qso,Hso,oB,Uso,Jso,Yso,Qg,Mae,Kso,Zso,rB,elo,olo,rlo,Hg,Eae,tlo,alo,tB,nlo,slo,llo,ys,Cae,ilo,dlo,aB,clo,flo,nB,mlo,glo,hlo,Ug,wae,plo,_lo,sB,ulo,blo,vlo,Jg,Aae,Flo,Tlo,lB,Mlo,Elo,Clo,Yg,yae,wlo,Alo,iB,ylo,Llo,xlo,Ls,Lae,$lo,klo,dB,Slo,Rlo,cB,Plo,Blo,Ilo,Kg,xae,qlo,Nlo,fB,jlo,Dlo,Glo,Zg,$ae,Olo,Vlo,mB,Xlo,zlo,Wlo,xs,kae,Qlo,Hlo,gB,Ulo,Jlo,hB,Ylo,Klo,Zlo,$s,Sae,eio,oio,pB,rio,tio,_B,aio,nio,sio,ks,Rae,lio,iio,uB,dio,cio,bB,fio,mio,gio,Ss,Pae,hio,pio,vB,_io,uio,FB,bio,vio,Fio,eh,Tio,oh,k6,Mio,Bae,Eio,Cqe,Ti,rh,Iae,S6,Cio,qae,wio,wqe,Ao,R6,Aio,P6,yio,TB,Lio,xio,$io,B6,kio,Nae,Sio,Rio,Pio,He,I6,Bio,jae,Iio,qio,ya,Nio,Dae,jio,Dio,Gae,Gio,Oio,Oae,Vio,Xio,zio,Z,th,Vae,Wio,Qio,MB,Hio,Uio,Jio,ah,Xae,Yio,Kio,EB,Zio,edo,odo,nh,zae,rdo,tdo,CB,ado,ndo,sdo,sh,Wae,ldo,ido,wB,ddo,cdo,fdo,lh,Qae,mdo,gdo,AB,hdo,pdo,_do,ih,Hae,udo,bdo,yB,vdo,Fdo,Tdo,dh,Uae,Mdo,Edo,LB,Cdo,wdo,Ado,ch,Jae,ydo,Ldo,xB,xdo,$do,kdo,fh,Yae,Sdo,Rdo,$B,Pdo,Bdo,Ido,mh,Kae,qdo,Ndo,kB,jdo,Ddo,Gdo,gh,Zae,Odo,Vdo,SB,Xdo,zdo,Wdo,hh,ene,Qdo,Hdo,RB,Udo,Jdo,Ydo,ph,one,Kdo,Zdo,PB,eco,oco,rco,_h,rne,tco,aco,BB,nco,sco,lco,uh,tne,ico,dco,IB,cco,fco,mco,bh,ane,gco,hco,qB,pco,_co,uco,vh,nne,bco,vco,NB,Fco,Tco,Mco,Fh,sne,Eco,Cco,jB,wco,Aco,yco,Th,lne,Lco,xco,DB,$co,kco,Sco,Mh,ine,Rco,Pco,GB,Bco,Ico,qco,Eh,dne,Nco,jco,OB,Dco,Gco,Oco,Ch,cne,Vco,Xco,VB,zco,Wco,Qco,wh,fne,Hco,Uco,XB,Jco,Yco,Kco,Ah,mne,Zco,efo,zB,ofo,rfo,tfo,yh,gne,afo,nfo,WB,sfo,lfo,ifo,Lh,hne,dfo,cfo,QB,ffo,mfo,gfo,xh,pne,hfo,pfo,HB,_fo,ufo,bfo,$h,vfo,kh,Ffo,Sh,q6,Tfo,_ne,Mfo,Aqe,Mi,Rh,une,N6,Efo,bne,Cfo,yqe,yo,j6,wfo,D6,Afo,UB,yfo,Lfo,xfo,G6,$fo,vne,kfo,Sfo,Rfo,Ue,O6,Pfo,Fne,Bfo,Ifo,Ei,qfo,Tne,Nfo,jfo,Mne,Dfo,Gfo,Ofo,pe,Ph,Ene,Vfo,Xfo,JB,zfo,Wfo,Qfo,Bh,Cne,Hfo,Ufo,wne,Jfo,Yfo,Kfo,Ih,Ane,Zfo,emo,YB,omo,rmo,tmo,qh,yne,amo,nmo,KB,smo,lmo,imo,Nh,Lne,dmo,cmo,ZB,fmo,mmo,gmo,jh,xne,hmo,pmo,eI,_mo,umo,bmo,Dh,$ne,vmo,Fmo,oI,Tmo,Mmo,Emo,Gh,kne,Cmo,wmo,rI,Amo,ymo,Lmo,Oh,Sne,xmo,$mo,tI,kmo,Smo,Rmo,Vh,Rne,Pmo,Bmo,aI,Imo,qmo,Nmo,Xh,Pne,jmo,Dmo,nI,Gmo,Omo,Vmo,zh,Bne,Xmo,zmo,sI,Wmo,Qmo,Hmo,Wh,Ine,Umo,Jmo,lI,Ymo,Kmo,Zmo,Qh,qne,ego,ogo,iI,rgo,tgo,ago,Hh,Nne,ngo,sgo,dI,lgo,igo,dgo,Uh,jne,cgo,fgo,cI,mgo,ggo,hgo,Jh,pgo,Yh,_go,Kh,V6,ugo,Dne,bgo,Lqe,Ci,Zh,Gne,X6,vgo,One,Fgo,xqe,Lo,z6,Tgo,wi,Mgo,fI,Ego,Cgo,mI,wgo,Ago,ygo,W6,Lgo,Vne,xgo,$go,kgo,tt,Q6,Sgo,Xne,Rgo,Pgo,Ai,Bgo,zne,Igo,qgo,gI,Ngo,jgo,Dgo,ep,Ggo,Je,H6,Ogo,Wne,Vgo,Xgo,La,zgo,Qne,Wgo,Qgo,Hne,Hgo,Ugo,Une,Jgo,Ygo,Kgo,x,op,Jne,Zgo,eho,hI,oho,rho,tho,rp,Yne,aho,nho,pI,sho,lho,iho,tp,Kne,dho,cho,_I,fho,mho,gho,ap,Zne,hho,pho,uI,_ho,uho,bho,np,ese,vho,Fho,bI,Tho,Mho,Eho,sp,ose,Cho,who,vI,Aho,yho,Lho,lp,rse,xho,$ho,FI,kho,Sho,Rho,ip,tse,Pho,Bho,TI,Iho,qho,Nho,dp,ase,jho,Dho,MI,Gho,Oho,Vho,cp,nse,Xho,zho,EI,Who,Qho,Hho,fp,sse,Uho,Jho,CI,Yho,Kho,Zho,mp,lse,epo,opo,wI,rpo,tpo,apo,gp,ise,npo,spo,AI,lpo,ipo,dpo,hp,dse,cpo,fpo,yI,mpo,gpo,hpo,pp,cse,ppo,_po,LI,upo,bpo,vpo,_p,fse,Fpo,Tpo,xI,Mpo,Epo,Cpo,up,mse,wpo,Apo,$I,ypo,Lpo,xpo,bp,gse,$po,kpo,kI,Spo,Rpo,Ppo,vp,hse,Bpo,Ipo,SI,qpo,Npo,jpo,Fp,pse,Dpo,Gpo,RI,Opo,Vpo,Xpo,Tp,_se,zpo,Wpo,PI,Qpo,Hpo,Upo,Mp,use,Jpo,Ypo,BI,Kpo,Zpo,e_o,Ep,bse,o_o,r_o,II,t_o,a_o,n_o,Cp,vse,s_o,l_o,qI,i_o,d_o,c_o,wp,Fse,f_o,m_o,NI,g_o,h_o,p_o,Ap,Tse,__o,u_o,jI,b_o,v_o,F_o,yp,Mse,T_o,M_o,DI,E_o,C_o,w_o,Lp,Ese,A_o,y_o,GI,L_o,x_o,$_o,xp,Cse,k_o,S_o,OI,R_o,P_o,B_o,$p,wse,I_o,q_o,VI,N_o,j_o,D_o,kp,Ase,G_o,O_o,XI,V_o,X_o,z_o,Sp,yse,W_o,Q_o,zI,H_o,U_o,J_o,Rs,Lse,Y_o,K_o,WI,Z_o,euo,QI,ouo,ruo,tuo,Rp,xse,auo,nuo,HI,suo,luo,iuo,Pp,$se,duo,cuo,UI,fuo,muo,guo,Bp,kse,huo,puo,JI,_uo,uuo,buo,Ip,Sse,vuo,Fuo,YI,Tuo,Muo,Euo,qp,Rse,Cuo,wuo,KI,Auo,yuo,Luo,Np,Pse,xuo,$uo,ZI,kuo,Suo,Ruo,jp,Bse,Puo,Buo,eq,Iuo,quo,Nuo,Dp,Ise,juo,Duo,oq,Guo,Ouo,Vuo,Gp,qse,Xuo,zuo,rq,Wuo,Quo,Huo,Op,Nse,Uuo,Juo,tq,Yuo,Kuo,Zuo,Vp,jse,e2o,o2o,aq,r2o,t2o,a2o,Xp,Dse,n2o,s2o,nq,l2o,i2o,d2o,zp,Gse,c2o,f2o,sq,m2o,g2o,h2o,Wp,Ose,p2o,_2o,lq,u2o,b2o,v2o,Qp,Vse,F2o,T2o,iq,M2o,E2o,C2o,Hp,Xse,w2o,A2o,dq,y2o,L2o,x2o,Up,zse,$2o,k2o,cq,S2o,R2o,P2o,Jp,Wse,B2o,I2o,fq,q2o,N2o,j2o,Yp,Qse,D2o,G2o,mq,O2o,V2o,X2o,Kp,Hse,z2o,W2o,gq,Q2o,H2o,U2o,Zp,Use,J2o,Y2o,hq,K2o,Z2o,e1o,e_,Jse,o1o,r1o,pq,t1o,a1o,n1o,o_,Yse,s1o,l1o,_q,i1o,d1o,c1o,r_,Kse,f1o,m1o,uq,g1o,h1o,p1o,t_,Zse,_1o,u1o,bq,b1o,v1o,F1o,a_,ele,T1o,M1o,vq,E1o,C1o,w1o,n_,ole,A1o,y1o,Fq,L1o,x1o,$1o,s_,rle,k1o,S1o,Tq,R1o,P1o,B1o,l_,tle,I1o,q1o,Mq,N1o,j1o,D1o,i_,ale,G1o,O1o,Eq,V1o,X1o,z1o,d_,nle,W1o,Q1o,Cq,H1o,U1o,J1o,c_,sle,Y1o,K1o,wq,Z1o,e7o,o7o,f_,lle,r7o,t7o,Aq,a7o,n7o,s7o,m_,ile,l7o,i7o,yq,d7o,c7o,f7o,g_,dle,m7o,g7o,Lq,h7o,p7o,_7o,h_,cle,u7o,b7o,xq,v7o,F7o,T7o,p_,fle,M7o,E7o,$q,C7o,w7o,A7o,__,mle,y7o,L7o,kq,x7o,$7o,k7o,u_,gle,S7o,R7o,Sq,P7o,B7o,I7o,b_,hle,q7o,N7o,Rq,j7o,D7o,G7o,v_,ple,O7o,V7o,Pq,X7o,z7o,W7o,F_,_le,Q7o,H7o,Bq,U7o,J7o,Y7o,T_,ule,K7o,Z7o,Iq,ebo,obo,rbo,M_,ble,tbo,abo,qq,nbo,sbo,lbo,E_,vle,ibo,dbo,Nq,cbo,fbo,mbo,C_,Fle,gbo,hbo,jq,pbo,_bo,ubo,w_,Tle,bbo,vbo,Dq,Fbo,Tbo,Mbo,A_,Mle,Ebo,Cbo,Gq,wbo,Abo,ybo,y_,Ele,Lbo,xbo,Oq,$bo,kbo,Sbo,L_,Cle,Rbo,Pbo,Vq,Bbo,Ibo,qbo,x_,wle,Nbo,jbo,Xq,Dbo,Gbo,Obo,$_,Ale,Vbo,Xbo,zq,zbo,Wbo,Qbo,k_,yle,Hbo,Ubo,Wq,Jbo,Ybo,Kbo,S_,Lle,Zbo,evo,Qq,ovo,rvo,tvo,R_,xle,avo,nvo,Hq,svo,lvo,ivo,P_,$le,dvo,cvo,Uq,fvo,mvo,gvo,B_,kle,hvo,pvo,Jq,_vo,uvo,bvo,I_,Sle,vvo,Fvo,Yq,Tvo,Mvo,Evo,q_,Rle,Cvo,wvo,Kq,Avo,yvo,Lvo,N_,Ple,xvo,$vo,Zq,kvo,Svo,Rvo,j_,Ble,Pvo,Bvo,eN,Ivo,qvo,Nvo,D_,Ile,jvo,Dvo,oN,Gvo,Ovo,Vvo,G_,qle,Xvo,zvo,rN,Wvo,Qvo,Hvo,O_,Nle,Uvo,Jvo,tN,Yvo,Kvo,Zvo,V_,jle,eFo,oFo,aN,rFo,tFo,aFo,X_,Dle,nFo,sFo,nN,lFo,iFo,dFo,z_,Gle,cFo,fFo,sN,mFo,gFo,hFo,W_,pFo,Ole,_Fo,uFo,Vle,bFo,vFo,Q_,$qe,yi,H_,Xle,U6,FFo,zle,TFo,kqe,xo,J6,MFo,Li,EFo,lN,CFo,wFo,iN,AFo,yFo,LFo,Y6,xFo,Wle,$Fo,kFo,SFo,at,K6,RFo,Qle,PFo,BFo,xi,IFo,Hle,qFo,NFo,dN,jFo,DFo,GFo,U_,OFo,Ye,Z6,VFo,Ule,XFo,zFo,xa,WFo,Jle,QFo,HFo,Yle,UFo,JFo,Kle,YFo,KFo,ZFo,G,J_,Zle,eTo,oTo,cN,rTo,tTo,aTo,Y_,eie,nTo,sTo,fN,lTo,iTo,dTo,K_,oie,cTo,fTo,mN,mTo,gTo,hTo,Z_,rie,pTo,_To,gN,uTo,bTo,vTo,eu,tie,FTo,TTo,hN,MTo,ETo,CTo,ou,aie,wTo,ATo,pN,yTo,LTo,xTo,ru,nie,$To,kTo,_N,STo,RTo,PTo,tu,sie,BTo,ITo,uN,qTo,NTo,jTo,au,lie,DTo,GTo,bN,OTo,VTo,XTo,nu,iie,zTo,WTo,vN,QTo,HTo,UTo,su,die,JTo,YTo,FN,KTo,ZTo,eMo,lu,cie,oMo,rMo,TN,tMo,aMo,nMo,iu,fie,sMo,lMo,MN,iMo,dMo,cMo,du,mie,fMo,mMo,EN,gMo,hMo,pMo,cu,gie,_Mo,uMo,CN,bMo,vMo,FMo,fu,hie,TMo,MMo,wN,EMo,CMo,wMo,mu,pie,AMo,yMo,AN,LMo,xMo,$Mo,gu,_ie,kMo,SMo,yN,RMo,PMo,BMo,hu,uie,IMo,qMo,LN,NMo,jMo,DMo,pu,bie,GMo,OMo,xN,VMo,XMo,zMo,_u,vie,WMo,QMo,$N,HMo,UMo,JMo,uu,Fie,YMo,KMo,kN,ZMo,e4o,o4o,bu,Tie,r4o,t4o,SN,a4o,n4o,s4o,vu,Mie,l4o,i4o,RN,d4o,c4o,f4o,Fu,Eie,m4o,g4o,PN,h4o,p4o,_4o,Tu,Cie,u4o,b4o,BN,v4o,F4o,T4o,Mu,wie,M4o,E4o,IN,C4o,w4o,A4o,Eu,Aie,y4o,L4o,qN,x4o,$4o,k4o,Cu,yie,S4o,R4o,NN,P4o,B4o,I4o,wu,Lie,q4o,N4o,jN,j4o,D4o,G4o,Au,xie,O4o,V4o,DN,X4o,z4o,W4o,yu,$ie,Q4o,H4o,GN,U4o,J4o,Y4o,Lu,kie,K4o,Z4o,ON,eEo,oEo,rEo,xu,Sie,tEo,aEo,VN,nEo,sEo,lEo,$u,Rie,iEo,dEo,XN,cEo,fEo,mEo,ku,Pie,gEo,hEo,zN,pEo,_Eo,uEo,Su,Bie,bEo,vEo,WN,FEo,TEo,MEo,Ru,Iie,EEo,CEo,QN,wEo,AEo,yEo,Pu,qie,LEo,xEo,HN,$Eo,kEo,SEo,Bu,Nie,REo,PEo,UN,BEo,IEo,qEo,Iu,jie,NEo,jEo,JN,DEo,GEo,OEo,qu,Die,VEo,XEo,YN,zEo,WEo,QEo,Nu,HEo,Gie,UEo,JEo,Oie,YEo,KEo,ju,Sqe,$i,Du,Vie,ey,ZEo,Xie,eCo,Rqe,$o,oy,oCo,ki,rCo,KN,tCo,aCo,ZN,nCo,sCo,lCo,ry,iCo,zie,dCo,cCo,fCo,nt,ty,mCo,Wie,gCo,hCo,Si,pCo,Qie,_Co,uCo,ej,bCo,vCo,FCo,Gu,TCo,Ke,ay,MCo,Hie,ECo,CCo,$a,wCo,Uie,ACo,yCo,Jie,LCo,xCo,Yie,$Co,kCo,SCo,z,Ou,Kie,RCo,PCo,oj,BCo,ICo,qCo,Vu,Zie,NCo,jCo,rj,DCo,GCo,OCo,Xu,ede,VCo,XCo,tj,zCo,WCo,QCo,zu,ode,HCo,UCo,aj,JCo,YCo,KCo,Wu,rde,ZCo,e5o,nj,o5o,r5o,t5o,Qu,tde,a5o,n5o,sj,s5o,l5o,i5o,Hu,ade,d5o,c5o,lj,f5o,m5o,g5o,Uu,nde,h5o,p5o,ij,_5o,u5o,b5o,Ju,sde,v5o,F5o,dj,T5o,M5o,E5o,Yu,lde,C5o,w5o,cj,A5o,y5o,L5o,Ku,ide,x5o,$5o,fj,k5o,S5o,R5o,Zu,dde,P5o,B5o,mj,I5o,q5o,N5o,e2,cde,j5o,D5o,gj,G5o,O5o,V5o,o2,fde,X5o,z5o,hj,W5o,Q5o,H5o,r2,mde,U5o,J5o,pj,Y5o,K5o,Z5o,t2,gde,e3o,o3o,_j,r3o,t3o,a3o,a2,hde,n3o,s3o,uj,l3o,i3o,d3o,n2,pde,c3o,f3o,bj,m3o,g3o,h3o,s2,_de,p3o,_3o,vj,u3o,b3o,v3o,l2,ude,F3o,T3o,Fj,M3o,E3o,C3o,i2,bde,w3o,A3o,Tj,y3o,L3o,x3o,d2,vde,$3o,k3o,Mj,S3o,R3o,P3o,c2,Fde,B3o,I3o,Ej,q3o,N3o,j3o,f2,Tde,D3o,G3o,Cj,O3o,V3o,X3o,m2,Mde,z3o,W3o,wj,Q3o,H3o,U3o,g2,Ede,J3o,Y3o,Aj,K3o,Z3o,ewo,h2,Cde,owo,rwo,yj,two,awo,nwo,p2,wde,swo,lwo,Lj,iwo,dwo,cwo,_2,Ade,fwo,mwo,xj,gwo,hwo,pwo,u2,yde,_wo,uwo,$j,bwo,vwo,Fwo,b2,Lde,Two,Mwo,kj,Ewo,Cwo,wwo,v2,xde,Awo,ywo,Sj,Lwo,xwo,$wo,F2,$de,kwo,Swo,Rj,Rwo,Pwo,Bwo,T2,kde,Iwo,qwo,Pj,Nwo,jwo,Dwo,M2,Sde,Gwo,Owo,Bj,Vwo,Xwo,zwo,E2,Rde,Wwo,Qwo,Ij,Hwo,Uwo,Jwo,C2,Ywo,Pde,Kwo,Zwo,Bde,e0o,o0o,w2,Pqe,Ri,A2,Ide,ny,r0o,qde,t0o,Bqe,ko,sy,a0o,Pi,n0o,qj,s0o,l0o,Nj,i0o,d0o,c0o,ly,f0o,Nde,m0o,g0o,h0o,st,iy,p0o,jde,_0o,u0o,Bi,b0o,Dde,v0o,F0o,jj,T0o,M0o,E0o,y2,C0o,Ze,dy,w0o,Gde,A0o,y0o,ka,L0o,Ode,x0o,$0o,Vde,k0o,S0o,Xde,R0o,P0o,B0o,W,L2,zde,I0o,q0o,Dj,N0o,j0o,D0o,x2,Wde,G0o,O0o,Gj,V0o,X0o,z0o,$2,Qde,W0o,Q0o,Oj,H0o,U0o,J0o,k2,Hde,Y0o,K0o,Vj,Z0o,eAo,oAo,S2,Ude,rAo,tAo,Xj,aAo,nAo,sAo,R2,Jde,lAo,iAo,zj,dAo,cAo,fAo,P2,Yde,mAo,gAo,Wj,hAo,pAo,_Ao,B2,Kde,uAo,bAo,Qj,vAo,FAo,TAo,I2,Zde,MAo,EAo,Hj,CAo,wAo,AAo,q2,ece,yAo,LAo,Uj,xAo,$Ao,kAo,N2,oce,SAo,RAo,Jj,PAo,BAo,IAo,j2,rce,qAo,NAo,Yj,jAo,DAo,GAo,D2,tce,OAo,VAo,Kj,XAo,zAo,WAo,G2,ace,QAo,HAo,Zj,UAo,JAo,YAo,O2,nce,KAo,ZAo,eD,e6o,o6o,r6o,V2,sce,t6o,a6o,oD,n6o,s6o,l6o,X2,lce,i6o,d6o,rD,c6o,f6o,m6o,z2,ice,g6o,h6o,tD,p6o,_6o,u6o,W2,dce,b6o,v6o,aD,F6o,T6o,M6o,Q2,cce,E6o,C6o,nD,w6o,A6o,y6o,H2,fce,L6o,x6o,sD,$6o,k6o,S6o,U2,mce,R6o,P6o,lD,B6o,I6o,q6o,J2,gce,N6o,j6o,iD,D6o,G6o,O6o,Y2,hce,V6o,X6o,dD,z6o,W6o,Q6o,K2,pce,H6o,U6o,cD,J6o,Y6o,K6o,Z2,_ce,Z6o,eyo,fD,oyo,ryo,tyo,e1,uce,ayo,nyo,mD,syo,lyo,iyo,o1,bce,dyo,cyo,gD,fyo,myo,gyo,r1,vce,hyo,pyo,hD,_yo,uyo,byo,t1,Fce,vyo,Fyo,pD,Tyo,Myo,Eyo,a1,Tce,Cyo,wyo,Mce,Ayo,yyo,Lyo,n1,Ece,xyo,$yo,_D,kyo,Syo,Ryo,s1,Cce,Pyo,Byo,uD,Iyo,qyo,Nyo,l1,wce,jyo,Dyo,bD,Gyo,Oyo,Vyo,i1,Ace,Xyo,zyo,vD,Wyo,Qyo,Hyo,d1,Uyo,yce,Jyo,Yyo,Lce,Kyo,Zyo,c1,Iqe,Ii,f1,xce,cy,eLo,$ce,oLo,qqe,So,fy,rLo,qi,tLo,FD,aLo,nLo,TD,sLo,lLo,iLo,my,dLo,kce,cLo,fLo,mLo,lt,gy,gLo,Sce,hLo,pLo,Ni,_Lo,Rce,uLo,bLo,MD,vLo,FLo,TLo,m1,MLo,eo,hy,ELo,Pce,CLo,wLo,Sa,ALo,Bce,yLo,LLo,Ice,xLo,$Lo,qce,kLo,SLo,RLo,_e,g1,Nce,PLo,BLo,ED,ILo,qLo,NLo,h1,jce,jLo,DLo,CD,GLo,OLo,VLo,p1,Dce,XLo,zLo,wD,WLo,QLo,HLo,_1,Gce,ULo,JLo,AD,YLo,KLo,ZLo,u1,Oce,e8o,o8o,yD,r8o,t8o,a8o,b1,Vce,n8o,s8o,LD,l8o,i8o,d8o,v1,Xce,c8o,f8o,xD,m8o,g8o,h8o,F1,zce,p8o,_8o,$D,u8o,b8o,v8o,T1,Wce,F8o,T8o,kD,M8o,E8o,C8o,M1,Qce,w8o,A8o,SD,y8o,L8o,x8o,E1,Hce,$8o,k8o,RD,S8o,R8o,P8o,C1,Uce,B8o,I8o,PD,q8o,N8o,j8o,w1,Jce,D8o,G8o,BD,O8o,V8o,X8o,A1,Yce,z8o,W8o,ID,Q8o,H8o,U8o,y1,Kce,J8o,Y8o,qD,K8o,Z8o,e9o,L1,Zce,o9o,r9o,ND,t9o,a9o,n9o,x1,s9o,efe,l9o,i9o,ofe,d9o,c9o,$1,Nqe,ji,k1,rfe,py,f9o,tfe,m9o,jqe,Ro,_y,g9o,Di,h9o,jD,p9o,_9o,DD,u9o,b9o,v9o,uy,F9o,afe,T9o,M9o,E9o,it,by,C9o,nfe,w9o,A9o,Gi,y9o,sfe,L9o,x9o,GD,$9o,k9o,S9o,S1,R9o,oo,vy,P9o,lfe,B9o,I9o,Ra,q9o,ife,N9o,j9o,dfe,D9o,G9o,cfe,O9o,V9o,X9o,N,R1,ffe,z9o,W9o,OD,Q9o,H9o,U9o,P1,mfe,J9o,Y9o,VD,K9o,Z9o,exo,B1,gfe,oxo,rxo,XD,txo,axo,nxo,I1,hfe,sxo,lxo,zD,ixo,dxo,cxo,q1,pfe,fxo,mxo,WD,gxo,hxo,pxo,N1,_fe,_xo,uxo,QD,bxo,vxo,Fxo,j1,ufe,Txo,Mxo,HD,Exo,Cxo,wxo,D1,bfe,Axo,yxo,UD,Lxo,xxo,$xo,G1,vfe,kxo,Sxo,JD,Rxo,Pxo,Bxo,O1,Ffe,Ixo,qxo,YD,Nxo,jxo,Dxo,V1,Tfe,Gxo,Oxo,KD,Vxo,Xxo,zxo,X1,Mfe,Wxo,Qxo,ZD,Hxo,Uxo,Jxo,z1,Efe,Yxo,Kxo,eG,Zxo,e$o,o$o,W1,Cfe,r$o,t$o,oG,a$o,n$o,s$o,Q1,wfe,l$o,i$o,rG,d$o,c$o,f$o,H1,Afe,m$o,g$o,tG,h$o,p$o,_$o,U1,yfe,u$o,b$o,aG,v$o,F$o,T$o,J1,Lfe,M$o,E$o,nG,C$o,w$o,A$o,Y1,xfe,y$o,L$o,sG,x$o,$$o,k$o,K1,$fe,S$o,R$o,lG,P$o,B$o,I$o,Z1,kfe,q$o,N$o,iG,j$o,D$o,G$o,e7,Sfe,O$o,V$o,dG,X$o,z$o,W$o,o7,Rfe,Q$o,H$o,cG,U$o,J$o,Y$o,r7,Pfe,K$o,Z$o,fG,eko,oko,rko,t7,Bfe,tko,ako,mG,nko,sko,lko,a7,Ife,iko,dko,gG,cko,fko,mko,n7,qfe,gko,hko,hG,pko,_ko,uko,s7,Nfe,bko,vko,pG,Fko,Tko,Mko,l7,jfe,Eko,Cko,_G,wko,Ako,yko,i7,Dfe,Lko,xko,uG,$ko,kko,Sko,d7,Gfe,Rko,Pko,bG,Bko,Iko,qko,c7,Ofe,Nko,jko,vG,Dko,Gko,Oko,f7,Vfe,Vko,Xko,FG,zko,Wko,Qko,m7,Xfe,Hko,Uko,TG,Jko,Yko,Kko,g7,zfe,Zko,eSo,MG,oSo,rSo,tSo,h7,Wfe,aSo,nSo,EG,sSo,lSo,iSo,p7,Qfe,dSo,cSo,CG,fSo,mSo,gSo,_7,Hfe,hSo,pSo,wG,_So,uSo,bSo,u7,Ufe,vSo,FSo,AG,TSo,MSo,ESo,b7,Jfe,CSo,wSo,yG,ASo,ySo,LSo,v7,Yfe,xSo,$So,LG,kSo,SSo,RSo,F7,Kfe,PSo,BSo,xG,ISo,qSo,NSo,T7,Zfe,jSo,DSo,$G,GSo,OSo,VSo,M7,eme,XSo,zSo,kG,WSo,QSo,HSo,E7,ome,USo,JSo,SG,YSo,KSo,ZSo,C7,rme,eRo,oRo,RG,rRo,tRo,aRo,w7,nRo,tme,sRo,lRo,ame,iRo,dRo,A7,Dqe,Oi,y7,nme,Fy,cRo,sme,fRo,Gqe,Po,Ty,mRo,Vi,gRo,PG,hRo,pRo,BG,_Ro,uRo,bRo,My,vRo,lme,FRo,TRo,MRo,dt,Ey,ERo,ime,CRo,wRo,Xi,ARo,dme,yRo,LRo,IG,xRo,$Ro,kRo,L7,SRo,ro,Cy,RRo,cme,PRo,BRo,Pa,IRo,fme,qRo,NRo,mme,jRo,DRo,gme,GRo,ORo,VRo,Y,x7,hme,XRo,zRo,qG,WRo,QRo,HRo,$7,pme,URo,JRo,NG,YRo,KRo,ZRo,k7,_me,ePo,oPo,jG,rPo,tPo,aPo,S7,ume,nPo,sPo,DG,lPo,iPo,dPo,R7,bme,cPo,fPo,GG,mPo,gPo,hPo,P7,vme,pPo,_Po,OG,uPo,bPo,vPo,B7,Fme,FPo,TPo,VG,MPo,EPo,CPo,I7,Tme,wPo,APo,XG,yPo,LPo,xPo,q7,Mme,$Po,kPo,zG,SPo,RPo,PPo,N7,Eme,BPo,IPo,WG,qPo,NPo,jPo,j7,Cme,DPo,GPo,QG,OPo,VPo,XPo,D7,wme,zPo,WPo,HG,QPo,HPo,UPo,G7,Ame,JPo,YPo,UG,KPo,ZPo,eBo,O7,yme,oBo,rBo,JG,tBo,aBo,nBo,V7,Lme,sBo,lBo,YG,iBo,dBo,cBo,X7,xme,fBo,mBo,KG,gBo,hBo,pBo,z7,$me,_Bo,uBo,ZG,bBo,vBo,FBo,W7,kme,TBo,MBo,eO,EBo,CBo,wBo,Q7,Sme,ABo,yBo,oO,LBo,xBo,$Bo,H7,Rme,kBo,SBo,rO,RBo,PBo,BBo,U7,Pme,IBo,qBo,tO,NBo,jBo,DBo,J7,Bme,GBo,OBo,aO,VBo,XBo,zBo,Y7,Ime,WBo,QBo,nO,HBo,UBo,JBo,K7,qme,YBo,KBo,sO,ZBo,eIo,oIo,Z7,Nme,rIo,tIo,lO,aIo,nIo,sIo,eb,jme,lIo,iIo,iO,dIo,cIo,fIo,ob,Dme,mIo,gIo,dO,hIo,pIo,_Io,rb,Gme,uIo,bIo,cO,vIo,FIo,TIo,tb,Ome,MIo,EIo,fO,CIo,wIo,AIo,ab,yIo,Vme,LIo,xIo,Xme,$Io,kIo,nb,Oqe,zi,sb,zme,wy,SIo,Wme,RIo,Vqe,Bo,Ay,PIo,Wi,BIo,mO,IIo,qIo,gO,NIo,jIo,DIo,yy,GIo,Qme,OIo,VIo,XIo,ct,Ly,zIo,Hme,WIo,QIo,Qi,HIo,Ume,UIo,JIo,hO,YIo,KIo,ZIo,lb,eqo,to,xy,oqo,Jme,rqo,tqo,Ba,aqo,Yme,nqo,sqo,Kme,lqo,iqo,Zme,dqo,cqo,fqo,Yr,ib,ege,mqo,gqo,pO,hqo,pqo,_qo,db,oge,uqo,bqo,_O,vqo,Fqo,Tqo,cb,rge,Mqo,Eqo,uO,Cqo,wqo,Aqo,fb,tge,yqo,Lqo,bO,xqo,$qo,kqo,mb,age,Sqo,Rqo,vO,Pqo,Bqo,Iqo,gb,qqo,nge,Nqo,jqo,sge,Dqo,Gqo,hb,Xqe,Hi,pb,lge,$y,Oqo,ige,Vqo,zqe,Io,ky,Xqo,Ui,zqo,FO,Wqo,Qqo,TO,Hqo,Uqo,Jqo,Sy,Yqo,dge,Kqo,Zqo,eNo,ft,Ry,oNo,cge,rNo,tNo,Ji,aNo,fge,nNo,sNo,MO,lNo,iNo,dNo,_b,cNo,ao,Py,fNo,mge,mNo,gNo,Ia,hNo,gge,pNo,_No,hge,uNo,bNo,pge,vNo,FNo,TNo,U,ub,_ge,MNo,ENo,EO,CNo,wNo,ANo,bb,uge,yNo,LNo,CO,xNo,$No,kNo,vb,bge,SNo,RNo,wO,PNo,BNo,INo,Fb,vge,qNo,NNo,AO,jNo,DNo,GNo,Tb,Fge,ONo,VNo,yO,XNo,zNo,WNo,Mb,Tge,QNo,HNo,LO,UNo,JNo,YNo,Eb,Mge,KNo,ZNo,xO,ejo,ojo,rjo,Cb,Ege,tjo,ajo,$O,njo,sjo,ljo,wb,Cge,ijo,djo,kO,cjo,fjo,mjo,Ab,wge,gjo,hjo,SO,pjo,_jo,ujo,yb,Age,bjo,vjo,RO,Fjo,Tjo,Mjo,Lb,yge,Ejo,Cjo,PO,wjo,Ajo,yjo,xb,Lge,Ljo,xjo,BO,$jo,kjo,Sjo,$b,xge,Rjo,Pjo,IO,Bjo,Ijo,qjo,kb,$ge,Njo,jjo,qO,Djo,Gjo,Ojo,Sb,kge,Vjo,Xjo,NO,zjo,Wjo,Qjo,Rb,Sge,Hjo,Ujo,jO,Jjo,Yjo,Kjo,Pb,Rge,Zjo,eDo,DO,oDo,rDo,tDo,Bb,Pge,aDo,nDo,GO,sDo,lDo,iDo,Ib,Bge,dDo,cDo,OO,fDo,mDo,gDo,qb,Ige,hDo,pDo,VO,_Do,uDo,bDo,Nb,qge,vDo,FDo,XO,TDo,MDo,EDo,jb,Nge,CDo,wDo,zO,ADo,yDo,LDo,Db,jge,xDo,$Do,WO,kDo,SDo,RDo,Gb,Dge,PDo,BDo,QO,IDo,qDo,NDo,Ob,Gge,jDo,DDo,HO,GDo,ODo,VDo,Vb,Oge,XDo,zDo,UO,WDo,QDo,HDo,Xb,Vge,UDo,JDo,JO,YDo,KDo,ZDo,zb,Xge,eGo,oGo,YO,rGo,tGo,aGo,Wb,zge,nGo,sGo,KO,lGo,iGo,dGo,Qb,Wge,cGo,fGo,ZO,mGo,gGo,hGo,Hb,Qge,pGo,_Go,eV,uGo,bGo,vGo,Ub,Hge,FGo,TGo,oV,MGo,EGo,CGo,Jb,wGo,Uge,AGo,yGo,Jge,LGo,xGo,Yb,Wqe,Yi,Kb,Yge,By,$Go,Kge,kGo,Qqe,qo,Iy,SGo,Ki,RGo,rV,PGo,BGo,tV,IGo,qGo,NGo,qy,jGo,Zge,DGo,GGo,OGo,mt,Ny,VGo,ehe,XGo,zGo,Zi,WGo,ohe,QGo,HGo,aV,UGo,JGo,YGo,Zb,KGo,no,jy,ZGo,rhe,eOo,oOo,qa,rOo,the,tOo,aOo,ahe,nOo,sOo,nhe,lOo,iOo,dOo,V,ev,she,cOo,fOo,nV,mOo,gOo,hOo,ov,lhe,pOo,_Oo,sV,uOo,bOo,vOo,rv,ihe,FOo,TOo,lV,MOo,EOo,COo,tv,dhe,wOo,AOo,iV,yOo,LOo,xOo,av,che,$Oo,kOo,dV,SOo,ROo,POo,nv,fhe,BOo,IOo,cV,qOo,NOo,jOo,sv,mhe,DOo,GOo,fV,OOo,VOo,XOo,lv,ghe,zOo,WOo,mV,QOo,HOo,UOo,iv,hhe,JOo,YOo,gV,KOo,ZOo,eVo,dv,phe,oVo,rVo,hV,tVo,aVo,nVo,cv,_he,sVo,lVo,pV,iVo,dVo,cVo,fv,uhe,fVo,mVo,_V,gVo,hVo,pVo,mv,bhe,_Vo,uVo,uV,bVo,vVo,FVo,gv,vhe,TVo,MVo,bV,EVo,CVo,wVo,hv,Fhe,AVo,yVo,vV,LVo,xVo,$Vo,pv,The,kVo,SVo,FV,RVo,PVo,BVo,_v,Mhe,IVo,qVo,TV,NVo,jVo,DVo,uv,Ehe,GVo,OVo,MV,VVo,XVo,zVo,bv,Che,WVo,QVo,EV,HVo,UVo,JVo,vv,whe,YVo,KVo,CV,ZVo,eXo,oXo,Fv,Ahe,rXo,tXo,wV,aXo,nXo,sXo,Tv,yhe,lXo,iXo,AV,dXo,cXo,fXo,Mv,Lhe,mXo,gXo,yV,hXo,pXo,_Xo,Ev,xhe,uXo,bXo,LV,vXo,FXo,TXo,Cv,$he,MXo,EXo,xV,CXo,wXo,AXo,wv,khe,yXo,LXo,$V,xXo,$Xo,kXo,Av,She,SXo,RXo,kV,PXo,BXo,IXo,yv,Rhe,qXo,NXo,SV,jXo,DXo,GXo,Lv,Phe,OXo,VXo,RV,XXo,zXo,WXo,xv,Bhe,QXo,HXo,PV,UXo,JXo,YXo,$v,Ihe,KXo,ZXo,BV,ezo,ozo,rzo,kv,qhe,tzo,azo,IV,nzo,szo,lzo,Sv,Nhe,izo,dzo,qV,czo,fzo,mzo,Rv,jhe,gzo,hzo,NV,pzo,_zo,uzo,Pv,Dhe,bzo,vzo,jV,Fzo,Tzo,Mzo,Bv,Ghe,Ezo,Czo,DV,wzo,Azo,yzo,Iv,Ohe,Lzo,xzo,GV,$zo,kzo,Szo,qv,Vhe,Rzo,Pzo,OV,Bzo,Izo,qzo,Nv,Xhe,Nzo,jzo,VV,Dzo,Gzo,Ozo,jv,Vzo,zhe,Xzo,zzo,Whe,Wzo,Qzo,Dv,Hqe,ed,Gv,Qhe,Dy,Hzo,Hhe,Uzo,Uqe,No,Gy,Jzo,od,Yzo,XV,Kzo,Zzo,zV,eWo,oWo,rWo,Oy,tWo,Uhe,aWo,nWo,sWo,gt,Vy,lWo,Jhe,iWo,dWo,rd,cWo,Yhe,fWo,mWo,WV,gWo,hWo,pWo,Ov,_Wo,so,Xy,uWo,Khe,bWo,vWo,Na,FWo,Zhe,TWo,MWo,epe,EWo,CWo,ope,wWo,AWo,yWo,rpe,Vv,tpe,LWo,xWo,QV,$Wo,kWo,SWo,Xv,RWo,ape,PWo,BWo,npe,IWo,qWo,zv,Jqe,td,Wv,spe,zy,NWo,lpe,jWo,Yqe,jo,Wy,DWo,ad,GWo,HV,OWo,VWo,UV,XWo,zWo,WWo,Qy,QWo,ipe,HWo,UWo,JWo,ht,Hy,YWo,dpe,KWo,ZWo,nd,eQo,cpe,oQo,rQo,JV,tQo,aQo,nQo,Qv,sQo,lo,Uy,lQo,fpe,iQo,dQo,ja,cQo,mpe,fQo,mQo,gpe,gQo,hQo,hpe,pQo,_Qo,uQo,Fe,Hv,ppe,bQo,vQo,YV,FQo,TQo,MQo,Uv,_pe,EQo,CQo,KV,wQo,AQo,yQo,Jv,upe,LQo,xQo,ZV,$Qo,kQo,SQo,Yv,bpe,RQo,PQo,eX,BQo,IQo,qQo,Ps,vpe,NQo,jQo,oX,DQo,GQo,rX,OQo,VQo,XQo,Kv,Fpe,zQo,WQo,tX,QQo,HQo,UQo,pt,Tpe,JQo,YQo,aX,KQo,ZQo,nX,eHo,oHo,sX,rHo,tHo,aHo,Zv,Mpe,nHo,sHo,lX,lHo,iHo,dHo,eF,Epe,cHo,fHo,iX,mHo,gHo,hHo,oF,Cpe,pHo,_Ho,dX,uHo,bHo,vHo,rF,wpe,FHo,THo,cX,MHo,EHo,CHo,tF,Ape,wHo,AHo,fX,yHo,LHo,xHo,aF,ype,$Ho,kHo,mX,SHo,RHo,PHo,nF,Lpe,BHo,IHo,gX,qHo,NHo,jHo,sF,DHo,xpe,GHo,OHo,$pe,VHo,XHo,lF,Kqe,sd,iF,kpe,Jy,zHo,Spe,WHo,Zqe,Do,Yy,QHo,ld,HHo,hX,UHo,JHo,pX,YHo,KHo,ZHo,Ky,eUo,Rpe,oUo,rUo,tUo,_t,Zy,aUo,Ppe,nUo,sUo,id,lUo,Bpe,iUo,dUo,_X,cUo,fUo,mUo,dF,gUo,io,eL,hUo,Ipe,pUo,_Uo,Da,uUo,qpe,bUo,vUo,Npe,FUo,TUo,jpe,MUo,EUo,CUo,Dpe,cF,Gpe,wUo,AUo,uX,yUo,LUo,xUo,fF,$Uo,Ope,kUo,SUo,Vpe,RUo,PUo,mF,eNe,dd,gF,Xpe,oL,BUo,zpe,IUo,oNe,Go,rL,qUo,cd,NUo,bX,jUo,DUo,vX,GUo,OUo,VUo,tL,XUo,Wpe,zUo,WUo,QUo,ut,aL,HUo,Qpe,UUo,JUo,fd,YUo,Hpe,KUo,ZUo,FX,eJo,oJo,rJo,hF,tJo,co,nL,aJo,Upe,nJo,sJo,Ga,lJo,Jpe,iJo,dJo,Ype,cJo,fJo,Kpe,mJo,gJo,hJo,Se,pF,Zpe,pJo,_Jo,TX,uJo,bJo,vJo,_F,e_e,FJo,TJo,MX,MJo,EJo,CJo,uF,o_e,wJo,AJo,EX,yJo,LJo,xJo,bF,r_e,$Jo,kJo,CX,SJo,RJo,PJo,vF,t_e,BJo,IJo,wX,qJo,NJo,jJo,FF,a_e,DJo,GJo,AX,OJo,VJo,XJo,TF,n_e,zJo,WJo,yX,QJo,HJo,UJo,MF,s_e,JJo,YJo,LX,KJo,ZJo,eYo,EF,l_e,oYo,rYo,xX,tYo,aYo,nYo,CF,sYo,i_e,lYo,iYo,d_e,dYo,cYo,wF,rNe,md,AF,c_e,sL,fYo,f_e,mYo,tNe,Oo,lL,gYo,gd,hYo,$X,pYo,_Yo,kX,uYo,bYo,vYo,iL,FYo,m_e,TYo,MYo,EYo,bt,dL,CYo,g_e,wYo,AYo,hd,yYo,h_e,LYo,xYo,SX,$Yo,kYo,SYo,yF,RYo,fo,cL,PYo,p_e,BYo,IYo,Oa,qYo,__e,NYo,jYo,u_e,DYo,GYo,b_e,OYo,VYo,XYo,Kr,LF,v_e,zYo,WYo,RX,QYo,HYo,UYo,xF,F_e,JYo,YYo,PX,KYo,ZYo,eKo,$F,T_e,oKo,rKo,BX,tKo,aKo,nKo,kF,M_e,sKo,lKo,IX,iKo,dKo,cKo,SF,E_e,fKo,mKo,qX,gKo,hKo,pKo,RF,_Ko,C_e,uKo,bKo,w_e,vKo,FKo,PF,aNe,pd,BF,A_e,fL,TKo,y_e,MKo,nNe,Vo,mL,EKo,_d,CKo,NX,wKo,AKo,jX,yKo,LKo,xKo,gL,$Ko,L_e,kKo,SKo,RKo,vt,hL,PKo,x_e,BKo,IKo,ud,qKo,$_e,NKo,jKo,DX,DKo,GKo,OKo,IF,VKo,mo,pL,XKo,k_e,zKo,WKo,Va,QKo,S_e,HKo,UKo,R_e,JKo,YKo,P_e,KKo,ZKo,eZo,Re,qF,B_e,oZo,rZo,GX,tZo,aZo,nZo,NF,I_e,sZo,lZo,OX,iZo,dZo,cZo,jF,q_e,fZo,mZo,VX,gZo,hZo,pZo,DF,N_e,_Zo,uZo,XX,bZo,vZo,FZo,GF,j_e,TZo,MZo,zX,EZo,CZo,wZo,OF,D_e,AZo,yZo,WX,LZo,xZo,$Zo,VF,G_e,kZo,SZo,QX,RZo,PZo,BZo,XF,O_e,IZo,qZo,HX,NZo,jZo,DZo,zF,V_e,GZo,OZo,UX,VZo,XZo,zZo,WF,WZo,X_e,QZo,HZo,z_e,UZo,JZo,QF,sNe,bd,HF,W_e,_L,YZo,Q_e,KZo,lNe,Xo,uL,ZZo,vd,eer,JX,oer,rer,YX,ter,aer,ner,bL,ser,H_e,ler,ier,der,Ft,vL,cer,U_e,fer,mer,Fd,ger,J_e,her,per,KX,_er,uer,ber,UF,ver,go,FL,Fer,Y_e,Ter,Mer,Xa,Eer,K_e,Cer,wer,Z_e,Aer,yer,eue,Ler,xer,$er,TL,JF,oue,ker,Ser,ZX,Rer,Per,Ber,YF,rue,Ier,qer,ez,Ner,jer,Der,KF,Ger,tue,Oer,Ver,aue,Xer,zer,ZF,iNe,Td,eT,nue,ML,Wer,sue,Qer,dNe,zo,EL,Her,Md,Uer,oz,Jer,Yer,rz,Ker,Zer,eor,CL,oor,lue,ror,tor,aor,Tt,wL,nor,iue,sor,lor,Ed,ior,due,dor,cor,tz,mor,gor,hor,oT,por,ho,AL,_or,cue,uor,bor,za,vor,fue,For,Tor,mue,Mor,Eor,gue,Cor,wor,Aor,Zr,rT,hue,yor,Lor,az,xor,$or,kor,tT,pue,Sor,Ror,nz,Por,Bor,Ior,aT,_ue,qor,Nor,sz,jor,Dor,Gor,nT,uue,Oor,Vor,lz,Xor,zor,Wor,sT,bue,Qor,Hor,iz,Uor,Jor,Yor,lT,Kor,vue,Zor,err,Fue,orr,rrr,iT,cNe,Cd,dT,Tue,yL,trr,Mue,arr,fNe,Wo,LL,nrr,wd,srr,dz,lrr,irr,cz,drr,crr,frr,xL,mrr,Eue,grr,hrr,prr,Mt,$L,_rr,Cue,urr,brr,Ad,vrr,wue,Frr,Trr,fz,Mrr,Err,Crr,cT,wrr,po,kL,Arr,Aue,yrr,Lrr,Wa,xrr,yue,$rr,krr,Lue,Srr,Rrr,xue,Prr,Brr,Irr,yd,fT,$ue,qrr,Nrr,mz,jrr,Drr,Grr,mT,kue,Orr,Vrr,gz,Xrr,zrr,Wrr,gT,Sue,Qrr,Hrr,hz,Urr,Jrr,Yrr,hT,Krr,Rue,Zrr,etr,Pue,otr,rtr,pT,mNe,Ld,_T,Bue,SL,ttr,Iue,atr,gNe,Qo,RL,ntr,xd,str,pz,ltr,itr,_z,dtr,ctr,ftr,PL,mtr,que,gtr,htr,ptr,Et,BL,_tr,Nue,utr,btr,$d,vtr,jue,Ftr,Ttr,uz,Mtr,Etr,Ctr,uT,wtr,_o,IL,Atr,Due,ytr,Ltr,Qa,xtr,Gue,$tr,ktr,Oue,Str,Rtr,Vue,Ptr,Btr,Itr,qL,bT,Xue,qtr,Ntr,bz,jtr,Dtr,Gtr,vT,zue,Otr,Vtr,vz,Xtr,ztr,Wtr,FT,Qtr,Wue,Htr,Utr,Que,Jtr,Ytr,TT,hNe,kd,MT,Hue,NL,Ktr,Uue,Ztr,pNe,Ho,jL,ear,Sd,oar,Fz,rar,tar,Tz,aar,nar,sar,DL,lar,Jue,iar,dar,car,Ct,GL,far,Yue,mar,gar,Rd,har,Kue,par,_ar,Mz,uar,bar,Far,ET,Tar,uo,OL,Mar,Zue,Ear,Car,Ha,war,e2e,Aar,yar,o2e,Lar,xar,r2e,$ar,kar,Sar,t2e,CT,a2e,Rar,Par,Ez,Bar,Iar,qar,wT,Nar,n2e,jar,Dar,s2e,Gar,Oar,AT,_Ne,Pd,yT,l2e,VL,Var,i2e,Xar,uNe,Uo,XL,zar,Bd,War,Cz,Qar,Har,wz,Uar,Jar,Yar,zL,Kar,d2e,Zar,enr,onr,wt,WL,rnr,c2e,tnr,anr,Id,nnr,f2e,snr,lnr,Az,inr,dnr,cnr,LT,fnr,bo,QL,mnr,m2e,gnr,hnr,Ua,pnr,g2e,_nr,unr,h2e,bnr,vnr,p2e,Fnr,Tnr,Mnr,Ja,xT,_2e,Enr,Cnr,yz,wnr,Anr,ynr,$T,u2e,Lnr,xnr,Lz,$nr,knr,Snr,kT,b2e,Rnr,Pnr,xz,Bnr,Inr,qnr,ST,v2e,Nnr,jnr,$z,Dnr,Gnr,Onr,RT,Vnr,F2e,Xnr,znr,T2e,Wnr,Qnr,PT,bNe,qd,BT,M2e,HL,Hnr,E2e,Unr,vNe,Jo,UL,Jnr,Nd,Ynr,kz,Knr,Znr,Sz,esr,osr,rsr,JL,tsr,C2e,asr,nsr,ssr,At,YL,lsr,w2e,isr,dsr,jd,csr,A2e,fsr,msr,Rz,gsr,hsr,psr,IT,_sr,vo,KL,usr,y2e,bsr,vsr,Ya,Fsr,L2e,Tsr,Msr,x2e,Esr,Csr,$2e,wsr,Asr,ysr,k2e,qT,S2e,Lsr,xsr,Pz,$sr,ksr,Ssr,NT,Rsr,R2e,Psr,Bsr,P2e,Isr,qsr,jT,FNe,Dd,DT,B2e,ZL,Nsr,I2e,jsr,TNe,Yo,e8,Dsr,Gd,Gsr,Bz,Osr,Vsr,Iz,Xsr,zsr,Wsr,o8,Qsr,q2e,Hsr,Usr,Jsr,yt,r8,Ysr,N2e,Ksr,Zsr,Od,elr,j2e,olr,rlr,qz,tlr,alr,nlr,GT,slr,wr,t8,llr,D2e,ilr,dlr,Ka,clr,G2e,flr,mlr,O2e,glr,hlr,V2e,plr,_lr,ulr,q,OT,X2e,blr,vlr,Nz,Flr,Tlr,Mlr,VT,z2e,Elr,Clr,jz,wlr,Alr,ylr,XT,W2e,Llr,xlr,Dz,$lr,klr,Slr,zT,Q2e,Rlr,Plr,Gz,Blr,Ilr,qlr,WT,H2e,Nlr,jlr,Oz,Dlr,Glr,Olr,QT,U2e,Vlr,Xlr,Vz,zlr,Wlr,Qlr,HT,J2e,Hlr,Ulr,Xz,Jlr,Ylr,Klr,UT,Y2e,Zlr,eir,zz,oir,rir,tir,JT,K2e,air,nir,Wz,sir,lir,iir,YT,Z2e,dir,cir,Qz,fir,mir,gir,KT,e1e,hir,pir,Hz,_ir,uir,bir,ZT,o1e,vir,Fir,Uz,Tir,Mir,Eir,eM,r1e,Cir,wir,Jz,Air,yir,Lir,oM,t1e,xir,$ir,Yz,kir,Sir,Rir,rM,a1e,Pir,Bir,Kz,Iir,qir,Nir,tM,n1e,jir,Dir,Zz,Gir,Oir,Vir,aM,s1e,Xir,zir,eW,Wir,Qir,Hir,Bs,l1e,Uir,Jir,oW,Yir,Kir,rW,Zir,edr,odr,nM,i1e,rdr,tdr,tW,adr,ndr,sdr,sM,d1e,ldr,idr,aW,ddr,cdr,fdr,lM,c1e,mdr,gdr,nW,hdr,pdr,_dr,iM,f1e,udr,bdr,sW,vdr,Fdr,Tdr,dM,m1e,Mdr,Edr,lW,Cdr,wdr,Adr,cM,g1e,ydr,Ldr,iW,xdr,$dr,kdr,fM,h1e,Sdr,Rdr,dW,Pdr,Bdr,Idr,mM,p1e,qdr,Ndr,cW,jdr,Ddr,Gdr,gM,_1e,Odr,Vdr,fW,Xdr,zdr,Wdr,hM,u1e,Qdr,Hdr,mW,Udr,Jdr,Ydr,pM,b1e,Kdr,Zdr,gW,ecr,ocr,rcr,_M,v1e,tcr,acr,hW,ncr,scr,lcr,uM,F1e,icr,dcr,pW,ccr,fcr,mcr,bM,T1e,gcr,hcr,_W,pcr,_cr,ucr,vM,M1e,bcr,vcr,uW,Fcr,Tcr,Mcr,FM,E1e,Ecr,Ccr,bW,wcr,Acr,ycr,TM,C1e,Lcr,xcr,vW,$cr,kcr,Scr,MM,w1e,Rcr,Pcr,FW,Bcr,Icr,qcr,EM,A1e,Ncr,jcr,TW,Dcr,Gcr,Ocr,CM,y1e,Vcr,Xcr,MW,zcr,Wcr,Qcr,wM,L1e,Hcr,Ucr,EW,Jcr,Ycr,Kcr,AM,x1e,Zcr,efr,CW,ofr,rfr,tfr,yM,$1e,afr,nfr,wW,sfr,lfr,ifr,LM,k1e,dfr,cfr,AW,ffr,mfr,gfr,xM,S1e,hfr,pfr,yW,_fr,ufr,bfr,$M,R1e,vfr,Ffr,LW,Tfr,Mfr,Efr,kM,P1e,Cfr,wfr,xW,Afr,yfr,Lfr,SM,B1e,xfr,$fr,$W,kfr,Sfr,Rfr,RM,I1e,Pfr,Bfr,kW,Ifr,qfr,Nfr,PM,MNe,Vd,BM,q1e,a8,jfr,N1e,Dfr,ENe,Ko,n8,Gfr,Xd,Ofr,SW,Vfr,Xfr,RW,zfr,Wfr,Qfr,s8,Hfr,j1e,Ufr,Jfr,Yfr,Lt,l8,Kfr,D1e,Zfr,emr,zd,omr,G1e,rmr,tmr,PW,amr,nmr,smr,IM,lmr,Ar,i8,imr,O1e,dmr,cmr,Za,fmr,V1e,mmr,gmr,X1e,hmr,pmr,z1e,_mr,umr,bmr,se,qM,W1e,vmr,Fmr,BW,Tmr,Mmr,Emr,NM,Q1e,Cmr,wmr,IW,Amr,ymr,Lmr,jM,H1e,xmr,$mr,qW,kmr,Smr,Rmr,DM,U1e,Pmr,Bmr,NW,Imr,qmr,Nmr,GM,J1e,jmr,Dmr,jW,Gmr,Omr,Vmr,OM,Y1e,Xmr,zmr,DW,Wmr,Qmr,Hmr,VM,K1e,Umr,Jmr,GW,Ymr,Kmr,Zmr,XM,Z1e,egr,ogr,OW,rgr,tgr,agr,zM,e7e,ngr,sgr,VW,lgr,igr,dgr,WM,o7e,cgr,fgr,XW,mgr,ggr,hgr,QM,r7e,pgr,_gr,zW,ugr,bgr,vgr,HM,t7e,Fgr,Tgr,WW,Mgr,Egr,Cgr,UM,a7e,wgr,Agr,QW,ygr,Lgr,xgr,JM,n7e,$gr,kgr,HW,Sgr,Rgr,Pgr,YM,s7e,Bgr,Igr,UW,qgr,Ngr,jgr,KM,l7e,Dgr,Ggr,JW,Ogr,Vgr,Xgr,ZM,i7e,zgr,Wgr,YW,Qgr,Hgr,Ugr,e4,d7e,Jgr,Ygr,KW,Kgr,Zgr,ehr,o4,c7e,ohr,rhr,ZW,thr,ahr,nhr,r4,f7e,shr,lhr,eQ,ihr,dhr,chr,t4,m7e,fhr,mhr,oQ,ghr,hhr,phr,a4,g7e,_hr,uhr,rQ,bhr,vhr,Fhr,n4,h7e,Thr,Mhr,tQ,Ehr,Chr,whr,s4,CNe,Wd,l4,p7e,d8,Ahr,_7e,yhr,wNe,Zo,c8,Lhr,Qd,xhr,aQ,$hr,khr,nQ,Shr,Rhr,Phr,f8,Bhr,u7e,Ihr,qhr,Nhr,xt,m8,jhr,b7e,Dhr,Ghr,Hd,Ohr,v7e,Vhr,Xhr,sQ,zhr,Whr,Qhr,i4,Hhr,yr,g8,Uhr,F7e,Jhr,Yhr,en,Khr,T7e,Zhr,epr,M7e,opr,rpr,E7e,tpr,apr,npr,Te,d4,C7e,spr,lpr,lQ,ipr,dpr,cpr,c4,w7e,fpr,mpr,iQ,gpr,hpr,ppr,f4,A7e,_pr,upr,dQ,bpr,vpr,Fpr,m4,y7e,Tpr,Mpr,cQ,Epr,Cpr,wpr,g4,L7e,Apr,ypr,fQ,Lpr,xpr,$pr,h4,x7e,kpr,Spr,mQ,Rpr,Ppr,Bpr,p4,$7e,Ipr,qpr,gQ,Npr,jpr,Dpr,_4,k7e,Gpr,Opr,hQ,Vpr,Xpr,zpr,u4,S7e,Wpr,Qpr,pQ,Hpr,Upr,Jpr,b4,R7e,Ypr,Kpr,_Q,Zpr,e_r,o_r,v4,P7e,r_r,t_r,uQ,a_r,n_r,s_r,F4,B7e,l_r,i_r,bQ,d_r,c_r,f_r,T4,I7e,m_r,g_r,vQ,h_r,p_r,__r,M4,ANe,Ud,E4,q7e,h8,u_r,N7e,b_r,yNe,er,p8,v_r,Jd,F_r,FQ,T_r,M_r,TQ,E_r,C_r,w_r,_8,A_r,j7e,y_r,L_r,x_r,$t,u8,$_r,D7e,k_r,S_r,Yd,R_r,G7e,P_r,B_r,MQ,I_r,q_r,N_r,C4,j_r,Lr,b8,D_r,O7e,G_r,O_r,on,V_r,V7e,X_r,z_r,X7e,W_r,Q_r,z7e,H_r,U_r,J_r,rn,w4,W7e,Y_r,K_r,EQ,Z_r,eur,our,A4,Q7e,rur,tur,CQ,aur,nur,sur,y4,H7e,lur,iur,wQ,dur,cur,fur,L4,U7e,mur,gur,AQ,hur,pur,_ur,x4,LNe,Kd,$4,J7e,v8,uur,Y7e,bur,xNe,or,F8,vur,Zd,Fur,yQ,Tur,Mur,LQ,Eur,Cur,wur,T8,Aur,K7e,yur,Lur,xur,kt,M8,$ur,Z7e,kur,Sur,ec,Rur,ebe,Pur,Bur,xQ,Iur,qur,Nur,k4,jur,xr,E8,Dur,obe,Gur,Our,tn,Vur,rbe,Xur,zur,tbe,Wur,Qur,abe,Hur,Uur,Jur,ie,S4,nbe,Yur,Kur,$Q,Zur,e2r,o2r,R4,sbe,r2r,t2r,kQ,a2r,n2r,s2r,P4,lbe,l2r,i2r,SQ,d2r,c2r,f2r,B4,ibe,m2r,g2r,RQ,h2r,p2r,_2r,I4,dbe,u2r,b2r,PQ,v2r,F2r,T2r,q4,cbe,M2r,E2r,BQ,C2r,w2r,A2r,N4,fbe,y2r,L2r,IQ,x2r,$2r,k2r,j4,mbe,S2r,R2r,qQ,P2r,B2r,I2r,D4,gbe,q2r,N2r,NQ,j2r,D2r,G2r,G4,hbe,O2r,V2r,jQ,X2r,z2r,W2r,O4,pbe,Q2r,H2r,DQ,U2r,J2r,Y2r,V4,_be,K2r,Z2r,GQ,e1r,o1r,r1r,X4,ube,t1r,a1r,OQ,n1r,s1r,l1r,z4,bbe,i1r,d1r,VQ,c1r,f1r,m1r,W4,vbe,g1r,h1r,XQ,p1r,_1r,u1r,Q4,Fbe,b1r,v1r,zQ,F1r,T1r,M1r,H4,Tbe,E1r,C1r,WQ,w1r,A1r,y1r,U4,Mbe,L1r,x1r,QQ,$1r,k1r,S1r,J4,Ebe,R1r,P1r,HQ,B1r,I1r,q1r,Y4,Cbe,N1r,j1r,UQ,D1r,G1r,O1r,K4,$Ne,oc,Z4,wbe,C8,V1r,Abe,X1r,kNe,rr,w8,z1r,rc,W1r,JQ,Q1r,H1r,YQ,U1r,J1r,Y1r,A8,K1r,ybe,Z1r,e7r,o7r,St,y8,r7r,Lbe,t7r,a7r,tc,n7r,xbe,s7r,l7r,KQ,i7r,d7r,c7r,eE,f7r,$r,L8,m7r,$be,g7r,h7r,an,p7r,kbe,_7r,u7r,Sbe,b7r,v7r,Rbe,F7r,T7r,M7r,ye,oE,Pbe,E7r,C7r,ZQ,w7r,A7r,y7r,rE,Bbe,L7r,x7r,eH,$7r,k7r,S7r,tE,Ibe,R7r,P7r,oH,B7r,I7r,q7r,aE,qbe,N7r,j7r,rH,D7r,G7r,O7r,nE,Nbe,V7r,X7r,tH,z7r,W7r,Q7r,sE,jbe,H7r,U7r,aH,J7r,Y7r,K7r,lE,Dbe,Z7r,ebr,nH,obr,rbr,tbr,iE,Gbe,abr,nbr,sH,sbr,lbr,ibr,dE,Obe,dbr,cbr,lH,fbr,mbr,gbr,cE,Vbe,hbr,pbr,iH,_br,ubr,bbr,fE,SNe,ac,mE,Xbe,x8,vbr,zbe,Fbr,RNe,tr,$8,Tbr,nc,Mbr,dH,Ebr,Cbr,cH,wbr,Abr,ybr,k8,Lbr,Wbe,xbr,$br,kbr,Rt,S8,Sbr,Qbe,Rbr,Pbr,sc,Bbr,Hbe,Ibr,qbr,fH,Nbr,jbr,Dbr,gE,Gbr,kr,R8,Obr,Ube,Vbr,Xbr,nn,zbr,Jbe,Wbr,Qbr,Ybe,Hbr,Ubr,Kbe,Jbr,Ybr,Kbr,ee,hE,Zbe,Zbr,evr,mH,ovr,rvr,tvr,pE,eve,avr,nvr,gH,svr,lvr,ivr,_E,ove,dvr,cvr,hH,fvr,mvr,gvr,uE,rve,hvr,pvr,pH,_vr,uvr,bvr,bE,tve,vvr,Fvr,_H,Tvr,Mvr,Evr,vE,ave,Cvr,wvr,uH,Avr,yvr,Lvr,FE,nve,xvr,$vr,bH,kvr,Svr,Rvr,TE,sve,Pvr,Bvr,vH,Ivr,qvr,Nvr,ME,lve,jvr,Dvr,FH,Gvr,Ovr,Vvr,EE,ive,Xvr,zvr,TH,Wvr,Qvr,Hvr,CE,dve,Uvr,Jvr,MH,Yvr,Kvr,Zvr,wE,cve,eFr,oFr,EH,rFr,tFr,aFr,AE,fve,nFr,sFr,CH,lFr,iFr,dFr,yE,mve,cFr,fFr,wH,mFr,gFr,hFr,LE,gve,pFr,_Fr,AH,uFr,bFr,vFr,xE,hve,FFr,TFr,yH,MFr,EFr,CFr,$E,pve,wFr,AFr,LH,yFr,LFr,xFr,kE,_ve,$Fr,kFr,xH,SFr,RFr,PFr,SE,uve,BFr,IFr,$H,qFr,NFr,jFr,RE,bve,DFr,GFr,kH,OFr,VFr,XFr,PE,vve,zFr,WFr,SH,QFr,HFr,UFr,BE,Fve,JFr,YFr,RH,KFr,ZFr,eTr,IE,Tve,oTr,rTr,PH,tTr,aTr,nTr,qE,Mve,sTr,lTr,BH,iTr,dTr,cTr,NE,Eve,fTr,mTr,IH,gTr,hTr,pTr,jE,Cve,_Tr,uTr,qH,bTr,vTr,FTr,DE,PNe,lc,GE,wve,P8,TTr,Ave,MTr,BNe,ar,B8,ETr,ic,CTr,NH,wTr,ATr,jH,yTr,LTr,xTr,I8,$Tr,yve,kTr,STr,RTr,Pt,q8,PTr,Lve,BTr,ITr,dc,qTr,xve,NTr,jTr,DH,DTr,GTr,OTr,OE,VTr,Sr,N8,XTr,$ve,zTr,WTr,sn,QTr,kve,HTr,UTr,Sve,JTr,YTr,Rve,KTr,ZTr,eMr,he,VE,Pve,oMr,rMr,GH,tMr,aMr,nMr,XE,Bve,sMr,lMr,OH,iMr,dMr,cMr,zE,Ive,fMr,mMr,VH,gMr,hMr,pMr,WE,qve,_Mr,uMr,XH,bMr,vMr,FMr,QE,Nve,TMr,MMr,zH,EMr,CMr,wMr,HE,jve,AMr,yMr,WH,LMr,xMr,$Mr,UE,Dve,kMr,SMr,QH,RMr,PMr,BMr,JE,Gve,IMr,qMr,HH,NMr,jMr,DMr,YE,Ove,GMr,OMr,UH,VMr,XMr,zMr,KE,Vve,WMr,QMr,JH,HMr,UMr,JMr,ZE,Xve,YMr,KMr,YH,ZMr,e4r,o4r,eC,zve,r4r,t4r,KH,a4r,n4r,s4r,oC,Wve,l4r,i4r,ZH,d4r,c4r,f4r,rC,Qve,m4r,g4r,eU,h4r,p4r,_4r,tC,Hve,u4r,b4r,oU,v4r,F4r,T4r,aC,Uve,M4r,E4r,rU,C4r,w4r,A4r,nC,Jve,y4r,L4r,tU,x4r,$4r,k4r,sC,INe,cc,lC,Yve,j8,S4r,Kve,R4r,qNe,nr,D8,P4r,fc,B4r,aU,I4r,q4r,nU,N4r,j4r,D4r,G8,G4r,Zve,O4r,V4r,X4r,Bt,O8,z4r,eFe,W4r,Q4r,mc,H4r,oFe,U4r,J4r,sU,Y4r,K4r,Z4r,iC,eEr,Rr,V8,oEr,rFe,rEr,tEr,ln,aEr,tFe,nEr,sEr,aFe,lEr,iEr,nFe,dEr,cEr,fEr,X8,dC,sFe,mEr,gEr,lU,hEr,pEr,_Er,cC,lFe,uEr,bEr,iU,vEr,FEr,TEr,fC,NNe,gc,mC,iFe,z8,MEr,dFe,EEr,jNe,sr,W8,CEr,hc,wEr,dU,AEr,yEr,cU,LEr,xEr,$Er,Q8,kEr,cFe,SEr,REr,PEr,It,H8,BEr,fFe,IEr,qEr,pc,NEr,mFe,jEr,DEr,fU,GEr,OEr,VEr,gC,XEr,Pr,U8,zEr,gFe,WEr,QEr,dn,HEr,hFe,UEr,JEr,pFe,YEr,KEr,_Fe,ZEr,eCr,oCr,uFe,hC,bFe,rCr,tCr,mU,aCr,nCr,sCr,pC,DNe,_c,_C,vFe,J8,lCr,FFe,iCr,GNe,lr,Y8,dCr,uc,cCr,gU,fCr,mCr,hU,gCr,hCr,pCr,K8,_Cr,TFe,uCr,bCr,vCr,qt,Z8,FCr,MFe,TCr,MCr,bc,ECr,EFe,CCr,wCr,pU,ACr,yCr,LCr,uC,xCr,Br,e9,$Cr,CFe,kCr,SCr,cn,RCr,wFe,PCr,BCr,AFe,ICr,qCr,yFe,NCr,jCr,DCr,de,bC,LFe,GCr,OCr,_U,VCr,XCr,zCr,vC,xFe,WCr,QCr,uU,HCr,UCr,JCr,FC,$Fe,YCr,KCr,bU,ZCr,e5r,o5r,TC,kFe,r5r,t5r,vU,a5r,n5r,s5r,MC,SFe,l5r,i5r,FU,d5r,c5r,f5r,EC,RFe,m5r,g5r,TU,h5r,p5r,_5r,CC,PFe,u5r,b5r,MU,v5r,F5r,T5r,wC,BFe,M5r,E5r,EU,C5r,w5r,A5r,AC,IFe,y5r,L5r,CU,x5r,$5r,k5r,yC,qFe,S5r,R5r,wU,P5r,B5r,I5r,LC,NFe,q5r,N5r,AU,j5r,D5r,G5r,xC,jFe,O5r,V5r,yU,X5r,z5r,W5r,$C,DFe,Q5r,H5r,LU,U5r,J5r,Y5r,kC,GFe,K5r,Z5r,xU,e3r,o3r,r3r,SC,OFe,t3r,a3r,$U,n3r,s3r,l3r,RC,VFe,i3r,d3r,kU,c3r,f3r,m3r,PC,XFe,g3r,h3r,SU,p3r,_3r,u3r,BC,zFe,b3r,v3r,RU,F3r,T3r,M3r,IC,WFe,E3r,C3r,PU,w3r,A3r,y3r,qC,QFe,L3r,x3r,BU,$3r,k3r,S3r,NC,ONe,vc,jC,HFe,o9,R3r,UFe,P3r,VNe,ir,r9,B3r,Fc,I3r,IU,q3r,N3r,qU,j3r,D3r,G3r,t9,O3r,JFe,V3r,X3r,z3r,Nt,a9,W3r,YFe,Q3r,H3r,Tc,U3r,KFe,J3r,Y3r,NU,K3r,Z3r,ewr,DC,owr,Ir,n9,rwr,ZFe,twr,awr,fn,nwr,eTe,swr,lwr,oTe,iwr,dwr,rTe,cwr,fwr,mwr,ce,GC,tTe,gwr,hwr,jU,pwr,_wr,uwr,OC,aTe,bwr,vwr,DU,Fwr,Twr,Mwr,VC,nTe,Ewr,Cwr,GU,wwr,Awr,ywr,XC,sTe,Lwr,xwr,OU,$wr,kwr,Swr,zC,lTe,Rwr,Pwr,VU,Bwr,Iwr,qwr,WC,iTe,Nwr,jwr,XU,Dwr,Gwr,Owr,QC,dTe,Vwr,Xwr,zU,zwr,Wwr,Qwr,HC,cTe,Hwr,Uwr,WU,Jwr,Ywr,Kwr,UC,fTe,Zwr,e0r,QU,o0r,r0r,t0r,JC,mTe,a0r,n0r,HU,s0r,l0r,i0r,YC,gTe,d0r,c0r,UU,f0r,m0r,g0r,KC,hTe,h0r,p0r,JU,_0r,u0r,b0r,ZC,pTe,v0r,F0r,YU,T0r,M0r,E0r,e5,_Te,C0r,w0r,KU,A0r,y0r,L0r,o5,uTe,x0r,$0r,ZU,k0r,S0r,R0r,r5,bTe,P0r,B0r,eJ,I0r,q0r,N0r,t5,vTe,j0r,D0r,oJ,G0r,O0r,V0r,a5,FTe,X0r,z0r,rJ,W0r,Q0r,H0r,n5,TTe,U0r,J0r,tJ,Y0r,K0r,Z0r,s5,MTe,eAr,oAr,aJ,rAr,tAr,aAr,l5,XNe,Mc,i5,ETe,s9,nAr,CTe,sAr,zNe,dr,l9,lAr,Ec,iAr,nJ,dAr,cAr,sJ,fAr,mAr,gAr,i9,hAr,wTe,pAr,_Ar,uAr,jt,d9,bAr,ATe,vAr,FAr,Cc,TAr,yTe,MAr,EAr,lJ,CAr,wAr,AAr,d5,yAr,qr,c9,LAr,LTe,xAr,$Ar,mn,kAr,xTe,SAr,RAr,$Te,PAr,BAr,kTe,IAr,qAr,NAr,STe,c5,RTe,jAr,DAr,iJ,GAr,OAr,VAr,f5,WNe,wc,m5,PTe,f9,XAr,BTe,zAr,QNe,cr,m9,WAr,Ac,QAr,dJ,HAr,UAr,cJ,JAr,YAr,KAr,g9,ZAr,ITe,e6r,o6r,r6r,Dt,h9,t6r,qTe,a6r,n6r,yc,s6r,NTe,l6r,i6r,fJ,d6r,c6r,f6r,g5,m6r,Nr,p9,g6r,jTe,h6r,p6r,gn,_6r,DTe,u6r,b6r,GTe,v6r,F6r,OTe,T6r,M6r,E6r,VTe,h5,XTe,C6r,w6r,mJ,A6r,y6r,L6r,p5,HNe,Lc,_5,zTe,_9,x6r,WTe,$6r,UNe,fr,u9,k6r,xc,S6r,gJ,R6r,P6r,hJ,B6r,I6r,q6r,b9,N6r,QTe,j6r,D6r,G6r,Gt,v9,O6r,HTe,V6r,X6r,$c,z6r,UTe,W6r,Q6r,pJ,H6r,U6r,J6r,u5,Y6r,jr,F9,K6r,JTe,Z6r,eyr,hn,oyr,YTe,ryr,tyr,KTe,ayr,nyr,ZTe,syr,lyr,iyr,oe,b5,eMe,dyr,cyr,_J,fyr,myr,gyr,v5,oMe,hyr,pyr,uJ,_yr,uyr,byr,F5,rMe,vyr,Fyr,bJ,Tyr,Myr,Eyr,T5,tMe,Cyr,wyr,vJ,Ayr,yyr,Lyr,M5,aMe,xyr,$yr,FJ,kyr,Syr,Ryr,E5,nMe,Pyr,Byr,TJ,Iyr,qyr,Nyr,C5,sMe,jyr,Dyr,MJ,Gyr,Oyr,Vyr,w5,lMe,Xyr,zyr,EJ,Wyr,Qyr,Hyr,A5,iMe,Uyr,Jyr,CJ,Yyr,Kyr,Zyr,y5,dMe,eLr,oLr,wJ,rLr,tLr,aLr,L5,cMe,nLr,sLr,AJ,lLr,iLr,dLr,x5,fMe,cLr,fLr,yJ,mLr,gLr,hLr,$5,mMe,pLr,_Lr,LJ,uLr,bLr,vLr,k5,gMe,FLr,TLr,xJ,MLr,ELr,CLr,S5,hMe,wLr,ALr,$J,yLr,LLr,xLr,R5,pMe,$Lr,kLr,kJ,SLr,RLr,PLr,P5,_Me,BLr,ILr,SJ,qLr,NLr,jLr,B5,uMe,DLr,GLr,RJ,OLr,VLr,XLr,I5,bMe,zLr,WLr,PJ,QLr,HLr,ULr,q5,vMe,JLr,YLr,BJ,KLr,ZLr,e8r,N5,FMe,o8r,r8r,IJ,t8r,a8r,n8r,j5,TMe,s8r,l8r,qJ,i8r,d8r,c8r,D5,MMe,f8r,m8r,NJ,g8r,h8r,p8r,G5,EMe,_8r,u8r,jJ,b8r,v8r,F8r,O5,CMe,T8r,M8r,DJ,E8r,C8r,w8r,V5,wMe,A8r,y8r,GJ,L8r,x8r,$8r,X5,JNe,kc,z5,AMe,T9,k8r,yMe,S8r,YNe,mr,M9,R8r,Sc,P8r,OJ,B8r,I8r,VJ,q8r,N8r,j8r,E9,D8r,LMe,G8r,O8r,V8r,Ot,C9,X8r,xMe,z8r,W8r,Rc,Q8r,$Me,H8r,U8r,XJ,J8r,Y8r,K8r,W5,Z8r,Dr,w9,e9r,kMe,o9r,r9r,pn,t9r,SMe,a9r,n9r,RMe,s9r,l9r,PMe,i9r,d9r,c9r,Le,Q5,BMe,f9r,m9r,zJ,g9r,h9r,p9r,H5,IMe,_9r,u9r,WJ,b9r,v9r,F9r,U5,qMe,T9r,M9r,QJ,E9r,C9r,w9r,J5,NMe,A9r,y9r,HJ,L9r,x9r,$9r,Y5,jMe,k9r,S9r,UJ,R9r,P9r,B9r,K5,DMe,I9r,q9r,JJ,N9r,j9r,D9r,Z5,GMe,G9r,O9r,YJ,V9r,X9r,z9r,e3,OMe,W9r,Q9r,KJ,H9r,U9r,J9r,o3,VMe,Y9r,K9r,ZJ,Z9r,exr,oxr,r3,XMe,rxr,txr,eY,axr,nxr,sxr,t3,KNe,Pc,a3,zMe,A9,lxr,WMe,ixr,ZNe,gr,y9,dxr,Bc,cxr,oY,fxr,mxr,rY,gxr,hxr,pxr,L9,_xr,QMe,uxr,bxr,vxr,Vt,x9,Fxr,HMe,Txr,Mxr,Ic,Exr,UMe,Cxr,wxr,tY,Axr,yxr,Lxr,n3,xxr,Gr,$9,$xr,JMe,kxr,Sxr,_n,Rxr,YMe,Pxr,Bxr,KMe,Ixr,qxr,ZMe,Nxr,jxr,Dxr,Ee,s3,e4e,Gxr,Oxr,aY,Vxr,Xxr,zxr,l3,o4e,Wxr,Qxr,nY,Hxr,Uxr,Jxr,i3,r4e,Yxr,Kxr,sY,Zxr,e$r,o$r,d3,t4e,r$r,t$r,lY,a$r,n$r,s$r,c3,a4e,l$r,i$r,iY,d$r,c$r,f$r,f3,n4e,m$r,g$r,dY,h$r,p$r,_$r,m3,s4e,u$r,b$r,cY,v$r,F$r,T$r,g3,l4e,M$r,E$r,fY,C$r,w$r,A$r,h3,i4e,y$r,L$r,mY,x$r,$$r,k$r,p3,d4e,S$r,R$r,gY,P$r,B$r,I$r,_3,c4e,q$r,N$r,hY,j$r,D$r,G$r,u3,f4e,O$r,V$r,pY,X$r,z$r,W$r,b3,eje,qc,v3,m4e,k9,Q$r,g4e,H$r,oje,hr,S9,U$r,Nc,J$r,_Y,Y$r,K$r,uY,Z$r,ekr,okr,R9,rkr,h4e,tkr,akr,nkr,Xt,P9,skr,p4e,lkr,ikr,jc,dkr,_4e,ckr,fkr,bY,mkr,gkr,hkr,F3,pkr,Or,B9,_kr,u4e,ukr,bkr,un,vkr,b4e,Fkr,Tkr,v4e,Mkr,Ekr,F4e,Ckr,wkr,Akr,xe,T3,T4e,ykr,Lkr,vY,xkr,$kr,kkr,M3,M4e,Skr,Rkr,FY,Pkr,Bkr,Ikr,E3,E4e,qkr,Nkr,TY,jkr,Dkr,Gkr,C3,C4e,Okr,Vkr,MY,Xkr,zkr,Wkr,w3,w4e,Qkr,Hkr,EY,Ukr,Jkr,Ykr,A3,A4e,Kkr,Zkr,CY,eSr,oSr,rSr,y3,y4e,tSr,aSr,wY,nSr,sSr,lSr,L3,L4e,iSr,dSr,AY,cSr,fSr,mSr,x3,x4e,gSr,hSr,yY,pSr,_Sr,uSr,$3,$4e,bSr,vSr,LY,FSr,TSr,MSr,k3,rje,Dc,S3,k4e,I9,ESr,S4e,CSr,tje,pr,q9,wSr,Gc,ASr,xY,ySr,LSr,$Y,xSr,$Sr,kSr,N9,SSr,R4e,RSr,PSr,BSr,zt,j9,ISr,P4e,qSr,NSr,Oc,jSr,B4e,DSr,GSr,kY,OSr,VSr,XSr,R3,zSr,Vr,D9,WSr,I4e,QSr,HSr,bn,USr,q4e,JSr,YSr,N4e,KSr,ZSr,j4e,eRr,oRr,rRr,Pe,P3,D4e,tRr,aRr,SY,nRr,sRr,lRr,B3,G4e,iRr,dRr,RY,cRr,fRr,mRr,I3,O4e,gRr,hRr,PY,pRr,_Rr,uRr,q3,V4e,bRr,vRr,BY,FRr,TRr,MRr,N3,X4e,ERr,CRr,IY,wRr,ARr,yRr,j3,z4e,LRr,xRr,qY,$Rr,kRr,SRr,D3,W4e,RRr,PRr,NY,BRr,IRr,qRr,G3,Q4e,NRr,jRr,jY,DRr,GRr,ORr,O3,H4e,VRr,XRr,DY,zRr,WRr,QRr,V3,aje,Vc,X3,U4e,G9,HRr,J4e,URr,nje,_r,O9,JRr,Xc,YRr,GY,KRr,ZRr,OY,ePr,oPr,rPr,V9,tPr,Y4e,aPr,nPr,sPr,Wt,X9,lPr,K4e,iPr,dPr,zc,cPr,Z4e,fPr,mPr,VY,gPr,hPr,pPr,z3,_Pr,Xr,z9,uPr,eEe,bPr,vPr,vn,FPr,oEe,TPr,MPr,rEe,EPr,CPr,tEe,wPr,APr,yPr,$e,W3,aEe,LPr,xPr,XY,$Pr,kPr,SPr,Q3,nEe,RPr,PPr,zY,BPr,IPr,qPr,H3,sEe,NPr,jPr,WY,DPr,GPr,OPr,U3,lEe,VPr,XPr,QY,zPr,WPr,QPr,J3,iEe,HPr,UPr,HY,JPr,YPr,KPr,Y3,dEe,ZPr,eBr,UY,oBr,rBr,tBr,K3,cEe,aBr,nBr,JY,sBr,lBr,iBr,Z3,fEe,dBr,cBr,YY,fBr,mBr,gBr,ew,mEe,hBr,pBr,KY,_Br,uBr,bBr,ow,gEe,vBr,FBr,ZY,TBr,MBr,EBr,rw,sje,Wc,tw,hEe,W9,CBr,pEe,wBr,lje,ur,Q9,ABr,Qc,yBr,eK,LBr,xBr,oK,$Br,kBr,SBr,H9,RBr,_Ee,PBr,BBr,IBr,Qt,U9,qBr,uEe,NBr,jBr,Hc,DBr,bEe,GBr,OBr,rK,VBr,XBr,zBr,aw,WBr,zr,J9,QBr,vEe,HBr,UBr,Fn,JBr,FEe,YBr,KBr,TEe,ZBr,eIr,MEe,oIr,rIr,tIr,ke,nw,EEe,aIr,nIr,tK,sIr,lIr,iIr,sw,CEe,dIr,cIr,aK,fIr,mIr,gIr,lw,wEe,hIr,pIr,nK,_Ir,uIr,bIr,iw,AEe,vIr,FIr,sK,TIr,MIr,EIr,dw,yEe,CIr,wIr,lK,AIr,yIr,LIr,cw,LEe,xIr,$Ir,iK,kIr,SIr,RIr,fw,xEe,PIr,BIr,dK,IIr,qIr,NIr,mw,$Ee,jIr,DIr,cK,GIr,OIr,VIr,gw,kEe,XIr,zIr,fK,WIr,QIr,HIr,hw,SEe,UIr,JIr,mK,YIr,KIr,ZIr,pw,ije,Uc,_w,REe,Y9,eqr,PEe,oqr,dje,br,K9,rqr,Jc,tqr,gK,aqr,nqr,hK,sqr,lqr,iqr,Z9,dqr,BEe,cqr,fqr,mqr,Ht,ex,gqr,IEe,hqr,pqr,Yc,_qr,qEe,uqr,bqr,pK,vqr,Fqr,Tqr,uw,Mqr,Wr,ox,Eqr,NEe,Cqr,wqr,Tn,Aqr,jEe,yqr,Lqr,DEe,xqr,$qr,GEe,kqr,Sqr,Rqr,Ge,bw,OEe,Pqr,Bqr,_K,Iqr,qqr,Nqr,vw,VEe,jqr,Dqr,uK,Gqr,Oqr,Vqr,Fw,XEe,Xqr,zqr,bK,Wqr,Qqr,Hqr,Tw,zEe,Uqr,Jqr,vK,Yqr,Kqr,Zqr,Mw,WEe,eNr,oNr,FK,rNr,tNr,aNr,Ew,QEe,nNr,sNr,TK,lNr,iNr,dNr,Cw,HEe,cNr,fNr,MK,mNr,gNr,hNr,ww,UEe,pNr,_Nr,EK,uNr,bNr,vNr,Aw,cje,Kc,yw,JEe,rx,FNr,YEe,TNr,fje,vr,tx,MNr,Zc,ENr,CK,CNr,wNr,wK,ANr,yNr,LNr,ax,xNr,KEe,$Nr,kNr,SNr,Ut,nx,RNr,ZEe,PNr,BNr,ef,INr,eCe,qNr,NNr,AK,jNr,DNr,GNr,Lw,ONr,Qr,sx,VNr,oCe,XNr,zNr,Mn,WNr,rCe,QNr,HNr,tCe,UNr,JNr,aCe,YNr,KNr,ZNr,Oe,xw,nCe,ejr,ojr,yK,rjr,tjr,ajr,$w,sCe,njr,sjr,LK,ljr,ijr,djr,kw,lCe,cjr,fjr,xK,mjr,gjr,hjr,Sw,iCe,pjr,_jr,$K,ujr,bjr,vjr,Rw,dCe,Fjr,Tjr,kK,Mjr,Ejr,Cjr,Pw,cCe,wjr,Ajr,SK,yjr,Ljr,xjr,Bw,fCe,$jr,kjr,RK,Sjr,Rjr,Pjr,Iw,mCe,Bjr,Ijr,PK,qjr,Njr,jjr,qw,mje,of,Nw,gCe,lx,Djr,hCe,Gjr,gje,Fr,ix,Ojr,rf,Vjr,BK,Xjr,zjr,IK,Wjr,Qjr,Hjr,dx,Ujr,pCe,Jjr,Yjr,Kjr,Jt,cx,Zjr,_Ce,eDr,oDr,tf,rDr,uCe,tDr,aDr,qK,nDr,sDr,lDr,jw,iDr,Hr,fx,dDr,bCe,cDr,fDr,En,mDr,vCe,gDr,hDr,FCe,pDr,_Dr,TCe,uDr,bDr,vDr,MCe,Dw,ECe,FDr,TDr,NK,MDr,EDr,CDr,Gw,hje,af,Ow,CCe,mx,wDr,wCe,ADr,pje,Tr,gx,yDr,nf,LDr,jK,xDr,$Dr,DK,kDr,SDr,RDr,hx,PDr,ACe,BDr,IDr,qDr,Yt,px,NDr,yCe,jDr,DDr,sf,GDr,LCe,ODr,VDr,GK,XDr,zDr,WDr,Vw,QDr,Ur,_x,HDr,xCe,UDr,JDr,Cn,YDr,$Ce,KDr,ZDr,kCe,eGr,oGr,SCe,rGr,tGr,aGr,ux,Xw,RCe,nGr,sGr,OK,lGr,iGr,dGr,zw,PCe,cGr,fGr,VK,mGr,gGr,hGr,Ww,_je,lf,Qw,BCe,bx,pGr,ICe,_Gr,uje,Mr,vx,uGr,df,bGr,XK,vGr,FGr,zK,TGr,MGr,EGr,Fx,CGr,qCe,wGr,AGr,yGr,Kt,Tx,LGr,NCe,xGr,$Gr,cf,kGr,jCe,SGr,RGr,WK,PGr,BGr,IGr,Hw,qGr,Jr,Mx,NGr,DCe,jGr,DGr,wn,GGr,GCe,OGr,VGr,OCe,XGr,zGr,VCe,WGr,QGr,HGr,XCe,Uw,zCe,UGr,JGr,QK,YGr,KGr,ZGr,Jw,bje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),b6=new re({}),v6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new eOr({props:{warning:!0,$$slots:{default:[_9t]},$$scope:{ctx:L}}}),F6=new re({}),T6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L578"}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L601"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),w6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/configuration_auto.py#L724"}}),A6=new re({}),y6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L388"}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17227/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L402"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),k6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/tokenization_auto.py#L598"}}),S6=new re({}),R6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17227/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new eOr({props:{$$slots:{default:[v9t]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),q6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),N6=new re({}),j6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L87"}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new eOr({props:{$$slots:{default:[T9t]},$$scope:{ctx:L}}}),Yh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),V6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/processing_auto.py#L254"}}),X6=new re({}),z6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L729"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),ep=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),U6=new re({}),J6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L736"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L751"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L758"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L765"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L774"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L808"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L815"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L801"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L783"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L790"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L824"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L863"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),oL=new re({}),rL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L870"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L893"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L877"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L884"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L902"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),yL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L909"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),SL=new re({}),RL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L856"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),NL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L831"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L838"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_auto.py#L847"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),ZL=new re({}),e8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),a8=new re({}),n8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),d8=new re({}),c8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),h8=new re({}),p8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),v8=new re({}),F8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),C8=new re({}),w8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),x8=new re({}),$8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),P8=new re({}),B8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),j8=new re({}),D8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),z8=new re({}),W8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),o9=new re({}),r9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),a9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),s9=new re({}),l9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),f9=new re({}),m9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),_9=new re({}),u9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),v9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),T9=new re({}),M9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),C9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),A9=new re({}),y9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),x9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),k9=new re({}),S9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),I9=new re({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),j9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),G9=new re({}),O9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),X9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),U9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),rx=new re({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),lx=new re({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),mx=new re({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),bx=new re({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17227/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17227/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17227/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),h6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),p6=o("AutoConfig"),Ln=o(", "),xn=a("a"),_6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),u6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),B$=o("will create a model that is an instance of "),_i=a("a"),I$=o("BertModel"),q$=o("."),Eo=l(),wa=a("p"),N$=o("There is one class of "),uf=a("code"),j$=o("AutoModel"),AGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pqe=l(),ui=a("h2"),bf=a("a"),Dee=a("span"),F(b6.$$.fragment),yGe=l(),Gee=a("span"),LGe=o("Extending the Auto Classes"),_qe=l(),kn=a("p"),xGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Oee=a("code"),$Ge=o("NewModel"),kGe=o(", make sure you have a "),Vee=a("code"),SGe=o("NewModelConfig"),RGe=o(` then you can add those to the auto
classes like this:`),uqe=l(),F(v6.$$.fragment),bqe=l(),D$=a("p"),PGe=o("You will then be able to use the auto classes like you would usually do!"),vqe=l(),F(vf.$$.fragment),Fqe=l(),bi=a("h2"),Ff=a("a"),Xee=a("span"),F(F6.$$.fragment),BGe=l(),zee=a("span"),IGe=o("AutoConfig"),Tqe=l(),Co=a("div"),F(T6.$$.fragment),qGe=l(),M6=a("p"),NGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G$=a("a"),jGe=o("from_pretrained()"),DGe=o(" class method."),GGe=l(),E6=a("p"),OGe=o("This class cannot be instantiated directly using "),Wee=a("code"),VGe=o("__init__()"),XGe=o(" (throws an error)."),zGe=l(),Er=a("div"),F(C6.$$.fragment),WGe=l(),Qee=a("p"),QGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),HGe=l(),vi=a("p"),UGe=o("The configuration class to instantiate is selected based on the "),Hee=a("code"),JGe=o("model_type"),YGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Uee=a("code"),KGe=o("pretrained_model_name_or_path"),ZGe=o(":"),eOe=l(),A=a("ul"),Tf=a("li"),Jee=a("strong"),oOe=o("albert"),rOe=o(" \u2014 "),O$=a("a"),tOe=o("AlbertConfig"),aOe=o(" (ALBERT model)"),nOe=l(),Mf=a("li"),Yee=a("strong"),sOe=o("bart"),lOe=o(" \u2014 "),V$=a("a"),iOe=o("BartConfig"),dOe=o(" (BART model)"),cOe=l(),Ef=a("li"),Kee=a("strong"),fOe=o("beit"),mOe=o(" \u2014 "),X$=a("a"),gOe=o("BeitConfig"),hOe=o(" (BEiT model)"),pOe=l(),Cf=a("li"),Zee=a("strong"),_Oe=o("bert"),uOe=o(" \u2014 "),z$=a("a"),bOe=o("BertConfig"),vOe=o(" (BERT model)"),FOe=l(),wf=a("li"),eoe=a("strong"),TOe=o("bert-generation"),MOe=o(" \u2014 "),W$=a("a"),EOe=o("BertGenerationConfig"),COe=o(" (Bert Generation model)"),wOe=l(),Af=a("li"),ooe=a("strong"),AOe=o("big_bird"),yOe=o(" \u2014 "),Q$=a("a"),LOe=o("BigBirdConfig"),xOe=o(" (BigBird model)"),$Oe=l(),yf=a("li"),roe=a("strong"),kOe=o("bigbird_pegasus"),SOe=o(" \u2014 "),H$=a("a"),ROe=o("BigBirdPegasusConfig"),POe=o(" (BigBirdPegasus model)"),BOe=l(),Lf=a("li"),toe=a("strong"),IOe=o("blenderbot"),qOe=o(" \u2014 "),U$=a("a"),NOe=o("BlenderbotConfig"),jOe=o(" (Blenderbot model)"),DOe=l(),xf=a("li"),aoe=a("strong"),GOe=o("blenderbot-small"),OOe=o(" \u2014 "),J$=a("a"),VOe=o("BlenderbotSmallConfig"),XOe=o(" (BlenderbotSmall model)"),zOe=l(),$f=a("li"),noe=a("strong"),WOe=o("camembert"),QOe=o(" \u2014 "),Y$=a("a"),HOe=o("CamembertConfig"),UOe=o(" (CamemBERT model)"),JOe=l(),kf=a("li"),soe=a("strong"),YOe=o("canine"),KOe=o(" \u2014 "),K$=a("a"),ZOe=o("CanineConfig"),eVe=o(" (Canine model)"),oVe=l(),Sf=a("li"),loe=a("strong"),rVe=o("clip"),tVe=o(" \u2014 "),Z$=a("a"),aVe=o("CLIPConfig"),nVe=o(" (CLIP model)"),sVe=l(),Rf=a("li"),ioe=a("strong"),lVe=o("convbert"),iVe=o(" \u2014 "),ek=a("a"),dVe=o("ConvBertConfig"),cVe=o(" (ConvBERT model)"),fVe=l(),Pf=a("li"),doe=a("strong"),mVe=o("convnext"),gVe=o(" \u2014 "),ok=a("a"),hVe=o("ConvNextConfig"),pVe=o(" (ConvNext model)"),_Ve=l(),Bf=a("li"),coe=a("strong"),uVe=o("ctrl"),bVe=o(" \u2014 "),rk=a("a"),vVe=o("CTRLConfig"),FVe=o(" (CTRL model)"),TVe=l(),If=a("li"),foe=a("strong"),MVe=o("cvt"),EVe=o(" \u2014 "),tk=a("a"),CVe=o("CvtConfig"),wVe=o(" (CvT model)"),AVe=l(),qf=a("li"),moe=a("strong"),yVe=o("data2vec-audio"),LVe=o(" \u2014 "),ak=a("a"),xVe=o("Data2VecAudioConfig"),$Ve=o(" (Data2VecAudio model)"),kVe=l(),Nf=a("li"),goe=a("strong"),SVe=o("data2vec-text"),RVe=o(" \u2014 "),nk=a("a"),PVe=o("Data2VecTextConfig"),BVe=o(" (Data2VecText model)"),IVe=l(),jf=a("li"),hoe=a("strong"),qVe=o("data2vec-vision"),NVe=o(" \u2014 "),sk=a("a"),jVe=o("Data2VecVisionConfig"),DVe=o(" (Data2VecVision model)"),GVe=l(),Df=a("li"),poe=a("strong"),OVe=o("deberta"),VVe=o(" \u2014 "),lk=a("a"),XVe=o("DebertaConfig"),zVe=o(" (DeBERTa model)"),WVe=l(),Gf=a("li"),_oe=a("strong"),QVe=o("deberta-v2"),HVe=o(" \u2014 "),ik=a("a"),UVe=o("DebertaV2Config"),JVe=o(" (DeBERTa-v2 model)"),YVe=l(),Of=a("li"),uoe=a("strong"),KVe=o("decision_transformer"),ZVe=o(" \u2014 "),dk=a("a"),eXe=o("DecisionTransformerConfig"),oXe=o(" (Decision Transformer model)"),rXe=l(),Vf=a("li"),boe=a("strong"),tXe=o("deit"),aXe=o(" \u2014 "),ck=a("a"),nXe=o("DeiTConfig"),sXe=o(" (DeiT model)"),lXe=l(),Xf=a("li"),voe=a("strong"),iXe=o("detr"),dXe=o(" \u2014 "),fk=a("a"),cXe=o("DetrConfig"),fXe=o(" (DETR model)"),mXe=l(),zf=a("li"),Foe=a("strong"),gXe=o("distilbert"),hXe=o(" \u2014 "),mk=a("a"),pXe=o("DistilBertConfig"),_Xe=o(" (DistilBERT model)"),uXe=l(),Wf=a("li"),Toe=a("strong"),bXe=o("dpr"),vXe=o(" \u2014 "),gk=a("a"),FXe=o("DPRConfig"),TXe=o(" (DPR model)"),MXe=l(),Qf=a("li"),Moe=a("strong"),EXe=o("dpt"),CXe=o(" \u2014 "),hk=a("a"),wXe=o("DPTConfig"),AXe=o(" (DPT model)"),yXe=l(),Hf=a("li"),Eoe=a("strong"),LXe=o("electra"),xXe=o(" \u2014 "),pk=a("a"),$Xe=o("ElectraConfig"),kXe=o(" (ELECTRA model)"),SXe=l(),Uf=a("li"),Coe=a("strong"),RXe=o("encoder-decoder"),PXe=o(" \u2014 "),_k=a("a"),BXe=o("EncoderDecoderConfig"),IXe=o(" (Encoder decoder model)"),qXe=l(),Jf=a("li"),woe=a("strong"),NXe=o("flaubert"),jXe=o(" \u2014 "),uk=a("a"),DXe=o("FlaubertConfig"),GXe=o(" (FlauBERT model)"),OXe=l(),Yf=a("li"),Aoe=a("strong"),VXe=o("flava"),XXe=o(" \u2014 "),bk=a("a"),zXe=o("FlavaConfig"),WXe=o(" (Flava model)"),QXe=l(),Kf=a("li"),yoe=a("strong"),HXe=o("fnet"),UXe=o(" \u2014 "),vk=a("a"),JXe=o("FNetConfig"),YXe=o(" (FNet model)"),KXe=l(),Zf=a("li"),Loe=a("strong"),ZXe=o("fsmt"),eze=o(" \u2014 "),Fk=a("a"),oze=o("FSMTConfig"),rze=o(" (FairSeq Machine-Translation model)"),tze=l(),em=a("li"),xoe=a("strong"),aze=o("funnel"),nze=o(" \u2014 "),Tk=a("a"),sze=o("FunnelConfig"),lze=o(" (Funnel Transformer model)"),ize=l(),om=a("li"),$oe=a("strong"),dze=o("glpn"),cze=o(" \u2014 "),Mk=a("a"),fze=o("GLPNConfig"),mze=o(" (GLPN model)"),gze=l(),rm=a("li"),koe=a("strong"),hze=o("gpt2"),pze=o(" \u2014 "),Ek=a("a"),_ze=o("GPT2Config"),uze=o(" (OpenAI GPT-2 model)"),bze=l(),tm=a("li"),Soe=a("strong"),vze=o("gpt_neo"),Fze=o(" \u2014 "),Ck=a("a"),Tze=o("GPTNeoConfig"),Mze=o(" (GPT Neo model)"),Eze=l(),am=a("li"),Roe=a("strong"),Cze=o("gptj"),wze=o(" \u2014 "),wk=a("a"),Aze=o("GPTJConfig"),yze=o(" (GPT-J model)"),Lze=l(),nm=a("li"),Poe=a("strong"),xze=o("hubert"),$ze=o(" \u2014 "),Ak=a("a"),kze=o("HubertConfig"),Sze=o(" (Hubert model)"),Rze=l(),sm=a("li"),Boe=a("strong"),Pze=o("ibert"),Bze=o(" \u2014 "),yk=a("a"),Ize=o("IBertConfig"),qze=o(" (I-BERT model)"),Nze=l(),lm=a("li"),Ioe=a("strong"),jze=o("imagegpt"),Dze=o(" \u2014 "),Lk=a("a"),Gze=o("ImageGPTConfig"),Oze=o(" (ImageGPT model)"),Vze=l(),im=a("li"),qoe=a("strong"),Xze=o("layoutlm"),zze=o(" \u2014 "),xk=a("a"),Wze=o("LayoutLMConfig"),Qze=o(" (LayoutLM model)"),Hze=l(),dm=a("li"),Noe=a("strong"),Uze=o("layoutlmv2"),Jze=o(" \u2014 "),$k=a("a"),Yze=o("LayoutLMv2Config"),Kze=o(" (LayoutLMv2 model)"),Zze=l(),cm=a("li"),joe=a("strong"),eWe=o("led"),oWe=o(" \u2014 "),kk=a("a"),rWe=o("LEDConfig"),tWe=o(" (LED model)"),aWe=l(),fm=a("li"),Doe=a("strong"),nWe=o("longformer"),sWe=o(" \u2014 "),Sk=a("a"),lWe=o("LongformerConfig"),iWe=o(" (Longformer model)"),dWe=l(),mm=a("li"),Goe=a("strong"),cWe=o("luke"),fWe=o(" \u2014 "),Rk=a("a"),mWe=o("LukeConfig"),gWe=o(" (LUKE model)"),hWe=l(),gm=a("li"),Ooe=a("strong"),pWe=o("lxmert"),_We=o(" \u2014 "),Pk=a("a"),uWe=o("LxmertConfig"),bWe=o(" (LXMERT model)"),vWe=l(),hm=a("li"),Voe=a("strong"),FWe=o("m2m_100"),TWe=o(" \u2014 "),Bk=a("a"),MWe=o("M2M100Config"),EWe=o(" (M2M100 model)"),CWe=l(),pm=a("li"),Xoe=a("strong"),wWe=o("marian"),AWe=o(" \u2014 "),Ik=a("a"),yWe=o("MarianConfig"),LWe=o(" (Marian model)"),xWe=l(),_m=a("li"),zoe=a("strong"),$We=o("maskformer"),kWe=o(" \u2014 "),qk=a("a"),SWe=o("MaskFormerConfig"),RWe=o(" (MaskFormer model)"),PWe=l(),um=a("li"),Woe=a("strong"),BWe=o("mbart"),IWe=o(" \u2014 "),Nk=a("a"),qWe=o("MBartConfig"),NWe=o(" (mBART model)"),jWe=l(),bm=a("li"),Qoe=a("strong"),DWe=o("megatron-bert"),GWe=o(" \u2014 "),jk=a("a"),OWe=o("MegatronBertConfig"),VWe=o(" (MegatronBert model)"),XWe=l(),vm=a("li"),Hoe=a("strong"),zWe=o("mobilebert"),WWe=o(" \u2014 "),Dk=a("a"),QWe=o("MobileBertConfig"),HWe=o(" (MobileBERT model)"),UWe=l(),Fm=a("li"),Uoe=a("strong"),JWe=o("mpnet"),YWe=o(" \u2014 "),Gk=a("a"),KWe=o("MPNetConfig"),ZWe=o(" (MPNet model)"),eQe=l(),Tm=a("li"),Joe=a("strong"),oQe=o("mt5"),rQe=o(" \u2014 "),Ok=a("a"),tQe=o("MT5Config"),aQe=o(" (mT5 model)"),nQe=l(),Mm=a("li"),Yoe=a("strong"),sQe=o("nystromformer"),lQe=o(" \u2014 "),Vk=a("a"),iQe=o("NystromformerConfig"),dQe=o(" (Nystromformer model)"),cQe=l(),Em=a("li"),Koe=a("strong"),fQe=o("openai-gpt"),mQe=o(" \u2014 "),Xk=a("a"),gQe=o("OpenAIGPTConfig"),hQe=o(" (OpenAI GPT model)"),pQe=l(),Cm=a("li"),Zoe=a("strong"),_Qe=o("opt"),uQe=o(" \u2014 "),zk=a("a"),bQe=o("OPTConfig"),vQe=o(" (OPT model)"),FQe=l(),wm=a("li"),ere=a("strong"),TQe=o("pegasus"),MQe=o(" \u2014 "),Wk=a("a"),EQe=o("PegasusConfig"),CQe=o(" (Pegasus model)"),wQe=l(),Am=a("li"),ore=a("strong"),AQe=o("perceiver"),yQe=o(" \u2014 "),Qk=a("a"),LQe=o("PerceiverConfig"),xQe=o(" (Perceiver model)"),$Qe=l(),ym=a("li"),rre=a("strong"),kQe=o("plbart"),SQe=o(" \u2014 "),Hk=a("a"),RQe=o("PLBartConfig"),PQe=o(" (PLBart model)"),BQe=l(),Lm=a("li"),tre=a("strong"),IQe=o("poolformer"),qQe=o(" \u2014 "),Uk=a("a"),NQe=o("PoolFormerConfig"),jQe=o(" (PoolFormer model)"),DQe=l(),xm=a("li"),are=a("strong"),GQe=o("prophetnet"),OQe=o(" \u2014 "),Jk=a("a"),VQe=o("ProphetNetConfig"),XQe=o(" (ProphetNet model)"),zQe=l(),$m=a("li"),nre=a("strong"),WQe=o("qdqbert"),QQe=o(" \u2014 "),Yk=a("a"),HQe=o("QDQBertConfig"),UQe=o(" (QDQBert model)"),JQe=l(),km=a("li"),sre=a("strong"),YQe=o("rag"),KQe=o(" \u2014 "),Kk=a("a"),ZQe=o("RagConfig"),eHe=o(" (RAG model)"),oHe=l(),Sm=a("li"),lre=a("strong"),rHe=o("realm"),tHe=o(" \u2014 "),Zk=a("a"),aHe=o("RealmConfig"),nHe=o(" (Realm model)"),sHe=l(),Rm=a("li"),ire=a("strong"),lHe=o("reformer"),iHe=o(" \u2014 "),eS=a("a"),dHe=o("ReformerConfig"),cHe=o(" (Reformer model)"),fHe=l(),Pm=a("li"),dre=a("strong"),mHe=o("regnet"),gHe=o(" \u2014 "),oS=a("a"),hHe=o("RegNetConfig"),pHe=o(" (RegNet model)"),_He=l(),Bm=a("li"),cre=a("strong"),uHe=o("rembert"),bHe=o(" \u2014 "),rS=a("a"),vHe=o("RemBertConfig"),FHe=o(" (RemBERT model)"),THe=l(),Im=a("li"),fre=a("strong"),MHe=o("resnet"),EHe=o(" \u2014 "),tS=a("a"),CHe=o("ResNetConfig"),wHe=o(" (ResNet model)"),AHe=l(),qm=a("li"),mre=a("strong"),yHe=o("retribert"),LHe=o(" \u2014 "),aS=a("a"),xHe=o("RetriBertConfig"),$He=o(" (RetriBERT model)"),kHe=l(),Nm=a("li"),gre=a("strong"),SHe=o("roberta"),RHe=o(" \u2014 "),nS=a("a"),PHe=o("RobertaConfig"),BHe=o(" (RoBERTa model)"),IHe=l(),jm=a("li"),hre=a("strong"),qHe=o("roformer"),NHe=o(" \u2014 "),sS=a("a"),jHe=o("RoFormerConfig"),DHe=o(" (RoFormer model)"),GHe=l(),Dm=a("li"),pre=a("strong"),OHe=o("segformer"),VHe=o(" \u2014 "),lS=a("a"),XHe=o("SegformerConfig"),zHe=o(" (SegFormer model)"),WHe=l(),Gm=a("li"),_re=a("strong"),QHe=o("sew"),HHe=o(" \u2014 "),iS=a("a"),UHe=o("SEWConfig"),JHe=o(" (SEW model)"),YHe=l(),Om=a("li"),ure=a("strong"),KHe=o("sew-d"),ZHe=o(" \u2014 "),dS=a("a"),eUe=o("SEWDConfig"),oUe=o(" (SEW-D model)"),rUe=l(),Vm=a("li"),bre=a("strong"),tUe=o("speech-encoder-decoder"),aUe=o(" \u2014 "),cS=a("a"),nUe=o("SpeechEncoderDecoderConfig"),sUe=o(" (Speech Encoder decoder model)"),lUe=l(),Xm=a("li"),vre=a("strong"),iUe=o("speech_to_text"),dUe=o(" \u2014 "),fS=a("a"),cUe=o("Speech2TextConfig"),fUe=o(" (Speech2Text model)"),mUe=l(),zm=a("li"),Fre=a("strong"),gUe=o("speech_to_text_2"),hUe=o(" \u2014 "),mS=a("a"),pUe=o("Speech2Text2Config"),_Ue=o(" (Speech2Text2 model)"),uUe=l(),Wm=a("li"),Tre=a("strong"),bUe=o("splinter"),vUe=o(" \u2014 "),gS=a("a"),FUe=o("SplinterConfig"),TUe=o(" (Splinter model)"),MUe=l(),Qm=a("li"),Mre=a("strong"),EUe=o("squeezebert"),CUe=o(" \u2014 "),hS=a("a"),wUe=o("SqueezeBertConfig"),AUe=o(" (SqueezeBERT model)"),yUe=l(),Hm=a("li"),Ere=a("strong"),LUe=o("swin"),xUe=o(" \u2014 "),pS=a("a"),$Ue=o("SwinConfig"),kUe=o(" (Swin model)"),SUe=l(),Um=a("li"),Cre=a("strong"),RUe=o("t5"),PUe=o(" \u2014 "),_S=a("a"),BUe=o("T5Config"),IUe=o(" (T5 model)"),qUe=l(),Jm=a("li"),wre=a("strong"),NUe=o("tapas"),jUe=o(" \u2014 "),uS=a("a"),DUe=o("TapasConfig"),GUe=o(" (TAPAS model)"),OUe=l(),Ym=a("li"),Are=a("strong"),VUe=o("trajectory_transformer"),XUe=o(" \u2014 "),bS=a("a"),zUe=o("TrajectoryTransformerConfig"),WUe=o(" (Trajectory Transformer model)"),QUe=l(),Km=a("li"),yre=a("strong"),HUe=o("transfo-xl"),UUe=o(" \u2014 "),vS=a("a"),JUe=o("TransfoXLConfig"),YUe=o(" (Transformer-XL model)"),KUe=l(),Zm=a("li"),Lre=a("strong"),ZUe=o("trocr"),eJe=o(" \u2014 "),FS=a("a"),oJe=o("TrOCRConfig"),rJe=o(" (TrOCR model)"),tJe=l(),eg=a("li"),xre=a("strong"),aJe=o("unispeech"),nJe=o(" \u2014 "),TS=a("a"),sJe=o("UniSpeechConfig"),lJe=o(" (UniSpeech model)"),iJe=l(),og=a("li"),$re=a("strong"),dJe=o("unispeech-sat"),cJe=o(" \u2014 "),MS=a("a"),fJe=o("UniSpeechSatConfig"),mJe=o(" (UniSpeechSat model)"),gJe=l(),rg=a("li"),kre=a("strong"),hJe=o("van"),pJe=o(" \u2014 "),ES=a("a"),_Je=o("VanConfig"),uJe=o(" (VAN model)"),bJe=l(),tg=a("li"),Sre=a("strong"),vJe=o("vilt"),FJe=o(" \u2014 "),CS=a("a"),TJe=o("ViltConfig"),MJe=o(" (ViLT model)"),EJe=l(),ag=a("li"),Rre=a("strong"),CJe=o("vision-encoder-decoder"),wJe=o(" \u2014 "),wS=a("a"),AJe=o("VisionEncoderDecoderConfig"),yJe=o(" (Vision Encoder decoder model)"),LJe=l(),ng=a("li"),Pre=a("strong"),xJe=o("vision-text-dual-encoder"),$Je=o(" \u2014 "),AS=a("a"),kJe=o("VisionTextDualEncoderConfig"),SJe=o(" (VisionTextDualEncoder model)"),RJe=l(),sg=a("li"),Bre=a("strong"),PJe=o("visual_bert"),BJe=o(" \u2014 "),yS=a("a"),IJe=o("VisualBertConfig"),qJe=o(" (VisualBert model)"),NJe=l(),lg=a("li"),Ire=a("strong"),jJe=o("vit"),DJe=o(" \u2014 "),LS=a("a"),GJe=o("ViTConfig"),OJe=o(" (ViT model)"),VJe=l(),ig=a("li"),qre=a("strong"),XJe=o("vit_mae"),zJe=o(" \u2014 "),xS=a("a"),WJe=o("ViTMAEConfig"),QJe=o(" (ViTMAE model)"),HJe=l(),dg=a("li"),Nre=a("strong"),UJe=o("wav2vec2"),JJe=o(" \u2014 "),$S=a("a"),YJe=o("Wav2Vec2Config"),KJe=o(" (Wav2Vec2 model)"),ZJe=l(),cg=a("li"),jre=a("strong"),eYe=o("wav2vec2-conformer"),oYe=o(" \u2014 "),kS=a("a"),rYe=o("Wav2Vec2ConformerConfig"),tYe=o(" (Wav2Vec2-Conformer model)"),aYe=l(),fg=a("li"),Dre=a("strong"),nYe=o("wavlm"),sYe=o(" \u2014 "),SS=a("a"),lYe=o("WavLMConfig"),iYe=o(" (WavLM model)"),dYe=l(),mg=a("li"),Gre=a("strong"),cYe=o("xglm"),fYe=o(" \u2014 "),RS=a("a"),mYe=o("XGLMConfig"),gYe=o(" (XGLM model)"),hYe=l(),gg=a("li"),Ore=a("strong"),pYe=o("xlm"),_Ye=o(" \u2014 "),PS=a("a"),uYe=o("XLMConfig"),bYe=o(" (XLM model)"),vYe=l(),hg=a("li"),Vre=a("strong"),FYe=o("xlm-prophetnet"),TYe=o(" \u2014 "),BS=a("a"),MYe=o("XLMProphetNetConfig"),EYe=o(" (XLMProphetNet model)"),CYe=l(),pg=a("li"),Xre=a("strong"),wYe=o("xlm-roberta"),AYe=o(" \u2014 "),IS=a("a"),yYe=o("XLMRobertaConfig"),LYe=o(" (XLM-RoBERTa model)"),xYe=l(),_g=a("li"),zre=a("strong"),$Ye=o("xlm-roberta-xl"),kYe=o(" \u2014 "),qS=a("a"),SYe=o("XLMRobertaXLConfig"),RYe=o(" (XLM-RoBERTa-XL model)"),PYe=l(),ug=a("li"),Wre=a("strong"),BYe=o("xlnet"),IYe=o(" \u2014 "),NS=a("a"),qYe=o("XLNetConfig"),NYe=o(" (XLNet model)"),jYe=l(),bg=a("li"),Qre=a("strong"),DYe=o("yolos"),GYe=o(" \u2014 "),jS=a("a"),OYe=o("YolosConfig"),VYe=o(" (YOLOS model)"),XYe=l(),vg=a("li"),Hre=a("strong"),zYe=o("yoso"),WYe=o(" \u2014 "),DS=a("a"),QYe=o("YosoConfig"),HYe=o(" (YOSO model)"),UYe=l(),F(Fg.$$.fragment),JYe=l(),Tg=a("div"),F(w6.$$.fragment),YYe=l(),Ure=a("p"),KYe=o("Register a new configuration for this class."),Mqe=l(),Fi=a("h2"),Mg=a("a"),Jre=a("span"),F(A6.$$.fragment),ZYe=l(),Yre=a("span"),eKe=o("AutoTokenizer"),Eqe=l(),wo=a("div"),F(y6.$$.fragment),oKe=l(),L6=a("p"),rKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GS=a("a"),tKe=o("AutoTokenizer.from_pretrained()"),aKe=o(" class method."),nKe=l(),x6=a("p"),sKe=o("This class cannot be instantiated directly using "),Kre=a("code"),lKe=o("__init__()"),iKe=o(" (throws an error)."),dKe=l(),Cr=a("div"),F($6.$$.fragment),cKe=l(),Zre=a("p"),fKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mKe=l(),Aa=a("p"),gKe=o("The tokenizer class to instantiate is selected based on the "),ete=a("code"),hKe=o("model_type"),pKe=o(` property of the config object (either
passed as an argument or loaded from `),ote=a("code"),_Ke=o("pretrained_model_name_or_path"),uKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=a("code"),bKe=o("pretrained_model_name_or_path"),vKe=o(":"),FKe=l(),k=a("ul"),Sn=a("li"),tte=a("strong"),TKe=o("albert"),MKe=o(" \u2014 "),OS=a("a"),EKe=o("AlbertTokenizer"),CKe=o(" or "),VS=a("a"),wKe=o("AlbertTokenizerFast"),AKe=o(" (ALBERT model)"),yKe=l(),Rn=a("li"),ate=a("strong"),LKe=o("bart"),xKe=o(" \u2014 "),XS=a("a"),$Ke=o("BartTokenizer"),kKe=o(" or "),zS=a("a"),SKe=o("BartTokenizerFast"),RKe=o(" (BART model)"),PKe=l(),Pn=a("li"),nte=a("strong"),BKe=o("barthez"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BarthezTokenizer"),NKe=o(" or "),QS=a("a"),jKe=o("BarthezTokenizerFast"),DKe=o(" (BARThez model)"),GKe=l(),Eg=a("li"),ste=a("strong"),OKe=o("bartpho"),VKe=o(" \u2014 "),HS=a("a"),XKe=o("BartphoTokenizer"),zKe=o(" (BARTpho model)"),WKe=l(),Bn=a("li"),lte=a("strong"),QKe=o("bert"),HKe=o(" \u2014 "),US=a("a"),UKe=o("BertTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("BertTokenizerFast"),KKe=o(" (BERT model)"),ZKe=l(),Cg=a("li"),ite=a("strong"),eZe=o("bert-generation"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BertGenerationTokenizer"),tZe=o(" (Bert Generation model)"),aZe=l(),wg=a("li"),dte=a("strong"),nZe=o("bert-japanese"),sZe=o(" \u2014 "),KS=a("a"),lZe=o("BertJapaneseTokenizer"),iZe=o(" (BertJapanese model)"),dZe=l(),Ag=a("li"),cte=a("strong"),cZe=o("bertweet"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("BertweetTokenizer"),gZe=o(" (Bertweet model)"),hZe=l(),In=a("li"),fte=a("strong"),pZe=o("big_bird"),_Ze=o(" \u2014 "),eR=a("a"),uZe=o("BigBirdTokenizer"),bZe=o(" or "),oR=a("a"),vZe=o("BigBirdTokenizerFast"),FZe=o(" (BigBird model)"),TZe=l(),qn=a("li"),mte=a("strong"),MZe=o("bigbird_pegasus"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("PegasusTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("PegasusTokenizerFast"),yZe=o(" (BigBirdPegasus model)"),LZe=l(),Nn=a("li"),gte=a("strong"),xZe=o("blenderbot"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("BlenderbotTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("BlenderbotTokenizerFast"),PZe=o(" (Blenderbot model)"),BZe=l(),yg=a("li"),hte=a("strong"),IZe=o("blenderbot-small"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("BlenderbotSmallTokenizer"),jZe=o(" (BlenderbotSmall model)"),DZe=l(),Lg=a("li"),pte=a("strong"),GZe=o("byt5"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("ByT5Tokenizer"),XZe=o(" (ByT5 model)"),zZe=l(),jn=a("li"),_te=a("strong"),WZe=o("camembert"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("CamembertTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("CamembertTokenizerFast"),YZe=o(" (CamemBERT model)"),KZe=l(),xg=a("li"),ute=a("strong"),ZZe=o("canine"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("CanineTokenizer"),reo=o(" (Canine model)"),teo=l(),Dn=a("li"),bte=a("strong"),aeo=o("clip"),neo=o(" \u2014 "),fR=a("a"),seo=o("CLIPTokenizer"),leo=o(" or "),mR=a("a"),ieo=o("CLIPTokenizerFast"),deo=o(" (CLIP model)"),ceo=l(),Gn=a("li"),vte=a("strong"),feo=o("convbert"),meo=o(" \u2014 "),gR=a("a"),geo=o("ConvBertTokenizer"),heo=o(" or "),hR=a("a"),peo=o("ConvBertTokenizerFast"),_eo=o(" (ConvBERT model)"),ueo=l(),On=a("li"),Fte=a("strong"),beo=o("cpm"),veo=o(" \u2014 "),pR=a("a"),Feo=o("CpmTokenizer"),Teo=o(" or "),_R=a("a"),Meo=o("CpmTokenizerFast"),Eeo=o(" (CPM model)"),Ceo=l(),$g=a("li"),Tte=a("strong"),weo=o("ctrl"),Aeo=o(" \u2014 "),uR=a("a"),yeo=o("CTRLTokenizer"),Leo=o(" (CTRL model)"),xeo=l(),Vn=a("li"),Mte=a("strong"),$eo=o("data2vec-text"),keo=o(" \u2014 "),bR=a("a"),Seo=o("RobertaTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("RobertaTokenizerFast"),Beo=o(" (Data2VecText model)"),Ieo=l(),Xn=a("li"),Ete=a("strong"),qeo=o("deberta"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("DebertaTokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("DebertaTokenizerFast"),Oeo=o(" (DeBERTa model)"),Veo=l(),zn=a("li"),Cte=a("strong"),Xeo=o("deberta-v2"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("DebertaV2Tokenizer"),Qeo=o(" or "),ER=a("a"),Heo=o("DebertaV2TokenizerFast"),Ueo=o(" (DeBERTa-v2 model)"),Jeo=l(),Wn=a("li"),wte=a("strong"),Yeo=o("distilbert"),Keo=o(" \u2014 "),CR=a("a"),Zeo=o("DistilBertTokenizer"),eoo=o(" or "),wR=a("a"),ooo=o("DistilBertTokenizerFast"),roo=o(" (DistilBERT model)"),too=l(),Qn=a("li"),Ate=a("strong"),aoo=o("dpr"),noo=o(" \u2014 "),AR=a("a"),soo=o("DPRQuestionEncoderTokenizer"),loo=o(" or "),yR=a("a"),ioo=o("DPRQuestionEncoderTokenizerFast"),doo=o(" (DPR model)"),coo=l(),Hn=a("li"),yte=a("strong"),foo=o("electra"),moo=o(" \u2014 "),LR=a("a"),goo=o("ElectraTokenizer"),hoo=o(" or "),xR=a("a"),poo=o("ElectraTokenizerFast"),_oo=o(" (ELECTRA model)"),uoo=l(),kg=a("li"),Lte=a("strong"),boo=o("flaubert"),voo=o(" \u2014 "),$R=a("a"),Foo=o("FlaubertTokenizer"),Too=o(" (FlauBERT model)"),Moo=l(),Un=a("li"),xte=a("strong"),Eoo=o("fnet"),Coo=o(" \u2014 "),kR=a("a"),woo=o("FNetTokenizer"),Aoo=o(" or "),SR=a("a"),yoo=o("FNetTokenizerFast"),Loo=o(" (FNet model)"),xoo=l(),Sg=a("li"),$te=a("strong"),$oo=o("fsmt"),koo=o(" \u2014 "),RR=a("a"),Soo=o("FSMTTokenizer"),Roo=o(" (FairSeq Machine-Translation model)"),Poo=l(),Jn=a("li"),kte=a("strong"),Boo=o("funnel"),Ioo=o(" \u2014 "),PR=a("a"),qoo=o("FunnelTokenizer"),Noo=o(" or "),BR=a("a"),joo=o("FunnelTokenizerFast"),Doo=o(" (Funnel Transformer model)"),Goo=l(),Yn=a("li"),Ste=a("strong"),Ooo=o("gpt2"),Voo=o(" \u2014 "),IR=a("a"),Xoo=o("GPT2Tokenizer"),zoo=o(" or "),qR=a("a"),Woo=o("GPT2TokenizerFast"),Qoo=o(" (OpenAI GPT-2 model)"),Hoo=l(),Kn=a("li"),Rte=a("strong"),Uoo=o("gpt_neo"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("GPT2Tokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("GPT2TokenizerFast"),ero=o(" (GPT Neo model)"),oro=l(),Zn=a("li"),Pte=a("strong"),rro=o("gptj"),tro=o(" \u2014 "),DR=a("a"),aro=o("GPT2Tokenizer"),nro=o(" or "),GR=a("a"),sro=o("GPT2TokenizerFast"),lro=o(" (GPT-J model)"),iro=l(),es=a("li"),Bte=a("strong"),dro=o("herbert"),cro=o(" \u2014 "),OR=a("a"),fro=o("HerbertTokenizer"),mro=o(" or "),VR=a("a"),gro=o("HerbertTokenizerFast"),hro=o(" (HerBERT model)"),pro=l(),Rg=a("li"),Ite=a("strong"),_ro=o("hubert"),uro=o(" \u2014 "),XR=a("a"),bro=o("Wav2Vec2CTCTokenizer"),vro=o(" (Hubert model)"),Fro=l(),os=a("li"),qte=a("strong"),Tro=o("ibert"),Mro=o(" \u2014 "),zR=a("a"),Ero=o("RobertaTokenizer"),Cro=o(" or "),WR=a("a"),wro=o("RobertaTokenizerFast"),Aro=o(" (I-BERT model)"),yro=l(),rs=a("li"),Nte=a("strong"),Lro=o("layoutlm"),xro=o(" \u2014 "),QR=a("a"),$ro=o("LayoutLMTokenizer"),kro=o(" or "),HR=a("a"),Sro=o("LayoutLMTokenizerFast"),Rro=o(" (LayoutLM model)"),Pro=l(),ts=a("li"),jte=a("strong"),Bro=o("layoutlmv2"),Iro=o(" \u2014 "),UR=a("a"),qro=o("LayoutLMv2Tokenizer"),Nro=o(" or "),JR=a("a"),jro=o("LayoutLMv2TokenizerFast"),Dro=o(" (LayoutLMv2 model)"),Gro=l(),as=a("li"),Dte=a("strong"),Oro=o("layoutxlm"),Vro=o(" \u2014 "),YR=a("a"),Xro=o("LayoutXLMTokenizer"),zro=o(" or "),KR=a("a"),Wro=o("LayoutXLMTokenizerFast"),Qro=o(" (LayoutXLM model)"),Hro=l(),ns=a("li"),Gte=a("strong"),Uro=o("led"),Jro=o(" \u2014 "),ZR=a("a"),Yro=o("LEDTokenizer"),Kro=o(" or "),eP=a("a"),Zro=o("LEDTokenizerFast"),eto=o(" (LED model)"),oto=l(),ss=a("li"),Ote=a("strong"),rto=o("longformer"),tto=o(" \u2014 "),oP=a("a"),ato=o("LongformerTokenizer"),nto=o(" or "),rP=a("a"),sto=o("LongformerTokenizerFast"),lto=o(" (Longformer model)"),ito=l(),Pg=a("li"),Vte=a("strong"),dto=o("luke"),cto=o(" \u2014 "),tP=a("a"),fto=o("LukeTokenizer"),mto=o(" (LUKE model)"),gto=l(),ls=a("li"),Xte=a("strong"),hto=o("lxmert"),pto=o(" \u2014 "),aP=a("a"),_to=o("LxmertTokenizer"),uto=o(" or "),nP=a("a"),bto=o("LxmertTokenizerFast"),vto=o(" (LXMERT model)"),Fto=l(),Bg=a("li"),zte=a("strong"),Tto=o("m2m_100"),Mto=o(" \u2014 "),sP=a("a"),Eto=o("M2M100Tokenizer"),Cto=o(" (M2M100 model)"),wto=l(),Ig=a("li"),Wte=a("strong"),Ato=o("marian"),yto=o(" \u2014 "),lP=a("a"),Lto=o("MarianTokenizer"),xto=o(" (Marian model)"),$to=l(),is=a("li"),Qte=a("strong"),kto=o("mbart"),Sto=o(" \u2014 "),iP=a("a"),Rto=o("MBartTokenizer"),Pto=o(" or "),dP=a("a"),Bto=o("MBartTokenizerFast"),Ito=o(" (mBART model)"),qto=l(),ds=a("li"),Hte=a("strong"),Nto=o("mbart50"),jto=o(" \u2014 "),cP=a("a"),Dto=o("MBart50Tokenizer"),Gto=o(" or "),fP=a("a"),Oto=o("MBart50TokenizerFast"),Vto=o(" (mBART-50 model)"),Xto=l(),cs=a("li"),Ute=a("strong"),zto=o("megatron-bert"),Wto=o(" \u2014 "),mP=a("a"),Qto=o("BertTokenizer"),Hto=o(" or "),gP=a("a"),Uto=o("BertTokenizerFast"),Jto=o(" (MegatronBert model)"),Yto=l(),qg=a("li"),Jte=a("strong"),Kto=o("mluke"),Zto=o(" \u2014 "),hP=a("a"),eao=o("MLukeTokenizer"),oao=o(" (mLUKE model)"),rao=l(),fs=a("li"),Yte=a("strong"),tao=o("mobilebert"),aao=o(" \u2014 "),pP=a("a"),nao=o("MobileBertTokenizer"),sao=o(" or "),_P=a("a"),lao=o("MobileBertTokenizerFast"),iao=o(" (MobileBERT model)"),dao=l(),ms=a("li"),Kte=a("strong"),cao=o("mpnet"),fao=o(" \u2014 "),uP=a("a"),mao=o("MPNetTokenizer"),gao=o(" or "),bP=a("a"),hao=o("MPNetTokenizerFast"),pao=o(" (MPNet model)"),_ao=l(),gs=a("li"),Zte=a("strong"),uao=o("mt5"),bao=o(" \u2014 "),vP=a("a"),vao=o("MT5Tokenizer"),Fao=o(" or "),FP=a("a"),Tao=o("MT5TokenizerFast"),Mao=o(" (mT5 model)"),Eao=l(),hs=a("li"),eae=a("strong"),Cao=o("nystromformer"),wao=o(" \u2014 "),TP=a("a"),Aao=o("AlbertTokenizer"),yao=o(" or "),MP=a("a"),Lao=o("AlbertTokenizerFast"),xao=o(" (Nystromformer model)"),$ao=l(),ps=a("li"),oae=a("strong"),kao=o("openai-gpt"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("OpenAIGPTTokenizer"),Pao=o(" or "),CP=a("a"),Bao=o("OpenAIGPTTokenizerFast"),Iao=o(" (OpenAI GPT model)"),qao=l(),Ng=a("li"),rae=a("strong"),Nao=o("opt"),jao=o(" \u2014 "),wP=a("a"),Dao=o("GPT2Tokenizer"),Gao=o(" (OPT model)"),Oao=l(),_s=a("li"),tae=a("strong"),Vao=o("pegasus"),Xao=o(" \u2014 "),AP=a("a"),zao=o("PegasusTokenizer"),Wao=o(" or "),yP=a("a"),Qao=o("PegasusTokenizerFast"),Hao=o(" (Pegasus model)"),Uao=l(),jg=a("li"),aae=a("strong"),Jao=o("perceiver"),Yao=o(" \u2014 "),LP=a("a"),Kao=o("PerceiverTokenizer"),Zao=o(" (Perceiver model)"),eno=l(),Dg=a("li"),nae=a("strong"),ono=o("phobert"),rno=o(" \u2014 "),xP=a("a"),tno=o("PhobertTokenizer"),ano=o(" (PhoBERT model)"),nno=l(),Gg=a("li"),sae=a("strong"),sno=o("plbart"),lno=o(" \u2014 "),$P=a("a"),ino=o("PLBartTokenizer"),dno=o(" (PLBart model)"),cno=l(),Og=a("li"),lae=a("strong"),fno=o("prophetnet"),mno=o(" \u2014 "),kP=a("a"),gno=o("ProphetNetTokenizer"),hno=o(" (ProphetNet model)"),pno=l(),us=a("li"),iae=a("strong"),_no=o("qdqbert"),uno=o(" \u2014 "),SP=a("a"),bno=o("BertTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("BertTokenizerFast"),Tno=o(" (QDQBert model)"),Mno=l(),Vg=a("li"),dae=a("strong"),Eno=o("rag"),Cno=o(" \u2014 "),PP=a("a"),wno=o("RagTokenizer"),Ano=o(" (RAG model)"),yno=l(),bs=a("li"),cae=a("strong"),Lno=o("realm"),xno=o(" \u2014 "),BP=a("a"),$no=o("RealmTokenizer"),kno=o(" or "),IP=a("a"),Sno=o("RealmTokenizerFast"),Rno=o(" (Realm model)"),Pno=l(),vs=a("li"),fae=a("strong"),Bno=o("reformer"),Ino=o(" \u2014 "),qP=a("a"),qno=o("ReformerTokenizer"),Nno=o(" or "),NP=a("a"),jno=o("ReformerTokenizerFast"),Dno=o(" (Reformer model)"),Gno=l(),Fs=a("li"),mae=a("strong"),Ono=o("rembert"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("RemBertTokenizer"),zno=o(" or "),DP=a("a"),Wno=o("RemBertTokenizerFast"),Qno=o(" (RemBERT model)"),Hno=l(),Ts=a("li"),gae=a("strong"),Uno=o("retribert"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("RetriBertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("RetriBertTokenizerFast"),eso=o(" (RetriBERT model)"),oso=l(),Ms=a("li"),hae=a("strong"),rso=o("roberta"),tso=o(" \u2014 "),VP=a("a"),aso=o("RobertaTokenizer"),nso=o(" or "),XP=a("a"),sso=o("RobertaTokenizerFast"),lso=o(" (RoBERTa model)"),iso=l(),Es=a("li"),pae=a("strong"),dso=o("roformer"),cso=o(" \u2014 "),zP=a("a"),fso=o("RoFormerTokenizer"),mso=o(" or "),WP=a("a"),gso=o("RoFormerTokenizerFast"),hso=o(" (RoFormer model)"),pso=l(),Xg=a("li"),_ae=a("strong"),_so=o("speech_to_text"),uso=o(" \u2014 "),QP=a("a"),bso=o("Speech2TextTokenizer"),vso=o(" (Speech2Text model)"),Fso=l(),zg=a("li"),uae=a("strong"),Tso=o("speech_to_text_2"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("Speech2Text2Tokenizer"),Cso=o(" (Speech2Text2 model)"),wso=l(),Cs=a("li"),bae=a("strong"),Aso=o("splinter"),yso=o(" \u2014 "),UP=a("a"),Lso=o("SplinterTokenizer"),xso=o(" or "),JP=a("a"),$so=o("SplinterTokenizerFast"),kso=o(" (Splinter model)"),Sso=l(),ws=a("li"),vae=a("strong"),Rso=o("squeezebert"),Pso=o(" \u2014 "),YP=a("a"),Bso=o("SqueezeBertTokenizer"),Iso=o(" or "),KP=a("a"),qso=o("SqueezeBertTokenizerFast"),Nso=o(" (SqueezeBERT model)"),jso=l(),As=a("li"),Fae=a("strong"),Dso=o("t5"),Gso=o(" \u2014 "),ZP=a("a"),Oso=o("T5Tokenizer"),Vso=o(" or "),eB=a("a"),Xso=o("T5TokenizerFast"),zso=o(" (T5 model)"),Wso=l(),Wg=a("li"),Tae=a("strong"),Qso=o("tapas"),Hso=o(" \u2014 "),oB=a("a"),Uso=o("TapasTokenizer"),Jso=o(" (TAPAS model)"),Yso=l(),Qg=a("li"),Mae=a("strong"),Kso=o("tapex"),Zso=o(" \u2014 "),rB=a("a"),elo=o("TapexTokenizer"),olo=o(" (TAPEX model)"),rlo=l(),Hg=a("li"),Eae=a("strong"),tlo=o("transfo-xl"),alo=o(" \u2014 "),tB=a("a"),nlo=o("TransfoXLTokenizer"),slo=o(" (Transformer-XL model)"),llo=l(),ys=a("li"),Cae=a("strong"),ilo=o("visual_bert"),dlo=o(" \u2014 "),aB=a("a"),clo=o("BertTokenizer"),flo=o(" or "),nB=a("a"),mlo=o("BertTokenizerFast"),glo=o(" (VisualBert model)"),hlo=l(),Ug=a("li"),wae=a("strong"),plo=o("wav2vec2"),_lo=o(" \u2014 "),sB=a("a"),ulo=o("Wav2Vec2CTCTokenizer"),blo=o(" (Wav2Vec2 model)"),vlo=l(),Jg=a("li"),Aae=a("strong"),Flo=o("wav2vec2-conformer"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("Wav2Vec2CTCTokenizer"),Elo=o(" (Wav2Vec2-Conformer model)"),Clo=l(),Yg=a("li"),yae=a("strong"),wlo=o("wav2vec2_phoneme"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("Wav2Vec2PhonemeCTCTokenizer"),Llo=o(" (Wav2Vec2Phoneme model)"),xlo=l(),Ls=a("li"),Lae=a("strong"),$lo=o("xglm"),klo=o(" \u2014 "),dB=a("a"),Slo=o("XGLMTokenizer"),Rlo=o(" or "),cB=a("a"),Plo=o("XGLMTokenizerFast"),Blo=o(" (XGLM model)"),Ilo=l(),Kg=a("li"),xae=a("strong"),qlo=o("xlm"),Nlo=o(" \u2014 "),fB=a("a"),jlo=o("XLMTokenizer"),Dlo=o(" (XLM model)"),Glo=l(),Zg=a("li"),$ae=a("strong"),Olo=o("xlm-prophetnet"),Vlo=o(" \u2014 "),mB=a("a"),Xlo=o("XLMProphetNetTokenizer"),zlo=o(" (XLMProphetNet model)"),Wlo=l(),xs=a("li"),kae=a("strong"),Qlo=o("xlm-roberta"),Hlo=o(" \u2014 "),gB=a("a"),Ulo=o("XLMRobertaTokenizer"),Jlo=o(" or "),hB=a("a"),Ylo=o("XLMRobertaTokenizerFast"),Klo=o(" (XLM-RoBERTa model)"),Zlo=l(),$s=a("li"),Sae=a("strong"),eio=o("xlm-roberta-xl"),oio=o(" \u2014 "),pB=a("a"),rio=o("RobertaTokenizer"),tio=o(" or "),_B=a("a"),aio=o("RobertaTokenizerFast"),nio=o(" (XLM-RoBERTa-XL model)"),sio=l(),ks=a("li"),Rae=a("strong"),lio=o("xlnet"),iio=o(" \u2014 "),uB=a("a"),dio=o("XLNetTokenizer"),cio=o(" or "),bB=a("a"),fio=o("XLNetTokenizerFast"),mio=o(" (XLNet model)"),gio=l(),Ss=a("li"),Pae=a("strong"),hio=o("yoso"),pio=o(" \u2014 "),vB=a("a"),_io=o("AlbertTokenizer"),uio=o(" or "),FB=a("a"),bio=o("AlbertTokenizerFast"),vio=o(" (YOSO model)"),Fio=l(),F(eh.$$.fragment),Tio=l(),oh=a("div"),F(k6.$$.fragment),Mio=l(),Bae=a("p"),Eio=o("Register a new tokenizer in this mapping."),Cqe=l(),Ti=a("h2"),rh=a("a"),Iae=a("span"),F(S6.$$.fragment),Cio=l(),qae=a("span"),wio=o("AutoFeatureExtractor"),wqe=l(),Ao=a("div"),F(R6.$$.fragment),Aio=l(),P6=a("p"),yio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TB=a("a"),Lio=o("AutoFeatureExtractor.from_pretrained()"),xio=o(" class method."),$io=l(),B6=a("p"),kio=o("This class cannot be instantiated directly using "),Nae=a("code"),Sio=o("__init__()"),Rio=o(" (throws an error)."),Pio=l(),He=a("div"),F(I6.$$.fragment),Bio=l(),jae=a("p"),Iio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qio=l(),ya=a("p"),Nio=o("The feature extractor class to instantiate is selected based on the "),Dae=a("code"),jio=o("model_type"),Dio=o(` property of the config object
(either passed as an argument or loaded from `),Gae=a("code"),Gio=o("pretrained_model_name_or_path"),Oio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oae=a("code"),Vio=o("pretrained_model_name_or_path"),Xio=o(":"),zio=l(),Z=a("ul"),th=a("li"),Vae=a("strong"),Wio=o("beit"),Qio=o(" \u2014 "),MB=a("a"),Hio=o("BeitFeatureExtractor"),Uio=o(" (BEiT model)"),Jio=l(),ah=a("li"),Xae=a("strong"),Yio=o("clip"),Kio=o(" \u2014 "),EB=a("a"),Zio=o("CLIPFeatureExtractor"),edo=o(" (CLIP model)"),odo=l(),nh=a("li"),zae=a("strong"),rdo=o("convnext"),tdo=o(" \u2014 "),CB=a("a"),ado=o("ConvNextFeatureExtractor"),ndo=o(" (ConvNext model)"),sdo=l(),sh=a("li"),Wae=a("strong"),ldo=o("cvt"),ido=o(" \u2014 "),wB=a("a"),ddo=o("ConvNextFeatureExtractor"),cdo=o(" (CvT model)"),fdo=l(),lh=a("li"),Qae=a("strong"),mdo=o("data2vec-audio"),gdo=o(" \u2014 "),AB=a("a"),hdo=o("Wav2Vec2FeatureExtractor"),pdo=o(" (Data2VecAudio model)"),_do=l(),ih=a("li"),Hae=a("strong"),udo=o("data2vec-vision"),bdo=o(" \u2014 "),yB=a("a"),vdo=o("BeitFeatureExtractor"),Fdo=o(" (Data2VecVision model)"),Tdo=l(),dh=a("li"),Uae=a("strong"),Mdo=o("deit"),Edo=o(" \u2014 "),LB=a("a"),Cdo=o("DeiTFeatureExtractor"),wdo=o(" (DeiT model)"),Ado=l(),ch=a("li"),Jae=a("strong"),ydo=o("detr"),Ldo=o(" \u2014 "),xB=a("a"),xdo=o("DetrFeatureExtractor"),$do=o(" (DETR model)"),kdo=l(),fh=a("li"),Yae=a("strong"),Sdo=o("dpt"),Rdo=o(" \u2014 "),$B=a("a"),Pdo=o("DPTFeatureExtractor"),Bdo=o(" (DPT model)"),Ido=l(),mh=a("li"),Kae=a("strong"),qdo=o("flava"),Ndo=o(" \u2014 "),kB=a("a"),jdo=o("FlavaFeatureExtractor"),Ddo=o(" (Flava model)"),Gdo=l(),gh=a("li"),Zae=a("strong"),Odo=o("glpn"),Vdo=o(" \u2014 "),SB=a("a"),Xdo=o("GLPNFeatureExtractor"),zdo=o(" (GLPN model)"),Wdo=l(),hh=a("li"),ene=a("strong"),Qdo=o("hubert"),Hdo=o(" \u2014 "),RB=a("a"),Udo=o("Wav2Vec2FeatureExtractor"),Jdo=o(" (Hubert model)"),Ydo=l(),ph=a("li"),one=a("strong"),Kdo=o("layoutlmv2"),Zdo=o(" \u2014 "),PB=a("a"),eco=o("LayoutLMv2FeatureExtractor"),oco=o(" (LayoutLMv2 model)"),rco=l(),_h=a("li"),rne=a("strong"),tco=o("maskformer"),aco=o(" \u2014 "),BB=a("a"),nco=o("MaskFormerFeatureExtractor"),sco=o(" (MaskFormer model)"),lco=l(),uh=a("li"),tne=a("strong"),ico=o("perceiver"),dco=o(" \u2014 "),IB=a("a"),cco=o("PerceiverFeatureExtractor"),fco=o(" (Perceiver model)"),mco=l(),bh=a("li"),ane=a("strong"),gco=o("poolformer"),hco=o(" \u2014 "),qB=a("a"),pco=o("PoolFormerFeatureExtractor"),_co=o(" (PoolFormer model)"),uco=l(),vh=a("li"),nne=a("strong"),bco=o("regnet"),vco=o(" \u2014 "),NB=a("a"),Fco=o("ConvNextFeatureExtractor"),Tco=o(" (RegNet model)"),Mco=l(),Fh=a("li"),sne=a("strong"),Eco=o("resnet"),Cco=o(" \u2014 "),jB=a("a"),wco=o("ConvNextFeatureExtractor"),Aco=o(" (ResNet model)"),yco=l(),Th=a("li"),lne=a("strong"),Lco=o("segformer"),xco=o(" \u2014 "),DB=a("a"),$co=o("SegformerFeatureExtractor"),kco=o(" (SegFormer model)"),Sco=l(),Mh=a("li"),ine=a("strong"),Rco=o("speech_to_text"),Pco=o(" \u2014 "),GB=a("a"),Bco=o("Speech2TextFeatureExtractor"),Ico=o(" (Speech2Text model)"),qco=l(),Eh=a("li"),dne=a("strong"),Nco=o("swin"),jco=o(" \u2014 "),OB=a("a"),Dco=o("ViTFeatureExtractor"),Gco=o(" (Swin model)"),Oco=l(),Ch=a("li"),cne=a("strong"),Vco=o("van"),Xco=o(" \u2014 "),VB=a("a"),zco=o("ConvNextFeatureExtractor"),Wco=o(" (VAN model)"),Qco=l(),wh=a("li"),fne=a("strong"),Hco=o("vit"),Uco=o(" \u2014 "),XB=a("a"),Jco=o("ViTFeatureExtractor"),Yco=o(" (ViT model)"),Kco=l(),Ah=a("li"),mne=a("strong"),Zco=o("vit_mae"),efo=o(" \u2014 "),zB=a("a"),ofo=o("ViTFeatureExtractor"),rfo=o(" (ViTMAE model)"),tfo=l(),yh=a("li"),gne=a("strong"),afo=o("wav2vec2"),nfo=o(" \u2014 "),WB=a("a"),sfo=o("Wav2Vec2FeatureExtractor"),lfo=o(" (Wav2Vec2 model)"),ifo=l(),Lh=a("li"),hne=a("strong"),dfo=o("wav2vec2-conformer"),cfo=o(" \u2014 "),QB=a("a"),ffo=o("Wav2Vec2FeatureExtractor"),mfo=o(" (Wav2Vec2-Conformer model)"),gfo=l(),xh=a("li"),pne=a("strong"),hfo=o("yolos"),pfo=o(" \u2014 "),HB=a("a"),_fo=o("YolosFeatureExtractor"),ufo=o(" (YOLOS model)"),bfo=l(),F($h.$$.fragment),vfo=l(),F(kh.$$.fragment),Ffo=l(),Sh=a("div"),F(q6.$$.fragment),Tfo=l(),_ne=a("p"),Mfo=o("Register a new feature extractor for this class."),Aqe=l(),Mi=a("h2"),Rh=a("a"),une=a("span"),F(N6.$$.fragment),Efo=l(),bne=a("span"),Cfo=o("AutoProcessor"),yqe=l(),yo=a("div"),F(j6.$$.fragment),wfo=l(),D6=a("p"),Afo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=a("a"),yfo=o("AutoProcessor.from_pretrained()"),Lfo=o(" class method."),xfo=l(),G6=a("p"),$fo=o("This class cannot be instantiated directly using "),vne=a("code"),kfo=o("__init__()"),Sfo=o(" (throws an error)."),Rfo=l(),Ue=a("div"),F(O6.$$.fragment),Pfo=l(),Fne=a("p"),Bfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ifo=l(),Ei=a("p"),qfo=o("The processor class to instantiate is selected based on the "),Tne=a("code"),Nfo=o("model_type"),jfo=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),Dfo=o("pretrained_model_name_or_path"),Gfo=o(" if possible):"),Ofo=l(),pe=a("ul"),Ph=a("li"),Ene=a("strong"),Vfo=o("clip"),Xfo=o(" \u2014 "),JB=a("a"),zfo=o("CLIPProcessor"),Wfo=o(" (CLIP model)"),Qfo=l(),Bh=a("li"),Cne=a("strong"),Hfo=o("flava"),Ufo=o(" \u2014 "),wne=a("code"),Jfo=o("FLAVAProcessor"),Yfo=o(" (Flava model)"),Kfo=l(),Ih=a("li"),Ane=a("strong"),Zfo=o("layoutlmv2"),emo=o(" \u2014 "),YB=a("a"),omo=o("LayoutLMv2Processor"),rmo=o(" (LayoutLMv2 model)"),tmo=l(),qh=a("li"),yne=a("strong"),amo=o("layoutxlm"),nmo=o(" \u2014 "),KB=a("a"),smo=o("LayoutXLMProcessor"),lmo=o(" (LayoutXLM model)"),imo=l(),Nh=a("li"),Lne=a("strong"),dmo=o("sew"),cmo=o(" \u2014 "),ZB=a("a"),fmo=o("Wav2Vec2Processor"),mmo=o(" (SEW model)"),gmo=l(),jh=a("li"),xne=a("strong"),hmo=o("sew-d"),pmo=o(" \u2014 "),eI=a("a"),_mo=o("Wav2Vec2Processor"),umo=o(" (SEW-D model)"),bmo=l(),Dh=a("li"),$ne=a("strong"),vmo=o("speech_to_text"),Fmo=o(" \u2014 "),oI=a("a"),Tmo=o("Speech2TextProcessor"),Mmo=o(" (Speech2Text model)"),Emo=l(),Gh=a("li"),kne=a("strong"),Cmo=o("speech_to_text_2"),wmo=o(" \u2014 "),rI=a("a"),Amo=o("Speech2Text2Processor"),ymo=o(" (Speech2Text2 model)"),Lmo=l(),Oh=a("li"),Sne=a("strong"),xmo=o("trocr"),$mo=o(" \u2014 "),tI=a("a"),kmo=o("TrOCRProcessor"),Smo=o(" (TrOCR model)"),Rmo=l(),Vh=a("li"),Rne=a("strong"),Pmo=o("unispeech"),Bmo=o(" \u2014 "),aI=a("a"),Imo=o("Wav2Vec2Processor"),qmo=o(" (UniSpeech model)"),Nmo=l(),Xh=a("li"),Pne=a("strong"),jmo=o("unispeech-sat"),Dmo=o(" \u2014 "),nI=a("a"),Gmo=o("Wav2Vec2Processor"),Omo=o(" (UniSpeechSat model)"),Vmo=l(),zh=a("li"),Bne=a("strong"),Xmo=o("vilt"),zmo=o(" \u2014 "),sI=a("a"),Wmo=o("ViltProcessor"),Qmo=o(" (ViLT model)"),Hmo=l(),Wh=a("li"),Ine=a("strong"),Umo=o("vision-text-dual-encoder"),Jmo=o(" \u2014 "),lI=a("a"),Ymo=o("VisionTextDualEncoderProcessor"),Kmo=o(" (VisionTextDualEncoder model)"),Zmo=l(),Qh=a("li"),qne=a("strong"),ego=o("wav2vec2"),ogo=o(" \u2014 "),iI=a("a"),rgo=o("Wav2Vec2Processor"),tgo=o(" (Wav2Vec2 model)"),ago=l(),Hh=a("li"),Nne=a("strong"),ngo=o("wav2vec2-conformer"),sgo=o(" \u2014 "),dI=a("a"),lgo=o("Wav2Vec2Processor"),igo=o(" (Wav2Vec2-Conformer model)"),dgo=l(),Uh=a("li"),jne=a("strong"),cgo=o("wavlm"),fgo=o(" \u2014 "),cI=a("a"),mgo=o("Wav2Vec2Processor"),ggo=o(" (WavLM model)"),hgo=l(),F(Jh.$$.fragment),pgo=l(),F(Yh.$$.fragment),_go=l(),Kh=a("div"),F(V6.$$.fragment),ugo=l(),Dne=a("p"),bgo=o("Register a new processor for this class."),Lqe=l(),Ci=a("h2"),Zh=a("a"),Gne=a("span"),F(X6.$$.fragment),vgo=l(),One=a("span"),Fgo=o("AutoModel"),xqe=l(),Lo=a("div"),F(z6.$$.fragment),Tgo=l(),wi=a("p"),Mgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fI=a("a"),Ego=o("from_pretrained()"),Cgo=o(" class method or the "),mI=a("a"),wgo=o("from_config()"),Ago=o(` class
method.`),ygo=l(),W6=a("p"),Lgo=o("This class cannot be instantiated directly using "),Vne=a("code"),xgo=o("__init__()"),$go=o(" (throws an error)."),kgo=l(),tt=a("div"),F(Q6.$$.fragment),Sgo=l(),Xne=a("p"),Rgo=o("Instantiates one of the base model classes of the library from a configuration."),Pgo=l(),Ai=a("p"),Bgo=o(`Note:
Loading a model from its configuration file does `),zne=a("strong"),Igo=o("not"),qgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=a("a"),Ngo=o("from_pretrained()"),jgo=o(" to load the model weights."),Dgo=l(),F(ep.$$.fragment),Ggo=l(),Je=a("div"),F(H6.$$.fragment),Ogo=l(),Wne=a("p"),Vgo=o("Instantiate one of the base model classes of the library from a pretrained model."),Xgo=l(),La=a("p"),zgo=o("The model class to instantiate is selected based on the "),Qne=a("code"),Wgo=o("model_type"),Qgo=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),Hgo=o("pretrained_model_name_or_path"),Ugo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=a("code"),Jgo=o("pretrained_model_name_or_path"),Ygo=o(":"),Kgo=l(),x=a("ul"),op=a("li"),Jne=a("strong"),Zgo=o("albert"),eho=o(" \u2014 "),hI=a("a"),oho=o("AlbertModel"),rho=o(" (ALBERT model)"),tho=l(),rp=a("li"),Yne=a("strong"),aho=o("bart"),nho=o(" \u2014 "),pI=a("a"),sho=o("BartModel"),lho=o(" (BART model)"),iho=l(),tp=a("li"),Kne=a("strong"),dho=o("beit"),cho=o(" \u2014 "),_I=a("a"),fho=o("BeitModel"),mho=o(" (BEiT model)"),gho=l(),ap=a("li"),Zne=a("strong"),hho=o("bert"),pho=o(" \u2014 "),uI=a("a"),_ho=o("BertModel"),uho=o(" (BERT model)"),bho=l(),np=a("li"),ese=a("strong"),vho=o("bert-generation"),Fho=o(" \u2014 "),bI=a("a"),Tho=o("BertGenerationEncoder"),Mho=o(" (Bert Generation model)"),Eho=l(),sp=a("li"),ose=a("strong"),Cho=o("big_bird"),who=o(" \u2014 "),vI=a("a"),Aho=o("BigBirdModel"),yho=o(" (BigBird model)"),Lho=l(),lp=a("li"),rse=a("strong"),xho=o("bigbird_pegasus"),$ho=o(" \u2014 "),FI=a("a"),kho=o("BigBirdPegasusModel"),Sho=o(" (BigBirdPegasus model)"),Rho=l(),ip=a("li"),tse=a("strong"),Pho=o("blenderbot"),Bho=o(" \u2014 "),TI=a("a"),Iho=o("BlenderbotModel"),qho=o(" (Blenderbot model)"),Nho=l(),dp=a("li"),ase=a("strong"),jho=o("blenderbot-small"),Dho=o(" \u2014 "),MI=a("a"),Gho=o("BlenderbotSmallModel"),Oho=o(" (BlenderbotSmall model)"),Vho=l(),cp=a("li"),nse=a("strong"),Xho=o("camembert"),zho=o(" \u2014 "),EI=a("a"),Who=o("CamembertModel"),Qho=o(" (CamemBERT model)"),Hho=l(),fp=a("li"),sse=a("strong"),Uho=o("canine"),Jho=o(" \u2014 "),CI=a("a"),Yho=o("CanineModel"),Kho=o(" (Canine model)"),Zho=l(),mp=a("li"),lse=a("strong"),epo=o("clip"),opo=o(" \u2014 "),wI=a("a"),rpo=o("CLIPModel"),tpo=o(" (CLIP model)"),apo=l(),gp=a("li"),ise=a("strong"),npo=o("convbert"),spo=o(" \u2014 "),AI=a("a"),lpo=o("ConvBertModel"),ipo=o(" (ConvBERT model)"),dpo=l(),hp=a("li"),dse=a("strong"),cpo=o("convnext"),fpo=o(" \u2014 "),yI=a("a"),mpo=o("ConvNextModel"),gpo=o(" (ConvNext model)"),hpo=l(),pp=a("li"),cse=a("strong"),ppo=o("ctrl"),_po=o(" \u2014 "),LI=a("a"),upo=o("CTRLModel"),bpo=o(" (CTRL model)"),vpo=l(),_p=a("li"),fse=a("strong"),Fpo=o("cvt"),Tpo=o(" \u2014 "),xI=a("a"),Mpo=o("CvtModel"),Epo=o(" (CvT model)"),Cpo=l(),up=a("li"),mse=a("strong"),wpo=o("data2vec-audio"),Apo=o(" \u2014 "),$I=a("a"),ypo=o("Data2VecAudioModel"),Lpo=o(" (Data2VecAudio model)"),xpo=l(),bp=a("li"),gse=a("strong"),$po=o("data2vec-text"),kpo=o(" \u2014 "),kI=a("a"),Spo=o("Data2VecTextModel"),Rpo=o(" (Data2VecText model)"),Ppo=l(),vp=a("li"),hse=a("strong"),Bpo=o("data2vec-vision"),Ipo=o(" \u2014 "),SI=a("a"),qpo=o("Data2VecVisionModel"),Npo=o(" (Data2VecVision model)"),jpo=l(),Fp=a("li"),pse=a("strong"),Dpo=o("deberta"),Gpo=o(" \u2014 "),RI=a("a"),Opo=o("DebertaModel"),Vpo=o(" (DeBERTa model)"),Xpo=l(),Tp=a("li"),_se=a("strong"),zpo=o("deberta-v2"),Wpo=o(" \u2014 "),PI=a("a"),Qpo=o("DebertaV2Model"),Hpo=o(" (DeBERTa-v2 model)"),Upo=l(),Mp=a("li"),use=a("strong"),Jpo=o("decision_transformer"),Ypo=o(" \u2014 "),BI=a("a"),Kpo=o("DecisionTransformerModel"),Zpo=o(" (Decision Transformer model)"),e_o=l(),Ep=a("li"),bse=a("strong"),o_o=o("deit"),r_o=o(" \u2014 "),II=a("a"),t_o=o("DeiTModel"),a_o=o(" (DeiT model)"),n_o=l(),Cp=a("li"),vse=a("strong"),s_o=o("detr"),l_o=o(" \u2014 "),qI=a("a"),i_o=o("DetrModel"),d_o=o(" (DETR model)"),c_o=l(),wp=a("li"),Fse=a("strong"),f_o=o("distilbert"),m_o=o(" \u2014 "),NI=a("a"),g_o=o("DistilBertModel"),h_o=o(" (DistilBERT model)"),p_o=l(),Ap=a("li"),Tse=a("strong"),__o=o("dpr"),u_o=o(" \u2014 "),jI=a("a"),b_o=o("DPRQuestionEncoder"),v_o=o(" (DPR model)"),F_o=l(),yp=a("li"),Mse=a("strong"),T_o=o("dpt"),M_o=o(" \u2014 "),DI=a("a"),E_o=o("DPTModel"),C_o=o(" (DPT model)"),w_o=l(),Lp=a("li"),Ese=a("strong"),A_o=o("electra"),y_o=o(" \u2014 "),GI=a("a"),L_o=o("ElectraModel"),x_o=o(" (ELECTRA model)"),$_o=l(),xp=a("li"),Cse=a("strong"),k_o=o("flaubert"),S_o=o(" \u2014 "),OI=a("a"),R_o=o("FlaubertModel"),P_o=o(" (FlauBERT model)"),B_o=l(),$p=a("li"),wse=a("strong"),I_o=o("flava"),q_o=o(" \u2014 "),VI=a("a"),N_o=o("FlavaModel"),j_o=o(" (Flava model)"),D_o=l(),kp=a("li"),Ase=a("strong"),G_o=o("fnet"),O_o=o(" \u2014 "),XI=a("a"),V_o=o("FNetModel"),X_o=o(" (FNet model)"),z_o=l(),Sp=a("li"),yse=a("strong"),W_o=o("fsmt"),Q_o=o(" \u2014 "),zI=a("a"),H_o=o("FSMTModel"),U_o=o(" (FairSeq Machine-Translation model)"),J_o=l(),Rs=a("li"),Lse=a("strong"),Y_o=o("funnel"),K_o=o(" \u2014 "),WI=a("a"),Z_o=o("FunnelModel"),euo=o(" or "),QI=a("a"),ouo=o("FunnelBaseModel"),ruo=o(" (Funnel Transformer model)"),tuo=l(),Rp=a("li"),xse=a("strong"),auo=o("glpn"),nuo=o(" \u2014 "),HI=a("a"),suo=o("GLPNModel"),luo=o(" (GLPN model)"),iuo=l(),Pp=a("li"),$se=a("strong"),duo=o("gpt2"),cuo=o(" \u2014 "),UI=a("a"),fuo=o("GPT2Model"),muo=o(" (OpenAI GPT-2 model)"),guo=l(),Bp=a("li"),kse=a("strong"),huo=o("gpt_neo"),puo=o(" \u2014 "),JI=a("a"),_uo=o("GPTNeoModel"),uuo=o(" (GPT Neo model)"),buo=l(),Ip=a("li"),Sse=a("strong"),vuo=o("gptj"),Fuo=o(" \u2014 "),YI=a("a"),Tuo=o("GPTJModel"),Muo=o(" (GPT-J model)"),Euo=l(),qp=a("li"),Rse=a("strong"),Cuo=o("hubert"),wuo=o(" \u2014 "),KI=a("a"),Auo=o("HubertModel"),yuo=o(" (Hubert model)"),Luo=l(),Np=a("li"),Pse=a("strong"),xuo=o("ibert"),$uo=o(" \u2014 "),ZI=a("a"),kuo=o("IBertModel"),Suo=o(" (I-BERT model)"),Ruo=l(),jp=a("li"),Bse=a("strong"),Puo=o("imagegpt"),Buo=o(" \u2014 "),eq=a("a"),Iuo=o("ImageGPTModel"),quo=o(" (ImageGPT model)"),Nuo=l(),Dp=a("li"),Ise=a("strong"),juo=o("layoutlm"),Duo=o(" \u2014 "),oq=a("a"),Guo=o("LayoutLMModel"),Ouo=o(" (LayoutLM model)"),Vuo=l(),Gp=a("li"),qse=a("strong"),Xuo=o("layoutlmv2"),zuo=o(" \u2014 "),rq=a("a"),Wuo=o("LayoutLMv2Model"),Quo=o(" (LayoutLMv2 model)"),Huo=l(),Op=a("li"),Nse=a("strong"),Uuo=o("led"),Juo=o(" \u2014 "),tq=a("a"),Yuo=o("LEDModel"),Kuo=o(" (LED model)"),Zuo=l(),Vp=a("li"),jse=a("strong"),e2o=o("longformer"),o2o=o(" \u2014 "),aq=a("a"),r2o=o("LongformerModel"),t2o=o(" (Longformer model)"),a2o=l(),Xp=a("li"),Dse=a("strong"),n2o=o("luke"),s2o=o(" \u2014 "),nq=a("a"),l2o=o("LukeModel"),i2o=o(" (LUKE model)"),d2o=l(),zp=a("li"),Gse=a("strong"),c2o=o("lxmert"),f2o=o(" \u2014 "),sq=a("a"),m2o=o("LxmertModel"),g2o=o(" (LXMERT model)"),h2o=l(),Wp=a("li"),Ose=a("strong"),p2o=o("m2m_100"),_2o=o(" \u2014 "),lq=a("a"),u2o=o("M2M100Model"),b2o=o(" (M2M100 model)"),v2o=l(),Qp=a("li"),Vse=a("strong"),F2o=o("marian"),T2o=o(" \u2014 "),iq=a("a"),M2o=o("MarianModel"),E2o=o(" (Marian model)"),C2o=l(),Hp=a("li"),Xse=a("strong"),w2o=o("maskformer"),A2o=o(" \u2014 "),dq=a("a"),y2o=o("MaskFormerModel"),L2o=o(" (MaskFormer model)"),x2o=l(),Up=a("li"),zse=a("strong"),$2o=o("mbart"),k2o=o(" \u2014 "),cq=a("a"),S2o=o("MBartModel"),R2o=o(" (mBART model)"),P2o=l(),Jp=a("li"),Wse=a("strong"),B2o=o("megatron-bert"),I2o=o(" \u2014 "),fq=a("a"),q2o=o("MegatronBertModel"),N2o=o(" (MegatronBert model)"),j2o=l(),Yp=a("li"),Qse=a("strong"),D2o=o("mobilebert"),G2o=o(" \u2014 "),mq=a("a"),O2o=o("MobileBertModel"),V2o=o(" (MobileBERT model)"),X2o=l(),Kp=a("li"),Hse=a("strong"),z2o=o("mpnet"),W2o=o(" \u2014 "),gq=a("a"),Q2o=o("MPNetModel"),H2o=o(" (MPNet model)"),U2o=l(),Zp=a("li"),Use=a("strong"),J2o=o("mt5"),Y2o=o(" \u2014 "),hq=a("a"),K2o=o("MT5Model"),Z2o=o(" (mT5 model)"),e1o=l(),e_=a("li"),Jse=a("strong"),o1o=o("nystromformer"),r1o=o(" \u2014 "),pq=a("a"),t1o=o("NystromformerModel"),a1o=o(" (Nystromformer model)"),n1o=l(),o_=a("li"),Yse=a("strong"),s1o=o("openai-gpt"),l1o=o(" \u2014 "),_q=a("a"),i1o=o("OpenAIGPTModel"),d1o=o(" (OpenAI GPT model)"),c1o=l(),r_=a("li"),Kse=a("strong"),f1o=o("opt"),m1o=o(" \u2014 "),uq=a("a"),g1o=o("OPTModel"),h1o=o(" (OPT model)"),p1o=l(),t_=a("li"),Zse=a("strong"),_1o=o("pegasus"),u1o=o(" \u2014 "),bq=a("a"),b1o=o("PegasusModel"),v1o=o(" (Pegasus model)"),F1o=l(),a_=a("li"),ele=a("strong"),T1o=o("perceiver"),M1o=o(" \u2014 "),vq=a("a"),E1o=o("PerceiverModel"),C1o=o(" (Perceiver model)"),w1o=l(),n_=a("li"),ole=a("strong"),A1o=o("plbart"),y1o=o(" \u2014 "),Fq=a("a"),L1o=o("PLBartModel"),x1o=o(" (PLBart model)"),$1o=l(),s_=a("li"),rle=a("strong"),k1o=o("poolformer"),S1o=o(" \u2014 "),Tq=a("a"),R1o=o("PoolFormerModel"),P1o=o(" (PoolFormer model)"),B1o=l(),l_=a("li"),tle=a("strong"),I1o=o("prophetnet"),q1o=o(" \u2014 "),Mq=a("a"),N1o=o("ProphetNetModel"),j1o=o(" (ProphetNet model)"),D1o=l(),i_=a("li"),ale=a("strong"),G1o=o("qdqbert"),O1o=o(" \u2014 "),Eq=a("a"),V1o=o("QDQBertModel"),X1o=o(" (QDQBert model)"),z1o=l(),d_=a("li"),nle=a("strong"),W1o=o("reformer"),Q1o=o(" \u2014 "),Cq=a("a"),H1o=o("ReformerModel"),U1o=o(" (Reformer model)"),J1o=l(),c_=a("li"),sle=a("strong"),Y1o=o("regnet"),K1o=o(" \u2014 "),wq=a("a"),Z1o=o("RegNetModel"),e7o=o(" (RegNet model)"),o7o=l(),f_=a("li"),lle=a("strong"),r7o=o("rembert"),t7o=o(" \u2014 "),Aq=a("a"),a7o=o("RemBertModel"),n7o=o(" (RemBERT model)"),s7o=l(),m_=a("li"),ile=a("strong"),l7o=o("resnet"),i7o=o(" \u2014 "),yq=a("a"),d7o=o("ResNetModel"),c7o=o(" (ResNet model)"),f7o=l(),g_=a("li"),dle=a("strong"),m7o=o("retribert"),g7o=o(" \u2014 "),Lq=a("a"),h7o=o("RetriBertModel"),p7o=o(" (RetriBERT model)"),_7o=l(),h_=a("li"),cle=a("strong"),u7o=o("roberta"),b7o=o(" \u2014 "),xq=a("a"),v7o=o("RobertaModel"),F7o=o(" (RoBERTa model)"),T7o=l(),p_=a("li"),fle=a("strong"),M7o=o("roformer"),E7o=o(" \u2014 "),$q=a("a"),C7o=o("RoFormerModel"),w7o=o(" (RoFormer model)"),A7o=l(),__=a("li"),mle=a("strong"),y7o=o("segformer"),L7o=o(" \u2014 "),kq=a("a"),x7o=o("SegformerModel"),$7o=o(" (SegFormer model)"),k7o=l(),u_=a("li"),gle=a("strong"),S7o=o("sew"),R7o=o(" \u2014 "),Sq=a("a"),P7o=o("SEWModel"),B7o=o(" (SEW model)"),I7o=l(),b_=a("li"),hle=a("strong"),q7o=o("sew-d"),N7o=o(" \u2014 "),Rq=a("a"),j7o=o("SEWDModel"),D7o=o(" (SEW-D model)"),G7o=l(),v_=a("li"),ple=a("strong"),O7o=o("speech_to_text"),V7o=o(" \u2014 "),Pq=a("a"),X7o=o("Speech2TextModel"),z7o=o(" (Speech2Text model)"),W7o=l(),F_=a("li"),_le=a("strong"),Q7o=o("splinter"),H7o=o(" \u2014 "),Bq=a("a"),U7o=o("SplinterModel"),J7o=o(" (Splinter model)"),Y7o=l(),T_=a("li"),ule=a("strong"),K7o=o("squeezebert"),Z7o=o(" \u2014 "),Iq=a("a"),ebo=o("SqueezeBertModel"),obo=o(" (SqueezeBERT model)"),rbo=l(),M_=a("li"),ble=a("strong"),tbo=o("swin"),abo=o(" \u2014 "),qq=a("a"),nbo=o("SwinModel"),sbo=o(" (Swin model)"),lbo=l(),E_=a("li"),vle=a("strong"),ibo=o("t5"),dbo=o(" \u2014 "),Nq=a("a"),cbo=o("T5Model"),fbo=o(" (T5 model)"),mbo=l(),C_=a("li"),Fle=a("strong"),gbo=o("tapas"),hbo=o(" \u2014 "),jq=a("a"),pbo=o("TapasModel"),_bo=o(" (TAPAS model)"),ubo=l(),w_=a("li"),Tle=a("strong"),bbo=o("trajectory_transformer"),vbo=o(" \u2014 "),Dq=a("a"),Fbo=o("TrajectoryTransformerModel"),Tbo=o(" (Trajectory Transformer model)"),Mbo=l(),A_=a("li"),Mle=a("strong"),Ebo=o("transfo-xl"),Cbo=o(" \u2014 "),Gq=a("a"),wbo=o("TransfoXLModel"),Abo=o(" (Transformer-XL model)"),ybo=l(),y_=a("li"),Ele=a("strong"),Lbo=o("unispeech"),xbo=o(" \u2014 "),Oq=a("a"),$bo=o("UniSpeechModel"),kbo=o(" (UniSpeech model)"),Sbo=l(),L_=a("li"),Cle=a("strong"),Rbo=o("unispeech-sat"),Pbo=o(" \u2014 "),Vq=a("a"),Bbo=o("UniSpeechSatModel"),Ibo=o(" (UniSpeechSat model)"),qbo=l(),x_=a("li"),wle=a("strong"),Nbo=o("van"),jbo=o(" \u2014 "),Xq=a("a"),Dbo=o("VanModel"),Gbo=o(" (VAN model)"),Obo=l(),$_=a("li"),Ale=a("strong"),Vbo=o("vilt"),Xbo=o(" \u2014 "),zq=a("a"),zbo=o("ViltModel"),Wbo=o(" (ViLT model)"),Qbo=l(),k_=a("li"),yle=a("strong"),Hbo=o("vision-text-dual-encoder"),Ubo=o(" \u2014 "),Wq=a("a"),Jbo=o("VisionTextDualEncoderModel"),Ybo=o(" (VisionTextDualEncoder model)"),Kbo=l(),S_=a("li"),Lle=a("strong"),Zbo=o("visual_bert"),evo=o(" \u2014 "),Qq=a("a"),ovo=o("VisualBertModel"),rvo=o(" (VisualBert model)"),tvo=l(),R_=a("li"),xle=a("strong"),avo=o("vit"),nvo=o(" \u2014 "),Hq=a("a"),svo=o("ViTModel"),lvo=o(" (ViT model)"),ivo=l(),P_=a("li"),$le=a("strong"),dvo=o("vit_mae"),cvo=o(" \u2014 "),Uq=a("a"),fvo=o("ViTMAEModel"),mvo=o(" (ViTMAE model)"),gvo=l(),B_=a("li"),kle=a("strong"),hvo=o("wav2vec2"),pvo=o(" \u2014 "),Jq=a("a"),_vo=o("Wav2Vec2Model"),uvo=o(" (Wav2Vec2 model)"),bvo=l(),I_=a("li"),Sle=a("strong"),vvo=o("wav2vec2-conformer"),Fvo=o(" \u2014 "),Yq=a("a"),Tvo=o("Wav2Vec2ConformerModel"),Mvo=o(" (Wav2Vec2-Conformer model)"),Evo=l(),q_=a("li"),Rle=a("strong"),Cvo=o("wavlm"),wvo=o(" \u2014 "),Kq=a("a"),Avo=o("WavLMModel"),yvo=o(" (WavLM model)"),Lvo=l(),N_=a("li"),Ple=a("strong"),xvo=o("xglm"),$vo=o(" \u2014 "),Zq=a("a"),kvo=o("XGLMModel"),Svo=o(" (XGLM model)"),Rvo=l(),j_=a("li"),Ble=a("strong"),Pvo=o("xlm"),Bvo=o(" \u2014 "),eN=a("a"),Ivo=o("XLMModel"),qvo=o(" (XLM model)"),Nvo=l(),D_=a("li"),Ile=a("strong"),jvo=o("xlm-prophetnet"),Dvo=o(" \u2014 "),oN=a("a"),Gvo=o("XLMProphetNetModel"),Ovo=o(" (XLMProphetNet model)"),Vvo=l(),G_=a("li"),qle=a("strong"),Xvo=o("xlm-roberta"),zvo=o(" \u2014 "),rN=a("a"),Wvo=o("XLMRobertaModel"),Qvo=o(" (XLM-RoBERTa model)"),Hvo=l(),O_=a("li"),Nle=a("strong"),Uvo=o("xlm-roberta-xl"),Jvo=o(" \u2014 "),tN=a("a"),Yvo=o("XLMRobertaXLModel"),Kvo=o(" (XLM-RoBERTa-XL model)"),Zvo=l(),V_=a("li"),jle=a("strong"),eFo=o("xlnet"),oFo=o(" \u2014 "),aN=a("a"),rFo=o("XLNetModel"),tFo=o(" (XLNet model)"),aFo=l(),X_=a("li"),Dle=a("strong"),nFo=o("yolos"),sFo=o(" \u2014 "),nN=a("a"),lFo=o("YolosModel"),iFo=o(" (YOLOS model)"),dFo=l(),z_=a("li"),Gle=a("strong"),cFo=o("yoso"),fFo=o(" \u2014 "),sN=a("a"),mFo=o("YosoModel"),gFo=o(" (YOSO model)"),hFo=l(),W_=a("p"),pFo=o("The model is set in evaluation mode by default using "),Ole=a("code"),_Fo=o("model.eval()"),uFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vle=a("code"),bFo=o("model.train()"),vFo=l(),F(Q_.$$.fragment),$qe=l(),yi=a("h2"),H_=a("a"),Xle=a("span"),F(U6.$$.fragment),FFo=l(),zle=a("span"),TFo=o("AutoModelForPreTraining"),kqe=l(),xo=a("div"),F(J6.$$.fragment),MFo=l(),Li=a("p"),EFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lN=a("a"),CFo=o("from_pretrained()"),wFo=o(" class method or the "),iN=a("a"),AFo=o("from_config()"),yFo=o(` class
method.`),LFo=l(),Y6=a("p"),xFo=o("This class cannot be instantiated directly using "),Wle=a("code"),$Fo=o("__init__()"),kFo=o(" (throws an error)."),SFo=l(),at=a("div"),F(K6.$$.fragment),RFo=l(),Qle=a("p"),PFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BFo=l(),xi=a("p"),IFo=o(`Note:
Loading a model from its configuration file does `),Hle=a("strong"),qFo=o("not"),NFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),jFo=o("from_pretrained()"),DFo=o(" to load the model weights."),GFo=l(),F(U_.$$.fragment),OFo=l(),Ye=a("div"),F(Z6.$$.fragment),VFo=l(),Ule=a("p"),XFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zFo=l(),xa=a("p"),WFo=o("The model class to instantiate is selected based on the "),Jle=a("code"),QFo=o("model_type"),HFo=o(` property of the config object (either
passed as an argument or loaded from `),Yle=a("code"),UFo=o("pretrained_model_name_or_path"),JFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(":"),ZFo=l(),G=a("ul"),J_=a("li"),Zle=a("strong"),eTo=o("albert"),oTo=o(" \u2014 "),cN=a("a"),rTo=o("AlbertForPreTraining"),tTo=o(" (ALBERT model)"),aTo=l(),Y_=a("li"),eie=a("strong"),nTo=o("bart"),sTo=o(" \u2014 "),fN=a("a"),lTo=o("BartForConditionalGeneration"),iTo=o(" (BART model)"),dTo=l(),K_=a("li"),oie=a("strong"),cTo=o("bert"),fTo=o(" \u2014 "),mN=a("a"),mTo=o("BertForPreTraining"),gTo=o(" (BERT model)"),hTo=l(),Z_=a("li"),rie=a("strong"),pTo=o("big_bird"),_To=o(" \u2014 "),gN=a("a"),uTo=o("BigBirdForPreTraining"),bTo=o(" (BigBird model)"),vTo=l(),eu=a("li"),tie=a("strong"),FTo=o("camembert"),TTo=o(" \u2014 "),hN=a("a"),MTo=o("CamembertForMaskedLM"),ETo=o(" (CamemBERT model)"),CTo=l(),ou=a("li"),aie=a("strong"),wTo=o("ctrl"),ATo=o(" \u2014 "),pN=a("a"),yTo=o("CTRLLMHeadModel"),LTo=o(" (CTRL model)"),xTo=l(),ru=a("li"),nie=a("strong"),$To=o("data2vec-text"),kTo=o(" \u2014 "),_N=a("a"),STo=o("Data2VecTextForMaskedLM"),RTo=o(" (Data2VecText model)"),PTo=l(),tu=a("li"),sie=a("strong"),BTo=o("deberta"),ITo=o(" \u2014 "),uN=a("a"),qTo=o("DebertaForMaskedLM"),NTo=o(" (DeBERTa model)"),jTo=l(),au=a("li"),lie=a("strong"),DTo=o("deberta-v2"),GTo=o(" \u2014 "),bN=a("a"),OTo=o("DebertaV2ForMaskedLM"),VTo=o(" (DeBERTa-v2 model)"),XTo=l(),nu=a("li"),iie=a("strong"),zTo=o("distilbert"),WTo=o(" \u2014 "),vN=a("a"),QTo=o("DistilBertForMaskedLM"),HTo=o(" (DistilBERT model)"),UTo=l(),su=a("li"),die=a("strong"),JTo=o("electra"),YTo=o(" \u2014 "),FN=a("a"),KTo=o("ElectraForPreTraining"),ZTo=o(" (ELECTRA model)"),eMo=l(),lu=a("li"),cie=a("strong"),oMo=o("flaubert"),rMo=o(" \u2014 "),TN=a("a"),tMo=o("FlaubertWithLMHeadModel"),aMo=o(" (FlauBERT model)"),nMo=l(),iu=a("li"),fie=a("strong"),sMo=o("flava"),lMo=o(" \u2014 "),MN=a("a"),iMo=o("FlavaForPreTraining"),dMo=o(" (Flava model)"),cMo=l(),du=a("li"),mie=a("strong"),fMo=o("fnet"),mMo=o(" \u2014 "),EN=a("a"),gMo=o("FNetForPreTraining"),hMo=o(" (FNet model)"),pMo=l(),cu=a("li"),gie=a("strong"),_Mo=o("fsmt"),uMo=o(" \u2014 "),CN=a("a"),bMo=o("FSMTForConditionalGeneration"),vMo=o(" (FairSeq Machine-Translation model)"),FMo=l(),fu=a("li"),hie=a("strong"),TMo=o("funnel"),MMo=o(" \u2014 "),wN=a("a"),EMo=o("FunnelForPreTraining"),CMo=o(" (Funnel Transformer model)"),wMo=l(),mu=a("li"),pie=a("strong"),AMo=o("gpt2"),yMo=o(" \u2014 "),AN=a("a"),LMo=o("GPT2LMHeadModel"),xMo=o(" (OpenAI GPT-2 model)"),$Mo=l(),gu=a("li"),_ie=a("strong"),kMo=o("ibert"),SMo=o(" \u2014 "),yN=a("a"),RMo=o("IBertForMaskedLM"),PMo=o(" (I-BERT model)"),BMo=l(),hu=a("li"),uie=a("strong"),IMo=o("layoutlm"),qMo=o(" \u2014 "),LN=a("a"),NMo=o("LayoutLMForMaskedLM"),jMo=o(" (LayoutLM model)"),DMo=l(),pu=a("li"),bie=a("strong"),GMo=o("longformer"),OMo=o(" \u2014 "),xN=a("a"),VMo=o("LongformerForMaskedLM"),XMo=o(" (Longformer model)"),zMo=l(),_u=a("li"),vie=a("strong"),WMo=o("lxmert"),QMo=o(" \u2014 "),$N=a("a"),HMo=o("LxmertForPreTraining"),UMo=o(" (LXMERT model)"),JMo=l(),uu=a("li"),Fie=a("strong"),YMo=o("megatron-bert"),KMo=o(" \u2014 "),kN=a("a"),ZMo=o("MegatronBertForPreTraining"),e4o=o(" (MegatronBert model)"),o4o=l(),bu=a("li"),Tie=a("strong"),r4o=o("mobilebert"),t4o=o(" \u2014 "),SN=a("a"),a4o=o("MobileBertForPreTraining"),n4o=o(" (MobileBERT model)"),s4o=l(),vu=a("li"),Mie=a("strong"),l4o=o("mpnet"),i4o=o(" \u2014 "),RN=a("a"),d4o=o("MPNetForMaskedLM"),c4o=o(" (MPNet model)"),f4o=l(),Fu=a("li"),Eie=a("strong"),m4o=o("openai-gpt"),g4o=o(" \u2014 "),PN=a("a"),h4o=o("OpenAIGPTLMHeadModel"),p4o=o(" (OpenAI GPT model)"),_4o=l(),Tu=a("li"),Cie=a("strong"),u4o=o("retribert"),b4o=o(" \u2014 "),BN=a("a"),v4o=o("RetriBertModel"),F4o=o(" (RetriBERT model)"),T4o=l(),Mu=a("li"),wie=a("strong"),M4o=o("roberta"),E4o=o(" \u2014 "),IN=a("a"),C4o=o("RobertaForMaskedLM"),w4o=o(" (RoBERTa model)"),A4o=l(),Eu=a("li"),Aie=a("strong"),y4o=o("splinter"),L4o=o(" \u2014 "),qN=a("a"),x4o=o("SplinterForPreTraining"),$4o=o(" (Splinter model)"),k4o=l(),Cu=a("li"),yie=a("strong"),S4o=o("squeezebert"),R4o=o(" \u2014 "),NN=a("a"),P4o=o("SqueezeBertForMaskedLM"),B4o=o(" (SqueezeBERT model)"),I4o=l(),wu=a("li"),Lie=a("strong"),q4o=o("t5"),N4o=o(" \u2014 "),jN=a("a"),j4o=o("T5ForConditionalGeneration"),D4o=o(" (T5 model)"),G4o=l(),Au=a("li"),xie=a("strong"),O4o=o("tapas"),V4o=o(" \u2014 "),DN=a("a"),X4o=o("TapasForMaskedLM"),z4o=o(" (TAPAS model)"),W4o=l(),yu=a("li"),$ie=a("strong"),Q4o=o("transfo-xl"),H4o=o(" \u2014 "),GN=a("a"),U4o=o("TransfoXLLMHeadModel"),J4o=o(" (Transformer-XL model)"),Y4o=l(),Lu=a("li"),kie=a("strong"),K4o=o("unispeech"),Z4o=o(" \u2014 "),ON=a("a"),eEo=o("UniSpeechForPreTraining"),oEo=o(" (UniSpeech model)"),rEo=l(),xu=a("li"),Sie=a("strong"),tEo=o("unispeech-sat"),aEo=o(" \u2014 "),VN=a("a"),nEo=o("UniSpeechSatForPreTraining"),sEo=o(" (UniSpeechSat model)"),lEo=l(),$u=a("li"),Rie=a("strong"),iEo=o("visual_bert"),dEo=o(" \u2014 "),XN=a("a"),cEo=o("VisualBertForPreTraining"),fEo=o(" (VisualBert model)"),mEo=l(),ku=a("li"),Pie=a("strong"),gEo=o("vit_mae"),hEo=o(" \u2014 "),zN=a("a"),pEo=o("ViTMAEForPreTraining"),_Eo=o(" (ViTMAE model)"),uEo=l(),Su=a("li"),Bie=a("strong"),bEo=o("wav2vec2"),vEo=o(" \u2014 "),WN=a("a"),FEo=o("Wav2Vec2ForPreTraining"),TEo=o(" (Wav2Vec2 model)"),MEo=l(),Ru=a("li"),Iie=a("strong"),EEo=o("wav2vec2-conformer"),CEo=o(" \u2014 "),QN=a("a"),wEo=o("Wav2Vec2ConformerForPreTraining"),AEo=o(" (Wav2Vec2-Conformer model)"),yEo=l(),Pu=a("li"),qie=a("strong"),LEo=o("xlm"),xEo=o(" \u2014 "),HN=a("a"),$Eo=o("XLMWithLMHeadModel"),kEo=o(" (XLM model)"),SEo=l(),Bu=a("li"),Nie=a("strong"),REo=o("xlm-roberta"),PEo=o(" \u2014 "),UN=a("a"),BEo=o("XLMRobertaForMaskedLM"),IEo=o(" (XLM-RoBERTa model)"),qEo=l(),Iu=a("li"),jie=a("strong"),NEo=o("xlm-roberta-xl"),jEo=o(" \u2014 "),JN=a("a"),DEo=o("XLMRobertaXLForMaskedLM"),GEo=o(" (XLM-RoBERTa-XL model)"),OEo=l(),qu=a("li"),Die=a("strong"),VEo=o("xlnet"),XEo=o(" \u2014 "),YN=a("a"),zEo=o("XLNetLMHeadModel"),WEo=o(" (XLNet model)"),QEo=l(),Nu=a("p"),HEo=o("The model is set in evaluation mode by default using "),Gie=a("code"),UEo=o("model.eval()"),JEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=a("code"),YEo=o("model.train()"),KEo=l(),F(ju.$$.fragment),Sqe=l(),$i=a("h2"),Du=a("a"),Vie=a("span"),F(ey.$$.fragment),ZEo=l(),Xie=a("span"),eCo=o("AutoModelForCausalLM"),Rqe=l(),$o=a("div"),F(oy.$$.fragment),oCo=l(),ki=a("p"),rCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KN=a("a"),tCo=o("from_pretrained()"),aCo=o(" class method or the "),ZN=a("a"),nCo=o("from_config()"),sCo=o(` class
method.`),lCo=l(),ry=a("p"),iCo=o("This class cannot be instantiated directly using "),zie=a("code"),dCo=o("__init__()"),cCo=o(" (throws an error)."),fCo=l(),nt=a("div"),F(ty.$$.fragment),mCo=l(),Wie=a("p"),gCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hCo=l(),Si=a("p"),pCo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),_Co=o("not"),uCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),bCo=o("from_pretrained()"),vCo=o(" to load the model weights."),FCo=l(),F(Gu.$$.fragment),TCo=l(),Ke=a("div"),F(ay.$$.fragment),MCo=l(),Hie=a("p"),ECo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CCo=l(),$a=a("p"),wCo=o("The model class to instantiate is selected based on the "),Uie=a("code"),ACo=o("model_type"),yCo=o(` property of the config object (either
passed as an argument or loaded from `),Jie=a("code"),LCo=o("pretrained_model_name_or_path"),xCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=a("code"),$Co=o("pretrained_model_name_or_path"),kCo=o(":"),SCo=l(),z=a("ul"),Ou=a("li"),Kie=a("strong"),RCo=o("bart"),PCo=o(" \u2014 "),oj=a("a"),BCo=o("BartForCausalLM"),ICo=o(" (BART model)"),qCo=l(),Vu=a("li"),Zie=a("strong"),NCo=o("bert"),jCo=o(" \u2014 "),rj=a("a"),DCo=o("BertLMHeadModel"),GCo=o(" (BERT model)"),OCo=l(),Xu=a("li"),ede=a("strong"),VCo=o("bert-generation"),XCo=o(" \u2014 "),tj=a("a"),zCo=o("BertGenerationDecoder"),WCo=o(" (Bert Generation model)"),QCo=l(),zu=a("li"),ode=a("strong"),HCo=o("big_bird"),UCo=o(" \u2014 "),aj=a("a"),JCo=o("BigBirdForCausalLM"),YCo=o(" (BigBird model)"),KCo=l(),Wu=a("li"),rde=a("strong"),ZCo=o("bigbird_pegasus"),e5o=o(" \u2014 "),nj=a("a"),o5o=o("BigBirdPegasusForCausalLM"),r5o=o(" (BigBirdPegasus model)"),t5o=l(),Qu=a("li"),tde=a("strong"),a5o=o("blenderbot"),n5o=o(" \u2014 "),sj=a("a"),s5o=o("BlenderbotForCausalLM"),l5o=o(" (Blenderbot model)"),i5o=l(),Hu=a("li"),ade=a("strong"),d5o=o("blenderbot-small"),c5o=o(" \u2014 "),lj=a("a"),f5o=o("BlenderbotSmallForCausalLM"),m5o=o(" (BlenderbotSmall model)"),g5o=l(),Uu=a("li"),nde=a("strong"),h5o=o("camembert"),p5o=o(" \u2014 "),ij=a("a"),_5o=o("CamembertForCausalLM"),u5o=o(" (CamemBERT model)"),b5o=l(),Ju=a("li"),sde=a("strong"),v5o=o("ctrl"),F5o=o(" \u2014 "),dj=a("a"),T5o=o("CTRLLMHeadModel"),M5o=o(" (CTRL model)"),E5o=l(),Yu=a("li"),lde=a("strong"),C5o=o("data2vec-text"),w5o=o(" \u2014 "),cj=a("a"),A5o=o("Data2VecTextForCausalLM"),y5o=o(" (Data2VecText model)"),L5o=l(),Ku=a("li"),ide=a("strong"),x5o=o("electra"),$5o=o(" \u2014 "),fj=a("a"),k5o=o("ElectraForCausalLM"),S5o=o(" (ELECTRA model)"),R5o=l(),Zu=a("li"),dde=a("strong"),P5o=o("gpt2"),B5o=o(" \u2014 "),mj=a("a"),I5o=o("GPT2LMHeadModel"),q5o=o(" (OpenAI GPT-2 model)"),N5o=l(),e2=a("li"),cde=a("strong"),j5o=o("gpt_neo"),D5o=o(" \u2014 "),gj=a("a"),G5o=o("GPTNeoForCausalLM"),O5o=o(" (GPT Neo model)"),V5o=l(),o2=a("li"),fde=a("strong"),X5o=o("gptj"),z5o=o(" \u2014 "),hj=a("a"),W5o=o("GPTJForCausalLM"),Q5o=o(" (GPT-J model)"),H5o=l(),r2=a("li"),mde=a("strong"),U5o=o("marian"),J5o=o(" \u2014 "),pj=a("a"),Y5o=o("MarianForCausalLM"),K5o=o(" (Marian model)"),Z5o=l(),t2=a("li"),gde=a("strong"),e3o=o("mbart"),o3o=o(" \u2014 "),_j=a("a"),r3o=o("MBartForCausalLM"),t3o=o(" (mBART model)"),a3o=l(),a2=a("li"),hde=a("strong"),n3o=o("megatron-bert"),s3o=o(" \u2014 "),uj=a("a"),l3o=o("MegatronBertForCausalLM"),i3o=o(" (MegatronBert model)"),d3o=l(),n2=a("li"),pde=a("strong"),c3o=o("openai-gpt"),f3o=o(" \u2014 "),bj=a("a"),m3o=o("OpenAIGPTLMHeadModel"),g3o=o(" (OpenAI GPT model)"),h3o=l(),s2=a("li"),_de=a("strong"),p3o=o("opt"),_3o=o(" \u2014 "),vj=a("a"),u3o=o("OPTForCausalLM"),b3o=o(" (OPT model)"),v3o=l(),l2=a("li"),ude=a("strong"),F3o=o("pegasus"),T3o=o(" \u2014 "),Fj=a("a"),M3o=o("PegasusForCausalLM"),E3o=o(" (Pegasus model)"),C3o=l(),i2=a("li"),bde=a("strong"),w3o=o("plbart"),A3o=o(" \u2014 "),Tj=a("a"),y3o=o("PLBartForCausalLM"),L3o=o(" (PLBart model)"),x3o=l(),d2=a("li"),vde=a("strong"),$3o=o("prophetnet"),k3o=o(" \u2014 "),Mj=a("a"),S3o=o("ProphetNetForCausalLM"),R3o=o(" (ProphetNet model)"),P3o=l(),c2=a("li"),Fde=a("strong"),B3o=o("qdqbert"),I3o=o(" \u2014 "),Ej=a("a"),q3o=o("QDQBertLMHeadModel"),N3o=o(" (QDQBert model)"),j3o=l(),f2=a("li"),Tde=a("strong"),D3o=o("reformer"),G3o=o(" \u2014 "),Cj=a("a"),O3o=o("ReformerModelWithLMHead"),V3o=o(" (Reformer model)"),X3o=l(),m2=a("li"),Mde=a("strong"),z3o=o("rembert"),W3o=o(" \u2014 "),wj=a("a"),Q3o=o("RemBertForCausalLM"),H3o=o(" (RemBERT model)"),U3o=l(),g2=a("li"),Ede=a("strong"),J3o=o("roberta"),Y3o=o(" \u2014 "),Aj=a("a"),K3o=o("RobertaForCausalLM"),Z3o=o(" (RoBERTa model)"),ewo=l(),h2=a("li"),Cde=a("strong"),owo=o("roformer"),rwo=o(" \u2014 "),yj=a("a"),two=o("RoFormerForCausalLM"),awo=o(" (RoFormer model)"),nwo=l(),p2=a("li"),wde=a("strong"),swo=o("speech_to_text_2"),lwo=o(" \u2014 "),Lj=a("a"),iwo=o("Speech2Text2ForCausalLM"),dwo=o(" (Speech2Text2 model)"),cwo=l(),_2=a("li"),Ade=a("strong"),fwo=o("transfo-xl"),mwo=o(" \u2014 "),xj=a("a"),gwo=o("TransfoXLLMHeadModel"),hwo=o(" (Transformer-XL model)"),pwo=l(),u2=a("li"),yde=a("strong"),_wo=o("trocr"),uwo=o(" \u2014 "),$j=a("a"),bwo=o("TrOCRForCausalLM"),vwo=o(" (TrOCR model)"),Fwo=l(),b2=a("li"),Lde=a("strong"),Two=o("xglm"),Mwo=o(" \u2014 "),kj=a("a"),Ewo=o("XGLMForCausalLM"),Cwo=o(" (XGLM model)"),wwo=l(),v2=a("li"),xde=a("strong"),Awo=o("xlm"),ywo=o(" \u2014 "),Sj=a("a"),Lwo=o("XLMWithLMHeadModel"),xwo=o(" (XLM model)"),$wo=l(),F2=a("li"),$de=a("strong"),kwo=o("xlm-prophetnet"),Swo=o(" \u2014 "),Rj=a("a"),Rwo=o("XLMProphetNetForCausalLM"),Pwo=o(" (XLMProphetNet model)"),Bwo=l(),T2=a("li"),kde=a("strong"),Iwo=o("xlm-roberta"),qwo=o(" \u2014 "),Pj=a("a"),Nwo=o("XLMRobertaForCausalLM"),jwo=o(" (XLM-RoBERTa model)"),Dwo=l(),M2=a("li"),Sde=a("strong"),Gwo=o("xlm-roberta-xl"),Owo=o(" \u2014 "),Bj=a("a"),Vwo=o("XLMRobertaXLForCausalLM"),Xwo=o(" (XLM-RoBERTa-XL model)"),zwo=l(),E2=a("li"),Rde=a("strong"),Wwo=o("xlnet"),Qwo=o(" \u2014 "),Ij=a("a"),Hwo=o("XLNetLMHeadModel"),Uwo=o(" (XLNet model)"),Jwo=l(),C2=a("p"),Ywo=o("The model is set in evaluation mode by default using "),Pde=a("code"),Kwo=o("model.eval()"),Zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),e0o=o("model.train()"),o0o=l(),F(w2.$$.fragment),Pqe=l(),Ri=a("h2"),A2=a("a"),Ide=a("span"),F(ny.$$.fragment),r0o=l(),qde=a("span"),t0o=o("AutoModelForMaskedLM"),Bqe=l(),ko=a("div"),F(sy.$$.fragment),a0o=l(),Pi=a("p"),n0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qj=a("a"),s0o=o("from_pretrained()"),l0o=o(" class method or the "),Nj=a("a"),i0o=o("from_config()"),d0o=o(` class
method.`),c0o=l(),ly=a("p"),f0o=o("This class cannot be instantiated directly using "),Nde=a("code"),m0o=o("__init__()"),g0o=o(" (throws an error)."),h0o=l(),st=a("div"),F(iy.$$.fragment),p0o=l(),jde=a("p"),_0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u0o=l(),Bi=a("p"),b0o=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),v0o=o("not"),F0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jj=a("a"),T0o=o("from_pretrained()"),M0o=o(" to load the model weights."),E0o=l(),F(y2.$$.fragment),C0o=l(),Ze=a("div"),F(dy.$$.fragment),w0o=l(),Gde=a("p"),A0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y0o=l(),ka=a("p"),L0o=o("The model class to instantiate is selected based on the "),Ode=a("code"),x0o=o("model_type"),$0o=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),k0o=o("pretrained_model_name_or_path"),S0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),R0o=o("pretrained_model_name_or_path"),P0o=o(":"),B0o=l(),W=a("ul"),L2=a("li"),zde=a("strong"),I0o=o("albert"),q0o=o(" \u2014 "),Dj=a("a"),N0o=o("AlbertForMaskedLM"),j0o=o(" (ALBERT model)"),D0o=l(),x2=a("li"),Wde=a("strong"),G0o=o("bart"),O0o=o(" \u2014 "),Gj=a("a"),V0o=o("BartForConditionalGeneration"),X0o=o(" (BART model)"),z0o=l(),$2=a("li"),Qde=a("strong"),W0o=o("bert"),Q0o=o(" \u2014 "),Oj=a("a"),H0o=o("BertForMaskedLM"),U0o=o(" (BERT model)"),J0o=l(),k2=a("li"),Hde=a("strong"),Y0o=o("big_bird"),K0o=o(" \u2014 "),Vj=a("a"),Z0o=o("BigBirdForMaskedLM"),eAo=o(" (BigBird model)"),oAo=l(),S2=a("li"),Ude=a("strong"),rAo=o("camembert"),tAo=o(" \u2014 "),Xj=a("a"),aAo=o("CamembertForMaskedLM"),nAo=o(" (CamemBERT model)"),sAo=l(),R2=a("li"),Jde=a("strong"),lAo=o("convbert"),iAo=o(" \u2014 "),zj=a("a"),dAo=o("ConvBertForMaskedLM"),cAo=o(" (ConvBERT model)"),fAo=l(),P2=a("li"),Yde=a("strong"),mAo=o("data2vec-text"),gAo=o(" \u2014 "),Wj=a("a"),hAo=o("Data2VecTextForMaskedLM"),pAo=o(" (Data2VecText model)"),_Ao=l(),B2=a("li"),Kde=a("strong"),uAo=o("deberta"),bAo=o(" \u2014 "),Qj=a("a"),vAo=o("DebertaForMaskedLM"),FAo=o(" (DeBERTa model)"),TAo=l(),I2=a("li"),Zde=a("strong"),MAo=o("deberta-v2"),EAo=o(" \u2014 "),Hj=a("a"),CAo=o("DebertaV2ForMaskedLM"),wAo=o(" (DeBERTa-v2 model)"),AAo=l(),q2=a("li"),ece=a("strong"),yAo=o("distilbert"),LAo=o(" \u2014 "),Uj=a("a"),xAo=o("DistilBertForMaskedLM"),$Ao=o(" (DistilBERT model)"),kAo=l(),N2=a("li"),oce=a("strong"),SAo=o("electra"),RAo=o(" \u2014 "),Jj=a("a"),PAo=o("ElectraForMaskedLM"),BAo=o(" (ELECTRA model)"),IAo=l(),j2=a("li"),rce=a("strong"),qAo=o("flaubert"),NAo=o(" \u2014 "),Yj=a("a"),jAo=o("FlaubertWithLMHeadModel"),DAo=o(" (FlauBERT model)"),GAo=l(),D2=a("li"),tce=a("strong"),OAo=o("fnet"),VAo=o(" \u2014 "),Kj=a("a"),XAo=o("FNetForMaskedLM"),zAo=o(" (FNet model)"),WAo=l(),G2=a("li"),ace=a("strong"),QAo=o("funnel"),HAo=o(" \u2014 "),Zj=a("a"),UAo=o("FunnelForMaskedLM"),JAo=o(" (Funnel Transformer model)"),YAo=l(),O2=a("li"),nce=a("strong"),KAo=o("ibert"),ZAo=o(" \u2014 "),eD=a("a"),e6o=o("IBertForMaskedLM"),o6o=o(" (I-BERT model)"),r6o=l(),V2=a("li"),sce=a("strong"),t6o=o("layoutlm"),a6o=o(" \u2014 "),oD=a("a"),n6o=o("LayoutLMForMaskedLM"),s6o=o(" (LayoutLM model)"),l6o=l(),X2=a("li"),lce=a("strong"),i6o=o("longformer"),d6o=o(" \u2014 "),rD=a("a"),c6o=o("LongformerForMaskedLM"),f6o=o(" (Longformer model)"),m6o=l(),z2=a("li"),ice=a("strong"),g6o=o("mbart"),h6o=o(" \u2014 "),tD=a("a"),p6o=o("MBartForConditionalGeneration"),_6o=o(" (mBART model)"),u6o=l(),W2=a("li"),dce=a("strong"),b6o=o("megatron-bert"),v6o=o(" \u2014 "),aD=a("a"),F6o=o("MegatronBertForMaskedLM"),T6o=o(" (MegatronBert model)"),M6o=l(),Q2=a("li"),cce=a("strong"),E6o=o("mobilebert"),C6o=o(" \u2014 "),nD=a("a"),w6o=o("MobileBertForMaskedLM"),A6o=o(" (MobileBERT model)"),y6o=l(),H2=a("li"),fce=a("strong"),L6o=o("mpnet"),x6o=o(" \u2014 "),sD=a("a"),$6o=o("MPNetForMaskedLM"),k6o=o(" (MPNet model)"),S6o=l(),U2=a("li"),mce=a("strong"),R6o=o("nystromformer"),P6o=o(" \u2014 "),lD=a("a"),B6o=o("NystromformerForMaskedLM"),I6o=o(" (Nystromformer model)"),q6o=l(),J2=a("li"),gce=a("strong"),N6o=o("perceiver"),j6o=o(" \u2014 "),iD=a("a"),D6o=o("PerceiverForMaskedLM"),G6o=o(" (Perceiver model)"),O6o=l(),Y2=a("li"),hce=a("strong"),V6o=o("qdqbert"),X6o=o(" \u2014 "),dD=a("a"),z6o=o("QDQBertForMaskedLM"),W6o=o(" (QDQBert model)"),Q6o=l(),K2=a("li"),pce=a("strong"),H6o=o("reformer"),U6o=o(" \u2014 "),cD=a("a"),J6o=o("ReformerForMaskedLM"),Y6o=o(" (Reformer model)"),K6o=l(),Z2=a("li"),_ce=a("strong"),Z6o=o("rembert"),eyo=o(" \u2014 "),fD=a("a"),oyo=o("RemBertForMaskedLM"),ryo=o(" (RemBERT model)"),tyo=l(),e1=a("li"),uce=a("strong"),ayo=o("roberta"),nyo=o(" \u2014 "),mD=a("a"),syo=o("RobertaForMaskedLM"),lyo=o(" (RoBERTa model)"),iyo=l(),o1=a("li"),bce=a("strong"),dyo=o("roformer"),cyo=o(" \u2014 "),gD=a("a"),fyo=o("RoFormerForMaskedLM"),myo=o(" (RoFormer model)"),gyo=l(),r1=a("li"),vce=a("strong"),hyo=o("squeezebert"),pyo=o(" \u2014 "),hD=a("a"),_yo=o("SqueezeBertForMaskedLM"),uyo=o(" (SqueezeBERT model)"),byo=l(),t1=a("li"),Fce=a("strong"),vyo=o("tapas"),Fyo=o(" \u2014 "),pD=a("a"),Tyo=o("TapasForMaskedLM"),Myo=o(" (TAPAS model)"),Eyo=l(),a1=a("li"),Tce=a("strong"),Cyo=o("wav2vec2"),wyo=o(" \u2014 "),Mce=a("code"),Ayo=o("Wav2Vec2ForMaskedLM"),yyo=o(" (Wav2Vec2 model)"),Lyo=l(),n1=a("li"),Ece=a("strong"),xyo=o("xlm"),$yo=o(" \u2014 "),_D=a("a"),kyo=o("XLMWithLMHeadModel"),Syo=o(" (XLM model)"),Ryo=l(),s1=a("li"),Cce=a("strong"),Pyo=o("xlm-roberta"),Byo=o(" \u2014 "),uD=a("a"),Iyo=o("XLMRobertaForMaskedLM"),qyo=o(" (XLM-RoBERTa model)"),Nyo=l(),l1=a("li"),wce=a("strong"),jyo=o("xlm-roberta-xl"),Dyo=o(" \u2014 "),bD=a("a"),Gyo=o("XLMRobertaXLForMaskedLM"),Oyo=o(" (XLM-RoBERTa-XL model)"),Vyo=l(),i1=a("li"),Ace=a("strong"),Xyo=o("yoso"),zyo=o(" \u2014 "),vD=a("a"),Wyo=o("YosoForMaskedLM"),Qyo=o(" (YOSO model)"),Hyo=l(),d1=a("p"),Uyo=o("The model is set in evaluation mode by default using "),yce=a("code"),Jyo=o("model.eval()"),Yyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),Kyo=o("model.train()"),Zyo=l(),F(c1.$$.fragment),Iqe=l(),Ii=a("h2"),f1=a("a"),xce=a("span"),F(cy.$$.fragment),eLo=l(),$ce=a("span"),oLo=o("AutoModelForSeq2SeqLM"),qqe=l(),So=a("div"),F(fy.$$.fragment),rLo=l(),qi=a("p"),tLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FD=a("a"),aLo=o("from_pretrained()"),nLo=o(" class method or the "),TD=a("a"),sLo=o("from_config()"),lLo=o(` class
method.`),iLo=l(),my=a("p"),dLo=o("This class cannot be instantiated directly using "),kce=a("code"),cLo=o("__init__()"),fLo=o(" (throws an error)."),mLo=l(),lt=a("div"),F(gy.$$.fragment),gLo=l(),Sce=a("p"),hLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pLo=l(),Ni=a("p"),_Lo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),uLo=o("not"),bLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),vLo=o("from_pretrained()"),FLo=o(" to load the model weights."),TLo=l(),F(m1.$$.fragment),MLo=l(),eo=a("div"),F(hy.$$.fragment),ELo=l(),Pce=a("p"),CLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wLo=l(),Sa=a("p"),ALo=o("The model class to instantiate is selected based on the "),Bce=a("code"),yLo=o("model_type"),LLo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),xLo=o("pretrained_model_name_or_path"),$Lo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),kLo=o("pretrained_model_name_or_path"),SLo=o(":"),RLo=l(),_e=a("ul"),g1=a("li"),Nce=a("strong"),PLo=o("bart"),BLo=o(" \u2014 "),ED=a("a"),ILo=o("BartForConditionalGeneration"),qLo=o(" (BART model)"),NLo=l(),h1=a("li"),jce=a("strong"),jLo=o("bigbird_pegasus"),DLo=o(" \u2014 "),CD=a("a"),GLo=o("BigBirdPegasusForConditionalGeneration"),OLo=o(" (BigBirdPegasus model)"),VLo=l(),p1=a("li"),Dce=a("strong"),XLo=o("blenderbot"),zLo=o(" \u2014 "),wD=a("a"),WLo=o("BlenderbotForConditionalGeneration"),QLo=o(" (Blenderbot model)"),HLo=l(),_1=a("li"),Gce=a("strong"),ULo=o("blenderbot-small"),JLo=o(" \u2014 "),AD=a("a"),YLo=o("BlenderbotSmallForConditionalGeneration"),KLo=o(" (BlenderbotSmall model)"),ZLo=l(),u1=a("li"),Oce=a("strong"),e8o=o("encoder-decoder"),o8o=o(" \u2014 "),yD=a("a"),r8o=o("EncoderDecoderModel"),t8o=o(" (Encoder decoder model)"),a8o=l(),b1=a("li"),Vce=a("strong"),n8o=o("fsmt"),s8o=o(" \u2014 "),LD=a("a"),l8o=o("FSMTForConditionalGeneration"),i8o=o(" (FairSeq Machine-Translation model)"),d8o=l(),v1=a("li"),Xce=a("strong"),c8o=o("led"),f8o=o(" \u2014 "),xD=a("a"),m8o=o("LEDForConditionalGeneration"),g8o=o(" (LED model)"),h8o=l(),F1=a("li"),zce=a("strong"),p8o=o("m2m_100"),_8o=o(" \u2014 "),$D=a("a"),u8o=o("M2M100ForConditionalGeneration"),b8o=o(" (M2M100 model)"),v8o=l(),T1=a("li"),Wce=a("strong"),F8o=o("marian"),T8o=o(" \u2014 "),kD=a("a"),M8o=o("MarianMTModel"),E8o=o(" (Marian model)"),C8o=l(),M1=a("li"),Qce=a("strong"),w8o=o("mbart"),A8o=o(" \u2014 "),SD=a("a"),y8o=o("MBartForConditionalGeneration"),L8o=o(" (mBART model)"),x8o=l(),E1=a("li"),Hce=a("strong"),$8o=o("mt5"),k8o=o(" \u2014 "),RD=a("a"),S8o=o("MT5ForConditionalGeneration"),R8o=o(" (mT5 model)"),P8o=l(),C1=a("li"),Uce=a("strong"),B8o=o("pegasus"),I8o=o(" \u2014 "),PD=a("a"),q8o=o("PegasusForConditionalGeneration"),N8o=o(" (Pegasus model)"),j8o=l(),w1=a("li"),Jce=a("strong"),D8o=o("plbart"),G8o=o(" \u2014 "),BD=a("a"),O8o=o("PLBartForConditionalGeneration"),V8o=o(" (PLBart model)"),X8o=l(),A1=a("li"),Yce=a("strong"),z8o=o("prophetnet"),W8o=o(" \u2014 "),ID=a("a"),Q8o=o("ProphetNetForConditionalGeneration"),H8o=o(" (ProphetNet model)"),U8o=l(),y1=a("li"),Kce=a("strong"),J8o=o("t5"),Y8o=o(" \u2014 "),qD=a("a"),K8o=o("T5ForConditionalGeneration"),Z8o=o(" (T5 model)"),e9o=l(),L1=a("li"),Zce=a("strong"),o9o=o("xlm-prophetnet"),r9o=o(" \u2014 "),ND=a("a"),t9o=o("XLMProphetNetForConditionalGeneration"),a9o=o(" (XLMProphetNet model)"),n9o=l(),x1=a("p"),s9o=o("The model is set in evaluation mode by default using "),efe=a("code"),l9o=o("model.eval()"),i9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),d9o=o("model.train()"),c9o=l(),F($1.$$.fragment),Nqe=l(),ji=a("h2"),k1=a("a"),rfe=a("span"),F(py.$$.fragment),f9o=l(),tfe=a("span"),m9o=o("AutoModelForSequenceClassification"),jqe=l(),Ro=a("div"),F(_y.$$.fragment),g9o=l(),Di=a("p"),h9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jD=a("a"),p9o=o("from_pretrained()"),_9o=o(" class method or the "),DD=a("a"),u9o=o("from_config()"),b9o=o(` class
method.`),v9o=l(),uy=a("p"),F9o=o("This class cannot be instantiated directly using "),afe=a("code"),T9o=o("__init__()"),M9o=o(" (throws an error)."),E9o=l(),it=a("div"),F(by.$$.fragment),C9o=l(),nfe=a("p"),w9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A9o=l(),Gi=a("p"),y9o=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),L9o=o("not"),x9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),$9o=o("from_pretrained()"),k9o=o(" to load the model weights."),S9o=l(),F(S1.$$.fragment),R9o=l(),oo=a("div"),F(vy.$$.fragment),P9o=l(),lfe=a("p"),B9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I9o=l(),Ra=a("p"),q9o=o("The model class to instantiate is selected based on the "),ife=a("code"),N9o=o("model_type"),j9o=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),D9o=o("pretrained_model_name_or_path"),G9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),O9o=o("pretrained_model_name_or_path"),V9o=o(":"),X9o=l(),N=a("ul"),R1=a("li"),ffe=a("strong"),z9o=o("albert"),W9o=o(" \u2014 "),OD=a("a"),Q9o=o("AlbertForSequenceClassification"),H9o=o(" (ALBERT model)"),U9o=l(),P1=a("li"),mfe=a("strong"),J9o=o("bart"),Y9o=o(" \u2014 "),VD=a("a"),K9o=o("BartForSequenceClassification"),Z9o=o(" (BART model)"),exo=l(),B1=a("li"),gfe=a("strong"),oxo=o("bert"),rxo=o(" \u2014 "),XD=a("a"),txo=o("BertForSequenceClassification"),axo=o(" (BERT model)"),nxo=l(),I1=a("li"),hfe=a("strong"),sxo=o("big_bird"),lxo=o(" \u2014 "),zD=a("a"),ixo=o("BigBirdForSequenceClassification"),dxo=o(" (BigBird model)"),cxo=l(),q1=a("li"),pfe=a("strong"),fxo=o("bigbird_pegasus"),mxo=o(" \u2014 "),WD=a("a"),gxo=o("BigBirdPegasusForSequenceClassification"),hxo=o(" (BigBirdPegasus model)"),pxo=l(),N1=a("li"),_fe=a("strong"),_xo=o("camembert"),uxo=o(" \u2014 "),QD=a("a"),bxo=o("CamembertForSequenceClassification"),vxo=o(" (CamemBERT model)"),Fxo=l(),j1=a("li"),ufe=a("strong"),Txo=o("canine"),Mxo=o(" \u2014 "),HD=a("a"),Exo=o("CanineForSequenceClassification"),Cxo=o(" (Canine model)"),wxo=l(),D1=a("li"),bfe=a("strong"),Axo=o("convbert"),yxo=o(" \u2014 "),UD=a("a"),Lxo=o("ConvBertForSequenceClassification"),xxo=o(" (ConvBERT model)"),$xo=l(),G1=a("li"),vfe=a("strong"),kxo=o("ctrl"),Sxo=o(" \u2014 "),JD=a("a"),Rxo=o("CTRLForSequenceClassification"),Pxo=o(" (CTRL model)"),Bxo=l(),O1=a("li"),Ffe=a("strong"),Ixo=o("data2vec-text"),qxo=o(" \u2014 "),YD=a("a"),Nxo=o("Data2VecTextForSequenceClassification"),jxo=o(" (Data2VecText model)"),Dxo=l(),V1=a("li"),Tfe=a("strong"),Gxo=o("deberta"),Oxo=o(" \u2014 "),KD=a("a"),Vxo=o("DebertaForSequenceClassification"),Xxo=o(" (DeBERTa model)"),zxo=l(),X1=a("li"),Mfe=a("strong"),Wxo=o("deberta-v2"),Qxo=o(" \u2014 "),ZD=a("a"),Hxo=o("DebertaV2ForSequenceClassification"),Uxo=o(" (DeBERTa-v2 model)"),Jxo=l(),z1=a("li"),Efe=a("strong"),Yxo=o("distilbert"),Kxo=o(" \u2014 "),eG=a("a"),Zxo=o("DistilBertForSequenceClassification"),e$o=o(" (DistilBERT model)"),o$o=l(),W1=a("li"),Cfe=a("strong"),r$o=o("electra"),t$o=o(" \u2014 "),oG=a("a"),a$o=o("ElectraForSequenceClassification"),n$o=o(" (ELECTRA model)"),s$o=l(),Q1=a("li"),wfe=a("strong"),l$o=o("flaubert"),i$o=o(" \u2014 "),rG=a("a"),d$o=o("FlaubertForSequenceClassification"),c$o=o(" (FlauBERT model)"),f$o=l(),H1=a("li"),Afe=a("strong"),m$o=o("fnet"),g$o=o(" \u2014 "),tG=a("a"),h$o=o("FNetForSequenceClassification"),p$o=o(" (FNet model)"),_$o=l(),U1=a("li"),yfe=a("strong"),u$o=o("funnel"),b$o=o(" \u2014 "),aG=a("a"),v$o=o("FunnelForSequenceClassification"),F$o=o(" (Funnel Transformer model)"),T$o=l(),J1=a("li"),Lfe=a("strong"),M$o=o("gpt2"),E$o=o(" \u2014 "),nG=a("a"),C$o=o("GPT2ForSequenceClassification"),w$o=o(" (OpenAI GPT-2 model)"),A$o=l(),Y1=a("li"),xfe=a("strong"),y$o=o("gpt_neo"),L$o=o(" \u2014 "),sG=a("a"),x$o=o("GPTNeoForSequenceClassification"),$$o=o(" (GPT Neo model)"),k$o=l(),K1=a("li"),$fe=a("strong"),S$o=o("gptj"),R$o=o(" \u2014 "),lG=a("a"),P$o=o("GPTJForSequenceClassification"),B$o=o(" (GPT-J model)"),I$o=l(),Z1=a("li"),kfe=a("strong"),q$o=o("ibert"),N$o=o(" \u2014 "),iG=a("a"),j$o=o("IBertForSequenceClassification"),D$o=o(" (I-BERT model)"),G$o=l(),e7=a("li"),Sfe=a("strong"),O$o=o("layoutlm"),V$o=o(" \u2014 "),dG=a("a"),X$o=o("LayoutLMForSequenceClassification"),z$o=o(" (LayoutLM model)"),W$o=l(),o7=a("li"),Rfe=a("strong"),Q$o=o("layoutlmv2"),H$o=o(" \u2014 "),cG=a("a"),U$o=o("LayoutLMv2ForSequenceClassification"),J$o=o(" (LayoutLMv2 model)"),Y$o=l(),r7=a("li"),Pfe=a("strong"),K$o=o("led"),Z$o=o(" \u2014 "),fG=a("a"),eko=o("LEDForSequenceClassification"),oko=o(" (LED model)"),rko=l(),t7=a("li"),Bfe=a("strong"),tko=o("longformer"),ako=o(" \u2014 "),mG=a("a"),nko=o("LongformerForSequenceClassification"),sko=o(" (Longformer model)"),lko=l(),a7=a("li"),Ife=a("strong"),iko=o("mbart"),dko=o(" \u2014 "),gG=a("a"),cko=o("MBartForSequenceClassification"),fko=o(" (mBART model)"),mko=l(),n7=a("li"),qfe=a("strong"),gko=o("megatron-bert"),hko=o(" \u2014 "),hG=a("a"),pko=o("MegatronBertForSequenceClassification"),_ko=o(" (MegatronBert model)"),uko=l(),s7=a("li"),Nfe=a("strong"),bko=o("mobilebert"),vko=o(" \u2014 "),pG=a("a"),Fko=o("MobileBertForSequenceClassification"),Tko=o(" (MobileBERT model)"),Mko=l(),l7=a("li"),jfe=a("strong"),Eko=o("mpnet"),Cko=o(" \u2014 "),_G=a("a"),wko=o("MPNetForSequenceClassification"),Ako=o(" (MPNet model)"),yko=l(),i7=a("li"),Dfe=a("strong"),Lko=o("nystromformer"),xko=o(" \u2014 "),uG=a("a"),$ko=o("NystromformerForSequenceClassification"),kko=o(" (Nystromformer model)"),Sko=l(),d7=a("li"),Gfe=a("strong"),Rko=o("openai-gpt"),Pko=o(" \u2014 "),bG=a("a"),Bko=o("OpenAIGPTForSequenceClassification"),Iko=o(" (OpenAI GPT model)"),qko=l(),c7=a("li"),Ofe=a("strong"),Nko=o("perceiver"),jko=o(" \u2014 "),vG=a("a"),Dko=o("PerceiverForSequenceClassification"),Gko=o(" (Perceiver model)"),Oko=l(),f7=a("li"),Vfe=a("strong"),Vko=o("plbart"),Xko=o(" \u2014 "),FG=a("a"),zko=o("PLBartForSequenceClassification"),Wko=o(" (PLBart model)"),Qko=l(),m7=a("li"),Xfe=a("strong"),Hko=o("qdqbert"),Uko=o(" \u2014 "),TG=a("a"),Jko=o("QDQBertForSequenceClassification"),Yko=o(" (QDQBert model)"),Kko=l(),g7=a("li"),zfe=a("strong"),Zko=o("reformer"),eSo=o(" \u2014 "),MG=a("a"),oSo=o("ReformerForSequenceClassification"),rSo=o(" (Reformer model)"),tSo=l(),h7=a("li"),Wfe=a("strong"),aSo=o("rembert"),nSo=o(" \u2014 "),EG=a("a"),sSo=o("RemBertForSequenceClassification"),lSo=o(" (RemBERT model)"),iSo=l(),p7=a("li"),Qfe=a("strong"),dSo=o("roberta"),cSo=o(" \u2014 "),CG=a("a"),fSo=o("RobertaForSequenceClassification"),mSo=o(" (RoBERTa model)"),gSo=l(),_7=a("li"),Hfe=a("strong"),hSo=o("roformer"),pSo=o(" \u2014 "),wG=a("a"),_So=o("RoFormerForSequenceClassification"),uSo=o(" (RoFormer model)"),bSo=l(),u7=a("li"),Ufe=a("strong"),vSo=o("squeezebert"),FSo=o(" \u2014 "),AG=a("a"),TSo=o("SqueezeBertForSequenceClassification"),MSo=o(" (SqueezeBERT model)"),ESo=l(),b7=a("li"),Jfe=a("strong"),CSo=o("tapas"),wSo=o(" \u2014 "),yG=a("a"),ASo=o("TapasForSequenceClassification"),ySo=o(" (TAPAS model)"),LSo=l(),v7=a("li"),Yfe=a("strong"),xSo=o("transfo-xl"),$So=o(" \u2014 "),LG=a("a"),kSo=o("TransfoXLForSequenceClassification"),SSo=o(" (Transformer-XL model)"),RSo=l(),F7=a("li"),Kfe=a("strong"),PSo=o("xlm"),BSo=o(" \u2014 "),xG=a("a"),ISo=o("XLMForSequenceClassification"),qSo=o(" (XLM model)"),NSo=l(),T7=a("li"),Zfe=a("strong"),jSo=o("xlm-roberta"),DSo=o(" \u2014 "),$G=a("a"),GSo=o("XLMRobertaForSequenceClassification"),OSo=o(" (XLM-RoBERTa model)"),VSo=l(),M7=a("li"),eme=a("strong"),XSo=o("xlm-roberta-xl"),zSo=o(" \u2014 "),kG=a("a"),WSo=o("XLMRobertaXLForSequenceClassification"),QSo=o(" (XLM-RoBERTa-XL model)"),HSo=l(),E7=a("li"),ome=a("strong"),USo=o("xlnet"),JSo=o(" \u2014 "),SG=a("a"),YSo=o("XLNetForSequenceClassification"),KSo=o(" (XLNet model)"),ZSo=l(),C7=a("li"),rme=a("strong"),eRo=o("yoso"),oRo=o(" \u2014 "),RG=a("a"),rRo=o("YosoForSequenceClassification"),tRo=o(" (YOSO model)"),aRo=l(),w7=a("p"),nRo=o("The model is set in evaluation mode by default using "),tme=a("code"),sRo=o("model.eval()"),lRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),iRo=o("model.train()"),dRo=l(),F(A7.$$.fragment),Dqe=l(),Oi=a("h2"),y7=a("a"),nme=a("span"),F(Fy.$$.fragment),cRo=l(),sme=a("span"),fRo=o("AutoModelForMultipleChoice"),Gqe=l(),Po=a("div"),F(Ty.$$.fragment),mRo=l(),Vi=a("p"),gRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PG=a("a"),hRo=o("from_pretrained()"),pRo=o(" class method or the "),BG=a("a"),_Ro=o("from_config()"),uRo=o(` class
method.`),bRo=l(),My=a("p"),vRo=o("This class cannot be instantiated directly using "),lme=a("code"),FRo=o("__init__()"),TRo=o(" (throws an error)."),MRo=l(),dt=a("div"),F(Ey.$$.fragment),ERo=l(),ime=a("p"),CRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wRo=l(),Xi=a("p"),ARo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),yRo=o("not"),LRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),xRo=o("from_pretrained()"),$Ro=o(" to load the model weights."),kRo=l(),F(L7.$$.fragment),SRo=l(),ro=a("div"),F(Cy.$$.fragment),RRo=l(),cme=a("p"),PRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BRo=l(),Pa=a("p"),IRo=o("The model class to instantiate is selected based on the "),fme=a("code"),qRo=o("model_type"),NRo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),jRo=o("pretrained_model_name_or_path"),DRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),GRo=o("pretrained_model_name_or_path"),ORo=o(":"),VRo=l(),Y=a("ul"),x7=a("li"),hme=a("strong"),XRo=o("albert"),zRo=o(" \u2014 "),qG=a("a"),WRo=o("AlbertForMultipleChoice"),QRo=o(" (ALBERT model)"),HRo=l(),$7=a("li"),pme=a("strong"),URo=o("bert"),JRo=o(" \u2014 "),NG=a("a"),YRo=o("BertForMultipleChoice"),KRo=o(" (BERT model)"),ZRo=l(),k7=a("li"),_me=a("strong"),ePo=o("big_bird"),oPo=o(" \u2014 "),jG=a("a"),rPo=o("BigBirdForMultipleChoice"),tPo=o(" (BigBird model)"),aPo=l(),S7=a("li"),ume=a("strong"),nPo=o("camembert"),sPo=o(" \u2014 "),DG=a("a"),lPo=o("CamembertForMultipleChoice"),iPo=o(" (CamemBERT model)"),dPo=l(),R7=a("li"),bme=a("strong"),cPo=o("canine"),fPo=o(" \u2014 "),GG=a("a"),mPo=o("CanineForMultipleChoice"),gPo=o(" (Canine model)"),hPo=l(),P7=a("li"),vme=a("strong"),pPo=o("convbert"),_Po=o(" \u2014 "),OG=a("a"),uPo=o("ConvBertForMultipleChoice"),bPo=o(" (ConvBERT model)"),vPo=l(),B7=a("li"),Fme=a("strong"),FPo=o("data2vec-text"),TPo=o(" \u2014 "),VG=a("a"),MPo=o("Data2VecTextForMultipleChoice"),EPo=o(" (Data2VecText model)"),CPo=l(),I7=a("li"),Tme=a("strong"),wPo=o("deberta-v2"),APo=o(" \u2014 "),XG=a("a"),yPo=o("DebertaV2ForMultipleChoice"),LPo=o(" (DeBERTa-v2 model)"),xPo=l(),q7=a("li"),Mme=a("strong"),$Po=o("distilbert"),kPo=o(" \u2014 "),zG=a("a"),SPo=o("DistilBertForMultipleChoice"),RPo=o(" (DistilBERT model)"),PPo=l(),N7=a("li"),Eme=a("strong"),BPo=o("electra"),IPo=o(" \u2014 "),WG=a("a"),qPo=o("ElectraForMultipleChoice"),NPo=o(" (ELECTRA model)"),jPo=l(),j7=a("li"),Cme=a("strong"),DPo=o("flaubert"),GPo=o(" \u2014 "),QG=a("a"),OPo=o("FlaubertForMultipleChoice"),VPo=o(" (FlauBERT model)"),XPo=l(),D7=a("li"),wme=a("strong"),zPo=o("fnet"),WPo=o(" \u2014 "),HG=a("a"),QPo=o("FNetForMultipleChoice"),HPo=o(" (FNet model)"),UPo=l(),G7=a("li"),Ame=a("strong"),JPo=o("funnel"),YPo=o(" \u2014 "),UG=a("a"),KPo=o("FunnelForMultipleChoice"),ZPo=o(" (Funnel Transformer model)"),eBo=l(),O7=a("li"),yme=a("strong"),oBo=o("ibert"),rBo=o(" \u2014 "),JG=a("a"),tBo=o("IBertForMultipleChoice"),aBo=o(" (I-BERT model)"),nBo=l(),V7=a("li"),Lme=a("strong"),sBo=o("longformer"),lBo=o(" \u2014 "),YG=a("a"),iBo=o("LongformerForMultipleChoice"),dBo=o(" (Longformer model)"),cBo=l(),X7=a("li"),xme=a("strong"),fBo=o("megatron-bert"),mBo=o(" \u2014 "),KG=a("a"),gBo=o("MegatronBertForMultipleChoice"),hBo=o(" (MegatronBert model)"),pBo=l(),z7=a("li"),$me=a("strong"),_Bo=o("mobilebert"),uBo=o(" \u2014 "),ZG=a("a"),bBo=o("MobileBertForMultipleChoice"),vBo=o(" (MobileBERT model)"),FBo=l(),W7=a("li"),kme=a("strong"),TBo=o("mpnet"),MBo=o(" \u2014 "),eO=a("a"),EBo=o("MPNetForMultipleChoice"),CBo=o(" (MPNet model)"),wBo=l(),Q7=a("li"),Sme=a("strong"),ABo=o("nystromformer"),yBo=o(" \u2014 "),oO=a("a"),LBo=o("NystromformerForMultipleChoice"),xBo=o(" (Nystromformer model)"),$Bo=l(),H7=a("li"),Rme=a("strong"),kBo=o("qdqbert"),SBo=o(" \u2014 "),rO=a("a"),RBo=o("QDQBertForMultipleChoice"),PBo=o(" (QDQBert model)"),BBo=l(),U7=a("li"),Pme=a("strong"),IBo=o("rembert"),qBo=o(" \u2014 "),tO=a("a"),NBo=o("RemBertForMultipleChoice"),jBo=o(" (RemBERT model)"),DBo=l(),J7=a("li"),Bme=a("strong"),GBo=o("roberta"),OBo=o(" \u2014 "),aO=a("a"),VBo=o("RobertaForMultipleChoice"),XBo=o(" (RoBERTa model)"),zBo=l(),Y7=a("li"),Ime=a("strong"),WBo=o("roformer"),QBo=o(" \u2014 "),nO=a("a"),HBo=o("RoFormerForMultipleChoice"),UBo=o(" (RoFormer model)"),JBo=l(),K7=a("li"),qme=a("strong"),YBo=o("squeezebert"),KBo=o(" \u2014 "),sO=a("a"),ZBo=o("SqueezeBertForMultipleChoice"),eIo=o(" (SqueezeBERT model)"),oIo=l(),Z7=a("li"),Nme=a("strong"),rIo=o("xlm"),tIo=o(" \u2014 "),lO=a("a"),aIo=o("XLMForMultipleChoice"),nIo=o(" (XLM model)"),sIo=l(),eb=a("li"),jme=a("strong"),lIo=o("xlm-roberta"),iIo=o(" \u2014 "),iO=a("a"),dIo=o("XLMRobertaForMultipleChoice"),cIo=o(" (XLM-RoBERTa model)"),fIo=l(),ob=a("li"),Dme=a("strong"),mIo=o("xlm-roberta-xl"),gIo=o(" \u2014 "),dO=a("a"),hIo=o("XLMRobertaXLForMultipleChoice"),pIo=o(" (XLM-RoBERTa-XL model)"),_Io=l(),rb=a("li"),Gme=a("strong"),uIo=o("xlnet"),bIo=o(" \u2014 "),cO=a("a"),vIo=o("XLNetForMultipleChoice"),FIo=o(" (XLNet model)"),TIo=l(),tb=a("li"),Ome=a("strong"),MIo=o("yoso"),EIo=o(" \u2014 "),fO=a("a"),CIo=o("YosoForMultipleChoice"),wIo=o(" (YOSO model)"),AIo=l(),ab=a("p"),yIo=o("The model is set in evaluation mode by default using "),Vme=a("code"),LIo=o("model.eval()"),xIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),$Io=o("model.train()"),kIo=l(),F(nb.$$.fragment),Oqe=l(),zi=a("h2"),sb=a("a"),zme=a("span"),F(wy.$$.fragment),SIo=l(),Wme=a("span"),RIo=o("AutoModelForNextSentencePrediction"),Vqe=l(),Bo=a("div"),F(Ay.$$.fragment),PIo=l(),Wi=a("p"),BIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mO=a("a"),IIo=o("from_pretrained()"),qIo=o(" class method or the "),gO=a("a"),NIo=o("from_config()"),jIo=o(` class
method.`),DIo=l(),yy=a("p"),GIo=o("This class cannot be instantiated directly using "),Qme=a("code"),OIo=o("__init__()"),VIo=o(" (throws an error)."),XIo=l(),ct=a("div"),F(Ly.$$.fragment),zIo=l(),Hme=a("p"),WIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QIo=l(),Qi=a("p"),HIo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),UIo=o("not"),JIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),YIo=o("from_pretrained()"),KIo=o(" to load the model weights."),ZIo=l(),F(lb.$$.fragment),eqo=l(),to=a("div"),F(xy.$$.fragment),oqo=l(),Jme=a("p"),rqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tqo=l(),Ba=a("p"),aqo=o("The model class to instantiate is selected based on the "),Yme=a("code"),nqo=o("model_type"),sqo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),lqo=o("pretrained_model_name_or_path"),iqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(":"),fqo=l(),Yr=a("ul"),ib=a("li"),ege=a("strong"),mqo=o("bert"),gqo=o(" \u2014 "),pO=a("a"),hqo=o("BertForNextSentencePrediction"),pqo=o(" (BERT model)"),_qo=l(),db=a("li"),oge=a("strong"),uqo=o("fnet"),bqo=o(" \u2014 "),_O=a("a"),vqo=o("FNetForNextSentencePrediction"),Fqo=o(" (FNet model)"),Tqo=l(),cb=a("li"),rge=a("strong"),Mqo=o("megatron-bert"),Eqo=o(" \u2014 "),uO=a("a"),Cqo=o("MegatronBertForNextSentencePrediction"),wqo=o(" (MegatronBert model)"),Aqo=l(),fb=a("li"),tge=a("strong"),yqo=o("mobilebert"),Lqo=o(" \u2014 "),bO=a("a"),xqo=o("MobileBertForNextSentencePrediction"),$qo=o(" (MobileBERT model)"),kqo=l(),mb=a("li"),age=a("strong"),Sqo=o("qdqbert"),Rqo=o(" \u2014 "),vO=a("a"),Pqo=o("QDQBertForNextSentencePrediction"),Bqo=o(" (QDQBert model)"),Iqo=l(),gb=a("p"),qqo=o("The model is set in evaluation mode by default using "),nge=a("code"),Nqo=o("model.eval()"),jqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),Dqo=o("model.train()"),Gqo=l(),F(hb.$$.fragment),Xqe=l(),Hi=a("h2"),pb=a("a"),lge=a("span"),F($y.$$.fragment),Oqo=l(),ige=a("span"),Vqo=o("AutoModelForTokenClassification"),zqe=l(),Io=a("div"),F(ky.$$.fragment),Xqo=l(),Ui=a("p"),zqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FO=a("a"),Wqo=o("from_pretrained()"),Qqo=o(" class method or the "),TO=a("a"),Hqo=o("from_config()"),Uqo=o(` class
method.`),Jqo=l(),Sy=a("p"),Yqo=o("This class cannot be instantiated directly using "),dge=a("code"),Kqo=o("__init__()"),Zqo=o(" (throws an error)."),eNo=l(),ft=a("div"),F(Ry.$$.fragment),oNo=l(),cge=a("p"),rNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tNo=l(),Ji=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),lNo=o("from_pretrained()"),iNo=o(" to load the model weights."),dNo=l(),F(_b.$$.fragment),cNo=l(),ao=a("div"),F(Py.$$.fragment),fNo=l(),mge=a("p"),mNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gNo=l(),Ia=a("p"),hNo=o("The model class to instantiate is selected based on the "),gge=a("code"),pNo=o("model_type"),_No=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),uNo=o("pretrained_model_name_or_path"),bNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),vNo=o("pretrained_model_name_or_path"),FNo=o(":"),TNo=l(),U=a("ul"),ub=a("li"),_ge=a("strong"),MNo=o("albert"),ENo=o(" \u2014 "),EO=a("a"),CNo=o("AlbertForTokenClassification"),wNo=o(" (ALBERT model)"),ANo=l(),bb=a("li"),uge=a("strong"),yNo=o("bert"),LNo=o(" \u2014 "),CO=a("a"),xNo=o("BertForTokenClassification"),$No=o(" (BERT model)"),kNo=l(),vb=a("li"),bge=a("strong"),SNo=o("big_bird"),RNo=o(" \u2014 "),wO=a("a"),PNo=o("BigBirdForTokenClassification"),BNo=o(" (BigBird model)"),INo=l(),Fb=a("li"),vge=a("strong"),qNo=o("camembert"),NNo=o(" \u2014 "),AO=a("a"),jNo=o("CamembertForTokenClassification"),DNo=o(" (CamemBERT model)"),GNo=l(),Tb=a("li"),Fge=a("strong"),ONo=o("canine"),VNo=o(" \u2014 "),yO=a("a"),XNo=o("CanineForTokenClassification"),zNo=o(" (Canine model)"),WNo=l(),Mb=a("li"),Tge=a("strong"),QNo=o("convbert"),HNo=o(" \u2014 "),LO=a("a"),UNo=o("ConvBertForTokenClassification"),JNo=o(" (ConvBERT model)"),YNo=l(),Eb=a("li"),Mge=a("strong"),KNo=o("data2vec-text"),ZNo=o(" \u2014 "),xO=a("a"),ejo=o("Data2VecTextForTokenClassification"),ojo=o(" (Data2VecText model)"),rjo=l(),Cb=a("li"),Ege=a("strong"),tjo=o("deberta"),ajo=o(" \u2014 "),$O=a("a"),njo=o("DebertaForTokenClassification"),sjo=o(" (DeBERTa model)"),ljo=l(),wb=a("li"),Cge=a("strong"),ijo=o("deberta-v2"),djo=o(" \u2014 "),kO=a("a"),cjo=o("DebertaV2ForTokenClassification"),fjo=o(" (DeBERTa-v2 model)"),mjo=l(),Ab=a("li"),wge=a("strong"),gjo=o("distilbert"),hjo=o(" \u2014 "),SO=a("a"),pjo=o("DistilBertForTokenClassification"),_jo=o(" (DistilBERT model)"),ujo=l(),yb=a("li"),Age=a("strong"),bjo=o("electra"),vjo=o(" \u2014 "),RO=a("a"),Fjo=o("ElectraForTokenClassification"),Tjo=o(" (ELECTRA model)"),Mjo=l(),Lb=a("li"),yge=a("strong"),Ejo=o("flaubert"),Cjo=o(" \u2014 "),PO=a("a"),wjo=o("FlaubertForTokenClassification"),Ajo=o(" (FlauBERT model)"),yjo=l(),xb=a("li"),Lge=a("strong"),Ljo=o("fnet"),xjo=o(" \u2014 "),BO=a("a"),$jo=o("FNetForTokenClassification"),kjo=o(" (FNet model)"),Sjo=l(),$b=a("li"),xge=a("strong"),Rjo=o("funnel"),Pjo=o(" \u2014 "),IO=a("a"),Bjo=o("FunnelForTokenClassification"),Ijo=o(" (Funnel Transformer model)"),qjo=l(),kb=a("li"),$ge=a("strong"),Njo=o("gpt2"),jjo=o(" \u2014 "),qO=a("a"),Djo=o("GPT2ForTokenClassification"),Gjo=o(" (OpenAI GPT-2 model)"),Ojo=l(),Sb=a("li"),kge=a("strong"),Vjo=o("ibert"),Xjo=o(" \u2014 "),NO=a("a"),zjo=o("IBertForTokenClassification"),Wjo=o(" (I-BERT model)"),Qjo=l(),Rb=a("li"),Sge=a("strong"),Hjo=o("layoutlm"),Ujo=o(" \u2014 "),jO=a("a"),Jjo=o("LayoutLMForTokenClassification"),Yjo=o(" (LayoutLM model)"),Kjo=l(),Pb=a("li"),Rge=a("strong"),Zjo=o("layoutlmv2"),eDo=o(" \u2014 "),DO=a("a"),oDo=o("LayoutLMv2ForTokenClassification"),rDo=o(" (LayoutLMv2 model)"),tDo=l(),Bb=a("li"),Pge=a("strong"),aDo=o("longformer"),nDo=o(" \u2014 "),GO=a("a"),sDo=o("LongformerForTokenClassification"),lDo=o(" (Longformer model)"),iDo=l(),Ib=a("li"),Bge=a("strong"),dDo=o("megatron-bert"),cDo=o(" \u2014 "),OO=a("a"),fDo=o("MegatronBertForTokenClassification"),mDo=o(" (MegatronBert model)"),gDo=l(),qb=a("li"),Ige=a("strong"),hDo=o("mobilebert"),pDo=o(" \u2014 "),VO=a("a"),_Do=o("MobileBertForTokenClassification"),uDo=o(" (MobileBERT model)"),bDo=l(),Nb=a("li"),qge=a("strong"),vDo=o("mpnet"),FDo=o(" \u2014 "),XO=a("a"),TDo=o("MPNetForTokenClassification"),MDo=o(" (MPNet model)"),EDo=l(),jb=a("li"),Nge=a("strong"),CDo=o("nystromformer"),wDo=o(" \u2014 "),zO=a("a"),ADo=o("NystromformerForTokenClassification"),yDo=o(" (Nystromformer model)"),LDo=l(),Db=a("li"),jge=a("strong"),xDo=o("qdqbert"),$Do=o(" \u2014 "),WO=a("a"),kDo=o("QDQBertForTokenClassification"),SDo=o(" (QDQBert model)"),RDo=l(),Gb=a("li"),Dge=a("strong"),PDo=o("rembert"),BDo=o(" \u2014 "),QO=a("a"),IDo=o("RemBertForTokenClassification"),qDo=o(" (RemBERT model)"),NDo=l(),Ob=a("li"),Gge=a("strong"),jDo=o("roberta"),DDo=o(" \u2014 "),HO=a("a"),GDo=o("RobertaForTokenClassification"),ODo=o(" (RoBERTa model)"),VDo=l(),Vb=a("li"),Oge=a("strong"),XDo=o("roformer"),zDo=o(" \u2014 "),UO=a("a"),WDo=o("RoFormerForTokenClassification"),QDo=o(" (RoFormer model)"),HDo=l(),Xb=a("li"),Vge=a("strong"),UDo=o("squeezebert"),JDo=o(" \u2014 "),JO=a("a"),YDo=o("SqueezeBertForTokenClassification"),KDo=o(" (SqueezeBERT model)"),ZDo=l(),zb=a("li"),Xge=a("strong"),eGo=o("xlm"),oGo=o(" \u2014 "),YO=a("a"),rGo=o("XLMForTokenClassification"),tGo=o(" (XLM model)"),aGo=l(),Wb=a("li"),zge=a("strong"),nGo=o("xlm-roberta"),sGo=o(" \u2014 "),KO=a("a"),lGo=o("XLMRobertaForTokenClassification"),iGo=o(" (XLM-RoBERTa model)"),dGo=l(),Qb=a("li"),Wge=a("strong"),cGo=o("xlm-roberta-xl"),fGo=o(" \u2014 "),ZO=a("a"),mGo=o("XLMRobertaXLForTokenClassification"),gGo=o(" (XLM-RoBERTa-XL model)"),hGo=l(),Hb=a("li"),Qge=a("strong"),pGo=o("xlnet"),_Go=o(" \u2014 "),eV=a("a"),uGo=o("XLNetForTokenClassification"),bGo=o(" (XLNet model)"),vGo=l(),Ub=a("li"),Hge=a("strong"),FGo=o("yoso"),TGo=o(" \u2014 "),oV=a("a"),MGo=o("YosoForTokenClassification"),EGo=o(" (YOSO model)"),CGo=l(),Jb=a("p"),wGo=o("The model is set in evaluation mode by default using "),Uge=a("code"),AGo=o("model.eval()"),yGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),LGo=o("model.train()"),xGo=l(),F(Yb.$$.fragment),Wqe=l(),Yi=a("h2"),Kb=a("a"),Yge=a("span"),F(By.$$.fragment),$Go=l(),Kge=a("span"),kGo=o("AutoModelForQuestionAnswering"),Qqe=l(),qo=a("div"),F(Iy.$$.fragment),SGo=l(),Ki=a("p"),RGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rV=a("a"),PGo=o("from_pretrained()"),BGo=o(" class method or the "),tV=a("a"),IGo=o("from_config()"),qGo=o(` class
method.`),NGo=l(),qy=a("p"),jGo=o("This class cannot be instantiated directly using "),Zge=a("code"),DGo=o("__init__()"),GGo=o(" (throws an error)."),OGo=l(),mt=a("div"),F(Ny.$$.fragment),VGo=l(),ehe=a("p"),XGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zGo=l(),Zi=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),QGo=o("not"),HGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),UGo=o("from_pretrained()"),JGo=o(" to load the model weights."),YGo=l(),F(Zb.$$.fragment),KGo=l(),no=a("div"),F(jy.$$.fragment),ZGo=l(),rhe=a("p"),eOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oOo=l(),qa=a("p"),rOo=o("The model class to instantiate is selected based on the "),the=a("code"),tOo=o("model_type"),aOo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),lOo=o("pretrained_model_name_or_path"),iOo=o(":"),dOo=l(),V=a("ul"),ev=a("li"),she=a("strong"),cOo=o("albert"),fOo=o(" \u2014 "),nV=a("a"),mOo=o("AlbertForQuestionAnswering"),gOo=o(" (ALBERT model)"),hOo=l(),ov=a("li"),lhe=a("strong"),pOo=o("bart"),_Oo=o(" \u2014 "),sV=a("a"),uOo=o("BartForQuestionAnswering"),bOo=o(" (BART model)"),vOo=l(),rv=a("li"),ihe=a("strong"),FOo=o("bert"),TOo=o(" \u2014 "),lV=a("a"),MOo=o("BertForQuestionAnswering"),EOo=o(" (BERT model)"),COo=l(),tv=a("li"),dhe=a("strong"),wOo=o("big_bird"),AOo=o(" \u2014 "),iV=a("a"),yOo=o("BigBirdForQuestionAnswering"),LOo=o(" (BigBird model)"),xOo=l(),av=a("li"),che=a("strong"),$Oo=o("bigbird_pegasus"),kOo=o(" \u2014 "),dV=a("a"),SOo=o("BigBirdPegasusForQuestionAnswering"),ROo=o(" (BigBirdPegasus model)"),POo=l(),nv=a("li"),fhe=a("strong"),BOo=o("camembert"),IOo=o(" \u2014 "),cV=a("a"),qOo=o("CamembertForQuestionAnswering"),NOo=o(" (CamemBERT model)"),jOo=l(),sv=a("li"),mhe=a("strong"),DOo=o("canine"),GOo=o(" \u2014 "),fV=a("a"),OOo=o("CanineForQuestionAnswering"),VOo=o(" (Canine model)"),XOo=l(),lv=a("li"),ghe=a("strong"),zOo=o("convbert"),WOo=o(" \u2014 "),mV=a("a"),QOo=o("ConvBertForQuestionAnswering"),HOo=o(" (ConvBERT model)"),UOo=l(),iv=a("li"),hhe=a("strong"),JOo=o("data2vec-text"),YOo=o(" \u2014 "),gV=a("a"),KOo=o("Data2VecTextForQuestionAnswering"),ZOo=o(" (Data2VecText model)"),eVo=l(),dv=a("li"),phe=a("strong"),oVo=o("deberta"),rVo=o(" \u2014 "),hV=a("a"),tVo=o("DebertaForQuestionAnswering"),aVo=o(" (DeBERTa model)"),nVo=l(),cv=a("li"),_he=a("strong"),sVo=o("deberta-v2"),lVo=o(" \u2014 "),pV=a("a"),iVo=o("DebertaV2ForQuestionAnswering"),dVo=o(" (DeBERTa-v2 model)"),cVo=l(),fv=a("li"),uhe=a("strong"),fVo=o("distilbert"),mVo=o(" \u2014 "),_V=a("a"),gVo=o("DistilBertForQuestionAnswering"),hVo=o(" (DistilBERT model)"),pVo=l(),mv=a("li"),bhe=a("strong"),_Vo=o("electra"),uVo=o(" \u2014 "),uV=a("a"),bVo=o("ElectraForQuestionAnswering"),vVo=o(" (ELECTRA model)"),FVo=l(),gv=a("li"),vhe=a("strong"),TVo=o("flaubert"),MVo=o(" \u2014 "),bV=a("a"),EVo=o("FlaubertForQuestionAnsweringSimple"),CVo=o(" (FlauBERT model)"),wVo=l(),hv=a("li"),Fhe=a("strong"),AVo=o("fnet"),yVo=o(" \u2014 "),vV=a("a"),LVo=o("FNetForQuestionAnswering"),xVo=o(" (FNet model)"),$Vo=l(),pv=a("li"),The=a("strong"),kVo=o("funnel"),SVo=o(" \u2014 "),FV=a("a"),RVo=o("FunnelForQuestionAnswering"),PVo=o(" (Funnel Transformer model)"),BVo=l(),_v=a("li"),Mhe=a("strong"),IVo=o("gptj"),qVo=o(" \u2014 "),TV=a("a"),NVo=o("GPTJForQuestionAnswering"),jVo=o(" (GPT-J model)"),DVo=l(),uv=a("li"),Ehe=a("strong"),GVo=o("ibert"),OVo=o(" \u2014 "),MV=a("a"),VVo=o("IBertForQuestionAnswering"),XVo=o(" (I-BERT model)"),zVo=l(),bv=a("li"),Che=a("strong"),WVo=o("layoutlmv2"),QVo=o(" \u2014 "),EV=a("a"),HVo=o("LayoutLMv2ForQuestionAnswering"),UVo=o(" (LayoutLMv2 model)"),JVo=l(),vv=a("li"),whe=a("strong"),YVo=o("led"),KVo=o(" \u2014 "),CV=a("a"),ZVo=o("LEDForQuestionAnswering"),eXo=o(" (LED model)"),oXo=l(),Fv=a("li"),Ahe=a("strong"),rXo=o("longformer"),tXo=o(" \u2014 "),wV=a("a"),aXo=o("LongformerForQuestionAnswering"),nXo=o(" (Longformer model)"),sXo=l(),Tv=a("li"),yhe=a("strong"),lXo=o("lxmert"),iXo=o(" \u2014 "),AV=a("a"),dXo=o("LxmertForQuestionAnswering"),cXo=o(" (LXMERT model)"),fXo=l(),Mv=a("li"),Lhe=a("strong"),mXo=o("mbart"),gXo=o(" \u2014 "),yV=a("a"),hXo=o("MBartForQuestionAnswering"),pXo=o(" (mBART model)"),_Xo=l(),Ev=a("li"),xhe=a("strong"),uXo=o("megatron-bert"),bXo=o(" \u2014 "),LV=a("a"),vXo=o("MegatronBertForQuestionAnswering"),FXo=o(" (MegatronBert model)"),TXo=l(),Cv=a("li"),$he=a("strong"),MXo=o("mobilebert"),EXo=o(" \u2014 "),xV=a("a"),CXo=o("MobileBertForQuestionAnswering"),wXo=o(" (MobileBERT model)"),AXo=l(),wv=a("li"),khe=a("strong"),yXo=o("mpnet"),LXo=o(" \u2014 "),$V=a("a"),xXo=o("MPNetForQuestionAnswering"),$Xo=o(" (MPNet model)"),kXo=l(),Av=a("li"),She=a("strong"),SXo=o("nystromformer"),RXo=o(" \u2014 "),kV=a("a"),PXo=o("NystromformerForQuestionAnswering"),BXo=o(" (Nystromformer model)"),IXo=l(),yv=a("li"),Rhe=a("strong"),qXo=o("qdqbert"),NXo=o(" \u2014 "),SV=a("a"),jXo=o("QDQBertForQuestionAnswering"),DXo=o(" (QDQBert model)"),GXo=l(),Lv=a("li"),Phe=a("strong"),OXo=o("reformer"),VXo=o(" \u2014 "),RV=a("a"),XXo=o("ReformerForQuestionAnswering"),zXo=o(" (Reformer model)"),WXo=l(),xv=a("li"),Bhe=a("strong"),QXo=o("rembert"),HXo=o(" \u2014 "),PV=a("a"),UXo=o("RemBertForQuestionAnswering"),JXo=o(" (RemBERT model)"),YXo=l(),$v=a("li"),Ihe=a("strong"),KXo=o("roberta"),ZXo=o(" \u2014 "),BV=a("a"),ezo=o("RobertaForQuestionAnswering"),ozo=o(" (RoBERTa model)"),rzo=l(),kv=a("li"),qhe=a("strong"),tzo=o("roformer"),azo=o(" \u2014 "),IV=a("a"),nzo=o("RoFormerForQuestionAnswering"),szo=o(" (RoFormer model)"),lzo=l(),Sv=a("li"),Nhe=a("strong"),izo=o("splinter"),dzo=o(" \u2014 "),qV=a("a"),czo=o("SplinterForQuestionAnswering"),fzo=o(" (Splinter model)"),mzo=l(),Rv=a("li"),jhe=a("strong"),gzo=o("squeezebert"),hzo=o(" \u2014 "),NV=a("a"),pzo=o("SqueezeBertForQuestionAnswering"),_zo=o(" (SqueezeBERT model)"),uzo=l(),Pv=a("li"),Dhe=a("strong"),bzo=o("xlm"),vzo=o(" \u2014 "),jV=a("a"),Fzo=o("XLMForQuestionAnsweringSimple"),Tzo=o(" (XLM model)"),Mzo=l(),Bv=a("li"),Ghe=a("strong"),Ezo=o("xlm-roberta"),Czo=o(" \u2014 "),DV=a("a"),wzo=o("XLMRobertaForQuestionAnswering"),Azo=o(" (XLM-RoBERTa model)"),yzo=l(),Iv=a("li"),Ohe=a("strong"),Lzo=o("xlm-roberta-xl"),xzo=o(" \u2014 "),GV=a("a"),$zo=o("XLMRobertaXLForQuestionAnswering"),kzo=o(" (XLM-RoBERTa-XL model)"),Szo=l(),qv=a("li"),Vhe=a("strong"),Rzo=o("xlnet"),Pzo=o(" \u2014 "),OV=a("a"),Bzo=o("XLNetForQuestionAnsweringSimple"),Izo=o(" (XLNet model)"),qzo=l(),Nv=a("li"),Xhe=a("strong"),Nzo=o("yoso"),jzo=o(" \u2014 "),VV=a("a"),Dzo=o("YosoForQuestionAnswering"),Gzo=o(" (YOSO model)"),Ozo=l(),jv=a("p"),Vzo=o("The model is set in evaluation mode by default using "),zhe=a("code"),Xzo=o("model.eval()"),zzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),Wzo=o("model.train()"),Qzo=l(),F(Dv.$$.fragment),Hqe=l(),ed=a("h2"),Gv=a("a"),Qhe=a("span"),F(Dy.$$.fragment),Hzo=l(),Hhe=a("span"),Uzo=o("AutoModelForTableQuestionAnswering"),Uqe=l(),No=a("div"),F(Gy.$$.fragment),Jzo=l(),od=a("p"),Yzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XV=a("a"),Kzo=o("from_pretrained()"),Zzo=o(" class method or the "),zV=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),Oy=a("p"),tWo=o("This class cannot be instantiated directly using "),Uhe=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),gt=a("div"),F(Vy.$$.fragment),lWo=l(),Jhe=a("p"),iWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dWo=l(),rd=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),fWo=o("not"),mWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),pWo=l(),F(Ov.$$.fragment),_Wo=l(),so=a("div"),F(Xy.$$.fragment),uWo=l(),Khe=a("p"),bWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vWo=l(),Na=a("p"),FWo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),TWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),yWo=l(),rpe=a("ul"),Vv=a("li"),tpe=a("strong"),LWo=o("tapas"),xWo=o(" \u2014 "),QV=a("a"),$Wo=o("TapasForQuestionAnswering"),kWo=o(" (TAPAS model)"),SWo=l(),Xv=a("p"),RWo=o("The model is set in evaluation mode by default using "),ape=a("code"),PWo=o("model.eval()"),BWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),IWo=o("model.train()"),qWo=l(),F(zv.$$.fragment),Jqe=l(),td=a("h2"),Wv=a("a"),spe=a("span"),F(zy.$$.fragment),NWo=l(),lpe=a("span"),jWo=o("AutoModelForImageClassification"),Yqe=l(),jo=a("div"),F(Wy.$$.fragment),DWo=l(),ad=a("p"),GWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HV=a("a"),OWo=o("from_pretrained()"),VWo=o(" class method or the "),UV=a("a"),XWo=o("from_config()"),zWo=o(` class
method.`),WWo=l(),Qy=a("p"),QWo=o("This class cannot be instantiated directly using "),ipe=a("code"),HWo=o("__init__()"),UWo=o(" (throws an error)."),JWo=l(),ht=a("div"),F(Hy.$$.fragment),YWo=l(),dpe=a("p"),KWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZWo=l(),nd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(Qv.$$.fragment),sQo=l(),lo=a("div"),F(Uy.$$.fragment),lQo=l(),fpe=a("p"),iQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dQo=l(),ja=a("p"),cQo=o("The model class to instantiate is selected based on the "),mpe=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),pQo=o("pretrained_model_name_or_path"),_Qo=o(":"),uQo=l(),Fe=a("ul"),Hv=a("li"),ppe=a("strong"),bQo=o("beit"),vQo=o(" \u2014 "),YV=a("a"),FQo=o("BeitForImageClassification"),TQo=o(" (BEiT model)"),MQo=l(),Uv=a("li"),_pe=a("strong"),EQo=o("convnext"),CQo=o(" \u2014 "),KV=a("a"),wQo=o("ConvNextForImageClassification"),AQo=o(" (ConvNext model)"),yQo=l(),Jv=a("li"),upe=a("strong"),LQo=o("cvt"),xQo=o(" \u2014 "),ZV=a("a"),$Qo=o("CvtForImageClassification"),kQo=o(" (CvT model)"),SQo=l(),Yv=a("li"),bpe=a("strong"),RQo=o("data2vec-vision"),PQo=o(" \u2014 "),eX=a("a"),BQo=o("Data2VecVisionForImageClassification"),IQo=o(" (Data2VecVision model)"),qQo=l(),Ps=a("li"),vpe=a("strong"),NQo=o("deit"),jQo=o(" \u2014 "),oX=a("a"),DQo=o("DeiTForImageClassification"),GQo=o(" or "),rX=a("a"),OQo=o("DeiTForImageClassificationWithTeacher"),VQo=o(" (DeiT model)"),XQo=l(),Kv=a("li"),Fpe=a("strong"),zQo=o("imagegpt"),WQo=o(" \u2014 "),tX=a("a"),QQo=o("ImageGPTForImageClassification"),HQo=o(" (ImageGPT model)"),UQo=l(),pt=a("li"),Tpe=a("strong"),JQo=o("perceiver"),YQo=o(" \u2014 "),aX=a("a"),KQo=o("PerceiverForImageClassificationLearned"),ZQo=o(" or "),nX=a("a"),eHo=o("PerceiverForImageClassificationFourier"),oHo=o(" or "),sX=a("a"),rHo=o("PerceiverForImageClassificationConvProcessing"),tHo=o(" (Perceiver model)"),aHo=l(),Zv=a("li"),Mpe=a("strong"),nHo=o("poolformer"),sHo=o(" \u2014 "),lX=a("a"),lHo=o("PoolFormerForImageClassification"),iHo=o(" (PoolFormer model)"),dHo=l(),eF=a("li"),Epe=a("strong"),cHo=o("regnet"),fHo=o(" \u2014 "),iX=a("a"),mHo=o("RegNetForImageClassification"),gHo=o(" (RegNet model)"),hHo=l(),oF=a("li"),Cpe=a("strong"),pHo=o("resnet"),_Ho=o(" \u2014 "),dX=a("a"),uHo=o("ResNetForImageClassification"),bHo=o(" (ResNet model)"),vHo=l(),rF=a("li"),wpe=a("strong"),FHo=o("segformer"),THo=o(" \u2014 "),cX=a("a"),MHo=o("SegformerForImageClassification"),EHo=o(" (SegFormer model)"),CHo=l(),tF=a("li"),Ape=a("strong"),wHo=o("swin"),AHo=o(" \u2014 "),fX=a("a"),yHo=o("SwinForImageClassification"),LHo=o(" (Swin model)"),xHo=l(),aF=a("li"),ype=a("strong"),$Ho=o("van"),kHo=o(" \u2014 "),mX=a("a"),SHo=o("VanForImageClassification"),RHo=o(" (VAN model)"),PHo=l(),nF=a("li"),Lpe=a("strong"),BHo=o("vit"),IHo=o(" \u2014 "),gX=a("a"),qHo=o("ViTForImageClassification"),NHo=o(" (ViT model)"),jHo=l(),sF=a("p"),DHo=o("The model is set in evaluation mode by default using "),xpe=a("code"),GHo=o("model.eval()"),OHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),VHo=o("model.train()"),XHo=l(),F(lF.$$.fragment),Kqe=l(),sd=a("h2"),iF=a("a"),kpe=a("span"),F(Jy.$$.fragment),zHo=l(),Spe=a("span"),WHo=o("AutoModelForVision2Seq"),Zqe=l(),Do=a("div"),F(Yy.$$.fragment),QHo=l(),ld=a("p"),HHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hX=a("a"),UHo=o("from_pretrained()"),JHo=o(" class method or the "),pX=a("a"),YHo=o("from_config()"),KHo=o(` class
method.`),ZHo=l(),Ky=a("p"),eUo=o("This class cannot be instantiated directly using "),Rpe=a("code"),oUo=o("__init__()"),rUo=o(" (throws an error)."),tUo=l(),_t=a("div"),F(Zy.$$.fragment),aUo=l(),Ppe=a("p"),nUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sUo=l(),id=a("p"),lUo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),iUo=o("not"),dUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),cUo=o("from_pretrained()"),fUo=o(" to load the model weights."),mUo=l(),F(dF.$$.fragment),gUo=l(),io=a("div"),F(eL.$$.fragment),hUo=l(),Ipe=a("p"),pUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Uo=l(),Da=a("p"),uUo=o("The model class to instantiate is selected based on the "),qpe=a("code"),bUo=o("model_type"),vUo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(":"),CUo=l(),Dpe=a("ul"),cF=a("li"),Gpe=a("strong"),wUo=o("vision-encoder-decoder"),AUo=o(" \u2014 "),uX=a("a"),yUo=o("VisionEncoderDecoderModel"),LUo=o(" (Vision Encoder decoder model)"),xUo=l(),fF=a("p"),$Uo=o("The model is set in evaluation mode by default using "),Ope=a("code"),kUo=o("model.eval()"),SUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),RUo=o("model.train()"),PUo=l(),F(mF.$$.fragment),eNe=l(),dd=a("h2"),gF=a("a"),Xpe=a("span"),F(oL.$$.fragment),BUo=l(),zpe=a("span"),IUo=o("AutoModelForAudioClassification"),oNe=l(),Go=a("div"),F(rL.$$.fragment),qUo=l(),cd=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bX=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),vX=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),tL=a("p"),XUo=o("This class cannot be instantiated directly using "),Wpe=a("code"),zUo=o("__init__()"),WUo=o(" (throws an error)."),QUo=l(),ut=a("div"),F(aL.$$.fragment),HUo=l(),Qpe=a("p"),UUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JUo=l(),fd=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),F(hF.$$.fragment),tJo=l(),co=a("div"),F(nL.$$.fragment),aJo=l(),Upe=a("p"),nJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),sJo=l(),Ga=a("p"),lJo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),Se=a("ul"),pF=a("li"),Zpe=a("strong"),pJo=o("data2vec-audio"),_Jo=o(" \u2014 "),TX=a("a"),uJo=o("Data2VecAudioForSequenceClassification"),bJo=o(" (Data2VecAudio model)"),vJo=l(),_F=a("li"),e_e=a("strong"),FJo=o("hubert"),TJo=o(" \u2014 "),MX=a("a"),MJo=o("HubertForSequenceClassification"),EJo=o(" (Hubert model)"),CJo=l(),uF=a("li"),o_e=a("strong"),wJo=o("sew"),AJo=o(" \u2014 "),EX=a("a"),yJo=o("SEWForSequenceClassification"),LJo=o(" (SEW model)"),xJo=l(),bF=a("li"),r_e=a("strong"),$Jo=o("sew-d"),kJo=o(" \u2014 "),CX=a("a"),SJo=o("SEWDForSequenceClassification"),RJo=o(" (SEW-D model)"),PJo=l(),vF=a("li"),t_e=a("strong"),BJo=o("unispeech"),IJo=o(" \u2014 "),wX=a("a"),qJo=o("UniSpeechForSequenceClassification"),NJo=o(" (UniSpeech model)"),jJo=l(),FF=a("li"),a_e=a("strong"),DJo=o("unispeech-sat"),GJo=o(" \u2014 "),AX=a("a"),OJo=o("UniSpeechSatForSequenceClassification"),VJo=o(" (UniSpeechSat model)"),XJo=l(),TF=a("li"),n_e=a("strong"),zJo=o("wav2vec2"),WJo=o(" \u2014 "),yX=a("a"),QJo=o("Wav2Vec2ForSequenceClassification"),HJo=o(" (Wav2Vec2 model)"),UJo=l(),MF=a("li"),s_e=a("strong"),JJo=o("wav2vec2-conformer"),YJo=o(" \u2014 "),LX=a("a"),KJo=o("Wav2Vec2ConformerForSequenceClassification"),ZJo=o(" (Wav2Vec2-Conformer model)"),eYo=l(),EF=a("li"),l_e=a("strong"),oYo=o("wavlm"),rYo=o(" \u2014 "),xX=a("a"),tYo=o("WavLMForSequenceClassification"),aYo=o(" (WavLM model)"),nYo=l(),CF=a("p"),sYo=o("The model is set in evaluation mode by default using "),i_e=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),dYo=o("model.train()"),cYo=l(),F(wF.$$.fragment),rNe=l(),md=a("h2"),AF=a("a"),c_e=a("span"),F(sL.$$.fragment),fYo=l(),f_e=a("span"),mYo=o("AutoModelForAudioFrameClassification"),tNe=l(),Oo=a("div"),F(lL.$$.fragment),gYo=l(),gd=a("p"),hYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$X=a("a"),pYo=o("from_pretrained()"),_Yo=o(" class method or the "),kX=a("a"),uYo=o("from_config()"),bYo=o(` class
method.`),vYo=l(),iL=a("p"),FYo=o("This class cannot be instantiated directly using "),m_e=a("code"),TYo=o("__init__()"),MYo=o(" (throws an error)."),EYo=l(),bt=a("div"),F(dL.$$.fragment),CYo=l(),g_e=a("p"),wYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AYo=l(),hd=a("p"),yYo=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),LYo=o("not"),xYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),$Yo=o("from_pretrained()"),kYo=o(" to load the model weights."),SYo=l(),F(yF.$$.fragment),RYo=l(),fo=a("div"),F(cL.$$.fragment),PYo=l(),p_e=a("p"),BYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IYo=l(),Oa=a("p"),qYo=o("The model class to instantiate is selected based on the "),__e=a("code"),NYo=o("model_type"),jYo=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(":"),XYo=l(),Kr=a("ul"),LF=a("li"),v_e=a("strong"),zYo=o("data2vec-audio"),WYo=o(" \u2014 "),RX=a("a"),QYo=o("Data2VecAudioForAudioFrameClassification"),HYo=o(" (Data2VecAudio model)"),UYo=l(),xF=a("li"),F_e=a("strong"),JYo=o("unispeech-sat"),YYo=o(" \u2014 "),PX=a("a"),KYo=o("UniSpeechSatForAudioFrameClassification"),ZYo=o(" (UniSpeechSat model)"),eKo=l(),$F=a("li"),T_e=a("strong"),oKo=o("wav2vec2"),rKo=o(" \u2014 "),BX=a("a"),tKo=o("Wav2Vec2ForAudioFrameClassification"),aKo=o(" (Wav2Vec2 model)"),nKo=l(),kF=a("li"),M_e=a("strong"),sKo=o("wav2vec2-conformer"),lKo=o(" \u2014 "),IX=a("a"),iKo=o("Wav2Vec2ConformerForAudioFrameClassification"),dKo=o(" (Wav2Vec2-Conformer model)"),cKo=l(),SF=a("li"),E_e=a("strong"),fKo=o("wavlm"),mKo=o(" \u2014 "),qX=a("a"),gKo=o("WavLMForAudioFrameClassification"),hKo=o(" (WavLM model)"),pKo=l(),RF=a("p"),_Ko=o("The model is set in evaluation mode by default using "),C_e=a("code"),uKo=o("model.eval()"),bKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),vKo=o("model.train()"),FKo=l(),F(PF.$$.fragment),aNe=l(),pd=a("h2"),BF=a("a"),A_e=a("span"),F(fL.$$.fragment),TKo=l(),y_e=a("span"),MKo=o("AutoModelForCTC"),nNe=l(),Vo=a("div"),F(mL.$$.fragment),EKo=l(),_d=a("p"),CKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NX=a("a"),wKo=o("from_pretrained()"),AKo=o(" class method or the "),jX=a("a"),yKo=o("from_config()"),LKo=o(` class
method.`),xKo=l(),gL=a("p"),$Ko=o("This class cannot be instantiated directly using "),L_e=a("code"),kKo=o("__init__()"),SKo=o(" (throws an error)."),RKo=l(),vt=a("div"),F(hL.$$.fragment),PKo=l(),x_e=a("p"),BKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IKo=l(),ud=a("p"),qKo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),NKo=o("not"),jKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),DKo=o("from_pretrained()"),GKo=o(" to load the model weights."),OKo=l(),F(IF.$$.fragment),VKo=l(),mo=a("div"),F(pL.$$.fragment),XKo=l(),k_e=a("p"),zKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),WKo=l(),Va=a("p"),QKo=o("The model class to instantiate is selected based on the "),S_e=a("code"),HKo=o("model_type"),UKo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),JKo=o("pretrained_model_name_or_path"),YKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),KKo=o("pretrained_model_name_or_path"),ZKo=o(":"),eZo=l(),Re=a("ul"),qF=a("li"),B_e=a("strong"),oZo=o("data2vec-audio"),rZo=o(" \u2014 "),GX=a("a"),tZo=o("Data2VecAudioForCTC"),aZo=o(" (Data2VecAudio model)"),nZo=l(),NF=a("li"),I_e=a("strong"),sZo=o("hubert"),lZo=o(" \u2014 "),OX=a("a"),iZo=o("HubertForCTC"),dZo=o(" (Hubert model)"),cZo=l(),jF=a("li"),q_e=a("strong"),fZo=o("sew"),mZo=o(" \u2014 "),VX=a("a"),gZo=o("SEWForCTC"),hZo=o(" (SEW model)"),pZo=l(),DF=a("li"),N_e=a("strong"),_Zo=o("sew-d"),uZo=o(" \u2014 "),XX=a("a"),bZo=o("SEWDForCTC"),vZo=o(" (SEW-D model)"),FZo=l(),GF=a("li"),j_e=a("strong"),TZo=o("unispeech"),MZo=o(" \u2014 "),zX=a("a"),EZo=o("UniSpeechForCTC"),CZo=o(" (UniSpeech model)"),wZo=l(),OF=a("li"),D_e=a("strong"),AZo=o("unispeech-sat"),yZo=o(" \u2014 "),WX=a("a"),LZo=o("UniSpeechSatForCTC"),xZo=o(" (UniSpeechSat model)"),$Zo=l(),VF=a("li"),G_e=a("strong"),kZo=o("wav2vec2"),SZo=o(" \u2014 "),QX=a("a"),RZo=o("Wav2Vec2ForCTC"),PZo=o(" (Wav2Vec2 model)"),BZo=l(),XF=a("li"),O_e=a("strong"),IZo=o("wav2vec2-conformer"),qZo=o(" \u2014 "),HX=a("a"),NZo=o("Wav2Vec2ConformerForCTC"),jZo=o(" (Wav2Vec2-Conformer model)"),DZo=l(),zF=a("li"),V_e=a("strong"),GZo=o("wavlm"),OZo=o(" \u2014 "),UX=a("a"),VZo=o("WavLMForCTC"),XZo=o(" (WavLM model)"),zZo=l(),WF=a("p"),WZo=o("The model is set in evaluation mode by default using "),X_e=a("code"),QZo=o("model.eval()"),HZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),UZo=o("model.train()"),JZo=l(),F(QF.$$.fragment),sNe=l(),bd=a("h2"),HF=a("a"),W_e=a("span"),F(_L.$$.fragment),YZo=l(),Q_e=a("span"),KZo=o("AutoModelForSpeechSeq2Seq"),lNe=l(),Xo=a("div"),F(uL.$$.fragment),ZZo=l(),vd=a("p"),eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JX=a("a"),oer=o("from_pretrained()"),rer=o(" class method or the "),YX=a("a"),ter=o("from_config()"),aer=o(` class
method.`),ner=l(),bL=a("p"),ser=o("This class cannot be instantiated directly using "),H_e=a("code"),ler=o("__init__()"),ier=o(" (throws an error)."),der=l(),Ft=a("div"),F(vL.$$.fragment),cer=l(),U_e=a("p"),fer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mer=l(),Fd=a("p"),ger=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),her=o("not"),per=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),_er=o("from_pretrained()"),uer=o(" to load the model weights."),ber=l(),F(UF.$$.fragment),ver=l(),go=a("div"),F(FL.$$.fragment),Fer=l(),Y_e=a("p"),Ter=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mer=l(),Xa=a("p"),Eer=o("The model class to instantiate is selected based on the "),K_e=a("code"),Cer=o("model_type"),wer=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),Aer=o("pretrained_model_name_or_path"),yer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),Ler=o("pretrained_model_name_or_path"),xer=o(":"),$er=l(),TL=a("ul"),JF=a("li"),oue=a("strong"),ker=o("speech-encoder-decoder"),Ser=o(" \u2014 "),ZX=a("a"),Rer=o("SpeechEncoderDecoderModel"),Per=o(" (Speech Encoder decoder model)"),Ber=l(),YF=a("li"),rue=a("strong"),Ier=o("speech_to_text"),qer=o(" \u2014 "),ez=a("a"),Ner=o("Speech2TextForConditionalGeneration"),jer=o(" (Speech2Text model)"),Der=l(),KF=a("p"),Ger=o("The model is set in evaluation mode by default using "),tue=a("code"),Oer=o("model.eval()"),Ver=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),Xer=o("model.train()"),zer=l(),F(ZF.$$.fragment),iNe=l(),Td=a("h2"),eT=a("a"),nue=a("span"),F(ML.$$.fragment),Wer=l(),sue=a("span"),Qer=o("AutoModelForAudioXVector"),dNe=l(),zo=a("div"),F(EL.$$.fragment),Her=l(),Md=a("p"),Uer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oz=a("a"),Jer=o("from_pretrained()"),Yer=o(" class method or the "),rz=a("a"),Ker=o("from_config()"),Zer=o(` class
method.`),eor=l(),CL=a("p"),oor=o("This class cannot be instantiated directly using "),lue=a("code"),ror=o("__init__()"),tor=o(" (throws an error)."),aor=l(),Tt=a("div"),F(wL.$$.fragment),nor=l(),iue=a("p"),sor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lor=l(),Ed=a("p"),ior=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),dor=o("not"),cor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),mor=o("from_pretrained()"),gor=o(" to load the model weights."),hor=l(),F(oT.$$.fragment),por=l(),ho=a("div"),F(AL.$$.fragment),_or=l(),cue=a("p"),uor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bor=l(),za=a("p"),vor=o("The model class to instantiate is selected based on the "),fue=a("code"),For=o("model_type"),Tor=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),Cor=o("pretrained_model_name_or_path"),wor=o(":"),Aor=l(),Zr=a("ul"),rT=a("li"),hue=a("strong"),yor=o("data2vec-audio"),Lor=o(" \u2014 "),az=a("a"),xor=o("Data2VecAudioForXVector"),$or=o(" (Data2VecAudio model)"),kor=l(),tT=a("li"),pue=a("strong"),Sor=o("unispeech-sat"),Ror=o(" \u2014 "),nz=a("a"),Por=o("UniSpeechSatForXVector"),Bor=o(" (UniSpeechSat model)"),Ior=l(),aT=a("li"),_ue=a("strong"),qor=o("wav2vec2"),Nor=o(" \u2014 "),sz=a("a"),jor=o("Wav2Vec2ForXVector"),Dor=o(" (Wav2Vec2 model)"),Gor=l(),nT=a("li"),uue=a("strong"),Oor=o("wav2vec2-conformer"),Vor=o(" \u2014 "),lz=a("a"),Xor=o("Wav2Vec2ConformerForXVector"),zor=o(" (Wav2Vec2-Conformer model)"),Wor=l(),sT=a("li"),bue=a("strong"),Qor=o("wavlm"),Hor=o(" \u2014 "),iz=a("a"),Uor=o("WavLMForXVector"),Jor=o(" (WavLM model)"),Yor=l(),lT=a("p"),Kor=o("The model is set in evaluation mode by default using "),vue=a("code"),Zor=o("model.eval()"),err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),orr=o("model.train()"),rrr=l(),F(iT.$$.fragment),cNe=l(),Cd=a("h2"),dT=a("a"),Tue=a("span"),F(yL.$$.fragment),trr=l(),Mue=a("span"),arr=o("AutoModelForMaskedImageModeling"),fNe=l(),Wo=a("div"),F(LL.$$.fragment),nrr=l(),wd=a("p"),srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dz=a("a"),lrr=o("from_pretrained()"),irr=o(" class method or the "),cz=a("a"),drr=o("from_config()"),crr=o(` class
method.`),frr=l(),xL=a("p"),mrr=o("This class cannot be instantiated directly using "),Eue=a("code"),grr=o("__init__()"),hrr=o(" (throws an error)."),prr=l(),Mt=a("div"),F($L.$$.fragment),_rr=l(),Cue=a("p"),urr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),brr=l(),Ad=a("p"),vrr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Frr=o("not"),Trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),Mrr=o("from_pretrained()"),Err=o(" to load the model weights."),Crr=l(),F(cT.$$.fragment),wrr=l(),po=a("div"),F(kL.$$.fragment),Arr=l(),Aue=a("p"),yrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lrr=l(),Wa=a("p"),xrr=o("The model class to instantiate is selected based on the "),yue=a("code"),$rr=o("model_type"),krr=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(":"),Irr=l(),yd=a("ul"),fT=a("li"),$ue=a("strong"),qrr=o("deit"),Nrr=o(" \u2014 "),mz=a("a"),jrr=o("DeiTForMaskedImageModeling"),Drr=o(" (DeiT model)"),Grr=l(),mT=a("li"),kue=a("strong"),Orr=o("swin"),Vrr=o(" \u2014 "),gz=a("a"),Xrr=o("SwinForMaskedImageModeling"),zrr=o(" (Swin model)"),Wrr=l(),gT=a("li"),Sue=a("strong"),Qrr=o("vit"),Hrr=o(" \u2014 "),hz=a("a"),Urr=o("ViTForMaskedImageModeling"),Jrr=o(" (ViT model)"),Yrr=l(),hT=a("p"),Krr=o("The model is set in evaluation mode by default using "),Rue=a("code"),Zrr=o("model.eval()"),etr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),otr=o("model.train()"),rtr=l(),F(pT.$$.fragment),mNe=l(),Ld=a("h2"),_T=a("a"),Bue=a("span"),F(SL.$$.fragment),ttr=l(),Iue=a("span"),atr=o("AutoModelForObjectDetection"),gNe=l(),Qo=a("div"),F(RL.$$.fragment),ntr=l(),xd=a("p"),str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pz=a("a"),ltr=o("from_pretrained()"),itr=o(" class method or the "),_z=a("a"),dtr=o("from_config()"),ctr=o(` class
method.`),ftr=l(),PL=a("p"),mtr=o("This class cannot be instantiated directly using "),que=a("code"),gtr=o("__init__()"),htr=o(" (throws an error)."),ptr=l(),Et=a("div"),F(BL.$$.fragment),_tr=l(),Nue=a("p"),utr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),btr=l(),$d=a("p"),vtr=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),Ftr=o("not"),Ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Mtr=o("from_pretrained()"),Etr=o(" to load the model weights."),Ctr=l(),F(uT.$$.fragment),wtr=l(),_o=a("div"),F(IL.$$.fragment),Atr=l(),Due=a("p"),ytr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ltr=l(),Qa=a("p"),xtr=o("The model class to instantiate is selected based on the "),Gue=a("code"),$tr=o("model_type"),ktr=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Str=o("pretrained_model_name_or_path"),Rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),Ptr=o("pretrained_model_name_or_path"),Btr=o(":"),Itr=l(),qL=a("ul"),bT=a("li"),Xue=a("strong"),qtr=o("detr"),Ntr=o(" \u2014 "),bz=a("a"),jtr=o("DetrForObjectDetection"),Dtr=o(" (DETR model)"),Gtr=l(),vT=a("li"),zue=a("strong"),Otr=o("yolos"),Vtr=o(" \u2014 "),vz=a("a"),Xtr=o("YolosForObjectDetection"),ztr=o(" (YOLOS model)"),Wtr=l(),FT=a("p"),Qtr=o("The model is set in evaluation mode by default using "),Wue=a("code"),Htr=o("model.eval()"),Utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Jtr=o("model.train()"),Ytr=l(),F(TT.$$.fragment),hNe=l(),kd=a("h2"),MT=a("a"),Hue=a("span"),F(NL.$$.fragment),Ktr=l(),Uue=a("span"),Ztr=o("AutoModelForImageSegmentation"),pNe=l(),Ho=a("div"),F(jL.$$.fragment),ear=l(),Sd=a("p"),oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fz=a("a"),rar=o("from_pretrained()"),tar=o(" class method or the "),Tz=a("a"),aar=o("from_config()"),nar=o(` class
method.`),sar=l(),DL=a("p"),lar=o("This class cannot be instantiated directly using "),Jue=a("code"),iar=o("__init__()"),dar=o(" (throws an error)."),car=l(),Ct=a("div"),F(GL.$$.fragment),far=l(),Yue=a("p"),mar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gar=l(),Rd=a("p"),har=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),par=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),uar=o("from_pretrained()"),bar=o(" to load the model weights."),Far=l(),F(ET.$$.fragment),Tar=l(),uo=a("div"),F(OL.$$.fragment),Mar=l(),Zue=a("p"),Ear=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Car=l(),Ha=a("p"),war=o("The model class to instantiate is selected based on the "),e2e=a("code"),Aar=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(":"),Sar=l(),t2e=a("ul"),CT=a("li"),a2e=a("strong"),Rar=o("detr"),Par=o(" \u2014 "),Ez=a("a"),Bar=o("DetrForSegmentation"),Iar=o(" (DETR model)"),qar=l(),wT=a("p"),Nar=o("The model is set in evaluation mode by default using "),n2e=a("code"),jar=o("model.eval()"),Dar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),Gar=o("model.train()"),Oar=l(),F(AT.$$.fragment),_Ne=l(),Pd=a("h2"),yT=a("a"),l2e=a("span"),F(VL.$$.fragment),Var=l(),i2e=a("span"),Xar=o("AutoModelForSemanticSegmentation"),uNe=l(),Uo=a("div"),F(XL.$$.fragment),zar=l(),Bd=a("p"),War=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cz=a("a"),Qar=o("from_pretrained()"),Har=o(" class method or the "),wz=a("a"),Uar=o("from_config()"),Jar=o(` class
method.`),Yar=l(),zL=a("p"),Kar=o("This class cannot be instantiated directly using "),d2e=a("code"),Zar=o("__init__()"),enr=o(" (throws an error)."),onr=l(),wt=a("div"),F(WL.$$.fragment),rnr=l(),c2e=a("p"),tnr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),anr=l(),Id=a("p"),nnr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),snr=o("not"),lnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),inr=o("from_pretrained()"),dnr=o(" to load the model weights."),cnr=l(),F(LT.$$.fragment),fnr=l(),bo=a("div"),F(QL.$$.fragment),mnr=l(),m2e=a("p"),gnr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hnr=l(),Ua=a("p"),pnr=o("The model class to instantiate is selected based on the "),g2e=a("code"),_nr=o("model_type"),unr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),bnr=o("pretrained_model_name_or_path"),vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(":"),Mnr=l(),Ja=a("ul"),xT=a("li"),_2e=a("strong"),Enr=o("beit"),Cnr=o(" \u2014 "),yz=a("a"),wnr=o("BeitForSemanticSegmentation"),Anr=o(" (BEiT model)"),ynr=l(),$T=a("li"),u2e=a("strong"),Lnr=o("data2vec-vision"),xnr=o(" \u2014 "),Lz=a("a"),$nr=o("Data2VecVisionForSemanticSegmentation"),knr=o(" (Data2VecVision model)"),Snr=l(),kT=a("li"),b2e=a("strong"),Rnr=o("dpt"),Pnr=o(" \u2014 "),xz=a("a"),Bnr=o("DPTForSemanticSegmentation"),Inr=o(" (DPT model)"),qnr=l(),ST=a("li"),v2e=a("strong"),Nnr=o("segformer"),jnr=o(" \u2014 "),$z=a("a"),Dnr=o("SegformerForSemanticSegmentation"),Gnr=o(" (SegFormer model)"),Onr=l(),RT=a("p"),Vnr=o("The model is set in evaluation mode by default using "),F2e=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),Wnr=o("model.train()"),Qnr=l(),F(PT.$$.fragment),bNe=l(),qd=a("h2"),BT=a("a"),M2e=a("span"),F(HL.$$.fragment),Hnr=l(),E2e=a("span"),Unr=o("AutoModelForInstanceSegmentation"),vNe=l(),Jo=a("div"),F(UL.$$.fragment),Jnr=l(),Nd=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kz=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),Sz=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),JL=a("p"),tsr=o("This class cannot be instantiated directly using "),C2e=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),At=a("div"),F(YL.$$.fragment),lsr=l(),w2e=a("p"),isr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dsr=l(),jd=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),F(IT.$$.fragment),_sr=l(),vo=a("div"),F(KL.$$.fragment),usr=l(),y2e=a("p"),bsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vsr=l(),Ya=a("p"),Fsr=o("The model class to instantiate is selected based on the "),L2e=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),ysr=l(),k2e=a("ul"),qT=a("li"),S2e=a("strong"),Lsr=o("maskformer"),xsr=o(" \u2014 "),Pz=a("a"),$sr=o("MaskFormerForInstanceSegmentation"),ksr=o(" (MaskFormer model)"),Ssr=l(),NT=a("p"),Rsr=o("The model is set in evaluation mode by default using "),R2e=a("code"),Psr=o("model.eval()"),Bsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),Isr=o("model.train()"),qsr=l(),F(jT.$$.fragment),FNe=l(),Dd=a("h2"),DT=a("a"),B2e=a("span"),F(ZL.$$.fragment),Nsr=l(),I2e=a("span"),jsr=o("TFAutoModel"),TNe=l(),Yo=a("div"),F(e8.$$.fragment),Dsr=l(),Gd=a("p"),Gsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bz=a("a"),Osr=o("from_pretrained()"),Vsr=o(" class method or the "),Iz=a("a"),Xsr=o("from_config()"),zsr=o(` class
method.`),Wsr=l(),o8=a("p"),Qsr=o("This class cannot be instantiated directly using "),q2e=a("code"),Hsr=o("__init__()"),Usr=o(" (throws an error)."),Jsr=l(),yt=a("div"),F(r8.$$.fragment),Ysr=l(),N2e=a("p"),Ksr=o("Instantiates one of the base model classes of the library from a configuration."),Zsr=l(),Od=a("p"),elr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),olr=o("not"),rlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),tlr=o("from_pretrained()"),alr=o(" to load the model weights."),nlr=l(),F(GT.$$.fragment),slr=l(),wr=a("div"),F(t8.$$.fragment),llr=l(),D2e=a("p"),ilr=o("Instantiate one of the base model classes of the library from a pretrained model."),dlr=l(),Ka=a("p"),clr=o("The model class to instantiate is selected based on the "),G2e=a("code"),flr=o("model_type"),mlr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(":"),ulr=l(),q=a("ul"),OT=a("li"),X2e=a("strong"),blr=o("albert"),vlr=o(" \u2014 "),Nz=a("a"),Flr=o("TFAlbertModel"),Tlr=o(" (ALBERT model)"),Mlr=l(),VT=a("li"),z2e=a("strong"),Elr=o("bart"),Clr=o(" \u2014 "),jz=a("a"),wlr=o("TFBartModel"),Alr=o(" (BART model)"),ylr=l(),XT=a("li"),W2e=a("strong"),Llr=o("bert"),xlr=o(" \u2014 "),Dz=a("a"),$lr=o("TFBertModel"),klr=o(" (BERT model)"),Slr=l(),zT=a("li"),Q2e=a("strong"),Rlr=o("blenderbot"),Plr=o(" \u2014 "),Gz=a("a"),Blr=o("TFBlenderbotModel"),Ilr=o(" (Blenderbot model)"),qlr=l(),WT=a("li"),H2e=a("strong"),Nlr=o("blenderbot-small"),jlr=o(" \u2014 "),Oz=a("a"),Dlr=o("TFBlenderbotSmallModel"),Glr=o(" (BlenderbotSmall model)"),Olr=l(),QT=a("li"),U2e=a("strong"),Vlr=o("camembert"),Xlr=o(" \u2014 "),Vz=a("a"),zlr=o("TFCamembertModel"),Wlr=o(" (CamemBERT model)"),Qlr=l(),HT=a("li"),J2e=a("strong"),Hlr=o("clip"),Ulr=o(" \u2014 "),Xz=a("a"),Jlr=o("TFCLIPModel"),Ylr=o(" (CLIP model)"),Klr=l(),UT=a("li"),Y2e=a("strong"),Zlr=o("convbert"),eir=o(" \u2014 "),zz=a("a"),oir=o("TFConvBertModel"),rir=o(" (ConvBERT model)"),tir=l(),JT=a("li"),K2e=a("strong"),air=o("convnext"),nir=o(" \u2014 "),Wz=a("a"),sir=o("TFConvNextModel"),lir=o(" (ConvNext model)"),iir=l(),YT=a("li"),Z2e=a("strong"),dir=o("ctrl"),cir=o(" \u2014 "),Qz=a("a"),fir=o("TFCTRLModel"),mir=o(" (CTRL model)"),gir=l(),KT=a("li"),e1e=a("strong"),hir=o("data2vec-vision"),pir=o(" \u2014 "),Hz=a("a"),_ir=o("TFData2VecVisionModel"),uir=o(" (Data2VecVision model)"),bir=l(),ZT=a("li"),o1e=a("strong"),vir=o("deberta"),Fir=o(" \u2014 "),Uz=a("a"),Tir=o("TFDebertaModel"),Mir=o(" (DeBERTa model)"),Eir=l(),eM=a("li"),r1e=a("strong"),Cir=o("deberta-v2"),wir=o(" \u2014 "),Jz=a("a"),Air=o("TFDebertaV2Model"),yir=o(" (DeBERTa-v2 model)"),Lir=l(),oM=a("li"),t1e=a("strong"),xir=o("distilbert"),$ir=o(" \u2014 "),Yz=a("a"),kir=o("TFDistilBertModel"),Sir=o(" (DistilBERT model)"),Rir=l(),rM=a("li"),a1e=a("strong"),Pir=o("dpr"),Bir=o(" \u2014 "),Kz=a("a"),Iir=o("TFDPRQuestionEncoder"),qir=o(" (DPR model)"),Nir=l(),tM=a("li"),n1e=a("strong"),jir=o("electra"),Dir=o(" \u2014 "),Zz=a("a"),Gir=o("TFElectraModel"),Oir=o(" (ELECTRA model)"),Vir=l(),aM=a("li"),s1e=a("strong"),Xir=o("flaubert"),zir=o(" \u2014 "),eW=a("a"),Wir=o("TFFlaubertModel"),Qir=o(" (FlauBERT model)"),Hir=l(),Bs=a("li"),l1e=a("strong"),Uir=o("funnel"),Jir=o(" \u2014 "),oW=a("a"),Yir=o("TFFunnelModel"),Kir=o(" or "),rW=a("a"),Zir=o("TFFunnelBaseModel"),edr=o(" (Funnel Transformer model)"),odr=l(),nM=a("li"),i1e=a("strong"),rdr=o("gpt2"),tdr=o(" \u2014 "),tW=a("a"),adr=o("TFGPT2Model"),ndr=o(" (OpenAI GPT-2 model)"),sdr=l(),sM=a("li"),d1e=a("strong"),ldr=o("gptj"),idr=o(" \u2014 "),aW=a("a"),ddr=o("TFGPTJModel"),cdr=o(" (GPT-J model)"),fdr=l(),lM=a("li"),c1e=a("strong"),mdr=o("hubert"),gdr=o(" \u2014 "),nW=a("a"),hdr=o("TFHubertModel"),pdr=o(" (Hubert model)"),_dr=l(),iM=a("li"),f1e=a("strong"),udr=o("layoutlm"),bdr=o(" \u2014 "),sW=a("a"),vdr=o("TFLayoutLMModel"),Fdr=o(" (LayoutLM model)"),Tdr=l(),dM=a("li"),m1e=a("strong"),Mdr=o("led"),Edr=o(" \u2014 "),lW=a("a"),Cdr=o("TFLEDModel"),wdr=o(" (LED model)"),Adr=l(),cM=a("li"),g1e=a("strong"),ydr=o("longformer"),Ldr=o(" \u2014 "),iW=a("a"),xdr=o("TFLongformerModel"),$dr=o(" (Longformer model)"),kdr=l(),fM=a("li"),h1e=a("strong"),Sdr=o("lxmert"),Rdr=o(" \u2014 "),dW=a("a"),Pdr=o("TFLxmertModel"),Bdr=o(" (LXMERT model)"),Idr=l(),mM=a("li"),p1e=a("strong"),qdr=o("marian"),Ndr=o(" \u2014 "),cW=a("a"),jdr=o("TFMarianModel"),Ddr=o(" (Marian model)"),Gdr=l(),gM=a("li"),_1e=a("strong"),Odr=o("mbart"),Vdr=o(" \u2014 "),fW=a("a"),Xdr=o("TFMBartModel"),zdr=o(" (mBART model)"),Wdr=l(),hM=a("li"),u1e=a("strong"),Qdr=o("mobilebert"),Hdr=o(" \u2014 "),mW=a("a"),Udr=o("TFMobileBertModel"),Jdr=o(" (MobileBERT model)"),Ydr=l(),pM=a("li"),b1e=a("strong"),Kdr=o("mpnet"),Zdr=o(" \u2014 "),gW=a("a"),ecr=o("TFMPNetModel"),ocr=o(" (MPNet model)"),rcr=l(),_M=a("li"),v1e=a("strong"),tcr=o("mt5"),acr=o(" \u2014 "),hW=a("a"),ncr=o("TFMT5Model"),scr=o(" (mT5 model)"),lcr=l(),uM=a("li"),F1e=a("strong"),icr=o("openai-gpt"),dcr=o(" \u2014 "),pW=a("a"),ccr=o("TFOpenAIGPTModel"),fcr=o(" (OpenAI GPT model)"),mcr=l(),bM=a("li"),T1e=a("strong"),gcr=o("opt"),hcr=o(" \u2014 "),_W=a("a"),pcr=o("TFOPTModel"),_cr=o(" (OPT model)"),ucr=l(),vM=a("li"),M1e=a("strong"),bcr=o("pegasus"),vcr=o(" \u2014 "),uW=a("a"),Fcr=o("TFPegasusModel"),Tcr=o(" (Pegasus model)"),Mcr=l(),FM=a("li"),E1e=a("strong"),Ecr=o("rembert"),Ccr=o(" \u2014 "),bW=a("a"),wcr=o("TFRemBertModel"),Acr=o(" (RemBERT model)"),ycr=l(),TM=a("li"),C1e=a("strong"),Lcr=o("roberta"),xcr=o(" \u2014 "),vW=a("a"),$cr=o("TFRobertaModel"),kcr=o(" (RoBERTa model)"),Scr=l(),MM=a("li"),w1e=a("strong"),Rcr=o("roformer"),Pcr=o(" \u2014 "),FW=a("a"),Bcr=o("TFRoFormerModel"),Icr=o(" (RoFormer model)"),qcr=l(),EM=a("li"),A1e=a("strong"),Ncr=o("speech_to_text"),jcr=o(" \u2014 "),TW=a("a"),Dcr=o("TFSpeech2TextModel"),Gcr=o(" (Speech2Text model)"),Ocr=l(),CM=a("li"),y1e=a("strong"),Vcr=o("swin"),Xcr=o(" \u2014 "),MW=a("a"),zcr=o("TFSwinModel"),Wcr=o(" (Swin model)"),Qcr=l(),wM=a("li"),L1e=a("strong"),Hcr=o("t5"),Ucr=o(" \u2014 "),EW=a("a"),Jcr=o("TFT5Model"),Ycr=o(" (T5 model)"),Kcr=l(),AM=a("li"),x1e=a("strong"),Zcr=o("tapas"),efr=o(" \u2014 "),CW=a("a"),ofr=o("TFTapasModel"),rfr=o(" (TAPAS model)"),tfr=l(),yM=a("li"),$1e=a("strong"),afr=o("transfo-xl"),nfr=o(" \u2014 "),wW=a("a"),sfr=o("TFTransfoXLModel"),lfr=o(" (Transformer-XL model)"),ifr=l(),LM=a("li"),k1e=a("strong"),dfr=o("vit"),cfr=o(" \u2014 "),AW=a("a"),ffr=o("TFViTModel"),mfr=o(" (ViT model)"),gfr=l(),xM=a("li"),S1e=a("strong"),hfr=o("vit_mae"),pfr=o(" \u2014 "),yW=a("a"),_fr=o("TFViTMAEModel"),ufr=o(" (ViTMAE model)"),bfr=l(),$M=a("li"),R1e=a("strong"),vfr=o("wav2vec2"),Ffr=o(" \u2014 "),LW=a("a"),Tfr=o("TFWav2Vec2Model"),Mfr=o(" (Wav2Vec2 model)"),Efr=l(),kM=a("li"),P1e=a("strong"),Cfr=o("xlm"),wfr=o(" \u2014 "),xW=a("a"),Afr=o("TFXLMModel"),yfr=o(" (XLM model)"),Lfr=l(),SM=a("li"),B1e=a("strong"),xfr=o("xlm-roberta"),$fr=o(" \u2014 "),$W=a("a"),kfr=o("TFXLMRobertaModel"),Sfr=o(" (XLM-RoBERTa model)"),Rfr=l(),RM=a("li"),I1e=a("strong"),Pfr=o("xlnet"),Bfr=o(" \u2014 "),kW=a("a"),Ifr=o("TFXLNetModel"),qfr=o(" (XLNet model)"),Nfr=l(),F(PM.$$.fragment),MNe=l(),Vd=a("h2"),BM=a("a"),q1e=a("span"),F(a8.$$.fragment),jfr=l(),N1e=a("span"),Dfr=o("TFAutoModelForPreTraining"),ENe=l(),Ko=a("div"),F(n8.$$.fragment),Gfr=l(),Xd=a("p"),Ofr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=a("a"),Vfr=o("from_pretrained()"),Xfr=o(" class method or the "),RW=a("a"),zfr=o("from_config()"),Wfr=o(` class
method.`),Qfr=l(),s8=a("p"),Hfr=o("This class cannot be instantiated directly using "),j1e=a("code"),Ufr=o("__init__()"),Jfr=o(" (throws an error)."),Yfr=l(),Lt=a("div"),F(l8.$$.fragment),Kfr=l(),D1e=a("p"),Zfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),emr=l(),zd=a("p"),omr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),rmr=o("not"),tmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),amr=o("from_pretrained()"),nmr=o(" to load the model weights."),smr=l(),F(IM.$$.fragment),lmr=l(),Ar=a("div"),F(i8.$$.fragment),imr=l(),O1e=a("p"),dmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cmr=l(),Za=a("p"),fmr=o("The model class to instantiate is selected based on the "),V1e=a("code"),mmr=o("model_type"),gmr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),hmr=o("pretrained_model_name_or_path"),pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),_mr=o("pretrained_model_name_or_path"),umr=o(":"),bmr=l(),se=a("ul"),qM=a("li"),W1e=a("strong"),vmr=o("albert"),Fmr=o(" \u2014 "),BW=a("a"),Tmr=o("TFAlbertForPreTraining"),Mmr=o(" (ALBERT model)"),Emr=l(),NM=a("li"),Q1e=a("strong"),Cmr=o("bart"),wmr=o(" \u2014 "),IW=a("a"),Amr=o("TFBartForConditionalGeneration"),ymr=o(" (BART model)"),Lmr=l(),jM=a("li"),H1e=a("strong"),xmr=o("bert"),$mr=o(" \u2014 "),qW=a("a"),kmr=o("TFBertForPreTraining"),Smr=o(" (BERT model)"),Rmr=l(),DM=a("li"),U1e=a("strong"),Pmr=o("camembert"),Bmr=o(" \u2014 "),NW=a("a"),Imr=o("TFCamembertForMaskedLM"),qmr=o(" (CamemBERT model)"),Nmr=l(),GM=a("li"),J1e=a("strong"),jmr=o("ctrl"),Dmr=o(" \u2014 "),jW=a("a"),Gmr=o("TFCTRLLMHeadModel"),Omr=o(" (CTRL model)"),Vmr=l(),OM=a("li"),Y1e=a("strong"),Xmr=o("distilbert"),zmr=o(" \u2014 "),DW=a("a"),Wmr=o("TFDistilBertForMaskedLM"),Qmr=o(" (DistilBERT model)"),Hmr=l(),VM=a("li"),K1e=a("strong"),Umr=o("electra"),Jmr=o(" \u2014 "),GW=a("a"),Ymr=o("TFElectraForPreTraining"),Kmr=o(" (ELECTRA model)"),Zmr=l(),XM=a("li"),Z1e=a("strong"),egr=o("flaubert"),ogr=o(" \u2014 "),OW=a("a"),rgr=o("TFFlaubertWithLMHeadModel"),tgr=o(" (FlauBERT model)"),agr=l(),zM=a("li"),e7e=a("strong"),ngr=o("funnel"),sgr=o(" \u2014 "),VW=a("a"),lgr=o("TFFunnelForPreTraining"),igr=o(" (Funnel Transformer model)"),dgr=l(),WM=a("li"),o7e=a("strong"),cgr=o("gpt2"),fgr=o(" \u2014 "),XW=a("a"),mgr=o("TFGPT2LMHeadModel"),ggr=o(" (OpenAI GPT-2 model)"),hgr=l(),QM=a("li"),r7e=a("strong"),pgr=o("layoutlm"),_gr=o(" \u2014 "),zW=a("a"),ugr=o("TFLayoutLMForMaskedLM"),bgr=o(" (LayoutLM model)"),vgr=l(),HM=a("li"),t7e=a("strong"),Fgr=o("lxmert"),Tgr=o(" \u2014 "),WW=a("a"),Mgr=o("TFLxmertForPreTraining"),Egr=o(" (LXMERT model)"),Cgr=l(),UM=a("li"),a7e=a("strong"),wgr=o("mobilebert"),Agr=o(" \u2014 "),QW=a("a"),ygr=o("TFMobileBertForPreTraining"),Lgr=o(" (MobileBERT model)"),xgr=l(),JM=a("li"),n7e=a("strong"),$gr=o("mpnet"),kgr=o(" \u2014 "),HW=a("a"),Sgr=o("TFMPNetForMaskedLM"),Rgr=o(" (MPNet model)"),Pgr=l(),YM=a("li"),s7e=a("strong"),Bgr=o("openai-gpt"),Igr=o(" \u2014 "),UW=a("a"),qgr=o("TFOpenAIGPTLMHeadModel"),Ngr=o(" (OpenAI GPT model)"),jgr=l(),KM=a("li"),l7e=a("strong"),Dgr=o("roberta"),Ggr=o(" \u2014 "),JW=a("a"),Ogr=o("TFRobertaForMaskedLM"),Vgr=o(" (RoBERTa model)"),Xgr=l(),ZM=a("li"),i7e=a("strong"),zgr=o("t5"),Wgr=o(" \u2014 "),YW=a("a"),Qgr=o("TFT5ForConditionalGeneration"),Hgr=o(" (T5 model)"),Ugr=l(),e4=a("li"),d7e=a("strong"),Jgr=o("tapas"),Ygr=o(" \u2014 "),KW=a("a"),Kgr=o("TFTapasForMaskedLM"),Zgr=o(" (TAPAS model)"),ehr=l(),o4=a("li"),c7e=a("strong"),ohr=o("transfo-xl"),rhr=o(" \u2014 "),ZW=a("a"),thr=o("TFTransfoXLLMHeadModel"),ahr=o(" (Transformer-XL model)"),nhr=l(),r4=a("li"),f7e=a("strong"),shr=o("vit_mae"),lhr=o(" \u2014 "),eQ=a("a"),ihr=o("TFViTMAEForPreTraining"),dhr=o(" (ViTMAE model)"),chr=l(),t4=a("li"),m7e=a("strong"),fhr=o("xlm"),mhr=o(" \u2014 "),oQ=a("a"),ghr=o("TFXLMWithLMHeadModel"),hhr=o(" (XLM model)"),phr=l(),a4=a("li"),g7e=a("strong"),_hr=o("xlm-roberta"),uhr=o(" \u2014 "),rQ=a("a"),bhr=o("TFXLMRobertaForMaskedLM"),vhr=o(" (XLM-RoBERTa model)"),Fhr=l(),n4=a("li"),h7e=a("strong"),Thr=o("xlnet"),Mhr=o(" \u2014 "),tQ=a("a"),Ehr=o("TFXLNetLMHeadModel"),Chr=o(" (XLNet model)"),whr=l(),F(s4.$$.fragment),CNe=l(),Wd=a("h2"),l4=a("a"),p7e=a("span"),F(d8.$$.fragment),Ahr=l(),_7e=a("span"),yhr=o("TFAutoModelForCausalLM"),wNe=l(),Zo=a("div"),F(c8.$$.fragment),Lhr=l(),Qd=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=a("a"),$hr=o("from_pretrained()"),khr=o(" class method or the "),nQ=a("a"),Shr=o("from_config()"),Rhr=o(` class
method.`),Phr=l(),f8=a("p"),Bhr=o("This class cannot be instantiated directly using "),u7e=a("code"),Ihr=o("__init__()"),qhr=o(" (throws an error)."),Nhr=l(),xt=a("div"),F(m8.$$.fragment),jhr=l(),b7e=a("p"),Dhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ghr=l(),Hd=a("p"),Ohr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),Vhr=o("not"),Xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),zhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Qhr=l(),F(i4.$$.fragment),Hhr=l(),yr=a("div"),F(g8.$$.fragment),Uhr=l(),F7e=a("p"),Jhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yhr=l(),en=a("p"),Khr=o("The model class to instantiate is selected based on the "),T7e=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),Te=a("ul"),d4=a("li"),C7e=a("strong"),spr=o("bert"),lpr=o(" \u2014 "),lQ=a("a"),ipr=o("TFBertLMHeadModel"),dpr=o(" (BERT model)"),cpr=l(),c4=a("li"),w7e=a("strong"),fpr=o("camembert"),mpr=o(" \u2014 "),iQ=a("a"),gpr=o("TFCamembertForCausalLM"),hpr=o(" (CamemBERT model)"),ppr=l(),f4=a("li"),A7e=a("strong"),_pr=o("ctrl"),upr=o(" \u2014 "),dQ=a("a"),bpr=o("TFCTRLLMHeadModel"),vpr=o(" (CTRL model)"),Fpr=l(),m4=a("li"),y7e=a("strong"),Tpr=o("gpt2"),Mpr=o(" \u2014 "),cQ=a("a"),Epr=o("TFGPT2LMHeadModel"),Cpr=o(" (OpenAI GPT-2 model)"),wpr=l(),g4=a("li"),L7e=a("strong"),Apr=o("gptj"),ypr=o(" \u2014 "),fQ=a("a"),Lpr=o("TFGPTJForCausalLM"),xpr=o(" (GPT-J model)"),$pr=l(),h4=a("li"),x7e=a("strong"),kpr=o("openai-gpt"),Spr=o(" \u2014 "),mQ=a("a"),Rpr=o("TFOpenAIGPTLMHeadModel"),Ppr=o(" (OpenAI GPT model)"),Bpr=l(),p4=a("li"),$7e=a("strong"),Ipr=o("opt"),qpr=o(" \u2014 "),gQ=a("a"),Npr=o("TFOPTForCausalLM"),jpr=o(" (OPT model)"),Dpr=l(),_4=a("li"),k7e=a("strong"),Gpr=o("rembert"),Opr=o(" \u2014 "),hQ=a("a"),Vpr=o("TFRemBertForCausalLM"),Xpr=o(" (RemBERT model)"),zpr=l(),u4=a("li"),S7e=a("strong"),Wpr=o("roberta"),Qpr=o(" \u2014 "),pQ=a("a"),Hpr=o("TFRobertaForCausalLM"),Upr=o(" (RoBERTa model)"),Jpr=l(),b4=a("li"),R7e=a("strong"),Ypr=o("roformer"),Kpr=o(" \u2014 "),_Q=a("a"),Zpr=o("TFRoFormerForCausalLM"),e_r=o(" (RoFormer model)"),o_r=l(),v4=a("li"),P7e=a("strong"),r_r=o("transfo-xl"),t_r=o(" \u2014 "),uQ=a("a"),a_r=o("TFTransfoXLLMHeadModel"),n_r=o(" (Transformer-XL model)"),s_r=l(),F4=a("li"),B7e=a("strong"),l_r=o("xlm"),i_r=o(" \u2014 "),bQ=a("a"),d_r=o("TFXLMWithLMHeadModel"),c_r=o(" (XLM model)"),f_r=l(),T4=a("li"),I7e=a("strong"),m_r=o("xlnet"),g_r=o(" \u2014 "),vQ=a("a"),h_r=o("TFXLNetLMHeadModel"),p_r=o(" (XLNet model)"),__r=l(),F(M4.$$.fragment),ANe=l(),Ud=a("h2"),E4=a("a"),q7e=a("span"),F(h8.$$.fragment),u_r=l(),N7e=a("span"),b_r=o("TFAutoModelForImageClassification"),yNe=l(),er=a("div"),F(p8.$$.fragment),v_r=l(),Jd=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),TQ=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),_8=a("p"),A_r=o("This class cannot be instantiated directly using "),j7e=a("code"),y_r=o("__init__()"),L_r=o(" (throws an error)."),x_r=l(),$t=a("div"),F(u8.$$.fragment),$_r=l(),D7e=a("p"),k_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S_r=l(),Yd=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),P_r=o("not"),B_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),I_r=o("from_pretrained()"),q_r=o(" to load the model weights."),N_r=l(),F(C4.$$.fragment),j_r=l(),Lr=a("div"),F(b8.$$.fragment),D_r=l(),O7e=a("p"),G_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O_r=l(),on=a("p"),V_r=o("The model class to instantiate is selected based on the "),V7e=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),W_r=o("pretrained_model_name_or_path"),Q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),H_r=o("pretrained_model_name_or_path"),U_r=o(":"),J_r=l(),rn=a("ul"),w4=a("li"),W7e=a("strong"),Y_r=o("convnext"),K_r=o(" \u2014 "),EQ=a("a"),Z_r=o("TFConvNextForImageClassification"),eur=o(" (ConvNext model)"),our=l(),A4=a("li"),Q7e=a("strong"),rur=o("data2vec-vision"),tur=o(" \u2014 "),CQ=a("a"),aur=o("TFData2VecVisionForImageClassification"),nur=o(" (Data2VecVision model)"),sur=l(),y4=a("li"),H7e=a("strong"),lur=o("swin"),iur=o(" \u2014 "),wQ=a("a"),dur=o("TFSwinForImageClassification"),cur=o(" (Swin model)"),fur=l(),L4=a("li"),U7e=a("strong"),mur=o("vit"),gur=o(" \u2014 "),AQ=a("a"),hur=o("TFViTForImageClassification"),pur=o(" (ViT model)"),_ur=l(),F(x4.$$.fragment),LNe=l(),Kd=a("h2"),$4=a("a"),J7e=a("span"),F(v8.$$.fragment),uur=l(),Y7e=a("span"),bur=o("TFAutoModelForMaskedLM"),xNe=l(),or=a("div"),F(F8.$$.fragment),vur=l(),Zd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),LQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),T8=a("p"),Aur=o("This class cannot be instantiated directly using "),K7e=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),kt=a("div"),F(M8.$$.fragment),$ur=l(),Z7e=a("p"),kur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Sur=l(),ec=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),F(k4.$$.fragment),jur=l(),xr=a("div"),F(E8.$$.fragment),Dur=l(),obe=a("p"),Gur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Our=l(),tn=a("p"),Vur=o("The model class to instantiate is selected based on the "),rbe=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),ie=a("ul"),S4=a("li"),nbe=a("strong"),Yur=o("albert"),Kur=o(" \u2014 "),$Q=a("a"),Zur=o("TFAlbertForMaskedLM"),e2r=o(" (ALBERT model)"),o2r=l(),R4=a("li"),sbe=a("strong"),r2r=o("bert"),t2r=o(" \u2014 "),kQ=a("a"),a2r=o("TFBertForMaskedLM"),n2r=o(" (BERT model)"),s2r=l(),P4=a("li"),lbe=a("strong"),l2r=o("camembert"),i2r=o(" \u2014 "),SQ=a("a"),d2r=o("TFCamembertForMaskedLM"),c2r=o(" (CamemBERT model)"),f2r=l(),B4=a("li"),ibe=a("strong"),m2r=o("convbert"),g2r=o(" \u2014 "),RQ=a("a"),h2r=o("TFConvBertForMaskedLM"),p2r=o(" (ConvBERT model)"),_2r=l(),I4=a("li"),dbe=a("strong"),u2r=o("deberta"),b2r=o(" \u2014 "),PQ=a("a"),v2r=o("TFDebertaForMaskedLM"),F2r=o(" (DeBERTa model)"),T2r=l(),q4=a("li"),cbe=a("strong"),M2r=o("deberta-v2"),E2r=o(" \u2014 "),BQ=a("a"),C2r=o("TFDebertaV2ForMaskedLM"),w2r=o(" (DeBERTa-v2 model)"),A2r=l(),N4=a("li"),fbe=a("strong"),y2r=o("distilbert"),L2r=o(" \u2014 "),IQ=a("a"),x2r=o("TFDistilBertForMaskedLM"),$2r=o(" (DistilBERT model)"),k2r=l(),j4=a("li"),mbe=a("strong"),S2r=o("electra"),R2r=o(" \u2014 "),qQ=a("a"),P2r=o("TFElectraForMaskedLM"),B2r=o(" (ELECTRA model)"),I2r=l(),D4=a("li"),gbe=a("strong"),q2r=o("flaubert"),N2r=o(" \u2014 "),NQ=a("a"),j2r=o("TFFlaubertWithLMHeadModel"),D2r=o(" (FlauBERT model)"),G2r=l(),G4=a("li"),hbe=a("strong"),O2r=o("funnel"),V2r=o(" \u2014 "),jQ=a("a"),X2r=o("TFFunnelForMaskedLM"),z2r=o(" (Funnel Transformer model)"),W2r=l(),O4=a("li"),pbe=a("strong"),Q2r=o("layoutlm"),H2r=o(" \u2014 "),DQ=a("a"),U2r=o("TFLayoutLMForMaskedLM"),J2r=o(" (LayoutLM model)"),Y2r=l(),V4=a("li"),_be=a("strong"),K2r=o("longformer"),Z2r=o(" \u2014 "),GQ=a("a"),e1r=o("TFLongformerForMaskedLM"),o1r=o(" (Longformer model)"),r1r=l(),X4=a("li"),ube=a("strong"),t1r=o("mobilebert"),a1r=o(" \u2014 "),OQ=a("a"),n1r=o("TFMobileBertForMaskedLM"),s1r=o(" (MobileBERT model)"),l1r=l(),z4=a("li"),bbe=a("strong"),i1r=o("mpnet"),d1r=o(" \u2014 "),VQ=a("a"),c1r=o("TFMPNetForMaskedLM"),f1r=o(" (MPNet model)"),m1r=l(),W4=a("li"),vbe=a("strong"),g1r=o("rembert"),h1r=o(" \u2014 "),XQ=a("a"),p1r=o("TFRemBertForMaskedLM"),_1r=o(" (RemBERT model)"),u1r=l(),Q4=a("li"),Fbe=a("strong"),b1r=o("roberta"),v1r=o(" \u2014 "),zQ=a("a"),F1r=o("TFRobertaForMaskedLM"),T1r=o(" (RoBERTa model)"),M1r=l(),H4=a("li"),Tbe=a("strong"),E1r=o("roformer"),C1r=o(" \u2014 "),WQ=a("a"),w1r=o("TFRoFormerForMaskedLM"),A1r=o(" (RoFormer model)"),y1r=l(),U4=a("li"),Mbe=a("strong"),L1r=o("tapas"),x1r=o(" \u2014 "),QQ=a("a"),$1r=o("TFTapasForMaskedLM"),k1r=o(" (TAPAS model)"),S1r=l(),J4=a("li"),Ebe=a("strong"),R1r=o("xlm"),P1r=o(" \u2014 "),HQ=a("a"),B1r=o("TFXLMWithLMHeadModel"),I1r=o(" (XLM model)"),q1r=l(),Y4=a("li"),Cbe=a("strong"),N1r=o("xlm-roberta"),j1r=o(" \u2014 "),UQ=a("a"),D1r=o("TFXLMRobertaForMaskedLM"),G1r=o(" (XLM-RoBERTa model)"),O1r=l(),F(K4.$$.fragment),$Ne=l(),oc=a("h2"),Z4=a("a"),wbe=a("span"),F(C8.$$.fragment),V1r=l(),Abe=a("span"),X1r=o("TFAutoModelForSeq2SeqLM"),kNe=l(),rr=a("div"),F(w8.$$.fragment),z1r=l(),rc=a("p"),W1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JQ=a("a"),Q1r=o("from_pretrained()"),H1r=o(" class method or the "),YQ=a("a"),U1r=o("from_config()"),J1r=o(` class
method.`),Y1r=l(),A8=a("p"),K1r=o("This class cannot be instantiated directly using "),ybe=a("code"),Z1r=o("__init__()"),e7r=o(" (throws an error)."),o7r=l(),St=a("div"),F(y8.$$.fragment),r7r=l(),Lbe=a("p"),t7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a7r=l(),tc=a("p"),n7r=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),s7r=o("not"),l7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),i7r=o("from_pretrained()"),d7r=o(" to load the model weights."),c7r=l(),F(eE.$$.fragment),f7r=l(),$r=a("div"),F(L8.$$.fragment),m7r=l(),$be=a("p"),g7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h7r=l(),an=a("p"),p7r=o("The model class to instantiate is selected based on the "),kbe=a("code"),_7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(":"),M7r=l(),ye=a("ul"),oE=a("li"),Pbe=a("strong"),E7r=o("bart"),C7r=o(" \u2014 "),ZQ=a("a"),w7r=o("TFBartForConditionalGeneration"),A7r=o(" (BART model)"),y7r=l(),rE=a("li"),Bbe=a("strong"),L7r=o("blenderbot"),x7r=o(" \u2014 "),eH=a("a"),$7r=o("TFBlenderbotForConditionalGeneration"),k7r=o(" (Blenderbot model)"),S7r=l(),tE=a("li"),Ibe=a("strong"),R7r=o("blenderbot-small"),P7r=o(" \u2014 "),oH=a("a"),B7r=o("TFBlenderbotSmallForConditionalGeneration"),I7r=o(" (BlenderbotSmall model)"),q7r=l(),aE=a("li"),qbe=a("strong"),N7r=o("encoder-decoder"),j7r=o(" \u2014 "),rH=a("a"),D7r=o("TFEncoderDecoderModel"),G7r=o(" (Encoder decoder model)"),O7r=l(),nE=a("li"),Nbe=a("strong"),V7r=o("led"),X7r=o(" \u2014 "),tH=a("a"),z7r=o("TFLEDForConditionalGeneration"),W7r=o(" (LED model)"),Q7r=l(),sE=a("li"),jbe=a("strong"),H7r=o("marian"),U7r=o(" \u2014 "),aH=a("a"),J7r=o("TFMarianMTModel"),Y7r=o(" (Marian model)"),K7r=l(),lE=a("li"),Dbe=a("strong"),Z7r=o("mbart"),ebr=o(" \u2014 "),nH=a("a"),obr=o("TFMBartForConditionalGeneration"),rbr=o(" (mBART model)"),tbr=l(),iE=a("li"),Gbe=a("strong"),abr=o("mt5"),nbr=o(" \u2014 "),sH=a("a"),sbr=o("TFMT5ForConditionalGeneration"),lbr=o(" (mT5 model)"),ibr=l(),dE=a("li"),Obe=a("strong"),dbr=o("pegasus"),cbr=o(" \u2014 "),lH=a("a"),fbr=o("TFPegasusForConditionalGeneration"),mbr=o(" (Pegasus model)"),gbr=l(),cE=a("li"),Vbe=a("strong"),hbr=o("t5"),pbr=o(" \u2014 "),iH=a("a"),_br=o("TFT5ForConditionalGeneration"),ubr=o(" (T5 model)"),bbr=l(),F(fE.$$.fragment),SNe=l(),ac=a("h2"),mE=a("a"),Xbe=a("span"),F(x8.$$.fragment),vbr=l(),zbe=a("span"),Fbr=o("TFAutoModelForSequenceClassification"),RNe=l(),tr=a("div"),F($8.$$.fragment),Tbr=l(),nc=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" class method or the "),cH=a("a"),wbr=o("from_config()"),Abr=o(` class
method.`),ybr=l(),k8=a("p"),Lbr=o("This class cannot be instantiated directly using "),Wbe=a("code"),xbr=o("__init__()"),$br=o(" (throws an error)."),kbr=l(),Rt=a("div"),F(S8.$$.fragment),Sbr=l(),Qbe=a("p"),Rbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pbr=l(),sc=a("p"),Bbr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),Ibr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),Nbr=o("from_pretrained()"),jbr=o(" to load the model weights."),Dbr=l(),F(gE.$$.fragment),Gbr=l(),kr=a("div"),F(R8.$$.fragment),Obr=l(),Ube=a("p"),Vbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xbr=l(),nn=a("p"),zbr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Wbr=o("model_type"),Qbr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),Hbr=o("pretrained_model_name_or_path"),Ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(":"),Kbr=l(),ee=a("ul"),hE=a("li"),Zbe=a("strong"),Zbr=o("albert"),evr=o(" \u2014 "),mH=a("a"),ovr=o("TFAlbertForSequenceClassification"),rvr=o(" (ALBERT model)"),tvr=l(),pE=a("li"),eve=a("strong"),avr=o("bert"),nvr=o(" \u2014 "),gH=a("a"),svr=o("TFBertForSequenceClassification"),lvr=o(" (BERT model)"),ivr=l(),_E=a("li"),ove=a("strong"),dvr=o("camembert"),cvr=o(" \u2014 "),hH=a("a"),fvr=o("TFCamembertForSequenceClassification"),mvr=o(" (CamemBERT model)"),gvr=l(),uE=a("li"),rve=a("strong"),hvr=o("convbert"),pvr=o(" \u2014 "),pH=a("a"),_vr=o("TFConvBertForSequenceClassification"),uvr=o(" (ConvBERT model)"),bvr=l(),bE=a("li"),tve=a("strong"),vvr=o("ctrl"),Fvr=o(" \u2014 "),_H=a("a"),Tvr=o("TFCTRLForSequenceClassification"),Mvr=o(" (CTRL model)"),Evr=l(),vE=a("li"),ave=a("strong"),Cvr=o("deberta"),wvr=o(" \u2014 "),uH=a("a"),Avr=o("TFDebertaForSequenceClassification"),yvr=o(" (DeBERTa model)"),Lvr=l(),FE=a("li"),nve=a("strong"),xvr=o("deberta-v2"),$vr=o(" \u2014 "),bH=a("a"),kvr=o("TFDebertaV2ForSequenceClassification"),Svr=o(" (DeBERTa-v2 model)"),Rvr=l(),TE=a("li"),sve=a("strong"),Pvr=o("distilbert"),Bvr=o(" \u2014 "),vH=a("a"),Ivr=o("TFDistilBertForSequenceClassification"),qvr=o(" (DistilBERT model)"),Nvr=l(),ME=a("li"),lve=a("strong"),jvr=o("electra"),Dvr=o(" \u2014 "),FH=a("a"),Gvr=o("TFElectraForSequenceClassification"),Ovr=o(" (ELECTRA model)"),Vvr=l(),EE=a("li"),ive=a("strong"),Xvr=o("flaubert"),zvr=o(" \u2014 "),TH=a("a"),Wvr=o("TFFlaubertForSequenceClassification"),Qvr=o(" (FlauBERT model)"),Hvr=l(),CE=a("li"),dve=a("strong"),Uvr=o("funnel"),Jvr=o(" \u2014 "),MH=a("a"),Yvr=o("TFFunnelForSequenceClassification"),Kvr=o(" (Funnel Transformer model)"),Zvr=l(),wE=a("li"),cve=a("strong"),eFr=o("gpt2"),oFr=o(" \u2014 "),EH=a("a"),rFr=o("TFGPT2ForSequenceClassification"),tFr=o(" (OpenAI GPT-2 model)"),aFr=l(),AE=a("li"),fve=a("strong"),nFr=o("gptj"),sFr=o(" \u2014 "),CH=a("a"),lFr=o("TFGPTJForSequenceClassification"),iFr=o(" (GPT-J model)"),dFr=l(),yE=a("li"),mve=a("strong"),cFr=o("layoutlm"),fFr=o(" \u2014 "),wH=a("a"),mFr=o("TFLayoutLMForSequenceClassification"),gFr=o(" (LayoutLM model)"),hFr=l(),LE=a("li"),gve=a("strong"),pFr=o("longformer"),_Fr=o(" \u2014 "),AH=a("a"),uFr=o("TFLongformerForSequenceClassification"),bFr=o(" (Longformer model)"),vFr=l(),xE=a("li"),hve=a("strong"),FFr=o("mobilebert"),TFr=o(" \u2014 "),yH=a("a"),MFr=o("TFMobileBertForSequenceClassification"),EFr=o(" (MobileBERT model)"),CFr=l(),$E=a("li"),pve=a("strong"),wFr=o("mpnet"),AFr=o(" \u2014 "),LH=a("a"),yFr=o("TFMPNetForSequenceClassification"),LFr=o(" (MPNet model)"),xFr=l(),kE=a("li"),_ve=a("strong"),$Fr=o("openai-gpt"),kFr=o(" \u2014 "),xH=a("a"),SFr=o("TFOpenAIGPTForSequenceClassification"),RFr=o(" (OpenAI GPT model)"),PFr=l(),SE=a("li"),uve=a("strong"),BFr=o("rembert"),IFr=o(" \u2014 "),$H=a("a"),qFr=o("TFRemBertForSequenceClassification"),NFr=o(" (RemBERT model)"),jFr=l(),RE=a("li"),bve=a("strong"),DFr=o("roberta"),GFr=o(" \u2014 "),kH=a("a"),OFr=o("TFRobertaForSequenceClassification"),VFr=o(" (RoBERTa model)"),XFr=l(),PE=a("li"),vve=a("strong"),zFr=o("roformer"),WFr=o(" \u2014 "),SH=a("a"),QFr=o("TFRoFormerForSequenceClassification"),HFr=o(" (RoFormer model)"),UFr=l(),BE=a("li"),Fve=a("strong"),JFr=o("tapas"),YFr=o(" \u2014 "),RH=a("a"),KFr=o("TFTapasForSequenceClassification"),ZFr=o(" (TAPAS model)"),eTr=l(),IE=a("li"),Tve=a("strong"),oTr=o("transfo-xl"),rTr=o(" \u2014 "),PH=a("a"),tTr=o("TFTransfoXLForSequenceClassification"),aTr=o(" (Transformer-XL model)"),nTr=l(),qE=a("li"),Mve=a("strong"),sTr=o("xlm"),lTr=o(" \u2014 "),BH=a("a"),iTr=o("TFXLMForSequenceClassification"),dTr=o(" (XLM model)"),cTr=l(),NE=a("li"),Eve=a("strong"),fTr=o("xlm-roberta"),mTr=o(" \u2014 "),IH=a("a"),gTr=o("TFXLMRobertaForSequenceClassification"),hTr=o(" (XLM-RoBERTa model)"),pTr=l(),jE=a("li"),Cve=a("strong"),_Tr=o("xlnet"),uTr=o(" \u2014 "),qH=a("a"),bTr=o("TFXLNetForSequenceClassification"),vTr=o(" (XLNet model)"),FTr=l(),F(DE.$$.fragment),PNe=l(),lc=a("h2"),GE=a("a"),wve=a("span"),F(P8.$$.fragment),TTr=l(),Ave=a("span"),MTr=o("TFAutoModelForMultipleChoice"),BNe=l(),ar=a("div"),F(B8.$$.fragment),ETr=l(),ic=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=a("a"),wTr=o("from_pretrained()"),ATr=o(" class method or the "),jH=a("a"),yTr=o("from_config()"),LTr=o(` class
method.`),xTr=l(),I8=a("p"),$Tr=o("This class cannot be instantiated directly using "),yve=a("code"),kTr=o("__init__()"),STr=o(" (throws an error)."),RTr=l(),Pt=a("div"),F(q8.$$.fragment),PTr=l(),Lve=a("p"),BTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ITr=l(),dc=a("p"),qTr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),NTr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),DTr=o("from_pretrained()"),GTr=o(" to load the model weights."),OTr=l(),F(OE.$$.fragment),VTr=l(),Sr=a("div"),F(N8.$$.fragment),XTr=l(),$ve=a("p"),zTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WTr=l(),sn=a("p"),QTr=o("The model class to instantiate is selected based on the "),kve=a("code"),HTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),eMr=l(),he=a("ul"),VE=a("li"),Pve=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),GH=a("a"),tMr=o("TFAlbertForMultipleChoice"),aMr=o(" (ALBERT model)"),nMr=l(),XE=a("li"),Bve=a("strong"),sMr=o("bert"),lMr=o(" \u2014 "),OH=a("a"),iMr=o("TFBertForMultipleChoice"),dMr=o(" (BERT model)"),cMr=l(),zE=a("li"),Ive=a("strong"),fMr=o("camembert"),mMr=o(" \u2014 "),VH=a("a"),gMr=o("TFCamembertForMultipleChoice"),hMr=o(" (CamemBERT model)"),pMr=l(),WE=a("li"),qve=a("strong"),_Mr=o("convbert"),uMr=o(" \u2014 "),XH=a("a"),bMr=o("TFConvBertForMultipleChoice"),vMr=o(" (ConvBERT model)"),FMr=l(),QE=a("li"),Nve=a("strong"),TMr=o("distilbert"),MMr=o(" \u2014 "),zH=a("a"),EMr=o("TFDistilBertForMultipleChoice"),CMr=o(" (DistilBERT model)"),wMr=l(),HE=a("li"),jve=a("strong"),AMr=o("electra"),yMr=o(" \u2014 "),WH=a("a"),LMr=o("TFElectraForMultipleChoice"),xMr=o(" (ELECTRA model)"),$Mr=l(),UE=a("li"),Dve=a("strong"),kMr=o("flaubert"),SMr=o(" \u2014 "),QH=a("a"),RMr=o("TFFlaubertForMultipleChoice"),PMr=o(" (FlauBERT model)"),BMr=l(),JE=a("li"),Gve=a("strong"),IMr=o("funnel"),qMr=o(" \u2014 "),HH=a("a"),NMr=o("TFFunnelForMultipleChoice"),jMr=o(" (Funnel Transformer model)"),DMr=l(),YE=a("li"),Ove=a("strong"),GMr=o("longformer"),OMr=o(" \u2014 "),UH=a("a"),VMr=o("TFLongformerForMultipleChoice"),XMr=o(" (Longformer model)"),zMr=l(),KE=a("li"),Vve=a("strong"),WMr=o("mobilebert"),QMr=o(" \u2014 "),JH=a("a"),HMr=o("TFMobileBertForMultipleChoice"),UMr=o(" (MobileBERT model)"),JMr=l(),ZE=a("li"),Xve=a("strong"),YMr=o("mpnet"),KMr=o(" \u2014 "),YH=a("a"),ZMr=o("TFMPNetForMultipleChoice"),e4r=o(" (MPNet model)"),o4r=l(),eC=a("li"),zve=a("strong"),r4r=o("rembert"),t4r=o(" \u2014 "),KH=a("a"),a4r=o("TFRemBertForMultipleChoice"),n4r=o(" (RemBERT model)"),s4r=l(),oC=a("li"),Wve=a("strong"),l4r=o("roberta"),i4r=o(" \u2014 "),ZH=a("a"),d4r=o("TFRobertaForMultipleChoice"),c4r=o(" (RoBERTa model)"),f4r=l(),rC=a("li"),Qve=a("strong"),m4r=o("roformer"),g4r=o(" \u2014 "),eU=a("a"),h4r=o("TFRoFormerForMultipleChoice"),p4r=o(" (RoFormer model)"),_4r=l(),tC=a("li"),Hve=a("strong"),u4r=o("xlm"),b4r=o(" \u2014 "),oU=a("a"),v4r=o("TFXLMForMultipleChoice"),F4r=o(" (XLM model)"),T4r=l(),aC=a("li"),Uve=a("strong"),M4r=o("xlm-roberta"),E4r=o(" \u2014 "),rU=a("a"),C4r=o("TFXLMRobertaForMultipleChoice"),w4r=o(" (XLM-RoBERTa model)"),A4r=l(),nC=a("li"),Jve=a("strong"),y4r=o("xlnet"),L4r=o(" \u2014 "),tU=a("a"),x4r=o("TFXLNetForMultipleChoice"),$4r=o(" (XLNet model)"),k4r=l(),F(sC.$$.fragment),INe=l(),cc=a("h2"),lC=a("a"),Yve=a("span"),F(j8.$$.fragment),S4r=l(),Kve=a("span"),R4r=o("TFAutoModelForNextSentencePrediction"),qNe=l(),nr=a("div"),F(D8.$$.fragment),P4r=l(),fc=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=a("a"),I4r=o("from_pretrained()"),q4r=o(" class method or the "),nU=a("a"),N4r=o("from_config()"),j4r=o(` class
method.`),D4r=l(),G8=a("p"),G4r=o("This class cannot be instantiated directly using "),Zve=a("code"),O4r=o("__init__()"),V4r=o(" (throws an error)."),X4r=l(),Bt=a("div"),F(O8.$$.fragment),z4r=l(),eFe=a("p"),W4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q4r=l(),mc=a("p"),H4r=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),U4r=o("not"),J4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),Y4r=o("from_pretrained()"),K4r=o(" to load the model weights."),Z4r=l(),F(iC.$$.fragment),eEr=l(),Rr=a("div"),F(V8.$$.fragment),oEr=l(),rFe=a("p"),rEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tEr=l(),ln=a("p"),aEr=o("The model class to instantiate is selected based on the "),tFe=a("code"),nEr=o("model_type"),sEr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),dEr=o("pretrained_model_name_or_path"),cEr=o(":"),fEr=l(),X8=a("ul"),dC=a("li"),sFe=a("strong"),mEr=o("bert"),gEr=o(" \u2014 "),lU=a("a"),hEr=o("TFBertForNextSentencePrediction"),pEr=o(" (BERT model)"),_Er=l(),cC=a("li"),lFe=a("strong"),uEr=o("mobilebert"),bEr=o(" \u2014 "),iU=a("a"),vEr=o("TFMobileBertForNextSentencePrediction"),FEr=o(" (MobileBERT model)"),TEr=l(),F(fC.$$.fragment),NNe=l(),gc=a("h2"),mC=a("a"),iFe=a("span"),F(z8.$$.fragment),MEr=l(),dFe=a("span"),EEr=o("TFAutoModelForTableQuestionAnswering"),jNe=l(),sr=a("div"),F(W8.$$.fragment),CEr=l(),hc=a("p"),wEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dU=a("a"),AEr=o("from_pretrained()"),yEr=o(" class method or the "),cU=a("a"),LEr=o("from_config()"),xEr=o(` class
method.`),$Er=l(),Q8=a("p"),kEr=o("This class cannot be instantiated directly using "),cFe=a("code"),SEr=o("__init__()"),REr=o(" (throws an error)."),PEr=l(),It=a("div"),F(H8.$$.fragment),BEr=l(),fFe=a("p"),IEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qEr=l(),pc=a("p"),NEr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),jEr=o("not"),DEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),GEr=o("from_pretrained()"),OEr=o(" to load the model weights."),VEr=l(),F(gC.$$.fragment),XEr=l(),Pr=a("div"),F(U8.$$.fragment),zEr=l(),gFe=a("p"),WEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),QEr=l(),dn=a("p"),HEr=o("The model class to instantiate is selected based on the "),hFe=a("code"),UEr=o("model_type"),JEr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),ZEr=o("pretrained_model_name_or_path"),eCr=o(":"),oCr=l(),uFe=a("ul"),hC=a("li"),bFe=a("strong"),rCr=o("tapas"),tCr=o(" \u2014 "),mU=a("a"),aCr=o("TFTapasForQuestionAnswering"),nCr=o(" (TAPAS model)"),sCr=l(),F(pC.$$.fragment),DNe=l(),_c=a("h2"),_C=a("a"),vFe=a("span"),F(J8.$$.fragment),lCr=l(),FFe=a("span"),iCr=o("TFAutoModelForTokenClassification"),GNe=l(),lr=a("div"),F(Y8.$$.fragment),dCr=l(),uc=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gU=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),hU=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),K8=a("p"),_Cr=o("This class cannot be instantiated directly using "),TFe=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),qt=a("div"),F(Z8.$$.fragment),FCr=l(),MFe=a("p"),TCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MCr=l(),bc=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),ACr=o("from_pretrained()"),yCr=o(" to load the model weights."),LCr=l(),F(uC.$$.fragment),xCr=l(),Br=a("div"),F(e9.$$.fragment),$Cr=l(),CFe=a("p"),kCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SCr=l(),cn=a("p"),RCr=o("The model class to instantiate is selected based on the "),wFe=a("code"),PCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),ICr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(":"),DCr=l(),de=a("ul"),bC=a("li"),LFe=a("strong"),GCr=o("albert"),OCr=o(" \u2014 "),_U=a("a"),VCr=o("TFAlbertForTokenClassification"),XCr=o(" (ALBERT model)"),zCr=l(),vC=a("li"),xFe=a("strong"),WCr=o("bert"),QCr=o(" \u2014 "),uU=a("a"),HCr=o("TFBertForTokenClassification"),UCr=o(" (BERT model)"),JCr=l(),FC=a("li"),$Fe=a("strong"),YCr=o("camembert"),KCr=o(" \u2014 "),bU=a("a"),ZCr=o("TFCamembertForTokenClassification"),e5r=o(" (CamemBERT model)"),o5r=l(),TC=a("li"),kFe=a("strong"),r5r=o("convbert"),t5r=o(" \u2014 "),vU=a("a"),a5r=o("TFConvBertForTokenClassification"),n5r=o(" (ConvBERT model)"),s5r=l(),MC=a("li"),SFe=a("strong"),l5r=o("deberta"),i5r=o(" \u2014 "),FU=a("a"),d5r=o("TFDebertaForTokenClassification"),c5r=o(" (DeBERTa model)"),f5r=l(),EC=a("li"),RFe=a("strong"),m5r=o("deberta-v2"),g5r=o(" \u2014 "),TU=a("a"),h5r=o("TFDebertaV2ForTokenClassification"),p5r=o(" (DeBERTa-v2 model)"),_5r=l(),CC=a("li"),PFe=a("strong"),u5r=o("distilbert"),b5r=o(" \u2014 "),MU=a("a"),v5r=o("TFDistilBertForTokenClassification"),F5r=o(" (DistilBERT model)"),T5r=l(),wC=a("li"),BFe=a("strong"),M5r=o("electra"),E5r=o(" \u2014 "),EU=a("a"),C5r=o("TFElectraForTokenClassification"),w5r=o(" (ELECTRA model)"),A5r=l(),AC=a("li"),IFe=a("strong"),y5r=o("flaubert"),L5r=o(" \u2014 "),CU=a("a"),x5r=o("TFFlaubertForTokenClassification"),$5r=o(" (FlauBERT model)"),k5r=l(),yC=a("li"),qFe=a("strong"),S5r=o("funnel"),R5r=o(" \u2014 "),wU=a("a"),P5r=o("TFFunnelForTokenClassification"),B5r=o(" (Funnel Transformer model)"),I5r=l(),LC=a("li"),NFe=a("strong"),q5r=o("layoutlm"),N5r=o(" \u2014 "),AU=a("a"),j5r=o("TFLayoutLMForTokenClassification"),D5r=o(" (LayoutLM model)"),G5r=l(),xC=a("li"),jFe=a("strong"),O5r=o("longformer"),V5r=o(" \u2014 "),yU=a("a"),X5r=o("TFLongformerForTokenClassification"),z5r=o(" (Longformer model)"),W5r=l(),$C=a("li"),DFe=a("strong"),Q5r=o("mobilebert"),H5r=o(" \u2014 "),LU=a("a"),U5r=o("TFMobileBertForTokenClassification"),J5r=o(" (MobileBERT model)"),Y5r=l(),kC=a("li"),GFe=a("strong"),K5r=o("mpnet"),Z5r=o(" \u2014 "),xU=a("a"),e3r=o("TFMPNetForTokenClassification"),o3r=o(" (MPNet model)"),r3r=l(),SC=a("li"),OFe=a("strong"),t3r=o("rembert"),a3r=o(" \u2014 "),$U=a("a"),n3r=o("TFRemBertForTokenClassification"),s3r=o(" (RemBERT model)"),l3r=l(),RC=a("li"),VFe=a("strong"),i3r=o("roberta"),d3r=o(" \u2014 "),kU=a("a"),c3r=o("TFRobertaForTokenClassification"),f3r=o(" (RoBERTa model)"),m3r=l(),PC=a("li"),XFe=a("strong"),g3r=o("roformer"),h3r=o(" \u2014 "),SU=a("a"),p3r=o("TFRoFormerForTokenClassification"),_3r=o(" (RoFormer model)"),u3r=l(),BC=a("li"),zFe=a("strong"),b3r=o("xlm"),v3r=o(" \u2014 "),RU=a("a"),F3r=o("TFXLMForTokenClassification"),T3r=o(" (XLM model)"),M3r=l(),IC=a("li"),WFe=a("strong"),E3r=o("xlm-roberta"),C3r=o(" \u2014 "),PU=a("a"),w3r=o("TFXLMRobertaForTokenClassification"),A3r=o(" (XLM-RoBERTa model)"),y3r=l(),qC=a("li"),QFe=a("strong"),L3r=o("xlnet"),x3r=o(" \u2014 "),BU=a("a"),$3r=o("TFXLNetForTokenClassification"),k3r=o(" (XLNet model)"),S3r=l(),F(NC.$$.fragment),ONe=l(),vc=a("h2"),jC=a("a"),HFe=a("span"),F(o9.$$.fragment),R3r=l(),UFe=a("span"),P3r=o("TFAutoModelForQuestionAnswering"),VNe=l(),ir=a("div"),F(r9.$$.fragment),B3r=l(),Fc=a("p"),I3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=a("a"),q3r=o("from_pretrained()"),N3r=o(" class method or the "),qU=a("a"),j3r=o("from_config()"),D3r=o(` class
method.`),G3r=l(),t9=a("p"),O3r=o("This class cannot be instantiated directly using "),JFe=a("code"),V3r=o("__init__()"),X3r=o(" (throws an error)."),z3r=l(),Nt=a("div"),F(a9.$$.fragment),W3r=l(),YFe=a("p"),Q3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H3r=l(),Tc=a("p"),U3r=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),J3r=o("not"),Y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),K3r=o("from_pretrained()"),Z3r=o(" to load the model weights."),ewr=l(),F(DC.$$.fragment),owr=l(),Ir=a("div"),F(n9.$$.fragment),rwr=l(),ZFe=a("p"),twr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),awr=l(),fn=a("p"),nwr=o("The model class to instantiate is selected based on the "),eTe=a("code"),swr=o("model_type"),lwr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),cwr=o("pretrained_model_name_or_path"),fwr=o(":"),mwr=l(),ce=a("ul"),GC=a("li"),tTe=a("strong"),gwr=o("albert"),hwr=o(" \u2014 "),jU=a("a"),pwr=o("TFAlbertForQuestionAnswering"),_wr=o(" (ALBERT model)"),uwr=l(),OC=a("li"),aTe=a("strong"),bwr=o("bert"),vwr=o(" \u2014 "),DU=a("a"),Fwr=o("TFBertForQuestionAnswering"),Twr=o(" (BERT model)"),Mwr=l(),VC=a("li"),nTe=a("strong"),Ewr=o("camembert"),Cwr=o(" \u2014 "),GU=a("a"),wwr=o("TFCamembertForQuestionAnswering"),Awr=o(" (CamemBERT model)"),ywr=l(),XC=a("li"),sTe=a("strong"),Lwr=o("convbert"),xwr=o(" \u2014 "),OU=a("a"),$wr=o("TFConvBertForQuestionAnswering"),kwr=o(" (ConvBERT model)"),Swr=l(),zC=a("li"),lTe=a("strong"),Rwr=o("deberta"),Pwr=o(" \u2014 "),VU=a("a"),Bwr=o("TFDebertaForQuestionAnswering"),Iwr=o(" (DeBERTa model)"),qwr=l(),WC=a("li"),iTe=a("strong"),Nwr=o("deberta-v2"),jwr=o(" \u2014 "),XU=a("a"),Dwr=o("TFDebertaV2ForQuestionAnswering"),Gwr=o(" (DeBERTa-v2 model)"),Owr=l(),QC=a("li"),dTe=a("strong"),Vwr=o("distilbert"),Xwr=o(" \u2014 "),zU=a("a"),zwr=o("TFDistilBertForQuestionAnswering"),Wwr=o(" (DistilBERT model)"),Qwr=l(),HC=a("li"),cTe=a("strong"),Hwr=o("electra"),Uwr=o(" \u2014 "),WU=a("a"),Jwr=o("TFElectraForQuestionAnswering"),Ywr=o(" (ELECTRA model)"),Kwr=l(),UC=a("li"),fTe=a("strong"),Zwr=o("flaubert"),e0r=o(" \u2014 "),QU=a("a"),o0r=o("TFFlaubertForQuestionAnsweringSimple"),r0r=o(" (FlauBERT model)"),t0r=l(),JC=a("li"),mTe=a("strong"),a0r=o("funnel"),n0r=o(" \u2014 "),HU=a("a"),s0r=o("TFFunnelForQuestionAnswering"),l0r=o(" (Funnel Transformer model)"),i0r=l(),YC=a("li"),gTe=a("strong"),d0r=o("gptj"),c0r=o(" \u2014 "),UU=a("a"),f0r=o("TFGPTJForQuestionAnswering"),m0r=o(" (GPT-J model)"),g0r=l(),KC=a("li"),hTe=a("strong"),h0r=o("longformer"),p0r=o(" \u2014 "),JU=a("a"),_0r=o("TFLongformerForQuestionAnswering"),u0r=o(" (Longformer model)"),b0r=l(),ZC=a("li"),pTe=a("strong"),v0r=o("mobilebert"),F0r=o(" \u2014 "),YU=a("a"),T0r=o("TFMobileBertForQuestionAnswering"),M0r=o(" (MobileBERT model)"),E0r=l(),e5=a("li"),_Te=a("strong"),C0r=o("mpnet"),w0r=o(" \u2014 "),KU=a("a"),A0r=o("TFMPNetForQuestionAnswering"),y0r=o(" (MPNet model)"),L0r=l(),o5=a("li"),uTe=a("strong"),x0r=o("rembert"),$0r=o(" \u2014 "),ZU=a("a"),k0r=o("TFRemBertForQuestionAnswering"),S0r=o(" (RemBERT model)"),R0r=l(),r5=a("li"),bTe=a("strong"),P0r=o("roberta"),B0r=o(" \u2014 "),eJ=a("a"),I0r=o("TFRobertaForQuestionAnswering"),q0r=o(" (RoBERTa model)"),N0r=l(),t5=a("li"),vTe=a("strong"),j0r=o("roformer"),D0r=o(" \u2014 "),oJ=a("a"),G0r=o("TFRoFormerForQuestionAnswering"),O0r=o(" (RoFormer model)"),V0r=l(),a5=a("li"),FTe=a("strong"),X0r=o("xlm"),z0r=o(" \u2014 "),rJ=a("a"),W0r=o("TFXLMForQuestionAnsweringSimple"),Q0r=o(" (XLM model)"),H0r=l(),n5=a("li"),TTe=a("strong"),U0r=o("xlm-roberta"),J0r=o(" \u2014 "),tJ=a("a"),Y0r=o("TFXLMRobertaForQuestionAnswering"),K0r=o(" (XLM-RoBERTa model)"),Z0r=l(),s5=a("li"),MTe=a("strong"),eAr=o("xlnet"),oAr=o(" \u2014 "),aJ=a("a"),rAr=o("TFXLNetForQuestionAnsweringSimple"),tAr=o(" (XLNet model)"),aAr=l(),F(l5.$$.fragment),XNe=l(),Mc=a("h2"),i5=a("a"),ETe=a("span"),F(s9.$$.fragment),nAr=l(),CTe=a("span"),sAr=o("TFAutoModelForVision2Seq"),zNe=l(),dr=a("div"),F(l9.$$.fragment),lAr=l(),Ec=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nJ=a("a"),dAr=o("from_pretrained()"),cAr=o(" class method or the "),sJ=a("a"),fAr=o("from_config()"),mAr=o(` class
method.`),gAr=l(),i9=a("p"),hAr=o("This class cannot be instantiated directly using "),wTe=a("code"),pAr=o("__init__()"),_Ar=o(" (throws an error)."),uAr=l(),jt=a("div"),F(d9.$$.fragment),bAr=l(),ATe=a("p"),vAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FAr=l(),Cc=a("p"),TAr=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),MAr=o("not"),EAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),CAr=o("from_pretrained()"),wAr=o(" to load the model weights."),AAr=l(),F(d5.$$.fragment),yAr=l(),qr=a("div"),F(c9.$$.fragment),LAr=l(),LTe=a("p"),xAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Ar=l(),mn=a("p"),kAr=o("The model class to instantiate is selected based on the "),xTe=a("code"),SAr=o("model_type"),RAr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),IAr=o("pretrained_model_name_or_path"),qAr=o(":"),NAr=l(),STe=a("ul"),c5=a("li"),RTe=a("strong"),jAr=o("vision-encoder-decoder"),DAr=o(" \u2014 "),iJ=a("a"),GAr=o("TFVisionEncoderDecoderModel"),OAr=o(" (Vision Encoder decoder model)"),VAr=l(),F(f5.$$.fragment),WNe=l(),wc=a("h2"),m5=a("a"),PTe=a("span"),F(f9.$$.fragment),XAr=l(),BTe=a("span"),zAr=o("TFAutoModelForSpeechSeq2Seq"),QNe=l(),cr=a("div"),F(m9.$$.fragment),WAr=l(),Ac=a("p"),QAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dJ=a("a"),HAr=o("from_pretrained()"),UAr=o(" class method or the "),cJ=a("a"),JAr=o("from_config()"),YAr=o(` class
method.`),KAr=l(),g9=a("p"),ZAr=o("This class cannot be instantiated directly using "),ITe=a("code"),e6r=o("__init__()"),o6r=o(" (throws an error)."),r6r=l(),Dt=a("div"),F(h9.$$.fragment),t6r=l(),qTe=a("p"),a6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n6r=l(),yc=a("p"),s6r=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),l6r=o("not"),i6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),d6r=o("from_pretrained()"),c6r=o(" to load the model weights."),f6r=l(),F(g5.$$.fragment),m6r=l(),Nr=a("div"),F(p9.$$.fragment),g6r=l(),jTe=a("p"),h6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),p6r=l(),gn=a("p"),_6r=o("The model class to instantiate is selected based on the "),DTe=a("code"),u6r=o("model_type"),b6r=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),T6r=o("pretrained_model_name_or_path"),M6r=o(":"),E6r=l(),VTe=a("ul"),h5=a("li"),XTe=a("strong"),C6r=o("speech_to_text"),w6r=o(" \u2014 "),mJ=a("a"),A6r=o("TFSpeech2TextForConditionalGeneration"),y6r=o(" (Speech2Text model)"),L6r=l(),F(p5.$$.fragment),HNe=l(),Lc=a("h2"),_5=a("a"),zTe=a("span"),F(_9.$$.fragment),x6r=l(),WTe=a("span"),$6r=o("FlaxAutoModel"),UNe=l(),fr=a("div"),F(u9.$$.fragment),k6r=l(),xc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gJ=a("a"),R6r=o("from_pretrained()"),P6r=o(" class method or the "),hJ=a("a"),B6r=o("from_config()"),I6r=o(` class
method.`),q6r=l(),b9=a("p"),N6r=o("This class cannot be instantiated directly using "),QTe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),G6r=l(),Gt=a("div"),F(v9.$$.fragment),O6r=l(),HTe=a("p"),V6r=o("Instantiates one of the base model classes of the library from a configuration."),X6r=l(),$c=a("p"),z6r=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),W6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),H6r=o("from_pretrained()"),U6r=o(" to load the model weights."),J6r=l(),F(u5.$$.fragment),Y6r=l(),jr=a("div"),F(F9.$$.fragment),K6r=l(),JTe=a("p"),Z6r=o("Instantiate one of the base model classes of the library from a pretrained model."),eyr=l(),hn=a("p"),oyr=o("The model class to instantiate is selected based on the "),YTe=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),oe=a("ul"),b5=a("li"),eMe=a("strong"),dyr=o("albert"),cyr=o(" \u2014 "),_J=a("a"),fyr=o("FlaxAlbertModel"),myr=o(" (ALBERT model)"),gyr=l(),v5=a("li"),oMe=a("strong"),hyr=o("bart"),pyr=o(" \u2014 "),uJ=a("a"),_yr=o("FlaxBartModel"),uyr=o(" (BART model)"),byr=l(),F5=a("li"),rMe=a("strong"),vyr=o("beit"),Fyr=o(" \u2014 "),bJ=a("a"),Tyr=o("FlaxBeitModel"),Myr=o(" (BEiT model)"),Eyr=l(),T5=a("li"),tMe=a("strong"),Cyr=o("bert"),wyr=o(" \u2014 "),vJ=a("a"),Ayr=o("FlaxBertModel"),yyr=o(" (BERT model)"),Lyr=l(),M5=a("li"),aMe=a("strong"),xyr=o("big_bird"),$yr=o(" \u2014 "),FJ=a("a"),kyr=o("FlaxBigBirdModel"),Syr=o(" (BigBird model)"),Ryr=l(),E5=a("li"),nMe=a("strong"),Pyr=o("blenderbot"),Byr=o(" \u2014 "),TJ=a("a"),Iyr=o("FlaxBlenderbotModel"),qyr=o(" (Blenderbot model)"),Nyr=l(),C5=a("li"),sMe=a("strong"),jyr=o("blenderbot-small"),Dyr=o(" \u2014 "),MJ=a("a"),Gyr=o("FlaxBlenderbotSmallModel"),Oyr=o(" (BlenderbotSmall model)"),Vyr=l(),w5=a("li"),lMe=a("strong"),Xyr=o("clip"),zyr=o(" \u2014 "),EJ=a("a"),Wyr=o("FlaxCLIPModel"),Qyr=o(" (CLIP model)"),Hyr=l(),A5=a("li"),iMe=a("strong"),Uyr=o("distilbert"),Jyr=o(" \u2014 "),CJ=a("a"),Yyr=o("FlaxDistilBertModel"),Kyr=o(" (DistilBERT model)"),Zyr=l(),y5=a("li"),dMe=a("strong"),eLr=o("electra"),oLr=o(" \u2014 "),wJ=a("a"),rLr=o("FlaxElectraModel"),tLr=o(" (ELECTRA model)"),aLr=l(),L5=a("li"),cMe=a("strong"),nLr=o("gpt2"),sLr=o(" \u2014 "),AJ=a("a"),lLr=o("FlaxGPT2Model"),iLr=o(" (OpenAI GPT-2 model)"),dLr=l(),x5=a("li"),fMe=a("strong"),cLr=o("gpt_neo"),fLr=o(" \u2014 "),yJ=a("a"),mLr=o("FlaxGPTNeoModel"),gLr=o(" (GPT Neo model)"),hLr=l(),$5=a("li"),mMe=a("strong"),pLr=o("gptj"),_Lr=o(" \u2014 "),LJ=a("a"),uLr=o("FlaxGPTJModel"),bLr=o(" (GPT-J model)"),vLr=l(),k5=a("li"),gMe=a("strong"),FLr=o("marian"),TLr=o(" \u2014 "),xJ=a("a"),MLr=o("FlaxMarianModel"),ELr=o(" (Marian model)"),CLr=l(),S5=a("li"),hMe=a("strong"),wLr=o("mbart"),ALr=o(" \u2014 "),$J=a("a"),yLr=o("FlaxMBartModel"),LLr=o(" (mBART model)"),xLr=l(),R5=a("li"),pMe=a("strong"),$Lr=o("mt5"),kLr=o(" \u2014 "),kJ=a("a"),SLr=o("FlaxMT5Model"),RLr=o(" (mT5 model)"),PLr=l(),P5=a("li"),_Me=a("strong"),BLr=o("opt"),ILr=o(" \u2014 "),SJ=a("a"),qLr=o("FlaxOPTModel"),NLr=o(" (OPT model)"),jLr=l(),B5=a("li"),uMe=a("strong"),DLr=o("pegasus"),GLr=o(" \u2014 "),RJ=a("a"),OLr=o("FlaxPegasusModel"),VLr=o(" (Pegasus model)"),XLr=l(),I5=a("li"),bMe=a("strong"),zLr=o("roberta"),WLr=o(" \u2014 "),PJ=a("a"),QLr=o("FlaxRobertaModel"),HLr=o(" (RoBERTa model)"),ULr=l(),q5=a("li"),vMe=a("strong"),JLr=o("roformer"),YLr=o(" \u2014 "),BJ=a("a"),KLr=o("FlaxRoFormerModel"),ZLr=o(" (RoFormer model)"),e8r=l(),N5=a("li"),FMe=a("strong"),o8r=o("t5"),r8r=o(" \u2014 "),IJ=a("a"),t8r=o("FlaxT5Model"),a8r=o(" (T5 model)"),n8r=l(),j5=a("li"),TMe=a("strong"),s8r=o("vision-text-dual-encoder"),l8r=o(" \u2014 "),qJ=a("a"),i8r=o("FlaxVisionTextDualEncoderModel"),d8r=o(" (VisionTextDualEncoder model)"),c8r=l(),D5=a("li"),MMe=a("strong"),f8r=o("vit"),m8r=o(" \u2014 "),NJ=a("a"),g8r=o("FlaxViTModel"),h8r=o(" (ViT model)"),p8r=l(),G5=a("li"),EMe=a("strong"),_8r=o("wav2vec2"),u8r=o(" \u2014 "),jJ=a("a"),b8r=o("FlaxWav2Vec2Model"),v8r=o(" (Wav2Vec2 model)"),F8r=l(),O5=a("li"),CMe=a("strong"),T8r=o("xglm"),M8r=o(" \u2014 "),DJ=a("a"),E8r=o("FlaxXGLMModel"),C8r=o(" (XGLM model)"),w8r=l(),V5=a("li"),wMe=a("strong"),A8r=o("xlm-roberta"),y8r=o(" \u2014 "),GJ=a("a"),L8r=o("FlaxXLMRobertaModel"),x8r=o(" (XLM-RoBERTa model)"),$8r=l(),F(X5.$$.fragment),JNe=l(),kc=a("h2"),z5=a("a"),AMe=a("span"),F(T9.$$.fragment),k8r=l(),yMe=a("span"),S8r=o("FlaxAutoModelForCausalLM"),YNe=l(),mr=a("div"),F(M9.$$.fragment),R8r=l(),Sc=a("p"),P8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OJ=a("a"),B8r=o("from_pretrained()"),I8r=o(" class method or the "),VJ=a("a"),q8r=o("from_config()"),N8r=o(` class
method.`),j8r=l(),E9=a("p"),D8r=o("This class cannot be instantiated directly using "),LMe=a("code"),G8r=o("__init__()"),O8r=o(" (throws an error)."),V8r=l(),Ot=a("div"),F(C9.$$.fragment),X8r=l(),xMe=a("p"),z8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W8r=l(),Rc=a("p"),Q8r=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),H8r=o("not"),U8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),J8r=o("from_pretrained()"),Y8r=o(" to load the model weights."),K8r=l(),F(W5.$$.fragment),Z8r=l(),Dr=a("div"),F(w9.$$.fragment),e9r=l(),kMe=a("p"),o9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r9r=l(),pn=a("p"),t9r=o("The model class to instantiate is selected based on the "),SMe=a("code"),a9r=o("model_type"),n9r=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),s9r=o("pretrained_model_name_or_path"),l9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),i9r=o("pretrained_model_name_or_path"),d9r=o(":"),c9r=l(),Le=a("ul"),Q5=a("li"),BMe=a("strong"),f9r=o("bart"),m9r=o(" \u2014 "),zJ=a("a"),g9r=o("FlaxBartForCausalLM"),h9r=o(" (BART model)"),p9r=l(),H5=a("li"),IMe=a("strong"),_9r=o("bert"),u9r=o(" \u2014 "),WJ=a("a"),b9r=o("FlaxBertForCausalLM"),v9r=o(" (BERT model)"),F9r=l(),U5=a("li"),qMe=a("strong"),T9r=o("big_bird"),M9r=o(" \u2014 "),QJ=a("a"),E9r=o("FlaxBigBirdForCausalLM"),C9r=o(" (BigBird model)"),w9r=l(),J5=a("li"),NMe=a("strong"),A9r=o("electra"),y9r=o(" \u2014 "),HJ=a("a"),L9r=o("FlaxElectraForCausalLM"),x9r=o(" (ELECTRA model)"),$9r=l(),Y5=a("li"),jMe=a("strong"),k9r=o("gpt2"),S9r=o(" \u2014 "),UJ=a("a"),R9r=o("FlaxGPT2LMHeadModel"),P9r=o(" (OpenAI GPT-2 model)"),B9r=l(),K5=a("li"),DMe=a("strong"),I9r=o("gpt_neo"),q9r=o(" \u2014 "),JJ=a("a"),N9r=o("FlaxGPTNeoForCausalLM"),j9r=o(" (GPT Neo model)"),D9r=l(),Z5=a("li"),GMe=a("strong"),G9r=o("gptj"),O9r=o(" \u2014 "),YJ=a("a"),V9r=o("FlaxGPTJForCausalLM"),X9r=o(" (GPT-J model)"),z9r=l(),e3=a("li"),OMe=a("strong"),W9r=o("opt"),Q9r=o(" \u2014 "),KJ=a("a"),H9r=o("FlaxOPTForCausalLM"),U9r=o(" (OPT model)"),J9r=l(),o3=a("li"),VMe=a("strong"),Y9r=o("roberta"),K9r=o(" \u2014 "),ZJ=a("a"),Z9r=o("FlaxRobertaForCausalLM"),exr=o(" (RoBERTa model)"),oxr=l(),r3=a("li"),XMe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),eY=a("a"),axr=o("FlaxXGLMForCausalLM"),nxr=o(" (XGLM model)"),sxr=l(),F(t3.$$.fragment),KNe=l(),Pc=a("h2"),a3=a("a"),zMe=a("span"),F(A9.$$.fragment),lxr=l(),WMe=a("span"),ixr=o("FlaxAutoModelForPreTraining"),ZNe=l(),gr=a("div"),F(y9.$$.fragment),dxr=l(),Bc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oY=a("a"),fxr=o("from_pretrained()"),mxr=o(" class method or the "),rY=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),pxr=l(),L9=a("p"),_xr=o("This class cannot be instantiated directly using "),QMe=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Vt=a("div"),F(x9.$$.fragment),Fxr=l(),HMe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mxr=l(),Ic=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),Axr=o("from_pretrained()"),yxr=o(" to load the model weights."),Lxr=l(),F(n3.$$.fragment),xxr=l(),Gr=a("div"),F($9.$$.fragment),$xr=l(),JMe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sxr=l(),_n=a("p"),Rxr=o("The model class to instantiate is selected based on the "),YMe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),Ixr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),Nxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),Ee=a("ul"),s3=a("li"),e4e=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),aY=a("a"),Vxr=o("FlaxAlbertForPreTraining"),Xxr=o(" (ALBERT model)"),zxr=l(),l3=a("li"),o4e=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),nY=a("a"),Hxr=o("FlaxBartForConditionalGeneration"),Uxr=o(" (BART model)"),Jxr=l(),i3=a("li"),r4e=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),sY=a("a"),Zxr=o("FlaxBertForPreTraining"),e$r=o(" (BERT model)"),o$r=l(),d3=a("li"),t4e=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),lY=a("a"),a$r=o("FlaxBigBirdForPreTraining"),n$r=o(" (BigBird model)"),s$r=l(),c3=a("li"),a4e=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),iY=a("a"),d$r=o("FlaxElectraForPreTraining"),c$r=o(" (ELECTRA model)"),f$r=l(),f3=a("li"),n4e=a("strong"),m$r=o("mbart"),g$r=o(" \u2014 "),dY=a("a"),h$r=o("FlaxMBartForConditionalGeneration"),p$r=o(" (mBART model)"),_$r=l(),m3=a("li"),s4e=a("strong"),u$r=o("mt5"),b$r=o(" \u2014 "),cY=a("a"),v$r=o("FlaxMT5ForConditionalGeneration"),F$r=o(" (mT5 model)"),T$r=l(),g3=a("li"),l4e=a("strong"),M$r=o("roberta"),E$r=o(" \u2014 "),fY=a("a"),C$r=o("FlaxRobertaForMaskedLM"),w$r=o(" (RoBERTa model)"),A$r=l(),h3=a("li"),i4e=a("strong"),y$r=o("roformer"),L$r=o(" \u2014 "),mY=a("a"),x$r=o("FlaxRoFormerForMaskedLM"),$$r=o(" (RoFormer model)"),k$r=l(),p3=a("li"),d4e=a("strong"),S$r=o("t5"),R$r=o(" \u2014 "),gY=a("a"),P$r=o("FlaxT5ForConditionalGeneration"),B$r=o(" (T5 model)"),I$r=l(),_3=a("li"),c4e=a("strong"),q$r=o("wav2vec2"),N$r=o(" \u2014 "),hY=a("a"),j$r=o("FlaxWav2Vec2ForPreTraining"),D$r=o(" (Wav2Vec2 model)"),G$r=l(),u3=a("li"),f4e=a("strong"),O$r=o("xlm-roberta"),V$r=o(" \u2014 "),pY=a("a"),X$r=o("FlaxXLMRobertaForMaskedLM"),z$r=o(" (XLM-RoBERTa model)"),W$r=l(),F(b3.$$.fragment),eje=l(),qc=a("h2"),v3=a("a"),m4e=a("span"),F(k9.$$.fragment),Q$r=l(),g4e=a("span"),H$r=o("FlaxAutoModelForMaskedLM"),oje=l(),hr=a("div"),F(S9.$$.fragment),U$r=l(),Nc=a("p"),J$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=a("a"),Y$r=o("from_pretrained()"),K$r=o(" class method or the "),uY=a("a"),Z$r=o("from_config()"),ekr=o(` class
method.`),okr=l(),R9=a("p"),rkr=o("This class cannot be instantiated directly using "),h4e=a("code"),tkr=o("__init__()"),akr=o(" (throws an error)."),nkr=l(),Xt=a("div"),F(P9.$$.fragment),skr=l(),p4e=a("p"),lkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ikr=l(),jc=a("p"),dkr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),ckr=o("not"),fkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),mkr=o("from_pretrained()"),gkr=o(" to load the model weights."),hkr=l(),F(F3.$$.fragment),pkr=l(),Or=a("div"),F(B9.$$.fragment),_kr=l(),u4e=a("p"),ukr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bkr=l(),un=a("p"),vkr=o("The model class to instantiate is selected based on the "),b4e=a("code"),Fkr=o("model_type"),Tkr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(":"),Akr=l(),xe=a("ul"),T3=a("li"),T4e=a("strong"),ykr=o("albert"),Lkr=o(" \u2014 "),vY=a("a"),xkr=o("FlaxAlbertForMaskedLM"),$kr=o(" (ALBERT model)"),kkr=l(),M3=a("li"),M4e=a("strong"),Skr=o("bart"),Rkr=o(" \u2014 "),FY=a("a"),Pkr=o("FlaxBartForConditionalGeneration"),Bkr=o(" (BART model)"),Ikr=l(),E3=a("li"),E4e=a("strong"),qkr=o("bert"),Nkr=o(" \u2014 "),TY=a("a"),jkr=o("FlaxBertForMaskedLM"),Dkr=o(" (BERT model)"),Gkr=l(),C3=a("li"),C4e=a("strong"),Okr=o("big_bird"),Vkr=o(" \u2014 "),MY=a("a"),Xkr=o("FlaxBigBirdForMaskedLM"),zkr=o(" (BigBird model)"),Wkr=l(),w3=a("li"),w4e=a("strong"),Qkr=o("distilbert"),Hkr=o(" \u2014 "),EY=a("a"),Ukr=o("FlaxDistilBertForMaskedLM"),Jkr=o(" (DistilBERT model)"),Ykr=l(),A3=a("li"),A4e=a("strong"),Kkr=o("electra"),Zkr=o(" \u2014 "),CY=a("a"),eSr=o("FlaxElectraForMaskedLM"),oSr=o(" (ELECTRA model)"),rSr=l(),y3=a("li"),y4e=a("strong"),tSr=o("mbart"),aSr=o(" \u2014 "),wY=a("a"),nSr=o("FlaxMBartForConditionalGeneration"),sSr=o(" (mBART model)"),lSr=l(),L3=a("li"),L4e=a("strong"),iSr=o("roberta"),dSr=o(" \u2014 "),AY=a("a"),cSr=o("FlaxRobertaForMaskedLM"),fSr=o(" (RoBERTa model)"),mSr=l(),x3=a("li"),x4e=a("strong"),gSr=o("roformer"),hSr=o(" \u2014 "),yY=a("a"),pSr=o("FlaxRoFormerForMaskedLM"),_Sr=o(" (RoFormer model)"),uSr=l(),$3=a("li"),$4e=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),LY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(k3.$$.fragment),rje=l(),Dc=a("h2"),S3=a("a"),k4e=a("span"),F(I9.$$.fragment),ESr=l(),S4e=a("span"),CSr=o("FlaxAutoModelForSeq2SeqLM"),tje=l(),pr=a("div"),F(q9.$$.fragment),wSr=l(),Gc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),$Y=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),N9=a("p"),SSr=o("This class cannot be instantiated directly using "),R4e=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),zt=a("div"),F(j9.$$.fragment),ISr=l(),P4e=a("p"),qSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NSr=l(),Oc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(R3.$$.fragment),zSr=l(),Vr=a("div"),F(D9.$$.fragment),WSr=l(),I4e=a("p"),QSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HSr=l(),bn=a("p"),USr=o("The model class to instantiate is selected based on the "),q4e=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Pe=a("ul"),P3=a("li"),D4e=a("strong"),tRr=o("bart"),aRr=o(" \u2014 "),SY=a("a"),nRr=o("FlaxBartForConditionalGeneration"),sRr=o(" (BART model)"),lRr=l(),B3=a("li"),G4e=a("strong"),iRr=o("blenderbot"),dRr=o(" \u2014 "),RY=a("a"),cRr=o("FlaxBlenderbotForConditionalGeneration"),fRr=o(" (Blenderbot model)"),mRr=l(),I3=a("li"),O4e=a("strong"),gRr=o("blenderbot-small"),hRr=o(" \u2014 "),PY=a("a"),pRr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Rr=o(" (BlenderbotSmall model)"),uRr=l(),q3=a("li"),V4e=a("strong"),bRr=o("encoder-decoder"),vRr=o(" \u2014 "),BY=a("a"),FRr=o("FlaxEncoderDecoderModel"),TRr=o(" (Encoder decoder model)"),MRr=l(),N3=a("li"),X4e=a("strong"),ERr=o("marian"),CRr=o(" \u2014 "),IY=a("a"),wRr=o("FlaxMarianMTModel"),ARr=o(" (Marian model)"),yRr=l(),j3=a("li"),z4e=a("strong"),LRr=o("mbart"),xRr=o(" \u2014 "),qY=a("a"),$Rr=o("FlaxMBartForConditionalGeneration"),kRr=o(" (mBART model)"),SRr=l(),D3=a("li"),W4e=a("strong"),RRr=o("mt5"),PRr=o(" \u2014 "),NY=a("a"),BRr=o("FlaxMT5ForConditionalGeneration"),IRr=o(" (mT5 model)"),qRr=l(),G3=a("li"),Q4e=a("strong"),NRr=o("pegasus"),jRr=o(" \u2014 "),jY=a("a"),DRr=o("FlaxPegasusForConditionalGeneration"),GRr=o(" (Pegasus model)"),ORr=l(),O3=a("li"),H4e=a("strong"),VRr=o("t5"),XRr=o(" \u2014 "),DY=a("a"),zRr=o("FlaxT5ForConditionalGeneration"),WRr=o(" (T5 model)"),QRr=l(),F(V3.$$.fragment),aje=l(),Vc=a("h2"),X3=a("a"),U4e=a("span"),F(G9.$$.fragment),HRr=l(),J4e=a("span"),URr=o("FlaxAutoModelForSequenceClassification"),nje=l(),_r=a("div"),F(O9.$$.fragment),JRr=l(),Xc=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GY=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),OY=a("a"),ePr=o("from_config()"),oPr=o(` class
method.`),rPr=l(),V9=a("p"),tPr=o("This class cannot be instantiated directly using "),Y4e=a("code"),aPr=o("__init__()"),nPr=o(" (throws an error)."),sPr=l(),Wt=a("div"),F(X9.$$.fragment),lPr=l(),K4e=a("p"),iPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dPr=l(),zc=a("p"),cPr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),fPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),gPr=o("from_pretrained()"),hPr=o(" to load the model weights."),pPr=l(),F(z3.$$.fragment),_Pr=l(),Xr=a("div"),F(z9.$$.fragment),uPr=l(),eEe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vPr=l(),vn=a("p"),FPr=o("The model class to instantiate is selected based on the "),oEe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),$e=a("ul"),W3=a("li"),aEe=a("strong"),LPr=o("albert"),xPr=o(" \u2014 "),XY=a("a"),$Pr=o("FlaxAlbertForSequenceClassification"),kPr=o(" (ALBERT model)"),SPr=l(),Q3=a("li"),nEe=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),zY=a("a"),BPr=o("FlaxBartForSequenceClassification"),IPr=o(" (BART model)"),qPr=l(),H3=a("li"),sEe=a("strong"),NPr=o("bert"),jPr=o(" \u2014 "),WY=a("a"),DPr=o("FlaxBertForSequenceClassification"),GPr=o(" (BERT model)"),OPr=l(),U3=a("li"),lEe=a("strong"),VPr=o("big_bird"),XPr=o(" \u2014 "),QY=a("a"),zPr=o("FlaxBigBirdForSequenceClassification"),WPr=o(" (BigBird model)"),QPr=l(),J3=a("li"),iEe=a("strong"),HPr=o("distilbert"),UPr=o(" \u2014 "),HY=a("a"),JPr=o("FlaxDistilBertForSequenceClassification"),YPr=o(" (DistilBERT model)"),KPr=l(),Y3=a("li"),dEe=a("strong"),ZPr=o("electra"),eBr=o(" \u2014 "),UY=a("a"),oBr=o("FlaxElectraForSequenceClassification"),rBr=o(" (ELECTRA model)"),tBr=l(),K3=a("li"),cEe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),JY=a("a"),sBr=o("FlaxMBartForSequenceClassification"),lBr=o(" (mBART model)"),iBr=l(),Z3=a("li"),fEe=a("strong"),dBr=o("roberta"),cBr=o(" \u2014 "),YY=a("a"),fBr=o("FlaxRobertaForSequenceClassification"),mBr=o(" (RoBERTa model)"),gBr=l(),ew=a("li"),mEe=a("strong"),hBr=o("roformer"),pBr=o(" \u2014 "),KY=a("a"),_Br=o("FlaxRoFormerForSequenceClassification"),uBr=o(" (RoFormer model)"),bBr=l(),ow=a("li"),gEe=a("strong"),vBr=o("xlm-roberta"),FBr=o(" \u2014 "),ZY=a("a"),TBr=o("FlaxXLMRobertaForSequenceClassification"),MBr=o(" (XLM-RoBERTa model)"),EBr=l(),F(rw.$$.fragment),sje=l(),Wc=a("h2"),tw=a("a"),hEe=a("span"),F(W9.$$.fragment),CBr=l(),pEe=a("span"),wBr=o("FlaxAutoModelForQuestionAnswering"),lje=l(),ur=a("div"),F(Q9.$$.fragment),ABr=l(),Qc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eK=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),oK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),H9=a("p"),RBr=o("This class cannot be instantiated directly using "),_Ee=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Qt=a("div"),F(U9.$$.fragment),qBr=l(),uEe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jBr=l(),Hc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(aw.$$.fragment),WBr=l(),zr=a("div"),F(J9.$$.fragment),QBr=l(),vEe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UBr=l(),Fn=a("p"),JBr=o("The model class to instantiate is selected based on the "),FEe=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),ke=a("ul"),nw=a("li"),EEe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),tK=a("a"),sIr=o("FlaxAlbertForQuestionAnswering"),lIr=o(" (ALBERT model)"),iIr=l(),sw=a("li"),CEe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),aK=a("a"),fIr=o("FlaxBartForQuestionAnswering"),mIr=o(" (BART model)"),gIr=l(),lw=a("li"),wEe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),nK=a("a"),_Ir=o("FlaxBertForQuestionAnswering"),uIr=o(" (BERT model)"),bIr=l(),iw=a("li"),AEe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),sK=a("a"),TIr=o("FlaxBigBirdForQuestionAnswering"),MIr=o(" (BigBird model)"),EIr=l(),dw=a("li"),yEe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),lK=a("a"),AIr=o("FlaxDistilBertForQuestionAnswering"),yIr=o(" (DistilBERT model)"),LIr=l(),cw=a("li"),LEe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),iK=a("a"),kIr=o("FlaxElectraForQuestionAnswering"),SIr=o(" (ELECTRA model)"),RIr=l(),fw=a("li"),xEe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),dK=a("a"),IIr=o("FlaxMBartForQuestionAnswering"),qIr=o(" (mBART model)"),NIr=l(),mw=a("li"),$Ee=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),cK=a("a"),GIr=o("FlaxRobertaForQuestionAnswering"),OIr=o(" (RoBERTa model)"),VIr=l(),gw=a("li"),kEe=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),fK=a("a"),WIr=o("FlaxRoFormerForQuestionAnswering"),QIr=o(" (RoFormer model)"),HIr=l(),hw=a("li"),SEe=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),mK=a("a"),YIr=o("FlaxXLMRobertaForQuestionAnswering"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(pw.$$.fragment),ije=l(),Uc=a("h2"),_w=a("a"),REe=a("span"),F(Y9.$$.fragment),eqr=l(),PEe=a("span"),oqr=o("FlaxAutoModelForTokenClassification"),dje=l(),br=a("div"),F(K9.$$.fragment),rqr=l(),Jc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gK=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),hK=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),Z9=a("p"),dqr=o("This class cannot be instantiated directly using "),BEe=a("code"),cqr=o("__init__()"),fqr=o(" (throws an error)."),mqr=l(),Ht=a("div"),F(ex.$$.fragment),gqr=l(),IEe=a("p"),hqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pqr=l(),Yc=a("p"),_qr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),uqr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(uw.$$.fragment),Mqr=l(),Wr=a("div"),F(ox.$$.fragment),Eqr=l(),NEe=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wqr=l(),Tn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),jEe=a("code"),yqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),Ge=a("ul"),bw=a("li"),OEe=a("strong"),Pqr=o("albert"),Bqr=o(" \u2014 "),_K=a("a"),Iqr=o("FlaxAlbertForTokenClassification"),qqr=o(" (ALBERT model)"),Nqr=l(),vw=a("li"),VEe=a("strong"),jqr=o("bert"),Dqr=o(" \u2014 "),uK=a("a"),Gqr=o("FlaxBertForTokenClassification"),Oqr=o(" (BERT model)"),Vqr=l(),Fw=a("li"),XEe=a("strong"),Xqr=o("big_bird"),zqr=o(" \u2014 "),bK=a("a"),Wqr=o("FlaxBigBirdForTokenClassification"),Qqr=o(" (BigBird model)"),Hqr=l(),Tw=a("li"),zEe=a("strong"),Uqr=o("distilbert"),Jqr=o(" \u2014 "),vK=a("a"),Yqr=o("FlaxDistilBertForTokenClassification"),Kqr=o(" (DistilBERT model)"),Zqr=l(),Mw=a("li"),WEe=a("strong"),eNr=o("electra"),oNr=o(" \u2014 "),FK=a("a"),rNr=o("FlaxElectraForTokenClassification"),tNr=o(" (ELECTRA model)"),aNr=l(),Ew=a("li"),QEe=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),TK=a("a"),lNr=o("FlaxRobertaForTokenClassification"),iNr=o(" (RoBERTa model)"),dNr=l(),Cw=a("li"),HEe=a("strong"),cNr=o("roformer"),fNr=o(" \u2014 "),MK=a("a"),mNr=o("FlaxRoFormerForTokenClassification"),gNr=o(" (RoFormer model)"),hNr=l(),ww=a("li"),UEe=a("strong"),pNr=o("xlm-roberta"),_Nr=o(" \u2014 "),EK=a("a"),uNr=o("FlaxXLMRobertaForTokenClassification"),bNr=o(" (XLM-RoBERTa model)"),vNr=l(),F(Aw.$$.fragment),cje=l(),Kc=a("h2"),yw=a("a"),JEe=a("span"),F(rx.$$.fragment),FNr=l(),YEe=a("span"),TNr=o("FlaxAutoModelForMultipleChoice"),fje=l(),vr=a("div"),F(tx.$$.fragment),MNr=l(),Zc=a("p"),ENr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CK=a("a"),CNr=o("from_pretrained()"),wNr=o(" class method or the "),wK=a("a"),ANr=o("from_config()"),yNr=o(` class
method.`),LNr=l(),ax=a("p"),xNr=o("This class cannot be instantiated directly using "),KEe=a("code"),$Nr=o("__init__()"),kNr=o(" (throws an error)."),SNr=l(),Ut=a("div"),F(nx.$$.fragment),RNr=l(),ZEe=a("p"),PNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BNr=l(),ef=a("p"),INr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),qNr=o("not"),NNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),jNr=o("from_pretrained()"),DNr=o(" to load the model weights."),GNr=l(),F(Lw.$$.fragment),ONr=l(),Qr=a("div"),F(sx.$$.fragment),VNr=l(),oCe=a("p"),XNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zNr=l(),Mn=a("p"),WNr=o("The model class to instantiate is selected based on the "),rCe=a("code"),QNr=o("model_type"),HNr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(":"),ZNr=l(),Oe=a("ul"),xw=a("li"),nCe=a("strong"),ejr=o("albert"),ojr=o(" \u2014 "),yK=a("a"),rjr=o("FlaxAlbertForMultipleChoice"),tjr=o(" (ALBERT model)"),ajr=l(),$w=a("li"),sCe=a("strong"),njr=o("bert"),sjr=o(" \u2014 "),LK=a("a"),ljr=o("FlaxBertForMultipleChoice"),ijr=o(" (BERT model)"),djr=l(),kw=a("li"),lCe=a("strong"),cjr=o("big_bird"),fjr=o(" \u2014 "),xK=a("a"),mjr=o("FlaxBigBirdForMultipleChoice"),gjr=o(" (BigBird model)"),hjr=l(),Sw=a("li"),iCe=a("strong"),pjr=o("distilbert"),_jr=o(" \u2014 "),$K=a("a"),ujr=o("FlaxDistilBertForMultipleChoice"),bjr=o(" (DistilBERT model)"),vjr=l(),Rw=a("li"),dCe=a("strong"),Fjr=o("electra"),Tjr=o(" \u2014 "),kK=a("a"),Mjr=o("FlaxElectraForMultipleChoice"),Ejr=o(" (ELECTRA model)"),Cjr=l(),Pw=a("li"),cCe=a("strong"),wjr=o("roberta"),Ajr=o(" \u2014 "),SK=a("a"),yjr=o("FlaxRobertaForMultipleChoice"),Ljr=o(" (RoBERTa model)"),xjr=l(),Bw=a("li"),fCe=a("strong"),$jr=o("roformer"),kjr=o(" \u2014 "),RK=a("a"),Sjr=o("FlaxRoFormerForMultipleChoice"),Rjr=o(" (RoFormer model)"),Pjr=l(),Iw=a("li"),mCe=a("strong"),Bjr=o("xlm-roberta"),Ijr=o(" \u2014 "),PK=a("a"),qjr=o("FlaxXLMRobertaForMultipleChoice"),Njr=o(" (XLM-RoBERTa model)"),jjr=l(),F(qw.$$.fragment),mje=l(),of=a("h2"),Nw=a("a"),gCe=a("span"),F(lx.$$.fragment),Djr=l(),hCe=a("span"),Gjr=o("FlaxAutoModelForNextSentencePrediction"),gje=l(),Fr=a("div"),F(ix.$$.fragment),Ojr=l(),rf=a("p"),Vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=a("a"),Xjr=o("from_pretrained()"),zjr=o(" class method or the "),IK=a("a"),Wjr=o("from_config()"),Qjr=o(` class
method.`),Hjr=l(),dx=a("p"),Ujr=o("This class cannot be instantiated directly using "),pCe=a("code"),Jjr=o("__init__()"),Yjr=o(" (throws an error)."),Kjr=l(),Jt=a("div"),F(cx.$$.fragment),Zjr=l(),_Ce=a("p"),eDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oDr=l(),tf=a("p"),rDr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),tDr=o("not"),aDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),nDr=o("from_pretrained()"),sDr=o(" to load the model weights."),lDr=l(),F(jw.$$.fragment),iDr=l(),Hr=a("div"),F(fx.$$.fragment),dDr=l(),bCe=a("p"),cDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fDr=l(),En=a("p"),mDr=o("The model class to instantiate is selected based on the "),vCe=a("code"),gDr=o("model_type"),hDr=o(` property of the config object (either
passed as an argument or loaded from `),FCe=a("code"),pDr=o("pretrained_model_name_or_path"),_Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(":"),vDr=l(),MCe=a("ul"),Dw=a("li"),ECe=a("strong"),FDr=o("bert"),TDr=o(" \u2014 "),NK=a("a"),MDr=o("FlaxBertForNextSentencePrediction"),EDr=o(" (BERT model)"),CDr=l(),F(Gw.$$.fragment),hje=l(),af=a("h2"),Ow=a("a"),CCe=a("span"),F(mx.$$.fragment),wDr=l(),wCe=a("span"),ADr=o("FlaxAutoModelForImageClassification"),pje=l(),Tr=a("div"),F(gx.$$.fragment),yDr=l(),nf=a("p"),LDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jK=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),DK=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),hx=a("p"),PDr=o("This class cannot be instantiated directly using "),ACe=a("code"),BDr=o("__init__()"),IDr=o(" (throws an error)."),qDr=l(),Yt=a("div"),F(px.$$.fragment),NDr=l(),yCe=a("p"),jDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DDr=l(),sf=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),WDr=l(),F(Vw.$$.fragment),QDr=l(),Ur=a("div"),F(_x.$$.fragment),HDr=l(),xCe=a("p"),UDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JDr=l(),Cn=a("p"),YDr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),ux=a("ul"),Xw=a("li"),RCe=a("strong"),nGr=o("beit"),sGr=o(" \u2014 "),OK=a("a"),lGr=o("FlaxBeitForImageClassification"),iGr=o(" (BEiT model)"),dGr=l(),zw=a("li"),PCe=a("strong"),cGr=o("vit"),fGr=o(" \u2014 "),VK=a("a"),mGr=o("FlaxViTForImageClassification"),gGr=o(" (ViT model)"),hGr=l(),F(Ww.$$.fragment),_je=l(),lf=a("h2"),Qw=a("a"),BCe=a("span"),F(bx.$$.fragment),pGr=l(),ICe=a("span"),_Gr=o("FlaxAutoModelForVision2Seq"),uje=l(),Mr=a("div"),F(vx.$$.fragment),uGr=l(),df=a("p"),bGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XK=a("a"),vGr=o("from_pretrained()"),FGr=o(" class method or the "),zK=a("a"),TGr=o("from_config()"),MGr=o(` class
method.`),EGr=l(),Fx=a("p"),CGr=o("This class cannot be instantiated directly using "),qCe=a("code"),wGr=o("__init__()"),AGr=o(" (throws an error)."),yGr=l(),Kt=a("div"),F(Tx.$$.fragment),LGr=l(),NCe=a("p"),xGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Gr=l(),cf=a("p"),kGr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),SGr=o("not"),RGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),PGr=o("from_pretrained()"),BGr=o(" to load the model weights."),IGr=l(),F(Hw.$$.fragment),qGr=l(),Jr=a("div"),F(Mx.$$.fragment),NGr=l(),DCe=a("p"),jGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DGr=l(),wn=a("p"),GGr=o("The model class to instantiate is selected based on the "),GCe=a("code"),OGr=o("model_type"),VGr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),XGr=o("pretrained_model_name_or_path"),zGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(":"),HGr=l(),XCe=a("ul"),Uw=a("li"),zCe=a("strong"),UGr=o("vision-encoder-decoder"),JGr=o(" \u2014 "),QK=a("a"),YGr=o("FlaxVisionEncoderDecoderModel"),KGr=o(" (Vision Encoder decoder model)"),ZGr=l(),F(Jw.$$.fragment),this.h()},l(f){const u=h9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ex=s(p);m=n(Ex,"A",{id:!0,class:!0,href:!0});var WCe=s(m);_=n(WCe,"SPAN",{});var QCe=s(_);T(d.$$.fragment,QCe),QCe.forEach(t),WCe.forEach(t),h=i(Ex),Mo=n(Ex,"SPAN",{});var HCe=s(Mo);ci=r(HCe,"Auto Classes"),HCe.forEach(t),Ex.forEach(t),hf=i(f),rt=n(f,"P",{});var Cx=s(rt);fi=r(Cx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Cx,"CODE",{});var UCe=s(mi);h6=r(UCe,"from_pretrained()"),UCe.forEach(t),pf=r(Cx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Cx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var JCe=s(yn);p6=r(JCe,"AutoConfig"),JCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var YCe=s(xn);_6=r(YCe,"AutoModel"),YCe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var KCe=s($n);u6=r(KCe,"AutoTokenizer"),KCe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var wx=s(Ae);B$=r(wx,"will create a model that is an instance of "),_i=n(wx,"A",{href:!0});var ZCe=s(_i);I$=r(ZCe,"BertModel"),ZCe.forEach(t),q$=r(wx,"."),wx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ax=s(wa);N$=r(Ax,"There is one class of "),uf=n(Ax,"CODE",{});var e5e=s(uf);j$=r(e5e,"AutoModel"),e5e.forEach(t),AGe=r(Ax," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ax.forEach(t),pqe=i(f),ui=n(f,"H2",{class:!0});var yx=s(ui);bf=n(yx,"A",{id:!0,class:!0,href:!0});var o5e=s(bf);Dee=n(o5e,"SPAN",{});var r5e=s(Dee);T(b6.$$.fragment,r5e),r5e.forEach(t),o5e.forEach(t),yGe=i(yx),Gee=n(yx,"SPAN",{});var t5e=s(Gee);LGe=r(t5e,"Extending the Auto Classes"),t5e.forEach(t),yx.forEach(t),_qe=i(f),kn=n(f,"P",{});var ff=s(kn);xGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Oee=n(ff,"CODE",{});var a5e=s(Oee);$Ge=r(a5e,"NewModel"),a5e.forEach(t),kGe=r(ff,", make sure you have a "),Vee=n(ff,"CODE",{});var n5e=s(Vee);SGe=r(n5e,"NewModelConfig"),n5e.forEach(t),RGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),uqe=i(f),T(v6.$$.fragment,f),bqe=i(f),D$=n(f,"P",{});var s5e=s(D$);PGe=r(s5e,"You will then be able to use the auto classes like you would usually do!"),s5e.forEach(t),vqe=i(f),T(vf.$$.fragment,f),Fqe=i(f),bi=n(f,"H2",{class:!0});var Lx=s(bi);Ff=n(Lx,"A",{id:!0,class:!0,href:!0});var l5e=s(Ff);Xee=n(l5e,"SPAN",{});var i5e=s(Xee);T(F6.$$.fragment,i5e),i5e.forEach(t),l5e.forEach(t),BGe=i(Lx),zee=n(Lx,"SPAN",{});var d5e=s(zee);IGe=r(d5e,"AutoConfig"),d5e.forEach(t),Lx.forEach(t),Tqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(T6.$$.fragment,et),qGe=i(et),M6=n(et,"P",{});var xx=s(M6);NGe=r(xx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G$=n(xx,"A",{href:!0});var c5e=s(G$);jGe=r(c5e,"from_pretrained()"),c5e.forEach(t),DGe=r(xx," class method."),xx.forEach(t),GGe=i(et),E6=n(et,"P",{});var $x=s(E6);OGe=r($x,"This class cannot be instantiated directly using "),Wee=n($x,"CODE",{});var f5e=s(Wee);VGe=r(f5e,"__init__()"),f5e.forEach(t),XGe=r($x," (throws an error)."),$x.forEach(t),zGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(C6.$$.fragment,ot),WGe=i(ot),Qee=n(ot,"P",{});var m5e=s(Qee);QGe=r(m5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m5e.forEach(t),HGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);UGe=r(mf,"The configuration class to instantiate is selected based on the "),Hee=n(mf,"CODE",{});var g5e=s(Hee);JGe=r(g5e,"model_type"),g5e.forEach(t),YGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Uee=n(mf,"CODE",{});var h5e=s(Uee);KGe=r(h5e,"pretrained_model_name_or_path"),h5e.forEach(t),ZGe=r(mf,":"),mf.forEach(t),eOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Yw=s(Tf);Jee=n(Yw,"STRONG",{});var p5e=s(Jee);oOe=r(p5e,"albert"),p5e.forEach(t),rOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var _5e=s(O$);tOe=r(_5e,"AlbertConfig"),_5e.forEach(t),aOe=r(Yw," (ALBERT model)"),Yw.forEach(t),nOe=i(y),Mf=n(y,"LI",{});var Kw=s(Mf);Yee=n(Kw,"STRONG",{});var u5e=s(Yee);sOe=r(u5e,"bart"),u5e.forEach(t),lOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var b5e=s(V$);iOe=r(b5e,"BartConfig"),b5e.forEach(t),dOe=r(Kw," (BART model)"),Kw.forEach(t),cOe=i(y),Ef=n(y,"LI",{});var Zw=s(Ef);Kee=n(Zw,"STRONG",{});var v5e=s(Kee);fOe=r(v5e,"beit"),v5e.forEach(t),mOe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var F5e=s(X$);gOe=r(F5e,"BeitConfig"),F5e.forEach(t),hOe=r(Zw," (BEiT model)"),Zw.forEach(t),pOe=i(y),Cf=n(y,"LI",{});var e0=s(Cf);Zee=n(e0,"STRONG",{});var T5e=s(Zee);_Oe=r(T5e,"bert"),T5e.forEach(t),uOe=r(e0," \u2014 "),z$=n(e0,"A",{href:!0});var M5e=s(z$);bOe=r(M5e,"BertConfig"),M5e.forEach(t),vOe=r(e0," (BERT model)"),e0.forEach(t),FOe=i(y),wf=n(y,"LI",{});var o0=s(wf);eoe=n(o0,"STRONG",{});var E5e=s(eoe);TOe=r(E5e,"bert-generation"),E5e.forEach(t),MOe=r(o0," \u2014 "),W$=n(o0,"A",{href:!0});var C5e=s(W$);EOe=r(C5e,"BertGenerationConfig"),C5e.forEach(t),COe=r(o0," (Bert Generation model)"),o0.forEach(t),wOe=i(y),Af=n(y,"LI",{});var r0=s(Af);ooe=n(r0,"STRONG",{});var w5e=s(ooe);AOe=r(w5e,"big_bird"),w5e.forEach(t),yOe=r(r0," \u2014 "),Q$=n(r0,"A",{href:!0});var A5e=s(Q$);LOe=r(A5e,"BigBirdConfig"),A5e.forEach(t),xOe=r(r0," (BigBird model)"),r0.forEach(t),$Oe=i(y),yf=n(y,"LI",{});var t0=s(yf);roe=n(t0,"STRONG",{});var y5e=s(roe);kOe=r(y5e,"bigbird_pegasus"),y5e.forEach(t),SOe=r(t0," \u2014 "),H$=n(t0,"A",{href:!0});var L5e=s(H$);ROe=r(L5e,"BigBirdPegasusConfig"),L5e.forEach(t),POe=r(t0," (BigBirdPegasus model)"),t0.forEach(t),BOe=i(y),Lf=n(y,"LI",{});var a0=s(Lf);toe=n(a0,"STRONG",{});var x5e=s(toe);IOe=r(x5e,"blenderbot"),x5e.forEach(t),qOe=r(a0," \u2014 "),U$=n(a0,"A",{href:!0});var $5e=s(U$);NOe=r($5e,"BlenderbotConfig"),$5e.forEach(t),jOe=r(a0," (Blenderbot model)"),a0.forEach(t),DOe=i(y),xf=n(y,"LI",{});var n0=s(xf);aoe=n(n0,"STRONG",{});var k5e=s(aoe);GOe=r(k5e,"blenderbot-small"),k5e.forEach(t),OOe=r(n0," \u2014 "),J$=n(n0,"A",{href:!0});var S5e=s(J$);VOe=r(S5e,"BlenderbotSmallConfig"),S5e.forEach(t),XOe=r(n0," (BlenderbotSmall model)"),n0.forEach(t),zOe=i(y),$f=n(y,"LI",{});var s0=s($f);noe=n(s0,"STRONG",{});var R5e=s(noe);WOe=r(R5e,"camembert"),R5e.forEach(t),QOe=r(s0," \u2014 "),Y$=n(s0,"A",{href:!0});var P5e=s(Y$);HOe=r(P5e,"CamembertConfig"),P5e.forEach(t),UOe=r(s0," (CamemBERT model)"),s0.forEach(t),JOe=i(y),kf=n(y,"LI",{});var l0=s(kf);soe=n(l0,"STRONG",{});var B5e=s(soe);YOe=r(B5e,"canine"),B5e.forEach(t),KOe=r(l0," \u2014 "),K$=n(l0,"A",{href:!0});var I5e=s(K$);ZOe=r(I5e,"CanineConfig"),I5e.forEach(t),eVe=r(l0," (Canine model)"),l0.forEach(t),oVe=i(y),Sf=n(y,"LI",{});var i0=s(Sf);loe=n(i0,"STRONG",{});var q5e=s(loe);rVe=r(q5e,"clip"),q5e.forEach(t),tVe=r(i0," \u2014 "),Z$=n(i0,"A",{href:!0});var N5e=s(Z$);aVe=r(N5e,"CLIPConfig"),N5e.forEach(t),nVe=r(i0," (CLIP model)"),i0.forEach(t),sVe=i(y),Rf=n(y,"LI",{});var d0=s(Rf);ioe=n(d0,"STRONG",{});var j5e=s(ioe);lVe=r(j5e,"convbert"),j5e.forEach(t),iVe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var D5e=s(ek);dVe=r(D5e,"ConvBertConfig"),D5e.forEach(t),cVe=r(d0," (ConvBERT model)"),d0.forEach(t),fVe=i(y),Pf=n(y,"LI",{});var c0=s(Pf);doe=n(c0,"STRONG",{});var G5e=s(doe);mVe=r(G5e,"convnext"),G5e.forEach(t),gVe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var O5e=s(ok);hVe=r(O5e,"ConvNextConfig"),O5e.forEach(t),pVe=r(c0," (ConvNext model)"),c0.forEach(t),_Ve=i(y),Bf=n(y,"LI",{});var f0=s(Bf);coe=n(f0,"STRONG",{});var V5e=s(coe);uVe=r(V5e,"ctrl"),V5e.forEach(t),bVe=r(f0," \u2014 "),rk=n(f0,"A",{href:!0});var X5e=s(rk);vVe=r(X5e,"CTRLConfig"),X5e.forEach(t),FVe=r(f0," (CTRL model)"),f0.forEach(t),TVe=i(y),If=n(y,"LI",{});var m0=s(If);foe=n(m0,"STRONG",{});var z5e=s(foe);MVe=r(z5e,"cvt"),z5e.forEach(t),EVe=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var W5e=s(tk);CVe=r(W5e,"CvtConfig"),W5e.forEach(t),wVe=r(m0," (CvT model)"),m0.forEach(t),AVe=i(y),qf=n(y,"LI",{});var g0=s(qf);moe=n(g0,"STRONG",{});var Q5e=s(moe);yVe=r(Q5e,"data2vec-audio"),Q5e.forEach(t),LVe=r(g0," \u2014 "),ak=n(g0,"A",{href:!0});var H5e=s(ak);xVe=r(H5e,"Data2VecAudioConfig"),H5e.forEach(t),$Ve=r(g0," (Data2VecAudio model)"),g0.forEach(t),kVe=i(y),Nf=n(y,"LI",{});var h0=s(Nf);goe=n(h0,"STRONG",{});var U5e=s(goe);SVe=r(U5e,"data2vec-text"),U5e.forEach(t),RVe=r(h0," \u2014 "),nk=n(h0,"A",{href:!0});var J5e=s(nk);PVe=r(J5e,"Data2VecTextConfig"),J5e.forEach(t),BVe=r(h0," (Data2VecText model)"),h0.forEach(t),IVe=i(y),jf=n(y,"LI",{});var p0=s(jf);hoe=n(p0,"STRONG",{});var Y5e=s(hoe);qVe=r(Y5e,"data2vec-vision"),Y5e.forEach(t),NVe=r(p0," \u2014 "),sk=n(p0,"A",{href:!0});var K5e=s(sk);jVe=r(K5e,"Data2VecVisionConfig"),K5e.forEach(t),DVe=r(p0," (Data2VecVision model)"),p0.forEach(t),GVe=i(y),Df=n(y,"LI",{});var _0=s(Df);poe=n(_0,"STRONG",{});var Z5e=s(poe);OVe=r(Z5e,"deberta"),Z5e.forEach(t),VVe=r(_0," \u2014 "),lk=n(_0,"A",{href:!0});var e3e=s(lk);XVe=r(e3e,"DebertaConfig"),e3e.forEach(t),zVe=r(_0," (DeBERTa model)"),_0.forEach(t),WVe=i(y),Gf=n(y,"LI",{});var u0=s(Gf);_oe=n(u0,"STRONG",{});var o3e=s(_oe);QVe=r(o3e,"deberta-v2"),o3e.forEach(t),HVe=r(u0," \u2014 "),ik=n(u0,"A",{href:!0});var r3e=s(ik);UVe=r(r3e,"DebertaV2Config"),r3e.forEach(t),JVe=r(u0," (DeBERTa-v2 model)"),u0.forEach(t),YVe=i(y),Of=n(y,"LI",{});var b0=s(Of);uoe=n(b0,"STRONG",{});var t3e=s(uoe);KVe=r(t3e,"decision_transformer"),t3e.forEach(t),ZVe=r(b0," \u2014 "),dk=n(b0,"A",{href:!0});var a3e=s(dk);eXe=r(a3e,"DecisionTransformerConfig"),a3e.forEach(t),oXe=r(b0," (Decision Transformer model)"),b0.forEach(t),rXe=i(y),Vf=n(y,"LI",{});var v0=s(Vf);boe=n(v0,"STRONG",{});var n3e=s(boe);tXe=r(n3e,"deit"),n3e.forEach(t),aXe=r(v0," \u2014 "),ck=n(v0,"A",{href:!0});var oOr=s(ck);nXe=r(oOr,"DeiTConfig"),oOr.forEach(t),sXe=r(v0," (DeiT model)"),v0.forEach(t),lXe=i(y),Xf=n(y,"LI",{});var s3e=s(Xf);voe=n(s3e,"STRONG",{});var rOr=s(voe);iXe=r(rOr,"detr"),rOr.forEach(t),dXe=r(s3e," \u2014 "),fk=n(s3e,"A",{href:!0});var tOr=s(fk);cXe=r(tOr,"DetrConfig"),tOr.forEach(t),fXe=r(s3e," (DETR model)"),s3e.forEach(t),mXe=i(y),zf=n(y,"LI",{});var l3e=s(zf);Foe=n(l3e,"STRONG",{});var aOr=s(Foe);gXe=r(aOr,"distilbert"),aOr.forEach(t),hXe=r(l3e," \u2014 "),mk=n(l3e,"A",{href:!0});var nOr=s(mk);pXe=r(nOr,"DistilBertConfig"),nOr.forEach(t),_Xe=r(l3e," (DistilBERT model)"),l3e.forEach(t),uXe=i(y),Wf=n(y,"LI",{});var i3e=s(Wf);Toe=n(i3e,"STRONG",{});var sOr=s(Toe);bXe=r(sOr,"dpr"),sOr.forEach(t),vXe=r(i3e," \u2014 "),gk=n(i3e,"A",{href:!0});var lOr=s(gk);FXe=r(lOr,"DPRConfig"),lOr.forEach(t),TXe=r(i3e," (DPR model)"),i3e.forEach(t),MXe=i(y),Qf=n(y,"LI",{});var d3e=s(Qf);Moe=n(d3e,"STRONG",{});var iOr=s(Moe);EXe=r(iOr,"dpt"),iOr.forEach(t),CXe=r(d3e," \u2014 "),hk=n(d3e,"A",{href:!0});var dOr=s(hk);wXe=r(dOr,"DPTConfig"),dOr.forEach(t),AXe=r(d3e," (DPT model)"),d3e.forEach(t),yXe=i(y),Hf=n(y,"LI",{});var c3e=s(Hf);Eoe=n(c3e,"STRONG",{});var cOr=s(Eoe);LXe=r(cOr,"electra"),cOr.forEach(t),xXe=r(c3e," \u2014 "),pk=n(c3e,"A",{href:!0});var fOr=s(pk);$Xe=r(fOr,"ElectraConfig"),fOr.forEach(t),kXe=r(c3e," (ELECTRA model)"),c3e.forEach(t),SXe=i(y),Uf=n(y,"LI",{});var f3e=s(Uf);Coe=n(f3e,"STRONG",{});var mOr=s(Coe);RXe=r(mOr,"encoder-decoder"),mOr.forEach(t),PXe=r(f3e," \u2014 "),_k=n(f3e,"A",{href:!0});var gOr=s(_k);BXe=r(gOr,"EncoderDecoderConfig"),gOr.forEach(t),IXe=r(f3e," (Encoder decoder model)"),f3e.forEach(t),qXe=i(y),Jf=n(y,"LI",{});var m3e=s(Jf);woe=n(m3e,"STRONG",{});var hOr=s(woe);NXe=r(hOr,"flaubert"),hOr.forEach(t),jXe=r(m3e," \u2014 "),uk=n(m3e,"A",{href:!0});var pOr=s(uk);DXe=r(pOr,"FlaubertConfig"),pOr.forEach(t),GXe=r(m3e," (FlauBERT model)"),m3e.forEach(t),OXe=i(y),Yf=n(y,"LI",{});var g3e=s(Yf);Aoe=n(g3e,"STRONG",{});var _Or=s(Aoe);VXe=r(_Or,"flava"),_Or.forEach(t),XXe=r(g3e," \u2014 "),bk=n(g3e,"A",{href:!0});var uOr=s(bk);zXe=r(uOr,"FlavaConfig"),uOr.forEach(t),WXe=r(g3e," (Flava model)"),g3e.forEach(t),QXe=i(y),Kf=n(y,"LI",{});var h3e=s(Kf);yoe=n(h3e,"STRONG",{});var bOr=s(yoe);HXe=r(bOr,"fnet"),bOr.forEach(t),UXe=r(h3e," \u2014 "),vk=n(h3e,"A",{href:!0});var vOr=s(vk);JXe=r(vOr,"FNetConfig"),vOr.forEach(t),YXe=r(h3e," (FNet model)"),h3e.forEach(t),KXe=i(y),Zf=n(y,"LI",{});var p3e=s(Zf);Loe=n(p3e,"STRONG",{});var FOr=s(Loe);ZXe=r(FOr,"fsmt"),FOr.forEach(t),eze=r(p3e," \u2014 "),Fk=n(p3e,"A",{href:!0});var TOr=s(Fk);oze=r(TOr,"FSMTConfig"),TOr.forEach(t),rze=r(p3e," (FairSeq Machine-Translation model)"),p3e.forEach(t),tze=i(y),em=n(y,"LI",{});var _3e=s(em);xoe=n(_3e,"STRONG",{});var MOr=s(xoe);aze=r(MOr,"funnel"),MOr.forEach(t),nze=r(_3e," \u2014 "),Tk=n(_3e,"A",{href:!0});var EOr=s(Tk);sze=r(EOr,"FunnelConfig"),EOr.forEach(t),lze=r(_3e," (Funnel Transformer model)"),_3e.forEach(t),ize=i(y),om=n(y,"LI",{});var u3e=s(om);$oe=n(u3e,"STRONG",{});var COr=s($oe);dze=r(COr,"glpn"),COr.forEach(t),cze=r(u3e," \u2014 "),Mk=n(u3e,"A",{href:!0});var wOr=s(Mk);fze=r(wOr,"GLPNConfig"),wOr.forEach(t),mze=r(u3e," (GLPN model)"),u3e.forEach(t),gze=i(y),rm=n(y,"LI",{});var b3e=s(rm);koe=n(b3e,"STRONG",{});var AOr=s(koe);hze=r(AOr,"gpt2"),AOr.forEach(t),pze=r(b3e," \u2014 "),Ek=n(b3e,"A",{href:!0});var yOr=s(Ek);_ze=r(yOr,"GPT2Config"),yOr.forEach(t),uze=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),bze=i(y),tm=n(y,"LI",{});var v3e=s(tm);Soe=n(v3e,"STRONG",{});var LOr=s(Soe);vze=r(LOr,"gpt_neo"),LOr.forEach(t),Fze=r(v3e," \u2014 "),Ck=n(v3e,"A",{href:!0});var xOr=s(Ck);Tze=r(xOr,"GPTNeoConfig"),xOr.forEach(t),Mze=r(v3e," (GPT Neo model)"),v3e.forEach(t),Eze=i(y),am=n(y,"LI",{});var F3e=s(am);Roe=n(F3e,"STRONG",{});var $Or=s(Roe);Cze=r($Or,"gptj"),$Or.forEach(t),wze=r(F3e," \u2014 "),wk=n(F3e,"A",{href:!0});var kOr=s(wk);Aze=r(kOr,"GPTJConfig"),kOr.forEach(t),yze=r(F3e," (GPT-J model)"),F3e.forEach(t),Lze=i(y),nm=n(y,"LI",{});var T3e=s(nm);Poe=n(T3e,"STRONG",{});var SOr=s(Poe);xze=r(SOr,"hubert"),SOr.forEach(t),$ze=r(T3e," \u2014 "),Ak=n(T3e,"A",{href:!0});var ROr=s(Ak);kze=r(ROr,"HubertConfig"),ROr.forEach(t),Sze=r(T3e," (Hubert model)"),T3e.forEach(t),Rze=i(y),sm=n(y,"LI",{});var M3e=s(sm);Boe=n(M3e,"STRONG",{});var POr=s(Boe);Pze=r(POr,"ibert"),POr.forEach(t),Bze=r(M3e," \u2014 "),yk=n(M3e,"A",{href:!0});var BOr=s(yk);Ize=r(BOr,"IBertConfig"),BOr.forEach(t),qze=r(M3e," (I-BERT model)"),M3e.forEach(t),Nze=i(y),lm=n(y,"LI",{});var E3e=s(lm);Ioe=n(E3e,"STRONG",{});var IOr=s(Ioe);jze=r(IOr,"imagegpt"),IOr.forEach(t),Dze=r(E3e," \u2014 "),Lk=n(E3e,"A",{href:!0});var qOr=s(Lk);Gze=r(qOr,"ImageGPTConfig"),qOr.forEach(t),Oze=r(E3e," (ImageGPT model)"),E3e.forEach(t),Vze=i(y),im=n(y,"LI",{});var C3e=s(im);qoe=n(C3e,"STRONG",{});var NOr=s(qoe);Xze=r(NOr,"layoutlm"),NOr.forEach(t),zze=r(C3e," \u2014 "),xk=n(C3e,"A",{href:!0});var jOr=s(xk);Wze=r(jOr,"LayoutLMConfig"),jOr.forEach(t),Qze=r(C3e," (LayoutLM model)"),C3e.forEach(t),Hze=i(y),dm=n(y,"LI",{});var w3e=s(dm);Noe=n(w3e,"STRONG",{});var DOr=s(Noe);Uze=r(DOr,"layoutlmv2"),DOr.forEach(t),Jze=r(w3e," \u2014 "),$k=n(w3e,"A",{href:!0});var GOr=s($k);Yze=r(GOr,"LayoutLMv2Config"),GOr.forEach(t),Kze=r(w3e," (LayoutLMv2 model)"),w3e.forEach(t),Zze=i(y),cm=n(y,"LI",{});var A3e=s(cm);joe=n(A3e,"STRONG",{});var OOr=s(joe);eWe=r(OOr,"led"),OOr.forEach(t),oWe=r(A3e," \u2014 "),kk=n(A3e,"A",{href:!0});var VOr=s(kk);rWe=r(VOr,"LEDConfig"),VOr.forEach(t),tWe=r(A3e," (LED model)"),A3e.forEach(t),aWe=i(y),fm=n(y,"LI",{});var y3e=s(fm);Doe=n(y3e,"STRONG",{});var XOr=s(Doe);nWe=r(XOr,"longformer"),XOr.forEach(t),sWe=r(y3e," \u2014 "),Sk=n(y3e,"A",{href:!0});var zOr=s(Sk);lWe=r(zOr,"LongformerConfig"),zOr.forEach(t),iWe=r(y3e," (Longformer model)"),y3e.forEach(t),dWe=i(y),mm=n(y,"LI",{});var L3e=s(mm);Goe=n(L3e,"STRONG",{});var WOr=s(Goe);cWe=r(WOr,"luke"),WOr.forEach(t),fWe=r(L3e," \u2014 "),Rk=n(L3e,"A",{href:!0});var QOr=s(Rk);mWe=r(QOr,"LukeConfig"),QOr.forEach(t),gWe=r(L3e," (LUKE model)"),L3e.forEach(t),hWe=i(y),gm=n(y,"LI",{});var x3e=s(gm);Ooe=n(x3e,"STRONG",{});var HOr=s(Ooe);pWe=r(HOr,"lxmert"),HOr.forEach(t),_We=r(x3e," \u2014 "),Pk=n(x3e,"A",{href:!0});var UOr=s(Pk);uWe=r(UOr,"LxmertConfig"),UOr.forEach(t),bWe=r(x3e," (LXMERT model)"),x3e.forEach(t),vWe=i(y),hm=n(y,"LI",{});var $3e=s(hm);Voe=n($3e,"STRONG",{});var JOr=s(Voe);FWe=r(JOr,"m2m_100"),JOr.forEach(t),TWe=r($3e," \u2014 "),Bk=n($3e,"A",{href:!0});var YOr=s(Bk);MWe=r(YOr,"M2M100Config"),YOr.forEach(t),EWe=r($3e," (M2M100 model)"),$3e.forEach(t),CWe=i(y),pm=n(y,"LI",{});var k3e=s(pm);Xoe=n(k3e,"STRONG",{});var KOr=s(Xoe);wWe=r(KOr,"marian"),KOr.forEach(t),AWe=r(k3e," \u2014 "),Ik=n(k3e,"A",{href:!0});var ZOr=s(Ik);yWe=r(ZOr,"MarianConfig"),ZOr.forEach(t),LWe=r(k3e," (Marian model)"),k3e.forEach(t),xWe=i(y),_m=n(y,"LI",{});var S3e=s(_m);zoe=n(S3e,"STRONG",{});var eVr=s(zoe);$We=r(eVr,"maskformer"),eVr.forEach(t),kWe=r(S3e," \u2014 "),qk=n(S3e,"A",{href:!0});var oVr=s(qk);SWe=r(oVr,"MaskFormerConfig"),oVr.forEach(t),RWe=r(S3e," (MaskFormer model)"),S3e.forEach(t),PWe=i(y),um=n(y,"LI",{});var R3e=s(um);Woe=n(R3e,"STRONG",{});var rVr=s(Woe);BWe=r(rVr,"mbart"),rVr.forEach(t),IWe=r(R3e," \u2014 "),Nk=n(R3e,"A",{href:!0});var tVr=s(Nk);qWe=r(tVr,"MBartConfig"),tVr.forEach(t),NWe=r(R3e," (mBART model)"),R3e.forEach(t),jWe=i(y),bm=n(y,"LI",{});var P3e=s(bm);Qoe=n(P3e,"STRONG",{});var aVr=s(Qoe);DWe=r(aVr,"megatron-bert"),aVr.forEach(t),GWe=r(P3e," \u2014 "),jk=n(P3e,"A",{href:!0});var nVr=s(jk);OWe=r(nVr,"MegatronBertConfig"),nVr.forEach(t),VWe=r(P3e," (MegatronBert model)"),P3e.forEach(t),XWe=i(y),vm=n(y,"LI",{});var B3e=s(vm);Hoe=n(B3e,"STRONG",{});var sVr=s(Hoe);zWe=r(sVr,"mobilebert"),sVr.forEach(t),WWe=r(B3e," \u2014 "),Dk=n(B3e,"A",{href:!0});var lVr=s(Dk);QWe=r(lVr,"MobileBertConfig"),lVr.forEach(t),HWe=r(B3e," (MobileBERT model)"),B3e.forEach(t),UWe=i(y),Fm=n(y,"LI",{});var I3e=s(Fm);Uoe=n(I3e,"STRONG",{});var iVr=s(Uoe);JWe=r(iVr,"mpnet"),iVr.forEach(t),YWe=r(I3e," \u2014 "),Gk=n(I3e,"A",{href:!0});var dVr=s(Gk);KWe=r(dVr,"MPNetConfig"),dVr.forEach(t),ZWe=r(I3e," (MPNet model)"),I3e.forEach(t),eQe=i(y),Tm=n(y,"LI",{});var q3e=s(Tm);Joe=n(q3e,"STRONG",{});var cVr=s(Joe);oQe=r(cVr,"mt5"),cVr.forEach(t),rQe=r(q3e," \u2014 "),Ok=n(q3e,"A",{href:!0});var fVr=s(Ok);tQe=r(fVr,"MT5Config"),fVr.forEach(t),aQe=r(q3e," (mT5 model)"),q3e.forEach(t),nQe=i(y),Mm=n(y,"LI",{});var N3e=s(Mm);Yoe=n(N3e,"STRONG",{});var mVr=s(Yoe);sQe=r(mVr,"nystromformer"),mVr.forEach(t),lQe=r(N3e," \u2014 "),Vk=n(N3e,"A",{href:!0});var gVr=s(Vk);iQe=r(gVr,"NystromformerConfig"),gVr.forEach(t),dQe=r(N3e," (Nystromformer model)"),N3e.forEach(t),cQe=i(y),Em=n(y,"LI",{});var j3e=s(Em);Koe=n(j3e,"STRONG",{});var hVr=s(Koe);fQe=r(hVr,"openai-gpt"),hVr.forEach(t),mQe=r(j3e," \u2014 "),Xk=n(j3e,"A",{href:!0});var pVr=s(Xk);gQe=r(pVr,"OpenAIGPTConfig"),pVr.forEach(t),hQe=r(j3e," (OpenAI GPT model)"),j3e.forEach(t),pQe=i(y),Cm=n(y,"LI",{});var D3e=s(Cm);Zoe=n(D3e,"STRONG",{});var _Vr=s(Zoe);_Qe=r(_Vr,"opt"),_Vr.forEach(t),uQe=r(D3e," \u2014 "),zk=n(D3e,"A",{href:!0});var uVr=s(zk);bQe=r(uVr,"OPTConfig"),uVr.forEach(t),vQe=r(D3e," (OPT model)"),D3e.forEach(t),FQe=i(y),wm=n(y,"LI",{});var G3e=s(wm);ere=n(G3e,"STRONG",{});var bVr=s(ere);TQe=r(bVr,"pegasus"),bVr.forEach(t),MQe=r(G3e," \u2014 "),Wk=n(G3e,"A",{href:!0});var vVr=s(Wk);EQe=r(vVr,"PegasusConfig"),vVr.forEach(t),CQe=r(G3e," (Pegasus model)"),G3e.forEach(t),wQe=i(y),Am=n(y,"LI",{});var O3e=s(Am);ore=n(O3e,"STRONG",{});var FVr=s(ore);AQe=r(FVr,"perceiver"),FVr.forEach(t),yQe=r(O3e," \u2014 "),Qk=n(O3e,"A",{href:!0});var TVr=s(Qk);LQe=r(TVr,"PerceiverConfig"),TVr.forEach(t),xQe=r(O3e," (Perceiver model)"),O3e.forEach(t),$Qe=i(y),ym=n(y,"LI",{});var V3e=s(ym);rre=n(V3e,"STRONG",{});var MVr=s(rre);kQe=r(MVr,"plbart"),MVr.forEach(t),SQe=r(V3e," \u2014 "),Hk=n(V3e,"A",{href:!0});var EVr=s(Hk);RQe=r(EVr,"PLBartConfig"),EVr.forEach(t),PQe=r(V3e," (PLBart model)"),V3e.forEach(t),BQe=i(y),Lm=n(y,"LI",{});var X3e=s(Lm);tre=n(X3e,"STRONG",{});var CVr=s(tre);IQe=r(CVr,"poolformer"),CVr.forEach(t),qQe=r(X3e," \u2014 "),Uk=n(X3e,"A",{href:!0});var wVr=s(Uk);NQe=r(wVr,"PoolFormerConfig"),wVr.forEach(t),jQe=r(X3e," (PoolFormer model)"),X3e.forEach(t),DQe=i(y),xm=n(y,"LI",{});var z3e=s(xm);are=n(z3e,"STRONG",{});var AVr=s(are);GQe=r(AVr,"prophetnet"),AVr.forEach(t),OQe=r(z3e," \u2014 "),Jk=n(z3e,"A",{href:!0});var yVr=s(Jk);VQe=r(yVr,"ProphetNetConfig"),yVr.forEach(t),XQe=r(z3e," (ProphetNet model)"),z3e.forEach(t),zQe=i(y),$m=n(y,"LI",{});var W3e=s($m);nre=n(W3e,"STRONG",{});var LVr=s(nre);WQe=r(LVr,"qdqbert"),LVr.forEach(t),QQe=r(W3e," \u2014 "),Yk=n(W3e,"A",{href:!0});var xVr=s(Yk);HQe=r(xVr,"QDQBertConfig"),xVr.forEach(t),UQe=r(W3e," (QDQBert model)"),W3e.forEach(t),JQe=i(y),km=n(y,"LI",{});var Q3e=s(km);sre=n(Q3e,"STRONG",{});var $Vr=s(sre);YQe=r($Vr,"rag"),$Vr.forEach(t),KQe=r(Q3e," \u2014 "),Kk=n(Q3e,"A",{href:!0});var kVr=s(Kk);ZQe=r(kVr,"RagConfig"),kVr.forEach(t),eHe=r(Q3e," (RAG model)"),Q3e.forEach(t),oHe=i(y),Sm=n(y,"LI",{});var H3e=s(Sm);lre=n(H3e,"STRONG",{});var SVr=s(lre);rHe=r(SVr,"realm"),SVr.forEach(t),tHe=r(H3e," \u2014 "),Zk=n(H3e,"A",{href:!0});var RVr=s(Zk);aHe=r(RVr,"RealmConfig"),RVr.forEach(t),nHe=r(H3e," (Realm model)"),H3e.forEach(t),sHe=i(y),Rm=n(y,"LI",{});var U3e=s(Rm);ire=n(U3e,"STRONG",{});var PVr=s(ire);lHe=r(PVr,"reformer"),PVr.forEach(t),iHe=r(U3e," \u2014 "),eS=n(U3e,"A",{href:!0});var BVr=s(eS);dHe=r(BVr,"ReformerConfig"),BVr.forEach(t),cHe=r(U3e," (Reformer model)"),U3e.forEach(t),fHe=i(y),Pm=n(y,"LI",{});var J3e=s(Pm);dre=n(J3e,"STRONG",{});var IVr=s(dre);mHe=r(IVr,"regnet"),IVr.forEach(t),gHe=r(J3e," \u2014 "),oS=n(J3e,"A",{href:!0});var qVr=s(oS);hHe=r(qVr,"RegNetConfig"),qVr.forEach(t),pHe=r(J3e," (RegNet model)"),J3e.forEach(t),_He=i(y),Bm=n(y,"LI",{});var Y3e=s(Bm);cre=n(Y3e,"STRONG",{});var NVr=s(cre);uHe=r(NVr,"rembert"),NVr.forEach(t),bHe=r(Y3e," \u2014 "),rS=n(Y3e,"A",{href:!0});var jVr=s(rS);vHe=r(jVr,"RemBertConfig"),jVr.forEach(t),FHe=r(Y3e," (RemBERT model)"),Y3e.forEach(t),THe=i(y),Im=n(y,"LI",{});var K3e=s(Im);fre=n(K3e,"STRONG",{});var DVr=s(fre);MHe=r(DVr,"resnet"),DVr.forEach(t),EHe=r(K3e," \u2014 "),tS=n(K3e,"A",{href:!0});var GVr=s(tS);CHe=r(GVr,"ResNetConfig"),GVr.forEach(t),wHe=r(K3e," (ResNet model)"),K3e.forEach(t),AHe=i(y),qm=n(y,"LI",{});var Z3e=s(qm);mre=n(Z3e,"STRONG",{});var OVr=s(mre);yHe=r(OVr,"retribert"),OVr.forEach(t),LHe=r(Z3e," \u2014 "),aS=n(Z3e,"A",{href:!0});var VVr=s(aS);xHe=r(VVr,"RetriBertConfig"),VVr.forEach(t),$He=r(Z3e," (RetriBERT model)"),Z3e.forEach(t),kHe=i(y),Nm=n(y,"LI",{});var ewe=s(Nm);gre=n(ewe,"STRONG",{});var XVr=s(gre);SHe=r(XVr,"roberta"),XVr.forEach(t),RHe=r(ewe," \u2014 "),nS=n(ewe,"A",{href:!0});var zVr=s(nS);PHe=r(zVr,"RobertaConfig"),zVr.forEach(t),BHe=r(ewe," (RoBERTa model)"),ewe.forEach(t),IHe=i(y),jm=n(y,"LI",{});var owe=s(jm);hre=n(owe,"STRONG",{});var WVr=s(hre);qHe=r(WVr,"roformer"),WVr.forEach(t),NHe=r(owe," \u2014 "),sS=n(owe,"A",{href:!0});var QVr=s(sS);jHe=r(QVr,"RoFormerConfig"),QVr.forEach(t),DHe=r(owe," (RoFormer model)"),owe.forEach(t),GHe=i(y),Dm=n(y,"LI",{});var rwe=s(Dm);pre=n(rwe,"STRONG",{});var HVr=s(pre);OHe=r(HVr,"segformer"),HVr.forEach(t),VHe=r(rwe," \u2014 "),lS=n(rwe,"A",{href:!0});var UVr=s(lS);XHe=r(UVr,"SegformerConfig"),UVr.forEach(t),zHe=r(rwe," (SegFormer model)"),rwe.forEach(t),WHe=i(y),Gm=n(y,"LI",{});var twe=s(Gm);_re=n(twe,"STRONG",{});var JVr=s(_re);QHe=r(JVr,"sew"),JVr.forEach(t),HHe=r(twe," \u2014 "),iS=n(twe,"A",{href:!0});var YVr=s(iS);UHe=r(YVr,"SEWConfig"),YVr.forEach(t),JHe=r(twe," (SEW model)"),twe.forEach(t),YHe=i(y),Om=n(y,"LI",{});var awe=s(Om);ure=n(awe,"STRONG",{});var KVr=s(ure);KHe=r(KVr,"sew-d"),KVr.forEach(t),ZHe=r(awe," \u2014 "),dS=n(awe,"A",{href:!0});var ZVr=s(dS);eUe=r(ZVr,"SEWDConfig"),ZVr.forEach(t),oUe=r(awe," (SEW-D model)"),awe.forEach(t),rUe=i(y),Vm=n(y,"LI",{});var nwe=s(Vm);bre=n(nwe,"STRONG",{});var eXr=s(bre);tUe=r(eXr,"speech-encoder-decoder"),eXr.forEach(t),aUe=r(nwe," \u2014 "),cS=n(nwe,"A",{href:!0});var oXr=s(cS);nUe=r(oXr,"SpeechEncoderDecoderConfig"),oXr.forEach(t),sUe=r(nwe," (Speech Encoder decoder model)"),nwe.forEach(t),lUe=i(y),Xm=n(y,"LI",{});var swe=s(Xm);vre=n(swe,"STRONG",{});var rXr=s(vre);iUe=r(rXr,"speech_to_text"),rXr.forEach(t),dUe=r(swe," \u2014 "),fS=n(swe,"A",{href:!0});var tXr=s(fS);cUe=r(tXr,"Speech2TextConfig"),tXr.forEach(t),fUe=r(swe," (Speech2Text model)"),swe.forEach(t),mUe=i(y),zm=n(y,"LI",{});var lwe=s(zm);Fre=n(lwe,"STRONG",{});var aXr=s(Fre);gUe=r(aXr,"speech_to_text_2"),aXr.forEach(t),hUe=r(lwe," \u2014 "),mS=n(lwe,"A",{href:!0});var nXr=s(mS);pUe=r(nXr,"Speech2Text2Config"),nXr.forEach(t),_Ue=r(lwe," (Speech2Text2 model)"),lwe.forEach(t),uUe=i(y),Wm=n(y,"LI",{});var iwe=s(Wm);Tre=n(iwe,"STRONG",{});var sXr=s(Tre);bUe=r(sXr,"splinter"),sXr.forEach(t),vUe=r(iwe," \u2014 "),gS=n(iwe,"A",{href:!0});var lXr=s(gS);FUe=r(lXr,"SplinterConfig"),lXr.forEach(t),TUe=r(iwe," (Splinter model)"),iwe.forEach(t),MUe=i(y),Qm=n(y,"LI",{});var dwe=s(Qm);Mre=n(dwe,"STRONG",{});var iXr=s(Mre);EUe=r(iXr,"squeezebert"),iXr.forEach(t),CUe=r(dwe," \u2014 "),hS=n(dwe,"A",{href:!0});var dXr=s(hS);wUe=r(dXr,"SqueezeBertConfig"),dXr.forEach(t),AUe=r(dwe," (SqueezeBERT model)"),dwe.forEach(t),yUe=i(y),Hm=n(y,"LI",{});var cwe=s(Hm);Ere=n(cwe,"STRONG",{});var cXr=s(Ere);LUe=r(cXr,"swin"),cXr.forEach(t),xUe=r(cwe," \u2014 "),pS=n(cwe,"A",{href:!0});var fXr=s(pS);$Ue=r(fXr,"SwinConfig"),fXr.forEach(t),kUe=r(cwe," (Swin model)"),cwe.forEach(t),SUe=i(y),Um=n(y,"LI",{});var fwe=s(Um);Cre=n(fwe,"STRONG",{});var mXr=s(Cre);RUe=r(mXr,"t5"),mXr.forEach(t),PUe=r(fwe," \u2014 "),_S=n(fwe,"A",{href:!0});var gXr=s(_S);BUe=r(gXr,"T5Config"),gXr.forEach(t),IUe=r(fwe," (T5 model)"),fwe.forEach(t),qUe=i(y),Jm=n(y,"LI",{});var mwe=s(Jm);wre=n(mwe,"STRONG",{});var hXr=s(wre);NUe=r(hXr,"tapas"),hXr.forEach(t),jUe=r(mwe," \u2014 "),uS=n(mwe,"A",{href:!0});var pXr=s(uS);DUe=r(pXr,"TapasConfig"),pXr.forEach(t),GUe=r(mwe," (TAPAS model)"),mwe.forEach(t),OUe=i(y),Ym=n(y,"LI",{});var gwe=s(Ym);Are=n(gwe,"STRONG",{});var _Xr=s(Are);VUe=r(_Xr,"trajectory_transformer"),_Xr.forEach(t),XUe=r(gwe," \u2014 "),bS=n(gwe,"A",{href:!0});var uXr=s(bS);zUe=r(uXr,"TrajectoryTransformerConfig"),uXr.forEach(t),WUe=r(gwe," (Trajectory Transformer model)"),gwe.forEach(t),QUe=i(y),Km=n(y,"LI",{});var hwe=s(Km);yre=n(hwe,"STRONG",{});var bXr=s(yre);HUe=r(bXr,"transfo-xl"),bXr.forEach(t),UUe=r(hwe," \u2014 "),vS=n(hwe,"A",{href:!0});var vXr=s(vS);JUe=r(vXr,"TransfoXLConfig"),vXr.forEach(t),YUe=r(hwe," (Transformer-XL model)"),hwe.forEach(t),KUe=i(y),Zm=n(y,"LI",{});var pwe=s(Zm);Lre=n(pwe,"STRONG",{});var FXr=s(Lre);ZUe=r(FXr,"trocr"),FXr.forEach(t),eJe=r(pwe," \u2014 "),FS=n(pwe,"A",{href:!0});var TXr=s(FS);oJe=r(TXr,"TrOCRConfig"),TXr.forEach(t),rJe=r(pwe," (TrOCR model)"),pwe.forEach(t),tJe=i(y),eg=n(y,"LI",{});var _we=s(eg);xre=n(_we,"STRONG",{});var MXr=s(xre);aJe=r(MXr,"unispeech"),MXr.forEach(t),nJe=r(_we," \u2014 "),TS=n(_we,"A",{href:!0});var EXr=s(TS);sJe=r(EXr,"UniSpeechConfig"),EXr.forEach(t),lJe=r(_we," (UniSpeech model)"),_we.forEach(t),iJe=i(y),og=n(y,"LI",{});var uwe=s(og);$re=n(uwe,"STRONG",{});var CXr=s($re);dJe=r(CXr,"unispeech-sat"),CXr.forEach(t),cJe=r(uwe," \u2014 "),MS=n(uwe,"A",{href:!0});var wXr=s(MS);fJe=r(wXr,"UniSpeechSatConfig"),wXr.forEach(t),mJe=r(uwe," (UniSpeechSat model)"),uwe.forEach(t),gJe=i(y),rg=n(y,"LI",{});var bwe=s(rg);kre=n(bwe,"STRONG",{});var AXr=s(kre);hJe=r(AXr,"van"),AXr.forEach(t),pJe=r(bwe," \u2014 "),ES=n(bwe,"A",{href:!0});var yXr=s(ES);_Je=r(yXr,"VanConfig"),yXr.forEach(t),uJe=r(bwe," (VAN model)"),bwe.forEach(t),bJe=i(y),tg=n(y,"LI",{});var vwe=s(tg);Sre=n(vwe,"STRONG",{});var LXr=s(Sre);vJe=r(LXr,"vilt"),LXr.forEach(t),FJe=r(vwe," \u2014 "),CS=n(vwe,"A",{href:!0});var xXr=s(CS);TJe=r(xXr,"ViltConfig"),xXr.forEach(t),MJe=r(vwe," (ViLT model)"),vwe.forEach(t),EJe=i(y),ag=n(y,"LI",{});var Fwe=s(ag);Rre=n(Fwe,"STRONG",{});var $Xr=s(Rre);CJe=r($Xr,"vision-encoder-decoder"),$Xr.forEach(t),wJe=r(Fwe," \u2014 "),wS=n(Fwe,"A",{href:!0});var kXr=s(wS);AJe=r(kXr,"VisionEncoderDecoderConfig"),kXr.forEach(t),yJe=r(Fwe," (Vision Encoder decoder model)"),Fwe.forEach(t),LJe=i(y),ng=n(y,"LI",{});var Twe=s(ng);Pre=n(Twe,"STRONG",{});var SXr=s(Pre);xJe=r(SXr,"vision-text-dual-encoder"),SXr.forEach(t),$Je=r(Twe," \u2014 "),AS=n(Twe,"A",{href:!0});var RXr=s(AS);kJe=r(RXr,"VisionTextDualEncoderConfig"),RXr.forEach(t),SJe=r(Twe," (VisionTextDualEncoder model)"),Twe.forEach(t),RJe=i(y),sg=n(y,"LI",{});var Mwe=s(sg);Bre=n(Mwe,"STRONG",{});var PXr=s(Bre);PJe=r(PXr,"visual_bert"),PXr.forEach(t),BJe=r(Mwe," \u2014 "),yS=n(Mwe,"A",{href:!0});var BXr=s(yS);IJe=r(BXr,"VisualBertConfig"),BXr.forEach(t),qJe=r(Mwe," (VisualBert model)"),Mwe.forEach(t),NJe=i(y),lg=n(y,"LI",{});var Ewe=s(lg);Ire=n(Ewe,"STRONG",{});var IXr=s(Ire);jJe=r(IXr,"vit"),IXr.forEach(t),DJe=r(Ewe," \u2014 "),LS=n(Ewe,"A",{href:!0});var qXr=s(LS);GJe=r(qXr,"ViTConfig"),qXr.forEach(t),OJe=r(Ewe," (ViT model)"),Ewe.forEach(t),VJe=i(y),ig=n(y,"LI",{});var Cwe=s(ig);qre=n(Cwe,"STRONG",{});var NXr=s(qre);XJe=r(NXr,"vit_mae"),NXr.forEach(t),zJe=r(Cwe," \u2014 "),xS=n(Cwe,"A",{href:!0});var jXr=s(xS);WJe=r(jXr,"ViTMAEConfig"),jXr.forEach(t),QJe=r(Cwe," (ViTMAE model)"),Cwe.forEach(t),HJe=i(y),dg=n(y,"LI",{});var wwe=s(dg);Nre=n(wwe,"STRONG",{});var DXr=s(Nre);UJe=r(DXr,"wav2vec2"),DXr.forEach(t),JJe=r(wwe," \u2014 "),$S=n(wwe,"A",{href:!0});var GXr=s($S);YJe=r(GXr,"Wav2Vec2Config"),GXr.forEach(t),KJe=r(wwe," (Wav2Vec2 model)"),wwe.forEach(t),ZJe=i(y),cg=n(y,"LI",{});var Awe=s(cg);jre=n(Awe,"STRONG",{});var OXr=s(jre);eYe=r(OXr,"wav2vec2-conformer"),OXr.forEach(t),oYe=r(Awe," \u2014 "),kS=n(Awe,"A",{href:!0});var VXr=s(kS);rYe=r(VXr,"Wav2Vec2ConformerConfig"),VXr.forEach(t),tYe=r(Awe," (Wav2Vec2-Conformer model)"),Awe.forEach(t),aYe=i(y),fg=n(y,"LI",{});var ywe=s(fg);Dre=n(ywe,"STRONG",{});var XXr=s(Dre);nYe=r(XXr,"wavlm"),XXr.forEach(t),sYe=r(ywe," \u2014 "),SS=n(ywe,"A",{href:!0});var zXr=s(SS);lYe=r(zXr,"WavLMConfig"),zXr.forEach(t),iYe=r(ywe," (WavLM model)"),ywe.forEach(t),dYe=i(y),mg=n(y,"LI",{});var Lwe=s(mg);Gre=n(Lwe,"STRONG",{});var WXr=s(Gre);cYe=r(WXr,"xglm"),WXr.forEach(t),fYe=r(Lwe," \u2014 "),RS=n(Lwe,"A",{href:!0});var QXr=s(RS);mYe=r(QXr,"XGLMConfig"),QXr.forEach(t),gYe=r(Lwe," (XGLM model)"),Lwe.forEach(t),hYe=i(y),gg=n(y,"LI",{});var xwe=s(gg);Ore=n(xwe,"STRONG",{});var HXr=s(Ore);pYe=r(HXr,"xlm"),HXr.forEach(t),_Ye=r(xwe," \u2014 "),PS=n(xwe,"A",{href:!0});var UXr=s(PS);uYe=r(UXr,"XLMConfig"),UXr.forEach(t),bYe=r(xwe," (XLM model)"),xwe.forEach(t),vYe=i(y),hg=n(y,"LI",{});var $we=s(hg);Vre=n($we,"STRONG",{});var JXr=s(Vre);FYe=r(JXr,"xlm-prophetnet"),JXr.forEach(t),TYe=r($we," \u2014 "),BS=n($we,"A",{href:!0});var YXr=s(BS);MYe=r(YXr,"XLMProphetNetConfig"),YXr.forEach(t),EYe=r($we," (XLMProphetNet model)"),$we.forEach(t),CYe=i(y),pg=n(y,"LI",{});var kwe=s(pg);Xre=n(kwe,"STRONG",{});var KXr=s(Xre);wYe=r(KXr,"xlm-roberta"),KXr.forEach(t),AYe=r(kwe," \u2014 "),IS=n(kwe,"A",{href:!0});var ZXr=s(IS);yYe=r(ZXr,"XLMRobertaConfig"),ZXr.forEach(t),LYe=r(kwe," (XLM-RoBERTa model)"),kwe.forEach(t),xYe=i(y),_g=n(y,"LI",{});var Swe=s(_g);zre=n(Swe,"STRONG",{});var ezr=s(zre);$Ye=r(ezr,"xlm-roberta-xl"),ezr.forEach(t),kYe=r(Swe," \u2014 "),qS=n(Swe,"A",{href:!0});var ozr=s(qS);SYe=r(ozr,"XLMRobertaXLConfig"),ozr.forEach(t),RYe=r(Swe," (XLM-RoBERTa-XL model)"),Swe.forEach(t),PYe=i(y),ug=n(y,"LI",{});var Rwe=s(ug);Wre=n(Rwe,"STRONG",{});var rzr=s(Wre);BYe=r(rzr,"xlnet"),rzr.forEach(t),IYe=r(Rwe," \u2014 "),NS=n(Rwe,"A",{href:!0});var tzr=s(NS);qYe=r(tzr,"XLNetConfig"),tzr.forEach(t),NYe=r(Rwe," (XLNet model)"),Rwe.forEach(t),jYe=i(y),bg=n(y,"LI",{});var Pwe=s(bg);Qre=n(Pwe,"STRONG",{});var azr=s(Qre);DYe=r(azr,"yolos"),azr.forEach(t),GYe=r(Pwe," \u2014 "),jS=n(Pwe,"A",{href:!0});var nzr=s(jS);OYe=r(nzr,"YolosConfig"),nzr.forEach(t),VYe=r(Pwe," (YOLOS model)"),Pwe.forEach(t),XYe=i(y),vg=n(y,"LI",{});var Bwe=s(vg);Hre=n(Bwe,"STRONG",{});var szr=s(Hre);zYe=r(szr,"yoso"),szr.forEach(t),WYe=r(Bwe," \u2014 "),DS=n(Bwe,"A",{href:!0});var lzr=s(DS);QYe=r(lzr,"YosoConfig"),lzr.forEach(t),HYe=r(Bwe," (YOSO model)"),Bwe.forEach(t),y.forEach(t),UYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),JYe=i(et),Tg=n(et,"DIV",{class:!0});var vje=s(Tg);T(w6.$$.fragment,vje),YYe=i(vje),Ure=n(vje,"P",{});var izr=s(Ure);KYe=r(izr,"Register a new configuration for this class."),izr.forEach(t),vje.forEach(t),et.forEach(t),Mqe=i(f),Fi=n(f,"H2",{class:!0});var Fje=s(Fi);Mg=n(Fje,"A",{id:!0,class:!0,href:!0});var dzr=s(Mg);Jre=n(dzr,"SPAN",{});var czr=s(Jre);T(A6.$$.fragment,czr),czr.forEach(t),dzr.forEach(t),ZYe=i(Fje),Yre=n(Fje,"SPAN",{});var fzr=s(Yre);eKe=r(fzr,"AutoTokenizer"),fzr.forEach(t),Fje.forEach(t),Eqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(y6.$$.fragment,Is),oKe=i(Is),L6=n(Is,"P",{});var Tje=s(L6);rKe=r(Tje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GS=n(Tje,"A",{href:!0});var mzr=s(GS);tKe=r(mzr,"AutoTokenizer.from_pretrained()"),mzr.forEach(t),aKe=r(Tje," class method."),Tje.forEach(t),nKe=i(Is),x6=n(Is,"P",{});var Mje=s(x6);sKe=r(Mje,"This class cannot be instantiated directly using "),Kre=n(Mje,"CODE",{});var gzr=s(Kre);lKe=r(gzr,"__init__()"),gzr.forEach(t),iKe=r(Mje," (throws an error)."),Mje.forEach(t),dKe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T($6.$$.fragment,qs),cKe=i(qs),Zre=n(qs,"P",{});var hzr=s(Zre);fKe=r(hzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hzr.forEach(t),mKe=i(qs),Aa=n(qs,"P",{});var F0=s(Aa);gKe=r(F0,"The tokenizer class to instantiate is selected based on the "),ete=n(F0,"CODE",{});var pzr=s(ete);hKe=r(pzr,"model_type"),pzr.forEach(t),pKe=r(F0,` property of the config object (either
passed as an argument or loaded from `),ote=n(F0,"CODE",{});var _zr=s(ote);_Ke=r(_zr,"pretrained_model_name_or_path"),_zr.forEach(t),uKe=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=n(F0,"CODE",{});var uzr=s(rte);bKe=r(uzr,"pretrained_model_name_or_path"),uzr.forEach(t),vKe=r(F0,":"),F0.forEach(t),FKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var kx=s(Sn);tte=n(kx,"STRONG",{});var bzr=s(tte);TKe=r(bzr,"albert"),bzr.forEach(t),MKe=r(kx," \u2014 "),OS=n(kx,"A",{href:!0});var vzr=s(OS);EKe=r(vzr,"AlbertTokenizer"),vzr.forEach(t),CKe=r(kx," or "),VS=n(kx,"A",{href:!0});var Fzr=s(VS);wKe=r(Fzr,"AlbertTokenizerFast"),Fzr.forEach(t),AKe=r(kx," (ALBERT model)"),kx.forEach(t),yKe=i(S),Rn=n(S,"LI",{});var Sx=s(Rn);ate=n(Sx,"STRONG",{});var Tzr=s(ate);LKe=r(Tzr,"bart"),Tzr.forEach(t),xKe=r(Sx," \u2014 "),XS=n(Sx,"A",{href:!0});var Mzr=s(XS);$Ke=r(Mzr,"BartTokenizer"),Mzr.forEach(t),kKe=r(Sx," or "),zS=n(Sx,"A",{href:!0});var Ezr=s(zS);SKe=r(Ezr,"BartTokenizerFast"),Ezr.forEach(t),RKe=r(Sx," (BART model)"),Sx.forEach(t),PKe=i(S),Pn=n(S,"LI",{});var Rx=s(Pn);nte=n(Rx,"STRONG",{});var Czr=s(nte);BKe=r(Czr,"barthez"),Czr.forEach(t),IKe=r(Rx," \u2014 "),WS=n(Rx,"A",{href:!0});var wzr=s(WS);qKe=r(wzr,"BarthezTokenizer"),wzr.forEach(t),NKe=r(Rx," or "),QS=n(Rx,"A",{href:!0});var Azr=s(QS);jKe=r(Azr,"BarthezTokenizerFast"),Azr.forEach(t),DKe=r(Rx," (BARThez model)"),Rx.forEach(t),GKe=i(S),Eg=n(S,"LI",{});var Iwe=s(Eg);ste=n(Iwe,"STRONG",{});var yzr=s(ste);OKe=r(yzr,"bartpho"),yzr.forEach(t),VKe=r(Iwe," \u2014 "),HS=n(Iwe,"A",{href:!0});var Lzr=s(HS);XKe=r(Lzr,"BartphoTokenizer"),Lzr.forEach(t),zKe=r(Iwe," (BARTpho model)"),Iwe.forEach(t),WKe=i(S),Bn=n(S,"LI",{});var Px=s(Bn);lte=n(Px,"STRONG",{});var xzr=s(lte);QKe=r(xzr,"bert"),xzr.forEach(t),HKe=r(Px," \u2014 "),US=n(Px,"A",{href:!0});var $zr=s(US);UKe=r($zr,"BertTokenizer"),$zr.forEach(t),JKe=r(Px," or "),JS=n(Px,"A",{href:!0});var kzr=s(JS);YKe=r(kzr,"BertTokenizerFast"),kzr.forEach(t),KKe=r(Px," (BERT model)"),Px.forEach(t),ZKe=i(S),Cg=n(S,"LI",{});var qwe=s(Cg);ite=n(qwe,"STRONG",{});var Szr=s(ite);eZe=r(Szr,"bert-generation"),Szr.forEach(t),oZe=r(qwe," \u2014 "),YS=n(qwe,"A",{href:!0});var Rzr=s(YS);rZe=r(Rzr,"BertGenerationTokenizer"),Rzr.forEach(t),tZe=r(qwe," (Bert Generation model)"),qwe.forEach(t),aZe=i(S),wg=n(S,"LI",{});var Nwe=s(wg);dte=n(Nwe,"STRONG",{});var Pzr=s(dte);nZe=r(Pzr,"bert-japanese"),Pzr.forEach(t),sZe=r(Nwe," \u2014 "),KS=n(Nwe,"A",{href:!0});var Bzr=s(KS);lZe=r(Bzr,"BertJapaneseTokenizer"),Bzr.forEach(t),iZe=r(Nwe," (BertJapanese model)"),Nwe.forEach(t),dZe=i(S),Ag=n(S,"LI",{});var jwe=s(Ag);cte=n(jwe,"STRONG",{});var Izr=s(cte);cZe=r(Izr,"bertweet"),Izr.forEach(t),fZe=r(jwe," \u2014 "),ZS=n(jwe,"A",{href:!0});var qzr=s(ZS);mZe=r(qzr,"BertweetTokenizer"),qzr.forEach(t),gZe=r(jwe," (Bertweet model)"),jwe.forEach(t),hZe=i(S),In=n(S,"LI",{});var Bx=s(In);fte=n(Bx,"STRONG",{});var Nzr=s(fte);pZe=r(Nzr,"big_bird"),Nzr.forEach(t),_Ze=r(Bx," \u2014 "),eR=n(Bx,"A",{href:!0});var jzr=s(eR);uZe=r(jzr,"BigBirdTokenizer"),jzr.forEach(t),bZe=r(Bx," or "),oR=n(Bx,"A",{href:!0});var Dzr=s(oR);vZe=r(Dzr,"BigBirdTokenizerFast"),Dzr.forEach(t),FZe=r(Bx," (BigBird model)"),Bx.forEach(t),TZe=i(S),qn=n(S,"LI",{});var Ix=s(qn);mte=n(Ix,"STRONG",{});var Gzr=s(mte);MZe=r(Gzr,"bigbird_pegasus"),Gzr.forEach(t),EZe=r(Ix," \u2014 "),rR=n(Ix,"A",{href:!0});var Ozr=s(rR);CZe=r(Ozr,"PegasusTokenizer"),Ozr.forEach(t),wZe=r(Ix," or "),tR=n(Ix,"A",{href:!0});var Vzr=s(tR);AZe=r(Vzr,"PegasusTokenizerFast"),Vzr.forEach(t),yZe=r(Ix," (BigBirdPegasus model)"),Ix.forEach(t),LZe=i(S),Nn=n(S,"LI",{});var qx=s(Nn);gte=n(qx,"STRONG",{});var Xzr=s(gte);xZe=r(Xzr,"blenderbot"),Xzr.forEach(t),$Ze=r(qx," \u2014 "),aR=n(qx,"A",{href:!0});var zzr=s(aR);kZe=r(zzr,"BlenderbotTokenizer"),zzr.forEach(t),SZe=r(qx," or "),nR=n(qx,"A",{href:!0});var Wzr=s(nR);RZe=r(Wzr,"BlenderbotTokenizerFast"),Wzr.forEach(t),PZe=r(qx," (Blenderbot model)"),qx.forEach(t),BZe=i(S),yg=n(S,"LI",{});var Dwe=s(yg);hte=n(Dwe,"STRONG",{});var Qzr=s(hte);IZe=r(Qzr,"blenderbot-small"),Qzr.forEach(t),qZe=r(Dwe," \u2014 "),sR=n(Dwe,"A",{href:!0});var Hzr=s(sR);NZe=r(Hzr,"BlenderbotSmallTokenizer"),Hzr.forEach(t),jZe=r(Dwe," (BlenderbotSmall model)"),Dwe.forEach(t),DZe=i(S),Lg=n(S,"LI",{});var Gwe=s(Lg);pte=n(Gwe,"STRONG",{});var Uzr=s(pte);GZe=r(Uzr,"byt5"),Uzr.forEach(t),OZe=r(Gwe," \u2014 "),lR=n(Gwe,"A",{href:!0});var Jzr=s(lR);VZe=r(Jzr,"ByT5Tokenizer"),Jzr.forEach(t),XZe=r(Gwe," (ByT5 model)"),Gwe.forEach(t),zZe=i(S),jn=n(S,"LI",{});var Nx=s(jn);_te=n(Nx,"STRONG",{});var Yzr=s(_te);WZe=r(Yzr,"camembert"),Yzr.forEach(t),QZe=r(Nx," \u2014 "),iR=n(Nx,"A",{href:!0});var Kzr=s(iR);HZe=r(Kzr,"CamembertTokenizer"),Kzr.forEach(t),UZe=r(Nx," or "),dR=n(Nx,"A",{href:!0});var Zzr=s(dR);JZe=r(Zzr,"CamembertTokenizerFast"),Zzr.forEach(t),YZe=r(Nx," (CamemBERT model)"),Nx.forEach(t),KZe=i(S),xg=n(S,"LI",{});var Owe=s(xg);ute=n(Owe,"STRONG",{});var eWr=s(ute);ZZe=r(eWr,"canine"),eWr.forEach(t),eeo=r(Owe," \u2014 "),cR=n(Owe,"A",{href:!0});var oWr=s(cR);oeo=r(oWr,"CanineTokenizer"),oWr.forEach(t),reo=r(Owe," (Canine model)"),Owe.forEach(t),teo=i(S),Dn=n(S,"LI",{});var jx=s(Dn);bte=n(jx,"STRONG",{});var rWr=s(bte);aeo=r(rWr,"clip"),rWr.forEach(t),neo=r(jx," \u2014 "),fR=n(jx,"A",{href:!0});var tWr=s(fR);seo=r(tWr,"CLIPTokenizer"),tWr.forEach(t),leo=r(jx," or "),mR=n(jx,"A",{href:!0});var aWr=s(mR);ieo=r(aWr,"CLIPTokenizerFast"),aWr.forEach(t),deo=r(jx," (CLIP model)"),jx.forEach(t),ceo=i(S),Gn=n(S,"LI",{});var Dx=s(Gn);vte=n(Dx,"STRONG",{});var nWr=s(vte);feo=r(nWr,"convbert"),nWr.forEach(t),meo=r(Dx," \u2014 "),gR=n(Dx,"A",{href:!0});var sWr=s(gR);geo=r(sWr,"ConvBertTokenizer"),sWr.forEach(t),heo=r(Dx," or "),hR=n(Dx,"A",{href:!0});var lWr=s(hR);peo=r(lWr,"ConvBertTokenizerFast"),lWr.forEach(t),_eo=r(Dx," (ConvBERT model)"),Dx.forEach(t),ueo=i(S),On=n(S,"LI",{});var Gx=s(On);Fte=n(Gx,"STRONG",{});var iWr=s(Fte);beo=r(iWr,"cpm"),iWr.forEach(t),veo=r(Gx," \u2014 "),pR=n(Gx,"A",{href:!0});var dWr=s(pR);Feo=r(dWr,"CpmTokenizer"),dWr.forEach(t),Teo=r(Gx," or "),_R=n(Gx,"A",{href:!0});var cWr=s(_R);Meo=r(cWr,"CpmTokenizerFast"),cWr.forEach(t),Eeo=r(Gx," (CPM model)"),Gx.forEach(t),Ceo=i(S),$g=n(S,"LI",{});var Vwe=s($g);Tte=n(Vwe,"STRONG",{});var fWr=s(Tte);weo=r(fWr,"ctrl"),fWr.forEach(t),Aeo=r(Vwe," \u2014 "),uR=n(Vwe,"A",{href:!0});var mWr=s(uR);yeo=r(mWr,"CTRLTokenizer"),mWr.forEach(t),Leo=r(Vwe," (CTRL model)"),Vwe.forEach(t),xeo=i(S),Vn=n(S,"LI",{});var Ox=s(Vn);Mte=n(Ox,"STRONG",{});var gWr=s(Mte);$eo=r(gWr,"data2vec-text"),gWr.forEach(t),keo=r(Ox," \u2014 "),bR=n(Ox,"A",{href:!0});var hWr=s(bR);Seo=r(hWr,"RobertaTokenizer"),hWr.forEach(t),Reo=r(Ox," or "),vR=n(Ox,"A",{href:!0});var pWr=s(vR);Peo=r(pWr,"RobertaTokenizerFast"),pWr.forEach(t),Beo=r(Ox," (Data2VecText model)"),Ox.forEach(t),Ieo=i(S),Xn=n(S,"LI",{});var Vx=s(Xn);Ete=n(Vx,"STRONG",{});var _Wr=s(Ete);qeo=r(_Wr,"deberta"),_Wr.forEach(t),Neo=r(Vx," \u2014 "),FR=n(Vx,"A",{href:!0});var uWr=s(FR);jeo=r(uWr,"DebertaTokenizer"),uWr.forEach(t),Deo=r(Vx," or "),TR=n(Vx,"A",{href:!0});var bWr=s(TR);Geo=r(bWr,"DebertaTokenizerFast"),bWr.forEach(t),Oeo=r(Vx," (DeBERTa model)"),Vx.forEach(t),Veo=i(S),zn=n(S,"LI",{});var Xx=s(zn);Cte=n(Xx,"STRONG",{});var vWr=s(Cte);Xeo=r(vWr,"deberta-v2"),vWr.forEach(t),zeo=r(Xx," \u2014 "),MR=n(Xx,"A",{href:!0});var FWr=s(MR);Weo=r(FWr,"DebertaV2Tokenizer"),FWr.forEach(t),Qeo=r(Xx," or "),ER=n(Xx,"A",{href:!0});var TWr=s(ER);Heo=r(TWr,"DebertaV2TokenizerFast"),TWr.forEach(t),Ueo=r(Xx," (DeBERTa-v2 model)"),Xx.forEach(t),Jeo=i(S),Wn=n(S,"LI",{});var zx=s(Wn);wte=n(zx,"STRONG",{});var MWr=s(wte);Yeo=r(MWr,"distilbert"),MWr.forEach(t),Keo=r(zx," \u2014 "),CR=n(zx,"A",{href:!0});var EWr=s(CR);Zeo=r(EWr,"DistilBertTokenizer"),EWr.forEach(t),eoo=r(zx," or "),wR=n(zx,"A",{href:!0});var CWr=s(wR);ooo=r(CWr,"DistilBertTokenizerFast"),CWr.forEach(t),roo=r(zx," (DistilBERT model)"),zx.forEach(t),too=i(S),Qn=n(S,"LI",{});var Wx=s(Qn);Ate=n(Wx,"STRONG",{});var wWr=s(Ate);aoo=r(wWr,"dpr"),wWr.forEach(t),noo=r(Wx," \u2014 "),AR=n(Wx,"A",{href:!0});var AWr=s(AR);soo=r(AWr,"DPRQuestionEncoderTokenizer"),AWr.forEach(t),loo=r(Wx," or "),yR=n(Wx,"A",{href:!0});var yWr=s(yR);ioo=r(yWr,"DPRQuestionEncoderTokenizerFast"),yWr.forEach(t),doo=r(Wx," (DPR model)"),Wx.forEach(t),coo=i(S),Hn=n(S,"LI",{});var Qx=s(Hn);yte=n(Qx,"STRONG",{});var LWr=s(yte);foo=r(LWr,"electra"),LWr.forEach(t),moo=r(Qx," \u2014 "),LR=n(Qx,"A",{href:!0});var xWr=s(LR);goo=r(xWr,"ElectraTokenizer"),xWr.forEach(t),hoo=r(Qx," or "),xR=n(Qx,"A",{href:!0});var $Wr=s(xR);poo=r($Wr,"ElectraTokenizerFast"),$Wr.forEach(t),_oo=r(Qx," (ELECTRA model)"),Qx.forEach(t),uoo=i(S),kg=n(S,"LI",{});var Xwe=s(kg);Lte=n(Xwe,"STRONG",{});var kWr=s(Lte);boo=r(kWr,"flaubert"),kWr.forEach(t),voo=r(Xwe," \u2014 "),$R=n(Xwe,"A",{href:!0});var SWr=s($R);Foo=r(SWr,"FlaubertTokenizer"),SWr.forEach(t),Too=r(Xwe," (FlauBERT model)"),Xwe.forEach(t),Moo=i(S),Un=n(S,"LI",{});var Hx=s(Un);xte=n(Hx,"STRONG",{});var RWr=s(xte);Eoo=r(RWr,"fnet"),RWr.forEach(t),Coo=r(Hx," \u2014 "),kR=n(Hx,"A",{href:!0});var PWr=s(kR);woo=r(PWr,"FNetTokenizer"),PWr.forEach(t),Aoo=r(Hx," or "),SR=n(Hx,"A",{href:!0});var BWr=s(SR);yoo=r(BWr,"FNetTokenizerFast"),BWr.forEach(t),Loo=r(Hx," (FNet model)"),Hx.forEach(t),xoo=i(S),Sg=n(S,"LI",{});var zwe=s(Sg);$te=n(zwe,"STRONG",{});var IWr=s($te);$oo=r(IWr,"fsmt"),IWr.forEach(t),koo=r(zwe," \u2014 "),RR=n(zwe,"A",{href:!0});var qWr=s(RR);Soo=r(qWr,"FSMTTokenizer"),qWr.forEach(t),Roo=r(zwe," (FairSeq Machine-Translation model)"),zwe.forEach(t),Poo=i(S),Jn=n(S,"LI",{});var Ux=s(Jn);kte=n(Ux,"STRONG",{});var NWr=s(kte);Boo=r(NWr,"funnel"),NWr.forEach(t),Ioo=r(Ux," \u2014 "),PR=n(Ux,"A",{href:!0});var jWr=s(PR);qoo=r(jWr,"FunnelTokenizer"),jWr.forEach(t),Noo=r(Ux," or "),BR=n(Ux,"A",{href:!0});var DWr=s(BR);joo=r(DWr,"FunnelTokenizerFast"),DWr.forEach(t),Doo=r(Ux," (Funnel Transformer model)"),Ux.forEach(t),Goo=i(S),Yn=n(S,"LI",{});var Jx=s(Yn);Ste=n(Jx,"STRONG",{});var GWr=s(Ste);Ooo=r(GWr,"gpt2"),GWr.forEach(t),Voo=r(Jx," \u2014 "),IR=n(Jx,"A",{href:!0});var OWr=s(IR);Xoo=r(OWr,"GPT2Tokenizer"),OWr.forEach(t),zoo=r(Jx," or "),qR=n(Jx,"A",{href:!0});var VWr=s(qR);Woo=r(VWr,"GPT2TokenizerFast"),VWr.forEach(t),Qoo=r(Jx," (OpenAI GPT-2 model)"),Jx.forEach(t),Hoo=i(S),Kn=n(S,"LI",{});var Yx=s(Kn);Rte=n(Yx,"STRONG",{});var XWr=s(Rte);Uoo=r(XWr,"gpt_neo"),XWr.forEach(t),Joo=r(Yx," \u2014 "),NR=n(Yx,"A",{href:!0});var zWr=s(NR);Yoo=r(zWr,"GPT2Tokenizer"),zWr.forEach(t),Koo=r(Yx," or "),jR=n(Yx,"A",{href:!0});var WWr=s(jR);Zoo=r(WWr,"GPT2TokenizerFast"),WWr.forEach(t),ero=r(Yx," (GPT Neo model)"),Yx.forEach(t),oro=i(S),Zn=n(S,"LI",{});var Kx=s(Zn);Pte=n(Kx,"STRONG",{});var QWr=s(Pte);rro=r(QWr,"gptj"),QWr.forEach(t),tro=r(Kx," \u2014 "),DR=n(Kx,"A",{href:!0});var HWr=s(DR);aro=r(HWr,"GPT2Tokenizer"),HWr.forEach(t),nro=r(Kx," or "),GR=n(Kx,"A",{href:!0});var UWr=s(GR);sro=r(UWr,"GPT2TokenizerFast"),UWr.forEach(t),lro=r(Kx," (GPT-J model)"),Kx.forEach(t),iro=i(S),es=n(S,"LI",{});var Zx=s(es);Bte=n(Zx,"STRONG",{});var JWr=s(Bte);dro=r(JWr,"herbert"),JWr.forEach(t),cro=r(Zx," \u2014 "),OR=n(Zx,"A",{href:!0});var YWr=s(OR);fro=r(YWr,"HerbertTokenizer"),YWr.forEach(t),mro=r(Zx," or "),VR=n(Zx,"A",{href:!0});var KWr=s(VR);gro=r(KWr,"HerbertTokenizerFast"),KWr.forEach(t),hro=r(Zx," (HerBERT model)"),Zx.forEach(t),pro=i(S),Rg=n(S,"LI",{});var Wwe=s(Rg);Ite=n(Wwe,"STRONG",{});var ZWr=s(Ite);_ro=r(ZWr,"hubert"),ZWr.forEach(t),uro=r(Wwe," \u2014 "),XR=n(Wwe,"A",{href:!0});var eQr=s(XR);bro=r(eQr,"Wav2Vec2CTCTokenizer"),eQr.forEach(t),vro=r(Wwe," (Hubert model)"),Wwe.forEach(t),Fro=i(S),os=n(S,"LI",{});var e$=s(os);qte=n(e$,"STRONG",{});var oQr=s(qte);Tro=r(oQr,"ibert"),oQr.forEach(t),Mro=r(e$," \u2014 "),zR=n(e$,"A",{href:!0});var rQr=s(zR);Ero=r(rQr,"RobertaTokenizer"),rQr.forEach(t),Cro=r(e$," or "),WR=n(e$,"A",{href:!0});var tQr=s(WR);wro=r(tQr,"RobertaTokenizerFast"),tQr.forEach(t),Aro=r(e$," (I-BERT model)"),e$.forEach(t),yro=i(S),rs=n(S,"LI",{});var o$=s(rs);Nte=n(o$,"STRONG",{});var aQr=s(Nte);Lro=r(aQr,"layoutlm"),aQr.forEach(t),xro=r(o$," \u2014 "),QR=n(o$,"A",{href:!0});var nQr=s(QR);$ro=r(nQr,"LayoutLMTokenizer"),nQr.forEach(t),kro=r(o$," or "),HR=n(o$,"A",{href:!0});var sQr=s(HR);Sro=r(sQr,"LayoutLMTokenizerFast"),sQr.forEach(t),Rro=r(o$," (LayoutLM model)"),o$.forEach(t),Pro=i(S),ts=n(S,"LI",{});var r$=s(ts);jte=n(r$,"STRONG",{});var lQr=s(jte);Bro=r(lQr,"layoutlmv2"),lQr.forEach(t),Iro=r(r$," \u2014 "),UR=n(r$,"A",{href:!0});var iQr=s(UR);qro=r(iQr,"LayoutLMv2Tokenizer"),iQr.forEach(t),Nro=r(r$," or "),JR=n(r$,"A",{href:!0});var dQr=s(JR);jro=r(dQr,"LayoutLMv2TokenizerFast"),dQr.forEach(t),Dro=r(r$," (LayoutLMv2 model)"),r$.forEach(t),Gro=i(S),as=n(S,"LI",{});var t$=s(as);Dte=n(t$,"STRONG",{});var cQr=s(Dte);Oro=r(cQr,"layoutxlm"),cQr.forEach(t),Vro=r(t$," \u2014 "),YR=n(t$,"A",{href:!0});var fQr=s(YR);Xro=r(fQr,"LayoutXLMTokenizer"),fQr.forEach(t),zro=r(t$," or "),KR=n(t$,"A",{href:!0});var mQr=s(KR);Wro=r(mQr,"LayoutXLMTokenizerFast"),mQr.forEach(t),Qro=r(t$," (LayoutXLM model)"),t$.forEach(t),Hro=i(S),ns=n(S,"LI",{});var a$=s(ns);Gte=n(a$,"STRONG",{});var gQr=s(Gte);Uro=r(gQr,"led"),gQr.forEach(t),Jro=r(a$," \u2014 "),ZR=n(a$,"A",{href:!0});var hQr=s(ZR);Yro=r(hQr,"LEDTokenizer"),hQr.forEach(t),Kro=r(a$," or "),eP=n(a$,"A",{href:!0});var pQr=s(eP);Zro=r(pQr,"LEDTokenizerFast"),pQr.forEach(t),eto=r(a$," (LED model)"),a$.forEach(t),oto=i(S),ss=n(S,"LI",{});var n$=s(ss);Ote=n(n$,"STRONG",{});var _Qr=s(Ote);rto=r(_Qr,"longformer"),_Qr.forEach(t),tto=r(n$," \u2014 "),oP=n(n$,"A",{href:!0});var uQr=s(oP);ato=r(uQr,"LongformerTokenizer"),uQr.forEach(t),nto=r(n$," or "),rP=n(n$,"A",{href:!0});var bQr=s(rP);sto=r(bQr,"LongformerTokenizerFast"),bQr.forEach(t),lto=r(n$," (Longformer model)"),n$.forEach(t),ito=i(S),Pg=n(S,"LI",{});var Qwe=s(Pg);Vte=n(Qwe,"STRONG",{});var vQr=s(Vte);dto=r(vQr,"luke"),vQr.forEach(t),cto=r(Qwe," \u2014 "),tP=n(Qwe,"A",{href:!0});var FQr=s(tP);fto=r(FQr,"LukeTokenizer"),FQr.forEach(t),mto=r(Qwe," (LUKE model)"),Qwe.forEach(t),gto=i(S),ls=n(S,"LI",{});var s$=s(ls);Xte=n(s$,"STRONG",{});var TQr=s(Xte);hto=r(TQr,"lxmert"),TQr.forEach(t),pto=r(s$," \u2014 "),aP=n(s$,"A",{href:!0});var MQr=s(aP);_to=r(MQr,"LxmertTokenizer"),MQr.forEach(t),uto=r(s$," or "),nP=n(s$,"A",{href:!0});var EQr=s(nP);bto=r(EQr,"LxmertTokenizerFast"),EQr.forEach(t),vto=r(s$," (LXMERT model)"),s$.forEach(t),Fto=i(S),Bg=n(S,"LI",{});var Hwe=s(Bg);zte=n(Hwe,"STRONG",{});var CQr=s(zte);Tto=r(CQr,"m2m_100"),CQr.forEach(t),Mto=r(Hwe," \u2014 "),sP=n(Hwe,"A",{href:!0});var wQr=s(sP);Eto=r(wQr,"M2M100Tokenizer"),wQr.forEach(t),Cto=r(Hwe," (M2M100 model)"),Hwe.forEach(t),wto=i(S),Ig=n(S,"LI",{});var Uwe=s(Ig);Wte=n(Uwe,"STRONG",{});var AQr=s(Wte);Ato=r(AQr,"marian"),AQr.forEach(t),yto=r(Uwe," \u2014 "),lP=n(Uwe,"A",{href:!0});var yQr=s(lP);Lto=r(yQr,"MarianTokenizer"),yQr.forEach(t),xto=r(Uwe," (Marian model)"),Uwe.forEach(t),$to=i(S),is=n(S,"LI",{});var l$=s(is);Qte=n(l$,"STRONG",{});var LQr=s(Qte);kto=r(LQr,"mbart"),LQr.forEach(t),Sto=r(l$," \u2014 "),iP=n(l$,"A",{href:!0});var xQr=s(iP);Rto=r(xQr,"MBartTokenizer"),xQr.forEach(t),Pto=r(l$," or "),dP=n(l$,"A",{href:!0});var $Qr=s(dP);Bto=r($Qr,"MBartTokenizerFast"),$Qr.forEach(t),Ito=r(l$," (mBART model)"),l$.forEach(t),qto=i(S),ds=n(S,"LI",{});var i$=s(ds);Hte=n(i$,"STRONG",{});var kQr=s(Hte);Nto=r(kQr,"mbart50"),kQr.forEach(t),jto=r(i$," \u2014 "),cP=n(i$,"A",{href:!0});var SQr=s(cP);Dto=r(SQr,"MBart50Tokenizer"),SQr.forEach(t),Gto=r(i$," or "),fP=n(i$,"A",{href:!0});var RQr=s(fP);Oto=r(RQr,"MBart50TokenizerFast"),RQr.forEach(t),Vto=r(i$," (mBART-50 model)"),i$.forEach(t),Xto=i(S),cs=n(S,"LI",{});var d$=s(cs);Ute=n(d$,"STRONG",{});var PQr=s(Ute);zto=r(PQr,"megatron-bert"),PQr.forEach(t),Wto=r(d$," \u2014 "),mP=n(d$,"A",{href:!0});var BQr=s(mP);Qto=r(BQr,"BertTokenizer"),BQr.forEach(t),Hto=r(d$," or "),gP=n(d$,"A",{href:!0});var IQr=s(gP);Uto=r(IQr,"BertTokenizerFast"),IQr.forEach(t),Jto=r(d$," (MegatronBert model)"),d$.forEach(t),Yto=i(S),qg=n(S,"LI",{});var Jwe=s(qg);Jte=n(Jwe,"STRONG",{});var qQr=s(Jte);Kto=r(qQr,"mluke"),qQr.forEach(t),Zto=r(Jwe," \u2014 "),hP=n(Jwe,"A",{href:!0});var NQr=s(hP);eao=r(NQr,"MLukeTokenizer"),NQr.forEach(t),oao=r(Jwe," (mLUKE model)"),Jwe.forEach(t),rao=i(S),fs=n(S,"LI",{});var c$=s(fs);Yte=n(c$,"STRONG",{});var jQr=s(Yte);tao=r(jQr,"mobilebert"),jQr.forEach(t),aao=r(c$," \u2014 "),pP=n(c$,"A",{href:!0});var DQr=s(pP);nao=r(DQr,"MobileBertTokenizer"),DQr.forEach(t),sao=r(c$," or "),_P=n(c$,"A",{href:!0});var GQr=s(_P);lao=r(GQr,"MobileBertTokenizerFast"),GQr.forEach(t),iao=r(c$," (MobileBERT model)"),c$.forEach(t),dao=i(S),ms=n(S,"LI",{});var f$=s(ms);Kte=n(f$,"STRONG",{});var OQr=s(Kte);cao=r(OQr,"mpnet"),OQr.forEach(t),fao=r(f$," \u2014 "),uP=n(f$,"A",{href:!0});var VQr=s(uP);mao=r(VQr,"MPNetTokenizer"),VQr.forEach(t),gao=r(f$," or "),bP=n(f$,"A",{href:!0});var XQr=s(bP);hao=r(XQr,"MPNetTokenizerFast"),XQr.forEach(t),pao=r(f$," (MPNet model)"),f$.forEach(t),_ao=i(S),gs=n(S,"LI",{});var m$=s(gs);Zte=n(m$,"STRONG",{});var zQr=s(Zte);uao=r(zQr,"mt5"),zQr.forEach(t),bao=r(m$," \u2014 "),vP=n(m$,"A",{href:!0});var WQr=s(vP);vao=r(WQr,"MT5Tokenizer"),WQr.forEach(t),Fao=r(m$," or "),FP=n(m$,"A",{href:!0});var QQr=s(FP);Tao=r(QQr,"MT5TokenizerFast"),QQr.forEach(t),Mao=r(m$," (mT5 model)"),m$.forEach(t),Eao=i(S),hs=n(S,"LI",{});var g$=s(hs);eae=n(g$,"STRONG",{});var HQr=s(eae);Cao=r(HQr,"nystromformer"),HQr.forEach(t),wao=r(g$," \u2014 "),TP=n(g$,"A",{href:!0});var UQr=s(TP);Aao=r(UQr,"AlbertTokenizer"),UQr.forEach(t),yao=r(g$," or "),MP=n(g$,"A",{href:!0});var JQr=s(MP);Lao=r(JQr,"AlbertTokenizerFast"),JQr.forEach(t),xao=r(g$," (Nystromformer model)"),g$.forEach(t),$ao=i(S),ps=n(S,"LI",{});var h$=s(ps);oae=n(h$,"STRONG",{});var YQr=s(oae);kao=r(YQr,"openai-gpt"),YQr.forEach(t),Sao=r(h$," \u2014 "),EP=n(h$,"A",{href:!0});var KQr=s(EP);Rao=r(KQr,"OpenAIGPTTokenizer"),KQr.forEach(t),Pao=r(h$," or "),CP=n(h$,"A",{href:!0});var ZQr=s(CP);Bao=r(ZQr,"OpenAIGPTTokenizerFast"),ZQr.forEach(t),Iao=r(h$," (OpenAI GPT model)"),h$.forEach(t),qao=i(S),Ng=n(S,"LI",{});var Ywe=s(Ng);rae=n(Ywe,"STRONG",{});var eHr=s(rae);Nao=r(eHr,"opt"),eHr.forEach(t),jao=r(Ywe," \u2014 "),wP=n(Ywe,"A",{href:!0});var oHr=s(wP);Dao=r(oHr,"GPT2Tokenizer"),oHr.forEach(t),Gao=r(Ywe," (OPT model)"),Ywe.forEach(t),Oao=i(S),_s=n(S,"LI",{});var p$=s(_s);tae=n(p$,"STRONG",{});var rHr=s(tae);Vao=r(rHr,"pegasus"),rHr.forEach(t),Xao=r(p$," \u2014 "),AP=n(p$,"A",{href:!0});var tHr=s(AP);zao=r(tHr,"PegasusTokenizer"),tHr.forEach(t),Wao=r(p$," or "),yP=n(p$,"A",{href:!0});var aHr=s(yP);Qao=r(aHr,"PegasusTokenizerFast"),aHr.forEach(t),Hao=r(p$," (Pegasus model)"),p$.forEach(t),Uao=i(S),jg=n(S,"LI",{});var Kwe=s(jg);aae=n(Kwe,"STRONG",{});var nHr=s(aae);Jao=r(nHr,"perceiver"),nHr.forEach(t),Yao=r(Kwe," \u2014 "),LP=n(Kwe,"A",{href:!0});var sHr=s(LP);Kao=r(sHr,"PerceiverTokenizer"),sHr.forEach(t),Zao=r(Kwe," (Perceiver model)"),Kwe.forEach(t),eno=i(S),Dg=n(S,"LI",{});var Zwe=s(Dg);nae=n(Zwe,"STRONG",{});var lHr=s(nae);ono=r(lHr,"phobert"),lHr.forEach(t),rno=r(Zwe," \u2014 "),xP=n(Zwe,"A",{href:!0});var iHr=s(xP);tno=r(iHr,"PhobertTokenizer"),iHr.forEach(t),ano=r(Zwe," (PhoBERT model)"),Zwe.forEach(t),nno=i(S),Gg=n(S,"LI",{});var e0e=s(Gg);sae=n(e0e,"STRONG",{});var dHr=s(sae);sno=r(dHr,"plbart"),dHr.forEach(t),lno=r(e0e," \u2014 "),$P=n(e0e,"A",{href:!0});var cHr=s($P);ino=r(cHr,"PLBartTokenizer"),cHr.forEach(t),dno=r(e0e," (PLBart model)"),e0e.forEach(t),cno=i(S),Og=n(S,"LI",{});var o0e=s(Og);lae=n(o0e,"STRONG",{});var fHr=s(lae);fno=r(fHr,"prophetnet"),fHr.forEach(t),mno=r(o0e," \u2014 "),kP=n(o0e,"A",{href:!0});var mHr=s(kP);gno=r(mHr,"ProphetNetTokenizer"),mHr.forEach(t),hno=r(o0e," (ProphetNet model)"),o0e.forEach(t),pno=i(S),us=n(S,"LI",{});var _$=s(us);iae=n(_$,"STRONG",{});var gHr=s(iae);_no=r(gHr,"qdqbert"),gHr.forEach(t),uno=r(_$," \u2014 "),SP=n(_$,"A",{href:!0});var hHr=s(SP);bno=r(hHr,"BertTokenizer"),hHr.forEach(t),vno=r(_$," or "),RP=n(_$,"A",{href:!0});var pHr=s(RP);Fno=r(pHr,"BertTokenizerFast"),pHr.forEach(t),Tno=r(_$," (QDQBert model)"),_$.forEach(t),Mno=i(S),Vg=n(S,"LI",{});var r0e=s(Vg);dae=n(r0e,"STRONG",{});var _Hr=s(dae);Eno=r(_Hr,"rag"),_Hr.forEach(t),Cno=r(r0e," \u2014 "),PP=n(r0e,"A",{href:!0});var uHr=s(PP);wno=r(uHr,"RagTokenizer"),uHr.forEach(t),Ano=r(r0e," (RAG model)"),r0e.forEach(t),yno=i(S),bs=n(S,"LI",{});var u$=s(bs);cae=n(u$,"STRONG",{});var bHr=s(cae);Lno=r(bHr,"realm"),bHr.forEach(t),xno=r(u$," \u2014 "),BP=n(u$,"A",{href:!0});var vHr=s(BP);$no=r(vHr,"RealmTokenizer"),vHr.forEach(t),kno=r(u$," or "),IP=n(u$,"A",{href:!0});var FHr=s(IP);Sno=r(FHr,"RealmTokenizerFast"),FHr.forEach(t),Rno=r(u$," (Realm model)"),u$.forEach(t),Pno=i(S),vs=n(S,"LI",{});var b$=s(vs);fae=n(b$,"STRONG",{});var THr=s(fae);Bno=r(THr,"reformer"),THr.forEach(t),Ino=r(b$," \u2014 "),qP=n(b$,"A",{href:!0});var MHr=s(qP);qno=r(MHr,"ReformerTokenizer"),MHr.forEach(t),Nno=r(b$," or "),NP=n(b$,"A",{href:!0});var EHr=s(NP);jno=r(EHr,"ReformerTokenizerFast"),EHr.forEach(t),Dno=r(b$," (Reformer model)"),b$.forEach(t),Gno=i(S),Fs=n(S,"LI",{});var v$=s(Fs);mae=n(v$,"STRONG",{});var CHr=s(mae);Ono=r(CHr,"rembert"),CHr.forEach(t),Vno=r(v$," \u2014 "),jP=n(v$,"A",{href:!0});var wHr=s(jP);Xno=r(wHr,"RemBertTokenizer"),wHr.forEach(t),zno=r(v$," or "),DP=n(v$,"A",{href:!0});var AHr=s(DP);Wno=r(AHr,"RemBertTokenizerFast"),AHr.forEach(t),Qno=r(v$," (RemBERT model)"),v$.forEach(t),Hno=i(S),Ts=n(S,"LI",{});var F$=s(Ts);gae=n(F$,"STRONG",{});var yHr=s(gae);Uno=r(yHr,"retribert"),yHr.forEach(t),Jno=r(F$," \u2014 "),GP=n(F$,"A",{href:!0});var LHr=s(GP);Yno=r(LHr,"RetriBertTokenizer"),LHr.forEach(t),Kno=r(F$," or "),OP=n(F$,"A",{href:!0});var xHr=s(OP);Zno=r(xHr,"RetriBertTokenizerFast"),xHr.forEach(t),eso=r(F$," (RetriBERT model)"),F$.forEach(t),oso=i(S),Ms=n(S,"LI",{});var T$=s(Ms);hae=n(T$,"STRONG",{});var $Hr=s(hae);rso=r($Hr,"roberta"),$Hr.forEach(t),tso=r(T$," \u2014 "),VP=n(T$,"A",{href:!0});var kHr=s(VP);aso=r(kHr,"RobertaTokenizer"),kHr.forEach(t),nso=r(T$," or "),XP=n(T$,"A",{href:!0});var SHr=s(XP);sso=r(SHr,"RobertaTokenizerFast"),SHr.forEach(t),lso=r(T$," (RoBERTa model)"),T$.forEach(t),iso=i(S),Es=n(S,"LI",{});var M$=s(Es);pae=n(M$,"STRONG",{});var RHr=s(pae);dso=r(RHr,"roformer"),RHr.forEach(t),cso=r(M$," \u2014 "),zP=n(M$,"A",{href:!0});var PHr=s(zP);fso=r(PHr,"RoFormerTokenizer"),PHr.forEach(t),mso=r(M$," or "),WP=n(M$,"A",{href:!0});var BHr=s(WP);gso=r(BHr,"RoFormerTokenizerFast"),BHr.forEach(t),hso=r(M$," (RoFormer model)"),M$.forEach(t),pso=i(S),Xg=n(S,"LI",{});var t0e=s(Xg);_ae=n(t0e,"STRONG",{});var IHr=s(_ae);_so=r(IHr,"speech_to_text"),IHr.forEach(t),uso=r(t0e," \u2014 "),QP=n(t0e,"A",{href:!0});var qHr=s(QP);bso=r(qHr,"Speech2TextTokenizer"),qHr.forEach(t),vso=r(t0e," (Speech2Text model)"),t0e.forEach(t),Fso=i(S),zg=n(S,"LI",{});var a0e=s(zg);uae=n(a0e,"STRONG",{});var NHr=s(uae);Tso=r(NHr,"speech_to_text_2"),NHr.forEach(t),Mso=r(a0e," \u2014 "),HP=n(a0e,"A",{href:!0});var jHr=s(HP);Eso=r(jHr,"Speech2Text2Tokenizer"),jHr.forEach(t),Cso=r(a0e," (Speech2Text2 model)"),a0e.forEach(t),wso=i(S),Cs=n(S,"LI",{});var E$=s(Cs);bae=n(E$,"STRONG",{});var DHr=s(bae);Aso=r(DHr,"splinter"),DHr.forEach(t),yso=r(E$," \u2014 "),UP=n(E$,"A",{href:!0});var GHr=s(UP);Lso=r(GHr,"SplinterTokenizer"),GHr.forEach(t),xso=r(E$," or "),JP=n(E$,"A",{href:!0});var OHr=s(JP);$so=r(OHr,"SplinterTokenizerFast"),OHr.forEach(t),kso=r(E$," (Splinter model)"),E$.forEach(t),Sso=i(S),ws=n(S,"LI",{});var C$=s(ws);vae=n(C$,"STRONG",{});var VHr=s(vae);Rso=r(VHr,"squeezebert"),VHr.forEach(t),Pso=r(C$," \u2014 "),YP=n(C$,"A",{href:!0});var XHr=s(YP);Bso=r(XHr,"SqueezeBertTokenizer"),XHr.forEach(t),Iso=r(C$," or "),KP=n(C$,"A",{href:!0});var zHr=s(KP);qso=r(zHr,"SqueezeBertTokenizerFast"),zHr.forEach(t),Nso=r(C$," (SqueezeBERT model)"),C$.forEach(t),jso=i(S),As=n(S,"LI",{});var w$=s(As);Fae=n(w$,"STRONG",{});var WHr=s(Fae);Dso=r(WHr,"t5"),WHr.forEach(t),Gso=r(w$," \u2014 "),ZP=n(w$,"A",{href:!0});var QHr=s(ZP);Oso=r(QHr,"T5Tokenizer"),QHr.forEach(t),Vso=r(w$," or "),eB=n(w$,"A",{href:!0});var HHr=s(eB);Xso=r(HHr,"T5TokenizerFast"),HHr.forEach(t),zso=r(w$," (T5 model)"),w$.forEach(t),Wso=i(S),Wg=n(S,"LI",{});var n0e=s(Wg);Tae=n(n0e,"STRONG",{});var UHr=s(Tae);Qso=r(UHr,"tapas"),UHr.forEach(t),Hso=r(n0e," \u2014 "),oB=n(n0e,"A",{href:!0});var JHr=s(oB);Uso=r(JHr,"TapasTokenizer"),JHr.forEach(t),Jso=r(n0e," (TAPAS model)"),n0e.forEach(t),Yso=i(S),Qg=n(S,"LI",{});var s0e=s(Qg);Mae=n(s0e,"STRONG",{});var YHr=s(Mae);Kso=r(YHr,"tapex"),YHr.forEach(t),Zso=r(s0e," \u2014 "),rB=n(s0e,"A",{href:!0});var KHr=s(rB);elo=r(KHr,"TapexTokenizer"),KHr.forEach(t),olo=r(s0e," (TAPEX model)"),s0e.forEach(t),rlo=i(S),Hg=n(S,"LI",{});var l0e=s(Hg);Eae=n(l0e,"STRONG",{});var ZHr=s(Eae);tlo=r(ZHr,"transfo-xl"),ZHr.forEach(t),alo=r(l0e," \u2014 "),tB=n(l0e,"A",{href:!0});var eUr=s(tB);nlo=r(eUr,"TransfoXLTokenizer"),eUr.forEach(t),slo=r(l0e," (Transformer-XL model)"),l0e.forEach(t),llo=i(S),ys=n(S,"LI",{});var A$=s(ys);Cae=n(A$,"STRONG",{});var oUr=s(Cae);ilo=r(oUr,"visual_bert"),oUr.forEach(t),dlo=r(A$," \u2014 "),aB=n(A$,"A",{href:!0});var rUr=s(aB);clo=r(rUr,"BertTokenizer"),rUr.forEach(t),flo=r(A$," or "),nB=n(A$,"A",{href:!0});var tUr=s(nB);mlo=r(tUr,"BertTokenizerFast"),tUr.forEach(t),glo=r(A$," (VisualBert model)"),A$.forEach(t),hlo=i(S),Ug=n(S,"LI",{});var i0e=s(Ug);wae=n(i0e,"STRONG",{});var aUr=s(wae);plo=r(aUr,"wav2vec2"),aUr.forEach(t),_lo=r(i0e," \u2014 "),sB=n(i0e,"A",{href:!0});var nUr=s(sB);ulo=r(nUr,"Wav2Vec2CTCTokenizer"),nUr.forEach(t),blo=r(i0e," (Wav2Vec2 model)"),i0e.forEach(t),vlo=i(S),Jg=n(S,"LI",{});var d0e=s(Jg);Aae=n(d0e,"STRONG",{});var sUr=s(Aae);Flo=r(sUr,"wav2vec2-conformer"),sUr.forEach(t),Tlo=r(d0e," \u2014 "),lB=n(d0e,"A",{href:!0});var lUr=s(lB);Mlo=r(lUr,"Wav2Vec2CTCTokenizer"),lUr.forEach(t),Elo=r(d0e," (Wav2Vec2-Conformer model)"),d0e.forEach(t),Clo=i(S),Yg=n(S,"LI",{});var c0e=s(Yg);yae=n(c0e,"STRONG",{});var iUr=s(yae);wlo=r(iUr,"wav2vec2_phoneme"),iUr.forEach(t),Alo=r(c0e," \u2014 "),iB=n(c0e,"A",{href:!0});var dUr=s(iB);ylo=r(dUr,"Wav2Vec2PhonemeCTCTokenizer"),dUr.forEach(t),Llo=r(c0e," (Wav2Vec2Phoneme model)"),c0e.forEach(t),xlo=i(S),Ls=n(S,"LI",{});var y$=s(Ls);Lae=n(y$,"STRONG",{});var cUr=s(Lae);$lo=r(cUr,"xglm"),cUr.forEach(t),klo=r(y$," \u2014 "),dB=n(y$,"A",{href:!0});var fUr=s(dB);Slo=r(fUr,"XGLMTokenizer"),fUr.forEach(t),Rlo=r(y$," or "),cB=n(y$,"A",{href:!0});var mUr=s(cB);Plo=r(mUr,"XGLMTokenizerFast"),mUr.forEach(t),Blo=r(y$," (XGLM model)"),y$.forEach(t),Ilo=i(S),Kg=n(S,"LI",{});var f0e=s(Kg);xae=n(f0e,"STRONG",{});var gUr=s(xae);qlo=r(gUr,"xlm"),gUr.forEach(t),Nlo=r(f0e," \u2014 "),fB=n(f0e,"A",{href:!0});var hUr=s(fB);jlo=r(hUr,"XLMTokenizer"),hUr.forEach(t),Dlo=r(f0e," (XLM model)"),f0e.forEach(t),Glo=i(S),Zg=n(S,"LI",{});var m0e=s(Zg);$ae=n(m0e,"STRONG",{});var pUr=s($ae);Olo=r(pUr,"xlm-prophetnet"),pUr.forEach(t),Vlo=r(m0e," \u2014 "),mB=n(m0e,"A",{href:!0});var _Ur=s(mB);Xlo=r(_Ur,"XLMProphetNetTokenizer"),_Ur.forEach(t),zlo=r(m0e," (XLMProphetNet model)"),m0e.forEach(t),Wlo=i(S),xs=n(S,"LI",{});var L$=s(xs);kae=n(L$,"STRONG",{});var uUr=s(kae);Qlo=r(uUr,"xlm-roberta"),uUr.forEach(t),Hlo=r(L$," \u2014 "),gB=n(L$,"A",{href:!0});var bUr=s(gB);Ulo=r(bUr,"XLMRobertaTokenizer"),bUr.forEach(t),Jlo=r(L$," or "),hB=n(L$,"A",{href:!0});var vUr=s(hB);Ylo=r(vUr,"XLMRobertaTokenizerFast"),vUr.forEach(t),Klo=r(L$," (XLM-RoBERTa model)"),L$.forEach(t),Zlo=i(S),$s=n(S,"LI",{});var x$=s($s);Sae=n(x$,"STRONG",{});var FUr=s(Sae);eio=r(FUr,"xlm-roberta-xl"),FUr.forEach(t),oio=r(x$," \u2014 "),pB=n(x$,"A",{href:!0});var TUr=s(pB);rio=r(TUr,"RobertaTokenizer"),TUr.forEach(t),tio=r(x$," or "),_B=n(x$,"A",{href:!0});var MUr=s(_B);aio=r(MUr,"RobertaTokenizerFast"),MUr.forEach(t),nio=r(x$," (XLM-RoBERTa-XL model)"),x$.forEach(t),sio=i(S),ks=n(S,"LI",{});var $$=s(ks);Rae=n($$,"STRONG",{});var EUr=s(Rae);lio=r(EUr,"xlnet"),EUr.forEach(t),iio=r($$," \u2014 "),uB=n($$,"A",{href:!0});var CUr=s(uB);dio=r(CUr,"XLNetTokenizer"),CUr.forEach(t),cio=r($$," or "),bB=n($$,"A",{href:!0});var wUr=s(bB);fio=r(wUr,"XLNetTokenizerFast"),wUr.forEach(t),mio=r($$," (XLNet model)"),$$.forEach(t),gio=i(S),Ss=n(S,"LI",{});var k$=s(Ss);Pae=n(k$,"STRONG",{});var AUr=s(Pae);hio=r(AUr,"yoso"),AUr.forEach(t),pio=r(k$," \u2014 "),vB=n(k$,"A",{href:!0});var yUr=s(vB);_io=r(yUr,"AlbertTokenizer"),yUr.forEach(t),uio=r(k$," or "),FB=n(k$,"A",{href:!0});var LUr=s(FB);bio=r(LUr,"AlbertTokenizerFast"),LUr.forEach(t),vio=r(k$," (YOSO model)"),k$.forEach(t),S.forEach(t),Fio=i(qs),T(eh.$$.fragment,qs),qs.forEach(t),Tio=i(Is),oh=n(Is,"DIV",{class:!0});var Eje=s(oh);T(k6.$$.fragment,Eje),Mio=i(Eje),Bae=n(Eje,"P",{});var xUr=s(Bae);Eio=r(xUr,"Register a new tokenizer in this mapping."),xUr.forEach(t),Eje.forEach(t),Is.forEach(t),Cqe=i(f),Ti=n(f,"H2",{class:!0});var Cje=s(Ti);rh=n(Cje,"A",{id:!0,class:!0,href:!0});var $Ur=s(rh);Iae=n($Ur,"SPAN",{});var kUr=s(Iae);T(S6.$$.fragment,kUr),kUr.forEach(t),$Ur.forEach(t),Cio=i(Cje),qae=n(Cje,"SPAN",{});var SUr=s(qae);wio=r(SUr,"AutoFeatureExtractor"),SUr.forEach(t),Cje.forEach(t),wqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(R6.$$.fragment,Ns),Aio=i(Ns),P6=n(Ns,"P",{});var wje=s(P6);yio=r(wje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TB=n(wje,"A",{href:!0});var RUr=s(TB);Lio=r(RUr,"AutoFeatureExtractor.from_pretrained()"),RUr.forEach(t),xio=r(wje," class method."),wje.forEach(t),$io=i(Ns),B6=n(Ns,"P",{});var Aje=s(B6);kio=r(Aje,"This class cannot be instantiated directly using "),Nae=n(Aje,"CODE",{});var PUr=s(Nae);Sio=r(PUr,"__init__()"),PUr.forEach(t),Rio=r(Aje," (throws an error)."),Aje.forEach(t),Pio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(I6.$$.fragment,Zt),Bio=i(Zt),jae=n(Zt,"P",{});var BUr=s(jae);Iio=r(BUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),BUr.forEach(t),qio=i(Zt),ya=n(Zt,"P",{});var T0=s(ya);Nio=r(T0,"The feature extractor class to instantiate is selected based on the "),Dae=n(T0,"CODE",{});var IUr=s(Dae);jio=r(IUr,"model_type"),IUr.forEach(t),Dio=r(T0,` property of the config object
(either passed as an argument or loaded from `),Gae=n(T0,"CODE",{});var qUr=s(Gae);Gio=r(qUr,"pretrained_model_name_or_path"),qUr.forEach(t),Oio=r(T0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oae=n(T0,"CODE",{});var NUr=s(Oae);Vio=r(NUr,"pretrained_model_name_or_path"),NUr.forEach(t),Xio=r(T0,":"),T0.forEach(t),zio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);th=n(te,"LI",{});var g0e=s(th);Vae=n(g0e,"STRONG",{});var jUr=s(Vae);Wio=r(jUr,"beit"),jUr.forEach(t),Qio=r(g0e," \u2014 "),MB=n(g0e,"A",{href:!0});var DUr=s(MB);Hio=r(DUr,"BeitFeatureExtractor"),DUr.forEach(t),Uio=r(g0e," (BEiT model)"),g0e.forEach(t),Jio=i(te),ah=n(te,"LI",{});var h0e=s(ah);Xae=n(h0e,"STRONG",{});var GUr=s(Xae);Yio=r(GUr,"clip"),GUr.forEach(t),Kio=r(h0e," \u2014 "),EB=n(h0e,"A",{href:!0});var OUr=s(EB);Zio=r(OUr,"CLIPFeatureExtractor"),OUr.forEach(t),edo=r(h0e," (CLIP model)"),h0e.forEach(t),odo=i(te),nh=n(te,"LI",{});var p0e=s(nh);zae=n(p0e,"STRONG",{});var VUr=s(zae);rdo=r(VUr,"convnext"),VUr.forEach(t),tdo=r(p0e," \u2014 "),CB=n(p0e,"A",{href:!0});var XUr=s(CB);ado=r(XUr,"ConvNextFeatureExtractor"),XUr.forEach(t),ndo=r(p0e," (ConvNext model)"),p0e.forEach(t),sdo=i(te),sh=n(te,"LI",{});var _0e=s(sh);Wae=n(_0e,"STRONG",{});var zUr=s(Wae);ldo=r(zUr,"cvt"),zUr.forEach(t),ido=r(_0e," \u2014 "),wB=n(_0e,"A",{href:!0});var WUr=s(wB);ddo=r(WUr,"ConvNextFeatureExtractor"),WUr.forEach(t),cdo=r(_0e," (CvT model)"),_0e.forEach(t),fdo=i(te),lh=n(te,"LI",{});var u0e=s(lh);Qae=n(u0e,"STRONG",{});var QUr=s(Qae);mdo=r(QUr,"data2vec-audio"),QUr.forEach(t),gdo=r(u0e," \u2014 "),AB=n(u0e,"A",{href:!0});var HUr=s(AB);hdo=r(HUr,"Wav2Vec2FeatureExtractor"),HUr.forEach(t),pdo=r(u0e," (Data2VecAudio model)"),u0e.forEach(t),_do=i(te),ih=n(te,"LI",{});var b0e=s(ih);Hae=n(b0e,"STRONG",{});var UUr=s(Hae);udo=r(UUr,"data2vec-vision"),UUr.forEach(t),bdo=r(b0e," \u2014 "),yB=n(b0e,"A",{href:!0});var JUr=s(yB);vdo=r(JUr,"BeitFeatureExtractor"),JUr.forEach(t),Fdo=r(b0e," (Data2VecVision model)"),b0e.forEach(t),Tdo=i(te),dh=n(te,"LI",{});var v0e=s(dh);Uae=n(v0e,"STRONG",{});var YUr=s(Uae);Mdo=r(YUr,"deit"),YUr.forEach(t),Edo=r(v0e," \u2014 "),LB=n(v0e,"A",{href:!0});var KUr=s(LB);Cdo=r(KUr,"DeiTFeatureExtractor"),KUr.forEach(t),wdo=r(v0e," (DeiT model)"),v0e.forEach(t),Ado=i(te),ch=n(te,"LI",{});var F0e=s(ch);Jae=n(F0e,"STRONG",{});var ZUr=s(Jae);ydo=r(ZUr,"detr"),ZUr.forEach(t),Ldo=r(F0e," \u2014 "),xB=n(F0e,"A",{href:!0});var eJr=s(xB);xdo=r(eJr,"DetrFeatureExtractor"),eJr.forEach(t),$do=r(F0e," (DETR model)"),F0e.forEach(t),kdo=i(te),fh=n(te,"LI",{});var T0e=s(fh);Yae=n(T0e,"STRONG",{});var oJr=s(Yae);Sdo=r(oJr,"dpt"),oJr.forEach(t),Rdo=r(T0e," \u2014 "),$B=n(T0e,"A",{href:!0});var rJr=s($B);Pdo=r(rJr,"DPTFeatureExtractor"),rJr.forEach(t),Bdo=r(T0e," (DPT model)"),T0e.forEach(t),Ido=i(te),mh=n(te,"LI",{});var M0e=s(mh);Kae=n(M0e,"STRONG",{});var tJr=s(Kae);qdo=r(tJr,"flava"),tJr.forEach(t),Ndo=r(M0e," \u2014 "),kB=n(M0e,"A",{href:!0});var aJr=s(kB);jdo=r(aJr,"FlavaFeatureExtractor"),aJr.forEach(t),Ddo=r(M0e," (Flava model)"),M0e.forEach(t),Gdo=i(te),gh=n(te,"LI",{});var E0e=s(gh);Zae=n(E0e,"STRONG",{});var nJr=s(Zae);Odo=r(nJr,"glpn"),nJr.forEach(t),Vdo=r(E0e," \u2014 "),SB=n(E0e,"A",{href:!0});var sJr=s(SB);Xdo=r(sJr,"GLPNFeatureExtractor"),sJr.forEach(t),zdo=r(E0e," (GLPN model)"),E0e.forEach(t),Wdo=i(te),hh=n(te,"LI",{});var C0e=s(hh);ene=n(C0e,"STRONG",{});var lJr=s(ene);Qdo=r(lJr,"hubert"),lJr.forEach(t),Hdo=r(C0e," \u2014 "),RB=n(C0e,"A",{href:!0});var iJr=s(RB);Udo=r(iJr,"Wav2Vec2FeatureExtractor"),iJr.forEach(t),Jdo=r(C0e," (Hubert model)"),C0e.forEach(t),Ydo=i(te),ph=n(te,"LI",{});var w0e=s(ph);one=n(w0e,"STRONG",{});var dJr=s(one);Kdo=r(dJr,"layoutlmv2"),dJr.forEach(t),Zdo=r(w0e," \u2014 "),PB=n(w0e,"A",{href:!0});var cJr=s(PB);eco=r(cJr,"LayoutLMv2FeatureExtractor"),cJr.forEach(t),oco=r(w0e," (LayoutLMv2 model)"),w0e.forEach(t),rco=i(te),_h=n(te,"LI",{});var A0e=s(_h);rne=n(A0e,"STRONG",{});var fJr=s(rne);tco=r(fJr,"maskformer"),fJr.forEach(t),aco=r(A0e," \u2014 "),BB=n(A0e,"A",{href:!0});var mJr=s(BB);nco=r(mJr,"MaskFormerFeatureExtractor"),mJr.forEach(t),sco=r(A0e," (MaskFormer model)"),A0e.forEach(t),lco=i(te),uh=n(te,"LI",{});var y0e=s(uh);tne=n(y0e,"STRONG",{});var gJr=s(tne);ico=r(gJr,"perceiver"),gJr.forEach(t),dco=r(y0e," \u2014 "),IB=n(y0e,"A",{href:!0});var hJr=s(IB);cco=r(hJr,"PerceiverFeatureExtractor"),hJr.forEach(t),fco=r(y0e," (Perceiver model)"),y0e.forEach(t),mco=i(te),bh=n(te,"LI",{});var L0e=s(bh);ane=n(L0e,"STRONG",{});var pJr=s(ane);gco=r(pJr,"poolformer"),pJr.forEach(t),hco=r(L0e," \u2014 "),qB=n(L0e,"A",{href:!0});var _Jr=s(qB);pco=r(_Jr,"PoolFormerFeatureExtractor"),_Jr.forEach(t),_co=r(L0e," (PoolFormer model)"),L0e.forEach(t),uco=i(te),vh=n(te,"LI",{});var x0e=s(vh);nne=n(x0e,"STRONG",{});var uJr=s(nne);bco=r(uJr,"regnet"),uJr.forEach(t),vco=r(x0e," \u2014 "),NB=n(x0e,"A",{href:!0});var bJr=s(NB);Fco=r(bJr,"ConvNextFeatureExtractor"),bJr.forEach(t),Tco=r(x0e," (RegNet model)"),x0e.forEach(t),Mco=i(te),Fh=n(te,"LI",{});var $0e=s(Fh);sne=n($0e,"STRONG",{});var vJr=s(sne);Eco=r(vJr,"resnet"),vJr.forEach(t),Cco=r($0e," \u2014 "),jB=n($0e,"A",{href:!0});var FJr=s(jB);wco=r(FJr,"ConvNextFeatureExtractor"),FJr.forEach(t),Aco=r($0e," (ResNet model)"),$0e.forEach(t),yco=i(te),Th=n(te,"LI",{});var k0e=s(Th);lne=n(k0e,"STRONG",{});var TJr=s(lne);Lco=r(TJr,"segformer"),TJr.forEach(t),xco=r(k0e," \u2014 "),DB=n(k0e,"A",{href:!0});var MJr=s(DB);$co=r(MJr,"SegformerFeatureExtractor"),MJr.forEach(t),kco=r(k0e," (SegFormer model)"),k0e.forEach(t),Sco=i(te),Mh=n(te,"LI",{});var S0e=s(Mh);ine=n(S0e,"STRONG",{});var EJr=s(ine);Rco=r(EJr,"speech_to_text"),EJr.forEach(t),Pco=r(S0e," \u2014 "),GB=n(S0e,"A",{href:!0});var CJr=s(GB);Bco=r(CJr,"Speech2TextFeatureExtractor"),CJr.forEach(t),Ico=r(S0e," (Speech2Text model)"),S0e.forEach(t),qco=i(te),Eh=n(te,"LI",{});var R0e=s(Eh);dne=n(R0e,"STRONG",{});var wJr=s(dne);Nco=r(wJr,"swin"),wJr.forEach(t),jco=r(R0e," \u2014 "),OB=n(R0e,"A",{href:!0});var AJr=s(OB);Dco=r(AJr,"ViTFeatureExtractor"),AJr.forEach(t),Gco=r(R0e," (Swin model)"),R0e.forEach(t),Oco=i(te),Ch=n(te,"LI",{});var P0e=s(Ch);cne=n(P0e,"STRONG",{});var yJr=s(cne);Vco=r(yJr,"van"),yJr.forEach(t),Xco=r(P0e," \u2014 "),VB=n(P0e,"A",{href:!0});var LJr=s(VB);zco=r(LJr,"ConvNextFeatureExtractor"),LJr.forEach(t),Wco=r(P0e," (VAN model)"),P0e.forEach(t),Qco=i(te),wh=n(te,"LI",{});var B0e=s(wh);fne=n(B0e,"STRONG",{});var xJr=s(fne);Hco=r(xJr,"vit"),xJr.forEach(t),Uco=r(B0e," \u2014 "),XB=n(B0e,"A",{href:!0});var $Jr=s(XB);Jco=r($Jr,"ViTFeatureExtractor"),$Jr.forEach(t),Yco=r(B0e," (ViT model)"),B0e.forEach(t),Kco=i(te),Ah=n(te,"LI",{});var I0e=s(Ah);mne=n(I0e,"STRONG",{});var kJr=s(mne);Zco=r(kJr,"vit_mae"),kJr.forEach(t),efo=r(I0e," \u2014 "),zB=n(I0e,"A",{href:!0});var SJr=s(zB);ofo=r(SJr,"ViTFeatureExtractor"),SJr.forEach(t),rfo=r(I0e," (ViTMAE model)"),I0e.forEach(t),tfo=i(te),yh=n(te,"LI",{});var q0e=s(yh);gne=n(q0e,"STRONG",{});var RJr=s(gne);afo=r(RJr,"wav2vec2"),RJr.forEach(t),nfo=r(q0e," \u2014 "),WB=n(q0e,"A",{href:!0});var PJr=s(WB);sfo=r(PJr,"Wav2Vec2FeatureExtractor"),PJr.forEach(t),lfo=r(q0e," (Wav2Vec2 model)"),q0e.forEach(t),ifo=i(te),Lh=n(te,"LI",{});var N0e=s(Lh);hne=n(N0e,"STRONG",{});var BJr=s(hne);dfo=r(BJr,"wav2vec2-conformer"),BJr.forEach(t),cfo=r(N0e," \u2014 "),QB=n(N0e,"A",{href:!0});var IJr=s(QB);ffo=r(IJr,"Wav2Vec2FeatureExtractor"),IJr.forEach(t),mfo=r(N0e," (Wav2Vec2-Conformer model)"),N0e.forEach(t),gfo=i(te),xh=n(te,"LI",{});var j0e=s(xh);pne=n(j0e,"STRONG",{});var qJr=s(pne);hfo=r(qJr,"yolos"),qJr.forEach(t),pfo=r(j0e," \u2014 "),HB=n(j0e,"A",{href:!0});var NJr=s(HB);_fo=r(NJr,"YolosFeatureExtractor"),NJr.forEach(t),ufo=r(j0e," (YOLOS model)"),j0e.forEach(t),te.forEach(t),bfo=i(Zt),T($h.$$.fragment,Zt),vfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),Ffo=i(Ns),Sh=n(Ns,"DIV",{class:!0});var yje=s(Sh);T(q6.$$.fragment,yje),Tfo=i(yje),_ne=n(yje,"P",{});var jJr=s(_ne);Mfo=r(jJr,"Register a new feature extractor for this class."),jJr.forEach(t),yje.forEach(t),Ns.forEach(t),Aqe=i(f),Mi=n(f,"H2",{class:!0});var Lje=s(Mi);Rh=n(Lje,"A",{id:!0,class:!0,href:!0});var DJr=s(Rh);une=n(DJr,"SPAN",{});var GJr=s(une);T(N6.$$.fragment,GJr),GJr.forEach(t),DJr.forEach(t),Efo=i(Lje),bne=n(Lje,"SPAN",{});var OJr=s(bne);Cfo=r(OJr,"AutoProcessor"),OJr.forEach(t),Lje.forEach(t),yqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(j6.$$.fragment,js),wfo=i(js),D6=n(js,"P",{});var xje=s(D6);Afo=r(xje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=n(xje,"A",{href:!0});var VJr=s(UB);yfo=r(VJr,"AutoProcessor.from_pretrained()"),VJr.forEach(t),Lfo=r(xje," class method."),xje.forEach(t),xfo=i(js),G6=n(js,"P",{});var $je=s(G6);$fo=r($je,"This class cannot be instantiated directly using "),vne=n($je,"CODE",{});var XJr=s(vne);kfo=r(XJr,"__init__()"),XJr.forEach(t),Sfo=r($je," (throws an error)."),$je.forEach(t),Rfo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(O6.$$.fragment,ea),Pfo=i(ea),Fne=n(ea,"P",{});var zJr=s(Fne);Bfo=r(zJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zJr.forEach(t),Ifo=i(ea),Ei=n(ea,"P",{});var HK=s(Ei);qfo=r(HK,"The processor class to instantiate is selected based on the "),Tne=n(HK,"CODE",{});var WJr=s(Tne);Nfo=r(WJr,"model_type"),WJr.forEach(t),jfo=r(HK,` property of the config object (either
passed as an argument or loaded from `),Mne=n(HK,"CODE",{});var QJr=s(Mne);Dfo=r(QJr,"pretrained_model_name_or_path"),QJr.forEach(t),Gfo=r(HK," if possible):"),HK.forEach(t),Ofo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Ph=n(be,"LI",{});var D0e=s(Ph);Ene=n(D0e,"STRONG",{});var HJr=s(Ene);Vfo=r(HJr,"clip"),HJr.forEach(t),Xfo=r(D0e," \u2014 "),JB=n(D0e,"A",{href:!0});var UJr=s(JB);zfo=r(UJr,"CLIPProcessor"),UJr.forEach(t),Wfo=r(D0e," (CLIP model)"),D0e.forEach(t),Qfo=i(be),Bh=n(be,"LI",{});var G0e=s(Bh);Cne=n(G0e,"STRONG",{});var JJr=s(Cne);Hfo=r(JJr,"flava"),JJr.forEach(t),Ufo=r(G0e," \u2014 "),wne=n(G0e,"CODE",{});var YJr=s(wne);Jfo=r(YJr,"FLAVAProcessor"),YJr.forEach(t),Yfo=r(G0e," (Flava model)"),G0e.forEach(t),Kfo=i(be),Ih=n(be,"LI",{});var O0e=s(Ih);Ane=n(O0e,"STRONG",{});var KJr=s(Ane);Zfo=r(KJr,"layoutlmv2"),KJr.forEach(t),emo=r(O0e," \u2014 "),YB=n(O0e,"A",{href:!0});var ZJr=s(YB);omo=r(ZJr,"LayoutLMv2Processor"),ZJr.forEach(t),rmo=r(O0e," (LayoutLMv2 model)"),O0e.forEach(t),tmo=i(be),qh=n(be,"LI",{});var V0e=s(qh);yne=n(V0e,"STRONG",{});var eYr=s(yne);amo=r(eYr,"layoutxlm"),eYr.forEach(t),nmo=r(V0e," \u2014 "),KB=n(V0e,"A",{href:!0});var oYr=s(KB);smo=r(oYr,"LayoutXLMProcessor"),oYr.forEach(t),lmo=r(V0e," (LayoutXLM model)"),V0e.forEach(t),imo=i(be),Nh=n(be,"LI",{});var X0e=s(Nh);Lne=n(X0e,"STRONG",{});var rYr=s(Lne);dmo=r(rYr,"sew"),rYr.forEach(t),cmo=r(X0e," \u2014 "),ZB=n(X0e,"A",{href:!0});var tYr=s(ZB);fmo=r(tYr,"Wav2Vec2Processor"),tYr.forEach(t),mmo=r(X0e," (SEW model)"),X0e.forEach(t),gmo=i(be),jh=n(be,"LI",{});var z0e=s(jh);xne=n(z0e,"STRONG",{});var aYr=s(xne);hmo=r(aYr,"sew-d"),aYr.forEach(t),pmo=r(z0e," \u2014 "),eI=n(z0e,"A",{href:!0});var nYr=s(eI);_mo=r(nYr,"Wav2Vec2Processor"),nYr.forEach(t),umo=r(z0e," (SEW-D model)"),z0e.forEach(t),bmo=i(be),Dh=n(be,"LI",{});var W0e=s(Dh);$ne=n(W0e,"STRONG",{});var sYr=s($ne);vmo=r(sYr,"speech_to_text"),sYr.forEach(t),Fmo=r(W0e," \u2014 "),oI=n(W0e,"A",{href:!0});var lYr=s(oI);Tmo=r(lYr,"Speech2TextProcessor"),lYr.forEach(t),Mmo=r(W0e," (Speech2Text model)"),W0e.forEach(t),Emo=i(be),Gh=n(be,"LI",{});var Q0e=s(Gh);kne=n(Q0e,"STRONG",{});var iYr=s(kne);Cmo=r(iYr,"speech_to_text_2"),iYr.forEach(t),wmo=r(Q0e," \u2014 "),rI=n(Q0e,"A",{href:!0});var dYr=s(rI);Amo=r(dYr,"Speech2Text2Processor"),dYr.forEach(t),ymo=r(Q0e," (Speech2Text2 model)"),Q0e.forEach(t),Lmo=i(be),Oh=n(be,"LI",{});var H0e=s(Oh);Sne=n(H0e,"STRONG",{});var cYr=s(Sne);xmo=r(cYr,"trocr"),cYr.forEach(t),$mo=r(H0e," \u2014 "),tI=n(H0e,"A",{href:!0});var fYr=s(tI);kmo=r(fYr,"TrOCRProcessor"),fYr.forEach(t),Smo=r(H0e," (TrOCR model)"),H0e.forEach(t),Rmo=i(be),Vh=n(be,"LI",{});var U0e=s(Vh);Rne=n(U0e,"STRONG",{});var mYr=s(Rne);Pmo=r(mYr,"unispeech"),mYr.forEach(t),Bmo=r(U0e," \u2014 "),aI=n(U0e,"A",{href:!0});var gYr=s(aI);Imo=r(gYr,"Wav2Vec2Processor"),gYr.forEach(t),qmo=r(U0e," (UniSpeech model)"),U0e.forEach(t),Nmo=i(be),Xh=n(be,"LI",{});var J0e=s(Xh);Pne=n(J0e,"STRONG",{});var hYr=s(Pne);jmo=r(hYr,"unispeech-sat"),hYr.forEach(t),Dmo=r(J0e," \u2014 "),nI=n(J0e,"A",{href:!0});var pYr=s(nI);Gmo=r(pYr,"Wav2Vec2Processor"),pYr.forEach(t),Omo=r(J0e," (UniSpeechSat model)"),J0e.forEach(t),Vmo=i(be),zh=n(be,"LI",{});var Y0e=s(zh);Bne=n(Y0e,"STRONG",{});var _Yr=s(Bne);Xmo=r(_Yr,"vilt"),_Yr.forEach(t),zmo=r(Y0e," \u2014 "),sI=n(Y0e,"A",{href:!0});var uYr=s(sI);Wmo=r(uYr,"ViltProcessor"),uYr.forEach(t),Qmo=r(Y0e," (ViLT model)"),Y0e.forEach(t),Hmo=i(be),Wh=n(be,"LI",{});var K0e=s(Wh);Ine=n(K0e,"STRONG",{});var bYr=s(Ine);Umo=r(bYr,"vision-text-dual-encoder"),bYr.forEach(t),Jmo=r(K0e," \u2014 "),lI=n(K0e,"A",{href:!0});var vYr=s(lI);Ymo=r(vYr,"VisionTextDualEncoderProcessor"),vYr.forEach(t),Kmo=r(K0e," (VisionTextDualEncoder model)"),K0e.forEach(t),Zmo=i(be),Qh=n(be,"LI",{});var Z0e=s(Qh);qne=n(Z0e,"STRONG",{});var FYr=s(qne);ego=r(FYr,"wav2vec2"),FYr.forEach(t),ogo=r(Z0e," \u2014 "),iI=n(Z0e,"A",{href:!0});var TYr=s(iI);rgo=r(TYr,"Wav2Vec2Processor"),TYr.forEach(t),tgo=r(Z0e," (Wav2Vec2 model)"),Z0e.forEach(t),ago=i(be),Hh=n(be,"LI",{});var eAe=s(Hh);Nne=n(eAe,"STRONG",{});var MYr=s(Nne);ngo=r(MYr,"wav2vec2-conformer"),MYr.forEach(t),sgo=r(eAe," \u2014 "),dI=n(eAe,"A",{href:!0});var EYr=s(dI);lgo=r(EYr,"Wav2Vec2Processor"),EYr.forEach(t),igo=r(eAe," (Wav2Vec2-Conformer model)"),eAe.forEach(t),dgo=i(be),Uh=n(be,"LI",{});var oAe=s(Uh);jne=n(oAe,"STRONG",{});var CYr=s(jne);cgo=r(CYr,"wavlm"),CYr.forEach(t),fgo=r(oAe," \u2014 "),cI=n(oAe,"A",{href:!0});var wYr=s(cI);mgo=r(wYr,"Wav2Vec2Processor"),wYr.forEach(t),ggo=r(oAe," (WavLM model)"),oAe.forEach(t),be.forEach(t),hgo=i(ea),T(Jh.$$.fragment,ea),pgo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),_go=i(js),Kh=n(js,"DIV",{class:!0});var kje=s(Kh);T(V6.$$.fragment,kje),ugo=i(kje),Dne=n(kje,"P",{});var AYr=s(Dne);bgo=r(AYr,"Register a new processor for this class."),AYr.forEach(t),kje.forEach(t),js.forEach(t),Lqe=i(f),Ci=n(f,"H2",{class:!0});var Sje=s(Ci);Zh=n(Sje,"A",{id:!0,class:!0,href:!0});var yYr=s(Zh);Gne=n(yYr,"SPAN",{});var LYr=s(Gne);T(X6.$$.fragment,LYr),LYr.forEach(t),yYr.forEach(t),vgo=i(Sje),One=n(Sje,"SPAN",{});var xYr=s(One);Fgo=r(xYr,"AutoModel"),xYr.forEach(t),Sje.forEach(t),xqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(z6.$$.fragment,Ds),Tgo=i(Ds),wi=n(Ds,"P",{});var UK=s(wi);Mgo=r(UK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fI=n(UK,"A",{href:!0});var $Yr=s(fI);Ego=r($Yr,"from_pretrained()"),$Yr.forEach(t),Cgo=r(UK," class method or the "),mI=n(UK,"A",{href:!0});var kYr=s(mI);wgo=r(kYr,"from_config()"),kYr.forEach(t),Ago=r(UK,` class
method.`),UK.forEach(t),ygo=i(Ds),W6=n(Ds,"P",{});var Rje=s(W6);Lgo=r(Rje,"This class cannot be instantiated directly using "),Vne=n(Rje,"CODE",{});var SYr=s(Vne);xgo=r(SYr,"__init__()"),SYr.forEach(t),$go=r(Rje," (throws an error)."),Rje.forEach(t),kgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var M0=s(tt);T(Q6.$$.fragment,M0),Sgo=i(M0),Xne=n(M0,"P",{});var RYr=s(Xne);Rgo=r(RYr,"Instantiates one of the base model classes of the library from a configuration."),RYr.forEach(t),Pgo=i(M0),Ai=n(M0,"P",{});var JK=s(Ai);Bgo=r(JK,`Note:
Loading a model from its configuration file does `),zne=n(JK,"STRONG",{});var PYr=s(zne);Igo=r(PYr,"not"),PYr.forEach(t),qgo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=n(JK,"A",{href:!0});var BYr=s(gI);Ngo=r(BYr,"from_pretrained()"),BYr.forEach(t),jgo=r(JK," to load the model weights."),JK.forEach(t),Dgo=i(M0),T(ep.$$.fragment,M0),M0.forEach(t),Ggo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(H6.$$.fragment,oa),Ogo=i(oa),Wne=n(oa,"P",{});var IYr=s(Wne);Vgo=r(IYr,"Instantiate one of the base model classes of the library from a pretrained model."),IYr.forEach(t),Xgo=i(oa),La=n(oa,"P",{});var E0=s(La);zgo=r(E0,"The model class to instantiate is selected based on the "),Qne=n(E0,"CODE",{});var qYr=s(Qne);Wgo=r(qYr,"model_type"),qYr.forEach(t),Qgo=r(E0,` property of the config object (either
passed as an argument or loaded from `),Hne=n(E0,"CODE",{});var NYr=s(Hne);Hgo=r(NYr,"pretrained_model_name_or_path"),NYr.forEach(t),Ugo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=n(E0,"CODE",{});var jYr=s(Une);Jgo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),Ygo=r(E0,":"),E0.forEach(t),Kgo=i(oa),x=n(oa,"UL",{});var $=s(x);op=n($,"LI",{});var rAe=s(op);Jne=n(rAe,"STRONG",{});var DYr=s(Jne);Zgo=r(DYr,"albert"),DYr.forEach(t),eho=r(rAe," \u2014 "),hI=n(rAe,"A",{href:!0});var GYr=s(hI);oho=r(GYr,"AlbertModel"),GYr.forEach(t),rho=r(rAe," (ALBERT model)"),rAe.forEach(t),tho=i($),rp=n($,"LI",{});var tAe=s(rp);Yne=n(tAe,"STRONG",{});var OYr=s(Yne);aho=r(OYr,"bart"),OYr.forEach(t),nho=r(tAe," \u2014 "),pI=n(tAe,"A",{href:!0});var VYr=s(pI);sho=r(VYr,"BartModel"),VYr.forEach(t),lho=r(tAe," (BART model)"),tAe.forEach(t),iho=i($),tp=n($,"LI",{});var aAe=s(tp);Kne=n(aAe,"STRONG",{});var XYr=s(Kne);dho=r(XYr,"beit"),XYr.forEach(t),cho=r(aAe," \u2014 "),_I=n(aAe,"A",{href:!0});var zYr=s(_I);fho=r(zYr,"BeitModel"),zYr.forEach(t),mho=r(aAe," (BEiT model)"),aAe.forEach(t),gho=i($),ap=n($,"LI",{});var nAe=s(ap);Zne=n(nAe,"STRONG",{});var WYr=s(Zne);hho=r(WYr,"bert"),WYr.forEach(t),pho=r(nAe," \u2014 "),uI=n(nAe,"A",{href:!0});var QYr=s(uI);_ho=r(QYr,"BertModel"),QYr.forEach(t),uho=r(nAe," (BERT model)"),nAe.forEach(t),bho=i($),np=n($,"LI",{});var sAe=s(np);ese=n(sAe,"STRONG",{});var HYr=s(ese);vho=r(HYr,"bert-generation"),HYr.forEach(t),Fho=r(sAe," \u2014 "),bI=n(sAe,"A",{href:!0});var UYr=s(bI);Tho=r(UYr,"BertGenerationEncoder"),UYr.forEach(t),Mho=r(sAe," (Bert Generation model)"),sAe.forEach(t),Eho=i($),sp=n($,"LI",{});var lAe=s(sp);ose=n(lAe,"STRONG",{});var JYr=s(ose);Cho=r(JYr,"big_bird"),JYr.forEach(t),who=r(lAe," \u2014 "),vI=n(lAe,"A",{href:!0});var YYr=s(vI);Aho=r(YYr,"BigBirdModel"),YYr.forEach(t),yho=r(lAe," (BigBird model)"),lAe.forEach(t),Lho=i($),lp=n($,"LI",{});var iAe=s(lp);rse=n(iAe,"STRONG",{});var KYr=s(rse);xho=r(KYr,"bigbird_pegasus"),KYr.forEach(t),$ho=r(iAe," \u2014 "),FI=n(iAe,"A",{href:!0});var ZYr=s(FI);kho=r(ZYr,"BigBirdPegasusModel"),ZYr.forEach(t),Sho=r(iAe," (BigBirdPegasus model)"),iAe.forEach(t),Rho=i($),ip=n($,"LI",{});var dAe=s(ip);tse=n(dAe,"STRONG",{});var eKr=s(tse);Pho=r(eKr,"blenderbot"),eKr.forEach(t),Bho=r(dAe," \u2014 "),TI=n(dAe,"A",{href:!0});var oKr=s(TI);Iho=r(oKr,"BlenderbotModel"),oKr.forEach(t),qho=r(dAe," (Blenderbot model)"),dAe.forEach(t),Nho=i($),dp=n($,"LI",{});var cAe=s(dp);ase=n(cAe,"STRONG",{});var rKr=s(ase);jho=r(rKr,"blenderbot-small"),rKr.forEach(t),Dho=r(cAe," \u2014 "),MI=n(cAe,"A",{href:!0});var tKr=s(MI);Gho=r(tKr,"BlenderbotSmallModel"),tKr.forEach(t),Oho=r(cAe," (BlenderbotSmall model)"),cAe.forEach(t),Vho=i($),cp=n($,"LI",{});var fAe=s(cp);nse=n(fAe,"STRONG",{});var aKr=s(nse);Xho=r(aKr,"camembert"),aKr.forEach(t),zho=r(fAe," \u2014 "),EI=n(fAe,"A",{href:!0});var nKr=s(EI);Who=r(nKr,"CamembertModel"),nKr.forEach(t),Qho=r(fAe," (CamemBERT model)"),fAe.forEach(t),Hho=i($),fp=n($,"LI",{});var mAe=s(fp);sse=n(mAe,"STRONG",{});var sKr=s(sse);Uho=r(sKr,"canine"),sKr.forEach(t),Jho=r(mAe," \u2014 "),CI=n(mAe,"A",{href:!0});var lKr=s(CI);Yho=r(lKr,"CanineModel"),lKr.forEach(t),Kho=r(mAe," (Canine model)"),mAe.forEach(t),Zho=i($),mp=n($,"LI",{});var gAe=s(mp);lse=n(gAe,"STRONG",{});var iKr=s(lse);epo=r(iKr,"clip"),iKr.forEach(t),opo=r(gAe," \u2014 "),wI=n(gAe,"A",{href:!0});var dKr=s(wI);rpo=r(dKr,"CLIPModel"),dKr.forEach(t),tpo=r(gAe," (CLIP model)"),gAe.forEach(t),apo=i($),gp=n($,"LI",{});var hAe=s(gp);ise=n(hAe,"STRONG",{});var cKr=s(ise);npo=r(cKr,"convbert"),cKr.forEach(t),spo=r(hAe," \u2014 "),AI=n(hAe,"A",{href:!0});var fKr=s(AI);lpo=r(fKr,"ConvBertModel"),fKr.forEach(t),ipo=r(hAe," (ConvBERT model)"),hAe.forEach(t),dpo=i($),hp=n($,"LI",{});var pAe=s(hp);dse=n(pAe,"STRONG",{});var mKr=s(dse);cpo=r(mKr,"convnext"),mKr.forEach(t),fpo=r(pAe," \u2014 "),yI=n(pAe,"A",{href:!0});var gKr=s(yI);mpo=r(gKr,"ConvNextModel"),gKr.forEach(t),gpo=r(pAe," (ConvNext model)"),pAe.forEach(t),hpo=i($),pp=n($,"LI",{});var _Ae=s(pp);cse=n(_Ae,"STRONG",{});var hKr=s(cse);ppo=r(hKr,"ctrl"),hKr.forEach(t),_po=r(_Ae," \u2014 "),LI=n(_Ae,"A",{href:!0});var pKr=s(LI);upo=r(pKr,"CTRLModel"),pKr.forEach(t),bpo=r(_Ae," (CTRL model)"),_Ae.forEach(t),vpo=i($),_p=n($,"LI",{});var uAe=s(_p);fse=n(uAe,"STRONG",{});var _Kr=s(fse);Fpo=r(_Kr,"cvt"),_Kr.forEach(t),Tpo=r(uAe," \u2014 "),xI=n(uAe,"A",{href:!0});var uKr=s(xI);Mpo=r(uKr,"CvtModel"),uKr.forEach(t),Epo=r(uAe," (CvT model)"),uAe.forEach(t),Cpo=i($),up=n($,"LI",{});var bAe=s(up);mse=n(bAe,"STRONG",{});var bKr=s(mse);wpo=r(bKr,"data2vec-audio"),bKr.forEach(t),Apo=r(bAe," \u2014 "),$I=n(bAe,"A",{href:!0});var vKr=s($I);ypo=r(vKr,"Data2VecAudioModel"),vKr.forEach(t),Lpo=r(bAe," (Data2VecAudio model)"),bAe.forEach(t),xpo=i($),bp=n($,"LI",{});var vAe=s(bp);gse=n(vAe,"STRONG",{});var FKr=s(gse);$po=r(FKr,"data2vec-text"),FKr.forEach(t),kpo=r(vAe," \u2014 "),kI=n(vAe,"A",{href:!0});var TKr=s(kI);Spo=r(TKr,"Data2VecTextModel"),TKr.forEach(t),Rpo=r(vAe," (Data2VecText model)"),vAe.forEach(t),Ppo=i($),vp=n($,"LI",{});var FAe=s(vp);hse=n(FAe,"STRONG",{});var MKr=s(hse);Bpo=r(MKr,"data2vec-vision"),MKr.forEach(t),Ipo=r(FAe," \u2014 "),SI=n(FAe,"A",{href:!0});var EKr=s(SI);qpo=r(EKr,"Data2VecVisionModel"),EKr.forEach(t),Npo=r(FAe," (Data2VecVision model)"),FAe.forEach(t),jpo=i($),Fp=n($,"LI",{});var TAe=s(Fp);pse=n(TAe,"STRONG",{});var CKr=s(pse);Dpo=r(CKr,"deberta"),CKr.forEach(t),Gpo=r(TAe," \u2014 "),RI=n(TAe,"A",{href:!0});var wKr=s(RI);Opo=r(wKr,"DebertaModel"),wKr.forEach(t),Vpo=r(TAe," (DeBERTa model)"),TAe.forEach(t),Xpo=i($),Tp=n($,"LI",{});var MAe=s(Tp);_se=n(MAe,"STRONG",{});var AKr=s(_se);zpo=r(AKr,"deberta-v2"),AKr.forEach(t),Wpo=r(MAe," \u2014 "),PI=n(MAe,"A",{href:!0});var yKr=s(PI);Qpo=r(yKr,"DebertaV2Model"),yKr.forEach(t),Hpo=r(MAe," (DeBERTa-v2 model)"),MAe.forEach(t),Upo=i($),Mp=n($,"LI",{});var EAe=s(Mp);use=n(EAe,"STRONG",{});var LKr=s(use);Jpo=r(LKr,"decision_transformer"),LKr.forEach(t),Ypo=r(EAe," \u2014 "),BI=n(EAe,"A",{href:!0});var xKr=s(BI);Kpo=r(xKr,"DecisionTransformerModel"),xKr.forEach(t),Zpo=r(EAe," (Decision Transformer model)"),EAe.forEach(t),e_o=i($),Ep=n($,"LI",{});var CAe=s(Ep);bse=n(CAe,"STRONG",{});var $Kr=s(bse);o_o=r($Kr,"deit"),$Kr.forEach(t),r_o=r(CAe," \u2014 "),II=n(CAe,"A",{href:!0});var kKr=s(II);t_o=r(kKr,"DeiTModel"),kKr.forEach(t),a_o=r(CAe," (DeiT model)"),CAe.forEach(t),n_o=i($),Cp=n($,"LI",{});var wAe=s(Cp);vse=n(wAe,"STRONG",{});var SKr=s(vse);s_o=r(SKr,"detr"),SKr.forEach(t),l_o=r(wAe," \u2014 "),qI=n(wAe,"A",{href:!0});var RKr=s(qI);i_o=r(RKr,"DetrModel"),RKr.forEach(t),d_o=r(wAe," (DETR model)"),wAe.forEach(t),c_o=i($),wp=n($,"LI",{});var AAe=s(wp);Fse=n(AAe,"STRONG",{});var PKr=s(Fse);f_o=r(PKr,"distilbert"),PKr.forEach(t),m_o=r(AAe," \u2014 "),NI=n(AAe,"A",{href:!0});var BKr=s(NI);g_o=r(BKr,"DistilBertModel"),BKr.forEach(t),h_o=r(AAe," (DistilBERT model)"),AAe.forEach(t),p_o=i($),Ap=n($,"LI",{});var yAe=s(Ap);Tse=n(yAe,"STRONG",{});var IKr=s(Tse);__o=r(IKr,"dpr"),IKr.forEach(t),u_o=r(yAe," \u2014 "),jI=n(yAe,"A",{href:!0});var qKr=s(jI);b_o=r(qKr,"DPRQuestionEncoder"),qKr.forEach(t),v_o=r(yAe," (DPR model)"),yAe.forEach(t),F_o=i($),yp=n($,"LI",{});var LAe=s(yp);Mse=n(LAe,"STRONG",{});var NKr=s(Mse);T_o=r(NKr,"dpt"),NKr.forEach(t),M_o=r(LAe," \u2014 "),DI=n(LAe,"A",{href:!0});var jKr=s(DI);E_o=r(jKr,"DPTModel"),jKr.forEach(t),C_o=r(LAe," (DPT model)"),LAe.forEach(t),w_o=i($),Lp=n($,"LI",{});var xAe=s(Lp);Ese=n(xAe,"STRONG",{});var DKr=s(Ese);A_o=r(DKr,"electra"),DKr.forEach(t),y_o=r(xAe," \u2014 "),GI=n(xAe,"A",{href:!0});var GKr=s(GI);L_o=r(GKr,"ElectraModel"),GKr.forEach(t),x_o=r(xAe," (ELECTRA model)"),xAe.forEach(t),$_o=i($),xp=n($,"LI",{});var $Ae=s(xp);Cse=n($Ae,"STRONG",{});var OKr=s(Cse);k_o=r(OKr,"flaubert"),OKr.forEach(t),S_o=r($Ae," \u2014 "),OI=n($Ae,"A",{href:!0});var VKr=s(OI);R_o=r(VKr,"FlaubertModel"),VKr.forEach(t),P_o=r($Ae," (FlauBERT model)"),$Ae.forEach(t),B_o=i($),$p=n($,"LI",{});var kAe=s($p);wse=n(kAe,"STRONG",{});var XKr=s(wse);I_o=r(XKr,"flava"),XKr.forEach(t),q_o=r(kAe," \u2014 "),VI=n(kAe,"A",{href:!0});var zKr=s(VI);N_o=r(zKr,"FlavaModel"),zKr.forEach(t),j_o=r(kAe," (Flava model)"),kAe.forEach(t),D_o=i($),kp=n($,"LI",{});var SAe=s(kp);Ase=n(SAe,"STRONG",{});var WKr=s(Ase);G_o=r(WKr,"fnet"),WKr.forEach(t),O_o=r(SAe," \u2014 "),XI=n(SAe,"A",{href:!0});var QKr=s(XI);V_o=r(QKr,"FNetModel"),QKr.forEach(t),X_o=r(SAe," (FNet model)"),SAe.forEach(t),z_o=i($),Sp=n($,"LI",{});var RAe=s(Sp);yse=n(RAe,"STRONG",{});var HKr=s(yse);W_o=r(HKr,"fsmt"),HKr.forEach(t),Q_o=r(RAe," \u2014 "),zI=n(RAe,"A",{href:!0});var UKr=s(zI);H_o=r(UKr,"FSMTModel"),UKr.forEach(t),U_o=r(RAe," (FairSeq Machine-Translation model)"),RAe.forEach(t),J_o=i($),Rs=n($,"LI",{});var S$=s(Rs);Lse=n(S$,"STRONG",{});var JKr=s(Lse);Y_o=r(JKr,"funnel"),JKr.forEach(t),K_o=r(S$," \u2014 "),WI=n(S$,"A",{href:!0});var YKr=s(WI);Z_o=r(YKr,"FunnelModel"),YKr.forEach(t),euo=r(S$," or "),QI=n(S$,"A",{href:!0});var KKr=s(QI);ouo=r(KKr,"FunnelBaseModel"),KKr.forEach(t),ruo=r(S$," (Funnel Transformer model)"),S$.forEach(t),tuo=i($),Rp=n($,"LI",{});var PAe=s(Rp);xse=n(PAe,"STRONG",{});var ZKr=s(xse);auo=r(ZKr,"glpn"),ZKr.forEach(t),nuo=r(PAe," \u2014 "),HI=n(PAe,"A",{href:!0});var eZr=s(HI);suo=r(eZr,"GLPNModel"),eZr.forEach(t),luo=r(PAe," (GLPN model)"),PAe.forEach(t),iuo=i($),Pp=n($,"LI",{});var BAe=s(Pp);$se=n(BAe,"STRONG",{});var oZr=s($se);duo=r(oZr,"gpt2"),oZr.forEach(t),cuo=r(BAe," \u2014 "),UI=n(BAe,"A",{href:!0});var rZr=s(UI);fuo=r(rZr,"GPT2Model"),rZr.forEach(t),muo=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),guo=i($),Bp=n($,"LI",{});var IAe=s(Bp);kse=n(IAe,"STRONG",{});var tZr=s(kse);huo=r(tZr,"gpt_neo"),tZr.forEach(t),puo=r(IAe," \u2014 "),JI=n(IAe,"A",{href:!0});var aZr=s(JI);_uo=r(aZr,"GPTNeoModel"),aZr.forEach(t),uuo=r(IAe," (GPT Neo model)"),IAe.forEach(t),buo=i($),Ip=n($,"LI",{});var qAe=s(Ip);Sse=n(qAe,"STRONG",{});var nZr=s(Sse);vuo=r(nZr,"gptj"),nZr.forEach(t),Fuo=r(qAe," \u2014 "),YI=n(qAe,"A",{href:!0});var sZr=s(YI);Tuo=r(sZr,"GPTJModel"),sZr.forEach(t),Muo=r(qAe," (GPT-J model)"),qAe.forEach(t),Euo=i($),qp=n($,"LI",{});var NAe=s(qp);Rse=n(NAe,"STRONG",{});var lZr=s(Rse);Cuo=r(lZr,"hubert"),lZr.forEach(t),wuo=r(NAe," \u2014 "),KI=n(NAe,"A",{href:!0});var iZr=s(KI);Auo=r(iZr,"HubertModel"),iZr.forEach(t),yuo=r(NAe," (Hubert model)"),NAe.forEach(t),Luo=i($),Np=n($,"LI",{});var jAe=s(Np);Pse=n(jAe,"STRONG",{});var dZr=s(Pse);xuo=r(dZr,"ibert"),dZr.forEach(t),$uo=r(jAe," \u2014 "),ZI=n(jAe,"A",{href:!0});var cZr=s(ZI);kuo=r(cZr,"IBertModel"),cZr.forEach(t),Suo=r(jAe," (I-BERT model)"),jAe.forEach(t),Ruo=i($),jp=n($,"LI",{});var DAe=s(jp);Bse=n(DAe,"STRONG",{});var fZr=s(Bse);Puo=r(fZr,"imagegpt"),fZr.forEach(t),Buo=r(DAe," \u2014 "),eq=n(DAe,"A",{href:!0});var mZr=s(eq);Iuo=r(mZr,"ImageGPTModel"),mZr.forEach(t),quo=r(DAe," (ImageGPT model)"),DAe.forEach(t),Nuo=i($),Dp=n($,"LI",{});var GAe=s(Dp);Ise=n(GAe,"STRONG",{});var gZr=s(Ise);juo=r(gZr,"layoutlm"),gZr.forEach(t),Duo=r(GAe," \u2014 "),oq=n(GAe,"A",{href:!0});var hZr=s(oq);Guo=r(hZr,"LayoutLMModel"),hZr.forEach(t),Ouo=r(GAe," (LayoutLM model)"),GAe.forEach(t),Vuo=i($),Gp=n($,"LI",{});var OAe=s(Gp);qse=n(OAe,"STRONG",{});var pZr=s(qse);Xuo=r(pZr,"layoutlmv2"),pZr.forEach(t),zuo=r(OAe," \u2014 "),rq=n(OAe,"A",{href:!0});var _Zr=s(rq);Wuo=r(_Zr,"LayoutLMv2Model"),_Zr.forEach(t),Quo=r(OAe," (LayoutLMv2 model)"),OAe.forEach(t),Huo=i($),Op=n($,"LI",{});var VAe=s(Op);Nse=n(VAe,"STRONG",{});var uZr=s(Nse);Uuo=r(uZr,"led"),uZr.forEach(t),Juo=r(VAe," \u2014 "),tq=n(VAe,"A",{href:!0});var bZr=s(tq);Yuo=r(bZr,"LEDModel"),bZr.forEach(t),Kuo=r(VAe," (LED model)"),VAe.forEach(t),Zuo=i($),Vp=n($,"LI",{});var XAe=s(Vp);jse=n(XAe,"STRONG",{});var vZr=s(jse);e2o=r(vZr,"longformer"),vZr.forEach(t),o2o=r(XAe," \u2014 "),aq=n(XAe,"A",{href:!0});var FZr=s(aq);r2o=r(FZr,"LongformerModel"),FZr.forEach(t),t2o=r(XAe," (Longformer model)"),XAe.forEach(t),a2o=i($),Xp=n($,"LI",{});var zAe=s(Xp);Dse=n(zAe,"STRONG",{});var TZr=s(Dse);n2o=r(TZr,"luke"),TZr.forEach(t),s2o=r(zAe," \u2014 "),nq=n(zAe,"A",{href:!0});var MZr=s(nq);l2o=r(MZr,"LukeModel"),MZr.forEach(t),i2o=r(zAe," (LUKE model)"),zAe.forEach(t),d2o=i($),zp=n($,"LI",{});var WAe=s(zp);Gse=n(WAe,"STRONG",{});var EZr=s(Gse);c2o=r(EZr,"lxmert"),EZr.forEach(t),f2o=r(WAe," \u2014 "),sq=n(WAe,"A",{href:!0});var CZr=s(sq);m2o=r(CZr,"LxmertModel"),CZr.forEach(t),g2o=r(WAe," (LXMERT model)"),WAe.forEach(t),h2o=i($),Wp=n($,"LI",{});var QAe=s(Wp);Ose=n(QAe,"STRONG",{});var wZr=s(Ose);p2o=r(wZr,"m2m_100"),wZr.forEach(t),_2o=r(QAe," \u2014 "),lq=n(QAe,"A",{href:!0});var AZr=s(lq);u2o=r(AZr,"M2M100Model"),AZr.forEach(t),b2o=r(QAe," (M2M100 model)"),QAe.forEach(t),v2o=i($),Qp=n($,"LI",{});var HAe=s(Qp);Vse=n(HAe,"STRONG",{});var yZr=s(Vse);F2o=r(yZr,"marian"),yZr.forEach(t),T2o=r(HAe," \u2014 "),iq=n(HAe,"A",{href:!0});var LZr=s(iq);M2o=r(LZr,"MarianModel"),LZr.forEach(t),E2o=r(HAe," (Marian model)"),HAe.forEach(t),C2o=i($),Hp=n($,"LI",{});var UAe=s(Hp);Xse=n(UAe,"STRONG",{});var xZr=s(Xse);w2o=r(xZr,"maskformer"),xZr.forEach(t),A2o=r(UAe," \u2014 "),dq=n(UAe,"A",{href:!0});var $Zr=s(dq);y2o=r($Zr,"MaskFormerModel"),$Zr.forEach(t),L2o=r(UAe," (MaskFormer model)"),UAe.forEach(t),x2o=i($),Up=n($,"LI",{});var JAe=s(Up);zse=n(JAe,"STRONG",{});var kZr=s(zse);$2o=r(kZr,"mbart"),kZr.forEach(t),k2o=r(JAe," \u2014 "),cq=n(JAe,"A",{href:!0});var SZr=s(cq);S2o=r(SZr,"MBartModel"),SZr.forEach(t),R2o=r(JAe," (mBART model)"),JAe.forEach(t),P2o=i($),Jp=n($,"LI",{});var YAe=s(Jp);Wse=n(YAe,"STRONG",{});var RZr=s(Wse);B2o=r(RZr,"megatron-bert"),RZr.forEach(t),I2o=r(YAe," \u2014 "),fq=n(YAe,"A",{href:!0});var PZr=s(fq);q2o=r(PZr,"MegatronBertModel"),PZr.forEach(t),N2o=r(YAe," (MegatronBert model)"),YAe.forEach(t),j2o=i($),Yp=n($,"LI",{});var KAe=s(Yp);Qse=n(KAe,"STRONG",{});var BZr=s(Qse);D2o=r(BZr,"mobilebert"),BZr.forEach(t),G2o=r(KAe," \u2014 "),mq=n(KAe,"A",{href:!0});var IZr=s(mq);O2o=r(IZr,"MobileBertModel"),IZr.forEach(t),V2o=r(KAe," (MobileBERT model)"),KAe.forEach(t),X2o=i($),Kp=n($,"LI",{});var ZAe=s(Kp);Hse=n(ZAe,"STRONG",{});var qZr=s(Hse);z2o=r(qZr,"mpnet"),qZr.forEach(t),W2o=r(ZAe," \u2014 "),gq=n(ZAe,"A",{href:!0});var NZr=s(gq);Q2o=r(NZr,"MPNetModel"),NZr.forEach(t),H2o=r(ZAe," (MPNet model)"),ZAe.forEach(t),U2o=i($),Zp=n($,"LI",{});var e6e=s(Zp);Use=n(e6e,"STRONG",{});var jZr=s(Use);J2o=r(jZr,"mt5"),jZr.forEach(t),Y2o=r(e6e," \u2014 "),hq=n(e6e,"A",{href:!0});var DZr=s(hq);K2o=r(DZr,"MT5Model"),DZr.forEach(t),Z2o=r(e6e," (mT5 model)"),e6e.forEach(t),e1o=i($),e_=n($,"LI",{});var o6e=s(e_);Jse=n(o6e,"STRONG",{});var GZr=s(Jse);o1o=r(GZr,"nystromformer"),GZr.forEach(t),r1o=r(o6e," \u2014 "),pq=n(o6e,"A",{href:!0});var OZr=s(pq);t1o=r(OZr,"NystromformerModel"),OZr.forEach(t),a1o=r(o6e," (Nystromformer model)"),o6e.forEach(t),n1o=i($),o_=n($,"LI",{});var r6e=s(o_);Yse=n(r6e,"STRONG",{});var VZr=s(Yse);s1o=r(VZr,"openai-gpt"),VZr.forEach(t),l1o=r(r6e," \u2014 "),_q=n(r6e,"A",{href:!0});var XZr=s(_q);i1o=r(XZr,"OpenAIGPTModel"),XZr.forEach(t),d1o=r(r6e," (OpenAI GPT model)"),r6e.forEach(t),c1o=i($),r_=n($,"LI",{});var t6e=s(r_);Kse=n(t6e,"STRONG",{});var zZr=s(Kse);f1o=r(zZr,"opt"),zZr.forEach(t),m1o=r(t6e," \u2014 "),uq=n(t6e,"A",{href:!0});var WZr=s(uq);g1o=r(WZr,"OPTModel"),WZr.forEach(t),h1o=r(t6e," (OPT model)"),t6e.forEach(t),p1o=i($),t_=n($,"LI",{});var a6e=s(t_);Zse=n(a6e,"STRONG",{});var QZr=s(Zse);_1o=r(QZr,"pegasus"),QZr.forEach(t),u1o=r(a6e," \u2014 "),bq=n(a6e,"A",{href:!0});var HZr=s(bq);b1o=r(HZr,"PegasusModel"),HZr.forEach(t),v1o=r(a6e," (Pegasus model)"),a6e.forEach(t),F1o=i($),a_=n($,"LI",{});var n6e=s(a_);ele=n(n6e,"STRONG",{});var UZr=s(ele);T1o=r(UZr,"perceiver"),UZr.forEach(t),M1o=r(n6e," \u2014 "),vq=n(n6e,"A",{href:!0});var JZr=s(vq);E1o=r(JZr,"PerceiverModel"),JZr.forEach(t),C1o=r(n6e," (Perceiver model)"),n6e.forEach(t),w1o=i($),n_=n($,"LI",{});var s6e=s(n_);ole=n(s6e,"STRONG",{});var YZr=s(ole);A1o=r(YZr,"plbart"),YZr.forEach(t),y1o=r(s6e," \u2014 "),Fq=n(s6e,"A",{href:!0});var KZr=s(Fq);L1o=r(KZr,"PLBartModel"),KZr.forEach(t),x1o=r(s6e," (PLBart model)"),s6e.forEach(t),$1o=i($),s_=n($,"LI",{});var l6e=s(s_);rle=n(l6e,"STRONG",{});var ZZr=s(rle);k1o=r(ZZr,"poolformer"),ZZr.forEach(t),S1o=r(l6e," \u2014 "),Tq=n(l6e,"A",{href:!0});var eet=s(Tq);R1o=r(eet,"PoolFormerModel"),eet.forEach(t),P1o=r(l6e," (PoolFormer model)"),l6e.forEach(t),B1o=i($),l_=n($,"LI",{});var i6e=s(l_);tle=n(i6e,"STRONG",{});var oet=s(tle);I1o=r(oet,"prophetnet"),oet.forEach(t),q1o=r(i6e," \u2014 "),Mq=n(i6e,"A",{href:!0});var ret=s(Mq);N1o=r(ret,"ProphetNetModel"),ret.forEach(t),j1o=r(i6e," (ProphetNet model)"),i6e.forEach(t),D1o=i($),i_=n($,"LI",{});var d6e=s(i_);ale=n(d6e,"STRONG",{});var tet=s(ale);G1o=r(tet,"qdqbert"),tet.forEach(t),O1o=r(d6e," \u2014 "),Eq=n(d6e,"A",{href:!0});var aet=s(Eq);V1o=r(aet,"QDQBertModel"),aet.forEach(t),X1o=r(d6e," (QDQBert model)"),d6e.forEach(t),z1o=i($),d_=n($,"LI",{});var c6e=s(d_);nle=n(c6e,"STRONG",{});var net=s(nle);W1o=r(net,"reformer"),net.forEach(t),Q1o=r(c6e," \u2014 "),Cq=n(c6e,"A",{href:!0});var set=s(Cq);H1o=r(set,"ReformerModel"),set.forEach(t),U1o=r(c6e," (Reformer model)"),c6e.forEach(t),J1o=i($),c_=n($,"LI",{});var f6e=s(c_);sle=n(f6e,"STRONG",{});var iet=s(sle);Y1o=r(iet,"regnet"),iet.forEach(t),K1o=r(f6e," \u2014 "),wq=n(f6e,"A",{href:!0});var det=s(wq);Z1o=r(det,"RegNetModel"),det.forEach(t),e7o=r(f6e," (RegNet model)"),f6e.forEach(t),o7o=i($),f_=n($,"LI",{});var m6e=s(f_);lle=n(m6e,"STRONG",{});var cet=s(lle);r7o=r(cet,"rembert"),cet.forEach(t),t7o=r(m6e," \u2014 "),Aq=n(m6e,"A",{href:!0});var fet=s(Aq);a7o=r(fet,"RemBertModel"),fet.forEach(t),n7o=r(m6e," (RemBERT model)"),m6e.forEach(t),s7o=i($),m_=n($,"LI",{});var g6e=s(m_);ile=n(g6e,"STRONG",{});var met=s(ile);l7o=r(met,"resnet"),met.forEach(t),i7o=r(g6e," \u2014 "),yq=n(g6e,"A",{href:!0});var get=s(yq);d7o=r(get,"ResNetModel"),get.forEach(t),c7o=r(g6e," (ResNet model)"),g6e.forEach(t),f7o=i($),g_=n($,"LI",{});var h6e=s(g_);dle=n(h6e,"STRONG",{});var het=s(dle);m7o=r(het,"retribert"),het.forEach(t),g7o=r(h6e," \u2014 "),Lq=n(h6e,"A",{href:!0});var pet=s(Lq);h7o=r(pet,"RetriBertModel"),pet.forEach(t),p7o=r(h6e," (RetriBERT model)"),h6e.forEach(t),_7o=i($),h_=n($,"LI",{});var p6e=s(h_);cle=n(p6e,"STRONG",{});var _et=s(cle);u7o=r(_et,"roberta"),_et.forEach(t),b7o=r(p6e," \u2014 "),xq=n(p6e,"A",{href:!0});var uet=s(xq);v7o=r(uet,"RobertaModel"),uet.forEach(t),F7o=r(p6e," (RoBERTa model)"),p6e.forEach(t),T7o=i($),p_=n($,"LI",{});var _6e=s(p_);fle=n(_6e,"STRONG",{});var bet=s(fle);M7o=r(bet,"roformer"),bet.forEach(t),E7o=r(_6e," \u2014 "),$q=n(_6e,"A",{href:!0});var vet=s($q);C7o=r(vet,"RoFormerModel"),vet.forEach(t),w7o=r(_6e," (RoFormer model)"),_6e.forEach(t),A7o=i($),__=n($,"LI",{});var u6e=s(__);mle=n(u6e,"STRONG",{});var Fet=s(mle);y7o=r(Fet,"segformer"),Fet.forEach(t),L7o=r(u6e," \u2014 "),kq=n(u6e,"A",{href:!0});var Tet=s(kq);x7o=r(Tet,"SegformerModel"),Tet.forEach(t),$7o=r(u6e," (SegFormer model)"),u6e.forEach(t),k7o=i($),u_=n($,"LI",{});var b6e=s(u_);gle=n(b6e,"STRONG",{});var Met=s(gle);S7o=r(Met,"sew"),Met.forEach(t),R7o=r(b6e," \u2014 "),Sq=n(b6e,"A",{href:!0});var Eet=s(Sq);P7o=r(Eet,"SEWModel"),Eet.forEach(t),B7o=r(b6e," (SEW model)"),b6e.forEach(t),I7o=i($),b_=n($,"LI",{});var v6e=s(b_);hle=n(v6e,"STRONG",{});var Cet=s(hle);q7o=r(Cet,"sew-d"),Cet.forEach(t),N7o=r(v6e," \u2014 "),Rq=n(v6e,"A",{href:!0});var wet=s(Rq);j7o=r(wet,"SEWDModel"),wet.forEach(t),D7o=r(v6e," (SEW-D model)"),v6e.forEach(t),G7o=i($),v_=n($,"LI",{});var F6e=s(v_);ple=n(F6e,"STRONG",{});var Aet=s(ple);O7o=r(Aet,"speech_to_text"),Aet.forEach(t),V7o=r(F6e," \u2014 "),Pq=n(F6e,"A",{href:!0});var yet=s(Pq);X7o=r(yet,"Speech2TextModel"),yet.forEach(t),z7o=r(F6e," (Speech2Text model)"),F6e.forEach(t),W7o=i($),F_=n($,"LI",{});var T6e=s(F_);_le=n(T6e,"STRONG",{});var Let=s(_le);Q7o=r(Let,"splinter"),Let.forEach(t),H7o=r(T6e," \u2014 "),Bq=n(T6e,"A",{href:!0});var xet=s(Bq);U7o=r(xet,"SplinterModel"),xet.forEach(t),J7o=r(T6e," (Splinter model)"),T6e.forEach(t),Y7o=i($),T_=n($,"LI",{});var M6e=s(T_);ule=n(M6e,"STRONG",{});var $et=s(ule);K7o=r($et,"squeezebert"),$et.forEach(t),Z7o=r(M6e," \u2014 "),Iq=n(M6e,"A",{href:!0});var ket=s(Iq);ebo=r(ket,"SqueezeBertModel"),ket.forEach(t),obo=r(M6e," (SqueezeBERT model)"),M6e.forEach(t),rbo=i($),M_=n($,"LI",{});var E6e=s(M_);ble=n(E6e,"STRONG",{});var Set=s(ble);tbo=r(Set,"swin"),Set.forEach(t),abo=r(E6e," \u2014 "),qq=n(E6e,"A",{href:!0});var Ret=s(qq);nbo=r(Ret,"SwinModel"),Ret.forEach(t),sbo=r(E6e," (Swin model)"),E6e.forEach(t),lbo=i($),E_=n($,"LI",{});var C6e=s(E_);vle=n(C6e,"STRONG",{});var Pet=s(vle);ibo=r(Pet,"t5"),Pet.forEach(t),dbo=r(C6e," \u2014 "),Nq=n(C6e,"A",{href:!0});var Bet=s(Nq);cbo=r(Bet,"T5Model"),Bet.forEach(t),fbo=r(C6e," (T5 model)"),C6e.forEach(t),mbo=i($),C_=n($,"LI",{});var w6e=s(C_);Fle=n(w6e,"STRONG",{});var Iet=s(Fle);gbo=r(Iet,"tapas"),Iet.forEach(t),hbo=r(w6e," \u2014 "),jq=n(w6e,"A",{href:!0});var qet=s(jq);pbo=r(qet,"TapasModel"),qet.forEach(t),_bo=r(w6e," (TAPAS model)"),w6e.forEach(t),ubo=i($),w_=n($,"LI",{});var A6e=s(w_);Tle=n(A6e,"STRONG",{});var Net=s(Tle);bbo=r(Net,"trajectory_transformer"),Net.forEach(t),vbo=r(A6e," \u2014 "),Dq=n(A6e,"A",{href:!0});var jet=s(Dq);Fbo=r(jet,"TrajectoryTransformerModel"),jet.forEach(t),Tbo=r(A6e," (Trajectory Transformer model)"),A6e.forEach(t),Mbo=i($),A_=n($,"LI",{});var y6e=s(A_);Mle=n(y6e,"STRONG",{});var Det=s(Mle);Ebo=r(Det,"transfo-xl"),Det.forEach(t),Cbo=r(y6e," \u2014 "),Gq=n(y6e,"A",{href:!0});var Get=s(Gq);wbo=r(Get,"TransfoXLModel"),Get.forEach(t),Abo=r(y6e," (Transformer-XL model)"),y6e.forEach(t),ybo=i($),y_=n($,"LI",{});var L6e=s(y_);Ele=n(L6e,"STRONG",{});var Oet=s(Ele);Lbo=r(Oet,"unispeech"),Oet.forEach(t),xbo=r(L6e," \u2014 "),Oq=n(L6e,"A",{href:!0});var Vet=s(Oq);$bo=r(Vet,"UniSpeechModel"),Vet.forEach(t),kbo=r(L6e," (UniSpeech model)"),L6e.forEach(t),Sbo=i($),L_=n($,"LI",{});var x6e=s(L_);Cle=n(x6e,"STRONG",{});var Xet=s(Cle);Rbo=r(Xet,"unispeech-sat"),Xet.forEach(t),Pbo=r(x6e," \u2014 "),Vq=n(x6e,"A",{href:!0});var zet=s(Vq);Bbo=r(zet,"UniSpeechSatModel"),zet.forEach(t),Ibo=r(x6e," (UniSpeechSat model)"),x6e.forEach(t),qbo=i($),x_=n($,"LI",{});var $6e=s(x_);wle=n($6e,"STRONG",{});var Wet=s(wle);Nbo=r(Wet,"van"),Wet.forEach(t),jbo=r($6e," \u2014 "),Xq=n($6e,"A",{href:!0});var Qet=s(Xq);Dbo=r(Qet,"VanModel"),Qet.forEach(t),Gbo=r($6e," (VAN model)"),$6e.forEach(t),Obo=i($),$_=n($,"LI",{});var k6e=s($_);Ale=n(k6e,"STRONG",{});var Het=s(Ale);Vbo=r(Het,"vilt"),Het.forEach(t),Xbo=r(k6e," \u2014 "),zq=n(k6e,"A",{href:!0});var Uet=s(zq);zbo=r(Uet,"ViltModel"),Uet.forEach(t),Wbo=r(k6e," (ViLT model)"),k6e.forEach(t),Qbo=i($),k_=n($,"LI",{});var S6e=s(k_);yle=n(S6e,"STRONG",{});var Jet=s(yle);Hbo=r(Jet,"vision-text-dual-encoder"),Jet.forEach(t),Ubo=r(S6e," \u2014 "),Wq=n(S6e,"A",{href:!0});var Yet=s(Wq);Jbo=r(Yet,"VisionTextDualEncoderModel"),Yet.forEach(t),Ybo=r(S6e," (VisionTextDualEncoder model)"),S6e.forEach(t),Kbo=i($),S_=n($,"LI",{});var R6e=s(S_);Lle=n(R6e,"STRONG",{});var Ket=s(Lle);Zbo=r(Ket,"visual_bert"),Ket.forEach(t),evo=r(R6e," \u2014 "),Qq=n(R6e,"A",{href:!0});var Zet=s(Qq);ovo=r(Zet,"VisualBertModel"),Zet.forEach(t),rvo=r(R6e," (VisualBert model)"),R6e.forEach(t),tvo=i($),R_=n($,"LI",{});var P6e=s(R_);xle=n(P6e,"STRONG",{});var eot=s(xle);avo=r(eot,"vit"),eot.forEach(t),nvo=r(P6e," \u2014 "),Hq=n(P6e,"A",{href:!0});var oot=s(Hq);svo=r(oot,"ViTModel"),oot.forEach(t),lvo=r(P6e," (ViT model)"),P6e.forEach(t),ivo=i($),P_=n($,"LI",{});var B6e=s(P_);$le=n(B6e,"STRONG",{});var rot=s($le);dvo=r(rot,"vit_mae"),rot.forEach(t),cvo=r(B6e," \u2014 "),Uq=n(B6e,"A",{href:!0});var tot=s(Uq);fvo=r(tot,"ViTMAEModel"),tot.forEach(t),mvo=r(B6e," (ViTMAE model)"),B6e.forEach(t),gvo=i($),B_=n($,"LI",{});var I6e=s(B_);kle=n(I6e,"STRONG",{});var aot=s(kle);hvo=r(aot,"wav2vec2"),aot.forEach(t),pvo=r(I6e," \u2014 "),Jq=n(I6e,"A",{href:!0});var not=s(Jq);_vo=r(not,"Wav2Vec2Model"),not.forEach(t),uvo=r(I6e," (Wav2Vec2 model)"),I6e.forEach(t),bvo=i($),I_=n($,"LI",{});var q6e=s(I_);Sle=n(q6e,"STRONG",{});var sot=s(Sle);vvo=r(sot,"wav2vec2-conformer"),sot.forEach(t),Fvo=r(q6e," \u2014 "),Yq=n(q6e,"A",{href:!0});var lot=s(Yq);Tvo=r(lot,"Wav2Vec2ConformerModel"),lot.forEach(t),Mvo=r(q6e," (Wav2Vec2-Conformer model)"),q6e.forEach(t),Evo=i($),q_=n($,"LI",{});var N6e=s(q_);Rle=n(N6e,"STRONG",{});var iot=s(Rle);Cvo=r(iot,"wavlm"),iot.forEach(t),wvo=r(N6e," \u2014 "),Kq=n(N6e,"A",{href:!0});var dot=s(Kq);Avo=r(dot,"WavLMModel"),dot.forEach(t),yvo=r(N6e," (WavLM model)"),N6e.forEach(t),Lvo=i($),N_=n($,"LI",{});var j6e=s(N_);Ple=n(j6e,"STRONG",{});var cot=s(Ple);xvo=r(cot,"xglm"),cot.forEach(t),$vo=r(j6e," \u2014 "),Zq=n(j6e,"A",{href:!0});var fot=s(Zq);kvo=r(fot,"XGLMModel"),fot.forEach(t),Svo=r(j6e," (XGLM model)"),j6e.forEach(t),Rvo=i($),j_=n($,"LI",{});var D6e=s(j_);Ble=n(D6e,"STRONG",{});var mot=s(Ble);Pvo=r(mot,"xlm"),mot.forEach(t),Bvo=r(D6e," \u2014 "),eN=n(D6e,"A",{href:!0});var got=s(eN);Ivo=r(got,"XLMModel"),got.forEach(t),qvo=r(D6e," (XLM model)"),D6e.forEach(t),Nvo=i($),D_=n($,"LI",{});var G6e=s(D_);Ile=n(G6e,"STRONG",{});var hot=s(Ile);jvo=r(hot,"xlm-prophetnet"),hot.forEach(t),Dvo=r(G6e," \u2014 "),oN=n(G6e,"A",{href:!0});var pot=s(oN);Gvo=r(pot,"XLMProphetNetModel"),pot.forEach(t),Ovo=r(G6e," (XLMProphetNet model)"),G6e.forEach(t),Vvo=i($),G_=n($,"LI",{});var O6e=s(G_);qle=n(O6e,"STRONG",{});var _ot=s(qle);Xvo=r(_ot,"xlm-roberta"),_ot.forEach(t),zvo=r(O6e," \u2014 "),rN=n(O6e,"A",{href:!0});var uot=s(rN);Wvo=r(uot,"XLMRobertaModel"),uot.forEach(t),Qvo=r(O6e," (XLM-RoBERTa model)"),O6e.forEach(t),Hvo=i($),O_=n($,"LI",{});var V6e=s(O_);Nle=n(V6e,"STRONG",{});var bot=s(Nle);Uvo=r(bot,"xlm-roberta-xl"),bot.forEach(t),Jvo=r(V6e," \u2014 "),tN=n(V6e,"A",{href:!0});var vot=s(tN);Yvo=r(vot,"XLMRobertaXLModel"),vot.forEach(t),Kvo=r(V6e," (XLM-RoBERTa-XL model)"),V6e.forEach(t),Zvo=i($),V_=n($,"LI",{});var X6e=s(V_);jle=n(X6e,"STRONG",{});var Fot=s(jle);eFo=r(Fot,"xlnet"),Fot.forEach(t),oFo=r(X6e," \u2014 "),aN=n(X6e,"A",{href:!0});var Tot=s(aN);rFo=r(Tot,"XLNetModel"),Tot.forEach(t),tFo=r(X6e," (XLNet model)"),X6e.forEach(t),aFo=i($),X_=n($,"LI",{});var z6e=s(X_);Dle=n(z6e,"STRONG",{});var Mot=s(Dle);nFo=r(Mot,"yolos"),Mot.forEach(t),sFo=r(z6e," \u2014 "),nN=n(z6e,"A",{href:!0});var Eot=s(nN);lFo=r(Eot,"YolosModel"),Eot.forEach(t),iFo=r(z6e," (YOLOS model)"),z6e.forEach(t),dFo=i($),z_=n($,"LI",{});var W6e=s(z_);Gle=n(W6e,"STRONG",{});var Cot=s(Gle);cFo=r(Cot,"yoso"),Cot.forEach(t),fFo=r(W6e," \u2014 "),sN=n(W6e,"A",{href:!0});var wot=s(sN);mFo=r(wot,"YosoModel"),wot.forEach(t),gFo=r(W6e," (YOSO model)"),W6e.forEach(t),$.forEach(t),hFo=i(oa),W_=n(oa,"P",{});var Q6e=s(W_);pFo=r(Q6e,"The model is set in evaluation mode by default using "),Ole=n(Q6e,"CODE",{});var Aot=s(Ole);_Fo=r(Aot,"model.eval()"),Aot.forEach(t),uFo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vle=n(Q6e,"CODE",{});var yot=s(Vle);bFo=r(yot,"model.train()"),yot.forEach(t),Q6e.forEach(t),vFo=i(oa),T(Q_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),$qe=i(f),yi=n(f,"H2",{class:!0});var Pje=s(yi);H_=n(Pje,"A",{id:!0,class:!0,href:!0});var Lot=s(H_);Xle=n(Lot,"SPAN",{});var xot=s(Xle);T(U6.$$.fragment,xot),xot.forEach(t),Lot.forEach(t),FFo=i(Pje),zle=n(Pje,"SPAN",{});var $ot=s(zle);TFo=r($ot,"AutoModelForPreTraining"),$ot.forEach(t),Pje.forEach(t),kqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(J6.$$.fragment,Gs),MFo=i(Gs),Li=n(Gs,"P",{});var YK=s(Li);EFo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lN=n(YK,"A",{href:!0});var kot=s(lN);CFo=r(kot,"from_pretrained()"),kot.forEach(t),wFo=r(YK," class method or the "),iN=n(YK,"A",{href:!0});var Sot=s(iN);AFo=r(Sot,"from_config()"),Sot.forEach(t),yFo=r(YK,` class
method.`),YK.forEach(t),LFo=i(Gs),Y6=n(Gs,"P",{});var Bje=s(Y6);xFo=r(Bje,"This class cannot be instantiated directly using "),Wle=n(Bje,"CODE",{});var Rot=s(Wle);$Fo=r(Rot,"__init__()"),Rot.forEach(t),kFo=r(Bje," (throws an error)."),Bje.forEach(t),SFo=i(Gs),at=n(Gs,"DIV",{class:!0});var C0=s(at);T(K6.$$.fragment,C0),RFo=i(C0),Qle=n(C0,"P",{});var Pot=s(Qle);PFo=r(Pot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pot.forEach(t),BFo=i(C0),xi=n(C0,"P",{});var KK=s(xi);IFo=r(KK,`Note:
Loading a model from its configuration file does `),Hle=n(KK,"STRONG",{});var Bot=s(Hle);qFo=r(Bot,"not"),Bot.forEach(t),NFo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(KK,"A",{href:!0});var Iot=s(dN);jFo=r(Iot,"from_pretrained()"),Iot.forEach(t),DFo=r(KK," to load the model weights."),KK.forEach(t),GFo=i(C0),T(U_.$$.fragment,C0),C0.forEach(t),OFo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Z6.$$.fragment,ra),VFo=i(ra),Ule=n(ra,"P",{});var qot=s(Ule);XFo=r(qot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qot.forEach(t),zFo=i(ra),xa=n(ra,"P",{});var w0=s(xa);WFo=r(w0,"The model class to instantiate is selected based on the "),Jle=n(w0,"CODE",{});var Not=s(Jle);QFo=r(Not,"model_type"),Not.forEach(t),HFo=r(w0,` property of the config object (either
passed as an argument or loaded from `),Yle=n(w0,"CODE",{});var jot=s(Yle);UFo=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),JFo=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=n(w0,"CODE",{});var Dot=s(Kle);YFo=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),KFo=r(w0,":"),w0.forEach(t),ZFo=i(ra),G=n(ra,"UL",{});var O=s(G);J_=n(O,"LI",{});var H6e=s(J_);Zle=n(H6e,"STRONG",{});var Got=s(Zle);eTo=r(Got,"albert"),Got.forEach(t),oTo=r(H6e," \u2014 "),cN=n(H6e,"A",{href:!0});var Oot=s(cN);rTo=r(Oot,"AlbertForPreTraining"),Oot.forEach(t),tTo=r(H6e," (ALBERT model)"),H6e.forEach(t),aTo=i(O),Y_=n(O,"LI",{});var U6e=s(Y_);eie=n(U6e,"STRONG",{});var Vot=s(eie);nTo=r(Vot,"bart"),Vot.forEach(t),sTo=r(U6e," \u2014 "),fN=n(U6e,"A",{href:!0});var Xot=s(fN);lTo=r(Xot,"BartForConditionalGeneration"),Xot.forEach(t),iTo=r(U6e," (BART model)"),U6e.forEach(t),dTo=i(O),K_=n(O,"LI",{});var J6e=s(K_);oie=n(J6e,"STRONG",{});var zot=s(oie);cTo=r(zot,"bert"),zot.forEach(t),fTo=r(J6e," \u2014 "),mN=n(J6e,"A",{href:!0});var Wot=s(mN);mTo=r(Wot,"BertForPreTraining"),Wot.forEach(t),gTo=r(J6e," (BERT model)"),J6e.forEach(t),hTo=i(O),Z_=n(O,"LI",{});var Y6e=s(Z_);rie=n(Y6e,"STRONG",{});var Qot=s(rie);pTo=r(Qot,"big_bird"),Qot.forEach(t),_To=r(Y6e," \u2014 "),gN=n(Y6e,"A",{href:!0});var Hot=s(gN);uTo=r(Hot,"BigBirdForPreTraining"),Hot.forEach(t),bTo=r(Y6e," (BigBird model)"),Y6e.forEach(t),vTo=i(O),eu=n(O,"LI",{});var K6e=s(eu);tie=n(K6e,"STRONG",{});var Uot=s(tie);FTo=r(Uot,"camembert"),Uot.forEach(t),TTo=r(K6e," \u2014 "),hN=n(K6e,"A",{href:!0});var Jot=s(hN);MTo=r(Jot,"CamembertForMaskedLM"),Jot.forEach(t),ETo=r(K6e," (CamemBERT model)"),K6e.forEach(t),CTo=i(O),ou=n(O,"LI",{});var Z6e=s(ou);aie=n(Z6e,"STRONG",{});var Yot=s(aie);wTo=r(Yot,"ctrl"),Yot.forEach(t),ATo=r(Z6e," \u2014 "),pN=n(Z6e,"A",{href:!0});var Kot=s(pN);yTo=r(Kot,"CTRLLMHeadModel"),Kot.forEach(t),LTo=r(Z6e," (CTRL model)"),Z6e.forEach(t),xTo=i(O),ru=n(O,"LI",{});var eye=s(ru);nie=n(eye,"STRONG",{});var Zot=s(nie);$To=r(Zot,"data2vec-text"),Zot.forEach(t),kTo=r(eye," \u2014 "),_N=n(eye,"A",{href:!0});var ert=s(_N);STo=r(ert,"Data2VecTextForMaskedLM"),ert.forEach(t),RTo=r(eye," (Data2VecText model)"),eye.forEach(t),PTo=i(O),tu=n(O,"LI",{});var oye=s(tu);sie=n(oye,"STRONG",{});var ort=s(sie);BTo=r(ort,"deberta"),ort.forEach(t),ITo=r(oye," \u2014 "),uN=n(oye,"A",{href:!0});var rrt=s(uN);qTo=r(rrt,"DebertaForMaskedLM"),rrt.forEach(t),NTo=r(oye," (DeBERTa model)"),oye.forEach(t),jTo=i(O),au=n(O,"LI",{});var rye=s(au);lie=n(rye,"STRONG",{});var trt=s(lie);DTo=r(trt,"deberta-v2"),trt.forEach(t),GTo=r(rye," \u2014 "),bN=n(rye,"A",{href:!0});var art=s(bN);OTo=r(art,"DebertaV2ForMaskedLM"),art.forEach(t),VTo=r(rye," (DeBERTa-v2 model)"),rye.forEach(t),XTo=i(O),nu=n(O,"LI",{});var tye=s(nu);iie=n(tye,"STRONG",{});var nrt=s(iie);zTo=r(nrt,"distilbert"),nrt.forEach(t),WTo=r(tye," \u2014 "),vN=n(tye,"A",{href:!0});var srt=s(vN);QTo=r(srt,"DistilBertForMaskedLM"),srt.forEach(t),HTo=r(tye," (DistilBERT model)"),tye.forEach(t),UTo=i(O),su=n(O,"LI",{});var aye=s(su);die=n(aye,"STRONG",{});var lrt=s(die);JTo=r(lrt,"electra"),lrt.forEach(t),YTo=r(aye," \u2014 "),FN=n(aye,"A",{href:!0});var irt=s(FN);KTo=r(irt,"ElectraForPreTraining"),irt.forEach(t),ZTo=r(aye," (ELECTRA model)"),aye.forEach(t),eMo=i(O),lu=n(O,"LI",{});var nye=s(lu);cie=n(nye,"STRONG",{});var drt=s(cie);oMo=r(drt,"flaubert"),drt.forEach(t),rMo=r(nye," \u2014 "),TN=n(nye,"A",{href:!0});var crt=s(TN);tMo=r(crt,"FlaubertWithLMHeadModel"),crt.forEach(t),aMo=r(nye," (FlauBERT model)"),nye.forEach(t),nMo=i(O),iu=n(O,"LI",{});var sye=s(iu);fie=n(sye,"STRONG",{});var frt=s(fie);sMo=r(frt,"flava"),frt.forEach(t),lMo=r(sye," \u2014 "),MN=n(sye,"A",{href:!0});var mrt=s(MN);iMo=r(mrt,"FlavaForPreTraining"),mrt.forEach(t),dMo=r(sye," (Flava model)"),sye.forEach(t),cMo=i(O),du=n(O,"LI",{});var lye=s(du);mie=n(lye,"STRONG",{});var grt=s(mie);fMo=r(grt,"fnet"),grt.forEach(t),mMo=r(lye," \u2014 "),EN=n(lye,"A",{href:!0});var hrt=s(EN);gMo=r(hrt,"FNetForPreTraining"),hrt.forEach(t),hMo=r(lye," (FNet model)"),lye.forEach(t),pMo=i(O),cu=n(O,"LI",{});var iye=s(cu);gie=n(iye,"STRONG",{});var prt=s(gie);_Mo=r(prt,"fsmt"),prt.forEach(t),uMo=r(iye," \u2014 "),CN=n(iye,"A",{href:!0});var _rt=s(CN);bMo=r(_rt,"FSMTForConditionalGeneration"),_rt.forEach(t),vMo=r(iye," (FairSeq Machine-Translation model)"),iye.forEach(t),FMo=i(O),fu=n(O,"LI",{});var dye=s(fu);hie=n(dye,"STRONG",{});var urt=s(hie);TMo=r(urt,"funnel"),urt.forEach(t),MMo=r(dye," \u2014 "),wN=n(dye,"A",{href:!0});var brt=s(wN);EMo=r(brt,"FunnelForPreTraining"),brt.forEach(t),CMo=r(dye," (Funnel Transformer model)"),dye.forEach(t),wMo=i(O),mu=n(O,"LI",{});var cye=s(mu);pie=n(cye,"STRONG",{});var vrt=s(pie);AMo=r(vrt,"gpt2"),vrt.forEach(t),yMo=r(cye," \u2014 "),AN=n(cye,"A",{href:!0});var Frt=s(AN);LMo=r(Frt,"GPT2LMHeadModel"),Frt.forEach(t),xMo=r(cye," (OpenAI GPT-2 model)"),cye.forEach(t),$Mo=i(O),gu=n(O,"LI",{});var fye=s(gu);_ie=n(fye,"STRONG",{});var Trt=s(_ie);kMo=r(Trt,"ibert"),Trt.forEach(t),SMo=r(fye," \u2014 "),yN=n(fye,"A",{href:!0});var Mrt=s(yN);RMo=r(Mrt,"IBertForMaskedLM"),Mrt.forEach(t),PMo=r(fye," (I-BERT model)"),fye.forEach(t),BMo=i(O),hu=n(O,"LI",{});var mye=s(hu);uie=n(mye,"STRONG",{});var Ert=s(uie);IMo=r(Ert,"layoutlm"),Ert.forEach(t),qMo=r(mye," \u2014 "),LN=n(mye,"A",{href:!0});var Crt=s(LN);NMo=r(Crt,"LayoutLMForMaskedLM"),Crt.forEach(t),jMo=r(mye," (LayoutLM model)"),mye.forEach(t),DMo=i(O),pu=n(O,"LI",{});var gye=s(pu);bie=n(gye,"STRONG",{});var wrt=s(bie);GMo=r(wrt,"longformer"),wrt.forEach(t),OMo=r(gye," \u2014 "),xN=n(gye,"A",{href:!0});var Art=s(xN);VMo=r(Art,"LongformerForMaskedLM"),Art.forEach(t),XMo=r(gye," (Longformer model)"),gye.forEach(t),zMo=i(O),_u=n(O,"LI",{});var hye=s(_u);vie=n(hye,"STRONG",{});var yrt=s(vie);WMo=r(yrt,"lxmert"),yrt.forEach(t),QMo=r(hye," \u2014 "),$N=n(hye,"A",{href:!0});var Lrt=s($N);HMo=r(Lrt,"LxmertForPreTraining"),Lrt.forEach(t),UMo=r(hye," (LXMERT model)"),hye.forEach(t),JMo=i(O),uu=n(O,"LI",{});var pye=s(uu);Fie=n(pye,"STRONG",{});var xrt=s(Fie);YMo=r(xrt,"megatron-bert"),xrt.forEach(t),KMo=r(pye," \u2014 "),kN=n(pye,"A",{href:!0});var $rt=s(kN);ZMo=r($rt,"MegatronBertForPreTraining"),$rt.forEach(t),e4o=r(pye," (MegatronBert model)"),pye.forEach(t),o4o=i(O),bu=n(O,"LI",{});var _ye=s(bu);Tie=n(_ye,"STRONG",{});var krt=s(Tie);r4o=r(krt,"mobilebert"),krt.forEach(t),t4o=r(_ye," \u2014 "),SN=n(_ye,"A",{href:!0});var Srt=s(SN);a4o=r(Srt,"MobileBertForPreTraining"),Srt.forEach(t),n4o=r(_ye," (MobileBERT model)"),_ye.forEach(t),s4o=i(O),vu=n(O,"LI",{});var uye=s(vu);Mie=n(uye,"STRONG",{});var Rrt=s(Mie);l4o=r(Rrt,"mpnet"),Rrt.forEach(t),i4o=r(uye," \u2014 "),RN=n(uye,"A",{href:!0});var Prt=s(RN);d4o=r(Prt,"MPNetForMaskedLM"),Prt.forEach(t),c4o=r(uye," (MPNet model)"),uye.forEach(t),f4o=i(O),Fu=n(O,"LI",{});var bye=s(Fu);Eie=n(bye,"STRONG",{});var Brt=s(Eie);m4o=r(Brt,"openai-gpt"),Brt.forEach(t),g4o=r(bye," \u2014 "),PN=n(bye,"A",{href:!0});var Irt=s(PN);h4o=r(Irt,"OpenAIGPTLMHeadModel"),Irt.forEach(t),p4o=r(bye," (OpenAI GPT model)"),bye.forEach(t),_4o=i(O),Tu=n(O,"LI",{});var vye=s(Tu);Cie=n(vye,"STRONG",{});var qrt=s(Cie);u4o=r(qrt,"retribert"),qrt.forEach(t),b4o=r(vye," \u2014 "),BN=n(vye,"A",{href:!0});var Nrt=s(BN);v4o=r(Nrt,"RetriBertModel"),Nrt.forEach(t),F4o=r(vye," (RetriBERT model)"),vye.forEach(t),T4o=i(O),Mu=n(O,"LI",{});var Fye=s(Mu);wie=n(Fye,"STRONG",{});var jrt=s(wie);M4o=r(jrt,"roberta"),jrt.forEach(t),E4o=r(Fye," \u2014 "),IN=n(Fye,"A",{href:!0});var Drt=s(IN);C4o=r(Drt,"RobertaForMaskedLM"),Drt.forEach(t),w4o=r(Fye," (RoBERTa model)"),Fye.forEach(t),A4o=i(O),Eu=n(O,"LI",{});var Tye=s(Eu);Aie=n(Tye,"STRONG",{});var Grt=s(Aie);y4o=r(Grt,"splinter"),Grt.forEach(t),L4o=r(Tye," \u2014 "),qN=n(Tye,"A",{href:!0});var Ort=s(qN);x4o=r(Ort,"SplinterForPreTraining"),Ort.forEach(t),$4o=r(Tye," (Splinter model)"),Tye.forEach(t),k4o=i(O),Cu=n(O,"LI",{});var Mye=s(Cu);yie=n(Mye,"STRONG",{});var Vrt=s(yie);S4o=r(Vrt,"squeezebert"),Vrt.forEach(t),R4o=r(Mye," \u2014 "),NN=n(Mye,"A",{href:!0});var Xrt=s(NN);P4o=r(Xrt,"SqueezeBertForMaskedLM"),Xrt.forEach(t),B4o=r(Mye," (SqueezeBERT model)"),Mye.forEach(t),I4o=i(O),wu=n(O,"LI",{});var Eye=s(wu);Lie=n(Eye,"STRONG",{});var zrt=s(Lie);q4o=r(zrt,"t5"),zrt.forEach(t),N4o=r(Eye," \u2014 "),jN=n(Eye,"A",{href:!0});var Wrt=s(jN);j4o=r(Wrt,"T5ForConditionalGeneration"),Wrt.forEach(t),D4o=r(Eye," (T5 model)"),Eye.forEach(t),G4o=i(O),Au=n(O,"LI",{});var Cye=s(Au);xie=n(Cye,"STRONG",{});var Qrt=s(xie);O4o=r(Qrt,"tapas"),Qrt.forEach(t),V4o=r(Cye," \u2014 "),DN=n(Cye,"A",{href:!0});var Hrt=s(DN);X4o=r(Hrt,"TapasForMaskedLM"),Hrt.forEach(t),z4o=r(Cye," (TAPAS model)"),Cye.forEach(t),W4o=i(O),yu=n(O,"LI",{});var wye=s(yu);$ie=n(wye,"STRONG",{});var Urt=s($ie);Q4o=r(Urt,"transfo-xl"),Urt.forEach(t),H4o=r(wye," \u2014 "),GN=n(wye,"A",{href:!0});var Jrt=s(GN);U4o=r(Jrt,"TransfoXLLMHeadModel"),Jrt.forEach(t),J4o=r(wye," (Transformer-XL model)"),wye.forEach(t),Y4o=i(O),Lu=n(O,"LI",{});var Aye=s(Lu);kie=n(Aye,"STRONG",{});var Yrt=s(kie);K4o=r(Yrt,"unispeech"),Yrt.forEach(t),Z4o=r(Aye," \u2014 "),ON=n(Aye,"A",{href:!0});var Krt=s(ON);eEo=r(Krt,"UniSpeechForPreTraining"),Krt.forEach(t),oEo=r(Aye," (UniSpeech model)"),Aye.forEach(t),rEo=i(O),xu=n(O,"LI",{});var yye=s(xu);Sie=n(yye,"STRONG",{});var Zrt=s(Sie);tEo=r(Zrt,"unispeech-sat"),Zrt.forEach(t),aEo=r(yye," \u2014 "),VN=n(yye,"A",{href:!0});var ett=s(VN);nEo=r(ett,"UniSpeechSatForPreTraining"),ett.forEach(t),sEo=r(yye," (UniSpeechSat model)"),yye.forEach(t),lEo=i(O),$u=n(O,"LI",{});var Lye=s($u);Rie=n(Lye,"STRONG",{});var ott=s(Rie);iEo=r(ott,"visual_bert"),ott.forEach(t),dEo=r(Lye," \u2014 "),XN=n(Lye,"A",{href:!0});var rtt=s(XN);cEo=r(rtt,"VisualBertForPreTraining"),rtt.forEach(t),fEo=r(Lye," (VisualBert model)"),Lye.forEach(t),mEo=i(O),ku=n(O,"LI",{});var xye=s(ku);Pie=n(xye,"STRONG",{});var ttt=s(Pie);gEo=r(ttt,"vit_mae"),ttt.forEach(t),hEo=r(xye," \u2014 "),zN=n(xye,"A",{href:!0});var att=s(zN);pEo=r(att,"ViTMAEForPreTraining"),att.forEach(t),_Eo=r(xye," (ViTMAE model)"),xye.forEach(t),uEo=i(O),Su=n(O,"LI",{});var $ye=s(Su);Bie=n($ye,"STRONG",{});var ntt=s(Bie);bEo=r(ntt,"wav2vec2"),ntt.forEach(t),vEo=r($ye," \u2014 "),WN=n($ye,"A",{href:!0});var stt=s(WN);FEo=r(stt,"Wav2Vec2ForPreTraining"),stt.forEach(t),TEo=r($ye," (Wav2Vec2 model)"),$ye.forEach(t),MEo=i(O),Ru=n(O,"LI",{});var kye=s(Ru);Iie=n(kye,"STRONG",{});var ltt=s(Iie);EEo=r(ltt,"wav2vec2-conformer"),ltt.forEach(t),CEo=r(kye," \u2014 "),QN=n(kye,"A",{href:!0});var itt=s(QN);wEo=r(itt,"Wav2Vec2ConformerForPreTraining"),itt.forEach(t),AEo=r(kye," (Wav2Vec2-Conformer model)"),kye.forEach(t),yEo=i(O),Pu=n(O,"LI",{});var Sye=s(Pu);qie=n(Sye,"STRONG",{});var dtt=s(qie);LEo=r(dtt,"xlm"),dtt.forEach(t),xEo=r(Sye," \u2014 "),HN=n(Sye,"A",{href:!0});var ctt=s(HN);$Eo=r(ctt,"XLMWithLMHeadModel"),ctt.forEach(t),kEo=r(Sye," (XLM model)"),Sye.forEach(t),SEo=i(O),Bu=n(O,"LI",{});var Rye=s(Bu);Nie=n(Rye,"STRONG",{});var ftt=s(Nie);REo=r(ftt,"xlm-roberta"),ftt.forEach(t),PEo=r(Rye," \u2014 "),UN=n(Rye,"A",{href:!0});var mtt=s(UN);BEo=r(mtt,"XLMRobertaForMaskedLM"),mtt.forEach(t),IEo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),qEo=i(O),Iu=n(O,"LI",{});var Pye=s(Iu);jie=n(Pye,"STRONG",{});var gtt=s(jie);NEo=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),jEo=r(Pye," \u2014 "),JN=n(Pye,"A",{href:!0});var htt=s(JN);DEo=r(htt,"XLMRobertaXLForMaskedLM"),htt.forEach(t),GEo=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),OEo=i(O),qu=n(O,"LI",{});var Bye=s(qu);Die=n(Bye,"STRONG",{});var ptt=s(Die);VEo=r(ptt,"xlnet"),ptt.forEach(t),XEo=r(Bye," \u2014 "),YN=n(Bye,"A",{href:!0});var _tt=s(YN);zEo=r(_tt,"XLNetLMHeadModel"),_tt.forEach(t),WEo=r(Bye," (XLNet model)"),Bye.forEach(t),O.forEach(t),QEo=i(ra),Nu=n(ra,"P",{});var Iye=s(Nu);HEo=r(Iye,"The model is set in evaluation mode by default using "),Gie=n(Iye,"CODE",{});var utt=s(Gie);UEo=r(utt,"model.eval()"),utt.forEach(t),JEo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=n(Iye,"CODE",{});var btt=s(Oie);YEo=r(btt,"model.train()"),btt.forEach(t),Iye.forEach(t),KEo=i(ra),T(ju.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Sqe=i(f),$i=n(f,"H2",{class:!0});var Ije=s($i);Du=n(Ije,"A",{id:!0,class:!0,href:!0});var vtt=s(Du);Vie=n(vtt,"SPAN",{});var Ftt=s(Vie);T(ey.$$.fragment,Ftt),Ftt.forEach(t),vtt.forEach(t),ZEo=i(Ije),Xie=n(Ije,"SPAN",{});var Ttt=s(Xie);eCo=r(Ttt,"AutoModelForCausalLM"),Ttt.forEach(t),Ije.forEach(t),Rqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(oy.$$.fragment,Os),oCo=i(Os),ki=n(Os,"P",{});var ZK=s(ki);rCo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KN=n(ZK,"A",{href:!0});var Mtt=s(KN);tCo=r(Mtt,"from_pretrained()"),Mtt.forEach(t),aCo=r(ZK," class method or the "),ZN=n(ZK,"A",{href:!0});var Ett=s(ZN);nCo=r(Ett,"from_config()"),Ett.forEach(t),sCo=r(ZK,` class
method.`),ZK.forEach(t),lCo=i(Os),ry=n(Os,"P",{});var qje=s(ry);iCo=r(qje,"This class cannot be instantiated directly using "),zie=n(qje,"CODE",{});var Ctt=s(zie);dCo=r(Ctt,"__init__()"),Ctt.forEach(t),cCo=r(qje," (throws an error)."),qje.forEach(t),fCo=i(Os),nt=n(Os,"DIV",{class:!0});var A0=s(nt);T(ty.$$.fragment,A0),mCo=i(A0),Wie=n(A0,"P",{});var wtt=s(Wie);gCo=r(wtt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wtt.forEach(t),hCo=i(A0),Si=n(A0,"P",{});var eZ=s(Si);pCo=r(eZ,`Note:
Loading a model from its configuration file does `),Qie=n(eZ,"STRONG",{});var Att=s(Qie);_Co=r(Att,"not"),Att.forEach(t),uCo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(eZ,"A",{href:!0});var ytt=s(ej);bCo=r(ytt,"from_pretrained()"),ytt.forEach(t),vCo=r(eZ," to load the model weights."),eZ.forEach(t),FCo=i(A0),T(Gu.$$.fragment,A0),A0.forEach(t),TCo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(ay.$$.fragment,ta),MCo=i(ta),Hie=n(ta,"P",{});var Ltt=s(Hie);ECo=r(Ltt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ltt.forEach(t),CCo=i(ta),$a=n(ta,"P",{});var y0=s($a);wCo=r(y0,"The model class to instantiate is selected based on the "),Uie=n(y0,"CODE",{});var xtt=s(Uie);ACo=r(xtt,"model_type"),xtt.forEach(t),yCo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Jie=n(y0,"CODE",{});var $tt=s(Jie);LCo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),xCo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=n(y0,"CODE",{});var ktt=s(Yie);$Co=r(ktt,"pretrained_model_name_or_path"),ktt.forEach(t),kCo=r(y0,":"),y0.forEach(t),SCo=i(ta),z=n(ta,"UL",{});var Q=s(z);Ou=n(Q,"LI",{});var qye=s(Ou);Kie=n(qye,"STRONG",{});var Stt=s(Kie);RCo=r(Stt,"bart"),Stt.forEach(t),PCo=r(qye," \u2014 "),oj=n(qye,"A",{href:!0});var Rtt=s(oj);BCo=r(Rtt,"BartForCausalLM"),Rtt.forEach(t),ICo=r(qye," (BART model)"),qye.forEach(t),qCo=i(Q),Vu=n(Q,"LI",{});var Nye=s(Vu);Zie=n(Nye,"STRONG",{});var Ptt=s(Zie);NCo=r(Ptt,"bert"),Ptt.forEach(t),jCo=r(Nye," \u2014 "),rj=n(Nye,"A",{href:!0});var Btt=s(rj);DCo=r(Btt,"BertLMHeadModel"),Btt.forEach(t),GCo=r(Nye," (BERT model)"),Nye.forEach(t),OCo=i(Q),Xu=n(Q,"LI",{});var jye=s(Xu);ede=n(jye,"STRONG",{});var Itt=s(ede);VCo=r(Itt,"bert-generation"),Itt.forEach(t),XCo=r(jye," \u2014 "),tj=n(jye,"A",{href:!0});var qtt=s(tj);zCo=r(qtt,"BertGenerationDecoder"),qtt.forEach(t),WCo=r(jye," (Bert Generation model)"),jye.forEach(t),QCo=i(Q),zu=n(Q,"LI",{});var Dye=s(zu);ode=n(Dye,"STRONG",{});var Ntt=s(ode);HCo=r(Ntt,"big_bird"),Ntt.forEach(t),UCo=r(Dye," \u2014 "),aj=n(Dye,"A",{href:!0});var jtt=s(aj);JCo=r(jtt,"BigBirdForCausalLM"),jtt.forEach(t),YCo=r(Dye," (BigBird model)"),Dye.forEach(t),KCo=i(Q),Wu=n(Q,"LI",{});var Gye=s(Wu);rde=n(Gye,"STRONG",{});var Dtt=s(rde);ZCo=r(Dtt,"bigbird_pegasus"),Dtt.forEach(t),e5o=r(Gye," \u2014 "),nj=n(Gye,"A",{href:!0});var Gtt=s(nj);o5o=r(Gtt,"BigBirdPegasusForCausalLM"),Gtt.forEach(t),r5o=r(Gye," (BigBirdPegasus model)"),Gye.forEach(t),t5o=i(Q),Qu=n(Q,"LI",{});var Oye=s(Qu);tde=n(Oye,"STRONG",{});var Ott=s(tde);a5o=r(Ott,"blenderbot"),Ott.forEach(t),n5o=r(Oye," \u2014 "),sj=n(Oye,"A",{href:!0});var Vtt=s(sj);s5o=r(Vtt,"BlenderbotForCausalLM"),Vtt.forEach(t),l5o=r(Oye," (Blenderbot model)"),Oye.forEach(t),i5o=i(Q),Hu=n(Q,"LI",{});var Vye=s(Hu);ade=n(Vye,"STRONG",{});var Xtt=s(ade);d5o=r(Xtt,"blenderbot-small"),Xtt.forEach(t),c5o=r(Vye," \u2014 "),lj=n(Vye,"A",{href:!0});var ztt=s(lj);f5o=r(ztt,"BlenderbotSmallForCausalLM"),ztt.forEach(t),m5o=r(Vye," (BlenderbotSmall model)"),Vye.forEach(t),g5o=i(Q),Uu=n(Q,"LI",{});var Xye=s(Uu);nde=n(Xye,"STRONG",{});var Wtt=s(nde);h5o=r(Wtt,"camembert"),Wtt.forEach(t),p5o=r(Xye," \u2014 "),ij=n(Xye,"A",{href:!0});var Qtt=s(ij);_5o=r(Qtt,"CamembertForCausalLM"),Qtt.forEach(t),u5o=r(Xye," (CamemBERT model)"),Xye.forEach(t),b5o=i(Q),Ju=n(Q,"LI",{});var zye=s(Ju);sde=n(zye,"STRONG",{});var Htt=s(sde);v5o=r(Htt,"ctrl"),Htt.forEach(t),F5o=r(zye," \u2014 "),dj=n(zye,"A",{href:!0});var Utt=s(dj);T5o=r(Utt,"CTRLLMHeadModel"),Utt.forEach(t),M5o=r(zye," (CTRL model)"),zye.forEach(t),E5o=i(Q),Yu=n(Q,"LI",{});var Wye=s(Yu);lde=n(Wye,"STRONG",{});var Jtt=s(lde);C5o=r(Jtt,"data2vec-text"),Jtt.forEach(t),w5o=r(Wye," \u2014 "),cj=n(Wye,"A",{href:!0});var Ytt=s(cj);A5o=r(Ytt,"Data2VecTextForCausalLM"),Ytt.forEach(t),y5o=r(Wye," (Data2VecText model)"),Wye.forEach(t),L5o=i(Q),Ku=n(Q,"LI",{});var Qye=s(Ku);ide=n(Qye,"STRONG",{});var Ktt=s(ide);x5o=r(Ktt,"electra"),Ktt.forEach(t),$5o=r(Qye," \u2014 "),fj=n(Qye,"A",{href:!0});var Ztt=s(fj);k5o=r(Ztt,"ElectraForCausalLM"),Ztt.forEach(t),S5o=r(Qye," (ELECTRA model)"),Qye.forEach(t),R5o=i(Q),Zu=n(Q,"LI",{});var Hye=s(Zu);dde=n(Hye,"STRONG",{});var eat=s(dde);P5o=r(eat,"gpt2"),eat.forEach(t),B5o=r(Hye," \u2014 "),mj=n(Hye,"A",{href:!0});var oat=s(mj);I5o=r(oat,"GPT2LMHeadModel"),oat.forEach(t),q5o=r(Hye," (OpenAI GPT-2 model)"),Hye.forEach(t),N5o=i(Q),e2=n(Q,"LI",{});var Uye=s(e2);cde=n(Uye,"STRONG",{});var rat=s(cde);j5o=r(rat,"gpt_neo"),rat.forEach(t),D5o=r(Uye," \u2014 "),gj=n(Uye,"A",{href:!0});var tat=s(gj);G5o=r(tat,"GPTNeoForCausalLM"),tat.forEach(t),O5o=r(Uye," (GPT Neo model)"),Uye.forEach(t),V5o=i(Q),o2=n(Q,"LI",{});var Jye=s(o2);fde=n(Jye,"STRONG",{});var aat=s(fde);X5o=r(aat,"gptj"),aat.forEach(t),z5o=r(Jye," \u2014 "),hj=n(Jye,"A",{href:!0});var nat=s(hj);W5o=r(nat,"GPTJForCausalLM"),nat.forEach(t),Q5o=r(Jye," (GPT-J model)"),Jye.forEach(t),H5o=i(Q),r2=n(Q,"LI",{});var Yye=s(r2);mde=n(Yye,"STRONG",{});var sat=s(mde);U5o=r(sat,"marian"),sat.forEach(t),J5o=r(Yye," \u2014 "),pj=n(Yye,"A",{href:!0});var lat=s(pj);Y5o=r(lat,"MarianForCausalLM"),lat.forEach(t),K5o=r(Yye," (Marian model)"),Yye.forEach(t),Z5o=i(Q),t2=n(Q,"LI",{});var Kye=s(t2);gde=n(Kye,"STRONG",{});var iat=s(gde);e3o=r(iat,"mbart"),iat.forEach(t),o3o=r(Kye," \u2014 "),_j=n(Kye,"A",{href:!0});var dat=s(_j);r3o=r(dat,"MBartForCausalLM"),dat.forEach(t),t3o=r(Kye," (mBART model)"),Kye.forEach(t),a3o=i(Q),a2=n(Q,"LI",{});var Zye=s(a2);hde=n(Zye,"STRONG",{});var cat=s(hde);n3o=r(cat,"megatron-bert"),cat.forEach(t),s3o=r(Zye," \u2014 "),uj=n(Zye,"A",{href:!0});var fat=s(uj);l3o=r(fat,"MegatronBertForCausalLM"),fat.forEach(t),i3o=r(Zye," (MegatronBert model)"),Zye.forEach(t),d3o=i(Q),n2=n(Q,"LI",{});var eLe=s(n2);pde=n(eLe,"STRONG",{});var mat=s(pde);c3o=r(mat,"openai-gpt"),mat.forEach(t),f3o=r(eLe," \u2014 "),bj=n(eLe,"A",{href:!0});var gat=s(bj);m3o=r(gat,"OpenAIGPTLMHeadModel"),gat.forEach(t),g3o=r(eLe," (OpenAI GPT model)"),eLe.forEach(t),h3o=i(Q),s2=n(Q,"LI",{});var oLe=s(s2);_de=n(oLe,"STRONG",{});var hat=s(_de);p3o=r(hat,"opt"),hat.forEach(t),_3o=r(oLe," \u2014 "),vj=n(oLe,"A",{href:!0});var pat=s(vj);u3o=r(pat,"OPTForCausalLM"),pat.forEach(t),b3o=r(oLe," (OPT model)"),oLe.forEach(t),v3o=i(Q),l2=n(Q,"LI",{});var rLe=s(l2);ude=n(rLe,"STRONG",{});var _at=s(ude);F3o=r(_at,"pegasus"),_at.forEach(t),T3o=r(rLe," \u2014 "),Fj=n(rLe,"A",{href:!0});var uat=s(Fj);M3o=r(uat,"PegasusForCausalLM"),uat.forEach(t),E3o=r(rLe," (Pegasus model)"),rLe.forEach(t),C3o=i(Q),i2=n(Q,"LI",{});var tLe=s(i2);bde=n(tLe,"STRONG",{});var bat=s(bde);w3o=r(bat,"plbart"),bat.forEach(t),A3o=r(tLe," \u2014 "),Tj=n(tLe,"A",{href:!0});var vat=s(Tj);y3o=r(vat,"PLBartForCausalLM"),vat.forEach(t),L3o=r(tLe," (PLBart model)"),tLe.forEach(t),x3o=i(Q),d2=n(Q,"LI",{});var aLe=s(d2);vde=n(aLe,"STRONG",{});var Fat=s(vde);$3o=r(Fat,"prophetnet"),Fat.forEach(t),k3o=r(aLe," \u2014 "),Mj=n(aLe,"A",{href:!0});var Tat=s(Mj);S3o=r(Tat,"ProphetNetForCausalLM"),Tat.forEach(t),R3o=r(aLe," (ProphetNet model)"),aLe.forEach(t),P3o=i(Q),c2=n(Q,"LI",{});var nLe=s(c2);Fde=n(nLe,"STRONG",{});var Mat=s(Fde);B3o=r(Mat,"qdqbert"),Mat.forEach(t),I3o=r(nLe," \u2014 "),Ej=n(nLe,"A",{href:!0});var Eat=s(Ej);q3o=r(Eat,"QDQBertLMHeadModel"),Eat.forEach(t),N3o=r(nLe," (QDQBert model)"),nLe.forEach(t),j3o=i(Q),f2=n(Q,"LI",{});var sLe=s(f2);Tde=n(sLe,"STRONG",{});var Cat=s(Tde);D3o=r(Cat,"reformer"),Cat.forEach(t),G3o=r(sLe," \u2014 "),Cj=n(sLe,"A",{href:!0});var wat=s(Cj);O3o=r(wat,"ReformerModelWithLMHead"),wat.forEach(t),V3o=r(sLe," (Reformer model)"),sLe.forEach(t),X3o=i(Q),m2=n(Q,"LI",{});var lLe=s(m2);Mde=n(lLe,"STRONG",{});var Aat=s(Mde);z3o=r(Aat,"rembert"),Aat.forEach(t),W3o=r(lLe," \u2014 "),wj=n(lLe,"A",{href:!0});var yat=s(wj);Q3o=r(yat,"RemBertForCausalLM"),yat.forEach(t),H3o=r(lLe," (RemBERT model)"),lLe.forEach(t),U3o=i(Q),g2=n(Q,"LI",{});var iLe=s(g2);Ede=n(iLe,"STRONG",{});var Lat=s(Ede);J3o=r(Lat,"roberta"),Lat.forEach(t),Y3o=r(iLe," \u2014 "),Aj=n(iLe,"A",{href:!0});var xat=s(Aj);K3o=r(xat,"RobertaForCausalLM"),xat.forEach(t),Z3o=r(iLe," (RoBERTa model)"),iLe.forEach(t),ewo=i(Q),h2=n(Q,"LI",{});var dLe=s(h2);Cde=n(dLe,"STRONG",{});var $at=s(Cde);owo=r($at,"roformer"),$at.forEach(t),rwo=r(dLe," \u2014 "),yj=n(dLe,"A",{href:!0});var kat=s(yj);two=r(kat,"RoFormerForCausalLM"),kat.forEach(t),awo=r(dLe," (RoFormer model)"),dLe.forEach(t),nwo=i(Q),p2=n(Q,"LI",{});var cLe=s(p2);wde=n(cLe,"STRONG",{});var Sat=s(wde);swo=r(Sat,"speech_to_text_2"),Sat.forEach(t),lwo=r(cLe," \u2014 "),Lj=n(cLe,"A",{href:!0});var Rat=s(Lj);iwo=r(Rat,"Speech2Text2ForCausalLM"),Rat.forEach(t),dwo=r(cLe," (Speech2Text2 model)"),cLe.forEach(t),cwo=i(Q),_2=n(Q,"LI",{});var fLe=s(_2);Ade=n(fLe,"STRONG",{});var Pat=s(Ade);fwo=r(Pat,"transfo-xl"),Pat.forEach(t),mwo=r(fLe," \u2014 "),xj=n(fLe,"A",{href:!0});var Bat=s(xj);gwo=r(Bat,"TransfoXLLMHeadModel"),Bat.forEach(t),hwo=r(fLe," (Transformer-XL model)"),fLe.forEach(t),pwo=i(Q),u2=n(Q,"LI",{});var mLe=s(u2);yde=n(mLe,"STRONG",{});var Iat=s(yde);_wo=r(Iat,"trocr"),Iat.forEach(t),uwo=r(mLe," \u2014 "),$j=n(mLe,"A",{href:!0});var qat=s($j);bwo=r(qat,"TrOCRForCausalLM"),qat.forEach(t),vwo=r(mLe," (TrOCR model)"),mLe.forEach(t),Fwo=i(Q),b2=n(Q,"LI",{});var gLe=s(b2);Lde=n(gLe,"STRONG",{});var Nat=s(Lde);Two=r(Nat,"xglm"),Nat.forEach(t),Mwo=r(gLe," \u2014 "),kj=n(gLe,"A",{href:!0});var jat=s(kj);Ewo=r(jat,"XGLMForCausalLM"),jat.forEach(t),Cwo=r(gLe," (XGLM model)"),gLe.forEach(t),wwo=i(Q),v2=n(Q,"LI",{});var hLe=s(v2);xde=n(hLe,"STRONG",{});var Dat=s(xde);Awo=r(Dat,"xlm"),Dat.forEach(t),ywo=r(hLe," \u2014 "),Sj=n(hLe,"A",{href:!0});var Gat=s(Sj);Lwo=r(Gat,"XLMWithLMHeadModel"),Gat.forEach(t),xwo=r(hLe," (XLM model)"),hLe.forEach(t),$wo=i(Q),F2=n(Q,"LI",{});var pLe=s(F2);$de=n(pLe,"STRONG",{});var Oat=s($de);kwo=r(Oat,"xlm-prophetnet"),Oat.forEach(t),Swo=r(pLe," \u2014 "),Rj=n(pLe,"A",{href:!0});var Vat=s(Rj);Rwo=r(Vat,"XLMProphetNetForCausalLM"),Vat.forEach(t),Pwo=r(pLe," (XLMProphetNet model)"),pLe.forEach(t),Bwo=i(Q),T2=n(Q,"LI",{});var _Le=s(T2);kde=n(_Le,"STRONG",{});var Xat=s(kde);Iwo=r(Xat,"xlm-roberta"),Xat.forEach(t),qwo=r(_Le," \u2014 "),Pj=n(_Le,"A",{href:!0});var zat=s(Pj);Nwo=r(zat,"XLMRobertaForCausalLM"),zat.forEach(t),jwo=r(_Le," (XLM-RoBERTa model)"),_Le.forEach(t),Dwo=i(Q),M2=n(Q,"LI",{});var uLe=s(M2);Sde=n(uLe,"STRONG",{});var Wat=s(Sde);Gwo=r(Wat,"xlm-roberta-xl"),Wat.forEach(t),Owo=r(uLe," \u2014 "),Bj=n(uLe,"A",{href:!0});var Qat=s(Bj);Vwo=r(Qat,"XLMRobertaXLForCausalLM"),Qat.forEach(t),Xwo=r(uLe," (XLM-RoBERTa-XL model)"),uLe.forEach(t),zwo=i(Q),E2=n(Q,"LI",{});var bLe=s(E2);Rde=n(bLe,"STRONG",{});var Hat=s(Rde);Wwo=r(Hat,"xlnet"),Hat.forEach(t),Qwo=r(bLe," \u2014 "),Ij=n(bLe,"A",{href:!0});var Uat=s(Ij);Hwo=r(Uat,"XLNetLMHeadModel"),Uat.forEach(t),Uwo=r(bLe," (XLNet model)"),bLe.forEach(t),Q.forEach(t),Jwo=i(ta),C2=n(ta,"P",{});var vLe=s(C2);Ywo=r(vLe,"The model is set in evaluation mode by default using "),Pde=n(vLe,"CODE",{});var Jat=s(Pde);Kwo=r(Jat,"model.eval()"),Jat.forEach(t),Zwo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(vLe,"CODE",{});var Yat=s(Bde);e0o=r(Yat,"model.train()"),Yat.forEach(t),vLe.forEach(t),o0o=i(ta),T(w2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Pqe=i(f),Ri=n(f,"H2",{class:!0});var Nje=s(Ri);A2=n(Nje,"A",{id:!0,class:!0,href:!0});var Kat=s(A2);Ide=n(Kat,"SPAN",{});var Zat=s(Ide);T(ny.$$.fragment,Zat),Zat.forEach(t),Kat.forEach(t),r0o=i(Nje),qde=n(Nje,"SPAN",{});var ent=s(qde);t0o=r(ent,"AutoModelForMaskedLM"),ent.forEach(t),Nje.forEach(t),Bqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(sy.$$.fragment,Vs),a0o=i(Vs),Pi=n(Vs,"P",{});var oZ=s(Pi);n0o=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qj=n(oZ,"A",{href:!0});var ont=s(qj);s0o=r(ont,"from_pretrained()"),ont.forEach(t),l0o=r(oZ," class method or the "),Nj=n(oZ,"A",{href:!0});var rnt=s(Nj);i0o=r(rnt,"from_config()"),rnt.forEach(t),d0o=r(oZ,` class
method.`),oZ.forEach(t),c0o=i(Vs),ly=n(Vs,"P",{});var jje=s(ly);f0o=r(jje,"This class cannot be instantiated directly using "),Nde=n(jje,"CODE",{});var tnt=s(Nde);m0o=r(tnt,"__init__()"),tnt.forEach(t),g0o=r(jje," (throws an error)."),jje.forEach(t),h0o=i(Vs),st=n(Vs,"DIV",{class:!0});var L0=s(st);T(iy.$$.fragment,L0),p0o=i(L0),jde=n(L0,"P",{});var ant=s(jde);_0o=r(ant,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ant.forEach(t),u0o=i(L0),Bi=n(L0,"P",{});var rZ=s(Bi);b0o=r(rZ,`Note:
Loading a model from its configuration file does `),Dde=n(rZ,"STRONG",{});var nnt=s(Dde);v0o=r(nnt,"not"),nnt.forEach(t),F0o=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jj=n(rZ,"A",{href:!0});var snt=s(jj);T0o=r(snt,"from_pretrained()"),snt.forEach(t),M0o=r(rZ," to load the model weights."),rZ.forEach(t),E0o=i(L0),T(y2.$$.fragment,L0),L0.forEach(t),C0o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(dy.$$.fragment,aa),w0o=i(aa),Gde=n(aa,"P",{});var lnt=s(Gde);A0o=r(lnt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lnt.forEach(t),y0o=i(aa),ka=n(aa,"P",{});var x0=s(ka);L0o=r(x0,"The model class to instantiate is selected based on the "),Ode=n(x0,"CODE",{});var int=s(Ode);x0o=r(int,"model_type"),int.forEach(t),$0o=r(x0,` property of the config object (either
passed as an argument or loaded from `),Vde=n(x0,"CODE",{});var dnt=s(Vde);k0o=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),S0o=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(x0,"CODE",{});var cnt=s(Xde);R0o=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),P0o=r(x0,":"),x0.forEach(t),B0o=i(aa),W=n(aa,"UL",{});var H=s(W);L2=n(H,"LI",{});var FLe=s(L2);zde=n(FLe,"STRONG",{});var fnt=s(zde);I0o=r(fnt,"albert"),fnt.forEach(t),q0o=r(FLe," \u2014 "),Dj=n(FLe,"A",{href:!0});var mnt=s(Dj);N0o=r(mnt,"AlbertForMaskedLM"),mnt.forEach(t),j0o=r(FLe," (ALBERT model)"),FLe.forEach(t),D0o=i(H),x2=n(H,"LI",{});var TLe=s(x2);Wde=n(TLe,"STRONG",{});var gnt=s(Wde);G0o=r(gnt,"bart"),gnt.forEach(t),O0o=r(TLe," \u2014 "),Gj=n(TLe,"A",{href:!0});var hnt=s(Gj);V0o=r(hnt,"BartForConditionalGeneration"),hnt.forEach(t),X0o=r(TLe," (BART model)"),TLe.forEach(t),z0o=i(H),$2=n(H,"LI",{});var MLe=s($2);Qde=n(MLe,"STRONG",{});var pnt=s(Qde);W0o=r(pnt,"bert"),pnt.forEach(t),Q0o=r(MLe," \u2014 "),Oj=n(MLe,"A",{href:!0});var _nt=s(Oj);H0o=r(_nt,"BertForMaskedLM"),_nt.forEach(t),U0o=r(MLe," (BERT model)"),MLe.forEach(t),J0o=i(H),k2=n(H,"LI",{});var ELe=s(k2);Hde=n(ELe,"STRONG",{});var unt=s(Hde);Y0o=r(unt,"big_bird"),unt.forEach(t),K0o=r(ELe," \u2014 "),Vj=n(ELe,"A",{href:!0});var bnt=s(Vj);Z0o=r(bnt,"BigBirdForMaskedLM"),bnt.forEach(t),eAo=r(ELe," (BigBird model)"),ELe.forEach(t),oAo=i(H),S2=n(H,"LI",{});var CLe=s(S2);Ude=n(CLe,"STRONG",{});var vnt=s(Ude);rAo=r(vnt,"camembert"),vnt.forEach(t),tAo=r(CLe," \u2014 "),Xj=n(CLe,"A",{href:!0});var Fnt=s(Xj);aAo=r(Fnt,"CamembertForMaskedLM"),Fnt.forEach(t),nAo=r(CLe," (CamemBERT model)"),CLe.forEach(t),sAo=i(H),R2=n(H,"LI",{});var wLe=s(R2);Jde=n(wLe,"STRONG",{});var Tnt=s(Jde);lAo=r(Tnt,"convbert"),Tnt.forEach(t),iAo=r(wLe," \u2014 "),zj=n(wLe,"A",{href:!0});var Mnt=s(zj);dAo=r(Mnt,"ConvBertForMaskedLM"),Mnt.forEach(t),cAo=r(wLe," (ConvBERT model)"),wLe.forEach(t),fAo=i(H),P2=n(H,"LI",{});var ALe=s(P2);Yde=n(ALe,"STRONG",{});var Ent=s(Yde);mAo=r(Ent,"data2vec-text"),Ent.forEach(t),gAo=r(ALe," \u2014 "),Wj=n(ALe,"A",{href:!0});var Cnt=s(Wj);hAo=r(Cnt,"Data2VecTextForMaskedLM"),Cnt.forEach(t),pAo=r(ALe," (Data2VecText model)"),ALe.forEach(t),_Ao=i(H),B2=n(H,"LI",{});var yLe=s(B2);Kde=n(yLe,"STRONG",{});var wnt=s(Kde);uAo=r(wnt,"deberta"),wnt.forEach(t),bAo=r(yLe," \u2014 "),Qj=n(yLe,"A",{href:!0});var Ant=s(Qj);vAo=r(Ant,"DebertaForMaskedLM"),Ant.forEach(t),FAo=r(yLe," (DeBERTa model)"),yLe.forEach(t),TAo=i(H),I2=n(H,"LI",{});var LLe=s(I2);Zde=n(LLe,"STRONG",{});var ynt=s(Zde);MAo=r(ynt,"deberta-v2"),ynt.forEach(t),EAo=r(LLe," \u2014 "),Hj=n(LLe,"A",{href:!0});var Lnt=s(Hj);CAo=r(Lnt,"DebertaV2ForMaskedLM"),Lnt.forEach(t),wAo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),AAo=i(H),q2=n(H,"LI",{});var xLe=s(q2);ece=n(xLe,"STRONG",{});var xnt=s(ece);yAo=r(xnt,"distilbert"),xnt.forEach(t),LAo=r(xLe," \u2014 "),Uj=n(xLe,"A",{href:!0});var $nt=s(Uj);xAo=r($nt,"DistilBertForMaskedLM"),$nt.forEach(t),$Ao=r(xLe," (DistilBERT model)"),xLe.forEach(t),kAo=i(H),N2=n(H,"LI",{});var $Le=s(N2);oce=n($Le,"STRONG",{});var knt=s(oce);SAo=r(knt,"electra"),knt.forEach(t),RAo=r($Le," \u2014 "),Jj=n($Le,"A",{href:!0});var Snt=s(Jj);PAo=r(Snt,"ElectraForMaskedLM"),Snt.forEach(t),BAo=r($Le," (ELECTRA model)"),$Le.forEach(t),IAo=i(H),j2=n(H,"LI",{});var kLe=s(j2);rce=n(kLe,"STRONG",{});var Rnt=s(rce);qAo=r(Rnt,"flaubert"),Rnt.forEach(t),NAo=r(kLe," \u2014 "),Yj=n(kLe,"A",{href:!0});var Pnt=s(Yj);jAo=r(Pnt,"FlaubertWithLMHeadModel"),Pnt.forEach(t),DAo=r(kLe," (FlauBERT model)"),kLe.forEach(t),GAo=i(H),D2=n(H,"LI",{});var SLe=s(D2);tce=n(SLe,"STRONG",{});var Bnt=s(tce);OAo=r(Bnt,"fnet"),Bnt.forEach(t),VAo=r(SLe," \u2014 "),Kj=n(SLe,"A",{href:!0});var Int=s(Kj);XAo=r(Int,"FNetForMaskedLM"),Int.forEach(t),zAo=r(SLe," (FNet model)"),SLe.forEach(t),WAo=i(H),G2=n(H,"LI",{});var RLe=s(G2);ace=n(RLe,"STRONG",{});var qnt=s(ace);QAo=r(qnt,"funnel"),qnt.forEach(t),HAo=r(RLe," \u2014 "),Zj=n(RLe,"A",{href:!0});var Nnt=s(Zj);UAo=r(Nnt,"FunnelForMaskedLM"),Nnt.forEach(t),JAo=r(RLe," (Funnel Transformer model)"),RLe.forEach(t),YAo=i(H),O2=n(H,"LI",{});var PLe=s(O2);nce=n(PLe,"STRONG",{});var jnt=s(nce);KAo=r(jnt,"ibert"),jnt.forEach(t),ZAo=r(PLe," \u2014 "),eD=n(PLe,"A",{href:!0});var Dnt=s(eD);e6o=r(Dnt,"IBertForMaskedLM"),Dnt.forEach(t),o6o=r(PLe," (I-BERT model)"),PLe.forEach(t),r6o=i(H),V2=n(H,"LI",{});var BLe=s(V2);sce=n(BLe,"STRONG",{});var Gnt=s(sce);t6o=r(Gnt,"layoutlm"),Gnt.forEach(t),a6o=r(BLe," \u2014 "),oD=n(BLe,"A",{href:!0});var Ont=s(oD);n6o=r(Ont,"LayoutLMForMaskedLM"),Ont.forEach(t),s6o=r(BLe," (LayoutLM model)"),BLe.forEach(t),l6o=i(H),X2=n(H,"LI",{});var ILe=s(X2);lce=n(ILe,"STRONG",{});var Vnt=s(lce);i6o=r(Vnt,"longformer"),Vnt.forEach(t),d6o=r(ILe," \u2014 "),rD=n(ILe,"A",{href:!0});var Xnt=s(rD);c6o=r(Xnt,"LongformerForMaskedLM"),Xnt.forEach(t),f6o=r(ILe," (Longformer model)"),ILe.forEach(t),m6o=i(H),z2=n(H,"LI",{});var qLe=s(z2);ice=n(qLe,"STRONG",{});var znt=s(ice);g6o=r(znt,"mbart"),znt.forEach(t),h6o=r(qLe," \u2014 "),tD=n(qLe,"A",{href:!0});var Wnt=s(tD);p6o=r(Wnt,"MBartForConditionalGeneration"),Wnt.forEach(t),_6o=r(qLe," (mBART model)"),qLe.forEach(t),u6o=i(H),W2=n(H,"LI",{});var NLe=s(W2);dce=n(NLe,"STRONG",{});var Qnt=s(dce);b6o=r(Qnt,"megatron-bert"),Qnt.forEach(t),v6o=r(NLe," \u2014 "),aD=n(NLe,"A",{href:!0});var Hnt=s(aD);F6o=r(Hnt,"MegatronBertForMaskedLM"),Hnt.forEach(t),T6o=r(NLe," (MegatronBert model)"),NLe.forEach(t),M6o=i(H),Q2=n(H,"LI",{});var jLe=s(Q2);cce=n(jLe,"STRONG",{});var Unt=s(cce);E6o=r(Unt,"mobilebert"),Unt.forEach(t),C6o=r(jLe," \u2014 "),nD=n(jLe,"A",{href:!0});var Jnt=s(nD);w6o=r(Jnt,"MobileBertForMaskedLM"),Jnt.forEach(t),A6o=r(jLe," (MobileBERT model)"),jLe.forEach(t),y6o=i(H),H2=n(H,"LI",{});var DLe=s(H2);fce=n(DLe,"STRONG",{});var Ynt=s(fce);L6o=r(Ynt,"mpnet"),Ynt.forEach(t),x6o=r(DLe," \u2014 "),sD=n(DLe,"A",{href:!0});var Knt=s(sD);$6o=r(Knt,"MPNetForMaskedLM"),Knt.forEach(t),k6o=r(DLe," (MPNet model)"),DLe.forEach(t),S6o=i(H),U2=n(H,"LI",{});var GLe=s(U2);mce=n(GLe,"STRONG",{});var Znt=s(mce);R6o=r(Znt,"nystromformer"),Znt.forEach(t),P6o=r(GLe," \u2014 "),lD=n(GLe,"A",{href:!0});var est=s(lD);B6o=r(est,"NystromformerForMaskedLM"),est.forEach(t),I6o=r(GLe," (Nystromformer model)"),GLe.forEach(t),q6o=i(H),J2=n(H,"LI",{});var OLe=s(J2);gce=n(OLe,"STRONG",{});var ost=s(gce);N6o=r(ost,"perceiver"),ost.forEach(t),j6o=r(OLe," \u2014 "),iD=n(OLe,"A",{href:!0});var rst=s(iD);D6o=r(rst,"PerceiverForMaskedLM"),rst.forEach(t),G6o=r(OLe," (Perceiver model)"),OLe.forEach(t),O6o=i(H),Y2=n(H,"LI",{});var VLe=s(Y2);hce=n(VLe,"STRONG",{});var tst=s(hce);V6o=r(tst,"qdqbert"),tst.forEach(t),X6o=r(VLe," \u2014 "),dD=n(VLe,"A",{href:!0});var ast=s(dD);z6o=r(ast,"QDQBertForMaskedLM"),ast.forEach(t),W6o=r(VLe," (QDQBert model)"),VLe.forEach(t),Q6o=i(H),K2=n(H,"LI",{});var XLe=s(K2);pce=n(XLe,"STRONG",{});var nst=s(pce);H6o=r(nst,"reformer"),nst.forEach(t),U6o=r(XLe," \u2014 "),cD=n(XLe,"A",{href:!0});var sst=s(cD);J6o=r(sst,"ReformerForMaskedLM"),sst.forEach(t),Y6o=r(XLe," (Reformer model)"),XLe.forEach(t),K6o=i(H),Z2=n(H,"LI",{});var zLe=s(Z2);_ce=n(zLe,"STRONG",{});var lst=s(_ce);Z6o=r(lst,"rembert"),lst.forEach(t),eyo=r(zLe," \u2014 "),fD=n(zLe,"A",{href:!0});var ist=s(fD);oyo=r(ist,"RemBertForMaskedLM"),ist.forEach(t),ryo=r(zLe," (RemBERT model)"),zLe.forEach(t),tyo=i(H),e1=n(H,"LI",{});var WLe=s(e1);uce=n(WLe,"STRONG",{});var dst=s(uce);ayo=r(dst,"roberta"),dst.forEach(t),nyo=r(WLe," \u2014 "),mD=n(WLe,"A",{href:!0});var cst=s(mD);syo=r(cst,"RobertaForMaskedLM"),cst.forEach(t),lyo=r(WLe," (RoBERTa model)"),WLe.forEach(t),iyo=i(H),o1=n(H,"LI",{});var QLe=s(o1);bce=n(QLe,"STRONG",{});var fst=s(bce);dyo=r(fst,"roformer"),fst.forEach(t),cyo=r(QLe," \u2014 "),gD=n(QLe,"A",{href:!0});var mst=s(gD);fyo=r(mst,"RoFormerForMaskedLM"),mst.forEach(t),myo=r(QLe," (RoFormer model)"),QLe.forEach(t),gyo=i(H),r1=n(H,"LI",{});var HLe=s(r1);vce=n(HLe,"STRONG",{});var gst=s(vce);hyo=r(gst,"squeezebert"),gst.forEach(t),pyo=r(HLe," \u2014 "),hD=n(HLe,"A",{href:!0});var hst=s(hD);_yo=r(hst,"SqueezeBertForMaskedLM"),hst.forEach(t),uyo=r(HLe," (SqueezeBERT model)"),HLe.forEach(t),byo=i(H),t1=n(H,"LI",{});var ULe=s(t1);Fce=n(ULe,"STRONG",{});var pst=s(Fce);vyo=r(pst,"tapas"),pst.forEach(t),Fyo=r(ULe," \u2014 "),pD=n(ULe,"A",{href:!0});var _st=s(pD);Tyo=r(_st,"TapasForMaskedLM"),_st.forEach(t),Myo=r(ULe," (TAPAS model)"),ULe.forEach(t),Eyo=i(H),a1=n(H,"LI",{});var JLe=s(a1);Tce=n(JLe,"STRONG",{});var ust=s(Tce);Cyo=r(ust,"wav2vec2"),ust.forEach(t),wyo=r(JLe," \u2014 "),Mce=n(JLe,"CODE",{});var bst=s(Mce);Ayo=r(bst,"Wav2Vec2ForMaskedLM"),bst.forEach(t),yyo=r(JLe," (Wav2Vec2 model)"),JLe.forEach(t),Lyo=i(H),n1=n(H,"LI",{});var YLe=s(n1);Ece=n(YLe,"STRONG",{});var vst=s(Ece);xyo=r(vst,"xlm"),vst.forEach(t),$yo=r(YLe," \u2014 "),_D=n(YLe,"A",{href:!0});var Fst=s(_D);kyo=r(Fst,"XLMWithLMHeadModel"),Fst.forEach(t),Syo=r(YLe," (XLM model)"),YLe.forEach(t),Ryo=i(H),s1=n(H,"LI",{});var KLe=s(s1);Cce=n(KLe,"STRONG",{});var Tst=s(Cce);Pyo=r(Tst,"xlm-roberta"),Tst.forEach(t),Byo=r(KLe," \u2014 "),uD=n(KLe,"A",{href:!0});var Mst=s(uD);Iyo=r(Mst,"XLMRobertaForMaskedLM"),Mst.forEach(t),qyo=r(KLe," (XLM-RoBERTa model)"),KLe.forEach(t),Nyo=i(H),l1=n(H,"LI",{});var ZLe=s(l1);wce=n(ZLe,"STRONG",{});var Est=s(wce);jyo=r(Est,"xlm-roberta-xl"),Est.forEach(t),Dyo=r(ZLe," \u2014 "),bD=n(ZLe,"A",{href:!0});var Cst=s(bD);Gyo=r(Cst,"XLMRobertaXLForMaskedLM"),Cst.forEach(t),Oyo=r(ZLe," (XLM-RoBERTa-XL model)"),ZLe.forEach(t),Vyo=i(H),i1=n(H,"LI",{});var e8e=s(i1);Ace=n(e8e,"STRONG",{});var wst=s(Ace);Xyo=r(wst,"yoso"),wst.forEach(t),zyo=r(e8e," \u2014 "),vD=n(e8e,"A",{href:!0});var Ast=s(vD);Wyo=r(Ast,"YosoForMaskedLM"),Ast.forEach(t),Qyo=r(e8e," (YOSO model)"),e8e.forEach(t),H.forEach(t),Hyo=i(aa),d1=n(aa,"P",{});var o8e=s(d1);Uyo=r(o8e,"The model is set in evaluation mode by default using "),yce=n(o8e,"CODE",{});var yst=s(yce);Jyo=r(yst,"model.eval()"),yst.forEach(t),Yyo=r(o8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(o8e,"CODE",{});var Lst=s(Lce);Kyo=r(Lst,"model.train()"),Lst.forEach(t),o8e.forEach(t),Zyo=i(aa),T(c1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Iqe=i(f),Ii=n(f,"H2",{class:!0});var Dje=s(Ii);f1=n(Dje,"A",{id:!0,class:!0,href:!0});var xst=s(f1);xce=n(xst,"SPAN",{});var $st=s(xce);T(cy.$$.fragment,$st),$st.forEach(t),xst.forEach(t),eLo=i(Dje),$ce=n(Dje,"SPAN",{});var kst=s($ce);oLo=r(kst,"AutoModelForSeq2SeqLM"),kst.forEach(t),Dje.forEach(t),qqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(fy.$$.fragment,Xs),rLo=i(Xs),qi=n(Xs,"P",{});var tZ=s(qi);tLo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FD=n(tZ,"A",{href:!0});var Sst=s(FD);aLo=r(Sst,"from_pretrained()"),Sst.forEach(t),nLo=r(tZ," class method or the "),TD=n(tZ,"A",{href:!0});var Rst=s(TD);sLo=r(Rst,"from_config()"),Rst.forEach(t),lLo=r(tZ,` class
method.`),tZ.forEach(t),iLo=i(Xs),my=n(Xs,"P",{});var Gje=s(my);dLo=r(Gje,"This class cannot be instantiated directly using "),kce=n(Gje,"CODE",{});var Pst=s(kce);cLo=r(Pst,"__init__()"),Pst.forEach(t),fLo=r(Gje," (throws an error)."),Gje.forEach(t),mLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var $0=s(lt);T(gy.$$.fragment,$0),gLo=i($0),Sce=n($0,"P",{});var Bst=s(Sce);hLo=r(Bst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bst.forEach(t),pLo=i($0),Ni=n($0,"P",{});var aZ=s(Ni);_Lo=r(aZ,`Note:
Loading a model from its configuration file does `),Rce=n(aZ,"STRONG",{});var Ist=s(Rce);uLo=r(Ist,"not"),Ist.forEach(t),bLo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(aZ,"A",{href:!0});var qst=s(MD);vLo=r(qst,"from_pretrained()"),qst.forEach(t),FLo=r(aZ," to load the model weights."),aZ.forEach(t),TLo=i($0),T(m1.$$.fragment,$0),$0.forEach(t),MLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(hy.$$.fragment,na),ELo=i(na),Pce=n(na,"P",{});var Nst=s(Pce);CLo=r(Nst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nst.forEach(t),wLo=i(na),Sa=n(na,"P",{});var k0=s(Sa);ALo=r(k0,"The model class to instantiate is selected based on the "),Bce=n(k0,"CODE",{});var jst=s(Bce);yLo=r(jst,"model_type"),jst.forEach(t),LLo=r(k0,` property of the config object (either
passed as an argument or loaded from `),Ice=n(k0,"CODE",{});var Dst=s(Ice);xLo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),$Lo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(k0,"CODE",{});var Gst=s(qce);kLo=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),SLo=r(k0,":"),k0.forEach(t),RLo=i(na),_e=n(na,"UL",{});var ve=s(_e);g1=n(ve,"LI",{});var r8e=s(g1);Nce=n(r8e,"STRONG",{});var Ost=s(Nce);PLo=r(Ost,"bart"),Ost.forEach(t),BLo=r(r8e," \u2014 "),ED=n(r8e,"A",{href:!0});var Vst=s(ED);ILo=r(Vst,"BartForConditionalGeneration"),Vst.forEach(t),qLo=r(r8e," (BART model)"),r8e.forEach(t),NLo=i(ve),h1=n(ve,"LI",{});var t8e=s(h1);jce=n(t8e,"STRONG",{});var Xst=s(jce);jLo=r(Xst,"bigbird_pegasus"),Xst.forEach(t),DLo=r(t8e," \u2014 "),CD=n(t8e,"A",{href:!0});var zst=s(CD);GLo=r(zst,"BigBirdPegasusForConditionalGeneration"),zst.forEach(t),OLo=r(t8e," (BigBirdPegasus model)"),t8e.forEach(t),VLo=i(ve),p1=n(ve,"LI",{});var a8e=s(p1);Dce=n(a8e,"STRONG",{});var Wst=s(Dce);XLo=r(Wst,"blenderbot"),Wst.forEach(t),zLo=r(a8e," \u2014 "),wD=n(a8e,"A",{href:!0});var Qst=s(wD);WLo=r(Qst,"BlenderbotForConditionalGeneration"),Qst.forEach(t),QLo=r(a8e," (Blenderbot model)"),a8e.forEach(t),HLo=i(ve),_1=n(ve,"LI",{});var n8e=s(_1);Gce=n(n8e,"STRONG",{});var Hst=s(Gce);ULo=r(Hst,"blenderbot-small"),Hst.forEach(t),JLo=r(n8e," \u2014 "),AD=n(n8e,"A",{href:!0});var Ust=s(AD);YLo=r(Ust,"BlenderbotSmallForConditionalGeneration"),Ust.forEach(t),KLo=r(n8e," (BlenderbotSmall model)"),n8e.forEach(t),ZLo=i(ve),u1=n(ve,"LI",{});var s8e=s(u1);Oce=n(s8e,"STRONG",{});var Jst=s(Oce);e8o=r(Jst,"encoder-decoder"),Jst.forEach(t),o8o=r(s8e," \u2014 "),yD=n(s8e,"A",{href:!0});var Yst=s(yD);r8o=r(Yst,"EncoderDecoderModel"),Yst.forEach(t),t8o=r(s8e," (Encoder decoder model)"),s8e.forEach(t),a8o=i(ve),b1=n(ve,"LI",{});var l8e=s(b1);Vce=n(l8e,"STRONG",{});var Kst=s(Vce);n8o=r(Kst,"fsmt"),Kst.forEach(t),s8o=r(l8e," \u2014 "),LD=n(l8e,"A",{href:!0});var Zst=s(LD);l8o=r(Zst,"FSMTForConditionalGeneration"),Zst.forEach(t),i8o=r(l8e," (FairSeq Machine-Translation model)"),l8e.forEach(t),d8o=i(ve),v1=n(ve,"LI",{});var i8e=s(v1);Xce=n(i8e,"STRONG",{});var elt=s(Xce);c8o=r(elt,"led"),elt.forEach(t),f8o=r(i8e," \u2014 "),xD=n(i8e,"A",{href:!0});var olt=s(xD);m8o=r(olt,"LEDForConditionalGeneration"),olt.forEach(t),g8o=r(i8e," (LED model)"),i8e.forEach(t),h8o=i(ve),F1=n(ve,"LI",{});var d8e=s(F1);zce=n(d8e,"STRONG",{});var rlt=s(zce);p8o=r(rlt,"m2m_100"),rlt.forEach(t),_8o=r(d8e," \u2014 "),$D=n(d8e,"A",{href:!0});var tlt=s($D);u8o=r(tlt,"M2M100ForConditionalGeneration"),tlt.forEach(t),b8o=r(d8e," (M2M100 model)"),d8e.forEach(t),v8o=i(ve),T1=n(ve,"LI",{});var c8e=s(T1);Wce=n(c8e,"STRONG",{});var alt=s(Wce);F8o=r(alt,"marian"),alt.forEach(t),T8o=r(c8e," \u2014 "),kD=n(c8e,"A",{href:!0});var nlt=s(kD);M8o=r(nlt,"MarianMTModel"),nlt.forEach(t),E8o=r(c8e," (Marian model)"),c8e.forEach(t),C8o=i(ve),M1=n(ve,"LI",{});var f8e=s(M1);Qce=n(f8e,"STRONG",{});var slt=s(Qce);w8o=r(slt,"mbart"),slt.forEach(t),A8o=r(f8e," \u2014 "),SD=n(f8e,"A",{href:!0});var llt=s(SD);y8o=r(llt,"MBartForConditionalGeneration"),llt.forEach(t),L8o=r(f8e," (mBART model)"),f8e.forEach(t),x8o=i(ve),E1=n(ve,"LI",{});var m8e=s(E1);Hce=n(m8e,"STRONG",{});var ilt=s(Hce);$8o=r(ilt,"mt5"),ilt.forEach(t),k8o=r(m8e," \u2014 "),RD=n(m8e,"A",{href:!0});var dlt=s(RD);S8o=r(dlt,"MT5ForConditionalGeneration"),dlt.forEach(t),R8o=r(m8e," (mT5 model)"),m8e.forEach(t),P8o=i(ve),C1=n(ve,"LI",{});var g8e=s(C1);Uce=n(g8e,"STRONG",{});var clt=s(Uce);B8o=r(clt,"pegasus"),clt.forEach(t),I8o=r(g8e," \u2014 "),PD=n(g8e,"A",{href:!0});var flt=s(PD);q8o=r(flt,"PegasusForConditionalGeneration"),flt.forEach(t),N8o=r(g8e," (Pegasus model)"),g8e.forEach(t),j8o=i(ve),w1=n(ve,"LI",{});var h8e=s(w1);Jce=n(h8e,"STRONG",{});var mlt=s(Jce);D8o=r(mlt,"plbart"),mlt.forEach(t),G8o=r(h8e," \u2014 "),BD=n(h8e,"A",{href:!0});var glt=s(BD);O8o=r(glt,"PLBartForConditionalGeneration"),glt.forEach(t),V8o=r(h8e," (PLBart model)"),h8e.forEach(t),X8o=i(ve),A1=n(ve,"LI",{});var p8e=s(A1);Yce=n(p8e,"STRONG",{});var hlt=s(Yce);z8o=r(hlt,"prophetnet"),hlt.forEach(t),W8o=r(p8e," \u2014 "),ID=n(p8e,"A",{href:!0});var plt=s(ID);Q8o=r(plt,"ProphetNetForConditionalGeneration"),plt.forEach(t),H8o=r(p8e," (ProphetNet model)"),p8e.forEach(t),U8o=i(ve),y1=n(ve,"LI",{});var _8e=s(y1);Kce=n(_8e,"STRONG",{});var _lt=s(Kce);J8o=r(_lt,"t5"),_lt.forEach(t),Y8o=r(_8e," \u2014 "),qD=n(_8e,"A",{href:!0});var ult=s(qD);K8o=r(ult,"T5ForConditionalGeneration"),ult.forEach(t),Z8o=r(_8e," (T5 model)"),_8e.forEach(t),e9o=i(ve),L1=n(ve,"LI",{});var u8e=s(L1);Zce=n(u8e,"STRONG",{});var blt=s(Zce);o9o=r(blt,"xlm-prophetnet"),blt.forEach(t),r9o=r(u8e," \u2014 "),ND=n(u8e,"A",{href:!0});var vlt=s(ND);t9o=r(vlt,"XLMProphetNetForConditionalGeneration"),vlt.forEach(t),a9o=r(u8e," (XLMProphetNet model)"),u8e.forEach(t),ve.forEach(t),n9o=i(na),x1=n(na,"P",{});var b8e=s(x1);s9o=r(b8e,"The model is set in evaluation mode by default using "),efe=n(b8e,"CODE",{});var Flt=s(efe);l9o=r(Flt,"model.eval()"),Flt.forEach(t),i9o=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(b8e,"CODE",{});var Tlt=s(ofe);d9o=r(Tlt,"model.train()"),Tlt.forEach(t),b8e.forEach(t),c9o=i(na),T($1.$$.fragment,na),na.forEach(t),Xs.forEach(t),Nqe=i(f),ji=n(f,"H2",{class:!0});var Oje=s(ji);k1=n(Oje,"A",{id:!0,class:!0,href:!0});var Mlt=s(k1);rfe=n(Mlt,"SPAN",{});var Elt=s(rfe);T(py.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),f9o=i(Oje),tfe=n(Oje,"SPAN",{});var Clt=s(tfe);m9o=r(Clt,"AutoModelForSequenceClassification"),Clt.forEach(t),Oje.forEach(t),jqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(_y.$$.fragment,zs),g9o=i(zs),Di=n(zs,"P",{});var nZ=s(Di);h9o=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jD=n(nZ,"A",{href:!0});var wlt=s(jD);p9o=r(wlt,"from_pretrained()"),wlt.forEach(t),_9o=r(nZ," class method or the "),DD=n(nZ,"A",{href:!0});var Alt=s(DD);u9o=r(Alt,"from_config()"),Alt.forEach(t),b9o=r(nZ,` class
method.`),nZ.forEach(t),v9o=i(zs),uy=n(zs,"P",{});var Vje=s(uy);F9o=r(Vje,"This class cannot be instantiated directly using "),afe=n(Vje,"CODE",{});var ylt=s(afe);T9o=r(ylt,"__init__()"),ylt.forEach(t),M9o=r(Vje," (throws an error)."),Vje.forEach(t),E9o=i(zs),it=n(zs,"DIV",{class:!0});var S0=s(it);T(by.$$.fragment,S0),C9o=i(S0),nfe=n(S0,"P",{});var Llt=s(nfe);w9o=r(Llt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Llt.forEach(t),A9o=i(S0),Gi=n(S0,"P",{});var sZ=s(Gi);y9o=r(sZ,`Note:
Loading a model from its configuration file does `),sfe=n(sZ,"STRONG",{});var xlt=s(sfe);L9o=r(xlt,"not"),xlt.forEach(t),x9o=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(sZ,"A",{href:!0});var $lt=s(GD);$9o=r($lt,"from_pretrained()"),$lt.forEach(t),k9o=r(sZ," to load the model weights."),sZ.forEach(t),S9o=i(S0),T(S1.$$.fragment,S0),S0.forEach(t),R9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(vy.$$.fragment,sa),P9o=i(sa),lfe=n(sa,"P",{});var klt=s(lfe);B9o=r(klt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),klt.forEach(t),I9o=i(sa),Ra=n(sa,"P",{});var R0=s(Ra);q9o=r(R0,"The model class to instantiate is selected based on the "),ife=n(R0,"CODE",{});var Slt=s(ife);N9o=r(Slt,"model_type"),Slt.forEach(t),j9o=r(R0,` property of the config object (either
passed as an argument or loaded from `),dfe=n(R0,"CODE",{});var Rlt=s(dfe);D9o=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),G9o=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(R0,"CODE",{});var Plt=s(cfe);O9o=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),V9o=r(R0,":"),R0.forEach(t),X9o=i(sa),N=n(sa,"UL",{});var D=s(N);R1=n(D,"LI",{});var v8e=s(R1);ffe=n(v8e,"STRONG",{});var Blt=s(ffe);z9o=r(Blt,"albert"),Blt.forEach(t),W9o=r(v8e," \u2014 "),OD=n(v8e,"A",{href:!0});var Ilt=s(OD);Q9o=r(Ilt,"AlbertForSequenceClassification"),Ilt.forEach(t),H9o=r(v8e," (ALBERT model)"),v8e.forEach(t),U9o=i(D),P1=n(D,"LI",{});var F8e=s(P1);mfe=n(F8e,"STRONG",{});var qlt=s(mfe);J9o=r(qlt,"bart"),qlt.forEach(t),Y9o=r(F8e," \u2014 "),VD=n(F8e,"A",{href:!0});var Nlt=s(VD);K9o=r(Nlt,"BartForSequenceClassification"),Nlt.forEach(t),Z9o=r(F8e," (BART model)"),F8e.forEach(t),exo=i(D),B1=n(D,"LI",{});var T8e=s(B1);gfe=n(T8e,"STRONG",{});var jlt=s(gfe);oxo=r(jlt,"bert"),jlt.forEach(t),rxo=r(T8e," \u2014 "),XD=n(T8e,"A",{href:!0});var Dlt=s(XD);txo=r(Dlt,"BertForSequenceClassification"),Dlt.forEach(t),axo=r(T8e," (BERT model)"),T8e.forEach(t),nxo=i(D),I1=n(D,"LI",{});var M8e=s(I1);hfe=n(M8e,"STRONG",{});var Glt=s(hfe);sxo=r(Glt,"big_bird"),Glt.forEach(t),lxo=r(M8e," \u2014 "),zD=n(M8e,"A",{href:!0});var Olt=s(zD);ixo=r(Olt,"BigBirdForSequenceClassification"),Olt.forEach(t),dxo=r(M8e," (BigBird model)"),M8e.forEach(t),cxo=i(D),q1=n(D,"LI",{});var E8e=s(q1);pfe=n(E8e,"STRONG",{});var Vlt=s(pfe);fxo=r(Vlt,"bigbird_pegasus"),Vlt.forEach(t),mxo=r(E8e," \u2014 "),WD=n(E8e,"A",{href:!0});var Xlt=s(WD);gxo=r(Xlt,"BigBirdPegasusForSequenceClassification"),Xlt.forEach(t),hxo=r(E8e," (BigBirdPegasus model)"),E8e.forEach(t),pxo=i(D),N1=n(D,"LI",{});var C8e=s(N1);_fe=n(C8e,"STRONG",{});var zlt=s(_fe);_xo=r(zlt,"camembert"),zlt.forEach(t),uxo=r(C8e," \u2014 "),QD=n(C8e,"A",{href:!0});var Wlt=s(QD);bxo=r(Wlt,"CamembertForSequenceClassification"),Wlt.forEach(t),vxo=r(C8e," (CamemBERT model)"),C8e.forEach(t),Fxo=i(D),j1=n(D,"LI",{});var w8e=s(j1);ufe=n(w8e,"STRONG",{});var Qlt=s(ufe);Txo=r(Qlt,"canine"),Qlt.forEach(t),Mxo=r(w8e," \u2014 "),HD=n(w8e,"A",{href:!0});var Hlt=s(HD);Exo=r(Hlt,"CanineForSequenceClassification"),Hlt.forEach(t),Cxo=r(w8e," (Canine model)"),w8e.forEach(t),wxo=i(D),D1=n(D,"LI",{});var A8e=s(D1);bfe=n(A8e,"STRONG",{});var Ult=s(bfe);Axo=r(Ult,"convbert"),Ult.forEach(t),yxo=r(A8e," \u2014 "),UD=n(A8e,"A",{href:!0});var Jlt=s(UD);Lxo=r(Jlt,"ConvBertForSequenceClassification"),Jlt.forEach(t),xxo=r(A8e," (ConvBERT model)"),A8e.forEach(t),$xo=i(D),G1=n(D,"LI",{});var y8e=s(G1);vfe=n(y8e,"STRONG",{});var Ylt=s(vfe);kxo=r(Ylt,"ctrl"),Ylt.forEach(t),Sxo=r(y8e," \u2014 "),JD=n(y8e,"A",{href:!0});var Klt=s(JD);Rxo=r(Klt,"CTRLForSequenceClassification"),Klt.forEach(t),Pxo=r(y8e," (CTRL model)"),y8e.forEach(t),Bxo=i(D),O1=n(D,"LI",{});var L8e=s(O1);Ffe=n(L8e,"STRONG",{});var Zlt=s(Ffe);Ixo=r(Zlt,"data2vec-text"),Zlt.forEach(t),qxo=r(L8e," \u2014 "),YD=n(L8e,"A",{href:!0});var eit=s(YD);Nxo=r(eit,"Data2VecTextForSequenceClassification"),eit.forEach(t),jxo=r(L8e," (Data2VecText model)"),L8e.forEach(t),Dxo=i(D),V1=n(D,"LI",{});var x8e=s(V1);Tfe=n(x8e,"STRONG",{});var oit=s(Tfe);Gxo=r(oit,"deberta"),oit.forEach(t),Oxo=r(x8e," \u2014 "),KD=n(x8e,"A",{href:!0});var rit=s(KD);Vxo=r(rit,"DebertaForSequenceClassification"),rit.forEach(t),Xxo=r(x8e," (DeBERTa model)"),x8e.forEach(t),zxo=i(D),X1=n(D,"LI",{});var $8e=s(X1);Mfe=n($8e,"STRONG",{});var tit=s(Mfe);Wxo=r(tit,"deberta-v2"),tit.forEach(t),Qxo=r($8e," \u2014 "),ZD=n($8e,"A",{href:!0});var ait=s(ZD);Hxo=r(ait,"DebertaV2ForSequenceClassification"),ait.forEach(t),Uxo=r($8e," (DeBERTa-v2 model)"),$8e.forEach(t),Jxo=i(D),z1=n(D,"LI",{});var k8e=s(z1);Efe=n(k8e,"STRONG",{});var nit=s(Efe);Yxo=r(nit,"distilbert"),nit.forEach(t),Kxo=r(k8e," \u2014 "),eG=n(k8e,"A",{href:!0});var sit=s(eG);Zxo=r(sit,"DistilBertForSequenceClassification"),sit.forEach(t),e$o=r(k8e," (DistilBERT model)"),k8e.forEach(t),o$o=i(D),W1=n(D,"LI",{});var S8e=s(W1);Cfe=n(S8e,"STRONG",{});var lit=s(Cfe);r$o=r(lit,"electra"),lit.forEach(t),t$o=r(S8e," \u2014 "),oG=n(S8e,"A",{href:!0});var iit=s(oG);a$o=r(iit,"ElectraForSequenceClassification"),iit.forEach(t),n$o=r(S8e," (ELECTRA model)"),S8e.forEach(t),s$o=i(D),Q1=n(D,"LI",{});var R8e=s(Q1);wfe=n(R8e,"STRONG",{});var dit=s(wfe);l$o=r(dit,"flaubert"),dit.forEach(t),i$o=r(R8e," \u2014 "),rG=n(R8e,"A",{href:!0});var cit=s(rG);d$o=r(cit,"FlaubertForSequenceClassification"),cit.forEach(t),c$o=r(R8e," (FlauBERT model)"),R8e.forEach(t),f$o=i(D),H1=n(D,"LI",{});var P8e=s(H1);Afe=n(P8e,"STRONG",{});var fit=s(Afe);m$o=r(fit,"fnet"),fit.forEach(t),g$o=r(P8e," \u2014 "),tG=n(P8e,"A",{href:!0});var mit=s(tG);h$o=r(mit,"FNetForSequenceClassification"),mit.forEach(t),p$o=r(P8e," (FNet model)"),P8e.forEach(t),_$o=i(D),U1=n(D,"LI",{});var B8e=s(U1);yfe=n(B8e,"STRONG",{});var git=s(yfe);u$o=r(git,"funnel"),git.forEach(t),b$o=r(B8e," \u2014 "),aG=n(B8e,"A",{href:!0});var hit=s(aG);v$o=r(hit,"FunnelForSequenceClassification"),hit.forEach(t),F$o=r(B8e," (Funnel Transformer model)"),B8e.forEach(t),T$o=i(D),J1=n(D,"LI",{});var I8e=s(J1);Lfe=n(I8e,"STRONG",{});var pit=s(Lfe);M$o=r(pit,"gpt2"),pit.forEach(t),E$o=r(I8e," \u2014 "),nG=n(I8e,"A",{href:!0});var _it=s(nG);C$o=r(_it,"GPT2ForSequenceClassification"),_it.forEach(t),w$o=r(I8e," (OpenAI GPT-2 model)"),I8e.forEach(t),A$o=i(D),Y1=n(D,"LI",{});var q8e=s(Y1);xfe=n(q8e,"STRONG",{});var uit=s(xfe);y$o=r(uit,"gpt_neo"),uit.forEach(t),L$o=r(q8e," \u2014 "),sG=n(q8e,"A",{href:!0});var bit=s(sG);x$o=r(bit,"GPTNeoForSequenceClassification"),bit.forEach(t),$$o=r(q8e," (GPT Neo model)"),q8e.forEach(t),k$o=i(D),K1=n(D,"LI",{});var N8e=s(K1);$fe=n(N8e,"STRONG",{});var vit=s($fe);S$o=r(vit,"gptj"),vit.forEach(t),R$o=r(N8e," \u2014 "),lG=n(N8e,"A",{href:!0});var Fit=s(lG);P$o=r(Fit,"GPTJForSequenceClassification"),Fit.forEach(t),B$o=r(N8e," (GPT-J model)"),N8e.forEach(t),I$o=i(D),Z1=n(D,"LI",{});var j8e=s(Z1);kfe=n(j8e,"STRONG",{});var Tit=s(kfe);q$o=r(Tit,"ibert"),Tit.forEach(t),N$o=r(j8e," \u2014 "),iG=n(j8e,"A",{href:!0});var Mit=s(iG);j$o=r(Mit,"IBertForSequenceClassification"),Mit.forEach(t),D$o=r(j8e," (I-BERT model)"),j8e.forEach(t),G$o=i(D),e7=n(D,"LI",{});var D8e=s(e7);Sfe=n(D8e,"STRONG",{});var Eit=s(Sfe);O$o=r(Eit,"layoutlm"),Eit.forEach(t),V$o=r(D8e," \u2014 "),dG=n(D8e,"A",{href:!0});var Cit=s(dG);X$o=r(Cit,"LayoutLMForSequenceClassification"),Cit.forEach(t),z$o=r(D8e," (LayoutLM model)"),D8e.forEach(t),W$o=i(D),o7=n(D,"LI",{});var G8e=s(o7);Rfe=n(G8e,"STRONG",{});var wit=s(Rfe);Q$o=r(wit,"layoutlmv2"),wit.forEach(t),H$o=r(G8e," \u2014 "),cG=n(G8e,"A",{href:!0});var Ait=s(cG);U$o=r(Ait,"LayoutLMv2ForSequenceClassification"),Ait.forEach(t),J$o=r(G8e," (LayoutLMv2 model)"),G8e.forEach(t),Y$o=i(D),r7=n(D,"LI",{});var O8e=s(r7);Pfe=n(O8e,"STRONG",{});var yit=s(Pfe);K$o=r(yit,"led"),yit.forEach(t),Z$o=r(O8e," \u2014 "),fG=n(O8e,"A",{href:!0});var Lit=s(fG);eko=r(Lit,"LEDForSequenceClassification"),Lit.forEach(t),oko=r(O8e," (LED model)"),O8e.forEach(t),rko=i(D),t7=n(D,"LI",{});var V8e=s(t7);Bfe=n(V8e,"STRONG",{});var xit=s(Bfe);tko=r(xit,"longformer"),xit.forEach(t),ako=r(V8e," \u2014 "),mG=n(V8e,"A",{href:!0});var $it=s(mG);nko=r($it,"LongformerForSequenceClassification"),$it.forEach(t),sko=r(V8e," (Longformer model)"),V8e.forEach(t),lko=i(D),a7=n(D,"LI",{});var X8e=s(a7);Ife=n(X8e,"STRONG",{});var kit=s(Ife);iko=r(kit,"mbart"),kit.forEach(t),dko=r(X8e," \u2014 "),gG=n(X8e,"A",{href:!0});var Sit=s(gG);cko=r(Sit,"MBartForSequenceClassification"),Sit.forEach(t),fko=r(X8e," (mBART model)"),X8e.forEach(t),mko=i(D),n7=n(D,"LI",{});var z8e=s(n7);qfe=n(z8e,"STRONG",{});var Rit=s(qfe);gko=r(Rit,"megatron-bert"),Rit.forEach(t),hko=r(z8e," \u2014 "),hG=n(z8e,"A",{href:!0});var Pit=s(hG);pko=r(Pit,"MegatronBertForSequenceClassification"),Pit.forEach(t),_ko=r(z8e," (MegatronBert model)"),z8e.forEach(t),uko=i(D),s7=n(D,"LI",{});var W8e=s(s7);Nfe=n(W8e,"STRONG",{});var Bit=s(Nfe);bko=r(Bit,"mobilebert"),Bit.forEach(t),vko=r(W8e," \u2014 "),pG=n(W8e,"A",{href:!0});var Iit=s(pG);Fko=r(Iit,"MobileBertForSequenceClassification"),Iit.forEach(t),Tko=r(W8e," (MobileBERT model)"),W8e.forEach(t),Mko=i(D),l7=n(D,"LI",{});var Q8e=s(l7);jfe=n(Q8e,"STRONG",{});var qit=s(jfe);Eko=r(qit,"mpnet"),qit.forEach(t),Cko=r(Q8e," \u2014 "),_G=n(Q8e,"A",{href:!0});var Nit=s(_G);wko=r(Nit,"MPNetForSequenceClassification"),Nit.forEach(t),Ako=r(Q8e," (MPNet model)"),Q8e.forEach(t),yko=i(D),i7=n(D,"LI",{});var H8e=s(i7);Dfe=n(H8e,"STRONG",{});var jit=s(Dfe);Lko=r(jit,"nystromformer"),jit.forEach(t),xko=r(H8e," \u2014 "),uG=n(H8e,"A",{href:!0});var Dit=s(uG);$ko=r(Dit,"NystromformerForSequenceClassification"),Dit.forEach(t),kko=r(H8e," (Nystromformer model)"),H8e.forEach(t),Sko=i(D),d7=n(D,"LI",{});var U8e=s(d7);Gfe=n(U8e,"STRONG",{});var Git=s(Gfe);Rko=r(Git,"openai-gpt"),Git.forEach(t),Pko=r(U8e," \u2014 "),bG=n(U8e,"A",{href:!0});var Oit=s(bG);Bko=r(Oit,"OpenAIGPTForSequenceClassification"),Oit.forEach(t),Iko=r(U8e," (OpenAI GPT model)"),U8e.forEach(t),qko=i(D),c7=n(D,"LI",{});var J8e=s(c7);Ofe=n(J8e,"STRONG",{});var Vit=s(Ofe);Nko=r(Vit,"perceiver"),Vit.forEach(t),jko=r(J8e," \u2014 "),vG=n(J8e,"A",{href:!0});var Xit=s(vG);Dko=r(Xit,"PerceiverForSequenceClassification"),Xit.forEach(t),Gko=r(J8e," (Perceiver model)"),J8e.forEach(t),Oko=i(D),f7=n(D,"LI",{});var Y8e=s(f7);Vfe=n(Y8e,"STRONG",{});var zit=s(Vfe);Vko=r(zit,"plbart"),zit.forEach(t),Xko=r(Y8e," \u2014 "),FG=n(Y8e,"A",{href:!0});var Wit=s(FG);zko=r(Wit,"PLBartForSequenceClassification"),Wit.forEach(t),Wko=r(Y8e," (PLBart model)"),Y8e.forEach(t),Qko=i(D),m7=n(D,"LI",{});var K8e=s(m7);Xfe=n(K8e,"STRONG",{});var Qit=s(Xfe);Hko=r(Qit,"qdqbert"),Qit.forEach(t),Uko=r(K8e," \u2014 "),TG=n(K8e,"A",{href:!0});var Hit=s(TG);Jko=r(Hit,"QDQBertForSequenceClassification"),Hit.forEach(t),Yko=r(K8e," (QDQBert model)"),K8e.forEach(t),Kko=i(D),g7=n(D,"LI",{});var Z8e=s(g7);zfe=n(Z8e,"STRONG",{});var Uit=s(zfe);Zko=r(Uit,"reformer"),Uit.forEach(t),eSo=r(Z8e," \u2014 "),MG=n(Z8e,"A",{href:!0});var Jit=s(MG);oSo=r(Jit,"ReformerForSequenceClassification"),Jit.forEach(t),rSo=r(Z8e," (Reformer model)"),Z8e.forEach(t),tSo=i(D),h7=n(D,"LI",{});var e9e=s(h7);Wfe=n(e9e,"STRONG",{});var Yit=s(Wfe);aSo=r(Yit,"rembert"),Yit.forEach(t),nSo=r(e9e," \u2014 "),EG=n(e9e,"A",{href:!0});var Kit=s(EG);sSo=r(Kit,"RemBertForSequenceClassification"),Kit.forEach(t),lSo=r(e9e," (RemBERT model)"),e9e.forEach(t),iSo=i(D),p7=n(D,"LI",{});var o9e=s(p7);Qfe=n(o9e,"STRONG",{});var Zit=s(Qfe);dSo=r(Zit,"roberta"),Zit.forEach(t),cSo=r(o9e," \u2014 "),CG=n(o9e,"A",{href:!0});var edt=s(CG);fSo=r(edt,"RobertaForSequenceClassification"),edt.forEach(t),mSo=r(o9e," (RoBERTa model)"),o9e.forEach(t),gSo=i(D),_7=n(D,"LI",{});var r9e=s(_7);Hfe=n(r9e,"STRONG",{});var odt=s(Hfe);hSo=r(odt,"roformer"),odt.forEach(t),pSo=r(r9e," \u2014 "),wG=n(r9e,"A",{href:!0});var rdt=s(wG);_So=r(rdt,"RoFormerForSequenceClassification"),rdt.forEach(t),uSo=r(r9e," (RoFormer model)"),r9e.forEach(t),bSo=i(D),u7=n(D,"LI",{});var t9e=s(u7);Ufe=n(t9e,"STRONG",{});var tdt=s(Ufe);vSo=r(tdt,"squeezebert"),tdt.forEach(t),FSo=r(t9e," \u2014 "),AG=n(t9e,"A",{href:!0});var adt=s(AG);TSo=r(adt,"SqueezeBertForSequenceClassification"),adt.forEach(t),MSo=r(t9e," (SqueezeBERT model)"),t9e.forEach(t),ESo=i(D),b7=n(D,"LI",{});var a9e=s(b7);Jfe=n(a9e,"STRONG",{});var ndt=s(Jfe);CSo=r(ndt,"tapas"),ndt.forEach(t),wSo=r(a9e," \u2014 "),yG=n(a9e,"A",{href:!0});var sdt=s(yG);ASo=r(sdt,"TapasForSequenceClassification"),sdt.forEach(t),ySo=r(a9e," (TAPAS model)"),a9e.forEach(t),LSo=i(D),v7=n(D,"LI",{});var n9e=s(v7);Yfe=n(n9e,"STRONG",{});var ldt=s(Yfe);xSo=r(ldt,"transfo-xl"),ldt.forEach(t),$So=r(n9e," \u2014 "),LG=n(n9e,"A",{href:!0});var idt=s(LG);kSo=r(idt,"TransfoXLForSequenceClassification"),idt.forEach(t),SSo=r(n9e," (Transformer-XL model)"),n9e.forEach(t),RSo=i(D),F7=n(D,"LI",{});var s9e=s(F7);Kfe=n(s9e,"STRONG",{});var ddt=s(Kfe);PSo=r(ddt,"xlm"),ddt.forEach(t),BSo=r(s9e," \u2014 "),xG=n(s9e,"A",{href:!0});var cdt=s(xG);ISo=r(cdt,"XLMForSequenceClassification"),cdt.forEach(t),qSo=r(s9e," (XLM model)"),s9e.forEach(t),NSo=i(D),T7=n(D,"LI",{});var l9e=s(T7);Zfe=n(l9e,"STRONG",{});var fdt=s(Zfe);jSo=r(fdt,"xlm-roberta"),fdt.forEach(t),DSo=r(l9e," \u2014 "),$G=n(l9e,"A",{href:!0});var mdt=s($G);GSo=r(mdt,"XLMRobertaForSequenceClassification"),mdt.forEach(t),OSo=r(l9e," (XLM-RoBERTa model)"),l9e.forEach(t),VSo=i(D),M7=n(D,"LI",{});var i9e=s(M7);eme=n(i9e,"STRONG",{});var gdt=s(eme);XSo=r(gdt,"xlm-roberta-xl"),gdt.forEach(t),zSo=r(i9e," \u2014 "),kG=n(i9e,"A",{href:!0});var hdt=s(kG);WSo=r(hdt,"XLMRobertaXLForSequenceClassification"),hdt.forEach(t),QSo=r(i9e," (XLM-RoBERTa-XL model)"),i9e.forEach(t),HSo=i(D),E7=n(D,"LI",{});var d9e=s(E7);ome=n(d9e,"STRONG",{});var pdt=s(ome);USo=r(pdt,"xlnet"),pdt.forEach(t),JSo=r(d9e," \u2014 "),SG=n(d9e,"A",{href:!0});var _dt=s(SG);YSo=r(_dt,"XLNetForSequenceClassification"),_dt.forEach(t),KSo=r(d9e," (XLNet model)"),d9e.forEach(t),ZSo=i(D),C7=n(D,"LI",{});var c9e=s(C7);rme=n(c9e,"STRONG",{});var udt=s(rme);eRo=r(udt,"yoso"),udt.forEach(t),oRo=r(c9e," \u2014 "),RG=n(c9e,"A",{href:!0});var bdt=s(RG);rRo=r(bdt,"YosoForSequenceClassification"),bdt.forEach(t),tRo=r(c9e," (YOSO model)"),c9e.forEach(t),D.forEach(t),aRo=i(sa),w7=n(sa,"P",{});var f9e=s(w7);nRo=r(f9e,"The model is set in evaluation mode by default using "),tme=n(f9e,"CODE",{});var vdt=s(tme);sRo=r(vdt,"model.eval()"),vdt.forEach(t),lRo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(f9e,"CODE",{});var Fdt=s(ame);iRo=r(Fdt,"model.train()"),Fdt.forEach(t),f9e.forEach(t),dRo=i(sa),T(A7.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Dqe=i(f),Oi=n(f,"H2",{class:!0});var Xje=s(Oi);y7=n(Xje,"A",{id:!0,class:!0,href:!0});var Tdt=s(y7);nme=n(Tdt,"SPAN",{});var Mdt=s(nme);T(Fy.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),cRo=i(Xje),sme=n(Xje,"SPAN",{});var Edt=s(sme);fRo=r(Edt,"AutoModelForMultipleChoice"),Edt.forEach(t),Xje.forEach(t),Gqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(Ty.$$.fragment,Ws),mRo=i(Ws),Vi=n(Ws,"P",{});var lZ=s(Vi);gRo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PG=n(lZ,"A",{href:!0});var Cdt=s(PG);hRo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),pRo=r(lZ," class method or the "),BG=n(lZ,"A",{href:!0});var wdt=s(BG);_Ro=r(wdt,"from_config()"),wdt.forEach(t),uRo=r(lZ,` class
method.`),lZ.forEach(t),bRo=i(Ws),My=n(Ws,"P",{});var zje=s(My);vRo=r(zje,"This class cannot be instantiated directly using "),lme=n(zje,"CODE",{});var Adt=s(lme);FRo=r(Adt,"__init__()"),Adt.forEach(t),TRo=r(zje," (throws an error)."),zje.forEach(t),MRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var P0=s(dt);T(Ey.$$.fragment,P0),ERo=i(P0),ime=n(P0,"P",{});var ydt=s(ime);CRo=r(ydt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ydt.forEach(t),wRo=i(P0),Xi=n(P0,"P",{});var iZ=s(Xi);ARo=r(iZ,`Note:
Loading a model from its configuration file does `),dme=n(iZ,"STRONG",{});var Ldt=s(dme);yRo=r(Ldt,"not"),Ldt.forEach(t),LRo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(iZ,"A",{href:!0});var xdt=s(IG);xRo=r(xdt,"from_pretrained()"),xdt.forEach(t),$Ro=r(iZ," to load the model weights."),iZ.forEach(t),kRo=i(P0),T(L7.$$.fragment,P0),P0.forEach(t),SRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(Cy.$$.fragment,la),RRo=i(la),cme=n(la,"P",{});var $dt=s(cme);PRo=r($dt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$dt.forEach(t),BRo=i(la),Pa=n(la,"P",{});var B0=s(Pa);IRo=r(B0,"The model class to instantiate is selected based on the "),fme=n(B0,"CODE",{});var kdt=s(fme);qRo=r(kdt,"model_type"),kdt.forEach(t),NRo=r(B0,` property of the config object (either
passed as an argument or loaded from `),mme=n(B0,"CODE",{});var Sdt=s(mme);jRo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),DRo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(B0,"CODE",{});var Rdt=s(gme);GRo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),ORo=r(B0,":"),B0.forEach(t),VRo=i(la),Y=n(la,"UL",{});var K=s(Y);x7=n(K,"LI",{});var m9e=s(x7);hme=n(m9e,"STRONG",{});var Pdt=s(hme);XRo=r(Pdt,"albert"),Pdt.forEach(t),zRo=r(m9e," \u2014 "),qG=n(m9e,"A",{href:!0});var Bdt=s(qG);WRo=r(Bdt,"AlbertForMultipleChoice"),Bdt.forEach(t),QRo=r(m9e," (ALBERT model)"),m9e.forEach(t),HRo=i(K),$7=n(K,"LI",{});var g9e=s($7);pme=n(g9e,"STRONG",{});var Idt=s(pme);URo=r(Idt,"bert"),Idt.forEach(t),JRo=r(g9e," \u2014 "),NG=n(g9e,"A",{href:!0});var qdt=s(NG);YRo=r(qdt,"BertForMultipleChoice"),qdt.forEach(t),KRo=r(g9e," (BERT model)"),g9e.forEach(t),ZRo=i(K),k7=n(K,"LI",{});var h9e=s(k7);_me=n(h9e,"STRONG",{});var Ndt=s(_me);ePo=r(Ndt,"big_bird"),Ndt.forEach(t),oPo=r(h9e," \u2014 "),jG=n(h9e,"A",{href:!0});var jdt=s(jG);rPo=r(jdt,"BigBirdForMultipleChoice"),jdt.forEach(t),tPo=r(h9e," (BigBird model)"),h9e.forEach(t),aPo=i(K),S7=n(K,"LI",{});var p9e=s(S7);ume=n(p9e,"STRONG",{});var Ddt=s(ume);nPo=r(Ddt,"camembert"),Ddt.forEach(t),sPo=r(p9e," \u2014 "),DG=n(p9e,"A",{href:!0});var Gdt=s(DG);lPo=r(Gdt,"CamembertForMultipleChoice"),Gdt.forEach(t),iPo=r(p9e," (CamemBERT model)"),p9e.forEach(t),dPo=i(K),R7=n(K,"LI",{});var _9e=s(R7);bme=n(_9e,"STRONG",{});var Odt=s(bme);cPo=r(Odt,"canine"),Odt.forEach(t),fPo=r(_9e," \u2014 "),GG=n(_9e,"A",{href:!0});var Vdt=s(GG);mPo=r(Vdt,"CanineForMultipleChoice"),Vdt.forEach(t),gPo=r(_9e," (Canine model)"),_9e.forEach(t),hPo=i(K),P7=n(K,"LI",{});var u9e=s(P7);vme=n(u9e,"STRONG",{});var Xdt=s(vme);pPo=r(Xdt,"convbert"),Xdt.forEach(t),_Po=r(u9e," \u2014 "),OG=n(u9e,"A",{href:!0});var zdt=s(OG);uPo=r(zdt,"ConvBertForMultipleChoice"),zdt.forEach(t),bPo=r(u9e," (ConvBERT model)"),u9e.forEach(t),vPo=i(K),B7=n(K,"LI",{});var b9e=s(B7);Fme=n(b9e,"STRONG",{});var Wdt=s(Fme);FPo=r(Wdt,"data2vec-text"),Wdt.forEach(t),TPo=r(b9e," \u2014 "),VG=n(b9e,"A",{href:!0});var Qdt=s(VG);MPo=r(Qdt,"Data2VecTextForMultipleChoice"),Qdt.forEach(t),EPo=r(b9e," (Data2VecText model)"),b9e.forEach(t),CPo=i(K),I7=n(K,"LI",{});var v9e=s(I7);Tme=n(v9e,"STRONG",{});var Hdt=s(Tme);wPo=r(Hdt,"deberta-v2"),Hdt.forEach(t),APo=r(v9e," \u2014 "),XG=n(v9e,"A",{href:!0});var Udt=s(XG);yPo=r(Udt,"DebertaV2ForMultipleChoice"),Udt.forEach(t),LPo=r(v9e," (DeBERTa-v2 model)"),v9e.forEach(t),xPo=i(K),q7=n(K,"LI",{});var F9e=s(q7);Mme=n(F9e,"STRONG",{});var Jdt=s(Mme);$Po=r(Jdt,"distilbert"),Jdt.forEach(t),kPo=r(F9e," \u2014 "),zG=n(F9e,"A",{href:!0});var Ydt=s(zG);SPo=r(Ydt,"DistilBertForMultipleChoice"),Ydt.forEach(t),RPo=r(F9e," (DistilBERT model)"),F9e.forEach(t),PPo=i(K),N7=n(K,"LI",{});var T9e=s(N7);Eme=n(T9e,"STRONG",{});var Kdt=s(Eme);BPo=r(Kdt,"electra"),Kdt.forEach(t),IPo=r(T9e," \u2014 "),WG=n(T9e,"A",{href:!0});var Zdt=s(WG);qPo=r(Zdt,"ElectraForMultipleChoice"),Zdt.forEach(t),NPo=r(T9e," (ELECTRA model)"),T9e.forEach(t),jPo=i(K),j7=n(K,"LI",{});var M9e=s(j7);Cme=n(M9e,"STRONG",{});var ect=s(Cme);DPo=r(ect,"flaubert"),ect.forEach(t),GPo=r(M9e," \u2014 "),QG=n(M9e,"A",{href:!0});var oct=s(QG);OPo=r(oct,"FlaubertForMultipleChoice"),oct.forEach(t),VPo=r(M9e," (FlauBERT model)"),M9e.forEach(t),XPo=i(K),D7=n(K,"LI",{});var E9e=s(D7);wme=n(E9e,"STRONG",{});var rct=s(wme);zPo=r(rct,"fnet"),rct.forEach(t),WPo=r(E9e," \u2014 "),HG=n(E9e,"A",{href:!0});var tct=s(HG);QPo=r(tct,"FNetForMultipleChoice"),tct.forEach(t),HPo=r(E9e," (FNet model)"),E9e.forEach(t),UPo=i(K),G7=n(K,"LI",{});var C9e=s(G7);Ame=n(C9e,"STRONG",{});var act=s(Ame);JPo=r(act,"funnel"),act.forEach(t),YPo=r(C9e," \u2014 "),UG=n(C9e,"A",{href:!0});var nct=s(UG);KPo=r(nct,"FunnelForMultipleChoice"),nct.forEach(t),ZPo=r(C9e," (Funnel Transformer model)"),C9e.forEach(t),eBo=i(K),O7=n(K,"LI",{});var w9e=s(O7);yme=n(w9e,"STRONG",{});var sct=s(yme);oBo=r(sct,"ibert"),sct.forEach(t),rBo=r(w9e," \u2014 "),JG=n(w9e,"A",{href:!0});var lct=s(JG);tBo=r(lct,"IBertForMultipleChoice"),lct.forEach(t),aBo=r(w9e," (I-BERT model)"),w9e.forEach(t),nBo=i(K),V7=n(K,"LI",{});var A9e=s(V7);Lme=n(A9e,"STRONG",{});var ict=s(Lme);sBo=r(ict,"longformer"),ict.forEach(t),lBo=r(A9e," \u2014 "),YG=n(A9e,"A",{href:!0});var dct=s(YG);iBo=r(dct,"LongformerForMultipleChoice"),dct.forEach(t),dBo=r(A9e," (Longformer model)"),A9e.forEach(t),cBo=i(K),X7=n(K,"LI",{});var y9e=s(X7);xme=n(y9e,"STRONG",{});var cct=s(xme);fBo=r(cct,"megatron-bert"),cct.forEach(t),mBo=r(y9e," \u2014 "),KG=n(y9e,"A",{href:!0});var fct=s(KG);gBo=r(fct,"MegatronBertForMultipleChoice"),fct.forEach(t),hBo=r(y9e," (MegatronBert model)"),y9e.forEach(t),pBo=i(K),z7=n(K,"LI",{});var L9e=s(z7);$me=n(L9e,"STRONG",{});var mct=s($me);_Bo=r(mct,"mobilebert"),mct.forEach(t),uBo=r(L9e," \u2014 "),ZG=n(L9e,"A",{href:!0});var gct=s(ZG);bBo=r(gct,"MobileBertForMultipleChoice"),gct.forEach(t),vBo=r(L9e," (MobileBERT model)"),L9e.forEach(t),FBo=i(K),W7=n(K,"LI",{});var x9e=s(W7);kme=n(x9e,"STRONG",{});var hct=s(kme);TBo=r(hct,"mpnet"),hct.forEach(t),MBo=r(x9e," \u2014 "),eO=n(x9e,"A",{href:!0});var pct=s(eO);EBo=r(pct,"MPNetForMultipleChoice"),pct.forEach(t),CBo=r(x9e," (MPNet model)"),x9e.forEach(t),wBo=i(K),Q7=n(K,"LI",{});var $9e=s(Q7);Sme=n($9e,"STRONG",{});var _ct=s(Sme);ABo=r(_ct,"nystromformer"),_ct.forEach(t),yBo=r($9e," \u2014 "),oO=n($9e,"A",{href:!0});var uct=s(oO);LBo=r(uct,"NystromformerForMultipleChoice"),uct.forEach(t),xBo=r($9e," (Nystromformer model)"),$9e.forEach(t),$Bo=i(K),H7=n(K,"LI",{});var k9e=s(H7);Rme=n(k9e,"STRONG",{});var bct=s(Rme);kBo=r(bct,"qdqbert"),bct.forEach(t),SBo=r(k9e," \u2014 "),rO=n(k9e,"A",{href:!0});var vct=s(rO);RBo=r(vct,"QDQBertForMultipleChoice"),vct.forEach(t),PBo=r(k9e," (QDQBert model)"),k9e.forEach(t),BBo=i(K),U7=n(K,"LI",{});var S9e=s(U7);Pme=n(S9e,"STRONG",{});var Fct=s(Pme);IBo=r(Fct,"rembert"),Fct.forEach(t),qBo=r(S9e," \u2014 "),tO=n(S9e,"A",{href:!0});var Tct=s(tO);NBo=r(Tct,"RemBertForMultipleChoice"),Tct.forEach(t),jBo=r(S9e," (RemBERT model)"),S9e.forEach(t),DBo=i(K),J7=n(K,"LI",{});var R9e=s(J7);Bme=n(R9e,"STRONG",{});var Mct=s(Bme);GBo=r(Mct,"roberta"),Mct.forEach(t),OBo=r(R9e," \u2014 "),aO=n(R9e,"A",{href:!0});var Ect=s(aO);VBo=r(Ect,"RobertaForMultipleChoice"),Ect.forEach(t),XBo=r(R9e," (RoBERTa model)"),R9e.forEach(t),zBo=i(K),Y7=n(K,"LI",{});var P9e=s(Y7);Ime=n(P9e,"STRONG",{});var Cct=s(Ime);WBo=r(Cct,"roformer"),Cct.forEach(t),QBo=r(P9e," \u2014 "),nO=n(P9e,"A",{href:!0});var wct=s(nO);HBo=r(wct,"RoFormerForMultipleChoice"),wct.forEach(t),UBo=r(P9e," (RoFormer model)"),P9e.forEach(t),JBo=i(K),K7=n(K,"LI",{});var B9e=s(K7);qme=n(B9e,"STRONG",{});var Act=s(qme);YBo=r(Act,"squeezebert"),Act.forEach(t),KBo=r(B9e," \u2014 "),sO=n(B9e,"A",{href:!0});var yct=s(sO);ZBo=r(yct,"SqueezeBertForMultipleChoice"),yct.forEach(t),eIo=r(B9e," (SqueezeBERT model)"),B9e.forEach(t),oIo=i(K),Z7=n(K,"LI",{});var I9e=s(Z7);Nme=n(I9e,"STRONG",{});var Lct=s(Nme);rIo=r(Lct,"xlm"),Lct.forEach(t),tIo=r(I9e," \u2014 "),lO=n(I9e,"A",{href:!0});var xct=s(lO);aIo=r(xct,"XLMForMultipleChoice"),xct.forEach(t),nIo=r(I9e," (XLM model)"),I9e.forEach(t),sIo=i(K),eb=n(K,"LI",{});var q9e=s(eb);jme=n(q9e,"STRONG",{});var $ct=s(jme);lIo=r($ct,"xlm-roberta"),$ct.forEach(t),iIo=r(q9e," \u2014 "),iO=n(q9e,"A",{href:!0});var kct=s(iO);dIo=r(kct,"XLMRobertaForMultipleChoice"),kct.forEach(t),cIo=r(q9e," (XLM-RoBERTa model)"),q9e.forEach(t),fIo=i(K),ob=n(K,"LI",{});var N9e=s(ob);Dme=n(N9e,"STRONG",{});var Sct=s(Dme);mIo=r(Sct,"xlm-roberta-xl"),Sct.forEach(t),gIo=r(N9e," \u2014 "),dO=n(N9e,"A",{href:!0});var Rct=s(dO);hIo=r(Rct,"XLMRobertaXLForMultipleChoice"),Rct.forEach(t),pIo=r(N9e," (XLM-RoBERTa-XL model)"),N9e.forEach(t),_Io=i(K),rb=n(K,"LI",{});var j9e=s(rb);Gme=n(j9e,"STRONG",{});var Pct=s(Gme);uIo=r(Pct,"xlnet"),Pct.forEach(t),bIo=r(j9e," \u2014 "),cO=n(j9e,"A",{href:!0});var Bct=s(cO);vIo=r(Bct,"XLNetForMultipleChoice"),Bct.forEach(t),FIo=r(j9e," (XLNet model)"),j9e.forEach(t),TIo=i(K),tb=n(K,"LI",{});var D9e=s(tb);Ome=n(D9e,"STRONG",{});var Ict=s(Ome);MIo=r(Ict,"yoso"),Ict.forEach(t),EIo=r(D9e," \u2014 "),fO=n(D9e,"A",{href:!0});var qct=s(fO);CIo=r(qct,"YosoForMultipleChoice"),qct.forEach(t),wIo=r(D9e," (YOSO model)"),D9e.forEach(t),K.forEach(t),AIo=i(la),ab=n(la,"P",{});var G9e=s(ab);yIo=r(G9e,"The model is set in evaluation mode by default using "),Vme=n(G9e,"CODE",{});var Nct=s(Vme);LIo=r(Nct,"model.eval()"),Nct.forEach(t),xIo=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(G9e,"CODE",{});var jct=s(Xme);$Io=r(jct,"model.train()"),jct.forEach(t),G9e.forEach(t),kIo=i(la),T(nb.$$.fragment,la),la.forEach(t),Ws.forEach(t),Oqe=i(f),zi=n(f,"H2",{class:!0});var Wje=s(zi);sb=n(Wje,"A",{id:!0,class:!0,href:!0});var Dct=s(sb);zme=n(Dct,"SPAN",{});var Gct=s(zme);T(wy.$$.fragment,Gct),Gct.forEach(t),Dct.forEach(t),SIo=i(Wje),Wme=n(Wje,"SPAN",{});var Oct=s(Wme);RIo=r(Oct,"AutoModelForNextSentencePrediction"),Oct.forEach(t),Wje.forEach(t),Vqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(Ay.$$.fragment,Qs),PIo=i(Qs),Wi=n(Qs,"P",{});var dZ=s(Wi);BIo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mO=n(dZ,"A",{href:!0});var Vct=s(mO);IIo=r(Vct,"from_pretrained()"),Vct.forEach(t),qIo=r(dZ," class method or the "),gO=n(dZ,"A",{href:!0});var Xct=s(gO);NIo=r(Xct,"from_config()"),Xct.forEach(t),jIo=r(dZ,` class
method.`),dZ.forEach(t),DIo=i(Qs),yy=n(Qs,"P",{});var Qje=s(yy);GIo=r(Qje,"This class cannot be instantiated directly using "),Qme=n(Qje,"CODE",{});var zct=s(Qme);OIo=r(zct,"__init__()"),zct.forEach(t),VIo=r(Qje," (throws an error)."),Qje.forEach(t),XIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var I0=s(ct);T(Ly.$$.fragment,I0),zIo=i(I0),Hme=n(I0,"P",{});var Wct=s(Hme);WIo=r(Wct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wct.forEach(t),QIo=i(I0),Qi=n(I0,"P",{});var cZ=s(Qi);HIo=r(cZ,`Note:
Loading a model from its configuration file does `),Ume=n(cZ,"STRONG",{});var Qct=s(Ume);UIo=r(Qct,"not"),Qct.forEach(t),JIo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(cZ,"A",{href:!0});var Hct=s(hO);YIo=r(Hct,"from_pretrained()"),Hct.forEach(t),KIo=r(cZ," to load the model weights."),cZ.forEach(t),ZIo=i(I0),T(lb.$$.fragment,I0),I0.forEach(t),eqo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(xy.$$.fragment,ia),oqo=i(ia),Jme=n(ia,"P",{});var Uct=s(Jme);rqo=r(Uct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uct.forEach(t),tqo=i(ia),Ba=n(ia,"P",{});var q0=s(Ba);aqo=r(q0,"The model class to instantiate is selected based on the "),Yme=n(q0,"CODE",{});var Jct=s(Yme);nqo=r(Jct,"model_type"),Jct.forEach(t),sqo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Kme=n(q0,"CODE",{});var Yct=s(Kme);lqo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),iqo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(q0,"CODE",{});var Kct=s(Zme);dqo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),cqo=r(q0,":"),q0.forEach(t),fqo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);ib=n(Hs,"LI",{});var O9e=s(ib);ege=n(O9e,"STRONG",{});var Zct=s(ege);mqo=r(Zct,"bert"),Zct.forEach(t),gqo=r(O9e," \u2014 "),pO=n(O9e,"A",{href:!0});var eft=s(pO);hqo=r(eft,"BertForNextSentencePrediction"),eft.forEach(t),pqo=r(O9e," (BERT model)"),O9e.forEach(t),_qo=i(Hs),db=n(Hs,"LI",{});var V9e=s(db);oge=n(V9e,"STRONG",{});var oft=s(oge);uqo=r(oft,"fnet"),oft.forEach(t),bqo=r(V9e," \u2014 "),_O=n(V9e,"A",{href:!0});var rft=s(_O);vqo=r(rft,"FNetForNextSentencePrediction"),rft.forEach(t),Fqo=r(V9e," (FNet model)"),V9e.forEach(t),Tqo=i(Hs),cb=n(Hs,"LI",{});var X9e=s(cb);rge=n(X9e,"STRONG",{});var tft=s(rge);Mqo=r(tft,"megatron-bert"),tft.forEach(t),Eqo=r(X9e," \u2014 "),uO=n(X9e,"A",{href:!0});var aft=s(uO);Cqo=r(aft,"MegatronBertForNextSentencePrediction"),aft.forEach(t),wqo=r(X9e," (MegatronBert model)"),X9e.forEach(t),Aqo=i(Hs),fb=n(Hs,"LI",{});var z9e=s(fb);tge=n(z9e,"STRONG",{});var nft=s(tge);yqo=r(nft,"mobilebert"),nft.forEach(t),Lqo=r(z9e," \u2014 "),bO=n(z9e,"A",{href:!0});var sft=s(bO);xqo=r(sft,"MobileBertForNextSentencePrediction"),sft.forEach(t),$qo=r(z9e," (MobileBERT model)"),z9e.forEach(t),kqo=i(Hs),mb=n(Hs,"LI",{});var W9e=s(mb);age=n(W9e,"STRONG",{});var lft=s(age);Sqo=r(lft,"qdqbert"),lft.forEach(t),Rqo=r(W9e," \u2014 "),vO=n(W9e,"A",{href:!0});var ift=s(vO);Pqo=r(ift,"QDQBertForNextSentencePrediction"),ift.forEach(t),Bqo=r(W9e," (QDQBert model)"),W9e.forEach(t),Hs.forEach(t),Iqo=i(ia),gb=n(ia,"P",{});var Q9e=s(gb);qqo=r(Q9e,"The model is set in evaluation mode by default using "),nge=n(Q9e,"CODE",{});var dft=s(nge);Nqo=r(dft,"model.eval()"),dft.forEach(t),jqo=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(Q9e,"CODE",{});var cft=s(sge);Dqo=r(cft,"model.train()"),cft.forEach(t),Q9e.forEach(t),Gqo=i(ia),T(hb.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Xqe=i(f),Hi=n(f,"H2",{class:!0});var Hje=s(Hi);pb=n(Hje,"A",{id:!0,class:!0,href:!0});var fft=s(pb);lge=n(fft,"SPAN",{});var mft=s(lge);T($y.$$.fragment,mft),mft.forEach(t),fft.forEach(t),Oqo=i(Hje),ige=n(Hje,"SPAN",{});var gft=s(ige);Vqo=r(gft,"AutoModelForTokenClassification"),gft.forEach(t),Hje.forEach(t),zqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(ky.$$.fragment,Us),Xqo=i(Us),Ui=n(Us,"P",{});var fZ=s(Ui);zqo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FO=n(fZ,"A",{href:!0});var hft=s(FO);Wqo=r(hft,"from_pretrained()"),hft.forEach(t),Qqo=r(fZ," class method or the "),TO=n(fZ,"A",{href:!0});var pft=s(TO);Hqo=r(pft,"from_config()"),pft.forEach(t),Uqo=r(fZ,` class
method.`),fZ.forEach(t),Jqo=i(Us),Sy=n(Us,"P",{});var Uje=s(Sy);Yqo=r(Uje,"This class cannot be instantiated directly using "),dge=n(Uje,"CODE",{});var _ft=s(dge);Kqo=r(_ft,"__init__()"),_ft.forEach(t),Zqo=r(Uje," (throws an error)."),Uje.forEach(t),eNo=i(Us),ft=n(Us,"DIV",{class:!0});var N0=s(ft);T(Ry.$$.fragment,N0),oNo=i(N0),cge=n(N0,"P",{});var uft=s(cge);rNo=r(uft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uft.forEach(t),tNo=i(N0),Ji=n(N0,"P",{});var mZ=s(Ji);aNo=r(mZ,`Note:
Loading a model from its configuration file does `),fge=n(mZ,"STRONG",{});var bft=s(fge);nNo=r(bft,"not"),bft.forEach(t),sNo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(mZ,"A",{href:!0});var vft=s(MO);lNo=r(vft,"from_pretrained()"),vft.forEach(t),iNo=r(mZ," to load the model weights."),mZ.forEach(t),dNo=i(N0),T(_b.$$.fragment,N0),N0.forEach(t),cNo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Py.$$.fragment,da),fNo=i(da),mge=n(da,"P",{});var Fft=s(mge);mNo=r(Fft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fft.forEach(t),gNo=i(da),Ia=n(da,"P",{});var j0=s(Ia);hNo=r(j0,"The model class to instantiate is selected based on the "),gge=n(j0,"CODE",{});var Tft=s(gge);pNo=r(Tft,"model_type"),Tft.forEach(t),_No=r(j0,` property of the config object (either
passed as an argument or loaded from `),hge=n(j0,"CODE",{});var Mft=s(hge);uNo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),bNo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(j0,"CODE",{});var Eft=s(pge);vNo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),FNo=r(j0,":"),j0.forEach(t),TNo=i(da),U=n(da,"UL",{});var J=s(U);ub=n(J,"LI",{});var H9e=s(ub);_ge=n(H9e,"STRONG",{});var Cft=s(_ge);MNo=r(Cft,"albert"),Cft.forEach(t),ENo=r(H9e," \u2014 "),EO=n(H9e,"A",{href:!0});var wft=s(EO);CNo=r(wft,"AlbertForTokenClassification"),wft.forEach(t),wNo=r(H9e," (ALBERT model)"),H9e.forEach(t),ANo=i(J),bb=n(J,"LI",{});var U9e=s(bb);uge=n(U9e,"STRONG",{});var Aft=s(uge);yNo=r(Aft,"bert"),Aft.forEach(t),LNo=r(U9e," \u2014 "),CO=n(U9e,"A",{href:!0});var yft=s(CO);xNo=r(yft,"BertForTokenClassification"),yft.forEach(t),$No=r(U9e," (BERT model)"),U9e.forEach(t),kNo=i(J),vb=n(J,"LI",{});var J9e=s(vb);bge=n(J9e,"STRONG",{});var Lft=s(bge);SNo=r(Lft,"big_bird"),Lft.forEach(t),RNo=r(J9e," \u2014 "),wO=n(J9e,"A",{href:!0});var xft=s(wO);PNo=r(xft,"BigBirdForTokenClassification"),xft.forEach(t),BNo=r(J9e," (BigBird model)"),J9e.forEach(t),INo=i(J),Fb=n(J,"LI",{});var Y9e=s(Fb);vge=n(Y9e,"STRONG",{});var $ft=s(vge);qNo=r($ft,"camembert"),$ft.forEach(t),NNo=r(Y9e," \u2014 "),AO=n(Y9e,"A",{href:!0});var kft=s(AO);jNo=r(kft,"CamembertForTokenClassification"),kft.forEach(t),DNo=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),GNo=i(J),Tb=n(J,"LI",{});var K9e=s(Tb);Fge=n(K9e,"STRONG",{});var Sft=s(Fge);ONo=r(Sft,"canine"),Sft.forEach(t),VNo=r(K9e," \u2014 "),yO=n(K9e,"A",{href:!0});var Rft=s(yO);XNo=r(Rft,"CanineForTokenClassification"),Rft.forEach(t),zNo=r(K9e," (Canine model)"),K9e.forEach(t),WNo=i(J),Mb=n(J,"LI",{});var Z9e=s(Mb);Tge=n(Z9e,"STRONG",{});var Pft=s(Tge);QNo=r(Pft,"convbert"),Pft.forEach(t),HNo=r(Z9e," \u2014 "),LO=n(Z9e,"A",{href:!0});var Bft=s(LO);UNo=r(Bft,"ConvBertForTokenClassification"),Bft.forEach(t),JNo=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),YNo=i(J),Eb=n(J,"LI",{});var exe=s(Eb);Mge=n(exe,"STRONG",{});var Ift=s(Mge);KNo=r(Ift,"data2vec-text"),Ift.forEach(t),ZNo=r(exe," \u2014 "),xO=n(exe,"A",{href:!0});var qft=s(xO);ejo=r(qft,"Data2VecTextForTokenClassification"),qft.forEach(t),ojo=r(exe," (Data2VecText model)"),exe.forEach(t),rjo=i(J),Cb=n(J,"LI",{});var oxe=s(Cb);Ege=n(oxe,"STRONG",{});var Nft=s(Ege);tjo=r(Nft,"deberta"),Nft.forEach(t),ajo=r(oxe," \u2014 "),$O=n(oxe,"A",{href:!0});var jft=s($O);njo=r(jft,"DebertaForTokenClassification"),jft.forEach(t),sjo=r(oxe," (DeBERTa model)"),oxe.forEach(t),ljo=i(J),wb=n(J,"LI",{});var rxe=s(wb);Cge=n(rxe,"STRONG",{});var Dft=s(Cge);ijo=r(Dft,"deberta-v2"),Dft.forEach(t),djo=r(rxe," \u2014 "),kO=n(rxe,"A",{href:!0});var Gft=s(kO);cjo=r(Gft,"DebertaV2ForTokenClassification"),Gft.forEach(t),fjo=r(rxe," (DeBERTa-v2 model)"),rxe.forEach(t),mjo=i(J),Ab=n(J,"LI",{});var txe=s(Ab);wge=n(txe,"STRONG",{});var Oft=s(wge);gjo=r(Oft,"distilbert"),Oft.forEach(t),hjo=r(txe," \u2014 "),SO=n(txe,"A",{href:!0});var Vft=s(SO);pjo=r(Vft,"DistilBertForTokenClassification"),Vft.forEach(t),_jo=r(txe," (DistilBERT model)"),txe.forEach(t),ujo=i(J),yb=n(J,"LI",{});var axe=s(yb);Age=n(axe,"STRONG",{});var Xft=s(Age);bjo=r(Xft,"electra"),Xft.forEach(t),vjo=r(axe," \u2014 "),RO=n(axe,"A",{href:!0});var zft=s(RO);Fjo=r(zft,"ElectraForTokenClassification"),zft.forEach(t),Tjo=r(axe," (ELECTRA model)"),axe.forEach(t),Mjo=i(J),Lb=n(J,"LI",{});var nxe=s(Lb);yge=n(nxe,"STRONG",{});var Wft=s(yge);Ejo=r(Wft,"flaubert"),Wft.forEach(t),Cjo=r(nxe," \u2014 "),PO=n(nxe,"A",{href:!0});var Qft=s(PO);wjo=r(Qft,"FlaubertForTokenClassification"),Qft.forEach(t),Ajo=r(nxe," (FlauBERT model)"),nxe.forEach(t),yjo=i(J),xb=n(J,"LI",{});var sxe=s(xb);Lge=n(sxe,"STRONG",{});var Hft=s(Lge);Ljo=r(Hft,"fnet"),Hft.forEach(t),xjo=r(sxe," \u2014 "),BO=n(sxe,"A",{href:!0});var Uft=s(BO);$jo=r(Uft,"FNetForTokenClassification"),Uft.forEach(t),kjo=r(sxe," (FNet model)"),sxe.forEach(t),Sjo=i(J),$b=n(J,"LI",{});var lxe=s($b);xge=n(lxe,"STRONG",{});var Jft=s(xge);Rjo=r(Jft,"funnel"),Jft.forEach(t),Pjo=r(lxe," \u2014 "),IO=n(lxe,"A",{href:!0});var Yft=s(IO);Bjo=r(Yft,"FunnelForTokenClassification"),Yft.forEach(t),Ijo=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),qjo=i(J),kb=n(J,"LI",{});var ixe=s(kb);$ge=n(ixe,"STRONG",{});var Kft=s($ge);Njo=r(Kft,"gpt2"),Kft.forEach(t),jjo=r(ixe," \u2014 "),qO=n(ixe,"A",{href:!0});var Zft=s(qO);Djo=r(Zft,"GPT2ForTokenClassification"),Zft.forEach(t),Gjo=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),Ojo=i(J),Sb=n(J,"LI",{});var dxe=s(Sb);kge=n(dxe,"STRONG",{});var emt=s(kge);Vjo=r(emt,"ibert"),emt.forEach(t),Xjo=r(dxe," \u2014 "),NO=n(dxe,"A",{href:!0});var omt=s(NO);zjo=r(omt,"IBertForTokenClassification"),omt.forEach(t),Wjo=r(dxe," (I-BERT model)"),dxe.forEach(t),Qjo=i(J),Rb=n(J,"LI",{});var cxe=s(Rb);Sge=n(cxe,"STRONG",{});var rmt=s(Sge);Hjo=r(rmt,"layoutlm"),rmt.forEach(t),Ujo=r(cxe," \u2014 "),jO=n(cxe,"A",{href:!0});var tmt=s(jO);Jjo=r(tmt,"LayoutLMForTokenClassification"),tmt.forEach(t),Yjo=r(cxe," (LayoutLM model)"),cxe.forEach(t),Kjo=i(J),Pb=n(J,"LI",{});var fxe=s(Pb);Rge=n(fxe,"STRONG",{});var amt=s(Rge);Zjo=r(amt,"layoutlmv2"),amt.forEach(t),eDo=r(fxe," \u2014 "),DO=n(fxe,"A",{href:!0});var nmt=s(DO);oDo=r(nmt,"LayoutLMv2ForTokenClassification"),nmt.forEach(t),rDo=r(fxe," (LayoutLMv2 model)"),fxe.forEach(t),tDo=i(J),Bb=n(J,"LI",{});var mxe=s(Bb);Pge=n(mxe,"STRONG",{});var smt=s(Pge);aDo=r(smt,"longformer"),smt.forEach(t),nDo=r(mxe," \u2014 "),GO=n(mxe,"A",{href:!0});var lmt=s(GO);sDo=r(lmt,"LongformerForTokenClassification"),lmt.forEach(t),lDo=r(mxe," (Longformer model)"),mxe.forEach(t),iDo=i(J),Ib=n(J,"LI",{});var gxe=s(Ib);Bge=n(gxe,"STRONG",{});var imt=s(Bge);dDo=r(imt,"megatron-bert"),imt.forEach(t),cDo=r(gxe," \u2014 "),OO=n(gxe,"A",{href:!0});var dmt=s(OO);fDo=r(dmt,"MegatronBertForTokenClassification"),dmt.forEach(t),mDo=r(gxe," (MegatronBert model)"),gxe.forEach(t),gDo=i(J),qb=n(J,"LI",{});var hxe=s(qb);Ige=n(hxe,"STRONG",{});var cmt=s(Ige);hDo=r(cmt,"mobilebert"),cmt.forEach(t),pDo=r(hxe," \u2014 "),VO=n(hxe,"A",{href:!0});var fmt=s(VO);_Do=r(fmt,"MobileBertForTokenClassification"),fmt.forEach(t),uDo=r(hxe," (MobileBERT model)"),hxe.forEach(t),bDo=i(J),Nb=n(J,"LI",{});var pxe=s(Nb);qge=n(pxe,"STRONG",{});var mmt=s(qge);vDo=r(mmt,"mpnet"),mmt.forEach(t),FDo=r(pxe," \u2014 "),XO=n(pxe,"A",{href:!0});var gmt=s(XO);TDo=r(gmt,"MPNetForTokenClassification"),gmt.forEach(t),MDo=r(pxe," (MPNet model)"),pxe.forEach(t),EDo=i(J),jb=n(J,"LI",{});var _xe=s(jb);Nge=n(_xe,"STRONG",{});var hmt=s(Nge);CDo=r(hmt,"nystromformer"),hmt.forEach(t),wDo=r(_xe," \u2014 "),zO=n(_xe,"A",{href:!0});var pmt=s(zO);ADo=r(pmt,"NystromformerForTokenClassification"),pmt.forEach(t),yDo=r(_xe," (Nystromformer model)"),_xe.forEach(t),LDo=i(J),Db=n(J,"LI",{});var uxe=s(Db);jge=n(uxe,"STRONG",{});var _mt=s(jge);xDo=r(_mt,"qdqbert"),_mt.forEach(t),$Do=r(uxe," \u2014 "),WO=n(uxe,"A",{href:!0});var umt=s(WO);kDo=r(umt,"QDQBertForTokenClassification"),umt.forEach(t),SDo=r(uxe," (QDQBert model)"),uxe.forEach(t),RDo=i(J),Gb=n(J,"LI",{});var bxe=s(Gb);Dge=n(bxe,"STRONG",{});var bmt=s(Dge);PDo=r(bmt,"rembert"),bmt.forEach(t),BDo=r(bxe," \u2014 "),QO=n(bxe,"A",{href:!0});var vmt=s(QO);IDo=r(vmt,"RemBertForTokenClassification"),vmt.forEach(t),qDo=r(bxe," (RemBERT model)"),bxe.forEach(t),NDo=i(J),Ob=n(J,"LI",{});var vxe=s(Ob);Gge=n(vxe,"STRONG",{});var Fmt=s(Gge);jDo=r(Fmt,"roberta"),Fmt.forEach(t),DDo=r(vxe," \u2014 "),HO=n(vxe,"A",{href:!0});var Tmt=s(HO);GDo=r(Tmt,"RobertaForTokenClassification"),Tmt.forEach(t),ODo=r(vxe," (RoBERTa model)"),vxe.forEach(t),VDo=i(J),Vb=n(J,"LI",{});var Fxe=s(Vb);Oge=n(Fxe,"STRONG",{});var Mmt=s(Oge);XDo=r(Mmt,"roformer"),Mmt.forEach(t),zDo=r(Fxe," \u2014 "),UO=n(Fxe,"A",{href:!0});var Emt=s(UO);WDo=r(Emt,"RoFormerForTokenClassification"),Emt.forEach(t),QDo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),HDo=i(J),Xb=n(J,"LI",{});var Txe=s(Xb);Vge=n(Txe,"STRONG",{});var Cmt=s(Vge);UDo=r(Cmt,"squeezebert"),Cmt.forEach(t),JDo=r(Txe," \u2014 "),JO=n(Txe,"A",{href:!0});var wmt=s(JO);YDo=r(wmt,"SqueezeBertForTokenClassification"),wmt.forEach(t),KDo=r(Txe," (SqueezeBERT model)"),Txe.forEach(t),ZDo=i(J),zb=n(J,"LI",{});var Mxe=s(zb);Xge=n(Mxe,"STRONG",{});var Amt=s(Xge);eGo=r(Amt,"xlm"),Amt.forEach(t),oGo=r(Mxe," \u2014 "),YO=n(Mxe,"A",{href:!0});var ymt=s(YO);rGo=r(ymt,"XLMForTokenClassification"),ymt.forEach(t),tGo=r(Mxe," (XLM model)"),Mxe.forEach(t),aGo=i(J),Wb=n(J,"LI",{});var Exe=s(Wb);zge=n(Exe,"STRONG",{});var Lmt=s(zge);nGo=r(Lmt,"xlm-roberta"),Lmt.forEach(t),sGo=r(Exe," \u2014 "),KO=n(Exe,"A",{href:!0});var xmt=s(KO);lGo=r(xmt,"XLMRobertaForTokenClassification"),xmt.forEach(t),iGo=r(Exe," (XLM-RoBERTa model)"),Exe.forEach(t),dGo=i(J),Qb=n(J,"LI",{});var Cxe=s(Qb);Wge=n(Cxe,"STRONG",{});var $mt=s(Wge);cGo=r($mt,"xlm-roberta-xl"),$mt.forEach(t),fGo=r(Cxe," \u2014 "),ZO=n(Cxe,"A",{href:!0});var kmt=s(ZO);mGo=r(kmt,"XLMRobertaXLForTokenClassification"),kmt.forEach(t),gGo=r(Cxe," (XLM-RoBERTa-XL model)"),Cxe.forEach(t),hGo=i(J),Hb=n(J,"LI",{});var wxe=s(Hb);Qge=n(wxe,"STRONG",{});var Smt=s(Qge);pGo=r(Smt,"xlnet"),Smt.forEach(t),_Go=r(wxe," \u2014 "),eV=n(wxe,"A",{href:!0});var Rmt=s(eV);uGo=r(Rmt,"XLNetForTokenClassification"),Rmt.forEach(t),bGo=r(wxe," (XLNet model)"),wxe.forEach(t),vGo=i(J),Ub=n(J,"LI",{});var Axe=s(Ub);Hge=n(Axe,"STRONG",{});var Pmt=s(Hge);FGo=r(Pmt,"yoso"),Pmt.forEach(t),TGo=r(Axe," \u2014 "),oV=n(Axe,"A",{href:!0});var Bmt=s(oV);MGo=r(Bmt,"YosoForTokenClassification"),Bmt.forEach(t),EGo=r(Axe," (YOSO model)"),Axe.forEach(t),J.forEach(t),CGo=i(da),Jb=n(da,"P",{});var yxe=s(Jb);wGo=r(yxe,"The model is set in evaluation mode by default using "),Uge=n(yxe,"CODE",{});var Imt=s(Uge);AGo=r(Imt,"model.eval()"),Imt.forEach(t),yGo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(yxe,"CODE",{});var qmt=s(Jge);LGo=r(qmt,"model.train()"),qmt.forEach(t),yxe.forEach(t),xGo=i(da),T(Yb.$$.fragment,da),da.forEach(t),Us.forEach(t),Wqe=i(f),Yi=n(f,"H2",{class:!0});var Jje=s(Yi);Kb=n(Jje,"A",{id:!0,class:!0,href:!0});var Nmt=s(Kb);Yge=n(Nmt,"SPAN",{});var jmt=s(Yge);T(By.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),$Go=i(Jje),Kge=n(Jje,"SPAN",{});var Dmt=s(Kge);kGo=r(Dmt,"AutoModelForQuestionAnswering"),Dmt.forEach(t),Jje.forEach(t),Qqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Iy.$$.fragment,Js),SGo=i(Js),Ki=n(Js,"P",{});var gZ=s(Ki);RGo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rV=n(gZ,"A",{href:!0});var Gmt=s(rV);PGo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),BGo=r(gZ," class method or the "),tV=n(gZ,"A",{href:!0});var Omt=s(tV);IGo=r(Omt,"from_config()"),Omt.forEach(t),qGo=r(gZ,` class
method.`),gZ.forEach(t),NGo=i(Js),qy=n(Js,"P",{});var Yje=s(qy);jGo=r(Yje,"This class cannot be instantiated directly using "),Zge=n(Yje,"CODE",{});var Vmt=s(Zge);DGo=r(Vmt,"__init__()"),Vmt.forEach(t),GGo=r(Yje," (throws an error)."),Yje.forEach(t),OGo=i(Js),mt=n(Js,"DIV",{class:!0});var D0=s(mt);T(Ny.$$.fragment,D0),VGo=i(D0),ehe=n(D0,"P",{});var Xmt=s(ehe);XGo=r(Xmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xmt.forEach(t),zGo=i(D0),Zi=n(D0,"P",{});var hZ=s(Zi);WGo=r(hZ,`Note:
Loading a model from its configuration file does `),ohe=n(hZ,"STRONG",{});var zmt=s(ohe);QGo=r(zmt,"not"),zmt.forEach(t),HGo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(hZ,"A",{href:!0});var Wmt=s(aV);UGo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),JGo=r(hZ," to load the model weights."),hZ.forEach(t),YGo=i(D0),T(Zb.$$.fragment,D0),D0.forEach(t),KGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(jy.$$.fragment,ca),ZGo=i(ca),rhe=n(ca,"P",{});var Qmt=s(rhe);eOo=r(Qmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qmt.forEach(t),oOo=i(ca),qa=n(ca,"P",{});var G0=s(qa);rOo=r(G0,"The model class to instantiate is selected based on the "),the=n(G0,"CODE",{});var Hmt=s(the);tOo=r(Hmt,"model_type"),Hmt.forEach(t),aOo=r(G0,` property of the config object (either
passed as an argument or loaded from `),ahe=n(G0,"CODE",{});var Umt=s(ahe);nOo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),sOo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(G0,"CODE",{});var Jmt=s(nhe);lOo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),iOo=r(G0,":"),G0.forEach(t),dOo=i(ca),V=n(ca,"UL",{});var X=s(V);ev=n(X,"LI",{});var Lxe=s(ev);she=n(Lxe,"STRONG",{});var Ymt=s(she);cOo=r(Ymt,"albert"),Ymt.forEach(t),fOo=r(Lxe," \u2014 "),nV=n(Lxe,"A",{href:!0});var Kmt=s(nV);mOo=r(Kmt,"AlbertForQuestionAnswering"),Kmt.forEach(t),gOo=r(Lxe," (ALBERT model)"),Lxe.forEach(t),hOo=i(X),ov=n(X,"LI",{});var xxe=s(ov);lhe=n(xxe,"STRONG",{});var Zmt=s(lhe);pOo=r(Zmt,"bart"),Zmt.forEach(t),_Oo=r(xxe," \u2014 "),sV=n(xxe,"A",{href:!0});var egt=s(sV);uOo=r(egt,"BartForQuestionAnswering"),egt.forEach(t),bOo=r(xxe," (BART model)"),xxe.forEach(t),vOo=i(X),rv=n(X,"LI",{});var $xe=s(rv);ihe=n($xe,"STRONG",{});var ogt=s(ihe);FOo=r(ogt,"bert"),ogt.forEach(t),TOo=r($xe," \u2014 "),lV=n($xe,"A",{href:!0});var rgt=s(lV);MOo=r(rgt,"BertForQuestionAnswering"),rgt.forEach(t),EOo=r($xe," (BERT model)"),$xe.forEach(t),COo=i(X),tv=n(X,"LI",{});var kxe=s(tv);dhe=n(kxe,"STRONG",{});var tgt=s(dhe);wOo=r(tgt,"big_bird"),tgt.forEach(t),AOo=r(kxe," \u2014 "),iV=n(kxe,"A",{href:!0});var agt=s(iV);yOo=r(agt,"BigBirdForQuestionAnswering"),agt.forEach(t),LOo=r(kxe," (BigBird model)"),kxe.forEach(t),xOo=i(X),av=n(X,"LI",{});var Sxe=s(av);che=n(Sxe,"STRONG",{});var ngt=s(che);$Oo=r(ngt,"bigbird_pegasus"),ngt.forEach(t),kOo=r(Sxe," \u2014 "),dV=n(Sxe,"A",{href:!0});var sgt=s(dV);SOo=r(sgt,"BigBirdPegasusForQuestionAnswering"),sgt.forEach(t),ROo=r(Sxe," (BigBirdPegasus model)"),Sxe.forEach(t),POo=i(X),nv=n(X,"LI",{});var Rxe=s(nv);fhe=n(Rxe,"STRONG",{});var lgt=s(fhe);BOo=r(lgt,"camembert"),lgt.forEach(t),IOo=r(Rxe," \u2014 "),cV=n(Rxe,"A",{href:!0});var igt=s(cV);qOo=r(igt,"CamembertForQuestionAnswering"),igt.forEach(t),NOo=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),jOo=i(X),sv=n(X,"LI",{});var Pxe=s(sv);mhe=n(Pxe,"STRONG",{});var dgt=s(mhe);DOo=r(dgt,"canine"),dgt.forEach(t),GOo=r(Pxe," \u2014 "),fV=n(Pxe,"A",{href:!0});var cgt=s(fV);OOo=r(cgt,"CanineForQuestionAnswering"),cgt.forEach(t),VOo=r(Pxe," (Canine model)"),Pxe.forEach(t),XOo=i(X),lv=n(X,"LI",{});var Bxe=s(lv);ghe=n(Bxe,"STRONG",{});var fgt=s(ghe);zOo=r(fgt,"convbert"),fgt.forEach(t),WOo=r(Bxe," \u2014 "),mV=n(Bxe,"A",{href:!0});var mgt=s(mV);QOo=r(mgt,"ConvBertForQuestionAnswering"),mgt.forEach(t),HOo=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),UOo=i(X),iv=n(X,"LI",{});var Ixe=s(iv);hhe=n(Ixe,"STRONG",{});var ggt=s(hhe);JOo=r(ggt,"data2vec-text"),ggt.forEach(t),YOo=r(Ixe," \u2014 "),gV=n(Ixe,"A",{href:!0});var hgt=s(gV);KOo=r(hgt,"Data2VecTextForQuestionAnswering"),hgt.forEach(t),ZOo=r(Ixe," (Data2VecText model)"),Ixe.forEach(t),eVo=i(X),dv=n(X,"LI",{});var qxe=s(dv);phe=n(qxe,"STRONG",{});var pgt=s(phe);oVo=r(pgt,"deberta"),pgt.forEach(t),rVo=r(qxe," \u2014 "),hV=n(qxe,"A",{href:!0});var _gt=s(hV);tVo=r(_gt,"DebertaForQuestionAnswering"),_gt.forEach(t),aVo=r(qxe," (DeBERTa model)"),qxe.forEach(t),nVo=i(X),cv=n(X,"LI",{});var Nxe=s(cv);_he=n(Nxe,"STRONG",{});var ugt=s(_he);sVo=r(ugt,"deberta-v2"),ugt.forEach(t),lVo=r(Nxe," \u2014 "),pV=n(Nxe,"A",{href:!0});var bgt=s(pV);iVo=r(bgt,"DebertaV2ForQuestionAnswering"),bgt.forEach(t),dVo=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),cVo=i(X),fv=n(X,"LI",{});var jxe=s(fv);uhe=n(jxe,"STRONG",{});var vgt=s(uhe);fVo=r(vgt,"distilbert"),vgt.forEach(t),mVo=r(jxe," \u2014 "),_V=n(jxe,"A",{href:!0});var Fgt=s(_V);gVo=r(Fgt,"DistilBertForQuestionAnswering"),Fgt.forEach(t),hVo=r(jxe," (DistilBERT model)"),jxe.forEach(t),pVo=i(X),mv=n(X,"LI",{});var Dxe=s(mv);bhe=n(Dxe,"STRONG",{});var Tgt=s(bhe);_Vo=r(Tgt,"electra"),Tgt.forEach(t),uVo=r(Dxe," \u2014 "),uV=n(Dxe,"A",{href:!0});var Mgt=s(uV);bVo=r(Mgt,"ElectraForQuestionAnswering"),Mgt.forEach(t),vVo=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),FVo=i(X),gv=n(X,"LI",{});var Gxe=s(gv);vhe=n(Gxe,"STRONG",{});var Egt=s(vhe);TVo=r(Egt,"flaubert"),Egt.forEach(t),MVo=r(Gxe," \u2014 "),bV=n(Gxe,"A",{href:!0});var Cgt=s(bV);EVo=r(Cgt,"FlaubertForQuestionAnsweringSimple"),Cgt.forEach(t),CVo=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),wVo=i(X),hv=n(X,"LI",{});var Oxe=s(hv);Fhe=n(Oxe,"STRONG",{});var wgt=s(Fhe);AVo=r(wgt,"fnet"),wgt.forEach(t),yVo=r(Oxe," \u2014 "),vV=n(Oxe,"A",{href:!0});var Agt=s(vV);LVo=r(Agt,"FNetForQuestionAnswering"),Agt.forEach(t),xVo=r(Oxe," (FNet model)"),Oxe.forEach(t),$Vo=i(X),pv=n(X,"LI",{});var Vxe=s(pv);The=n(Vxe,"STRONG",{});var ygt=s(The);kVo=r(ygt,"funnel"),ygt.forEach(t),SVo=r(Vxe," \u2014 "),FV=n(Vxe,"A",{href:!0});var Lgt=s(FV);RVo=r(Lgt,"FunnelForQuestionAnswering"),Lgt.forEach(t),PVo=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),BVo=i(X),_v=n(X,"LI",{});var Xxe=s(_v);Mhe=n(Xxe,"STRONG",{});var xgt=s(Mhe);IVo=r(xgt,"gptj"),xgt.forEach(t),qVo=r(Xxe," \u2014 "),TV=n(Xxe,"A",{href:!0});var $gt=s(TV);NVo=r($gt,"GPTJForQuestionAnswering"),$gt.forEach(t),jVo=r(Xxe," (GPT-J model)"),Xxe.forEach(t),DVo=i(X),uv=n(X,"LI",{});var zxe=s(uv);Ehe=n(zxe,"STRONG",{});var kgt=s(Ehe);GVo=r(kgt,"ibert"),kgt.forEach(t),OVo=r(zxe," \u2014 "),MV=n(zxe,"A",{href:!0});var Sgt=s(MV);VVo=r(Sgt,"IBertForQuestionAnswering"),Sgt.forEach(t),XVo=r(zxe," (I-BERT model)"),zxe.forEach(t),zVo=i(X),bv=n(X,"LI",{});var Wxe=s(bv);Che=n(Wxe,"STRONG",{});var Rgt=s(Che);WVo=r(Rgt,"layoutlmv2"),Rgt.forEach(t),QVo=r(Wxe," \u2014 "),EV=n(Wxe,"A",{href:!0});var Pgt=s(EV);HVo=r(Pgt,"LayoutLMv2ForQuestionAnswering"),Pgt.forEach(t),UVo=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),JVo=i(X),vv=n(X,"LI",{});var Qxe=s(vv);whe=n(Qxe,"STRONG",{});var Bgt=s(whe);YVo=r(Bgt,"led"),Bgt.forEach(t),KVo=r(Qxe," \u2014 "),CV=n(Qxe,"A",{href:!0});var Igt=s(CV);ZVo=r(Igt,"LEDForQuestionAnswering"),Igt.forEach(t),eXo=r(Qxe," (LED model)"),Qxe.forEach(t),oXo=i(X),Fv=n(X,"LI",{});var Hxe=s(Fv);Ahe=n(Hxe,"STRONG",{});var qgt=s(Ahe);rXo=r(qgt,"longformer"),qgt.forEach(t),tXo=r(Hxe," \u2014 "),wV=n(Hxe,"A",{href:!0});var Ngt=s(wV);aXo=r(Ngt,"LongformerForQuestionAnswering"),Ngt.forEach(t),nXo=r(Hxe," (Longformer model)"),Hxe.forEach(t),sXo=i(X),Tv=n(X,"LI",{});var Uxe=s(Tv);yhe=n(Uxe,"STRONG",{});var jgt=s(yhe);lXo=r(jgt,"lxmert"),jgt.forEach(t),iXo=r(Uxe," \u2014 "),AV=n(Uxe,"A",{href:!0});var Dgt=s(AV);dXo=r(Dgt,"LxmertForQuestionAnswering"),Dgt.forEach(t),cXo=r(Uxe," (LXMERT model)"),Uxe.forEach(t),fXo=i(X),Mv=n(X,"LI",{});var Jxe=s(Mv);Lhe=n(Jxe,"STRONG",{});var Ggt=s(Lhe);mXo=r(Ggt,"mbart"),Ggt.forEach(t),gXo=r(Jxe," \u2014 "),yV=n(Jxe,"A",{href:!0});var Ogt=s(yV);hXo=r(Ogt,"MBartForQuestionAnswering"),Ogt.forEach(t),pXo=r(Jxe," (mBART model)"),Jxe.forEach(t),_Xo=i(X),Ev=n(X,"LI",{});var Yxe=s(Ev);xhe=n(Yxe,"STRONG",{});var Vgt=s(xhe);uXo=r(Vgt,"megatron-bert"),Vgt.forEach(t),bXo=r(Yxe," \u2014 "),LV=n(Yxe,"A",{href:!0});var Xgt=s(LV);vXo=r(Xgt,"MegatronBertForQuestionAnswering"),Xgt.forEach(t),FXo=r(Yxe," (MegatronBert model)"),Yxe.forEach(t),TXo=i(X),Cv=n(X,"LI",{});var Kxe=s(Cv);$he=n(Kxe,"STRONG",{});var zgt=s($he);MXo=r(zgt,"mobilebert"),zgt.forEach(t),EXo=r(Kxe," \u2014 "),xV=n(Kxe,"A",{href:!0});var Wgt=s(xV);CXo=r(Wgt,"MobileBertForQuestionAnswering"),Wgt.forEach(t),wXo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),AXo=i(X),wv=n(X,"LI",{});var Zxe=s(wv);khe=n(Zxe,"STRONG",{});var Qgt=s(khe);yXo=r(Qgt,"mpnet"),Qgt.forEach(t),LXo=r(Zxe," \u2014 "),$V=n(Zxe,"A",{href:!0});var Hgt=s($V);xXo=r(Hgt,"MPNetForQuestionAnswering"),Hgt.forEach(t),$Xo=r(Zxe," (MPNet model)"),Zxe.forEach(t),kXo=i(X),Av=n(X,"LI",{});var e$e=s(Av);She=n(e$e,"STRONG",{});var Ugt=s(She);SXo=r(Ugt,"nystromformer"),Ugt.forEach(t),RXo=r(e$e," \u2014 "),kV=n(e$e,"A",{href:!0});var Jgt=s(kV);PXo=r(Jgt,"NystromformerForQuestionAnswering"),Jgt.forEach(t),BXo=r(e$e," (Nystromformer model)"),e$e.forEach(t),IXo=i(X),yv=n(X,"LI",{});var o$e=s(yv);Rhe=n(o$e,"STRONG",{});var Ygt=s(Rhe);qXo=r(Ygt,"qdqbert"),Ygt.forEach(t),NXo=r(o$e," \u2014 "),SV=n(o$e,"A",{href:!0});var Kgt=s(SV);jXo=r(Kgt,"QDQBertForQuestionAnswering"),Kgt.forEach(t),DXo=r(o$e," (QDQBert model)"),o$e.forEach(t),GXo=i(X),Lv=n(X,"LI",{});var r$e=s(Lv);Phe=n(r$e,"STRONG",{});var Zgt=s(Phe);OXo=r(Zgt,"reformer"),Zgt.forEach(t),VXo=r(r$e," \u2014 "),RV=n(r$e,"A",{href:!0});var eht=s(RV);XXo=r(eht,"ReformerForQuestionAnswering"),eht.forEach(t),zXo=r(r$e," (Reformer model)"),r$e.forEach(t),WXo=i(X),xv=n(X,"LI",{});var t$e=s(xv);Bhe=n(t$e,"STRONG",{});var oht=s(Bhe);QXo=r(oht,"rembert"),oht.forEach(t),HXo=r(t$e," \u2014 "),PV=n(t$e,"A",{href:!0});var rht=s(PV);UXo=r(rht,"RemBertForQuestionAnswering"),rht.forEach(t),JXo=r(t$e," (RemBERT model)"),t$e.forEach(t),YXo=i(X),$v=n(X,"LI",{});var a$e=s($v);Ihe=n(a$e,"STRONG",{});var tht=s(Ihe);KXo=r(tht,"roberta"),tht.forEach(t),ZXo=r(a$e," \u2014 "),BV=n(a$e,"A",{href:!0});var aht=s(BV);ezo=r(aht,"RobertaForQuestionAnswering"),aht.forEach(t),ozo=r(a$e," (RoBERTa model)"),a$e.forEach(t),rzo=i(X),kv=n(X,"LI",{});var n$e=s(kv);qhe=n(n$e,"STRONG",{});var nht=s(qhe);tzo=r(nht,"roformer"),nht.forEach(t),azo=r(n$e," \u2014 "),IV=n(n$e,"A",{href:!0});var sht=s(IV);nzo=r(sht,"RoFormerForQuestionAnswering"),sht.forEach(t),szo=r(n$e," (RoFormer model)"),n$e.forEach(t),lzo=i(X),Sv=n(X,"LI",{});var s$e=s(Sv);Nhe=n(s$e,"STRONG",{});var lht=s(Nhe);izo=r(lht,"splinter"),lht.forEach(t),dzo=r(s$e," \u2014 "),qV=n(s$e,"A",{href:!0});var iht=s(qV);czo=r(iht,"SplinterForQuestionAnswering"),iht.forEach(t),fzo=r(s$e," (Splinter model)"),s$e.forEach(t),mzo=i(X),Rv=n(X,"LI",{});var l$e=s(Rv);jhe=n(l$e,"STRONG",{});var dht=s(jhe);gzo=r(dht,"squeezebert"),dht.forEach(t),hzo=r(l$e," \u2014 "),NV=n(l$e,"A",{href:!0});var cht=s(NV);pzo=r(cht,"SqueezeBertForQuestionAnswering"),cht.forEach(t),_zo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),uzo=i(X),Pv=n(X,"LI",{});var i$e=s(Pv);Dhe=n(i$e,"STRONG",{});var fht=s(Dhe);bzo=r(fht,"xlm"),fht.forEach(t),vzo=r(i$e," \u2014 "),jV=n(i$e,"A",{href:!0});var mht=s(jV);Fzo=r(mht,"XLMForQuestionAnsweringSimple"),mht.forEach(t),Tzo=r(i$e," (XLM model)"),i$e.forEach(t),Mzo=i(X),Bv=n(X,"LI",{});var d$e=s(Bv);Ghe=n(d$e,"STRONG",{});var ght=s(Ghe);Ezo=r(ght,"xlm-roberta"),ght.forEach(t),Czo=r(d$e," \u2014 "),DV=n(d$e,"A",{href:!0});var hht=s(DV);wzo=r(hht,"XLMRobertaForQuestionAnswering"),hht.forEach(t),Azo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),yzo=i(X),Iv=n(X,"LI",{});var c$e=s(Iv);Ohe=n(c$e,"STRONG",{});var pht=s(Ohe);Lzo=r(pht,"xlm-roberta-xl"),pht.forEach(t),xzo=r(c$e," \u2014 "),GV=n(c$e,"A",{href:!0});var _ht=s(GV);$zo=r(_ht,"XLMRobertaXLForQuestionAnswering"),_ht.forEach(t),kzo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),Szo=i(X),qv=n(X,"LI",{});var f$e=s(qv);Vhe=n(f$e,"STRONG",{});var uht=s(Vhe);Rzo=r(uht,"xlnet"),uht.forEach(t),Pzo=r(f$e," \u2014 "),OV=n(f$e,"A",{href:!0});var bht=s(OV);Bzo=r(bht,"XLNetForQuestionAnsweringSimple"),bht.forEach(t),Izo=r(f$e," (XLNet model)"),f$e.forEach(t),qzo=i(X),Nv=n(X,"LI",{});var m$e=s(Nv);Xhe=n(m$e,"STRONG",{});var vht=s(Xhe);Nzo=r(vht,"yoso"),vht.forEach(t),jzo=r(m$e," \u2014 "),VV=n(m$e,"A",{href:!0});var Fht=s(VV);Dzo=r(Fht,"YosoForQuestionAnswering"),Fht.forEach(t),Gzo=r(m$e," (YOSO model)"),m$e.forEach(t),X.forEach(t),Ozo=i(ca),jv=n(ca,"P",{});var g$e=s(jv);Vzo=r(g$e,"The model is set in evaluation mode by default using "),zhe=n(g$e,"CODE",{});var Tht=s(zhe);Xzo=r(Tht,"model.eval()"),Tht.forEach(t),zzo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(g$e,"CODE",{});var Mht=s(Whe);Wzo=r(Mht,"model.train()"),Mht.forEach(t),g$e.forEach(t),Qzo=i(ca),T(Dv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Hqe=i(f),ed=n(f,"H2",{class:!0});var Kje=s(ed);Gv=n(Kje,"A",{id:!0,class:!0,href:!0});var Eht=s(Gv);Qhe=n(Eht,"SPAN",{});var Cht=s(Qhe);T(Dy.$$.fragment,Cht),Cht.forEach(t),Eht.forEach(t),Hzo=i(Kje),Hhe=n(Kje,"SPAN",{});var wht=s(Hhe);Uzo=r(wht,"AutoModelForTableQuestionAnswering"),wht.forEach(t),Kje.forEach(t),Uqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Gy.$$.fragment,Ys),Jzo=i(Ys),od=n(Ys,"P",{});var pZ=s(od);Yzo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XV=n(pZ,"A",{href:!0});var Aht=s(XV);Kzo=r(Aht,"from_pretrained()"),Aht.forEach(t),Zzo=r(pZ," class method or the "),zV=n(pZ,"A",{href:!0});var yht=s(zV);eWo=r(yht,"from_config()"),yht.forEach(t),oWo=r(pZ,` class
method.`),pZ.forEach(t),rWo=i(Ys),Oy=n(Ys,"P",{});var Zje=s(Oy);tWo=r(Zje,"This class cannot be instantiated directly using "),Uhe=n(Zje,"CODE",{});var Lht=s(Uhe);aWo=r(Lht,"__init__()"),Lht.forEach(t),nWo=r(Zje," (throws an error)."),Zje.forEach(t),sWo=i(Ys),gt=n(Ys,"DIV",{class:!0});var O0=s(gt);T(Vy.$$.fragment,O0),lWo=i(O0),Jhe=n(O0,"P",{});var xht=s(Jhe);iWo=r(xht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xht.forEach(t),dWo=i(O0),rd=n(O0,"P",{});var _Z=s(rd);cWo=r(_Z,`Note:
Loading a model from its configuration file does `),Yhe=n(_Z,"STRONG",{});var $ht=s(Yhe);fWo=r($ht,"not"),$ht.forEach(t),mWo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(_Z,"A",{href:!0});var kht=s(WV);gWo=r(kht,"from_pretrained()"),kht.forEach(t),hWo=r(_Z," to load the model weights."),_Z.forEach(t),pWo=i(O0),T(Ov.$$.fragment,O0),O0.forEach(t),_Wo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Xy.$$.fragment,fa),uWo=i(fa),Khe=n(fa,"P",{});var Sht=s(Khe);bWo=r(Sht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sht.forEach(t),vWo=i(fa),Na=n(fa,"P",{});var V0=s(Na);FWo=r(V0,"The model class to instantiate is selected based on the "),Zhe=n(V0,"CODE",{});var Rht=s(Zhe);TWo=r(Rht,"model_type"),Rht.forEach(t),MWo=r(V0,` property of the config object (either
passed as an argument or loaded from `),epe=n(V0,"CODE",{});var Pht=s(epe);EWo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),CWo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(V0,"CODE",{});var Bht=s(ope);wWo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),AWo=r(V0,":"),V0.forEach(t),yWo=i(fa),rpe=n(fa,"UL",{});var Iht=s(rpe);Vv=n(Iht,"LI",{});var h$e=s(Vv);tpe=n(h$e,"STRONG",{});var qht=s(tpe);LWo=r(qht,"tapas"),qht.forEach(t),xWo=r(h$e," \u2014 "),QV=n(h$e,"A",{href:!0});var Nht=s(QV);$Wo=r(Nht,"TapasForQuestionAnswering"),Nht.forEach(t),kWo=r(h$e," (TAPAS model)"),h$e.forEach(t),Iht.forEach(t),SWo=i(fa),Xv=n(fa,"P",{});var p$e=s(Xv);RWo=r(p$e,"The model is set in evaluation mode by default using "),ape=n(p$e,"CODE",{});var jht=s(ape);PWo=r(jht,"model.eval()"),jht.forEach(t),BWo=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(p$e,"CODE",{});var Dht=s(npe);IWo=r(Dht,"model.train()"),Dht.forEach(t),p$e.forEach(t),qWo=i(fa),T(zv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Jqe=i(f),td=n(f,"H2",{class:!0});var eDe=s(td);Wv=n(eDe,"A",{id:!0,class:!0,href:!0});var Ght=s(Wv);spe=n(Ght,"SPAN",{});var Oht=s(spe);T(zy.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),NWo=i(eDe),lpe=n(eDe,"SPAN",{});var Vht=s(lpe);jWo=r(Vht,"AutoModelForImageClassification"),Vht.forEach(t),eDe.forEach(t),Yqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Wy.$$.fragment,Ks),DWo=i(Ks),ad=n(Ks,"P",{});var uZ=s(ad);GWo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HV=n(uZ,"A",{href:!0});var Xht=s(HV);OWo=r(Xht,"from_pretrained()"),Xht.forEach(t),VWo=r(uZ," class method or the "),UV=n(uZ,"A",{href:!0});var zht=s(UV);XWo=r(zht,"from_config()"),zht.forEach(t),zWo=r(uZ,` class
method.`),uZ.forEach(t),WWo=i(Ks),Qy=n(Ks,"P",{});var oDe=s(Qy);QWo=r(oDe,"This class cannot be instantiated directly using "),ipe=n(oDe,"CODE",{});var Wht=s(ipe);HWo=r(Wht,"__init__()"),Wht.forEach(t),UWo=r(oDe," (throws an error)."),oDe.forEach(t),JWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var X0=s(ht);T(Hy.$$.fragment,X0),YWo=i(X0),dpe=n(X0,"P",{});var Qht=s(dpe);KWo=r(Qht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qht.forEach(t),ZWo=i(X0),nd=n(X0,"P",{});var bZ=s(nd);eQo=r(bZ,`Note:
Loading a model from its configuration file does `),cpe=n(bZ,"STRONG",{});var Hht=s(cpe);oQo=r(Hht,"not"),Hht.forEach(t),rQo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(bZ,"A",{href:!0});var Uht=s(JV);tQo=r(Uht,"from_pretrained()"),Uht.forEach(t),aQo=r(bZ," to load the model weights."),bZ.forEach(t),nQo=i(X0),T(Qv.$$.fragment,X0),X0.forEach(t),sQo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Uy.$$.fragment,ma),lQo=i(ma),fpe=n(ma,"P",{});var Jht=s(fpe);iQo=r(Jht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jht.forEach(t),dQo=i(ma),ja=n(ma,"P",{});var z0=s(ja);cQo=r(z0,"The model class to instantiate is selected based on the "),mpe=n(z0,"CODE",{});var Yht=s(mpe);fQo=r(Yht,"model_type"),Yht.forEach(t),mQo=r(z0,` property of the config object (either
passed as an argument or loaded from `),gpe=n(z0,"CODE",{});var Kht=s(gpe);gQo=r(Kht,"pretrained_model_name_or_path"),Kht.forEach(t),hQo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(z0,"CODE",{});var Zht=s(hpe);pQo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),_Qo=r(z0,":"),z0.forEach(t),uQo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);Hv=n(Me,"LI",{});var _$e=s(Hv);ppe=n(_$e,"STRONG",{});var ept=s(ppe);bQo=r(ept,"beit"),ept.forEach(t),vQo=r(_$e," \u2014 "),YV=n(_$e,"A",{href:!0});var opt=s(YV);FQo=r(opt,"BeitForImageClassification"),opt.forEach(t),TQo=r(_$e," (BEiT model)"),_$e.forEach(t),MQo=i(Me),Uv=n(Me,"LI",{});var u$e=s(Uv);_pe=n(u$e,"STRONG",{});var rpt=s(_pe);EQo=r(rpt,"convnext"),rpt.forEach(t),CQo=r(u$e," \u2014 "),KV=n(u$e,"A",{href:!0});var tpt=s(KV);wQo=r(tpt,"ConvNextForImageClassification"),tpt.forEach(t),AQo=r(u$e," (ConvNext model)"),u$e.forEach(t),yQo=i(Me),Jv=n(Me,"LI",{});var b$e=s(Jv);upe=n(b$e,"STRONG",{});var apt=s(upe);LQo=r(apt,"cvt"),apt.forEach(t),xQo=r(b$e," \u2014 "),ZV=n(b$e,"A",{href:!0});var npt=s(ZV);$Qo=r(npt,"CvtForImageClassification"),npt.forEach(t),kQo=r(b$e," (CvT model)"),b$e.forEach(t),SQo=i(Me),Yv=n(Me,"LI",{});var v$e=s(Yv);bpe=n(v$e,"STRONG",{});var spt=s(bpe);RQo=r(spt,"data2vec-vision"),spt.forEach(t),PQo=r(v$e," \u2014 "),eX=n(v$e,"A",{href:!0});var lpt=s(eX);BQo=r(lpt,"Data2VecVisionForImageClassification"),lpt.forEach(t),IQo=r(v$e," (Data2VecVision model)"),v$e.forEach(t),qQo=i(Me),Ps=n(Me,"LI",{});var R$=s(Ps);vpe=n(R$,"STRONG",{});var ipt=s(vpe);NQo=r(ipt,"deit"),ipt.forEach(t),jQo=r(R$," \u2014 "),oX=n(R$,"A",{href:!0});var dpt=s(oX);DQo=r(dpt,"DeiTForImageClassification"),dpt.forEach(t),GQo=r(R$," or "),rX=n(R$,"A",{href:!0});var cpt=s(rX);OQo=r(cpt,"DeiTForImageClassificationWithTeacher"),cpt.forEach(t),VQo=r(R$," (DeiT model)"),R$.forEach(t),XQo=i(Me),Kv=n(Me,"LI",{});var F$e=s(Kv);Fpe=n(F$e,"STRONG",{});var fpt=s(Fpe);zQo=r(fpt,"imagegpt"),fpt.forEach(t),WQo=r(F$e," \u2014 "),tX=n(F$e,"A",{href:!0});var mpt=s(tX);QQo=r(mpt,"ImageGPTForImageClassification"),mpt.forEach(t),HQo=r(F$e," (ImageGPT model)"),F$e.forEach(t),UQo=i(Me),pt=n(Me,"LI",{});var gf=s(pt);Tpe=n(gf,"STRONG",{});var gpt=s(Tpe);JQo=r(gpt,"perceiver"),gpt.forEach(t),YQo=r(gf," \u2014 "),aX=n(gf,"A",{href:!0});var hpt=s(aX);KQo=r(hpt,"PerceiverForImageClassificationLearned"),hpt.forEach(t),ZQo=r(gf," or "),nX=n(gf,"A",{href:!0});var ppt=s(nX);eHo=r(ppt,"PerceiverForImageClassificationFourier"),ppt.forEach(t),oHo=r(gf," or "),sX=n(gf,"A",{href:!0});var _pt=s(sX);rHo=r(_pt,"PerceiverForImageClassificationConvProcessing"),_pt.forEach(t),tHo=r(gf," (Perceiver model)"),gf.forEach(t),aHo=i(Me),Zv=n(Me,"LI",{});var T$e=s(Zv);Mpe=n(T$e,"STRONG",{});var upt=s(Mpe);nHo=r(upt,"poolformer"),upt.forEach(t),sHo=r(T$e," \u2014 "),lX=n(T$e,"A",{href:!0});var bpt=s(lX);lHo=r(bpt,"PoolFormerForImageClassification"),bpt.forEach(t),iHo=r(T$e," (PoolFormer model)"),T$e.forEach(t),dHo=i(Me),eF=n(Me,"LI",{});var M$e=s(eF);Epe=n(M$e,"STRONG",{});var vpt=s(Epe);cHo=r(vpt,"regnet"),vpt.forEach(t),fHo=r(M$e," \u2014 "),iX=n(M$e,"A",{href:!0});var Fpt=s(iX);mHo=r(Fpt,"RegNetForImageClassification"),Fpt.forEach(t),gHo=r(M$e," (RegNet model)"),M$e.forEach(t),hHo=i(Me),oF=n(Me,"LI",{});var E$e=s(oF);Cpe=n(E$e,"STRONG",{});var Tpt=s(Cpe);pHo=r(Tpt,"resnet"),Tpt.forEach(t),_Ho=r(E$e," \u2014 "),dX=n(E$e,"A",{href:!0});var Mpt=s(dX);uHo=r(Mpt,"ResNetForImageClassification"),Mpt.forEach(t),bHo=r(E$e," (ResNet model)"),E$e.forEach(t),vHo=i(Me),rF=n(Me,"LI",{});var C$e=s(rF);wpe=n(C$e,"STRONG",{});var Ept=s(wpe);FHo=r(Ept,"segformer"),Ept.forEach(t),THo=r(C$e," \u2014 "),cX=n(C$e,"A",{href:!0});var Cpt=s(cX);MHo=r(Cpt,"SegformerForImageClassification"),Cpt.forEach(t),EHo=r(C$e," (SegFormer model)"),C$e.forEach(t),CHo=i(Me),tF=n(Me,"LI",{});var w$e=s(tF);Ape=n(w$e,"STRONG",{});var wpt=s(Ape);wHo=r(wpt,"swin"),wpt.forEach(t),AHo=r(w$e," \u2014 "),fX=n(w$e,"A",{href:!0});var Apt=s(fX);yHo=r(Apt,"SwinForImageClassification"),Apt.forEach(t),LHo=r(w$e," (Swin model)"),w$e.forEach(t),xHo=i(Me),aF=n(Me,"LI",{});var A$e=s(aF);ype=n(A$e,"STRONG",{});var ypt=s(ype);$Ho=r(ypt,"van"),ypt.forEach(t),kHo=r(A$e," \u2014 "),mX=n(A$e,"A",{href:!0});var Lpt=s(mX);SHo=r(Lpt,"VanForImageClassification"),Lpt.forEach(t),RHo=r(A$e," (VAN model)"),A$e.forEach(t),PHo=i(Me),nF=n(Me,"LI",{});var y$e=s(nF);Lpe=n(y$e,"STRONG",{});var xpt=s(Lpe);BHo=r(xpt,"vit"),xpt.forEach(t),IHo=r(y$e," \u2014 "),gX=n(y$e,"A",{href:!0});var $pt=s(gX);qHo=r($pt,"ViTForImageClassification"),$pt.forEach(t),NHo=r(y$e," (ViT model)"),y$e.forEach(t),Me.forEach(t),jHo=i(ma),sF=n(ma,"P",{});var L$e=s(sF);DHo=r(L$e,"The model is set in evaluation mode by default using "),xpe=n(L$e,"CODE",{});var kpt=s(xpe);GHo=r(kpt,"model.eval()"),kpt.forEach(t),OHo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(L$e,"CODE",{});var Spt=s($pe);VHo=r(Spt,"model.train()"),Spt.forEach(t),L$e.forEach(t),XHo=i(ma),T(lF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Kqe=i(f),sd=n(f,"H2",{class:!0});var rDe=s(sd);iF=n(rDe,"A",{id:!0,class:!0,href:!0});var Rpt=s(iF);kpe=n(Rpt,"SPAN",{});var Ppt=s(kpe);T(Jy.$$.fragment,Ppt),Ppt.forEach(t),Rpt.forEach(t),zHo=i(rDe),Spe=n(rDe,"SPAN",{});var Bpt=s(Spe);WHo=r(Bpt,"AutoModelForVision2Seq"),Bpt.forEach(t),rDe.forEach(t),Zqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Yy.$$.fragment,Zs),QHo=i(Zs),ld=n(Zs,"P",{});var vZ=s(ld);HHo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hX=n(vZ,"A",{href:!0});var Ipt=s(hX);UHo=r(Ipt,"from_pretrained()"),Ipt.forEach(t),JHo=r(vZ," class method or the "),pX=n(vZ,"A",{href:!0});var qpt=s(pX);YHo=r(qpt,"from_config()"),qpt.forEach(t),KHo=r(vZ,` class
method.`),vZ.forEach(t),ZHo=i(Zs),Ky=n(Zs,"P",{});var tDe=s(Ky);eUo=r(tDe,"This class cannot be instantiated directly using "),Rpe=n(tDe,"CODE",{});var Npt=s(Rpe);oUo=r(Npt,"__init__()"),Npt.forEach(t),rUo=r(tDe," (throws an error)."),tDe.forEach(t),tUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var W0=s(_t);T(Zy.$$.fragment,W0),aUo=i(W0),Ppe=n(W0,"P",{});var jpt=s(Ppe);nUo=r(jpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jpt.forEach(t),sUo=i(W0),id=n(W0,"P",{});var FZ=s(id);lUo=r(FZ,`Note:
Loading a model from its configuration file does `),Bpe=n(FZ,"STRONG",{});var Dpt=s(Bpe);iUo=r(Dpt,"not"),Dpt.forEach(t),dUo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(FZ,"A",{href:!0});var Gpt=s(_X);cUo=r(Gpt,"from_pretrained()"),Gpt.forEach(t),fUo=r(FZ," to load the model weights."),FZ.forEach(t),mUo=i(W0),T(dF.$$.fragment,W0),W0.forEach(t),gUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(eL.$$.fragment,ga),hUo=i(ga),Ipe=n(ga,"P",{});var Opt=s(Ipe);pUo=r(Opt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Opt.forEach(t),_Uo=i(ga),Da=n(ga,"P",{});var Q0=s(Da);uUo=r(Q0,"The model class to instantiate is selected based on the "),qpe=n(Q0,"CODE",{});var Vpt=s(qpe);bUo=r(Vpt,"model_type"),Vpt.forEach(t),vUo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),Npe=n(Q0,"CODE",{});var Xpt=s(Npe);FUo=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),TUo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(Q0,"CODE",{});var zpt=s(jpe);MUo=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),EUo=r(Q0,":"),Q0.forEach(t),CUo=i(ga),Dpe=n(ga,"UL",{});var Wpt=s(Dpe);cF=n(Wpt,"LI",{});var x$e=s(cF);Gpe=n(x$e,"STRONG",{});var Qpt=s(Gpe);wUo=r(Qpt,"vision-encoder-decoder"),Qpt.forEach(t),AUo=r(x$e," \u2014 "),uX=n(x$e,"A",{href:!0});var Hpt=s(uX);yUo=r(Hpt,"VisionEncoderDecoderModel"),Hpt.forEach(t),LUo=r(x$e," (Vision Encoder decoder model)"),x$e.forEach(t),Wpt.forEach(t),xUo=i(ga),fF=n(ga,"P",{});var $$e=s(fF);$Uo=r($$e,"The model is set in evaluation mode by default using "),Ope=n($$e,"CODE",{});var Upt=s(Ope);kUo=r(Upt,"model.eval()"),Upt.forEach(t),SUo=r($$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n($$e,"CODE",{});var Jpt=s(Vpe);RUo=r(Jpt,"model.train()"),Jpt.forEach(t),$$e.forEach(t),PUo=i(ga),T(mF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),eNe=i(f),dd=n(f,"H2",{class:!0});var aDe=s(dd);gF=n(aDe,"A",{id:!0,class:!0,href:!0});var Ypt=s(gF);Xpe=n(Ypt,"SPAN",{});var Kpt=s(Xpe);T(oL.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),BUo=i(aDe),zpe=n(aDe,"SPAN",{});var Zpt=s(zpe);IUo=r(Zpt,"AutoModelForAudioClassification"),Zpt.forEach(t),aDe.forEach(t),oNe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(rL.$$.fragment,el),qUo=i(el),cd=n(el,"P",{});var TZ=s(cd);NUo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bX=n(TZ,"A",{href:!0});var e_t=s(bX);jUo=r(e_t,"from_pretrained()"),e_t.forEach(t),DUo=r(TZ," class method or the "),vX=n(TZ,"A",{href:!0});var o_t=s(vX);GUo=r(o_t,"from_config()"),o_t.forEach(t),OUo=r(TZ,` class
method.`),TZ.forEach(t),VUo=i(el),tL=n(el,"P",{});var nDe=s(tL);XUo=r(nDe,"This class cannot be instantiated directly using "),Wpe=n(nDe,"CODE",{});var r_t=s(Wpe);zUo=r(r_t,"__init__()"),r_t.forEach(t),WUo=r(nDe," (throws an error)."),nDe.forEach(t),QUo=i(el),ut=n(el,"DIV",{class:!0});var H0=s(ut);T(aL.$$.fragment,H0),HUo=i(H0),Qpe=n(H0,"P",{});var t_t=s(Qpe);UUo=r(t_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),t_t.forEach(t),JUo=i(H0),fd=n(H0,"P",{});var MZ=s(fd);YUo=r(MZ,`Note:
Loading a model from its configuration file does `),Hpe=n(MZ,"STRONG",{});var a_t=s(Hpe);KUo=r(a_t,"not"),a_t.forEach(t),ZUo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(MZ,"A",{href:!0});var n_t=s(FX);eJo=r(n_t,"from_pretrained()"),n_t.forEach(t),oJo=r(MZ," to load the model weights."),MZ.forEach(t),rJo=i(H0),T(hF.$$.fragment,H0),H0.forEach(t),tJo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(nL.$$.fragment,ha),aJo=i(ha),Upe=n(ha,"P",{});var s_t=s(Upe);nJo=r(s_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),s_t.forEach(t),sJo=i(ha),Ga=n(ha,"P",{});var U0=s(Ga);lJo=r(U0,"The model class to instantiate is selected based on the "),Jpe=n(U0,"CODE",{});var l_t=s(Jpe);iJo=r(l_t,"model_type"),l_t.forEach(t),dJo=r(U0,` property of the config object (either
passed as an argument or loaded from `),Ype=n(U0,"CODE",{});var i_t=s(Ype);cJo=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),fJo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(U0,"CODE",{});var d_t=s(Kpe);mJo=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),gJo=r(U0,":"),U0.forEach(t),hJo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);pF=n(Ve,"LI",{});var k$e=s(pF);Zpe=n(k$e,"STRONG",{});var c_t=s(Zpe);pJo=r(c_t,"data2vec-audio"),c_t.forEach(t),_Jo=r(k$e," \u2014 "),TX=n(k$e,"A",{href:!0});var f_t=s(TX);uJo=r(f_t,"Data2VecAudioForSequenceClassification"),f_t.forEach(t),bJo=r(k$e," (Data2VecAudio model)"),k$e.forEach(t),vJo=i(Ve),_F=n(Ve,"LI",{});var S$e=s(_F);e_e=n(S$e,"STRONG",{});var m_t=s(e_e);FJo=r(m_t,"hubert"),m_t.forEach(t),TJo=r(S$e," \u2014 "),MX=n(S$e,"A",{href:!0});var g_t=s(MX);MJo=r(g_t,"HubertForSequenceClassification"),g_t.forEach(t),EJo=r(S$e," (Hubert model)"),S$e.forEach(t),CJo=i(Ve),uF=n(Ve,"LI",{});var R$e=s(uF);o_e=n(R$e,"STRONG",{});var h_t=s(o_e);wJo=r(h_t,"sew"),h_t.forEach(t),AJo=r(R$e," \u2014 "),EX=n(R$e,"A",{href:!0});var p_t=s(EX);yJo=r(p_t,"SEWForSequenceClassification"),p_t.forEach(t),LJo=r(R$e," (SEW model)"),R$e.forEach(t),xJo=i(Ve),bF=n(Ve,"LI",{});var P$e=s(bF);r_e=n(P$e,"STRONG",{});var __t=s(r_e);$Jo=r(__t,"sew-d"),__t.forEach(t),kJo=r(P$e," \u2014 "),CX=n(P$e,"A",{href:!0});var u_t=s(CX);SJo=r(u_t,"SEWDForSequenceClassification"),u_t.forEach(t),RJo=r(P$e," (SEW-D model)"),P$e.forEach(t),PJo=i(Ve),vF=n(Ve,"LI",{});var B$e=s(vF);t_e=n(B$e,"STRONG",{});var b_t=s(t_e);BJo=r(b_t,"unispeech"),b_t.forEach(t),IJo=r(B$e," \u2014 "),wX=n(B$e,"A",{href:!0});var v_t=s(wX);qJo=r(v_t,"UniSpeechForSequenceClassification"),v_t.forEach(t),NJo=r(B$e," (UniSpeech model)"),B$e.forEach(t),jJo=i(Ve),FF=n(Ve,"LI",{});var I$e=s(FF);a_e=n(I$e,"STRONG",{});var F_t=s(a_e);DJo=r(F_t,"unispeech-sat"),F_t.forEach(t),GJo=r(I$e," \u2014 "),AX=n(I$e,"A",{href:!0});var T_t=s(AX);OJo=r(T_t,"UniSpeechSatForSequenceClassification"),T_t.forEach(t),VJo=r(I$e," (UniSpeechSat model)"),I$e.forEach(t),XJo=i(Ve),TF=n(Ve,"LI",{});var q$e=s(TF);n_e=n(q$e,"STRONG",{});var M_t=s(n_e);zJo=r(M_t,"wav2vec2"),M_t.forEach(t),WJo=r(q$e," \u2014 "),yX=n(q$e,"A",{href:!0});var E_t=s(yX);QJo=r(E_t,"Wav2Vec2ForSequenceClassification"),E_t.forEach(t),HJo=r(q$e," (Wav2Vec2 model)"),q$e.forEach(t),UJo=i(Ve),MF=n(Ve,"LI",{});var N$e=s(MF);s_e=n(N$e,"STRONG",{});var C_t=s(s_e);JJo=r(C_t,"wav2vec2-conformer"),C_t.forEach(t),YJo=r(N$e," \u2014 "),LX=n(N$e,"A",{href:!0});var w_t=s(LX);KJo=r(w_t,"Wav2Vec2ConformerForSequenceClassification"),w_t.forEach(t),ZJo=r(N$e," (Wav2Vec2-Conformer model)"),N$e.forEach(t),eYo=i(Ve),EF=n(Ve,"LI",{});var j$e=s(EF);l_e=n(j$e,"STRONG",{});var A_t=s(l_e);oYo=r(A_t,"wavlm"),A_t.forEach(t),rYo=r(j$e," \u2014 "),xX=n(j$e,"A",{href:!0});var y_t=s(xX);tYo=r(y_t,"WavLMForSequenceClassification"),y_t.forEach(t),aYo=r(j$e," (WavLM model)"),j$e.forEach(t),Ve.forEach(t),nYo=i(ha),CF=n(ha,"P",{});var D$e=s(CF);sYo=r(D$e,"The model is set in evaluation mode by default using "),i_e=n(D$e,"CODE",{});var L_t=s(i_e);lYo=r(L_t,"model.eval()"),L_t.forEach(t),iYo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(D$e,"CODE",{});var x_t=s(d_e);dYo=r(x_t,"model.train()"),x_t.forEach(t),D$e.forEach(t),cYo=i(ha),T(wF.$$.fragment,ha),ha.forEach(t),el.forEach(t),rNe=i(f),md=n(f,"H2",{class:!0});var sDe=s(md);AF=n(sDe,"A",{id:!0,class:!0,href:!0});var $_t=s(AF);c_e=n($_t,"SPAN",{});var k_t=s(c_e);T(sL.$$.fragment,k_t),k_t.forEach(t),$_t.forEach(t),fYo=i(sDe),f_e=n(sDe,"SPAN",{});var S_t=s(f_e);mYo=r(S_t,"AutoModelForAudioFrameClassification"),S_t.forEach(t),sDe.forEach(t),tNe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(lL.$$.fragment,ol),gYo=i(ol),gd=n(ol,"P",{});var EZ=s(gd);hYo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$X=n(EZ,"A",{href:!0});var R_t=s($X);pYo=r(R_t,"from_pretrained()"),R_t.forEach(t),_Yo=r(EZ," class method or the "),kX=n(EZ,"A",{href:!0});var P_t=s(kX);uYo=r(P_t,"from_config()"),P_t.forEach(t),bYo=r(EZ,` class
method.`),EZ.forEach(t),vYo=i(ol),iL=n(ol,"P",{});var lDe=s(iL);FYo=r(lDe,"This class cannot be instantiated directly using "),m_e=n(lDe,"CODE",{});var B_t=s(m_e);TYo=r(B_t,"__init__()"),B_t.forEach(t),MYo=r(lDe," (throws an error)."),lDe.forEach(t),EYo=i(ol),bt=n(ol,"DIV",{class:!0});var J0=s(bt);T(dL.$$.fragment,J0),CYo=i(J0),g_e=n(J0,"P",{});var I_t=s(g_e);wYo=r(I_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),I_t.forEach(t),AYo=i(J0),hd=n(J0,"P",{});var CZ=s(hd);yYo=r(CZ,`Note:
Loading a model from its configuration file does `),h_e=n(CZ,"STRONG",{});var q_t=s(h_e);LYo=r(q_t,"not"),q_t.forEach(t),xYo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(CZ,"A",{href:!0});var N_t=s(SX);$Yo=r(N_t,"from_pretrained()"),N_t.forEach(t),kYo=r(CZ," to load the model weights."),CZ.forEach(t),SYo=i(J0),T(yF.$$.fragment,J0),J0.forEach(t),RYo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(cL.$$.fragment,pa),PYo=i(pa),p_e=n(pa,"P",{});var j_t=s(p_e);BYo=r(j_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),j_t.forEach(t),IYo=i(pa),Oa=n(pa,"P",{});var Y0=s(Oa);qYo=r(Y0,"The model class to instantiate is selected based on the "),__e=n(Y0,"CODE",{});var D_t=s(__e);NYo=r(D_t,"model_type"),D_t.forEach(t),jYo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),u_e=n(Y0,"CODE",{});var G_t=s(u_e);DYo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),GYo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(Y0,"CODE",{});var O_t=s(b_e);OYo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),VYo=r(Y0,":"),Y0.forEach(t),XYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);LF=n(rl,"LI",{});var G$e=s(LF);v_e=n(G$e,"STRONG",{});var V_t=s(v_e);zYo=r(V_t,"data2vec-audio"),V_t.forEach(t),WYo=r(G$e," \u2014 "),RX=n(G$e,"A",{href:!0});var X_t=s(RX);QYo=r(X_t,"Data2VecAudioForAudioFrameClassification"),X_t.forEach(t),HYo=r(G$e," (Data2VecAudio model)"),G$e.forEach(t),UYo=i(rl),xF=n(rl,"LI",{});var O$e=s(xF);F_e=n(O$e,"STRONG",{});var z_t=s(F_e);JYo=r(z_t,"unispeech-sat"),z_t.forEach(t),YYo=r(O$e," \u2014 "),PX=n(O$e,"A",{href:!0});var W_t=s(PX);KYo=r(W_t,"UniSpeechSatForAudioFrameClassification"),W_t.forEach(t),ZYo=r(O$e," (UniSpeechSat model)"),O$e.forEach(t),eKo=i(rl),$F=n(rl,"LI",{});var V$e=s($F);T_e=n(V$e,"STRONG",{});var Q_t=s(T_e);oKo=r(Q_t,"wav2vec2"),Q_t.forEach(t),rKo=r(V$e," \u2014 "),BX=n(V$e,"A",{href:!0});var H_t=s(BX);tKo=r(H_t,"Wav2Vec2ForAudioFrameClassification"),H_t.forEach(t),aKo=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),nKo=i(rl),kF=n(rl,"LI",{});var X$e=s(kF);M_e=n(X$e,"STRONG",{});var U_t=s(M_e);sKo=r(U_t,"wav2vec2-conformer"),U_t.forEach(t),lKo=r(X$e," \u2014 "),IX=n(X$e,"A",{href:!0});var J_t=s(IX);iKo=r(J_t,"Wav2Vec2ConformerForAudioFrameClassification"),J_t.forEach(t),dKo=r(X$e," (Wav2Vec2-Conformer model)"),X$e.forEach(t),cKo=i(rl),SF=n(rl,"LI",{});var z$e=s(SF);E_e=n(z$e,"STRONG",{});var Y_t=s(E_e);fKo=r(Y_t,"wavlm"),Y_t.forEach(t),mKo=r(z$e," \u2014 "),qX=n(z$e,"A",{href:!0});var K_t=s(qX);gKo=r(K_t,"WavLMForAudioFrameClassification"),K_t.forEach(t),hKo=r(z$e," (WavLM model)"),z$e.forEach(t),rl.forEach(t),pKo=i(pa),RF=n(pa,"P",{});var W$e=s(RF);_Ko=r(W$e,"The model is set in evaluation mode by default using "),C_e=n(W$e,"CODE",{});var Z_t=s(C_e);uKo=r(Z_t,"model.eval()"),Z_t.forEach(t),bKo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(W$e,"CODE",{});var eut=s(w_e);vKo=r(eut,"model.train()"),eut.forEach(t),W$e.forEach(t),FKo=i(pa),T(PF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),aNe=i(f),pd=n(f,"H2",{class:!0});var iDe=s(pd);BF=n(iDe,"A",{id:!0,class:!0,href:!0});var out=s(BF);A_e=n(out,"SPAN",{});var rut=s(A_e);T(fL.$$.fragment,rut),rut.forEach(t),out.forEach(t),TKo=i(iDe),y_e=n(iDe,"SPAN",{});var tut=s(y_e);MKo=r(tut,"AutoModelForCTC"),tut.forEach(t),iDe.forEach(t),nNe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(mL.$$.fragment,tl),EKo=i(tl),_d=n(tl,"P",{});var wZ=s(_d);CKo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NX=n(wZ,"A",{href:!0});var aut=s(NX);wKo=r(aut,"from_pretrained()"),aut.forEach(t),AKo=r(wZ," class method or the "),jX=n(wZ,"A",{href:!0});var nut=s(jX);yKo=r(nut,"from_config()"),nut.forEach(t),LKo=r(wZ,` class
method.`),wZ.forEach(t),xKo=i(tl),gL=n(tl,"P",{});var dDe=s(gL);$Ko=r(dDe,"This class cannot be instantiated directly using "),L_e=n(dDe,"CODE",{});var sut=s(L_e);kKo=r(sut,"__init__()"),sut.forEach(t),SKo=r(dDe," (throws an error)."),dDe.forEach(t),RKo=i(tl),vt=n(tl,"DIV",{class:!0});var K0=s(vt);T(hL.$$.fragment,K0),PKo=i(K0),x_e=n(K0,"P",{});var lut=s(x_e);BKo=r(lut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lut.forEach(t),IKo=i(K0),ud=n(K0,"P",{});var AZ=s(ud);qKo=r(AZ,`Note:
Loading a model from its configuration file does `),$_e=n(AZ,"STRONG",{});var iut=s($_e);NKo=r(iut,"not"),iut.forEach(t),jKo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(AZ,"A",{href:!0});var dut=s(DX);DKo=r(dut,"from_pretrained()"),dut.forEach(t),GKo=r(AZ," to load the model weights."),AZ.forEach(t),OKo=i(K0),T(IF.$$.fragment,K0),K0.forEach(t),VKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(pL.$$.fragment,_a),XKo=i(_a),k_e=n(_a,"P",{});var cut=s(k_e);zKo=r(cut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cut.forEach(t),WKo=i(_a),Va=n(_a,"P",{});var Z0=s(Va);QKo=r(Z0,"The model class to instantiate is selected based on the "),S_e=n(Z0,"CODE",{});var fut=s(S_e);HKo=r(fut,"model_type"),fut.forEach(t),UKo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),R_e=n(Z0,"CODE",{});var mut=s(R_e);JKo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),YKo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(Z0,"CODE",{});var gut=s(P_e);KKo=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),ZKo=r(Z0,":"),Z0.forEach(t),eZo=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);qF=n(Xe,"LI",{});var Q$e=s(qF);B_e=n(Q$e,"STRONG",{});var hut=s(B_e);oZo=r(hut,"data2vec-audio"),hut.forEach(t),rZo=r(Q$e," \u2014 "),GX=n(Q$e,"A",{href:!0});var put=s(GX);tZo=r(put,"Data2VecAudioForCTC"),put.forEach(t),aZo=r(Q$e," (Data2VecAudio model)"),Q$e.forEach(t),nZo=i(Xe),NF=n(Xe,"LI",{});var H$e=s(NF);I_e=n(H$e,"STRONG",{});var _ut=s(I_e);sZo=r(_ut,"hubert"),_ut.forEach(t),lZo=r(H$e," \u2014 "),OX=n(H$e,"A",{href:!0});var uut=s(OX);iZo=r(uut,"HubertForCTC"),uut.forEach(t),dZo=r(H$e," (Hubert model)"),H$e.forEach(t),cZo=i(Xe),jF=n(Xe,"LI",{});var U$e=s(jF);q_e=n(U$e,"STRONG",{});var but=s(q_e);fZo=r(but,"sew"),but.forEach(t),mZo=r(U$e," \u2014 "),VX=n(U$e,"A",{href:!0});var vut=s(VX);gZo=r(vut,"SEWForCTC"),vut.forEach(t),hZo=r(U$e," (SEW model)"),U$e.forEach(t),pZo=i(Xe),DF=n(Xe,"LI",{});var J$e=s(DF);N_e=n(J$e,"STRONG",{});var Fut=s(N_e);_Zo=r(Fut,"sew-d"),Fut.forEach(t),uZo=r(J$e," \u2014 "),XX=n(J$e,"A",{href:!0});var Tut=s(XX);bZo=r(Tut,"SEWDForCTC"),Tut.forEach(t),vZo=r(J$e," (SEW-D model)"),J$e.forEach(t),FZo=i(Xe),GF=n(Xe,"LI",{});var Y$e=s(GF);j_e=n(Y$e,"STRONG",{});var Mut=s(j_e);TZo=r(Mut,"unispeech"),Mut.forEach(t),MZo=r(Y$e," \u2014 "),zX=n(Y$e,"A",{href:!0});var Eut=s(zX);EZo=r(Eut,"UniSpeechForCTC"),Eut.forEach(t),CZo=r(Y$e," (UniSpeech model)"),Y$e.forEach(t),wZo=i(Xe),OF=n(Xe,"LI",{});var K$e=s(OF);D_e=n(K$e,"STRONG",{});var Cut=s(D_e);AZo=r(Cut,"unispeech-sat"),Cut.forEach(t),yZo=r(K$e," \u2014 "),WX=n(K$e,"A",{href:!0});var wut=s(WX);LZo=r(wut,"UniSpeechSatForCTC"),wut.forEach(t),xZo=r(K$e," (UniSpeechSat model)"),K$e.forEach(t),$Zo=i(Xe),VF=n(Xe,"LI",{});var Z$e=s(VF);G_e=n(Z$e,"STRONG",{});var Aut=s(G_e);kZo=r(Aut,"wav2vec2"),Aut.forEach(t),SZo=r(Z$e," \u2014 "),QX=n(Z$e,"A",{href:!0});var yut=s(QX);RZo=r(yut,"Wav2Vec2ForCTC"),yut.forEach(t),PZo=r(Z$e," (Wav2Vec2 model)"),Z$e.forEach(t),BZo=i(Xe),XF=n(Xe,"LI",{});var eke=s(XF);O_e=n(eke,"STRONG",{});var Lut=s(O_e);IZo=r(Lut,"wav2vec2-conformer"),Lut.forEach(t),qZo=r(eke," \u2014 "),HX=n(eke,"A",{href:!0});var xut=s(HX);NZo=r(xut,"Wav2Vec2ConformerForCTC"),xut.forEach(t),jZo=r(eke," (Wav2Vec2-Conformer model)"),eke.forEach(t),DZo=i(Xe),zF=n(Xe,"LI",{});var oke=s(zF);V_e=n(oke,"STRONG",{});var $ut=s(V_e);GZo=r($ut,"wavlm"),$ut.forEach(t),OZo=r(oke," \u2014 "),UX=n(oke,"A",{href:!0});var kut=s(UX);VZo=r(kut,"WavLMForCTC"),kut.forEach(t),XZo=r(oke," (WavLM model)"),oke.forEach(t),Xe.forEach(t),zZo=i(_a),WF=n(_a,"P",{});var rke=s(WF);WZo=r(rke,"The model is set in evaluation mode by default using "),X_e=n(rke,"CODE",{});var Sut=s(X_e);QZo=r(Sut,"model.eval()"),Sut.forEach(t),HZo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(rke,"CODE",{});var Rut=s(z_e);UZo=r(Rut,"model.train()"),Rut.forEach(t),rke.forEach(t),JZo=i(_a),T(QF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),sNe=i(f),bd=n(f,"H2",{class:!0});var cDe=s(bd);HF=n(cDe,"A",{id:!0,class:!0,href:!0});var Put=s(HF);W_e=n(Put,"SPAN",{});var But=s(W_e);T(_L.$$.fragment,But),But.forEach(t),Put.forEach(t),YZo=i(cDe),Q_e=n(cDe,"SPAN",{});var Iut=s(Q_e);KZo=r(Iut,"AutoModelForSpeechSeq2Seq"),Iut.forEach(t),cDe.forEach(t),lNe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(uL.$$.fragment,al),ZZo=i(al),vd=n(al,"P",{});var yZ=s(vd);eer=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JX=n(yZ,"A",{href:!0});var qut=s(JX);oer=r(qut,"from_pretrained()"),qut.forEach(t),rer=r(yZ," class method or the "),YX=n(yZ,"A",{href:!0});var Nut=s(YX);ter=r(Nut,"from_config()"),Nut.forEach(t),aer=r(yZ,` class
method.`),yZ.forEach(t),ner=i(al),bL=n(al,"P",{});var fDe=s(bL);ser=r(fDe,"This class cannot be instantiated directly using "),H_e=n(fDe,"CODE",{});var jut=s(H_e);ler=r(jut,"__init__()"),jut.forEach(t),ier=r(fDe," (throws an error)."),fDe.forEach(t),der=i(al),Ft=n(al,"DIV",{class:!0});var eA=s(Ft);T(vL.$$.fragment,eA),cer=i(eA),U_e=n(eA,"P",{});var Dut=s(U_e);fer=r(Dut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dut.forEach(t),mer=i(eA),Fd=n(eA,"P",{});var LZ=s(Fd);ger=r(LZ,`Note:
Loading a model from its configuration file does `),J_e=n(LZ,"STRONG",{});var Gut=s(J_e);her=r(Gut,"not"),Gut.forEach(t),per=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(LZ,"A",{href:!0});var Out=s(KX);_er=r(Out,"from_pretrained()"),Out.forEach(t),uer=r(LZ," to load the model weights."),LZ.forEach(t),ber=i(eA),T(UF.$$.fragment,eA),eA.forEach(t),ver=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(FL.$$.fragment,ua),Fer=i(ua),Y_e=n(ua,"P",{});var Vut=s(Y_e);Ter=r(Vut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vut.forEach(t),Mer=i(ua),Xa=n(ua,"P",{});var oA=s(Xa);Eer=r(oA,"The model class to instantiate is selected based on the "),K_e=n(oA,"CODE",{});var Xut=s(K_e);Cer=r(Xut,"model_type"),Xut.forEach(t),wer=r(oA,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(oA,"CODE",{});var zut=s(Z_e);Aer=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),yer=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(oA,"CODE",{});var Wut=s(eue);Ler=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),xer=r(oA,":"),oA.forEach(t),$er=i(ua),TL=n(ua,"UL",{});var mDe=s(TL);JF=n(mDe,"LI",{});var tke=s(JF);oue=n(tke,"STRONG",{});var Qut=s(oue);ker=r(Qut,"speech-encoder-decoder"),Qut.forEach(t),Ser=r(tke," \u2014 "),ZX=n(tke,"A",{href:!0});var Hut=s(ZX);Rer=r(Hut,"SpeechEncoderDecoderModel"),Hut.forEach(t),Per=r(tke," (Speech Encoder decoder model)"),tke.forEach(t),Ber=i(mDe),YF=n(mDe,"LI",{});var ake=s(YF);rue=n(ake,"STRONG",{});var Uut=s(rue);Ier=r(Uut,"speech_to_text"),Uut.forEach(t),qer=r(ake," \u2014 "),ez=n(ake,"A",{href:!0});var Jut=s(ez);Ner=r(Jut,"Speech2TextForConditionalGeneration"),Jut.forEach(t),jer=r(ake," (Speech2Text model)"),ake.forEach(t),mDe.forEach(t),Der=i(ua),KF=n(ua,"P",{});var nke=s(KF);Ger=r(nke,"The model is set in evaluation mode by default using "),tue=n(nke,"CODE",{});var Yut=s(tue);Oer=r(Yut,"model.eval()"),Yut.forEach(t),Ver=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(nke,"CODE",{});var Kut=s(aue);Xer=r(Kut,"model.train()"),Kut.forEach(t),nke.forEach(t),zer=i(ua),T(ZF.$$.fragment,ua),ua.forEach(t),al.forEach(t),iNe=i(f),Td=n(f,"H2",{class:!0});var gDe=s(Td);eT=n(gDe,"A",{id:!0,class:!0,href:!0});var Zut=s(eT);nue=n(Zut,"SPAN",{});var e2t=s(nue);T(ML.$$.fragment,e2t),e2t.forEach(t),Zut.forEach(t),Wer=i(gDe),sue=n(gDe,"SPAN",{});var o2t=s(sue);Qer=r(o2t,"AutoModelForAudioXVector"),o2t.forEach(t),gDe.forEach(t),dNe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(EL.$$.fragment,nl),Her=i(nl),Md=n(nl,"P",{});var xZ=s(Md);Uer=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oz=n(xZ,"A",{href:!0});var r2t=s(oz);Jer=r(r2t,"from_pretrained()"),r2t.forEach(t),Yer=r(xZ," class method or the "),rz=n(xZ,"A",{href:!0});var t2t=s(rz);Ker=r(t2t,"from_config()"),t2t.forEach(t),Zer=r(xZ,` class
method.`),xZ.forEach(t),eor=i(nl),CL=n(nl,"P",{});var hDe=s(CL);oor=r(hDe,"This class cannot be instantiated directly using "),lue=n(hDe,"CODE",{});var a2t=s(lue);ror=r(a2t,"__init__()"),a2t.forEach(t),tor=r(hDe," (throws an error)."),hDe.forEach(t),aor=i(nl),Tt=n(nl,"DIV",{class:!0});var rA=s(Tt);T(wL.$$.fragment,rA),nor=i(rA),iue=n(rA,"P",{});var n2t=s(iue);sor=r(n2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),n2t.forEach(t),lor=i(rA),Ed=n(rA,"P",{});var $Z=s(Ed);ior=r($Z,`Note:
Loading a model from its configuration file does `),due=n($Z,"STRONG",{});var s2t=s(due);dor=r(s2t,"not"),s2t.forEach(t),cor=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n($Z,"A",{href:!0});var l2t=s(tz);mor=r(l2t,"from_pretrained()"),l2t.forEach(t),gor=r($Z," to load the model weights."),$Z.forEach(t),hor=i(rA),T(oT.$$.fragment,rA),rA.forEach(t),por=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(AL.$$.fragment,ba),_or=i(ba),cue=n(ba,"P",{});var i2t=s(cue);uor=r(i2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),i2t.forEach(t),bor=i(ba),za=n(ba,"P",{});var tA=s(za);vor=r(tA,"The model class to instantiate is selected based on the "),fue=n(tA,"CODE",{});var d2t=s(fue);For=r(d2t,"model_type"),d2t.forEach(t),Tor=r(tA,` property of the config object (either
passed as an argument or loaded from `),mue=n(tA,"CODE",{});var c2t=s(mue);Mor=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),Eor=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(tA,"CODE",{});var f2t=s(gue);Cor=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),wor=r(tA,":"),tA.forEach(t),Aor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);rT=n(sl,"LI",{});var ske=s(rT);hue=n(ske,"STRONG",{});var m2t=s(hue);yor=r(m2t,"data2vec-audio"),m2t.forEach(t),Lor=r(ske," \u2014 "),az=n(ske,"A",{href:!0});var g2t=s(az);xor=r(g2t,"Data2VecAudioForXVector"),g2t.forEach(t),$or=r(ske," (Data2VecAudio model)"),ske.forEach(t),kor=i(sl),tT=n(sl,"LI",{});var lke=s(tT);pue=n(lke,"STRONG",{});var h2t=s(pue);Sor=r(h2t,"unispeech-sat"),h2t.forEach(t),Ror=r(lke," \u2014 "),nz=n(lke,"A",{href:!0});var p2t=s(nz);Por=r(p2t,"UniSpeechSatForXVector"),p2t.forEach(t),Bor=r(lke," (UniSpeechSat model)"),lke.forEach(t),Ior=i(sl),aT=n(sl,"LI",{});var ike=s(aT);_ue=n(ike,"STRONG",{});var _2t=s(_ue);qor=r(_2t,"wav2vec2"),_2t.forEach(t),Nor=r(ike," \u2014 "),sz=n(ike,"A",{href:!0});var u2t=s(sz);jor=r(u2t,"Wav2Vec2ForXVector"),u2t.forEach(t),Dor=r(ike," (Wav2Vec2 model)"),ike.forEach(t),Gor=i(sl),nT=n(sl,"LI",{});var dke=s(nT);uue=n(dke,"STRONG",{});var b2t=s(uue);Oor=r(b2t,"wav2vec2-conformer"),b2t.forEach(t),Vor=r(dke," \u2014 "),lz=n(dke,"A",{href:!0});var v2t=s(lz);Xor=r(v2t,"Wav2Vec2ConformerForXVector"),v2t.forEach(t),zor=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),Wor=i(sl),sT=n(sl,"LI",{});var cke=s(sT);bue=n(cke,"STRONG",{});var F2t=s(bue);Qor=r(F2t,"wavlm"),F2t.forEach(t),Hor=r(cke," \u2014 "),iz=n(cke,"A",{href:!0});var T2t=s(iz);Uor=r(T2t,"WavLMForXVector"),T2t.forEach(t),Jor=r(cke," (WavLM model)"),cke.forEach(t),sl.forEach(t),Yor=i(ba),lT=n(ba,"P",{});var fke=s(lT);Kor=r(fke,"The model is set in evaluation mode by default using "),vue=n(fke,"CODE",{});var M2t=s(vue);Zor=r(M2t,"model.eval()"),M2t.forEach(t),err=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(fke,"CODE",{});var E2t=s(Fue);orr=r(E2t,"model.train()"),E2t.forEach(t),fke.forEach(t),rrr=i(ba),T(iT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),cNe=i(f),Cd=n(f,"H2",{class:!0});var pDe=s(Cd);dT=n(pDe,"A",{id:!0,class:!0,href:!0});var C2t=s(dT);Tue=n(C2t,"SPAN",{});var w2t=s(Tue);T(yL.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),trr=i(pDe),Mue=n(pDe,"SPAN",{});var A2t=s(Mue);arr=r(A2t,"AutoModelForMaskedImageModeling"),A2t.forEach(t),pDe.forEach(t),fNe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(LL.$$.fragment,ll),nrr=i(ll),wd=n(ll,"P",{});var kZ=s(wd);srr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dz=n(kZ,"A",{href:!0});var y2t=s(dz);lrr=r(y2t,"from_pretrained()"),y2t.forEach(t),irr=r(kZ," class method or the "),cz=n(kZ,"A",{href:!0});var L2t=s(cz);drr=r(L2t,"from_config()"),L2t.forEach(t),crr=r(kZ,` class
method.`),kZ.forEach(t),frr=i(ll),xL=n(ll,"P",{});var _De=s(xL);mrr=r(_De,"This class cannot be instantiated directly using "),Eue=n(_De,"CODE",{});var x2t=s(Eue);grr=r(x2t,"__init__()"),x2t.forEach(t),hrr=r(_De," (throws an error)."),_De.forEach(t),prr=i(ll),Mt=n(ll,"DIV",{class:!0});var aA=s(Mt);T($L.$$.fragment,aA),_rr=i(aA),Cue=n(aA,"P",{});var $2t=s(Cue);urr=r($2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$2t.forEach(t),brr=i(aA),Ad=n(aA,"P",{});var SZ=s(Ad);vrr=r(SZ,`Note:
Loading a model from its configuration file does `),wue=n(SZ,"STRONG",{});var k2t=s(wue);Frr=r(k2t,"not"),k2t.forEach(t),Trr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(SZ,"A",{href:!0});var S2t=s(fz);Mrr=r(S2t,"from_pretrained()"),S2t.forEach(t),Err=r(SZ," to load the model weights."),SZ.forEach(t),Crr=i(aA),T(cT.$$.fragment,aA),aA.forEach(t),wrr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(kL.$$.fragment,va),Arr=i(va),Aue=n(va,"P",{});var R2t=s(Aue);yrr=r(R2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),R2t.forEach(t),Lrr=i(va),Wa=n(va,"P",{});var nA=s(Wa);xrr=r(nA,"The model class to instantiate is selected based on the "),yue=n(nA,"CODE",{});var P2t=s(yue);$rr=r(P2t,"model_type"),P2t.forEach(t),krr=r(nA,` property of the config object (either
passed as an argument or loaded from `),Lue=n(nA,"CODE",{});var B2t=s(Lue);Srr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),Rrr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(nA,"CODE",{});var I2t=s(xue);Prr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Brr=r(nA,":"),nA.forEach(t),Irr=i(va),yd=n(va,"UL",{});var RZ=s(yd);fT=n(RZ,"LI",{});var mke=s(fT);$ue=n(mke,"STRONG",{});var q2t=s($ue);qrr=r(q2t,"deit"),q2t.forEach(t),Nrr=r(mke," \u2014 "),mz=n(mke,"A",{href:!0});var N2t=s(mz);jrr=r(N2t,"DeiTForMaskedImageModeling"),N2t.forEach(t),Drr=r(mke," (DeiT model)"),mke.forEach(t),Grr=i(RZ),mT=n(RZ,"LI",{});var gke=s(mT);kue=n(gke,"STRONG",{});var j2t=s(kue);Orr=r(j2t,"swin"),j2t.forEach(t),Vrr=r(gke," \u2014 "),gz=n(gke,"A",{href:!0});var D2t=s(gz);Xrr=r(D2t,"SwinForMaskedImageModeling"),D2t.forEach(t),zrr=r(gke," (Swin model)"),gke.forEach(t),Wrr=i(RZ),gT=n(RZ,"LI",{});var hke=s(gT);Sue=n(hke,"STRONG",{});var G2t=s(Sue);Qrr=r(G2t,"vit"),G2t.forEach(t),Hrr=r(hke," \u2014 "),hz=n(hke,"A",{href:!0});var O2t=s(hz);Urr=r(O2t,"ViTForMaskedImageModeling"),O2t.forEach(t),Jrr=r(hke," (ViT model)"),hke.forEach(t),RZ.forEach(t),Yrr=i(va),hT=n(va,"P",{});var pke=s(hT);Krr=r(pke,"The model is set in evaluation mode by default using "),Rue=n(pke,"CODE",{});var V2t=s(Rue);Zrr=r(V2t,"model.eval()"),V2t.forEach(t),etr=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(pke,"CODE",{});var X2t=s(Pue);otr=r(X2t,"model.train()"),X2t.forEach(t),pke.forEach(t),rtr=i(va),T(pT.$$.fragment,va),va.forEach(t),ll.forEach(t),mNe=i(f),Ld=n(f,"H2",{class:!0});var uDe=s(Ld);_T=n(uDe,"A",{id:!0,class:!0,href:!0});var z2t=s(_T);Bue=n(z2t,"SPAN",{});var W2t=s(Bue);T(SL.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),ttr=i(uDe),Iue=n(uDe,"SPAN",{});var Q2t=s(Iue);atr=r(Q2t,"AutoModelForObjectDetection"),Q2t.forEach(t),uDe.forEach(t),gNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(RL.$$.fragment,il),ntr=i(il),xd=n(il,"P",{});var PZ=s(xd);str=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pz=n(PZ,"A",{href:!0});var H2t=s(pz);ltr=r(H2t,"from_pretrained()"),H2t.forEach(t),itr=r(PZ," class method or the "),_z=n(PZ,"A",{href:!0});var U2t=s(_z);dtr=r(U2t,"from_config()"),U2t.forEach(t),ctr=r(PZ,` class
method.`),PZ.forEach(t),ftr=i(il),PL=n(il,"P",{});var bDe=s(PL);mtr=r(bDe,"This class cannot be instantiated directly using "),que=n(bDe,"CODE",{});var J2t=s(que);gtr=r(J2t,"__init__()"),J2t.forEach(t),htr=r(bDe," (throws an error)."),bDe.forEach(t),ptr=i(il),Et=n(il,"DIV",{class:!0});var sA=s(Et);T(BL.$$.fragment,sA),_tr=i(sA),Nue=n(sA,"P",{});var Y2t=s(Nue);utr=r(Y2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Y2t.forEach(t),btr=i(sA),$d=n(sA,"P",{});var BZ=s($d);vtr=r(BZ,`Note:
Loading a model from its configuration file does `),jue=n(BZ,"STRONG",{});var K2t=s(jue);Ftr=r(K2t,"not"),K2t.forEach(t),Ttr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(BZ,"A",{href:!0});var Z2t=s(uz);Mtr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Etr=r(BZ," to load the model weights."),BZ.forEach(t),Ctr=i(sA),T(uT.$$.fragment,sA),sA.forEach(t),wtr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(IL.$$.fragment,Fa),Atr=i(Fa),Due=n(Fa,"P",{});var e1t=s(Due);ytr=r(e1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),e1t.forEach(t),Ltr=i(Fa),Qa=n(Fa,"P",{});var lA=s(Qa);xtr=r(lA,"The model class to instantiate is selected based on the "),Gue=n(lA,"CODE",{});var o1t=s(Gue);$tr=r(o1t,"model_type"),o1t.forEach(t),ktr=r(lA,` property of the config object (either
passed as an argument or loaded from `),Oue=n(lA,"CODE",{});var r1t=s(Oue);Str=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),Rtr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(lA,"CODE",{});var t1t=s(Vue);Ptr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),Btr=r(lA,":"),lA.forEach(t),Itr=i(Fa),qL=n(Fa,"UL",{});var vDe=s(qL);bT=n(vDe,"LI",{});var _ke=s(bT);Xue=n(_ke,"STRONG",{});var a1t=s(Xue);qtr=r(a1t,"detr"),a1t.forEach(t),Ntr=r(_ke," \u2014 "),bz=n(_ke,"A",{href:!0});var n1t=s(bz);jtr=r(n1t,"DetrForObjectDetection"),n1t.forEach(t),Dtr=r(_ke," (DETR model)"),_ke.forEach(t),Gtr=i(vDe),vT=n(vDe,"LI",{});var uke=s(vT);zue=n(uke,"STRONG",{});var s1t=s(zue);Otr=r(s1t,"yolos"),s1t.forEach(t),Vtr=r(uke," \u2014 "),vz=n(uke,"A",{href:!0});var l1t=s(vz);Xtr=r(l1t,"YolosForObjectDetection"),l1t.forEach(t),ztr=r(uke," (YOLOS model)"),uke.forEach(t),vDe.forEach(t),Wtr=i(Fa),FT=n(Fa,"P",{});var bke=s(FT);Qtr=r(bke,"The model is set in evaluation mode by default using "),Wue=n(bke,"CODE",{});var i1t=s(Wue);Htr=r(i1t,"model.eval()"),i1t.forEach(t),Utr=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(bke,"CODE",{});var d1t=s(Que);Jtr=r(d1t,"model.train()"),d1t.forEach(t),bke.forEach(t),Ytr=i(Fa),T(TT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),hNe=i(f),kd=n(f,"H2",{class:!0});var FDe=s(kd);MT=n(FDe,"A",{id:!0,class:!0,href:!0});var c1t=s(MT);Hue=n(c1t,"SPAN",{});var f1t=s(Hue);T(NL.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),Ktr=i(FDe),Uue=n(FDe,"SPAN",{});var m1t=s(Uue);Ztr=r(m1t,"AutoModelForImageSegmentation"),m1t.forEach(t),FDe.forEach(t),pNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(jL.$$.fragment,dl),ear=i(dl),Sd=n(dl,"P",{});var IZ=s(Sd);oar=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fz=n(IZ,"A",{href:!0});var g1t=s(Fz);rar=r(g1t,"from_pretrained()"),g1t.forEach(t),tar=r(IZ," class method or the "),Tz=n(IZ,"A",{href:!0});var h1t=s(Tz);aar=r(h1t,"from_config()"),h1t.forEach(t),nar=r(IZ,` class
method.`),IZ.forEach(t),sar=i(dl),DL=n(dl,"P",{});var TDe=s(DL);lar=r(TDe,"This class cannot be instantiated directly using "),Jue=n(TDe,"CODE",{});var p1t=s(Jue);iar=r(p1t,"__init__()"),p1t.forEach(t),dar=r(TDe," (throws an error)."),TDe.forEach(t),car=i(dl),Ct=n(dl,"DIV",{class:!0});var iA=s(Ct);T(GL.$$.fragment,iA),far=i(iA),Yue=n(iA,"P",{});var _1t=s(Yue);mar=r(_1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_1t.forEach(t),gar=i(iA),Rd=n(iA,"P",{});var qZ=s(Rd);har=r(qZ,`Note:
Loading a model from its configuration file does `),Kue=n(qZ,"STRONG",{});var u1t=s(Kue);par=r(u1t,"not"),u1t.forEach(t),_ar=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(qZ,"A",{href:!0});var b1t=s(Mz);uar=r(b1t,"from_pretrained()"),b1t.forEach(t),bar=r(qZ," to load the model weights."),qZ.forEach(t),Far=i(iA),T(ET.$$.fragment,iA),iA.forEach(t),Tar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(OL.$$.fragment,Ta),Mar=i(Ta),Zue=n(Ta,"P",{});var v1t=s(Zue);Ear=r(v1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),v1t.forEach(t),Car=i(Ta),Ha=n(Ta,"P",{});var dA=s(Ha);war=r(dA,"The model class to instantiate is selected based on the "),e2e=n(dA,"CODE",{});var F1t=s(e2e);Aar=r(F1t,"model_type"),F1t.forEach(t),yar=r(dA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(dA,"CODE",{});var T1t=s(o2e);Lar=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),xar=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(dA,"CODE",{});var M1t=s(r2e);$ar=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),kar=r(dA,":"),dA.forEach(t),Sar=i(Ta),t2e=n(Ta,"UL",{});var E1t=s(t2e);CT=n(E1t,"LI",{});var vke=s(CT);a2e=n(vke,"STRONG",{});var C1t=s(a2e);Rar=r(C1t,"detr"),C1t.forEach(t),Par=r(vke," \u2014 "),Ez=n(vke,"A",{href:!0});var w1t=s(Ez);Bar=r(w1t,"DetrForSegmentation"),w1t.forEach(t),Iar=r(vke," (DETR model)"),vke.forEach(t),E1t.forEach(t),qar=i(Ta),wT=n(Ta,"P",{});var Fke=s(wT);Nar=r(Fke,"The model is set in evaluation mode by default using "),n2e=n(Fke,"CODE",{});var A1t=s(n2e);jar=r(A1t,"model.eval()"),A1t.forEach(t),Dar=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(Fke,"CODE",{});var y1t=s(s2e);Gar=r(y1t,"model.train()"),y1t.forEach(t),Fke.forEach(t),Oar=i(Ta),T(AT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),_Ne=i(f),Pd=n(f,"H2",{class:!0});var MDe=s(Pd);yT=n(MDe,"A",{id:!0,class:!0,href:!0});var L1t=s(yT);l2e=n(L1t,"SPAN",{});var x1t=s(l2e);T(VL.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),Var=i(MDe),i2e=n(MDe,"SPAN",{});var $1t=s(i2e);Xar=r($1t,"AutoModelForSemanticSegmentation"),$1t.forEach(t),MDe.forEach(t),uNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(XL.$$.fragment,cl),zar=i(cl),Bd=n(cl,"P",{});var NZ=s(Bd);War=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cz=n(NZ,"A",{href:!0});var k1t=s(Cz);Qar=r(k1t,"from_pretrained()"),k1t.forEach(t),Har=r(NZ," class method or the "),wz=n(NZ,"A",{href:!0});var S1t=s(wz);Uar=r(S1t,"from_config()"),S1t.forEach(t),Jar=r(NZ,` class
method.`),NZ.forEach(t),Yar=i(cl),zL=n(cl,"P",{});var EDe=s(zL);Kar=r(EDe,"This class cannot be instantiated directly using "),d2e=n(EDe,"CODE",{});var R1t=s(d2e);Zar=r(R1t,"__init__()"),R1t.forEach(t),enr=r(EDe," (throws an error)."),EDe.forEach(t),onr=i(cl),wt=n(cl,"DIV",{class:!0});var cA=s(wt);T(WL.$$.fragment,cA),rnr=i(cA),c2e=n(cA,"P",{});var P1t=s(c2e);tnr=r(P1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),P1t.forEach(t),anr=i(cA),Id=n(cA,"P",{});var jZ=s(Id);nnr=r(jZ,`Note:
Loading a model from its configuration file does `),f2e=n(jZ,"STRONG",{});var B1t=s(f2e);snr=r(B1t,"not"),B1t.forEach(t),lnr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(jZ,"A",{href:!0});var I1t=s(Az);inr=r(I1t,"from_pretrained()"),I1t.forEach(t),dnr=r(jZ," to load the model weights."),jZ.forEach(t),cnr=i(cA),T(LT.$$.fragment,cA),cA.forEach(t),fnr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(QL.$$.fragment,Ma),mnr=i(Ma),m2e=n(Ma,"P",{});var q1t=s(m2e);gnr=r(q1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),q1t.forEach(t),hnr=i(Ma),Ua=n(Ma,"P",{});var fA=s(Ua);pnr=r(fA,"The model class to instantiate is selected based on the "),g2e=n(fA,"CODE",{});var N1t=s(g2e);_nr=r(N1t,"model_type"),N1t.forEach(t),unr=r(fA,` property of the config object (either
passed as an argument or loaded from `),h2e=n(fA,"CODE",{});var j1t=s(h2e);bnr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),vnr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(fA,"CODE",{});var D1t=s(p2e);Fnr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),Tnr=r(fA,":"),fA.forEach(t),Mnr=i(Ma),Ja=n(Ma,"UL",{});var mA=s(Ja);xT=n(mA,"LI",{});var Tke=s(xT);_2e=n(Tke,"STRONG",{});var G1t=s(_2e);Enr=r(G1t,"beit"),G1t.forEach(t),Cnr=r(Tke," \u2014 "),yz=n(Tke,"A",{href:!0});var O1t=s(yz);wnr=r(O1t,"BeitForSemanticSegmentation"),O1t.forEach(t),Anr=r(Tke," (BEiT model)"),Tke.forEach(t),ynr=i(mA),$T=n(mA,"LI",{});var Mke=s($T);u2e=n(Mke,"STRONG",{});var V1t=s(u2e);Lnr=r(V1t,"data2vec-vision"),V1t.forEach(t),xnr=r(Mke," \u2014 "),Lz=n(Mke,"A",{href:!0});var X1t=s(Lz);$nr=r(X1t,"Data2VecVisionForSemanticSegmentation"),X1t.forEach(t),knr=r(Mke," (Data2VecVision model)"),Mke.forEach(t),Snr=i(mA),kT=n(mA,"LI",{});var Eke=s(kT);b2e=n(Eke,"STRONG",{});var z1t=s(b2e);Rnr=r(z1t,"dpt"),z1t.forEach(t),Pnr=r(Eke," \u2014 "),xz=n(Eke,"A",{href:!0});var W1t=s(xz);Bnr=r(W1t,"DPTForSemanticSegmentation"),W1t.forEach(t),Inr=r(Eke," (DPT model)"),Eke.forEach(t),qnr=i(mA),ST=n(mA,"LI",{});var Cke=s(ST);v2e=n(Cke,"STRONG",{});var Q1t=s(v2e);Nnr=r(Q1t,"segformer"),Q1t.forEach(t),jnr=r(Cke," \u2014 "),$z=n(Cke,"A",{href:!0});var H1t=s($z);Dnr=r(H1t,"SegformerForSemanticSegmentation"),H1t.forEach(t),Gnr=r(Cke," (SegFormer model)"),Cke.forEach(t),mA.forEach(t),Onr=i(Ma),RT=n(Ma,"P",{});var wke=s(RT);Vnr=r(wke,"The model is set in evaluation mode by default using "),F2e=n(wke,"CODE",{});var U1t=s(F2e);Xnr=r(U1t,"model.eval()"),U1t.forEach(t),znr=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(wke,"CODE",{});var J1t=s(T2e);Wnr=r(J1t,"model.train()"),J1t.forEach(t),wke.forEach(t),Qnr=i(Ma),T(PT.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),bNe=i(f),qd=n(f,"H2",{class:!0});var CDe=s(qd);BT=n(CDe,"A",{id:!0,class:!0,href:!0});var Y1t=s(BT);M2e=n(Y1t,"SPAN",{});var K1t=s(M2e);T(HL.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),Hnr=i(CDe),E2e=n(CDe,"SPAN",{});var Z1t=s(E2e);Unr=r(Z1t,"AutoModelForInstanceSegmentation"),Z1t.forEach(t),CDe.forEach(t),vNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(UL.$$.fragment,fl),Jnr=i(fl),Nd=n(fl,"P",{});var DZ=s(Nd);Ynr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kz=n(DZ,"A",{href:!0});var e7t=s(kz);Knr=r(e7t,"from_pretrained()"),e7t.forEach(t),Znr=r(DZ," class method or the "),Sz=n(DZ,"A",{href:!0});var o7t=s(Sz);esr=r(o7t,"from_config()"),o7t.forEach(t),osr=r(DZ,` class
method.`),DZ.forEach(t),rsr=i(fl),JL=n(fl,"P",{});var wDe=s(JL);tsr=r(wDe,"This class cannot be instantiated directly using "),C2e=n(wDe,"CODE",{});var r7t=s(C2e);asr=r(r7t,"__init__()"),r7t.forEach(t),nsr=r(wDe," (throws an error)."),wDe.forEach(t),ssr=i(fl),At=n(fl,"DIV",{class:!0});var gA=s(At);T(YL.$$.fragment,gA),lsr=i(gA),w2e=n(gA,"P",{});var t7t=s(w2e);isr=r(t7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),t7t.forEach(t),dsr=i(gA),jd=n(gA,"P",{});var GZ=s(jd);csr=r(GZ,`Note:
Loading a model from its configuration file does `),A2e=n(GZ,"STRONG",{});var a7t=s(A2e);fsr=r(a7t,"not"),a7t.forEach(t),msr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(GZ,"A",{href:!0});var n7t=s(Rz);gsr=r(n7t,"from_pretrained()"),n7t.forEach(t),hsr=r(GZ," to load the model weights."),GZ.forEach(t),psr=i(gA),T(IT.$$.fragment,gA),gA.forEach(t),_sr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(KL.$$.fragment,Ea),usr=i(Ea),y2e=n(Ea,"P",{});var s7t=s(y2e);bsr=r(s7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),s7t.forEach(t),vsr=i(Ea),Ya=n(Ea,"P",{});var hA=s(Ya);Fsr=r(hA,"The model class to instantiate is selected based on the "),L2e=n(hA,"CODE",{});var l7t=s(L2e);Tsr=r(l7t,"model_type"),l7t.forEach(t),Msr=r(hA,` property of the config object (either
passed as an argument or loaded from `),x2e=n(hA,"CODE",{});var i7t=s(x2e);Esr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),Csr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(hA,"CODE",{});var d7t=s($2e);wsr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),Asr=r(hA,":"),hA.forEach(t),ysr=i(Ea),k2e=n(Ea,"UL",{});var c7t=s(k2e);qT=n(c7t,"LI",{});var Ake=s(qT);S2e=n(Ake,"STRONG",{});var f7t=s(S2e);Lsr=r(f7t,"maskformer"),f7t.forEach(t),xsr=r(Ake," \u2014 "),Pz=n(Ake,"A",{href:!0});var m7t=s(Pz);$sr=r(m7t,"MaskFormerForInstanceSegmentation"),m7t.forEach(t),ksr=r(Ake," (MaskFormer model)"),Ake.forEach(t),c7t.forEach(t),Ssr=i(Ea),NT=n(Ea,"P",{});var yke=s(NT);Rsr=r(yke,"The model is set in evaluation mode by default using "),R2e=n(yke,"CODE",{});var g7t=s(R2e);Psr=r(g7t,"model.eval()"),g7t.forEach(t),Bsr=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(yke,"CODE",{});var h7t=s(P2e);Isr=r(h7t,"model.train()"),h7t.forEach(t),yke.forEach(t),qsr=i(Ea),T(jT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),FNe=i(f),Dd=n(f,"H2",{class:!0});var ADe=s(Dd);DT=n(ADe,"A",{id:!0,class:!0,href:!0});var p7t=s(DT);B2e=n(p7t,"SPAN",{});var _7t=s(B2e);T(ZL.$$.fragment,_7t),_7t.forEach(t),p7t.forEach(t),Nsr=i(ADe),I2e=n(ADe,"SPAN",{});var u7t=s(I2e);jsr=r(u7t,"TFAutoModel"),u7t.forEach(t),ADe.forEach(t),TNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(e8.$$.fragment,ml),Dsr=i(ml),Gd=n(ml,"P",{});var OZ=s(Gd);Gsr=r(OZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bz=n(OZ,"A",{href:!0});var b7t=s(Bz);Osr=r(b7t,"from_pretrained()"),b7t.forEach(t),Vsr=r(OZ," class method or the "),Iz=n(OZ,"A",{href:!0});var v7t=s(Iz);Xsr=r(v7t,"from_config()"),v7t.forEach(t),zsr=r(OZ,` class
method.`),OZ.forEach(t),Wsr=i(ml),o8=n(ml,"P",{});var yDe=s(o8);Qsr=r(yDe,"This class cannot be instantiated directly using "),q2e=n(yDe,"CODE",{});var F7t=s(q2e);Hsr=r(F7t,"__init__()"),F7t.forEach(t),Usr=r(yDe," (throws an error)."),yDe.forEach(t),Jsr=i(ml),yt=n(ml,"DIV",{class:!0});var pA=s(yt);T(r8.$$.fragment,pA),Ysr=i(pA),N2e=n(pA,"P",{});var T7t=s(N2e);Ksr=r(T7t,"Instantiates one of the base model classes of the library from a configuration."),T7t.forEach(t),Zsr=i(pA),Od=n(pA,"P",{});var VZ=s(Od);elr=r(VZ,`Note:
Loading a model from its configuration file does `),j2e=n(VZ,"STRONG",{});var M7t=s(j2e);olr=r(M7t,"not"),M7t.forEach(t),rlr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(VZ,"A",{href:!0});var E7t=s(qz);tlr=r(E7t,"from_pretrained()"),E7t.forEach(t),alr=r(VZ," to load the model weights."),VZ.forEach(t),nlr=i(pA),T(GT.$$.fragment,pA),pA.forEach(t),slr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(t8.$$.fragment,gl),llr=i(gl),D2e=n(gl,"P",{});var C7t=s(D2e);ilr=r(C7t,"Instantiate one of the base model classes of the library from a pretrained model."),C7t.forEach(t),dlr=i(gl),Ka=n(gl,"P",{});var _A=s(Ka);clr=r(_A,"The model class to instantiate is selected based on the "),G2e=n(_A,"CODE",{});var w7t=s(G2e);flr=r(w7t,"model_type"),w7t.forEach(t),mlr=r(_A,` property of the config object (either
passed as an argument or loaded from `),O2e=n(_A,"CODE",{});var A7t=s(O2e);glr=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),hlr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(_A,"CODE",{});var y7t=s(V2e);plr=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),_lr=r(_A,":"),_A.forEach(t),ulr=i(gl),q=n(gl,"UL",{});var j=s(q);OT=n(j,"LI",{});var Lke=s(OT);X2e=n(Lke,"STRONG",{});var L7t=s(X2e);blr=r(L7t,"albert"),L7t.forEach(t),vlr=r(Lke," \u2014 "),Nz=n(Lke,"A",{href:!0});var x7t=s(Nz);Flr=r(x7t,"TFAlbertModel"),x7t.forEach(t),Tlr=r(Lke," (ALBERT model)"),Lke.forEach(t),Mlr=i(j),VT=n(j,"LI",{});var xke=s(VT);z2e=n(xke,"STRONG",{});var $7t=s(z2e);Elr=r($7t,"bart"),$7t.forEach(t),Clr=r(xke," \u2014 "),jz=n(xke,"A",{href:!0});var k7t=s(jz);wlr=r(k7t,"TFBartModel"),k7t.forEach(t),Alr=r(xke," (BART model)"),xke.forEach(t),ylr=i(j),XT=n(j,"LI",{});var $ke=s(XT);W2e=n($ke,"STRONG",{});var S7t=s(W2e);Llr=r(S7t,"bert"),S7t.forEach(t),xlr=r($ke," \u2014 "),Dz=n($ke,"A",{href:!0});var R7t=s(Dz);$lr=r(R7t,"TFBertModel"),R7t.forEach(t),klr=r($ke," (BERT model)"),$ke.forEach(t),Slr=i(j),zT=n(j,"LI",{});var kke=s(zT);Q2e=n(kke,"STRONG",{});var P7t=s(Q2e);Rlr=r(P7t,"blenderbot"),P7t.forEach(t),Plr=r(kke," \u2014 "),Gz=n(kke,"A",{href:!0});var B7t=s(Gz);Blr=r(B7t,"TFBlenderbotModel"),B7t.forEach(t),Ilr=r(kke," (Blenderbot model)"),kke.forEach(t),qlr=i(j),WT=n(j,"LI",{});var Ske=s(WT);H2e=n(Ske,"STRONG",{});var I7t=s(H2e);Nlr=r(I7t,"blenderbot-small"),I7t.forEach(t),jlr=r(Ske," \u2014 "),Oz=n(Ske,"A",{href:!0});var q7t=s(Oz);Dlr=r(q7t,"TFBlenderbotSmallModel"),q7t.forEach(t),Glr=r(Ske," (BlenderbotSmall model)"),Ske.forEach(t),Olr=i(j),QT=n(j,"LI",{});var Rke=s(QT);U2e=n(Rke,"STRONG",{});var N7t=s(U2e);Vlr=r(N7t,"camembert"),N7t.forEach(t),Xlr=r(Rke," \u2014 "),Vz=n(Rke,"A",{href:!0});var j7t=s(Vz);zlr=r(j7t,"TFCamembertModel"),j7t.forEach(t),Wlr=r(Rke," (CamemBERT model)"),Rke.forEach(t),Qlr=i(j),HT=n(j,"LI",{});var Pke=s(HT);J2e=n(Pke,"STRONG",{});var D7t=s(J2e);Hlr=r(D7t,"clip"),D7t.forEach(t),Ulr=r(Pke," \u2014 "),Xz=n(Pke,"A",{href:!0});var G7t=s(Xz);Jlr=r(G7t,"TFCLIPModel"),G7t.forEach(t),Ylr=r(Pke," (CLIP model)"),Pke.forEach(t),Klr=i(j),UT=n(j,"LI",{});var Bke=s(UT);Y2e=n(Bke,"STRONG",{});var O7t=s(Y2e);Zlr=r(O7t,"convbert"),O7t.forEach(t),eir=r(Bke," \u2014 "),zz=n(Bke,"A",{href:!0});var V7t=s(zz);oir=r(V7t,"TFConvBertModel"),V7t.forEach(t),rir=r(Bke," (ConvBERT model)"),Bke.forEach(t),tir=i(j),JT=n(j,"LI",{});var Ike=s(JT);K2e=n(Ike,"STRONG",{});var X7t=s(K2e);air=r(X7t,"convnext"),X7t.forEach(t),nir=r(Ike," \u2014 "),Wz=n(Ike,"A",{href:!0});var z7t=s(Wz);sir=r(z7t,"TFConvNextModel"),z7t.forEach(t),lir=r(Ike," (ConvNext model)"),Ike.forEach(t),iir=i(j),YT=n(j,"LI",{});var qke=s(YT);Z2e=n(qke,"STRONG",{});var W7t=s(Z2e);dir=r(W7t,"ctrl"),W7t.forEach(t),cir=r(qke," \u2014 "),Qz=n(qke,"A",{href:!0});var Q7t=s(Qz);fir=r(Q7t,"TFCTRLModel"),Q7t.forEach(t),mir=r(qke," (CTRL model)"),qke.forEach(t),gir=i(j),KT=n(j,"LI",{});var Nke=s(KT);e1e=n(Nke,"STRONG",{});var H7t=s(e1e);hir=r(H7t,"data2vec-vision"),H7t.forEach(t),pir=r(Nke," \u2014 "),Hz=n(Nke,"A",{href:!0});var U7t=s(Hz);_ir=r(U7t,"TFData2VecVisionModel"),U7t.forEach(t),uir=r(Nke," (Data2VecVision model)"),Nke.forEach(t),bir=i(j),ZT=n(j,"LI",{});var jke=s(ZT);o1e=n(jke,"STRONG",{});var J7t=s(o1e);vir=r(J7t,"deberta"),J7t.forEach(t),Fir=r(jke," \u2014 "),Uz=n(jke,"A",{href:!0});var Y7t=s(Uz);Tir=r(Y7t,"TFDebertaModel"),Y7t.forEach(t),Mir=r(jke," (DeBERTa model)"),jke.forEach(t),Eir=i(j),eM=n(j,"LI",{});var Dke=s(eM);r1e=n(Dke,"STRONG",{});var K7t=s(r1e);Cir=r(K7t,"deberta-v2"),K7t.forEach(t),wir=r(Dke," \u2014 "),Jz=n(Dke,"A",{href:!0});var Z7t=s(Jz);Air=r(Z7t,"TFDebertaV2Model"),Z7t.forEach(t),yir=r(Dke," (DeBERTa-v2 model)"),Dke.forEach(t),Lir=i(j),oM=n(j,"LI",{});var Gke=s(oM);t1e=n(Gke,"STRONG",{});var ebt=s(t1e);xir=r(ebt,"distilbert"),ebt.forEach(t),$ir=r(Gke," \u2014 "),Yz=n(Gke,"A",{href:!0});var obt=s(Yz);kir=r(obt,"TFDistilBertModel"),obt.forEach(t),Sir=r(Gke," (DistilBERT model)"),Gke.forEach(t),Rir=i(j),rM=n(j,"LI",{});var Oke=s(rM);a1e=n(Oke,"STRONG",{});var rbt=s(a1e);Pir=r(rbt,"dpr"),rbt.forEach(t),Bir=r(Oke," \u2014 "),Kz=n(Oke,"A",{href:!0});var tbt=s(Kz);Iir=r(tbt,"TFDPRQuestionEncoder"),tbt.forEach(t),qir=r(Oke," (DPR model)"),Oke.forEach(t),Nir=i(j),tM=n(j,"LI",{});var Vke=s(tM);n1e=n(Vke,"STRONG",{});var abt=s(n1e);jir=r(abt,"electra"),abt.forEach(t),Dir=r(Vke," \u2014 "),Zz=n(Vke,"A",{href:!0});var nbt=s(Zz);Gir=r(nbt,"TFElectraModel"),nbt.forEach(t),Oir=r(Vke," (ELECTRA model)"),Vke.forEach(t),Vir=i(j),aM=n(j,"LI",{});var Xke=s(aM);s1e=n(Xke,"STRONG",{});var sbt=s(s1e);Xir=r(sbt,"flaubert"),sbt.forEach(t),zir=r(Xke," \u2014 "),eW=n(Xke,"A",{href:!0});var lbt=s(eW);Wir=r(lbt,"TFFlaubertModel"),lbt.forEach(t),Qir=r(Xke," (FlauBERT model)"),Xke.forEach(t),Hir=i(j),Bs=n(j,"LI",{});var P$=s(Bs);l1e=n(P$,"STRONG",{});var ibt=s(l1e);Uir=r(ibt,"funnel"),ibt.forEach(t),Jir=r(P$," \u2014 "),oW=n(P$,"A",{href:!0});var dbt=s(oW);Yir=r(dbt,"TFFunnelModel"),dbt.forEach(t),Kir=r(P$," or "),rW=n(P$,"A",{href:!0});var cbt=s(rW);Zir=r(cbt,"TFFunnelBaseModel"),cbt.forEach(t),edr=r(P$," (Funnel Transformer model)"),P$.forEach(t),odr=i(j),nM=n(j,"LI",{});var zke=s(nM);i1e=n(zke,"STRONG",{});var fbt=s(i1e);rdr=r(fbt,"gpt2"),fbt.forEach(t),tdr=r(zke," \u2014 "),tW=n(zke,"A",{href:!0});var mbt=s(tW);adr=r(mbt,"TFGPT2Model"),mbt.forEach(t),ndr=r(zke," (OpenAI GPT-2 model)"),zke.forEach(t),sdr=i(j),sM=n(j,"LI",{});var Wke=s(sM);d1e=n(Wke,"STRONG",{});var gbt=s(d1e);ldr=r(gbt,"gptj"),gbt.forEach(t),idr=r(Wke," \u2014 "),aW=n(Wke,"A",{href:!0});var hbt=s(aW);ddr=r(hbt,"TFGPTJModel"),hbt.forEach(t),cdr=r(Wke," (GPT-J model)"),Wke.forEach(t),fdr=i(j),lM=n(j,"LI",{});var Qke=s(lM);c1e=n(Qke,"STRONG",{});var pbt=s(c1e);mdr=r(pbt,"hubert"),pbt.forEach(t),gdr=r(Qke," \u2014 "),nW=n(Qke,"A",{href:!0});var _bt=s(nW);hdr=r(_bt,"TFHubertModel"),_bt.forEach(t),pdr=r(Qke," (Hubert model)"),Qke.forEach(t),_dr=i(j),iM=n(j,"LI",{});var Hke=s(iM);f1e=n(Hke,"STRONG",{});var ubt=s(f1e);udr=r(ubt,"layoutlm"),ubt.forEach(t),bdr=r(Hke," \u2014 "),sW=n(Hke,"A",{href:!0});var bbt=s(sW);vdr=r(bbt,"TFLayoutLMModel"),bbt.forEach(t),Fdr=r(Hke," (LayoutLM model)"),Hke.forEach(t),Tdr=i(j),dM=n(j,"LI",{});var Uke=s(dM);m1e=n(Uke,"STRONG",{});var vbt=s(m1e);Mdr=r(vbt,"led"),vbt.forEach(t),Edr=r(Uke," \u2014 "),lW=n(Uke,"A",{href:!0});var Fbt=s(lW);Cdr=r(Fbt,"TFLEDModel"),Fbt.forEach(t),wdr=r(Uke," (LED model)"),Uke.forEach(t),Adr=i(j),cM=n(j,"LI",{});var Jke=s(cM);g1e=n(Jke,"STRONG",{});var Tbt=s(g1e);ydr=r(Tbt,"longformer"),Tbt.forEach(t),Ldr=r(Jke," \u2014 "),iW=n(Jke,"A",{href:!0});var Mbt=s(iW);xdr=r(Mbt,"TFLongformerModel"),Mbt.forEach(t),$dr=r(Jke," (Longformer model)"),Jke.forEach(t),kdr=i(j),fM=n(j,"LI",{});var Yke=s(fM);h1e=n(Yke,"STRONG",{});var Ebt=s(h1e);Sdr=r(Ebt,"lxmert"),Ebt.forEach(t),Rdr=r(Yke," \u2014 "),dW=n(Yke,"A",{href:!0});var Cbt=s(dW);Pdr=r(Cbt,"TFLxmertModel"),Cbt.forEach(t),Bdr=r(Yke," (LXMERT model)"),Yke.forEach(t),Idr=i(j),mM=n(j,"LI",{});var Kke=s(mM);p1e=n(Kke,"STRONG",{});var wbt=s(p1e);qdr=r(wbt,"marian"),wbt.forEach(t),Ndr=r(Kke," \u2014 "),cW=n(Kke,"A",{href:!0});var Abt=s(cW);jdr=r(Abt,"TFMarianModel"),Abt.forEach(t),Ddr=r(Kke," (Marian model)"),Kke.forEach(t),Gdr=i(j),gM=n(j,"LI",{});var Zke=s(gM);_1e=n(Zke,"STRONG",{});var ybt=s(_1e);Odr=r(ybt,"mbart"),ybt.forEach(t),Vdr=r(Zke," \u2014 "),fW=n(Zke,"A",{href:!0});var Lbt=s(fW);Xdr=r(Lbt,"TFMBartModel"),Lbt.forEach(t),zdr=r(Zke," (mBART model)"),Zke.forEach(t),Wdr=i(j),hM=n(j,"LI",{});var eSe=s(hM);u1e=n(eSe,"STRONG",{});var xbt=s(u1e);Qdr=r(xbt,"mobilebert"),xbt.forEach(t),Hdr=r(eSe," \u2014 "),mW=n(eSe,"A",{href:!0});var $bt=s(mW);Udr=r($bt,"TFMobileBertModel"),$bt.forEach(t),Jdr=r(eSe," (MobileBERT model)"),eSe.forEach(t),Ydr=i(j),pM=n(j,"LI",{});var oSe=s(pM);b1e=n(oSe,"STRONG",{});var kbt=s(b1e);Kdr=r(kbt,"mpnet"),kbt.forEach(t),Zdr=r(oSe," \u2014 "),gW=n(oSe,"A",{href:!0});var Sbt=s(gW);ecr=r(Sbt,"TFMPNetModel"),Sbt.forEach(t),ocr=r(oSe," (MPNet model)"),oSe.forEach(t),rcr=i(j),_M=n(j,"LI",{});var rSe=s(_M);v1e=n(rSe,"STRONG",{});var Rbt=s(v1e);tcr=r(Rbt,"mt5"),Rbt.forEach(t),acr=r(rSe," \u2014 "),hW=n(rSe,"A",{href:!0});var Pbt=s(hW);ncr=r(Pbt,"TFMT5Model"),Pbt.forEach(t),scr=r(rSe," (mT5 model)"),rSe.forEach(t),lcr=i(j),uM=n(j,"LI",{});var tSe=s(uM);F1e=n(tSe,"STRONG",{});var Bbt=s(F1e);icr=r(Bbt,"openai-gpt"),Bbt.forEach(t),dcr=r(tSe," \u2014 "),pW=n(tSe,"A",{href:!0});var Ibt=s(pW);ccr=r(Ibt,"TFOpenAIGPTModel"),Ibt.forEach(t),fcr=r(tSe," (OpenAI GPT model)"),tSe.forEach(t),mcr=i(j),bM=n(j,"LI",{});var aSe=s(bM);T1e=n(aSe,"STRONG",{});var qbt=s(T1e);gcr=r(qbt,"opt"),qbt.forEach(t),hcr=r(aSe," \u2014 "),_W=n(aSe,"A",{href:!0});var Nbt=s(_W);pcr=r(Nbt,"TFOPTModel"),Nbt.forEach(t),_cr=r(aSe," (OPT model)"),aSe.forEach(t),ucr=i(j),vM=n(j,"LI",{});var nSe=s(vM);M1e=n(nSe,"STRONG",{});var jbt=s(M1e);bcr=r(jbt,"pegasus"),jbt.forEach(t),vcr=r(nSe," \u2014 "),uW=n(nSe,"A",{href:!0});var Dbt=s(uW);Fcr=r(Dbt,"TFPegasusModel"),Dbt.forEach(t),Tcr=r(nSe," (Pegasus model)"),nSe.forEach(t),Mcr=i(j),FM=n(j,"LI",{});var sSe=s(FM);E1e=n(sSe,"STRONG",{});var Gbt=s(E1e);Ecr=r(Gbt,"rembert"),Gbt.forEach(t),Ccr=r(sSe," \u2014 "),bW=n(sSe,"A",{href:!0});var Obt=s(bW);wcr=r(Obt,"TFRemBertModel"),Obt.forEach(t),Acr=r(sSe," (RemBERT model)"),sSe.forEach(t),ycr=i(j),TM=n(j,"LI",{});var lSe=s(TM);C1e=n(lSe,"STRONG",{});var Vbt=s(C1e);Lcr=r(Vbt,"roberta"),Vbt.forEach(t),xcr=r(lSe," \u2014 "),vW=n(lSe,"A",{href:!0});var Xbt=s(vW);$cr=r(Xbt,"TFRobertaModel"),Xbt.forEach(t),kcr=r(lSe," (RoBERTa model)"),lSe.forEach(t),Scr=i(j),MM=n(j,"LI",{});var iSe=s(MM);w1e=n(iSe,"STRONG",{});var zbt=s(w1e);Rcr=r(zbt,"roformer"),zbt.forEach(t),Pcr=r(iSe," \u2014 "),FW=n(iSe,"A",{href:!0});var Wbt=s(FW);Bcr=r(Wbt,"TFRoFormerModel"),Wbt.forEach(t),Icr=r(iSe," (RoFormer model)"),iSe.forEach(t),qcr=i(j),EM=n(j,"LI",{});var dSe=s(EM);A1e=n(dSe,"STRONG",{});var Qbt=s(A1e);Ncr=r(Qbt,"speech_to_text"),Qbt.forEach(t),jcr=r(dSe," \u2014 "),TW=n(dSe,"A",{href:!0});var Hbt=s(TW);Dcr=r(Hbt,"TFSpeech2TextModel"),Hbt.forEach(t),Gcr=r(dSe," (Speech2Text model)"),dSe.forEach(t),Ocr=i(j),CM=n(j,"LI",{});var cSe=s(CM);y1e=n(cSe,"STRONG",{});var Ubt=s(y1e);Vcr=r(Ubt,"swin"),Ubt.forEach(t),Xcr=r(cSe," \u2014 "),MW=n(cSe,"A",{href:!0});var Jbt=s(MW);zcr=r(Jbt,"TFSwinModel"),Jbt.forEach(t),Wcr=r(cSe," (Swin model)"),cSe.forEach(t),Qcr=i(j),wM=n(j,"LI",{});var fSe=s(wM);L1e=n(fSe,"STRONG",{});var Ybt=s(L1e);Hcr=r(Ybt,"t5"),Ybt.forEach(t),Ucr=r(fSe," \u2014 "),EW=n(fSe,"A",{href:!0});var Kbt=s(EW);Jcr=r(Kbt,"TFT5Model"),Kbt.forEach(t),Ycr=r(fSe," (T5 model)"),fSe.forEach(t),Kcr=i(j),AM=n(j,"LI",{});var mSe=s(AM);x1e=n(mSe,"STRONG",{});var Zbt=s(x1e);Zcr=r(Zbt,"tapas"),Zbt.forEach(t),efr=r(mSe," \u2014 "),CW=n(mSe,"A",{href:!0});var evt=s(CW);ofr=r(evt,"TFTapasModel"),evt.forEach(t),rfr=r(mSe," (TAPAS model)"),mSe.forEach(t),tfr=i(j),yM=n(j,"LI",{});var gSe=s(yM);$1e=n(gSe,"STRONG",{});var ovt=s($1e);afr=r(ovt,"transfo-xl"),ovt.forEach(t),nfr=r(gSe," \u2014 "),wW=n(gSe,"A",{href:!0});var rvt=s(wW);sfr=r(rvt,"TFTransfoXLModel"),rvt.forEach(t),lfr=r(gSe," (Transformer-XL model)"),gSe.forEach(t),ifr=i(j),LM=n(j,"LI",{});var hSe=s(LM);k1e=n(hSe,"STRONG",{});var tvt=s(k1e);dfr=r(tvt,"vit"),tvt.forEach(t),cfr=r(hSe," \u2014 "),AW=n(hSe,"A",{href:!0});var avt=s(AW);ffr=r(avt,"TFViTModel"),avt.forEach(t),mfr=r(hSe," (ViT model)"),hSe.forEach(t),gfr=i(j),xM=n(j,"LI",{});var pSe=s(xM);S1e=n(pSe,"STRONG",{});var nvt=s(S1e);hfr=r(nvt,"vit_mae"),nvt.forEach(t),pfr=r(pSe," \u2014 "),yW=n(pSe,"A",{href:!0});var svt=s(yW);_fr=r(svt,"TFViTMAEModel"),svt.forEach(t),ufr=r(pSe," (ViTMAE model)"),pSe.forEach(t),bfr=i(j),$M=n(j,"LI",{});var _Se=s($M);R1e=n(_Se,"STRONG",{});var lvt=s(R1e);vfr=r(lvt,"wav2vec2"),lvt.forEach(t),Ffr=r(_Se," \u2014 "),LW=n(_Se,"A",{href:!0});var ivt=s(LW);Tfr=r(ivt,"TFWav2Vec2Model"),ivt.forEach(t),Mfr=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),Efr=i(j),kM=n(j,"LI",{});var uSe=s(kM);P1e=n(uSe,"STRONG",{});var dvt=s(P1e);Cfr=r(dvt,"xlm"),dvt.forEach(t),wfr=r(uSe," \u2014 "),xW=n(uSe,"A",{href:!0});var cvt=s(xW);Afr=r(cvt,"TFXLMModel"),cvt.forEach(t),yfr=r(uSe," (XLM model)"),uSe.forEach(t),Lfr=i(j),SM=n(j,"LI",{});var bSe=s(SM);B1e=n(bSe,"STRONG",{});var fvt=s(B1e);xfr=r(fvt,"xlm-roberta"),fvt.forEach(t),$fr=r(bSe," \u2014 "),$W=n(bSe,"A",{href:!0});var mvt=s($W);kfr=r(mvt,"TFXLMRobertaModel"),mvt.forEach(t),Sfr=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),Rfr=i(j),RM=n(j,"LI",{});var vSe=s(RM);I1e=n(vSe,"STRONG",{});var gvt=s(I1e);Pfr=r(gvt,"xlnet"),gvt.forEach(t),Bfr=r(vSe," \u2014 "),kW=n(vSe,"A",{href:!0});var hvt=s(kW);Ifr=r(hvt,"TFXLNetModel"),hvt.forEach(t),qfr=r(vSe," (XLNet model)"),vSe.forEach(t),j.forEach(t),Nfr=i(gl),T(PM.$$.fragment,gl),gl.forEach(t),ml.forEach(t),MNe=i(f),Vd=n(f,"H2",{class:!0});var LDe=s(Vd);BM=n(LDe,"A",{id:!0,class:!0,href:!0});var pvt=s(BM);q1e=n(pvt,"SPAN",{});var _vt=s(q1e);T(a8.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),jfr=i(LDe),N1e=n(LDe,"SPAN",{});var uvt=s(N1e);Dfr=r(uvt,"TFAutoModelForPreTraining"),uvt.forEach(t),LDe.forEach(t),ENe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(n8.$$.fragment,hl),Gfr=i(hl),Xd=n(hl,"P",{});var XZ=s(Xd);Ofr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=n(XZ,"A",{href:!0});var bvt=s(SW);Vfr=r(bvt,"from_pretrained()"),bvt.forEach(t),Xfr=r(XZ," class method or the "),RW=n(XZ,"A",{href:!0});var vvt=s(RW);zfr=r(vvt,"from_config()"),vvt.forEach(t),Wfr=r(XZ,` class
method.`),XZ.forEach(t),Qfr=i(hl),s8=n(hl,"P",{});var xDe=s(s8);Hfr=r(xDe,"This class cannot be instantiated directly using "),j1e=n(xDe,"CODE",{});var Fvt=s(j1e);Ufr=r(Fvt,"__init__()"),Fvt.forEach(t),Jfr=r(xDe," (throws an error)."),xDe.forEach(t),Yfr=i(hl),Lt=n(hl,"DIV",{class:!0});var uA=s(Lt);T(l8.$$.fragment,uA),Kfr=i(uA),D1e=n(uA,"P",{});var Tvt=s(D1e);Zfr=r(Tvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tvt.forEach(t),emr=i(uA),zd=n(uA,"P",{});var zZ=s(zd);omr=r(zZ,`Note:
Loading a model from its configuration file does `),G1e=n(zZ,"STRONG",{});var Mvt=s(G1e);rmr=r(Mvt,"not"),Mvt.forEach(t),tmr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(zZ,"A",{href:!0});var Evt=s(PW);amr=r(Evt,"from_pretrained()"),Evt.forEach(t),nmr=r(zZ," to load the model weights."),zZ.forEach(t),smr=i(uA),T(IM.$$.fragment,uA),uA.forEach(t),lmr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(i8.$$.fragment,pl),imr=i(pl),O1e=n(pl,"P",{});var Cvt=s(O1e);dmr=r(Cvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cvt.forEach(t),cmr=i(pl),Za=n(pl,"P",{});var bA=s(Za);fmr=r(bA,"The model class to instantiate is selected based on the "),V1e=n(bA,"CODE",{});var wvt=s(V1e);mmr=r(wvt,"model_type"),wvt.forEach(t),gmr=r(bA,` property of the config object (either
passed as an argument or loaded from `),X1e=n(bA,"CODE",{});var Avt=s(X1e);hmr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),pmr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(bA,"CODE",{});var yvt=s(z1e);_mr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),umr=r(bA,":"),bA.forEach(t),bmr=i(pl),se=n(pl,"UL",{});var le=s(se);qM=n(le,"LI",{});var FSe=s(qM);W1e=n(FSe,"STRONG",{});var Lvt=s(W1e);vmr=r(Lvt,"albert"),Lvt.forEach(t),Fmr=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var xvt=s(BW);Tmr=r(xvt,"TFAlbertForPreTraining"),xvt.forEach(t),Mmr=r(FSe," (ALBERT model)"),FSe.forEach(t),Emr=i(le),NM=n(le,"LI",{});var TSe=s(NM);Q1e=n(TSe,"STRONG",{});var $vt=s(Q1e);Cmr=r($vt,"bart"),$vt.forEach(t),wmr=r(TSe," \u2014 "),IW=n(TSe,"A",{href:!0});var kvt=s(IW);Amr=r(kvt,"TFBartForConditionalGeneration"),kvt.forEach(t),ymr=r(TSe," (BART model)"),TSe.forEach(t),Lmr=i(le),jM=n(le,"LI",{});var MSe=s(jM);H1e=n(MSe,"STRONG",{});var Svt=s(H1e);xmr=r(Svt,"bert"),Svt.forEach(t),$mr=r(MSe," \u2014 "),qW=n(MSe,"A",{href:!0});var Rvt=s(qW);kmr=r(Rvt,"TFBertForPreTraining"),Rvt.forEach(t),Smr=r(MSe," (BERT model)"),MSe.forEach(t),Rmr=i(le),DM=n(le,"LI",{});var ESe=s(DM);U1e=n(ESe,"STRONG",{});var Pvt=s(U1e);Pmr=r(Pvt,"camembert"),Pvt.forEach(t),Bmr=r(ESe," \u2014 "),NW=n(ESe,"A",{href:!0});var Bvt=s(NW);Imr=r(Bvt,"TFCamembertForMaskedLM"),Bvt.forEach(t),qmr=r(ESe," (CamemBERT model)"),ESe.forEach(t),Nmr=i(le),GM=n(le,"LI",{});var CSe=s(GM);J1e=n(CSe,"STRONG",{});var Ivt=s(J1e);jmr=r(Ivt,"ctrl"),Ivt.forEach(t),Dmr=r(CSe," \u2014 "),jW=n(CSe,"A",{href:!0});var qvt=s(jW);Gmr=r(qvt,"TFCTRLLMHeadModel"),qvt.forEach(t),Omr=r(CSe," (CTRL model)"),CSe.forEach(t),Vmr=i(le),OM=n(le,"LI",{});var wSe=s(OM);Y1e=n(wSe,"STRONG",{});var Nvt=s(Y1e);Xmr=r(Nvt,"distilbert"),Nvt.forEach(t),zmr=r(wSe," \u2014 "),DW=n(wSe,"A",{href:!0});var jvt=s(DW);Wmr=r(jvt,"TFDistilBertForMaskedLM"),jvt.forEach(t),Qmr=r(wSe," (DistilBERT model)"),wSe.forEach(t),Hmr=i(le),VM=n(le,"LI",{});var ASe=s(VM);K1e=n(ASe,"STRONG",{});var Dvt=s(K1e);Umr=r(Dvt,"electra"),Dvt.forEach(t),Jmr=r(ASe," \u2014 "),GW=n(ASe,"A",{href:!0});var Gvt=s(GW);Ymr=r(Gvt,"TFElectraForPreTraining"),Gvt.forEach(t),Kmr=r(ASe," (ELECTRA model)"),ASe.forEach(t),Zmr=i(le),XM=n(le,"LI",{});var ySe=s(XM);Z1e=n(ySe,"STRONG",{});var Ovt=s(Z1e);egr=r(Ovt,"flaubert"),Ovt.forEach(t),ogr=r(ySe," \u2014 "),OW=n(ySe,"A",{href:!0});var Vvt=s(OW);rgr=r(Vvt,"TFFlaubertWithLMHeadModel"),Vvt.forEach(t),tgr=r(ySe," (FlauBERT model)"),ySe.forEach(t),agr=i(le),zM=n(le,"LI",{});var LSe=s(zM);e7e=n(LSe,"STRONG",{});var Xvt=s(e7e);ngr=r(Xvt,"funnel"),Xvt.forEach(t),sgr=r(LSe," \u2014 "),VW=n(LSe,"A",{href:!0});var zvt=s(VW);lgr=r(zvt,"TFFunnelForPreTraining"),zvt.forEach(t),igr=r(LSe," (Funnel Transformer model)"),LSe.forEach(t),dgr=i(le),WM=n(le,"LI",{});var xSe=s(WM);o7e=n(xSe,"STRONG",{});var Wvt=s(o7e);cgr=r(Wvt,"gpt2"),Wvt.forEach(t),fgr=r(xSe," \u2014 "),XW=n(xSe,"A",{href:!0});var Qvt=s(XW);mgr=r(Qvt,"TFGPT2LMHeadModel"),Qvt.forEach(t),ggr=r(xSe," (OpenAI GPT-2 model)"),xSe.forEach(t),hgr=i(le),QM=n(le,"LI",{});var $Se=s(QM);r7e=n($Se,"STRONG",{});var Hvt=s(r7e);pgr=r(Hvt,"layoutlm"),Hvt.forEach(t),_gr=r($Se," \u2014 "),zW=n($Se,"A",{href:!0});var Uvt=s(zW);ugr=r(Uvt,"TFLayoutLMForMaskedLM"),Uvt.forEach(t),bgr=r($Se," (LayoutLM model)"),$Se.forEach(t),vgr=i(le),HM=n(le,"LI",{});var kSe=s(HM);t7e=n(kSe,"STRONG",{});var Jvt=s(t7e);Fgr=r(Jvt,"lxmert"),Jvt.forEach(t),Tgr=r(kSe," \u2014 "),WW=n(kSe,"A",{href:!0});var Yvt=s(WW);Mgr=r(Yvt,"TFLxmertForPreTraining"),Yvt.forEach(t),Egr=r(kSe," (LXMERT model)"),kSe.forEach(t),Cgr=i(le),UM=n(le,"LI",{});var SSe=s(UM);a7e=n(SSe,"STRONG",{});var Kvt=s(a7e);wgr=r(Kvt,"mobilebert"),Kvt.forEach(t),Agr=r(SSe," \u2014 "),QW=n(SSe,"A",{href:!0});var Zvt=s(QW);ygr=r(Zvt,"TFMobileBertForPreTraining"),Zvt.forEach(t),Lgr=r(SSe," (MobileBERT model)"),SSe.forEach(t),xgr=i(le),JM=n(le,"LI",{});var RSe=s(JM);n7e=n(RSe,"STRONG",{});var eFt=s(n7e);$gr=r(eFt,"mpnet"),eFt.forEach(t),kgr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var oFt=s(HW);Sgr=r(oFt,"TFMPNetForMaskedLM"),oFt.forEach(t),Rgr=r(RSe," (MPNet model)"),RSe.forEach(t),Pgr=i(le),YM=n(le,"LI",{});var PSe=s(YM);s7e=n(PSe,"STRONG",{});var rFt=s(s7e);Bgr=r(rFt,"openai-gpt"),rFt.forEach(t),Igr=r(PSe," \u2014 "),UW=n(PSe,"A",{href:!0});var tFt=s(UW);qgr=r(tFt,"TFOpenAIGPTLMHeadModel"),tFt.forEach(t),Ngr=r(PSe," (OpenAI GPT model)"),PSe.forEach(t),jgr=i(le),KM=n(le,"LI",{});var BSe=s(KM);l7e=n(BSe,"STRONG",{});var aFt=s(l7e);Dgr=r(aFt,"roberta"),aFt.forEach(t),Ggr=r(BSe," \u2014 "),JW=n(BSe,"A",{href:!0});var nFt=s(JW);Ogr=r(nFt,"TFRobertaForMaskedLM"),nFt.forEach(t),Vgr=r(BSe," (RoBERTa model)"),BSe.forEach(t),Xgr=i(le),ZM=n(le,"LI",{});var ISe=s(ZM);i7e=n(ISe,"STRONG",{});var sFt=s(i7e);zgr=r(sFt,"t5"),sFt.forEach(t),Wgr=r(ISe," \u2014 "),YW=n(ISe,"A",{href:!0});var lFt=s(YW);Qgr=r(lFt,"TFT5ForConditionalGeneration"),lFt.forEach(t),Hgr=r(ISe," (T5 model)"),ISe.forEach(t),Ugr=i(le),e4=n(le,"LI",{});var qSe=s(e4);d7e=n(qSe,"STRONG",{});var iFt=s(d7e);Jgr=r(iFt,"tapas"),iFt.forEach(t),Ygr=r(qSe," \u2014 "),KW=n(qSe,"A",{href:!0});var dFt=s(KW);Kgr=r(dFt,"TFTapasForMaskedLM"),dFt.forEach(t),Zgr=r(qSe," (TAPAS model)"),qSe.forEach(t),ehr=i(le),o4=n(le,"LI",{});var NSe=s(o4);c7e=n(NSe,"STRONG",{});var cFt=s(c7e);ohr=r(cFt,"transfo-xl"),cFt.forEach(t),rhr=r(NSe," \u2014 "),ZW=n(NSe,"A",{href:!0});var fFt=s(ZW);thr=r(fFt,"TFTransfoXLLMHeadModel"),fFt.forEach(t),ahr=r(NSe," (Transformer-XL model)"),NSe.forEach(t),nhr=i(le),r4=n(le,"LI",{});var jSe=s(r4);f7e=n(jSe,"STRONG",{});var mFt=s(f7e);shr=r(mFt,"vit_mae"),mFt.forEach(t),lhr=r(jSe," \u2014 "),eQ=n(jSe,"A",{href:!0});var gFt=s(eQ);ihr=r(gFt,"TFViTMAEForPreTraining"),gFt.forEach(t),dhr=r(jSe," (ViTMAE model)"),jSe.forEach(t),chr=i(le),t4=n(le,"LI",{});var DSe=s(t4);m7e=n(DSe,"STRONG",{});var hFt=s(m7e);fhr=r(hFt,"xlm"),hFt.forEach(t),mhr=r(DSe," \u2014 "),oQ=n(DSe,"A",{href:!0});var pFt=s(oQ);ghr=r(pFt,"TFXLMWithLMHeadModel"),pFt.forEach(t),hhr=r(DSe," (XLM model)"),DSe.forEach(t),phr=i(le),a4=n(le,"LI",{});var GSe=s(a4);g7e=n(GSe,"STRONG",{});var _Ft=s(g7e);_hr=r(_Ft,"xlm-roberta"),_Ft.forEach(t),uhr=r(GSe," \u2014 "),rQ=n(GSe,"A",{href:!0});var uFt=s(rQ);bhr=r(uFt,"TFXLMRobertaForMaskedLM"),uFt.forEach(t),vhr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),Fhr=i(le),n4=n(le,"LI",{});var OSe=s(n4);h7e=n(OSe,"STRONG",{});var bFt=s(h7e);Thr=r(bFt,"xlnet"),bFt.forEach(t),Mhr=r(OSe," \u2014 "),tQ=n(OSe,"A",{href:!0});var vFt=s(tQ);Ehr=r(vFt,"TFXLNetLMHeadModel"),vFt.forEach(t),Chr=r(OSe," (XLNet model)"),OSe.forEach(t),le.forEach(t),whr=i(pl),T(s4.$$.fragment,pl),pl.forEach(t),hl.forEach(t),CNe=i(f),Wd=n(f,"H2",{class:!0});var $De=s(Wd);l4=n($De,"A",{id:!0,class:!0,href:!0});var FFt=s(l4);p7e=n(FFt,"SPAN",{});var TFt=s(p7e);T(d8.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),Ahr=i($De),_7e=n($De,"SPAN",{});var MFt=s(_7e);yhr=r(MFt,"TFAutoModelForCausalLM"),MFt.forEach(t),$De.forEach(t),wNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(c8.$$.fragment,_l),Lhr=i(_l),Qd=n(_l,"P",{});var WZ=s(Qd);xhr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=n(WZ,"A",{href:!0});var EFt=s(aQ);$hr=r(EFt,"from_pretrained()"),EFt.forEach(t),khr=r(WZ," class method or the "),nQ=n(WZ,"A",{href:!0});var CFt=s(nQ);Shr=r(CFt,"from_config()"),CFt.forEach(t),Rhr=r(WZ,` class
method.`),WZ.forEach(t),Phr=i(_l),f8=n(_l,"P",{});var kDe=s(f8);Bhr=r(kDe,"This class cannot be instantiated directly using "),u7e=n(kDe,"CODE",{});var wFt=s(u7e);Ihr=r(wFt,"__init__()"),wFt.forEach(t),qhr=r(kDe," (throws an error)."),kDe.forEach(t),Nhr=i(_l),xt=n(_l,"DIV",{class:!0});var vA=s(xt);T(m8.$$.fragment,vA),jhr=i(vA),b7e=n(vA,"P",{});var AFt=s(b7e);Dhr=r(AFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AFt.forEach(t),Ghr=i(vA),Hd=n(vA,"P",{});var QZ=s(Hd);Ohr=r(QZ,`Note:
Loading a model from its configuration file does `),v7e=n(QZ,"STRONG",{});var yFt=s(v7e);Vhr=r(yFt,"not"),yFt.forEach(t),Xhr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(QZ,"A",{href:!0});var LFt=s(sQ);zhr=r(LFt,"from_pretrained()"),LFt.forEach(t),Whr=r(QZ," to load the model weights."),QZ.forEach(t),Qhr=i(vA),T(i4.$$.fragment,vA),vA.forEach(t),Hhr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(g8.$$.fragment,ul),Uhr=i(ul),F7e=n(ul,"P",{});var xFt=s(F7e);Jhr=r(xFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xFt.forEach(t),Yhr=i(ul),en=n(ul,"P",{});var FA=s(en);Khr=r(FA,"The model class to instantiate is selected based on the "),T7e=n(FA,"CODE",{});var $Ft=s(T7e);Zhr=r($Ft,"model_type"),$Ft.forEach(t),epr=r(FA,` property of the config object (either
passed as an argument or loaded from `),M7e=n(FA,"CODE",{});var kFt=s(M7e);opr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),rpr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(FA,"CODE",{});var SFt=s(E7e);tpr=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),apr=r(FA,":"),FA.forEach(t),npr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);d4=n(Ce,"LI",{});var VSe=s(d4);C7e=n(VSe,"STRONG",{});var RFt=s(C7e);spr=r(RFt,"bert"),RFt.forEach(t),lpr=r(VSe," \u2014 "),lQ=n(VSe,"A",{href:!0});var PFt=s(lQ);ipr=r(PFt,"TFBertLMHeadModel"),PFt.forEach(t),dpr=r(VSe," (BERT model)"),VSe.forEach(t),cpr=i(Ce),c4=n(Ce,"LI",{});var XSe=s(c4);w7e=n(XSe,"STRONG",{});var BFt=s(w7e);fpr=r(BFt,"camembert"),BFt.forEach(t),mpr=r(XSe," \u2014 "),iQ=n(XSe,"A",{href:!0});var IFt=s(iQ);gpr=r(IFt,"TFCamembertForCausalLM"),IFt.forEach(t),hpr=r(XSe," (CamemBERT model)"),XSe.forEach(t),ppr=i(Ce),f4=n(Ce,"LI",{});var zSe=s(f4);A7e=n(zSe,"STRONG",{});var qFt=s(A7e);_pr=r(qFt,"ctrl"),qFt.forEach(t),upr=r(zSe," \u2014 "),dQ=n(zSe,"A",{href:!0});var NFt=s(dQ);bpr=r(NFt,"TFCTRLLMHeadModel"),NFt.forEach(t),vpr=r(zSe," (CTRL model)"),zSe.forEach(t),Fpr=i(Ce),m4=n(Ce,"LI",{});var WSe=s(m4);y7e=n(WSe,"STRONG",{});var jFt=s(y7e);Tpr=r(jFt,"gpt2"),jFt.forEach(t),Mpr=r(WSe," \u2014 "),cQ=n(WSe,"A",{href:!0});var DFt=s(cQ);Epr=r(DFt,"TFGPT2LMHeadModel"),DFt.forEach(t),Cpr=r(WSe," (OpenAI GPT-2 model)"),WSe.forEach(t),wpr=i(Ce),g4=n(Ce,"LI",{});var QSe=s(g4);L7e=n(QSe,"STRONG",{});var GFt=s(L7e);Apr=r(GFt,"gptj"),GFt.forEach(t),ypr=r(QSe," \u2014 "),fQ=n(QSe,"A",{href:!0});var OFt=s(fQ);Lpr=r(OFt,"TFGPTJForCausalLM"),OFt.forEach(t),xpr=r(QSe," (GPT-J model)"),QSe.forEach(t),$pr=i(Ce),h4=n(Ce,"LI",{});var HSe=s(h4);x7e=n(HSe,"STRONG",{});var VFt=s(x7e);kpr=r(VFt,"openai-gpt"),VFt.forEach(t),Spr=r(HSe," \u2014 "),mQ=n(HSe,"A",{href:!0});var XFt=s(mQ);Rpr=r(XFt,"TFOpenAIGPTLMHeadModel"),XFt.forEach(t),Ppr=r(HSe," (OpenAI GPT model)"),HSe.forEach(t),Bpr=i(Ce),p4=n(Ce,"LI",{});var USe=s(p4);$7e=n(USe,"STRONG",{});var zFt=s($7e);Ipr=r(zFt,"opt"),zFt.forEach(t),qpr=r(USe," \u2014 "),gQ=n(USe,"A",{href:!0});var WFt=s(gQ);Npr=r(WFt,"TFOPTForCausalLM"),WFt.forEach(t),jpr=r(USe," (OPT model)"),USe.forEach(t),Dpr=i(Ce),_4=n(Ce,"LI",{});var JSe=s(_4);k7e=n(JSe,"STRONG",{});var QFt=s(k7e);Gpr=r(QFt,"rembert"),QFt.forEach(t),Opr=r(JSe," \u2014 "),hQ=n(JSe,"A",{href:!0});var HFt=s(hQ);Vpr=r(HFt,"TFRemBertForCausalLM"),HFt.forEach(t),Xpr=r(JSe," (RemBERT model)"),JSe.forEach(t),zpr=i(Ce),u4=n(Ce,"LI",{});var YSe=s(u4);S7e=n(YSe,"STRONG",{});var UFt=s(S7e);Wpr=r(UFt,"roberta"),UFt.forEach(t),Qpr=r(YSe," \u2014 "),pQ=n(YSe,"A",{href:!0});var JFt=s(pQ);Hpr=r(JFt,"TFRobertaForCausalLM"),JFt.forEach(t),Upr=r(YSe," (RoBERTa model)"),YSe.forEach(t),Jpr=i(Ce),b4=n(Ce,"LI",{});var KSe=s(b4);R7e=n(KSe,"STRONG",{});var YFt=s(R7e);Ypr=r(YFt,"roformer"),YFt.forEach(t),Kpr=r(KSe," \u2014 "),_Q=n(KSe,"A",{href:!0});var KFt=s(_Q);Zpr=r(KFt,"TFRoFormerForCausalLM"),KFt.forEach(t),e_r=r(KSe," (RoFormer model)"),KSe.forEach(t),o_r=i(Ce),v4=n(Ce,"LI",{});var ZSe=s(v4);P7e=n(ZSe,"STRONG",{});var ZFt=s(P7e);r_r=r(ZFt,"transfo-xl"),ZFt.forEach(t),t_r=r(ZSe," \u2014 "),uQ=n(ZSe,"A",{href:!0});var eTt=s(uQ);a_r=r(eTt,"TFTransfoXLLMHeadModel"),eTt.forEach(t),n_r=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),s_r=i(Ce),F4=n(Ce,"LI",{});var eRe=s(F4);B7e=n(eRe,"STRONG",{});var oTt=s(B7e);l_r=r(oTt,"xlm"),oTt.forEach(t),i_r=r(eRe," \u2014 "),bQ=n(eRe,"A",{href:!0});var rTt=s(bQ);d_r=r(rTt,"TFXLMWithLMHeadModel"),rTt.forEach(t),c_r=r(eRe," (XLM model)"),eRe.forEach(t),f_r=i(Ce),T4=n(Ce,"LI",{});var oRe=s(T4);I7e=n(oRe,"STRONG",{});var tTt=s(I7e);m_r=r(tTt,"xlnet"),tTt.forEach(t),g_r=r(oRe," \u2014 "),vQ=n(oRe,"A",{href:!0});var aTt=s(vQ);h_r=r(aTt,"TFXLNetLMHeadModel"),aTt.forEach(t),p_r=r(oRe," (XLNet model)"),oRe.forEach(t),Ce.forEach(t),__r=i(ul),T(M4.$$.fragment,ul),ul.forEach(t),_l.forEach(t),ANe=i(f),Ud=n(f,"H2",{class:!0});var SDe=s(Ud);E4=n(SDe,"A",{id:!0,class:!0,href:!0});var nTt=s(E4);q7e=n(nTt,"SPAN",{});var sTt=s(q7e);T(h8.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),u_r=i(SDe),N7e=n(SDe,"SPAN",{});var lTt=s(N7e);b_r=r(lTt,"TFAutoModelForImageClassification"),lTt.forEach(t),SDe.forEach(t),yNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(p8.$$.fragment,bl),v_r=i(bl),Jd=n(bl,"P",{});var HZ=s(Jd);F_r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(HZ,"A",{href:!0});var iTt=s(FQ);T_r=r(iTt,"from_pretrained()"),iTt.forEach(t),M_r=r(HZ," class method or the "),TQ=n(HZ,"A",{href:!0});var dTt=s(TQ);E_r=r(dTt,"from_config()"),dTt.forEach(t),C_r=r(HZ,` class
method.`),HZ.forEach(t),w_r=i(bl),_8=n(bl,"P",{});var RDe=s(_8);A_r=r(RDe,"This class cannot be instantiated directly using "),j7e=n(RDe,"CODE",{});var cTt=s(j7e);y_r=r(cTt,"__init__()"),cTt.forEach(t),L_r=r(RDe," (throws an error)."),RDe.forEach(t),x_r=i(bl),$t=n(bl,"DIV",{class:!0});var TA=s($t);T(u8.$$.fragment,TA),$_r=i(TA),D7e=n(TA,"P",{});var fTt=s(D7e);k_r=r(fTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fTt.forEach(t),S_r=i(TA),Yd=n(TA,"P",{});var UZ=s(Yd);R_r=r(UZ,`Note:
Loading a model from its configuration file does `),G7e=n(UZ,"STRONG",{});var mTt=s(G7e);P_r=r(mTt,"not"),mTt.forEach(t),B_r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(UZ,"A",{href:!0});var gTt=s(MQ);I_r=r(gTt,"from_pretrained()"),gTt.forEach(t),q_r=r(UZ," to load the model weights."),UZ.forEach(t),N_r=i(TA),T(C4.$$.fragment,TA),TA.forEach(t),j_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(b8.$$.fragment,vl),D_r=i(vl),O7e=n(vl,"P",{});var hTt=s(O7e);G_r=r(hTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hTt.forEach(t),O_r=i(vl),on=n(vl,"P",{});var MA=s(on);V_r=r(MA,"The model class to instantiate is selected based on the "),V7e=n(MA,"CODE",{});var pTt=s(V7e);X_r=r(pTt,"model_type"),pTt.forEach(t),z_r=r(MA,` property of the config object (either
passed as an argument or loaded from `),X7e=n(MA,"CODE",{});var _Tt=s(X7e);W_r=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),Q_r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(MA,"CODE",{});var uTt=s(z7e);H_r=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),U_r=r(MA,":"),MA.forEach(t),J_r=i(vl),rn=n(vl,"UL",{});var EA=s(rn);w4=n(EA,"LI",{});var rRe=s(w4);W7e=n(rRe,"STRONG",{});var bTt=s(W7e);Y_r=r(bTt,"convnext"),bTt.forEach(t),K_r=r(rRe," \u2014 "),EQ=n(rRe,"A",{href:!0});var vTt=s(EQ);Z_r=r(vTt,"TFConvNextForImageClassification"),vTt.forEach(t),eur=r(rRe," (ConvNext model)"),rRe.forEach(t),our=i(EA),A4=n(EA,"LI",{});var tRe=s(A4);Q7e=n(tRe,"STRONG",{});var FTt=s(Q7e);rur=r(FTt,"data2vec-vision"),FTt.forEach(t),tur=r(tRe," \u2014 "),CQ=n(tRe,"A",{href:!0});var TTt=s(CQ);aur=r(TTt,"TFData2VecVisionForImageClassification"),TTt.forEach(t),nur=r(tRe," (Data2VecVision model)"),tRe.forEach(t),sur=i(EA),y4=n(EA,"LI",{});var aRe=s(y4);H7e=n(aRe,"STRONG",{});var MTt=s(H7e);lur=r(MTt,"swin"),MTt.forEach(t),iur=r(aRe," \u2014 "),wQ=n(aRe,"A",{href:!0});var ETt=s(wQ);dur=r(ETt,"TFSwinForImageClassification"),ETt.forEach(t),cur=r(aRe," (Swin model)"),aRe.forEach(t),fur=i(EA),L4=n(EA,"LI",{});var nRe=s(L4);U7e=n(nRe,"STRONG",{});var CTt=s(U7e);mur=r(CTt,"vit"),CTt.forEach(t),gur=r(nRe," \u2014 "),AQ=n(nRe,"A",{href:!0});var wTt=s(AQ);hur=r(wTt,"TFViTForImageClassification"),wTt.forEach(t),pur=r(nRe," (ViT model)"),nRe.forEach(t),EA.forEach(t),_ur=i(vl),T(x4.$$.fragment,vl),vl.forEach(t),bl.forEach(t),LNe=i(f),Kd=n(f,"H2",{class:!0});var PDe=s(Kd);$4=n(PDe,"A",{id:!0,class:!0,href:!0});var ATt=s($4);J7e=n(ATt,"SPAN",{});var yTt=s(J7e);T(v8.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),uur=i(PDe),Y7e=n(PDe,"SPAN",{});var LTt=s(Y7e);bur=r(LTt,"TFAutoModelForMaskedLM"),LTt.forEach(t),PDe.forEach(t),xNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(F8.$$.fragment,Fl),vur=i(Fl),Zd=n(Fl,"P",{});var JZ=s(Zd);Fur=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yQ=n(JZ,"A",{href:!0});var xTt=s(yQ);Tur=r(xTt,"from_pretrained()"),xTt.forEach(t),Mur=r(JZ," class method or the "),LQ=n(JZ,"A",{href:!0});var $Tt=s(LQ);Eur=r($Tt,"from_config()"),$Tt.forEach(t),Cur=r(JZ,` class
method.`),JZ.forEach(t),wur=i(Fl),T8=n(Fl,"P",{});var BDe=s(T8);Aur=r(BDe,"This class cannot be instantiated directly using "),K7e=n(BDe,"CODE",{});var kTt=s(K7e);yur=r(kTt,"__init__()"),kTt.forEach(t),Lur=r(BDe," (throws an error)."),BDe.forEach(t),xur=i(Fl),kt=n(Fl,"DIV",{class:!0});var CA=s(kt);T(M8.$$.fragment,CA),$ur=i(CA),Z7e=n(CA,"P",{});var STt=s(Z7e);kur=r(STt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),STt.forEach(t),Sur=i(CA),ec=n(CA,"P",{});var YZ=s(ec);Rur=r(YZ,`Note:
Loading a model from its configuration file does `),ebe=n(YZ,"STRONG",{});var RTt=s(ebe);Pur=r(RTt,"not"),RTt.forEach(t),Bur=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(YZ,"A",{href:!0});var PTt=s(xQ);Iur=r(PTt,"from_pretrained()"),PTt.forEach(t),qur=r(YZ," to load the model weights."),YZ.forEach(t),Nur=i(CA),T(k4.$$.fragment,CA),CA.forEach(t),jur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(E8.$$.fragment,Tl),Dur=i(Tl),obe=n(Tl,"P",{});var BTt=s(obe);Gur=r(BTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BTt.forEach(t),Our=i(Tl),tn=n(Tl,"P",{});var wA=s(tn);Vur=r(wA,"The model class to instantiate is selected based on the "),rbe=n(wA,"CODE",{});var ITt=s(rbe);Xur=r(ITt,"model_type"),ITt.forEach(t),zur=r(wA,` property of the config object (either
passed as an argument or loaded from `),tbe=n(wA,"CODE",{});var qTt=s(tbe);Wur=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),Qur=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(wA,"CODE",{});var NTt=s(abe);Hur=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),Uur=r(wA,":"),wA.forEach(t),Jur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);S4=n(fe,"LI",{});var sRe=s(S4);nbe=n(sRe,"STRONG",{});var jTt=s(nbe);Yur=r(jTt,"albert"),jTt.forEach(t),Kur=r(sRe," \u2014 "),$Q=n(sRe,"A",{href:!0});var DTt=s($Q);Zur=r(DTt,"TFAlbertForMaskedLM"),DTt.forEach(t),e2r=r(sRe," (ALBERT model)"),sRe.forEach(t),o2r=i(fe),R4=n(fe,"LI",{});var lRe=s(R4);sbe=n(lRe,"STRONG",{});var GTt=s(sbe);r2r=r(GTt,"bert"),GTt.forEach(t),t2r=r(lRe," \u2014 "),kQ=n(lRe,"A",{href:!0});var OTt=s(kQ);a2r=r(OTt,"TFBertForMaskedLM"),OTt.forEach(t),n2r=r(lRe," (BERT model)"),lRe.forEach(t),s2r=i(fe),P4=n(fe,"LI",{});var iRe=s(P4);lbe=n(iRe,"STRONG",{});var VTt=s(lbe);l2r=r(VTt,"camembert"),VTt.forEach(t),i2r=r(iRe," \u2014 "),SQ=n(iRe,"A",{href:!0});var XTt=s(SQ);d2r=r(XTt,"TFCamembertForMaskedLM"),XTt.forEach(t),c2r=r(iRe," (CamemBERT model)"),iRe.forEach(t),f2r=i(fe),B4=n(fe,"LI",{});var dRe=s(B4);ibe=n(dRe,"STRONG",{});var zTt=s(ibe);m2r=r(zTt,"convbert"),zTt.forEach(t),g2r=r(dRe," \u2014 "),RQ=n(dRe,"A",{href:!0});var WTt=s(RQ);h2r=r(WTt,"TFConvBertForMaskedLM"),WTt.forEach(t),p2r=r(dRe," (ConvBERT model)"),dRe.forEach(t),_2r=i(fe),I4=n(fe,"LI",{});var cRe=s(I4);dbe=n(cRe,"STRONG",{});var QTt=s(dbe);u2r=r(QTt,"deberta"),QTt.forEach(t),b2r=r(cRe," \u2014 "),PQ=n(cRe,"A",{href:!0});var HTt=s(PQ);v2r=r(HTt,"TFDebertaForMaskedLM"),HTt.forEach(t),F2r=r(cRe," (DeBERTa model)"),cRe.forEach(t),T2r=i(fe),q4=n(fe,"LI",{});var fRe=s(q4);cbe=n(fRe,"STRONG",{});var UTt=s(cbe);M2r=r(UTt,"deberta-v2"),UTt.forEach(t),E2r=r(fRe," \u2014 "),BQ=n(fRe,"A",{href:!0});var JTt=s(BQ);C2r=r(JTt,"TFDebertaV2ForMaskedLM"),JTt.forEach(t),w2r=r(fRe," (DeBERTa-v2 model)"),fRe.forEach(t),A2r=i(fe),N4=n(fe,"LI",{});var mRe=s(N4);fbe=n(mRe,"STRONG",{});var YTt=s(fbe);y2r=r(YTt,"distilbert"),YTt.forEach(t),L2r=r(mRe," \u2014 "),IQ=n(mRe,"A",{href:!0});var KTt=s(IQ);x2r=r(KTt,"TFDistilBertForMaskedLM"),KTt.forEach(t),$2r=r(mRe," (DistilBERT model)"),mRe.forEach(t),k2r=i(fe),j4=n(fe,"LI",{});var gRe=s(j4);mbe=n(gRe,"STRONG",{});var ZTt=s(mbe);S2r=r(ZTt,"electra"),ZTt.forEach(t),R2r=r(gRe," \u2014 "),qQ=n(gRe,"A",{href:!0});var eMt=s(qQ);P2r=r(eMt,"TFElectraForMaskedLM"),eMt.forEach(t),B2r=r(gRe," (ELECTRA model)"),gRe.forEach(t),I2r=i(fe),D4=n(fe,"LI",{});var hRe=s(D4);gbe=n(hRe,"STRONG",{});var oMt=s(gbe);q2r=r(oMt,"flaubert"),oMt.forEach(t),N2r=r(hRe," \u2014 "),NQ=n(hRe,"A",{href:!0});var rMt=s(NQ);j2r=r(rMt,"TFFlaubertWithLMHeadModel"),rMt.forEach(t),D2r=r(hRe," (FlauBERT model)"),hRe.forEach(t),G2r=i(fe),G4=n(fe,"LI",{});var pRe=s(G4);hbe=n(pRe,"STRONG",{});var tMt=s(hbe);O2r=r(tMt,"funnel"),tMt.forEach(t),V2r=r(pRe," \u2014 "),jQ=n(pRe,"A",{href:!0});var aMt=s(jQ);X2r=r(aMt,"TFFunnelForMaskedLM"),aMt.forEach(t),z2r=r(pRe," (Funnel Transformer model)"),pRe.forEach(t),W2r=i(fe),O4=n(fe,"LI",{});var _Re=s(O4);pbe=n(_Re,"STRONG",{});var nMt=s(pbe);Q2r=r(nMt,"layoutlm"),nMt.forEach(t),H2r=r(_Re," \u2014 "),DQ=n(_Re,"A",{href:!0});var sMt=s(DQ);U2r=r(sMt,"TFLayoutLMForMaskedLM"),sMt.forEach(t),J2r=r(_Re," (LayoutLM model)"),_Re.forEach(t),Y2r=i(fe),V4=n(fe,"LI",{});var uRe=s(V4);_be=n(uRe,"STRONG",{});var lMt=s(_be);K2r=r(lMt,"longformer"),lMt.forEach(t),Z2r=r(uRe," \u2014 "),GQ=n(uRe,"A",{href:!0});var iMt=s(GQ);e1r=r(iMt,"TFLongformerForMaskedLM"),iMt.forEach(t),o1r=r(uRe," (Longformer model)"),uRe.forEach(t),r1r=i(fe),X4=n(fe,"LI",{});var bRe=s(X4);ube=n(bRe,"STRONG",{});var dMt=s(ube);t1r=r(dMt,"mobilebert"),dMt.forEach(t),a1r=r(bRe," \u2014 "),OQ=n(bRe,"A",{href:!0});var cMt=s(OQ);n1r=r(cMt,"TFMobileBertForMaskedLM"),cMt.forEach(t),s1r=r(bRe," (MobileBERT model)"),bRe.forEach(t),l1r=i(fe),z4=n(fe,"LI",{});var vRe=s(z4);bbe=n(vRe,"STRONG",{});var fMt=s(bbe);i1r=r(fMt,"mpnet"),fMt.forEach(t),d1r=r(vRe," \u2014 "),VQ=n(vRe,"A",{href:!0});var mMt=s(VQ);c1r=r(mMt,"TFMPNetForMaskedLM"),mMt.forEach(t),f1r=r(vRe," (MPNet model)"),vRe.forEach(t),m1r=i(fe),W4=n(fe,"LI",{});var FRe=s(W4);vbe=n(FRe,"STRONG",{});var gMt=s(vbe);g1r=r(gMt,"rembert"),gMt.forEach(t),h1r=r(FRe," \u2014 "),XQ=n(FRe,"A",{href:!0});var hMt=s(XQ);p1r=r(hMt,"TFRemBertForMaskedLM"),hMt.forEach(t),_1r=r(FRe," (RemBERT model)"),FRe.forEach(t),u1r=i(fe),Q4=n(fe,"LI",{});var TRe=s(Q4);Fbe=n(TRe,"STRONG",{});var pMt=s(Fbe);b1r=r(pMt,"roberta"),pMt.forEach(t),v1r=r(TRe," \u2014 "),zQ=n(TRe,"A",{href:!0});var _Mt=s(zQ);F1r=r(_Mt,"TFRobertaForMaskedLM"),_Mt.forEach(t),T1r=r(TRe," (RoBERTa model)"),TRe.forEach(t),M1r=i(fe),H4=n(fe,"LI",{});var MRe=s(H4);Tbe=n(MRe,"STRONG",{});var uMt=s(Tbe);E1r=r(uMt,"roformer"),uMt.forEach(t),C1r=r(MRe," \u2014 "),WQ=n(MRe,"A",{href:!0});var bMt=s(WQ);w1r=r(bMt,"TFRoFormerForMaskedLM"),bMt.forEach(t),A1r=r(MRe," (RoFormer model)"),MRe.forEach(t),y1r=i(fe),U4=n(fe,"LI",{});var ERe=s(U4);Mbe=n(ERe,"STRONG",{});var vMt=s(Mbe);L1r=r(vMt,"tapas"),vMt.forEach(t),x1r=r(ERe," \u2014 "),QQ=n(ERe,"A",{href:!0});var FMt=s(QQ);$1r=r(FMt,"TFTapasForMaskedLM"),FMt.forEach(t),k1r=r(ERe," (TAPAS model)"),ERe.forEach(t),S1r=i(fe),J4=n(fe,"LI",{});var CRe=s(J4);Ebe=n(CRe,"STRONG",{});var TMt=s(Ebe);R1r=r(TMt,"xlm"),TMt.forEach(t),P1r=r(CRe," \u2014 "),HQ=n(CRe,"A",{href:!0});var MMt=s(HQ);B1r=r(MMt,"TFXLMWithLMHeadModel"),MMt.forEach(t),I1r=r(CRe," (XLM model)"),CRe.forEach(t),q1r=i(fe),Y4=n(fe,"LI",{});var wRe=s(Y4);Cbe=n(wRe,"STRONG",{});var EMt=s(Cbe);N1r=r(EMt,"xlm-roberta"),EMt.forEach(t),j1r=r(wRe," \u2014 "),UQ=n(wRe,"A",{href:!0});var CMt=s(UQ);D1r=r(CMt,"TFXLMRobertaForMaskedLM"),CMt.forEach(t),G1r=r(wRe," (XLM-RoBERTa model)"),wRe.forEach(t),fe.forEach(t),O1r=i(Tl),T(K4.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),$Ne=i(f),oc=n(f,"H2",{class:!0});var IDe=s(oc);Z4=n(IDe,"A",{id:!0,class:!0,href:!0});var wMt=s(Z4);wbe=n(wMt,"SPAN",{});var AMt=s(wbe);T(C8.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),V1r=i(IDe),Abe=n(IDe,"SPAN",{});var yMt=s(Abe);X1r=r(yMt,"TFAutoModelForSeq2SeqLM"),yMt.forEach(t),IDe.forEach(t),kNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(w8.$$.fragment,Ml),z1r=i(Ml),rc=n(Ml,"P",{});var KZ=s(rc);W1r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JQ=n(KZ,"A",{href:!0});var LMt=s(JQ);Q1r=r(LMt,"from_pretrained()"),LMt.forEach(t),H1r=r(KZ," class method or the "),YQ=n(KZ,"A",{href:!0});var xMt=s(YQ);U1r=r(xMt,"from_config()"),xMt.forEach(t),J1r=r(KZ,` class
method.`),KZ.forEach(t),Y1r=i(Ml),A8=n(Ml,"P",{});var qDe=s(A8);K1r=r(qDe,"This class cannot be instantiated directly using "),ybe=n(qDe,"CODE",{});var $Mt=s(ybe);Z1r=r($Mt,"__init__()"),$Mt.forEach(t),e7r=r(qDe," (throws an error)."),qDe.forEach(t),o7r=i(Ml),St=n(Ml,"DIV",{class:!0});var AA=s(St);T(y8.$$.fragment,AA),r7r=i(AA),Lbe=n(AA,"P",{});var kMt=s(Lbe);t7r=r(kMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kMt.forEach(t),a7r=i(AA),tc=n(AA,"P",{});var ZZ=s(tc);n7r=r(ZZ,`Note:
Loading a model from its configuration file does `),xbe=n(ZZ,"STRONG",{});var SMt=s(xbe);s7r=r(SMt,"not"),SMt.forEach(t),l7r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(ZZ,"A",{href:!0});var RMt=s(KQ);i7r=r(RMt,"from_pretrained()"),RMt.forEach(t),d7r=r(ZZ," to load the model weights."),ZZ.forEach(t),c7r=i(AA),T(eE.$$.fragment,AA),AA.forEach(t),f7r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(L8.$$.fragment,El),m7r=i(El),$be=n(El,"P",{});var PMt=s($be);g7r=r(PMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PMt.forEach(t),h7r=i(El),an=n(El,"P",{});var yA=s(an);p7r=r(yA,"The model class to instantiate is selected based on the "),kbe=n(yA,"CODE",{});var BMt=s(kbe);_7r=r(BMt,"model_type"),BMt.forEach(t),u7r=r(yA,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(yA,"CODE",{});var IMt=s(Sbe);b7r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),v7r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(yA,"CODE",{});var qMt=s(Rbe);F7r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),T7r=r(yA,":"),yA.forEach(t),M7r=i(El),ye=n(El,"UL",{});var Be=s(ye);oE=n(Be,"LI",{});var ARe=s(oE);Pbe=n(ARe,"STRONG",{});var NMt=s(Pbe);E7r=r(NMt,"bart"),NMt.forEach(t),C7r=r(ARe," \u2014 "),ZQ=n(ARe,"A",{href:!0});var jMt=s(ZQ);w7r=r(jMt,"TFBartForConditionalGeneration"),jMt.forEach(t),A7r=r(ARe," (BART model)"),ARe.forEach(t),y7r=i(Be),rE=n(Be,"LI",{});var yRe=s(rE);Bbe=n(yRe,"STRONG",{});var DMt=s(Bbe);L7r=r(DMt,"blenderbot"),DMt.forEach(t),x7r=r(yRe," \u2014 "),eH=n(yRe,"A",{href:!0});var GMt=s(eH);$7r=r(GMt,"TFBlenderbotForConditionalGeneration"),GMt.forEach(t),k7r=r(yRe," (Blenderbot model)"),yRe.forEach(t),S7r=i(Be),tE=n(Be,"LI",{});var LRe=s(tE);Ibe=n(LRe,"STRONG",{});var OMt=s(Ibe);R7r=r(OMt,"blenderbot-small"),OMt.forEach(t),P7r=r(LRe," \u2014 "),oH=n(LRe,"A",{href:!0});var VMt=s(oH);B7r=r(VMt,"TFBlenderbotSmallForConditionalGeneration"),VMt.forEach(t),I7r=r(LRe," (BlenderbotSmall model)"),LRe.forEach(t),q7r=i(Be),aE=n(Be,"LI",{});var xRe=s(aE);qbe=n(xRe,"STRONG",{});var XMt=s(qbe);N7r=r(XMt,"encoder-decoder"),XMt.forEach(t),j7r=r(xRe," \u2014 "),rH=n(xRe,"A",{href:!0});var zMt=s(rH);D7r=r(zMt,"TFEncoderDecoderModel"),zMt.forEach(t),G7r=r(xRe," (Encoder decoder model)"),xRe.forEach(t),O7r=i(Be),nE=n(Be,"LI",{});var $Re=s(nE);Nbe=n($Re,"STRONG",{});var WMt=s(Nbe);V7r=r(WMt,"led"),WMt.forEach(t),X7r=r($Re," \u2014 "),tH=n($Re,"A",{href:!0});var QMt=s(tH);z7r=r(QMt,"TFLEDForConditionalGeneration"),QMt.forEach(t),W7r=r($Re," (LED model)"),$Re.forEach(t),Q7r=i(Be),sE=n(Be,"LI",{});var kRe=s(sE);jbe=n(kRe,"STRONG",{});var HMt=s(jbe);H7r=r(HMt,"marian"),HMt.forEach(t),U7r=r(kRe," \u2014 "),aH=n(kRe,"A",{href:!0});var UMt=s(aH);J7r=r(UMt,"TFMarianMTModel"),UMt.forEach(t),Y7r=r(kRe," (Marian model)"),kRe.forEach(t),K7r=i(Be),lE=n(Be,"LI",{});var SRe=s(lE);Dbe=n(SRe,"STRONG",{});var JMt=s(Dbe);Z7r=r(JMt,"mbart"),JMt.forEach(t),ebr=r(SRe," \u2014 "),nH=n(SRe,"A",{href:!0});var YMt=s(nH);obr=r(YMt,"TFMBartForConditionalGeneration"),YMt.forEach(t),rbr=r(SRe," (mBART model)"),SRe.forEach(t),tbr=i(Be),iE=n(Be,"LI",{});var RRe=s(iE);Gbe=n(RRe,"STRONG",{});var KMt=s(Gbe);abr=r(KMt,"mt5"),KMt.forEach(t),nbr=r(RRe," \u2014 "),sH=n(RRe,"A",{href:!0});var ZMt=s(sH);sbr=r(ZMt,"TFMT5ForConditionalGeneration"),ZMt.forEach(t),lbr=r(RRe," (mT5 model)"),RRe.forEach(t),ibr=i(Be),dE=n(Be,"LI",{});var PRe=s(dE);Obe=n(PRe,"STRONG",{});var e4t=s(Obe);dbr=r(e4t,"pegasus"),e4t.forEach(t),cbr=r(PRe," \u2014 "),lH=n(PRe,"A",{href:!0});var o4t=s(lH);fbr=r(o4t,"TFPegasusForConditionalGeneration"),o4t.forEach(t),mbr=r(PRe," (Pegasus model)"),PRe.forEach(t),gbr=i(Be),cE=n(Be,"LI",{});var BRe=s(cE);Vbe=n(BRe,"STRONG",{});var r4t=s(Vbe);hbr=r(r4t,"t5"),r4t.forEach(t),pbr=r(BRe," \u2014 "),iH=n(BRe,"A",{href:!0});var t4t=s(iH);_br=r(t4t,"TFT5ForConditionalGeneration"),t4t.forEach(t),ubr=r(BRe," (T5 model)"),BRe.forEach(t),Be.forEach(t),bbr=i(El),T(fE.$$.fragment,El),El.forEach(t),Ml.forEach(t),SNe=i(f),ac=n(f,"H2",{class:!0});var NDe=s(ac);mE=n(NDe,"A",{id:!0,class:!0,href:!0});var a4t=s(mE);Xbe=n(a4t,"SPAN",{});var n4t=s(Xbe);T(x8.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),vbr=i(NDe),zbe=n(NDe,"SPAN",{});var s4t=s(zbe);Fbr=r(s4t,"TFAutoModelForSequenceClassification"),s4t.forEach(t),NDe.forEach(t),RNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T($8.$$.fragment,Cl),Tbr=i(Cl),nc=n(Cl,"P",{});var eee=s(nc);Mbr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=n(eee,"A",{href:!0});var l4t=s(dH);Ebr=r(l4t,"from_pretrained()"),l4t.forEach(t),Cbr=r(eee," class method or the "),cH=n(eee,"A",{href:!0});var i4t=s(cH);wbr=r(i4t,"from_config()"),i4t.forEach(t),Abr=r(eee,` class
method.`),eee.forEach(t),ybr=i(Cl),k8=n(Cl,"P",{});var jDe=s(k8);Lbr=r(jDe,"This class cannot be instantiated directly using "),Wbe=n(jDe,"CODE",{});var d4t=s(Wbe);xbr=r(d4t,"__init__()"),d4t.forEach(t),$br=r(jDe," (throws an error)."),jDe.forEach(t),kbr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var LA=s(Rt);T(S8.$$.fragment,LA),Sbr=i(LA),Qbe=n(LA,"P",{});var c4t=s(Qbe);Rbr=r(c4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c4t.forEach(t),Pbr=i(LA),sc=n(LA,"P",{});var oee=s(sc);Bbr=r(oee,`Note:
Loading a model from its configuration file does `),Hbe=n(oee,"STRONG",{});var f4t=s(Hbe);Ibr=r(f4t,"not"),f4t.forEach(t),qbr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(oee,"A",{href:!0});var m4t=s(fH);Nbr=r(m4t,"from_pretrained()"),m4t.forEach(t),jbr=r(oee," to load the model weights."),oee.forEach(t),Dbr=i(LA),T(gE.$$.fragment,LA),LA.forEach(t),Gbr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(R8.$$.fragment,wl),Obr=i(wl),Ube=n(wl,"P",{});var g4t=s(Ube);Vbr=r(g4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g4t.forEach(t),Xbr=i(wl),nn=n(wl,"P",{});var xA=s(nn);zbr=r(xA,"The model class to instantiate is selected based on the "),Jbe=n(xA,"CODE",{});var h4t=s(Jbe);Wbr=r(h4t,"model_type"),h4t.forEach(t),Qbr=r(xA,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(xA,"CODE",{});var p4t=s(Ybe);Hbr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),Ubr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(xA,"CODE",{});var _4t=s(Kbe);Jbr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Ybr=r(xA,":"),xA.forEach(t),Kbr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);hE=n(ae,"LI",{});var IRe=s(hE);Zbe=n(IRe,"STRONG",{});var u4t=s(Zbe);Zbr=r(u4t,"albert"),u4t.forEach(t),evr=r(IRe," \u2014 "),mH=n(IRe,"A",{href:!0});var b4t=s(mH);ovr=r(b4t,"TFAlbertForSequenceClassification"),b4t.forEach(t),rvr=r(IRe," (ALBERT model)"),IRe.forEach(t),tvr=i(ae),pE=n(ae,"LI",{});var qRe=s(pE);eve=n(qRe,"STRONG",{});var v4t=s(eve);avr=r(v4t,"bert"),v4t.forEach(t),nvr=r(qRe," \u2014 "),gH=n(qRe,"A",{href:!0});var F4t=s(gH);svr=r(F4t,"TFBertForSequenceClassification"),F4t.forEach(t),lvr=r(qRe," (BERT model)"),qRe.forEach(t),ivr=i(ae),_E=n(ae,"LI",{});var NRe=s(_E);ove=n(NRe,"STRONG",{});var T4t=s(ove);dvr=r(T4t,"camembert"),T4t.forEach(t),cvr=r(NRe," \u2014 "),hH=n(NRe,"A",{href:!0});var M4t=s(hH);fvr=r(M4t,"TFCamembertForSequenceClassification"),M4t.forEach(t),mvr=r(NRe," (CamemBERT model)"),NRe.forEach(t),gvr=i(ae),uE=n(ae,"LI",{});var jRe=s(uE);rve=n(jRe,"STRONG",{});var E4t=s(rve);hvr=r(E4t,"convbert"),E4t.forEach(t),pvr=r(jRe," \u2014 "),pH=n(jRe,"A",{href:!0});var C4t=s(pH);_vr=r(C4t,"TFConvBertForSequenceClassification"),C4t.forEach(t),uvr=r(jRe," (ConvBERT model)"),jRe.forEach(t),bvr=i(ae),bE=n(ae,"LI",{});var DRe=s(bE);tve=n(DRe,"STRONG",{});var w4t=s(tve);vvr=r(w4t,"ctrl"),w4t.forEach(t),Fvr=r(DRe," \u2014 "),_H=n(DRe,"A",{href:!0});var A4t=s(_H);Tvr=r(A4t,"TFCTRLForSequenceClassification"),A4t.forEach(t),Mvr=r(DRe," (CTRL model)"),DRe.forEach(t),Evr=i(ae),vE=n(ae,"LI",{});var GRe=s(vE);ave=n(GRe,"STRONG",{});var y4t=s(ave);Cvr=r(y4t,"deberta"),y4t.forEach(t),wvr=r(GRe," \u2014 "),uH=n(GRe,"A",{href:!0});var L4t=s(uH);Avr=r(L4t,"TFDebertaForSequenceClassification"),L4t.forEach(t),yvr=r(GRe," (DeBERTa model)"),GRe.forEach(t),Lvr=i(ae),FE=n(ae,"LI",{});var ORe=s(FE);nve=n(ORe,"STRONG",{});var x4t=s(nve);xvr=r(x4t,"deberta-v2"),x4t.forEach(t),$vr=r(ORe," \u2014 "),bH=n(ORe,"A",{href:!0});var $4t=s(bH);kvr=r($4t,"TFDebertaV2ForSequenceClassification"),$4t.forEach(t),Svr=r(ORe," (DeBERTa-v2 model)"),ORe.forEach(t),Rvr=i(ae),TE=n(ae,"LI",{});var VRe=s(TE);sve=n(VRe,"STRONG",{});var k4t=s(sve);Pvr=r(k4t,"distilbert"),k4t.forEach(t),Bvr=r(VRe," \u2014 "),vH=n(VRe,"A",{href:!0});var S4t=s(vH);Ivr=r(S4t,"TFDistilBertForSequenceClassification"),S4t.forEach(t),qvr=r(VRe," (DistilBERT model)"),VRe.forEach(t),Nvr=i(ae),ME=n(ae,"LI",{});var XRe=s(ME);lve=n(XRe,"STRONG",{});var R4t=s(lve);jvr=r(R4t,"electra"),R4t.forEach(t),Dvr=r(XRe," \u2014 "),FH=n(XRe,"A",{href:!0});var P4t=s(FH);Gvr=r(P4t,"TFElectraForSequenceClassification"),P4t.forEach(t),Ovr=r(XRe," (ELECTRA model)"),XRe.forEach(t),Vvr=i(ae),EE=n(ae,"LI",{});var zRe=s(EE);ive=n(zRe,"STRONG",{});var B4t=s(ive);Xvr=r(B4t,"flaubert"),B4t.forEach(t),zvr=r(zRe," \u2014 "),TH=n(zRe,"A",{href:!0});var I4t=s(TH);Wvr=r(I4t,"TFFlaubertForSequenceClassification"),I4t.forEach(t),Qvr=r(zRe," (FlauBERT model)"),zRe.forEach(t),Hvr=i(ae),CE=n(ae,"LI",{});var WRe=s(CE);dve=n(WRe,"STRONG",{});var q4t=s(dve);Uvr=r(q4t,"funnel"),q4t.forEach(t),Jvr=r(WRe," \u2014 "),MH=n(WRe,"A",{href:!0});var N4t=s(MH);Yvr=r(N4t,"TFFunnelForSequenceClassification"),N4t.forEach(t),Kvr=r(WRe," (Funnel Transformer model)"),WRe.forEach(t),Zvr=i(ae),wE=n(ae,"LI",{});var QRe=s(wE);cve=n(QRe,"STRONG",{});var j4t=s(cve);eFr=r(j4t,"gpt2"),j4t.forEach(t),oFr=r(QRe," \u2014 "),EH=n(QRe,"A",{href:!0});var D4t=s(EH);rFr=r(D4t,"TFGPT2ForSequenceClassification"),D4t.forEach(t),tFr=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),aFr=i(ae),AE=n(ae,"LI",{});var HRe=s(AE);fve=n(HRe,"STRONG",{});var G4t=s(fve);nFr=r(G4t,"gptj"),G4t.forEach(t),sFr=r(HRe," \u2014 "),CH=n(HRe,"A",{href:!0});var O4t=s(CH);lFr=r(O4t,"TFGPTJForSequenceClassification"),O4t.forEach(t),iFr=r(HRe," (GPT-J model)"),HRe.forEach(t),dFr=i(ae),yE=n(ae,"LI",{});var URe=s(yE);mve=n(URe,"STRONG",{});var V4t=s(mve);cFr=r(V4t,"layoutlm"),V4t.forEach(t),fFr=r(URe," \u2014 "),wH=n(URe,"A",{href:!0});var X4t=s(wH);mFr=r(X4t,"TFLayoutLMForSequenceClassification"),X4t.forEach(t),gFr=r(URe," (LayoutLM model)"),URe.forEach(t),hFr=i(ae),LE=n(ae,"LI",{});var JRe=s(LE);gve=n(JRe,"STRONG",{});var z4t=s(gve);pFr=r(z4t,"longformer"),z4t.forEach(t),_Fr=r(JRe," \u2014 "),AH=n(JRe,"A",{href:!0});var W4t=s(AH);uFr=r(W4t,"TFLongformerForSequenceClassification"),W4t.forEach(t),bFr=r(JRe," (Longformer model)"),JRe.forEach(t),vFr=i(ae),xE=n(ae,"LI",{});var YRe=s(xE);hve=n(YRe,"STRONG",{});var Q4t=s(hve);FFr=r(Q4t,"mobilebert"),Q4t.forEach(t),TFr=r(YRe," \u2014 "),yH=n(YRe,"A",{href:!0});var H4t=s(yH);MFr=r(H4t,"TFMobileBertForSequenceClassification"),H4t.forEach(t),EFr=r(YRe," (MobileBERT model)"),YRe.forEach(t),CFr=i(ae),$E=n(ae,"LI",{});var KRe=s($E);pve=n(KRe,"STRONG",{});var U4t=s(pve);wFr=r(U4t,"mpnet"),U4t.forEach(t),AFr=r(KRe," \u2014 "),LH=n(KRe,"A",{href:!0});var J4t=s(LH);yFr=r(J4t,"TFMPNetForSequenceClassification"),J4t.forEach(t),LFr=r(KRe," (MPNet model)"),KRe.forEach(t),xFr=i(ae),kE=n(ae,"LI",{});var ZRe=s(kE);_ve=n(ZRe,"STRONG",{});var Y4t=s(_ve);$Fr=r(Y4t,"openai-gpt"),Y4t.forEach(t),kFr=r(ZRe," \u2014 "),xH=n(ZRe,"A",{href:!0});var K4t=s(xH);SFr=r(K4t,"TFOpenAIGPTForSequenceClassification"),K4t.forEach(t),RFr=r(ZRe," (OpenAI GPT model)"),ZRe.forEach(t),PFr=i(ae),SE=n(ae,"LI",{});var ePe=s(SE);uve=n(ePe,"STRONG",{});var Z4t=s(uve);BFr=r(Z4t,"rembert"),Z4t.forEach(t),IFr=r(ePe," \u2014 "),$H=n(ePe,"A",{href:!0});var eEt=s($H);qFr=r(eEt,"TFRemBertForSequenceClassification"),eEt.forEach(t),NFr=r(ePe," (RemBERT model)"),ePe.forEach(t),jFr=i(ae),RE=n(ae,"LI",{});var oPe=s(RE);bve=n(oPe,"STRONG",{});var oEt=s(bve);DFr=r(oEt,"roberta"),oEt.forEach(t),GFr=r(oPe," \u2014 "),kH=n(oPe,"A",{href:!0});var rEt=s(kH);OFr=r(rEt,"TFRobertaForSequenceClassification"),rEt.forEach(t),VFr=r(oPe," (RoBERTa model)"),oPe.forEach(t),XFr=i(ae),PE=n(ae,"LI",{});var rPe=s(PE);vve=n(rPe,"STRONG",{});var tEt=s(vve);zFr=r(tEt,"roformer"),tEt.forEach(t),WFr=r(rPe," \u2014 "),SH=n(rPe,"A",{href:!0});var aEt=s(SH);QFr=r(aEt,"TFRoFormerForSequenceClassification"),aEt.forEach(t),HFr=r(rPe," (RoFormer model)"),rPe.forEach(t),UFr=i(ae),BE=n(ae,"LI",{});var tPe=s(BE);Fve=n(tPe,"STRONG",{});var nEt=s(Fve);JFr=r(nEt,"tapas"),nEt.forEach(t),YFr=r(tPe," \u2014 "),RH=n(tPe,"A",{href:!0});var sEt=s(RH);KFr=r(sEt,"TFTapasForSequenceClassification"),sEt.forEach(t),ZFr=r(tPe," (TAPAS model)"),tPe.forEach(t),eTr=i(ae),IE=n(ae,"LI",{});var aPe=s(IE);Tve=n(aPe,"STRONG",{});var lEt=s(Tve);oTr=r(lEt,"transfo-xl"),lEt.forEach(t),rTr=r(aPe," \u2014 "),PH=n(aPe,"A",{href:!0});var iEt=s(PH);tTr=r(iEt,"TFTransfoXLForSequenceClassification"),iEt.forEach(t),aTr=r(aPe," (Transformer-XL model)"),aPe.forEach(t),nTr=i(ae),qE=n(ae,"LI",{});var nPe=s(qE);Mve=n(nPe,"STRONG",{});var dEt=s(Mve);sTr=r(dEt,"xlm"),dEt.forEach(t),lTr=r(nPe," \u2014 "),BH=n(nPe,"A",{href:!0});var cEt=s(BH);iTr=r(cEt,"TFXLMForSequenceClassification"),cEt.forEach(t),dTr=r(nPe," (XLM model)"),nPe.forEach(t),cTr=i(ae),NE=n(ae,"LI",{});var sPe=s(NE);Eve=n(sPe,"STRONG",{});var fEt=s(Eve);fTr=r(fEt,"xlm-roberta"),fEt.forEach(t),mTr=r(sPe," \u2014 "),IH=n(sPe,"A",{href:!0});var mEt=s(IH);gTr=r(mEt,"TFXLMRobertaForSequenceClassification"),mEt.forEach(t),hTr=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),pTr=i(ae),jE=n(ae,"LI",{});var lPe=s(jE);Cve=n(lPe,"STRONG",{});var gEt=s(Cve);_Tr=r(gEt,"xlnet"),gEt.forEach(t),uTr=r(lPe," \u2014 "),qH=n(lPe,"A",{href:!0});var hEt=s(qH);bTr=r(hEt,"TFXLNetForSequenceClassification"),hEt.forEach(t),vTr=r(lPe," (XLNet model)"),lPe.forEach(t),ae.forEach(t),FTr=i(wl),T(DE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),PNe=i(f),lc=n(f,"H2",{class:!0});var DDe=s(lc);GE=n(DDe,"A",{id:!0,class:!0,href:!0});var pEt=s(GE);wve=n(pEt,"SPAN",{});var _Et=s(wve);T(P8.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),TTr=i(DDe),Ave=n(DDe,"SPAN",{});var uEt=s(Ave);MTr=r(uEt,"TFAutoModelForMultipleChoice"),uEt.forEach(t),DDe.forEach(t),BNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(B8.$$.fragment,Al),ETr=i(Al),ic=n(Al,"P",{});var ree=s(ic);CTr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=n(ree,"A",{href:!0});var bEt=s(NH);wTr=r(bEt,"from_pretrained()"),bEt.forEach(t),ATr=r(ree," class method or the "),jH=n(ree,"A",{href:!0});var vEt=s(jH);yTr=r(vEt,"from_config()"),vEt.forEach(t),LTr=r(ree,` class
method.`),ree.forEach(t),xTr=i(Al),I8=n(Al,"P",{});var GDe=s(I8);$Tr=r(GDe,"This class cannot be instantiated directly using "),yve=n(GDe,"CODE",{});var FEt=s(yve);kTr=r(FEt,"__init__()"),FEt.forEach(t),STr=r(GDe," (throws an error)."),GDe.forEach(t),RTr=i(Al),Pt=n(Al,"DIV",{class:!0});var $A=s(Pt);T(q8.$$.fragment,$A),PTr=i($A),Lve=n($A,"P",{});var TEt=s(Lve);BTr=r(TEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TEt.forEach(t),ITr=i($A),dc=n($A,"P",{});var tee=s(dc);qTr=r(tee,`Note:
Loading a model from its configuration file does `),xve=n(tee,"STRONG",{});var MEt=s(xve);NTr=r(MEt,"not"),MEt.forEach(t),jTr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(tee,"A",{href:!0});var EEt=s(DH);DTr=r(EEt,"from_pretrained()"),EEt.forEach(t),GTr=r(tee," to load the model weights."),tee.forEach(t),OTr=i($A),T(OE.$$.fragment,$A),$A.forEach(t),VTr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(N8.$$.fragment,yl),XTr=i(yl),$ve=n(yl,"P",{});var CEt=s($ve);zTr=r(CEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CEt.forEach(t),WTr=i(yl),sn=n(yl,"P",{});var kA=s(sn);QTr=r(kA,"The model class to instantiate is selected based on the "),kve=n(kA,"CODE",{});var wEt=s(kve);HTr=r(wEt,"model_type"),wEt.forEach(t),UTr=r(kA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(kA,"CODE",{});var AEt=s(Sve);JTr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),YTr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(kA,"CODE",{});var yEt=s(Rve);KTr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),ZTr=r(kA,":"),kA.forEach(t),eMr=i(yl),he=n(yl,"UL",{});var ue=s(he);VE=n(ue,"LI",{});var iPe=s(VE);Pve=n(iPe,"STRONG",{});var LEt=s(Pve);oMr=r(LEt,"albert"),LEt.forEach(t),rMr=r(iPe," \u2014 "),GH=n(iPe,"A",{href:!0});var xEt=s(GH);tMr=r(xEt,"TFAlbertForMultipleChoice"),xEt.forEach(t),aMr=r(iPe," (ALBERT model)"),iPe.forEach(t),nMr=i(ue),XE=n(ue,"LI",{});var dPe=s(XE);Bve=n(dPe,"STRONG",{});var $Et=s(Bve);sMr=r($Et,"bert"),$Et.forEach(t),lMr=r(dPe," \u2014 "),OH=n(dPe,"A",{href:!0});var kEt=s(OH);iMr=r(kEt,"TFBertForMultipleChoice"),kEt.forEach(t),dMr=r(dPe," (BERT model)"),dPe.forEach(t),cMr=i(ue),zE=n(ue,"LI",{});var cPe=s(zE);Ive=n(cPe,"STRONG",{});var SEt=s(Ive);fMr=r(SEt,"camembert"),SEt.forEach(t),mMr=r(cPe," \u2014 "),VH=n(cPe,"A",{href:!0});var REt=s(VH);gMr=r(REt,"TFCamembertForMultipleChoice"),REt.forEach(t),hMr=r(cPe," (CamemBERT model)"),cPe.forEach(t),pMr=i(ue),WE=n(ue,"LI",{});var fPe=s(WE);qve=n(fPe,"STRONG",{});var PEt=s(qve);_Mr=r(PEt,"convbert"),PEt.forEach(t),uMr=r(fPe," \u2014 "),XH=n(fPe,"A",{href:!0});var BEt=s(XH);bMr=r(BEt,"TFConvBertForMultipleChoice"),BEt.forEach(t),vMr=r(fPe," (ConvBERT model)"),fPe.forEach(t),FMr=i(ue),QE=n(ue,"LI",{});var mPe=s(QE);Nve=n(mPe,"STRONG",{});var IEt=s(Nve);TMr=r(IEt,"distilbert"),IEt.forEach(t),MMr=r(mPe," \u2014 "),zH=n(mPe,"A",{href:!0});var qEt=s(zH);EMr=r(qEt,"TFDistilBertForMultipleChoice"),qEt.forEach(t),CMr=r(mPe," (DistilBERT model)"),mPe.forEach(t),wMr=i(ue),HE=n(ue,"LI",{});var gPe=s(HE);jve=n(gPe,"STRONG",{});var NEt=s(jve);AMr=r(NEt,"electra"),NEt.forEach(t),yMr=r(gPe," \u2014 "),WH=n(gPe,"A",{href:!0});var jEt=s(WH);LMr=r(jEt,"TFElectraForMultipleChoice"),jEt.forEach(t),xMr=r(gPe," (ELECTRA model)"),gPe.forEach(t),$Mr=i(ue),UE=n(ue,"LI",{});var hPe=s(UE);Dve=n(hPe,"STRONG",{});var DEt=s(Dve);kMr=r(DEt,"flaubert"),DEt.forEach(t),SMr=r(hPe," \u2014 "),QH=n(hPe,"A",{href:!0});var GEt=s(QH);RMr=r(GEt,"TFFlaubertForMultipleChoice"),GEt.forEach(t),PMr=r(hPe," (FlauBERT model)"),hPe.forEach(t),BMr=i(ue),JE=n(ue,"LI",{});var pPe=s(JE);Gve=n(pPe,"STRONG",{});var OEt=s(Gve);IMr=r(OEt,"funnel"),OEt.forEach(t),qMr=r(pPe," \u2014 "),HH=n(pPe,"A",{href:!0});var VEt=s(HH);NMr=r(VEt,"TFFunnelForMultipleChoice"),VEt.forEach(t),jMr=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),DMr=i(ue),YE=n(ue,"LI",{});var _Pe=s(YE);Ove=n(_Pe,"STRONG",{});var XEt=s(Ove);GMr=r(XEt,"longformer"),XEt.forEach(t),OMr=r(_Pe," \u2014 "),UH=n(_Pe,"A",{href:!0});var zEt=s(UH);VMr=r(zEt,"TFLongformerForMultipleChoice"),zEt.forEach(t),XMr=r(_Pe," (Longformer model)"),_Pe.forEach(t),zMr=i(ue),KE=n(ue,"LI",{});var uPe=s(KE);Vve=n(uPe,"STRONG",{});var WEt=s(Vve);WMr=r(WEt,"mobilebert"),WEt.forEach(t),QMr=r(uPe," \u2014 "),JH=n(uPe,"A",{href:!0});var QEt=s(JH);HMr=r(QEt,"TFMobileBertForMultipleChoice"),QEt.forEach(t),UMr=r(uPe," (MobileBERT model)"),uPe.forEach(t),JMr=i(ue),ZE=n(ue,"LI",{});var bPe=s(ZE);Xve=n(bPe,"STRONG",{});var HEt=s(Xve);YMr=r(HEt,"mpnet"),HEt.forEach(t),KMr=r(bPe," \u2014 "),YH=n(bPe,"A",{href:!0});var UEt=s(YH);ZMr=r(UEt,"TFMPNetForMultipleChoice"),UEt.forEach(t),e4r=r(bPe," (MPNet model)"),bPe.forEach(t),o4r=i(ue),eC=n(ue,"LI",{});var vPe=s(eC);zve=n(vPe,"STRONG",{});var JEt=s(zve);r4r=r(JEt,"rembert"),JEt.forEach(t),t4r=r(vPe," \u2014 "),KH=n(vPe,"A",{href:!0});var YEt=s(KH);a4r=r(YEt,"TFRemBertForMultipleChoice"),YEt.forEach(t),n4r=r(vPe," (RemBERT model)"),vPe.forEach(t),s4r=i(ue),oC=n(ue,"LI",{});var FPe=s(oC);Wve=n(FPe,"STRONG",{});var KEt=s(Wve);l4r=r(KEt,"roberta"),KEt.forEach(t),i4r=r(FPe," \u2014 "),ZH=n(FPe,"A",{href:!0});var ZEt=s(ZH);d4r=r(ZEt,"TFRobertaForMultipleChoice"),ZEt.forEach(t),c4r=r(FPe," (RoBERTa model)"),FPe.forEach(t),f4r=i(ue),rC=n(ue,"LI",{});var TPe=s(rC);Qve=n(TPe,"STRONG",{});var eCt=s(Qve);m4r=r(eCt,"roformer"),eCt.forEach(t),g4r=r(TPe," \u2014 "),eU=n(TPe,"A",{href:!0});var oCt=s(eU);h4r=r(oCt,"TFRoFormerForMultipleChoice"),oCt.forEach(t),p4r=r(TPe," (RoFormer model)"),TPe.forEach(t),_4r=i(ue),tC=n(ue,"LI",{});var MPe=s(tC);Hve=n(MPe,"STRONG",{});var rCt=s(Hve);u4r=r(rCt,"xlm"),rCt.forEach(t),b4r=r(MPe," \u2014 "),oU=n(MPe,"A",{href:!0});var tCt=s(oU);v4r=r(tCt,"TFXLMForMultipleChoice"),tCt.forEach(t),F4r=r(MPe," (XLM model)"),MPe.forEach(t),T4r=i(ue),aC=n(ue,"LI",{});var EPe=s(aC);Uve=n(EPe,"STRONG",{});var aCt=s(Uve);M4r=r(aCt,"xlm-roberta"),aCt.forEach(t),E4r=r(EPe," \u2014 "),rU=n(EPe,"A",{href:!0});var nCt=s(rU);C4r=r(nCt,"TFXLMRobertaForMultipleChoice"),nCt.forEach(t),w4r=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),A4r=i(ue),nC=n(ue,"LI",{});var CPe=s(nC);Jve=n(CPe,"STRONG",{});var sCt=s(Jve);y4r=r(sCt,"xlnet"),sCt.forEach(t),L4r=r(CPe," \u2014 "),tU=n(CPe,"A",{href:!0});var lCt=s(tU);x4r=r(lCt,"TFXLNetForMultipleChoice"),lCt.forEach(t),$4r=r(CPe," (XLNet model)"),CPe.forEach(t),ue.forEach(t),k4r=i(yl),T(sC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),INe=i(f),cc=n(f,"H2",{class:!0});var ODe=s(cc);lC=n(ODe,"A",{id:!0,class:!0,href:!0});var iCt=s(lC);Yve=n(iCt,"SPAN",{});var dCt=s(Yve);T(j8.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),S4r=i(ODe),Kve=n(ODe,"SPAN",{});var cCt=s(Kve);R4r=r(cCt,"TFAutoModelForNextSentencePrediction"),cCt.forEach(t),ODe.forEach(t),qNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(D8.$$.fragment,Ll),P4r=i(Ll),fc=n(Ll,"P",{});var aee=s(fc);B4r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=n(aee,"A",{href:!0});var fCt=s(aU);I4r=r(fCt,"from_pretrained()"),fCt.forEach(t),q4r=r(aee," class method or the "),nU=n(aee,"A",{href:!0});var mCt=s(nU);N4r=r(mCt,"from_config()"),mCt.forEach(t),j4r=r(aee,` class
method.`),aee.forEach(t),D4r=i(Ll),G8=n(Ll,"P",{});var VDe=s(G8);G4r=r(VDe,"This class cannot be instantiated directly using "),Zve=n(VDe,"CODE",{});var gCt=s(Zve);O4r=r(gCt,"__init__()"),gCt.forEach(t),V4r=r(VDe," (throws an error)."),VDe.forEach(t),X4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var SA=s(Bt);T(O8.$$.fragment,SA),z4r=i(SA),eFe=n(SA,"P",{});var hCt=s(eFe);W4r=r(hCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hCt.forEach(t),Q4r=i(SA),mc=n(SA,"P",{});var nee=s(mc);H4r=r(nee,`Note:
Loading a model from its configuration file does `),oFe=n(nee,"STRONG",{});var pCt=s(oFe);U4r=r(pCt,"not"),pCt.forEach(t),J4r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(nee,"A",{href:!0});var _Ct=s(sU);Y4r=r(_Ct,"from_pretrained()"),_Ct.forEach(t),K4r=r(nee," to load the model weights."),nee.forEach(t),Z4r=i(SA),T(iC.$$.fragment,SA),SA.forEach(t),eEr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(V8.$$.fragment,xl),oEr=i(xl),rFe=n(xl,"P",{});var uCt=s(rFe);rEr=r(uCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uCt.forEach(t),tEr=i(xl),ln=n(xl,"P",{});var RA=s(ln);aEr=r(RA,"The model class to instantiate is selected based on the "),tFe=n(RA,"CODE",{});var bCt=s(tFe);nEr=r(bCt,"model_type"),bCt.forEach(t),sEr=r(RA,` property of the config object (either
passed as an argument or loaded from `),aFe=n(RA,"CODE",{});var vCt=s(aFe);lEr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),iEr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(RA,"CODE",{});var FCt=s(nFe);dEr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),cEr=r(RA,":"),RA.forEach(t),fEr=i(xl),X8=n(xl,"UL",{});var XDe=s(X8);dC=n(XDe,"LI",{});var wPe=s(dC);sFe=n(wPe,"STRONG",{});var TCt=s(sFe);mEr=r(TCt,"bert"),TCt.forEach(t),gEr=r(wPe," \u2014 "),lU=n(wPe,"A",{href:!0});var MCt=s(lU);hEr=r(MCt,"TFBertForNextSentencePrediction"),MCt.forEach(t),pEr=r(wPe," (BERT model)"),wPe.forEach(t),_Er=i(XDe),cC=n(XDe,"LI",{});var APe=s(cC);lFe=n(APe,"STRONG",{});var ECt=s(lFe);uEr=r(ECt,"mobilebert"),ECt.forEach(t),bEr=r(APe," \u2014 "),iU=n(APe,"A",{href:!0});var CCt=s(iU);vEr=r(CCt,"TFMobileBertForNextSentencePrediction"),CCt.forEach(t),FEr=r(APe," (MobileBERT model)"),APe.forEach(t),XDe.forEach(t),TEr=i(xl),T(fC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),NNe=i(f),gc=n(f,"H2",{class:!0});var zDe=s(gc);mC=n(zDe,"A",{id:!0,class:!0,href:!0});var wCt=s(mC);iFe=n(wCt,"SPAN",{});var ACt=s(iFe);T(z8.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),MEr=i(zDe),dFe=n(zDe,"SPAN",{});var yCt=s(dFe);EEr=r(yCt,"TFAutoModelForTableQuestionAnswering"),yCt.forEach(t),zDe.forEach(t),jNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(W8.$$.fragment,$l),CEr=i($l),hc=n($l,"P",{});var see=s(hc);wEr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dU=n(see,"A",{href:!0});var LCt=s(dU);AEr=r(LCt,"from_pretrained()"),LCt.forEach(t),yEr=r(see," class method or the "),cU=n(see,"A",{href:!0});var xCt=s(cU);LEr=r(xCt,"from_config()"),xCt.forEach(t),xEr=r(see,` class
method.`),see.forEach(t),$Er=i($l),Q8=n($l,"P",{});var WDe=s(Q8);kEr=r(WDe,"This class cannot be instantiated directly using "),cFe=n(WDe,"CODE",{});var $Ct=s(cFe);SEr=r($Ct,"__init__()"),$Ct.forEach(t),REr=r(WDe," (throws an error)."),WDe.forEach(t),PEr=i($l),It=n($l,"DIV",{class:!0});var PA=s(It);T(H8.$$.fragment,PA),BEr=i(PA),fFe=n(PA,"P",{});var kCt=s(fFe);IEr=r(kCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kCt.forEach(t),qEr=i(PA),pc=n(PA,"P",{});var lee=s(pc);NEr=r(lee,`Note:
Loading a model from its configuration file does `),mFe=n(lee,"STRONG",{});var SCt=s(mFe);jEr=r(SCt,"not"),SCt.forEach(t),DEr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(lee,"A",{href:!0});var RCt=s(fU);GEr=r(RCt,"from_pretrained()"),RCt.forEach(t),OEr=r(lee," to load the model weights."),lee.forEach(t),VEr=i(PA),T(gC.$$.fragment,PA),PA.forEach(t),XEr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(U8.$$.fragment,kl),zEr=i(kl),gFe=n(kl,"P",{});var PCt=s(gFe);WEr=r(PCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),PCt.forEach(t),QEr=i(kl),dn=n(kl,"P",{});var BA=s(dn);HEr=r(BA,"The model class to instantiate is selected based on the "),hFe=n(BA,"CODE",{});var BCt=s(hFe);UEr=r(BCt,"model_type"),BCt.forEach(t),JEr=r(BA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(BA,"CODE",{});var ICt=s(pFe);YEr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),KEr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(BA,"CODE",{});var qCt=s(_Fe);ZEr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),eCr=r(BA,":"),BA.forEach(t),oCr=i(kl),uFe=n(kl,"UL",{});var NCt=s(uFe);hC=n(NCt,"LI",{});var yPe=s(hC);bFe=n(yPe,"STRONG",{});var jCt=s(bFe);rCr=r(jCt,"tapas"),jCt.forEach(t),tCr=r(yPe," \u2014 "),mU=n(yPe,"A",{href:!0});var DCt=s(mU);aCr=r(DCt,"TFTapasForQuestionAnswering"),DCt.forEach(t),nCr=r(yPe," (TAPAS model)"),yPe.forEach(t),NCt.forEach(t),sCr=i(kl),T(pC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),DNe=i(f),_c=n(f,"H2",{class:!0});var QDe=s(_c);_C=n(QDe,"A",{id:!0,class:!0,href:!0});var GCt=s(_C);vFe=n(GCt,"SPAN",{});var OCt=s(vFe);T(J8.$$.fragment,OCt),OCt.forEach(t),GCt.forEach(t),lCr=i(QDe),FFe=n(QDe,"SPAN",{});var VCt=s(FFe);iCr=r(VCt,"TFAutoModelForTokenClassification"),VCt.forEach(t),QDe.forEach(t),GNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(Y8.$$.fragment,Sl),dCr=i(Sl),uc=n(Sl,"P",{});var iee=s(uc);cCr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gU=n(iee,"A",{href:!0});var XCt=s(gU);fCr=r(XCt,"from_pretrained()"),XCt.forEach(t),mCr=r(iee," class method or the "),hU=n(iee,"A",{href:!0});var zCt=s(hU);gCr=r(zCt,"from_config()"),zCt.forEach(t),hCr=r(iee,` class
method.`),iee.forEach(t),pCr=i(Sl),K8=n(Sl,"P",{});var HDe=s(K8);_Cr=r(HDe,"This class cannot be instantiated directly using "),TFe=n(HDe,"CODE",{});var WCt=s(TFe);uCr=r(WCt,"__init__()"),WCt.forEach(t),bCr=r(HDe," (throws an error)."),HDe.forEach(t),vCr=i(Sl),qt=n(Sl,"DIV",{class:!0});var IA=s(qt);T(Z8.$$.fragment,IA),FCr=i(IA),MFe=n(IA,"P",{});var QCt=s(MFe);TCr=r(QCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QCt.forEach(t),MCr=i(IA),bc=n(IA,"P",{});var dee=s(bc);ECr=r(dee,`Note:
Loading a model from its configuration file does `),EFe=n(dee,"STRONG",{});var HCt=s(EFe);CCr=r(HCt,"not"),HCt.forEach(t),wCr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dee,"A",{href:!0});var UCt=s(pU);ACr=r(UCt,"from_pretrained()"),UCt.forEach(t),yCr=r(dee," to load the model weights."),dee.forEach(t),LCr=i(IA),T(uC.$$.fragment,IA),IA.forEach(t),xCr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(e9.$$.fragment,Rl),$Cr=i(Rl),CFe=n(Rl,"P",{});var JCt=s(CFe);kCr=r(JCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JCt.forEach(t),SCr=i(Rl),cn=n(Rl,"P",{});var qA=s(cn);RCr=r(qA,"The model class to instantiate is selected based on the "),wFe=n(qA,"CODE",{});var YCt=s(wFe);PCr=r(YCt,"model_type"),YCt.forEach(t),BCr=r(qA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(qA,"CODE",{});var KCt=s(AFe);ICr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),qCr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(qA,"CODE",{});var ZCt=s(yFe);NCr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),jCr=r(qA,":"),qA.forEach(t),DCr=i(Rl),de=n(Rl,"UL",{});var me=s(de);bC=n(me,"LI",{});var LPe=s(bC);LFe=n(LPe,"STRONG",{});var e5t=s(LFe);GCr=r(e5t,"albert"),e5t.forEach(t),OCr=r(LPe," \u2014 "),_U=n(LPe,"A",{href:!0});var o5t=s(_U);VCr=r(o5t,"TFAlbertForTokenClassification"),o5t.forEach(t),XCr=r(LPe," (ALBERT model)"),LPe.forEach(t),zCr=i(me),vC=n(me,"LI",{});var xPe=s(vC);xFe=n(xPe,"STRONG",{});var r5t=s(xFe);WCr=r(r5t,"bert"),r5t.forEach(t),QCr=r(xPe," \u2014 "),uU=n(xPe,"A",{href:!0});var t5t=s(uU);HCr=r(t5t,"TFBertForTokenClassification"),t5t.forEach(t),UCr=r(xPe," (BERT model)"),xPe.forEach(t),JCr=i(me),FC=n(me,"LI",{});var $Pe=s(FC);$Fe=n($Pe,"STRONG",{});var a5t=s($Fe);YCr=r(a5t,"camembert"),a5t.forEach(t),KCr=r($Pe," \u2014 "),bU=n($Pe,"A",{href:!0});var n5t=s(bU);ZCr=r(n5t,"TFCamembertForTokenClassification"),n5t.forEach(t),e5r=r($Pe," (CamemBERT model)"),$Pe.forEach(t),o5r=i(me),TC=n(me,"LI",{});var kPe=s(TC);kFe=n(kPe,"STRONG",{});var s5t=s(kFe);r5r=r(s5t,"convbert"),s5t.forEach(t),t5r=r(kPe," \u2014 "),vU=n(kPe,"A",{href:!0});var l5t=s(vU);a5r=r(l5t,"TFConvBertForTokenClassification"),l5t.forEach(t),n5r=r(kPe," (ConvBERT model)"),kPe.forEach(t),s5r=i(me),MC=n(me,"LI",{});var SPe=s(MC);SFe=n(SPe,"STRONG",{});var i5t=s(SFe);l5r=r(i5t,"deberta"),i5t.forEach(t),i5r=r(SPe," \u2014 "),FU=n(SPe,"A",{href:!0});var d5t=s(FU);d5r=r(d5t,"TFDebertaForTokenClassification"),d5t.forEach(t),c5r=r(SPe," (DeBERTa model)"),SPe.forEach(t),f5r=i(me),EC=n(me,"LI",{});var RPe=s(EC);RFe=n(RPe,"STRONG",{});var c5t=s(RFe);m5r=r(c5t,"deberta-v2"),c5t.forEach(t),g5r=r(RPe," \u2014 "),TU=n(RPe,"A",{href:!0});var f5t=s(TU);h5r=r(f5t,"TFDebertaV2ForTokenClassification"),f5t.forEach(t),p5r=r(RPe," (DeBERTa-v2 model)"),RPe.forEach(t),_5r=i(me),CC=n(me,"LI",{});var PPe=s(CC);PFe=n(PPe,"STRONG",{});var m5t=s(PFe);u5r=r(m5t,"distilbert"),m5t.forEach(t),b5r=r(PPe," \u2014 "),MU=n(PPe,"A",{href:!0});var g5t=s(MU);v5r=r(g5t,"TFDistilBertForTokenClassification"),g5t.forEach(t),F5r=r(PPe," (DistilBERT model)"),PPe.forEach(t),T5r=i(me),wC=n(me,"LI",{});var BPe=s(wC);BFe=n(BPe,"STRONG",{});var h5t=s(BFe);M5r=r(h5t,"electra"),h5t.forEach(t),E5r=r(BPe," \u2014 "),EU=n(BPe,"A",{href:!0});var p5t=s(EU);C5r=r(p5t,"TFElectraForTokenClassification"),p5t.forEach(t),w5r=r(BPe," (ELECTRA model)"),BPe.forEach(t),A5r=i(me),AC=n(me,"LI",{});var IPe=s(AC);IFe=n(IPe,"STRONG",{});var _5t=s(IFe);y5r=r(_5t,"flaubert"),_5t.forEach(t),L5r=r(IPe," \u2014 "),CU=n(IPe,"A",{href:!0});var u5t=s(CU);x5r=r(u5t,"TFFlaubertForTokenClassification"),u5t.forEach(t),$5r=r(IPe," (FlauBERT model)"),IPe.forEach(t),k5r=i(me),yC=n(me,"LI",{});var qPe=s(yC);qFe=n(qPe,"STRONG",{});var b5t=s(qFe);S5r=r(b5t,"funnel"),b5t.forEach(t),R5r=r(qPe," \u2014 "),wU=n(qPe,"A",{href:!0});var v5t=s(wU);P5r=r(v5t,"TFFunnelForTokenClassification"),v5t.forEach(t),B5r=r(qPe," (Funnel Transformer model)"),qPe.forEach(t),I5r=i(me),LC=n(me,"LI",{});var NPe=s(LC);NFe=n(NPe,"STRONG",{});var F5t=s(NFe);q5r=r(F5t,"layoutlm"),F5t.forEach(t),N5r=r(NPe," \u2014 "),AU=n(NPe,"A",{href:!0});var T5t=s(AU);j5r=r(T5t,"TFLayoutLMForTokenClassification"),T5t.forEach(t),D5r=r(NPe," (LayoutLM model)"),NPe.forEach(t),G5r=i(me),xC=n(me,"LI",{});var jPe=s(xC);jFe=n(jPe,"STRONG",{});var M5t=s(jFe);O5r=r(M5t,"longformer"),M5t.forEach(t),V5r=r(jPe," \u2014 "),yU=n(jPe,"A",{href:!0});var E5t=s(yU);X5r=r(E5t,"TFLongformerForTokenClassification"),E5t.forEach(t),z5r=r(jPe," (Longformer model)"),jPe.forEach(t),W5r=i(me),$C=n(me,"LI",{});var DPe=s($C);DFe=n(DPe,"STRONG",{});var C5t=s(DFe);Q5r=r(C5t,"mobilebert"),C5t.forEach(t),H5r=r(DPe," \u2014 "),LU=n(DPe,"A",{href:!0});var w5t=s(LU);U5r=r(w5t,"TFMobileBertForTokenClassification"),w5t.forEach(t),J5r=r(DPe," (MobileBERT model)"),DPe.forEach(t),Y5r=i(me),kC=n(me,"LI",{});var GPe=s(kC);GFe=n(GPe,"STRONG",{});var A5t=s(GFe);K5r=r(A5t,"mpnet"),A5t.forEach(t),Z5r=r(GPe," \u2014 "),xU=n(GPe,"A",{href:!0});var y5t=s(xU);e3r=r(y5t,"TFMPNetForTokenClassification"),y5t.forEach(t),o3r=r(GPe," (MPNet model)"),GPe.forEach(t),r3r=i(me),SC=n(me,"LI",{});var OPe=s(SC);OFe=n(OPe,"STRONG",{});var L5t=s(OFe);t3r=r(L5t,"rembert"),L5t.forEach(t),a3r=r(OPe," \u2014 "),$U=n(OPe,"A",{href:!0});var x5t=s($U);n3r=r(x5t,"TFRemBertForTokenClassification"),x5t.forEach(t),s3r=r(OPe," (RemBERT model)"),OPe.forEach(t),l3r=i(me),RC=n(me,"LI",{});var VPe=s(RC);VFe=n(VPe,"STRONG",{});var $5t=s(VFe);i3r=r($5t,"roberta"),$5t.forEach(t),d3r=r(VPe," \u2014 "),kU=n(VPe,"A",{href:!0});var k5t=s(kU);c3r=r(k5t,"TFRobertaForTokenClassification"),k5t.forEach(t),f3r=r(VPe," (RoBERTa model)"),VPe.forEach(t),m3r=i(me),PC=n(me,"LI",{});var XPe=s(PC);XFe=n(XPe,"STRONG",{});var S5t=s(XFe);g3r=r(S5t,"roformer"),S5t.forEach(t),h3r=r(XPe," \u2014 "),SU=n(XPe,"A",{href:!0});var R5t=s(SU);p3r=r(R5t,"TFRoFormerForTokenClassification"),R5t.forEach(t),_3r=r(XPe," (RoFormer model)"),XPe.forEach(t),u3r=i(me),BC=n(me,"LI",{});var zPe=s(BC);zFe=n(zPe,"STRONG",{});var P5t=s(zFe);b3r=r(P5t,"xlm"),P5t.forEach(t),v3r=r(zPe," \u2014 "),RU=n(zPe,"A",{href:!0});var B5t=s(RU);F3r=r(B5t,"TFXLMForTokenClassification"),B5t.forEach(t),T3r=r(zPe," (XLM model)"),zPe.forEach(t),M3r=i(me),IC=n(me,"LI",{});var WPe=s(IC);WFe=n(WPe,"STRONG",{});var I5t=s(WFe);E3r=r(I5t,"xlm-roberta"),I5t.forEach(t),C3r=r(WPe," \u2014 "),PU=n(WPe,"A",{href:!0});var q5t=s(PU);w3r=r(q5t,"TFXLMRobertaForTokenClassification"),q5t.forEach(t),A3r=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),y3r=i(me),qC=n(me,"LI",{});var QPe=s(qC);QFe=n(QPe,"STRONG",{});var N5t=s(QFe);L3r=r(N5t,"xlnet"),N5t.forEach(t),x3r=r(QPe," \u2014 "),BU=n(QPe,"A",{href:!0});var j5t=s(BU);$3r=r(j5t,"TFXLNetForTokenClassification"),j5t.forEach(t),k3r=r(QPe," (XLNet model)"),QPe.forEach(t),me.forEach(t),S3r=i(Rl),T(NC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ONe=i(f),vc=n(f,"H2",{class:!0});var UDe=s(vc);jC=n(UDe,"A",{id:!0,class:!0,href:!0});var D5t=s(jC);HFe=n(D5t,"SPAN",{});var G5t=s(HFe);T(o9.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),R3r=i(UDe),UFe=n(UDe,"SPAN",{});var O5t=s(UFe);P3r=r(O5t,"TFAutoModelForQuestionAnswering"),O5t.forEach(t),UDe.forEach(t),VNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(r9.$$.fragment,Pl),B3r=i(Pl),Fc=n(Pl,"P",{});var cee=s(Fc);I3r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=n(cee,"A",{href:!0});var V5t=s(IU);q3r=r(V5t,"from_pretrained()"),V5t.forEach(t),N3r=r(cee," class method or the "),qU=n(cee,"A",{href:!0});var X5t=s(qU);j3r=r(X5t,"from_config()"),X5t.forEach(t),D3r=r(cee,` class
method.`),cee.forEach(t),G3r=i(Pl),t9=n(Pl,"P",{});var JDe=s(t9);O3r=r(JDe,"This class cannot be instantiated directly using "),JFe=n(JDe,"CODE",{});var z5t=s(JFe);V3r=r(z5t,"__init__()"),z5t.forEach(t),X3r=r(JDe," (throws an error)."),JDe.forEach(t),z3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var NA=s(Nt);T(a9.$$.fragment,NA),W3r=i(NA),YFe=n(NA,"P",{});var W5t=s(YFe);Q3r=r(W5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W5t.forEach(t),H3r=i(NA),Tc=n(NA,"P",{});var fee=s(Tc);U3r=r(fee,`Note:
Loading a model from its configuration file does `),KFe=n(fee,"STRONG",{});var Q5t=s(KFe);J3r=r(Q5t,"not"),Q5t.forEach(t),Y3r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(fee,"A",{href:!0});var H5t=s(NU);K3r=r(H5t,"from_pretrained()"),H5t.forEach(t),Z3r=r(fee," to load the model weights."),fee.forEach(t),ewr=i(NA),T(DC.$$.fragment,NA),NA.forEach(t),owr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(n9.$$.fragment,Bl),rwr=i(Bl),ZFe=n(Bl,"P",{});var U5t=s(ZFe);twr=r(U5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U5t.forEach(t),awr=i(Bl),fn=n(Bl,"P",{});var jA=s(fn);nwr=r(jA,"The model class to instantiate is selected based on the "),eTe=n(jA,"CODE",{});var J5t=s(eTe);swr=r(J5t,"model_type"),J5t.forEach(t),lwr=r(jA,` property of the config object (either
passed as an argument or loaded from `),oTe=n(jA,"CODE",{});var Y5t=s(oTe);iwr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),dwr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(jA,"CODE",{});var K5t=s(rTe);cwr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),fwr=r(jA,":"),jA.forEach(t),mwr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);GC=n(ge,"LI",{});var HPe=s(GC);tTe=n(HPe,"STRONG",{});var Z5t=s(tTe);gwr=r(Z5t,"albert"),Z5t.forEach(t),hwr=r(HPe," \u2014 "),jU=n(HPe,"A",{href:!0});var e3t=s(jU);pwr=r(e3t,"TFAlbertForQuestionAnswering"),e3t.forEach(t),_wr=r(HPe," (ALBERT model)"),HPe.forEach(t),uwr=i(ge),OC=n(ge,"LI",{});var UPe=s(OC);aTe=n(UPe,"STRONG",{});var o3t=s(aTe);bwr=r(o3t,"bert"),o3t.forEach(t),vwr=r(UPe," \u2014 "),DU=n(UPe,"A",{href:!0});var r3t=s(DU);Fwr=r(r3t,"TFBertForQuestionAnswering"),r3t.forEach(t),Twr=r(UPe," (BERT model)"),UPe.forEach(t),Mwr=i(ge),VC=n(ge,"LI",{});var JPe=s(VC);nTe=n(JPe,"STRONG",{});var t3t=s(nTe);Ewr=r(t3t,"camembert"),t3t.forEach(t),Cwr=r(JPe," \u2014 "),GU=n(JPe,"A",{href:!0});var a3t=s(GU);wwr=r(a3t,"TFCamembertForQuestionAnswering"),a3t.forEach(t),Awr=r(JPe," (CamemBERT model)"),JPe.forEach(t),ywr=i(ge),XC=n(ge,"LI",{});var YPe=s(XC);sTe=n(YPe,"STRONG",{});var n3t=s(sTe);Lwr=r(n3t,"convbert"),n3t.forEach(t),xwr=r(YPe," \u2014 "),OU=n(YPe,"A",{href:!0});var s3t=s(OU);$wr=r(s3t,"TFConvBertForQuestionAnswering"),s3t.forEach(t),kwr=r(YPe," (ConvBERT model)"),YPe.forEach(t),Swr=i(ge),zC=n(ge,"LI",{});var KPe=s(zC);lTe=n(KPe,"STRONG",{});var l3t=s(lTe);Rwr=r(l3t,"deberta"),l3t.forEach(t),Pwr=r(KPe," \u2014 "),VU=n(KPe,"A",{href:!0});var i3t=s(VU);Bwr=r(i3t,"TFDebertaForQuestionAnswering"),i3t.forEach(t),Iwr=r(KPe," (DeBERTa model)"),KPe.forEach(t),qwr=i(ge),WC=n(ge,"LI",{});var ZPe=s(WC);iTe=n(ZPe,"STRONG",{});var d3t=s(iTe);Nwr=r(d3t,"deberta-v2"),d3t.forEach(t),jwr=r(ZPe," \u2014 "),XU=n(ZPe,"A",{href:!0});var c3t=s(XU);Dwr=r(c3t,"TFDebertaV2ForQuestionAnswering"),c3t.forEach(t),Gwr=r(ZPe," (DeBERTa-v2 model)"),ZPe.forEach(t),Owr=i(ge),QC=n(ge,"LI",{});var eBe=s(QC);dTe=n(eBe,"STRONG",{});var f3t=s(dTe);Vwr=r(f3t,"distilbert"),f3t.forEach(t),Xwr=r(eBe," \u2014 "),zU=n(eBe,"A",{href:!0});var m3t=s(zU);zwr=r(m3t,"TFDistilBertForQuestionAnswering"),m3t.forEach(t),Wwr=r(eBe," (DistilBERT model)"),eBe.forEach(t),Qwr=i(ge),HC=n(ge,"LI",{});var oBe=s(HC);cTe=n(oBe,"STRONG",{});var g3t=s(cTe);Hwr=r(g3t,"electra"),g3t.forEach(t),Uwr=r(oBe," \u2014 "),WU=n(oBe,"A",{href:!0});var h3t=s(WU);Jwr=r(h3t,"TFElectraForQuestionAnswering"),h3t.forEach(t),Ywr=r(oBe," (ELECTRA model)"),oBe.forEach(t),Kwr=i(ge),UC=n(ge,"LI",{});var rBe=s(UC);fTe=n(rBe,"STRONG",{});var p3t=s(fTe);Zwr=r(p3t,"flaubert"),p3t.forEach(t),e0r=r(rBe," \u2014 "),QU=n(rBe,"A",{href:!0});var _3t=s(QU);o0r=r(_3t,"TFFlaubertForQuestionAnsweringSimple"),_3t.forEach(t),r0r=r(rBe," (FlauBERT model)"),rBe.forEach(t),t0r=i(ge),JC=n(ge,"LI",{});var tBe=s(JC);mTe=n(tBe,"STRONG",{});var u3t=s(mTe);a0r=r(u3t,"funnel"),u3t.forEach(t),n0r=r(tBe," \u2014 "),HU=n(tBe,"A",{href:!0});var b3t=s(HU);s0r=r(b3t,"TFFunnelForQuestionAnswering"),b3t.forEach(t),l0r=r(tBe," (Funnel Transformer model)"),tBe.forEach(t),i0r=i(ge),YC=n(ge,"LI",{});var aBe=s(YC);gTe=n(aBe,"STRONG",{});var v3t=s(gTe);d0r=r(v3t,"gptj"),v3t.forEach(t),c0r=r(aBe," \u2014 "),UU=n(aBe,"A",{href:!0});var F3t=s(UU);f0r=r(F3t,"TFGPTJForQuestionAnswering"),F3t.forEach(t),m0r=r(aBe," (GPT-J model)"),aBe.forEach(t),g0r=i(ge),KC=n(ge,"LI",{});var nBe=s(KC);hTe=n(nBe,"STRONG",{});var T3t=s(hTe);h0r=r(T3t,"longformer"),T3t.forEach(t),p0r=r(nBe," \u2014 "),JU=n(nBe,"A",{href:!0});var M3t=s(JU);_0r=r(M3t,"TFLongformerForQuestionAnswering"),M3t.forEach(t),u0r=r(nBe," (Longformer model)"),nBe.forEach(t),b0r=i(ge),ZC=n(ge,"LI",{});var sBe=s(ZC);pTe=n(sBe,"STRONG",{});var E3t=s(pTe);v0r=r(E3t,"mobilebert"),E3t.forEach(t),F0r=r(sBe," \u2014 "),YU=n(sBe,"A",{href:!0});var C3t=s(YU);T0r=r(C3t,"TFMobileBertForQuestionAnswering"),C3t.forEach(t),M0r=r(sBe," (MobileBERT model)"),sBe.forEach(t),E0r=i(ge),e5=n(ge,"LI",{});var lBe=s(e5);_Te=n(lBe,"STRONG",{});var w3t=s(_Te);C0r=r(w3t,"mpnet"),w3t.forEach(t),w0r=r(lBe," \u2014 "),KU=n(lBe,"A",{href:!0});var A3t=s(KU);A0r=r(A3t,"TFMPNetForQuestionAnswering"),A3t.forEach(t),y0r=r(lBe," (MPNet model)"),lBe.forEach(t),L0r=i(ge),o5=n(ge,"LI",{});var iBe=s(o5);uTe=n(iBe,"STRONG",{});var y3t=s(uTe);x0r=r(y3t,"rembert"),y3t.forEach(t),$0r=r(iBe," \u2014 "),ZU=n(iBe,"A",{href:!0});var L3t=s(ZU);k0r=r(L3t,"TFRemBertForQuestionAnswering"),L3t.forEach(t),S0r=r(iBe," (RemBERT model)"),iBe.forEach(t),R0r=i(ge),r5=n(ge,"LI",{});var dBe=s(r5);bTe=n(dBe,"STRONG",{});var x3t=s(bTe);P0r=r(x3t,"roberta"),x3t.forEach(t),B0r=r(dBe," \u2014 "),eJ=n(dBe,"A",{href:!0});var $3t=s(eJ);I0r=r($3t,"TFRobertaForQuestionAnswering"),$3t.forEach(t),q0r=r(dBe," (RoBERTa model)"),dBe.forEach(t),N0r=i(ge),t5=n(ge,"LI",{});var cBe=s(t5);vTe=n(cBe,"STRONG",{});var k3t=s(vTe);j0r=r(k3t,"roformer"),k3t.forEach(t),D0r=r(cBe," \u2014 "),oJ=n(cBe,"A",{href:!0});var S3t=s(oJ);G0r=r(S3t,"TFRoFormerForQuestionAnswering"),S3t.forEach(t),O0r=r(cBe," (RoFormer model)"),cBe.forEach(t),V0r=i(ge),a5=n(ge,"LI",{});var fBe=s(a5);FTe=n(fBe,"STRONG",{});var R3t=s(FTe);X0r=r(R3t,"xlm"),R3t.forEach(t),z0r=r(fBe," \u2014 "),rJ=n(fBe,"A",{href:!0});var P3t=s(rJ);W0r=r(P3t,"TFXLMForQuestionAnsweringSimple"),P3t.forEach(t),Q0r=r(fBe," (XLM model)"),fBe.forEach(t),H0r=i(ge),n5=n(ge,"LI",{});var mBe=s(n5);TTe=n(mBe,"STRONG",{});var B3t=s(TTe);U0r=r(B3t,"xlm-roberta"),B3t.forEach(t),J0r=r(mBe," \u2014 "),tJ=n(mBe,"A",{href:!0});var I3t=s(tJ);Y0r=r(I3t,"TFXLMRobertaForQuestionAnswering"),I3t.forEach(t),K0r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),Z0r=i(ge),s5=n(ge,"LI",{});var gBe=s(s5);MTe=n(gBe,"STRONG",{});var q3t=s(MTe);eAr=r(q3t,"xlnet"),q3t.forEach(t),oAr=r(gBe," \u2014 "),aJ=n(gBe,"A",{href:!0});var N3t=s(aJ);rAr=r(N3t,"TFXLNetForQuestionAnsweringSimple"),N3t.forEach(t),tAr=r(gBe," (XLNet model)"),gBe.forEach(t),ge.forEach(t),aAr=i(Bl),T(l5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),XNe=i(f),Mc=n(f,"H2",{class:!0});var YDe=s(Mc);i5=n(YDe,"A",{id:!0,class:!0,href:!0});var j3t=s(i5);ETe=n(j3t,"SPAN",{});var D3t=s(ETe);T(s9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),nAr=i(YDe),CTe=n(YDe,"SPAN",{});var G3t=s(CTe);sAr=r(G3t,"TFAutoModelForVision2Seq"),G3t.forEach(t),YDe.forEach(t),zNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(l9.$$.fragment,Il),lAr=i(Il),Ec=n(Il,"P",{});var mee=s(Ec);iAr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nJ=n(mee,"A",{href:!0});var O3t=s(nJ);dAr=r(O3t,"from_pretrained()"),O3t.forEach(t),cAr=r(mee," class method or the "),sJ=n(mee,"A",{href:!0});var V3t=s(sJ);fAr=r(V3t,"from_config()"),V3t.forEach(t),mAr=r(mee,` class
method.`),mee.forEach(t),gAr=i(Il),i9=n(Il,"P",{});var KDe=s(i9);hAr=r(KDe,"This class cannot be instantiated directly using "),wTe=n(KDe,"CODE",{});var X3t=s(wTe);pAr=r(X3t,"__init__()"),X3t.forEach(t),_Ar=r(KDe," (throws an error)."),KDe.forEach(t),uAr=i(Il),jt=n(Il,"DIV",{class:!0});var DA=s(jt);T(d9.$$.fragment,DA),bAr=i(DA),ATe=n(DA,"P",{});var z3t=s(ATe);vAr=r(z3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z3t.forEach(t),FAr=i(DA),Cc=n(DA,"P",{});var gee=s(Cc);TAr=r(gee,`Note:
Loading a model from its configuration file does `),yTe=n(gee,"STRONG",{});var W3t=s(yTe);MAr=r(W3t,"not"),W3t.forEach(t),EAr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(gee,"A",{href:!0});var Q3t=s(lJ);CAr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),wAr=r(gee," to load the model weights."),gee.forEach(t),AAr=i(DA),T(d5.$$.fragment,DA),DA.forEach(t),yAr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(c9.$$.fragment,ql),LAr=i(ql),LTe=n(ql,"P",{});var H3t=s(LTe);xAr=r(H3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),H3t.forEach(t),$Ar=i(ql),mn=n(ql,"P",{});var GA=s(mn);kAr=r(GA,"The model class to instantiate is selected based on the "),xTe=n(GA,"CODE",{});var U3t=s(xTe);SAr=r(U3t,"model_type"),U3t.forEach(t),RAr=r(GA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(GA,"CODE",{});var J3t=s($Te);PAr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),BAr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(GA,"CODE",{});var Y3t=s(kTe);IAr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),qAr=r(GA,":"),GA.forEach(t),NAr=i(ql),STe=n(ql,"UL",{});var K3t=s(STe);c5=n(K3t,"LI",{});var hBe=s(c5);RTe=n(hBe,"STRONG",{});var Z3t=s(RTe);jAr=r(Z3t,"vision-encoder-decoder"),Z3t.forEach(t),DAr=r(hBe," \u2014 "),iJ=n(hBe,"A",{href:!0});var ewt=s(iJ);GAr=r(ewt,"TFVisionEncoderDecoderModel"),ewt.forEach(t),OAr=r(hBe," (Vision Encoder decoder model)"),hBe.forEach(t),K3t.forEach(t),VAr=i(ql),T(f5.$$.fragment,ql),ql.forEach(t),Il.forEach(t),WNe=i(f),wc=n(f,"H2",{class:!0});var ZDe=s(wc);m5=n(ZDe,"A",{id:!0,class:!0,href:!0});var owt=s(m5);PTe=n(owt,"SPAN",{});var rwt=s(PTe);T(f9.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),XAr=i(ZDe),BTe=n(ZDe,"SPAN",{});var twt=s(BTe);zAr=r(twt,"TFAutoModelForSpeechSeq2Seq"),twt.forEach(t),ZDe.forEach(t),QNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(m9.$$.fragment,Nl),WAr=i(Nl),Ac=n(Nl,"P",{});var hee=s(Ac);QAr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dJ=n(hee,"A",{href:!0});var awt=s(dJ);HAr=r(awt,"from_pretrained()"),awt.forEach(t),UAr=r(hee," class method or the "),cJ=n(hee,"A",{href:!0});var nwt=s(cJ);JAr=r(nwt,"from_config()"),nwt.forEach(t),YAr=r(hee,` class
method.`),hee.forEach(t),KAr=i(Nl),g9=n(Nl,"P",{});var eGe=s(g9);ZAr=r(eGe,"This class cannot be instantiated directly using "),ITe=n(eGe,"CODE",{});var swt=s(ITe);e6r=r(swt,"__init__()"),swt.forEach(t),o6r=r(eGe," (throws an error)."),eGe.forEach(t),r6r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var OA=s(Dt);T(h9.$$.fragment,OA),t6r=i(OA),qTe=n(OA,"P",{});var lwt=s(qTe);a6r=r(lwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lwt.forEach(t),n6r=i(OA),yc=n(OA,"P",{});var pee=s(yc);s6r=r(pee,`Note:
Loading a model from its configuration file does `),NTe=n(pee,"STRONG",{});var iwt=s(NTe);l6r=r(iwt,"not"),iwt.forEach(t),i6r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(pee,"A",{href:!0});var dwt=s(fJ);d6r=r(dwt,"from_pretrained()"),dwt.forEach(t),c6r=r(pee," to load the model weights."),pee.forEach(t),f6r=i(OA),T(g5.$$.fragment,OA),OA.forEach(t),m6r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(p9.$$.fragment,jl),g6r=i(jl),jTe=n(jl,"P",{});var cwt=s(jTe);h6r=r(cwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cwt.forEach(t),p6r=i(jl),gn=n(jl,"P",{});var VA=s(gn);_6r=r(VA,"The model class to instantiate is selected based on the "),DTe=n(VA,"CODE",{});var fwt=s(DTe);u6r=r(fwt,"model_type"),fwt.forEach(t),b6r=r(VA,` property of the config object (either
passed as an argument or loaded from `),GTe=n(VA,"CODE",{});var mwt=s(GTe);v6r=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),F6r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(VA,"CODE",{});var gwt=s(OTe);T6r=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),M6r=r(VA,":"),VA.forEach(t),E6r=i(jl),VTe=n(jl,"UL",{});var hwt=s(VTe);h5=n(hwt,"LI",{});var pBe=s(h5);XTe=n(pBe,"STRONG",{});var pwt=s(XTe);C6r=r(pwt,"speech_to_text"),pwt.forEach(t),w6r=r(pBe," \u2014 "),mJ=n(pBe,"A",{href:!0});var _wt=s(mJ);A6r=r(_wt,"TFSpeech2TextForConditionalGeneration"),_wt.forEach(t),y6r=r(pBe," (Speech2Text model)"),pBe.forEach(t),hwt.forEach(t),L6r=i(jl),T(p5.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),HNe=i(f),Lc=n(f,"H2",{class:!0});var oGe=s(Lc);_5=n(oGe,"A",{id:!0,class:!0,href:!0});var uwt=s(_5);zTe=n(uwt,"SPAN",{});var bwt=s(zTe);T(_9.$$.fragment,bwt),bwt.forEach(t),uwt.forEach(t),x6r=i(oGe),WTe=n(oGe,"SPAN",{});var vwt=s(WTe);$6r=r(vwt,"FlaxAutoModel"),vwt.forEach(t),oGe.forEach(t),UNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(u9.$$.fragment,Dl),k6r=i(Dl),xc=n(Dl,"P",{});var _ee=s(xc);S6r=r(_ee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gJ=n(_ee,"A",{href:!0});var Fwt=s(gJ);R6r=r(Fwt,"from_pretrained()"),Fwt.forEach(t),P6r=r(_ee," class method or the "),hJ=n(_ee,"A",{href:!0});var Twt=s(hJ);B6r=r(Twt,"from_config()"),Twt.forEach(t),I6r=r(_ee,` class
method.`),_ee.forEach(t),q6r=i(Dl),b9=n(Dl,"P",{});var rGe=s(b9);N6r=r(rGe,"This class cannot be instantiated directly using "),QTe=n(rGe,"CODE",{});var Mwt=s(QTe);j6r=r(Mwt,"__init__()"),Mwt.forEach(t),D6r=r(rGe," (throws an error)."),rGe.forEach(t),G6r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var XA=s(Gt);T(v9.$$.fragment,XA),O6r=i(XA),HTe=n(XA,"P",{});var Ewt=s(HTe);V6r=r(Ewt,"Instantiates one of the base model classes of the library from a configuration."),Ewt.forEach(t),X6r=i(XA),$c=n(XA,"P",{});var uee=s($c);z6r=r(uee,`Note:
Loading a model from its configuration file does `),UTe=n(uee,"STRONG",{});var Cwt=s(UTe);W6r=r(Cwt,"not"),Cwt.forEach(t),Q6r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(uee,"A",{href:!0});var wwt=s(pJ);H6r=r(wwt,"from_pretrained()"),wwt.forEach(t),U6r=r(uee," to load the model weights."),uee.forEach(t),J6r=i(XA),T(u5.$$.fragment,XA),XA.forEach(t),Y6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(F9.$$.fragment,Gl),K6r=i(Gl),JTe=n(Gl,"P",{});var Awt=s(JTe);Z6r=r(Awt,"Instantiate one of the base model classes of the library from a pretrained model."),Awt.forEach(t),eyr=i(Gl),hn=n(Gl,"P",{});var zA=s(hn);oyr=r(zA,"The model class to instantiate is selected based on the "),YTe=n(zA,"CODE",{});var ywt=s(YTe);ryr=r(ywt,"model_type"),ywt.forEach(t),tyr=r(zA,` property of the config object (either
passed as an argument or loaded from `),KTe=n(zA,"CODE",{});var Lwt=s(KTe);ayr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),nyr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(zA,"CODE",{});var xwt=s(ZTe);syr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),lyr=r(zA,":"),zA.forEach(t),iyr=i(Gl),oe=n(Gl,"UL",{});var ne=s(oe);b5=n(ne,"LI",{});var _Be=s(b5);eMe=n(_Be,"STRONG",{});var $wt=s(eMe);dyr=r($wt,"albert"),$wt.forEach(t),cyr=r(_Be," \u2014 "),_J=n(_Be,"A",{href:!0});var kwt=s(_J);fyr=r(kwt,"FlaxAlbertModel"),kwt.forEach(t),myr=r(_Be," (ALBERT model)"),_Be.forEach(t),gyr=i(ne),v5=n(ne,"LI",{});var uBe=s(v5);oMe=n(uBe,"STRONG",{});var Swt=s(oMe);hyr=r(Swt,"bart"),Swt.forEach(t),pyr=r(uBe," \u2014 "),uJ=n(uBe,"A",{href:!0});var Rwt=s(uJ);_yr=r(Rwt,"FlaxBartModel"),Rwt.forEach(t),uyr=r(uBe," (BART model)"),uBe.forEach(t),byr=i(ne),F5=n(ne,"LI",{});var bBe=s(F5);rMe=n(bBe,"STRONG",{});var Pwt=s(rMe);vyr=r(Pwt,"beit"),Pwt.forEach(t),Fyr=r(bBe," \u2014 "),bJ=n(bBe,"A",{href:!0});var Bwt=s(bJ);Tyr=r(Bwt,"FlaxBeitModel"),Bwt.forEach(t),Myr=r(bBe," (BEiT model)"),bBe.forEach(t),Eyr=i(ne),T5=n(ne,"LI",{});var vBe=s(T5);tMe=n(vBe,"STRONG",{});var Iwt=s(tMe);Cyr=r(Iwt,"bert"),Iwt.forEach(t),wyr=r(vBe," \u2014 "),vJ=n(vBe,"A",{href:!0});var qwt=s(vJ);Ayr=r(qwt,"FlaxBertModel"),qwt.forEach(t),yyr=r(vBe," (BERT model)"),vBe.forEach(t),Lyr=i(ne),M5=n(ne,"LI",{});var FBe=s(M5);aMe=n(FBe,"STRONG",{});var Nwt=s(aMe);xyr=r(Nwt,"big_bird"),Nwt.forEach(t),$yr=r(FBe," \u2014 "),FJ=n(FBe,"A",{href:!0});var jwt=s(FJ);kyr=r(jwt,"FlaxBigBirdModel"),jwt.forEach(t),Syr=r(FBe," (BigBird model)"),FBe.forEach(t),Ryr=i(ne),E5=n(ne,"LI",{});var TBe=s(E5);nMe=n(TBe,"STRONG",{});var Dwt=s(nMe);Pyr=r(Dwt,"blenderbot"),Dwt.forEach(t),Byr=r(TBe," \u2014 "),TJ=n(TBe,"A",{href:!0});var Gwt=s(TJ);Iyr=r(Gwt,"FlaxBlenderbotModel"),Gwt.forEach(t),qyr=r(TBe," (Blenderbot model)"),TBe.forEach(t),Nyr=i(ne),C5=n(ne,"LI",{});var MBe=s(C5);sMe=n(MBe,"STRONG",{});var Owt=s(sMe);jyr=r(Owt,"blenderbot-small"),Owt.forEach(t),Dyr=r(MBe," \u2014 "),MJ=n(MBe,"A",{href:!0});var Vwt=s(MJ);Gyr=r(Vwt,"FlaxBlenderbotSmallModel"),Vwt.forEach(t),Oyr=r(MBe," (BlenderbotSmall model)"),MBe.forEach(t),Vyr=i(ne),w5=n(ne,"LI",{});var EBe=s(w5);lMe=n(EBe,"STRONG",{});var Xwt=s(lMe);Xyr=r(Xwt,"clip"),Xwt.forEach(t),zyr=r(EBe," \u2014 "),EJ=n(EBe,"A",{href:!0});var zwt=s(EJ);Wyr=r(zwt,"FlaxCLIPModel"),zwt.forEach(t),Qyr=r(EBe," (CLIP model)"),EBe.forEach(t),Hyr=i(ne),A5=n(ne,"LI",{});var CBe=s(A5);iMe=n(CBe,"STRONG",{});var Wwt=s(iMe);Uyr=r(Wwt,"distilbert"),Wwt.forEach(t),Jyr=r(CBe," \u2014 "),CJ=n(CBe,"A",{href:!0});var Qwt=s(CJ);Yyr=r(Qwt,"FlaxDistilBertModel"),Qwt.forEach(t),Kyr=r(CBe," (DistilBERT model)"),CBe.forEach(t),Zyr=i(ne),y5=n(ne,"LI",{});var wBe=s(y5);dMe=n(wBe,"STRONG",{});var Hwt=s(dMe);eLr=r(Hwt,"electra"),Hwt.forEach(t),oLr=r(wBe," \u2014 "),wJ=n(wBe,"A",{href:!0});var Uwt=s(wJ);rLr=r(Uwt,"FlaxElectraModel"),Uwt.forEach(t),tLr=r(wBe," (ELECTRA model)"),wBe.forEach(t),aLr=i(ne),L5=n(ne,"LI",{});var ABe=s(L5);cMe=n(ABe,"STRONG",{});var Jwt=s(cMe);nLr=r(Jwt,"gpt2"),Jwt.forEach(t),sLr=r(ABe," \u2014 "),AJ=n(ABe,"A",{href:!0});var Ywt=s(AJ);lLr=r(Ywt,"FlaxGPT2Model"),Ywt.forEach(t),iLr=r(ABe," (OpenAI GPT-2 model)"),ABe.forEach(t),dLr=i(ne),x5=n(ne,"LI",{});var yBe=s(x5);fMe=n(yBe,"STRONG",{});var Kwt=s(fMe);cLr=r(Kwt,"gpt_neo"),Kwt.forEach(t),fLr=r(yBe," \u2014 "),yJ=n(yBe,"A",{href:!0});var Zwt=s(yJ);mLr=r(Zwt,"FlaxGPTNeoModel"),Zwt.forEach(t),gLr=r(yBe," (GPT Neo model)"),yBe.forEach(t),hLr=i(ne),$5=n(ne,"LI",{});var LBe=s($5);mMe=n(LBe,"STRONG",{});var e0t=s(mMe);pLr=r(e0t,"gptj"),e0t.forEach(t),_Lr=r(LBe," \u2014 "),LJ=n(LBe,"A",{href:!0});var o0t=s(LJ);uLr=r(o0t,"FlaxGPTJModel"),o0t.forEach(t),bLr=r(LBe," (GPT-J model)"),LBe.forEach(t),vLr=i(ne),k5=n(ne,"LI",{});var xBe=s(k5);gMe=n(xBe,"STRONG",{});var r0t=s(gMe);FLr=r(r0t,"marian"),r0t.forEach(t),TLr=r(xBe," \u2014 "),xJ=n(xBe,"A",{href:!0});var t0t=s(xJ);MLr=r(t0t,"FlaxMarianModel"),t0t.forEach(t),ELr=r(xBe," (Marian model)"),xBe.forEach(t),CLr=i(ne),S5=n(ne,"LI",{});var $Be=s(S5);hMe=n($Be,"STRONG",{});var a0t=s(hMe);wLr=r(a0t,"mbart"),a0t.forEach(t),ALr=r($Be," \u2014 "),$J=n($Be,"A",{href:!0});var n0t=s($J);yLr=r(n0t,"FlaxMBartModel"),n0t.forEach(t),LLr=r($Be," (mBART model)"),$Be.forEach(t),xLr=i(ne),R5=n(ne,"LI",{});var kBe=s(R5);pMe=n(kBe,"STRONG",{});var s0t=s(pMe);$Lr=r(s0t,"mt5"),s0t.forEach(t),kLr=r(kBe," \u2014 "),kJ=n(kBe,"A",{href:!0});var l0t=s(kJ);SLr=r(l0t,"FlaxMT5Model"),l0t.forEach(t),RLr=r(kBe," (mT5 model)"),kBe.forEach(t),PLr=i(ne),P5=n(ne,"LI",{});var SBe=s(P5);_Me=n(SBe,"STRONG",{});var i0t=s(_Me);BLr=r(i0t,"opt"),i0t.forEach(t),ILr=r(SBe," \u2014 "),SJ=n(SBe,"A",{href:!0});var d0t=s(SJ);qLr=r(d0t,"FlaxOPTModel"),d0t.forEach(t),NLr=r(SBe," (OPT model)"),SBe.forEach(t),jLr=i(ne),B5=n(ne,"LI",{});var RBe=s(B5);uMe=n(RBe,"STRONG",{});var c0t=s(uMe);DLr=r(c0t,"pegasus"),c0t.forEach(t),GLr=r(RBe," \u2014 "),RJ=n(RBe,"A",{href:!0});var f0t=s(RJ);OLr=r(f0t,"FlaxPegasusModel"),f0t.forEach(t),VLr=r(RBe," (Pegasus model)"),RBe.forEach(t),XLr=i(ne),I5=n(ne,"LI",{});var PBe=s(I5);bMe=n(PBe,"STRONG",{});var m0t=s(bMe);zLr=r(m0t,"roberta"),m0t.forEach(t),WLr=r(PBe," \u2014 "),PJ=n(PBe,"A",{href:!0});var g0t=s(PJ);QLr=r(g0t,"FlaxRobertaModel"),g0t.forEach(t),HLr=r(PBe," (RoBERTa model)"),PBe.forEach(t),ULr=i(ne),q5=n(ne,"LI",{});var BBe=s(q5);vMe=n(BBe,"STRONG",{});var h0t=s(vMe);JLr=r(h0t,"roformer"),h0t.forEach(t),YLr=r(BBe," \u2014 "),BJ=n(BBe,"A",{href:!0});var p0t=s(BJ);KLr=r(p0t,"FlaxRoFormerModel"),p0t.forEach(t),ZLr=r(BBe," (RoFormer model)"),BBe.forEach(t),e8r=i(ne),N5=n(ne,"LI",{});var IBe=s(N5);FMe=n(IBe,"STRONG",{});var _0t=s(FMe);o8r=r(_0t,"t5"),_0t.forEach(t),r8r=r(IBe," \u2014 "),IJ=n(IBe,"A",{href:!0});var u0t=s(IJ);t8r=r(u0t,"FlaxT5Model"),u0t.forEach(t),a8r=r(IBe," (T5 model)"),IBe.forEach(t),n8r=i(ne),j5=n(ne,"LI",{});var qBe=s(j5);TMe=n(qBe,"STRONG",{});var b0t=s(TMe);s8r=r(b0t,"vision-text-dual-encoder"),b0t.forEach(t),l8r=r(qBe," \u2014 "),qJ=n(qBe,"A",{href:!0});var v0t=s(qJ);i8r=r(v0t,"FlaxVisionTextDualEncoderModel"),v0t.forEach(t),d8r=r(qBe," (VisionTextDualEncoder model)"),qBe.forEach(t),c8r=i(ne),D5=n(ne,"LI",{});var NBe=s(D5);MMe=n(NBe,"STRONG",{});var F0t=s(MMe);f8r=r(F0t,"vit"),F0t.forEach(t),m8r=r(NBe," \u2014 "),NJ=n(NBe,"A",{href:!0});var T0t=s(NJ);g8r=r(T0t,"FlaxViTModel"),T0t.forEach(t),h8r=r(NBe," (ViT model)"),NBe.forEach(t),p8r=i(ne),G5=n(ne,"LI",{});var jBe=s(G5);EMe=n(jBe,"STRONG",{});var M0t=s(EMe);_8r=r(M0t,"wav2vec2"),M0t.forEach(t),u8r=r(jBe," \u2014 "),jJ=n(jBe,"A",{href:!0});var E0t=s(jJ);b8r=r(E0t,"FlaxWav2Vec2Model"),E0t.forEach(t),v8r=r(jBe," (Wav2Vec2 model)"),jBe.forEach(t),F8r=i(ne),O5=n(ne,"LI",{});var DBe=s(O5);CMe=n(DBe,"STRONG",{});var C0t=s(CMe);T8r=r(C0t,"xglm"),C0t.forEach(t),M8r=r(DBe," \u2014 "),DJ=n(DBe,"A",{href:!0});var w0t=s(DJ);E8r=r(w0t,"FlaxXGLMModel"),w0t.forEach(t),C8r=r(DBe," (XGLM model)"),DBe.forEach(t),w8r=i(ne),V5=n(ne,"LI",{});var GBe=s(V5);wMe=n(GBe,"STRONG",{});var A0t=s(wMe);A8r=r(A0t,"xlm-roberta"),A0t.forEach(t),y8r=r(GBe," \u2014 "),GJ=n(GBe,"A",{href:!0});var y0t=s(GJ);L8r=r(y0t,"FlaxXLMRobertaModel"),y0t.forEach(t),x8r=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),ne.forEach(t),$8r=i(Gl),T(X5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),JNe=i(f),kc=n(f,"H2",{class:!0});var tGe=s(kc);z5=n(tGe,"A",{id:!0,class:!0,href:!0});var L0t=s(z5);AMe=n(L0t,"SPAN",{});var x0t=s(AMe);T(T9.$$.fragment,x0t),x0t.forEach(t),L0t.forEach(t),k8r=i(tGe),yMe=n(tGe,"SPAN",{});var $0t=s(yMe);S8r=r($0t,"FlaxAutoModelForCausalLM"),$0t.forEach(t),tGe.forEach(t),YNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(M9.$$.fragment,Ol),R8r=i(Ol),Sc=n(Ol,"P",{});var bee=s(Sc);P8r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OJ=n(bee,"A",{href:!0});var k0t=s(OJ);B8r=r(k0t,"from_pretrained()"),k0t.forEach(t),I8r=r(bee," class method or the "),VJ=n(bee,"A",{href:!0});var S0t=s(VJ);q8r=r(S0t,"from_config()"),S0t.forEach(t),N8r=r(bee,` class
method.`),bee.forEach(t),j8r=i(Ol),E9=n(Ol,"P",{});var aGe=s(E9);D8r=r(aGe,"This class cannot be instantiated directly using "),LMe=n(aGe,"CODE",{});var R0t=s(LMe);G8r=r(R0t,"__init__()"),R0t.forEach(t),O8r=r(aGe," (throws an error)."),aGe.forEach(t),V8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var WA=s(Ot);T(C9.$$.fragment,WA),X8r=i(WA),xMe=n(WA,"P",{});var P0t=s(xMe);z8r=r(P0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P0t.forEach(t),W8r=i(WA),Rc=n(WA,"P",{});var vee=s(Rc);Q8r=r(vee,`Note:
Loading a model from its configuration file does `),$Me=n(vee,"STRONG",{});var B0t=s($Me);H8r=r(B0t,"not"),B0t.forEach(t),U8r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(vee,"A",{href:!0});var I0t=s(XJ);J8r=r(I0t,"from_pretrained()"),I0t.forEach(t),Y8r=r(vee," to load the model weights."),vee.forEach(t),K8r=i(WA),T(W5.$$.fragment,WA),WA.forEach(t),Z8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(w9.$$.fragment,Vl),e9r=i(Vl),kMe=n(Vl,"P",{});var q0t=s(kMe);o9r=r(q0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q0t.forEach(t),r9r=i(Vl),pn=n(Vl,"P",{});var QA=s(pn);t9r=r(QA,"The model class to instantiate is selected based on the "),SMe=n(QA,"CODE",{});var N0t=s(SMe);a9r=r(N0t,"model_type"),N0t.forEach(t),n9r=r(QA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(QA,"CODE",{});var j0t=s(RMe);s9r=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),l9r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(QA,"CODE",{});var D0t=s(PMe);i9r=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),d9r=r(QA,":"),QA.forEach(t),c9r=i(Vl),Le=n(Vl,"UL",{});var Ie=s(Le);Q5=n(Ie,"LI",{});var OBe=s(Q5);BMe=n(OBe,"STRONG",{});var G0t=s(BMe);f9r=r(G0t,"bart"),G0t.forEach(t),m9r=r(OBe," \u2014 "),zJ=n(OBe,"A",{href:!0});var O0t=s(zJ);g9r=r(O0t,"FlaxBartForCausalLM"),O0t.forEach(t),h9r=r(OBe," (BART model)"),OBe.forEach(t),p9r=i(Ie),H5=n(Ie,"LI",{});var VBe=s(H5);IMe=n(VBe,"STRONG",{});var V0t=s(IMe);_9r=r(V0t,"bert"),V0t.forEach(t),u9r=r(VBe," \u2014 "),WJ=n(VBe,"A",{href:!0});var X0t=s(WJ);b9r=r(X0t,"FlaxBertForCausalLM"),X0t.forEach(t),v9r=r(VBe," (BERT model)"),VBe.forEach(t),F9r=i(Ie),U5=n(Ie,"LI",{});var XBe=s(U5);qMe=n(XBe,"STRONG",{});var z0t=s(qMe);T9r=r(z0t,"big_bird"),z0t.forEach(t),M9r=r(XBe," \u2014 "),QJ=n(XBe,"A",{href:!0});var W0t=s(QJ);E9r=r(W0t,"FlaxBigBirdForCausalLM"),W0t.forEach(t),C9r=r(XBe," (BigBird model)"),XBe.forEach(t),w9r=i(Ie),J5=n(Ie,"LI",{});var zBe=s(J5);NMe=n(zBe,"STRONG",{});var Q0t=s(NMe);A9r=r(Q0t,"electra"),Q0t.forEach(t),y9r=r(zBe," \u2014 "),HJ=n(zBe,"A",{href:!0});var H0t=s(HJ);L9r=r(H0t,"FlaxElectraForCausalLM"),H0t.forEach(t),x9r=r(zBe," (ELECTRA model)"),zBe.forEach(t),$9r=i(Ie),Y5=n(Ie,"LI",{});var WBe=s(Y5);jMe=n(WBe,"STRONG",{});var U0t=s(jMe);k9r=r(U0t,"gpt2"),U0t.forEach(t),S9r=r(WBe," \u2014 "),UJ=n(WBe,"A",{href:!0});var J0t=s(UJ);R9r=r(J0t,"FlaxGPT2LMHeadModel"),J0t.forEach(t),P9r=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),B9r=i(Ie),K5=n(Ie,"LI",{});var QBe=s(K5);DMe=n(QBe,"STRONG",{});var Y0t=s(DMe);I9r=r(Y0t,"gpt_neo"),Y0t.forEach(t),q9r=r(QBe," \u2014 "),JJ=n(QBe,"A",{href:!0});var K0t=s(JJ);N9r=r(K0t,"FlaxGPTNeoForCausalLM"),K0t.forEach(t),j9r=r(QBe," (GPT Neo model)"),QBe.forEach(t),D9r=i(Ie),Z5=n(Ie,"LI",{});var HBe=s(Z5);GMe=n(HBe,"STRONG",{});var Z0t=s(GMe);G9r=r(Z0t,"gptj"),Z0t.forEach(t),O9r=r(HBe," \u2014 "),YJ=n(HBe,"A",{href:!0});var eAt=s(YJ);V9r=r(eAt,"FlaxGPTJForCausalLM"),eAt.forEach(t),X9r=r(HBe," (GPT-J model)"),HBe.forEach(t),z9r=i(Ie),e3=n(Ie,"LI",{});var UBe=s(e3);OMe=n(UBe,"STRONG",{});var oAt=s(OMe);W9r=r(oAt,"opt"),oAt.forEach(t),Q9r=r(UBe," \u2014 "),KJ=n(UBe,"A",{href:!0});var rAt=s(KJ);H9r=r(rAt,"FlaxOPTForCausalLM"),rAt.forEach(t),U9r=r(UBe," (OPT model)"),UBe.forEach(t),J9r=i(Ie),o3=n(Ie,"LI",{});var JBe=s(o3);VMe=n(JBe,"STRONG",{});var tAt=s(VMe);Y9r=r(tAt,"roberta"),tAt.forEach(t),K9r=r(JBe," \u2014 "),ZJ=n(JBe,"A",{href:!0});var aAt=s(ZJ);Z9r=r(aAt,"FlaxRobertaForCausalLM"),aAt.forEach(t),exr=r(JBe," (RoBERTa model)"),JBe.forEach(t),oxr=i(Ie),r3=n(Ie,"LI",{});var YBe=s(r3);XMe=n(YBe,"STRONG",{});var nAt=s(XMe);rxr=r(nAt,"xglm"),nAt.forEach(t),txr=r(YBe," \u2014 "),eY=n(YBe,"A",{href:!0});var sAt=s(eY);axr=r(sAt,"FlaxXGLMForCausalLM"),sAt.forEach(t),nxr=r(YBe," (XGLM model)"),YBe.forEach(t),Ie.forEach(t),sxr=i(Vl),T(t3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),KNe=i(f),Pc=n(f,"H2",{class:!0});var nGe=s(Pc);a3=n(nGe,"A",{id:!0,class:!0,href:!0});var lAt=s(a3);zMe=n(lAt,"SPAN",{});var iAt=s(zMe);T(A9.$$.fragment,iAt),iAt.forEach(t),lAt.forEach(t),lxr=i(nGe),WMe=n(nGe,"SPAN",{});var dAt=s(WMe);ixr=r(dAt,"FlaxAutoModelForPreTraining"),dAt.forEach(t),nGe.forEach(t),ZNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(y9.$$.fragment,Xl),dxr=i(Xl),Bc=n(Xl,"P",{});var Fee=s(Bc);cxr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oY=n(Fee,"A",{href:!0});var cAt=s(oY);fxr=r(cAt,"from_pretrained()"),cAt.forEach(t),mxr=r(Fee," class method or the "),rY=n(Fee,"A",{href:!0});var fAt=s(rY);gxr=r(fAt,"from_config()"),fAt.forEach(t),hxr=r(Fee,` class
method.`),Fee.forEach(t),pxr=i(Xl),L9=n(Xl,"P",{});var sGe=s(L9);_xr=r(sGe,"This class cannot be instantiated directly using "),QMe=n(sGe,"CODE",{});var mAt=s(QMe);uxr=r(mAt,"__init__()"),mAt.forEach(t),bxr=r(sGe," (throws an error)."),sGe.forEach(t),vxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var HA=s(Vt);T(x9.$$.fragment,HA),Fxr=i(HA),HMe=n(HA,"P",{});var gAt=s(HMe);Txr=r(gAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gAt.forEach(t),Mxr=i(HA),Ic=n(HA,"P",{});var Tee=s(Ic);Exr=r(Tee,`Note:
Loading a model from its configuration file does `),UMe=n(Tee,"STRONG",{});var hAt=s(UMe);Cxr=r(hAt,"not"),hAt.forEach(t),wxr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(Tee,"A",{href:!0});var pAt=s(tY);Axr=r(pAt,"from_pretrained()"),pAt.forEach(t),yxr=r(Tee," to load the model weights."),Tee.forEach(t),Lxr=i(HA),T(n3.$$.fragment,HA),HA.forEach(t),xxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T($9.$$.fragment,zl),$xr=i(zl),JMe=n(zl,"P",{});var _At=s(JMe);kxr=r(_At,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_At.forEach(t),Sxr=i(zl),_n=n(zl,"P",{});var UA=s(_n);Rxr=r(UA,"The model class to instantiate is selected based on the "),YMe=n(UA,"CODE",{});var uAt=s(YMe);Pxr=r(uAt,"model_type"),uAt.forEach(t),Bxr=r(UA,` property of the config object (either
passed as an argument or loaded from `),KMe=n(UA,"CODE",{});var bAt=s(KMe);Ixr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),qxr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(UA,"CODE",{});var vAt=s(ZMe);Nxr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),jxr=r(UA,":"),UA.forEach(t),Dxr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);s3=n(we,"LI",{});var KBe=s(s3);e4e=n(KBe,"STRONG",{});var FAt=s(e4e);Gxr=r(FAt,"albert"),FAt.forEach(t),Oxr=r(KBe," \u2014 "),aY=n(KBe,"A",{href:!0});var TAt=s(aY);Vxr=r(TAt,"FlaxAlbertForPreTraining"),TAt.forEach(t),Xxr=r(KBe," (ALBERT model)"),KBe.forEach(t),zxr=i(we),l3=n(we,"LI",{});var ZBe=s(l3);o4e=n(ZBe,"STRONG",{});var MAt=s(o4e);Wxr=r(MAt,"bart"),MAt.forEach(t),Qxr=r(ZBe," \u2014 "),nY=n(ZBe,"A",{href:!0});var EAt=s(nY);Hxr=r(EAt,"FlaxBartForConditionalGeneration"),EAt.forEach(t),Uxr=r(ZBe," (BART model)"),ZBe.forEach(t),Jxr=i(we),i3=n(we,"LI",{});var eIe=s(i3);r4e=n(eIe,"STRONG",{});var CAt=s(r4e);Yxr=r(CAt,"bert"),CAt.forEach(t),Kxr=r(eIe," \u2014 "),sY=n(eIe,"A",{href:!0});var wAt=s(sY);Zxr=r(wAt,"FlaxBertForPreTraining"),wAt.forEach(t),e$r=r(eIe," (BERT model)"),eIe.forEach(t),o$r=i(we),d3=n(we,"LI",{});var oIe=s(d3);t4e=n(oIe,"STRONG",{});var AAt=s(t4e);r$r=r(AAt,"big_bird"),AAt.forEach(t),t$r=r(oIe," \u2014 "),lY=n(oIe,"A",{href:!0});var yAt=s(lY);a$r=r(yAt,"FlaxBigBirdForPreTraining"),yAt.forEach(t),n$r=r(oIe," (BigBird model)"),oIe.forEach(t),s$r=i(we),c3=n(we,"LI",{});var rIe=s(c3);a4e=n(rIe,"STRONG",{});var LAt=s(a4e);l$r=r(LAt,"electra"),LAt.forEach(t),i$r=r(rIe," \u2014 "),iY=n(rIe,"A",{href:!0});var xAt=s(iY);d$r=r(xAt,"FlaxElectraForPreTraining"),xAt.forEach(t),c$r=r(rIe," (ELECTRA model)"),rIe.forEach(t),f$r=i(we),f3=n(we,"LI",{});var tIe=s(f3);n4e=n(tIe,"STRONG",{});var $At=s(n4e);m$r=r($At,"mbart"),$At.forEach(t),g$r=r(tIe," \u2014 "),dY=n(tIe,"A",{href:!0});var kAt=s(dY);h$r=r(kAt,"FlaxMBartForConditionalGeneration"),kAt.forEach(t),p$r=r(tIe," (mBART model)"),tIe.forEach(t),_$r=i(we),m3=n(we,"LI",{});var aIe=s(m3);s4e=n(aIe,"STRONG",{});var SAt=s(s4e);u$r=r(SAt,"mt5"),SAt.forEach(t),b$r=r(aIe," \u2014 "),cY=n(aIe,"A",{href:!0});var RAt=s(cY);v$r=r(RAt,"FlaxMT5ForConditionalGeneration"),RAt.forEach(t),F$r=r(aIe," (mT5 model)"),aIe.forEach(t),T$r=i(we),g3=n(we,"LI",{});var nIe=s(g3);l4e=n(nIe,"STRONG",{});var PAt=s(l4e);M$r=r(PAt,"roberta"),PAt.forEach(t),E$r=r(nIe," \u2014 "),fY=n(nIe,"A",{href:!0});var BAt=s(fY);C$r=r(BAt,"FlaxRobertaForMaskedLM"),BAt.forEach(t),w$r=r(nIe," (RoBERTa model)"),nIe.forEach(t),A$r=i(we),h3=n(we,"LI",{});var sIe=s(h3);i4e=n(sIe,"STRONG",{});var IAt=s(i4e);y$r=r(IAt,"roformer"),IAt.forEach(t),L$r=r(sIe," \u2014 "),mY=n(sIe,"A",{href:!0});var qAt=s(mY);x$r=r(qAt,"FlaxRoFormerForMaskedLM"),qAt.forEach(t),$$r=r(sIe," (RoFormer model)"),sIe.forEach(t),k$r=i(we),p3=n(we,"LI",{});var lIe=s(p3);d4e=n(lIe,"STRONG",{});var NAt=s(d4e);S$r=r(NAt,"t5"),NAt.forEach(t),R$r=r(lIe," \u2014 "),gY=n(lIe,"A",{href:!0});var jAt=s(gY);P$r=r(jAt,"FlaxT5ForConditionalGeneration"),jAt.forEach(t),B$r=r(lIe," (T5 model)"),lIe.forEach(t),I$r=i(we),_3=n(we,"LI",{});var iIe=s(_3);c4e=n(iIe,"STRONG",{});var DAt=s(c4e);q$r=r(DAt,"wav2vec2"),DAt.forEach(t),N$r=r(iIe," \u2014 "),hY=n(iIe,"A",{href:!0});var GAt=s(hY);j$r=r(GAt,"FlaxWav2Vec2ForPreTraining"),GAt.forEach(t),D$r=r(iIe," (Wav2Vec2 model)"),iIe.forEach(t),G$r=i(we),u3=n(we,"LI",{});var dIe=s(u3);f4e=n(dIe,"STRONG",{});var OAt=s(f4e);O$r=r(OAt,"xlm-roberta"),OAt.forEach(t),V$r=r(dIe," \u2014 "),pY=n(dIe,"A",{href:!0});var VAt=s(pY);X$r=r(VAt,"FlaxXLMRobertaForMaskedLM"),VAt.forEach(t),z$r=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),we.forEach(t),W$r=i(zl),T(b3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),eje=i(f),qc=n(f,"H2",{class:!0});var lGe=s(qc);v3=n(lGe,"A",{id:!0,class:!0,href:!0});var XAt=s(v3);m4e=n(XAt,"SPAN",{});var zAt=s(m4e);T(k9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),Q$r=i(lGe),g4e=n(lGe,"SPAN",{});var WAt=s(g4e);H$r=r(WAt,"FlaxAutoModelForMaskedLM"),WAt.forEach(t),lGe.forEach(t),oje=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(S9.$$.fragment,Wl),U$r=i(Wl),Nc=n(Wl,"P",{});var Mee=s(Nc);J$r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Y=n(Mee,"A",{href:!0});var QAt=s(_Y);Y$r=r(QAt,"from_pretrained()"),QAt.forEach(t),K$r=r(Mee," class method or the "),uY=n(Mee,"A",{href:!0});var HAt=s(uY);Z$r=r(HAt,"from_config()"),HAt.forEach(t),ekr=r(Mee,` class
method.`),Mee.forEach(t),okr=i(Wl),R9=n(Wl,"P",{});var iGe=s(R9);rkr=r(iGe,"This class cannot be instantiated directly using "),h4e=n(iGe,"CODE",{});var UAt=s(h4e);tkr=r(UAt,"__init__()"),UAt.forEach(t),akr=r(iGe," (throws an error)."),iGe.forEach(t),nkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var JA=s(Xt);T(P9.$$.fragment,JA),skr=i(JA),p4e=n(JA,"P",{});var JAt=s(p4e);lkr=r(JAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JAt.forEach(t),ikr=i(JA),jc=n(JA,"P",{});var Eee=s(jc);dkr=r(Eee,`Note:
Loading a model from its configuration file does `),_4e=n(Eee,"STRONG",{});var YAt=s(_4e);ckr=r(YAt,"not"),YAt.forEach(t),fkr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Eee,"A",{href:!0});var KAt=s(bY);mkr=r(KAt,"from_pretrained()"),KAt.forEach(t),gkr=r(Eee," to load the model weights."),Eee.forEach(t),hkr=i(JA),T(F3.$$.fragment,JA),JA.forEach(t),pkr=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(B9.$$.fragment,Ql),_kr=i(Ql),u4e=n(Ql,"P",{});var ZAt=s(u4e);ukr=r(ZAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZAt.forEach(t),bkr=i(Ql),un=n(Ql,"P",{});var YA=s(un);vkr=r(YA,"The model class to instantiate is selected based on the "),b4e=n(YA,"CODE",{});var e6t=s(b4e);Fkr=r(e6t,"model_type"),e6t.forEach(t),Tkr=r(YA,` property of the config object (either
passed as an argument or loaded from `),v4e=n(YA,"CODE",{});var o6t=s(v4e);Mkr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),Ekr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(YA,"CODE",{});var r6t=s(F4e);Ckr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),wkr=r(YA,":"),YA.forEach(t),Akr=i(Ql),xe=n(Ql,"UL",{});var qe=s(xe);T3=n(qe,"LI",{});var cIe=s(T3);T4e=n(cIe,"STRONG",{});var t6t=s(T4e);ykr=r(t6t,"albert"),t6t.forEach(t),Lkr=r(cIe," \u2014 "),vY=n(cIe,"A",{href:!0});var a6t=s(vY);xkr=r(a6t,"FlaxAlbertForMaskedLM"),a6t.forEach(t),$kr=r(cIe," (ALBERT model)"),cIe.forEach(t),kkr=i(qe),M3=n(qe,"LI",{});var fIe=s(M3);M4e=n(fIe,"STRONG",{});var n6t=s(M4e);Skr=r(n6t,"bart"),n6t.forEach(t),Rkr=r(fIe," \u2014 "),FY=n(fIe,"A",{href:!0});var s6t=s(FY);Pkr=r(s6t,"FlaxBartForConditionalGeneration"),s6t.forEach(t),Bkr=r(fIe," (BART model)"),fIe.forEach(t),Ikr=i(qe),E3=n(qe,"LI",{});var mIe=s(E3);E4e=n(mIe,"STRONG",{});var l6t=s(E4e);qkr=r(l6t,"bert"),l6t.forEach(t),Nkr=r(mIe," \u2014 "),TY=n(mIe,"A",{href:!0});var i6t=s(TY);jkr=r(i6t,"FlaxBertForMaskedLM"),i6t.forEach(t),Dkr=r(mIe," (BERT model)"),mIe.forEach(t),Gkr=i(qe),C3=n(qe,"LI",{});var gIe=s(C3);C4e=n(gIe,"STRONG",{});var d6t=s(C4e);Okr=r(d6t,"big_bird"),d6t.forEach(t),Vkr=r(gIe," \u2014 "),MY=n(gIe,"A",{href:!0});var c6t=s(MY);Xkr=r(c6t,"FlaxBigBirdForMaskedLM"),c6t.forEach(t),zkr=r(gIe," (BigBird model)"),gIe.forEach(t),Wkr=i(qe),w3=n(qe,"LI",{});var hIe=s(w3);w4e=n(hIe,"STRONG",{});var f6t=s(w4e);Qkr=r(f6t,"distilbert"),f6t.forEach(t),Hkr=r(hIe," \u2014 "),EY=n(hIe,"A",{href:!0});var m6t=s(EY);Ukr=r(m6t,"FlaxDistilBertForMaskedLM"),m6t.forEach(t),Jkr=r(hIe," (DistilBERT model)"),hIe.forEach(t),Ykr=i(qe),A3=n(qe,"LI",{});var pIe=s(A3);A4e=n(pIe,"STRONG",{});var g6t=s(A4e);Kkr=r(g6t,"electra"),g6t.forEach(t),Zkr=r(pIe," \u2014 "),CY=n(pIe,"A",{href:!0});var h6t=s(CY);eSr=r(h6t,"FlaxElectraForMaskedLM"),h6t.forEach(t),oSr=r(pIe," (ELECTRA model)"),pIe.forEach(t),rSr=i(qe),y3=n(qe,"LI",{});var _Ie=s(y3);y4e=n(_Ie,"STRONG",{});var p6t=s(y4e);tSr=r(p6t,"mbart"),p6t.forEach(t),aSr=r(_Ie," \u2014 "),wY=n(_Ie,"A",{href:!0});var _6t=s(wY);nSr=r(_6t,"FlaxMBartForConditionalGeneration"),_6t.forEach(t),sSr=r(_Ie," (mBART model)"),_Ie.forEach(t),lSr=i(qe),L3=n(qe,"LI",{});var uIe=s(L3);L4e=n(uIe,"STRONG",{});var u6t=s(L4e);iSr=r(u6t,"roberta"),u6t.forEach(t),dSr=r(uIe," \u2014 "),AY=n(uIe,"A",{href:!0});var b6t=s(AY);cSr=r(b6t,"FlaxRobertaForMaskedLM"),b6t.forEach(t),fSr=r(uIe," (RoBERTa model)"),uIe.forEach(t),mSr=i(qe),x3=n(qe,"LI",{});var bIe=s(x3);x4e=n(bIe,"STRONG",{});var v6t=s(x4e);gSr=r(v6t,"roformer"),v6t.forEach(t),hSr=r(bIe," \u2014 "),yY=n(bIe,"A",{href:!0});var F6t=s(yY);pSr=r(F6t,"FlaxRoFormerForMaskedLM"),F6t.forEach(t),_Sr=r(bIe," (RoFormer model)"),bIe.forEach(t),uSr=i(qe),$3=n(qe,"LI",{});var vIe=s($3);$4e=n(vIe,"STRONG",{});var T6t=s($4e);bSr=r(T6t,"xlm-roberta"),T6t.forEach(t),vSr=r(vIe," \u2014 "),LY=n(vIe,"A",{href:!0});var M6t=s(LY);FSr=r(M6t,"FlaxXLMRobertaForMaskedLM"),M6t.forEach(t),TSr=r(vIe," (XLM-RoBERTa model)"),vIe.forEach(t),qe.forEach(t),MSr=i(Ql),T(k3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),rje=i(f),Dc=n(f,"H2",{class:!0});var dGe=s(Dc);S3=n(dGe,"A",{id:!0,class:!0,href:!0});var E6t=s(S3);k4e=n(E6t,"SPAN",{});var C6t=s(k4e);T(I9.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),ESr=i(dGe),S4e=n(dGe,"SPAN",{});var w6t=s(S4e);CSr=r(w6t,"FlaxAutoModelForSeq2SeqLM"),w6t.forEach(t),dGe.forEach(t),tje=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(q9.$$.fragment,Hl),wSr=i(Hl),Gc=n(Hl,"P",{});var Cee=s(Gc);ASr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=n(Cee,"A",{href:!0});var A6t=s(xY);ySr=r(A6t,"from_pretrained()"),A6t.forEach(t),LSr=r(Cee," class method or the "),$Y=n(Cee,"A",{href:!0});var y6t=s($Y);xSr=r(y6t,"from_config()"),y6t.forEach(t),$Sr=r(Cee,` class
method.`),Cee.forEach(t),kSr=i(Hl),N9=n(Hl,"P",{});var cGe=s(N9);SSr=r(cGe,"This class cannot be instantiated directly using "),R4e=n(cGe,"CODE",{});var L6t=s(R4e);RSr=r(L6t,"__init__()"),L6t.forEach(t),PSr=r(cGe," (throws an error)."),cGe.forEach(t),BSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var KA=s(zt);T(j9.$$.fragment,KA),ISr=i(KA),P4e=n(KA,"P",{});var x6t=s(P4e);qSr=r(x6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x6t.forEach(t),NSr=i(KA),Oc=n(KA,"P",{});var wee=s(Oc);jSr=r(wee,`Note:
Loading a model from its configuration file does `),B4e=n(wee,"STRONG",{});var $6t=s(B4e);DSr=r($6t,"not"),$6t.forEach(t),GSr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(wee,"A",{href:!0});var k6t=s(kY);OSr=r(k6t,"from_pretrained()"),k6t.forEach(t),VSr=r(wee," to load the model weights."),wee.forEach(t),XSr=i(KA),T(R3.$$.fragment,KA),KA.forEach(t),zSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(D9.$$.fragment,Ul),WSr=i(Ul),I4e=n(Ul,"P",{});var S6t=s(I4e);QSr=r(S6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S6t.forEach(t),HSr=i(Ul),bn=n(Ul,"P",{});var ZA=s(bn);USr=r(ZA,"The model class to instantiate is selected based on the "),q4e=n(ZA,"CODE",{});var R6t=s(q4e);JSr=r(R6t,"model_type"),R6t.forEach(t),YSr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),N4e=n(ZA,"CODE",{});var P6t=s(N4e);KSr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),ZSr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(ZA,"CODE",{});var B6t=s(j4e);eRr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),oRr=r(ZA,":"),ZA.forEach(t),rRr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);P3=n(ze,"LI",{});var FIe=s(P3);D4e=n(FIe,"STRONG",{});var I6t=s(D4e);tRr=r(I6t,"bart"),I6t.forEach(t),aRr=r(FIe," \u2014 "),SY=n(FIe,"A",{href:!0});var q6t=s(SY);nRr=r(q6t,"FlaxBartForConditionalGeneration"),q6t.forEach(t),sRr=r(FIe," (BART model)"),FIe.forEach(t),lRr=i(ze),B3=n(ze,"LI",{});var TIe=s(B3);G4e=n(TIe,"STRONG",{});var N6t=s(G4e);iRr=r(N6t,"blenderbot"),N6t.forEach(t),dRr=r(TIe," \u2014 "),RY=n(TIe,"A",{href:!0});var j6t=s(RY);cRr=r(j6t,"FlaxBlenderbotForConditionalGeneration"),j6t.forEach(t),fRr=r(TIe," (Blenderbot model)"),TIe.forEach(t),mRr=i(ze),I3=n(ze,"LI",{});var MIe=s(I3);O4e=n(MIe,"STRONG",{});var D6t=s(O4e);gRr=r(D6t,"blenderbot-small"),D6t.forEach(t),hRr=r(MIe," \u2014 "),PY=n(MIe,"A",{href:!0});var G6t=s(PY);pRr=r(G6t,"FlaxBlenderbotSmallForConditionalGeneration"),G6t.forEach(t),_Rr=r(MIe," (BlenderbotSmall model)"),MIe.forEach(t),uRr=i(ze),q3=n(ze,"LI",{});var EIe=s(q3);V4e=n(EIe,"STRONG",{});var O6t=s(V4e);bRr=r(O6t,"encoder-decoder"),O6t.forEach(t),vRr=r(EIe," \u2014 "),BY=n(EIe,"A",{href:!0});var V6t=s(BY);FRr=r(V6t,"FlaxEncoderDecoderModel"),V6t.forEach(t),TRr=r(EIe," (Encoder decoder model)"),EIe.forEach(t),MRr=i(ze),N3=n(ze,"LI",{});var CIe=s(N3);X4e=n(CIe,"STRONG",{});var X6t=s(X4e);ERr=r(X6t,"marian"),X6t.forEach(t),CRr=r(CIe," \u2014 "),IY=n(CIe,"A",{href:!0});var z6t=s(IY);wRr=r(z6t,"FlaxMarianMTModel"),z6t.forEach(t),ARr=r(CIe," (Marian model)"),CIe.forEach(t),yRr=i(ze),j3=n(ze,"LI",{});var wIe=s(j3);z4e=n(wIe,"STRONG",{});var W6t=s(z4e);LRr=r(W6t,"mbart"),W6t.forEach(t),xRr=r(wIe," \u2014 "),qY=n(wIe,"A",{href:!0});var Q6t=s(qY);$Rr=r(Q6t,"FlaxMBartForConditionalGeneration"),Q6t.forEach(t),kRr=r(wIe," (mBART model)"),wIe.forEach(t),SRr=i(ze),D3=n(ze,"LI",{});var AIe=s(D3);W4e=n(AIe,"STRONG",{});var H6t=s(W4e);RRr=r(H6t,"mt5"),H6t.forEach(t),PRr=r(AIe," \u2014 "),NY=n(AIe,"A",{href:!0});var U6t=s(NY);BRr=r(U6t,"FlaxMT5ForConditionalGeneration"),U6t.forEach(t),IRr=r(AIe," (mT5 model)"),AIe.forEach(t),qRr=i(ze),G3=n(ze,"LI",{});var yIe=s(G3);Q4e=n(yIe,"STRONG",{});var J6t=s(Q4e);NRr=r(J6t,"pegasus"),J6t.forEach(t),jRr=r(yIe," \u2014 "),jY=n(yIe,"A",{href:!0});var Y6t=s(jY);DRr=r(Y6t,"FlaxPegasusForConditionalGeneration"),Y6t.forEach(t),GRr=r(yIe," (Pegasus model)"),yIe.forEach(t),ORr=i(ze),O3=n(ze,"LI",{});var LIe=s(O3);H4e=n(LIe,"STRONG",{});var K6t=s(H4e);VRr=r(K6t,"t5"),K6t.forEach(t),XRr=r(LIe," \u2014 "),DY=n(LIe,"A",{href:!0});var Z6t=s(DY);zRr=r(Z6t,"FlaxT5ForConditionalGeneration"),Z6t.forEach(t),WRr=r(LIe," (T5 model)"),LIe.forEach(t),ze.forEach(t),QRr=i(Ul),T(V3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),aje=i(f),Vc=n(f,"H2",{class:!0});var fGe=s(Vc);X3=n(fGe,"A",{id:!0,class:!0,href:!0});var eyt=s(X3);U4e=n(eyt,"SPAN",{});var oyt=s(U4e);T(G9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),HRr=i(fGe),J4e=n(fGe,"SPAN",{});var ryt=s(J4e);URr=r(ryt,"FlaxAutoModelForSequenceClassification"),ryt.forEach(t),fGe.forEach(t),nje=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(O9.$$.fragment,Jl),JRr=i(Jl),Xc=n(Jl,"P",{});var Aee=s(Xc);YRr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GY=n(Aee,"A",{href:!0});var tyt=s(GY);KRr=r(tyt,"from_pretrained()"),tyt.forEach(t),ZRr=r(Aee," class method or the "),OY=n(Aee,"A",{href:!0});var ayt=s(OY);ePr=r(ayt,"from_config()"),ayt.forEach(t),oPr=r(Aee,` class
method.`),Aee.forEach(t),rPr=i(Jl),V9=n(Jl,"P",{});var mGe=s(V9);tPr=r(mGe,"This class cannot be instantiated directly using "),Y4e=n(mGe,"CODE",{});var nyt=s(Y4e);aPr=r(nyt,"__init__()"),nyt.forEach(t),nPr=r(mGe," (throws an error)."),mGe.forEach(t),sPr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var e6=s(Wt);T(X9.$$.fragment,e6),lPr=i(e6),K4e=n(e6,"P",{});var syt=s(K4e);iPr=r(syt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syt.forEach(t),dPr=i(e6),zc=n(e6,"P",{});var yee=s(zc);cPr=r(yee,`Note:
Loading a model from its configuration file does `),Z4e=n(yee,"STRONG",{});var lyt=s(Z4e);fPr=r(lyt,"not"),lyt.forEach(t),mPr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(yee,"A",{href:!0});var iyt=s(VY);gPr=r(iyt,"from_pretrained()"),iyt.forEach(t),hPr=r(yee," to load the model weights."),yee.forEach(t),pPr=i(e6),T(z3.$$.fragment,e6),e6.forEach(t),_Pr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(z9.$$.fragment,Yl),uPr=i(Yl),eEe=n(Yl,"P",{});var dyt=s(eEe);bPr=r(dyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyt.forEach(t),vPr=i(Yl),vn=n(Yl,"P",{});var o6=s(vn);FPr=r(o6,"The model class to instantiate is selected based on the "),oEe=n(o6,"CODE",{});var cyt=s(oEe);TPr=r(cyt,"model_type"),cyt.forEach(t),MPr=r(o6,` property of the config object (either
passed as an argument or loaded from `),rEe=n(o6,"CODE",{});var fyt=s(rEe);EPr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),CPr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(o6,"CODE",{});var myt=s(tEe);wPr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),APr=r(o6,":"),o6.forEach(t),yPr=i(Yl),$e=n(Yl,"UL",{});var Ne=s($e);W3=n(Ne,"LI",{});var xIe=s(W3);aEe=n(xIe,"STRONG",{});var gyt=s(aEe);LPr=r(gyt,"albert"),gyt.forEach(t),xPr=r(xIe," \u2014 "),XY=n(xIe,"A",{href:!0});var hyt=s(XY);$Pr=r(hyt,"FlaxAlbertForSequenceClassification"),hyt.forEach(t),kPr=r(xIe," (ALBERT model)"),xIe.forEach(t),SPr=i(Ne),Q3=n(Ne,"LI",{});var $Ie=s(Q3);nEe=n($Ie,"STRONG",{});var pyt=s(nEe);RPr=r(pyt,"bart"),pyt.forEach(t),PPr=r($Ie," \u2014 "),zY=n($Ie,"A",{href:!0});var _yt=s(zY);BPr=r(_yt,"FlaxBartForSequenceClassification"),_yt.forEach(t),IPr=r($Ie," (BART model)"),$Ie.forEach(t),qPr=i(Ne),H3=n(Ne,"LI",{});var kIe=s(H3);sEe=n(kIe,"STRONG",{});var uyt=s(sEe);NPr=r(uyt,"bert"),uyt.forEach(t),jPr=r(kIe," \u2014 "),WY=n(kIe,"A",{href:!0});var byt=s(WY);DPr=r(byt,"FlaxBertForSequenceClassification"),byt.forEach(t),GPr=r(kIe," (BERT model)"),kIe.forEach(t),OPr=i(Ne),U3=n(Ne,"LI",{});var SIe=s(U3);lEe=n(SIe,"STRONG",{});var vyt=s(lEe);VPr=r(vyt,"big_bird"),vyt.forEach(t),XPr=r(SIe," \u2014 "),QY=n(SIe,"A",{href:!0});var Fyt=s(QY);zPr=r(Fyt,"FlaxBigBirdForSequenceClassification"),Fyt.forEach(t),WPr=r(SIe," (BigBird model)"),SIe.forEach(t),QPr=i(Ne),J3=n(Ne,"LI",{});var RIe=s(J3);iEe=n(RIe,"STRONG",{});var Tyt=s(iEe);HPr=r(Tyt,"distilbert"),Tyt.forEach(t),UPr=r(RIe," \u2014 "),HY=n(RIe,"A",{href:!0});var Myt=s(HY);JPr=r(Myt,"FlaxDistilBertForSequenceClassification"),Myt.forEach(t),YPr=r(RIe," (DistilBERT model)"),RIe.forEach(t),KPr=i(Ne),Y3=n(Ne,"LI",{});var PIe=s(Y3);dEe=n(PIe,"STRONG",{});var Eyt=s(dEe);ZPr=r(Eyt,"electra"),Eyt.forEach(t),eBr=r(PIe," \u2014 "),UY=n(PIe,"A",{href:!0});var Cyt=s(UY);oBr=r(Cyt,"FlaxElectraForSequenceClassification"),Cyt.forEach(t),rBr=r(PIe," (ELECTRA model)"),PIe.forEach(t),tBr=i(Ne),K3=n(Ne,"LI",{});var BIe=s(K3);cEe=n(BIe,"STRONG",{});var wyt=s(cEe);aBr=r(wyt,"mbart"),wyt.forEach(t),nBr=r(BIe," \u2014 "),JY=n(BIe,"A",{href:!0});var Ayt=s(JY);sBr=r(Ayt,"FlaxMBartForSequenceClassification"),Ayt.forEach(t),lBr=r(BIe," (mBART model)"),BIe.forEach(t),iBr=i(Ne),Z3=n(Ne,"LI",{});var IIe=s(Z3);fEe=n(IIe,"STRONG",{});var yyt=s(fEe);dBr=r(yyt,"roberta"),yyt.forEach(t),cBr=r(IIe," \u2014 "),YY=n(IIe,"A",{href:!0});var Lyt=s(YY);fBr=r(Lyt,"FlaxRobertaForSequenceClassification"),Lyt.forEach(t),mBr=r(IIe," (RoBERTa model)"),IIe.forEach(t),gBr=i(Ne),ew=n(Ne,"LI",{});var qIe=s(ew);mEe=n(qIe,"STRONG",{});var xyt=s(mEe);hBr=r(xyt,"roformer"),xyt.forEach(t),pBr=r(qIe," \u2014 "),KY=n(qIe,"A",{href:!0});var $yt=s(KY);_Br=r($yt,"FlaxRoFormerForSequenceClassification"),$yt.forEach(t),uBr=r(qIe," (RoFormer model)"),qIe.forEach(t),bBr=i(Ne),ow=n(Ne,"LI",{});var NIe=s(ow);gEe=n(NIe,"STRONG",{});var kyt=s(gEe);vBr=r(kyt,"xlm-roberta"),kyt.forEach(t),FBr=r(NIe," \u2014 "),ZY=n(NIe,"A",{href:!0});var Syt=s(ZY);TBr=r(Syt,"FlaxXLMRobertaForSequenceClassification"),Syt.forEach(t),MBr=r(NIe," (XLM-RoBERTa model)"),NIe.forEach(t),Ne.forEach(t),EBr=i(Yl),T(rw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),sje=i(f),Wc=n(f,"H2",{class:!0});var gGe=s(Wc);tw=n(gGe,"A",{id:!0,class:!0,href:!0});var Ryt=s(tw);hEe=n(Ryt,"SPAN",{});var Pyt=s(hEe);T(W9.$$.fragment,Pyt),Pyt.forEach(t),Ryt.forEach(t),CBr=i(gGe),pEe=n(gGe,"SPAN",{});var Byt=s(pEe);wBr=r(Byt,"FlaxAutoModelForQuestionAnswering"),Byt.forEach(t),gGe.forEach(t),lje=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(Q9.$$.fragment,Kl),ABr=i(Kl),Qc=n(Kl,"P",{});var Lee=s(Qc);yBr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eK=n(Lee,"A",{href:!0});var Iyt=s(eK);LBr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),xBr=r(Lee," class method or the "),oK=n(Lee,"A",{href:!0});var qyt=s(oK);$Br=r(qyt,"from_config()"),qyt.forEach(t),kBr=r(Lee,` class
method.`),Lee.forEach(t),SBr=i(Kl),H9=n(Kl,"P",{});var hGe=s(H9);RBr=r(hGe,"This class cannot be instantiated directly using "),_Ee=n(hGe,"CODE",{});var Nyt=s(_Ee);PBr=r(Nyt,"__init__()"),Nyt.forEach(t),BBr=r(hGe," (throws an error)."),hGe.forEach(t),IBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var r6=s(Qt);T(U9.$$.fragment,r6),qBr=i(r6),uEe=n(r6,"P",{});var jyt=s(uEe);NBr=r(jyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jyt.forEach(t),jBr=i(r6),Hc=n(r6,"P",{});var xee=s(Hc);DBr=r(xee,`Note:
Loading a model from its configuration file does `),bEe=n(xee,"STRONG",{});var Dyt=s(bEe);GBr=r(Dyt,"not"),Dyt.forEach(t),OBr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(xee,"A",{href:!0});var Gyt=s(rK);VBr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),XBr=r(xee," to load the model weights."),xee.forEach(t),zBr=i(r6),T(aw.$$.fragment,r6),r6.forEach(t),WBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(J9.$$.fragment,Zl),QBr=i(Zl),vEe=n(Zl,"P",{});var Oyt=s(vEe);HBr=r(Oyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Oyt.forEach(t),UBr=i(Zl),Fn=n(Zl,"P",{});var t6=s(Fn);JBr=r(t6,"The model class to instantiate is selected based on the "),FEe=n(t6,"CODE",{});var Vyt=s(FEe);YBr=r(Vyt,"model_type"),Vyt.forEach(t),KBr=r(t6,` property of the config object (either
passed as an argument or loaded from `),TEe=n(t6,"CODE",{});var Xyt=s(TEe);ZBr=r(Xyt,"pretrained_model_name_or_path"),Xyt.forEach(t),eIr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(t6,"CODE",{});var zyt=s(MEe);oIr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),rIr=r(t6,":"),t6.forEach(t),tIr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);nw=n(je,"LI",{});var jIe=s(nw);EEe=n(jIe,"STRONG",{});var Wyt=s(EEe);aIr=r(Wyt,"albert"),Wyt.forEach(t),nIr=r(jIe," \u2014 "),tK=n(jIe,"A",{href:!0});var Qyt=s(tK);sIr=r(Qyt,"FlaxAlbertForQuestionAnswering"),Qyt.forEach(t),lIr=r(jIe," (ALBERT model)"),jIe.forEach(t),iIr=i(je),sw=n(je,"LI",{});var DIe=s(sw);CEe=n(DIe,"STRONG",{});var Hyt=s(CEe);dIr=r(Hyt,"bart"),Hyt.forEach(t),cIr=r(DIe," \u2014 "),aK=n(DIe,"A",{href:!0});var Uyt=s(aK);fIr=r(Uyt,"FlaxBartForQuestionAnswering"),Uyt.forEach(t),mIr=r(DIe," (BART model)"),DIe.forEach(t),gIr=i(je),lw=n(je,"LI",{});var GIe=s(lw);wEe=n(GIe,"STRONG",{});var Jyt=s(wEe);hIr=r(Jyt,"bert"),Jyt.forEach(t),pIr=r(GIe," \u2014 "),nK=n(GIe,"A",{href:!0});var Yyt=s(nK);_Ir=r(Yyt,"FlaxBertForQuestionAnswering"),Yyt.forEach(t),uIr=r(GIe," (BERT model)"),GIe.forEach(t),bIr=i(je),iw=n(je,"LI",{});var OIe=s(iw);AEe=n(OIe,"STRONG",{});var Kyt=s(AEe);vIr=r(Kyt,"big_bird"),Kyt.forEach(t),FIr=r(OIe," \u2014 "),sK=n(OIe,"A",{href:!0});var Zyt=s(sK);TIr=r(Zyt,"FlaxBigBirdForQuestionAnswering"),Zyt.forEach(t),MIr=r(OIe," (BigBird model)"),OIe.forEach(t),EIr=i(je),dw=n(je,"LI",{});var VIe=s(dw);yEe=n(VIe,"STRONG",{});var eLt=s(yEe);CIr=r(eLt,"distilbert"),eLt.forEach(t),wIr=r(VIe," \u2014 "),lK=n(VIe,"A",{href:!0});var oLt=s(lK);AIr=r(oLt,"FlaxDistilBertForQuestionAnswering"),oLt.forEach(t),yIr=r(VIe," (DistilBERT model)"),VIe.forEach(t),LIr=i(je),cw=n(je,"LI",{});var XIe=s(cw);LEe=n(XIe,"STRONG",{});var rLt=s(LEe);xIr=r(rLt,"electra"),rLt.forEach(t),$Ir=r(XIe," \u2014 "),iK=n(XIe,"A",{href:!0});var tLt=s(iK);kIr=r(tLt,"FlaxElectraForQuestionAnswering"),tLt.forEach(t),SIr=r(XIe," (ELECTRA model)"),XIe.forEach(t),RIr=i(je),fw=n(je,"LI",{});var zIe=s(fw);xEe=n(zIe,"STRONG",{});var aLt=s(xEe);PIr=r(aLt,"mbart"),aLt.forEach(t),BIr=r(zIe," \u2014 "),dK=n(zIe,"A",{href:!0});var nLt=s(dK);IIr=r(nLt,"FlaxMBartForQuestionAnswering"),nLt.forEach(t),qIr=r(zIe," (mBART model)"),zIe.forEach(t),NIr=i(je),mw=n(je,"LI",{});var WIe=s(mw);$Ee=n(WIe,"STRONG",{});var sLt=s($Ee);jIr=r(sLt,"roberta"),sLt.forEach(t),DIr=r(WIe," \u2014 "),cK=n(WIe,"A",{href:!0});var lLt=s(cK);GIr=r(lLt,"FlaxRobertaForQuestionAnswering"),lLt.forEach(t),OIr=r(WIe," (RoBERTa model)"),WIe.forEach(t),VIr=i(je),gw=n(je,"LI",{});var QIe=s(gw);kEe=n(QIe,"STRONG",{});var iLt=s(kEe);XIr=r(iLt,"roformer"),iLt.forEach(t),zIr=r(QIe," \u2014 "),fK=n(QIe,"A",{href:!0});var dLt=s(fK);WIr=r(dLt,"FlaxRoFormerForQuestionAnswering"),dLt.forEach(t),QIr=r(QIe," (RoFormer model)"),QIe.forEach(t),HIr=i(je),hw=n(je,"LI",{});var HIe=s(hw);SEe=n(HIe,"STRONG",{});var cLt=s(SEe);UIr=r(cLt,"xlm-roberta"),cLt.forEach(t),JIr=r(HIe," \u2014 "),mK=n(HIe,"A",{href:!0});var fLt=s(mK);YIr=r(fLt,"FlaxXLMRobertaForQuestionAnswering"),fLt.forEach(t),KIr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),je.forEach(t),ZIr=i(Zl),T(pw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ije=i(f),Uc=n(f,"H2",{class:!0});var pGe=s(Uc);_w=n(pGe,"A",{id:!0,class:!0,href:!0});var mLt=s(_w);REe=n(mLt,"SPAN",{});var gLt=s(REe);T(Y9.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),eqr=i(pGe),PEe=n(pGe,"SPAN",{});var hLt=s(PEe);oqr=r(hLt,"FlaxAutoModelForTokenClassification"),hLt.forEach(t),pGe.forEach(t),dje=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(K9.$$.fragment,ei),rqr=i(ei),Jc=n(ei,"P",{});var $ee=s(Jc);tqr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gK=n($ee,"A",{href:!0});var pLt=s(gK);aqr=r(pLt,"from_pretrained()"),pLt.forEach(t),nqr=r($ee," class method or the "),hK=n($ee,"A",{href:!0});var _Lt=s(hK);sqr=r(_Lt,"from_config()"),_Lt.forEach(t),lqr=r($ee,` class
method.`),$ee.forEach(t),iqr=i(ei),Z9=n(ei,"P",{});var _Ge=s(Z9);dqr=r(_Ge,"This class cannot be instantiated directly using "),BEe=n(_Ge,"CODE",{});var uLt=s(BEe);cqr=r(uLt,"__init__()"),uLt.forEach(t),fqr=r(_Ge," (throws an error)."),_Ge.forEach(t),mqr=i(ei),Ht=n(ei,"DIV",{class:!0});var a6=s(Ht);T(ex.$$.fragment,a6),gqr=i(a6),IEe=n(a6,"P",{});var bLt=s(IEe);hqr=r(bLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bLt.forEach(t),pqr=i(a6),Yc=n(a6,"P",{});var kee=s(Yc);_qr=r(kee,`Note:
Loading a model from its configuration file does `),qEe=n(kee,"STRONG",{});var vLt=s(qEe);uqr=r(vLt,"not"),vLt.forEach(t),bqr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(kee,"A",{href:!0});var FLt=s(pK);vqr=r(FLt,"from_pretrained()"),FLt.forEach(t),Fqr=r(kee," to load the model weights."),kee.forEach(t),Tqr=i(a6),T(uw.$$.fragment,a6),a6.forEach(t),Mqr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(ox.$$.fragment,oi),Eqr=i(oi),NEe=n(oi,"P",{});var TLt=s(NEe);Cqr=r(TLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TLt.forEach(t),wqr=i(oi),Tn=n(oi,"P",{});var n6=s(Tn);Aqr=r(n6,"The model class to instantiate is selected based on the "),jEe=n(n6,"CODE",{});var MLt=s(jEe);yqr=r(MLt,"model_type"),MLt.forEach(t),Lqr=r(n6,` property of the config object (either
passed as an argument or loaded from `),DEe=n(n6,"CODE",{});var ELt=s(DEe);xqr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),$qr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(n6,"CODE",{});var CLt=s(GEe);kqr=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),Sqr=r(n6,":"),n6.forEach(t),Rqr=i(oi),Ge=n(oi,"UL",{});var Fo=s(Ge);bw=n(Fo,"LI",{});var UIe=s(bw);OEe=n(UIe,"STRONG",{});var wLt=s(OEe);Pqr=r(wLt,"albert"),wLt.forEach(t),Bqr=r(UIe," \u2014 "),_K=n(UIe,"A",{href:!0});var ALt=s(_K);Iqr=r(ALt,"FlaxAlbertForTokenClassification"),ALt.forEach(t),qqr=r(UIe," (ALBERT model)"),UIe.forEach(t),Nqr=i(Fo),vw=n(Fo,"LI",{});var JIe=s(vw);VEe=n(JIe,"STRONG",{});var yLt=s(VEe);jqr=r(yLt,"bert"),yLt.forEach(t),Dqr=r(JIe," \u2014 "),uK=n(JIe,"A",{href:!0});var LLt=s(uK);Gqr=r(LLt,"FlaxBertForTokenClassification"),LLt.forEach(t),Oqr=r(JIe," (BERT model)"),JIe.forEach(t),Vqr=i(Fo),Fw=n(Fo,"LI",{});var YIe=s(Fw);XEe=n(YIe,"STRONG",{});var xLt=s(XEe);Xqr=r(xLt,"big_bird"),xLt.forEach(t),zqr=r(YIe," \u2014 "),bK=n(YIe,"A",{href:!0});var $Lt=s(bK);Wqr=r($Lt,"FlaxBigBirdForTokenClassification"),$Lt.forEach(t),Qqr=r(YIe," (BigBird model)"),YIe.forEach(t),Hqr=i(Fo),Tw=n(Fo,"LI",{});var KIe=s(Tw);zEe=n(KIe,"STRONG",{});var kLt=s(zEe);Uqr=r(kLt,"distilbert"),kLt.forEach(t),Jqr=r(KIe," \u2014 "),vK=n(KIe,"A",{href:!0});var SLt=s(vK);Yqr=r(SLt,"FlaxDistilBertForTokenClassification"),SLt.forEach(t),Kqr=r(KIe," (DistilBERT model)"),KIe.forEach(t),Zqr=i(Fo),Mw=n(Fo,"LI",{});var ZIe=s(Mw);WEe=n(ZIe,"STRONG",{});var RLt=s(WEe);eNr=r(RLt,"electra"),RLt.forEach(t),oNr=r(ZIe," \u2014 "),FK=n(ZIe,"A",{href:!0});var PLt=s(FK);rNr=r(PLt,"FlaxElectraForTokenClassification"),PLt.forEach(t),tNr=r(ZIe," (ELECTRA model)"),ZIe.forEach(t),aNr=i(Fo),Ew=n(Fo,"LI",{});var eqe=s(Ew);QEe=n(eqe,"STRONG",{});var BLt=s(QEe);nNr=r(BLt,"roberta"),BLt.forEach(t),sNr=r(eqe," \u2014 "),TK=n(eqe,"A",{href:!0});var ILt=s(TK);lNr=r(ILt,"FlaxRobertaForTokenClassification"),ILt.forEach(t),iNr=r(eqe," (RoBERTa model)"),eqe.forEach(t),dNr=i(Fo),Cw=n(Fo,"LI",{});var oqe=s(Cw);HEe=n(oqe,"STRONG",{});var qLt=s(HEe);cNr=r(qLt,"roformer"),qLt.forEach(t),fNr=r(oqe," \u2014 "),MK=n(oqe,"A",{href:!0});var NLt=s(MK);mNr=r(NLt,"FlaxRoFormerForTokenClassification"),NLt.forEach(t),gNr=r(oqe," (RoFormer model)"),oqe.forEach(t),hNr=i(Fo),ww=n(Fo,"LI",{});var rqe=s(ww);UEe=n(rqe,"STRONG",{});var jLt=s(UEe);pNr=r(jLt,"xlm-roberta"),jLt.forEach(t),_Nr=r(rqe," \u2014 "),EK=n(rqe,"A",{href:!0});var DLt=s(EK);uNr=r(DLt,"FlaxXLMRobertaForTokenClassification"),DLt.forEach(t),bNr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Fo.forEach(t),vNr=i(oi),T(Aw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),cje=i(f),Kc=n(f,"H2",{class:!0});var uGe=s(Kc);yw=n(uGe,"A",{id:!0,class:!0,href:!0});var GLt=s(yw);JEe=n(GLt,"SPAN",{});var OLt=s(JEe);T(rx.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),FNr=i(uGe),YEe=n(uGe,"SPAN",{});var VLt=s(YEe);TNr=r(VLt,"FlaxAutoModelForMultipleChoice"),VLt.forEach(t),uGe.forEach(t),fje=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(tx.$$.fragment,ri),MNr=i(ri),Zc=n(ri,"P",{});var See=s(Zc);ENr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CK=n(See,"A",{href:!0});var XLt=s(CK);CNr=r(XLt,"from_pretrained()"),XLt.forEach(t),wNr=r(See," class method or the "),wK=n(See,"A",{href:!0});var zLt=s(wK);ANr=r(zLt,"from_config()"),zLt.forEach(t),yNr=r(See,` class
method.`),See.forEach(t),LNr=i(ri),ax=n(ri,"P",{});var bGe=s(ax);xNr=r(bGe,"This class cannot be instantiated directly using "),KEe=n(bGe,"CODE",{});var WLt=s(KEe);$Nr=r(WLt,"__init__()"),WLt.forEach(t),kNr=r(bGe," (throws an error)."),bGe.forEach(t),SNr=i(ri),Ut=n(ri,"DIV",{class:!0});var s6=s(Ut);T(nx.$$.fragment,s6),RNr=i(s6),ZEe=n(s6,"P",{});var QLt=s(ZEe);PNr=r(QLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QLt.forEach(t),BNr=i(s6),ef=n(s6,"P",{});var Ree=s(ef);INr=r(Ree,`Note:
Loading a model from its configuration file does `),eCe=n(Ree,"STRONG",{});var HLt=s(eCe);qNr=r(HLt,"not"),HLt.forEach(t),NNr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(Ree,"A",{href:!0});var ULt=s(AK);jNr=r(ULt,"from_pretrained()"),ULt.forEach(t),DNr=r(Ree," to load the model weights."),Ree.forEach(t),GNr=i(s6),T(Lw.$$.fragment,s6),s6.forEach(t),ONr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(sx.$$.fragment,ti),VNr=i(ti),oCe=n(ti,"P",{});var JLt=s(oCe);XNr=r(JLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JLt.forEach(t),zNr=i(ti),Mn=n(ti,"P",{});var l6=s(Mn);WNr=r(l6,"The model class to instantiate is selected based on the "),rCe=n(l6,"CODE",{});var YLt=s(rCe);QNr=r(YLt,"model_type"),YLt.forEach(t),HNr=r(l6,` property of the config object (either
passed as an argument or loaded from `),tCe=n(l6,"CODE",{});var KLt=s(tCe);UNr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),JNr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(l6,"CODE",{});var ZLt=s(aCe);YNr=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),KNr=r(l6,":"),l6.forEach(t),ZNr=i(ti),Oe=n(ti,"UL",{});var To=s(Oe);xw=n(To,"LI",{});var tqe=s(xw);nCe=n(tqe,"STRONG",{});var e8t=s(nCe);ejr=r(e8t,"albert"),e8t.forEach(t),ojr=r(tqe," \u2014 "),yK=n(tqe,"A",{href:!0});var o8t=s(yK);rjr=r(o8t,"FlaxAlbertForMultipleChoice"),o8t.forEach(t),tjr=r(tqe," (ALBERT model)"),tqe.forEach(t),ajr=i(To),$w=n(To,"LI",{});var aqe=s($w);sCe=n(aqe,"STRONG",{});var r8t=s(sCe);njr=r(r8t,"bert"),r8t.forEach(t),sjr=r(aqe," \u2014 "),LK=n(aqe,"A",{href:!0});var t8t=s(LK);ljr=r(t8t,"FlaxBertForMultipleChoice"),t8t.forEach(t),ijr=r(aqe," (BERT model)"),aqe.forEach(t),djr=i(To),kw=n(To,"LI",{});var nqe=s(kw);lCe=n(nqe,"STRONG",{});var a8t=s(lCe);cjr=r(a8t,"big_bird"),a8t.forEach(t),fjr=r(nqe," \u2014 "),xK=n(nqe,"A",{href:!0});var n8t=s(xK);mjr=r(n8t,"FlaxBigBirdForMultipleChoice"),n8t.forEach(t),gjr=r(nqe," (BigBird model)"),nqe.forEach(t),hjr=i(To),Sw=n(To,"LI",{});var sqe=s(Sw);iCe=n(sqe,"STRONG",{});var s8t=s(iCe);pjr=r(s8t,"distilbert"),s8t.forEach(t),_jr=r(sqe," \u2014 "),$K=n(sqe,"A",{href:!0});var l8t=s($K);ujr=r(l8t,"FlaxDistilBertForMultipleChoice"),l8t.forEach(t),bjr=r(sqe," (DistilBERT model)"),sqe.forEach(t),vjr=i(To),Rw=n(To,"LI",{});var lqe=s(Rw);dCe=n(lqe,"STRONG",{});var i8t=s(dCe);Fjr=r(i8t,"electra"),i8t.forEach(t),Tjr=r(lqe," \u2014 "),kK=n(lqe,"A",{href:!0});var d8t=s(kK);Mjr=r(d8t,"FlaxElectraForMultipleChoice"),d8t.forEach(t),Ejr=r(lqe," (ELECTRA model)"),lqe.forEach(t),Cjr=i(To),Pw=n(To,"LI",{});var iqe=s(Pw);cCe=n(iqe,"STRONG",{});var c8t=s(cCe);wjr=r(c8t,"roberta"),c8t.forEach(t),Ajr=r(iqe," \u2014 "),SK=n(iqe,"A",{href:!0});var f8t=s(SK);yjr=r(f8t,"FlaxRobertaForMultipleChoice"),f8t.forEach(t),Ljr=r(iqe," (RoBERTa model)"),iqe.forEach(t),xjr=i(To),Bw=n(To,"LI",{});var dqe=s(Bw);fCe=n(dqe,"STRONG",{});var m8t=s(fCe);$jr=r(m8t,"roformer"),m8t.forEach(t),kjr=r(dqe," \u2014 "),RK=n(dqe,"A",{href:!0});var g8t=s(RK);Sjr=r(g8t,"FlaxRoFormerForMultipleChoice"),g8t.forEach(t),Rjr=r(dqe," (RoFormer model)"),dqe.forEach(t),Pjr=i(To),Iw=n(To,"LI",{});var cqe=s(Iw);mCe=n(cqe,"STRONG",{});var h8t=s(mCe);Bjr=r(h8t,"xlm-roberta"),h8t.forEach(t),Ijr=r(cqe," \u2014 "),PK=n(cqe,"A",{href:!0});var p8t=s(PK);qjr=r(p8t,"FlaxXLMRobertaForMultipleChoice"),p8t.forEach(t),Njr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),To.forEach(t),jjr=i(ti),T(qw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),mje=i(f),of=n(f,"H2",{class:!0});var vGe=s(of);Nw=n(vGe,"A",{id:!0,class:!0,href:!0});var _8t=s(Nw);gCe=n(_8t,"SPAN",{});var u8t=s(gCe);T(lx.$$.fragment,u8t),u8t.forEach(t),_8t.forEach(t),Djr=i(vGe),hCe=n(vGe,"SPAN",{});var b8t=s(hCe);Gjr=r(b8t,"FlaxAutoModelForNextSentencePrediction"),b8t.forEach(t),vGe.forEach(t),gje=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(ix.$$.fragment,ai),Ojr=i(ai),rf=n(ai,"P",{});var Pee=s(rf);Vjr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=n(Pee,"A",{href:!0});var v8t=s(BK);Xjr=r(v8t,"from_pretrained()"),v8t.forEach(t),zjr=r(Pee," class method or the "),IK=n(Pee,"A",{href:!0});var F8t=s(IK);Wjr=r(F8t,"from_config()"),F8t.forEach(t),Qjr=r(Pee,` class
method.`),Pee.forEach(t),Hjr=i(ai),dx=n(ai,"P",{});var FGe=s(dx);Ujr=r(FGe,"This class cannot be instantiated directly using "),pCe=n(FGe,"CODE",{});var T8t=s(pCe);Jjr=r(T8t,"__init__()"),T8t.forEach(t),Yjr=r(FGe," (throws an error)."),FGe.forEach(t),Kjr=i(ai),Jt=n(ai,"DIV",{class:!0});var i6=s(Jt);T(cx.$$.fragment,i6),Zjr=i(i6),_Ce=n(i6,"P",{});var M8t=s(_Ce);eDr=r(M8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M8t.forEach(t),oDr=i(i6),tf=n(i6,"P",{});var Bee=s(tf);rDr=r(Bee,`Note:
Loading a model from its configuration file does `),uCe=n(Bee,"STRONG",{});var E8t=s(uCe);tDr=r(E8t,"not"),E8t.forEach(t),aDr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Bee,"A",{href:!0});var C8t=s(qK);nDr=r(C8t,"from_pretrained()"),C8t.forEach(t),sDr=r(Bee," to load the model weights."),Bee.forEach(t),lDr=i(i6),T(jw.$$.fragment,i6),i6.forEach(t),iDr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(fx.$$.fragment,ni),dDr=i(ni),bCe=n(ni,"P",{});var w8t=s(bCe);cDr=r(w8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w8t.forEach(t),fDr=i(ni),En=n(ni,"P",{});var d6=s(En);mDr=r(d6,"The model class to instantiate is selected based on the "),vCe=n(d6,"CODE",{});var A8t=s(vCe);gDr=r(A8t,"model_type"),A8t.forEach(t),hDr=r(d6,` property of the config object (either
passed as an argument or loaded from `),FCe=n(d6,"CODE",{});var y8t=s(FCe);pDr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),_Dr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TCe=n(d6,"CODE",{});var L8t=s(TCe);uDr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),bDr=r(d6,":"),d6.forEach(t),vDr=i(ni),MCe=n(ni,"UL",{});var x8t=s(MCe);Dw=n(x8t,"LI",{});var fqe=s(Dw);ECe=n(fqe,"STRONG",{});var $8t=s(ECe);FDr=r($8t,"bert"),$8t.forEach(t),TDr=r(fqe," \u2014 "),NK=n(fqe,"A",{href:!0});var k8t=s(NK);MDr=r(k8t,"FlaxBertForNextSentencePrediction"),k8t.forEach(t),EDr=r(fqe," (BERT model)"),fqe.forEach(t),x8t.forEach(t),CDr=i(ni),T(Gw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),hje=i(f),af=n(f,"H2",{class:!0});var TGe=s(af);Ow=n(TGe,"A",{id:!0,class:!0,href:!0});var S8t=s(Ow);CCe=n(S8t,"SPAN",{});var R8t=s(CCe);T(mx.$$.fragment,R8t),R8t.forEach(t),S8t.forEach(t),wDr=i(TGe),wCe=n(TGe,"SPAN",{});var P8t=s(wCe);ADr=r(P8t,"FlaxAutoModelForImageClassification"),P8t.forEach(t),TGe.forEach(t),pje=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(gx.$$.fragment,si),yDr=i(si),nf=n(si,"P",{});var Iee=s(nf);LDr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jK=n(Iee,"A",{href:!0});var B8t=s(jK);xDr=r(B8t,"from_pretrained()"),B8t.forEach(t),$Dr=r(Iee," class method or the "),DK=n(Iee,"A",{href:!0});var I8t=s(DK);kDr=r(I8t,"from_config()"),I8t.forEach(t),SDr=r(Iee,` class
method.`),Iee.forEach(t),RDr=i(si),hx=n(si,"P",{});var MGe=s(hx);PDr=r(MGe,"This class cannot be instantiated directly using "),ACe=n(MGe,"CODE",{});var q8t=s(ACe);BDr=r(q8t,"__init__()"),q8t.forEach(t),IDr=r(MGe," (throws an error)."),MGe.forEach(t),qDr=i(si),Yt=n(si,"DIV",{class:!0});var c6=s(Yt);T(px.$$.fragment,c6),NDr=i(c6),yCe=n(c6,"P",{});var N8t=s(yCe);jDr=r(N8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N8t.forEach(t),DDr=i(c6),sf=n(c6,"P",{});var qee=s(sf);GDr=r(qee,`Note:
Loading a model from its configuration file does `),LCe=n(qee,"STRONG",{});var j8t=s(LCe);ODr=r(j8t,"not"),j8t.forEach(t),VDr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(qee,"A",{href:!0});var D8t=s(GK);XDr=r(D8t,"from_pretrained()"),D8t.forEach(t),zDr=r(qee," to load the model weights."),qee.forEach(t),WDr=i(c6),T(Vw.$$.fragment,c6),c6.forEach(t),QDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(_x.$$.fragment,li),HDr=i(li),xCe=n(li,"P",{});var G8t=s(xCe);UDr=r(G8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G8t.forEach(t),JDr=i(li),Cn=n(li,"P",{});var f6=s(Cn);YDr=r(f6,"The model class to instantiate is selected based on the "),$Ce=n(f6,"CODE",{});var O8t=s($Ce);KDr=r(O8t,"model_type"),O8t.forEach(t),ZDr=r(f6,` property of the config object (either
passed as an argument or loaded from `),kCe=n(f6,"CODE",{});var V8t=s(kCe);eGr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),oGr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(f6,"CODE",{});var X8t=s(SCe);rGr=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),tGr=r(f6,":"),f6.forEach(t),aGr=i(li),ux=n(li,"UL",{});var EGe=s(ux);Xw=n(EGe,"LI",{});var mqe=s(Xw);RCe=n(mqe,"STRONG",{});var z8t=s(RCe);nGr=r(z8t,"beit"),z8t.forEach(t),sGr=r(mqe," \u2014 "),OK=n(mqe,"A",{href:!0});var W8t=s(OK);lGr=r(W8t,"FlaxBeitForImageClassification"),W8t.forEach(t),iGr=r(mqe," (BEiT model)"),mqe.forEach(t),dGr=i(EGe),zw=n(EGe,"LI",{});var gqe=s(zw);PCe=n(gqe,"STRONG",{});var Q8t=s(PCe);cGr=r(Q8t,"vit"),Q8t.forEach(t),fGr=r(gqe," \u2014 "),VK=n(gqe,"A",{href:!0});var H8t=s(VK);mGr=r(H8t,"FlaxViTForImageClassification"),H8t.forEach(t),gGr=r(gqe," (ViT model)"),gqe.forEach(t),EGe.forEach(t),hGr=i(li),T(Ww.$$.fragment,li),li.forEach(t),si.forEach(t),_je=i(f),lf=n(f,"H2",{class:!0});var CGe=s(lf);Qw=n(CGe,"A",{id:!0,class:!0,href:!0});var U8t=s(Qw);BCe=n(U8t,"SPAN",{});var J8t=s(BCe);T(bx.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),pGr=i(CGe),ICe=n(CGe,"SPAN",{});var Y8t=s(ICe);_Gr=r(Y8t,"FlaxAutoModelForVision2Seq"),Y8t.forEach(t),CGe.forEach(t),uje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(vx.$$.fragment,ii),uGr=i(ii),df=n(ii,"P",{});var Nee=s(df);bGr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XK=n(Nee,"A",{href:!0});var K8t=s(XK);vGr=r(K8t,"from_pretrained()"),K8t.forEach(t),FGr=r(Nee," class method or the "),zK=n(Nee,"A",{href:!0});var Z8t=s(zK);TGr=r(Z8t,"from_config()"),Z8t.forEach(t),MGr=r(Nee,` class
method.`),Nee.forEach(t),EGr=i(ii),Fx=n(ii,"P",{});var wGe=s(Fx);CGr=r(wGe,"This class cannot be instantiated directly using "),qCe=n(wGe,"CODE",{});var e9t=s(qCe);wGr=r(e9t,"__init__()"),e9t.forEach(t),AGr=r(wGe," (throws an error)."),wGe.forEach(t),yGr=i(ii),Kt=n(ii,"DIV",{class:!0});var m6=s(Kt);T(Tx.$$.fragment,m6),LGr=i(m6),NCe=n(m6,"P",{});var o9t=s(NCe);xGr=r(o9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o9t.forEach(t),$Gr=i(m6),cf=n(m6,"P",{});var jee=s(cf);kGr=r(jee,`Note:
Loading a model from its configuration file does `),jCe=n(jee,"STRONG",{});var r9t=s(jCe);SGr=r(r9t,"not"),r9t.forEach(t),RGr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(jee,"A",{href:!0});var t9t=s(WK);PGr=r(t9t,"from_pretrained()"),t9t.forEach(t),BGr=r(jee," to load the model weights."),jee.forEach(t),IGr=i(m6),T(Hw.$$.fragment,m6),m6.forEach(t),qGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(Mx.$$.fragment,di),NGr=i(di),DCe=n(di,"P",{});var a9t=s(DCe);jGr=r(a9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a9t.forEach(t),DGr=i(di),wn=n(di,"P",{});var g6=s(wn);GGr=r(g6,"The model class to instantiate is selected based on the "),GCe=n(g6,"CODE",{});var n9t=s(GCe);OGr=r(n9t,"model_type"),n9t.forEach(t),VGr=r(g6,` property of the config object (either
passed as an argument or loaded from `),OCe=n(g6,"CODE",{});var s9t=s(OCe);XGr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),zGr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n(g6,"CODE",{});var l9t=s(VCe);WGr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),QGr=r(g6,":"),g6.forEach(t),HGr=i(di),XCe=n(di,"UL",{});var i9t=s(XCe);Uw=n(i9t,"LI",{});var hqe=s(Uw);zCe=n(hqe,"STRONG",{});var d9t=s(zCe);UGr=r(d9t,"vision-encoder-decoder"),d9t.forEach(t),JGr=r(hqe," \u2014 "),QK=n(hqe,"A",{href:!0});var c9t=s(QK);YGr=r(c9t,"FlaxVisionEncoderDecoderModel"),c9t.forEach(t),KGr=r(hqe," (Vision Encoder decoder model)"),hqe.forEach(t),i9t.forEach(t),ZGr=i(di),T(Jw.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(h$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(G$,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(O$,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertConfig"),c(V$,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartConfig"),c(X$,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitConfig"),c(z$,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertConfig"),c(W$,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Q$,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdConfig"),c(H$,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(U$,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(J$,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Y$,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertConfig"),c(K$,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineConfig"),c(Z$,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPConfig"),c(ek,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertConfig"),c(ok,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextConfig"),c(rk,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLConfig"),c(tk,"href","/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtConfig"),c(ak,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(nk,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(sk,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(lk,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaConfig"),c(ik,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dk,"href","/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ck,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTConfig"),c(fk,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrConfig"),c(mk,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gk,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRConfig"),c(hk,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTConfig"),c(pk,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraConfig"),c(_k,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(uk,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertConfig"),c(bk,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaConfig"),c(vk,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetConfig"),c(Fk,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTConfig"),c(Tk,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelConfig"),c(Mk,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNConfig"),c(Ek,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Config"),c(Ck,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(wk,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJConfig"),c(Ak,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertConfig"),c(yk,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertConfig"),c(Lk,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(xk,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c($k,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(kk,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDConfig"),c(Sk,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerConfig"),c(Rk,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeConfig"),c(Pk,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertConfig"),c(Bk,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ik,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianConfig"),c(qk,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Nk,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartConfig"),c(jk,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Dk,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Gk,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ok,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Config"),c(Vk,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Xk,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(zk,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTConfig"),c(Wk,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusConfig"),c(Qk,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Hk,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartConfig"),c(Uk,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Jk,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Yk,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Kk,"href","/docs/transformers/pr_17227/en/model_doc/rag#transformers.RagConfig"),c(Zk,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmConfig"),c(eS,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerConfig"),c(oS,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetConfig"),c(rS,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertConfig"),c(tS,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetConfig"),c(aS,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertConfig"),c(nS,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaConfig"),c(sS,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerConfig"),c(lS,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerConfig"),c(iS,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWConfig"),c(dS,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDConfig"),c(cS,"href","/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(fS,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(mS,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(gS,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterConfig"),c(hS,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(pS,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinConfig"),c(_S,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Config"),c(uS,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasConfig"),c(bS,"href","/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(vS,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(FS,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRConfig"),c(TS,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(MS,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(ES,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanConfig"),c(CS,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltConfig"),c(wS,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(AS,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(yS,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(LS,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTConfig"),c(xS,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c($S,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(kS,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(SS,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMConfig"),c(RS,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMConfig"),c(PS,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMConfig"),c(BS,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(IS,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(qS,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(NS,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetConfig"),c(jS,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosConfig"),c(DS,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(GS,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(OS,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(VS,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XS,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartTokenizer"),c(zS,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartTokenizerFast"),c(WS,"href","/docs/transformers/pr_17227/en/model_doc/barthez#transformers.BarthezTokenizer"),c(QS,"href","/docs/transformers/pr_17227/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(HS,"href","/docs/transformers/pr_17227/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(US,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(JS,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(KS,"href","/docs/transformers/pr_17227/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ZS,"href","/docs/transformers/pr_17227/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(eR,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(oR,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(rR,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tR,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aR,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(nR,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(sR,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(lR,"href","/docs/transformers/pr_17227/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(iR,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertTokenizer"),c(dR,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineTokenizer"),c(fR,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPTokenizer"),c(mR,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(gR,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(hR,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17227/en/model_doc/cpm#transformers.CpmTokenizer"),c(_R,"href","/docs/transformers/pr_17227/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(uR,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(bR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FR,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaTokenizer"),c(TR,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(MR,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ER,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(wR,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(yR,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(LR,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraTokenizer"),c(xR,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraTokenizerFast"),c($R,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(kR,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetTokenizer"),c(SR,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(RR,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(PR,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelTokenizer"),c(BR,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(IR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GR,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(OR,"href","/docs/transformers/pr_17227/en/model_doc/herbert#transformers.HerbertTokenizer"),c(VR,"href","/docs/transformers/pr_17227/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WR,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(HR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(UR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(JR,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(YR,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(KR,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDTokenizer"),c(eP,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDTokenizerFast"),c(oP,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerTokenizer"),c(rP,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(tP,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeTokenizer"),c(aP,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(nP,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(lP,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianTokenizer"),c(iP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartTokenizer"),c(dP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(cP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(fP,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(mP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(gP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17227/en/model_doc/mluke#transformers.MLukeTokenizer"),c(pP,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(_P,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(bP,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(vP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Tokenizer"),c(FP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5TokenizerFast"),c(TP,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(MP,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(CP,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(wP,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AP,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yP,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LP,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(xP,"href","/docs/transformers/pr_17227/en/model_doc/phobert#transformers.PhobertTokenizer"),c($P,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartTokenizer"),c(kP,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(SP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17227/en/model_doc/rag#transformers.RagTokenizer"),c(BP,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmTokenizer"),c(IP,"href","/docs/transformers/pr_17227/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qP,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerTokenizer"),c(NP,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(jP,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertTokenizer"),c(DP,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(OP,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XP,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zP,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(WP,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(QP,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(HP,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(UP,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterTokenizer"),c(JP,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(YP,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(KP,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Tokenizer"),c(eB,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5TokenizerFast"),c(oB,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasTokenizer"),c(rB,"href","/docs/transformers/pr_17227/en/model_doc/tapex#transformers.TapexTokenizer"),c(tB,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(aB,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(dB,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMTokenizer"),c(cB,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(fB,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMTokenizer"),c(mB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(gB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(hB,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(bB,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(vB,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizer"),c(FB,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(TB,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(MB,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrFeatureExtractor"),c($B,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(UB,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(JB,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPProcessor"),c(YB,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(KB,"href","/docs/transformers/pr_17227/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ZB,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(rI,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(tI,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRProcessor"),c(aI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltProcessor"),c(lI,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(iI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(fI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gI,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hI,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertModel"),c(pI,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartModel"),c(_I,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitModel"),c(uI,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertModel"),c(bI,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(vI,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdModel"),c(FI,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(TI,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(MI,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(EI,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertModel"),c(CI,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineModel"),c(wI,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.CLIPModel"),c(AI,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertModel"),c(yI,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextModel"),c(LI,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLModel"),c(xI,"href","/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtModel"),c($I,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(kI,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(SI,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(RI,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaModel"),c(PI,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(BI,"href","/docs/transformers/pr_17227/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(II,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTModel"),c(qI,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrModel"),c(NI,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertModel"),c(jI,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(DI,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTModel"),c(GI,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraModel"),c(OI,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertModel"),c(VI,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaModel"),c(XI,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetModel"),c(zI,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTModel"),c(WI,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelModel"),c(QI,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelBaseModel"),c(HI,"href","/docs/transformers/pr_17227/en/model_doc/glpn#transformers.GLPNModel"),c(UI,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2Model"),c(JI,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YI,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJModel"),c(KI,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertModel"),c(ZI,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertModel"),c(eq,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oq,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rq,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tq,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDModel"),c(aq,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerModel"),c(nq,"href","/docs/transformers/pr_17227/en/model_doc/luke#transformers.LukeModel"),c(sq,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertModel"),c(lq,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100Model"),c(iq,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianModel"),c(dq,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cq,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartModel"),c(fq,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mq,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gq,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetModel"),c(hq,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5Model"),c(pq,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_q,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uq,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTModel"),c(bq,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusModel"),c(vq,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverModel"),c(Fq,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartModel"),c(Tq,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Mq,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Eq,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Cq,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModel"),c(wq,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetModel"),c(Aq,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertModel"),c(yq,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetModel"),c(Lq,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel"),c(xq,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaModel"),c($q,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerModel"),c(kq,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerModel"),c(Sq,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWModel"),c(Rq,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDModel"),c(Pq,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Bq,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterModel"),c(Iq,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qq,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinModel"),c(Nq,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5Model"),c(jq,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasModel"),c(Dq,"href","/docs/transformers/pr_17227/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Gq,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Oq,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Vq,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Xq,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanModel"),c(zq,"href","/docs/transformers/pr_17227/en/model_doc/vilt#transformers.ViltModel"),c(Wq,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Qq,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Hq,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTModel"),c(Uq,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Jq,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Yq,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Kq,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMModel"),c(Zq,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMModel"),c(eN,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMModel"),c(oN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(rN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(tN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(aN,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetModel"),c(nN,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosModel"),c(sN,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForPreTraining"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(lN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cN,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForPreTraining"),c(fN,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mN,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForPreTraining"),c(gN,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(hN,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pN,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_N,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uN,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bN,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vN,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(FN,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForPreTraining"),c(TN,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(MN,"href","/docs/transformers/pr_17227/en/model_doc/flava#transformers.FlavaForPreTraining"),c(EN,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForPreTraining"),c(CN,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(AN,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yN,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xN,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($N,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(kN,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(SN,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(RN,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PN,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(BN,"href","/docs/transformers/pr_17227/en/model_doc/retribert#transformers.RetriBertModel"),c(IN,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qN,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(NN,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DN,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GN,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ON,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(VN,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(XN,"href","/docs/transformers/pr_17227/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(zN,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(WN,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(QN,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(HN,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JN,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YN,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForCausalLM"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(KN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZN,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForCausalLM"),c(rj,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertLMHeadModel"),c(tj,"href","/docs/transformers/pr_17227/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(aj,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(nj,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(sj,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(lj,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ij,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(dj,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cj,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(fj,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForCausalLM"),c(mj,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gj,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(hj,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(pj,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianForCausalLM"),c(_j,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForCausalLM"),c(uj,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bj,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vj,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.OPTForCausalLM"),c(Fj,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Tj,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Mj,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Ej,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(wj,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Aj,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yj,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Lj,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(xj,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($j,"href","/docs/transformers/pr_17227/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(kj,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Sj,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Rj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Pj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Bj,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Ij,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForMaskedLM"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(qj,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nj,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jj,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dj,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Kj,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(eD,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rD,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tD,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lD,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iD,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dD,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fD,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gD,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hD,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_D,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uD,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bD,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vD,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForSeq2SeqLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(FD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ED,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(LD,"href","/docs/transformers/pr_17227/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17227/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.MarianMTModel"),c(SD,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17227/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17227/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForSequenceClassification"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(jD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GD,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OD,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17227/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c($G,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.AutoModelForMultipleChoice"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(PG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IG,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qG,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForNextSentencePrediction"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(mO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(bO,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(vO,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForTokenClassification"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(FO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(AO,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForTokenClassification"),c(LO,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c($O,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(kO,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(SO,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(PO,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(IO,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(qO,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(NO,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(DO,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(GO,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(OO,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zO,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(WO,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(UO,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(JO,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(KO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(eV,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(oV,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForQuestionAnswering"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(rV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17227/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17227/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(vV,"href","/docs/transformers/pr_17227/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17227/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17227/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17227/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17227/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17227/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17227/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17227/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17227/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(DV,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(VV,"href","/docs/transformers/pr_17227/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(XV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForImageClassification"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(HV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForImageClassification"),c(KV,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ZV,"href","/docs/transformers/pr_17227/en/model_doc/cvt#transformers.CvtForImageClassification"),c(eX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(oX,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassification"),c(rX,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(tX,"href","/docs/transformers/pr_17227/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(aX,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(nX,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(sX,"href","/docs/transformers/pr_17227/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(lX,"href","/docs/transformers/pr_17227/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(iX,"href","/docs/transformers/pr_17227/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(dX,"href","/docs/transformers/pr_17227/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(cX,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(fX,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForImageClassification"),c(mX,"href","/docs/transformers/pr_17227/en/model_doc/van#transformers.VanForImageClassification"),c(gX,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForVision2Seq"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioClassification"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(bX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForAudioFrameClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c($X,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(IX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(qX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForCTC"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(NX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(OX,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.HubertForCTC"),c(VX,"href","/docs/transformers/pr_17227/en/model_doc/sew#transformers.SEWForCTC"),c(XX,"href","/docs/transformers/pr_17227/en/model_doc/sew-d#transformers.SEWDForCTC"),c(zX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(WX,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(QX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(HX,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(UX,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17227/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ez,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForAudioXVector"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(oz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(nz,"href","/docs/transformers/pr_17227/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(sz,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(lz,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(iz,"href","/docs/transformers/pr_17227/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForMaskedImageModeling"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17227/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gz,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hz,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForObjectDetection"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(pz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vz,"href","/docs/transformers/pr_17227/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForImageSegmentation"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17227/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForSemanticSegmentation"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Lz,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xz,"href","/docs/transformers/pr_17227/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($z,"href","/docs/transformers/pr_17227/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForInstanceSegmentation"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17227/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModel"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertModel"),c(jz,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartModel"),c(Dz,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertModel"),c(Gz,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Oz,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Vz,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertModel"),c(Xz,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.TFCLIPModel"),c(zz,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertModel"),c(Wz,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextModel"),c(Qz,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Hz,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Uz,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaModel"),c(Jz,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Yz,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Kz,"href","/docs/transformers/pr_17227/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Zz,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraModel"),c(eW,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oW,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelModel"),c(rW,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tW,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2Model"),c(aW,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJModel"),c(nW,"href","/docs/transformers/pr_17227/en/model_doc/hubert#transformers.TFHubertModel"),c(sW,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(lW,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDModel"),c(iW,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerModel"),c(dW,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cW,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianModel"),c(fW,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartModel"),c(mW,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gW,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetModel"),c(hW,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5Model"),c(pW,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(_W,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTModel"),c(uW,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusModel"),c(bW,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertModel"),c(vW,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaModel"),c(FW,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerModel"),c(TW,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(MW,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinModel"),c(EW,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5Model"),c(CW,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasModel"),c(wW,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(AW,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTModel"),c(yW,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(LW,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xW,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMModel"),c($W,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kW,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForPreTraining"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(SW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(IW,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qW,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForPreTraining"),c(NW,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jW,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DW,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GW,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(OW,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VW,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(XW,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zW,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(WW,"href","/docs/transformers/pr_17227/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(QW,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(HW,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(UW,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JW,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(YW,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(KW,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ZW,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17227/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(oQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForCausalLM"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(dQ,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fQ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(mQ,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(hQ,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pQ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_Q,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uQ,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForImageClassification"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17227/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(CQ,"href","/docs/transformers/pr_17227/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(wQ,"href","/docs/transformers/pr_17227/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(AQ,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForMaskedLM"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(tH,"href","/docs/transformers/pr_17227/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.TFMarianMTModel"),c(nH,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(lH,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForSequenceClassification"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(dH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17227/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17227/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c($H,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17227/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForMultipleChoice"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(iU,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17227/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModelForTokenClassification"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(gU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(bU,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(FU,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(TU,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(MU,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(CU,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(AU,"href","/docs/transformers/pr_17227/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(yU,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LU,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c($U,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(SU,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(RU,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(PU,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(BU,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForQuestionAnswering"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17227/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17227/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17227/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17227/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17227/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(HU,"href","/docs/transformers/pr_17227/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17227/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17227/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17227/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17227/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17227/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(tJ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17227/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForVision2Seq"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17227/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModel"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uJ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartModel"),c(bJ,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitModel"),c(vJ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertModel"),c(FJ,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(TJ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(MJ,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(EJ,"href","/docs/transformers/pr_17227/en/model_doc/clip#transformers.FlaxCLIPModel"),c(CJ,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(wJ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraModel"),c(AJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(yJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LJ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(xJ,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianModel"),c($J,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kJ,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SJ,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTModel"),c(RJ,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PJ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BJ,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IJ,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5Model"),c(qJ,"href","/docs/transformers/pr_17227/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(NJ,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTModel"),c(jJ,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DJ,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GJ,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForCausalLM"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WJ,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QJ,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HJ,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/pr_17227/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YJ,"href","/docs/transformers/pr_17227/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KJ,"href","/docs/transformers/pr_17227/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eY,"href","/docs/transformers/pr_17227/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForPreTraining"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(fY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(gY,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17227/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(pY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.FlaxAutoModelForMaskedLM"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(EY,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(wY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(LY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(xY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17227/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17227/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(IY,"href","/docs/transformers/pr_17227/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(qY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17227/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17227/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17227/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17227/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17227/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForTokenClassification"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(uK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(vK,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(TK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(MK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(EK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17227/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17227/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c($K,"href","/docs/transformers/pr_17227/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17227/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17227/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17227/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17227/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(BK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17227/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.FlaxAutoModelForImageClassification"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(jK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_17227/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(VK,"href","/docs/transformers/pr_17227/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(XK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17227/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_17227/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,h6),e(rt,pf),b(f,De,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,p6),e(We,Ln),e(We,xn),e(xn,_6),e(We,hi),e(We,$n),e($n,u6),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,B$),e(Ae,_i),e(_i,I$),e(Ae,q$),b(f,Eo,u),b(f,wa,u),e(wa,N$),e(wa,uf),e(uf,j$),e(wa,AGe),b(f,pqe,u),b(f,ui,u),e(ui,bf),e(bf,Dee),M(b6,Dee,null),e(ui,yGe),e(ui,Gee),e(Gee,LGe),b(f,_qe,u),b(f,kn,u),e(kn,xGe),e(kn,Oee),e(Oee,$Ge),e(kn,kGe),e(kn,Vee),e(Vee,SGe),e(kn,RGe),b(f,uqe,u),M(v6,f,u),b(f,bqe,u),b(f,D$,u),e(D$,PGe),b(f,vqe,u),M(vf,f,u),b(f,Fqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Xee),M(F6,Xee,null),e(bi,BGe),e(bi,zee),e(zee,IGe),b(f,Tqe,u),b(f,Co,u),M(T6,Co,null),e(Co,qGe),e(Co,M6),e(M6,NGe),e(M6,G$),e(G$,jGe),e(M6,DGe),e(Co,GGe),e(Co,E6),e(E6,OGe),e(E6,Wee),e(Wee,VGe),e(E6,XGe),e(Co,zGe),e(Co,Er),M(C6,Er,null),e(Er,WGe),e(Er,Qee),e(Qee,QGe),e(Er,HGe),e(Er,vi),e(vi,UGe),e(vi,Hee),e(Hee,JGe),e(vi,YGe),e(vi,Uee),e(Uee,KGe),e(vi,ZGe),e(Er,eOe),e(Er,A),e(A,Tf),e(Tf,Jee),e(Jee,oOe),e(Tf,rOe),e(Tf,O$),e(O$,tOe),e(Tf,aOe),e(A,nOe),e(A,Mf),e(Mf,Yee),e(Yee,sOe),e(Mf,lOe),e(Mf,V$),e(V$,iOe),e(Mf,dOe),e(A,cOe),e(A,Ef),e(Ef,Kee),e(Kee,fOe),e(Ef,mOe),e(Ef,X$),e(X$,gOe),e(Ef,hOe),e(A,pOe),e(A,Cf),e(Cf,Zee),e(Zee,_Oe),e(Cf,uOe),e(Cf,z$),e(z$,bOe),e(Cf,vOe),e(A,FOe),e(A,wf),e(wf,eoe),e(eoe,TOe),e(wf,MOe),e(wf,W$),e(W$,EOe),e(wf,COe),e(A,wOe),e(A,Af),e(Af,ooe),e(ooe,AOe),e(Af,yOe),e(Af,Q$),e(Q$,LOe),e(Af,xOe),e(A,$Oe),e(A,yf),e(yf,roe),e(roe,kOe),e(yf,SOe),e(yf,H$),e(H$,ROe),e(yf,POe),e(A,BOe),e(A,Lf),e(Lf,toe),e(toe,IOe),e(Lf,qOe),e(Lf,U$),e(U$,NOe),e(Lf,jOe),e(A,DOe),e(A,xf),e(xf,aoe),e(aoe,GOe),e(xf,OOe),e(xf,J$),e(J$,VOe),e(xf,XOe),e(A,zOe),e(A,$f),e($f,noe),e(noe,WOe),e($f,QOe),e($f,Y$),e(Y$,HOe),e($f,UOe),e(A,JOe),e(A,kf),e(kf,soe),e(soe,YOe),e(kf,KOe),e(kf,K$),e(K$,ZOe),e(kf,eVe),e(A,oVe),e(A,Sf),e(Sf,loe),e(loe,rVe),e(Sf,tVe),e(Sf,Z$),e(Z$,aVe),e(Sf,nVe),e(A,sVe),e(A,Rf),e(Rf,ioe),e(ioe,lVe),e(Rf,iVe),e(Rf,ek),e(ek,dVe),e(Rf,cVe),e(A,fVe),e(A,Pf),e(Pf,doe),e(doe,mVe),e(Pf,gVe),e(Pf,ok),e(ok,hVe),e(Pf,pVe),e(A,_Ve),e(A,Bf),e(Bf,coe),e(coe,uVe),e(Bf,bVe),e(Bf,rk),e(rk,vVe),e(Bf,FVe),e(A,TVe),e(A,If),e(If,foe),e(foe,MVe),e(If,EVe),e(If,tk),e(tk,CVe),e(If,wVe),e(A,AVe),e(A,qf),e(qf,moe),e(moe,yVe),e(qf,LVe),e(qf,ak),e(ak,xVe),e(qf,$Ve),e(A,kVe),e(A,Nf),e(Nf,goe),e(goe,SVe),e(Nf,RVe),e(Nf,nk),e(nk,PVe),e(Nf,BVe),e(A,IVe),e(A,jf),e(jf,hoe),e(hoe,qVe),e(jf,NVe),e(jf,sk),e(sk,jVe),e(jf,DVe),e(A,GVe),e(A,Df),e(Df,poe),e(poe,OVe),e(Df,VVe),e(Df,lk),e(lk,XVe),e(Df,zVe),e(A,WVe),e(A,Gf),e(Gf,_oe),e(_oe,QVe),e(Gf,HVe),e(Gf,ik),e(ik,UVe),e(Gf,JVe),e(A,YVe),e(A,Of),e(Of,uoe),e(uoe,KVe),e(Of,ZVe),e(Of,dk),e(dk,eXe),e(Of,oXe),e(A,rXe),e(A,Vf),e(Vf,boe),e(boe,tXe),e(Vf,aXe),e(Vf,ck),e(ck,nXe),e(Vf,sXe),e(A,lXe),e(A,Xf),e(Xf,voe),e(voe,iXe),e(Xf,dXe),e(Xf,fk),e(fk,cXe),e(Xf,fXe),e(A,mXe),e(A,zf),e(zf,Foe),e(Foe,gXe),e(zf,hXe),e(zf,mk),e(mk,pXe),e(zf,_Xe),e(A,uXe),e(A,Wf),e(Wf,Toe),e(Toe,bXe),e(Wf,vXe),e(Wf,gk),e(gk,FXe),e(Wf,TXe),e(A,MXe),e(A,Qf),e(Qf,Moe),e(Moe,EXe),e(Qf,CXe),e(Qf,hk),e(hk,wXe),e(Qf,AXe),e(A,yXe),e(A,Hf),e(Hf,Eoe),e(Eoe,LXe),e(Hf,xXe),e(Hf,pk),e(pk,$Xe),e(Hf,kXe),e(A,SXe),e(A,Uf),e(Uf,Coe),e(Coe,RXe),e(Uf,PXe),e(Uf,_k),e(_k,BXe),e(Uf,IXe),e(A,qXe),e(A,Jf),e(Jf,woe),e(woe,NXe),e(Jf,jXe),e(Jf,uk),e(uk,DXe),e(Jf,GXe),e(A,OXe),e(A,Yf),e(Yf,Aoe),e(Aoe,VXe),e(Yf,XXe),e(Yf,bk),e(bk,zXe),e(Yf,WXe),e(A,QXe),e(A,Kf),e(Kf,yoe),e(yoe,HXe),e(Kf,UXe),e(Kf,vk),e(vk,JXe),e(Kf,YXe),e(A,KXe),e(A,Zf),e(Zf,Loe),e(Loe,ZXe),e(Zf,eze),e(Zf,Fk),e(Fk,oze),e(Zf,rze),e(A,tze),e(A,em),e(em,xoe),e(xoe,aze),e(em,nze),e(em,Tk),e(Tk,sze),e(em,lze),e(A,ize),e(A,om),e(om,$oe),e($oe,dze),e(om,cze),e(om,Mk),e(Mk,fze),e(om,mze),e(A,gze),e(A,rm),e(rm,koe),e(koe,hze),e(rm,pze),e(rm,Ek),e(Ek,_ze),e(rm,uze),e(A,bze),e(A,tm),e(tm,Soe),e(Soe,vze),e(tm,Fze),e(tm,Ck),e(Ck,Tze),e(tm,Mze),e(A,Eze),e(A,am),e(am,Roe),e(Roe,Cze),e(am,wze),e(am,wk),e(wk,Aze),e(am,yze),e(A,Lze),e(A,nm),e(nm,Poe),e(Poe,xze),e(nm,$ze),e(nm,Ak),e(Ak,kze),e(nm,Sze),e(A,Rze),e(A,sm),e(sm,Boe),e(Boe,Pze),e(sm,Bze),e(sm,yk),e(yk,Ize),e(sm,qze),e(A,Nze),e(A,lm),e(lm,Ioe),e(Ioe,jze),e(lm,Dze),e(lm,Lk),e(Lk,Gze),e(lm,Oze),e(A,Vze),e(A,im),e(im,qoe),e(qoe,Xze),e(im,zze),e(im,xk),e(xk,Wze),e(im,Qze),e(A,Hze),e(A,dm),e(dm,Noe),e(Noe,Uze),e(dm,Jze),e(dm,$k),e($k,Yze),e(dm,Kze),e(A,Zze),e(A,cm),e(cm,joe),e(joe,eWe),e(cm,oWe),e(cm,kk),e(kk,rWe),e(cm,tWe),e(A,aWe),e(A,fm),e(fm,Doe),e(Doe,nWe),e(fm,sWe),e(fm,Sk),e(Sk,lWe),e(fm,iWe),e(A,dWe),e(A,mm),e(mm,Goe),e(Goe,cWe),e(mm,fWe),e(mm,Rk),e(Rk,mWe),e(mm,gWe),e(A,hWe),e(A,gm),e(gm,Ooe),e(Ooe,pWe),e(gm,_We),e(gm,Pk),e(Pk,uWe),e(gm,bWe),e(A,vWe),e(A,hm),e(hm,Voe),e(Voe,FWe),e(hm,TWe),e(hm,Bk),e(Bk,MWe),e(hm,EWe),e(A,CWe),e(A,pm),e(pm,Xoe),e(Xoe,wWe),e(pm,AWe),e(pm,Ik),e(Ik,yWe),e(pm,LWe),e(A,xWe),e(A,_m),e(_m,zoe),e(zoe,$We),e(_m,kWe),e(_m,qk),e(qk,SWe),e(_m,RWe),e(A,PWe),e(A,um),e(um,Woe),e(Woe,BWe),e(um,IWe),e(um,Nk),e(Nk,qWe),e(um,NWe),e(A,jWe),e(A,bm),e(bm,Qoe),e(Qoe,DWe),e(bm,GWe),e(bm,jk),e(jk,OWe),e(bm,VWe),e(A,XWe),e(A,vm),e(vm,Hoe),e(Hoe,zWe),e(vm,WWe),e(vm,Dk),e(Dk,QWe),e(vm,HWe),e(A,UWe),e(A,Fm),e(Fm,Uoe),e(Uoe,JWe),e(Fm,YWe),e(Fm,Gk),e(Gk,KWe),e(Fm,ZWe),e(A,eQe),e(A,Tm),e(Tm,Joe),e(Joe,oQe),e(Tm,rQe),e(Tm,Ok),e(Ok,tQe),e(Tm,aQe),e(A,nQe),e(A,Mm),e(Mm,Yoe),e(Yoe,sQe),e(Mm,lQe),e(Mm,Vk),e(Vk,iQe),e(Mm,dQe),e(A,cQe),e(A,Em),e(Em,Koe),e(Koe,fQe),e(Em,mQe),e(Em,Xk),e(Xk,gQe),e(Em,hQe),e(A,pQe),e(A,Cm),e(Cm,Zoe),e(Zoe,_Qe),e(Cm,uQe),e(Cm,zk),e(zk,bQe),e(Cm,vQe),e(A,FQe),e(A,wm),e(wm,ere),e(ere,TQe),e(wm,MQe),e(wm,Wk),e(Wk,EQe),e(wm,CQe),e(A,wQe),e(A,Am),e(Am,ore),e(ore,AQe),e(Am,yQe),e(Am,Qk),e(Qk,LQe),e(Am,xQe),e(A,$Qe),e(A,ym),e(ym,rre),e(rre,kQe),e(ym,SQe),e(ym,Hk),e(Hk,RQe),e(ym,PQe),e(A,BQe),e(A,Lm),e(Lm,tre),e(tre,IQe),e(Lm,qQe),e(Lm,Uk),e(Uk,NQe),e(Lm,jQe),e(A,DQe),e(A,xm),e(xm,are),e(are,GQe),e(xm,OQe),e(xm,Jk),e(Jk,VQe),e(xm,XQe),e(A,zQe),e(A,$m),e($m,nre),e(nre,WQe),e($m,QQe),e($m,Yk),e(Yk,HQe),e($m,UQe),e(A,JQe),e(A,km),e(km,sre),e(sre,YQe),e(km,KQe),e(km,Kk),e(Kk,ZQe),e(km,eHe),e(A,oHe),e(A,Sm),e(Sm,lre),e(lre,rHe),e(Sm,tHe),e(Sm,Zk),e(Zk,aHe),e(Sm,nHe),e(A,sHe),e(A,Rm),e(Rm,ire),e(ire,lHe),e(Rm,iHe),e(Rm,eS),e(eS,dHe),e(Rm,cHe),e(A,fHe),e(A,Pm),e(Pm,dre),e(dre,mHe),e(Pm,gHe),e(Pm,oS),e(oS,hHe),e(Pm,pHe),e(A,_He),e(A,Bm),e(Bm,cre),e(cre,uHe),e(Bm,bHe),e(Bm,rS),e(rS,vHe),e(Bm,FHe),e(A,THe),e(A,Im),e(Im,fre),e(fre,MHe),e(Im,EHe),e(Im,tS),e(tS,CHe),e(Im,wHe),e(A,AHe),e(A,qm),e(qm,mre),e(mre,yHe),e(qm,LHe),e(qm,aS),e(aS,xHe),e(qm,$He),e(A,kHe),e(A,Nm),e(Nm,gre),e(gre,SHe),e(Nm,RHe),e(Nm,nS),e(nS,PHe),e(Nm,BHe),e(A,IHe),e(A,jm),e(jm,hre),e(hre,qHe),e(jm,NHe),e(jm,sS),e(sS,jHe),e(jm,DHe),e(A,GHe),e(A,Dm),e(Dm,pre),e(pre,OHe),e(Dm,VHe),e(Dm,lS),e(lS,XHe),e(Dm,zHe),e(A,WHe),e(A,Gm),e(Gm,_re),e(_re,QHe),e(Gm,HHe),e(Gm,iS),e(iS,UHe),e(Gm,JHe),e(A,YHe),e(A,Om),e(Om,ure),e(ure,KHe),e(Om,ZHe),e(Om,dS),e(dS,eUe),e(Om,oUe),e(A,rUe),e(A,Vm),e(Vm,bre),e(bre,tUe),e(Vm,aUe),e(Vm,cS),e(cS,nUe),e(Vm,sUe),e(A,lUe),e(A,Xm),e(Xm,vre),e(vre,iUe),e(Xm,dUe),e(Xm,fS),e(fS,cUe),e(Xm,fUe),e(A,mUe),e(A,zm),e(zm,Fre),e(Fre,gUe),e(zm,hUe),e(zm,mS),e(mS,pUe),e(zm,_Ue),e(A,uUe),e(A,Wm),e(Wm,Tre),e(Tre,bUe),e(Wm,vUe),e(Wm,gS),e(gS,FUe),e(Wm,TUe),e(A,MUe),e(A,Qm),e(Qm,Mre),e(Mre,EUe),e(Qm,CUe),e(Qm,hS),e(hS,wUe),e(Qm,AUe),e(A,yUe),e(A,Hm),e(Hm,Ere),e(Ere,LUe),e(Hm,xUe),e(Hm,pS),e(pS,$Ue),e(Hm,kUe),e(A,SUe),e(A,Um),e(Um,Cre),e(Cre,RUe),e(Um,PUe),e(Um,_S),e(_S,BUe),e(Um,IUe),e(A,qUe),e(A,Jm),e(Jm,wre),e(wre,NUe),e(Jm,jUe),e(Jm,uS),e(uS,DUe),e(Jm,GUe),e(A,OUe),e(A,Ym),e(Ym,Are),e(Are,VUe),e(Ym,XUe),e(Ym,bS),e(bS,zUe),e(Ym,WUe),e(A,QUe),e(A,Km),e(Km,yre),e(yre,HUe),e(Km,UUe),e(Km,vS),e(vS,JUe),e(Km,YUe),e(A,KUe),e(A,Zm),e(Zm,Lre),e(Lre,ZUe),e(Zm,eJe),e(Zm,FS),e(FS,oJe),e(Zm,rJe),e(A,tJe),e(A,eg),e(eg,xre),e(xre,aJe),e(eg,nJe),e(eg,TS),e(TS,sJe),e(eg,lJe),e(A,iJe),e(A,og),e(og,$re),e($re,dJe),e(og,cJe),e(og,MS),e(MS,fJe),e(og,mJe),e(A,gJe),e(A,rg),e(rg,kre),e(kre,hJe),e(rg,pJe),e(rg,ES),e(ES,_Je),e(rg,uJe),e(A,bJe),e(A,tg),e(tg,Sre),e(Sre,vJe),e(tg,FJe),e(tg,CS),e(CS,TJe),e(tg,MJe),e(A,EJe),e(A,ag),e(ag,Rre),e(Rre,CJe),e(ag,wJe),e(ag,wS),e(wS,AJe),e(ag,yJe),e(A,LJe),e(A,ng),e(ng,Pre),e(Pre,xJe),e(ng,$Je),e(ng,AS),e(AS,kJe),e(ng,SJe),e(A,RJe),e(A,sg),e(sg,Bre),e(Bre,PJe),e(sg,BJe),e(sg,yS),e(yS,IJe),e(sg,qJe),e(A,NJe),e(A,lg),e(lg,Ire),e(Ire,jJe),e(lg,DJe),e(lg,LS),e(LS,GJe),e(lg,OJe),e(A,VJe),e(A,ig),e(ig,qre),e(qre,XJe),e(ig,zJe),e(ig,xS),e(xS,WJe),e(ig,QJe),e(A,HJe),e(A,dg),e(dg,Nre),e(Nre,UJe),e(dg,JJe),e(dg,$S),e($S,YJe),e(dg,KJe),e(A,ZJe),e(A,cg),e(cg,jre),e(jre,eYe),e(cg,oYe),e(cg,kS),e(kS,rYe),e(cg,tYe),e(A,aYe),e(A,fg),e(fg,Dre),e(Dre,nYe),e(fg,sYe),e(fg,SS),e(SS,lYe),e(fg,iYe),e(A,dYe),e(A,mg),e(mg,Gre),e(Gre,cYe),e(mg,fYe),e(mg,RS),e(RS,mYe),e(mg,gYe),e(A,hYe),e(A,gg),e(gg,Ore),e(Ore,pYe),e(gg,_Ye),e(gg,PS),e(PS,uYe),e(gg,bYe),e(A,vYe),e(A,hg),e(hg,Vre),e(Vre,FYe),e(hg,TYe),e(hg,BS),e(BS,MYe),e(hg,EYe),e(A,CYe),e(A,pg),e(pg,Xre),e(Xre,wYe),e(pg,AYe),e(pg,IS),e(IS,yYe),e(pg,LYe),e(A,xYe),e(A,_g),e(_g,zre),e(zre,$Ye),e(_g,kYe),e(_g,qS),e(qS,SYe),e(_g,RYe),e(A,PYe),e(A,ug),e(ug,Wre),e(Wre,BYe),e(ug,IYe),e(ug,NS),e(NS,qYe),e(ug,NYe),e(A,jYe),e(A,bg),e(bg,Qre),e(Qre,DYe),e(bg,GYe),e(bg,jS),e(jS,OYe),e(bg,VYe),e(A,XYe),e(A,vg),e(vg,Hre),e(Hre,zYe),e(vg,WYe),e(vg,DS),e(DS,QYe),e(vg,HYe),e(Er,UYe),M(Fg,Er,null),e(Co,JYe),e(Co,Tg),M(w6,Tg,null),e(Tg,YYe),e(Tg,Ure),e(Ure,KYe),b(f,Mqe,u),b(f,Fi,u),e(Fi,Mg),e(Mg,Jre),M(A6,Jre,null),e(Fi,ZYe),e(Fi,Yre),e(Yre,eKe),b(f,Eqe,u),b(f,wo,u),M(y6,wo,null),e(wo,oKe),e(wo,L6),e(L6,rKe),e(L6,GS),e(GS,tKe),e(L6,aKe),e(wo,nKe),e(wo,x6),e(x6,sKe),e(x6,Kre),e(Kre,lKe),e(x6,iKe),e(wo,dKe),e(wo,Cr),M($6,Cr,null),e(Cr,cKe),e(Cr,Zre),e(Zre,fKe),e(Cr,mKe),e(Cr,Aa),e(Aa,gKe),e(Aa,ete),e(ete,hKe),e(Aa,pKe),e(Aa,ote),e(ote,_Ke),e(Aa,uKe),e(Aa,rte),e(rte,bKe),e(Aa,vKe),e(Cr,FKe),e(Cr,k),e(k,Sn),e(Sn,tte),e(tte,TKe),e(Sn,MKe),e(Sn,OS),e(OS,EKe),e(Sn,CKe),e(Sn,VS),e(VS,wKe),e(Sn,AKe),e(k,yKe),e(k,Rn),e(Rn,ate),e(ate,LKe),e(Rn,xKe),e(Rn,XS),e(XS,$Ke),e(Rn,kKe),e(Rn,zS),e(zS,SKe),e(Rn,RKe),e(k,PKe),e(k,Pn),e(Pn,nte),e(nte,BKe),e(Pn,IKe),e(Pn,WS),e(WS,qKe),e(Pn,NKe),e(Pn,QS),e(QS,jKe),e(Pn,DKe),e(k,GKe),e(k,Eg),e(Eg,ste),e(ste,OKe),e(Eg,VKe),e(Eg,HS),e(HS,XKe),e(Eg,zKe),e(k,WKe),e(k,Bn),e(Bn,lte),e(lte,QKe),e(Bn,HKe),e(Bn,US),e(US,UKe),e(Bn,JKe),e(Bn,JS),e(JS,YKe),e(Bn,KKe),e(k,ZKe),e(k,Cg),e(Cg,ite),e(ite,eZe),e(Cg,oZe),e(Cg,YS),e(YS,rZe),e(Cg,tZe),e(k,aZe),e(k,wg),e(wg,dte),e(dte,nZe),e(wg,sZe),e(wg,KS),e(KS,lZe),e(wg,iZe),e(k,dZe),e(k,Ag),e(Ag,cte),e(cte,cZe),e(Ag,fZe),e(Ag,ZS),e(ZS,mZe),e(Ag,gZe),e(k,hZe),e(k,In),e(In,fte),e(fte,pZe),e(In,_Ze),e(In,eR),e(eR,uZe),e(In,bZe),e(In,oR),e(oR,vZe),e(In,FZe),e(k,TZe),e(k,qn),e(qn,mte),e(mte,MZe),e(qn,EZe),e(qn,rR),e(rR,CZe),e(qn,wZe),e(qn,tR),e(tR,AZe),e(qn,yZe),e(k,LZe),e(k,Nn),e(Nn,gte),e(gte,xZe),e(Nn,$Ze),e(Nn,aR),e(aR,kZe),e(Nn,SZe),e(Nn,nR),e(nR,RZe),e(Nn,PZe),e(k,BZe),e(k,yg),e(yg,hte),e(hte,IZe),e(yg,qZe),e(yg,sR),e(sR,NZe),e(yg,jZe),e(k,DZe),e(k,Lg),e(Lg,pte),e(pte,GZe),e(Lg,OZe),e(Lg,lR),e(lR,VZe),e(Lg,XZe),e(k,zZe),e(k,jn),e(jn,_te),e(_te,WZe),e(jn,QZe),e(jn,iR),e(iR,HZe),e(jn,UZe),e(jn,dR),e(dR,JZe),e(jn,YZe),e(k,KZe),e(k,xg),e(xg,ute),e(ute,ZZe),e(xg,eeo),e(xg,cR),e(cR,oeo),e(xg,reo),e(k,teo),e(k,Dn),e(Dn,bte),e(bte,aeo),e(Dn,neo),e(Dn,fR),e(fR,seo),e(Dn,leo),e(Dn,mR),e(mR,ieo),e(Dn,deo),e(k,ceo),e(k,Gn),e(Gn,vte),e(vte,feo),e(Gn,meo),e(Gn,gR),e(gR,geo),e(Gn,heo),e(Gn,hR),e(hR,peo),e(Gn,_eo),e(k,ueo),e(k,On),e(On,Fte),e(Fte,beo),e(On,veo),e(On,pR),e(pR,Feo),e(On,Teo),e(On,_R),e(_R,Meo),e(On,Eeo),e(k,Ceo),e(k,$g),e($g,Tte),e(Tte,weo),e($g,Aeo),e($g,uR),e(uR,yeo),e($g,Leo),e(k,xeo),e(k,Vn),e(Vn,Mte),e(Mte,$eo),e(Vn,keo),e(Vn,bR),e(bR,Seo),e(Vn,Reo),e(Vn,vR),e(vR,Peo),e(Vn,Beo),e(k,Ieo),e(k,Xn),e(Xn,Ete),e(Ete,qeo),e(Xn,Neo),e(Xn,FR),e(FR,jeo),e(Xn,Deo),e(Xn,TR),e(TR,Geo),e(Xn,Oeo),e(k,Veo),e(k,zn),e(zn,Cte),e(Cte,Xeo),e(zn,zeo),e(zn,MR),e(MR,Weo),e(zn,Qeo),e(zn,ER),e(ER,Heo),e(zn,Ueo),e(k,Jeo),e(k,Wn),e(Wn,wte),e(wte,Yeo),e(Wn,Keo),e(Wn,CR),e(CR,Zeo),e(Wn,eoo),e(Wn,wR),e(wR,ooo),e(Wn,roo),e(k,too),e(k,Qn),e(Qn,Ate),e(Ate,aoo),e(Qn,noo),e(Qn,AR),e(AR,soo),e(Qn,loo),e(Qn,yR),e(yR,ioo),e(Qn,doo),e(k,coo),e(k,Hn),e(Hn,yte),e(yte,foo),e(Hn,moo),e(Hn,LR),e(LR,goo),e(Hn,hoo),e(Hn,xR),e(xR,poo),e(Hn,_oo),e(k,uoo),e(k,kg),e(kg,Lte),e(Lte,boo),e(kg,voo),e(kg,$R),e($R,Foo),e(kg,Too),e(k,Moo),e(k,Un),e(Un,xte),e(xte,Eoo),e(Un,Coo),e(Un,kR),e(kR,woo),e(Un,Aoo),e(Un,SR),e(SR,yoo),e(Un,Loo),e(k,xoo),e(k,Sg),e(Sg,$te),e($te,$oo),e(Sg,koo),e(Sg,RR),e(RR,Soo),e(Sg,Roo),e(k,Poo),e(k,Jn),e(Jn,kte),e(kte,Boo),e(Jn,Ioo),e(Jn,PR),e(PR,qoo),e(Jn,Noo),e(Jn,BR),e(BR,joo),e(Jn,Doo),e(k,Goo),e(k,Yn),e(Yn,Ste),e(Ste,Ooo),e(Yn,Voo),e(Yn,IR),e(IR,Xoo),e(Yn,zoo),e(Yn,qR),e(qR,Woo),e(Yn,Qoo),e(k,Hoo),e(k,Kn),e(Kn,Rte),e(Rte,Uoo),e(Kn,Joo),e(Kn,NR),e(NR,Yoo),e(Kn,Koo),e(Kn,jR),e(jR,Zoo),e(Kn,ero),e(k,oro),e(k,Zn),e(Zn,Pte),e(Pte,rro),e(Zn,tro),e(Zn,DR),e(DR,aro),e(Zn,nro),e(Zn,GR),e(GR,sro),e(Zn,lro),e(k,iro),e(k,es),e(es,Bte),e(Bte,dro),e(es,cro),e(es,OR),e(OR,fro),e(es,mro),e(es,VR),e(VR,gro),e(es,hro),e(k,pro),e(k,Rg),e(Rg,Ite),e(Ite,_ro),e(Rg,uro),e(Rg,XR),e(XR,bro),e(Rg,vro),e(k,Fro),e(k,os),e(os,qte),e(qte,Tro),e(os,Mro),e(os,zR),e(zR,Ero),e(os,Cro),e(os,WR),e(WR,wro),e(os,Aro),e(k,yro),e(k,rs),e(rs,Nte),e(Nte,Lro),e(rs,xro),e(rs,QR),e(QR,$ro),e(rs,kro),e(rs,HR),e(HR,Sro),e(rs,Rro),e(k,Pro),e(k,ts),e(ts,jte),e(jte,Bro),e(ts,Iro),e(ts,UR),e(UR,qro),e(ts,Nro),e(ts,JR),e(JR,jro),e(ts,Dro),e(k,Gro),e(k,as),e(as,Dte),e(Dte,Oro),e(as,Vro),e(as,YR),e(YR,Xro),e(as,zro),e(as,KR),e(KR,Wro),e(as,Qro),e(k,Hro),e(k,ns),e(ns,Gte),e(Gte,Uro),e(ns,Jro),e(ns,ZR),e(ZR,Yro),e(ns,Kro),e(ns,eP),e(eP,Zro),e(ns,eto),e(k,oto),e(k,ss),e(ss,Ote),e(Ote,rto),e(ss,tto),e(ss,oP),e(oP,ato),e(ss,nto),e(ss,rP),e(rP,sto),e(ss,lto),e(k,ito),e(k,Pg),e(Pg,Vte),e(Vte,dto),e(Pg,cto),e(Pg,tP),e(tP,fto),e(Pg,mto),e(k,gto),e(k,ls),e(ls,Xte),e(Xte,hto),e(ls,pto),e(ls,aP),e(aP,_to),e(ls,uto),e(ls,nP),e(nP,bto),e(ls,vto),e(k,Fto),e(k,Bg),e(Bg,zte),e(zte,Tto),e(Bg,Mto),e(Bg,sP),e(sP,Eto),e(Bg,Cto),e(k,wto),e(k,Ig),e(Ig,Wte),e(Wte,Ato),e(Ig,yto),e(Ig,lP),e(lP,Lto),e(Ig,xto),e(k,$to),e(k,is),e(is,Qte),e(Qte,kto),e(is,Sto),e(is,iP),e(iP,Rto),e(is,Pto),e(is,dP),e(dP,Bto),e(is,Ito),e(k,qto),e(k,ds),e(ds,Hte),e(Hte,Nto),e(ds,jto),e(ds,cP),e(cP,Dto),e(ds,Gto),e(ds,fP),e(fP,Oto),e(ds,Vto),e(k,Xto),e(k,cs),e(cs,Ute),e(Ute,zto),e(cs,Wto),e(cs,mP),e(mP,Qto),e(cs,Hto),e(cs,gP),e(gP,Uto),e(cs,Jto),e(k,Yto),e(k,qg),e(qg,Jte),e(Jte,Kto),e(qg,Zto),e(qg,hP),e(hP,eao),e(qg,oao),e(k,rao),e(k,fs),e(fs,Yte),e(Yte,tao),e(fs,aao),e(fs,pP),e(pP,nao),e(fs,sao),e(fs,_P),e(_P,lao),e(fs,iao),e(k,dao),e(k,ms),e(ms,Kte),e(Kte,cao),e(ms,fao),e(ms,uP),e(uP,mao),e(ms,gao),e(ms,bP),e(bP,hao),e(ms,pao),e(k,_ao),e(k,gs),e(gs,Zte),e(Zte,uao),e(gs,bao),e(gs,vP),e(vP,vao),e(gs,Fao),e(gs,FP),e(FP,Tao),e(gs,Mao),e(k,Eao),e(k,hs),e(hs,eae),e(eae,Cao),e(hs,wao),e(hs,TP),e(TP,Aao),e(hs,yao),e(hs,MP),e(MP,Lao),e(hs,xao),e(k,$ao),e(k,ps),e(ps,oae),e(oae,kao),e(ps,Sao),e(ps,EP),e(EP,Rao),e(ps,Pao),e(ps,CP),e(CP,Bao),e(ps,Iao),e(k,qao),e(k,Ng),e(Ng,rae),e(rae,Nao),e(Ng,jao),e(Ng,wP),e(wP,Dao),e(Ng,Gao),e(k,Oao),e(k,_s),e(_s,tae),e(tae,Vao),e(_s,Xao),e(_s,AP),e(AP,zao),e(_s,Wao),e(_s,yP),e(yP,Qao),e(_s,Hao),e(k,Uao),e(k,jg),e(jg,aae),e(aae,Jao),e(jg,Yao),e(jg,LP),e(LP,Kao),e(jg,Zao),e(k,eno),e(k,Dg),e(Dg,nae),e(nae,ono),e(Dg,rno),e(Dg,xP),e(xP,tno),e(Dg,ano),e(k,nno),e(k,Gg),e(Gg,sae),e(sae,sno),e(Gg,lno),e(Gg,$P),e($P,ino),e(Gg,dno),e(k,cno),e(k,Og),e(Og,lae),e(lae,fno),e(Og,mno),e(Og,kP),e(kP,gno),e(Og,hno),e(k,pno),e(k,us),e(us,iae),e(iae,_no),e(us,uno),e(us,SP),e(SP,bno),e(us,vno),e(us,RP),e(RP,Fno),e(us,Tno),e(k,Mno),e(k,Vg),e(Vg,dae),e(dae,Eno),e(Vg,Cno),e(Vg,PP),e(PP,wno),e(Vg,Ano),e(k,yno),e(k,bs),e(bs,cae),e(cae,Lno),e(bs,xno),e(bs,BP),e(BP,$no),e(bs,kno),e(bs,IP),e(IP,Sno),e(bs,Rno),e(k,Pno),e(k,vs),e(vs,fae),e(fae,Bno),e(vs,Ino),e(vs,qP),e(qP,qno),e(vs,Nno),e(vs,NP),e(NP,jno),e(vs,Dno),e(k,Gno),e(k,Fs),e(Fs,mae),e(mae,Ono),e(Fs,Vno),e(Fs,jP),e(jP,Xno),e(Fs,zno),e(Fs,DP),e(DP,Wno),e(Fs,Qno),e(k,Hno),e(k,Ts),e(Ts,gae),e(gae,Uno),e(Ts,Jno),e(Ts,GP),e(GP,Yno),e(Ts,Kno),e(Ts,OP),e(OP,Zno),e(Ts,eso),e(k,oso),e(k,Ms),e(Ms,hae),e(hae,rso),e(Ms,tso),e(Ms,VP),e(VP,aso),e(Ms,nso),e(Ms,XP),e(XP,sso),e(Ms,lso),e(k,iso),e(k,Es),e(Es,pae),e(pae,dso),e(Es,cso),e(Es,zP),e(zP,fso),e(Es,mso),e(Es,WP),e(WP,gso),e(Es,hso),e(k,pso),e(k,Xg),e(Xg,_ae),e(_ae,_so),e(Xg,uso),e(Xg,QP),e(QP,bso),e(Xg,vso),e(k,Fso),e(k,zg),e(zg,uae),e(uae,Tso),e(zg,Mso),e(zg,HP),e(HP,Eso),e(zg,Cso),e(k,wso),e(k,Cs),e(Cs,bae),e(bae,Aso),e(Cs,yso),e(Cs,UP),e(UP,Lso),e(Cs,xso),e(Cs,JP),e(JP,$so),e(Cs,kso),e(k,Sso),e(k,ws),e(ws,vae),e(vae,Rso),e(ws,Pso),e(ws,YP),e(YP,Bso),e(ws,Iso),e(ws,KP),e(KP,qso),e(ws,Nso),e(k,jso),e(k,As),e(As,Fae),e(Fae,Dso),e(As,Gso),e(As,ZP),e(ZP,Oso),e(As,Vso),e(As,eB),e(eB,Xso),e(As,zso),e(k,Wso),e(k,Wg),e(Wg,Tae),e(Tae,Qso),e(Wg,Hso),e(Wg,oB),e(oB,Uso),e(Wg,Jso),e(k,Yso),e(k,Qg),e(Qg,Mae),e(Mae,Kso),e(Qg,Zso),e(Qg,rB),e(rB,elo),e(Qg,olo),e(k,rlo),e(k,Hg),e(Hg,Eae),e(Eae,tlo),e(Hg,alo),e(Hg,tB),e(tB,nlo),e(Hg,slo),e(k,llo),e(k,ys),e(ys,Cae),e(Cae,ilo),e(ys,dlo),e(ys,aB),e(aB,clo),e(ys,flo),e(ys,nB),e(nB,mlo),e(ys,glo),e(k,hlo),e(k,Ug),e(Ug,wae),e(wae,plo),e(Ug,_lo),e(Ug,sB),e(sB,ulo),e(Ug,blo),e(k,vlo),e(k,Jg),e(Jg,Aae),e(Aae,Flo),e(Jg,Tlo),e(Jg,lB),e(lB,Mlo),e(Jg,Elo),e(k,Clo),e(k,Yg),e(Yg,yae),e(yae,wlo),e(Yg,Alo),e(Yg,iB),e(iB,ylo),e(Yg,Llo),e(k,xlo),e(k,Ls),e(Ls,Lae),e(Lae,$lo),e(Ls,klo),e(Ls,dB),e(dB,Slo),e(Ls,Rlo),e(Ls,cB),e(cB,Plo),e(Ls,Blo),e(k,Ilo),e(k,Kg),e(Kg,xae),e(xae,qlo),e(Kg,Nlo),e(Kg,fB),e(fB,jlo),e(Kg,Dlo),e(k,Glo),e(k,Zg),e(Zg,$ae),e($ae,Olo),e(Zg,Vlo),e(Zg,mB),e(mB,Xlo),e(Zg,zlo),e(k,Wlo),e(k,xs),e(xs,kae),e(kae,Qlo),e(xs,Hlo),e(xs,gB),e(gB,Ulo),e(xs,Jlo),e(xs,hB),e(hB,Ylo),e(xs,Klo),e(k,Zlo),e(k,$s),e($s,Sae),e(Sae,eio),e($s,oio),e($s,pB),e(pB,rio),e($s,tio),e($s,_B),e(_B,aio),e($s,nio),e(k,sio),e(k,ks),e(ks,Rae),e(Rae,lio),e(ks,iio),e(ks,uB),e(uB,dio),e(ks,cio),e(ks,bB),e(bB,fio),e(ks,mio),e(k,gio),e(k,Ss),e(Ss,Pae),e(Pae,hio),e(Ss,pio),e(Ss,vB),e(vB,_io),e(Ss,uio),e(Ss,FB),e(FB,bio),e(Ss,vio),e(Cr,Fio),M(eh,Cr,null),e(wo,Tio),e(wo,oh),M(k6,oh,null),e(oh,Mio),e(oh,Bae),e(Bae,Eio),b(f,Cqe,u),b(f,Ti,u),e(Ti,rh),e(rh,Iae),M(S6,Iae,null),e(Ti,Cio),e(Ti,qae),e(qae,wio),b(f,wqe,u),b(f,Ao,u),M(R6,Ao,null),e(Ao,Aio),e(Ao,P6),e(P6,yio),e(P6,TB),e(TB,Lio),e(P6,xio),e(Ao,$io),e(Ao,B6),e(B6,kio),e(B6,Nae),e(Nae,Sio),e(B6,Rio),e(Ao,Pio),e(Ao,He),M(I6,He,null),e(He,Bio),e(He,jae),e(jae,Iio),e(He,qio),e(He,ya),e(ya,Nio),e(ya,Dae),e(Dae,jio),e(ya,Dio),e(ya,Gae),e(Gae,Gio),e(ya,Oio),e(ya,Oae),e(Oae,Vio),e(ya,Xio),e(He,zio),e(He,Z),e(Z,th),e(th,Vae),e(Vae,Wio),e(th,Qio),e(th,MB),e(MB,Hio),e(th,Uio),e(Z,Jio),e(Z,ah),e(ah,Xae),e(Xae,Yio),e(ah,Kio),e(ah,EB),e(EB,Zio),e(ah,edo),e(Z,odo),e(Z,nh),e(nh,zae),e(zae,rdo),e(nh,tdo),e(nh,CB),e(CB,ado),e(nh,ndo),e(Z,sdo),e(Z,sh),e(sh,Wae),e(Wae,ldo),e(sh,ido),e(sh,wB),e(wB,ddo),e(sh,cdo),e(Z,fdo),e(Z,lh),e(lh,Qae),e(Qae,mdo),e(lh,gdo),e(lh,AB),e(AB,hdo),e(lh,pdo),e(Z,_do),e(Z,ih),e(ih,Hae),e(Hae,udo),e(ih,bdo),e(ih,yB),e(yB,vdo),e(ih,Fdo),e(Z,Tdo),e(Z,dh),e(dh,Uae),e(Uae,Mdo),e(dh,Edo),e(dh,LB),e(LB,Cdo),e(dh,wdo),e(Z,Ado),e(Z,ch),e(ch,Jae),e(Jae,ydo),e(ch,Ldo),e(ch,xB),e(xB,xdo),e(ch,$do),e(Z,kdo),e(Z,fh),e(fh,Yae),e(Yae,Sdo),e(fh,Rdo),e(fh,$B),e($B,Pdo),e(fh,Bdo),e(Z,Ido),e(Z,mh),e(mh,Kae),e(Kae,qdo),e(mh,Ndo),e(mh,kB),e(kB,jdo),e(mh,Ddo),e(Z,Gdo),e(Z,gh),e(gh,Zae),e(Zae,Odo),e(gh,Vdo),e(gh,SB),e(SB,Xdo),e(gh,zdo),e(Z,Wdo),e(Z,hh),e(hh,ene),e(ene,Qdo),e(hh,Hdo),e(hh,RB),e(RB,Udo),e(hh,Jdo),e(Z,Ydo),e(Z,ph),e(ph,one),e(one,Kdo),e(ph,Zdo),e(ph,PB),e(PB,eco),e(ph,oco),e(Z,rco),e(Z,_h),e(_h,rne),e(rne,tco),e(_h,aco),e(_h,BB),e(BB,nco),e(_h,sco),e(Z,lco),e(Z,uh),e(uh,tne),e(tne,ico),e(uh,dco),e(uh,IB),e(IB,cco),e(uh,fco),e(Z,mco),e(Z,bh),e(bh,ane),e(ane,gco),e(bh,hco),e(bh,qB),e(qB,pco),e(bh,_co),e(Z,uco),e(Z,vh),e(vh,nne),e(nne,bco),e(vh,vco),e(vh,NB),e(NB,Fco),e(vh,Tco),e(Z,Mco),e(Z,Fh),e(Fh,sne),e(sne,Eco),e(Fh,Cco),e(Fh,jB),e(jB,wco),e(Fh,Aco),e(Z,yco),e(Z,Th),e(Th,lne),e(lne,Lco),e(Th,xco),e(Th,DB),e(DB,$co),e(Th,kco),e(Z,Sco),e(Z,Mh),e(Mh,ine),e(ine,Rco),e(Mh,Pco),e(Mh,GB),e(GB,Bco),e(Mh,Ico),e(Z,qco),e(Z,Eh),e(Eh,dne),e(dne,Nco),e(Eh,jco),e(Eh,OB),e(OB,Dco),e(Eh,Gco),e(Z,Oco),e(Z,Ch),e(Ch,cne),e(cne,Vco),e(Ch,Xco),e(Ch,VB),e(VB,zco),e(Ch,Wco),e(Z,Qco),e(Z,wh),e(wh,fne),e(fne,Hco),e(wh,Uco),e(wh,XB),e(XB,Jco),e(wh,Yco),e(Z,Kco),e(Z,Ah),e(Ah,mne),e(mne,Zco),e(Ah,efo),e(Ah,zB),e(zB,ofo),e(Ah,rfo),e(Z,tfo),e(Z,yh),e(yh,gne),e(gne,afo),e(yh,nfo),e(yh,WB),e(WB,sfo),e(yh,lfo),e(Z,ifo),e(Z,Lh),e(Lh,hne),e(hne,dfo),e(Lh,cfo),e(Lh,QB),e(QB,ffo),e(Lh,mfo),e(Z,gfo),e(Z,xh),e(xh,pne),e(pne,hfo),e(xh,pfo),e(xh,HB),e(HB,_fo),e(xh,ufo),e(He,bfo),M($h,He,null),e(He,vfo),M(kh,He,null),e(Ao,Ffo),e(Ao,Sh),M(q6,Sh,null),e(Sh,Tfo),e(Sh,_ne),e(_ne,Mfo),b(f,Aqe,u),b(f,Mi,u),e(Mi,Rh),e(Rh,une),M(N6,une,null),e(Mi,Efo),e(Mi,bne),e(bne,Cfo),b(f,yqe,u),b(f,yo,u),M(j6,yo,null),e(yo,wfo),e(yo,D6),e(D6,Afo),e(D6,UB),e(UB,yfo),e(D6,Lfo),e(yo,xfo),e(yo,G6),e(G6,$fo),e(G6,vne),e(vne,kfo),e(G6,Sfo),e(yo,Rfo),e(yo,Ue),M(O6,Ue,null),e(Ue,Pfo),e(Ue,Fne),e(Fne,Bfo),e(Ue,Ifo),e(Ue,Ei),e(Ei,qfo),e(Ei,Tne),e(Tne,Nfo),e(Ei,jfo),e(Ei,Mne),e(Mne,Dfo),e(Ei,Gfo),e(Ue,Ofo),e(Ue,pe),e(pe,Ph),e(Ph,Ene),e(Ene,Vfo),e(Ph,Xfo),e(Ph,JB),e(JB,zfo),e(Ph,Wfo),e(pe,Qfo),e(pe,Bh),e(Bh,Cne),e(Cne,Hfo),e(Bh,Ufo),e(Bh,wne),e(wne,Jfo),e(Bh,Yfo),e(pe,Kfo),e(pe,Ih),e(Ih,Ane),e(Ane,Zfo),e(Ih,emo),e(Ih,YB),e(YB,omo),e(Ih,rmo),e(pe,tmo),e(pe,qh),e(qh,yne),e(yne,amo),e(qh,nmo),e(qh,KB),e(KB,smo),e(qh,lmo),e(pe,imo),e(pe,Nh),e(Nh,Lne),e(Lne,dmo),e(Nh,cmo),e(Nh,ZB),e(ZB,fmo),e(Nh,mmo),e(pe,gmo),e(pe,jh),e(jh,xne),e(xne,hmo),e(jh,pmo),e(jh,eI),e(eI,_mo),e(jh,umo),e(pe,bmo),e(pe,Dh),e(Dh,$ne),e($ne,vmo),e(Dh,Fmo),e(Dh,oI),e(oI,Tmo),e(Dh,Mmo),e(pe,Emo),e(pe,Gh),e(Gh,kne),e(kne,Cmo),e(Gh,wmo),e(Gh,rI),e(rI,Amo),e(Gh,ymo),e(pe,Lmo),e(pe,Oh),e(Oh,Sne),e(Sne,xmo),e(Oh,$mo),e(Oh,tI),e(tI,kmo),e(Oh,Smo),e(pe,Rmo),e(pe,Vh),e(Vh,Rne),e(Rne,Pmo),e(Vh,Bmo),e(Vh,aI),e(aI,Imo),e(Vh,qmo),e(pe,Nmo),e(pe,Xh),e(Xh,Pne),e(Pne,jmo),e(Xh,Dmo),e(Xh,nI),e(nI,Gmo),e(Xh,Omo),e(pe,Vmo),e(pe,zh),e(zh,Bne),e(Bne,Xmo),e(zh,zmo),e(zh,sI),e(sI,Wmo),e(zh,Qmo),e(pe,Hmo),e(pe,Wh),e(Wh,Ine),e(Ine,Umo),e(Wh,Jmo),e(Wh,lI),e(lI,Ymo),e(Wh,Kmo),e(pe,Zmo),e(pe,Qh),e(Qh,qne),e(qne,ego),e(Qh,ogo),e(Qh,iI),e(iI,rgo),e(Qh,tgo),e(pe,ago),e(pe,Hh),e(Hh,Nne),e(Nne,ngo),e(Hh,sgo),e(Hh,dI),e(dI,lgo),e(Hh,igo),e(pe,dgo),e(pe,Uh),e(Uh,jne),e(jne,cgo),e(Uh,fgo),e(Uh,cI),e(cI,mgo),e(Uh,ggo),e(Ue,hgo),M(Jh,Ue,null),e(Ue,pgo),M(Yh,Ue,null),e(yo,_go),e(yo,Kh),M(V6,Kh,null),e(Kh,ugo),e(Kh,Dne),e(Dne,bgo),b(f,Lqe,u),b(f,Ci,u),e(Ci,Zh),e(Zh,Gne),M(X6,Gne,null),e(Ci,vgo),e(Ci,One),e(One,Fgo),b(f,xqe,u),b(f,Lo,u),M(z6,Lo,null),e(Lo,Tgo),e(Lo,wi),e(wi,Mgo),e(wi,fI),e(fI,Ego),e(wi,Cgo),e(wi,mI),e(mI,wgo),e(wi,Ago),e(Lo,ygo),e(Lo,W6),e(W6,Lgo),e(W6,Vne),e(Vne,xgo),e(W6,$go),e(Lo,kgo),e(Lo,tt),M(Q6,tt,null),e(tt,Sgo),e(tt,Xne),e(Xne,Rgo),e(tt,Pgo),e(tt,Ai),e(Ai,Bgo),e(Ai,zne),e(zne,Igo),e(Ai,qgo),e(Ai,gI),e(gI,Ngo),e(Ai,jgo),e(tt,Dgo),M(ep,tt,null),e(Lo,Ggo),e(Lo,Je),M(H6,Je,null),e(Je,Ogo),e(Je,Wne),e(Wne,Vgo),e(Je,Xgo),e(Je,La),e(La,zgo),e(La,Qne),e(Qne,Wgo),e(La,Qgo),e(La,Hne),e(Hne,Hgo),e(La,Ugo),e(La,Une),e(Une,Jgo),e(La,Ygo),e(Je,Kgo),e(Je,x),e(x,op),e(op,Jne),e(Jne,Zgo),e(op,eho),e(op,hI),e(hI,oho),e(op,rho),e(x,tho),e(x,rp),e(rp,Yne),e(Yne,aho),e(rp,nho),e(rp,pI),e(pI,sho),e(rp,lho),e(x,iho),e(x,tp),e(tp,Kne),e(Kne,dho),e(tp,cho),e(tp,_I),e(_I,fho),e(tp,mho),e(x,gho),e(x,ap),e(ap,Zne),e(Zne,hho),e(ap,pho),e(ap,uI),e(uI,_ho),e(ap,uho),e(x,bho),e(x,np),e(np,ese),e(ese,vho),e(np,Fho),e(np,bI),e(bI,Tho),e(np,Mho),e(x,Eho),e(x,sp),e(sp,ose),e(ose,Cho),e(sp,who),e(sp,vI),e(vI,Aho),e(sp,yho),e(x,Lho),e(x,lp),e(lp,rse),e(rse,xho),e(lp,$ho),e(lp,FI),e(FI,kho),e(lp,Sho),e(x,Rho),e(x,ip),e(ip,tse),e(tse,Pho),e(ip,Bho),e(ip,TI),e(TI,Iho),e(ip,qho),e(x,Nho),e(x,dp),e(dp,ase),e(ase,jho),e(dp,Dho),e(dp,MI),e(MI,Gho),e(dp,Oho),e(x,Vho),e(x,cp),e(cp,nse),e(nse,Xho),e(cp,zho),e(cp,EI),e(EI,Who),e(cp,Qho),e(x,Hho),e(x,fp),e(fp,sse),e(sse,Uho),e(fp,Jho),e(fp,CI),e(CI,Yho),e(fp,Kho),e(x,Zho),e(x,mp),e(mp,lse),e(lse,epo),e(mp,opo),e(mp,wI),e(wI,rpo),e(mp,tpo),e(x,apo),e(x,gp),e(gp,ise),e(ise,npo),e(gp,spo),e(gp,AI),e(AI,lpo),e(gp,ipo),e(x,dpo),e(x,hp),e(hp,dse),e(dse,cpo),e(hp,fpo),e(hp,yI),e(yI,mpo),e(hp,gpo),e(x,hpo),e(x,pp),e(pp,cse),e(cse,ppo),e(pp,_po),e(pp,LI),e(LI,upo),e(pp,bpo),e(x,vpo),e(x,_p),e(_p,fse),e(fse,Fpo),e(_p,Tpo),e(_p,xI),e(xI,Mpo),e(_p,Epo),e(x,Cpo),e(x,up),e(up,mse),e(mse,wpo),e(up,Apo),e(up,$I),e($I,ypo),e(up,Lpo),e(x,xpo),e(x,bp),e(bp,gse),e(gse,$po),e(bp,kpo),e(bp,kI),e(kI,Spo),e(bp,Rpo),e(x,Ppo),e(x,vp),e(vp,hse),e(hse,Bpo),e(vp,Ipo),e(vp,SI),e(SI,qpo),e(vp,Npo),e(x,jpo),e(x,Fp),e(Fp,pse),e(pse,Dpo),e(Fp,Gpo),e(Fp,RI),e(RI,Opo),e(Fp,Vpo),e(x,Xpo),e(x,Tp),e(Tp,_se),e(_se,zpo),e(Tp,Wpo),e(Tp,PI),e(PI,Qpo),e(Tp,Hpo),e(x,Upo),e(x,Mp),e(Mp,use),e(use,Jpo),e(Mp,Ypo),e(Mp,BI),e(BI,Kpo),e(Mp,Zpo),e(x,e_o),e(x,Ep),e(Ep,bse),e(bse,o_o),e(Ep,r_o),e(Ep,II),e(II,t_o),e(Ep,a_o),e(x,n_o),e(x,Cp),e(Cp,vse),e(vse,s_o),e(Cp,l_o),e(Cp,qI),e(qI,i_o),e(Cp,d_o),e(x,c_o),e(x,wp),e(wp,Fse),e(Fse,f_o),e(wp,m_o),e(wp,NI),e(NI,g_o),e(wp,h_o),e(x,p_o),e(x,Ap),e(Ap,Tse),e(Tse,__o),e(Ap,u_o),e(Ap,jI),e(jI,b_o),e(Ap,v_o),e(x,F_o),e(x,yp),e(yp,Mse),e(Mse,T_o),e(yp,M_o),e(yp,DI),e(DI,E_o),e(yp,C_o),e(x,w_o),e(x,Lp),e(Lp,Ese),e(Ese,A_o),e(Lp,y_o),e(Lp,GI),e(GI,L_o),e(Lp,x_o),e(x,$_o),e(x,xp),e(xp,Cse),e(Cse,k_o),e(xp,S_o),e(xp,OI),e(OI,R_o),e(xp,P_o),e(x,B_o),e(x,$p),e($p,wse),e(wse,I_o),e($p,q_o),e($p,VI),e(VI,N_o),e($p,j_o),e(x,D_o),e(x,kp),e(kp,Ase),e(Ase,G_o),e(kp,O_o),e(kp,XI),e(XI,V_o),e(kp,X_o),e(x,z_o),e(x,Sp),e(Sp,yse),e(yse,W_o),e(Sp,Q_o),e(Sp,zI),e(zI,H_o),e(Sp,U_o),e(x,J_o),e(x,Rs),e(Rs,Lse),e(Lse,Y_o),e(Rs,K_o),e(Rs,WI),e(WI,Z_o),e(Rs,euo),e(Rs,QI),e(QI,ouo),e(Rs,ruo),e(x,tuo),e(x,Rp),e(Rp,xse),e(xse,auo),e(Rp,nuo),e(Rp,HI),e(HI,suo),e(Rp,luo),e(x,iuo),e(x,Pp),e(Pp,$se),e($se,duo),e(Pp,cuo),e(Pp,UI),e(UI,fuo),e(Pp,muo),e(x,guo),e(x,Bp),e(Bp,kse),e(kse,huo),e(Bp,puo),e(Bp,JI),e(JI,_uo),e(Bp,uuo),e(x,buo),e(x,Ip),e(Ip,Sse),e(Sse,vuo),e(Ip,Fuo),e(Ip,YI),e(YI,Tuo),e(Ip,Muo),e(x,Euo),e(x,qp),e(qp,Rse),e(Rse,Cuo),e(qp,wuo),e(qp,KI),e(KI,Auo),e(qp,yuo),e(x,Luo),e(x,Np),e(Np,Pse),e(Pse,xuo),e(Np,$uo),e(Np,ZI),e(ZI,kuo),e(Np,Suo),e(x,Ruo),e(x,jp),e(jp,Bse),e(Bse,Puo),e(jp,Buo),e(jp,eq),e(eq,Iuo),e(jp,quo),e(x,Nuo),e(x,Dp),e(Dp,Ise),e(Ise,juo),e(Dp,Duo),e(Dp,oq),e(oq,Guo),e(Dp,Ouo),e(x,Vuo),e(x,Gp),e(Gp,qse),e(qse,Xuo),e(Gp,zuo),e(Gp,rq),e(rq,Wuo),e(Gp,Quo),e(x,Huo),e(x,Op),e(Op,Nse),e(Nse,Uuo),e(Op,Juo),e(Op,tq),e(tq,Yuo),e(Op,Kuo),e(x,Zuo),e(x,Vp),e(Vp,jse),e(jse,e2o),e(Vp,o2o),e(Vp,aq),e(aq,r2o),e(Vp,t2o),e(x,a2o),e(x,Xp),e(Xp,Dse),e(Dse,n2o),e(Xp,s2o),e(Xp,nq),e(nq,l2o),e(Xp,i2o),e(x,d2o),e(x,zp),e(zp,Gse),e(Gse,c2o),e(zp,f2o),e(zp,sq),e(sq,m2o),e(zp,g2o),e(x,h2o),e(x,Wp),e(Wp,Ose),e(Ose,p2o),e(Wp,_2o),e(Wp,lq),e(lq,u2o),e(Wp,b2o),e(x,v2o),e(x,Qp),e(Qp,Vse),e(Vse,F2o),e(Qp,T2o),e(Qp,iq),e(iq,M2o),e(Qp,E2o),e(x,C2o),e(x,Hp),e(Hp,Xse),e(Xse,w2o),e(Hp,A2o),e(Hp,dq),e(dq,y2o),e(Hp,L2o),e(x,x2o),e(x,Up),e(Up,zse),e(zse,$2o),e(Up,k2o),e(Up,cq),e(cq,S2o),e(Up,R2o),e(x,P2o),e(x,Jp),e(Jp,Wse),e(Wse,B2o),e(Jp,I2o),e(Jp,fq),e(fq,q2o),e(Jp,N2o),e(x,j2o),e(x,Yp),e(Yp,Qse),e(Qse,D2o),e(Yp,G2o),e(Yp,mq),e(mq,O2o),e(Yp,V2o),e(x,X2o),e(x,Kp),e(Kp,Hse),e(Hse,z2o),e(Kp,W2o),e(Kp,gq),e(gq,Q2o),e(Kp,H2o),e(x,U2o),e(x,Zp),e(Zp,Use),e(Use,J2o),e(Zp,Y2o),e(Zp,hq),e(hq,K2o),e(Zp,Z2o),e(x,e1o),e(x,e_),e(e_,Jse),e(Jse,o1o),e(e_,r1o),e(e_,pq),e(pq,t1o),e(e_,a1o),e(x,n1o),e(x,o_),e(o_,Yse),e(Yse,s1o),e(o_,l1o),e(o_,_q),e(_q,i1o),e(o_,d1o),e(x,c1o),e(x,r_),e(r_,Kse),e(Kse,f1o),e(r_,m1o),e(r_,uq),e(uq,g1o),e(r_,h1o),e(x,p1o),e(x,t_),e(t_,Zse),e(Zse,_1o),e(t_,u1o),e(t_,bq),e(bq,b1o),e(t_,v1o),e(x,F1o),e(x,a_),e(a_,ele),e(ele,T1o),e(a_,M1o),e(a_,vq),e(vq,E1o),e(a_,C1o),e(x,w1o),e(x,n_),e(n_,ole),e(ole,A1o),e(n_,y1o),e(n_,Fq),e(Fq,L1o),e(n_,x1o),e(x,$1o),e(x,s_),e(s_,rle),e(rle,k1o),e(s_,S1o),e(s_,Tq),e(Tq,R1o),e(s_,P1o),e(x,B1o),e(x,l_),e(l_,tle),e(tle,I1o),e(l_,q1o),e(l_,Mq),e(Mq,N1o),e(l_,j1o),e(x,D1o),e(x,i_),e(i_,ale),e(ale,G1o),e(i_,O1o),e(i_,Eq),e(Eq,V1o),e(i_,X1o),e(x,z1o),e(x,d_),e(d_,nle),e(nle,W1o),e(d_,Q1o),e(d_,Cq),e(Cq,H1o),e(d_,U1o),e(x,J1o),e(x,c_),e(c_,sle),e(sle,Y1o),e(c_,K1o),e(c_,wq),e(wq,Z1o),e(c_,e7o),e(x,o7o),e(x,f_),e(f_,lle),e(lle,r7o),e(f_,t7o),e(f_,Aq),e(Aq,a7o),e(f_,n7o),e(x,s7o),e(x,m_),e(m_,ile),e(ile,l7o),e(m_,i7o),e(m_,yq),e(yq,d7o),e(m_,c7o),e(x,f7o),e(x,g_),e(g_,dle),e(dle,m7o),e(g_,g7o),e(g_,Lq),e(Lq,h7o),e(g_,p7o),e(x,_7o),e(x,h_),e(h_,cle),e(cle,u7o),e(h_,b7o),e(h_,xq),e(xq,v7o),e(h_,F7o),e(x,T7o),e(x,p_),e(p_,fle),e(fle,M7o),e(p_,E7o),e(p_,$q),e($q,C7o),e(p_,w7o),e(x,A7o),e(x,__),e(__,mle),e(mle,y7o),e(__,L7o),e(__,kq),e(kq,x7o),e(__,$7o),e(x,k7o),e(x,u_),e(u_,gle),e(gle,S7o),e(u_,R7o),e(u_,Sq),e(Sq,P7o),e(u_,B7o),e(x,I7o),e(x,b_),e(b_,hle),e(hle,q7o),e(b_,N7o),e(b_,Rq),e(Rq,j7o),e(b_,D7o),e(x,G7o),e(x,v_),e(v_,ple),e(ple,O7o),e(v_,V7o),e(v_,Pq),e(Pq,X7o),e(v_,z7o),e(x,W7o),e(x,F_),e(F_,_le),e(_le,Q7o),e(F_,H7o),e(F_,Bq),e(Bq,U7o),e(F_,J7o),e(x,Y7o),e(x,T_),e(T_,ule),e(ule,K7o),e(T_,Z7o),e(T_,Iq),e(Iq,ebo),e(T_,obo),e(x,rbo),e(x,M_),e(M_,ble),e(ble,tbo),e(M_,abo),e(M_,qq),e(qq,nbo),e(M_,sbo),e(x,lbo),e(x,E_),e(E_,vle),e(vle,ibo),e(E_,dbo),e(E_,Nq),e(Nq,cbo),e(E_,fbo),e(x,mbo),e(x,C_),e(C_,Fle),e(Fle,gbo),e(C_,hbo),e(C_,jq),e(jq,pbo),e(C_,_bo),e(x,ubo),e(x,w_),e(w_,Tle),e(Tle,bbo),e(w_,vbo),e(w_,Dq),e(Dq,Fbo),e(w_,Tbo),e(x,Mbo),e(x,A_),e(A_,Mle),e(Mle,Ebo),e(A_,Cbo),e(A_,Gq),e(Gq,wbo),e(A_,Abo),e(x,ybo),e(x,y_),e(y_,Ele),e(Ele,Lbo),e(y_,xbo),e(y_,Oq),e(Oq,$bo),e(y_,kbo),e(x,Sbo),e(x,L_),e(L_,Cle),e(Cle,Rbo),e(L_,Pbo),e(L_,Vq),e(Vq,Bbo),e(L_,Ibo),e(x,qbo),e(x,x_),e(x_,wle),e(wle,Nbo),e(x_,jbo),e(x_,Xq),e(Xq,Dbo),e(x_,Gbo),e(x,Obo),e(x,$_),e($_,Ale),e(Ale,Vbo),e($_,Xbo),e($_,zq),e(zq,zbo),e($_,Wbo),e(x,Qbo),e(x,k_),e(k_,yle),e(yle,Hbo),e(k_,Ubo),e(k_,Wq),e(Wq,Jbo),e(k_,Ybo),e(x,Kbo),e(x,S_),e(S_,Lle),e(Lle,Zbo),e(S_,evo),e(S_,Qq),e(Qq,ovo),e(S_,rvo),e(x,tvo),e(x,R_),e(R_,xle),e(xle,avo),e(R_,nvo),e(R_,Hq),e(Hq,svo),e(R_,lvo),e(x,ivo),e(x,P_),e(P_,$le),e($le,dvo),e(P_,cvo),e(P_,Uq),e(Uq,fvo),e(P_,mvo),e(x,gvo),e(x,B_),e(B_,kle),e(kle,hvo),e(B_,pvo),e(B_,Jq),e(Jq,_vo),e(B_,uvo),e(x,bvo),e(x,I_),e(I_,Sle),e(Sle,vvo),e(I_,Fvo),e(I_,Yq),e(Yq,Tvo),e(I_,Mvo),e(x,Evo),e(x,q_),e(q_,Rle),e(Rle,Cvo),e(q_,wvo),e(q_,Kq),e(Kq,Avo),e(q_,yvo),e(x,Lvo),e(x,N_),e(N_,Ple),e(Ple,xvo),e(N_,$vo),e(N_,Zq),e(Zq,kvo),e(N_,Svo),e(x,Rvo),e(x,j_),e(j_,Ble),e(Ble,Pvo),e(j_,Bvo),e(j_,eN),e(eN,Ivo),e(j_,qvo),e(x,Nvo),e(x,D_),e(D_,Ile),e(Ile,jvo),e(D_,Dvo),e(D_,oN),e(oN,Gvo),e(D_,Ovo),e(x,Vvo),e(x,G_),e(G_,qle),e(qle,Xvo),e(G_,zvo),e(G_,rN),e(rN,Wvo),e(G_,Qvo),e(x,Hvo),e(x,O_),e(O_,Nle),e(Nle,Uvo),e(O_,Jvo),e(O_,tN),e(tN,Yvo),e(O_,Kvo),e(x,Zvo),e(x,V_),e(V_,jle),e(jle,eFo),e(V_,oFo),e(V_,aN),e(aN,rFo),e(V_,tFo),e(x,aFo),e(x,X_),e(X_,Dle),e(Dle,nFo),e(X_,sFo),e(X_,nN),e(nN,lFo),e(X_,iFo),e(x,dFo),e(x,z_),e(z_,Gle),e(Gle,cFo),e(z_,fFo),e(z_,sN),e(sN,mFo),e(z_,gFo),e(Je,hFo),e(Je,W_),e(W_,pFo),e(W_,Ole),e(Ole,_Fo),e(W_,uFo),e(W_,Vle),e(Vle,bFo),e(Je,vFo),M(Q_,Je,null),b(f,$qe,u),b(f,yi,u),e(yi,H_),e(H_,Xle),M(U6,Xle,null),e(yi,FFo),e(yi,zle),e(zle,TFo),b(f,kqe,u),b(f,xo,u),M(J6,xo,null),e(xo,MFo),e(xo,Li),e(Li,EFo),e(Li,lN),e(lN,CFo),e(Li,wFo),e(Li,iN),e(iN,AFo),e(Li,yFo),e(xo,LFo),e(xo,Y6),e(Y6,xFo),e(Y6,Wle),e(Wle,$Fo),e(Y6,kFo),e(xo,SFo),e(xo,at),M(K6,at,null),e(at,RFo),e(at,Qle),e(Qle,PFo),e(at,BFo),e(at,xi),e(xi,IFo),e(xi,Hle),e(Hle,qFo),e(xi,NFo),e(xi,dN),e(dN,jFo),e(xi,DFo),e(at,GFo),M(U_,at,null),e(xo,OFo),e(xo,Ye),M(Z6,Ye,null),e(Ye,VFo),e(Ye,Ule),e(Ule,XFo),e(Ye,zFo),e(Ye,xa),e(xa,WFo),e(xa,Jle),e(Jle,QFo),e(xa,HFo),e(xa,Yle),e(Yle,UFo),e(xa,JFo),e(xa,Kle),e(Kle,YFo),e(xa,KFo),e(Ye,ZFo),e(Ye,G),e(G,J_),e(J_,Zle),e(Zle,eTo),e(J_,oTo),e(J_,cN),e(cN,rTo),e(J_,tTo),e(G,aTo),e(G,Y_),e(Y_,eie),e(eie,nTo),e(Y_,sTo),e(Y_,fN),e(fN,lTo),e(Y_,iTo),e(G,dTo),e(G,K_),e(K_,oie),e(oie,cTo),e(K_,fTo),e(K_,mN),e(mN,mTo),e(K_,gTo),e(G,hTo),e(G,Z_),e(Z_,rie),e(rie,pTo),e(Z_,_To),e(Z_,gN),e(gN,uTo),e(Z_,bTo),e(G,vTo),e(G,eu),e(eu,tie),e(tie,FTo),e(eu,TTo),e(eu,hN),e(hN,MTo),e(eu,ETo),e(G,CTo),e(G,ou),e(ou,aie),e(aie,wTo),e(ou,ATo),e(ou,pN),e(pN,yTo),e(ou,LTo),e(G,xTo),e(G,ru),e(ru,nie),e(nie,$To),e(ru,kTo),e(ru,_N),e(_N,STo),e(ru,RTo),e(G,PTo),e(G,tu),e(tu,sie),e(sie,BTo),e(tu,ITo),e(tu,uN),e(uN,qTo),e(tu,NTo),e(G,jTo),e(G,au),e(au,lie),e(lie,DTo),e(au,GTo),e(au,bN),e(bN,OTo),e(au,VTo),e(G,XTo),e(G,nu),e(nu,iie),e(iie,zTo),e(nu,WTo),e(nu,vN),e(vN,QTo),e(nu,HTo),e(G,UTo),e(G,su),e(su,die),e(die,JTo),e(su,YTo),e(su,FN),e(FN,KTo),e(su,ZTo),e(G,eMo),e(G,lu),e(lu,cie),e(cie,oMo),e(lu,rMo),e(lu,TN),e(TN,tMo),e(lu,aMo),e(G,nMo),e(G,iu),e(iu,fie),e(fie,sMo),e(iu,lMo),e(iu,MN),e(MN,iMo),e(iu,dMo),e(G,cMo),e(G,du),e(du,mie),e(mie,fMo),e(du,mMo),e(du,EN),e(EN,gMo),e(du,hMo),e(G,pMo),e(G,cu),e(cu,gie),e(gie,_Mo),e(cu,uMo),e(cu,CN),e(CN,bMo),e(cu,vMo),e(G,FMo),e(G,fu),e(fu,hie),e(hie,TMo),e(fu,MMo),e(fu,wN),e(wN,EMo),e(fu,CMo),e(G,wMo),e(G,mu),e(mu,pie),e(pie,AMo),e(mu,yMo),e(mu,AN),e(AN,LMo),e(mu,xMo),e(G,$Mo),e(G,gu),e(gu,_ie),e(_ie,kMo),e(gu,SMo),e(gu,yN),e(yN,RMo),e(gu,PMo),e(G,BMo),e(G,hu),e(hu,uie),e(uie,IMo),e(hu,qMo),e(hu,LN),e(LN,NMo),e(hu,jMo),e(G,DMo),e(G,pu),e(pu,bie),e(bie,GMo),e(pu,OMo),e(pu,xN),e(xN,VMo),e(pu,XMo),e(G,zMo),e(G,_u),e(_u,vie),e(vie,WMo),e(_u,QMo),e(_u,$N),e($N,HMo),e(_u,UMo),e(G,JMo),e(G,uu),e(uu,Fie),e(Fie,YMo),e(uu,KMo),e(uu,kN),e(kN,ZMo),e(uu,e4o),e(G,o4o),e(G,bu),e(bu,Tie),e(Tie,r4o),e(bu,t4o),e(bu,SN),e(SN,a4o),e(bu,n4o),e(G,s4o),e(G,vu),e(vu,Mie),e(Mie,l4o),e(vu,i4o),e(vu,RN),e(RN,d4o),e(vu,c4o),e(G,f4o),e(G,Fu),e(Fu,Eie),e(Eie,m4o),e(Fu,g4o),e(Fu,PN),e(PN,h4o),e(Fu,p4o),e(G,_4o),e(G,Tu),e(Tu,Cie),e(Cie,u4o),e(Tu,b4o),e(Tu,BN),e(BN,v4o),e(Tu,F4o),e(G,T4o),e(G,Mu),e(Mu,wie),e(wie,M4o),e(Mu,E4o),e(Mu,IN),e(IN,C4o),e(Mu,w4o),e(G,A4o),e(G,Eu),e(Eu,Aie),e(Aie,y4o),e(Eu,L4o),e(Eu,qN),e(qN,x4o),e(Eu,$4o),e(G,k4o),e(G,Cu),e(Cu,yie),e(yie,S4o),e(Cu,R4o),e(Cu,NN),e(NN,P4o),e(Cu,B4o),e(G,I4o),e(G,wu),e(wu,Lie),e(Lie,q4o),e(wu,N4o),e(wu,jN),e(jN,j4o),e(wu,D4o),e(G,G4o),e(G,Au),e(Au,xie),e(xie,O4o),e(Au,V4o),e(Au,DN),e(DN,X4o),e(Au,z4o),e(G,W4o),e(G,yu),e(yu,$ie),e($ie,Q4o),e(yu,H4o),e(yu,GN),e(GN,U4o),e(yu,J4o),e(G,Y4o),e(G,Lu),e(Lu,kie),e(kie,K4o),e(Lu,Z4o),e(Lu,ON),e(ON,eEo),e(Lu,oEo),e(G,rEo),e(G,xu),e(xu,Sie),e(Sie,tEo),e(xu,aEo),e(xu,VN),e(VN,nEo),e(xu,sEo),e(G,lEo),e(G,$u),e($u,Rie),e(Rie,iEo),e($u,dEo),e($u,XN),e(XN,cEo),e($u,fEo),e(G,mEo),e(G,ku),e(ku,Pie),e(Pie,gEo),e(ku,hEo),e(ku,zN),e(zN,pEo),e(ku,_Eo),e(G,uEo),e(G,Su),e(Su,Bie),e(Bie,bEo),e(Su,vEo),e(Su,WN),e(WN,FEo),e(Su,TEo),e(G,MEo),e(G,Ru),e(Ru,Iie),e(Iie,EEo),e(Ru,CEo),e(Ru,QN),e(QN,wEo),e(Ru,AEo),e(G,yEo),e(G,Pu),e(Pu,qie),e(qie,LEo),e(Pu,xEo),e(Pu,HN),e(HN,$Eo),e(Pu,kEo),e(G,SEo),e(G,Bu),e(Bu,Nie),e(Nie,REo),e(Bu,PEo),e(Bu,UN),e(UN,BEo),e(Bu,IEo),e(G,qEo),e(G,Iu),e(Iu,jie),e(jie,NEo),e(Iu,jEo),e(Iu,JN),e(JN,DEo),e(Iu,GEo),e(G,OEo),e(G,qu),e(qu,Die),e(Die,VEo),e(qu,XEo),e(qu,YN),e(YN,zEo),e(qu,WEo),e(Ye,QEo),e(Ye,Nu),e(Nu,HEo),e(Nu,Gie),e(Gie,UEo),e(Nu,JEo),e(Nu,Oie),e(Oie,YEo),e(Ye,KEo),M(ju,Ye,null),b(f,Sqe,u),b(f,$i,u),e($i,Du),e(Du,Vie),M(ey,Vie,null),e($i,ZEo),e($i,Xie),e(Xie,eCo),b(f,Rqe,u),b(f,$o,u),M(oy,$o,null),e($o,oCo),e($o,ki),e(ki,rCo),e(ki,KN),e(KN,tCo),e(ki,aCo),e(ki,ZN),e(ZN,nCo),e(ki,sCo),e($o,lCo),e($o,ry),e(ry,iCo),e(ry,zie),e(zie,dCo),e(ry,cCo),e($o,fCo),e($o,nt),M(ty,nt,null),e(nt,mCo),e(nt,Wie),e(Wie,gCo),e(nt,hCo),e(nt,Si),e(Si,pCo),e(Si,Qie),e(Qie,_Co),e(Si,uCo),e(Si,ej),e(ej,bCo),e(Si,vCo),e(nt,FCo),M(Gu,nt,null),e($o,TCo),e($o,Ke),M(ay,Ke,null),e(Ke,MCo),e(Ke,Hie),e(Hie,ECo),e(Ke,CCo),e(Ke,$a),e($a,wCo),e($a,Uie),e(Uie,ACo),e($a,yCo),e($a,Jie),e(Jie,LCo),e($a,xCo),e($a,Yie),e(Yie,$Co),e($a,kCo),e(Ke,SCo),e(Ke,z),e(z,Ou),e(Ou,Kie),e(Kie,RCo),e(Ou,PCo),e(Ou,oj),e(oj,BCo),e(Ou,ICo),e(z,qCo),e(z,Vu),e(Vu,Zie),e(Zie,NCo),e(Vu,jCo),e(Vu,rj),e(rj,DCo),e(Vu,GCo),e(z,OCo),e(z,Xu),e(Xu,ede),e(ede,VCo),e(Xu,XCo),e(Xu,tj),e(tj,zCo),e(Xu,WCo),e(z,QCo),e(z,zu),e(zu,ode),e(ode,HCo),e(zu,UCo),e(zu,aj),e(aj,JCo),e(zu,YCo),e(z,KCo),e(z,Wu),e(Wu,rde),e(rde,ZCo),e(Wu,e5o),e(Wu,nj),e(nj,o5o),e(Wu,r5o),e(z,t5o),e(z,Qu),e(Qu,tde),e(tde,a5o),e(Qu,n5o),e(Qu,sj),e(sj,s5o),e(Qu,l5o),e(z,i5o),e(z,Hu),e(Hu,ade),e(ade,d5o),e(Hu,c5o),e(Hu,lj),e(lj,f5o),e(Hu,m5o),e(z,g5o),e(z,Uu),e(Uu,nde),e(nde,h5o),e(Uu,p5o),e(Uu,ij),e(ij,_5o),e(Uu,u5o),e(z,b5o),e(z,Ju),e(Ju,sde),e(sde,v5o),e(Ju,F5o),e(Ju,dj),e(dj,T5o),e(Ju,M5o),e(z,E5o),e(z,Yu),e(Yu,lde),e(lde,C5o),e(Yu,w5o),e(Yu,cj),e(cj,A5o),e(Yu,y5o),e(z,L5o),e(z,Ku),e(Ku,ide),e(ide,x5o),e(Ku,$5o),e(Ku,fj),e(fj,k5o),e(Ku,S5o),e(z,R5o),e(z,Zu),e(Zu,dde),e(dde,P5o),e(Zu,B5o),e(Zu,mj),e(mj,I5o),e(Zu,q5o),e(z,N5o),e(z,e2),e(e2,cde),e(cde,j5o),e(e2,D5o),e(e2,gj),e(gj,G5o),e(e2,O5o),e(z,V5o),e(z,o2),e(o2,fde),e(fde,X5o),e(o2,z5o),e(o2,hj),e(hj,W5o),e(o2,Q5o),e(z,H5o),e(z,r2),e(r2,mde),e(mde,U5o),e(r2,J5o),e(r2,pj),e(pj,Y5o),e(r2,K5o),e(z,Z5o),e(z,t2),e(t2,gde),e(gde,e3o),e(t2,o3o),e(t2,_j),e(_j,r3o),e(t2,t3o),e(z,a3o),e(z,a2),e(a2,hde),e(hde,n3o),e(a2,s3o),e(a2,uj),e(uj,l3o),e(a2,i3o),e(z,d3o),e(z,n2),e(n2,pde),e(pde,c3o),e(n2,f3o),e(n2,bj),e(bj,m3o),e(n2,g3o),e(z,h3o),e(z,s2),e(s2,_de),e(_de,p3o),e(s2,_3o),e(s2,vj),e(vj,u3o),e(s2,b3o),e(z,v3o),e(z,l2),e(l2,ude),e(ude,F3o),e(l2,T3o),e(l2,Fj),e(Fj,M3o),e(l2,E3o),e(z,C3o),e(z,i2),e(i2,bde),e(bde,w3o),e(i2,A3o),e(i2,Tj),e(Tj,y3o),e(i2,L3o),e(z,x3o),e(z,d2),e(d2,vde),e(vde,$3o),e(d2,k3o),e(d2,Mj),e(Mj,S3o),e(d2,R3o),e(z,P3o),e(z,c2),e(c2,Fde),e(Fde,B3o),e(c2,I3o),e(c2,Ej),e(Ej,q3o),e(c2,N3o),e(z,j3o),e(z,f2),e(f2,Tde),e(Tde,D3o),e(f2,G3o),e(f2,Cj),e(Cj,O3o),e(f2,V3o),e(z,X3o),e(z,m2),e(m2,Mde),e(Mde,z3o),e(m2,W3o),e(m2,wj),e(wj,Q3o),e(m2,H3o),e(z,U3o),e(z,g2),e(g2,Ede),e(Ede,J3o),e(g2,Y3o),e(g2,Aj),e(Aj,K3o),e(g2,Z3o),e(z,ewo),e(z,h2),e(h2,Cde),e(Cde,owo),e(h2,rwo),e(h2,yj),e(yj,two),e(h2,awo),e(z,nwo),e(z,p2),e(p2,wde),e(wde,swo),e(p2,lwo),e(p2,Lj),e(Lj,iwo),e(p2,dwo),e(z,cwo),e(z,_2),e(_2,Ade),e(Ade,fwo),e(_2,mwo),e(_2,xj),e(xj,gwo),e(_2,hwo),e(z,pwo),e(z,u2),e(u2,yde),e(yde,_wo),e(u2,uwo),e(u2,$j),e($j,bwo),e(u2,vwo),e(z,Fwo),e(z,b2),e(b2,Lde),e(Lde,Two),e(b2,Mwo),e(b2,kj),e(kj,Ewo),e(b2,Cwo),e(z,wwo),e(z,v2),e(v2,xde),e(xde,Awo),e(v2,ywo),e(v2,Sj),e(Sj,Lwo),e(v2,xwo),e(z,$wo),e(z,F2),e(F2,$de),e($de,kwo),e(F2,Swo),e(F2,Rj),e(Rj,Rwo),e(F2,Pwo),e(z,Bwo),e(z,T2),e(T2,kde),e(kde,Iwo),e(T2,qwo),e(T2,Pj),e(Pj,Nwo),e(T2,jwo),e(z,Dwo),e(z,M2),e(M2,Sde),e(Sde,Gwo),e(M2,Owo),e(M2,Bj),e(Bj,Vwo),e(M2,Xwo),e(z,zwo),e(z,E2),e(E2,Rde),e(Rde,Wwo),e(E2,Qwo),e(E2,Ij),e(Ij,Hwo),e(E2,Uwo),e(Ke,Jwo),e(Ke,C2),e(C2,Ywo),e(C2,Pde),e(Pde,Kwo),e(C2,Zwo),e(C2,Bde),e(Bde,e0o),e(Ke,o0o),M(w2,Ke,null),b(f,Pqe,u),b(f,Ri,u),e(Ri,A2),e(A2,Ide),M(ny,Ide,null),e(Ri,r0o),e(Ri,qde),e(qde,t0o),b(f,Bqe,u),b(f,ko,u),M(sy,ko,null),e(ko,a0o),e(ko,Pi),e(Pi,n0o),e(Pi,qj),e(qj,s0o),e(Pi,l0o),e(Pi,Nj),e(Nj,i0o),e(Pi,d0o),e(ko,c0o),e(ko,ly),e(ly,f0o),e(ly,Nde),e(Nde,m0o),e(ly,g0o),e(ko,h0o),e(ko,st),M(iy,st,null),e(st,p0o),e(st,jde),e(jde,_0o),e(st,u0o),e(st,Bi),e(Bi,b0o),e(Bi,Dde),e(Dde,v0o),e(Bi,F0o),e(Bi,jj),e(jj,T0o),e(Bi,M0o),e(st,E0o),M(y2,st,null),e(ko,C0o),e(ko,Ze),M(dy,Ze,null),e(Ze,w0o),e(Ze,Gde),e(Gde,A0o),e(Ze,y0o),e(Ze,ka),e(ka,L0o),e(ka,Ode),e(Ode,x0o),e(ka,$0o),e(ka,Vde),e(Vde,k0o),e(ka,S0o),e(ka,Xde),e(Xde,R0o),e(ka,P0o),e(Ze,B0o),e(Ze,W),e(W,L2),e(L2,zde),e(zde,I0o),e(L2,q0o),e(L2,Dj),e(Dj,N0o),e(L2,j0o),e(W,D0o),e(W,x2),e(x2,Wde),e(Wde,G0o),e(x2,O0o),e(x2,Gj),e(Gj,V0o),e(x2,X0o),e(W,z0o),e(W,$2),e($2,Qde),e(Qde,W0o),e($2,Q0o),e($2,Oj),e(Oj,H0o),e($2,U0o),e(W,J0o),e(W,k2),e(k2,Hde),e(Hde,Y0o),e(k2,K0o),e(k2,Vj),e(Vj,Z0o),e(k2,eAo),e(W,oAo),e(W,S2),e(S2,Ude),e(Ude,rAo),e(S2,tAo),e(S2,Xj),e(Xj,aAo),e(S2,nAo),e(W,sAo),e(W,R2),e(R2,Jde),e(Jde,lAo),e(R2,iAo),e(R2,zj),e(zj,dAo),e(R2,cAo),e(W,fAo),e(W,P2),e(P2,Yde),e(Yde,mAo),e(P2,gAo),e(P2,Wj),e(Wj,hAo),e(P2,pAo),e(W,_Ao),e(W,B2),e(B2,Kde),e(Kde,uAo),e(B2,bAo),e(B2,Qj),e(Qj,vAo),e(B2,FAo),e(W,TAo),e(W,I2),e(I2,Zde),e(Zde,MAo),e(I2,EAo),e(I2,Hj),e(Hj,CAo),e(I2,wAo),e(W,AAo),e(W,q2),e(q2,ece),e(ece,yAo),e(q2,LAo),e(q2,Uj),e(Uj,xAo),e(q2,$Ao),e(W,kAo),e(W,N2),e(N2,oce),e(oce,SAo),e(N2,RAo),e(N2,Jj),e(Jj,PAo),e(N2,BAo),e(W,IAo),e(W,j2),e(j2,rce),e(rce,qAo),e(j2,NAo),e(j2,Yj),e(Yj,jAo),e(j2,DAo),e(W,GAo),e(W,D2),e(D2,tce),e(tce,OAo),e(D2,VAo),e(D2,Kj),e(Kj,XAo),e(D2,zAo),e(W,WAo),e(W,G2),e(G2,ace),e(ace,QAo),e(G2,HAo),e(G2,Zj),e(Zj,UAo),e(G2,JAo),e(W,YAo),e(W,O2),e(O2,nce),e(nce,KAo),e(O2,ZAo),e(O2,eD),e(eD,e6o),e(O2,o6o),e(W,r6o),e(W,V2),e(V2,sce),e(sce,t6o),e(V2,a6o),e(V2,oD),e(oD,n6o),e(V2,s6o),e(W,l6o),e(W,X2),e(X2,lce),e(lce,i6o),e(X2,d6o),e(X2,rD),e(rD,c6o),e(X2,f6o),e(W,m6o),e(W,z2),e(z2,ice),e(ice,g6o),e(z2,h6o),e(z2,tD),e(tD,p6o),e(z2,_6o),e(W,u6o),e(W,W2),e(W2,dce),e(dce,b6o),e(W2,v6o),e(W2,aD),e(aD,F6o),e(W2,T6o),e(W,M6o),e(W,Q2),e(Q2,cce),e(cce,E6o),e(Q2,C6o),e(Q2,nD),e(nD,w6o),e(Q2,A6o),e(W,y6o),e(W,H2),e(H2,fce),e(fce,L6o),e(H2,x6o),e(H2,sD),e(sD,$6o),e(H2,k6o),e(W,S6o),e(W,U2),e(U2,mce),e(mce,R6o),e(U2,P6o),e(U2,lD),e(lD,B6o),e(U2,I6o),e(W,q6o),e(W,J2),e(J2,gce),e(gce,N6o),e(J2,j6o),e(J2,iD),e(iD,D6o),e(J2,G6o),e(W,O6o),e(W,Y2),e(Y2,hce),e(hce,V6o),e(Y2,X6o),e(Y2,dD),e(dD,z6o),e(Y2,W6o),e(W,Q6o),e(W,K2),e(K2,pce),e(pce,H6o),e(K2,U6o),e(K2,cD),e(cD,J6o),e(K2,Y6o),e(W,K6o),e(W,Z2),e(Z2,_ce),e(_ce,Z6o),e(Z2,eyo),e(Z2,fD),e(fD,oyo),e(Z2,ryo),e(W,tyo),e(W,e1),e(e1,uce),e(uce,ayo),e(e1,nyo),e(e1,mD),e(mD,syo),e(e1,lyo),e(W,iyo),e(W,o1),e(o1,bce),e(bce,dyo),e(o1,cyo),e(o1,gD),e(gD,fyo),e(o1,myo),e(W,gyo),e(W,r1),e(r1,vce),e(vce,hyo),e(r1,pyo),e(r1,hD),e(hD,_yo),e(r1,uyo),e(W,byo),e(W,t1),e(t1,Fce),e(Fce,vyo),e(t1,Fyo),e(t1,pD),e(pD,Tyo),e(t1,Myo),e(W,Eyo),e(W,a1),e(a1,Tce),e(Tce,Cyo),e(a1,wyo),e(a1,Mce),e(Mce,Ayo),e(a1,yyo),e(W,Lyo),e(W,n1),e(n1,Ece),e(Ece,xyo),e(n1,$yo),e(n1,_D),e(_D,kyo),e(n1,Syo),e(W,Ryo),e(W,s1),e(s1,Cce),e(Cce,Pyo),e(s1,Byo),e(s1,uD),e(uD,Iyo),e(s1,qyo),e(W,Nyo),e(W,l1),e(l1,wce),e(wce,jyo),e(l1,Dyo),e(l1,bD),e(bD,Gyo),e(l1,Oyo),e(W,Vyo),e(W,i1),e(i1,Ace),e(Ace,Xyo),e(i1,zyo),e(i1,vD),e(vD,Wyo),e(i1,Qyo),e(Ze,Hyo),e(Ze,d1),e(d1,Uyo),e(d1,yce),e(yce,Jyo),e(d1,Yyo),e(d1,Lce),e(Lce,Kyo),e(Ze,Zyo),M(c1,Ze,null),b(f,Iqe,u),b(f,Ii,u),e(Ii,f1),e(f1,xce),M(cy,xce,null),e(Ii,eLo),e(Ii,$ce),e($ce,oLo),b(f,qqe,u),b(f,So,u),M(fy,So,null),e(So,rLo),e(So,qi),e(qi,tLo),e(qi,FD),e(FD,aLo),e(qi,nLo),e(qi,TD),e(TD,sLo),e(qi,lLo),e(So,iLo),e(So,my),e(my,dLo),e(my,kce),e(kce,cLo),e(my,fLo),e(So,mLo),e(So,lt),M(gy,lt,null),e(lt,gLo),e(lt,Sce),e(Sce,hLo),e(lt,pLo),e(lt,Ni),e(Ni,_Lo),e(Ni,Rce),e(Rce,uLo),e(Ni,bLo),e(Ni,MD),e(MD,vLo),e(Ni,FLo),e(lt,TLo),M(m1,lt,null),e(So,MLo),e(So,eo),M(hy,eo,null),e(eo,ELo),e(eo,Pce),e(Pce,CLo),e(eo,wLo),e(eo,Sa),e(Sa,ALo),e(Sa,Bce),e(Bce,yLo),e(Sa,LLo),e(Sa,Ice),e(Ice,xLo),e(Sa,$Lo),e(Sa,qce),e(qce,kLo),e(Sa,SLo),e(eo,RLo),e(eo,_e),e(_e,g1),e(g1,Nce),e(Nce,PLo),e(g1,BLo),e(g1,ED),e(ED,ILo),e(g1,qLo),e(_e,NLo),e(_e,h1),e(h1,jce),e(jce,jLo),e(h1,DLo),e(h1,CD),e(CD,GLo),e(h1,OLo),e(_e,VLo),e(_e,p1),e(p1,Dce),e(Dce,XLo),e(p1,zLo),e(p1,wD),e(wD,WLo),e(p1,QLo),e(_e,HLo),e(_e,_1),e(_1,Gce),e(Gce,ULo),e(_1,JLo),e(_1,AD),e(AD,YLo),e(_1,KLo),e(_e,ZLo),e(_e,u1),e(u1,Oce),e(Oce,e8o),e(u1,o8o),e(u1,yD),e(yD,r8o),e(u1,t8o),e(_e,a8o),e(_e,b1),e(b1,Vce),e(Vce,n8o),e(b1,s8o),e(b1,LD),e(LD,l8o),e(b1,i8o),e(_e,d8o),e(_e,v1),e(v1,Xce),e(Xce,c8o),e(v1,f8o),e(v1,xD),e(xD,m8o),e(v1,g8o),e(_e,h8o),e(_e,F1),e(F1,zce),e(zce,p8o),e(F1,_8o),e(F1,$D),e($D,u8o),e(F1,b8o),e(_e,v8o),e(_e,T1),e(T1,Wce),e(Wce,F8o),e(T1,T8o),e(T1,kD),e(kD,M8o),e(T1,E8o),e(_e,C8o),e(_e,M1),e(M1,Qce),e(Qce,w8o),e(M1,A8o),e(M1,SD),e(SD,y8o),e(M1,L8o),e(_e,x8o),e(_e,E1),e(E1,Hce),e(Hce,$8o),e(E1,k8o),e(E1,RD),e(RD,S8o),e(E1,R8o),e(_e,P8o),e(_e,C1),e(C1,Uce),e(Uce,B8o),e(C1,I8o),e(C1,PD),e(PD,q8o),e(C1,N8o),e(_e,j8o),e(_e,w1),e(w1,Jce),e(Jce,D8o),e(w1,G8o),e(w1,BD),e(BD,O8o),e(w1,V8o),e(_e,X8o),e(_e,A1),e(A1,Yce),e(Yce,z8o),e(A1,W8o),e(A1,ID),e(ID,Q8o),e(A1,H8o),e(_e,U8o),e(_e,y1),e(y1,Kce),e(Kce,J8o),e(y1,Y8o),e(y1,qD),e(qD,K8o),e(y1,Z8o),e(_e,e9o),e(_e,L1),e(L1,Zce),e(Zce,o9o),e(L1,r9o),e(L1,ND),e(ND,t9o),e(L1,a9o),e(eo,n9o),e(eo,x1),e(x1,s9o),e(x1,efe),e(efe,l9o),e(x1,i9o),e(x1,ofe),e(ofe,d9o),e(eo,c9o),M($1,eo,null),b(f,Nqe,u),b(f,ji,u),e(ji,k1),e(k1,rfe),M(py,rfe,null),e(ji,f9o),e(ji,tfe),e(tfe,m9o),b(f,jqe,u),b(f,Ro,u),M(_y,Ro,null),e(Ro,g9o),e(Ro,Di),e(Di,h9o),e(Di,jD),e(jD,p9o),e(Di,_9o),e(Di,DD),e(DD,u9o),e(Di,b9o),e(Ro,v9o),e(Ro,uy),e(uy,F9o),e(uy,afe),e(afe,T9o),e(uy,M9o),e(Ro,E9o),e(Ro,it),M(by,it,null),e(it,C9o),e(it,nfe),e(nfe,w9o),e(it,A9o),e(it,Gi),e(Gi,y9o),e(Gi,sfe),e(sfe,L9o),e(Gi,x9o),e(Gi,GD),e(GD,$9o),e(Gi,k9o),e(it,S9o),M(S1,it,null),e(Ro,R9o),e(Ro,oo),M(vy,oo,null),e(oo,P9o),e(oo,lfe),e(lfe,B9o),e(oo,I9o),e(oo,Ra),e(Ra,q9o),e(Ra,ife),e(ife,N9o),e(Ra,j9o),e(Ra,dfe),e(dfe,D9o),e(Ra,G9o),e(Ra,cfe),e(cfe,O9o),e(Ra,V9o),e(oo,X9o),e(oo,N),e(N,R1),e(R1,ffe),e(ffe,z9o),e(R1,W9o),e(R1,OD),e(OD,Q9o),e(R1,H9o),e(N,U9o),e(N,P1),e(P1,mfe),e(mfe,J9o),e(P1,Y9o),e(P1,VD),e(VD,K9o),e(P1,Z9o),e(N,exo),e(N,B1),e(B1,gfe),e(gfe,oxo),e(B1,rxo),e(B1,XD),e(XD,txo),e(B1,axo),e(N,nxo),e(N,I1),e(I1,hfe),e(hfe,sxo),e(I1,lxo),e(I1,zD),e(zD,ixo),e(I1,dxo),e(N,cxo),e(N,q1),e(q1,pfe),e(pfe,fxo),e(q1,mxo),e(q1,WD),e(WD,gxo),e(q1,hxo),e(N,pxo),e(N,N1),e(N1,_fe),e(_fe,_xo),e(N1,uxo),e(N1,QD),e(QD,bxo),e(N1,vxo),e(N,Fxo),e(N,j1),e(j1,ufe),e(ufe,Txo),e(j1,Mxo),e(j1,HD),e(HD,Exo),e(j1,Cxo),e(N,wxo),e(N,D1),e(D1,bfe),e(bfe,Axo),e(D1,yxo),e(D1,UD),e(UD,Lxo),e(D1,xxo),e(N,$xo),e(N,G1),e(G1,vfe),e(vfe,kxo),e(G1,Sxo),e(G1,JD),e(JD,Rxo),e(G1,Pxo),e(N,Bxo),e(N,O1),e(O1,Ffe),e(Ffe,Ixo),e(O1,qxo),e(O1,YD),e(YD,Nxo),e(O1,jxo),e(N,Dxo),e(N,V1),e(V1,Tfe),e(Tfe,Gxo),e(V1,Oxo),e(V1,KD),e(KD,Vxo),e(V1,Xxo),e(N,zxo),e(N,X1),e(X1,Mfe),e(Mfe,Wxo),e(X1,Qxo),e(X1,ZD),e(ZD,Hxo),e(X1,Uxo),e(N,Jxo),e(N,z1),e(z1,Efe),e(Efe,Yxo),e(z1,Kxo),e(z1,eG),e(eG,Zxo),e(z1,e$o),e(N,o$o),e(N,W1),e(W1,Cfe),e(Cfe,r$o),e(W1,t$o),e(W1,oG),e(oG,a$o),e(W1,n$o),e(N,s$o),e(N,Q1),e(Q1,wfe),e(wfe,l$o),e(Q1,i$o),e(Q1,rG),e(rG,d$o),e(Q1,c$o),e(N,f$o),e(N,H1),e(H1,Afe),e(Afe,m$o),e(H1,g$o),e(H1,tG),e(tG,h$o),e(H1,p$o),e(N,_$o),e(N,U1),e(U1,yfe),e(yfe,u$o),e(U1,b$o),e(U1,aG),e(aG,v$o),e(U1,F$o),e(N,T$o),e(N,J1),e(J1,Lfe),e(Lfe,M$o),e(J1,E$o),e(J1,nG),e(nG,C$o),e(J1,w$o),e(N,A$o),e(N,Y1),e(Y1,xfe),e(xfe,y$o),e(Y1,L$o),e(Y1,sG),e(sG,x$o),e(Y1,$$o),e(N,k$o),e(N,K1),e(K1,$fe),e($fe,S$o),e(K1,R$o),e(K1,lG),e(lG,P$o),e(K1,B$o),e(N,I$o),e(N,Z1),e(Z1,kfe),e(kfe,q$o),e(Z1,N$o),e(Z1,iG),e(iG,j$o),e(Z1,D$o),e(N,G$o),e(N,e7),e(e7,Sfe),e(Sfe,O$o),e(e7,V$o),e(e7,dG),e(dG,X$o),e(e7,z$o),e(N,W$o),e(N,o7),e(o7,Rfe),e(Rfe,Q$o),e(o7,H$o),e(o7,cG),e(cG,U$o),e(o7,J$o),e(N,Y$o),e(N,r7),e(r7,Pfe),e(Pfe,K$o),e(r7,Z$o),e(r7,fG),e(fG,eko),e(r7,oko),e(N,rko),e(N,t7),e(t7,Bfe),e(Bfe,tko),e(t7,ako),e(t7,mG),e(mG,nko),e(t7,sko),e(N,lko),e(N,a7),e(a7,Ife),e(Ife,iko),e(a7,dko),e(a7,gG),e(gG,cko),e(a7,fko),e(N,mko),e(N,n7),e(n7,qfe),e(qfe,gko),e(n7,hko),e(n7,hG),e(hG,pko),e(n7,_ko),e(N,uko),e(N,s7),e(s7,Nfe),e(Nfe,bko),e(s7,vko),e(s7,pG),e(pG,Fko),e(s7,Tko),e(N,Mko),e(N,l7),e(l7,jfe),e(jfe,Eko),e(l7,Cko),e(l7,_G),e(_G,wko),e(l7,Ako),e(N,yko),e(N,i7),e(i7,Dfe),e(Dfe,Lko),e(i7,xko),e(i7,uG),e(uG,$ko),e(i7,kko),e(N,Sko),e(N,d7),e(d7,Gfe),e(Gfe,Rko),e(d7,Pko),e(d7,bG),e(bG,Bko),e(d7,Iko),e(N,qko),e(N,c7),e(c7,Ofe),e(Ofe,Nko),e(c7,jko),e(c7,vG),e(vG,Dko),e(c7,Gko),e(N,Oko),e(N,f7),e(f7,Vfe),e(Vfe,Vko),e(f7,Xko),e(f7,FG),e(FG,zko),e(f7,Wko),e(N,Qko),e(N,m7),e(m7,Xfe),e(Xfe,Hko),e(m7,Uko),e(m7,TG),e(TG,Jko),e(m7,Yko),e(N,Kko),e(N,g7),e(g7,zfe),e(zfe,Zko),e(g7,eSo),e(g7,MG),e(MG,oSo),e(g7,rSo),e(N,tSo),e(N,h7),e(h7,Wfe),e(Wfe,aSo),e(h7,nSo),e(h7,EG),e(EG,sSo),e(h7,lSo),e(N,iSo),e(N,p7),e(p7,Qfe),e(Qfe,dSo),e(p7,cSo),e(p7,CG),e(CG,fSo),e(p7,mSo),e(N,gSo),e(N,_7),e(_7,Hfe),e(Hfe,hSo),e(_7,pSo),e(_7,wG),e(wG,_So),e(_7,uSo),e(N,bSo),e(N,u7),e(u7,Ufe),e(Ufe,vSo),e(u7,FSo),e(u7,AG),e(AG,TSo),e(u7,MSo),e(N,ESo),e(N,b7),e(b7,Jfe),e(Jfe,CSo),e(b7,wSo),e(b7,yG),e(yG,ASo),e(b7,ySo),e(N,LSo),e(N,v7),e(v7,Yfe),e(Yfe,xSo),e(v7,$So),e(v7,LG),e(LG,kSo),e(v7,SSo),e(N,RSo),e(N,F7),e(F7,Kfe),e(Kfe,PSo),e(F7,BSo),e(F7,xG),e(xG,ISo),e(F7,qSo),e(N,NSo),e(N,T7),e(T7,Zfe),e(Zfe,jSo),e(T7,DSo),e(T7,$G),e($G,GSo),e(T7,OSo),e(N,VSo),e(N,M7),e(M7,eme),e(eme,XSo),e(M7,zSo),e(M7,kG),e(kG,WSo),e(M7,QSo),e(N,HSo),e(N,E7),e(E7,ome),e(ome,USo),e(E7,JSo),e(E7,SG),e(SG,YSo),e(E7,KSo),e(N,ZSo),e(N,C7),e(C7,rme),e(rme,eRo),e(C7,oRo),e(C7,RG),e(RG,rRo),e(C7,tRo),e(oo,aRo),e(oo,w7),e(w7,nRo),e(w7,tme),e(tme,sRo),e(w7,lRo),e(w7,ame),e(ame,iRo),e(oo,dRo),M(A7,oo,null),b(f,Dqe,u),b(f,Oi,u),e(Oi,y7),e(y7,nme),M(Fy,nme,null),e(Oi,cRo),e(Oi,sme),e(sme,fRo),b(f,Gqe,u),b(f,Po,u),M(Ty,Po,null),e(Po,mRo),e(Po,Vi),e(Vi,gRo),e(Vi,PG),e(PG,hRo),e(Vi,pRo),e(Vi,BG),e(BG,_Ro),e(Vi,uRo),e(Po,bRo),e(Po,My),e(My,vRo),e(My,lme),e(lme,FRo),e(My,TRo),e(Po,MRo),e(Po,dt),M(Ey,dt,null),e(dt,ERo),e(dt,ime),e(ime,CRo),e(dt,wRo),e(dt,Xi),e(Xi,ARo),e(Xi,dme),e(dme,yRo),e(Xi,LRo),e(Xi,IG),e(IG,xRo),e(Xi,$Ro),e(dt,kRo),M(L7,dt,null),e(Po,SRo),e(Po,ro),M(Cy,ro,null),e(ro,RRo),e(ro,cme),e(cme,PRo),e(ro,BRo),e(ro,Pa),e(Pa,IRo),e(Pa,fme),e(fme,qRo),e(Pa,NRo),e(Pa,mme),e(mme,jRo),e(Pa,DRo),e(Pa,gme),e(gme,GRo),e(Pa,ORo),e(ro,VRo),e(ro,Y),e(Y,x7),e(x7,hme),e(hme,XRo),e(x7,zRo),e(x7,qG),e(qG,WRo),e(x7,QRo),e(Y,HRo),e(Y,$7),e($7,pme),e(pme,URo),e($7,JRo),e($7,NG),e(NG,YRo),e($7,KRo),e(Y,ZRo),e(Y,k7),e(k7,_me),e(_me,ePo),e(k7,oPo),e(k7,jG),e(jG,rPo),e(k7,tPo),e(Y,aPo),e(Y,S7),e(S7,ume),e(ume,nPo),e(S7,sPo),e(S7,DG),e(DG,lPo),e(S7,iPo),e(Y,dPo),e(Y,R7),e(R7,bme),e(bme,cPo),e(R7,fPo),e(R7,GG),e(GG,mPo),e(R7,gPo),e(Y,hPo),e(Y,P7),e(P7,vme),e(vme,pPo),e(P7,_Po),e(P7,OG),e(OG,uPo),e(P7,bPo),e(Y,vPo),e(Y,B7),e(B7,Fme),e(Fme,FPo),e(B7,TPo),e(B7,VG),e(VG,MPo),e(B7,EPo),e(Y,CPo),e(Y,I7),e(I7,Tme),e(Tme,wPo),e(I7,APo),e(I7,XG),e(XG,yPo),e(I7,LPo),e(Y,xPo),e(Y,q7),e(q7,Mme),e(Mme,$Po),e(q7,kPo),e(q7,zG),e(zG,SPo),e(q7,RPo),e(Y,PPo),e(Y,N7),e(N7,Eme),e(Eme,BPo),e(N7,IPo),e(N7,WG),e(WG,qPo),e(N7,NPo),e(Y,jPo),e(Y,j7),e(j7,Cme),e(Cme,DPo),e(j7,GPo),e(j7,QG),e(QG,OPo),e(j7,VPo),e(Y,XPo),e(Y,D7),e(D7,wme),e(wme,zPo),e(D7,WPo),e(D7,HG),e(HG,QPo),e(D7,HPo),e(Y,UPo),e(Y,G7),e(G7,Ame),e(Ame,JPo),e(G7,YPo),e(G7,UG),e(UG,KPo),e(G7,ZPo),e(Y,eBo),e(Y,O7),e(O7,yme),e(yme,oBo),e(O7,rBo),e(O7,JG),e(JG,tBo),e(O7,aBo),e(Y,nBo),e(Y,V7),e(V7,Lme),e(Lme,sBo),e(V7,lBo),e(V7,YG),e(YG,iBo),e(V7,dBo),e(Y,cBo),e(Y,X7),e(X7,xme),e(xme,fBo),e(X7,mBo),e(X7,KG),e(KG,gBo),e(X7,hBo),e(Y,pBo),e(Y,z7),e(z7,$me),e($me,_Bo),e(z7,uBo),e(z7,ZG),e(ZG,bBo),e(z7,vBo),e(Y,FBo),e(Y,W7),e(W7,kme),e(kme,TBo),e(W7,MBo),e(W7,eO),e(eO,EBo),e(W7,CBo),e(Y,wBo),e(Y,Q7),e(Q7,Sme),e(Sme,ABo),e(Q7,yBo),e(Q7,oO),e(oO,LBo),e(Q7,xBo),e(Y,$Bo),e(Y,H7),e(H7,Rme),e(Rme,kBo),e(H7,SBo),e(H7,rO),e(rO,RBo),e(H7,PBo),e(Y,BBo),e(Y,U7),e(U7,Pme),e(Pme,IBo),e(U7,qBo),e(U7,tO),e(tO,NBo),e(U7,jBo),e(Y,DBo),e(Y,J7),e(J7,Bme),e(Bme,GBo),e(J7,OBo),e(J7,aO),e(aO,VBo),e(J7,XBo),e(Y,zBo),e(Y,Y7),e(Y7,Ime),e(Ime,WBo),e(Y7,QBo),e(Y7,nO),e(nO,HBo),e(Y7,UBo),e(Y,JBo),e(Y,K7),e(K7,qme),e(qme,YBo),e(K7,KBo),e(K7,sO),e(sO,ZBo),e(K7,eIo),e(Y,oIo),e(Y,Z7),e(Z7,Nme),e(Nme,rIo),e(Z7,tIo),e(Z7,lO),e(lO,aIo),e(Z7,nIo),e(Y,sIo),e(Y,eb),e(eb,jme),e(jme,lIo),e(eb,iIo),e(eb,iO),e(iO,dIo),e(eb,cIo),e(Y,fIo),e(Y,ob),e(ob,Dme),e(Dme,mIo),e(ob,gIo),e(ob,dO),e(dO,hIo),e(ob,pIo),e(Y,_Io),e(Y,rb),e(rb,Gme),e(Gme,uIo),e(rb,bIo),e(rb,cO),e(cO,vIo),e(rb,FIo),e(Y,TIo),e(Y,tb),e(tb,Ome),e(Ome,MIo),e(tb,EIo),e(tb,fO),e(fO,CIo),e(tb,wIo),e(ro,AIo),e(ro,ab),e(ab,yIo),e(ab,Vme),e(Vme,LIo),e(ab,xIo),e(ab,Xme),e(Xme,$Io),e(ro,kIo),M(nb,ro,null),b(f,Oqe,u),b(f,zi,u),e(zi,sb),e(sb,zme),M(wy,zme,null),e(zi,SIo),e(zi,Wme),e(Wme,RIo),b(f,Vqe,u),b(f,Bo,u),M(Ay,Bo,null),e(Bo,PIo),e(Bo,Wi),e(Wi,BIo),e(Wi,mO),e(mO,IIo),e(Wi,qIo),e(Wi,gO),e(gO,NIo),e(Wi,jIo),e(Bo,DIo),e(Bo,yy),e(yy,GIo),e(yy,Qme),e(Qme,OIo),e(yy,VIo),e(Bo,XIo),e(Bo,ct),M(Ly,ct,null),e(ct,zIo),e(ct,Hme),e(Hme,WIo),e(ct,QIo),e(ct,Qi),e(Qi,HIo),e(Qi,Ume),e(Ume,UIo),e(Qi,JIo),e(Qi,hO),e(hO,YIo),e(Qi,KIo),e(ct,ZIo),M(lb,ct,null),e(Bo,eqo),e(Bo,to),M(xy,to,null),e(to,oqo),e(to,Jme),e(Jme,rqo),e(to,tqo),e(to,Ba),e(Ba,aqo),e(Ba,Yme),e(Yme,nqo),e(Ba,sqo),e(Ba,Kme),e(Kme,lqo),e(Ba,iqo),e(Ba,Zme),e(Zme,dqo),e(Ba,cqo),e(to,fqo),e(to,Yr),e(Yr,ib),e(ib,ege),e(ege,mqo),e(ib,gqo),e(ib,pO),e(pO,hqo),e(ib,pqo),e(Yr,_qo),e(Yr,db),e(db,oge),e(oge,uqo),e(db,bqo),e(db,_O),e(_O,vqo),e(db,Fqo),e(Yr,Tqo),e(Yr,cb),e(cb,rge),e(rge,Mqo),e(cb,Eqo),e(cb,uO),e(uO,Cqo),e(cb,wqo),e(Yr,Aqo),e(Yr,fb),e(fb,tge),e(tge,yqo),e(fb,Lqo),e(fb,bO),e(bO,xqo),e(fb,$qo),e(Yr,kqo),e(Yr,mb),e(mb,age),e(age,Sqo),e(mb,Rqo),e(mb,vO),e(vO,Pqo),e(mb,Bqo),e(to,Iqo),e(to,gb),e(gb,qqo),e(gb,nge),e(nge,Nqo),e(gb,jqo),e(gb,sge),e(sge,Dqo),e(to,Gqo),M(hb,to,null),b(f,Xqe,u),b(f,Hi,u),e(Hi,pb),e(pb,lge),M($y,lge,null),e(Hi,Oqo),e(Hi,ige),e(ige,Vqo),b(f,zqe,u),b(f,Io,u),M(ky,Io,null),e(Io,Xqo),e(Io,Ui),e(Ui,zqo),e(Ui,FO),e(FO,Wqo),e(Ui,Qqo),e(Ui,TO),e(TO,Hqo),e(Ui,Uqo),e(Io,Jqo),e(Io,Sy),e(Sy,Yqo),e(Sy,dge),e(dge,Kqo),e(Sy,Zqo),e(Io,eNo),e(Io,ft),M(Ry,ft,null),e(ft,oNo),e(ft,cge),e(cge,rNo),e(ft,tNo),e(ft,Ji),e(Ji,aNo),e(Ji,fge),e(fge,nNo),e(Ji,sNo),e(Ji,MO),e(MO,lNo),e(Ji,iNo),e(ft,dNo),M(_b,ft,null),e(Io,cNo),e(Io,ao),M(Py,ao,null),e(ao,fNo),e(ao,mge),e(mge,mNo),e(ao,gNo),e(ao,Ia),e(Ia,hNo),e(Ia,gge),e(gge,pNo),e(Ia,_No),e(Ia,hge),e(hge,uNo),e(Ia,bNo),e(Ia,pge),e(pge,vNo),e(Ia,FNo),e(ao,TNo),e(ao,U),e(U,ub),e(ub,_ge),e(_ge,MNo),e(ub,ENo),e(ub,EO),e(EO,CNo),e(ub,wNo),e(U,ANo),e(U,bb),e(bb,uge),e(uge,yNo),e(bb,LNo),e(bb,CO),e(CO,xNo),e(bb,$No),e(U,kNo),e(U,vb),e(vb,bge),e(bge,SNo),e(vb,RNo),e(vb,wO),e(wO,PNo),e(vb,BNo),e(U,INo),e(U,Fb),e(Fb,vge),e(vge,qNo),e(Fb,NNo),e(Fb,AO),e(AO,jNo),e(Fb,DNo),e(U,GNo),e(U,Tb),e(Tb,Fge),e(Fge,ONo),e(Tb,VNo),e(Tb,yO),e(yO,XNo),e(Tb,zNo),e(U,WNo),e(U,Mb),e(Mb,Tge),e(Tge,QNo),e(Mb,HNo),e(Mb,LO),e(LO,UNo),e(Mb,JNo),e(U,YNo),e(U,Eb),e(Eb,Mge),e(Mge,KNo),e(Eb,ZNo),e(Eb,xO),e(xO,ejo),e(Eb,ojo),e(U,rjo),e(U,Cb),e(Cb,Ege),e(Ege,tjo),e(Cb,ajo),e(Cb,$O),e($O,njo),e(Cb,sjo),e(U,ljo),e(U,wb),e(wb,Cge),e(Cge,ijo),e(wb,djo),e(wb,kO),e(kO,cjo),e(wb,fjo),e(U,mjo),e(U,Ab),e(Ab,wge),e(wge,gjo),e(Ab,hjo),e(Ab,SO),e(SO,pjo),e(Ab,_jo),e(U,ujo),e(U,yb),e(yb,Age),e(Age,bjo),e(yb,vjo),e(yb,RO),e(RO,Fjo),e(yb,Tjo),e(U,Mjo),e(U,Lb),e(Lb,yge),e(yge,Ejo),e(Lb,Cjo),e(Lb,PO),e(PO,wjo),e(Lb,Ajo),e(U,yjo),e(U,xb),e(xb,Lge),e(Lge,Ljo),e(xb,xjo),e(xb,BO),e(BO,$jo),e(xb,kjo),e(U,Sjo),e(U,$b),e($b,xge),e(xge,Rjo),e($b,Pjo),e($b,IO),e(IO,Bjo),e($b,Ijo),e(U,qjo),e(U,kb),e(kb,$ge),e($ge,Njo),e(kb,jjo),e(kb,qO),e(qO,Djo),e(kb,Gjo),e(U,Ojo),e(U,Sb),e(Sb,kge),e(kge,Vjo),e(Sb,Xjo),e(Sb,NO),e(NO,zjo),e(Sb,Wjo),e(U,Qjo),e(U,Rb),e(Rb,Sge),e(Sge,Hjo),e(Rb,Ujo),e(Rb,jO),e(jO,Jjo),e(Rb,Yjo),e(U,Kjo),e(U,Pb),e(Pb,Rge),e(Rge,Zjo),e(Pb,eDo),e(Pb,DO),e(DO,oDo),e(Pb,rDo),e(U,tDo),e(U,Bb),e(Bb,Pge),e(Pge,aDo),e(Bb,nDo),e(Bb,GO),e(GO,sDo),e(Bb,lDo),e(U,iDo),e(U,Ib),e(Ib,Bge),e(Bge,dDo),e(Ib,cDo),e(Ib,OO),e(OO,fDo),e(Ib,mDo),e(U,gDo),e(U,qb),e(qb,Ige),e(Ige,hDo),e(qb,pDo),e(qb,VO),e(VO,_Do),e(qb,uDo),e(U,bDo),e(U,Nb),e(Nb,qge),e(qge,vDo),e(Nb,FDo),e(Nb,XO),e(XO,TDo),e(Nb,MDo),e(U,EDo),e(U,jb),e(jb,Nge),e(Nge,CDo),e(jb,wDo),e(jb,zO),e(zO,ADo),e(jb,yDo),e(U,LDo),e(U,Db),e(Db,jge),e(jge,xDo),e(Db,$Do),e(Db,WO),e(WO,kDo),e(Db,SDo),e(U,RDo),e(U,Gb),e(Gb,Dge),e(Dge,PDo),e(Gb,BDo),e(Gb,QO),e(QO,IDo),e(Gb,qDo),e(U,NDo),e(U,Ob),e(Ob,Gge),e(Gge,jDo),e(Ob,DDo),e(Ob,HO),e(HO,GDo),e(Ob,ODo),e(U,VDo),e(U,Vb),e(Vb,Oge),e(Oge,XDo),e(Vb,zDo),e(Vb,UO),e(UO,WDo),e(Vb,QDo),e(U,HDo),e(U,Xb),e(Xb,Vge),e(Vge,UDo),e(Xb,JDo),e(Xb,JO),e(JO,YDo),e(Xb,KDo),e(U,ZDo),e(U,zb),e(zb,Xge),e(Xge,eGo),e(zb,oGo),e(zb,YO),e(YO,rGo),e(zb,tGo),e(U,aGo),e(U,Wb),e(Wb,zge),e(zge,nGo),e(Wb,sGo),e(Wb,KO),e(KO,lGo),e(Wb,iGo),e(U,dGo),e(U,Qb),e(Qb,Wge),e(Wge,cGo),e(Qb,fGo),e(Qb,ZO),e(ZO,mGo),e(Qb,gGo),e(U,hGo),e(U,Hb),e(Hb,Qge),e(Qge,pGo),e(Hb,_Go),e(Hb,eV),e(eV,uGo),e(Hb,bGo),e(U,vGo),e(U,Ub),e(Ub,Hge),e(Hge,FGo),e(Ub,TGo),e(Ub,oV),e(oV,MGo),e(Ub,EGo),e(ao,CGo),e(ao,Jb),e(Jb,wGo),e(Jb,Uge),e(Uge,AGo),e(Jb,yGo),e(Jb,Jge),e(Jge,LGo),e(ao,xGo),M(Yb,ao,null),b(f,Wqe,u),b(f,Yi,u),e(Yi,Kb),e(Kb,Yge),M(By,Yge,null),e(Yi,$Go),e(Yi,Kge),e(Kge,kGo),b(f,Qqe,u),b(f,qo,u),M(Iy,qo,null),e(qo,SGo),e(qo,Ki),e(Ki,RGo),e(Ki,rV),e(rV,PGo),e(Ki,BGo),e(Ki,tV),e(tV,IGo),e(Ki,qGo),e(qo,NGo),e(qo,qy),e(qy,jGo),e(qy,Zge),e(Zge,DGo),e(qy,GGo),e(qo,OGo),e(qo,mt),M(Ny,mt,null),e(mt,VGo),e(mt,ehe),e(ehe,XGo),e(mt,zGo),e(mt,Zi),e(Zi,WGo),e(Zi,ohe),e(ohe,QGo),e(Zi,HGo),e(Zi,aV),e(aV,UGo),e(Zi,JGo),e(mt,YGo),M(Zb,mt,null),e(qo,KGo),e(qo,no),M(jy,no,null),e(no,ZGo),e(no,rhe),e(rhe,eOo),e(no,oOo),e(no,qa),e(qa,rOo),e(qa,the),e(the,tOo),e(qa,aOo),e(qa,ahe),e(ahe,nOo),e(qa,sOo),e(qa,nhe),e(nhe,lOo),e(qa,iOo),e(no,dOo),e(no,V),e(V,ev),e(ev,she),e(she,cOo),e(ev,fOo),e(ev,nV),e(nV,mOo),e(ev,gOo),e(V,hOo),e(V,ov),e(ov,lhe),e(lhe,pOo),e(ov,_Oo),e(ov,sV),e(sV,uOo),e(ov,bOo),e(V,vOo),e(V,rv),e(rv,ihe),e(ihe,FOo),e(rv,TOo),e(rv,lV),e(lV,MOo),e(rv,EOo),e(V,COo),e(V,tv),e(tv,dhe),e(dhe,wOo),e(tv,AOo),e(tv,iV),e(iV,yOo),e(tv,LOo),e(V,xOo),e(V,av),e(av,che),e(che,$Oo),e(av,kOo),e(av,dV),e(dV,SOo),e(av,ROo),e(V,POo),e(V,nv),e(nv,fhe),e(fhe,BOo),e(nv,IOo),e(nv,cV),e(cV,qOo),e(nv,NOo),e(V,jOo),e(V,sv),e(sv,mhe),e(mhe,DOo),e(sv,GOo),e(sv,fV),e(fV,OOo),e(sv,VOo),e(V,XOo),e(V,lv),e(lv,ghe),e(ghe,zOo),e(lv,WOo),e(lv,mV),e(mV,QOo),e(lv,HOo),e(V,UOo),e(V,iv),e(iv,hhe),e(hhe,JOo),e(iv,YOo),e(iv,gV),e(gV,KOo),e(iv,ZOo),e(V,eVo),e(V,dv),e(dv,phe),e(phe,oVo),e(dv,rVo),e(dv,hV),e(hV,tVo),e(dv,aVo),e(V,nVo),e(V,cv),e(cv,_he),e(_he,sVo),e(cv,lVo),e(cv,pV),e(pV,iVo),e(cv,dVo),e(V,cVo),e(V,fv),e(fv,uhe),e(uhe,fVo),e(fv,mVo),e(fv,_V),e(_V,gVo),e(fv,hVo),e(V,pVo),e(V,mv),e(mv,bhe),e(bhe,_Vo),e(mv,uVo),e(mv,uV),e(uV,bVo),e(mv,vVo),e(V,FVo),e(V,gv),e(gv,vhe),e(vhe,TVo),e(gv,MVo),e(gv,bV),e(bV,EVo),e(gv,CVo),e(V,wVo),e(V,hv),e(hv,Fhe),e(Fhe,AVo),e(hv,yVo),e(hv,vV),e(vV,LVo),e(hv,xVo),e(V,$Vo),e(V,pv),e(pv,The),e(The,kVo),e(pv,SVo),e(pv,FV),e(FV,RVo),e(pv,PVo),e(V,BVo),e(V,_v),e(_v,Mhe),e(Mhe,IVo),e(_v,qVo),e(_v,TV),e(TV,NVo),e(_v,jVo),e(V,DVo),e(V,uv),e(uv,Ehe),e(Ehe,GVo),e(uv,OVo),e(uv,MV),e(MV,VVo),e(uv,XVo),e(V,zVo),e(V,bv),e(bv,Che),e(Che,WVo),e(bv,QVo),e(bv,EV),e(EV,HVo),e(bv,UVo),e(V,JVo),e(V,vv),e(vv,whe),e(whe,YVo),e(vv,KVo),e(vv,CV),e(CV,ZVo),e(vv,eXo),e(V,oXo),e(V,Fv),e(Fv,Ahe),e(Ahe,rXo),e(Fv,tXo),e(Fv,wV),e(wV,aXo),e(Fv,nXo),e(V,sXo),e(V,Tv),e(Tv,yhe),e(yhe,lXo),e(Tv,iXo),e(Tv,AV),e(AV,dXo),e(Tv,cXo),e(V,fXo),e(V,Mv),e(Mv,Lhe),e(Lhe,mXo),e(Mv,gXo),e(Mv,yV),e(yV,hXo),e(Mv,pXo),e(V,_Xo),e(V,Ev),e(Ev,xhe),e(xhe,uXo),e(Ev,bXo),e(Ev,LV),e(LV,vXo),e(Ev,FXo),e(V,TXo),e(V,Cv),e(Cv,$he),e($he,MXo),e(Cv,EXo),e(Cv,xV),e(xV,CXo),e(Cv,wXo),e(V,AXo),e(V,wv),e(wv,khe),e(khe,yXo),e(wv,LXo),e(wv,$V),e($V,xXo),e(wv,$Xo),e(V,kXo),e(V,Av),e(Av,She),e(She,SXo),e(Av,RXo),e(Av,kV),e(kV,PXo),e(Av,BXo),e(V,IXo),e(V,yv),e(yv,Rhe),e(Rhe,qXo),e(yv,NXo),e(yv,SV),e(SV,jXo),e(yv,DXo),e(V,GXo),e(V,Lv),e(Lv,Phe),e(Phe,OXo),e(Lv,VXo),e(Lv,RV),e(RV,XXo),e(Lv,zXo),e(V,WXo),e(V,xv),e(xv,Bhe),e(Bhe,QXo),e(xv,HXo),e(xv,PV),e(PV,UXo),e(xv,JXo),e(V,YXo),e(V,$v),e($v,Ihe),e(Ihe,KXo),e($v,ZXo),e($v,BV),e(BV,ezo),e($v,ozo),e(V,rzo),e(V,kv),e(kv,qhe),e(qhe,tzo),e(kv,azo),e(kv,IV),e(IV,nzo),e(kv,szo),e(V,lzo),e(V,Sv),e(Sv,Nhe),e(Nhe,izo),e(Sv,dzo),e(Sv,qV),e(qV,czo),e(Sv,fzo),e(V,mzo),e(V,Rv),e(Rv,jhe),e(jhe,gzo),e(Rv,hzo),e(Rv,NV),e(NV,pzo),e(Rv,_zo),e(V,uzo),e(V,Pv),e(Pv,Dhe),e(Dhe,bzo),e(Pv,vzo),e(Pv,jV),e(jV,Fzo),e(Pv,Tzo),e(V,Mzo),e(V,Bv),e(Bv,Ghe),e(Ghe,Ezo),e(Bv,Czo),e(Bv,DV),e(DV,wzo),e(Bv,Azo),e(V,yzo),e(V,Iv),e(Iv,Ohe),e(Ohe,Lzo),e(Iv,xzo),e(Iv,GV),e(GV,$zo),e(Iv,kzo),e(V,Szo),e(V,qv),e(qv,Vhe),e(Vhe,Rzo),e(qv,Pzo),e(qv,OV),e(OV,Bzo),e(qv,Izo),e(V,qzo),e(V,Nv),e(Nv,Xhe),e(Xhe,Nzo),e(Nv,jzo),e(Nv,VV),e(VV,Dzo),e(Nv,Gzo),e(no,Ozo),e(no,jv),e(jv,Vzo),e(jv,zhe),e(zhe,Xzo),e(jv,zzo),e(jv,Whe),e(Whe,Wzo),e(no,Qzo),M(Dv,no,null),b(f,Hqe,u),b(f,ed,u),e(ed,Gv),e(Gv,Qhe),M(Dy,Qhe,null),e(ed,Hzo),e(ed,Hhe),e(Hhe,Uzo),b(f,Uqe,u),b(f,No,u),M(Gy,No,null),e(No,Jzo),e(No,od),e(od,Yzo),e(od,XV),e(XV,Kzo),e(od,Zzo),e(od,zV),e(zV,eWo),e(od,oWo),e(No,rWo),e(No,Oy),e(Oy,tWo),e(Oy,Uhe),e(Uhe,aWo),e(Oy,nWo),e(No,sWo),e(No,gt),M(Vy,gt,null),e(gt,lWo),e(gt,Jhe),e(Jhe,iWo),e(gt,dWo),e(gt,rd),e(rd,cWo),e(rd,Yhe),e(Yhe,fWo),e(rd,mWo),e(rd,WV),e(WV,gWo),e(rd,hWo),e(gt,pWo),M(Ov,gt,null),e(No,_Wo),e(No,so),M(Xy,so,null),e(so,uWo),e(so,Khe),e(Khe,bWo),e(so,vWo),e(so,Na),e(Na,FWo),e(Na,Zhe),e(Zhe,TWo),e(Na,MWo),e(Na,epe),e(epe,EWo),e(Na,CWo),e(Na,ope),e(ope,wWo),e(Na,AWo),e(so,yWo),e(so,rpe),e(rpe,Vv),e(Vv,tpe),e(tpe,LWo),e(Vv,xWo),e(Vv,QV),e(QV,$Wo),e(Vv,kWo),e(so,SWo),e(so,Xv),e(Xv,RWo),e(Xv,ape),e(ape,PWo),e(Xv,BWo),e(Xv,npe),e(npe,IWo),e(so,qWo),M(zv,so,null),b(f,Jqe,u),b(f,td,u),e(td,Wv),e(Wv,spe),M(zy,spe,null),e(td,NWo),e(td,lpe),e(lpe,jWo),b(f,Yqe,u),b(f,jo,u),M(Wy,jo,null),e(jo,DWo),e(jo,ad),e(ad,GWo),e(ad,HV),e(HV,OWo),e(ad,VWo),e(ad,UV),e(UV,XWo),e(ad,zWo),e(jo,WWo),e(jo,Qy),e(Qy,QWo),e(Qy,ipe),e(ipe,HWo),e(Qy,UWo),e(jo,JWo),e(jo,ht),M(Hy,ht,null),e(ht,YWo),e(ht,dpe),e(dpe,KWo),e(ht,ZWo),e(ht,nd),e(nd,eQo),e(nd,cpe),e(cpe,oQo),e(nd,rQo),e(nd,JV),e(JV,tQo),e(nd,aQo),e(ht,nQo),M(Qv,ht,null),e(jo,sQo),e(jo,lo),M(Uy,lo,null),e(lo,lQo),e(lo,fpe),e(fpe,iQo),e(lo,dQo),e(lo,ja),e(ja,cQo),e(ja,mpe),e(mpe,fQo),e(ja,mQo),e(ja,gpe),e(gpe,gQo),e(ja,hQo),e(ja,hpe),e(hpe,pQo),e(ja,_Qo),e(lo,uQo),e(lo,Fe),e(Fe,Hv),e(Hv,ppe),e(ppe,bQo),e(Hv,vQo),e(Hv,YV),e(YV,FQo),e(Hv,TQo),e(Fe,MQo),e(Fe,Uv),e(Uv,_pe),e(_pe,EQo),e(Uv,CQo),e(Uv,KV),e(KV,wQo),e(Uv,AQo),e(Fe,yQo),e(Fe,Jv),e(Jv,upe),e(upe,LQo),e(Jv,xQo),e(Jv,ZV),e(ZV,$Qo),e(Jv,kQo),e(Fe,SQo),e(Fe,Yv),e(Yv,bpe),e(bpe,RQo),e(Yv,PQo),e(Yv,eX),e(eX,BQo),e(Yv,IQo),e(Fe,qQo),e(Fe,Ps),e(Ps,vpe),e(vpe,NQo),e(Ps,jQo),e(Ps,oX),e(oX,DQo),e(Ps,GQo),e(Ps,rX),e(rX,OQo),e(Ps,VQo),e(Fe,XQo),e(Fe,Kv),e(Kv,Fpe),e(Fpe,zQo),e(Kv,WQo),e(Kv,tX),e(tX,QQo),e(Kv,HQo),e(Fe,UQo),e(Fe,pt),e(pt,Tpe),e(Tpe,JQo),e(pt,YQo),e(pt,aX),e(aX,KQo),e(pt,ZQo),e(pt,nX),e(nX,eHo),e(pt,oHo),e(pt,sX),e(sX,rHo),e(pt,tHo),e(Fe,aHo),e(Fe,Zv),e(Zv,Mpe),e(Mpe,nHo),e(Zv,sHo),e(Zv,lX),e(lX,lHo),e(Zv,iHo),e(Fe,dHo),e(Fe,eF),e(eF,Epe),e(Epe,cHo),e(eF,fHo),e(eF,iX),e(iX,mHo),e(eF,gHo),e(Fe,hHo),e(Fe,oF),e(oF,Cpe),e(Cpe,pHo),e(oF,_Ho),e(oF,dX),e(dX,uHo),e(oF,bHo),e(Fe,vHo),e(Fe,rF),e(rF,wpe),e(wpe,FHo),e(rF,THo),e(rF,cX),e(cX,MHo),e(rF,EHo),e(Fe,CHo),e(Fe,tF),e(tF,Ape),e(Ape,wHo),e(tF,AHo),e(tF,fX),e(fX,yHo),e(tF,LHo),e(Fe,xHo),e(Fe,aF),e(aF,ype),e(ype,$Ho),e(aF,kHo),e(aF,mX),e(mX,SHo),e(aF,RHo),e(Fe,PHo),e(Fe,nF),e(nF,Lpe),e(Lpe,BHo),e(nF,IHo),e(nF,gX),e(gX,qHo),e(nF,NHo),e(lo,jHo),e(lo,sF),e(sF,DHo),e(sF,xpe),e(xpe,GHo),e(sF,OHo),e(sF,$pe),e($pe,VHo),e(lo,XHo),M(lF,lo,null),b(f,Kqe,u),b(f,sd,u),e(sd,iF),e(iF,kpe),M(Jy,kpe,null),e(sd,zHo),e(sd,Spe),e(Spe,WHo),b(f,Zqe,u),b(f,Do,u),M(Yy,Do,null),e(Do,QHo),e(Do,ld),e(ld,HHo),e(ld,hX),e(hX,UHo),e(ld,JHo),e(ld,pX),e(pX,YHo),e(ld,KHo),e(Do,ZHo),e(Do,Ky),e(Ky,eUo),e(Ky,Rpe),e(Rpe,oUo),e(Ky,rUo),e(Do,tUo),e(Do,_t),M(Zy,_t,null),e(_t,aUo),e(_t,Ppe),e(Ppe,nUo),e(_t,sUo),e(_t,id),e(id,lUo),e(id,Bpe),e(Bpe,iUo),e(id,dUo),e(id,_X),e(_X,cUo),e(id,fUo),e(_t,mUo),M(dF,_t,null),e(Do,gUo),e(Do,io),M(eL,io,null),e(io,hUo),e(io,Ipe),e(Ipe,pUo),e(io,_Uo),e(io,Da),e(Da,uUo),e(Da,qpe),e(qpe,bUo),e(Da,vUo),e(Da,Npe),e(Npe,FUo),e(Da,TUo),e(Da,jpe),e(jpe,MUo),e(Da,EUo),e(io,CUo),e(io,Dpe),e(Dpe,cF),e(cF,Gpe),e(Gpe,wUo),e(cF,AUo),e(cF,uX),e(uX,yUo),e(cF,LUo),e(io,xUo),e(io,fF),e(fF,$Uo),e(fF,Ope),e(Ope,kUo),e(fF,SUo),e(fF,Vpe),e(Vpe,RUo),e(io,PUo),M(mF,io,null),b(f,eNe,u),b(f,dd,u),e(dd,gF),e(gF,Xpe),M(oL,Xpe,null),e(dd,BUo),e(dd,zpe),e(zpe,IUo),b(f,oNe,u),b(f,Go,u),M(rL,Go,null),e(Go,qUo),e(Go,cd),e(cd,NUo),e(cd,bX),e(bX,jUo),e(cd,DUo),e(cd,vX),e(vX,GUo),e(cd,OUo),e(Go,VUo),e(Go,tL),e(tL,XUo),e(tL,Wpe),e(Wpe,zUo),e(tL,WUo),e(Go,QUo),e(Go,ut),M(aL,ut,null),e(ut,HUo),e(ut,Qpe),e(Qpe,UUo),e(ut,JUo),e(ut,fd),e(fd,YUo),e(fd,Hpe),e(Hpe,KUo),e(fd,ZUo),e(fd,FX),e(FX,eJo),e(fd,oJo),e(ut,rJo),M(hF,ut,null),e(Go,tJo),e(Go,co),M(nL,co,null),e(co,aJo),e(co,Upe),e(Upe,nJo),e(co,sJo),e(co,Ga),e(Ga,lJo),e(Ga,Jpe),e(Jpe,iJo),e(Ga,dJo),e(Ga,Ype),e(Ype,cJo),e(Ga,fJo),e(Ga,Kpe),e(Kpe,mJo),e(Ga,gJo),e(co,hJo),e(co,Se),e(Se,pF),e(pF,Zpe),e(Zpe,pJo),e(pF,_Jo),e(pF,TX),e(TX,uJo),e(pF,bJo),e(Se,vJo),e(Se,_F),e(_F,e_e),e(e_e,FJo),e(_F,TJo),e(_F,MX),e(MX,MJo),e(_F,EJo),e(Se,CJo),e(Se,uF),e(uF,o_e),e(o_e,wJo),e(uF,AJo),e(uF,EX),e(EX,yJo),e(uF,LJo),e(Se,xJo),e(Se,bF),e(bF,r_e),e(r_e,$Jo),e(bF,kJo),e(bF,CX),e(CX,SJo),e(bF,RJo),e(Se,PJo),e(Se,vF),e(vF,t_e),e(t_e,BJo),e(vF,IJo),e(vF,wX),e(wX,qJo),e(vF,NJo),e(Se,jJo),e(Se,FF),e(FF,a_e),e(a_e,DJo),e(FF,GJo),e(FF,AX),e(AX,OJo),e(FF,VJo),e(Se,XJo),e(Se,TF),e(TF,n_e),e(n_e,zJo),e(TF,WJo),e(TF,yX),e(yX,QJo),e(TF,HJo),e(Se,UJo),e(Se,MF),e(MF,s_e),e(s_e,JJo),e(MF,YJo),e(MF,LX),e(LX,KJo),e(MF,ZJo),e(Se,eYo),e(Se,EF),e(EF,l_e),e(l_e,oYo),e(EF,rYo),e(EF,xX),e(xX,tYo),e(EF,aYo),e(co,nYo),e(co,CF),e(CF,sYo),e(CF,i_e),e(i_e,lYo),e(CF,iYo),e(CF,d_e),e(d_e,dYo),e(co,cYo),M(wF,co,null),b(f,rNe,u),b(f,md,u),e(md,AF),e(AF,c_e),M(sL,c_e,null),e(md,fYo),e(md,f_e),e(f_e,mYo),b(f,tNe,u),b(f,Oo,u),M(lL,Oo,null),e(Oo,gYo),e(Oo,gd),e(gd,hYo),e(gd,$X),e($X,pYo),e(gd,_Yo),e(gd,kX),e(kX,uYo),e(gd,bYo),e(Oo,vYo),e(Oo,iL),e(iL,FYo),e(iL,m_e),e(m_e,TYo),e(iL,MYo),e(Oo,EYo),e(Oo,bt),M(dL,bt,null),e(bt,CYo),e(bt,g_e),e(g_e,wYo),e(bt,AYo),e(bt,hd),e(hd,yYo),e(hd,h_e),e(h_e,LYo),e(hd,xYo),e(hd,SX),e(SX,$Yo),e(hd,kYo),e(bt,SYo),M(yF,bt,null),e(Oo,RYo),e(Oo,fo),M(cL,fo,null),e(fo,PYo),e(fo,p_e),e(p_e,BYo),e(fo,IYo),e(fo,Oa),e(Oa,qYo),e(Oa,__e),e(__e,NYo),e(Oa,jYo),e(Oa,u_e),e(u_e,DYo),e(Oa,GYo),e(Oa,b_e),e(b_e,OYo),e(Oa,VYo),e(fo,XYo),e(fo,Kr),e(Kr,LF),e(LF,v_e),e(v_e,zYo),e(LF,WYo),e(LF,RX),e(RX,QYo),e(LF,HYo),e(Kr,UYo),e(Kr,xF),e(xF,F_e),e(F_e,JYo),e(xF,YYo),e(xF,PX),e(PX,KYo),e(xF,ZYo),e(Kr,eKo),e(Kr,$F),e($F,T_e),e(T_e,oKo),e($F,rKo),e($F,BX),e(BX,tKo),e($F,aKo),e(Kr,nKo),e(Kr,kF),e(kF,M_e),e(M_e,sKo),e(kF,lKo),e(kF,IX),e(IX,iKo),e(kF,dKo),e(Kr,cKo),e(Kr,SF),e(SF,E_e),e(E_e,fKo),e(SF,mKo),e(SF,qX),e(qX,gKo),e(SF,hKo),e(fo,pKo),e(fo,RF),e(RF,_Ko),e(RF,C_e),e(C_e,uKo),e(RF,bKo),e(RF,w_e),e(w_e,vKo),e(fo,FKo),M(PF,fo,null),b(f,aNe,u),b(f,pd,u),e(pd,BF),e(BF,A_e),M(fL,A_e,null),e(pd,TKo),e(pd,y_e),e(y_e,MKo),b(f,nNe,u),b(f,Vo,u),M(mL,Vo,null),e(Vo,EKo),e(Vo,_d),e(_d,CKo),e(_d,NX),e(NX,wKo),e(_d,AKo),e(_d,jX),e(jX,yKo),e(_d,LKo),e(Vo,xKo),e(Vo,gL),e(gL,$Ko),e(gL,L_e),e(L_e,kKo),e(gL,SKo),e(Vo,RKo),e(Vo,vt),M(hL,vt,null),e(vt,PKo),e(vt,x_e),e(x_e,BKo),e(vt,IKo),e(vt,ud),e(ud,qKo),e(ud,$_e),e($_e,NKo),e(ud,jKo),e(ud,DX),e(DX,DKo),e(ud,GKo),e(vt,OKo),M(IF,vt,null),e(Vo,VKo),e(Vo,mo),M(pL,mo,null),e(mo,XKo),e(mo,k_e),e(k_e,zKo),e(mo,WKo),e(mo,Va),e(Va,QKo),e(Va,S_e),e(S_e,HKo),e(Va,UKo),e(Va,R_e),e(R_e,JKo),e(Va,YKo),e(Va,P_e),e(P_e,KKo),e(Va,ZKo),e(mo,eZo),e(mo,Re),e(Re,qF),e(qF,B_e),e(B_e,oZo),e(qF,rZo),e(qF,GX),e(GX,tZo),e(qF,aZo),e(Re,nZo),e(Re,NF),e(NF,I_e),e(I_e,sZo),e(NF,lZo),e(NF,OX),e(OX,iZo),e(NF,dZo),e(Re,cZo),e(Re,jF),e(jF,q_e),e(q_e,fZo),e(jF,mZo),e(jF,VX),e(VX,gZo),e(jF,hZo),e(Re,pZo),e(Re,DF),e(DF,N_e),e(N_e,_Zo),e(DF,uZo),e(DF,XX),e(XX,bZo),e(DF,vZo),e(Re,FZo),e(Re,GF),e(GF,j_e),e(j_e,TZo),e(GF,MZo),e(GF,zX),e(zX,EZo),e(GF,CZo),e(Re,wZo),e(Re,OF),e(OF,D_e),e(D_e,AZo),e(OF,yZo),e(OF,WX),e(WX,LZo),e(OF,xZo),e(Re,$Zo),e(Re,VF),e(VF,G_e),e(G_e,kZo),e(VF,SZo),e(VF,QX),e(QX,RZo),e(VF,PZo),e(Re,BZo),e(Re,XF),e(XF,O_e),e(O_e,IZo),e(XF,qZo),e(XF,HX),e(HX,NZo),e(XF,jZo),e(Re,DZo),e(Re,zF),e(zF,V_e),e(V_e,GZo),e(zF,OZo),e(zF,UX),e(UX,VZo),e(zF,XZo),e(mo,zZo),e(mo,WF),e(WF,WZo),e(WF,X_e),e(X_e,QZo),e(WF,HZo),e(WF,z_e),e(z_e,UZo),e(mo,JZo),M(QF,mo,null),b(f,sNe,u),b(f,bd,u),e(bd,HF),e(HF,W_e),M(_L,W_e,null),e(bd,YZo),e(bd,Q_e),e(Q_e,KZo),b(f,lNe,u),b(f,Xo,u),M(uL,Xo,null),e(Xo,ZZo),e(Xo,vd),e(vd,eer),e(vd,JX),e(JX,oer),e(vd,rer),e(vd,YX),e(YX,ter),e(vd,aer),e(Xo,ner),e(Xo,bL),e(bL,ser),e(bL,H_e),e(H_e,ler),e(bL,ier),e(Xo,der),e(Xo,Ft),M(vL,Ft,null),e(Ft,cer),e(Ft,U_e),e(U_e,fer),e(Ft,mer),e(Ft,Fd),e(Fd,ger),e(Fd,J_e),e(J_e,her),e(Fd,per),e(Fd,KX),e(KX,_er),e(Fd,uer),e(Ft,ber),M(UF,Ft,null),e(Xo,ver),e(Xo,go),M(FL,go,null),e(go,Fer),e(go,Y_e),e(Y_e,Ter),e(go,Mer),e(go,Xa),e(Xa,Eer),e(Xa,K_e),e(K_e,Cer),e(Xa,wer),e(Xa,Z_e),e(Z_e,Aer),e(Xa,yer),e(Xa,eue),e(eue,Ler),e(Xa,xer),e(go,$er),e(go,TL),e(TL,JF),e(JF,oue),e(oue,ker),e(JF,Ser),e(JF,ZX),e(ZX,Rer),e(JF,Per),e(TL,Ber),e(TL,YF),e(YF,rue),e(rue,Ier),e(YF,qer),e(YF,ez),e(ez,Ner),e(YF,jer),e(go,Der),e(go,KF),e(KF,Ger),e(KF,tue),e(tue,Oer),e(KF,Ver),e(KF,aue),e(aue,Xer),e(go,zer),M(ZF,go,null),b(f,iNe,u),b(f,Td,u),e(Td,eT),e(eT,nue),M(ML,nue,null),e(Td,Wer),e(Td,sue),e(sue,Qer),b(f,dNe,u),b(f,zo,u),M(EL,zo,null),e(zo,Her),e(zo,Md),e(Md,Uer),e(Md,oz),e(oz,Jer),e(Md,Yer),e(Md,rz),e(rz,Ker),e(Md,Zer),e(zo,eor),e(zo,CL),e(CL,oor),e(CL,lue),e(lue,ror),e(CL,tor),e(zo,aor),e(zo,Tt),M(wL,Tt,null),e(Tt,nor),e(Tt,iue),e(iue,sor),e(Tt,lor),e(Tt,Ed),e(Ed,ior),e(Ed,due),e(due,dor),e(Ed,cor),e(Ed,tz),e(tz,mor),e(Ed,gor),e(Tt,hor),M(oT,Tt,null),e(zo,por),e(zo,ho),M(AL,ho,null),e(ho,_or),e(ho,cue),e(cue,uor),e(ho,bor),e(ho,za),e(za,vor),e(za,fue),e(fue,For),e(za,Tor),e(za,mue),e(mue,Mor),e(za,Eor),e(za,gue),e(gue,Cor),e(za,wor),e(ho,Aor),e(ho,Zr),e(Zr,rT),e(rT,hue),e(hue,yor),e(rT,Lor),e(rT,az),e(az,xor),e(rT,$or),e(Zr,kor),e(Zr,tT),e(tT,pue),e(pue,Sor),e(tT,Ror),e(tT,nz),e(nz,Por),e(tT,Bor),e(Zr,Ior),e(Zr,aT),e(aT,_ue),e(_ue,qor),e(aT,Nor),e(aT,sz),e(sz,jor),e(aT,Dor),e(Zr,Gor),e(Zr,nT),e(nT,uue),e(uue,Oor),e(nT,Vor),e(nT,lz),e(lz,Xor),e(nT,zor),e(Zr,Wor),e(Zr,sT),e(sT,bue),e(bue,Qor),e(sT,Hor),e(sT,iz),e(iz,Uor),e(sT,Jor),e(ho,Yor),e(ho,lT),e(lT,Kor),e(lT,vue),e(vue,Zor),e(lT,err),e(lT,Fue),e(Fue,orr),e(ho,rrr),M(iT,ho,null),b(f,cNe,u),b(f,Cd,u),e(Cd,dT),e(dT,Tue),M(yL,Tue,null),e(Cd,trr),e(Cd,Mue),e(Mue,arr),b(f,fNe,u),b(f,Wo,u),M(LL,Wo,null),e(Wo,nrr),e(Wo,wd),e(wd,srr),e(wd,dz),e(dz,lrr),e(wd,irr),e(wd,cz),e(cz,drr),e(wd,crr),e(Wo,frr),e(Wo,xL),e(xL,mrr),e(xL,Eue),e(Eue,grr),e(xL,hrr),e(Wo,prr),e(Wo,Mt),M($L,Mt,null),e(Mt,_rr),e(Mt,Cue),e(Cue,urr),e(Mt,brr),e(Mt,Ad),e(Ad,vrr),e(Ad,wue),e(wue,Frr),e(Ad,Trr),e(Ad,fz),e(fz,Mrr),e(Ad,Err),e(Mt,Crr),M(cT,Mt,null),e(Wo,wrr),e(Wo,po),M(kL,po,null),e(po,Arr),e(po,Aue),e(Aue,yrr),e(po,Lrr),e(po,Wa),e(Wa,xrr),e(Wa,yue),e(yue,$rr),e(Wa,krr),e(Wa,Lue),e(Lue,Srr),e(Wa,Rrr),e(Wa,xue),e(xue,Prr),e(Wa,Brr),e(po,Irr),e(po,yd),e(yd,fT),e(fT,$ue),e($ue,qrr),e(fT,Nrr),e(fT,mz),e(mz,jrr),e(fT,Drr),e(yd,Grr),e(yd,mT),e(mT,kue),e(kue,Orr),e(mT,Vrr),e(mT,gz),e(gz,Xrr),e(mT,zrr),e(yd,Wrr),e(yd,gT),e(gT,Sue),e(Sue,Qrr),e(gT,Hrr),e(gT,hz),e(hz,Urr),e(gT,Jrr),e(po,Yrr),e(po,hT),e(hT,Krr),e(hT,Rue),e(Rue,Zrr),e(hT,etr),e(hT,Pue),e(Pue,otr),e(po,rtr),M(pT,po,null),b(f,mNe,u),b(f,Ld,u),e(Ld,_T),e(_T,Bue),M(SL,Bue,null),e(Ld,ttr),e(Ld,Iue),e(Iue,atr),b(f,gNe,u),b(f,Qo,u),M(RL,Qo,null),e(Qo,ntr),e(Qo,xd),e(xd,str),e(xd,pz),e(pz,ltr),e(xd,itr),e(xd,_z),e(_z,dtr),e(xd,ctr),e(Qo,ftr),e(Qo,PL),e(PL,mtr),e(PL,que),e(que,gtr),e(PL,htr),e(Qo,ptr),e(Qo,Et),M(BL,Et,null),e(Et,_tr),e(Et,Nue),e(Nue,utr),e(Et,btr),e(Et,$d),e($d,vtr),e($d,jue),e(jue,Ftr),e($d,Ttr),e($d,uz),e(uz,Mtr),e($d,Etr),e(Et,Ctr),M(uT,Et,null),e(Qo,wtr),e(Qo,_o),M(IL,_o,null),e(_o,Atr),e(_o,Due),e(Due,ytr),e(_o,Ltr),e(_o,Qa),e(Qa,xtr),e(Qa,Gue),e(Gue,$tr),e(Qa,ktr),e(Qa,Oue),e(Oue,Str),e(Qa,Rtr),e(Qa,Vue),e(Vue,Ptr),e(Qa,Btr),e(_o,Itr),e(_o,qL),e(qL,bT),e(bT,Xue),e(Xue,qtr),e(bT,Ntr),e(bT,bz),e(bz,jtr),e(bT,Dtr),e(qL,Gtr),e(qL,vT),e(vT,zue),e(zue,Otr),e(vT,Vtr),e(vT,vz),e(vz,Xtr),e(vT,ztr),e(_o,Wtr),e(_o,FT),e(FT,Qtr),e(FT,Wue),e(Wue,Htr),e(FT,Utr),e(FT,Que),e(Que,Jtr),e(_o,Ytr),M(TT,_o,null),b(f,hNe,u),b(f,kd,u),e(kd,MT),e(MT,Hue),M(NL,Hue,null),e(kd,Ktr),e(kd,Uue),e(Uue,Ztr),b(f,pNe,u),b(f,Ho,u),M(jL,Ho,null),e(Ho,ear),e(Ho,Sd),e(Sd,oar),e(Sd,Fz),e(Fz,rar),e(Sd,tar),e(Sd,Tz),e(Tz,aar),e(Sd,nar),e(Ho,sar),e(Ho,DL),e(DL,lar),e(DL,Jue),e(Jue,iar),e(DL,dar),e(Ho,car),e(Ho,Ct),M(GL,Ct,null),e(Ct,far),e(Ct,Yue),e(Yue,mar),e(Ct,gar),e(Ct,Rd),e(Rd,har),e(Rd,Kue),e(Kue,par),e(Rd,_ar),e(Rd,Mz),e(Mz,uar),e(Rd,bar),e(Ct,Far),M(ET,Ct,null),e(Ho,Tar),e(Ho,uo),M(OL,uo,null),e(uo,Mar),e(uo,Zue),e(Zue,Ear),e(uo,Car),e(uo,Ha),e(Ha,war),e(Ha,e2e),e(e2e,Aar),e(Ha,yar),e(Ha,o2e),e(o2e,Lar),e(Ha,xar),e(Ha,r2e),e(r2e,$ar),e(Ha,kar),e(uo,Sar),e(uo,t2e),e(t2e,CT),e(CT,a2e),e(a2e,Rar),e(CT,Par),e(CT,Ez),e(Ez,Bar),e(CT,Iar),e(uo,qar),e(uo,wT),e(wT,Nar),e(wT,n2e),e(n2e,jar),e(wT,Dar),e(wT,s2e),e(s2e,Gar),e(uo,Oar),M(AT,uo,null),b(f,_Ne,u),b(f,Pd,u),e(Pd,yT),e(yT,l2e),M(VL,l2e,null),e(Pd,Var),e(Pd,i2e),e(i2e,Xar),b(f,uNe,u),b(f,Uo,u),M(XL,Uo,null),e(Uo,zar),e(Uo,Bd),e(Bd,War),e(Bd,Cz),e(Cz,Qar),e(Bd,Har),e(Bd,wz),e(wz,Uar),e(Bd,Jar),e(Uo,Yar),e(Uo,zL),e(zL,Kar),e(zL,d2e),e(d2e,Zar),e(zL,enr),e(Uo,onr),e(Uo,wt),M(WL,wt,null),e(wt,rnr),e(wt,c2e),e(c2e,tnr),e(wt,anr),e(wt,Id),e(Id,nnr),e(Id,f2e),e(f2e,snr),e(Id,lnr),e(Id,Az),e(Az,inr),e(Id,dnr),e(wt,cnr),M(LT,wt,null),e(Uo,fnr),e(Uo,bo),M(QL,bo,null),e(bo,mnr),e(bo,m2e),e(m2e,gnr),e(bo,hnr),e(bo,Ua),e(Ua,pnr),e(Ua,g2e),e(g2e,_nr),e(Ua,unr),e(Ua,h2e),e(h2e,bnr),e(Ua,vnr),e(Ua,p2e),e(p2e,Fnr),e(Ua,Tnr),e(bo,Mnr),e(bo,Ja),e(Ja,xT),e(xT,_2e),e(_2e,Enr),e(xT,Cnr),e(xT,yz),e(yz,wnr),e(xT,Anr),e(Ja,ynr),e(Ja,$T),e($T,u2e),e(u2e,Lnr),e($T,xnr),e($T,Lz),e(Lz,$nr),e($T,knr),e(Ja,Snr),e(Ja,kT),e(kT,b2e),e(b2e,Rnr),e(kT,Pnr),e(kT,xz),e(xz,Bnr),e(kT,Inr),e(Ja,qnr),e(Ja,ST),e(ST,v2e),e(v2e,Nnr),e(ST,jnr),e(ST,$z),e($z,Dnr),e(ST,Gnr),e(bo,Onr),e(bo,RT),e(RT,Vnr),e(RT,F2e),e(F2e,Xnr),e(RT,znr),e(RT,T2e),e(T2e,Wnr),e(bo,Qnr),M(PT,bo,null),b(f,bNe,u),b(f,qd,u),e(qd,BT),e(BT,M2e),M(HL,M2e,null),e(qd,Hnr),e(qd,E2e),e(E2e,Unr),b(f,vNe,u),b(f,Jo,u),M(UL,Jo,null),e(Jo,Jnr),e(Jo,Nd),e(Nd,Ynr),e(Nd,kz),e(kz,Knr),e(Nd,Znr),e(Nd,Sz),e(Sz,esr),e(Nd,osr),e(Jo,rsr),e(Jo,JL),e(JL,tsr),e(JL,C2e),e(C2e,asr),e(JL,nsr),e(Jo,ssr),e(Jo,At),M(YL,At,null),e(At,lsr),e(At,w2e),e(w2e,isr),e(At,dsr),e(At,jd),e(jd,csr),e(jd,A2e),e(A2e,fsr),e(jd,msr),e(jd,Rz),e(Rz,gsr),e(jd,hsr),e(At,psr),M(IT,At,null),e(Jo,_sr),e(Jo,vo),M(KL,vo,null),e(vo,usr),e(vo,y2e),e(y2e,bsr),e(vo,vsr),e(vo,Ya),e(Ya,Fsr),e(Ya,L2e),e(L2e,Tsr),e(Ya,Msr),e(Ya,x2e),e(x2e,Esr),e(Ya,Csr),e(Ya,$2e),e($2e,wsr),e(Ya,Asr),e(vo,ysr),e(vo,k2e),e(k2e,qT),e(qT,S2e),e(S2e,Lsr),e(qT,xsr),e(qT,Pz),e(Pz,$sr),e(qT,ksr),e(vo,Ssr),e(vo,NT),e(NT,Rsr),e(NT,R2e),e(R2e,Psr),e(NT,Bsr),e(NT,P2e),e(P2e,Isr),e(vo,qsr),M(jT,vo,null),b(f,FNe,u),b(f,Dd,u),e(Dd,DT),e(DT,B2e),M(ZL,B2e,null),e(Dd,Nsr),e(Dd,I2e),e(I2e,jsr),b(f,TNe,u),b(f,Yo,u),M(e8,Yo,null),e(Yo,Dsr),e(Yo,Gd),e(Gd,Gsr),e(Gd,Bz),e(Bz,Osr),e(Gd,Vsr),e(Gd,Iz),e(Iz,Xsr),e(Gd,zsr),e(Yo,Wsr),e(Yo,o8),e(o8,Qsr),e(o8,q2e),e(q2e,Hsr),e(o8,Usr),e(Yo,Jsr),e(Yo,yt),M(r8,yt,null),e(yt,Ysr),e(yt,N2e),e(N2e,Ksr),e(yt,Zsr),e(yt,Od),e(Od,elr),e(Od,j2e),e(j2e,olr),e(Od,rlr),e(Od,qz),e(qz,tlr),e(Od,alr),e(yt,nlr),M(GT,yt,null),e(Yo,slr),e(Yo,wr),M(t8,wr,null),e(wr,llr),e(wr,D2e),e(D2e,ilr),e(wr,dlr),e(wr,Ka),e(Ka,clr),e(Ka,G2e),e(G2e,flr),e(Ka,mlr),e(Ka,O2e),e(O2e,glr),e(Ka,hlr),e(Ka,V2e),e(V2e,plr),e(Ka,_lr),e(wr,ulr),e(wr,q),e(q,OT),e(OT,X2e),e(X2e,blr),e(OT,vlr),e(OT,Nz),e(Nz,Flr),e(OT,Tlr),e(q,Mlr),e(q,VT),e(VT,z2e),e(z2e,Elr),e(VT,Clr),e(VT,jz),e(jz,wlr),e(VT,Alr),e(q,ylr),e(q,XT),e(XT,W2e),e(W2e,Llr),e(XT,xlr),e(XT,Dz),e(Dz,$lr),e(XT,klr),e(q,Slr),e(q,zT),e(zT,Q2e),e(Q2e,Rlr),e(zT,Plr),e(zT,Gz),e(Gz,Blr),e(zT,Ilr),e(q,qlr),e(q,WT),e(WT,H2e),e(H2e,Nlr),e(WT,jlr),e(WT,Oz),e(Oz,Dlr),e(WT,Glr),e(q,Olr),e(q,QT),e(QT,U2e),e(U2e,Vlr),e(QT,Xlr),e(QT,Vz),e(Vz,zlr),e(QT,Wlr),e(q,Qlr),e(q,HT),e(HT,J2e),e(J2e,Hlr),e(HT,Ulr),e(HT,Xz),e(Xz,Jlr),e(HT,Ylr),e(q,Klr),e(q,UT),e(UT,Y2e),e(Y2e,Zlr),e(UT,eir),e(UT,zz),e(zz,oir),e(UT,rir),e(q,tir),e(q,JT),e(JT,K2e),e(K2e,air),e(JT,nir),e(JT,Wz),e(Wz,sir),e(JT,lir),e(q,iir),e(q,YT),e(YT,Z2e),e(Z2e,dir),e(YT,cir),e(YT,Qz),e(Qz,fir),e(YT,mir),e(q,gir),e(q,KT),e(KT,e1e),e(e1e,hir),e(KT,pir),e(KT,Hz),e(Hz,_ir),e(KT,uir),e(q,bir),e(q,ZT),e(ZT,o1e),e(o1e,vir),e(ZT,Fir),e(ZT,Uz),e(Uz,Tir),e(ZT,Mir),e(q,Eir),e(q,eM),e(eM,r1e),e(r1e,Cir),e(eM,wir),e(eM,Jz),e(Jz,Air),e(eM,yir),e(q,Lir),e(q,oM),e(oM,t1e),e(t1e,xir),e(oM,$ir),e(oM,Yz),e(Yz,kir),e(oM,Sir),e(q,Rir),e(q,rM),e(rM,a1e),e(a1e,Pir),e(rM,Bir),e(rM,Kz),e(Kz,Iir),e(rM,qir),e(q,Nir),e(q,tM),e(tM,n1e),e(n1e,jir),e(tM,Dir),e(tM,Zz),e(Zz,Gir),e(tM,Oir),e(q,Vir),e(q,aM),e(aM,s1e),e(s1e,Xir),e(aM,zir),e(aM,eW),e(eW,Wir),e(aM,Qir),e(q,Hir),e(q,Bs),e(Bs,l1e),e(l1e,Uir),e(Bs,Jir),e(Bs,oW),e(oW,Yir),e(Bs,Kir),e(Bs,rW),e(rW,Zir),e(Bs,edr),e(q,odr),e(q,nM),e(nM,i1e),e(i1e,rdr),e(nM,tdr),e(nM,tW),e(tW,adr),e(nM,ndr),e(q,sdr),e(q,sM),e(sM,d1e),e(d1e,ldr),e(sM,idr),e(sM,aW),e(aW,ddr),e(sM,cdr),e(q,fdr),e(q,lM),e(lM,c1e),e(c1e,mdr),e(lM,gdr),e(lM,nW),e(nW,hdr),e(lM,pdr),e(q,_dr),e(q,iM),e(iM,f1e),e(f1e,udr),e(iM,bdr),e(iM,sW),e(sW,vdr),e(iM,Fdr),e(q,Tdr),e(q,dM),e(dM,m1e),e(m1e,Mdr),e(dM,Edr),e(dM,lW),e(lW,Cdr),e(dM,wdr),e(q,Adr),e(q,cM),e(cM,g1e),e(g1e,ydr),e(cM,Ldr),e(cM,iW),e(iW,xdr),e(cM,$dr),e(q,kdr),e(q,fM),e(fM,h1e),e(h1e,Sdr),e(fM,Rdr),e(fM,dW),e(dW,Pdr),e(fM,Bdr),e(q,Idr),e(q,mM),e(mM,p1e),e(p1e,qdr),e(mM,Ndr),e(mM,cW),e(cW,jdr),e(mM,Ddr),e(q,Gdr),e(q,gM),e(gM,_1e),e(_1e,Odr),e(gM,Vdr),e(gM,fW),e(fW,Xdr),e(gM,zdr),e(q,Wdr),e(q,hM),e(hM,u1e),e(u1e,Qdr),e(hM,Hdr),e(hM,mW),e(mW,Udr),e(hM,Jdr),e(q,Ydr),e(q,pM),e(pM,b1e),e(b1e,Kdr),e(pM,Zdr),e(pM,gW),e(gW,ecr),e(pM,ocr),e(q,rcr),e(q,_M),e(_M,v1e),e(v1e,tcr),e(_M,acr),e(_M,hW),e(hW,ncr),e(_M,scr),e(q,lcr),e(q,uM),e(uM,F1e),e(F1e,icr),e(uM,dcr),e(uM,pW),e(pW,ccr),e(uM,fcr),e(q,mcr),e(q,bM),e(bM,T1e),e(T1e,gcr),e(bM,hcr),e(bM,_W),e(_W,pcr),e(bM,_cr),e(q,ucr),e(q,vM),e(vM,M1e),e(M1e,bcr),e(vM,vcr),e(vM,uW),e(uW,Fcr),e(vM,Tcr),e(q,Mcr),e(q,FM),e(FM,E1e),e(E1e,Ecr),e(FM,Ccr),e(FM,bW),e(bW,wcr),e(FM,Acr),e(q,ycr),e(q,TM),e(TM,C1e),e(C1e,Lcr),e(TM,xcr),e(TM,vW),e(vW,$cr),e(TM,kcr),e(q,Scr),e(q,MM),e(MM,w1e),e(w1e,Rcr),e(MM,Pcr),e(MM,FW),e(FW,Bcr),e(MM,Icr),e(q,qcr),e(q,EM),e(EM,A1e),e(A1e,Ncr),e(EM,jcr),e(EM,TW),e(TW,Dcr),e(EM,Gcr),e(q,Ocr),e(q,CM),e(CM,y1e),e(y1e,Vcr),e(CM,Xcr),e(CM,MW),e(MW,zcr),e(CM,Wcr),e(q,Qcr),e(q,wM),e(wM,L1e),e(L1e,Hcr),e(wM,Ucr),e(wM,EW),e(EW,Jcr),e(wM,Ycr),e(q,Kcr),e(q,AM),e(AM,x1e),e(x1e,Zcr),e(AM,efr),e(AM,CW),e(CW,ofr),e(AM,rfr),e(q,tfr),e(q,yM),e(yM,$1e),e($1e,afr),e(yM,nfr),e(yM,wW),e(wW,sfr),e(yM,lfr),e(q,ifr),e(q,LM),e(LM,k1e),e(k1e,dfr),e(LM,cfr),e(LM,AW),e(AW,ffr),e(LM,mfr),e(q,gfr),e(q,xM),e(xM,S1e),e(S1e,hfr),e(xM,pfr),e(xM,yW),e(yW,_fr),e(xM,ufr),e(q,bfr),e(q,$M),e($M,R1e),e(R1e,vfr),e($M,Ffr),e($M,LW),e(LW,Tfr),e($M,Mfr),e(q,Efr),e(q,kM),e(kM,P1e),e(P1e,Cfr),e(kM,wfr),e(kM,xW),e(xW,Afr),e(kM,yfr),e(q,Lfr),e(q,SM),e(SM,B1e),e(B1e,xfr),e(SM,$fr),e(SM,$W),e($W,kfr),e(SM,Sfr),e(q,Rfr),e(q,RM),e(RM,I1e),e(I1e,Pfr),e(RM,Bfr),e(RM,kW),e(kW,Ifr),e(RM,qfr),e(wr,Nfr),M(PM,wr,null),b(f,MNe,u),b(f,Vd,u),e(Vd,BM),e(BM,q1e),M(a8,q1e,null),e(Vd,jfr),e(Vd,N1e),e(N1e,Dfr),b(f,ENe,u),b(f,Ko,u),M(n8,Ko,null),e(Ko,Gfr),e(Ko,Xd),e(Xd,Ofr),e(Xd,SW),e(SW,Vfr),e(Xd,Xfr),e(Xd,RW),e(RW,zfr),e(Xd,Wfr),e(Ko,Qfr),e(Ko,s8),e(s8,Hfr),e(s8,j1e),e(j1e,Ufr),e(s8,Jfr),e(Ko,Yfr),e(Ko,Lt),M(l8,Lt,null),e(Lt,Kfr),e(Lt,D1e),e(D1e,Zfr),e(Lt,emr),e(Lt,zd),e(zd,omr),e(zd,G1e),e(G1e,rmr),e(zd,tmr),e(zd,PW),e(PW,amr),e(zd,nmr),e(Lt,smr),M(IM,Lt,null),e(Ko,lmr),e(Ko,Ar),M(i8,Ar,null),e(Ar,imr),e(Ar,O1e),e(O1e,dmr),e(Ar,cmr),e(Ar,Za),e(Za,fmr),e(Za,V1e),e(V1e,mmr),e(Za,gmr),e(Za,X1e),e(X1e,hmr),e(Za,pmr),e(Za,z1e),e(z1e,_mr),e(Za,umr),e(Ar,bmr),e(Ar,se),e(se,qM),e(qM,W1e),e(W1e,vmr),e(qM,Fmr),e(qM,BW),e(BW,Tmr),e(qM,Mmr),e(se,Emr),e(se,NM),e(NM,Q1e),e(Q1e,Cmr),e(NM,wmr),e(NM,IW),e(IW,Amr),e(NM,ymr),e(se,Lmr),e(se,jM),e(jM,H1e),e(H1e,xmr),e(jM,$mr),e(jM,qW),e(qW,kmr),e(jM,Smr),e(se,Rmr),e(se,DM),e(DM,U1e),e(U1e,Pmr),e(DM,Bmr),e(DM,NW),e(NW,Imr),e(DM,qmr),e(se,Nmr),e(se,GM),e(GM,J1e),e(J1e,jmr),e(GM,Dmr),e(GM,jW),e(jW,Gmr),e(GM,Omr),e(se,Vmr),e(se,OM),e(OM,Y1e),e(Y1e,Xmr),e(OM,zmr),e(OM,DW),e(DW,Wmr),e(OM,Qmr),e(se,Hmr),e(se,VM),e(VM,K1e),e(K1e,Umr),e(VM,Jmr),e(VM,GW),e(GW,Ymr),e(VM,Kmr),e(se,Zmr),e(se,XM),e(XM,Z1e),e(Z1e,egr),e(XM,ogr),e(XM,OW),e(OW,rgr),e(XM,tgr),e(se,agr),e(se,zM),e(zM,e7e),e(e7e,ngr),e(zM,sgr),e(zM,VW),e(VW,lgr),e(zM,igr),e(se,dgr),e(se,WM),e(WM,o7e),e(o7e,cgr),e(WM,fgr),e(WM,XW),e(XW,mgr),e(WM,ggr),e(se,hgr),e(se,QM),e(QM,r7e),e(r7e,pgr),e(QM,_gr),e(QM,zW),e(zW,ugr),e(QM,bgr),e(se,vgr),e(se,HM),e(HM,t7e),e(t7e,Fgr),e(HM,Tgr),e(HM,WW),e(WW,Mgr),e(HM,Egr),e(se,Cgr),e(se,UM),e(UM,a7e),e(a7e,wgr),e(UM,Agr),e(UM,QW),e(QW,ygr),e(UM,Lgr),e(se,xgr),e(se,JM),e(JM,n7e),e(n7e,$gr),e(JM,kgr),e(JM,HW),e(HW,Sgr),e(JM,Rgr),e(se,Pgr),e(se,YM),e(YM,s7e),e(s7e,Bgr),e(YM,Igr),e(YM,UW),e(UW,qgr),e(YM,Ngr),e(se,jgr),e(se,KM),e(KM,l7e),e(l7e,Dgr),e(KM,Ggr),e(KM,JW),e(JW,Ogr),e(KM,Vgr),e(se,Xgr),e(se,ZM),e(ZM,i7e),e(i7e,zgr),e(ZM,Wgr),e(ZM,YW),e(YW,Qgr),e(ZM,Hgr),e(se,Ugr),e(se,e4),e(e4,d7e),e(d7e,Jgr),e(e4,Ygr),e(e4,KW),e(KW,Kgr),e(e4,Zgr),e(se,ehr),e(se,o4),e(o4,c7e),e(c7e,ohr),e(o4,rhr),e(o4,ZW),e(ZW,thr),e(o4,ahr),e(se,nhr),e(se,r4),e(r4,f7e),e(f7e,shr),e(r4,lhr),e(r4,eQ),e(eQ,ihr),e(r4,dhr),e(se,chr),e(se,t4),e(t4,m7e),e(m7e,fhr),e(t4,mhr),e(t4,oQ),e(oQ,ghr),e(t4,hhr),e(se,phr),e(se,a4),e(a4,g7e),e(g7e,_hr),e(a4,uhr),e(a4,rQ),e(rQ,bhr),e(a4,vhr),e(se,Fhr),e(se,n4),e(n4,h7e),e(h7e,Thr),e(n4,Mhr),e(n4,tQ),e(tQ,Ehr),e(n4,Chr),e(Ar,whr),M(s4,Ar,null),b(f,CNe,u),b(f,Wd,u),e(Wd,l4),e(l4,p7e),M(d8,p7e,null),e(Wd,Ahr),e(Wd,_7e),e(_7e,yhr),b(f,wNe,u),b(f,Zo,u),M(c8,Zo,null),e(Zo,Lhr),e(Zo,Qd),e(Qd,xhr),e(Qd,aQ),e(aQ,$hr),e(Qd,khr),e(Qd,nQ),e(nQ,Shr),e(Qd,Rhr),e(Zo,Phr),e(Zo,f8),e(f8,Bhr),e(f8,u7e),e(u7e,Ihr),e(f8,qhr),e(Zo,Nhr),e(Zo,xt),M(m8,xt,null),e(xt,jhr),e(xt,b7e),e(b7e,Dhr),e(xt,Ghr),e(xt,Hd),e(Hd,Ohr),e(Hd,v7e),e(v7e,Vhr),e(Hd,Xhr),e(Hd,sQ),e(sQ,zhr),e(Hd,Whr),e(xt,Qhr),M(i4,xt,null),e(Zo,Hhr),e(Zo,yr),M(g8,yr,null),e(yr,Uhr),e(yr,F7e),e(F7e,Jhr),e(yr,Yhr),e(yr,en),e(en,Khr),e(en,T7e),e(T7e,Zhr),e(en,epr),e(en,M7e),e(M7e,opr),e(en,rpr),e(en,E7e),e(E7e,tpr),e(en,apr),e(yr,npr),e(yr,Te),e(Te,d4),e(d4,C7e),e(C7e,spr),e(d4,lpr),e(d4,lQ),e(lQ,ipr),e(d4,dpr),e(Te,cpr),e(Te,c4),e(c4,w7e),e(w7e,fpr),e(c4,mpr),e(c4,iQ),e(iQ,gpr),e(c4,hpr),e(Te,ppr),e(Te,f4),e(f4,A7e),e(A7e,_pr),e(f4,upr),e(f4,dQ),e(dQ,bpr),e(f4,vpr),e(Te,Fpr),e(Te,m4),e(m4,y7e),e(y7e,Tpr),e(m4,Mpr),e(m4,cQ),e(cQ,Epr),e(m4,Cpr),e(Te,wpr),e(Te,g4),e(g4,L7e),e(L7e,Apr),e(g4,ypr),e(g4,fQ),e(fQ,Lpr),e(g4,xpr),e(Te,$pr),e(Te,h4),e(h4,x7e),e(x7e,kpr),e(h4,Spr),e(h4,mQ),e(mQ,Rpr),e(h4,Ppr),e(Te,Bpr),e(Te,p4),e(p4,$7e),e($7e,Ipr),e(p4,qpr),e(p4,gQ),e(gQ,Npr),e(p4,jpr),e(Te,Dpr),e(Te,_4),e(_4,k7e),e(k7e,Gpr),e(_4,Opr),e(_4,hQ),e(hQ,Vpr),e(_4,Xpr),e(Te,zpr),e(Te,u4),e(u4,S7e),e(S7e,Wpr),e(u4,Qpr),e(u4,pQ),e(pQ,Hpr),e(u4,Upr),e(Te,Jpr),e(Te,b4),e(b4,R7e),e(R7e,Ypr),e(b4,Kpr),e(b4,_Q),e(_Q,Zpr),e(b4,e_r),e(Te,o_r),e(Te,v4),e(v4,P7e),e(P7e,r_r),e(v4,t_r),e(v4,uQ),e(uQ,a_r),e(v4,n_r),e(Te,s_r),e(Te,F4),e(F4,B7e),e(B7e,l_r),e(F4,i_r),e(F4,bQ),e(bQ,d_r),e(F4,c_r),e(Te,f_r),e(Te,T4),e(T4,I7e),e(I7e,m_r),e(T4,g_r),e(T4,vQ),e(vQ,h_r),e(T4,p_r),e(yr,__r),M(M4,yr,null),b(f,ANe,u),b(f,Ud,u),e(Ud,E4),e(E4,q7e),M(h8,q7e,null),e(Ud,u_r),e(Ud,N7e),e(N7e,b_r),b(f,yNe,u),b(f,er,u),M(p8,er,null),e(er,v_r),e(er,Jd),e(Jd,F_r),e(Jd,FQ),e(FQ,T_r),e(Jd,M_r),e(Jd,TQ),e(TQ,E_r),e(Jd,C_r),e(er,w_r),e(er,_8),e(_8,A_r),e(_8,j7e),e(j7e,y_r),e(_8,L_r),e(er,x_r),e(er,$t),M(u8,$t,null),e($t,$_r),e($t,D7e),e(D7e,k_r),e($t,S_r),e($t,Yd),e(Yd,R_r),e(Yd,G7e),e(G7e,P_r),e(Yd,B_r),e(Yd,MQ),e(MQ,I_r),e(Yd,q_r),e($t,N_r),M(C4,$t,null),e(er,j_r),e(er,Lr),M(b8,Lr,null),e(Lr,D_r),e(Lr,O7e),e(O7e,G_r),e(Lr,O_r),e(Lr,on),e(on,V_r),e(on,V7e),e(V7e,X_r),e(on,z_r),e(on,X7e),e(X7e,W_r),e(on,Q_r),e(on,z7e),e(z7e,H_r),e(on,U_r),e(Lr,J_r),e(Lr,rn),e(rn,w4),e(w4,W7e),e(W7e,Y_r),e(w4,K_r),e(w4,EQ),e(EQ,Z_r),e(w4,eur),e(rn,our),e(rn,A4),e(A4,Q7e),e(Q7e,rur),e(A4,tur),e(A4,CQ),e(CQ,aur),e(A4,nur),e(rn,sur),e(rn,y4),e(y4,H7e),e(H7e,lur),e(y4,iur),e(y4,wQ),e(wQ,dur),e(y4,cur),e(rn,fur),e(rn,L4),e(L4,U7e),e(U7e,mur),e(L4,gur),e(L4,AQ),e(AQ,hur),e(L4,pur),e(Lr,_ur),M(x4,Lr,null),b(f,LNe,u),b(f,Kd,u),e(Kd,$4),e($4,J7e),M(v8,J7e,null),e(Kd,uur),e(Kd,Y7e),e(Y7e,bur),b(f,xNe,u),b(f,or,u),M(F8,or,null),e(or,vur),e(or,Zd),e(Zd,Fur),e(Zd,yQ),e(yQ,Tur),e(Zd,Mur),e(Zd,LQ),e(LQ,Eur),e(Zd,Cur),e(or,wur),e(or,T8),e(T8,Aur),e(T8,K7e),e(K7e,yur),e(T8,Lur),e(or,xur),e(or,kt),M(M8,kt,null),e(kt,$ur),e(kt,Z7e),e(Z7e,kur),e(kt,Sur),e(kt,ec),e(ec,Rur),e(ec,ebe),e(ebe,Pur),e(ec,Bur),e(ec,xQ),e(xQ,Iur),e(ec,qur),e(kt,Nur),M(k4,kt,null),e(or,jur),e(or,xr),M(E8,xr,null),e(xr,Dur),e(xr,obe),e(obe,Gur),e(xr,Our),e(xr,tn),e(tn,Vur),e(tn,rbe),e(rbe,Xur),e(tn,zur),e(tn,tbe),e(tbe,Wur),e(tn,Qur),e(tn,abe),e(abe,Hur),e(tn,Uur),e(xr,Jur),e(xr,ie),e(ie,S4),e(S4,nbe),e(nbe,Yur),e(S4,Kur),e(S4,$Q),e($Q,Zur),e(S4,e2r),e(ie,o2r),e(ie,R4),e(R4,sbe),e(sbe,r2r),e(R4,t2r),e(R4,kQ),e(kQ,a2r),e(R4,n2r),e(ie,s2r),e(ie,P4),e(P4,lbe),e(lbe,l2r),e(P4,i2r),e(P4,SQ),e(SQ,d2r),e(P4,c2r),e(ie,f2r),e(ie,B4),e(B4,ibe),e(ibe,m2r),e(B4,g2r),e(B4,RQ),e(RQ,h2r),e(B4,p2r),e(ie,_2r),e(ie,I4),e(I4,dbe),e(dbe,u2r),e(I4,b2r),e(I4,PQ),e(PQ,v2r),e(I4,F2r),e(ie,T2r),e(ie,q4),e(q4,cbe),e(cbe,M2r),e(q4,E2r),e(q4,BQ),e(BQ,C2r),e(q4,w2r),e(ie,A2r),e(ie,N4),e(N4,fbe),e(fbe,y2r),e(N4,L2r),e(N4,IQ),e(IQ,x2r),e(N4,$2r),e(ie,k2r),e(ie,j4),e(j4,mbe),e(mbe,S2r),e(j4,R2r),e(j4,qQ),e(qQ,P2r),e(j4,B2r),e(ie,I2r),e(ie,D4),e(D4,gbe),e(gbe,q2r),e(D4,N2r),e(D4,NQ),e(NQ,j2r),e(D4,D2r),e(ie,G2r),e(ie,G4),e(G4,hbe),e(hbe,O2r),e(G4,V2r),e(G4,jQ),e(jQ,X2r),e(G4,z2r),e(ie,W2r),e(ie,O4),e(O4,pbe),e(pbe,Q2r),e(O4,H2r),e(O4,DQ),e(DQ,U2r),e(O4,J2r),e(ie,Y2r),e(ie,V4),e(V4,_be),e(_be,K2r),e(V4,Z2r),e(V4,GQ),e(GQ,e1r),e(V4,o1r),e(ie,r1r),e(ie,X4),e(X4,ube),e(ube,t1r),e(X4,a1r),e(X4,OQ),e(OQ,n1r),e(X4,s1r),e(ie,l1r),e(ie,z4),e(z4,bbe),e(bbe,i1r),e(z4,d1r),e(z4,VQ),e(VQ,c1r),e(z4,f1r),e(ie,m1r),e(ie,W4),e(W4,vbe),e(vbe,g1r),e(W4,h1r),e(W4,XQ),e(XQ,p1r),e(W4,_1r),e(ie,u1r),e(ie,Q4),e(Q4,Fbe),e(Fbe,b1r),e(Q4,v1r),e(Q4,zQ),e(zQ,F1r),e(Q4,T1r),e(ie,M1r),e(ie,H4),e(H4,Tbe),e(Tbe,E1r),e(H4,C1r),e(H4,WQ),e(WQ,w1r),e(H4,A1r),e(ie,y1r),e(ie,U4),e(U4,Mbe),e(Mbe,L1r),e(U4,x1r),e(U4,QQ),e(QQ,$1r),e(U4,k1r),e(ie,S1r),e(ie,J4),e(J4,Ebe),e(Ebe,R1r),e(J4,P1r),e(J4,HQ),e(HQ,B1r),e(J4,I1r),e(ie,q1r),e(ie,Y4),e(Y4,Cbe),e(Cbe,N1r),e(Y4,j1r),e(Y4,UQ),e(UQ,D1r),e(Y4,G1r),e(xr,O1r),M(K4,xr,null),b(f,$Ne,u),b(f,oc,u),e(oc,Z4),e(Z4,wbe),M(C8,wbe,null),e(oc,V1r),e(oc,Abe),e(Abe,X1r),b(f,kNe,u),b(f,rr,u),M(w8,rr,null),e(rr,z1r),e(rr,rc),e(rc,W1r),e(rc,JQ),e(JQ,Q1r),e(rc,H1r),e(rc,YQ),e(YQ,U1r),e(rc,J1r),e(rr,Y1r),e(rr,A8),e(A8,K1r),e(A8,ybe),e(ybe,Z1r),e(A8,e7r),e(rr,o7r),e(rr,St),M(y8,St,null),e(St,r7r),e(St,Lbe),e(Lbe,t7r),e(St,a7r),e(St,tc),e(tc,n7r),e(tc,xbe),e(xbe,s7r),e(tc,l7r),e(tc,KQ),e(KQ,i7r),e(tc,d7r),e(St,c7r),M(eE,St,null),e(rr,f7r),e(rr,$r),M(L8,$r,null),e($r,m7r),e($r,$be),e($be,g7r),e($r,h7r),e($r,an),e(an,p7r),e(an,kbe),e(kbe,_7r),e(an,u7r),e(an,Sbe),e(Sbe,b7r),e(an,v7r),e(an,Rbe),e(Rbe,F7r),e(an,T7r),e($r,M7r),e($r,ye),e(ye,oE),e(oE,Pbe),e(Pbe,E7r),e(oE,C7r),e(oE,ZQ),e(ZQ,w7r),e(oE,A7r),e(ye,y7r),e(ye,rE),e(rE,Bbe),e(Bbe,L7r),e(rE,x7r),e(rE,eH),e(eH,$7r),e(rE,k7r),e(ye,S7r),e(ye,tE),e(tE,Ibe),e(Ibe,R7r),e(tE,P7r),e(tE,oH),e(oH,B7r),e(tE,I7r),e(ye,q7r),e(ye,aE),e(aE,qbe),e(qbe,N7r),e(aE,j7r),e(aE,rH),e(rH,D7r),e(aE,G7r),e(ye,O7r),e(ye,nE),e(nE,Nbe),e(Nbe,V7r),e(nE,X7r),e(nE,tH),e(tH,z7r),e(nE,W7r),e(ye,Q7r),e(ye,sE),e(sE,jbe),e(jbe,H7r),e(sE,U7r),e(sE,aH),e(aH,J7r),e(sE,Y7r),e(ye,K7r),e(ye,lE),e(lE,Dbe),e(Dbe,Z7r),e(lE,ebr),e(lE,nH),e(nH,obr),e(lE,rbr),e(ye,tbr),e(ye,iE),e(iE,Gbe),e(Gbe,abr),e(iE,nbr),e(iE,sH),e(sH,sbr),e(iE,lbr),e(ye,ibr),e(ye,dE),e(dE,Obe),e(Obe,dbr),e(dE,cbr),e(dE,lH),e(lH,fbr),e(dE,mbr),e(ye,gbr),e(ye,cE),e(cE,Vbe),e(Vbe,hbr),e(cE,pbr),e(cE,iH),e(iH,_br),e(cE,ubr),e($r,bbr),M(fE,$r,null),b(f,SNe,u),b(f,ac,u),e(ac,mE),e(mE,Xbe),M(x8,Xbe,null),e(ac,vbr),e(ac,zbe),e(zbe,Fbr),b(f,RNe,u),b(f,tr,u),M($8,tr,null),e(tr,Tbr),e(tr,nc),e(nc,Mbr),e(nc,dH),e(dH,Ebr),e(nc,Cbr),e(nc,cH),e(cH,wbr),e(nc,Abr),e(tr,ybr),e(tr,k8),e(k8,Lbr),e(k8,Wbe),e(Wbe,xbr),e(k8,$br),e(tr,kbr),e(tr,Rt),M(S8,Rt,null),e(Rt,Sbr),e(Rt,Qbe),e(Qbe,Rbr),e(Rt,Pbr),e(Rt,sc),e(sc,Bbr),e(sc,Hbe),e(Hbe,Ibr),e(sc,qbr),e(sc,fH),e(fH,Nbr),e(sc,jbr),e(Rt,Dbr),M(gE,Rt,null),e(tr,Gbr),e(tr,kr),M(R8,kr,null),e(kr,Obr),e(kr,Ube),e(Ube,Vbr),e(kr,Xbr),e(kr,nn),e(nn,zbr),e(nn,Jbe),e(Jbe,Wbr),e(nn,Qbr),e(nn,Ybe),e(Ybe,Hbr),e(nn,Ubr),e(nn,Kbe),e(Kbe,Jbr),e(nn,Ybr),e(kr,Kbr),e(kr,ee),e(ee,hE),e(hE,Zbe),e(Zbe,Zbr),e(hE,evr),e(hE,mH),e(mH,ovr),e(hE,rvr),e(ee,tvr),e(ee,pE),e(pE,eve),e(eve,avr),e(pE,nvr),e(pE,gH),e(gH,svr),e(pE,lvr),e(ee,ivr),e(ee,_E),e(_E,ove),e(ove,dvr),e(_E,cvr),e(_E,hH),e(hH,fvr),e(_E,mvr),e(ee,gvr),e(ee,uE),e(uE,rve),e(rve,hvr),e(uE,pvr),e(uE,pH),e(pH,_vr),e(uE,uvr),e(ee,bvr),e(ee,bE),e(bE,tve),e(tve,vvr),e(bE,Fvr),e(bE,_H),e(_H,Tvr),e(bE,Mvr),e(ee,Evr),e(ee,vE),e(vE,ave),e(ave,Cvr),e(vE,wvr),e(vE,uH),e(uH,Avr),e(vE,yvr),e(ee,Lvr),e(ee,FE),e(FE,nve),e(nve,xvr),e(FE,$vr),e(FE,bH),e(bH,kvr),e(FE,Svr),e(ee,Rvr),e(ee,TE),e(TE,sve),e(sve,Pvr),e(TE,Bvr),e(TE,vH),e(vH,Ivr),e(TE,qvr),e(ee,Nvr),e(ee,ME),e(ME,lve),e(lve,jvr),e(ME,Dvr),e(ME,FH),e(FH,Gvr),e(ME,Ovr),e(ee,Vvr),e(ee,EE),e(EE,ive),e(ive,Xvr),e(EE,zvr),e(EE,TH),e(TH,Wvr),e(EE,Qvr),e(ee,Hvr),e(ee,CE),e(CE,dve),e(dve,Uvr),e(CE,Jvr),e(CE,MH),e(MH,Yvr),e(CE,Kvr),e(ee,Zvr),e(ee,wE),e(wE,cve),e(cve,eFr),e(wE,oFr),e(wE,EH),e(EH,rFr),e(wE,tFr),e(ee,aFr),e(ee,AE),e(AE,fve),e(fve,nFr),e(AE,sFr),e(AE,CH),e(CH,lFr),e(AE,iFr),e(ee,dFr),e(ee,yE),e(yE,mve),e(mve,cFr),e(yE,fFr),e(yE,wH),e(wH,mFr),e(yE,gFr),e(ee,hFr),e(ee,LE),e(LE,gve),e(gve,pFr),e(LE,_Fr),e(LE,AH),e(AH,uFr),e(LE,bFr),e(ee,vFr),e(ee,xE),e(xE,hve),e(hve,FFr),e(xE,TFr),e(xE,yH),e(yH,MFr),e(xE,EFr),e(ee,CFr),e(ee,$E),e($E,pve),e(pve,wFr),e($E,AFr),e($E,LH),e(LH,yFr),e($E,LFr),e(ee,xFr),e(ee,kE),e(kE,_ve),e(_ve,$Fr),e(kE,kFr),e(kE,xH),e(xH,SFr),e(kE,RFr),e(ee,PFr),e(ee,SE),e(SE,uve),e(uve,BFr),e(SE,IFr),e(SE,$H),e($H,qFr),e(SE,NFr),e(ee,jFr),e(ee,RE),e(RE,bve),e(bve,DFr),e(RE,GFr),e(RE,kH),e(kH,OFr),e(RE,VFr),e(ee,XFr),e(ee,PE),e(PE,vve),e(vve,zFr),e(PE,WFr),e(PE,SH),e(SH,QFr),e(PE,HFr),e(ee,UFr),e(ee,BE),e(BE,Fve),e(Fve,JFr),e(BE,YFr),e(BE,RH),e(RH,KFr),e(BE,ZFr),e(ee,eTr),e(ee,IE),e(IE,Tve),e(Tve,oTr),e(IE,rTr),e(IE,PH),e(PH,tTr),e(IE,aTr),e(ee,nTr),e(ee,qE),e(qE,Mve),e(Mve,sTr),e(qE,lTr),e(qE,BH),e(BH,iTr),e(qE,dTr),e(ee,cTr),e(ee,NE),e(NE,Eve),e(Eve,fTr),e(NE,mTr),e(NE,IH),e(IH,gTr),e(NE,hTr),e(ee,pTr),e(ee,jE),e(jE,Cve),e(Cve,_Tr),e(jE,uTr),e(jE,qH),e(qH,bTr),e(jE,vTr),e(kr,FTr),M(DE,kr,null),b(f,PNe,u),b(f,lc,u),e(lc,GE),e(GE,wve),M(P8,wve,null),e(lc,TTr),e(lc,Ave),e(Ave,MTr),b(f,BNe,u),b(f,ar,u),M(B8,ar,null),e(ar,ETr),e(ar,ic),e(ic,CTr),e(ic,NH),e(NH,wTr),e(ic,ATr),e(ic,jH),e(jH,yTr),e(ic,LTr),e(ar,xTr),e(ar,I8),e(I8,$Tr),e(I8,yve),e(yve,kTr),e(I8,STr),e(ar,RTr),e(ar,Pt),M(q8,Pt,null),e(Pt,PTr),e(Pt,Lve),e(Lve,BTr),e(Pt,ITr),e(Pt,dc),e(dc,qTr),e(dc,xve),e(xve,NTr),e(dc,jTr),e(dc,DH),e(DH,DTr),e(dc,GTr),e(Pt,OTr),M(OE,Pt,null),e(ar,VTr),e(ar,Sr),M(N8,Sr,null),e(Sr,XTr),e(Sr,$ve),e($ve,zTr),e(Sr,WTr),e(Sr,sn),e(sn,QTr),e(sn,kve),e(kve,HTr),e(sn,UTr),e(sn,Sve),e(Sve,JTr),e(sn,YTr),e(sn,Rve),e(Rve,KTr),e(sn,ZTr),e(Sr,eMr),e(Sr,he),e(he,VE),e(VE,Pve),e(Pve,oMr),e(VE,rMr),e(VE,GH),e(GH,tMr),e(VE,aMr),e(he,nMr),e(he,XE),e(XE,Bve),e(Bve,sMr),e(XE,lMr),e(XE,OH),e(OH,iMr),e(XE,dMr),e(he,cMr),e(he,zE),e(zE,Ive),e(Ive,fMr),e(zE,mMr),e(zE,VH),e(VH,gMr),e(zE,hMr),e(he,pMr),e(he,WE),e(WE,qve),e(qve,_Mr),e(WE,uMr),e(WE,XH),e(XH,bMr),e(WE,vMr),e(he,FMr),e(he,QE),e(QE,Nve),e(Nve,TMr),e(QE,MMr),e(QE,zH),e(zH,EMr),e(QE,CMr),e(he,wMr),e(he,HE),e(HE,jve),e(jve,AMr),e(HE,yMr),e(HE,WH),e(WH,LMr),e(HE,xMr),e(he,$Mr),e(he,UE),e(UE,Dve),e(Dve,kMr),e(UE,SMr),e(UE,QH),e(QH,RMr),e(UE,PMr),e(he,BMr),e(he,JE),e(JE,Gve),e(Gve,IMr),e(JE,qMr),e(JE,HH),e(HH,NMr),e(JE,jMr),e(he,DMr),e(he,YE),e(YE,Ove),e(Ove,GMr),e(YE,OMr),e(YE,UH),e(UH,VMr),e(YE,XMr),e(he,zMr),e(he,KE),e(KE,Vve),e(Vve,WMr),e(KE,QMr),e(KE,JH),e(JH,HMr),e(KE,UMr),e(he,JMr),e(he,ZE),e(ZE,Xve),e(Xve,YMr),e(ZE,KMr),e(ZE,YH),e(YH,ZMr),e(ZE,e4r),e(he,o4r),e(he,eC),e(eC,zve),e(zve,r4r),e(eC,t4r),e(eC,KH),e(KH,a4r),e(eC,n4r),e(he,s4r),e(he,oC),e(oC,Wve),e(Wve,l4r),e(oC,i4r),e(oC,ZH),e(ZH,d4r),e(oC,c4r),e(he,f4r),e(he,rC),e(rC,Qve),e(Qve,m4r),e(rC,g4r),e(rC,eU),e(eU,h4r),e(rC,p4r),e(he,_4r),e(he,tC),e(tC,Hve),e(Hve,u4r),e(tC,b4r),e(tC,oU),e(oU,v4r),e(tC,F4r),e(he,T4r),e(he,aC),e(aC,Uve),e(Uve,M4r),e(aC,E4r),e(aC,rU),e(rU,C4r),e(aC,w4r),e(he,A4r),e(he,nC),e(nC,Jve),e(Jve,y4r),e(nC,L4r),e(nC,tU),e(tU,x4r),e(nC,$4r),e(Sr,k4r),M(sC,Sr,null),b(f,INe,u),b(f,cc,u),e(cc,lC),e(lC,Yve),M(j8,Yve,null),e(cc,S4r),e(cc,Kve),e(Kve,R4r),b(f,qNe,u),b(f,nr,u),M(D8,nr,null),e(nr,P4r),e(nr,fc),e(fc,B4r),e(fc,aU),e(aU,I4r),e(fc,q4r),e(fc,nU),e(nU,N4r),e(fc,j4r),e(nr,D4r),e(nr,G8),e(G8,G4r),e(G8,Zve),e(Zve,O4r),e(G8,V4r),e(nr,X4r),e(nr,Bt),M(O8,Bt,null),e(Bt,z4r),e(Bt,eFe),e(eFe,W4r),e(Bt,Q4r),e(Bt,mc),e(mc,H4r),e(mc,oFe),e(oFe,U4r),e(mc,J4r),e(mc,sU),e(sU,Y4r),e(mc,K4r),e(Bt,Z4r),M(iC,Bt,null),e(nr,eEr),e(nr,Rr),M(V8,Rr,null),e(Rr,oEr),e(Rr,rFe),e(rFe,rEr),e(Rr,tEr),e(Rr,ln),e(ln,aEr),e(ln,tFe),e(tFe,nEr),e(ln,sEr),e(ln,aFe),e(aFe,lEr),e(ln,iEr),e(ln,nFe),e(nFe,dEr),e(ln,cEr),e(Rr,fEr),e(Rr,X8),e(X8,dC),e(dC,sFe),e(sFe,mEr),e(dC,gEr),e(dC,lU),e(lU,hEr),e(dC,pEr),e(X8,_Er),e(X8,cC),e(cC,lFe),e(lFe,uEr),e(cC,bEr),e(cC,iU),e(iU,vEr),e(cC,FEr),e(Rr,TEr),M(fC,Rr,null),b(f,NNe,u),b(f,gc,u),e(gc,mC),e(mC,iFe),M(z8,iFe,null),e(gc,MEr),e(gc,dFe),e(dFe,EEr),b(f,jNe,u),b(f,sr,u),M(W8,sr,null),e(sr,CEr),e(sr,hc),e(hc,wEr),e(hc,dU),e(dU,AEr),e(hc,yEr),e(hc,cU),e(cU,LEr),e(hc,xEr),e(sr,$Er),e(sr,Q8),e(Q8,kEr),e(Q8,cFe),e(cFe,SEr),e(Q8,REr),e(sr,PEr),e(sr,It),M(H8,It,null),e(It,BEr),e(It,fFe),e(fFe,IEr),e(It,qEr),e(It,pc),e(pc,NEr),e(pc,mFe),e(mFe,jEr),e(pc,DEr),e(pc,fU),e(fU,GEr),e(pc,OEr),e(It,VEr),M(gC,It,null),e(sr,XEr),e(sr,Pr),M(U8,Pr,null),e(Pr,zEr),e(Pr,gFe),e(gFe,WEr),e(Pr,QEr),e(Pr,dn),e(dn,HEr),e(dn,hFe),e(hFe,UEr),e(dn,JEr),e(dn,pFe),e(pFe,YEr),e(dn,KEr),e(dn,_Fe),e(_Fe,ZEr),e(dn,eCr),e(Pr,oCr),e(Pr,uFe),e(uFe,hC),e(hC,bFe),e(bFe,rCr),e(hC,tCr),e(hC,mU),e(mU,aCr),e(hC,nCr),e(Pr,sCr),M(pC,Pr,null),b(f,DNe,u),b(f,_c,u),e(_c,_C),e(_C,vFe),M(J8,vFe,null),e(_c,lCr),e(_c,FFe),e(FFe,iCr),b(f,GNe,u),b(f,lr,u),M(Y8,lr,null),e(lr,dCr),e(lr,uc),e(uc,cCr),e(uc,gU),e(gU,fCr),e(uc,mCr),e(uc,hU),e(hU,gCr),e(uc,hCr),e(lr,pCr),e(lr,K8),e(K8,_Cr),e(K8,TFe),e(TFe,uCr),e(K8,bCr),e(lr,vCr),e(lr,qt),M(Z8,qt,null),e(qt,FCr),e(qt,MFe),e(MFe,TCr),e(qt,MCr),e(qt,bc),e(bc,ECr),e(bc,EFe),e(EFe,CCr),e(bc,wCr),e(bc,pU),e(pU,ACr),e(bc,yCr),e(qt,LCr),M(uC,qt,null),e(lr,xCr),e(lr,Br),M(e9,Br,null),e(Br,$Cr),e(Br,CFe),e(CFe,kCr),e(Br,SCr),e(Br,cn),e(cn,RCr),e(cn,wFe),e(wFe,PCr),e(cn,BCr),e(cn,AFe),e(AFe,ICr),e(cn,qCr),e(cn,yFe),e(yFe,NCr),e(cn,jCr),e(Br,DCr),e(Br,de),e(de,bC),e(bC,LFe),e(LFe,GCr),e(bC,OCr),e(bC,_U),e(_U,VCr),e(bC,XCr),e(de,zCr),e(de,vC),e(vC,xFe),e(xFe,WCr),e(vC,QCr),e(vC,uU),e(uU,HCr),e(vC,UCr),e(de,JCr),e(de,FC),e(FC,$Fe),e($Fe,YCr),e(FC,KCr),e(FC,bU),e(bU,ZCr),e(FC,e5r),e(de,o5r),e(de,TC),e(TC,kFe),e(kFe,r5r),e(TC,t5r),e(TC,vU),e(vU,a5r),e(TC,n5r),e(de,s5r),e(de,MC),e(MC,SFe),e(SFe,l5r),e(MC,i5r),e(MC,FU),e(FU,d5r),e(MC,c5r),e(de,f5r),e(de,EC),e(EC,RFe),e(RFe,m5r),e(EC,g5r),e(EC,TU),e(TU,h5r),e(EC,p5r),e(de,_5r),e(de,CC),e(CC,PFe),e(PFe,u5r),e(CC,b5r),e(CC,MU),e(MU,v5r),e(CC,F5r),e(de,T5r),e(de,wC),e(wC,BFe),e(BFe,M5r),e(wC,E5r),e(wC,EU),e(EU,C5r),e(wC,w5r),e(de,A5r),e(de,AC),e(AC,IFe),e(IFe,y5r),e(AC,L5r),e(AC,CU),e(CU,x5r),e(AC,$5r),e(de,k5r),e(de,yC),e(yC,qFe),e(qFe,S5r),e(yC,R5r),e(yC,wU),e(wU,P5r),e(yC,B5r),e(de,I5r),e(de,LC),e(LC,NFe),e(NFe,q5r),e(LC,N5r),e(LC,AU),e(AU,j5r),e(LC,D5r),e(de,G5r),e(de,xC),e(xC,jFe),e(jFe,O5r),e(xC,V5r),e(xC,yU),e(yU,X5r),e(xC,z5r),e(de,W5r),e(de,$C),e($C,DFe),e(DFe,Q5r),e($C,H5r),e($C,LU),e(LU,U5r),e($C,J5r),e(de,Y5r),e(de,kC),e(kC,GFe),e(GFe,K5r),e(kC,Z5r),e(kC,xU),e(xU,e3r),e(kC,o3r),e(de,r3r),e(de,SC),e(SC,OFe),e(OFe,t3r),e(SC,a3r),e(SC,$U),e($U,n3r),e(SC,s3r),e(de,l3r),e(de,RC),e(RC,VFe),e(VFe,i3r),e(RC,d3r),e(RC,kU),e(kU,c3r),e(RC,f3r),e(de,m3r),e(de,PC),e(PC,XFe),e(XFe,g3r),e(PC,h3r),e(PC,SU),e(SU,p3r),e(PC,_3r),e(de,u3r),e(de,BC),e(BC,zFe),e(zFe,b3r),e(BC,v3r),e(BC,RU),e(RU,F3r),e(BC,T3r),e(de,M3r),e(de,IC),e(IC,WFe),e(WFe,E3r),e(IC,C3r),e(IC,PU),e(PU,w3r),e(IC,A3r),e(de,y3r),e(de,qC),e(qC,QFe),e(QFe,L3r),e(qC,x3r),e(qC,BU),e(BU,$3r),e(qC,k3r),e(Br,S3r),M(NC,Br,null),b(f,ONe,u),b(f,vc,u),e(vc,jC),e(jC,HFe),M(o9,HFe,null),e(vc,R3r),e(vc,UFe),e(UFe,P3r),b(f,VNe,u),b(f,ir,u),M(r9,ir,null),e(ir,B3r),e(ir,Fc),e(Fc,I3r),e(Fc,IU),e(IU,q3r),e(Fc,N3r),e(Fc,qU),e(qU,j3r),e(Fc,D3r),e(ir,G3r),e(ir,t9),e(t9,O3r),e(t9,JFe),e(JFe,V3r),e(t9,X3r),e(ir,z3r),e(ir,Nt),M(a9,Nt,null),e(Nt,W3r),e(Nt,YFe),e(YFe,Q3r),e(Nt,H3r),e(Nt,Tc),e(Tc,U3r),e(Tc,KFe),e(KFe,J3r),e(Tc,Y3r),e(Tc,NU),e(NU,K3r),e(Tc,Z3r),e(Nt,ewr),M(DC,Nt,null),e(ir,owr),e(ir,Ir),M(n9,Ir,null),e(Ir,rwr),e(Ir,ZFe),e(ZFe,twr),e(Ir,awr),e(Ir,fn),e(fn,nwr),e(fn,eTe),e(eTe,swr),e(fn,lwr),e(fn,oTe),e(oTe,iwr),e(fn,dwr),e(fn,rTe),e(rTe,cwr),e(fn,fwr),e(Ir,mwr),e(Ir,ce),e(ce,GC),e(GC,tTe),e(tTe,gwr),e(GC,hwr),e(GC,jU),e(jU,pwr),e(GC,_wr),e(ce,uwr),e(ce,OC),e(OC,aTe),e(aTe,bwr),e(OC,vwr),e(OC,DU),e(DU,Fwr),e(OC,Twr),e(ce,Mwr),e(ce,VC),e(VC,nTe),e(nTe,Ewr),e(VC,Cwr),e(VC,GU),e(GU,wwr),e(VC,Awr),e(ce,ywr),e(ce,XC),e(XC,sTe),e(sTe,Lwr),e(XC,xwr),e(XC,OU),e(OU,$wr),e(XC,kwr),e(ce,Swr),e(ce,zC),e(zC,lTe),e(lTe,Rwr),e(zC,Pwr),e(zC,VU),e(VU,Bwr),e(zC,Iwr),e(ce,qwr),e(ce,WC),e(WC,iTe),e(iTe,Nwr),e(WC,jwr),e(WC,XU),e(XU,Dwr),e(WC,Gwr),e(ce,Owr),e(ce,QC),e(QC,dTe),e(dTe,Vwr),e(QC,Xwr),e(QC,zU),e(zU,zwr),e(QC,Wwr),e(ce,Qwr),e(ce,HC),e(HC,cTe),e(cTe,Hwr),e(HC,Uwr),e(HC,WU),e(WU,Jwr),e(HC,Ywr),e(ce,Kwr),e(ce,UC),e(UC,fTe),e(fTe,Zwr),e(UC,e0r),e(UC,QU),e(QU,o0r),e(UC,r0r),e(ce,t0r),e(ce,JC),e(JC,mTe),e(mTe,a0r),e(JC,n0r),e(JC,HU),e(HU,s0r),e(JC,l0r),e(ce,i0r),e(ce,YC),e(YC,gTe),e(gTe,d0r),e(YC,c0r),e(YC,UU),e(UU,f0r),e(YC,m0r),e(ce,g0r),e(ce,KC),e(KC,hTe),e(hTe,h0r),e(KC,p0r),e(KC,JU),e(JU,_0r),e(KC,u0r),e(ce,b0r),e(ce,ZC),e(ZC,pTe),e(pTe,v0r),e(ZC,F0r),e(ZC,YU),e(YU,T0r),e(ZC,M0r),e(ce,E0r),e(ce,e5),e(e5,_Te),e(_Te,C0r),e(e5,w0r),e(e5,KU),e(KU,A0r),e(e5,y0r),e(ce,L0r),e(ce,o5),e(o5,uTe),e(uTe,x0r),e(o5,$0r),e(o5,ZU),e(ZU,k0r),e(o5,S0r),e(ce,R0r),e(ce,r5),e(r5,bTe),e(bTe,P0r),e(r5,B0r),e(r5,eJ),e(eJ,I0r),e(r5,q0r),e(ce,N0r),e(ce,t5),e(t5,vTe),e(vTe,j0r),e(t5,D0r),e(t5,oJ),e(oJ,G0r),e(t5,O0r),e(ce,V0r),e(ce,a5),e(a5,FTe),e(FTe,X0r),e(a5,z0r),e(a5,rJ),e(rJ,W0r),e(a5,Q0r),e(ce,H0r),e(ce,n5),e(n5,TTe),e(TTe,U0r),e(n5,J0r),e(n5,tJ),e(tJ,Y0r),e(n5,K0r),e(ce,Z0r),e(ce,s5),e(s5,MTe),e(MTe,eAr),e(s5,oAr),e(s5,aJ),e(aJ,rAr),e(s5,tAr),e(Ir,aAr),M(l5,Ir,null),b(f,XNe,u),b(f,Mc,u),e(Mc,i5),e(i5,ETe),M(s9,ETe,null),e(Mc,nAr),e(Mc,CTe),e(CTe,sAr),b(f,zNe,u),b(f,dr,u),M(l9,dr,null),e(dr,lAr),e(dr,Ec),e(Ec,iAr),e(Ec,nJ),e(nJ,dAr),e(Ec,cAr),e(Ec,sJ),e(sJ,fAr),e(Ec,mAr),e(dr,gAr),e(dr,i9),e(i9,hAr),e(i9,wTe),e(wTe,pAr),e(i9,_Ar),e(dr,uAr),e(dr,jt),M(d9,jt,null),e(jt,bAr),e(jt,ATe),e(ATe,vAr),e(jt,FAr),e(jt,Cc),e(Cc,TAr),e(Cc,yTe),e(yTe,MAr),e(Cc,EAr),e(Cc,lJ),e(lJ,CAr),e(Cc,wAr),e(jt,AAr),M(d5,jt,null),e(dr,yAr),e(dr,qr),M(c9,qr,null),e(qr,LAr),e(qr,LTe),e(LTe,xAr),e(qr,$Ar),e(qr,mn),e(mn,kAr),e(mn,xTe),e(xTe,SAr),e(mn,RAr),e(mn,$Te),e($Te,PAr),e(mn,BAr),e(mn,kTe),e(kTe,IAr),e(mn,qAr),e(qr,NAr),e(qr,STe),e(STe,c5),e(c5,RTe),e(RTe,jAr),e(c5,DAr),e(c5,iJ),e(iJ,GAr),e(c5,OAr),e(qr,VAr),M(f5,qr,null),b(f,WNe,u),b(f,wc,u),e(wc,m5),e(m5,PTe),M(f9,PTe,null),e(wc,XAr),e(wc,BTe),e(BTe,zAr),b(f,QNe,u),b(f,cr,u),M(m9,cr,null),e(cr,WAr),e(cr,Ac),e(Ac,QAr),e(Ac,dJ),e(dJ,HAr),e(Ac,UAr),e(Ac,cJ),e(cJ,JAr),e(Ac,YAr),e(cr,KAr),e(cr,g9),e(g9,ZAr),e(g9,ITe),e(ITe,e6r),e(g9,o6r),e(cr,r6r),e(cr,Dt),M(h9,Dt,null),e(Dt,t6r),e(Dt,qTe),e(qTe,a6r),e(Dt,n6r),e(Dt,yc),e(yc,s6r),e(yc,NTe),e(NTe,l6r),e(yc,i6r),e(yc,fJ),e(fJ,d6r),e(yc,c6r),e(Dt,f6r),M(g5,Dt,null),e(cr,m6r),e(cr,Nr),M(p9,Nr,null),e(Nr,g6r),e(Nr,jTe),e(jTe,h6r),e(Nr,p6r),e(Nr,gn),e(gn,_6r),e(gn,DTe),e(DTe,u6r),e(gn,b6r),e(gn,GTe),e(GTe,v6r),e(gn,F6r),e(gn,OTe),e(OTe,T6r),e(gn,M6r),e(Nr,E6r),e(Nr,VTe),e(VTe,h5),e(h5,XTe),e(XTe,C6r),e(h5,w6r),e(h5,mJ),e(mJ,A6r),e(h5,y6r),e(Nr,L6r),M(p5,Nr,null),b(f,HNe,u),b(f,Lc,u),e(Lc,_5),e(_5,zTe),M(_9,zTe,null),e(Lc,x6r),e(Lc,WTe),e(WTe,$6r),b(f,UNe,u),b(f,fr,u),M(u9,fr,null),e(fr,k6r),e(fr,xc),e(xc,S6r),e(xc,gJ),e(gJ,R6r),e(xc,P6r),e(xc,hJ),e(hJ,B6r),e(xc,I6r),e(fr,q6r),e(fr,b9),e(b9,N6r),e(b9,QTe),e(QTe,j6r),e(b9,D6r),e(fr,G6r),e(fr,Gt),M(v9,Gt,null),e(Gt,O6r),e(Gt,HTe),e(HTe,V6r),e(Gt,X6r),e(Gt,$c),e($c,z6r),e($c,UTe),e(UTe,W6r),e($c,Q6r),e($c,pJ),e(pJ,H6r),e($c,U6r),e(Gt,J6r),M(u5,Gt,null),e(fr,Y6r),e(fr,jr),M(F9,jr,null),e(jr,K6r),e(jr,JTe),e(JTe,Z6r),e(jr,eyr),e(jr,hn),e(hn,oyr),e(hn,YTe),e(YTe,ryr),e(hn,tyr),e(hn,KTe),e(KTe,ayr),e(hn,nyr),e(hn,ZTe),e(ZTe,syr),e(hn,lyr),e(jr,iyr),e(jr,oe),e(oe,b5),e(b5,eMe),e(eMe,dyr),e(b5,cyr),e(b5,_J),e(_J,fyr),e(b5,myr),e(oe,gyr),e(oe,v5),e(v5,oMe),e(oMe,hyr),e(v5,pyr),e(v5,uJ),e(uJ,_yr),e(v5,uyr),e(oe,byr),e(oe,F5),e(F5,rMe),e(rMe,vyr),e(F5,Fyr),e(F5,bJ),e(bJ,Tyr),e(F5,Myr),e(oe,Eyr),e(oe,T5),e(T5,tMe),e(tMe,Cyr),e(T5,wyr),e(T5,vJ),e(vJ,Ayr),e(T5,yyr),e(oe,Lyr),e(oe,M5),e(M5,aMe),e(aMe,xyr),e(M5,$yr),e(M5,FJ),e(FJ,kyr),e(M5,Syr),e(oe,Ryr),e(oe,E5),e(E5,nMe),e(nMe,Pyr),e(E5,Byr),e(E5,TJ),e(TJ,Iyr),e(E5,qyr),e(oe,Nyr),e(oe,C5),e(C5,sMe),e(sMe,jyr),e(C5,Dyr),e(C5,MJ),e(MJ,Gyr),e(C5,Oyr),e(oe,Vyr),e(oe,w5),e(w5,lMe),e(lMe,Xyr),e(w5,zyr),e(w5,EJ),e(EJ,Wyr),e(w5,Qyr),e(oe,Hyr),e(oe,A5),e(A5,iMe),e(iMe,Uyr),e(A5,Jyr),e(A5,CJ),e(CJ,Yyr),e(A5,Kyr),e(oe,Zyr),e(oe,y5),e(y5,dMe),e(dMe,eLr),e(y5,oLr),e(y5,wJ),e(wJ,rLr),e(y5,tLr),e(oe,aLr),e(oe,L5),e(L5,cMe),e(cMe,nLr),e(L5,sLr),e(L5,AJ),e(AJ,lLr),e(L5,iLr),e(oe,dLr),e(oe,x5),e(x5,fMe),e(fMe,cLr),e(x5,fLr),e(x5,yJ),e(yJ,mLr),e(x5,gLr),e(oe,hLr),e(oe,$5),e($5,mMe),e(mMe,pLr),e($5,_Lr),e($5,LJ),e(LJ,uLr),e($5,bLr),e(oe,vLr),e(oe,k5),e(k5,gMe),e(gMe,FLr),e(k5,TLr),e(k5,xJ),e(xJ,MLr),e(k5,ELr),e(oe,CLr),e(oe,S5),e(S5,hMe),e(hMe,wLr),e(S5,ALr),e(S5,$J),e($J,yLr),e(S5,LLr),e(oe,xLr),e(oe,R5),e(R5,pMe),e(pMe,$Lr),e(R5,kLr),e(R5,kJ),e(kJ,SLr),e(R5,RLr),e(oe,PLr),e(oe,P5),e(P5,_Me),e(_Me,BLr),e(P5,ILr),e(P5,SJ),e(SJ,qLr),e(P5,NLr),e(oe,jLr),e(oe,B5),e(B5,uMe),e(uMe,DLr),e(B5,GLr),e(B5,RJ),e(RJ,OLr),e(B5,VLr),e(oe,XLr),e(oe,I5),e(I5,bMe),e(bMe,zLr),e(I5,WLr),e(I5,PJ),e(PJ,QLr),e(I5,HLr),e(oe,ULr),e(oe,q5),e(q5,vMe),e(vMe,JLr),e(q5,YLr),e(q5,BJ),e(BJ,KLr),e(q5,ZLr),e(oe,e8r),e(oe,N5),e(N5,FMe),e(FMe,o8r),e(N5,r8r),e(N5,IJ),e(IJ,t8r),e(N5,a8r),e(oe,n8r),e(oe,j5),e(j5,TMe),e(TMe,s8r),e(j5,l8r),e(j5,qJ),e(qJ,i8r),e(j5,d8r),e(oe,c8r),e(oe,D5),e(D5,MMe),e(MMe,f8r),e(D5,m8r),e(D5,NJ),e(NJ,g8r),e(D5,h8r),e(oe,p8r),e(oe,G5),e(G5,EMe),e(EMe,_8r),e(G5,u8r),e(G5,jJ),e(jJ,b8r),e(G5,v8r),e(oe,F8r),e(oe,O5),e(O5,CMe),e(CMe,T8r),e(O5,M8r),e(O5,DJ),e(DJ,E8r),e(O5,C8r),e(oe,w8r),e(oe,V5),e(V5,wMe),e(wMe,A8r),e(V5,y8r),e(V5,GJ),e(GJ,L8r),e(V5,x8r),e(jr,$8r),M(X5,jr,null),b(f,JNe,u),b(f,kc,u),e(kc,z5),e(z5,AMe),M(T9,AMe,null),e(kc,k8r),e(kc,yMe),e(yMe,S8r),b(f,YNe,u),b(f,mr,u),M(M9,mr,null),e(mr,R8r),e(mr,Sc),e(Sc,P8r),e(Sc,OJ),e(OJ,B8r),e(Sc,I8r),e(Sc,VJ),e(VJ,q8r),e(Sc,N8r),e(mr,j8r),e(mr,E9),e(E9,D8r),e(E9,LMe),e(LMe,G8r),e(E9,O8r),e(mr,V8r),e(mr,Ot),M(C9,Ot,null),e(Ot,X8r),e(Ot,xMe),e(xMe,z8r),e(Ot,W8r),e(Ot,Rc),e(Rc,Q8r),e(Rc,$Me),e($Me,H8r),e(Rc,U8r),e(Rc,XJ),e(XJ,J8r),e(Rc,Y8r),e(Ot,K8r),M(W5,Ot,null),e(mr,Z8r),e(mr,Dr),M(w9,Dr,null),e(Dr,e9r),e(Dr,kMe),e(kMe,o9r),e(Dr,r9r),e(Dr,pn),e(pn,t9r),e(pn,SMe),e(SMe,a9r),e(pn,n9r),e(pn,RMe),e(RMe,s9r),e(pn,l9r),e(pn,PMe),e(PMe,i9r),e(pn,d9r),e(Dr,c9r),e(Dr,Le),e(Le,Q5),e(Q5,BMe),e(BMe,f9r),e(Q5,m9r),e(Q5,zJ),e(zJ,g9r),e(Q5,h9r),e(Le,p9r),e(Le,H5),e(H5,IMe),e(IMe,_9r),e(H5,u9r),e(H5,WJ),e(WJ,b9r),e(H5,v9r),e(Le,F9r),e(Le,U5),e(U5,qMe),e(qMe,T9r),e(U5,M9r),e(U5,QJ),e(QJ,E9r),e(U5,C9r),e(Le,w9r),e(Le,J5),e(J5,NMe),e(NMe,A9r),e(J5,y9r),e(J5,HJ),e(HJ,L9r),e(J5,x9r),e(Le,$9r),e(Le,Y5),e(Y5,jMe),e(jMe,k9r),e(Y5,S9r),e(Y5,UJ),e(UJ,R9r),e(Y5,P9r),e(Le,B9r),e(Le,K5),e(K5,DMe),e(DMe,I9r),e(K5,q9r),e(K5,JJ),e(JJ,N9r),e(K5,j9r),e(Le,D9r),e(Le,Z5),e(Z5,GMe),e(GMe,G9r),e(Z5,O9r),e(Z5,YJ),e(YJ,V9r),e(Z5,X9r),e(Le,z9r),e(Le,e3),e(e3,OMe),e(OMe,W9r),e(e3,Q9r),e(e3,KJ),e(KJ,H9r),e(e3,U9r),e(Le,J9r),e(Le,o3),e(o3,VMe),e(VMe,Y9r),e(o3,K9r),e(o3,ZJ),e(ZJ,Z9r),e(o3,exr),e(Le,oxr),e(Le,r3),e(r3,XMe),e(XMe,rxr),e(r3,txr),e(r3,eY),e(eY,axr),e(r3,nxr),e(Dr,sxr),M(t3,Dr,null),b(f,KNe,u),b(f,Pc,u),e(Pc,a3),e(a3,zMe),M(A9,zMe,null),e(Pc,lxr),e(Pc,WMe),e(WMe,ixr),b(f,ZNe,u),b(f,gr,u),M(y9,gr,null),e(gr,dxr),e(gr,Bc),e(Bc,cxr),e(Bc,oY),e(oY,fxr),e(Bc,mxr),e(Bc,rY),e(rY,gxr),e(Bc,hxr),e(gr,pxr),e(gr,L9),e(L9,_xr),e(L9,QMe),e(QMe,uxr),e(L9,bxr),e(gr,vxr),e(gr,Vt),M(x9,Vt,null),e(Vt,Fxr),e(Vt,HMe),e(HMe,Txr),e(Vt,Mxr),e(Vt,Ic),e(Ic,Exr),e(Ic,UMe),e(UMe,Cxr),e(Ic,wxr),e(Ic,tY),e(tY,Axr),e(Ic,yxr),e(Vt,Lxr),M(n3,Vt,null),e(gr,xxr),e(gr,Gr),M($9,Gr,null),e(Gr,$xr),e(Gr,JMe),e(JMe,kxr),e(Gr,Sxr),e(Gr,_n),e(_n,Rxr),e(_n,YMe),e(YMe,Pxr),e(_n,Bxr),e(_n,KMe),e(KMe,Ixr),e(_n,qxr),e(_n,ZMe),e(ZMe,Nxr),e(_n,jxr),e(Gr,Dxr),e(Gr,Ee),e(Ee,s3),e(s3,e4e),e(e4e,Gxr),e(s3,Oxr),e(s3,aY),e(aY,Vxr),e(s3,Xxr),e(Ee,zxr),e(Ee,l3),e(l3,o4e),e(o4e,Wxr),e(l3,Qxr),e(l3,nY),e(nY,Hxr),e(l3,Uxr),e(Ee,Jxr),e(Ee,i3),e(i3,r4e),e(r4e,Yxr),e(i3,Kxr),e(i3,sY),e(sY,Zxr),e(i3,e$r),e(Ee,o$r),e(Ee,d3),e(d3,t4e),e(t4e,r$r),e(d3,t$r),e(d3,lY),e(lY,a$r),e(d3,n$r),e(Ee,s$r),e(Ee,c3),e(c3,a4e),e(a4e,l$r),e(c3,i$r),e(c3,iY),e(iY,d$r),e(c3,c$r),e(Ee,f$r),e(Ee,f3),e(f3,n4e),e(n4e,m$r),e(f3,g$r),e(f3,dY),e(dY,h$r),e(f3,p$r),e(Ee,_$r),e(Ee,m3),e(m3,s4e),e(s4e,u$r),e(m3,b$r),e(m3,cY),e(cY,v$r),e(m3,F$r),e(Ee,T$r),e(Ee,g3),e(g3,l4e),e(l4e,M$r),e(g3,E$r),e(g3,fY),e(fY,C$r),e(g3,w$r),e(Ee,A$r),e(Ee,h3),e(h3,i4e),e(i4e,y$r),e(h3,L$r),e(h3,mY),e(mY,x$r),e(h3,$$r),e(Ee,k$r),e(Ee,p3),e(p3,d4e),e(d4e,S$r),e(p3,R$r),e(p3,gY),e(gY,P$r),e(p3,B$r),e(Ee,I$r),e(Ee,_3),e(_3,c4e),e(c4e,q$r),e(_3,N$r),e(_3,hY),e(hY,j$r),e(_3,D$r),e(Ee,G$r),e(Ee,u3),e(u3,f4e),e(f4e,O$r),e(u3,V$r),e(u3,pY),e(pY,X$r),e(u3,z$r),e(Gr,W$r),M(b3,Gr,null),b(f,eje,u),b(f,qc,u),e(qc,v3),e(v3,m4e),M(k9,m4e,null),e(qc,Q$r),e(qc,g4e),e(g4e,H$r),b(f,oje,u),b(f,hr,u),M(S9,hr,null),e(hr,U$r),e(hr,Nc),e(Nc,J$r),e(Nc,_Y),e(_Y,Y$r),e(Nc,K$r),e(Nc,uY),e(uY,Z$r),e(Nc,ekr),e(hr,okr),e(hr,R9),e(R9,rkr),e(R9,h4e),e(h4e,tkr),e(R9,akr),e(hr,nkr),e(hr,Xt),M(P9,Xt,null),e(Xt,skr),e(Xt,p4e),e(p4e,lkr),e(Xt,ikr),e(Xt,jc),e(jc,dkr),e(jc,_4e),e(_4e,ckr),e(jc,fkr),e(jc,bY),e(bY,mkr),e(jc,gkr),e(Xt,hkr),M(F3,Xt,null),e(hr,pkr),e(hr,Or),M(B9,Or,null),e(Or,_kr),e(Or,u4e),e(u4e,ukr),e(Or,bkr),e(Or,un),e(un,vkr),e(un,b4e),e(b4e,Fkr),e(un,Tkr),e(un,v4e),e(v4e,Mkr),e(un,Ekr),e(un,F4e),e(F4e,Ckr),e(un,wkr),e(Or,Akr),e(Or,xe),e(xe,T3),e(T3,T4e),e(T4e,ykr),e(T3,Lkr),e(T3,vY),e(vY,xkr),e(T3,$kr),e(xe,kkr),e(xe,M3),e(M3,M4e),e(M4e,Skr),e(M3,Rkr),e(M3,FY),e(FY,Pkr),e(M3,Bkr),e(xe,Ikr),e(xe,E3),e(E3,E4e),e(E4e,qkr),e(E3,Nkr),e(E3,TY),e(TY,jkr),e(E3,Dkr),e(xe,Gkr),e(xe,C3),e(C3,C4e),e(C4e,Okr),e(C3,Vkr),e(C3,MY),e(MY,Xkr),e(C3,zkr),e(xe,Wkr),e(xe,w3),e(w3,w4e),e(w4e,Qkr),e(w3,Hkr),e(w3,EY),e(EY,Ukr),e(w3,Jkr),e(xe,Ykr),e(xe,A3),e(A3,A4e),e(A4e,Kkr),e(A3,Zkr),e(A3,CY),e(CY,eSr),e(A3,oSr),e(xe,rSr),e(xe,y3),e(y3,y4e),e(y4e,tSr),e(y3,aSr),e(y3,wY),e(wY,nSr),e(y3,sSr),e(xe,lSr),e(xe,L3),e(L3,L4e),e(L4e,iSr),e(L3,dSr),e(L3,AY),e(AY,cSr),e(L3,fSr),e(xe,mSr),e(xe,x3),e(x3,x4e),e(x4e,gSr),e(x3,hSr),e(x3,yY),e(yY,pSr),e(x3,_Sr),e(xe,uSr),e(xe,$3),e($3,$4e),e($4e,bSr),e($3,vSr),e($3,LY),e(LY,FSr),e($3,TSr),e(Or,MSr),M(k3,Or,null),b(f,rje,u),b(f,Dc,u),e(Dc,S3),e(S3,k4e),M(I9,k4e,null),e(Dc,ESr),e(Dc,S4e),e(S4e,CSr),b(f,tje,u),b(f,pr,u),M(q9,pr,null),e(pr,wSr),e(pr,Gc),e(Gc,ASr),e(Gc,xY),e(xY,ySr),e(Gc,LSr),e(Gc,$Y),e($Y,xSr),e(Gc,$Sr),e(pr,kSr),e(pr,N9),e(N9,SSr),e(N9,R4e),e(R4e,RSr),e(N9,PSr),e(pr,BSr),e(pr,zt),M(j9,zt,null),e(zt,ISr),e(zt,P4e),e(P4e,qSr),e(zt,NSr),e(zt,Oc),e(Oc,jSr),e(Oc,B4e),e(B4e,DSr),e(Oc,GSr),e(Oc,kY),e(kY,OSr),e(Oc,VSr),e(zt,XSr),M(R3,zt,null),e(pr,zSr),e(pr,Vr),M(D9,Vr,null),e(Vr,WSr),e(Vr,I4e),e(I4e,QSr),e(Vr,HSr),e(Vr,bn),e(bn,USr),e(bn,q4e),e(q4e,JSr),e(bn,YSr),e(bn,N4e),e(N4e,KSr),e(bn,ZSr),e(bn,j4e),e(j4e,eRr),e(bn,oRr),e(Vr,rRr),e(Vr,Pe),e(Pe,P3),e(P3,D4e),e(D4e,tRr),e(P3,aRr),e(P3,SY),e(SY,nRr),e(P3,sRr),e(Pe,lRr),e(Pe,B3),e(B3,G4e),e(G4e,iRr),e(B3,dRr),e(B3,RY),e(RY,cRr),e(B3,fRr),e(Pe,mRr),e(Pe,I3),e(I3,O4e),e(O4e,gRr),e(I3,hRr),e(I3,PY),e(PY,pRr),e(I3,_Rr),e(Pe,uRr),e(Pe,q3),e(q3,V4e),e(V4e,bRr),e(q3,vRr),e(q3,BY),e(BY,FRr),e(q3,TRr),e(Pe,MRr),e(Pe,N3),e(N3,X4e),e(X4e,ERr),e(N3,CRr),e(N3,IY),e(IY,wRr),e(N3,ARr),e(Pe,yRr),e(Pe,j3),e(j3,z4e),e(z4e,LRr),e(j3,xRr),e(j3,qY),e(qY,$Rr),e(j3,kRr),e(Pe,SRr),e(Pe,D3),e(D3,W4e),e(W4e,RRr),e(D3,PRr),e(D3,NY),e(NY,BRr),e(D3,IRr),e(Pe,qRr),e(Pe,G3),e(G3,Q4e),e(Q4e,NRr),e(G3,jRr),e(G3,jY),e(jY,DRr),e(G3,GRr),e(Pe,ORr),e(Pe,O3),e(O3,H4e),e(H4e,VRr),e(O3,XRr),e(O3,DY),e(DY,zRr),e(O3,WRr),e(Vr,QRr),M(V3,Vr,null),b(f,aje,u),b(f,Vc,u),e(Vc,X3),e(X3,U4e),M(G9,U4e,null),e(Vc,HRr),e(Vc,J4e),e(J4e,URr),b(f,nje,u),b(f,_r,u),M(O9,_r,null),e(_r,JRr),e(_r,Xc),e(Xc,YRr),e(Xc,GY),e(GY,KRr),e(Xc,ZRr),e(Xc,OY),e(OY,ePr),e(Xc,oPr),e(_r,rPr),e(_r,V9),e(V9,tPr),e(V9,Y4e),e(Y4e,aPr),e(V9,nPr),e(_r,sPr),e(_r,Wt),M(X9,Wt,null),e(Wt,lPr),e(Wt,K4e),e(K4e,iPr),e(Wt,dPr),e(Wt,zc),e(zc,cPr),e(zc,Z4e),e(Z4e,fPr),e(zc,mPr),e(zc,VY),e(VY,gPr),e(zc,hPr),e(Wt,pPr),M(z3,Wt,null),e(_r,_Pr),e(_r,Xr),M(z9,Xr,null),e(Xr,uPr),e(Xr,eEe),e(eEe,bPr),e(Xr,vPr),e(Xr,vn),e(vn,FPr),e(vn,oEe),e(oEe,TPr),e(vn,MPr),e(vn,rEe),e(rEe,EPr),e(vn,CPr),e(vn,tEe),e(tEe,wPr),e(vn,APr),e(Xr,yPr),e(Xr,$e),e($e,W3),e(W3,aEe),e(aEe,LPr),e(W3,xPr),e(W3,XY),e(XY,$Pr),e(W3,kPr),e($e,SPr),e($e,Q3),e(Q3,nEe),e(nEe,RPr),e(Q3,PPr),e(Q3,zY),e(zY,BPr),e(Q3,IPr),e($e,qPr),e($e,H3),e(H3,sEe),e(sEe,NPr),e(H3,jPr),e(H3,WY),e(WY,DPr),e(H3,GPr),e($e,OPr),e($e,U3),e(U3,lEe),e(lEe,VPr),e(U3,XPr),e(U3,QY),e(QY,zPr),e(U3,WPr),e($e,QPr),e($e,J3),e(J3,iEe),e(iEe,HPr),e(J3,UPr),e(J3,HY),e(HY,JPr),e(J3,YPr),e($e,KPr),e($e,Y3),e(Y3,dEe),e(dEe,ZPr),e(Y3,eBr),e(Y3,UY),e(UY,oBr),e(Y3,rBr),e($e,tBr),e($e,K3),e(K3,cEe),e(cEe,aBr),e(K3,nBr),e(K3,JY),e(JY,sBr),e(K3,lBr),e($e,iBr),e($e,Z3),e(Z3,fEe),e(fEe,dBr),e(Z3,cBr),e(Z3,YY),e(YY,fBr),e(Z3,mBr),e($e,gBr),e($e,ew),e(ew,mEe),e(mEe,hBr),e(ew,pBr),e(ew,KY),e(KY,_Br),e(ew,uBr),e($e,bBr),e($e,ow),e(ow,gEe),e(gEe,vBr),e(ow,FBr),e(ow,ZY),e(ZY,TBr),e(ow,MBr),e(Xr,EBr),M(rw,Xr,null),b(f,sje,u),b(f,Wc,u),e(Wc,tw),e(tw,hEe),M(W9,hEe,null),e(Wc,CBr),e(Wc,pEe),e(pEe,wBr),b(f,lje,u),b(f,ur,u),M(Q9,ur,null),e(ur,ABr),e(ur,Qc),e(Qc,yBr),e(Qc,eK),e(eK,LBr),e(Qc,xBr),e(Qc,oK),e(oK,$Br),e(Qc,kBr),e(ur,SBr),e(ur,H9),e(H9,RBr),e(H9,_Ee),e(_Ee,PBr),e(H9,BBr),e(ur,IBr),e(ur,Qt),M(U9,Qt,null),e(Qt,qBr),e(Qt,uEe),e(uEe,NBr),e(Qt,jBr),e(Qt,Hc),e(Hc,DBr),e(Hc,bEe),e(bEe,GBr),e(Hc,OBr),e(Hc,rK),e(rK,VBr),e(Hc,XBr),e(Qt,zBr),M(aw,Qt,null),e(ur,WBr),e(ur,zr),M(J9,zr,null),e(zr,QBr),e(zr,vEe),e(vEe,HBr),e(zr,UBr),e(zr,Fn),e(Fn,JBr),e(Fn,FEe),e(FEe,YBr),e(Fn,KBr),e(Fn,TEe),e(TEe,ZBr),e(Fn,eIr),e(Fn,MEe),e(MEe,oIr),e(Fn,rIr),e(zr,tIr),e(zr,ke),e(ke,nw),e(nw,EEe),e(EEe,aIr),e(nw,nIr),e(nw,tK),e(tK,sIr),e(nw,lIr),e(ke,iIr),e(ke,sw),e(sw,CEe),e(CEe,dIr),e(sw,cIr),e(sw,aK),e(aK,fIr),e(sw,mIr),e(ke,gIr),e(ke,lw),e(lw,wEe),e(wEe,hIr),e(lw,pIr),e(lw,nK),e(nK,_Ir),e(lw,uIr),e(ke,bIr),e(ke,iw),e(iw,AEe),e(AEe,vIr),e(iw,FIr),e(iw,sK),e(sK,TIr),e(iw,MIr),e(ke,EIr),e(ke,dw),e(dw,yEe),e(yEe,CIr),e(dw,wIr),e(dw,lK),e(lK,AIr),e(dw,yIr),e(ke,LIr),e(ke,cw),e(cw,LEe),e(LEe,xIr),e(cw,$Ir),e(cw,iK),e(iK,kIr),e(cw,SIr),e(ke,RIr),e(ke,fw),e(fw,xEe),e(xEe,PIr),e(fw,BIr),e(fw,dK),e(dK,IIr),e(fw,qIr),e(ke,NIr),e(ke,mw),e(mw,$Ee),e($Ee,jIr),e(mw,DIr),e(mw,cK),e(cK,GIr),e(mw,OIr),e(ke,VIr),e(ke,gw),e(gw,kEe),e(kEe,XIr),e(gw,zIr),e(gw,fK),e(fK,WIr),e(gw,QIr),e(ke,HIr),e(ke,hw),e(hw,SEe),e(SEe,UIr),e(hw,JIr),e(hw,mK),e(mK,YIr),e(hw,KIr),e(zr,ZIr),M(pw,zr,null),b(f,ije,u),b(f,Uc,u),e(Uc,_w),e(_w,REe),M(Y9,REe,null),e(Uc,eqr),e(Uc,PEe),e(PEe,oqr),b(f,dje,u),b(f,br,u),M(K9,br,null),e(br,rqr),e(br,Jc),e(Jc,tqr),e(Jc,gK),e(gK,aqr),e(Jc,nqr),e(Jc,hK),e(hK,sqr),e(Jc,lqr),e(br,iqr),e(br,Z9),e(Z9,dqr),e(Z9,BEe),e(BEe,cqr),e(Z9,fqr),e(br,mqr),e(br,Ht),M(ex,Ht,null),e(Ht,gqr),e(Ht,IEe),e(IEe,hqr),e(Ht,pqr),e(Ht,Yc),e(Yc,_qr),e(Yc,qEe),e(qEe,uqr),e(Yc,bqr),e(Yc,pK),e(pK,vqr),e(Yc,Fqr),e(Ht,Tqr),M(uw,Ht,null),e(br,Mqr),e(br,Wr),M(ox,Wr,null),e(Wr,Eqr),e(Wr,NEe),e(NEe,Cqr),e(Wr,wqr),e(Wr,Tn),e(Tn,Aqr),e(Tn,jEe),e(jEe,yqr),e(Tn,Lqr),e(Tn,DEe),e(DEe,xqr),e(Tn,$qr),e(Tn,GEe),e(GEe,kqr),e(Tn,Sqr),e(Wr,Rqr),e(Wr,Ge),e(Ge,bw),e(bw,OEe),e(OEe,Pqr),e(bw,Bqr),e(bw,_K),e(_K,Iqr),e(bw,qqr),e(Ge,Nqr),e(Ge,vw),e(vw,VEe),e(VEe,jqr),e(vw,Dqr),e(vw,uK),e(uK,Gqr),e(vw,Oqr),e(Ge,Vqr),e(Ge,Fw),e(Fw,XEe),e(XEe,Xqr),e(Fw,zqr),e(Fw,bK),e(bK,Wqr),e(Fw,Qqr),e(Ge,Hqr),e(Ge,Tw),e(Tw,zEe),e(zEe,Uqr),e(Tw,Jqr),e(Tw,vK),e(vK,Yqr),e(Tw,Kqr),e(Ge,Zqr),e(Ge,Mw),e(Mw,WEe),e(WEe,eNr),e(Mw,oNr),e(Mw,FK),e(FK,rNr),e(Mw,tNr),e(Ge,aNr),e(Ge,Ew),e(Ew,QEe),e(QEe,nNr),e(Ew,sNr),e(Ew,TK),e(TK,lNr),e(Ew,iNr),e(Ge,dNr),e(Ge,Cw),e(Cw,HEe),e(HEe,cNr),e(Cw,fNr),e(Cw,MK),e(MK,mNr),e(Cw,gNr),e(Ge,hNr),e(Ge,ww),e(ww,UEe),e(UEe,pNr),e(ww,_Nr),e(ww,EK),e(EK,uNr),e(ww,bNr),e(Wr,vNr),M(Aw,Wr,null),b(f,cje,u),b(f,Kc,u),e(Kc,yw),e(yw,JEe),M(rx,JEe,null),e(Kc,FNr),e(Kc,YEe),e(YEe,TNr),b(f,fje,u),b(f,vr,u),M(tx,vr,null),e(vr,MNr),e(vr,Zc),e(Zc,ENr),e(Zc,CK),e(CK,CNr),e(Zc,wNr),e(Zc,wK),e(wK,ANr),e(Zc,yNr),e(vr,LNr),e(vr,ax),e(ax,xNr),e(ax,KEe),e(KEe,$Nr),e(ax,kNr),e(vr,SNr),e(vr,Ut),M(nx,Ut,null),e(Ut,RNr),e(Ut,ZEe),e(ZEe,PNr),e(Ut,BNr),e(Ut,ef),e(ef,INr),e(ef,eCe),e(eCe,qNr),e(ef,NNr),e(ef,AK),e(AK,jNr),e(ef,DNr),e(Ut,GNr),M(Lw,Ut,null),e(vr,ONr),e(vr,Qr),M(sx,Qr,null),e(Qr,VNr),e(Qr,oCe),e(oCe,XNr),e(Qr,zNr),e(Qr,Mn),e(Mn,WNr),e(Mn,rCe),e(rCe,QNr),e(Mn,HNr),e(Mn,tCe),e(tCe,UNr),e(Mn,JNr),e(Mn,aCe),e(aCe,YNr),e(Mn,KNr),e(Qr,ZNr),e(Qr,Oe),e(Oe,xw),e(xw,nCe),e(nCe,ejr),e(xw,ojr),e(xw,yK),e(yK,rjr),e(xw,tjr),e(Oe,ajr),e(Oe,$w),e($w,sCe),e(sCe,njr),e($w,sjr),e($w,LK),e(LK,ljr),e($w,ijr),e(Oe,djr),e(Oe,kw),e(kw,lCe),e(lCe,cjr),e(kw,fjr),e(kw,xK),e(xK,mjr),e(kw,gjr),e(Oe,hjr),e(Oe,Sw),e(Sw,iCe),e(iCe,pjr),e(Sw,_jr),e(Sw,$K),e($K,ujr),e(Sw,bjr),e(Oe,vjr),e(Oe,Rw),e(Rw,dCe),e(dCe,Fjr),e(Rw,Tjr),e(Rw,kK),e(kK,Mjr),e(Rw,Ejr),e(Oe,Cjr),e(Oe,Pw),e(Pw,cCe),e(cCe,wjr),e(Pw,Ajr),e(Pw,SK),e(SK,yjr),e(Pw,Ljr),e(Oe,xjr),e(Oe,Bw),e(Bw,fCe),e(fCe,$jr),e(Bw,kjr),e(Bw,RK),e(RK,Sjr),e(Bw,Rjr),e(Oe,Pjr),e(Oe,Iw),e(Iw,mCe),e(mCe,Bjr),e(Iw,Ijr),e(Iw,PK),e(PK,qjr),e(Iw,Njr),e(Qr,jjr),M(qw,Qr,null),b(f,mje,u),b(f,of,u),e(of,Nw),e(Nw,gCe),M(lx,gCe,null),e(of,Djr),e(of,hCe),e(hCe,Gjr),b(f,gje,u),b(f,Fr,u),M(ix,Fr,null),e(Fr,Ojr),e(Fr,rf),e(rf,Vjr),e(rf,BK),e(BK,Xjr),e(rf,zjr),e(rf,IK),e(IK,Wjr),e(rf,Qjr),e(Fr,Hjr),e(Fr,dx),e(dx,Ujr),e(dx,pCe),e(pCe,Jjr),e(dx,Yjr),e(Fr,Kjr),e(Fr,Jt),M(cx,Jt,null),e(Jt,Zjr),e(Jt,_Ce),e(_Ce,eDr),e(Jt,oDr),e(Jt,tf),e(tf,rDr),e(tf,uCe),e(uCe,tDr),e(tf,aDr),e(tf,qK),e(qK,nDr),e(tf,sDr),e(Jt,lDr),M(jw,Jt,null),e(Fr,iDr),e(Fr,Hr),M(fx,Hr,null),e(Hr,dDr),e(Hr,bCe),e(bCe,cDr),e(Hr,fDr),e(Hr,En),e(En,mDr),e(En,vCe),e(vCe,gDr),e(En,hDr),e(En,FCe),e(FCe,pDr),e(En,_Dr),e(En,TCe),e(TCe,uDr),e(En,bDr),e(Hr,vDr),e(Hr,MCe),e(MCe,Dw),e(Dw,ECe),e(ECe,FDr),e(Dw,TDr),e(Dw,NK),e(NK,MDr),e(Dw,EDr),e(Hr,CDr),M(Gw,Hr,null),b(f,hje,u),b(f,af,u),e(af,Ow),e(Ow,CCe),M(mx,CCe,null),e(af,wDr),e(af,wCe),e(wCe,ADr),b(f,pje,u),b(f,Tr,u),M(gx,Tr,null),e(Tr,yDr),e(Tr,nf),e(nf,LDr),e(nf,jK),e(jK,xDr),e(nf,$Dr),e(nf,DK),e(DK,kDr),e(nf,SDr),e(Tr,RDr),e(Tr,hx),e(hx,PDr),e(hx,ACe),e(ACe,BDr),e(hx,IDr),e(Tr,qDr),e(Tr,Yt),M(px,Yt,null),e(Yt,NDr),e(Yt,yCe),e(yCe,jDr),e(Yt,DDr),e(Yt,sf),e(sf,GDr),e(sf,LCe),e(LCe,ODr),e(sf,VDr),e(sf,GK),e(GK,XDr),e(sf,zDr),e(Yt,WDr),M(Vw,Yt,null),e(Tr,QDr),e(Tr,Ur),M(_x,Ur,null),e(Ur,HDr),e(Ur,xCe),e(xCe,UDr),e(Ur,JDr),e(Ur,Cn),e(Cn,YDr),e(Cn,$Ce),e($Ce,KDr),e(Cn,ZDr),e(Cn,kCe),e(kCe,eGr),e(Cn,oGr),e(Cn,SCe),e(SCe,rGr),e(Cn,tGr),e(Ur,aGr),e(Ur,ux),e(ux,Xw),e(Xw,RCe),e(RCe,nGr),e(Xw,sGr),e(Xw,OK),e(OK,lGr),e(Xw,iGr),e(ux,dGr),e(ux,zw),e(zw,PCe),e(PCe,cGr),e(zw,fGr),e(zw,VK),e(VK,mGr),e(zw,gGr),e(Ur,hGr),M(Ww,Ur,null),b(f,_je,u),b(f,lf,u),e(lf,Qw),e(Qw,BCe),M(bx,BCe,null),e(lf,pGr),e(lf,ICe),e(ICe,_Gr),b(f,uje,u),b(f,Mr,u),M(vx,Mr,null),e(Mr,uGr),e(Mr,df),e(df,bGr),e(df,XK),e(XK,vGr),e(df,FGr),e(df,zK),e(zK,TGr),e(df,MGr),e(Mr,EGr),e(Mr,Fx),e(Fx,CGr),e(Fx,qCe),e(qCe,wGr),e(Fx,AGr),e(Mr,yGr),e(Mr,Kt),M(Tx,Kt,null),e(Kt,LGr),e(Kt,NCe),e(NCe,xGr),e(Kt,$Gr),e(Kt,cf),e(cf,kGr),e(cf,jCe),e(jCe,SGr),e(cf,RGr),e(cf,WK),e(WK,PGr),e(cf,BGr),e(Kt,IGr),M(Hw,Kt,null),e(Mr,qGr),e(Mr,Jr),M(Mx,Jr,null),e(Jr,NGr),e(Jr,DCe),e(DCe,jGr),e(Jr,DGr),e(Jr,wn),e(wn,GGr),e(wn,GCe),e(GCe,OGr),e(wn,VGr),e(wn,OCe),e(OCe,XGr),e(wn,zGr),e(wn,VCe),e(VCe,WGr),e(wn,QGr),e(Jr,HGr),e(Jr,XCe),e(XCe,Uw),e(Uw,zCe),e(zCe,UGr),e(Uw,JGr),e(Uw,QK),e(QK,YGr),e(Uw,KGr),e(Jr,ZGr),M(Jw,Jr,null),bje=!0},p(f,[u]){const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),vf.$set(Ex);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),Fg.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),eh.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),$h.$set(HCe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),kh.$set(Cx);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),Jh.$set(UCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Yh.$set(An);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),ep.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),Q_.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),U_.$set(KCe);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),ju.$set(wx);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),Gu.$set(ZCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),w2.$set(Ax);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),y2.$set(e5e);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),c1.$set(yx);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),m1.$set(o5e);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),$1.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),S1.$set(t5e);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),A7.$set(ff);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),L7.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),nb.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),lb.$set(s5e);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),hb.$set(Lx);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),_b.$set(l5e);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),Yb.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),Zb.$set(d5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),Dv.$set(et);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),Ov.$set(xx);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),zv.$set(c5e);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),Qv.$set($x);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),lF.$set(f5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),dF.$set(ot);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),mF.$set(m5e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),hF.$set(mf);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),wF.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),yF.$set(h5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),PF.$set(y);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),IF.$set(Yw);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),QF.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),UF.$set(_5e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),ZF.$set(Kw);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),oT.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),iT.$set(b5e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),cT.$set(Zw);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),pT.$set(v5e);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),uT.$set(F5e);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),TT.$set(e0);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),ET.$set(T5e);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),AT.$set(M5e);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),LT.$set(o0);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),PT.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),IT.$set(C5e);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),jT.$set(r0);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),GT.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),PM.$set(A5e);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),IM.$set(t0);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),s4.$set(y5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),i4.$set(L5e);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),M4.$set(a0);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),C4.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),x4.$set($5e);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),k4.$set(n0);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),K4.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),eE.$set(S5e);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),fE.$set(s0);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),gE.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),DE.$set(P5e);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),OE.$set(l0);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),sC.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),iC.$set(I5e);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),fC.$set(i0);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),gC.$set(q5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),pC.$set(N5e);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),uC.$set(d0);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),NC.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),DC.$set(D5e);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),l5.$set(c0);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),d5.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),f5.$set(O5e);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),g5.$set(f0);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),p5.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),u5.$set(X5e);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),X5.$set(m0);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),W5.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),t3.$set(W5e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),n3.$set(g0);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),b3.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),F3.$set(H5e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),k3.$set(h0);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),R3.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),V3.$set(J5e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),z3.$set(p0);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),rw.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),aw.$set(K5e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),pw.$set(_0);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),uw.$set(Z5e);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),Aw.$set(e3e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),Lw.$set(u0);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),qw.$set(o3e);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),jw.$set(r3e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),Gw.$set(b0);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),Vw.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),Ww.$set(a3e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),Hw.$set(v0);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),Jw.$set(n3e)},i(f){bje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(vf.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(C6.$$.fragment,f),E(Fg.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E($6.$$.fragment,f),E(eh.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(I6.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(O6.$$.fragment,f),E(Jh.$$.fragment,f),E(Yh.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(ep.$$.fragment,f),E(H6.$$.fragment,f),E(Q_.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(U_.$$.fragment,f),E(Z6.$$.fragment,f),E(ju.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Gu.$$.fragment,f),E(ay.$$.fragment,f),E(w2.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(y2.$$.fragment,f),E(dy.$$.fragment,f),E(c1.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(m1.$$.fragment,f),E(hy.$$.fragment,f),E($1.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(S1.$$.fragment,f),E(vy.$$.fragment,f),E(A7.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(L7.$$.fragment,f),E(Cy.$$.fragment,f),E(nb.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(lb.$$.fragment,f),E(xy.$$.fragment,f),E(hb.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(_b.$$.fragment,f),E(Py.$$.fragment,f),E(Yb.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(Zb.$$.fragment,f),E(jy.$$.fragment,f),E(Dv.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(Ov.$$.fragment,f),E(Xy.$$.fragment,f),E(zv.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Qv.$$.fragment,f),E(Uy.$$.fragment,f),E(lF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(dF.$$.fragment,f),E(eL.$$.fragment,f),E(mF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(hF.$$.fragment,f),E(nL.$$.fragment,f),E(wF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(yF.$$.fragment,f),E(cL.$$.fragment,f),E(PF.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(IF.$$.fragment,f),E(pL.$$.fragment,f),E(QF.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(UF.$$.fragment,f),E(FL.$$.fragment,f),E(ZF.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(oT.$$.fragment,f),E(AL.$$.fragment,f),E(iT.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(cT.$$.fragment,f),E(kL.$$.fragment,f),E(pT.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(uT.$$.fragment,f),E(IL.$$.fragment,f),E(TT.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(ET.$$.fragment,f),E(OL.$$.fragment,f),E(AT.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(LT.$$.fragment,f),E(QL.$$.fragment,f),E(PT.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(IT.$$.fragment,f),E(KL.$$.fragment,f),E(jT.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(GT.$$.fragment,f),E(t8.$$.fragment,f),E(PM.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(IM.$$.fragment,f),E(i8.$$.fragment,f),E(s4.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(i4.$$.fragment,f),E(g8.$$.fragment,f),E(M4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(C4.$$.fragment,f),E(b8.$$.fragment,f),E(x4.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(k4.$$.fragment,f),E(E8.$$.fragment,f),E(K4.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(eE.$$.fragment,f),E(L8.$$.fragment,f),E(fE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(gE.$$.fragment,f),E(R8.$$.fragment,f),E(DE.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(OE.$$.fragment,f),E(N8.$$.fragment,f),E(sC.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(iC.$$.fragment,f),E(V8.$$.fragment,f),E(fC.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(gC.$$.fragment,f),E(U8.$$.fragment,f),E(pC.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(uC.$$.fragment,f),E(e9.$$.fragment,f),E(NC.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(DC.$$.fragment,f),E(n9.$$.fragment,f),E(l5.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(d5.$$.fragment,f),E(c9.$$.fragment,f),E(f5.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(g5.$$.fragment,f),E(p9.$$.fragment,f),E(p5.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(u5.$$.fragment,f),E(F9.$$.fragment,f),E(X5.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(W5.$$.fragment,f),E(w9.$$.fragment,f),E(t3.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(n3.$$.fragment,f),E($9.$$.fragment,f),E(b3.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(F3.$$.fragment,f),E(B9.$$.fragment,f),E(k3.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(R3.$$.fragment,f),E(D9.$$.fragment,f),E(V3.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(z3.$$.fragment,f),E(z9.$$.fragment,f),E(rw.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(aw.$$.fragment,f),E(J9.$$.fragment,f),E(pw.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(uw.$$.fragment,f),E(ox.$$.fragment,f),E(Aw.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(Lw.$$.fragment,f),E(sx.$$.fragment,f),E(qw.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(jw.$$.fragment,f),E(fx.$$.fragment,f),E(Gw.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(Vw.$$.fragment,f),E(_x.$$.fragment,f),E(Ww.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(Hw.$$.fragment,f),E(Mx.$$.fragment,f),E(Jw.$$.fragment,f),bje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(vf.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(C6.$$.fragment,f),C(Fg.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C($6.$$.fragment,f),C(eh.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(I6.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(O6.$$.fragment,f),C(Jh.$$.fragment,f),C(Yh.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(ep.$$.fragment,f),C(H6.$$.fragment,f),C(Q_.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(U_.$$.fragment,f),C(Z6.$$.fragment,f),C(ju.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Gu.$$.fragment,f),C(ay.$$.fragment,f),C(w2.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(y2.$$.fragment,f),C(dy.$$.fragment,f),C(c1.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(m1.$$.fragment,f),C(hy.$$.fragment,f),C($1.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(S1.$$.fragment,f),C(vy.$$.fragment,f),C(A7.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(L7.$$.fragment,f),C(Cy.$$.fragment,f),C(nb.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(lb.$$.fragment,f),C(xy.$$.fragment,f),C(hb.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(_b.$$.fragment,f),C(Py.$$.fragment,f),C(Yb.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(Zb.$$.fragment,f),C(jy.$$.fragment,f),C(Dv.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(Ov.$$.fragment,f),C(Xy.$$.fragment,f),C(zv.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Qv.$$.fragment,f),C(Uy.$$.fragment,f),C(lF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(dF.$$.fragment,f),C(eL.$$.fragment,f),C(mF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(hF.$$.fragment,f),C(nL.$$.fragment,f),C(wF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(yF.$$.fragment,f),C(cL.$$.fragment,f),C(PF.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(IF.$$.fragment,f),C(pL.$$.fragment,f),C(QF.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(UF.$$.fragment,f),C(FL.$$.fragment,f),C(ZF.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(oT.$$.fragment,f),C(AL.$$.fragment,f),C(iT.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(cT.$$.fragment,f),C(kL.$$.fragment,f),C(pT.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(uT.$$.fragment,f),C(IL.$$.fragment,f),C(TT.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(ET.$$.fragment,f),C(OL.$$.fragment,f),C(AT.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(LT.$$.fragment,f),C(QL.$$.fragment,f),C(PT.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(IT.$$.fragment,f),C(KL.$$.fragment,f),C(jT.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(GT.$$.fragment,f),C(t8.$$.fragment,f),C(PM.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(IM.$$.fragment,f),C(i8.$$.fragment,f),C(s4.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(i4.$$.fragment,f),C(g8.$$.fragment,f),C(M4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(C4.$$.fragment,f),C(b8.$$.fragment,f),C(x4.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(k4.$$.fragment,f),C(E8.$$.fragment,f),C(K4.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(eE.$$.fragment,f),C(L8.$$.fragment,f),C(fE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(gE.$$.fragment,f),C(R8.$$.fragment,f),C(DE.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(OE.$$.fragment,f),C(N8.$$.fragment,f),C(sC.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(iC.$$.fragment,f),C(V8.$$.fragment,f),C(fC.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(gC.$$.fragment,f),C(U8.$$.fragment,f),C(pC.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(uC.$$.fragment,f),C(e9.$$.fragment,f),C(NC.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(DC.$$.fragment,f),C(n9.$$.fragment,f),C(l5.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(d5.$$.fragment,f),C(c9.$$.fragment,f),C(f5.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(g5.$$.fragment,f),C(p9.$$.fragment,f),C(p5.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(u5.$$.fragment,f),C(F9.$$.fragment,f),C(X5.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(W5.$$.fragment,f),C(w9.$$.fragment,f),C(t3.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(n3.$$.fragment,f),C($9.$$.fragment,f),C(b3.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(F3.$$.fragment,f),C(B9.$$.fragment,f),C(k3.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(R3.$$.fragment,f),C(D9.$$.fragment,f),C(V3.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(z3.$$.fragment,f),C(z9.$$.fragment,f),C(rw.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(aw.$$.fragment,f),C(J9.$$.fragment,f),C(pw.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(uw.$$.fragment,f),C(ox.$$.fragment,f),C(Aw.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(Lw.$$.fragment,f),C(sx.$$.fragment,f),C(qw.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(jw.$$.fragment,f),C(fx.$$.fragment,f),C(Gw.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(Vw.$$.fragment,f),C(_x.$$.fragment,f),C(Ww.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(Hw.$$.fragment,f),C(Mx.$$.fragment,f),C(Jw.$$.fragment,f),bje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(De),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(pqe),f&&t(ui),w(b6),f&&t(_qe),f&&t(kn),f&&t(uqe),w(v6,f),f&&t(bqe),f&&t(D$),f&&t(vqe),w(vf,f),f&&t(Fqe),f&&t(bi),w(F6),f&&t(Tqe),f&&t(Co),w(T6),w(C6),w(Fg),w(w6),f&&t(Mqe),f&&t(Fi),w(A6),f&&t(Eqe),f&&t(wo),w(y6),w($6),w(eh),w(k6),f&&t(Cqe),f&&t(Ti),w(S6),f&&t(wqe),f&&t(Ao),w(R6),w(I6),w($h),w(kh),w(q6),f&&t(Aqe),f&&t(Mi),w(N6),f&&t(yqe),f&&t(yo),w(j6),w(O6),w(Jh),w(Yh),w(V6),f&&t(Lqe),f&&t(Ci),w(X6),f&&t(xqe),f&&t(Lo),w(z6),w(Q6),w(ep),w(H6),w(Q_),f&&t($qe),f&&t(yi),w(U6),f&&t(kqe),f&&t(xo),w(J6),w(K6),w(U_),w(Z6),w(ju),f&&t(Sqe),f&&t($i),w(ey),f&&t(Rqe),f&&t($o),w(oy),w(ty),w(Gu),w(ay),w(w2),f&&t(Pqe),f&&t(Ri),w(ny),f&&t(Bqe),f&&t(ko),w(sy),w(iy),w(y2),w(dy),w(c1),f&&t(Iqe),f&&t(Ii),w(cy),f&&t(qqe),f&&t(So),w(fy),w(gy),w(m1),w(hy),w($1),f&&t(Nqe),f&&t(ji),w(py),f&&t(jqe),f&&t(Ro),w(_y),w(by),w(S1),w(vy),w(A7),f&&t(Dqe),f&&t(Oi),w(Fy),f&&t(Gqe),f&&t(Po),w(Ty),w(Ey),w(L7),w(Cy),w(nb),f&&t(Oqe),f&&t(zi),w(wy),f&&t(Vqe),f&&t(Bo),w(Ay),w(Ly),w(lb),w(xy),w(hb),f&&t(Xqe),f&&t(Hi),w($y),f&&t(zqe),f&&t(Io),w(ky),w(Ry),w(_b),w(Py),w(Yb),f&&t(Wqe),f&&t(Yi),w(By),f&&t(Qqe),f&&t(qo),w(Iy),w(Ny),w(Zb),w(jy),w(Dv),f&&t(Hqe),f&&t(ed),w(Dy),f&&t(Uqe),f&&t(No),w(Gy),w(Vy),w(Ov),w(Xy),w(zv),f&&t(Jqe),f&&t(td),w(zy),f&&t(Yqe),f&&t(jo),w(Wy),w(Hy),w(Qv),w(Uy),w(lF),f&&t(Kqe),f&&t(sd),w(Jy),f&&t(Zqe),f&&t(Do),w(Yy),w(Zy),w(dF),w(eL),w(mF),f&&t(eNe),f&&t(dd),w(oL),f&&t(oNe),f&&t(Go),w(rL),w(aL),w(hF),w(nL),w(wF),f&&t(rNe),f&&t(md),w(sL),f&&t(tNe),f&&t(Oo),w(lL),w(dL),w(yF),w(cL),w(PF),f&&t(aNe),f&&t(pd),w(fL),f&&t(nNe),f&&t(Vo),w(mL),w(hL),w(IF),w(pL),w(QF),f&&t(sNe),f&&t(bd),w(_L),f&&t(lNe),f&&t(Xo),w(uL),w(vL),w(UF),w(FL),w(ZF),f&&t(iNe),f&&t(Td),w(ML),f&&t(dNe),f&&t(zo),w(EL),w(wL),w(oT),w(AL),w(iT),f&&t(cNe),f&&t(Cd),w(yL),f&&t(fNe),f&&t(Wo),w(LL),w($L),w(cT),w(kL),w(pT),f&&t(mNe),f&&t(Ld),w(SL),f&&t(gNe),f&&t(Qo),w(RL),w(BL),w(uT),w(IL),w(TT),f&&t(hNe),f&&t(kd),w(NL),f&&t(pNe),f&&t(Ho),w(jL),w(GL),w(ET),w(OL),w(AT),f&&t(_Ne),f&&t(Pd),w(VL),f&&t(uNe),f&&t(Uo),w(XL),w(WL),w(LT),w(QL),w(PT),f&&t(bNe),f&&t(qd),w(HL),f&&t(vNe),f&&t(Jo),w(UL),w(YL),w(IT),w(KL),w(jT),f&&t(FNe),f&&t(Dd),w(ZL),f&&t(TNe),f&&t(Yo),w(e8),w(r8),w(GT),w(t8),w(PM),f&&t(MNe),f&&t(Vd),w(a8),f&&t(ENe),f&&t(Ko),w(n8),w(l8),w(IM),w(i8),w(s4),f&&t(CNe),f&&t(Wd),w(d8),f&&t(wNe),f&&t(Zo),w(c8),w(m8),w(i4),w(g8),w(M4),f&&t(ANe),f&&t(Ud),w(h8),f&&t(yNe),f&&t(er),w(p8),w(u8),w(C4),w(b8),w(x4),f&&t(LNe),f&&t(Kd),w(v8),f&&t(xNe),f&&t(or),w(F8),w(M8),w(k4),w(E8),w(K4),f&&t($Ne),f&&t(oc),w(C8),f&&t(kNe),f&&t(rr),w(w8),w(y8),w(eE),w(L8),w(fE),f&&t(SNe),f&&t(ac),w(x8),f&&t(RNe),f&&t(tr),w($8),w(S8),w(gE),w(R8),w(DE),f&&t(PNe),f&&t(lc),w(P8),f&&t(BNe),f&&t(ar),w(B8),w(q8),w(OE),w(N8),w(sC),f&&t(INe),f&&t(cc),w(j8),f&&t(qNe),f&&t(nr),w(D8),w(O8),w(iC),w(V8),w(fC),f&&t(NNe),f&&t(gc),w(z8),f&&t(jNe),f&&t(sr),w(W8),w(H8),w(gC),w(U8),w(pC),f&&t(DNe),f&&t(_c),w(J8),f&&t(GNe),f&&t(lr),w(Y8),w(Z8),w(uC),w(e9),w(NC),f&&t(ONe),f&&t(vc),w(o9),f&&t(VNe),f&&t(ir),w(r9),w(a9),w(DC),w(n9),w(l5),f&&t(XNe),f&&t(Mc),w(s9),f&&t(zNe),f&&t(dr),w(l9),w(d9),w(d5),w(c9),w(f5),f&&t(WNe),f&&t(wc),w(f9),f&&t(QNe),f&&t(cr),w(m9),w(h9),w(g5),w(p9),w(p5),f&&t(HNe),f&&t(Lc),w(_9),f&&t(UNe),f&&t(fr),w(u9),w(v9),w(u5),w(F9),w(X5),f&&t(JNe),f&&t(kc),w(T9),f&&t(YNe),f&&t(mr),w(M9),w(C9),w(W5),w(w9),w(t3),f&&t(KNe),f&&t(Pc),w(A9),f&&t(ZNe),f&&t(gr),w(y9),w(x9),w(n3),w($9),w(b3),f&&t(eje),f&&t(qc),w(k9),f&&t(oje),f&&t(hr),w(S9),w(P9),w(F3),w(B9),w(k3),f&&t(rje),f&&t(Dc),w(I9),f&&t(tje),f&&t(pr),w(q9),w(j9),w(R3),w(D9),w(V3),f&&t(aje),f&&t(Vc),w(G9),f&&t(nje),f&&t(_r),w(O9),w(X9),w(z3),w(z9),w(rw),f&&t(sje),f&&t(Wc),w(W9),f&&t(lje),f&&t(ur),w(Q9),w(U9),w(aw),w(J9),w(pw),f&&t(ije),f&&t(Uc),w(Y9),f&&t(dje),f&&t(br),w(K9),w(ex),w(uw),w(ox),w(Aw),f&&t(cje),f&&t(Kc),w(rx),f&&t(fje),f&&t(vr),w(tx),w(nx),w(Lw),w(sx),w(qw),f&&t(mje),f&&t(of),w(lx),f&&t(gje),f&&t(Fr),w(ix),w(cx),w(jw),w(fx),w(Gw),f&&t(hje),f&&t(af),w(mx),f&&t(pje),f&&t(Tr),w(gx),w(px),w(Vw),w(_x),w(Ww),f&&t(_je),f&&t(lf),w(bx),f&&t(uje),f&&t(Mr),w(vx),w(Tx),w(Hw),w(Mx),w(Jw)}}}const h$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function p$t(L){return p9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class M$t extends f9t{constructor(g){super();m9t(this,g,p$t,g$t,g9t,{})}}export{M$t as default,h$t as metadata};
