import{S as er,i as tr,s as nr,e as s,k as i,w as _,t as r,M as sr,c as a,d as n,m as c,a as o,x as k,h as l,b as d,G as e,g as h,y as b,q as v,o as w,B as y,v as ar,L as Zo}from"../../chunks/vendor-hf-doc-builder.js";import{D as le}from"../../chunks/Docstring-hf-doc-builder.js";import{C as jn}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as tt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Qo}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function or(Ie){let g,L,q,u,E;return u=new jn({props:{code:`from transformers import NllbTokenizer

tokenizer = NllbTokenizer.from_pretrained(
    "facebook/nllb-200-distilled-600M", src_lang="eng_Latn", tgt_lang="fra_Latn"
)
example_english_phrase = " UN Chief Says There Is No Military Solution in Syria"
expected_translation_french = "Le chef de l'ONU affirme qu'il n'y a pas de solution militaire en Syrie."
inputs = tokenizer(example_english_phrase, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(expected_translation_french, return_tensors="pt")
inputs["labels"] = labels["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> NllbTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = NllbTokenizer.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, src_lang=<span class="hljs-string">&quot;eng_Latn&quot;</span>, tgt_lang=<span class="hljs-string">&quot;fra_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>example_english_phrase = <span class="hljs-string">&quot; UN Chief Says There Is No Military Solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>expected_translation_french = <span class="hljs-string">&quot;Le chef de l&#x27;ONU affirme qu&#x27;il n&#x27;y a pas de solution militaire en Syrie.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(example_english_phrase, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(expected_translation_french, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),{c(){g=s("p"),L=r("Examples:"),q=i(),_(u.$$.fragment)},l(f){g=a(f,"P",{});var T=o(g);L=l(T,"Examples:"),T.forEach(n),q=c(f),k(u.$$.fragment,f)},m(f,T){h(f,g,T),e(g,L),h(f,q,T),b(u,f,T),E=!0},p:Zo,i(f){E||(v(u.$$.fragment,f),E=!0)},o(f){w(u.$$.fragment,f),E=!1},d(f){f&&n(g),f&&n(q),y(u,f)}}}function rr(Ie){let g,L,q,u,E;return u=new jn({props:{code:`from transformers import NllbTokenizerFast

tokenizer = NllbTokenizerFast.from_pretrained(
    "facebook/nllb-200-distilled-600M", src_lang="eng_Latn", tgt_lang="fra_Latn"
)
example_english_phrase = " UN Chief Says There Is No Military Solution in Syria"
expected_translation_french = "Le chef de l'ONU affirme qu'il n'y a pas de solution militaire en Syrie."
inputs = tokenizer(example_english_phrase, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(expected_translation_french, return_tensors="pt")
inputs["labels"] = labels["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> NllbTokenizerFast

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = NllbTokenizerFast.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, src_lang=<span class="hljs-string">&quot;eng_Latn&quot;</span>, tgt_lang=<span class="hljs-string">&quot;fra_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>example_english_phrase = <span class="hljs-string">&quot; UN Chief Says There Is No Military Solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>expected_translation_french = <span class="hljs-string">&quot;Le chef de l&#x27;ONU affirme qu&#x27;il n&#x27;y a pas de solution militaire en Syrie.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(example_english_phrase, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(expected_translation_french, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),{c(){g=s("p"),L=r("Examples:"),q=i(),_(u.$$.fragment)},l(f){g=a(f,"P",{});var T=o(g);L=l(T,"Examples:"),T.forEach(n),q=c(f),k(u.$$.fragment,f)},m(f,T){h(f,g,T),e(g,L),h(f,q,T),b(u,f,T),E=!0},p:Zo,i(f){E||(v(u.$$.fragment,f),E=!0)},o(f){w(u.$$.fragment,f),E=!1},d(f){f&&n(g),f&&n(q),y(u,f)}}}function lr(Ie){let g,L,q,u,E,f,T,nt,Sn,Rt,D,st,An,Pn,ie,Fn,Mn,Wt,B,J,at,ce,Cn,ot,Dn,Jt,X,Bn,de,In,On,Xt,Oe,Gn,Kt,Ge,rt,Hn,Vt,He,Un,Yt,A,Rn,pe,Wn,Jn,he,Xn,Kn,Qt,I,K,lt,fe,Vn,it,Yn,Zt,P,Qn,ct,Zn,es,dt,ts,ns,en,F,ss,pt,as,os,ue,rs,ls,tn,ge,nn,O,V,ht,me,is,ft,cs,sn,M,ds,ut,ps,hs,gt,fs,us,an,Ue,gs,on,_e,rn,G,Y,mt,ke,ms,_t,_s,ln,$,be,ks,kt,bs,vs,S,ws,Re,ys,qs,We,$s,zs,ve,Ts,Es,Ns,H,xs,bt,Ls,js,vt,Ss,As,Ps,Q,Fs,Z,we,Ms,wt,Cs,Ds,j,ye,Bs,qe,Is,yt,Os,Gs,Hs,$e,ze,qt,Us,Rs,$t,Ws,Js,Te,zt,Xs,Ks,Tt,Vs,Ys,Et,Qs,cn,U,ee,Nt,Ee,Zs,xt,ea,dn,m,Ne,ta,R,na,Lt,sa,aa,xe,oa,ra,la,Le,ia,Je,ca,da,pa,W,ha,jt,fa,ua,St,ga,ma,_a,te,ka,N,je,ba,At,va,wa,Se,ya,Pt,qa,$a,za,Ae,Pe,Ft,Ta,Ea,Mt,Na,xa,Fe,Ct,La,ja,Dt,Sa,Aa,Bt,Pa,Fa,ne,Me,Ma,It,Ca,Da,se,Ce,Ba,Ot,Ia,Oa,ae,De,Ga,Gt,Ha,pn;return f=new tt({}),ce=new tt({}),fe=new tt({}),ge=new jn({props:{code:`from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("facebook/nllb-200-distilled-600M")
model = AutoModelForSeq2SeqLM.from_pretrained("facebook/nllb-200-distilled-600M")

article = "UN Chief says there is no military solution in Syria"
inputs = tokenizer(article, return_tensors="pt")

translated_tokens = model.generate(
    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id["fra_Latn"], max_length=30
)
tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Chief says there is no military solution in Syria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>translated_tokens = model.generate(
<span class="hljs-meta">... </span>    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id[<span class="hljs-string">&quot;fra_Latn&quot;</span>], max_length=<span class="hljs-number">30</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(translated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]
Le chef de l<span class="hljs-string">&#x27;ONU dit qu&#x27;</span>il n<span class="hljs-string">&#x27;y a pas de solution militaire en Syrie</span>`}}),me=new tt({}),_e=new jn({props:{code:`from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(
    "facebook/nllb-200-distilled-600M", use_auth_token=True, src_lang="ron_Latn"
)
model = AutoModelForSeq2SeqLM.from_pretrained("facebook/nllb-200-distilled-600M", use_auth_token=True)

article = "\u015Eeful ONU spune c\u0103 nu exist\u0103 o solu\u0163ie militar\u0103 \xEEn Siria"
inputs = tokenizer(article, return_tensors="pt")

translated_tokens = model.generate(
    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id["deu_Latn"], max_length=30
)
tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>, src_lang=<span class="hljs-string">&quot;ron_Latn&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;facebook/nllb-200-distilled-600M&quot;</span>, use_auth_token=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;\u015Eeful ONU spune c\u0103 nu exist\u0103 o solu\u0163ie militar\u0103 \xEEn Siria&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>translated_tokens = model.generate(
<span class="hljs-meta">... </span>    **inputs, forced_bos_token_id=tokenizer.lang_code_to_id[<span class="hljs-string">&quot;deu_Latn&quot;</span>], max_length=<span class="hljs-number">30</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(translated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]
UN-Chef sagt, es gibt keine milit\xE4rische L\xF6sung <span class="hljs-keyword">in</span> Syrien`}}),ke=new tt({}),be=new le({props:{name:"class transformers.NllbTokenizer",anchor:"transformers.NllbTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"tokenizer_file",val:" = None"},{name:"src_lang",val:" = None"},{name:"tgt_lang",val:" = None"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.NllbTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.NllbTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.NllbTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.NllbTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.NllbTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.NllbTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.NllbTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.NllbTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.NllbTokenizer.tokenizer_file",description:`<strong>tokenizer_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a tokenizer file to use instead of the vocab file.`,name:"tokenizer_file"},{anchor:"transformers.NllbTokenizer.src_lang",description:`<strong>src_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language to use as source language for translation.`,name:"src_lang"},{anchor:"transformers.NllbTokenizer.tgt_lang",description:`<strong>tgt_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language to use as target language for translation.`,name:"tgt_lang"},{anchor:"transformers.NllbTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>Dict[str, str]</code>) &#x2014;
Additional keyword arguments to pass to the model initialization.`,name:"sp_model_kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb.py#L50"}}),Q=new Qo({props:{anchor:"transformers.NllbTokenizer.example",$$slots:{default:[or]},$$scope:{ctx:Ie}}}),we=new le({props:{name:"as_target_tokenizer",anchor:"transformers.NllbTokenizer.as_target_tokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb.py#L389"}}),ye=new le({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb.py#L268",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ee=new tt({}),Ne=new le({props:{name:"class transformers.NllbTokenizerFast",anchor:"transformers.NllbTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"src_lang",val:" = None"},{name:"tgt_lang",val:" = None"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.NllbTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.NllbTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.NllbTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.NllbTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.NllbTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.NllbTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.NllbTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.NllbTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.NllbTokenizerFast.tokenizer_file",description:`<strong>tokenizer_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a tokenizer file to use instead of the vocab file.`,name:"tokenizer_file"},{anchor:"transformers.NllbTokenizerFast.src_lang",description:`<strong>src_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language to use as source language for translation.`,name:"src_lang"},{anchor:"transformers.NllbTokenizerFast.tgt_lang",description:`<strong>tgt_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language to use as target language for translation.`,name:"tgt_lang"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb_fast.py#L62"}}),te=new Qo({props:{anchor:"transformers.NllbTokenizerFast.example",$$slots:{default:[rr]},$$scope:{ctx:Ie}}}),je=new le({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb_fast.py#L209",returnDescription:`
<p>list of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Me=new le({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.NllbTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb_fast.py#L238",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ce=new le({props:{name:"set_src_lang_special_tokens",anchor:"transformers.NllbTokenizerFast.set_src_lang_special_tokens",parameters:[{name:"src_lang",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb_fast.py#L297"}}),De=new le({props:{name:"set_tgt_lang_special_tokens",anchor:"transformers.NllbTokenizerFast.set_tgt_lang_special_tokens",parameters:[{name:"lang",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_18272/src/transformers/models/nllb/tokenization_nllb_fast.py#L312"}}),{c(){g=s("meta"),L=i(),q=s("h1"),u=s("a"),E=s("span"),_(f.$$.fragment),T=i(),nt=s("span"),Sn=r("NLLB"),Rt=i(),D=s("p"),st=s("strong"),An=r("DISCLAIMER:"),Pn=r(" If you see something strange, file a "),ie=s("a"),Fn=r("Github Issue"),Mn=r(` and assign
@LysandreJik`),Wt=i(),B=s("h2"),J=s("a"),at=s("span"),_(ce.$$.fragment),Cn=i(),ot=s("span"),Dn=r("Overview of NLLB"),Jt=i(),X=s("p"),Bn=r("The NLLB model was presented in "),de=s("a"),In=r("No Language Left Behind: Scaling Human-Centered Machine Translation"),On=r(` by Marta R. Costa-juss\xE0, James Cross, Onur \xC7elebi,
Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula,
Loic Barrault, Gabriel Mejia Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews,
Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco Guzm\xE1n, Philipp Koehn, Alexandre Mourachko, Christophe Ropers,
Safiyyah Saleem, Holger Schwenk, and Jeff Wang.`),Xt=i(),Oe=s("p"),Gn=r("The abstract of the paper is the following:"),Kt=i(),Ge=s("p"),rt=s("em"),Hn=r(`Driven by the goal of eradicating language barriers on a global scale, machine translation has solidified itself as a key focus of artificial intelligence research today.
However, such efforts have coalesced around a small subset of languages, leaving behind the vast majority of mostly low-resource languages. What does it take to break the
200 language barrier while ensuring safe, high quality results, all while keeping ethical considerations in mind? In No Language Left Behind, we took on this challenge by
first contextualizing the need for low-resource language translation support through exploratory interviews with native speakers. Then, we created datasets and models aimed
at narrowing the performance gap between low and high-resource languages. More specifically, we developed a conditional compute model based on Sparsely Gated Mixture of
Experts that is trained on data obtained with novel and effective data mining techniques tailored for low-resource languages. We propose multiple architectural and training
improvements to counteract overfitting while training on thousands of tasks. Critically, we evaluated the performance of over 40,000 different translation directions using
a human-translated benchmark, Flores-200, and combined human evaluation with a novel toxicity benchmark covering all languages in Flores-200 to assess translation safety.
Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art, laying important groundwork towards realizing a universal translation system.`),Vt=i(),He=s("p"),Un=r("This implementation contains the dense models available on release. Let us know via a GitHub issue if you would like to see the MoE models as well."),Yt=i(),A=s("p"),Rn=r("This model was contributed by "),pe=s("a"),Wn=r("Lysandre"),Jn=r(". The authors\u2019 code can be found "),he=s("a"),Xn=r("here"),Kn=r("."),Qt=i(),I=s("h2"),K=s("a"),lt=s("span"),_(fe.$$.fragment),Vn=i(),it=s("span"),Yn=r("Generating with NLLB"),Zt=i(),P=s("p"),Qn=r("While generating the target text set the "),ct=s("code"),Zn=r("forced_bos_token_id"),es=r(` to the target language id. The following
example shows how to translate English to French using the `),dt=s("em"),ts=r("facebook/nllb-200-distilled-600M"),ns=r(" model."),en=i(),F=s("p"),ss=r("Note that we\u2019re using the BCP-47 code for French "),pt=s("code"),as=r("fra_Latn"),os=r(". See "),ue=s("a"),rs=r("here"),ls=r(`
for the list of all BCP-47 in the Flores 200 dataset.`),tn=i(),_(ge.$$.fragment),nn=i(),O=s("h3"),V=s("a"),ht=s("span"),_(me.$$.fragment),is=i(),ft=s("span"),cs=r("Generating from any other language than English"),sn=i(),M=s("p"),ds=r("English ("),ut=s("code"),ps=r("eng_Latn"),hs=r(`) is set as the default language from which to translate. In order to specify that you\u2019d like to translate from a different language,
you should specify the BCP-47 code in the `),gt=s("code"),fs=r("src_lang"),us=r(" keyword argument of the tokenizer initialization."),an=i(),Ue=s("p"),gs=r("See example below for a translation from romanian to german:"),on=i(),_(_e.$$.fragment),rn=i(),G=s("h2"),Y=s("a"),mt=s("span"),_(ke.$$.fragment),ms=i(),_t=s("span"),_s=r("NllbTokenizer"),ln=i(),$=s("div"),_(be.$$.fragment),ks=i(),kt=s("p"),bs=r("Construct an NLLB tokenizer."),vs=i(),S=s("p"),ws=r("Adapted from "),Re=s("a"),ys=r("RobertaTokenizer"),qs=r(" and "),We=s("a"),$s=r("XLNetTokenizer"),zs=r(`. Based on
`),ve=s("a"),Ts=r("SentencePiece"),Es=r("."),Ns=i(),H=s("p"),xs=r("The tokenization method is "),bt=s("code"),Ls=r("<tokens> <eos> <language code>"),js=r(" for source language documents, and "),vt=s("code"),Ss=r("<language code> <tokens> <eos>"),As=r(" for target language documents."),Ps=i(),_(Q.$$.fragment),Fs=i(),Z=s("div"),_(we.$$.fragment),Ms=i(),wt=s("p"),Cs=r(`Temporarily sets the tokenizer for encoding the targets. Useful for tokenizer associated to
sequence-to-sequence models that need a slightly different processing for the labels.`),Ds=i(),j=s("div"),_(ye.$$.fragment),Bs=i(),qe=s("p"),Is=r(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An NLLB sequence has the following format, where `),yt=s("code"),Os=r("X"),Gs=r(" represents the sequence:"),Hs=i(),$e=s("ul"),ze=s("li"),qt=s("code"),Us=r("input_ids"),Rs=r(" (for encoder) "),$t=s("code"),Ws=r("X [eos, src_lang_code]"),Js=i(),Te=s("li"),zt=s("code"),Xs=r("decoder_input_ids"),Ks=r(": (for decoder) "),Tt=s("code"),Vs=r("X [eos, tgt_lang_code]"),Ys=i(),Et=s("p"),Qs=r(`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),cn=i(),U=s("h2"),ee=s("a"),Nt=s("span"),_(Ee.$$.fragment),Zs=i(),xt=s("span"),ea=r("NllbTokenizerFast"),dn=i(),m=s("div"),_(Ne.$$.fragment),ta=i(),R=s("p"),na=r("Construct a \u201Cfast\u201D NLLB tokenizer (backed by HuggingFace\u2019s "),Lt=s("em"),sa=r("tokenizers"),aa=r(` library). Based on
`),xe=s("a"),oa=r("BPE"),ra=r("."),la=i(),Le=s("p"),ia=r("This tokenizer inherits from "),Je=s("a"),ca=r("PreTrainedTokenizerFast"),da=r(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),pa=i(),W=s("p"),ha=r("The tokenization method is "),jt=s("code"),fa=r("<tokens> <eos> <language code>"),ua=r(" for source language documents, and "),St=s("code"),ga=r("<language code> <tokens> <eos>"),ma=r(" for target language documents."),_a=i(),_(te.$$.fragment),ka=i(),N=s("div"),_(je.$$.fragment),ba=i(),At=s("p"),va=r(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. The special tokens depend on calling set_lang.`),wa=i(),Se=s("p"),ya=r("An NLLB sequence has the following format, where "),Pt=s("code"),qa=r("X"),$a=r(" represents the sequence:"),za=i(),Ae=s("ul"),Pe=s("li"),Ft=s("code"),Ta=r("input_ids"),Ea=r(" (for encoder) "),Mt=s("code"),Na=r("X [eos, src_lang_code]"),xa=i(),Fe=s("li"),Ct=s("code"),La=r("decoder_input_ids"),ja=r(": (for decoder) "),Dt=s("code"),Sa=r("X [eos, tgt_lang_code]"),Aa=i(),Bt=s("p"),Pa=r(`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Fa=i(),ne=s("div"),_(Me.$$.fragment),Ma=i(),It=s("p"),Ca=r(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. nllb does not
make use of token type ids, therefore a list of zeros is returned.`),Da=i(),se=s("div"),_(Ce.$$.fragment),Ba=i(),Ot=s("p"),Ia=r("Reset the special tokens to the source lang setting. No prefix and suffix=[eos, src_lang_code]."),Oa=i(),ae=s("div"),_(De.$$.fragment),Ga=i(),Gt=s("p"),Ha=r("Reset the special tokens to the target language setting. No prefix and suffix=[eos, tgt_lang_code]."),this.h()},l(t){const p=sr('[data-svelte="svelte-1phssyn"]',document.head);g=a(p,"META",{name:!0,content:!0}),p.forEach(n),L=c(t),q=a(t,"H1",{class:!0});var Be=o(q);u=a(Be,"A",{id:!0,class:!0,href:!0});var Ht=o(u);E=a(Ht,"SPAN",{});var Ua=o(E);k(f.$$.fragment,Ua),Ua.forEach(n),Ht.forEach(n),T=c(Be),nt=a(Be,"SPAN",{});var Ra=o(nt);Sn=l(Ra,"NLLB"),Ra.forEach(n),Be.forEach(n),Rt=c(t),D=a(t,"P",{});var Ut=o(D);st=a(Ut,"STRONG",{});var Wa=o(st);An=l(Wa,"DISCLAIMER:"),Wa.forEach(n),Pn=l(Ut," If you see something strange, file a "),ie=a(Ut,"A",{href:!0,rel:!0});var Ja=o(ie);Fn=l(Ja,"Github Issue"),Ja.forEach(n),Mn=l(Ut,` and assign
@LysandreJik`),Ut.forEach(n),Wt=c(t),B=a(t,"H2",{class:!0});var hn=o(B);J=a(hn,"A",{id:!0,class:!0,href:!0});var Xa=o(J);at=a(Xa,"SPAN",{});var Ka=o(at);k(ce.$$.fragment,Ka),Ka.forEach(n),Xa.forEach(n),Cn=c(hn),ot=a(hn,"SPAN",{});var Va=o(ot);Dn=l(Va,"Overview of NLLB"),Va.forEach(n),hn.forEach(n),Jt=c(t),X=a(t,"P",{});var fn=o(X);Bn=l(fn,"The NLLB model was presented in "),de=a(fn,"A",{href:!0,rel:!0});var Ya=o(de);In=l(Ya,"No Language Left Behind: Scaling Human-Centered Machine Translation"),Ya.forEach(n),On=l(fn,` by Marta R. Costa-juss\xE0, James Cross, Onur \xC7elebi,
Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula,
Loic Barrault, Gabriel Mejia Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews,
Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco Guzm\xE1n, Philipp Koehn, Alexandre Mourachko, Christophe Ropers,
Safiyyah Saleem, Holger Schwenk, and Jeff Wang.`),fn.forEach(n),Xt=c(t),Oe=a(t,"P",{});var Qa=o(Oe);Gn=l(Qa,"The abstract of the paper is the following:"),Qa.forEach(n),Kt=c(t),Ge=a(t,"P",{});var Za=o(Ge);rt=a(Za,"EM",{});var eo=o(rt);Hn=l(eo,`Driven by the goal of eradicating language barriers on a global scale, machine translation has solidified itself as a key focus of artificial intelligence research today.
However, such efforts have coalesced around a small subset of languages, leaving behind the vast majority of mostly low-resource languages. What does it take to break the
200 language barrier while ensuring safe, high quality results, all while keeping ethical considerations in mind? In No Language Left Behind, we took on this challenge by
first contextualizing the need for low-resource language translation support through exploratory interviews with native speakers. Then, we created datasets and models aimed
at narrowing the performance gap between low and high-resource languages. More specifically, we developed a conditional compute model based on Sparsely Gated Mixture of
Experts that is trained on data obtained with novel and effective data mining techniques tailored for low-resource languages. We propose multiple architectural and training
improvements to counteract overfitting while training on thousands of tasks. Critically, we evaluated the performance of over 40,000 different translation directions using
a human-translated benchmark, Flores-200, and combined human evaluation with a novel toxicity benchmark covering all languages in Flores-200 to assess translation safety.
Our model achieves an improvement of 44% BLEU relative to the previous state-of-the-art, laying important groundwork towards realizing a universal translation system.`),eo.forEach(n),Za.forEach(n),Vt=c(t),He=a(t,"P",{});var to=o(He);Un=l(to,"This implementation contains the dense models available on release. Let us know via a GitHub issue if you would like to see the MoE models as well."),to.forEach(n),Yt=c(t),A=a(t,"P",{});var Xe=o(A);Rn=l(Xe,"This model was contributed by "),pe=a(Xe,"A",{href:!0,rel:!0});var no=o(pe);Wn=l(no,"Lysandre"),no.forEach(n),Jn=l(Xe,". The authors\u2019 code can be found "),he=a(Xe,"A",{href:!0,rel:!0});var so=o(he);Xn=l(so,"here"),so.forEach(n),Kn=l(Xe,"."),Xe.forEach(n),Qt=c(t),I=a(t,"H2",{class:!0});var un=o(I);K=a(un,"A",{id:!0,class:!0,href:!0});var ao=o(K);lt=a(ao,"SPAN",{});var oo=o(lt);k(fe.$$.fragment,oo),oo.forEach(n),ao.forEach(n),Vn=c(un),it=a(un,"SPAN",{});var ro=o(it);Yn=l(ro,"Generating with NLLB"),ro.forEach(n),un.forEach(n),Zt=c(t),P=a(t,"P",{});var Ke=o(P);Qn=l(Ke,"While generating the target text set the "),ct=a(Ke,"CODE",{});var lo=o(ct);Zn=l(lo,"forced_bos_token_id"),lo.forEach(n),es=l(Ke,` to the target language id. The following
example shows how to translate English to French using the `),dt=a(Ke,"EM",{});var io=o(dt);ts=l(io,"facebook/nllb-200-distilled-600M"),io.forEach(n),ns=l(Ke," model."),Ke.forEach(n),en=c(t),F=a(t,"P",{});var Ve=o(F);ss=l(Ve,"Note that we\u2019re using the BCP-47 code for French "),pt=a(Ve,"CODE",{});var co=o(pt);as=l(co,"fra_Latn"),co.forEach(n),os=l(Ve,". See "),ue=a(Ve,"A",{href:!0,rel:!0});var po=o(ue);rs=l(po,"here"),po.forEach(n),ls=l(Ve,`
for the list of all BCP-47 in the Flores 200 dataset.`),Ve.forEach(n),tn=c(t),k(ge.$$.fragment,t),nn=c(t),O=a(t,"H3",{class:!0});var gn=o(O);V=a(gn,"A",{id:!0,class:!0,href:!0});var ho=o(V);ht=a(ho,"SPAN",{});var fo=o(ht);k(me.$$.fragment,fo),fo.forEach(n),ho.forEach(n),is=c(gn),ft=a(gn,"SPAN",{});var uo=o(ft);cs=l(uo,"Generating from any other language than English"),uo.forEach(n),gn.forEach(n),sn=c(t),M=a(t,"P",{});var Ye=o(M);ds=l(Ye,"English ("),ut=a(Ye,"CODE",{});var go=o(ut);ps=l(go,"eng_Latn"),go.forEach(n),hs=l(Ye,`) is set as the default language from which to translate. In order to specify that you\u2019d like to translate from a different language,
you should specify the BCP-47 code in the `),gt=a(Ye,"CODE",{});var mo=o(gt);fs=l(mo,"src_lang"),mo.forEach(n),us=l(Ye," keyword argument of the tokenizer initialization."),Ye.forEach(n),an=c(t),Ue=a(t,"P",{});var _o=o(Ue);gs=l(_o,"See example below for a translation from romanian to german:"),_o.forEach(n),on=c(t),k(_e.$$.fragment,t),rn=c(t),G=a(t,"H2",{class:!0});var mn=o(G);Y=a(mn,"A",{id:!0,class:!0,href:!0});var ko=o(Y);mt=a(ko,"SPAN",{});var bo=o(mt);k(ke.$$.fragment,bo),bo.forEach(n),ko.forEach(n),ms=c(mn),_t=a(mn,"SPAN",{});var vo=o(_t);_s=l(vo,"NllbTokenizer"),vo.forEach(n),mn.forEach(n),ln=c(t),$=a(t,"DIV",{class:!0});var x=o($);k(be.$$.fragment,x),ks=c(x),kt=a(x,"P",{});var wo=o(kt);bs=l(wo,"Construct an NLLB tokenizer."),wo.forEach(n),vs=c(x),S=a(x,"P",{});var oe=o(S);ws=l(oe,"Adapted from "),Re=a(oe,"A",{href:!0});var yo=o(Re);ys=l(yo,"RobertaTokenizer"),yo.forEach(n),qs=l(oe," and "),We=a(oe,"A",{href:!0});var qo=o(We);$s=l(qo,"XLNetTokenizer"),qo.forEach(n),zs=l(oe,`. Based on
`),ve=a(oe,"A",{href:!0,rel:!0});var $o=o(ve);Ts=l($o,"SentencePiece"),$o.forEach(n),Es=l(oe,"."),oe.forEach(n),Ns=c(x),H=a(x,"P",{});var Qe=o(H);xs=l(Qe,"The tokenization method is "),bt=a(Qe,"CODE",{});var zo=o(bt);Ls=l(zo,"<tokens> <eos> <language code>"),zo.forEach(n),js=l(Qe," for source language documents, and "),vt=a(Qe,"CODE",{});var To=o(vt);Ss=l(To,"<language code> <tokens> <eos>"),To.forEach(n),As=l(Qe," for target language documents."),Qe.forEach(n),Ps=c(x),k(Q.$$.fragment,x),Fs=c(x),Z=a(x,"DIV",{class:!0});var _n=o(Z);k(we.$$.fragment,_n),Ms=c(_n),wt=a(_n,"P",{});var Eo=o(wt);Cs=l(Eo,`Temporarily sets the tokenizer for encoding the targets. Useful for tokenizer associated to
sequence-to-sequence models that need a slightly different processing for the labels.`),Eo.forEach(n),_n.forEach(n),Ds=c(x),j=a(x,"DIV",{class:!0});var re=o(j);k(ye.$$.fragment,re),Bs=c(re),qe=a(re,"P",{});var kn=o(qe);Is=l(kn,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An NLLB sequence has the following format, where `),yt=a(kn,"CODE",{});var No=o(yt);Os=l(No,"X"),No.forEach(n),Gs=l(kn," represents the sequence:"),kn.forEach(n),Hs=c(re),$e=a(re,"UL",{});var bn=o($e);ze=a(bn,"LI",{});var vn=o(ze);qt=a(vn,"CODE",{});var xo=o(qt);Us=l(xo,"input_ids"),xo.forEach(n),Rs=l(vn," (for encoder) "),$t=a(vn,"CODE",{});var Lo=o($t);Ws=l(Lo,"X [eos, src_lang_code]"),Lo.forEach(n),vn.forEach(n),Js=c(bn),Te=a(bn,"LI",{});var wn=o(Te);zt=a(wn,"CODE",{});var jo=o(zt);Xs=l(jo,"decoder_input_ids"),jo.forEach(n),Ks=l(wn,": (for decoder) "),Tt=a(wn,"CODE",{});var So=o(Tt);Vs=l(So,"X [eos, tgt_lang_code]"),So.forEach(n),wn.forEach(n),bn.forEach(n),Ys=c(re),Et=a(re,"P",{});var Ao=o(Et);Qs=l(Ao,`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Ao.forEach(n),re.forEach(n),x.forEach(n),cn=c(t),U=a(t,"H2",{class:!0});var yn=o(U);ee=a(yn,"A",{id:!0,class:!0,href:!0});var Po=o(ee);Nt=a(Po,"SPAN",{});var Fo=o(Nt);k(Ee.$$.fragment,Fo),Fo.forEach(n),Po.forEach(n),Zs=c(yn),xt=a(yn,"SPAN",{});var Mo=o(xt);ea=l(Mo,"NllbTokenizerFast"),Mo.forEach(n),yn.forEach(n),dn=c(t),m=a(t,"DIV",{class:!0});var z=o(m);k(Ne.$$.fragment,z),ta=c(z),R=a(z,"P",{});var Ze=o(R);na=l(Ze,"Construct a \u201Cfast\u201D NLLB tokenizer (backed by HuggingFace\u2019s "),Lt=a(Ze,"EM",{});var Co=o(Lt);sa=l(Co,"tokenizers"),Co.forEach(n),aa=l(Ze,` library). Based on
`),xe=a(Ze,"A",{href:!0,rel:!0});var Do=o(xe);oa=l(Do,"BPE"),Do.forEach(n),ra=l(Ze,"."),Ze.forEach(n),la=c(z),Le=a(z,"P",{});var qn=o(Le);ia=l(qn,"This tokenizer inherits from "),Je=a(qn,"A",{href:!0});var Bo=o(Je);ca=l(Bo,"PreTrainedTokenizerFast"),Bo.forEach(n),da=l(qn,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),qn.forEach(n),pa=c(z),W=a(z,"P",{});var et=o(W);ha=l(et,"The tokenization method is "),jt=a(et,"CODE",{});var Io=o(jt);fa=l(Io,"<tokens> <eos> <language code>"),Io.forEach(n),ua=l(et," for source language documents, and "),St=a(et,"CODE",{});var Oo=o(St);ga=l(Oo,"<language code> <tokens> <eos>"),Oo.forEach(n),ma=l(et," for target language documents."),et.forEach(n),_a=c(z),k(te.$$.fragment,z),ka=c(z),N=a(z,"DIV",{class:!0});var C=o(N);k(je.$$.fragment,C),ba=c(C),At=a(C,"P",{});var Go=o(At);va=l(Go,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. The special tokens depend on calling set_lang.`),Go.forEach(n),wa=c(C),Se=a(C,"P",{});var $n=o(Se);ya=l($n,"An NLLB sequence has the following format, where "),Pt=a($n,"CODE",{});var Ho=o(Pt);qa=l(Ho,"X"),Ho.forEach(n),$a=l($n," represents the sequence:"),$n.forEach(n),za=c(C),Ae=a(C,"UL",{});var zn=o(Ae);Pe=a(zn,"LI",{});var Tn=o(Pe);Ft=a(Tn,"CODE",{});var Uo=o(Ft);Ta=l(Uo,"input_ids"),Uo.forEach(n),Ea=l(Tn," (for encoder) "),Mt=a(Tn,"CODE",{});var Ro=o(Mt);Na=l(Ro,"X [eos, src_lang_code]"),Ro.forEach(n),Tn.forEach(n),xa=c(zn),Fe=a(zn,"LI",{});var En=o(Fe);Ct=a(En,"CODE",{});var Wo=o(Ct);La=l(Wo,"decoder_input_ids"),Wo.forEach(n),ja=l(En,": (for decoder) "),Dt=a(En,"CODE",{});var Jo=o(Dt);Sa=l(Jo,"X [eos, tgt_lang_code]"),Jo.forEach(n),En.forEach(n),zn.forEach(n),Aa=c(C),Bt=a(C,"P",{});var Xo=o(Bt);Pa=l(Xo,`BOS is never used. Pairs of sequences are not the expected use case, but they will be handled without a
separator.`),Xo.forEach(n),C.forEach(n),Fa=c(z),ne=a(z,"DIV",{class:!0});var Nn=o(ne);k(Me.$$.fragment,Nn),Ma=c(Nn),It=a(Nn,"P",{});var Ko=o(It);Ca=l(Ko,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. nllb does not
make use of token type ids, therefore a list of zeros is returned.`),Ko.forEach(n),Nn.forEach(n),Da=c(z),se=a(z,"DIV",{class:!0});var xn=o(se);k(Ce.$$.fragment,xn),Ba=c(xn),Ot=a(xn,"P",{});var Vo=o(Ot);Ia=l(Vo,"Reset the special tokens to the source lang setting. No prefix and suffix=[eos, src_lang_code]."),Vo.forEach(n),xn.forEach(n),Oa=c(z),ae=a(z,"DIV",{class:!0});var Ln=o(ae);k(De.$$.fragment,Ln),Ga=c(Ln),Gt=a(Ln,"P",{});var Yo=o(Gt);Ha=l(Yo,"Reset the special tokens to the target language setting. No prefix and suffix=[eos, tgt_lang_code]."),Yo.forEach(n),Ln.forEach(n),z.forEach(n),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(ir)),d(u,"id","nllb"),d(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u,"href","#nllb"),d(q,"class","relative group"),d(ie,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=bug&template=bug-report.yml"),d(ie,"rel","nofollow"),d(J,"id","overview-of-nllb"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#overview-of-nllb"),d(B,"class","relative group"),d(de,"href","https://arxiv.org/abs/2207.04672"),d(de,"rel","nofollow"),d(pe,"href","https://huggingface.co/lysandre"),d(pe,"rel","nofollow"),d(he,"href","https://github.com/facebookresearch/fairseq/tree/nllb"),d(he,"rel","nofollow"),d(K,"id","generating-with-nllb"),d(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K,"href","#generating-with-nllb"),d(I,"class","relative group"),d(ue,"href","https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200"),d(ue,"rel","nofollow"),d(V,"id","generating-from-any-other-language-than-english"),d(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V,"href","#generating-from-any-other-language-than-english"),d(O,"class","relative group"),d(Y,"id","transformers.NllbTokenizer"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#transformers.NllbTokenizer"),d(G,"class","relative group"),d(Re,"href","/docs/transformers/pr_18272/en/model_doc/roberta#transformers.RobertaTokenizer"),d(We,"href","/docs/transformers/pr_18272/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(ve,"href","https://github.com/google/sentencepiece"),d(ve,"rel","nofollow"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"id","transformers.NllbTokenizerFast"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#transformers.NllbTokenizerFast"),d(U,"class","relative group"),d(xe,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),d(xe,"rel","nofollow"),d(Je,"href","/docs/transformers/pr_18272/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,g),h(t,L,p),h(t,q,p),e(q,u),e(u,E),b(f,E,null),e(q,T),e(q,nt),e(nt,Sn),h(t,Rt,p),h(t,D,p),e(D,st),e(st,An),e(D,Pn),e(D,ie),e(ie,Fn),e(D,Mn),h(t,Wt,p),h(t,B,p),e(B,J),e(J,at),b(ce,at,null),e(B,Cn),e(B,ot),e(ot,Dn),h(t,Jt,p),h(t,X,p),e(X,Bn),e(X,de),e(de,In),e(X,On),h(t,Xt,p),h(t,Oe,p),e(Oe,Gn),h(t,Kt,p),h(t,Ge,p),e(Ge,rt),e(rt,Hn),h(t,Vt,p),h(t,He,p),e(He,Un),h(t,Yt,p),h(t,A,p),e(A,Rn),e(A,pe),e(pe,Wn),e(A,Jn),e(A,he),e(he,Xn),e(A,Kn),h(t,Qt,p),h(t,I,p),e(I,K),e(K,lt),b(fe,lt,null),e(I,Vn),e(I,it),e(it,Yn),h(t,Zt,p),h(t,P,p),e(P,Qn),e(P,ct),e(ct,Zn),e(P,es),e(P,dt),e(dt,ts),e(P,ns),h(t,en,p),h(t,F,p),e(F,ss),e(F,pt),e(pt,as),e(F,os),e(F,ue),e(ue,rs),e(F,ls),h(t,tn,p),b(ge,t,p),h(t,nn,p),h(t,O,p),e(O,V),e(V,ht),b(me,ht,null),e(O,is),e(O,ft),e(ft,cs),h(t,sn,p),h(t,M,p),e(M,ds),e(M,ut),e(ut,ps),e(M,hs),e(M,gt),e(gt,fs),e(M,us),h(t,an,p),h(t,Ue,p),e(Ue,gs),h(t,on,p),b(_e,t,p),h(t,rn,p),h(t,G,p),e(G,Y),e(Y,mt),b(ke,mt,null),e(G,ms),e(G,_t),e(_t,_s),h(t,ln,p),h(t,$,p),b(be,$,null),e($,ks),e($,kt),e(kt,bs),e($,vs),e($,S),e(S,ws),e(S,Re),e(Re,ys),e(S,qs),e(S,We),e(We,$s),e(S,zs),e(S,ve),e(ve,Ts),e(S,Es),e($,Ns),e($,H),e(H,xs),e(H,bt),e(bt,Ls),e(H,js),e(H,vt),e(vt,Ss),e(H,As),e($,Ps),b(Q,$,null),e($,Fs),e($,Z),b(we,Z,null),e(Z,Ms),e(Z,wt),e(wt,Cs),e($,Ds),e($,j),b(ye,j,null),e(j,Bs),e(j,qe),e(qe,Is),e(qe,yt),e(yt,Os),e(qe,Gs),e(j,Hs),e(j,$e),e($e,ze),e(ze,qt),e(qt,Us),e(ze,Rs),e(ze,$t),e($t,Ws),e($e,Js),e($e,Te),e(Te,zt),e(zt,Xs),e(Te,Ks),e(Te,Tt),e(Tt,Vs),e(j,Ys),e(j,Et),e(Et,Qs),h(t,cn,p),h(t,U,p),e(U,ee),e(ee,Nt),b(Ee,Nt,null),e(U,Zs),e(U,xt),e(xt,ea),h(t,dn,p),h(t,m,p),b(Ne,m,null),e(m,ta),e(m,R),e(R,na),e(R,Lt),e(Lt,sa),e(R,aa),e(R,xe),e(xe,oa),e(R,ra),e(m,la),e(m,Le),e(Le,ia),e(Le,Je),e(Je,ca),e(Le,da),e(m,pa),e(m,W),e(W,ha),e(W,jt),e(jt,fa),e(W,ua),e(W,St),e(St,ga),e(W,ma),e(m,_a),b(te,m,null),e(m,ka),e(m,N),b(je,N,null),e(N,ba),e(N,At),e(At,va),e(N,wa),e(N,Se),e(Se,ya),e(Se,Pt),e(Pt,qa),e(Se,$a),e(N,za),e(N,Ae),e(Ae,Pe),e(Pe,Ft),e(Ft,Ta),e(Pe,Ea),e(Pe,Mt),e(Mt,Na),e(Ae,xa),e(Ae,Fe),e(Fe,Ct),e(Ct,La),e(Fe,ja),e(Fe,Dt),e(Dt,Sa),e(N,Aa),e(N,Bt),e(Bt,Pa),e(m,Fa),e(m,ne),b(Me,ne,null),e(ne,Ma),e(ne,It),e(It,Ca),e(m,Da),e(m,se),b(Ce,se,null),e(se,Ba),e(se,Ot),e(Ot,Ia),e(m,Oa),e(m,ae),b(De,ae,null),e(ae,Ga),e(ae,Gt),e(Gt,Ha),pn=!0},p(t,[p]){const Be={};p&2&&(Be.$$scope={dirty:p,ctx:t}),Q.$set(Be);const Ht={};p&2&&(Ht.$$scope={dirty:p,ctx:t}),te.$set(Ht)},i(t){pn||(v(f.$$.fragment,t),v(ce.$$.fragment,t),v(fe.$$.fragment,t),v(ge.$$.fragment,t),v(me.$$.fragment,t),v(_e.$$.fragment,t),v(ke.$$.fragment,t),v(be.$$.fragment,t),v(Q.$$.fragment,t),v(we.$$.fragment,t),v(ye.$$.fragment,t),v(Ee.$$.fragment,t),v(Ne.$$.fragment,t),v(te.$$.fragment,t),v(je.$$.fragment,t),v(Me.$$.fragment,t),v(Ce.$$.fragment,t),v(De.$$.fragment,t),pn=!0)},o(t){w(f.$$.fragment,t),w(ce.$$.fragment,t),w(fe.$$.fragment,t),w(ge.$$.fragment,t),w(me.$$.fragment,t),w(_e.$$.fragment,t),w(ke.$$.fragment,t),w(be.$$.fragment,t),w(Q.$$.fragment,t),w(we.$$.fragment,t),w(ye.$$.fragment,t),w(Ee.$$.fragment,t),w(Ne.$$.fragment,t),w(te.$$.fragment,t),w(je.$$.fragment,t),w(Me.$$.fragment,t),w(Ce.$$.fragment,t),w(De.$$.fragment,t),pn=!1},d(t){n(g),t&&n(L),t&&n(q),y(f),t&&n(Rt),t&&n(D),t&&n(Wt),t&&n(B),y(ce),t&&n(Jt),t&&n(X),t&&n(Xt),t&&n(Oe),t&&n(Kt),t&&n(Ge),t&&n(Vt),t&&n(He),t&&n(Yt),t&&n(A),t&&n(Qt),t&&n(I),y(fe),t&&n(Zt),t&&n(P),t&&n(en),t&&n(F),t&&n(tn),y(ge,t),t&&n(nn),t&&n(O),y(me),t&&n(sn),t&&n(M),t&&n(an),t&&n(Ue),t&&n(on),y(_e,t),t&&n(rn),t&&n(G),y(ke),t&&n(ln),t&&n($),y(be),y(Q),y(we),y(ye),t&&n(cn),t&&n(U),y(Ee),t&&n(dn),t&&n(m),y(Ne),y(te),y(je),y(Me),y(Ce),y(De)}}}const ir={local:"nllb",sections:[{local:"overview-of-nllb",title:"Overview of NLLB"},{local:"generating-with-nllb",sections:[{local:"generating-from-any-other-language-than-english",title:"Generating from any other language than English"}],title:"Generating with NLLB"},{local:"transformers.NllbTokenizer",title:"NllbTokenizer"},{local:"transformers.NllbTokenizerFast",title:"NllbTokenizerFast"}],title:"NLLB"};function cr(Ie){return ar(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gr extends er{constructor(g){super();tr(this,g,cr,lr,nr,{})}}export{gr as default,ir as metadata};
