import{S as D0t,i as G0t,s as O0t,e as a,k as l,w as F,t as o,M as V0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as X0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as djr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function z0t(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,J6,gf,qe,Xe,ci,An,Y6,yn,Ln,K6,fi,xn,Z6,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),J6=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),Y6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),K6=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),Z6=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var _$=s(p);m=r(_$,"NewModelConfig"),_$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var b$=s(li);mf=r(b$,"model_type"),b$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var v$=s(ii);di=r(v$,'"new-model"'),v$.forEach(t),J6=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),Y6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var F$=s(yn);Ln=r(F$,"PreTrainedModel"),F$.forEach(t),K6=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),Z6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var T$=s(mi);hf=r(T$,"NewModelConfig"),T$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,J6),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,Y6),e(qe,yn),e(yn,Ln),e(qe,K6),e(qe,fi),e(fi,xn),e(qe,Z6),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,J6,gf,qe,Xe,ci,An,Y6,yn,Ln,K6,fi,xn,Z6,mi,hf,Ma,ze,Ae,_$,gi,b$,v$,Eo,Ea,F$,pf,T$,mDe,oIe,hi,uf,see,e0,gDe,lee,hDe,rIe,$n,pDe,iee,uDe,_De,dee,bDe,vDe,tIe,o0,aIe,M$,FDe,nIe,_f,sIe,pi,bf,cee,r0,TDe,fee,MDe,lIe,Co,t0,EDe,a0,CDe,E$,wDe,ADe,yDe,n0,LDe,mee,xDe,$De,kDe,Er,s0,SDe,gee,RDe,BDe,ui,PDe,hee,IDe,qDe,pee,NDe,jDe,DDe,A,vf,uee,GDe,ODe,C$,VDe,XDe,zDe,Ff,_ee,QDe,WDe,w$,HDe,UDe,JDe,Tf,bee,YDe,KDe,A$,ZDe,eGe,oGe,Mf,vee,rGe,tGe,y$,aGe,nGe,sGe,Ef,Fee,lGe,iGe,L$,dGe,cGe,fGe,Cf,Tee,mGe,gGe,x$,hGe,pGe,uGe,wf,Mee,_Ge,bGe,$$,vGe,FGe,TGe,Af,Eee,MGe,EGe,k$,CGe,wGe,AGe,yf,Cee,yGe,LGe,S$,xGe,$Ge,kGe,Lf,wee,SGe,RGe,R$,BGe,PGe,IGe,xf,Aee,qGe,NGe,B$,jGe,DGe,GGe,$f,yee,OGe,VGe,P$,XGe,zGe,QGe,kf,Lee,WGe,HGe,I$,UGe,JGe,YGe,Sf,xee,KGe,ZGe,q$,eOe,oOe,rOe,Rf,$ee,tOe,aOe,N$,nOe,sOe,lOe,Bf,kee,iOe,dOe,j$,cOe,fOe,mOe,Pf,See,gOe,hOe,D$,pOe,uOe,_Oe,If,Ree,bOe,vOe,G$,FOe,TOe,MOe,qf,Bee,EOe,COe,O$,wOe,AOe,yOe,Nf,Pee,LOe,xOe,V$,$Oe,kOe,SOe,jf,Iee,ROe,BOe,X$,POe,IOe,qOe,Df,qee,NOe,jOe,z$,DOe,GOe,OOe,Gf,Nee,VOe,XOe,Q$,zOe,QOe,WOe,Of,jee,HOe,UOe,W$,JOe,YOe,KOe,Vf,Dee,ZOe,eVe,H$,oVe,rVe,tVe,Xf,Gee,aVe,nVe,U$,sVe,lVe,iVe,zf,Oee,dVe,cVe,J$,fVe,mVe,gVe,Qf,Vee,hVe,pVe,Y$,uVe,_Ve,bVe,Wf,Xee,vVe,FVe,K$,TVe,MVe,EVe,Hf,zee,CVe,wVe,Z$,AVe,yVe,LVe,Uf,Qee,xVe,$Ve,ek,kVe,SVe,RVe,Jf,Wee,BVe,PVe,ok,IVe,qVe,NVe,Yf,Hee,jVe,DVe,rk,GVe,OVe,VVe,Kf,Uee,XVe,zVe,tk,QVe,WVe,HVe,Zf,Jee,UVe,JVe,ak,YVe,KVe,ZVe,em,Yee,eXe,oXe,nk,rXe,tXe,aXe,om,Kee,nXe,sXe,sk,lXe,iXe,dXe,rm,Zee,cXe,fXe,lk,mXe,gXe,hXe,tm,eoe,pXe,uXe,ik,_Xe,bXe,vXe,am,ooe,FXe,TXe,dk,MXe,EXe,CXe,nm,roe,wXe,AXe,ck,yXe,LXe,xXe,sm,toe,$Xe,kXe,fk,SXe,RXe,BXe,lm,aoe,PXe,IXe,mk,qXe,NXe,jXe,im,noe,DXe,GXe,gk,OXe,VXe,XXe,dm,soe,zXe,QXe,hk,WXe,HXe,UXe,cm,loe,JXe,YXe,pk,KXe,ZXe,eze,fm,ioe,oze,rze,uk,tze,aze,nze,mm,doe,sze,lze,_k,ize,dze,cze,gm,coe,fze,mze,bk,gze,hze,pze,hm,foe,uze,_ze,vk,bze,vze,Fze,pm,moe,Tze,Mze,Fk,Eze,Cze,wze,um,goe,Aze,yze,Tk,Lze,xze,$ze,_m,hoe,kze,Sze,Mk,Rze,Bze,Pze,bm,poe,Ize,qze,Ek,Nze,jze,Dze,vm,uoe,Gze,Oze,Ck,Vze,Xze,zze,Fm,_oe,Qze,Wze,wk,Hze,Uze,Jze,Tm,boe,Yze,Kze,Ak,Zze,eQe,oQe,Mm,voe,rQe,tQe,yk,aQe,nQe,sQe,Em,Foe,lQe,iQe,Lk,dQe,cQe,fQe,Cm,Toe,mQe,gQe,xk,hQe,pQe,uQe,wm,Moe,_Qe,bQe,$k,vQe,FQe,TQe,Am,Eoe,MQe,EQe,kk,CQe,wQe,AQe,ym,Coe,yQe,LQe,Sk,xQe,$Qe,kQe,Lm,woe,SQe,RQe,Rk,BQe,PQe,IQe,xm,Aoe,qQe,NQe,Bk,jQe,DQe,GQe,$m,yoe,OQe,VQe,Pk,XQe,zQe,QQe,km,Loe,WQe,HQe,Ik,UQe,JQe,YQe,Sm,xoe,KQe,ZQe,qk,eWe,oWe,rWe,Rm,$oe,tWe,aWe,Nk,nWe,sWe,lWe,Bm,koe,iWe,dWe,jk,cWe,fWe,mWe,Pm,Soe,gWe,hWe,Dk,pWe,uWe,_We,Im,Roe,bWe,vWe,Gk,FWe,TWe,MWe,qm,Boe,EWe,CWe,Ok,wWe,AWe,yWe,Nm,Poe,LWe,xWe,Vk,$We,kWe,SWe,jm,Ioe,RWe,BWe,Xk,PWe,IWe,qWe,Dm,qoe,NWe,jWe,zk,DWe,GWe,OWe,Gm,Noe,VWe,XWe,Qk,zWe,QWe,WWe,Om,joe,HWe,UWe,Wk,JWe,YWe,KWe,Vm,Doe,ZWe,eHe,Hk,oHe,rHe,tHe,Xm,Goe,aHe,nHe,Uk,sHe,lHe,iHe,zm,Ooe,dHe,cHe,Jk,fHe,mHe,gHe,Qm,Voe,hHe,pHe,Yk,uHe,_He,bHe,Wm,Xoe,vHe,FHe,Kk,THe,MHe,EHe,Hm,zoe,CHe,wHe,Zk,AHe,yHe,LHe,Um,Qoe,xHe,$He,eS,kHe,SHe,RHe,Jm,Woe,BHe,PHe,oS,IHe,qHe,NHe,Ym,Hoe,jHe,DHe,rS,GHe,OHe,VHe,Km,Uoe,XHe,zHe,tS,QHe,WHe,HHe,Zm,Joe,UHe,JHe,aS,YHe,KHe,ZHe,eg,Yoe,eUe,oUe,nS,rUe,tUe,aUe,og,Koe,nUe,sUe,sS,lUe,iUe,dUe,rg,Zoe,cUe,fUe,lS,mUe,gUe,hUe,tg,ere,pUe,uUe,iS,_Ue,bUe,vUe,ag,ore,FUe,TUe,dS,MUe,EUe,CUe,ng,rre,wUe,AUe,cS,yUe,LUe,xUe,sg,tre,$Ue,kUe,fS,SUe,RUe,BUe,lg,are,PUe,IUe,mS,qUe,NUe,jUe,ig,nre,DUe,GUe,gS,OUe,VUe,XUe,dg,sre,zUe,QUe,hS,WUe,HUe,UUe,cg,lre,JUe,YUe,pS,KUe,ZUe,eJe,fg,ire,oJe,rJe,uS,tJe,aJe,nJe,mg,dre,sJe,lJe,_S,iJe,dJe,cJe,gg,cre,fJe,mJe,bS,gJe,hJe,pJe,hg,fre,uJe,_Je,vS,bJe,vJe,FJe,pg,mre,TJe,MJe,FS,EJe,CJe,wJe,ug,gre,AJe,yJe,TS,LJe,xJe,$Je,_g,kJe,bg,l0,SJe,hre,RJe,iIe,_i,vg,pre,i0,BJe,ure,PJe,dIe,wo,d0,IJe,c0,qJe,MS,NJe,jJe,DJe,f0,GJe,_re,OJe,VJe,XJe,Cr,m0,zJe,bre,QJe,WJe,Ca,HJe,vre,UJe,JJe,Fre,YJe,KJe,Tre,ZJe,eYe,oYe,k,kn,Mre,rYe,tYe,ES,aYe,nYe,CS,sYe,lYe,iYe,Sn,Ere,dYe,cYe,wS,fYe,mYe,AS,gYe,hYe,pYe,Rn,Cre,uYe,_Ye,yS,bYe,vYe,LS,FYe,TYe,MYe,Fg,wre,EYe,CYe,xS,wYe,AYe,yYe,Bn,Are,LYe,xYe,$S,$Ye,kYe,kS,SYe,RYe,BYe,Tg,yre,PYe,IYe,SS,qYe,NYe,jYe,Mg,Lre,DYe,GYe,RS,OYe,VYe,XYe,Eg,xre,zYe,QYe,BS,WYe,HYe,UYe,Pn,$re,JYe,YYe,PS,KYe,ZYe,IS,eKe,oKe,rKe,In,kre,tKe,aKe,qS,nKe,sKe,NS,lKe,iKe,dKe,qn,Sre,cKe,fKe,jS,mKe,gKe,DS,hKe,pKe,uKe,Cg,Rre,_Ke,bKe,GS,vKe,FKe,TKe,wg,Bre,MKe,EKe,OS,CKe,wKe,AKe,Nn,Pre,yKe,LKe,VS,xKe,$Ke,XS,kKe,SKe,RKe,Ag,Ire,BKe,PKe,zS,IKe,qKe,NKe,jn,qre,jKe,DKe,QS,GKe,OKe,WS,VKe,XKe,zKe,Dn,Nre,QKe,WKe,HS,HKe,UKe,US,JKe,YKe,KKe,Gn,jre,ZKe,eZe,JS,oZe,rZe,YS,tZe,aZe,nZe,yg,Dre,sZe,lZe,KS,iZe,dZe,cZe,On,Gre,fZe,mZe,ZS,gZe,hZe,eR,pZe,uZe,_Ze,Vn,Ore,bZe,vZe,oR,FZe,TZe,rR,MZe,EZe,CZe,Xn,Vre,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,zn,Xre,SZe,RZe,nR,BZe,PZe,sR,IZe,qZe,NZe,Qn,zre,jZe,DZe,lR,GZe,OZe,iR,VZe,XZe,zZe,Wn,Qre,QZe,WZe,dR,HZe,UZe,cR,JZe,YZe,KZe,Lg,Wre,ZZe,eeo,fR,oeo,reo,teo,Hn,Hre,aeo,neo,mR,seo,leo,gR,ieo,deo,ceo,xg,Ure,feo,meo,hR,geo,heo,peo,Un,Jre,ueo,_eo,pR,beo,veo,uR,Feo,Teo,Meo,Jn,Yre,Eeo,Ceo,_R,weo,Aeo,bR,yeo,Leo,xeo,Yn,Kre,$eo,keo,vR,Seo,Reo,FR,Beo,Peo,Ieo,Kn,Zre,qeo,Neo,TR,jeo,Deo,MR,Geo,Oeo,Veo,Zn,ete,Xeo,zeo,ER,Qeo,Weo,CR,Heo,Ueo,Jeo,$g,ote,Yeo,Keo,wR,Zeo,eoo,ooo,es,rte,roo,too,AR,aoo,noo,yR,soo,loo,ioo,os,tte,doo,coo,LR,foo,moo,xR,goo,hoo,poo,rs,ate,uoo,_oo,$R,boo,voo,kR,Foo,Too,Moo,ts,nte,Eoo,Coo,SR,woo,Aoo,RR,yoo,Loo,xoo,as,ste,$oo,koo,BR,Soo,Roo,PR,Boo,Poo,Ioo,ns,lte,qoo,Noo,IR,joo,Doo,qR,Goo,Ooo,Voo,kg,ite,Xoo,zoo,NR,Qoo,Woo,Hoo,ss,dte,Uoo,Joo,jR,Yoo,Koo,DR,Zoo,ero,oro,Sg,cte,rro,tro,GR,aro,nro,sro,Rg,fte,lro,iro,OR,dro,cro,fro,ls,mte,mro,gro,VR,hro,pro,XR,uro,_ro,bro,is,gte,vro,Fro,zR,Tro,Mro,QR,Ero,Cro,wro,ds,hte,Aro,yro,WR,Lro,xro,HR,$ro,kro,Sro,Bg,pte,Rro,Bro,UR,Pro,Iro,qro,cs,ute,Nro,jro,JR,Dro,Gro,YR,Oro,Vro,Xro,fs,_te,zro,Qro,KR,Wro,Hro,ZR,Uro,Jro,Yro,ms,bte,Kro,Zro,eB,eto,oto,oB,rto,tto,ato,gs,vte,nto,sto,rB,lto,ito,tB,dto,cto,fto,hs,Fte,mto,gto,aB,hto,pto,nB,uto,_to,bto,Pg,Tte,vto,Fto,sB,Tto,Mto,Eto,ps,Mte,Cto,wto,lB,Ato,yto,iB,Lto,xto,$to,Ig,Ete,kto,Sto,dB,Rto,Bto,Pto,qg,Cte,Ito,qto,cB,Nto,jto,Dto,Ng,wte,Gto,Oto,fB,Vto,Xto,zto,jg,Ate,Qto,Wto,mB,Hto,Uto,Jto,us,yte,Yto,Kto,gB,Zto,eao,hB,oao,rao,tao,Dg,Lte,aao,nao,pB,sao,lao,iao,_s,xte,dao,cao,uB,fao,mao,_B,gao,hao,pao,bs,$te,uao,_ao,bB,bao,vao,vB,Fao,Tao,Mao,vs,kte,Eao,Cao,FB,wao,Aao,TB,yao,Lao,xao,Fs,Ste,$ao,kao,MB,Sao,Rao,EB,Bao,Pao,Iao,Ts,Rte,qao,Nao,CB,jao,Dao,wB,Gao,Oao,Vao,Ms,Bte,Xao,zao,AB,Qao,Wao,yB,Hao,Uao,Jao,Gg,Pte,Yao,Kao,LB,Zao,eno,ono,Og,Ite,rno,tno,xB,ano,nno,sno,Es,qte,lno,ino,$B,dno,cno,kB,fno,mno,gno,Cs,Nte,hno,pno,SB,uno,_no,RB,bno,vno,Fno,ws,jte,Tno,Mno,BB,Eno,Cno,PB,wno,Ano,yno,Vg,Dte,Lno,xno,IB,$no,kno,Sno,Xg,Gte,Rno,Bno,qB,Pno,Ino,qno,zg,Ote,Nno,jno,NB,Dno,Gno,Ono,As,Vte,Vno,Xno,jB,zno,Qno,DB,Wno,Hno,Uno,Qg,Xte,Jno,Yno,GB,Kno,Zno,eso,Wg,zte,oso,rso,OB,tso,aso,nso,ys,Qte,sso,lso,VB,iso,dso,XB,cso,fso,mso,Hg,Wte,gso,hso,zB,pso,uso,_so,Ug,Hte,bso,vso,QB,Fso,Tso,Mso,Ls,Ute,Eso,Cso,WB,wso,Aso,HB,yso,Lso,xso,xs,Jte,$so,kso,UB,Sso,Rso,JB,Bso,Pso,Iso,$s,Yte,qso,Nso,YB,jso,Dso,KB,Gso,Oso,Vso,ks,Kte,Xso,zso,ZB,Qso,Wso,eP,Hso,Uso,Jso,Jg,Yso,Yg,g0,Kso,Zte,Zso,cIe,bi,Kg,eae,h0,elo,oae,olo,fIe,Ao,p0,rlo,u0,tlo,oP,alo,nlo,slo,_0,llo,rae,ilo,dlo,clo,Qe,b0,flo,tae,mlo,glo,wa,hlo,aae,plo,ulo,nae,_lo,blo,sae,vlo,Flo,Tlo,oe,Zg,lae,Mlo,Elo,rP,Clo,wlo,Alo,eh,iae,ylo,Llo,tP,xlo,$lo,klo,oh,dae,Slo,Rlo,aP,Blo,Plo,Ilo,rh,cae,qlo,Nlo,nP,jlo,Dlo,Glo,th,fae,Olo,Vlo,sP,Xlo,zlo,Qlo,ah,mae,Wlo,Hlo,lP,Ulo,Jlo,Ylo,nh,gae,Klo,Zlo,iP,eio,oio,rio,sh,hae,tio,aio,dP,nio,sio,lio,lh,pae,iio,dio,cP,cio,fio,mio,ih,uae,gio,hio,fP,pio,uio,_io,dh,_ae,bio,vio,mP,Fio,Tio,Mio,ch,bae,Eio,Cio,gP,wio,Aio,yio,fh,vae,Lio,xio,hP,$io,kio,Sio,mh,Fae,Rio,Bio,pP,Pio,Iio,qio,gh,Tae,Nio,jio,uP,Dio,Gio,Oio,hh,Mae,Vio,Xio,_P,zio,Qio,Wio,ph,Eae,Hio,Uio,bP,Jio,Yio,Kio,uh,Cae,Zio,edo,vP,odo,rdo,tdo,_h,wae,ado,ndo,FP,sdo,ldo,ido,bh,Aae,ddo,cdo,TP,fdo,mdo,gdo,vh,yae,hdo,pdo,MP,udo,_do,bdo,Fh,Lae,vdo,Fdo,EP,Tdo,Mdo,Edo,Th,xae,Cdo,wdo,CP,Ado,ydo,Ldo,Mh,$ae,xdo,$do,wP,kdo,Sdo,Rdo,Eh,kae,Bdo,Pdo,AP,Ido,qdo,Ndo,Ch,jdo,wh,Ddo,Ah,v0,Gdo,Sae,Odo,mIe,vi,yh,Rae,F0,Vdo,Bae,Xdo,gIe,yo,T0,zdo,M0,Qdo,yP,Wdo,Hdo,Udo,E0,Jdo,Pae,Ydo,Kdo,Zdo,We,C0,eco,Iae,oco,rco,Fi,tco,qae,aco,nco,Nae,sco,lco,ico,be,Lh,jae,dco,cco,LP,fco,mco,gco,xh,Dae,hco,pco,Gae,uco,_co,bco,$h,Oae,vco,Fco,xP,Tco,Mco,Eco,kh,Vae,Cco,wco,$P,Aco,yco,Lco,Sh,Xae,xco,$co,kP,kco,Sco,Rco,Rh,zae,Bco,Pco,SP,Ico,qco,Nco,Bh,Qae,jco,Dco,RP,Gco,Oco,Vco,Ph,Wae,Xco,zco,BP,Qco,Wco,Hco,Ih,Hae,Uco,Jco,PP,Yco,Kco,Zco,qh,Uae,efo,ofo,IP,rfo,tfo,afo,Nh,Jae,nfo,sfo,qP,lfo,ifo,dfo,jh,Yae,cfo,ffo,NP,mfo,gfo,hfo,Dh,Kae,pfo,ufo,jP,_fo,bfo,vfo,Gh,Zae,Ffo,Tfo,DP,Mfo,Efo,Cfo,Oh,ene,wfo,Afo,GP,yfo,Lfo,xfo,Vh,$fo,Xh,kfo,zh,w0,Sfo,one,Rfo,hIe,Ti,Qh,rne,A0,Bfo,tne,Pfo,pIe,Lo,y0,Ifo,Mi,qfo,OP,Nfo,jfo,VP,Dfo,Gfo,Ofo,L0,Vfo,ane,Xfo,zfo,Qfo,ot,x0,Wfo,nne,Hfo,Ufo,Ei,Jfo,sne,Yfo,Kfo,XP,Zfo,emo,omo,Wh,rmo,He,$0,tmo,lne,amo,nmo,Aa,smo,ine,lmo,imo,dne,dmo,cmo,cne,fmo,mmo,gmo,x,Hh,fne,hmo,pmo,zP,umo,_mo,bmo,Uh,mne,vmo,Fmo,QP,Tmo,Mmo,Emo,Jh,gne,Cmo,wmo,WP,Amo,ymo,Lmo,Yh,hne,xmo,$mo,HP,kmo,Smo,Rmo,Kh,pne,Bmo,Pmo,UP,Imo,qmo,Nmo,Zh,une,jmo,Dmo,JP,Gmo,Omo,Vmo,ep,_ne,Xmo,zmo,YP,Qmo,Wmo,Hmo,op,bne,Umo,Jmo,KP,Ymo,Kmo,Zmo,rp,vne,ego,ogo,ZP,rgo,tgo,ago,tp,Fne,ngo,sgo,eI,lgo,igo,dgo,ap,Tne,cgo,fgo,oI,mgo,ggo,hgo,np,Mne,pgo,ugo,rI,_go,bgo,vgo,sp,Ene,Fgo,Tgo,tI,Mgo,Ego,Cgo,lp,Cne,wgo,Ago,aI,ygo,Lgo,xgo,ip,wne,$go,kgo,nI,Sgo,Rgo,Bgo,dp,Ane,Pgo,Igo,sI,qgo,Ngo,jgo,cp,yne,Dgo,Ggo,lI,Ogo,Vgo,Xgo,fp,Lne,zgo,Qgo,iI,Wgo,Hgo,Ugo,mp,xne,Jgo,Ygo,dI,Kgo,Zgo,eho,gp,$ne,oho,rho,cI,tho,aho,nho,hp,kne,sho,lho,fI,iho,dho,cho,pp,Sne,fho,mho,mI,gho,hho,pho,up,Rne,uho,_ho,gI,bho,vho,Fho,_p,Bne,Tho,Mho,hI,Eho,Cho,who,bp,Pne,Aho,yho,pI,Lho,xho,$ho,vp,Ine,kho,Sho,uI,Rho,Bho,Pho,Fp,qne,Iho,qho,_I,Nho,jho,Dho,Tp,Nne,Gho,Oho,bI,Vho,Xho,zho,Mp,jne,Qho,Who,vI,Hho,Uho,Jho,Ep,Dne,Yho,Kho,FI,Zho,epo,opo,Cp,Gne,rpo,tpo,TI,apo,npo,spo,wp,One,lpo,ipo,MI,dpo,cpo,fpo,Ss,Vne,mpo,gpo,EI,hpo,ppo,CI,upo,_po,bpo,Ap,Xne,vpo,Fpo,wI,Tpo,Mpo,Epo,yp,zne,Cpo,wpo,AI,Apo,ypo,Lpo,Lp,Qne,xpo,$po,yI,kpo,Spo,Rpo,xp,Wne,Bpo,Ppo,LI,Ipo,qpo,Npo,$p,Hne,jpo,Dpo,xI,Gpo,Opo,Vpo,kp,Une,Xpo,zpo,$I,Qpo,Wpo,Hpo,Sp,Jne,Upo,Jpo,kI,Ypo,Kpo,Zpo,Rp,Yne,euo,ouo,SI,ruo,tuo,auo,Bp,Kne,nuo,suo,RI,luo,iuo,duo,Pp,Zne,cuo,fuo,BI,muo,guo,huo,Ip,ese,puo,uuo,PI,_uo,buo,vuo,qp,ose,Fuo,Tuo,II,Muo,Euo,Cuo,Np,rse,wuo,Auo,qI,yuo,Luo,xuo,jp,tse,$uo,kuo,NI,Suo,Ruo,Buo,Dp,ase,Puo,Iuo,jI,quo,Nuo,juo,Gp,nse,Duo,Guo,DI,Ouo,Vuo,Xuo,Op,sse,zuo,Quo,GI,Wuo,Huo,Uuo,Vp,lse,Juo,Yuo,OI,Kuo,Zuo,e_o,Xp,ise,o_o,r_o,VI,t_o,a_o,n_o,zp,dse,s_o,l_o,XI,i_o,d_o,c_o,Qp,cse,f_o,m_o,zI,g_o,h_o,p_o,Wp,fse,u_o,__o,QI,b_o,v_o,F_o,Hp,mse,T_o,M_o,WI,E_o,C_o,w_o,Up,gse,A_o,y_o,HI,L_o,x_o,$_o,Jp,hse,k_o,S_o,UI,R_o,B_o,P_o,Yp,pse,I_o,q_o,JI,N_o,j_o,D_o,Kp,use,G_o,O_o,YI,V_o,X_o,z_o,Zp,_se,Q_o,W_o,KI,H_o,U_o,J_o,eu,bse,Y_o,K_o,ZI,Z_o,e2o,o2o,ou,vse,r2o,t2o,eq,a2o,n2o,s2o,ru,Fse,l2o,i2o,oq,d2o,c2o,f2o,tu,Tse,m2o,g2o,rq,h2o,p2o,u2o,au,Mse,_2o,b2o,tq,v2o,F2o,T2o,nu,Ese,M2o,E2o,aq,C2o,w2o,A2o,su,Cse,y2o,L2o,nq,x2o,$2o,k2o,lu,wse,S2o,R2o,sq,B2o,P2o,I2o,iu,Ase,q2o,N2o,lq,j2o,D2o,G2o,du,yse,O2o,V2o,iq,X2o,z2o,Q2o,cu,Lse,W2o,H2o,dq,U2o,J2o,Y2o,fu,xse,K2o,Z2o,cq,e1o,o1o,r1o,mu,$se,t1o,a1o,fq,n1o,s1o,l1o,gu,kse,i1o,d1o,mq,c1o,f1o,m1o,hu,Sse,g1o,h1o,gq,p1o,u1o,_1o,pu,Rse,b1o,v1o,hq,F1o,T1o,M1o,uu,Bse,E1o,C1o,pq,w1o,A1o,y1o,_u,Pse,L1o,x1o,uq,$1o,k1o,S1o,bu,Ise,R1o,B1o,_q,P1o,I1o,q1o,vu,qse,N1o,j1o,bq,D1o,G1o,O1o,Fu,Nse,V1o,X1o,vq,z1o,Q1o,W1o,Tu,jse,H1o,U1o,Fq,J1o,Y1o,K1o,Mu,Dse,Z1o,ebo,Tq,obo,rbo,tbo,Eu,Gse,abo,nbo,Mq,sbo,lbo,ibo,Cu,Ose,dbo,cbo,Eq,fbo,mbo,gbo,wu,Vse,hbo,pbo,Cq,ubo,_bo,bbo,Au,Xse,vbo,Fbo,wq,Tbo,Mbo,Ebo,yu,zse,Cbo,wbo,Aq,Abo,ybo,Lbo,Lu,Qse,xbo,$bo,yq,kbo,Sbo,Rbo,xu,Wse,Bbo,Pbo,Lq,Ibo,qbo,Nbo,$u,Hse,jbo,Dbo,xq,Gbo,Obo,Vbo,ku,Use,Xbo,zbo,$q,Qbo,Wbo,Hbo,Su,Jse,Ubo,Jbo,kq,Ybo,Kbo,Zbo,Ru,Yse,e5o,o5o,Sq,r5o,t5o,a5o,Bu,Kse,n5o,s5o,Rq,l5o,i5o,d5o,Pu,Zse,c5o,f5o,Bq,m5o,g5o,h5o,Iu,ele,p5o,u5o,Pq,_5o,b5o,v5o,qu,F5o,ole,T5o,M5o,rle,E5o,C5o,Nu,uIe,Ci,ju,tle,k0,w5o,ale,A5o,_Ie,xo,S0,y5o,wi,L5o,Iq,x5o,$5o,qq,k5o,S5o,R5o,R0,B5o,nle,P5o,I5o,q5o,rt,B0,N5o,sle,j5o,D5o,Ai,G5o,lle,O5o,V5o,Nq,X5o,z5o,Q5o,Du,W5o,Ue,P0,H5o,ile,U5o,J5o,ya,Y5o,dle,K5o,Z5o,cle,e3o,o3o,fle,r3o,t3o,a3o,G,Gu,mle,n3o,s3o,jq,l3o,i3o,d3o,Ou,gle,c3o,f3o,Dq,m3o,g3o,h3o,Vu,hle,p3o,u3o,Gq,_3o,b3o,v3o,Xu,ple,F3o,T3o,Oq,M3o,E3o,C3o,zu,ule,w3o,A3o,Vq,y3o,L3o,x3o,Qu,_le,$3o,k3o,Xq,S3o,R3o,B3o,Wu,ble,P3o,I3o,zq,q3o,N3o,j3o,Hu,vle,D3o,G3o,Qq,O3o,V3o,X3o,Uu,Fle,z3o,Q3o,Wq,W3o,H3o,U3o,Ju,Tle,J3o,Y3o,Hq,K3o,Z3o,evo,Yu,Mle,ovo,rvo,Uq,tvo,avo,nvo,Ku,Ele,svo,lvo,Jq,ivo,dvo,cvo,Zu,Cle,fvo,mvo,Yq,gvo,hvo,pvo,e_,wle,uvo,_vo,Kq,bvo,vvo,Fvo,o_,Ale,Tvo,Mvo,Zq,Evo,Cvo,wvo,r_,yle,Avo,yvo,eN,Lvo,xvo,$vo,t_,Lle,kvo,Svo,oN,Rvo,Bvo,Pvo,a_,xle,Ivo,qvo,rN,Nvo,jvo,Dvo,n_,$le,Gvo,Ovo,tN,Vvo,Xvo,zvo,s_,kle,Qvo,Wvo,aN,Hvo,Uvo,Jvo,l_,Sle,Yvo,Kvo,nN,Zvo,eFo,oFo,i_,Rle,rFo,tFo,sN,aFo,nFo,sFo,d_,Ble,lFo,iFo,lN,dFo,cFo,fFo,c_,Ple,mFo,gFo,iN,hFo,pFo,uFo,f_,Ile,_Fo,bFo,dN,vFo,FFo,TFo,m_,qle,MFo,EFo,cN,CFo,wFo,AFo,g_,Nle,yFo,LFo,fN,xFo,$Fo,kFo,h_,jle,SFo,RFo,mN,BFo,PFo,IFo,p_,Dle,qFo,NFo,gN,jFo,DFo,GFo,u_,Gle,OFo,VFo,hN,XFo,zFo,QFo,__,Ole,WFo,HFo,pN,UFo,JFo,YFo,b_,Vle,KFo,ZFo,uN,eTo,oTo,rTo,v_,Xle,tTo,aTo,_N,nTo,sTo,lTo,F_,zle,iTo,dTo,bN,cTo,fTo,mTo,T_,Qle,gTo,hTo,vN,pTo,uTo,_To,M_,Wle,bTo,vTo,FN,FTo,TTo,MTo,E_,Hle,ETo,CTo,TN,wTo,ATo,yTo,C_,Ule,LTo,xTo,MN,$To,kTo,STo,w_,Jle,RTo,BTo,EN,PTo,ITo,qTo,A_,Yle,NTo,jTo,CN,DTo,GTo,OTo,y_,VTo,Kle,XTo,zTo,Zle,QTo,WTo,L_,bIe,yi,x_,eie,I0,HTo,oie,UTo,vIe,$o,q0,JTo,Li,YTo,wN,KTo,ZTo,AN,e7o,o7o,r7o,N0,t7o,rie,a7o,n7o,s7o,tt,j0,l7o,tie,i7o,d7o,xi,c7o,aie,f7o,m7o,yN,g7o,h7o,p7o,$_,u7o,Je,D0,_7o,nie,b7o,v7o,La,F7o,sie,T7o,M7o,lie,E7o,C7o,iie,w7o,A7o,y7o,z,k_,die,L7o,x7o,LN,$7o,k7o,S7o,S_,cie,R7o,B7o,xN,P7o,I7o,q7o,R_,fie,N7o,j7o,$N,D7o,G7o,O7o,B_,mie,V7o,X7o,kN,z7o,Q7o,W7o,P_,gie,H7o,U7o,SN,J7o,Y7o,K7o,I_,hie,Z7o,eMo,RN,oMo,rMo,tMo,q_,pie,aMo,nMo,BN,sMo,lMo,iMo,N_,uie,dMo,cMo,PN,fMo,mMo,gMo,j_,_ie,hMo,pMo,IN,uMo,_Mo,bMo,D_,bie,vMo,FMo,qN,TMo,MMo,EMo,G_,vie,CMo,wMo,NN,AMo,yMo,LMo,O_,Fie,xMo,$Mo,jN,kMo,SMo,RMo,V_,Tie,BMo,PMo,DN,IMo,qMo,NMo,X_,Mie,jMo,DMo,GN,GMo,OMo,VMo,z_,Eie,XMo,zMo,ON,QMo,WMo,HMo,Q_,Cie,UMo,JMo,VN,YMo,KMo,ZMo,W_,wie,e4o,o4o,XN,r4o,t4o,a4o,H_,Aie,n4o,s4o,zN,l4o,i4o,d4o,U_,yie,c4o,f4o,QN,m4o,g4o,h4o,J_,Lie,p4o,u4o,WN,_4o,b4o,v4o,Y_,xie,F4o,T4o,HN,M4o,E4o,C4o,K_,$ie,w4o,A4o,UN,y4o,L4o,x4o,Z_,kie,$4o,k4o,JN,S4o,R4o,B4o,e2,Sie,P4o,I4o,YN,q4o,N4o,j4o,o2,Rie,D4o,G4o,KN,O4o,V4o,X4o,r2,Bie,z4o,Q4o,ZN,W4o,H4o,U4o,t2,Pie,J4o,Y4o,ej,K4o,Z4o,eEo,a2,Iie,oEo,rEo,oj,tEo,aEo,nEo,n2,qie,sEo,lEo,rj,iEo,dEo,cEo,s2,Nie,fEo,mEo,tj,gEo,hEo,pEo,l2,jie,uEo,_Eo,aj,bEo,vEo,FEo,i2,Die,TEo,MEo,nj,EEo,CEo,wEo,d2,Gie,AEo,yEo,sj,LEo,xEo,$Eo,c2,Oie,kEo,SEo,lj,REo,BEo,PEo,f2,Vie,IEo,qEo,ij,NEo,jEo,DEo,m2,Xie,GEo,OEo,dj,VEo,XEo,zEo,g2,QEo,zie,WEo,HEo,Qie,UEo,JEo,h2,FIe,$i,p2,Wie,G0,YEo,Hie,KEo,TIe,ko,O0,ZEo,ki,eCo,cj,oCo,rCo,fj,tCo,aCo,nCo,V0,sCo,Uie,lCo,iCo,dCo,at,X0,cCo,Jie,fCo,mCo,Si,gCo,Yie,hCo,pCo,mj,uCo,_Co,bCo,u2,vCo,Ye,z0,FCo,Kie,TCo,MCo,xa,ECo,Zie,CCo,wCo,ede,ACo,yCo,ode,LCo,xCo,$Co,Q,_2,rde,kCo,SCo,gj,RCo,BCo,PCo,b2,tde,ICo,qCo,hj,NCo,jCo,DCo,v2,ade,GCo,OCo,pj,VCo,XCo,zCo,F2,nde,QCo,WCo,uj,HCo,UCo,JCo,T2,sde,YCo,KCo,_j,ZCo,ewo,owo,M2,lde,rwo,two,bj,awo,nwo,swo,E2,ide,lwo,iwo,vj,dwo,cwo,fwo,C2,dde,mwo,gwo,Fj,hwo,pwo,uwo,w2,cde,_wo,bwo,Tj,vwo,Fwo,Two,A2,fde,Mwo,Ewo,Mj,Cwo,wwo,Awo,y2,mde,ywo,Lwo,Ej,xwo,$wo,kwo,L2,gde,Swo,Rwo,Cj,Bwo,Pwo,Iwo,x2,hde,qwo,Nwo,wj,jwo,Dwo,Gwo,$2,pde,Owo,Vwo,Aj,Xwo,zwo,Qwo,k2,ude,Wwo,Hwo,yj,Uwo,Jwo,Ywo,S2,_de,Kwo,Zwo,Lj,eAo,oAo,rAo,R2,bde,tAo,aAo,xj,nAo,sAo,lAo,B2,vde,iAo,dAo,$j,cAo,fAo,mAo,P2,Fde,gAo,hAo,kj,pAo,uAo,_Ao,I2,Tde,bAo,vAo,Sj,FAo,TAo,MAo,q2,Mde,EAo,CAo,Rj,wAo,AAo,yAo,N2,Ede,LAo,xAo,Bj,$Ao,kAo,SAo,j2,Cde,RAo,BAo,Pj,PAo,IAo,qAo,D2,wde,NAo,jAo,Ij,DAo,GAo,OAo,G2,Ade,VAo,XAo,qj,zAo,QAo,WAo,O2,yde,HAo,UAo,Nj,JAo,YAo,KAo,V2,Lde,ZAo,e6o,jj,o6o,r6o,t6o,X2,xde,a6o,n6o,Dj,s6o,l6o,i6o,z2,$de,d6o,c6o,Gj,f6o,m6o,g6o,Q2,kde,h6o,p6o,Oj,u6o,_6o,b6o,W2,Sde,v6o,F6o,Rde,T6o,M6o,E6o,H2,Bde,C6o,w6o,Vj,A6o,y6o,L6o,U2,Pde,x6o,$6o,Xj,k6o,S6o,R6o,J2,Ide,B6o,P6o,zj,I6o,q6o,N6o,Y2,qde,j6o,D6o,Qj,G6o,O6o,V6o,K2,X6o,Nde,z6o,Q6o,jde,W6o,H6o,Z2,MIe,Ri,e1,Dde,Q0,U6o,Gde,J6o,EIe,So,W0,Y6o,Bi,K6o,Wj,Z6o,e0o,Hj,o0o,r0o,t0o,H0,a0o,Ode,n0o,s0o,l0o,nt,U0,i0o,Vde,d0o,c0o,Pi,f0o,Xde,m0o,g0o,Uj,h0o,p0o,u0o,o1,_0o,Ke,J0,b0o,zde,v0o,F0o,$a,T0o,Qde,M0o,E0o,Wde,C0o,w0o,Hde,A0o,y0o,L0o,he,r1,Ude,x0o,$0o,Jj,k0o,S0o,R0o,t1,Jde,B0o,P0o,Yj,I0o,q0o,N0o,a1,Yde,j0o,D0o,Kj,G0o,O0o,V0o,n1,Kde,X0o,z0o,Zj,Q0o,W0o,H0o,s1,Zde,U0o,J0o,eD,Y0o,K0o,Z0o,l1,ece,eyo,oyo,oD,ryo,tyo,ayo,i1,oce,nyo,syo,rD,lyo,iyo,dyo,d1,rce,cyo,fyo,tD,myo,gyo,hyo,c1,tce,pyo,uyo,aD,_yo,byo,vyo,f1,ace,Fyo,Tyo,nD,Myo,Eyo,Cyo,m1,nce,wyo,Ayo,sD,yyo,Lyo,xyo,g1,sce,$yo,kyo,lD,Syo,Ryo,Byo,h1,lce,Pyo,Iyo,iD,qyo,Nyo,jyo,p1,ice,Dyo,Gyo,dD,Oyo,Vyo,Xyo,u1,dce,zyo,Qyo,cD,Wyo,Hyo,Uyo,_1,cce,Jyo,Yyo,fD,Kyo,Zyo,eLo,b1,fce,oLo,rLo,mD,tLo,aLo,nLo,v1,sLo,mce,lLo,iLo,gce,dLo,cLo,F1,CIe,Ii,T1,hce,Y0,fLo,pce,mLo,wIe,Ro,K0,gLo,qi,hLo,gD,pLo,uLo,hD,_Lo,bLo,vLo,Z0,FLo,uce,TLo,MLo,ELo,st,ey,CLo,_ce,wLo,ALo,Ni,yLo,bce,LLo,xLo,pD,$Lo,kLo,SLo,M1,RLo,Ze,oy,BLo,vce,PLo,ILo,ka,qLo,Fce,NLo,jLo,Tce,DLo,GLo,Mce,OLo,VLo,XLo,q,E1,Ece,zLo,QLo,uD,WLo,HLo,ULo,C1,Cce,JLo,YLo,_D,KLo,ZLo,e8o,w1,wce,o8o,r8o,bD,t8o,a8o,n8o,A1,Ace,s8o,l8o,vD,i8o,d8o,c8o,y1,yce,f8o,m8o,FD,g8o,h8o,p8o,L1,Lce,u8o,_8o,TD,b8o,v8o,F8o,x1,xce,T8o,M8o,MD,E8o,C8o,w8o,$1,$ce,A8o,y8o,ED,L8o,x8o,$8o,k1,kce,k8o,S8o,CD,R8o,B8o,P8o,S1,Sce,I8o,q8o,wD,N8o,j8o,D8o,R1,Rce,G8o,O8o,AD,V8o,X8o,z8o,B1,Bce,Q8o,W8o,yD,H8o,U8o,J8o,P1,Pce,Y8o,K8o,LD,Z8o,exo,oxo,I1,Ice,rxo,txo,xD,axo,nxo,sxo,q1,qce,lxo,ixo,$D,dxo,cxo,fxo,N1,Nce,mxo,gxo,kD,hxo,pxo,uxo,j1,jce,_xo,bxo,SD,vxo,Fxo,Txo,D1,Dce,Mxo,Exo,RD,Cxo,wxo,Axo,G1,Gce,yxo,Lxo,BD,xxo,$xo,kxo,O1,Oce,Sxo,Rxo,PD,Bxo,Pxo,Ixo,V1,Vce,qxo,Nxo,ID,jxo,Dxo,Gxo,X1,Xce,Oxo,Vxo,qD,Xxo,zxo,Qxo,z1,zce,Wxo,Hxo,ND,Uxo,Jxo,Yxo,Q1,Qce,Kxo,Zxo,jD,e9o,o9o,r9o,W1,Wce,t9o,a9o,DD,n9o,s9o,l9o,H1,Hce,i9o,d9o,GD,c9o,f9o,m9o,U1,Uce,g9o,h9o,OD,p9o,u9o,_9o,J1,Jce,b9o,v9o,VD,F9o,T9o,M9o,Y1,Yce,E9o,C9o,XD,w9o,A9o,y9o,K1,Kce,L9o,x9o,zD,$9o,k9o,S9o,Z1,Zce,R9o,B9o,QD,P9o,I9o,q9o,eb,efe,N9o,j9o,WD,D9o,G9o,O9o,ob,ofe,V9o,X9o,HD,z9o,Q9o,W9o,rb,rfe,H9o,U9o,UD,J9o,Y9o,K9o,tb,tfe,Z9o,e$o,JD,o$o,r$o,t$o,ab,afe,a$o,n$o,YD,s$o,l$o,i$o,nb,nfe,d$o,c$o,KD,f$o,m$o,g$o,sb,sfe,h$o,p$o,ZD,u$o,_$o,b$o,lb,lfe,v$o,F$o,eG,T$o,M$o,E$o,ib,ife,C$o,w$o,oG,A$o,y$o,L$o,db,dfe,x$o,$$o,rG,k$o,S$o,R$o,cb,cfe,B$o,P$o,tG,I$o,q$o,N$o,fb,ffe,j$o,D$o,aG,G$o,O$o,V$o,mb,mfe,X$o,z$o,nG,Q$o,W$o,H$o,gb,gfe,U$o,J$o,sG,Y$o,K$o,Z$o,hb,hfe,eko,oko,lG,rko,tko,ako,pb,pfe,nko,sko,iG,lko,iko,dko,ub,cko,ufe,fko,mko,_fe,gko,hko,_b,AIe,ji,bb,bfe,ry,pko,vfe,uko,yIe,Bo,ty,_ko,Di,bko,dG,vko,Fko,cG,Tko,Mko,Eko,ay,Cko,Ffe,wko,Ako,yko,lt,ny,Lko,Tfe,xko,$ko,Gi,kko,Mfe,Sko,Rko,fG,Bko,Pko,Iko,vb,qko,eo,sy,Nko,Efe,jko,Dko,Sa,Gko,Cfe,Oko,Vko,wfe,Xko,zko,Afe,Qko,Wko,Hko,Y,Fb,yfe,Uko,Jko,mG,Yko,Kko,Zko,Tb,Lfe,eSo,oSo,gG,rSo,tSo,aSo,Mb,xfe,nSo,sSo,hG,lSo,iSo,dSo,Eb,$fe,cSo,fSo,pG,mSo,gSo,hSo,Cb,kfe,pSo,uSo,uG,_So,bSo,vSo,wb,Sfe,FSo,TSo,_G,MSo,ESo,CSo,Ab,Rfe,wSo,ASo,bG,ySo,LSo,xSo,yb,Bfe,$So,kSo,vG,SSo,RSo,BSo,Lb,Pfe,PSo,ISo,FG,qSo,NSo,jSo,xb,Ife,DSo,GSo,TG,OSo,VSo,XSo,$b,qfe,zSo,QSo,MG,WSo,HSo,USo,kb,Nfe,JSo,YSo,EG,KSo,ZSo,eRo,Sb,jfe,oRo,rRo,CG,tRo,aRo,nRo,Rb,Dfe,sRo,lRo,wG,iRo,dRo,cRo,Bb,Gfe,fRo,mRo,AG,gRo,hRo,pRo,Pb,Ofe,uRo,_Ro,yG,bRo,vRo,FRo,Ib,Vfe,TRo,MRo,LG,ERo,CRo,wRo,qb,Xfe,ARo,yRo,xG,LRo,xRo,$Ro,Nb,zfe,kRo,SRo,$G,RRo,BRo,PRo,jb,Qfe,IRo,qRo,kG,NRo,jRo,DRo,Db,Wfe,GRo,ORo,SG,VRo,XRo,zRo,Gb,Hfe,QRo,WRo,RG,HRo,URo,JRo,Ob,Ufe,YRo,KRo,BG,ZRo,eBo,oBo,Vb,Jfe,rBo,tBo,PG,aBo,nBo,sBo,Xb,Yfe,lBo,iBo,IG,dBo,cBo,fBo,zb,Kfe,mBo,gBo,qG,hBo,pBo,uBo,Qb,Zfe,_Bo,bBo,NG,vBo,FBo,TBo,Wb,eme,MBo,EBo,jG,CBo,wBo,ABo,Hb,ome,yBo,LBo,DG,xBo,$Bo,kBo,Ub,SBo,rme,RBo,BBo,tme,PBo,IBo,Jb,LIe,Oi,Yb,ame,ly,qBo,nme,NBo,xIe,Po,iy,jBo,Vi,DBo,GG,GBo,OBo,OG,VBo,XBo,zBo,dy,QBo,sme,WBo,HBo,UBo,it,cy,JBo,lme,YBo,KBo,Xi,ZBo,ime,ePo,oPo,VG,rPo,tPo,aPo,Kb,nPo,oo,fy,sPo,dme,lPo,iPo,Ra,dPo,cme,cPo,fPo,fme,mPo,gPo,mme,hPo,pPo,uPo,Yr,Zb,gme,_Po,bPo,XG,vPo,FPo,TPo,e5,hme,MPo,EPo,zG,CPo,wPo,APo,o5,pme,yPo,LPo,QG,xPo,$Po,kPo,r5,ume,SPo,RPo,WG,BPo,PPo,IPo,t5,_me,qPo,NPo,HG,jPo,DPo,GPo,a5,OPo,bme,VPo,XPo,vme,zPo,QPo,n5,$Ie,zi,s5,Fme,my,WPo,Tme,HPo,kIe,Io,gy,UPo,Qi,JPo,UG,YPo,KPo,JG,ZPo,eIo,oIo,hy,rIo,Mme,tIo,aIo,nIo,dt,py,sIo,Eme,lIo,iIo,Wi,dIo,Cme,cIo,fIo,YG,mIo,gIo,hIo,l5,pIo,ro,uy,uIo,wme,_Io,bIo,Ba,vIo,Ame,FIo,TIo,yme,MIo,EIo,Lme,CIo,wIo,AIo,U,i5,xme,yIo,LIo,KG,xIo,$Io,kIo,d5,$me,SIo,RIo,ZG,BIo,PIo,IIo,c5,kme,qIo,NIo,eO,jIo,DIo,GIo,f5,Sme,OIo,VIo,oO,XIo,zIo,QIo,m5,Rme,WIo,HIo,rO,UIo,JIo,YIo,g5,Bme,KIo,ZIo,tO,eqo,oqo,rqo,h5,Pme,tqo,aqo,aO,nqo,sqo,lqo,p5,Ime,iqo,dqo,nO,cqo,fqo,mqo,u5,qme,gqo,hqo,sO,pqo,uqo,_qo,_5,Nme,bqo,vqo,lO,Fqo,Tqo,Mqo,b5,jme,Eqo,Cqo,iO,wqo,Aqo,yqo,v5,Dme,Lqo,xqo,dO,$qo,kqo,Sqo,F5,Gme,Rqo,Bqo,cO,Pqo,Iqo,qqo,T5,Ome,Nqo,jqo,fO,Dqo,Gqo,Oqo,M5,Vme,Vqo,Xqo,mO,zqo,Qqo,Wqo,E5,Xme,Hqo,Uqo,gO,Jqo,Yqo,Kqo,C5,zme,Zqo,eNo,hO,oNo,rNo,tNo,w5,Qme,aNo,nNo,pO,sNo,lNo,iNo,A5,Wme,dNo,cNo,uO,fNo,mNo,gNo,y5,Hme,hNo,pNo,_O,uNo,_No,bNo,L5,Ume,vNo,FNo,bO,TNo,MNo,ENo,x5,Jme,CNo,wNo,vO,ANo,yNo,LNo,$5,Yme,xNo,$No,FO,kNo,SNo,RNo,k5,Kme,BNo,PNo,TO,INo,qNo,NNo,S5,Zme,jNo,DNo,MO,GNo,ONo,VNo,R5,ege,XNo,zNo,EO,QNo,WNo,HNo,B5,oge,UNo,JNo,CO,YNo,KNo,ZNo,P5,rge,ejo,ojo,wO,rjo,tjo,ajo,I5,tge,njo,sjo,AO,ljo,ijo,djo,q5,age,cjo,fjo,yO,mjo,gjo,hjo,N5,nge,pjo,ujo,LO,_jo,bjo,vjo,j5,sge,Fjo,Tjo,xO,Mjo,Ejo,Cjo,D5,lge,wjo,Ajo,$O,yjo,Ljo,xjo,G5,$jo,ige,kjo,Sjo,dge,Rjo,Bjo,O5,SIe,Hi,V5,cge,_y,Pjo,fge,Ijo,RIe,qo,by,qjo,Ui,Njo,kO,jjo,Djo,SO,Gjo,Ojo,Vjo,vy,Xjo,mge,zjo,Qjo,Wjo,ct,Fy,Hjo,gge,Ujo,Jjo,Ji,Yjo,hge,Kjo,Zjo,RO,eDo,oDo,rDo,X5,tDo,to,Ty,aDo,pge,nDo,sDo,Pa,lDo,uge,iDo,dDo,_ge,cDo,fDo,bge,mDo,gDo,hDo,O,z5,vge,pDo,uDo,BO,_Do,bDo,vDo,Q5,Fge,FDo,TDo,PO,MDo,EDo,CDo,W5,Tge,wDo,ADo,IO,yDo,LDo,xDo,H5,Mge,$Do,kDo,qO,SDo,RDo,BDo,U5,Ege,PDo,IDo,NO,qDo,NDo,jDo,J5,Cge,DDo,GDo,jO,ODo,VDo,XDo,Y5,wge,zDo,QDo,DO,WDo,HDo,UDo,K5,Age,JDo,YDo,GO,KDo,ZDo,eGo,Z5,yge,oGo,rGo,OO,tGo,aGo,nGo,e3,Lge,sGo,lGo,VO,iGo,dGo,cGo,o3,xge,fGo,mGo,XO,gGo,hGo,pGo,r3,$ge,uGo,_Go,zO,bGo,vGo,FGo,t3,kge,TGo,MGo,QO,EGo,CGo,wGo,a3,Sge,AGo,yGo,WO,LGo,xGo,$Go,n3,Rge,kGo,SGo,HO,RGo,BGo,PGo,s3,Bge,IGo,qGo,UO,NGo,jGo,DGo,l3,Pge,GGo,OGo,JO,VGo,XGo,zGo,i3,Ige,QGo,WGo,YO,HGo,UGo,JGo,d3,qge,YGo,KGo,KO,ZGo,eOo,oOo,c3,Nge,rOo,tOo,ZO,aOo,nOo,sOo,f3,jge,lOo,iOo,eV,dOo,cOo,fOo,m3,Dge,mOo,gOo,oV,hOo,pOo,uOo,g3,Gge,_Oo,bOo,rV,vOo,FOo,TOo,h3,Oge,MOo,EOo,tV,COo,wOo,AOo,p3,Vge,yOo,LOo,aV,xOo,$Oo,kOo,u3,Xge,SOo,ROo,nV,BOo,POo,IOo,_3,zge,qOo,NOo,sV,jOo,DOo,GOo,b3,Qge,OOo,VOo,lV,XOo,zOo,QOo,v3,Wge,WOo,HOo,iV,UOo,JOo,YOo,F3,Hge,KOo,ZOo,dV,eVo,oVo,rVo,T3,Uge,tVo,aVo,cV,nVo,sVo,lVo,M3,Jge,iVo,dVo,fV,cVo,fVo,mVo,E3,Yge,gVo,hVo,mV,pVo,uVo,_Vo,C3,Kge,bVo,vVo,gV,FVo,TVo,MVo,w3,Zge,EVo,CVo,hV,wVo,AVo,yVo,A3,ehe,LVo,xVo,pV,$Vo,kVo,SVo,y3,ohe,RVo,BVo,uV,PVo,IVo,qVo,L3,rhe,NVo,jVo,_V,DVo,GVo,OVo,x3,the,VVo,XVo,bV,zVo,QVo,WVo,$3,HVo,ahe,UVo,JVo,nhe,YVo,KVo,k3,BIe,Yi,S3,she,My,ZVo,lhe,eXo,PIe,No,Ey,oXo,Ki,rXo,vV,tXo,aXo,FV,nXo,sXo,lXo,Cy,iXo,ihe,dXo,cXo,fXo,ft,wy,mXo,dhe,gXo,hXo,Zi,pXo,che,uXo,_Xo,TV,bXo,vXo,FXo,R3,TXo,ao,Ay,MXo,fhe,EXo,CXo,Ia,wXo,mhe,AXo,yXo,ghe,LXo,xXo,hhe,$Xo,kXo,SXo,phe,B3,uhe,RXo,BXo,MV,PXo,IXo,qXo,P3,NXo,_he,jXo,DXo,bhe,GXo,OXo,I3,IIe,ed,q3,vhe,yy,VXo,Fhe,XXo,qIe,jo,Ly,zXo,od,QXo,EV,WXo,HXo,CV,UXo,JXo,YXo,xy,KXo,The,ZXo,ezo,ozo,mt,$y,rzo,Mhe,tzo,azo,rd,nzo,Ehe,szo,lzo,wV,izo,dzo,czo,N3,fzo,no,ky,mzo,Che,gzo,hzo,qa,pzo,whe,uzo,_zo,Ahe,bzo,vzo,yhe,Fzo,Tzo,Mzo,ve,j3,Lhe,Ezo,Czo,AV,wzo,Azo,yzo,D3,xhe,Lzo,xzo,yV,$zo,kzo,Szo,G3,$he,Rzo,Bzo,LV,Pzo,Izo,qzo,O3,khe,Nzo,jzo,xV,Dzo,Gzo,Ozo,Rs,She,Vzo,Xzo,$V,zzo,Qzo,kV,Wzo,Hzo,Uzo,V3,Rhe,Jzo,Yzo,SV,Kzo,Zzo,eQo,gt,Bhe,oQo,rQo,RV,tQo,aQo,BV,nQo,sQo,PV,lQo,iQo,dQo,X3,Phe,cQo,fQo,IV,mQo,gQo,hQo,z3,Ihe,pQo,uQo,qV,_Qo,bQo,vQo,Q3,qhe,FQo,TQo,NV,MQo,EQo,CQo,W3,Nhe,wQo,AQo,jV,yQo,LQo,xQo,H3,jhe,$Qo,kQo,DV,SQo,RQo,BQo,U3,Dhe,PQo,IQo,GV,qQo,NQo,jQo,J3,Ghe,DQo,GQo,OV,OQo,VQo,XQo,Y3,zQo,Ohe,QQo,WQo,Vhe,HQo,UQo,K3,NIe,td,Z3,Xhe,Sy,JQo,zhe,YQo,jIe,Do,Ry,KQo,ad,ZQo,VV,eWo,oWo,XV,rWo,tWo,aWo,By,nWo,Qhe,sWo,lWo,iWo,ht,Py,dWo,Whe,cWo,fWo,nd,mWo,Hhe,gWo,hWo,zV,pWo,uWo,_Wo,ev,bWo,so,Iy,vWo,Uhe,FWo,TWo,Na,MWo,Jhe,EWo,CWo,Yhe,wWo,AWo,Khe,yWo,LWo,xWo,Zhe,ov,epe,$Wo,kWo,QV,SWo,RWo,BWo,rv,PWo,ope,IWo,qWo,rpe,NWo,jWo,tv,DIe,sd,av,tpe,qy,DWo,ape,GWo,GIe,Go,Ny,OWo,ld,VWo,WV,XWo,zWo,HV,QWo,WWo,HWo,jy,UWo,npe,JWo,YWo,KWo,pt,Dy,ZWo,spe,eHo,oHo,id,rHo,lpe,tHo,aHo,UV,nHo,sHo,lHo,nv,iHo,lo,Gy,dHo,ipe,cHo,fHo,ja,mHo,dpe,gHo,hHo,cpe,pHo,uHo,fpe,_Ho,bHo,vHo,Ne,sv,mpe,FHo,THo,JV,MHo,EHo,CHo,lv,gpe,wHo,AHo,YV,yHo,LHo,xHo,iv,hpe,$Ho,kHo,KV,SHo,RHo,BHo,dv,ppe,PHo,IHo,ZV,qHo,NHo,jHo,cv,upe,DHo,GHo,eX,OHo,VHo,XHo,fv,_pe,zHo,QHo,oX,WHo,HHo,UHo,mv,bpe,JHo,YHo,rX,KHo,ZHo,eUo,gv,vpe,oUo,rUo,tX,tUo,aUo,nUo,hv,sUo,Fpe,lUo,iUo,Tpe,dUo,cUo,pv,OIe,dd,uv,Mpe,Oy,fUo,Epe,mUo,VIe,Oo,Vy,gUo,cd,hUo,aX,pUo,uUo,nX,_Uo,bUo,vUo,Xy,FUo,Cpe,TUo,MUo,EUo,ut,zy,CUo,wpe,wUo,AUo,fd,yUo,Ape,LUo,xUo,sX,$Uo,kUo,SUo,_v,RUo,io,Qy,BUo,ype,PUo,IUo,Da,qUo,Lpe,NUo,jUo,xpe,DUo,GUo,$pe,OUo,VUo,XUo,Ga,bv,kpe,zUo,QUo,lX,WUo,HUo,UUo,vv,Spe,JUo,YUo,iX,KUo,ZUo,eJo,Fv,Rpe,oJo,rJo,dX,tJo,aJo,nJo,Tv,Bpe,sJo,lJo,cX,iJo,dJo,cJo,Mv,fJo,Ppe,mJo,gJo,Ipe,hJo,pJo,Ev,XIe,md,Cv,qpe,Wy,uJo,Npe,_Jo,zIe,Vo,Hy,bJo,gd,vJo,fX,FJo,TJo,mX,MJo,EJo,CJo,Uy,wJo,jpe,AJo,yJo,LJo,_t,Jy,xJo,Dpe,$Jo,kJo,hd,SJo,Gpe,RJo,BJo,gX,PJo,IJo,qJo,wv,NJo,co,Yy,jJo,Ope,DJo,GJo,Oa,OJo,Vpe,VJo,XJo,Xpe,zJo,QJo,zpe,WJo,HJo,UJo,je,Av,Qpe,JJo,YJo,hX,KJo,ZJo,eYo,yv,Wpe,oYo,rYo,pX,tYo,aYo,nYo,Lv,Hpe,sYo,lYo,uX,iYo,dYo,cYo,xv,Upe,fYo,mYo,_X,gYo,hYo,pYo,$v,Jpe,uYo,_Yo,bX,bYo,vYo,FYo,kv,Ype,TYo,MYo,vX,EYo,CYo,wYo,Sv,Kpe,AYo,yYo,FX,LYo,xYo,$Yo,Rv,Zpe,kYo,SYo,TX,RYo,BYo,PYo,Bv,IYo,eue,qYo,NYo,oue,jYo,DYo,Pv,QIe,pd,Iv,rue,Ky,GYo,tue,OYo,WIe,Xo,Zy,VYo,ud,XYo,MX,zYo,QYo,EX,WYo,HYo,UYo,eL,JYo,aue,YYo,KYo,ZYo,bt,oL,eKo,nue,oKo,rKo,_d,tKo,sue,aKo,nKo,CX,sKo,lKo,iKo,qv,dKo,fo,rL,cKo,lue,fKo,mKo,Va,gKo,iue,hKo,pKo,due,uKo,_Ko,cue,bKo,vKo,FKo,tL,Nv,fue,TKo,MKo,wX,EKo,CKo,wKo,jv,mue,AKo,yKo,AX,LKo,xKo,$Ko,Dv,kKo,gue,SKo,RKo,hue,BKo,PKo,Gv,HIe,bd,Ov,pue,aL,IKo,uue,qKo,UIe,zo,nL,NKo,vd,jKo,yX,DKo,GKo,LX,OKo,VKo,XKo,sL,zKo,_ue,QKo,WKo,HKo,vt,lL,UKo,bue,JKo,YKo,Fd,KKo,vue,ZKo,eZo,xX,oZo,rZo,tZo,Vv,aZo,mo,iL,nZo,Fue,sZo,lZo,Xa,iZo,Tue,dZo,cZo,Mue,fZo,mZo,Eue,gZo,hZo,pZo,za,Xv,Cue,uZo,_Zo,$X,bZo,vZo,FZo,zv,wue,TZo,MZo,kX,EZo,CZo,wZo,Qv,Aue,AZo,yZo,SX,LZo,xZo,$Zo,Wv,yue,kZo,SZo,RX,RZo,BZo,PZo,Hv,IZo,Lue,qZo,NZo,xue,jZo,DZo,Uv,JIe,Td,Jv,$ue,dL,GZo,kue,OZo,YIe,Qo,cL,VZo,Md,XZo,BX,zZo,QZo,PX,WZo,HZo,UZo,fL,JZo,Sue,YZo,KZo,ZZo,Ft,mL,eer,Rue,oer,rer,Ed,ter,Bue,aer,ner,IX,ser,ler,ier,Yv,der,go,gL,cer,Pue,fer,mer,Qa,ger,Iue,her,per,que,uer,_er,Nue,ber,ver,Fer,Cd,Kv,jue,Ter,Mer,qX,Eer,Cer,wer,Zv,Due,Aer,yer,NX,Ler,xer,$er,eF,Gue,ker,Ser,jX,Rer,Ber,Per,oF,Ier,Oue,qer,Ner,Vue,jer,Der,rF,KIe,wd,tF,Xue,hL,Ger,zue,Oer,ZIe,Wo,pL,Ver,Ad,Xer,DX,zer,Qer,GX,Wer,Her,Uer,uL,Jer,Que,Yer,Ker,Zer,Tt,_L,eor,Wue,oor,ror,yd,tor,Hue,aor,nor,OX,sor,lor,ior,aF,dor,ho,bL,cor,Uue,mor,gor,Wa,hor,Jue,por,uor,Yue,_or,bor,Kue,vor,For,Tor,vL,nF,Zue,Mor,Eor,VX,Cor,wor,Aor,sF,e_e,yor,Lor,XX,xor,$or,kor,lF,Sor,o_e,Ror,Bor,r_e,Por,Ior,iF,eqe,Ld,dF,t_e,FL,qor,a_e,Nor,oqe,Ho,TL,jor,xd,Dor,zX,Gor,Oor,QX,Vor,Xor,zor,ML,Qor,n_e,Wor,Hor,Uor,Mt,EL,Jor,s_e,Yor,Kor,$d,Zor,l_e,err,orr,WX,rrr,trr,arr,cF,nrr,po,CL,srr,i_e,lrr,irr,Ha,drr,d_e,crr,frr,c_e,mrr,grr,f_e,hrr,prr,urr,m_e,fF,g_e,_rr,brr,HX,vrr,Frr,Trr,mF,Mrr,h_e,Err,Crr,p_e,wrr,Arr,gF,rqe,kd,hF,u_e,wL,yrr,__e,Lrr,tqe,Uo,AL,xrr,Sd,$rr,UX,krr,Srr,JX,Rrr,Brr,Prr,yL,Irr,b_e,qrr,Nrr,jrr,Et,LL,Drr,v_e,Grr,Orr,Rd,Vrr,F_e,Xrr,zrr,YX,Qrr,Wrr,Hrr,pF,Urr,uo,xL,Jrr,T_e,Yrr,Krr,Ua,Zrr,M_e,etr,otr,E_e,rtr,ttr,C_e,atr,ntr,str,Ja,uF,w_e,ltr,itr,KX,dtr,ctr,ftr,_F,A_e,mtr,gtr,ZX,htr,ptr,utr,bF,y_e,_tr,btr,ez,vtr,Ftr,Ttr,vF,L_e,Mtr,Etr,oz,Ctr,wtr,Atr,FF,ytr,x_e,Ltr,xtr,$_e,$tr,ktr,TF,aqe,Bd,MF,k_e,$L,Str,S_e,Rtr,nqe,Jo,kL,Btr,Pd,Ptr,rz,Itr,qtr,tz,Ntr,jtr,Dtr,SL,Gtr,R_e,Otr,Vtr,Xtr,Ct,RL,ztr,B_e,Qtr,Wtr,Id,Htr,P_e,Utr,Jtr,az,Ytr,Ktr,Ztr,EF,ear,_o,BL,oar,I_e,rar,tar,Ya,aar,q_e,nar,sar,N_e,lar,iar,j_e,dar,car,far,D_e,CF,G_e,mar,gar,nz,har,par,uar,wF,_ar,O_e,bar,Far,V_e,Tar,Mar,AF,sqe,qd,yF,X_e,PL,Ear,z_e,Car,lqe,Yo,IL,war,Nd,Aar,sz,yar,Lar,lz,xar,$ar,kar,qL,Sar,Q_e,Rar,Bar,Par,wt,NL,Iar,W_e,qar,Nar,jd,jar,H_e,Dar,Gar,iz,Oar,Var,Xar,LF,zar,wr,jL,Qar,U_e,War,Har,Ka,Uar,J_e,Jar,Yar,Y_e,Kar,Zar,K_e,enr,onr,rnr,j,xF,Z_e,tnr,anr,dz,nnr,snr,lnr,$F,e2e,inr,dnr,cz,cnr,fnr,mnr,kF,o2e,gnr,hnr,fz,pnr,unr,_nr,SF,r2e,bnr,vnr,mz,Fnr,Tnr,Mnr,RF,t2e,Enr,Cnr,gz,wnr,Anr,ynr,BF,a2e,Lnr,xnr,hz,$nr,knr,Snr,PF,n2e,Rnr,Bnr,pz,Pnr,Inr,qnr,IF,s2e,Nnr,jnr,uz,Dnr,Gnr,Onr,qF,l2e,Vnr,Xnr,_z,znr,Qnr,Wnr,NF,i2e,Hnr,Unr,bz,Jnr,Ynr,Knr,jF,d2e,Znr,esr,vz,osr,rsr,tsr,DF,c2e,asr,nsr,Fz,ssr,lsr,isr,GF,f2e,dsr,csr,Tz,fsr,msr,gsr,OF,m2e,hsr,psr,Mz,usr,_sr,bsr,VF,g2e,vsr,Fsr,Ez,Tsr,Msr,Esr,XF,h2e,Csr,wsr,Cz,Asr,ysr,Lsr,zF,p2e,xsr,$sr,wz,ksr,Ssr,Rsr,Bs,u2e,Bsr,Psr,Az,Isr,qsr,yz,Nsr,jsr,Dsr,QF,_2e,Gsr,Osr,Lz,Vsr,Xsr,zsr,WF,b2e,Qsr,Wsr,xz,Hsr,Usr,Jsr,HF,v2e,Ysr,Ksr,$z,Zsr,elr,olr,UF,F2e,rlr,tlr,kz,alr,nlr,slr,JF,T2e,llr,ilr,Sz,dlr,clr,flr,YF,M2e,mlr,glr,Rz,hlr,plr,ulr,KF,E2e,_lr,blr,Bz,vlr,Flr,Tlr,ZF,C2e,Mlr,Elr,Pz,Clr,wlr,Alr,eT,w2e,ylr,Llr,Iz,xlr,$lr,klr,oT,A2e,Slr,Rlr,qz,Blr,Plr,Ilr,rT,y2e,qlr,Nlr,Nz,jlr,Dlr,Glr,tT,L2e,Olr,Vlr,jz,Xlr,zlr,Qlr,aT,x2e,Wlr,Hlr,Dz,Ulr,Jlr,Ylr,nT,$2e,Klr,Zlr,Gz,eir,oir,rir,sT,k2e,tir,air,Oz,nir,sir,lir,lT,S2e,iir,dir,Vz,cir,fir,mir,iT,R2e,gir,hir,Xz,pir,uir,_ir,dT,B2e,bir,vir,zz,Fir,Tir,Mir,cT,P2e,Eir,Cir,Qz,wir,Air,yir,fT,I2e,Lir,xir,Wz,$ir,kir,Sir,mT,q2e,Rir,Bir,Hz,Pir,Iir,qir,gT,N2e,Nir,jir,Uz,Dir,Gir,Oir,hT,j2e,Vir,Xir,Jz,zir,Qir,Wir,pT,D2e,Hir,Uir,Yz,Jir,Yir,Kir,uT,G2e,Zir,edr,Kz,odr,rdr,tdr,_T,O2e,adr,ndr,Zz,sdr,ldr,idr,bT,V2e,ddr,cdr,eQ,fdr,mdr,gdr,vT,iqe,Dd,FT,X2e,DL,hdr,z2e,pdr,dqe,Ko,GL,udr,Gd,_dr,oQ,bdr,vdr,rQ,Fdr,Tdr,Mdr,OL,Edr,Q2e,Cdr,wdr,Adr,At,VL,ydr,W2e,Ldr,xdr,Od,$dr,H2e,kdr,Sdr,tQ,Rdr,Bdr,Pdr,TT,Idr,Ar,XL,qdr,U2e,Ndr,jdr,Za,Ddr,J2e,Gdr,Odr,Y2e,Vdr,Xdr,K2e,zdr,Qdr,Wdr,se,MT,Z2e,Hdr,Udr,aQ,Jdr,Ydr,Kdr,ET,e1e,Zdr,ecr,nQ,ocr,rcr,tcr,CT,o1e,acr,ncr,sQ,scr,lcr,icr,wT,r1e,dcr,ccr,lQ,fcr,mcr,gcr,AT,t1e,hcr,pcr,iQ,ucr,_cr,bcr,yT,a1e,vcr,Fcr,dQ,Tcr,Mcr,Ecr,LT,n1e,Ccr,wcr,cQ,Acr,ycr,Lcr,xT,s1e,xcr,$cr,fQ,kcr,Scr,Rcr,$T,l1e,Bcr,Pcr,mQ,Icr,qcr,Ncr,kT,i1e,jcr,Dcr,gQ,Gcr,Ocr,Vcr,ST,d1e,Xcr,zcr,hQ,Qcr,Wcr,Hcr,RT,c1e,Ucr,Jcr,pQ,Ycr,Kcr,Zcr,BT,f1e,efr,ofr,uQ,rfr,tfr,afr,PT,m1e,nfr,sfr,_Q,lfr,ifr,dfr,IT,g1e,cfr,ffr,bQ,mfr,gfr,hfr,qT,h1e,pfr,ufr,vQ,_fr,bfr,vfr,NT,p1e,Ffr,Tfr,FQ,Mfr,Efr,Cfr,jT,u1e,wfr,Afr,TQ,yfr,Lfr,xfr,DT,_1e,$fr,kfr,MQ,Sfr,Rfr,Bfr,GT,b1e,Pfr,Ifr,EQ,qfr,Nfr,jfr,OT,v1e,Dfr,Gfr,CQ,Ofr,Vfr,Xfr,VT,F1e,zfr,Qfr,wQ,Wfr,Hfr,Ufr,XT,T1e,Jfr,Yfr,AQ,Kfr,Zfr,emr,zT,cqe,Vd,QT,M1e,zL,omr,E1e,rmr,fqe,Zo,QL,tmr,Xd,amr,yQ,nmr,smr,LQ,lmr,imr,dmr,WL,cmr,C1e,fmr,mmr,gmr,yt,HL,hmr,w1e,pmr,umr,zd,_mr,A1e,bmr,vmr,xQ,Fmr,Tmr,Mmr,WT,Emr,yr,UL,Cmr,y1e,wmr,Amr,en,ymr,L1e,Lmr,xmr,x1e,$mr,kmr,$1e,Smr,Rmr,Bmr,Me,HT,k1e,Pmr,Imr,$Q,qmr,Nmr,jmr,UT,S1e,Dmr,Gmr,kQ,Omr,Vmr,Xmr,JT,R1e,zmr,Qmr,SQ,Wmr,Hmr,Umr,YT,B1e,Jmr,Ymr,RQ,Kmr,Zmr,egr,KT,P1e,ogr,rgr,BQ,tgr,agr,ngr,ZT,I1e,sgr,lgr,PQ,igr,dgr,cgr,e7,q1e,fgr,mgr,IQ,ggr,hgr,pgr,o7,N1e,ugr,_gr,qQ,bgr,vgr,Fgr,r7,j1e,Tgr,Mgr,NQ,Egr,Cgr,wgr,t7,D1e,Agr,ygr,jQ,Lgr,xgr,$gr,a7,G1e,kgr,Sgr,DQ,Rgr,Bgr,Pgr,n7,O1e,Igr,qgr,GQ,Ngr,jgr,Dgr,s7,mqe,Qd,l7,V1e,JL,Ggr,X1e,Ogr,gqe,er,YL,Vgr,Wd,Xgr,OQ,zgr,Qgr,VQ,Wgr,Hgr,Ugr,KL,Jgr,z1e,Ygr,Kgr,Zgr,Lt,ZL,ehr,Q1e,ohr,rhr,Hd,thr,W1e,ahr,nhr,XQ,shr,lhr,ihr,i7,dhr,Lr,e8,chr,H1e,fhr,mhr,on,ghr,U1e,hhr,phr,J1e,uhr,_hr,Y1e,bhr,vhr,Fhr,Ud,d7,K1e,Thr,Mhr,zQ,Ehr,Chr,whr,c7,Z1e,Ahr,yhr,QQ,Lhr,xhr,$hr,f7,ebe,khr,Shr,WQ,Rhr,Bhr,Phr,m7,hqe,Jd,g7,obe,o8,Ihr,rbe,qhr,pqe,or,r8,Nhr,Yd,jhr,HQ,Dhr,Ghr,UQ,Ohr,Vhr,Xhr,t8,zhr,tbe,Qhr,Whr,Hhr,xt,a8,Uhr,abe,Jhr,Yhr,Kd,Khr,nbe,Zhr,epr,JQ,opr,rpr,tpr,h7,apr,xr,n8,npr,sbe,spr,lpr,rn,ipr,lbe,dpr,cpr,ibe,fpr,mpr,dbe,gpr,hpr,ppr,ie,p7,cbe,upr,_pr,YQ,bpr,vpr,Fpr,u7,fbe,Tpr,Mpr,KQ,Epr,Cpr,wpr,_7,mbe,Apr,ypr,ZQ,Lpr,xpr,$pr,b7,gbe,kpr,Spr,eW,Rpr,Bpr,Ppr,v7,hbe,Ipr,qpr,oW,Npr,jpr,Dpr,F7,pbe,Gpr,Opr,rW,Vpr,Xpr,zpr,T7,ube,Qpr,Wpr,tW,Hpr,Upr,Jpr,M7,_be,Ypr,Kpr,aW,Zpr,eur,our,E7,bbe,rur,tur,nW,aur,nur,sur,C7,vbe,lur,iur,sW,dur,cur,fur,w7,Fbe,mur,gur,lW,hur,pur,uur,A7,Tbe,_ur,bur,iW,vur,Fur,Tur,y7,Mbe,Mur,Eur,dW,Cur,wur,Aur,L7,Ebe,yur,Lur,cW,xur,$ur,kur,x7,Cbe,Sur,Rur,fW,Bur,Pur,Iur,$7,wbe,qur,Nur,mW,jur,Dur,Gur,k7,Abe,Our,Vur,gW,Xur,zur,Qur,S7,ybe,Wur,Hur,hW,Uur,Jur,Yur,R7,Lbe,Kur,Zur,pW,e_r,o_r,r_r,B7,xbe,t_r,a_r,uW,n_r,s_r,l_r,P7,uqe,Zd,I7,$be,s8,i_r,kbe,d_r,_qe,rr,l8,c_r,ec,f_r,_W,m_r,g_r,bW,h_r,p_r,u_r,i8,__r,Sbe,b_r,v_r,F_r,$t,d8,T_r,Rbe,M_r,E_r,oc,C_r,Bbe,w_r,A_r,vW,y_r,L_r,x_r,q7,$_r,$r,c8,k_r,Pbe,S_r,R_r,tn,B_r,Ibe,P_r,I_r,qbe,q_r,N_r,Nbe,j_r,D_r,G_r,ye,N7,jbe,O_r,V_r,FW,X_r,z_r,Q_r,j7,Dbe,W_r,H_r,TW,U_r,J_r,Y_r,D7,Gbe,K_r,Z_r,MW,e2r,o2r,r2r,G7,Obe,t2r,a2r,EW,n2r,s2r,l2r,O7,Vbe,i2r,d2r,CW,c2r,f2r,m2r,V7,Xbe,g2r,h2r,wW,p2r,u2r,_2r,X7,zbe,b2r,v2r,AW,F2r,T2r,M2r,z7,Qbe,E2r,C2r,yW,w2r,A2r,y2r,Q7,Wbe,L2r,x2r,LW,$2r,k2r,S2r,W7,Hbe,R2r,B2r,xW,P2r,I2r,q2r,H7,bqe,rc,U7,Ube,f8,N2r,Jbe,j2r,vqe,tr,m8,D2r,tc,G2r,$W,O2r,V2r,kW,X2r,z2r,Q2r,g8,W2r,Ybe,H2r,U2r,J2r,kt,h8,Y2r,Kbe,K2r,Z2r,ac,e1r,Zbe,o1r,r1r,SW,t1r,a1r,n1r,J7,s1r,kr,p8,l1r,e5e,i1r,d1r,an,c1r,o5e,f1r,m1r,r5e,g1r,h1r,t5e,p1r,u1r,_1r,Z,Y7,a5e,b1r,v1r,RW,F1r,T1r,M1r,K7,n5e,E1r,C1r,BW,w1r,A1r,y1r,Z7,s5e,L1r,x1r,PW,$1r,k1r,S1r,eM,l5e,R1r,B1r,IW,P1r,I1r,q1r,oM,i5e,N1r,j1r,qW,D1r,G1r,O1r,rM,d5e,V1r,X1r,NW,z1r,Q1r,W1r,tM,c5e,H1r,U1r,jW,J1r,Y1r,K1r,aM,f5e,Z1r,ebr,DW,obr,rbr,tbr,nM,m5e,abr,nbr,GW,sbr,lbr,ibr,sM,g5e,dbr,cbr,OW,fbr,mbr,gbr,lM,h5e,hbr,pbr,VW,ubr,_br,bbr,iM,p5e,vbr,Fbr,XW,Tbr,Mbr,Ebr,dM,u5e,Cbr,wbr,zW,Abr,ybr,Lbr,cM,_5e,xbr,$br,QW,kbr,Sbr,Rbr,fM,b5e,Bbr,Pbr,WW,Ibr,qbr,Nbr,mM,v5e,jbr,Dbr,HW,Gbr,Obr,Vbr,gM,F5e,Xbr,zbr,UW,Qbr,Wbr,Hbr,hM,T5e,Ubr,Jbr,JW,Ybr,Kbr,Zbr,pM,M5e,e5r,o5r,YW,r5r,t5r,a5r,uM,E5e,n5r,s5r,KW,l5r,i5r,d5r,_M,C5e,c5r,f5r,ZW,m5r,g5r,h5r,bM,w5e,p5r,u5r,eH,_5r,b5r,v5r,vM,A5e,F5r,T5r,oH,M5r,E5r,C5r,FM,y5e,w5r,A5r,rH,y5r,L5r,x5r,TM,L5e,$5r,k5r,tH,S5r,R5r,B5r,MM,x5e,P5r,I5r,aH,q5r,N5r,j5r,EM,Fqe,nc,CM,$5e,u8,D5r,k5e,G5r,Tqe,ar,_8,O5r,sc,V5r,nH,X5r,z5r,sH,Q5r,W5r,H5r,b8,U5r,S5e,J5r,Y5r,K5r,St,v8,Z5r,R5e,e3r,o3r,lc,r3r,B5e,t3r,a3r,lH,n3r,s3r,l3r,wM,i3r,Sr,F8,d3r,P5e,c3r,f3r,nn,m3r,I5e,g3r,h3r,q5e,p3r,u3r,N5e,_3r,b3r,v3r,pe,AM,j5e,F3r,T3r,iH,M3r,E3r,C3r,yM,D5e,w3r,A3r,dH,y3r,L3r,x3r,LM,G5e,$3r,k3r,cH,S3r,R3r,B3r,xM,O5e,P3r,I3r,fH,q3r,N3r,j3r,$M,V5e,D3r,G3r,mH,O3r,V3r,X3r,kM,X5e,z3r,Q3r,gH,W3r,H3r,U3r,SM,z5e,J3r,Y3r,hH,K3r,Z3r,evr,RM,Q5e,ovr,rvr,pH,tvr,avr,nvr,BM,W5e,svr,lvr,uH,ivr,dvr,cvr,PM,H5e,fvr,mvr,_H,gvr,hvr,pvr,IM,U5e,uvr,_vr,bH,bvr,vvr,Fvr,qM,J5e,Tvr,Mvr,vH,Evr,Cvr,wvr,NM,Y5e,Avr,yvr,FH,Lvr,xvr,$vr,jM,K5e,kvr,Svr,TH,Rvr,Bvr,Pvr,DM,Z5e,Ivr,qvr,MH,Nvr,jvr,Dvr,GM,e3e,Gvr,Ovr,EH,Vvr,Xvr,zvr,OM,o3e,Qvr,Wvr,CH,Hvr,Uvr,Jvr,VM,Mqe,ic,XM,r3e,T8,Yvr,t3e,Kvr,Eqe,nr,M8,Zvr,dc,eFr,wH,oFr,rFr,AH,tFr,aFr,nFr,E8,sFr,a3e,lFr,iFr,dFr,Rt,C8,cFr,n3e,fFr,mFr,cc,gFr,s3e,hFr,pFr,yH,uFr,_Fr,bFr,zM,vFr,Rr,w8,FFr,l3e,TFr,MFr,sn,EFr,i3e,CFr,wFr,d3e,AFr,yFr,c3e,LFr,xFr,$Fr,A8,QM,f3e,kFr,SFr,LH,RFr,BFr,PFr,WM,m3e,IFr,qFr,xH,NFr,jFr,DFr,HM,Cqe,fc,UM,g3e,y8,GFr,h3e,OFr,wqe,sr,L8,VFr,mc,XFr,$H,zFr,QFr,kH,WFr,HFr,UFr,x8,JFr,p3e,YFr,KFr,ZFr,Bt,$8,eTr,u3e,oTr,rTr,gc,tTr,_3e,aTr,nTr,SH,sTr,lTr,iTr,JM,dTr,Br,k8,cTr,b3e,fTr,mTr,ln,gTr,v3e,hTr,pTr,F3e,uTr,_Tr,T3e,bTr,vTr,FTr,M3e,YM,E3e,TTr,MTr,RH,ETr,CTr,wTr,KM,Aqe,hc,ZM,C3e,S8,ATr,w3e,yTr,yqe,lr,R8,LTr,pc,xTr,BH,$Tr,kTr,PH,STr,RTr,BTr,B8,PTr,A3e,ITr,qTr,NTr,Pt,P8,jTr,y3e,DTr,GTr,uc,OTr,L3e,VTr,XTr,IH,zTr,QTr,WTr,e4,HTr,Pr,I8,UTr,x3e,JTr,YTr,dn,KTr,$3e,ZTr,e7r,k3e,o7r,r7r,S3e,t7r,a7r,n7r,de,o4,R3e,s7r,l7r,qH,i7r,d7r,c7r,r4,B3e,f7r,m7r,NH,g7r,h7r,p7r,t4,P3e,u7r,_7r,jH,b7r,v7r,F7r,a4,I3e,T7r,M7r,DH,E7r,C7r,w7r,n4,q3e,A7r,y7r,GH,L7r,x7r,$7r,s4,N3e,k7r,S7r,OH,R7r,B7r,P7r,l4,j3e,I7r,q7r,VH,N7r,j7r,D7r,i4,D3e,G7r,O7r,XH,V7r,X7r,z7r,d4,G3e,Q7r,W7r,zH,H7r,U7r,J7r,c4,O3e,Y7r,K7r,QH,Z7r,eMr,oMr,f4,V3e,rMr,tMr,WH,aMr,nMr,sMr,m4,X3e,lMr,iMr,HH,dMr,cMr,fMr,g4,z3e,mMr,gMr,UH,hMr,pMr,uMr,h4,Q3e,_Mr,bMr,JH,vMr,FMr,TMr,p4,W3e,MMr,EMr,YH,CMr,wMr,AMr,u4,H3e,yMr,LMr,KH,xMr,$Mr,kMr,_4,U3e,SMr,RMr,ZH,BMr,PMr,IMr,b4,J3e,qMr,NMr,eU,jMr,DMr,GMr,v4,Y3e,OMr,VMr,oU,XMr,zMr,QMr,F4,K3e,WMr,HMr,rU,UMr,JMr,YMr,T4,Lqe,_c,M4,Z3e,q8,KMr,eve,ZMr,xqe,ir,N8,e4r,bc,o4r,tU,r4r,t4r,aU,a4r,n4r,s4r,j8,l4r,ove,i4r,d4r,c4r,It,D8,f4r,rve,m4r,g4r,vc,h4r,tve,p4r,u4r,nU,_4r,b4r,v4r,E4,F4r,Ir,G8,T4r,ave,M4r,E4r,cn,C4r,nve,w4r,A4r,sve,y4r,L4r,lve,x4r,$4r,k4r,ce,C4,ive,S4r,R4r,sU,B4r,P4r,I4r,w4,dve,q4r,N4r,lU,j4r,D4r,G4r,A4,cve,O4r,V4r,iU,X4r,z4r,Q4r,y4,fve,W4r,H4r,dU,U4r,J4r,Y4r,L4,mve,K4r,Z4r,cU,eEr,oEr,rEr,x4,gve,tEr,aEr,fU,nEr,sEr,lEr,$4,hve,iEr,dEr,mU,cEr,fEr,mEr,k4,pve,gEr,hEr,gU,pEr,uEr,_Er,S4,uve,bEr,vEr,hU,FEr,TEr,MEr,R4,_ve,EEr,CEr,pU,wEr,AEr,yEr,B4,bve,LEr,xEr,uU,$Er,kEr,SEr,P4,vve,REr,BEr,_U,PEr,IEr,qEr,I4,Fve,NEr,jEr,bU,DEr,GEr,OEr,q4,Tve,VEr,XEr,vU,zEr,QEr,WEr,N4,Mve,HEr,UEr,FU,JEr,YEr,KEr,j4,Eve,ZEr,eCr,TU,oCr,rCr,tCr,D4,Cve,aCr,nCr,MU,sCr,lCr,iCr,G4,wve,dCr,cCr,EU,fCr,mCr,gCr,O4,Ave,hCr,pCr,CU,uCr,_Cr,bCr,V4,yve,vCr,FCr,wU,TCr,MCr,ECr,X4,$qe,Fc,z4,Lve,O8,CCr,xve,wCr,kqe,dr,V8,ACr,Tc,yCr,AU,LCr,xCr,yU,$Cr,kCr,SCr,X8,RCr,$ve,BCr,PCr,ICr,qt,z8,qCr,kve,NCr,jCr,Mc,DCr,Sve,GCr,OCr,LU,VCr,XCr,zCr,Q4,QCr,qr,Q8,WCr,Rve,HCr,UCr,fn,JCr,Bve,YCr,KCr,Pve,ZCr,ewr,Ive,owr,rwr,twr,qve,W4,Nve,awr,nwr,xU,swr,lwr,iwr,H4,Sqe,Ec,U4,jve,W8,dwr,Dve,cwr,Rqe,cr,H8,fwr,Cc,mwr,$U,gwr,hwr,kU,pwr,uwr,_wr,U8,bwr,Gve,vwr,Fwr,Twr,Nt,J8,Mwr,Ove,Ewr,Cwr,wc,wwr,Vve,Awr,ywr,SU,Lwr,xwr,$wr,J4,kwr,Nr,Y8,Swr,Xve,Rwr,Bwr,mn,Pwr,zve,Iwr,qwr,Qve,Nwr,jwr,Wve,Dwr,Gwr,Owr,Hve,Y4,Uve,Vwr,Xwr,RU,zwr,Qwr,Wwr,K4,Bqe,Ac,Z4,Jve,K8,Hwr,Yve,Uwr,Pqe,fr,Z8,Jwr,yc,Ywr,BU,Kwr,Zwr,PU,eAr,oAr,rAr,ex,tAr,Kve,aAr,nAr,sAr,jt,ox,lAr,Zve,iAr,dAr,Lc,cAr,eFe,fAr,mAr,IU,gAr,hAr,pAr,eE,uAr,jr,rx,_Ar,oFe,bAr,vAr,gn,FAr,rFe,TAr,MAr,tFe,EAr,CAr,aFe,wAr,AAr,yAr,re,oE,nFe,LAr,xAr,qU,$Ar,kAr,SAr,rE,sFe,RAr,BAr,NU,PAr,IAr,qAr,tE,lFe,NAr,jAr,jU,DAr,GAr,OAr,aE,iFe,VAr,XAr,DU,zAr,QAr,WAr,nE,dFe,HAr,UAr,GU,JAr,YAr,KAr,sE,cFe,ZAr,e6r,OU,o6r,r6r,t6r,lE,fFe,a6r,n6r,VU,s6r,l6r,i6r,iE,mFe,d6r,c6r,XU,f6r,m6r,g6r,dE,gFe,h6r,p6r,zU,u6r,_6r,b6r,cE,hFe,v6r,F6r,QU,T6r,M6r,E6r,fE,pFe,C6r,w6r,WU,A6r,y6r,L6r,mE,uFe,x6r,$6r,HU,k6r,S6r,R6r,gE,_Fe,B6r,P6r,UU,I6r,q6r,N6r,hE,bFe,j6r,D6r,JU,G6r,O6r,V6r,pE,vFe,X6r,z6r,YU,Q6r,W6r,H6r,uE,FFe,U6r,J6r,KU,Y6r,K6r,Z6r,_E,TFe,e0r,o0r,ZU,r0r,t0r,a0r,bE,MFe,n0r,s0r,eJ,l0r,i0r,d0r,vE,EFe,c0r,f0r,oJ,m0r,g0r,h0r,FE,CFe,p0r,u0r,rJ,_0r,b0r,v0r,TE,wFe,F0r,T0r,tJ,M0r,E0r,C0r,ME,AFe,w0r,A0r,aJ,y0r,L0r,x0r,EE,yFe,$0r,k0r,nJ,S0r,R0r,B0r,CE,LFe,P0r,I0r,sJ,q0r,N0r,j0r,wE,xFe,D0r,G0r,lJ,O0r,V0r,X0r,AE,Iqe,xc,yE,$Fe,tx,z0r,kFe,Q0r,qqe,mr,ax,W0r,$c,H0r,iJ,U0r,J0r,dJ,Y0r,K0r,Z0r,nx,eyr,SFe,oyr,ryr,tyr,Dt,sx,ayr,RFe,nyr,syr,kc,lyr,BFe,iyr,dyr,cJ,cyr,fyr,myr,LE,gyr,Dr,lx,hyr,PFe,pyr,uyr,hn,_yr,IFe,byr,vyr,qFe,Fyr,Tyr,NFe,Myr,Eyr,Cyr,ke,xE,jFe,wyr,Ayr,fJ,yyr,Lyr,xyr,$E,DFe,$yr,kyr,mJ,Syr,Ryr,Byr,kE,GFe,Pyr,Iyr,gJ,qyr,Nyr,jyr,SE,OFe,Dyr,Gyr,hJ,Oyr,Vyr,Xyr,RE,VFe,zyr,Qyr,pJ,Wyr,Hyr,Uyr,BE,XFe,Jyr,Yyr,uJ,Kyr,Zyr,eLr,PE,zFe,oLr,rLr,_J,tLr,aLr,nLr,IE,QFe,sLr,lLr,bJ,iLr,dLr,cLr,qE,WFe,fLr,mLr,vJ,gLr,hLr,pLr,NE,Nqe,Sc,jE,HFe,ix,uLr,UFe,_Lr,jqe,gr,dx,bLr,Rc,vLr,FJ,FLr,TLr,TJ,MLr,ELr,CLr,cx,wLr,JFe,ALr,yLr,LLr,Gt,fx,xLr,YFe,$Lr,kLr,Bc,SLr,KFe,RLr,BLr,MJ,PLr,ILr,qLr,DE,NLr,Gr,mx,jLr,ZFe,DLr,GLr,pn,OLr,eTe,VLr,XLr,oTe,zLr,QLr,rTe,WLr,HLr,ULr,Ee,GE,tTe,JLr,YLr,EJ,KLr,ZLr,e8r,OE,aTe,o8r,r8r,CJ,t8r,a8r,n8r,VE,nTe,s8r,l8r,wJ,i8r,d8r,c8r,XE,sTe,f8r,m8r,AJ,g8r,h8r,p8r,zE,lTe,u8r,_8r,yJ,b8r,v8r,F8r,QE,iTe,T8r,M8r,LJ,E8r,C8r,w8r,WE,dTe,A8r,y8r,xJ,L8r,x8r,$8r,HE,cTe,k8r,S8r,$J,R8r,B8r,P8r,UE,fTe,I8r,q8r,kJ,N8r,j8r,D8r,JE,mTe,G8r,O8r,SJ,V8r,X8r,z8r,YE,gTe,Q8r,W8r,RJ,H8r,U8r,J8r,KE,hTe,Y8r,K8r,BJ,Z8r,exr,oxr,ZE,Dqe,Pc,eC,pTe,gx,rxr,uTe,txr,Gqe,hr,hx,axr,Ic,nxr,PJ,sxr,lxr,IJ,ixr,dxr,cxr,px,fxr,_Te,mxr,gxr,hxr,Ot,ux,pxr,bTe,uxr,_xr,qc,bxr,vTe,vxr,Fxr,qJ,Txr,Mxr,Exr,oC,Cxr,Or,_x,wxr,FTe,Axr,yxr,un,Lxr,TTe,xxr,$xr,MTe,kxr,Sxr,ETe,Rxr,Bxr,Pxr,Le,rC,CTe,Ixr,qxr,NJ,Nxr,jxr,Dxr,tC,wTe,Gxr,Oxr,jJ,Vxr,Xxr,zxr,aC,ATe,Qxr,Wxr,DJ,Hxr,Uxr,Jxr,nC,yTe,Yxr,Kxr,GJ,Zxr,e9r,o9r,sC,LTe,r9r,t9r,OJ,a9r,n9r,s9r,lC,xTe,l9r,i9r,VJ,d9r,c9r,f9r,iC,$Te,m9r,g9r,XJ,h9r,p9r,u9r,dC,kTe,_9r,b9r,zJ,v9r,F9r,T9r,cC,STe,M9r,E9r,QJ,C9r,w9r,A9r,fC,RTe,y9r,L9r,WJ,x9r,$9r,k9r,mC,Oqe,Nc,gC,BTe,bx,S9r,PTe,R9r,Vqe,pr,vx,B9r,jc,P9r,HJ,I9r,q9r,UJ,N9r,j9r,D9r,Fx,G9r,ITe,O9r,V9r,X9r,Vt,Tx,z9r,qTe,Q9r,W9r,Dc,H9r,NTe,U9r,J9r,JJ,Y9r,K9r,Z9r,hC,e$r,Vr,Mx,o$r,jTe,r$r,t$r,_n,a$r,DTe,n$r,s$r,GTe,l$r,i$r,OTe,d$r,c$r,f$r,Se,pC,VTe,m$r,g$r,YJ,h$r,p$r,u$r,uC,XTe,_$r,b$r,KJ,v$r,F$r,T$r,_C,zTe,M$r,E$r,ZJ,C$r,w$r,A$r,bC,QTe,y$r,L$r,eY,x$r,$$r,k$r,vC,WTe,S$r,R$r,oY,B$r,P$r,I$r,FC,HTe,q$r,N$r,rY,j$r,D$r,G$r,TC,UTe,O$r,V$r,tY,X$r,z$r,Q$r,MC,JTe,W$r,H$r,aY,U$r,J$r,Y$r,EC,YTe,K$r,Z$r,nY,ekr,okr,rkr,CC,Xqe,Gc,wC,KTe,Ex,tkr,ZTe,akr,zqe,ur,Cx,nkr,Oc,skr,sY,lkr,ikr,lY,dkr,ckr,fkr,wx,mkr,e7e,gkr,hkr,pkr,Xt,Ax,ukr,o7e,_kr,bkr,Vc,vkr,r7e,Fkr,Tkr,iY,Mkr,Ekr,Ckr,AC,wkr,Xr,yx,Akr,t7e,ykr,Lkr,bn,xkr,a7e,$kr,kkr,n7e,Skr,Rkr,s7e,Bkr,Pkr,Ikr,xe,yC,l7e,qkr,Nkr,dY,jkr,Dkr,Gkr,LC,i7e,Okr,Vkr,cY,Xkr,zkr,Qkr,xC,d7e,Wkr,Hkr,fY,Ukr,Jkr,Ykr,$C,c7e,Kkr,Zkr,mY,eSr,oSr,rSr,kC,f7e,tSr,aSr,gY,nSr,sSr,lSr,SC,m7e,iSr,dSr,hY,cSr,fSr,mSr,RC,g7e,gSr,hSr,pY,pSr,uSr,_Sr,BC,h7e,bSr,vSr,uY,FSr,TSr,MSr,PC,p7e,ESr,CSr,_Y,wSr,ASr,ySr,IC,u7e,LSr,xSr,bY,$Sr,kSr,SSr,qC,Qqe,Xc,NC,_7e,Lx,RSr,b7e,BSr,Wqe,_r,xx,PSr,zc,ISr,vY,qSr,NSr,FY,jSr,DSr,GSr,$x,OSr,v7e,VSr,XSr,zSr,zt,kx,QSr,F7e,WSr,HSr,Qc,USr,T7e,JSr,YSr,TY,KSr,ZSr,eRr,jC,oRr,zr,Sx,rRr,M7e,tRr,aRr,vn,nRr,E7e,sRr,lRr,C7e,iRr,dRr,w7e,cRr,fRr,mRr,$e,DC,A7e,gRr,hRr,MY,pRr,uRr,_Rr,GC,y7e,bRr,vRr,EY,FRr,TRr,MRr,OC,L7e,ERr,CRr,CY,wRr,ARr,yRr,VC,x7e,LRr,xRr,wY,$Rr,kRr,SRr,XC,$7e,RRr,BRr,AY,PRr,IRr,qRr,zC,k7e,NRr,jRr,yY,DRr,GRr,ORr,QC,S7e,VRr,XRr,LY,zRr,QRr,WRr,WC,R7e,HRr,URr,xY,JRr,YRr,KRr,HC,B7e,ZRr,eBr,$Y,oBr,rBr,tBr,UC,P7e,aBr,nBr,kY,sBr,lBr,iBr,JC,Hqe,Wc,YC,I7e,Rx,dBr,q7e,cBr,Uqe,br,Bx,fBr,Hc,mBr,SY,gBr,hBr,RY,pBr,uBr,_Br,Px,bBr,N7e,vBr,FBr,TBr,Qt,Ix,MBr,j7e,EBr,CBr,Uc,wBr,D7e,ABr,yBr,BY,LBr,xBr,$Br,KC,kBr,Qr,qx,SBr,G7e,RBr,BBr,Fn,PBr,O7e,IBr,qBr,V7e,NBr,jBr,X7e,DBr,GBr,OBr,De,ZC,z7e,VBr,XBr,PY,zBr,QBr,WBr,ew,Q7e,HBr,UBr,IY,JBr,YBr,KBr,ow,W7e,ZBr,ePr,qY,oPr,rPr,tPr,rw,H7e,aPr,nPr,NY,sPr,lPr,iPr,tw,U7e,dPr,cPr,jY,fPr,mPr,gPr,aw,J7e,hPr,pPr,DY,uPr,_Pr,bPr,nw,Y7e,vPr,FPr,GY,TPr,MPr,EPr,sw,K7e,CPr,wPr,OY,APr,yPr,LPr,lw,Jqe,Jc,iw,Z7e,Nx,xPr,eMe,$Pr,Yqe,vr,jx,kPr,Yc,SPr,VY,RPr,BPr,XY,PPr,IPr,qPr,Dx,NPr,oMe,jPr,DPr,GPr,Wt,Gx,OPr,rMe,VPr,XPr,Kc,zPr,tMe,QPr,WPr,zY,HPr,UPr,JPr,dw,YPr,Wr,Ox,KPr,aMe,ZPr,eIr,Tn,oIr,nMe,rIr,tIr,sMe,aIr,nIr,lMe,sIr,lIr,iIr,Ge,cw,iMe,dIr,cIr,QY,fIr,mIr,gIr,fw,dMe,hIr,pIr,WY,uIr,_Ir,bIr,mw,cMe,vIr,FIr,HY,TIr,MIr,EIr,gw,fMe,CIr,wIr,UY,AIr,yIr,LIr,hw,mMe,xIr,$Ir,JY,kIr,SIr,RIr,pw,gMe,BIr,PIr,YY,IIr,qIr,NIr,uw,hMe,jIr,DIr,KY,GIr,OIr,VIr,_w,pMe,XIr,zIr,ZY,QIr,WIr,HIr,bw,Kqe,Zc,vw,uMe,Vx,UIr,_Me,JIr,Zqe,Fr,Xx,YIr,ef,KIr,eK,ZIr,eqr,oK,oqr,rqr,tqr,zx,aqr,bMe,nqr,sqr,lqr,Ht,Qx,iqr,vMe,dqr,cqr,of,fqr,FMe,mqr,gqr,rK,hqr,pqr,uqr,Fw,_qr,Hr,Wx,bqr,TMe,vqr,Fqr,Mn,Tqr,MMe,Mqr,Eqr,EMe,Cqr,wqr,CMe,Aqr,yqr,Lqr,wMe,Tw,AMe,xqr,$qr,tK,kqr,Sqr,Rqr,Mw,eNe,rf,Ew,yMe,Hx,Bqr,LMe,Pqr,oNe,Tr,Ux,Iqr,tf,qqr,aK,Nqr,jqr,nK,Dqr,Gqr,Oqr,Jx,Vqr,xMe,Xqr,zqr,Qqr,Ut,Yx,Wqr,$Me,Hqr,Uqr,af,Jqr,kMe,Yqr,Kqr,sK,Zqr,eNr,oNr,Cw,rNr,Ur,Kx,tNr,SMe,aNr,nNr,En,sNr,RMe,lNr,iNr,BMe,dNr,cNr,PMe,fNr,mNr,gNr,Zx,ww,IMe,hNr,pNr,lK,uNr,_Nr,bNr,Aw,qMe,vNr,FNr,iK,TNr,MNr,ENr,yw,rNe,nf,Lw,NMe,e9,CNr,jMe,wNr,tNe,Mr,o9,ANr,sf,yNr,dK,LNr,xNr,cK,$Nr,kNr,SNr,r9,RNr,DMe,BNr,PNr,INr,Jt,t9,qNr,GMe,NNr,jNr,lf,DNr,OMe,GNr,ONr,fK,VNr,XNr,zNr,xw,QNr,Jr,a9,WNr,VMe,HNr,UNr,Cn,JNr,XMe,YNr,KNr,zMe,ZNr,ejr,QMe,ojr,rjr,tjr,WMe,$w,HMe,ajr,njr,mK,sjr,ljr,ijr,kw,aNe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),e0=new ee({}),o0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new djr({props:{warning:!0,$$slots:{default:[z0t]},$$scope:{ctx:L}}}),r0=new ee({}),t0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L574"}}),s0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L597"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),l0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L719"}}),i0=new ee({}),d0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L378"}}),m0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17253/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L392"}}),Jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),g0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L588"}}),h0=new ee({}),p0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),b0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17253/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Ch=new djr({props:{$$slots:{default:[H0t]},$$scope:{ctx:L}}}),wh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),v0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),F0=new ee({}),T0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L77"}}),C0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L91"}}),Vh=new djr({props:{$$slots:{default:[J0t]},$$scope:{ctx:L}}}),Xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),w0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L244"}}),A0=new ee({}),y0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L723"}}),x0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Wh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),$0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),k0=new ee({}),S0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L730"}}),B0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Du=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),L_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),I0=new ee({}),q0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L745"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),$_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),G0=new ee({}),O0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L752"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Z2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),Q0=new ee({}),W0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L759"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),Y0=new ee({}),K0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L768"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L802"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L809"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L795"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L777"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L784"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L818"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L857"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L864"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L887"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L871"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L878"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L896"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L903"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L850"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L825"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L832"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L841"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),J7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),u8=new ee({}),_8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),Lx=new ee({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Rx=new ee({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),Nx=new ee({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),Vx=new ee({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Hx=new ee({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),e9=new ee({}),o9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),t9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),J6=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),Y6=o("AutoConfig"),yn=o(", "),Ln=a("a"),K6=o("AutoModel"),fi=o(`, and
`),xn=a("a"),Z6=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),_$=o("will create a model that is an instance of "),gi=a("a"),b$=o("BertModel"),v$=o("."),Eo=l(),Ea=a("p"),F$=o("There is one class of "),pf=a("code"),T$=o("AutoModel"),mDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),oIe=l(),hi=a("h2"),uf=a("a"),see=a("span"),F(e0.$$.fragment),gDe=l(),lee=a("span"),hDe=o("Extending the Auto Classes"),rIe=l(),$n=a("p"),pDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),iee=a("code"),uDe=o("NewModel"),_De=o(", make sure you have a "),dee=a("code"),bDe=o("NewModelConfig"),vDe=o(` then you can add those to the auto
classes like this:`),tIe=l(),F(o0.$$.fragment),aIe=l(),M$=a("p"),FDe=o("You will then be able to use the auto classes like you would usually do!"),nIe=l(),F(_f.$$.fragment),sIe=l(),pi=a("h2"),bf=a("a"),cee=a("span"),F(r0.$$.fragment),TDe=l(),fee=a("span"),MDe=o("AutoConfig"),lIe=l(),Co=a("div"),F(t0.$$.fragment),EDe=l(),a0=a("p"),CDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E$=a("a"),wDe=o("from_pretrained()"),ADe=o(" class method."),yDe=l(),n0=a("p"),LDe=o("This class cannot be instantiated directly using "),mee=a("code"),xDe=o("__init__()"),$De=o(" (throws an error)."),kDe=l(),Er=a("div"),F(s0.$$.fragment),SDe=l(),gee=a("p"),RDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BDe=l(),ui=a("p"),PDe=o("The configuration class to instantiate is selected based on the "),hee=a("code"),IDe=o("model_type"),qDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pee=a("code"),NDe=o("pretrained_model_name_or_path"),jDe=o(":"),DDe=l(),A=a("ul"),vf=a("li"),uee=a("strong"),GDe=o("albert"),ODe=o(" \u2014 "),C$=a("a"),VDe=o("AlbertConfig"),XDe=o(" (ALBERT model)"),zDe=l(),Ff=a("li"),_ee=a("strong"),QDe=o("bart"),WDe=o(" \u2014 "),w$=a("a"),HDe=o("BartConfig"),UDe=o(" (BART model)"),JDe=l(),Tf=a("li"),bee=a("strong"),YDe=o("beit"),KDe=o(" \u2014 "),A$=a("a"),ZDe=o("BeitConfig"),eGe=o(" (BEiT model)"),oGe=l(),Mf=a("li"),vee=a("strong"),rGe=o("bert"),tGe=o(" \u2014 "),y$=a("a"),aGe=o("BertConfig"),nGe=o(" (BERT model)"),sGe=l(),Ef=a("li"),Fee=a("strong"),lGe=o("bert-generation"),iGe=o(" \u2014 "),L$=a("a"),dGe=o("BertGenerationConfig"),cGe=o(" (Bert Generation model)"),fGe=l(),Cf=a("li"),Tee=a("strong"),mGe=o("big_bird"),gGe=o(" \u2014 "),x$=a("a"),hGe=o("BigBirdConfig"),pGe=o(" (BigBird model)"),uGe=l(),wf=a("li"),Mee=a("strong"),_Ge=o("bigbird_pegasus"),bGe=o(" \u2014 "),$$=a("a"),vGe=o("BigBirdPegasusConfig"),FGe=o(" (BigBirdPegasus model)"),TGe=l(),Af=a("li"),Eee=a("strong"),MGe=o("blenderbot"),EGe=o(" \u2014 "),k$=a("a"),CGe=o("BlenderbotConfig"),wGe=o(" (Blenderbot model)"),AGe=l(),yf=a("li"),Cee=a("strong"),yGe=o("blenderbot-small"),LGe=o(" \u2014 "),S$=a("a"),xGe=o("BlenderbotSmallConfig"),$Ge=o(" (BlenderbotSmall model)"),kGe=l(),Lf=a("li"),wee=a("strong"),SGe=o("camembert"),RGe=o(" \u2014 "),R$=a("a"),BGe=o("CamembertConfig"),PGe=o(" (CamemBERT model)"),IGe=l(),xf=a("li"),Aee=a("strong"),qGe=o("canine"),NGe=o(" \u2014 "),B$=a("a"),jGe=o("CanineConfig"),DGe=o(" (Canine model)"),GGe=l(),$f=a("li"),yee=a("strong"),OGe=o("clip"),VGe=o(" \u2014 "),P$=a("a"),XGe=o("CLIPConfig"),zGe=o(" (CLIP model)"),QGe=l(),kf=a("li"),Lee=a("strong"),WGe=o("convbert"),HGe=o(" \u2014 "),I$=a("a"),UGe=o("ConvBertConfig"),JGe=o(" (ConvBERT model)"),YGe=l(),Sf=a("li"),xee=a("strong"),KGe=o("convnext"),ZGe=o(" \u2014 "),q$=a("a"),eOe=o("ConvNextConfig"),oOe=o(" (ConvNext model)"),rOe=l(),Rf=a("li"),$ee=a("strong"),tOe=o("ctrl"),aOe=o(" \u2014 "),N$=a("a"),nOe=o("CTRLConfig"),sOe=o(" (CTRL model)"),lOe=l(),Bf=a("li"),kee=a("strong"),iOe=o("cvt"),dOe=o(" \u2014 "),j$=a("a"),cOe=o("CvtConfig"),fOe=o(" (CvT model)"),mOe=l(),Pf=a("li"),See=a("strong"),gOe=o("data2vec-audio"),hOe=o(" \u2014 "),D$=a("a"),pOe=o("Data2VecAudioConfig"),uOe=o(" (Data2VecAudio model)"),_Oe=l(),If=a("li"),Ree=a("strong"),bOe=o("data2vec-text"),vOe=o(" \u2014 "),G$=a("a"),FOe=o("Data2VecTextConfig"),TOe=o(" (Data2VecText model)"),MOe=l(),qf=a("li"),Bee=a("strong"),EOe=o("data2vec-vision"),COe=o(" \u2014 "),O$=a("a"),wOe=o("Data2VecVisionConfig"),AOe=o(" (Data2VecVision model)"),yOe=l(),Nf=a("li"),Pee=a("strong"),LOe=o("deberta"),xOe=o(" \u2014 "),V$=a("a"),$Oe=o("DebertaConfig"),kOe=o(" (DeBERTa model)"),SOe=l(),jf=a("li"),Iee=a("strong"),ROe=o("deberta-v2"),BOe=o(" \u2014 "),X$=a("a"),POe=o("DebertaV2Config"),IOe=o(" (DeBERTa-v2 model)"),qOe=l(),Df=a("li"),qee=a("strong"),NOe=o("decision_transformer"),jOe=o(" \u2014 "),z$=a("a"),DOe=o("DecisionTransformerConfig"),GOe=o(" (Decision Transformer model)"),OOe=l(),Gf=a("li"),Nee=a("strong"),VOe=o("deit"),XOe=o(" \u2014 "),Q$=a("a"),zOe=o("DeiTConfig"),QOe=o(" (DeiT model)"),WOe=l(),Of=a("li"),jee=a("strong"),HOe=o("detr"),UOe=o(" \u2014 "),W$=a("a"),JOe=o("DetrConfig"),YOe=o(" (DETR model)"),KOe=l(),Vf=a("li"),Dee=a("strong"),ZOe=o("distilbert"),eVe=o(" \u2014 "),H$=a("a"),oVe=o("DistilBertConfig"),rVe=o(" (DistilBERT model)"),tVe=l(),Xf=a("li"),Gee=a("strong"),aVe=o("dpr"),nVe=o(" \u2014 "),U$=a("a"),sVe=o("DPRConfig"),lVe=o(" (DPR model)"),iVe=l(),zf=a("li"),Oee=a("strong"),dVe=o("dpt"),cVe=o(" \u2014 "),J$=a("a"),fVe=o("DPTConfig"),mVe=o(" (DPT model)"),gVe=l(),Qf=a("li"),Vee=a("strong"),hVe=o("electra"),pVe=o(" \u2014 "),Y$=a("a"),uVe=o("ElectraConfig"),_Ve=o(" (ELECTRA model)"),bVe=l(),Wf=a("li"),Xee=a("strong"),vVe=o("encoder-decoder"),FVe=o(" \u2014 "),K$=a("a"),TVe=o("EncoderDecoderConfig"),MVe=o(" (Encoder decoder model)"),EVe=l(),Hf=a("li"),zee=a("strong"),CVe=o("flaubert"),wVe=o(" \u2014 "),Z$=a("a"),AVe=o("FlaubertConfig"),yVe=o(" (FlauBERT model)"),LVe=l(),Uf=a("li"),Qee=a("strong"),xVe=o("flava"),$Ve=o(" \u2014 "),ek=a("a"),kVe=o("FlavaConfig"),SVe=o(" (Flava model)"),RVe=l(),Jf=a("li"),Wee=a("strong"),BVe=o("fnet"),PVe=o(" \u2014 "),ok=a("a"),IVe=o("FNetConfig"),qVe=o(" (FNet model)"),NVe=l(),Yf=a("li"),Hee=a("strong"),jVe=o("fsmt"),DVe=o(" \u2014 "),rk=a("a"),GVe=o("FSMTConfig"),OVe=o(" (FairSeq Machine-Translation model)"),VVe=l(),Kf=a("li"),Uee=a("strong"),XVe=o("funnel"),zVe=o(" \u2014 "),tk=a("a"),QVe=o("FunnelConfig"),WVe=o(" (Funnel Transformer model)"),HVe=l(),Zf=a("li"),Jee=a("strong"),UVe=o("glpn"),JVe=o(" \u2014 "),ak=a("a"),YVe=o("GLPNConfig"),KVe=o(" (GLPN model)"),ZVe=l(),em=a("li"),Yee=a("strong"),eXe=o("gpt2"),oXe=o(" \u2014 "),nk=a("a"),rXe=o("GPT2Config"),tXe=o(" (OpenAI GPT-2 model)"),aXe=l(),om=a("li"),Kee=a("strong"),nXe=o("gpt_neo"),sXe=o(" \u2014 "),sk=a("a"),lXe=o("GPTNeoConfig"),iXe=o(" (GPT Neo model)"),dXe=l(),rm=a("li"),Zee=a("strong"),cXe=o("gptj"),fXe=o(" \u2014 "),lk=a("a"),mXe=o("GPTJConfig"),gXe=o(" (GPT-J model)"),hXe=l(),tm=a("li"),eoe=a("strong"),pXe=o("hubert"),uXe=o(" \u2014 "),ik=a("a"),_Xe=o("HubertConfig"),bXe=o(" (Hubert model)"),vXe=l(),am=a("li"),ooe=a("strong"),FXe=o("ibert"),TXe=o(" \u2014 "),dk=a("a"),MXe=o("IBertConfig"),EXe=o(" (I-BERT model)"),CXe=l(),nm=a("li"),roe=a("strong"),wXe=o("imagegpt"),AXe=o(" \u2014 "),ck=a("a"),yXe=o("ImageGPTConfig"),LXe=o(" (ImageGPT model)"),xXe=l(),sm=a("li"),toe=a("strong"),$Xe=o("layoutlm"),kXe=o(" \u2014 "),fk=a("a"),SXe=o("LayoutLMConfig"),RXe=o(" (LayoutLM model)"),BXe=l(),lm=a("li"),aoe=a("strong"),PXe=o("layoutlmv2"),IXe=o(" \u2014 "),mk=a("a"),qXe=o("LayoutLMv2Config"),NXe=o(" (LayoutLMv2 model)"),jXe=l(),im=a("li"),noe=a("strong"),DXe=o("led"),GXe=o(" \u2014 "),gk=a("a"),OXe=o("LEDConfig"),VXe=o(" (LED model)"),XXe=l(),dm=a("li"),soe=a("strong"),zXe=o("longformer"),QXe=o(" \u2014 "),hk=a("a"),WXe=o("LongformerConfig"),HXe=o(" (Longformer model)"),UXe=l(),cm=a("li"),loe=a("strong"),JXe=o("luke"),YXe=o(" \u2014 "),pk=a("a"),KXe=o("LukeConfig"),ZXe=o(" (LUKE model)"),eze=l(),fm=a("li"),ioe=a("strong"),oze=o("lxmert"),rze=o(" \u2014 "),uk=a("a"),tze=o("LxmertConfig"),aze=o(" (LXMERT model)"),nze=l(),mm=a("li"),doe=a("strong"),sze=o("m2m_100"),lze=o(" \u2014 "),_k=a("a"),ize=o("M2M100Config"),dze=o(" (M2M100 model)"),cze=l(),gm=a("li"),coe=a("strong"),fze=o("marian"),mze=o(" \u2014 "),bk=a("a"),gze=o("MarianConfig"),hze=o(" (Marian model)"),pze=l(),hm=a("li"),foe=a("strong"),uze=o("maskformer"),_ze=o(" \u2014 "),vk=a("a"),bze=o("MaskFormerConfig"),vze=o(" (MaskFormer model)"),Fze=l(),pm=a("li"),moe=a("strong"),Tze=o("mbart"),Mze=o(" \u2014 "),Fk=a("a"),Eze=o("MBartConfig"),Cze=o(" (mBART model)"),wze=l(),um=a("li"),goe=a("strong"),Aze=o("megatron-bert"),yze=o(" \u2014 "),Tk=a("a"),Lze=o("MegatronBertConfig"),xze=o(" (MegatronBert model)"),$ze=l(),_m=a("li"),hoe=a("strong"),kze=o("mobilebert"),Sze=o(" \u2014 "),Mk=a("a"),Rze=o("MobileBertConfig"),Bze=o(" (MobileBERT model)"),Pze=l(),bm=a("li"),poe=a("strong"),Ize=o("mpnet"),qze=o(" \u2014 "),Ek=a("a"),Nze=o("MPNetConfig"),jze=o(" (MPNet model)"),Dze=l(),vm=a("li"),uoe=a("strong"),Gze=o("mt5"),Oze=o(" \u2014 "),Ck=a("a"),Vze=o("MT5Config"),Xze=o(" (mT5 model)"),zze=l(),Fm=a("li"),_oe=a("strong"),Qze=o("nystromformer"),Wze=o(" \u2014 "),wk=a("a"),Hze=o("NystromformerConfig"),Uze=o(" (Nystromformer model)"),Jze=l(),Tm=a("li"),boe=a("strong"),Yze=o("openai-gpt"),Kze=o(" \u2014 "),Ak=a("a"),Zze=o("OpenAIGPTConfig"),eQe=o(" (OpenAI GPT model)"),oQe=l(),Mm=a("li"),voe=a("strong"),rQe=o("opt"),tQe=o(" \u2014 "),yk=a("a"),aQe=o("OPTConfig"),nQe=o(" (OPT model)"),sQe=l(),Em=a("li"),Foe=a("strong"),lQe=o("pegasus"),iQe=o(" \u2014 "),Lk=a("a"),dQe=o("PegasusConfig"),cQe=o(" (Pegasus model)"),fQe=l(),Cm=a("li"),Toe=a("strong"),mQe=o("perceiver"),gQe=o(" \u2014 "),xk=a("a"),hQe=o("PerceiverConfig"),pQe=o(" (Perceiver model)"),uQe=l(),wm=a("li"),Moe=a("strong"),_Qe=o("plbart"),bQe=o(" \u2014 "),$k=a("a"),vQe=o("PLBartConfig"),FQe=o(" (PLBart model)"),TQe=l(),Am=a("li"),Eoe=a("strong"),MQe=o("poolformer"),EQe=o(" \u2014 "),kk=a("a"),CQe=o("PoolFormerConfig"),wQe=o(" (PoolFormer model)"),AQe=l(),ym=a("li"),Coe=a("strong"),yQe=o("prophetnet"),LQe=o(" \u2014 "),Sk=a("a"),xQe=o("ProphetNetConfig"),$Qe=o(" (ProphetNet model)"),kQe=l(),Lm=a("li"),woe=a("strong"),SQe=o("qdqbert"),RQe=o(" \u2014 "),Rk=a("a"),BQe=o("QDQBertConfig"),PQe=o(" (QDQBert model)"),IQe=l(),xm=a("li"),Aoe=a("strong"),qQe=o("rag"),NQe=o(" \u2014 "),Bk=a("a"),jQe=o("RagConfig"),DQe=o(" (RAG model)"),GQe=l(),$m=a("li"),yoe=a("strong"),OQe=o("realm"),VQe=o(" \u2014 "),Pk=a("a"),XQe=o("RealmConfig"),zQe=o(" (Realm model)"),QQe=l(),km=a("li"),Loe=a("strong"),WQe=o("reformer"),HQe=o(" \u2014 "),Ik=a("a"),UQe=o("ReformerConfig"),JQe=o(" (Reformer model)"),YQe=l(),Sm=a("li"),xoe=a("strong"),KQe=o("regnet"),ZQe=o(" \u2014 "),qk=a("a"),eWe=o("RegNetConfig"),oWe=o(" (RegNet model)"),rWe=l(),Rm=a("li"),$oe=a("strong"),tWe=o("rembert"),aWe=o(" \u2014 "),Nk=a("a"),nWe=o("RemBertConfig"),sWe=o(" (RemBERT model)"),lWe=l(),Bm=a("li"),koe=a("strong"),iWe=o("resnet"),dWe=o(" \u2014 "),jk=a("a"),cWe=o("ResNetConfig"),fWe=o(" (ResNet model)"),mWe=l(),Pm=a("li"),Soe=a("strong"),gWe=o("retribert"),hWe=o(" \u2014 "),Dk=a("a"),pWe=o("RetriBertConfig"),uWe=o(" (RetriBERT model)"),_We=l(),Im=a("li"),Roe=a("strong"),bWe=o("roberta"),vWe=o(" \u2014 "),Gk=a("a"),FWe=o("RobertaConfig"),TWe=o(" (RoBERTa model)"),MWe=l(),qm=a("li"),Boe=a("strong"),EWe=o("roformer"),CWe=o(" \u2014 "),Ok=a("a"),wWe=o("RoFormerConfig"),AWe=o(" (RoFormer model)"),yWe=l(),Nm=a("li"),Poe=a("strong"),LWe=o("segformer"),xWe=o(" \u2014 "),Vk=a("a"),$We=o("SegformerConfig"),kWe=o(" (SegFormer model)"),SWe=l(),jm=a("li"),Ioe=a("strong"),RWe=o("sew"),BWe=o(" \u2014 "),Xk=a("a"),PWe=o("SEWConfig"),IWe=o(" (SEW model)"),qWe=l(),Dm=a("li"),qoe=a("strong"),NWe=o("sew-d"),jWe=o(" \u2014 "),zk=a("a"),DWe=o("SEWDConfig"),GWe=o(" (SEW-D model)"),OWe=l(),Gm=a("li"),Noe=a("strong"),VWe=o("speech-encoder-decoder"),XWe=o(" \u2014 "),Qk=a("a"),zWe=o("SpeechEncoderDecoderConfig"),QWe=o(" (Speech Encoder decoder model)"),WWe=l(),Om=a("li"),joe=a("strong"),HWe=o("speech_to_text"),UWe=o(" \u2014 "),Wk=a("a"),JWe=o("Speech2TextConfig"),YWe=o(" (Speech2Text model)"),KWe=l(),Vm=a("li"),Doe=a("strong"),ZWe=o("speech_to_text_2"),eHe=o(" \u2014 "),Hk=a("a"),oHe=o("Speech2Text2Config"),rHe=o(" (Speech2Text2 model)"),tHe=l(),Xm=a("li"),Goe=a("strong"),aHe=o("splinter"),nHe=o(" \u2014 "),Uk=a("a"),sHe=o("SplinterConfig"),lHe=o(" (Splinter model)"),iHe=l(),zm=a("li"),Ooe=a("strong"),dHe=o("squeezebert"),cHe=o(" \u2014 "),Jk=a("a"),fHe=o("SqueezeBertConfig"),mHe=o(" (SqueezeBERT model)"),gHe=l(),Qm=a("li"),Voe=a("strong"),hHe=o("swin"),pHe=o(" \u2014 "),Yk=a("a"),uHe=o("SwinConfig"),_He=o(" (Swin model)"),bHe=l(),Wm=a("li"),Xoe=a("strong"),vHe=o("t5"),FHe=o(" \u2014 "),Kk=a("a"),THe=o("T5Config"),MHe=o(" (T5 model)"),EHe=l(),Hm=a("li"),zoe=a("strong"),CHe=o("tapas"),wHe=o(" \u2014 "),Zk=a("a"),AHe=o("TapasConfig"),yHe=o(" (TAPAS model)"),LHe=l(),Um=a("li"),Qoe=a("strong"),xHe=o("tapex"),$He=o(" \u2014 "),eS=a("a"),kHe=o("BartConfig"),SHe=o(" (TAPEX model)"),RHe=l(),Jm=a("li"),Woe=a("strong"),BHe=o("transfo-xl"),PHe=o(" \u2014 "),oS=a("a"),IHe=o("TransfoXLConfig"),qHe=o(" (Transformer-XL model)"),NHe=l(),Ym=a("li"),Hoe=a("strong"),jHe=o("trocr"),DHe=o(" \u2014 "),rS=a("a"),GHe=o("TrOCRConfig"),OHe=o(" (TrOCR model)"),VHe=l(),Km=a("li"),Uoe=a("strong"),XHe=o("unispeech"),zHe=o(" \u2014 "),tS=a("a"),QHe=o("UniSpeechConfig"),WHe=o(" (UniSpeech model)"),HHe=l(),Zm=a("li"),Joe=a("strong"),UHe=o("unispeech-sat"),JHe=o(" \u2014 "),aS=a("a"),YHe=o("UniSpeechSatConfig"),KHe=o(" (UniSpeechSat model)"),ZHe=l(),eg=a("li"),Yoe=a("strong"),eUe=o("van"),oUe=o(" \u2014 "),nS=a("a"),rUe=o("VanConfig"),tUe=o(" (VAN model)"),aUe=l(),og=a("li"),Koe=a("strong"),nUe=o("vilt"),sUe=o(" \u2014 "),sS=a("a"),lUe=o("ViltConfig"),iUe=o(" (ViLT model)"),dUe=l(),rg=a("li"),Zoe=a("strong"),cUe=o("vision-encoder-decoder"),fUe=o(" \u2014 "),lS=a("a"),mUe=o("VisionEncoderDecoderConfig"),gUe=o(" (Vision Encoder decoder model)"),hUe=l(),tg=a("li"),ere=a("strong"),pUe=o("vision-text-dual-encoder"),uUe=o(" \u2014 "),iS=a("a"),_Ue=o("VisionTextDualEncoderConfig"),bUe=o(" (VisionTextDualEncoder model)"),vUe=l(),ag=a("li"),ore=a("strong"),FUe=o("visual_bert"),TUe=o(" \u2014 "),dS=a("a"),MUe=o("VisualBertConfig"),EUe=o(" (VisualBert model)"),CUe=l(),ng=a("li"),rre=a("strong"),wUe=o("vit"),AUe=o(" \u2014 "),cS=a("a"),yUe=o("ViTConfig"),LUe=o(" (ViT model)"),xUe=l(),sg=a("li"),tre=a("strong"),$Ue=o("vit_mae"),kUe=o(" \u2014 "),fS=a("a"),SUe=o("ViTMAEConfig"),RUe=o(" (ViTMAE model)"),BUe=l(),lg=a("li"),are=a("strong"),PUe=o("wav2vec2"),IUe=o(" \u2014 "),mS=a("a"),qUe=o("Wav2Vec2Config"),NUe=o(" (Wav2Vec2 model)"),jUe=l(),ig=a("li"),nre=a("strong"),DUe=o("wavlm"),GUe=o(" \u2014 "),gS=a("a"),OUe=o("WavLMConfig"),VUe=o(" (WavLM model)"),XUe=l(),dg=a("li"),sre=a("strong"),zUe=o("xglm"),QUe=o(" \u2014 "),hS=a("a"),WUe=o("XGLMConfig"),HUe=o(" (XGLM model)"),UUe=l(),cg=a("li"),lre=a("strong"),JUe=o("xlm"),YUe=o(" \u2014 "),pS=a("a"),KUe=o("XLMConfig"),ZUe=o(" (XLM model)"),eJe=l(),fg=a("li"),ire=a("strong"),oJe=o("xlm-prophetnet"),rJe=o(" \u2014 "),uS=a("a"),tJe=o("XLMProphetNetConfig"),aJe=o(" (XLMProphetNet model)"),nJe=l(),mg=a("li"),dre=a("strong"),sJe=o("xlm-roberta"),lJe=o(" \u2014 "),_S=a("a"),iJe=o("XLMRobertaConfig"),dJe=o(" (XLM-RoBERTa model)"),cJe=l(),gg=a("li"),cre=a("strong"),fJe=o("xlm-roberta-xl"),mJe=o(" \u2014 "),bS=a("a"),gJe=o("XLMRobertaXLConfig"),hJe=o(" (XLM-RoBERTa-XL model)"),pJe=l(),hg=a("li"),fre=a("strong"),uJe=o("xlnet"),_Je=o(" \u2014 "),vS=a("a"),bJe=o("XLNetConfig"),vJe=o(" (XLNet model)"),FJe=l(),pg=a("li"),mre=a("strong"),TJe=o("yolos"),MJe=o(" \u2014 "),FS=a("a"),EJe=o("YolosConfig"),CJe=o(" (YOLOS model)"),wJe=l(),ug=a("li"),gre=a("strong"),AJe=o("yoso"),yJe=o(" \u2014 "),TS=a("a"),LJe=o("YosoConfig"),xJe=o(" (YOSO model)"),$Je=l(),F(_g.$$.fragment),kJe=l(),bg=a("div"),F(l0.$$.fragment),SJe=l(),hre=a("p"),RJe=o("Register a new configuration for this class."),iIe=l(),_i=a("h2"),vg=a("a"),pre=a("span"),F(i0.$$.fragment),BJe=l(),ure=a("span"),PJe=o("AutoTokenizer"),dIe=l(),wo=a("div"),F(d0.$$.fragment),IJe=l(),c0=a("p"),qJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MS=a("a"),NJe=o("AutoTokenizer.from_pretrained()"),jJe=o(" class method."),DJe=l(),f0=a("p"),GJe=o("This class cannot be instantiated directly using "),_re=a("code"),OJe=o("__init__()"),VJe=o(" (throws an error)."),XJe=l(),Cr=a("div"),F(m0.$$.fragment),zJe=l(),bre=a("p"),QJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WJe=l(),Ca=a("p"),HJe=o("The tokenizer class to instantiate is selected based on the "),vre=a("code"),UJe=o("model_type"),JJe=o(` property of the config object (either
passed as an argument or loaded from `),Fre=a("code"),YJe=o("pretrained_model_name_or_path"),KJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tre=a("code"),ZJe=o("pretrained_model_name_or_path"),eYe=o(":"),oYe=l(),k=a("ul"),kn=a("li"),Mre=a("strong"),rYe=o("albert"),tYe=o(" \u2014 "),ES=a("a"),aYe=o("AlbertTokenizer"),nYe=o(" or "),CS=a("a"),sYe=o("AlbertTokenizerFast"),lYe=o(" (ALBERT model)"),iYe=l(),Sn=a("li"),Ere=a("strong"),dYe=o("bart"),cYe=o(" \u2014 "),wS=a("a"),fYe=o("BartTokenizer"),mYe=o(" or "),AS=a("a"),gYe=o("BartTokenizerFast"),hYe=o(" (BART model)"),pYe=l(),Rn=a("li"),Cre=a("strong"),uYe=o("barthez"),_Ye=o(" \u2014 "),yS=a("a"),bYe=o("BarthezTokenizer"),vYe=o(" or "),LS=a("a"),FYe=o("BarthezTokenizerFast"),TYe=o(" (BARThez model)"),MYe=l(),Fg=a("li"),wre=a("strong"),EYe=o("bartpho"),CYe=o(" \u2014 "),xS=a("a"),wYe=o("BartphoTokenizer"),AYe=o(" (BARTpho model)"),yYe=l(),Bn=a("li"),Are=a("strong"),LYe=o("bert"),xYe=o(" \u2014 "),$S=a("a"),$Ye=o("BertTokenizer"),kYe=o(" or "),kS=a("a"),SYe=o("BertTokenizerFast"),RYe=o(" (BERT model)"),BYe=l(),Tg=a("li"),yre=a("strong"),PYe=o("bert-generation"),IYe=o(" \u2014 "),SS=a("a"),qYe=o("BertGenerationTokenizer"),NYe=o(" (Bert Generation model)"),jYe=l(),Mg=a("li"),Lre=a("strong"),DYe=o("bert-japanese"),GYe=o(" \u2014 "),RS=a("a"),OYe=o("BertJapaneseTokenizer"),VYe=o(" (BertJapanese model)"),XYe=l(),Eg=a("li"),xre=a("strong"),zYe=o("bertweet"),QYe=o(" \u2014 "),BS=a("a"),WYe=o("BertweetTokenizer"),HYe=o(" (Bertweet model)"),UYe=l(),Pn=a("li"),$re=a("strong"),JYe=o("big_bird"),YYe=o(" \u2014 "),PS=a("a"),KYe=o("BigBirdTokenizer"),ZYe=o(" or "),IS=a("a"),eKe=o("BigBirdTokenizerFast"),oKe=o(" (BigBird model)"),rKe=l(),In=a("li"),kre=a("strong"),tKe=o("bigbird_pegasus"),aKe=o(" \u2014 "),qS=a("a"),nKe=o("PegasusTokenizer"),sKe=o(" or "),NS=a("a"),lKe=o("PegasusTokenizerFast"),iKe=o(" (BigBirdPegasus model)"),dKe=l(),qn=a("li"),Sre=a("strong"),cKe=o("blenderbot"),fKe=o(" \u2014 "),jS=a("a"),mKe=o("BlenderbotTokenizer"),gKe=o(" or "),DS=a("a"),hKe=o("BlenderbotTokenizerFast"),pKe=o(" (Blenderbot model)"),uKe=l(),Cg=a("li"),Rre=a("strong"),_Ke=o("blenderbot-small"),bKe=o(" \u2014 "),GS=a("a"),vKe=o("BlenderbotSmallTokenizer"),FKe=o(" (BlenderbotSmall model)"),TKe=l(),wg=a("li"),Bre=a("strong"),MKe=o("byt5"),EKe=o(" \u2014 "),OS=a("a"),CKe=o("ByT5Tokenizer"),wKe=o(" (ByT5 model)"),AKe=l(),Nn=a("li"),Pre=a("strong"),yKe=o("camembert"),LKe=o(" \u2014 "),VS=a("a"),xKe=o("CamembertTokenizer"),$Ke=o(" or "),XS=a("a"),kKe=o("CamembertTokenizerFast"),SKe=o(" (CamemBERT model)"),RKe=l(),Ag=a("li"),Ire=a("strong"),BKe=o("canine"),PKe=o(" \u2014 "),zS=a("a"),IKe=o("CanineTokenizer"),qKe=o(" (Canine model)"),NKe=l(),jn=a("li"),qre=a("strong"),jKe=o("clip"),DKe=o(" \u2014 "),QS=a("a"),GKe=o("CLIPTokenizer"),OKe=o(" or "),WS=a("a"),VKe=o("CLIPTokenizerFast"),XKe=o(" (CLIP model)"),zKe=l(),Dn=a("li"),Nre=a("strong"),QKe=o("convbert"),WKe=o(" \u2014 "),HS=a("a"),HKe=o("ConvBertTokenizer"),UKe=o(" or "),US=a("a"),JKe=o("ConvBertTokenizerFast"),YKe=o(" (ConvBERT model)"),KKe=l(),Gn=a("li"),jre=a("strong"),ZKe=o("cpm"),eZe=o(" \u2014 "),JS=a("a"),oZe=o("CpmTokenizer"),rZe=o(" or "),YS=a("a"),tZe=o("CpmTokenizerFast"),aZe=o(" (CPM model)"),nZe=l(),yg=a("li"),Dre=a("strong"),sZe=o("ctrl"),lZe=o(" \u2014 "),KS=a("a"),iZe=o("CTRLTokenizer"),dZe=o(" (CTRL model)"),cZe=l(),On=a("li"),Gre=a("strong"),fZe=o("data2vec-text"),mZe=o(" \u2014 "),ZS=a("a"),gZe=o("RobertaTokenizer"),hZe=o(" or "),eR=a("a"),pZe=o("RobertaTokenizerFast"),uZe=o(" (Data2VecText model)"),_Ze=l(),Vn=a("li"),Ore=a("strong"),bZe=o("deberta"),vZe=o(" \u2014 "),oR=a("a"),FZe=o("DebertaTokenizer"),TZe=o(" or "),rR=a("a"),MZe=o("DebertaTokenizerFast"),EZe=o(" (DeBERTa model)"),CZe=l(),Xn=a("li"),Vre=a("strong"),wZe=o("deberta-v2"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("DebertaV2Tokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("DebertaV2TokenizerFast"),$Ze=o(" (DeBERTa-v2 model)"),kZe=l(),zn=a("li"),Xre=a("strong"),SZe=o("distilbert"),RZe=o(" \u2014 "),nR=a("a"),BZe=o("DistilBertTokenizer"),PZe=o(" or "),sR=a("a"),IZe=o("DistilBertTokenizerFast"),qZe=o(" (DistilBERT model)"),NZe=l(),Qn=a("li"),zre=a("strong"),jZe=o("dpr"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("DPRQuestionEncoderTokenizer"),OZe=o(" or "),iR=a("a"),VZe=o("DPRQuestionEncoderTokenizerFast"),XZe=o(" (DPR model)"),zZe=l(),Wn=a("li"),Qre=a("strong"),QZe=o("electra"),WZe=o(" \u2014 "),dR=a("a"),HZe=o("ElectraTokenizer"),UZe=o(" or "),cR=a("a"),JZe=o("ElectraTokenizerFast"),YZe=o(" (ELECTRA model)"),KZe=l(),Lg=a("li"),Wre=a("strong"),ZZe=o("flaubert"),eeo=o(" \u2014 "),fR=a("a"),oeo=o("FlaubertTokenizer"),reo=o(" (FlauBERT model)"),teo=l(),Hn=a("li"),Hre=a("strong"),aeo=o("fnet"),neo=o(" \u2014 "),mR=a("a"),seo=o("FNetTokenizer"),leo=o(" or "),gR=a("a"),ieo=o("FNetTokenizerFast"),deo=o(" (FNet model)"),ceo=l(),xg=a("li"),Ure=a("strong"),feo=o("fsmt"),meo=o(" \u2014 "),hR=a("a"),geo=o("FSMTTokenizer"),heo=o(" (FairSeq Machine-Translation model)"),peo=l(),Un=a("li"),Jre=a("strong"),ueo=o("funnel"),_eo=o(" \u2014 "),pR=a("a"),beo=o("FunnelTokenizer"),veo=o(" or "),uR=a("a"),Feo=o("FunnelTokenizerFast"),Teo=o(" (Funnel Transformer model)"),Meo=l(),Jn=a("li"),Yre=a("strong"),Eeo=o("gpt2"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("GPT2Tokenizer"),Aeo=o(" or "),bR=a("a"),yeo=o("GPT2TokenizerFast"),Leo=o(" (OpenAI GPT-2 model)"),xeo=l(),Yn=a("li"),Kre=a("strong"),$eo=o("gpt_neo"),keo=o(" \u2014 "),vR=a("a"),Seo=o("GPT2Tokenizer"),Reo=o(" or "),FR=a("a"),Beo=o("GPT2TokenizerFast"),Peo=o(" (GPT Neo model)"),Ieo=l(),Kn=a("li"),Zre=a("strong"),qeo=o("gptj"),Neo=o(" \u2014 "),TR=a("a"),jeo=o("GPT2Tokenizer"),Deo=o(" or "),MR=a("a"),Geo=o("GPT2TokenizerFast"),Oeo=o(" (GPT-J model)"),Veo=l(),Zn=a("li"),ete=a("strong"),Xeo=o("herbert"),zeo=o(" \u2014 "),ER=a("a"),Qeo=o("HerbertTokenizer"),Weo=o(" or "),CR=a("a"),Heo=o("HerbertTokenizerFast"),Ueo=o(" (HerBERT model)"),Jeo=l(),$g=a("li"),ote=a("strong"),Yeo=o("hubert"),Keo=o(" \u2014 "),wR=a("a"),Zeo=o("Wav2Vec2CTCTokenizer"),eoo=o(" (Hubert model)"),ooo=l(),es=a("li"),rte=a("strong"),roo=o("ibert"),too=o(" \u2014 "),AR=a("a"),aoo=o("RobertaTokenizer"),noo=o(" or "),yR=a("a"),soo=o("RobertaTokenizerFast"),loo=o(" (I-BERT model)"),ioo=l(),os=a("li"),tte=a("strong"),doo=o("layoutlm"),coo=o(" \u2014 "),LR=a("a"),foo=o("LayoutLMTokenizer"),moo=o(" or "),xR=a("a"),goo=o("LayoutLMTokenizerFast"),hoo=o(" (LayoutLM model)"),poo=l(),rs=a("li"),ate=a("strong"),uoo=o("layoutlmv2"),_oo=o(" \u2014 "),$R=a("a"),boo=o("LayoutLMv2Tokenizer"),voo=o(" or "),kR=a("a"),Foo=o("LayoutLMv2TokenizerFast"),Too=o(" (LayoutLMv2 model)"),Moo=l(),ts=a("li"),nte=a("strong"),Eoo=o("layoutxlm"),Coo=o(" \u2014 "),SR=a("a"),woo=o("LayoutXLMTokenizer"),Aoo=o(" or "),RR=a("a"),yoo=o("LayoutXLMTokenizerFast"),Loo=o(" (LayoutXLM model)"),xoo=l(),as=a("li"),ste=a("strong"),$oo=o("led"),koo=o(" \u2014 "),BR=a("a"),Soo=o("LEDTokenizer"),Roo=o(" or "),PR=a("a"),Boo=o("LEDTokenizerFast"),Poo=o(" (LED model)"),Ioo=l(),ns=a("li"),lte=a("strong"),qoo=o("longformer"),Noo=o(" \u2014 "),IR=a("a"),joo=o("LongformerTokenizer"),Doo=o(" or "),qR=a("a"),Goo=o("LongformerTokenizerFast"),Ooo=o(" (Longformer model)"),Voo=l(),kg=a("li"),ite=a("strong"),Xoo=o("luke"),zoo=o(" \u2014 "),NR=a("a"),Qoo=o("LukeTokenizer"),Woo=o(" (LUKE model)"),Hoo=l(),ss=a("li"),dte=a("strong"),Uoo=o("lxmert"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("LxmertTokenizer"),Koo=o(" or "),DR=a("a"),Zoo=o("LxmertTokenizerFast"),ero=o(" (LXMERT model)"),oro=l(),Sg=a("li"),cte=a("strong"),rro=o("m2m_100"),tro=o(" \u2014 "),GR=a("a"),aro=o("M2M100Tokenizer"),nro=o(" (M2M100 model)"),sro=l(),Rg=a("li"),fte=a("strong"),lro=o("marian"),iro=o(" \u2014 "),OR=a("a"),dro=o("MarianTokenizer"),cro=o(" (Marian model)"),fro=l(),ls=a("li"),mte=a("strong"),mro=o("mbart"),gro=o(" \u2014 "),VR=a("a"),hro=o("MBartTokenizer"),pro=o(" or "),XR=a("a"),uro=o("MBartTokenizerFast"),_ro=o(" (mBART model)"),bro=l(),is=a("li"),gte=a("strong"),vro=o("mbart50"),Fro=o(" \u2014 "),zR=a("a"),Tro=o("MBart50Tokenizer"),Mro=o(" or "),QR=a("a"),Ero=o("MBart50TokenizerFast"),Cro=o(" (mBART-50 model)"),wro=l(),ds=a("li"),hte=a("strong"),Aro=o("megatron-bert"),yro=o(" \u2014 "),WR=a("a"),Lro=o("BertTokenizer"),xro=o(" or "),HR=a("a"),$ro=o("BertTokenizerFast"),kro=o(" (MegatronBert model)"),Sro=l(),Bg=a("li"),pte=a("strong"),Rro=o("mluke"),Bro=o(" \u2014 "),UR=a("a"),Pro=o("MLukeTokenizer"),Iro=o(" (mLUKE model)"),qro=l(),cs=a("li"),ute=a("strong"),Nro=o("mobilebert"),jro=o(" \u2014 "),JR=a("a"),Dro=o("MobileBertTokenizer"),Gro=o(" or "),YR=a("a"),Oro=o("MobileBertTokenizerFast"),Vro=o(" (MobileBERT model)"),Xro=l(),fs=a("li"),_te=a("strong"),zro=o("mpnet"),Qro=o(" \u2014 "),KR=a("a"),Wro=o("MPNetTokenizer"),Hro=o(" or "),ZR=a("a"),Uro=o("MPNetTokenizerFast"),Jro=o(" (MPNet model)"),Yro=l(),ms=a("li"),bte=a("strong"),Kro=o("mt5"),Zro=o(" \u2014 "),eB=a("a"),eto=o("MT5Tokenizer"),oto=o(" or "),oB=a("a"),rto=o("MT5TokenizerFast"),tto=o(" (mT5 model)"),ato=l(),gs=a("li"),vte=a("strong"),nto=o("nystromformer"),sto=o(" \u2014 "),rB=a("a"),lto=o("AlbertTokenizer"),ito=o(" or "),tB=a("a"),dto=o("AlbertTokenizerFast"),cto=o(" (Nystromformer model)"),fto=l(),hs=a("li"),Fte=a("strong"),mto=o("openai-gpt"),gto=o(" \u2014 "),aB=a("a"),hto=o("OpenAIGPTTokenizer"),pto=o(" or "),nB=a("a"),uto=o("OpenAIGPTTokenizerFast"),_to=o(" (OpenAI GPT model)"),bto=l(),Pg=a("li"),Tte=a("strong"),vto=o("opt"),Fto=o(" \u2014 "),sB=a("a"),Tto=o("GPT2Tokenizer"),Mto=o(" (OPT model)"),Eto=l(),ps=a("li"),Mte=a("strong"),Cto=o("pegasus"),wto=o(" \u2014 "),lB=a("a"),Ato=o("PegasusTokenizer"),yto=o(" or "),iB=a("a"),Lto=o("PegasusTokenizerFast"),xto=o(" (Pegasus model)"),$to=l(),Ig=a("li"),Ete=a("strong"),kto=o("perceiver"),Sto=o(" \u2014 "),dB=a("a"),Rto=o("PerceiverTokenizer"),Bto=o(" (Perceiver model)"),Pto=l(),qg=a("li"),Cte=a("strong"),Ito=o("phobert"),qto=o(" \u2014 "),cB=a("a"),Nto=o("PhobertTokenizer"),jto=o(" (PhoBERT model)"),Dto=l(),Ng=a("li"),wte=a("strong"),Gto=o("plbart"),Oto=o(" \u2014 "),fB=a("a"),Vto=o("PLBartTokenizer"),Xto=o(" (PLBart model)"),zto=l(),jg=a("li"),Ate=a("strong"),Qto=o("prophetnet"),Wto=o(" \u2014 "),mB=a("a"),Hto=o("ProphetNetTokenizer"),Uto=o(" (ProphetNet model)"),Jto=l(),us=a("li"),yte=a("strong"),Yto=o("qdqbert"),Kto=o(" \u2014 "),gB=a("a"),Zto=o("BertTokenizer"),eao=o(" or "),hB=a("a"),oao=o("BertTokenizerFast"),rao=o(" (QDQBert model)"),tao=l(),Dg=a("li"),Lte=a("strong"),aao=o("rag"),nao=o(" \u2014 "),pB=a("a"),sao=o("RagTokenizer"),lao=o(" (RAG model)"),iao=l(),_s=a("li"),xte=a("strong"),dao=o("realm"),cao=o(" \u2014 "),uB=a("a"),fao=o("RealmTokenizer"),mao=o(" or "),_B=a("a"),gao=o("RealmTokenizerFast"),hao=o(" (Realm model)"),pao=l(),bs=a("li"),$te=a("strong"),uao=o("reformer"),_ao=o(" \u2014 "),bB=a("a"),bao=o("ReformerTokenizer"),vao=o(" or "),vB=a("a"),Fao=o("ReformerTokenizerFast"),Tao=o(" (Reformer model)"),Mao=l(),vs=a("li"),kte=a("strong"),Eao=o("rembert"),Cao=o(" \u2014 "),FB=a("a"),wao=o("RemBertTokenizer"),Aao=o(" or "),TB=a("a"),yao=o("RemBertTokenizerFast"),Lao=o(" (RemBERT model)"),xao=l(),Fs=a("li"),Ste=a("strong"),$ao=o("retribert"),kao=o(" \u2014 "),MB=a("a"),Sao=o("RetriBertTokenizer"),Rao=o(" or "),EB=a("a"),Bao=o("RetriBertTokenizerFast"),Pao=o(" (RetriBERT model)"),Iao=l(),Ts=a("li"),Rte=a("strong"),qao=o("roberta"),Nao=o(" \u2014 "),CB=a("a"),jao=o("RobertaTokenizer"),Dao=o(" or "),wB=a("a"),Gao=o("RobertaTokenizerFast"),Oao=o(" (RoBERTa model)"),Vao=l(),Ms=a("li"),Bte=a("strong"),Xao=o("roformer"),zao=o(" \u2014 "),AB=a("a"),Qao=o("RoFormerTokenizer"),Wao=o(" or "),yB=a("a"),Hao=o("RoFormerTokenizerFast"),Uao=o(" (RoFormer model)"),Jao=l(),Gg=a("li"),Pte=a("strong"),Yao=o("speech_to_text"),Kao=o(" \u2014 "),LB=a("a"),Zao=o("Speech2TextTokenizer"),eno=o(" (Speech2Text model)"),ono=l(),Og=a("li"),Ite=a("strong"),rno=o("speech_to_text_2"),tno=o(" \u2014 "),xB=a("a"),ano=o("Speech2Text2Tokenizer"),nno=o(" (Speech2Text2 model)"),sno=l(),Es=a("li"),qte=a("strong"),lno=o("splinter"),ino=o(" \u2014 "),$B=a("a"),dno=o("SplinterTokenizer"),cno=o(" or "),kB=a("a"),fno=o("SplinterTokenizerFast"),mno=o(" (Splinter model)"),gno=l(),Cs=a("li"),Nte=a("strong"),hno=o("squeezebert"),pno=o(" \u2014 "),SB=a("a"),uno=o("SqueezeBertTokenizer"),_no=o(" or "),RB=a("a"),bno=o("SqueezeBertTokenizerFast"),vno=o(" (SqueezeBERT model)"),Fno=l(),ws=a("li"),jte=a("strong"),Tno=o("t5"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("T5Tokenizer"),Cno=o(" or "),PB=a("a"),wno=o("T5TokenizerFast"),Ano=o(" (T5 model)"),yno=l(),Vg=a("li"),Dte=a("strong"),Lno=o("tapas"),xno=o(" \u2014 "),IB=a("a"),$no=o("TapasTokenizer"),kno=o(" (TAPAS model)"),Sno=l(),Xg=a("li"),Gte=a("strong"),Rno=o("tapex"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("TapexTokenizer"),Ino=o(" (TAPEX model)"),qno=l(),zg=a("li"),Ote=a("strong"),Nno=o("transfo-xl"),jno=o(" \u2014 "),NB=a("a"),Dno=o("TransfoXLTokenizer"),Gno=o(" (Transformer-XL model)"),Ono=l(),As=a("li"),Vte=a("strong"),Vno=o("visual_bert"),Xno=o(" \u2014 "),jB=a("a"),zno=o("BertTokenizer"),Qno=o(" or "),DB=a("a"),Wno=o("BertTokenizerFast"),Hno=o(" (VisualBert model)"),Uno=l(),Qg=a("li"),Xte=a("strong"),Jno=o("wav2vec2"),Yno=o(" \u2014 "),GB=a("a"),Kno=o("Wav2Vec2CTCTokenizer"),Zno=o(" (Wav2Vec2 model)"),eso=l(),Wg=a("li"),zte=a("strong"),oso=o("wav2vec2_phoneme"),rso=o(" \u2014 "),OB=a("a"),tso=o("Wav2Vec2PhonemeCTCTokenizer"),aso=o(" (Wav2Vec2Phoneme model)"),nso=l(),ys=a("li"),Qte=a("strong"),sso=o("xglm"),lso=o(" \u2014 "),VB=a("a"),iso=o("XGLMTokenizer"),dso=o(" or "),XB=a("a"),cso=o("XGLMTokenizerFast"),fso=o(" (XGLM model)"),mso=l(),Hg=a("li"),Wte=a("strong"),gso=o("xlm"),hso=o(" \u2014 "),zB=a("a"),pso=o("XLMTokenizer"),uso=o(" (XLM model)"),_so=l(),Ug=a("li"),Hte=a("strong"),bso=o("xlm-prophetnet"),vso=o(" \u2014 "),QB=a("a"),Fso=o("XLMProphetNetTokenizer"),Tso=o(" (XLMProphetNet model)"),Mso=l(),Ls=a("li"),Ute=a("strong"),Eso=o("xlm-roberta"),Cso=o(" \u2014 "),WB=a("a"),wso=o("XLMRobertaTokenizer"),Aso=o(" or "),HB=a("a"),yso=o("XLMRobertaTokenizerFast"),Lso=o(" (XLM-RoBERTa model)"),xso=l(),xs=a("li"),Jte=a("strong"),$so=o("xlm-roberta-xl"),kso=o(" \u2014 "),UB=a("a"),Sso=o("RobertaTokenizer"),Rso=o(" or "),JB=a("a"),Bso=o("RobertaTokenizerFast"),Pso=o(" (XLM-RoBERTa-XL model)"),Iso=l(),$s=a("li"),Yte=a("strong"),qso=o("xlnet"),Nso=o(" \u2014 "),YB=a("a"),jso=o("XLNetTokenizer"),Dso=o(" or "),KB=a("a"),Gso=o("XLNetTokenizerFast"),Oso=o(" (XLNet model)"),Vso=l(),ks=a("li"),Kte=a("strong"),Xso=o("yoso"),zso=o(" \u2014 "),ZB=a("a"),Qso=o("AlbertTokenizer"),Wso=o(" or "),eP=a("a"),Hso=o("AlbertTokenizerFast"),Uso=o(" (YOSO model)"),Jso=l(),F(Jg.$$.fragment),Yso=l(),Yg=a("div"),F(g0.$$.fragment),Kso=l(),Zte=a("p"),Zso=o("Register a new tokenizer in this mapping."),cIe=l(),bi=a("h2"),Kg=a("a"),eae=a("span"),F(h0.$$.fragment),elo=l(),oae=a("span"),olo=o("AutoFeatureExtractor"),fIe=l(),Ao=a("div"),F(p0.$$.fragment),rlo=l(),u0=a("p"),tlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oP=a("a"),alo=o("AutoFeatureExtractor.from_pretrained()"),nlo=o(" class method."),slo=l(),_0=a("p"),llo=o("This class cannot be instantiated directly using "),rae=a("code"),ilo=o("__init__()"),dlo=o(" (throws an error)."),clo=l(),Qe=a("div"),F(b0.$$.fragment),flo=l(),tae=a("p"),mlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),glo=l(),wa=a("p"),hlo=o("The feature extractor class to instantiate is selected based on the "),aae=a("code"),plo=o("model_type"),ulo=o(` property of the config object
(either passed as an argument or loaded from `),nae=a("code"),_lo=o("pretrained_model_name_or_path"),blo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sae=a("code"),vlo=o("pretrained_model_name_or_path"),Flo=o(":"),Tlo=l(),oe=a("ul"),Zg=a("li"),lae=a("strong"),Mlo=o("beit"),Elo=o(" \u2014 "),rP=a("a"),Clo=o("BeitFeatureExtractor"),wlo=o(" (BEiT model)"),Alo=l(),eh=a("li"),iae=a("strong"),ylo=o("clip"),Llo=o(" \u2014 "),tP=a("a"),xlo=o("CLIPFeatureExtractor"),$lo=o(" (CLIP model)"),klo=l(),oh=a("li"),dae=a("strong"),Slo=o("convnext"),Rlo=o(" \u2014 "),aP=a("a"),Blo=o("ConvNextFeatureExtractor"),Plo=o(" (ConvNext model)"),Ilo=l(),rh=a("li"),cae=a("strong"),qlo=o("data2vec-audio"),Nlo=o(" \u2014 "),nP=a("a"),jlo=o("Wav2Vec2FeatureExtractor"),Dlo=o(" (Data2VecAudio model)"),Glo=l(),th=a("li"),fae=a("strong"),Olo=o("data2vec-vision"),Vlo=o(" \u2014 "),sP=a("a"),Xlo=o("BeitFeatureExtractor"),zlo=o(" (Data2VecVision model)"),Qlo=l(),ah=a("li"),mae=a("strong"),Wlo=o("deit"),Hlo=o(" \u2014 "),lP=a("a"),Ulo=o("DeiTFeatureExtractor"),Jlo=o(" (DeiT model)"),Ylo=l(),nh=a("li"),gae=a("strong"),Klo=o("detr"),Zlo=o(" \u2014 "),iP=a("a"),eio=o("DetrFeatureExtractor"),oio=o(" (DETR model)"),rio=l(),sh=a("li"),hae=a("strong"),tio=o("dpt"),aio=o(" \u2014 "),dP=a("a"),nio=o("DPTFeatureExtractor"),sio=o(" (DPT model)"),lio=l(),lh=a("li"),pae=a("strong"),iio=o("flava"),dio=o(" \u2014 "),cP=a("a"),cio=o("FlavaFeatureExtractor"),fio=o(" (Flava model)"),mio=l(),ih=a("li"),uae=a("strong"),gio=o("glpn"),hio=o(" \u2014 "),fP=a("a"),pio=o("GLPNFeatureExtractor"),uio=o(" (GLPN model)"),_io=l(),dh=a("li"),_ae=a("strong"),bio=o("hubert"),vio=o(" \u2014 "),mP=a("a"),Fio=o("Wav2Vec2FeatureExtractor"),Tio=o(" (Hubert model)"),Mio=l(),ch=a("li"),bae=a("strong"),Eio=o("layoutlmv2"),Cio=o(" \u2014 "),gP=a("a"),wio=o("LayoutLMv2FeatureExtractor"),Aio=o(" (LayoutLMv2 model)"),yio=l(),fh=a("li"),vae=a("strong"),Lio=o("maskformer"),xio=o(" \u2014 "),hP=a("a"),$io=o("MaskFormerFeatureExtractor"),kio=o(" (MaskFormer model)"),Sio=l(),mh=a("li"),Fae=a("strong"),Rio=o("perceiver"),Bio=o(" \u2014 "),pP=a("a"),Pio=o("PerceiverFeatureExtractor"),Iio=o(" (Perceiver model)"),qio=l(),gh=a("li"),Tae=a("strong"),Nio=o("poolformer"),jio=o(" \u2014 "),uP=a("a"),Dio=o("PoolFormerFeatureExtractor"),Gio=o(" (PoolFormer model)"),Oio=l(),hh=a("li"),Mae=a("strong"),Vio=o("regnet"),Xio=o(" \u2014 "),_P=a("a"),zio=o("ConvNextFeatureExtractor"),Qio=o(" (RegNet model)"),Wio=l(),ph=a("li"),Eae=a("strong"),Hio=o("resnet"),Uio=o(" \u2014 "),bP=a("a"),Jio=o("ConvNextFeatureExtractor"),Yio=o(" (ResNet model)"),Kio=l(),uh=a("li"),Cae=a("strong"),Zio=o("segformer"),edo=o(" \u2014 "),vP=a("a"),odo=o("SegformerFeatureExtractor"),rdo=o(" (SegFormer model)"),tdo=l(),_h=a("li"),wae=a("strong"),ado=o("speech_to_text"),ndo=o(" \u2014 "),FP=a("a"),sdo=o("Speech2TextFeatureExtractor"),ldo=o(" (Speech2Text model)"),ido=l(),bh=a("li"),Aae=a("strong"),ddo=o("swin"),cdo=o(" \u2014 "),TP=a("a"),fdo=o("ViTFeatureExtractor"),mdo=o(" (Swin model)"),gdo=l(),vh=a("li"),yae=a("strong"),hdo=o("van"),pdo=o(" \u2014 "),MP=a("a"),udo=o("ConvNextFeatureExtractor"),_do=o(" (VAN model)"),bdo=l(),Fh=a("li"),Lae=a("strong"),vdo=o("vit"),Fdo=o(" \u2014 "),EP=a("a"),Tdo=o("ViTFeatureExtractor"),Mdo=o(" (ViT model)"),Edo=l(),Th=a("li"),xae=a("strong"),Cdo=o("vit_mae"),wdo=o(" \u2014 "),CP=a("a"),Ado=o("ViTFeatureExtractor"),ydo=o(" (ViTMAE model)"),Ldo=l(),Mh=a("li"),$ae=a("strong"),xdo=o("wav2vec2"),$do=o(" \u2014 "),wP=a("a"),kdo=o("Wav2Vec2FeatureExtractor"),Sdo=o(" (Wav2Vec2 model)"),Rdo=l(),Eh=a("li"),kae=a("strong"),Bdo=o("yolos"),Pdo=o(" \u2014 "),AP=a("a"),Ido=o("YolosFeatureExtractor"),qdo=o(" (YOLOS model)"),Ndo=l(),F(Ch.$$.fragment),jdo=l(),F(wh.$$.fragment),Ddo=l(),Ah=a("div"),F(v0.$$.fragment),Gdo=l(),Sae=a("p"),Odo=o("Register a new feature extractor for this class."),mIe=l(),vi=a("h2"),yh=a("a"),Rae=a("span"),F(F0.$$.fragment),Vdo=l(),Bae=a("span"),Xdo=o("AutoProcessor"),gIe=l(),yo=a("div"),F(T0.$$.fragment),zdo=l(),M0=a("p"),Qdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yP=a("a"),Wdo=o("AutoProcessor.from_pretrained()"),Hdo=o(" class method."),Udo=l(),E0=a("p"),Jdo=o("This class cannot be instantiated directly using "),Pae=a("code"),Ydo=o("__init__()"),Kdo=o(" (throws an error)."),Zdo=l(),We=a("div"),F(C0.$$.fragment),eco=l(),Iae=a("p"),oco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rco=l(),Fi=a("p"),tco=o("The processor class to instantiate is selected based on the "),qae=a("code"),aco=o("model_type"),nco=o(` property of the config object (either
passed as an argument or loaded from `),Nae=a("code"),sco=o("pretrained_model_name_or_path"),lco=o(" if possible):"),ico=l(),be=a("ul"),Lh=a("li"),jae=a("strong"),dco=o("clip"),cco=o(" \u2014 "),LP=a("a"),fco=o("CLIPProcessor"),mco=o(" (CLIP model)"),gco=l(),xh=a("li"),Dae=a("strong"),hco=o("flava"),pco=o(" \u2014 "),Gae=a("code"),uco=o("FLAVAProcessor"),_co=o(" (Flava model)"),bco=l(),$h=a("li"),Oae=a("strong"),vco=o("layoutlmv2"),Fco=o(" \u2014 "),xP=a("a"),Tco=o("LayoutLMv2Processor"),Mco=o(" (LayoutLMv2 model)"),Eco=l(),kh=a("li"),Vae=a("strong"),Cco=o("layoutxlm"),wco=o(" \u2014 "),$P=a("a"),Aco=o("LayoutXLMProcessor"),yco=o(" (LayoutXLM model)"),Lco=l(),Sh=a("li"),Xae=a("strong"),xco=o("sew"),$co=o(" \u2014 "),kP=a("a"),kco=o("Wav2Vec2Processor"),Sco=o(" (SEW model)"),Rco=l(),Rh=a("li"),zae=a("strong"),Bco=o("sew-d"),Pco=o(" \u2014 "),SP=a("a"),Ico=o("Wav2Vec2Processor"),qco=o(" (SEW-D model)"),Nco=l(),Bh=a("li"),Qae=a("strong"),jco=o("speech_to_text"),Dco=o(" \u2014 "),RP=a("a"),Gco=o("Speech2TextProcessor"),Oco=o(" (Speech2Text model)"),Vco=l(),Ph=a("li"),Wae=a("strong"),Xco=o("speech_to_text_2"),zco=o(" \u2014 "),BP=a("a"),Qco=o("Speech2Text2Processor"),Wco=o(" (Speech2Text2 model)"),Hco=l(),Ih=a("li"),Hae=a("strong"),Uco=o("trocr"),Jco=o(" \u2014 "),PP=a("a"),Yco=o("TrOCRProcessor"),Kco=o(" (TrOCR model)"),Zco=l(),qh=a("li"),Uae=a("strong"),efo=o("unispeech"),ofo=o(" \u2014 "),IP=a("a"),rfo=o("Wav2Vec2Processor"),tfo=o(" (UniSpeech model)"),afo=l(),Nh=a("li"),Jae=a("strong"),nfo=o("unispeech-sat"),sfo=o(" \u2014 "),qP=a("a"),lfo=o("Wav2Vec2Processor"),ifo=o(" (UniSpeechSat model)"),dfo=l(),jh=a("li"),Yae=a("strong"),cfo=o("vilt"),ffo=o(" \u2014 "),NP=a("a"),mfo=o("ViltProcessor"),gfo=o(" (ViLT model)"),hfo=l(),Dh=a("li"),Kae=a("strong"),pfo=o("vision-text-dual-encoder"),ufo=o(" \u2014 "),jP=a("a"),_fo=o("VisionTextDualEncoderProcessor"),bfo=o(" (VisionTextDualEncoder model)"),vfo=l(),Gh=a("li"),Zae=a("strong"),Ffo=o("wav2vec2"),Tfo=o(" \u2014 "),DP=a("a"),Mfo=o("Wav2Vec2Processor"),Efo=o(" (Wav2Vec2 model)"),Cfo=l(),Oh=a("li"),ene=a("strong"),wfo=o("wavlm"),Afo=o(" \u2014 "),GP=a("a"),yfo=o("Wav2Vec2Processor"),Lfo=o(" (WavLM model)"),xfo=l(),F(Vh.$$.fragment),$fo=l(),F(Xh.$$.fragment),kfo=l(),zh=a("div"),F(w0.$$.fragment),Sfo=l(),one=a("p"),Rfo=o("Register a new processor for this class."),hIe=l(),Ti=a("h2"),Qh=a("a"),rne=a("span"),F(A0.$$.fragment),Bfo=l(),tne=a("span"),Pfo=o("AutoModel"),pIe=l(),Lo=a("div"),F(y0.$$.fragment),Ifo=l(),Mi=a("p"),qfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OP=a("a"),Nfo=o("from_pretrained()"),jfo=o(" class method or the "),VP=a("a"),Dfo=o("from_config()"),Gfo=o(` class
method.`),Ofo=l(),L0=a("p"),Vfo=o("This class cannot be instantiated directly using "),ane=a("code"),Xfo=o("__init__()"),zfo=o(" (throws an error)."),Qfo=l(),ot=a("div"),F(x0.$$.fragment),Wfo=l(),nne=a("p"),Hfo=o("Instantiates one of the base model classes of the library from a configuration."),Ufo=l(),Ei=a("p"),Jfo=o(`Note:
Loading a model from its configuration file does `),sne=a("strong"),Yfo=o("not"),Kfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XP=a("a"),Zfo=o("from_pretrained()"),emo=o(" to load the model weights."),omo=l(),F(Wh.$$.fragment),rmo=l(),He=a("div"),F($0.$$.fragment),tmo=l(),lne=a("p"),amo=o("Instantiate one of the base model classes of the library from a pretrained model."),nmo=l(),Aa=a("p"),smo=o("The model class to instantiate is selected based on the "),ine=a("code"),lmo=o("model_type"),imo=o(` property of the config object (either
passed as an argument or loaded from `),dne=a("code"),dmo=o("pretrained_model_name_or_path"),cmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=a("code"),fmo=o("pretrained_model_name_or_path"),mmo=o(":"),gmo=l(),x=a("ul"),Hh=a("li"),fne=a("strong"),hmo=o("albert"),pmo=o(" \u2014 "),zP=a("a"),umo=o("AlbertModel"),_mo=o(" (ALBERT model)"),bmo=l(),Uh=a("li"),mne=a("strong"),vmo=o("bart"),Fmo=o(" \u2014 "),QP=a("a"),Tmo=o("BartModel"),Mmo=o(" (BART model)"),Emo=l(),Jh=a("li"),gne=a("strong"),Cmo=o("beit"),wmo=o(" \u2014 "),WP=a("a"),Amo=o("BeitModel"),ymo=o(" (BEiT model)"),Lmo=l(),Yh=a("li"),hne=a("strong"),xmo=o("bert"),$mo=o(" \u2014 "),HP=a("a"),kmo=o("BertModel"),Smo=o(" (BERT model)"),Rmo=l(),Kh=a("li"),pne=a("strong"),Bmo=o("bert-generation"),Pmo=o(" \u2014 "),UP=a("a"),Imo=o("BertGenerationEncoder"),qmo=o(" (Bert Generation model)"),Nmo=l(),Zh=a("li"),une=a("strong"),jmo=o("big_bird"),Dmo=o(" \u2014 "),JP=a("a"),Gmo=o("BigBirdModel"),Omo=o(" (BigBird model)"),Vmo=l(),ep=a("li"),_ne=a("strong"),Xmo=o("bigbird_pegasus"),zmo=o(" \u2014 "),YP=a("a"),Qmo=o("BigBirdPegasusModel"),Wmo=o(" (BigBirdPegasus model)"),Hmo=l(),op=a("li"),bne=a("strong"),Umo=o("blenderbot"),Jmo=o(" \u2014 "),KP=a("a"),Ymo=o("BlenderbotModel"),Kmo=o(" (Blenderbot model)"),Zmo=l(),rp=a("li"),vne=a("strong"),ego=o("blenderbot-small"),ogo=o(" \u2014 "),ZP=a("a"),rgo=o("BlenderbotSmallModel"),tgo=o(" (BlenderbotSmall model)"),ago=l(),tp=a("li"),Fne=a("strong"),ngo=o("camembert"),sgo=o(" \u2014 "),eI=a("a"),lgo=o("CamembertModel"),igo=o(" (CamemBERT model)"),dgo=l(),ap=a("li"),Tne=a("strong"),cgo=o("canine"),fgo=o(" \u2014 "),oI=a("a"),mgo=o("CanineModel"),ggo=o(" (Canine model)"),hgo=l(),np=a("li"),Mne=a("strong"),pgo=o("clip"),ugo=o(" \u2014 "),rI=a("a"),_go=o("CLIPModel"),bgo=o(" (CLIP model)"),vgo=l(),sp=a("li"),Ene=a("strong"),Fgo=o("convbert"),Tgo=o(" \u2014 "),tI=a("a"),Mgo=o("ConvBertModel"),Ego=o(" (ConvBERT model)"),Cgo=l(),lp=a("li"),Cne=a("strong"),wgo=o("convnext"),Ago=o(" \u2014 "),aI=a("a"),ygo=o("ConvNextModel"),Lgo=o(" (ConvNext model)"),xgo=l(),ip=a("li"),wne=a("strong"),$go=o("ctrl"),kgo=o(" \u2014 "),nI=a("a"),Sgo=o("CTRLModel"),Rgo=o(" (CTRL model)"),Bgo=l(),dp=a("li"),Ane=a("strong"),Pgo=o("cvt"),Igo=o(" \u2014 "),sI=a("a"),qgo=o("CvtModel"),Ngo=o(" (CvT model)"),jgo=l(),cp=a("li"),yne=a("strong"),Dgo=o("data2vec-audio"),Ggo=o(" \u2014 "),lI=a("a"),Ogo=o("Data2VecAudioModel"),Vgo=o(" (Data2VecAudio model)"),Xgo=l(),fp=a("li"),Lne=a("strong"),zgo=o("data2vec-text"),Qgo=o(" \u2014 "),iI=a("a"),Wgo=o("Data2VecTextModel"),Hgo=o(" (Data2VecText model)"),Ugo=l(),mp=a("li"),xne=a("strong"),Jgo=o("data2vec-vision"),Ygo=o(" \u2014 "),dI=a("a"),Kgo=o("Data2VecVisionModel"),Zgo=o(" (Data2VecVision model)"),eho=l(),gp=a("li"),$ne=a("strong"),oho=o("deberta"),rho=o(" \u2014 "),cI=a("a"),tho=o("DebertaModel"),aho=o(" (DeBERTa model)"),nho=l(),hp=a("li"),kne=a("strong"),sho=o("deberta-v2"),lho=o(" \u2014 "),fI=a("a"),iho=o("DebertaV2Model"),dho=o(" (DeBERTa-v2 model)"),cho=l(),pp=a("li"),Sne=a("strong"),fho=o("decision_transformer"),mho=o(" \u2014 "),mI=a("a"),gho=o("DecisionTransformerModel"),hho=o(" (Decision Transformer model)"),pho=l(),up=a("li"),Rne=a("strong"),uho=o("deit"),_ho=o(" \u2014 "),gI=a("a"),bho=o("DeiTModel"),vho=o(" (DeiT model)"),Fho=l(),_p=a("li"),Bne=a("strong"),Tho=o("detr"),Mho=o(" \u2014 "),hI=a("a"),Eho=o("DetrModel"),Cho=o(" (DETR model)"),who=l(),bp=a("li"),Pne=a("strong"),Aho=o("distilbert"),yho=o(" \u2014 "),pI=a("a"),Lho=o("DistilBertModel"),xho=o(" (DistilBERT model)"),$ho=l(),vp=a("li"),Ine=a("strong"),kho=o("dpr"),Sho=o(" \u2014 "),uI=a("a"),Rho=o("DPRQuestionEncoder"),Bho=o(" (DPR model)"),Pho=l(),Fp=a("li"),qne=a("strong"),Iho=o("dpt"),qho=o(" \u2014 "),_I=a("a"),Nho=o("DPTModel"),jho=o(" (DPT model)"),Dho=l(),Tp=a("li"),Nne=a("strong"),Gho=o("electra"),Oho=o(" \u2014 "),bI=a("a"),Vho=o("ElectraModel"),Xho=o(" (ELECTRA model)"),zho=l(),Mp=a("li"),jne=a("strong"),Qho=o("flaubert"),Who=o(" \u2014 "),vI=a("a"),Hho=o("FlaubertModel"),Uho=o(" (FlauBERT model)"),Jho=l(),Ep=a("li"),Dne=a("strong"),Yho=o("flava"),Kho=o(" \u2014 "),FI=a("a"),Zho=o("FlavaModel"),epo=o(" (Flava model)"),opo=l(),Cp=a("li"),Gne=a("strong"),rpo=o("fnet"),tpo=o(" \u2014 "),TI=a("a"),apo=o("FNetModel"),npo=o(" (FNet model)"),spo=l(),wp=a("li"),One=a("strong"),lpo=o("fsmt"),ipo=o(" \u2014 "),MI=a("a"),dpo=o("FSMTModel"),cpo=o(" (FairSeq Machine-Translation model)"),fpo=l(),Ss=a("li"),Vne=a("strong"),mpo=o("funnel"),gpo=o(" \u2014 "),EI=a("a"),hpo=o("FunnelModel"),ppo=o(" or "),CI=a("a"),upo=o("FunnelBaseModel"),_po=o(" (Funnel Transformer model)"),bpo=l(),Ap=a("li"),Xne=a("strong"),vpo=o("glpn"),Fpo=o(" \u2014 "),wI=a("a"),Tpo=o("GLPNModel"),Mpo=o(" (GLPN model)"),Epo=l(),yp=a("li"),zne=a("strong"),Cpo=o("gpt2"),wpo=o(" \u2014 "),AI=a("a"),Apo=o("GPT2Model"),ypo=o(" (OpenAI GPT-2 model)"),Lpo=l(),Lp=a("li"),Qne=a("strong"),xpo=o("gpt_neo"),$po=o(" \u2014 "),yI=a("a"),kpo=o("GPTNeoModel"),Spo=o(" (GPT Neo model)"),Rpo=l(),xp=a("li"),Wne=a("strong"),Bpo=o("gptj"),Ppo=o(" \u2014 "),LI=a("a"),Ipo=o("GPTJModel"),qpo=o(" (GPT-J model)"),Npo=l(),$p=a("li"),Hne=a("strong"),jpo=o("hubert"),Dpo=o(" \u2014 "),xI=a("a"),Gpo=o("HubertModel"),Opo=o(" (Hubert model)"),Vpo=l(),kp=a("li"),Une=a("strong"),Xpo=o("ibert"),zpo=o(" \u2014 "),$I=a("a"),Qpo=o("IBertModel"),Wpo=o(" (I-BERT model)"),Hpo=l(),Sp=a("li"),Jne=a("strong"),Upo=o("imagegpt"),Jpo=o(" \u2014 "),kI=a("a"),Ypo=o("ImageGPTModel"),Kpo=o(" (ImageGPT model)"),Zpo=l(),Rp=a("li"),Yne=a("strong"),euo=o("layoutlm"),ouo=o(" \u2014 "),SI=a("a"),ruo=o("LayoutLMModel"),tuo=o(" (LayoutLM model)"),auo=l(),Bp=a("li"),Kne=a("strong"),nuo=o("layoutlmv2"),suo=o(" \u2014 "),RI=a("a"),luo=o("LayoutLMv2Model"),iuo=o(" (LayoutLMv2 model)"),duo=l(),Pp=a("li"),Zne=a("strong"),cuo=o("led"),fuo=o(" \u2014 "),BI=a("a"),muo=o("LEDModel"),guo=o(" (LED model)"),huo=l(),Ip=a("li"),ese=a("strong"),puo=o("longformer"),uuo=o(" \u2014 "),PI=a("a"),_uo=o("LongformerModel"),buo=o(" (Longformer model)"),vuo=l(),qp=a("li"),ose=a("strong"),Fuo=o("luke"),Tuo=o(" \u2014 "),II=a("a"),Muo=o("LukeModel"),Euo=o(" (LUKE model)"),Cuo=l(),Np=a("li"),rse=a("strong"),wuo=o("lxmert"),Auo=o(" \u2014 "),qI=a("a"),yuo=o("LxmertModel"),Luo=o(" (LXMERT model)"),xuo=l(),jp=a("li"),tse=a("strong"),$uo=o("m2m_100"),kuo=o(" \u2014 "),NI=a("a"),Suo=o("M2M100Model"),Ruo=o(" (M2M100 model)"),Buo=l(),Dp=a("li"),ase=a("strong"),Puo=o("marian"),Iuo=o(" \u2014 "),jI=a("a"),quo=o("MarianModel"),Nuo=o(" (Marian model)"),juo=l(),Gp=a("li"),nse=a("strong"),Duo=o("maskformer"),Guo=o(" \u2014 "),DI=a("a"),Ouo=o("MaskFormerModel"),Vuo=o(" (MaskFormer model)"),Xuo=l(),Op=a("li"),sse=a("strong"),zuo=o("mbart"),Quo=o(" \u2014 "),GI=a("a"),Wuo=o("MBartModel"),Huo=o(" (mBART model)"),Uuo=l(),Vp=a("li"),lse=a("strong"),Juo=o("megatron-bert"),Yuo=o(" \u2014 "),OI=a("a"),Kuo=o("MegatronBertModel"),Zuo=o(" (MegatronBert model)"),e_o=l(),Xp=a("li"),ise=a("strong"),o_o=o("mobilebert"),r_o=o(" \u2014 "),VI=a("a"),t_o=o("MobileBertModel"),a_o=o(" (MobileBERT model)"),n_o=l(),zp=a("li"),dse=a("strong"),s_o=o("mpnet"),l_o=o(" \u2014 "),XI=a("a"),i_o=o("MPNetModel"),d_o=o(" (MPNet model)"),c_o=l(),Qp=a("li"),cse=a("strong"),f_o=o("mt5"),m_o=o(" \u2014 "),zI=a("a"),g_o=o("MT5Model"),h_o=o(" (mT5 model)"),p_o=l(),Wp=a("li"),fse=a("strong"),u_o=o("nystromformer"),__o=o(" \u2014 "),QI=a("a"),b_o=o("NystromformerModel"),v_o=o(" (Nystromformer model)"),F_o=l(),Hp=a("li"),mse=a("strong"),T_o=o("openai-gpt"),M_o=o(" \u2014 "),WI=a("a"),E_o=o("OpenAIGPTModel"),C_o=o(" (OpenAI GPT model)"),w_o=l(),Up=a("li"),gse=a("strong"),A_o=o("opt"),y_o=o(" \u2014 "),HI=a("a"),L_o=o("OPTModel"),x_o=o(" (OPT model)"),$_o=l(),Jp=a("li"),hse=a("strong"),k_o=o("pegasus"),S_o=o(" \u2014 "),UI=a("a"),R_o=o("PegasusModel"),B_o=o(" (Pegasus model)"),P_o=l(),Yp=a("li"),pse=a("strong"),I_o=o("perceiver"),q_o=o(" \u2014 "),JI=a("a"),N_o=o("PerceiverModel"),j_o=o(" (Perceiver model)"),D_o=l(),Kp=a("li"),use=a("strong"),G_o=o("plbart"),O_o=o(" \u2014 "),YI=a("a"),V_o=o("PLBartModel"),X_o=o(" (PLBart model)"),z_o=l(),Zp=a("li"),_se=a("strong"),Q_o=o("poolformer"),W_o=o(" \u2014 "),KI=a("a"),H_o=o("PoolFormerModel"),U_o=o(" (PoolFormer model)"),J_o=l(),eu=a("li"),bse=a("strong"),Y_o=o("prophetnet"),K_o=o(" \u2014 "),ZI=a("a"),Z_o=o("ProphetNetModel"),e2o=o(" (ProphetNet model)"),o2o=l(),ou=a("li"),vse=a("strong"),r2o=o("qdqbert"),t2o=o(" \u2014 "),eq=a("a"),a2o=o("QDQBertModel"),n2o=o(" (QDQBert model)"),s2o=l(),ru=a("li"),Fse=a("strong"),l2o=o("reformer"),i2o=o(" \u2014 "),oq=a("a"),d2o=o("ReformerModel"),c2o=o(" (Reformer model)"),f2o=l(),tu=a("li"),Tse=a("strong"),m2o=o("regnet"),g2o=o(" \u2014 "),rq=a("a"),h2o=o("RegNetModel"),p2o=o(" (RegNet model)"),u2o=l(),au=a("li"),Mse=a("strong"),_2o=o("rembert"),b2o=o(" \u2014 "),tq=a("a"),v2o=o("RemBertModel"),F2o=o(" (RemBERT model)"),T2o=l(),nu=a("li"),Ese=a("strong"),M2o=o("resnet"),E2o=o(" \u2014 "),aq=a("a"),C2o=o("ResNetModel"),w2o=o(" (ResNet model)"),A2o=l(),su=a("li"),Cse=a("strong"),y2o=o("retribert"),L2o=o(" \u2014 "),nq=a("a"),x2o=o("RetriBertModel"),$2o=o(" (RetriBERT model)"),k2o=l(),lu=a("li"),wse=a("strong"),S2o=o("roberta"),R2o=o(" \u2014 "),sq=a("a"),B2o=o("RobertaModel"),P2o=o(" (RoBERTa model)"),I2o=l(),iu=a("li"),Ase=a("strong"),q2o=o("roformer"),N2o=o(" \u2014 "),lq=a("a"),j2o=o("RoFormerModel"),D2o=o(" (RoFormer model)"),G2o=l(),du=a("li"),yse=a("strong"),O2o=o("segformer"),V2o=o(" \u2014 "),iq=a("a"),X2o=o("SegformerModel"),z2o=o(" (SegFormer model)"),Q2o=l(),cu=a("li"),Lse=a("strong"),W2o=o("sew"),H2o=o(" \u2014 "),dq=a("a"),U2o=o("SEWModel"),J2o=o(" (SEW model)"),Y2o=l(),fu=a("li"),xse=a("strong"),K2o=o("sew-d"),Z2o=o(" \u2014 "),cq=a("a"),e1o=o("SEWDModel"),o1o=o(" (SEW-D model)"),r1o=l(),mu=a("li"),$se=a("strong"),t1o=o("speech_to_text"),a1o=o(" \u2014 "),fq=a("a"),n1o=o("Speech2TextModel"),s1o=o(" (Speech2Text model)"),l1o=l(),gu=a("li"),kse=a("strong"),i1o=o("splinter"),d1o=o(" \u2014 "),mq=a("a"),c1o=o("SplinterModel"),f1o=o(" (Splinter model)"),m1o=l(),hu=a("li"),Sse=a("strong"),g1o=o("squeezebert"),h1o=o(" \u2014 "),gq=a("a"),p1o=o("SqueezeBertModel"),u1o=o(" (SqueezeBERT model)"),_1o=l(),pu=a("li"),Rse=a("strong"),b1o=o("swin"),v1o=o(" \u2014 "),hq=a("a"),F1o=o("SwinModel"),T1o=o(" (Swin model)"),M1o=l(),uu=a("li"),Bse=a("strong"),E1o=o("t5"),C1o=o(" \u2014 "),pq=a("a"),w1o=o("T5Model"),A1o=o(" (T5 model)"),y1o=l(),_u=a("li"),Pse=a("strong"),L1o=o("tapas"),x1o=o(" \u2014 "),uq=a("a"),$1o=o("TapasModel"),k1o=o(" (TAPAS model)"),S1o=l(),bu=a("li"),Ise=a("strong"),R1o=o("transfo-xl"),B1o=o(" \u2014 "),_q=a("a"),P1o=o("TransfoXLModel"),I1o=o(" (Transformer-XL model)"),q1o=l(),vu=a("li"),qse=a("strong"),N1o=o("unispeech"),j1o=o(" \u2014 "),bq=a("a"),D1o=o("UniSpeechModel"),G1o=o(" (UniSpeech model)"),O1o=l(),Fu=a("li"),Nse=a("strong"),V1o=o("unispeech-sat"),X1o=o(" \u2014 "),vq=a("a"),z1o=o("UniSpeechSatModel"),Q1o=o(" (UniSpeechSat model)"),W1o=l(),Tu=a("li"),jse=a("strong"),H1o=o("van"),U1o=o(" \u2014 "),Fq=a("a"),J1o=o("VanModel"),Y1o=o(" (VAN model)"),K1o=l(),Mu=a("li"),Dse=a("strong"),Z1o=o("vilt"),ebo=o(" \u2014 "),Tq=a("a"),obo=o("ViltModel"),rbo=o(" (ViLT model)"),tbo=l(),Eu=a("li"),Gse=a("strong"),abo=o("vision-text-dual-encoder"),nbo=o(" \u2014 "),Mq=a("a"),sbo=o("VisionTextDualEncoderModel"),lbo=o(" (VisionTextDualEncoder model)"),ibo=l(),Cu=a("li"),Ose=a("strong"),dbo=o("visual_bert"),cbo=o(" \u2014 "),Eq=a("a"),fbo=o("VisualBertModel"),mbo=o(" (VisualBert model)"),gbo=l(),wu=a("li"),Vse=a("strong"),hbo=o("vit"),pbo=o(" \u2014 "),Cq=a("a"),ubo=o("ViTModel"),_bo=o(" (ViT model)"),bbo=l(),Au=a("li"),Xse=a("strong"),vbo=o("vit_mae"),Fbo=o(" \u2014 "),wq=a("a"),Tbo=o("ViTMAEModel"),Mbo=o(" (ViTMAE model)"),Ebo=l(),yu=a("li"),zse=a("strong"),Cbo=o("wav2vec2"),wbo=o(" \u2014 "),Aq=a("a"),Abo=o("Wav2Vec2Model"),ybo=o(" (Wav2Vec2 model)"),Lbo=l(),Lu=a("li"),Qse=a("strong"),xbo=o("wavlm"),$bo=o(" \u2014 "),yq=a("a"),kbo=o("WavLMModel"),Sbo=o(" (WavLM model)"),Rbo=l(),xu=a("li"),Wse=a("strong"),Bbo=o("xglm"),Pbo=o(" \u2014 "),Lq=a("a"),Ibo=o("XGLMModel"),qbo=o(" (XGLM model)"),Nbo=l(),$u=a("li"),Hse=a("strong"),jbo=o("xlm"),Dbo=o(" \u2014 "),xq=a("a"),Gbo=o("XLMModel"),Obo=o(" (XLM model)"),Vbo=l(),ku=a("li"),Use=a("strong"),Xbo=o("xlm-prophetnet"),zbo=o(" \u2014 "),$q=a("a"),Qbo=o("XLMProphetNetModel"),Wbo=o(" (XLMProphetNet model)"),Hbo=l(),Su=a("li"),Jse=a("strong"),Ubo=o("xlm-roberta"),Jbo=o(" \u2014 "),kq=a("a"),Ybo=o("XLMRobertaModel"),Kbo=o(" (XLM-RoBERTa model)"),Zbo=l(),Ru=a("li"),Yse=a("strong"),e5o=o("xlm-roberta-xl"),o5o=o(" \u2014 "),Sq=a("a"),r5o=o("XLMRobertaXLModel"),t5o=o(" (XLM-RoBERTa-XL model)"),a5o=l(),Bu=a("li"),Kse=a("strong"),n5o=o("xlnet"),s5o=o(" \u2014 "),Rq=a("a"),l5o=o("XLNetModel"),i5o=o(" (XLNet model)"),d5o=l(),Pu=a("li"),Zse=a("strong"),c5o=o("yolos"),f5o=o(" \u2014 "),Bq=a("a"),m5o=o("YolosModel"),g5o=o(" (YOLOS model)"),h5o=l(),Iu=a("li"),ele=a("strong"),p5o=o("yoso"),u5o=o(" \u2014 "),Pq=a("a"),_5o=o("YosoModel"),b5o=o(" (YOSO model)"),v5o=l(),qu=a("p"),F5o=o("The model is set in evaluation mode by default using "),ole=a("code"),T5o=o("model.eval()"),M5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=a("code"),E5o=o("model.train()"),C5o=l(),F(Nu.$$.fragment),uIe=l(),Ci=a("h2"),ju=a("a"),tle=a("span"),F(k0.$$.fragment),w5o=l(),ale=a("span"),A5o=o("AutoModelForPreTraining"),_Ie=l(),xo=a("div"),F(S0.$$.fragment),y5o=l(),wi=a("p"),L5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Iq=a("a"),x5o=o("from_pretrained()"),$5o=o(" class method or the "),qq=a("a"),k5o=o("from_config()"),S5o=o(` class
method.`),R5o=l(),R0=a("p"),B5o=o("This class cannot be instantiated directly using "),nle=a("code"),P5o=o("__init__()"),I5o=o(" (throws an error)."),q5o=l(),rt=a("div"),F(B0.$$.fragment),N5o=l(),sle=a("p"),j5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D5o=l(),Ai=a("p"),G5o=o(`Note:
Loading a model from its configuration file does `),lle=a("strong"),O5o=o("not"),V5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),X5o=o("from_pretrained()"),z5o=o(" to load the model weights."),Q5o=l(),F(Du.$$.fragment),W5o=l(),Ue=a("div"),F(P0.$$.fragment),H5o=l(),ile=a("p"),U5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J5o=l(),ya=a("p"),Y5o=o("The model class to instantiate is selected based on the "),dle=a("code"),K5o=o("model_type"),Z5o=o(` property of the config object (either
passed as an argument or loaded from `),cle=a("code"),e3o=o("pretrained_model_name_or_path"),o3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),r3o=o("pretrained_model_name_or_path"),t3o=o(":"),a3o=l(),G=a("ul"),Gu=a("li"),mle=a("strong"),n3o=o("albert"),s3o=o(" \u2014 "),jq=a("a"),l3o=o("AlbertForPreTraining"),i3o=o(" (ALBERT model)"),d3o=l(),Ou=a("li"),gle=a("strong"),c3o=o("bart"),f3o=o(" \u2014 "),Dq=a("a"),m3o=o("BartForConditionalGeneration"),g3o=o(" (BART model)"),h3o=l(),Vu=a("li"),hle=a("strong"),p3o=o("bert"),u3o=o(" \u2014 "),Gq=a("a"),_3o=o("BertForPreTraining"),b3o=o(" (BERT model)"),v3o=l(),Xu=a("li"),ple=a("strong"),F3o=o("big_bird"),T3o=o(" \u2014 "),Oq=a("a"),M3o=o("BigBirdForPreTraining"),E3o=o(" (BigBird model)"),C3o=l(),zu=a("li"),ule=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),Vq=a("a"),y3o=o("CamembertForMaskedLM"),L3o=o(" (CamemBERT model)"),x3o=l(),Qu=a("li"),_le=a("strong"),$3o=o("ctrl"),k3o=o(" \u2014 "),Xq=a("a"),S3o=o("CTRLLMHeadModel"),R3o=o(" (CTRL model)"),B3o=l(),Wu=a("li"),ble=a("strong"),P3o=o("data2vec-text"),I3o=o(" \u2014 "),zq=a("a"),q3o=o("Data2VecTextForMaskedLM"),N3o=o(" (Data2VecText model)"),j3o=l(),Hu=a("li"),vle=a("strong"),D3o=o("deberta"),G3o=o(" \u2014 "),Qq=a("a"),O3o=o("DebertaForMaskedLM"),V3o=o(" (DeBERTa model)"),X3o=l(),Uu=a("li"),Fle=a("strong"),z3o=o("deberta-v2"),Q3o=o(" \u2014 "),Wq=a("a"),W3o=o("DebertaV2ForMaskedLM"),H3o=o(" (DeBERTa-v2 model)"),U3o=l(),Ju=a("li"),Tle=a("strong"),J3o=o("distilbert"),Y3o=o(" \u2014 "),Hq=a("a"),K3o=o("DistilBertForMaskedLM"),Z3o=o(" (DistilBERT model)"),evo=l(),Yu=a("li"),Mle=a("strong"),ovo=o("electra"),rvo=o(" \u2014 "),Uq=a("a"),tvo=o("ElectraForPreTraining"),avo=o(" (ELECTRA model)"),nvo=l(),Ku=a("li"),Ele=a("strong"),svo=o("flaubert"),lvo=o(" \u2014 "),Jq=a("a"),ivo=o("FlaubertWithLMHeadModel"),dvo=o(" (FlauBERT model)"),cvo=l(),Zu=a("li"),Cle=a("strong"),fvo=o("flava"),mvo=o(" \u2014 "),Yq=a("a"),gvo=o("FlavaForPreTraining"),hvo=o(" (Flava model)"),pvo=l(),e_=a("li"),wle=a("strong"),uvo=o("fnet"),_vo=o(" \u2014 "),Kq=a("a"),bvo=o("FNetForPreTraining"),vvo=o(" (FNet model)"),Fvo=l(),o_=a("li"),Ale=a("strong"),Tvo=o("fsmt"),Mvo=o(" \u2014 "),Zq=a("a"),Evo=o("FSMTForConditionalGeneration"),Cvo=o(" (FairSeq Machine-Translation model)"),wvo=l(),r_=a("li"),yle=a("strong"),Avo=o("funnel"),yvo=o(" \u2014 "),eN=a("a"),Lvo=o("FunnelForPreTraining"),xvo=o(" (Funnel Transformer model)"),$vo=l(),t_=a("li"),Lle=a("strong"),kvo=o("gpt2"),Svo=o(" \u2014 "),oN=a("a"),Rvo=o("GPT2LMHeadModel"),Bvo=o(" (OpenAI GPT-2 model)"),Pvo=l(),a_=a("li"),xle=a("strong"),Ivo=o("ibert"),qvo=o(" \u2014 "),rN=a("a"),Nvo=o("IBertForMaskedLM"),jvo=o(" (I-BERT model)"),Dvo=l(),n_=a("li"),$le=a("strong"),Gvo=o("layoutlm"),Ovo=o(" \u2014 "),tN=a("a"),Vvo=o("LayoutLMForMaskedLM"),Xvo=o(" (LayoutLM model)"),zvo=l(),s_=a("li"),kle=a("strong"),Qvo=o("longformer"),Wvo=o(" \u2014 "),aN=a("a"),Hvo=o("LongformerForMaskedLM"),Uvo=o(" (Longformer model)"),Jvo=l(),l_=a("li"),Sle=a("strong"),Yvo=o("lxmert"),Kvo=o(" \u2014 "),nN=a("a"),Zvo=o("LxmertForPreTraining"),eFo=o(" (LXMERT model)"),oFo=l(),i_=a("li"),Rle=a("strong"),rFo=o("megatron-bert"),tFo=o(" \u2014 "),sN=a("a"),aFo=o("MegatronBertForPreTraining"),nFo=o(" (MegatronBert model)"),sFo=l(),d_=a("li"),Ble=a("strong"),lFo=o("mobilebert"),iFo=o(" \u2014 "),lN=a("a"),dFo=o("MobileBertForPreTraining"),cFo=o(" (MobileBERT model)"),fFo=l(),c_=a("li"),Ple=a("strong"),mFo=o("mpnet"),gFo=o(" \u2014 "),iN=a("a"),hFo=o("MPNetForMaskedLM"),pFo=o(" (MPNet model)"),uFo=l(),f_=a("li"),Ile=a("strong"),_Fo=o("openai-gpt"),bFo=o(" \u2014 "),dN=a("a"),vFo=o("OpenAIGPTLMHeadModel"),FFo=o(" (OpenAI GPT model)"),TFo=l(),m_=a("li"),qle=a("strong"),MFo=o("retribert"),EFo=o(" \u2014 "),cN=a("a"),CFo=o("RetriBertModel"),wFo=o(" (RetriBERT model)"),AFo=l(),g_=a("li"),Nle=a("strong"),yFo=o("roberta"),LFo=o(" \u2014 "),fN=a("a"),xFo=o("RobertaForMaskedLM"),$Fo=o(" (RoBERTa model)"),kFo=l(),h_=a("li"),jle=a("strong"),SFo=o("squeezebert"),RFo=o(" \u2014 "),mN=a("a"),BFo=o("SqueezeBertForMaskedLM"),PFo=o(" (SqueezeBERT model)"),IFo=l(),p_=a("li"),Dle=a("strong"),qFo=o("t5"),NFo=o(" \u2014 "),gN=a("a"),jFo=o("T5ForConditionalGeneration"),DFo=o(" (T5 model)"),GFo=l(),u_=a("li"),Gle=a("strong"),OFo=o("tapas"),VFo=o(" \u2014 "),hN=a("a"),XFo=o("TapasForMaskedLM"),zFo=o(" (TAPAS model)"),QFo=l(),__=a("li"),Ole=a("strong"),WFo=o("transfo-xl"),HFo=o(" \u2014 "),pN=a("a"),UFo=o("TransfoXLLMHeadModel"),JFo=o(" (Transformer-XL model)"),YFo=l(),b_=a("li"),Vle=a("strong"),KFo=o("unispeech"),ZFo=o(" \u2014 "),uN=a("a"),eTo=o("UniSpeechForPreTraining"),oTo=o(" (UniSpeech model)"),rTo=l(),v_=a("li"),Xle=a("strong"),tTo=o("unispeech-sat"),aTo=o(" \u2014 "),_N=a("a"),nTo=o("UniSpeechSatForPreTraining"),sTo=o(" (UniSpeechSat model)"),lTo=l(),F_=a("li"),zle=a("strong"),iTo=o("visual_bert"),dTo=o(" \u2014 "),bN=a("a"),cTo=o("VisualBertForPreTraining"),fTo=o(" (VisualBert model)"),mTo=l(),T_=a("li"),Qle=a("strong"),gTo=o("vit_mae"),hTo=o(" \u2014 "),vN=a("a"),pTo=o("ViTMAEForPreTraining"),uTo=o(" (ViTMAE model)"),_To=l(),M_=a("li"),Wle=a("strong"),bTo=o("wav2vec2"),vTo=o(" \u2014 "),FN=a("a"),FTo=o("Wav2Vec2ForPreTraining"),TTo=o(" (Wav2Vec2 model)"),MTo=l(),E_=a("li"),Hle=a("strong"),ETo=o("xlm"),CTo=o(" \u2014 "),TN=a("a"),wTo=o("XLMWithLMHeadModel"),ATo=o(" (XLM model)"),yTo=l(),C_=a("li"),Ule=a("strong"),LTo=o("xlm-roberta"),xTo=o(" \u2014 "),MN=a("a"),$To=o("XLMRobertaForMaskedLM"),kTo=o(" (XLM-RoBERTa model)"),STo=l(),w_=a("li"),Jle=a("strong"),RTo=o("xlm-roberta-xl"),BTo=o(" \u2014 "),EN=a("a"),PTo=o("XLMRobertaXLForMaskedLM"),ITo=o(" (XLM-RoBERTa-XL model)"),qTo=l(),A_=a("li"),Yle=a("strong"),NTo=o("xlnet"),jTo=o(" \u2014 "),CN=a("a"),DTo=o("XLNetLMHeadModel"),GTo=o(" (XLNet model)"),OTo=l(),y_=a("p"),VTo=o("The model is set in evaluation mode by default using "),Kle=a("code"),XTo=o("model.eval()"),zTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),QTo=o("model.train()"),WTo=l(),F(L_.$$.fragment),bIe=l(),yi=a("h2"),x_=a("a"),eie=a("span"),F(I0.$$.fragment),HTo=l(),oie=a("span"),UTo=o("AutoModelForCausalLM"),vIe=l(),$o=a("div"),F(q0.$$.fragment),JTo=l(),Li=a("p"),YTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wN=a("a"),KTo=o("from_pretrained()"),ZTo=o(" class method or the "),AN=a("a"),e7o=o("from_config()"),o7o=o(` class
method.`),r7o=l(),N0=a("p"),t7o=o("This class cannot be instantiated directly using "),rie=a("code"),a7o=o("__init__()"),n7o=o(" (throws an error)."),s7o=l(),tt=a("div"),F(j0.$$.fragment),l7o=l(),tie=a("p"),i7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d7o=l(),xi=a("p"),c7o=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),f7o=o("not"),m7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yN=a("a"),g7o=o("from_pretrained()"),h7o=o(" to load the model weights."),p7o=l(),F($_.$$.fragment),u7o=l(),Je=a("div"),F(D0.$$.fragment),_7o=l(),nie=a("p"),b7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v7o=l(),La=a("p"),F7o=o("The model class to instantiate is selected based on the "),sie=a("code"),T7o=o("model_type"),M7o=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),E7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),w7o=o("pretrained_model_name_or_path"),A7o=o(":"),y7o=l(),z=a("ul"),k_=a("li"),die=a("strong"),L7o=o("bart"),x7o=o(" \u2014 "),LN=a("a"),$7o=o("BartForCausalLM"),k7o=o(" (BART model)"),S7o=l(),S_=a("li"),cie=a("strong"),R7o=o("bert"),B7o=o(" \u2014 "),xN=a("a"),P7o=o("BertLMHeadModel"),I7o=o(" (BERT model)"),q7o=l(),R_=a("li"),fie=a("strong"),N7o=o("bert-generation"),j7o=o(" \u2014 "),$N=a("a"),D7o=o("BertGenerationDecoder"),G7o=o(" (Bert Generation model)"),O7o=l(),B_=a("li"),mie=a("strong"),V7o=o("big_bird"),X7o=o(" \u2014 "),kN=a("a"),z7o=o("BigBirdForCausalLM"),Q7o=o(" (BigBird model)"),W7o=l(),P_=a("li"),gie=a("strong"),H7o=o("bigbird_pegasus"),U7o=o(" \u2014 "),SN=a("a"),J7o=o("BigBirdPegasusForCausalLM"),Y7o=o(" (BigBirdPegasus model)"),K7o=l(),I_=a("li"),hie=a("strong"),Z7o=o("blenderbot"),eMo=o(" \u2014 "),RN=a("a"),oMo=o("BlenderbotForCausalLM"),rMo=o(" (Blenderbot model)"),tMo=l(),q_=a("li"),pie=a("strong"),aMo=o("blenderbot-small"),nMo=o(" \u2014 "),BN=a("a"),sMo=o("BlenderbotSmallForCausalLM"),lMo=o(" (BlenderbotSmall model)"),iMo=l(),N_=a("li"),uie=a("strong"),dMo=o("camembert"),cMo=o(" \u2014 "),PN=a("a"),fMo=o("CamembertForCausalLM"),mMo=o(" (CamemBERT model)"),gMo=l(),j_=a("li"),_ie=a("strong"),hMo=o("ctrl"),pMo=o(" \u2014 "),IN=a("a"),uMo=o("CTRLLMHeadModel"),_Mo=o(" (CTRL model)"),bMo=l(),D_=a("li"),bie=a("strong"),vMo=o("data2vec-text"),FMo=o(" \u2014 "),qN=a("a"),TMo=o("Data2VecTextForCausalLM"),MMo=o(" (Data2VecText model)"),EMo=l(),G_=a("li"),vie=a("strong"),CMo=o("electra"),wMo=o(" \u2014 "),NN=a("a"),AMo=o("ElectraForCausalLM"),yMo=o(" (ELECTRA model)"),LMo=l(),O_=a("li"),Fie=a("strong"),xMo=o("gpt2"),$Mo=o(" \u2014 "),jN=a("a"),kMo=o("GPT2LMHeadModel"),SMo=o(" (OpenAI GPT-2 model)"),RMo=l(),V_=a("li"),Tie=a("strong"),BMo=o("gpt_neo"),PMo=o(" \u2014 "),DN=a("a"),IMo=o("GPTNeoForCausalLM"),qMo=o(" (GPT Neo model)"),NMo=l(),X_=a("li"),Mie=a("strong"),jMo=o("gptj"),DMo=o(" \u2014 "),GN=a("a"),GMo=o("GPTJForCausalLM"),OMo=o(" (GPT-J model)"),VMo=l(),z_=a("li"),Eie=a("strong"),XMo=o("marian"),zMo=o(" \u2014 "),ON=a("a"),QMo=o("MarianForCausalLM"),WMo=o(" (Marian model)"),HMo=l(),Q_=a("li"),Cie=a("strong"),UMo=o("mbart"),JMo=o(" \u2014 "),VN=a("a"),YMo=o("MBartForCausalLM"),KMo=o(" (mBART model)"),ZMo=l(),W_=a("li"),wie=a("strong"),e4o=o("megatron-bert"),o4o=o(" \u2014 "),XN=a("a"),r4o=o("MegatronBertForCausalLM"),t4o=o(" (MegatronBert model)"),a4o=l(),H_=a("li"),Aie=a("strong"),n4o=o("openai-gpt"),s4o=o(" \u2014 "),zN=a("a"),l4o=o("OpenAIGPTLMHeadModel"),i4o=o(" (OpenAI GPT model)"),d4o=l(),U_=a("li"),yie=a("strong"),c4o=o("opt"),f4o=o(" \u2014 "),QN=a("a"),m4o=o("OPTForCausalLM"),g4o=o(" (OPT model)"),h4o=l(),J_=a("li"),Lie=a("strong"),p4o=o("pegasus"),u4o=o(" \u2014 "),WN=a("a"),_4o=o("PegasusForCausalLM"),b4o=o(" (Pegasus model)"),v4o=l(),Y_=a("li"),xie=a("strong"),F4o=o("plbart"),T4o=o(" \u2014 "),HN=a("a"),M4o=o("PLBartForCausalLM"),E4o=o(" (PLBart model)"),C4o=l(),K_=a("li"),$ie=a("strong"),w4o=o("prophetnet"),A4o=o(" \u2014 "),UN=a("a"),y4o=o("ProphetNetForCausalLM"),L4o=o(" (ProphetNet model)"),x4o=l(),Z_=a("li"),kie=a("strong"),$4o=o("qdqbert"),k4o=o(" \u2014 "),JN=a("a"),S4o=o("QDQBertLMHeadModel"),R4o=o(" (QDQBert model)"),B4o=l(),e2=a("li"),Sie=a("strong"),P4o=o("reformer"),I4o=o(" \u2014 "),YN=a("a"),q4o=o("ReformerModelWithLMHead"),N4o=o(" (Reformer model)"),j4o=l(),o2=a("li"),Rie=a("strong"),D4o=o("rembert"),G4o=o(" \u2014 "),KN=a("a"),O4o=o("RemBertForCausalLM"),V4o=o(" (RemBERT model)"),X4o=l(),r2=a("li"),Bie=a("strong"),z4o=o("roberta"),Q4o=o(" \u2014 "),ZN=a("a"),W4o=o("RobertaForCausalLM"),H4o=o(" (RoBERTa model)"),U4o=l(),t2=a("li"),Pie=a("strong"),J4o=o("roformer"),Y4o=o(" \u2014 "),ej=a("a"),K4o=o("RoFormerForCausalLM"),Z4o=o(" (RoFormer model)"),eEo=l(),a2=a("li"),Iie=a("strong"),oEo=o("speech_to_text_2"),rEo=o(" \u2014 "),oj=a("a"),tEo=o("Speech2Text2ForCausalLM"),aEo=o(" (Speech2Text2 model)"),nEo=l(),n2=a("li"),qie=a("strong"),sEo=o("transfo-xl"),lEo=o(" \u2014 "),rj=a("a"),iEo=o("TransfoXLLMHeadModel"),dEo=o(" (Transformer-XL model)"),cEo=l(),s2=a("li"),Nie=a("strong"),fEo=o("trocr"),mEo=o(" \u2014 "),tj=a("a"),gEo=o("TrOCRForCausalLM"),hEo=o(" (TrOCR model)"),pEo=l(),l2=a("li"),jie=a("strong"),uEo=o("xglm"),_Eo=o(" \u2014 "),aj=a("a"),bEo=o("XGLMForCausalLM"),vEo=o(" (XGLM model)"),FEo=l(),i2=a("li"),Die=a("strong"),TEo=o("xlm"),MEo=o(" \u2014 "),nj=a("a"),EEo=o("XLMWithLMHeadModel"),CEo=o(" (XLM model)"),wEo=l(),d2=a("li"),Gie=a("strong"),AEo=o("xlm-prophetnet"),yEo=o(" \u2014 "),sj=a("a"),LEo=o("XLMProphetNetForCausalLM"),xEo=o(" (XLMProphetNet model)"),$Eo=l(),c2=a("li"),Oie=a("strong"),kEo=o("xlm-roberta"),SEo=o(" \u2014 "),lj=a("a"),REo=o("XLMRobertaForCausalLM"),BEo=o(" (XLM-RoBERTa model)"),PEo=l(),f2=a("li"),Vie=a("strong"),IEo=o("xlm-roberta-xl"),qEo=o(" \u2014 "),ij=a("a"),NEo=o("XLMRobertaXLForCausalLM"),jEo=o(" (XLM-RoBERTa-XL model)"),DEo=l(),m2=a("li"),Xie=a("strong"),GEo=o("xlnet"),OEo=o(" \u2014 "),dj=a("a"),VEo=o("XLNetLMHeadModel"),XEo=o(" (XLNet model)"),zEo=l(),g2=a("p"),QEo=o("The model is set in evaluation mode by default using "),zie=a("code"),WEo=o("model.eval()"),HEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=a("code"),UEo=o("model.train()"),JEo=l(),F(h2.$$.fragment),FIe=l(),$i=a("h2"),p2=a("a"),Wie=a("span"),F(G0.$$.fragment),YEo=l(),Hie=a("span"),KEo=o("AutoModelForMaskedLM"),TIe=l(),ko=a("div"),F(O0.$$.fragment),ZEo=l(),ki=a("p"),eCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cj=a("a"),oCo=o("from_pretrained()"),rCo=o(" class method or the "),fj=a("a"),tCo=o("from_config()"),aCo=o(` class
method.`),nCo=l(),V0=a("p"),sCo=o("This class cannot be instantiated directly using "),Uie=a("code"),lCo=o("__init__()"),iCo=o(" (throws an error)."),dCo=l(),at=a("div"),F(X0.$$.fragment),cCo=l(),Jie=a("p"),fCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mCo=l(),Si=a("p"),gCo=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),hCo=o("not"),pCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),uCo=o("from_pretrained()"),_Co=o(" to load the model weights."),bCo=l(),F(u2.$$.fragment),vCo=l(),Ye=a("div"),F(z0.$$.fragment),FCo=l(),Kie=a("p"),TCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MCo=l(),xa=a("p"),ECo=o("The model class to instantiate is selected based on the "),Zie=a("code"),CCo=o("model_type"),wCo=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),ACo=o("pretrained_model_name_or_path"),yCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),LCo=o("pretrained_model_name_or_path"),xCo=o(":"),$Co=l(),Q=a("ul"),_2=a("li"),rde=a("strong"),kCo=o("albert"),SCo=o(" \u2014 "),gj=a("a"),RCo=o("AlbertForMaskedLM"),BCo=o(" (ALBERT model)"),PCo=l(),b2=a("li"),tde=a("strong"),ICo=o("bart"),qCo=o(" \u2014 "),hj=a("a"),NCo=o("BartForConditionalGeneration"),jCo=o(" (BART model)"),DCo=l(),v2=a("li"),ade=a("strong"),GCo=o("bert"),OCo=o(" \u2014 "),pj=a("a"),VCo=o("BertForMaskedLM"),XCo=o(" (BERT model)"),zCo=l(),F2=a("li"),nde=a("strong"),QCo=o("big_bird"),WCo=o(" \u2014 "),uj=a("a"),HCo=o("BigBirdForMaskedLM"),UCo=o(" (BigBird model)"),JCo=l(),T2=a("li"),sde=a("strong"),YCo=o("camembert"),KCo=o(" \u2014 "),_j=a("a"),ZCo=o("CamembertForMaskedLM"),ewo=o(" (CamemBERT model)"),owo=l(),M2=a("li"),lde=a("strong"),rwo=o("convbert"),two=o(" \u2014 "),bj=a("a"),awo=o("ConvBertForMaskedLM"),nwo=o(" (ConvBERT model)"),swo=l(),E2=a("li"),ide=a("strong"),lwo=o("data2vec-text"),iwo=o(" \u2014 "),vj=a("a"),dwo=o("Data2VecTextForMaskedLM"),cwo=o(" (Data2VecText model)"),fwo=l(),C2=a("li"),dde=a("strong"),mwo=o("deberta"),gwo=o(" \u2014 "),Fj=a("a"),hwo=o("DebertaForMaskedLM"),pwo=o(" (DeBERTa model)"),uwo=l(),w2=a("li"),cde=a("strong"),_wo=o("deberta-v2"),bwo=o(" \u2014 "),Tj=a("a"),vwo=o("DebertaV2ForMaskedLM"),Fwo=o(" (DeBERTa-v2 model)"),Two=l(),A2=a("li"),fde=a("strong"),Mwo=o("distilbert"),Ewo=o(" \u2014 "),Mj=a("a"),Cwo=o("DistilBertForMaskedLM"),wwo=o(" (DistilBERT model)"),Awo=l(),y2=a("li"),mde=a("strong"),ywo=o("electra"),Lwo=o(" \u2014 "),Ej=a("a"),xwo=o("ElectraForMaskedLM"),$wo=o(" (ELECTRA model)"),kwo=l(),L2=a("li"),gde=a("strong"),Swo=o("flaubert"),Rwo=o(" \u2014 "),Cj=a("a"),Bwo=o("FlaubertWithLMHeadModel"),Pwo=o(" (FlauBERT model)"),Iwo=l(),x2=a("li"),hde=a("strong"),qwo=o("fnet"),Nwo=o(" \u2014 "),wj=a("a"),jwo=o("FNetForMaskedLM"),Dwo=o(" (FNet model)"),Gwo=l(),$2=a("li"),pde=a("strong"),Owo=o("funnel"),Vwo=o(" \u2014 "),Aj=a("a"),Xwo=o("FunnelForMaskedLM"),zwo=o(" (Funnel Transformer model)"),Qwo=l(),k2=a("li"),ude=a("strong"),Wwo=o("ibert"),Hwo=o(" \u2014 "),yj=a("a"),Uwo=o("IBertForMaskedLM"),Jwo=o(" (I-BERT model)"),Ywo=l(),S2=a("li"),_de=a("strong"),Kwo=o("layoutlm"),Zwo=o(" \u2014 "),Lj=a("a"),eAo=o("LayoutLMForMaskedLM"),oAo=o(" (LayoutLM model)"),rAo=l(),R2=a("li"),bde=a("strong"),tAo=o("longformer"),aAo=o(" \u2014 "),xj=a("a"),nAo=o("LongformerForMaskedLM"),sAo=o(" (Longformer model)"),lAo=l(),B2=a("li"),vde=a("strong"),iAo=o("mbart"),dAo=o(" \u2014 "),$j=a("a"),cAo=o("MBartForConditionalGeneration"),fAo=o(" (mBART model)"),mAo=l(),P2=a("li"),Fde=a("strong"),gAo=o("megatron-bert"),hAo=o(" \u2014 "),kj=a("a"),pAo=o("MegatronBertForMaskedLM"),uAo=o(" (MegatronBert model)"),_Ao=l(),I2=a("li"),Tde=a("strong"),bAo=o("mobilebert"),vAo=o(" \u2014 "),Sj=a("a"),FAo=o("MobileBertForMaskedLM"),TAo=o(" (MobileBERT model)"),MAo=l(),q2=a("li"),Mde=a("strong"),EAo=o("mpnet"),CAo=o(" \u2014 "),Rj=a("a"),wAo=o("MPNetForMaskedLM"),AAo=o(" (MPNet model)"),yAo=l(),N2=a("li"),Ede=a("strong"),LAo=o("nystromformer"),xAo=o(" \u2014 "),Bj=a("a"),$Ao=o("NystromformerForMaskedLM"),kAo=o(" (Nystromformer model)"),SAo=l(),j2=a("li"),Cde=a("strong"),RAo=o("perceiver"),BAo=o(" \u2014 "),Pj=a("a"),PAo=o("PerceiverForMaskedLM"),IAo=o(" (Perceiver model)"),qAo=l(),D2=a("li"),wde=a("strong"),NAo=o("qdqbert"),jAo=o(" \u2014 "),Ij=a("a"),DAo=o("QDQBertForMaskedLM"),GAo=o(" (QDQBert model)"),OAo=l(),G2=a("li"),Ade=a("strong"),VAo=o("reformer"),XAo=o(" \u2014 "),qj=a("a"),zAo=o("ReformerForMaskedLM"),QAo=o(" (Reformer model)"),WAo=l(),O2=a("li"),yde=a("strong"),HAo=o("rembert"),UAo=o(" \u2014 "),Nj=a("a"),JAo=o("RemBertForMaskedLM"),YAo=o(" (RemBERT model)"),KAo=l(),V2=a("li"),Lde=a("strong"),ZAo=o("roberta"),e6o=o(" \u2014 "),jj=a("a"),o6o=o("RobertaForMaskedLM"),r6o=o(" (RoBERTa model)"),t6o=l(),X2=a("li"),xde=a("strong"),a6o=o("roformer"),n6o=o(" \u2014 "),Dj=a("a"),s6o=o("RoFormerForMaskedLM"),l6o=o(" (RoFormer model)"),i6o=l(),z2=a("li"),$de=a("strong"),d6o=o("squeezebert"),c6o=o(" \u2014 "),Gj=a("a"),f6o=o("SqueezeBertForMaskedLM"),m6o=o(" (SqueezeBERT model)"),g6o=l(),Q2=a("li"),kde=a("strong"),h6o=o("tapas"),p6o=o(" \u2014 "),Oj=a("a"),u6o=o("TapasForMaskedLM"),_6o=o(" (TAPAS model)"),b6o=l(),W2=a("li"),Sde=a("strong"),v6o=o("wav2vec2"),F6o=o(" \u2014 "),Rde=a("code"),T6o=o("Wav2Vec2ForMaskedLM"),M6o=o(" (Wav2Vec2 model)"),E6o=l(),H2=a("li"),Bde=a("strong"),C6o=o("xlm"),w6o=o(" \u2014 "),Vj=a("a"),A6o=o("XLMWithLMHeadModel"),y6o=o(" (XLM model)"),L6o=l(),U2=a("li"),Pde=a("strong"),x6o=o("xlm-roberta"),$6o=o(" \u2014 "),Xj=a("a"),k6o=o("XLMRobertaForMaskedLM"),S6o=o(" (XLM-RoBERTa model)"),R6o=l(),J2=a("li"),Ide=a("strong"),B6o=o("xlm-roberta-xl"),P6o=o(" \u2014 "),zj=a("a"),I6o=o("XLMRobertaXLForMaskedLM"),q6o=o(" (XLM-RoBERTa-XL model)"),N6o=l(),Y2=a("li"),qde=a("strong"),j6o=o("yoso"),D6o=o(" \u2014 "),Qj=a("a"),G6o=o("YosoForMaskedLM"),O6o=o(" (YOSO model)"),V6o=l(),K2=a("p"),X6o=o("The model is set in evaluation mode by default using "),Nde=a("code"),z6o=o("model.eval()"),Q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),W6o=o("model.train()"),H6o=l(),F(Z2.$$.fragment),MIe=l(),Ri=a("h2"),e1=a("a"),Dde=a("span"),F(Q0.$$.fragment),U6o=l(),Gde=a("span"),J6o=o("AutoModelForSeq2SeqLM"),EIe=l(),So=a("div"),F(W0.$$.fragment),Y6o=l(),Bi=a("p"),K6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wj=a("a"),Z6o=o("from_pretrained()"),e0o=o(" class method or the "),Hj=a("a"),o0o=o("from_config()"),r0o=o(` class
method.`),t0o=l(),H0=a("p"),a0o=o("This class cannot be instantiated directly using "),Ode=a("code"),n0o=o("__init__()"),s0o=o(" (throws an error)."),l0o=l(),nt=a("div"),F(U0.$$.fragment),i0o=l(),Vde=a("p"),d0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c0o=l(),Pi=a("p"),f0o=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),m0o=o("not"),g0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),h0o=o("from_pretrained()"),p0o=o(" to load the model weights."),u0o=l(),F(o1.$$.fragment),_0o=l(),Ke=a("div"),F(J0.$$.fragment),b0o=l(),zde=a("p"),v0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),F0o=l(),$a=a("p"),T0o=o("The model class to instantiate is selected based on the "),Qde=a("code"),M0o=o("model_type"),E0o=o(` property of the config object (either
passed as an argument or loaded from `),Wde=a("code"),C0o=o("pretrained_model_name_or_path"),w0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),A0o=o("pretrained_model_name_or_path"),y0o=o(":"),L0o=l(),he=a("ul"),r1=a("li"),Ude=a("strong"),x0o=o("bart"),$0o=o(" \u2014 "),Jj=a("a"),k0o=o("BartForConditionalGeneration"),S0o=o(" (BART model)"),R0o=l(),t1=a("li"),Jde=a("strong"),B0o=o("bigbird_pegasus"),P0o=o(" \u2014 "),Yj=a("a"),I0o=o("BigBirdPegasusForConditionalGeneration"),q0o=o(" (BigBirdPegasus model)"),N0o=l(),a1=a("li"),Yde=a("strong"),j0o=o("blenderbot"),D0o=o(" \u2014 "),Kj=a("a"),G0o=o("BlenderbotForConditionalGeneration"),O0o=o(" (Blenderbot model)"),V0o=l(),n1=a("li"),Kde=a("strong"),X0o=o("blenderbot-small"),z0o=o(" \u2014 "),Zj=a("a"),Q0o=o("BlenderbotSmallForConditionalGeneration"),W0o=o(" (BlenderbotSmall model)"),H0o=l(),s1=a("li"),Zde=a("strong"),U0o=o("encoder-decoder"),J0o=o(" \u2014 "),eD=a("a"),Y0o=o("EncoderDecoderModel"),K0o=o(" (Encoder decoder model)"),Z0o=l(),l1=a("li"),ece=a("strong"),eyo=o("fsmt"),oyo=o(" \u2014 "),oD=a("a"),ryo=o("FSMTForConditionalGeneration"),tyo=o(" (FairSeq Machine-Translation model)"),ayo=l(),i1=a("li"),oce=a("strong"),nyo=o("led"),syo=o(" \u2014 "),rD=a("a"),lyo=o("LEDForConditionalGeneration"),iyo=o(" (LED model)"),dyo=l(),d1=a("li"),rce=a("strong"),cyo=o("m2m_100"),fyo=o(" \u2014 "),tD=a("a"),myo=o("M2M100ForConditionalGeneration"),gyo=o(" (M2M100 model)"),hyo=l(),c1=a("li"),tce=a("strong"),pyo=o("marian"),uyo=o(" \u2014 "),aD=a("a"),_yo=o("MarianMTModel"),byo=o(" (Marian model)"),vyo=l(),f1=a("li"),ace=a("strong"),Fyo=o("mbart"),Tyo=o(" \u2014 "),nD=a("a"),Myo=o("MBartForConditionalGeneration"),Eyo=o(" (mBART model)"),Cyo=l(),m1=a("li"),nce=a("strong"),wyo=o("mt5"),Ayo=o(" \u2014 "),sD=a("a"),yyo=o("MT5ForConditionalGeneration"),Lyo=o(" (mT5 model)"),xyo=l(),g1=a("li"),sce=a("strong"),$yo=o("pegasus"),kyo=o(" \u2014 "),lD=a("a"),Syo=o("PegasusForConditionalGeneration"),Ryo=o(" (Pegasus model)"),Byo=l(),h1=a("li"),lce=a("strong"),Pyo=o("plbart"),Iyo=o(" \u2014 "),iD=a("a"),qyo=o("PLBartForConditionalGeneration"),Nyo=o(" (PLBart model)"),jyo=l(),p1=a("li"),ice=a("strong"),Dyo=o("prophetnet"),Gyo=o(" \u2014 "),dD=a("a"),Oyo=o("ProphetNetForConditionalGeneration"),Vyo=o(" (ProphetNet model)"),Xyo=l(),u1=a("li"),dce=a("strong"),zyo=o("t5"),Qyo=o(" \u2014 "),cD=a("a"),Wyo=o("T5ForConditionalGeneration"),Hyo=o(" (T5 model)"),Uyo=l(),_1=a("li"),cce=a("strong"),Jyo=o("tapex"),Yyo=o(" \u2014 "),fD=a("a"),Kyo=o("BartForConditionalGeneration"),Zyo=o(" (TAPEX model)"),eLo=l(),b1=a("li"),fce=a("strong"),oLo=o("xlm-prophetnet"),rLo=o(" \u2014 "),mD=a("a"),tLo=o("XLMProphetNetForConditionalGeneration"),aLo=o(" (XLMProphetNet model)"),nLo=l(),v1=a("p"),sLo=o("The model is set in evaluation mode by default using "),mce=a("code"),lLo=o("model.eval()"),iLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=a("code"),dLo=o("model.train()"),cLo=l(),F(F1.$$.fragment),CIe=l(),Ii=a("h2"),T1=a("a"),hce=a("span"),F(Y0.$$.fragment),fLo=l(),pce=a("span"),mLo=o("AutoModelForSequenceClassification"),wIe=l(),Ro=a("div"),F(K0.$$.fragment),gLo=l(),qi=a("p"),hLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gD=a("a"),pLo=o("from_pretrained()"),uLo=o(" class method or the "),hD=a("a"),_Lo=o("from_config()"),bLo=o(` class
method.`),vLo=l(),Z0=a("p"),FLo=o("This class cannot be instantiated directly using "),uce=a("code"),TLo=o("__init__()"),MLo=o(" (throws an error)."),ELo=l(),st=a("div"),F(ey.$$.fragment),CLo=l(),_ce=a("p"),wLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ALo=l(),Ni=a("p"),yLo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),LLo=o("not"),xLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=a("a"),$Lo=o("from_pretrained()"),kLo=o(" to load the model weights."),SLo=l(),F(M1.$$.fragment),RLo=l(),Ze=a("div"),F(oy.$$.fragment),BLo=l(),vce=a("p"),PLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ILo=l(),ka=a("p"),qLo=o("The model class to instantiate is selected based on the "),Fce=a("code"),NLo=o("model_type"),jLo=o(` property of the config object (either
passed as an argument or loaded from `),Tce=a("code"),DLo=o("pretrained_model_name_or_path"),GLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),OLo=o("pretrained_model_name_or_path"),VLo=o(":"),XLo=l(),q=a("ul"),E1=a("li"),Ece=a("strong"),zLo=o("albert"),QLo=o(" \u2014 "),uD=a("a"),WLo=o("AlbertForSequenceClassification"),HLo=o(" (ALBERT model)"),ULo=l(),C1=a("li"),Cce=a("strong"),JLo=o("bart"),YLo=o(" \u2014 "),_D=a("a"),KLo=o("BartForSequenceClassification"),ZLo=o(" (BART model)"),e8o=l(),w1=a("li"),wce=a("strong"),o8o=o("bert"),r8o=o(" \u2014 "),bD=a("a"),t8o=o("BertForSequenceClassification"),a8o=o(" (BERT model)"),n8o=l(),A1=a("li"),Ace=a("strong"),s8o=o("big_bird"),l8o=o(" \u2014 "),vD=a("a"),i8o=o("BigBirdForSequenceClassification"),d8o=o(" (BigBird model)"),c8o=l(),y1=a("li"),yce=a("strong"),f8o=o("bigbird_pegasus"),m8o=o(" \u2014 "),FD=a("a"),g8o=o("BigBirdPegasusForSequenceClassification"),h8o=o(" (BigBirdPegasus model)"),p8o=l(),L1=a("li"),Lce=a("strong"),u8o=o("camembert"),_8o=o(" \u2014 "),TD=a("a"),b8o=o("CamembertForSequenceClassification"),v8o=o(" (CamemBERT model)"),F8o=l(),x1=a("li"),xce=a("strong"),T8o=o("canine"),M8o=o(" \u2014 "),MD=a("a"),E8o=o("CanineForSequenceClassification"),C8o=o(" (Canine model)"),w8o=l(),$1=a("li"),$ce=a("strong"),A8o=o("convbert"),y8o=o(" \u2014 "),ED=a("a"),L8o=o("ConvBertForSequenceClassification"),x8o=o(" (ConvBERT model)"),$8o=l(),k1=a("li"),kce=a("strong"),k8o=o("ctrl"),S8o=o(" \u2014 "),CD=a("a"),R8o=o("CTRLForSequenceClassification"),B8o=o(" (CTRL model)"),P8o=l(),S1=a("li"),Sce=a("strong"),I8o=o("data2vec-text"),q8o=o(" \u2014 "),wD=a("a"),N8o=o("Data2VecTextForSequenceClassification"),j8o=o(" (Data2VecText model)"),D8o=l(),R1=a("li"),Rce=a("strong"),G8o=o("deberta"),O8o=o(" \u2014 "),AD=a("a"),V8o=o("DebertaForSequenceClassification"),X8o=o(" (DeBERTa model)"),z8o=l(),B1=a("li"),Bce=a("strong"),Q8o=o("deberta-v2"),W8o=o(" \u2014 "),yD=a("a"),H8o=o("DebertaV2ForSequenceClassification"),U8o=o(" (DeBERTa-v2 model)"),J8o=l(),P1=a("li"),Pce=a("strong"),Y8o=o("distilbert"),K8o=o(" \u2014 "),LD=a("a"),Z8o=o("DistilBertForSequenceClassification"),exo=o(" (DistilBERT model)"),oxo=l(),I1=a("li"),Ice=a("strong"),rxo=o("electra"),txo=o(" \u2014 "),xD=a("a"),axo=o("ElectraForSequenceClassification"),nxo=o(" (ELECTRA model)"),sxo=l(),q1=a("li"),qce=a("strong"),lxo=o("flaubert"),ixo=o(" \u2014 "),$D=a("a"),dxo=o("FlaubertForSequenceClassification"),cxo=o(" (FlauBERT model)"),fxo=l(),N1=a("li"),Nce=a("strong"),mxo=o("fnet"),gxo=o(" \u2014 "),kD=a("a"),hxo=o("FNetForSequenceClassification"),pxo=o(" (FNet model)"),uxo=l(),j1=a("li"),jce=a("strong"),_xo=o("funnel"),bxo=o(" \u2014 "),SD=a("a"),vxo=o("FunnelForSequenceClassification"),Fxo=o(" (Funnel Transformer model)"),Txo=l(),D1=a("li"),Dce=a("strong"),Mxo=o("gpt2"),Exo=o(" \u2014 "),RD=a("a"),Cxo=o("GPT2ForSequenceClassification"),wxo=o(" (OpenAI GPT-2 model)"),Axo=l(),G1=a("li"),Gce=a("strong"),yxo=o("gpt_neo"),Lxo=o(" \u2014 "),BD=a("a"),xxo=o("GPTNeoForSequenceClassification"),$xo=o(" (GPT Neo model)"),kxo=l(),O1=a("li"),Oce=a("strong"),Sxo=o("gptj"),Rxo=o(" \u2014 "),PD=a("a"),Bxo=o("GPTJForSequenceClassification"),Pxo=o(" (GPT-J model)"),Ixo=l(),V1=a("li"),Vce=a("strong"),qxo=o("ibert"),Nxo=o(" \u2014 "),ID=a("a"),jxo=o("IBertForSequenceClassification"),Dxo=o(" (I-BERT model)"),Gxo=l(),X1=a("li"),Xce=a("strong"),Oxo=o("layoutlm"),Vxo=o(" \u2014 "),qD=a("a"),Xxo=o("LayoutLMForSequenceClassification"),zxo=o(" (LayoutLM model)"),Qxo=l(),z1=a("li"),zce=a("strong"),Wxo=o("layoutlmv2"),Hxo=o(" \u2014 "),ND=a("a"),Uxo=o("LayoutLMv2ForSequenceClassification"),Jxo=o(" (LayoutLMv2 model)"),Yxo=l(),Q1=a("li"),Qce=a("strong"),Kxo=o("led"),Zxo=o(" \u2014 "),jD=a("a"),e9o=o("LEDForSequenceClassification"),o9o=o(" (LED model)"),r9o=l(),W1=a("li"),Wce=a("strong"),t9o=o("longformer"),a9o=o(" \u2014 "),DD=a("a"),n9o=o("LongformerForSequenceClassification"),s9o=o(" (Longformer model)"),l9o=l(),H1=a("li"),Hce=a("strong"),i9o=o("mbart"),d9o=o(" \u2014 "),GD=a("a"),c9o=o("MBartForSequenceClassification"),f9o=o(" (mBART model)"),m9o=l(),U1=a("li"),Uce=a("strong"),g9o=o("megatron-bert"),h9o=o(" \u2014 "),OD=a("a"),p9o=o("MegatronBertForSequenceClassification"),u9o=o(" (MegatronBert model)"),_9o=l(),J1=a("li"),Jce=a("strong"),b9o=o("mobilebert"),v9o=o(" \u2014 "),VD=a("a"),F9o=o("MobileBertForSequenceClassification"),T9o=o(" (MobileBERT model)"),M9o=l(),Y1=a("li"),Yce=a("strong"),E9o=o("mpnet"),C9o=o(" \u2014 "),XD=a("a"),w9o=o("MPNetForSequenceClassification"),A9o=o(" (MPNet model)"),y9o=l(),K1=a("li"),Kce=a("strong"),L9o=o("nystromformer"),x9o=o(" \u2014 "),zD=a("a"),$9o=o("NystromformerForSequenceClassification"),k9o=o(" (Nystromformer model)"),S9o=l(),Z1=a("li"),Zce=a("strong"),R9o=o("openai-gpt"),B9o=o(" \u2014 "),QD=a("a"),P9o=o("OpenAIGPTForSequenceClassification"),I9o=o(" (OpenAI GPT model)"),q9o=l(),eb=a("li"),efe=a("strong"),N9o=o("perceiver"),j9o=o(" \u2014 "),WD=a("a"),D9o=o("PerceiverForSequenceClassification"),G9o=o(" (Perceiver model)"),O9o=l(),ob=a("li"),ofe=a("strong"),V9o=o("plbart"),X9o=o(" \u2014 "),HD=a("a"),z9o=o("PLBartForSequenceClassification"),Q9o=o(" (PLBart model)"),W9o=l(),rb=a("li"),rfe=a("strong"),H9o=o("qdqbert"),U9o=o(" \u2014 "),UD=a("a"),J9o=o("QDQBertForSequenceClassification"),Y9o=o(" (QDQBert model)"),K9o=l(),tb=a("li"),tfe=a("strong"),Z9o=o("reformer"),e$o=o(" \u2014 "),JD=a("a"),o$o=o("ReformerForSequenceClassification"),r$o=o(" (Reformer model)"),t$o=l(),ab=a("li"),afe=a("strong"),a$o=o("rembert"),n$o=o(" \u2014 "),YD=a("a"),s$o=o("RemBertForSequenceClassification"),l$o=o(" (RemBERT model)"),i$o=l(),nb=a("li"),nfe=a("strong"),d$o=o("roberta"),c$o=o(" \u2014 "),KD=a("a"),f$o=o("RobertaForSequenceClassification"),m$o=o(" (RoBERTa model)"),g$o=l(),sb=a("li"),sfe=a("strong"),h$o=o("roformer"),p$o=o(" \u2014 "),ZD=a("a"),u$o=o("RoFormerForSequenceClassification"),_$o=o(" (RoFormer model)"),b$o=l(),lb=a("li"),lfe=a("strong"),v$o=o("squeezebert"),F$o=o(" \u2014 "),eG=a("a"),T$o=o("SqueezeBertForSequenceClassification"),M$o=o(" (SqueezeBERT model)"),E$o=l(),ib=a("li"),ife=a("strong"),C$o=o("tapas"),w$o=o(" \u2014 "),oG=a("a"),A$o=o("TapasForSequenceClassification"),y$o=o(" (TAPAS model)"),L$o=l(),db=a("li"),dfe=a("strong"),x$o=o("tapex"),$$o=o(" \u2014 "),rG=a("a"),k$o=o("BartForSequenceClassification"),S$o=o(" (TAPEX model)"),R$o=l(),cb=a("li"),cfe=a("strong"),B$o=o("transfo-xl"),P$o=o(" \u2014 "),tG=a("a"),I$o=o("TransfoXLForSequenceClassification"),q$o=o(" (Transformer-XL model)"),N$o=l(),fb=a("li"),ffe=a("strong"),j$o=o("xlm"),D$o=o(" \u2014 "),aG=a("a"),G$o=o("XLMForSequenceClassification"),O$o=o(" (XLM model)"),V$o=l(),mb=a("li"),mfe=a("strong"),X$o=o("xlm-roberta"),z$o=o(" \u2014 "),nG=a("a"),Q$o=o("XLMRobertaForSequenceClassification"),W$o=o(" (XLM-RoBERTa model)"),H$o=l(),gb=a("li"),gfe=a("strong"),U$o=o("xlm-roberta-xl"),J$o=o(" \u2014 "),sG=a("a"),Y$o=o("XLMRobertaXLForSequenceClassification"),K$o=o(" (XLM-RoBERTa-XL model)"),Z$o=l(),hb=a("li"),hfe=a("strong"),eko=o("xlnet"),oko=o(" \u2014 "),lG=a("a"),rko=o("XLNetForSequenceClassification"),tko=o(" (XLNet model)"),ako=l(),pb=a("li"),pfe=a("strong"),nko=o("yoso"),sko=o(" \u2014 "),iG=a("a"),lko=o("YosoForSequenceClassification"),iko=o(" (YOSO model)"),dko=l(),ub=a("p"),cko=o("The model is set in evaluation mode by default using "),ufe=a("code"),fko=o("model.eval()"),mko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),gko=o("model.train()"),hko=l(),F(_b.$$.fragment),AIe=l(),ji=a("h2"),bb=a("a"),bfe=a("span"),F(ry.$$.fragment),pko=l(),vfe=a("span"),uko=o("AutoModelForMultipleChoice"),yIe=l(),Bo=a("div"),F(ty.$$.fragment),_ko=l(),Di=a("p"),bko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dG=a("a"),vko=o("from_pretrained()"),Fko=o(" class method or the "),cG=a("a"),Tko=o("from_config()"),Mko=o(` class
method.`),Eko=l(),ay=a("p"),Cko=o("This class cannot be instantiated directly using "),Ffe=a("code"),wko=o("__init__()"),Ako=o(" (throws an error)."),yko=l(),lt=a("div"),F(ny.$$.fragment),Lko=l(),Tfe=a("p"),xko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$ko=l(),Gi=a("p"),kko=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),Sko=o("not"),Rko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),Bko=o("from_pretrained()"),Pko=o(" to load the model weights."),Iko=l(),F(vb.$$.fragment),qko=l(),eo=a("div"),F(sy.$$.fragment),Nko=l(),Efe=a("p"),jko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dko=l(),Sa=a("p"),Gko=o("The model class to instantiate is selected based on the "),Cfe=a("code"),Oko=o("model_type"),Vko=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),Qko=o("pretrained_model_name_or_path"),Wko=o(":"),Hko=l(),Y=a("ul"),Fb=a("li"),yfe=a("strong"),Uko=o("albert"),Jko=o(" \u2014 "),mG=a("a"),Yko=o("AlbertForMultipleChoice"),Kko=o(" (ALBERT model)"),Zko=l(),Tb=a("li"),Lfe=a("strong"),eSo=o("bert"),oSo=o(" \u2014 "),gG=a("a"),rSo=o("BertForMultipleChoice"),tSo=o(" (BERT model)"),aSo=l(),Mb=a("li"),xfe=a("strong"),nSo=o("big_bird"),sSo=o(" \u2014 "),hG=a("a"),lSo=o("BigBirdForMultipleChoice"),iSo=o(" (BigBird model)"),dSo=l(),Eb=a("li"),$fe=a("strong"),cSo=o("camembert"),fSo=o(" \u2014 "),pG=a("a"),mSo=o("CamembertForMultipleChoice"),gSo=o(" (CamemBERT model)"),hSo=l(),Cb=a("li"),kfe=a("strong"),pSo=o("canine"),uSo=o(" \u2014 "),uG=a("a"),_So=o("CanineForMultipleChoice"),bSo=o(" (Canine model)"),vSo=l(),wb=a("li"),Sfe=a("strong"),FSo=o("convbert"),TSo=o(" \u2014 "),_G=a("a"),MSo=o("ConvBertForMultipleChoice"),ESo=o(" (ConvBERT model)"),CSo=l(),Ab=a("li"),Rfe=a("strong"),wSo=o("data2vec-text"),ASo=o(" \u2014 "),bG=a("a"),ySo=o("Data2VecTextForMultipleChoice"),LSo=o(" (Data2VecText model)"),xSo=l(),yb=a("li"),Bfe=a("strong"),$So=o("deberta-v2"),kSo=o(" \u2014 "),vG=a("a"),SSo=o("DebertaV2ForMultipleChoice"),RSo=o(" (DeBERTa-v2 model)"),BSo=l(),Lb=a("li"),Pfe=a("strong"),PSo=o("distilbert"),ISo=o(" \u2014 "),FG=a("a"),qSo=o("DistilBertForMultipleChoice"),NSo=o(" (DistilBERT model)"),jSo=l(),xb=a("li"),Ife=a("strong"),DSo=o("electra"),GSo=o(" \u2014 "),TG=a("a"),OSo=o("ElectraForMultipleChoice"),VSo=o(" (ELECTRA model)"),XSo=l(),$b=a("li"),qfe=a("strong"),zSo=o("flaubert"),QSo=o(" \u2014 "),MG=a("a"),WSo=o("FlaubertForMultipleChoice"),HSo=o(" (FlauBERT model)"),USo=l(),kb=a("li"),Nfe=a("strong"),JSo=o("fnet"),YSo=o(" \u2014 "),EG=a("a"),KSo=o("FNetForMultipleChoice"),ZSo=o(" (FNet model)"),eRo=l(),Sb=a("li"),jfe=a("strong"),oRo=o("funnel"),rRo=o(" \u2014 "),CG=a("a"),tRo=o("FunnelForMultipleChoice"),aRo=o(" (Funnel Transformer model)"),nRo=l(),Rb=a("li"),Dfe=a("strong"),sRo=o("ibert"),lRo=o(" \u2014 "),wG=a("a"),iRo=o("IBertForMultipleChoice"),dRo=o(" (I-BERT model)"),cRo=l(),Bb=a("li"),Gfe=a("strong"),fRo=o("longformer"),mRo=o(" \u2014 "),AG=a("a"),gRo=o("LongformerForMultipleChoice"),hRo=o(" (Longformer model)"),pRo=l(),Pb=a("li"),Ofe=a("strong"),uRo=o("megatron-bert"),_Ro=o(" \u2014 "),yG=a("a"),bRo=o("MegatronBertForMultipleChoice"),vRo=o(" (MegatronBert model)"),FRo=l(),Ib=a("li"),Vfe=a("strong"),TRo=o("mobilebert"),MRo=o(" \u2014 "),LG=a("a"),ERo=o("MobileBertForMultipleChoice"),CRo=o(" (MobileBERT model)"),wRo=l(),qb=a("li"),Xfe=a("strong"),ARo=o("mpnet"),yRo=o(" \u2014 "),xG=a("a"),LRo=o("MPNetForMultipleChoice"),xRo=o(" (MPNet model)"),$Ro=l(),Nb=a("li"),zfe=a("strong"),kRo=o("nystromformer"),SRo=o(" \u2014 "),$G=a("a"),RRo=o("NystromformerForMultipleChoice"),BRo=o(" (Nystromformer model)"),PRo=l(),jb=a("li"),Qfe=a("strong"),IRo=o("qdqbert"),qRo=o(" \u2014 "),kG=a("a"),NRo=o("QDQBertForMultipleChoice"),jRo=o(" (QDQBert model)"),DRo=l(),Db=a("li"),Wfe=a("strong"),GRo=o("rembert"),ORo=o(" \u2014 "),SG=a("a"),VRo=o("RemBertForMultipleChoice"),XRo=o(" (RemBERT model)"),zRo=l(),Gb=a("li"),Hfe=a("strong"),QRo=o("roberta"),WRo=o(" \u2014 "),RG=a("a"),HRo=o("RobertaForMultipleChoice"),URo=o(" (RoBERTa model)"),JRo=l(),Ob=a("li"),Ufe=a("strong"),YRo=o("roformer"),KRo=o(" \u2014 "),BG=a("a"),ZRo=o("RoFormerForMultipleChoice"),eBo=o(" (RoFormer model)"),oBo=l(),Vb=a("li"),Jfe=a("strong"),rBo=o("squeezebert"),tBo=o(" \u2014 "),PG=a("a"),aBo=o("SqueezeBertForMultipleChoice"),nBo=o(" (SqueezeBERT model)"),sBo=l(),Xb=a("li"),Yfe=a("strong"),lBo=o("xlm"),iBo=o(" \u2014 "),IG=a("a"),dBo=o("XLMForMultipleChoice"),cBo=o(" (XLM model)"),fBo=l(),zb=a("li"),Kfe=a("strong"),mBo=o("xlm-roberta"),gBo=o(" \u2014 "),qG=a("a"),hBo=o("XLMRobertaForMultipleChoice"),pBo=o(" (XLM-RoBERTa model)"),uBo=l(),Qb=a("li"),Zfe=a("strong"),_Bo=o("xlm-roberta-xl"),bBo=o(" \u2014 "),NG=a("a"),vBo=o("XLMRobertaXLForMultipleChoice"),FBo=o(" (XLM-RoBERTa-XL model)"),TBo=l(),Wb=a("li"),eme=a("strong"),MBo=o("xlnet"),EBo=o(" \u2014 "),jG=a("a"),CBo=o("XLNetForMultipleChoice"),wBo=o(" (XLNet model)"),ABo=l(),Hb=a("li"),ome=a("strong"),yBo=o("yoso"),LBo=o(" \u2014 "),DG=a("a"),xBo=o("YosoForMultipleChoice"),$Bo=o(" (YOSO model)"),kBo=l(),Ub=a("p"),SBo=o("The model is set in evaluation mode by default using "),rme=a("code"),RBo=o("model.eval()"),BBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),PBo=o("model.train()"),IBo=l(),F(Jb.$$.fragment),LIe=l(),Oi=a("h2"),Yb=a("a"),ame=a("span"),F(ly.$$.fragment),qBo=l(),nme=a("span"),NBo=o("AutoModelForNextSentencePrediction"),xIe=l(),Po=a("div"),F(iy.$$.fragment),jBo=l(),Vi=a("p"),DBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GG=a("a"),GBo=o("from_pretrained()"),OBo=o(" class method or the "),OG=a("a"),VBo=o("from_config()"),XBo=o(` class
method.`),zBo=l(),dy=a("p"),QBo=o("This class cannot be instantiated directly using "),sme=a("code"),WBo=o("__init__()"),HBo=o(" (throws an error)."),UBo=l(),it=a("div"),F(cy.$$.fragment),JBo=l(),lme=a("p"),YBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KBo=l(),Xi=a("p"),ZBo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),ePo=o("not"),oPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),rPo=o("from_pretrained()"),tPo=o(" to load the model weights."),aPo=l(),F(Kb.$$.fragment),nPo=l(),oo=a("div"),F(fy.$$.fragment),sPo=l(),dme=a("p"),lPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iPo=l(),Ra=a("p"),dPo=o("The model class to instantiate is selected based on the "),cme=a("code"),cPo=o("model_type"),fPo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),mPo=o("pretrained_model_name_or_path"),gPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(":"),uPo=l(),Yr=a("ul"),Zb=a("li"),gme=a("strong"),_Po=o("bert"),bPo=o(" \u2014 "),XG=a("a"),vPo=o("BertForNextSentencePrediction"),FPo=o(" (BERT model)"),TPo=l(),e5=a("li"),hme=a("strong"),MPo=o("fnet"),EPo=o(" \u2014 "),zG=a("a"),CPo=o("FNetForNextSentencePrediction"),wPo=o(" (FNet model)"),APo=l(),o5=a("li"),pme=a("strong"),yPo=o("megatron-bert"),LPo=o(" \u2014 "),QG=a("a"),xPo=o("MegatronBertForNextSentencePrediction"),$Po=o(" (MegatronBert model)"),kPo=l(),r5=a("li"),ume=a("strong"),SPo=o("mobilebert"),RPo=o(" \u2014 "),WG=a("a"),BPo=o("MobileBertForNextSentencePrediction"),PPo=o(" (MobileBERT model)"),IPo=l(),t5=a("li"),_me=a("strong"),qPo=o("qdqbert"),NPo=o(" \u2014 "),HG=a("a"),jPo=o("QDQBertForNextSentencePrediction"),DPo=o(" (QDQBert model)"),GPo=l(),a5=a("p"),OPo=o("The model is set in evaluation mode by default using "),bme=a("code"),VPo=o("model.eval()"),XPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),zPo=o("model.train()"),QPo=l(),F(n5.$$.fragment),$Ie=l(),zi=a("h2"),s5=a("a"),Fme=a("span"),F(my.$$.fragment),WPo=l(),Tme=a("span"),HPo=o("AutoModelForTokenClassification"),kIe=l(),Io=a("div"),F(gy.$$.fragment),UPo=l(),Qi=a("p"),JPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UG=a("a"),YPo=o("from_pretrained()"),KPo=o(" class method or the "),JG=a("a"),ZPo=o("from_config()"),eIo=o(` class
method.`),oIo=l(),hy=a("p"),rIo=o("This class cannot be instantiated directly using "),Mme=a("code"),tIo=o("__init__()"),aIo=o(" (throws an error)."),nIo=l(),dt=a("div"),F(py.$$.fragment),sIo=l(),Eme=a("p"),lIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iIo=l(),Wi=a("p"),dIo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),cIo=o("not"),fIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),mIo=o("from_pretrained()"),gIo=o(" to load the model weights."),hIo=l(),F(l5.$$.fragment),pIo=l(),ro=a("div"),F(uy.$$.fragment),uIo=l(),wme=a("p"),_Io=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bIo=l(),Ba=a("p"),vIo=o("The model class to instantiate is selected based on the "),Ame=a("code"),FIo=o("model_type"),TIo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),CIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),U=a("ul"),i5=a("li"),xme=a("strong"),yIo=o("albert"),LIo=o(" \u2014 "),KG=a("a"),xIo=o("AlbertForTokenClassification"),$Io=o(" (ALBERT model)"),kIo=l(),d5=a("li"),$me=a("strong"),SIo=o("bert"),RIo=o(" \u2014 "),ZG=a("a"),BIo=o("BertForTokenClassification"),PIo=o(" (BERT model)"),IIo=l(),c5=a("li"),kme=a("strong"),qIo=o("big_bird"),NIo=o(" \u2014 "),eO=a("a"),jIo=o("BigBirdForTokenClassification"),DIo=o(" (BigBird model)"),GIo=l(),f5=a("li"),Sme=a("strong"),OIo=o("camembert"),VIo=o(" \u2014 "),oO=a("a"),XIo=o("CamembertForTokenClassification"),zIo=o(" (CamemBERT model)"),QIo=l(),m5=a("li"),Rme=a("strong"),WIo=o("canine"),HIo=o(" \u2014 "),rO=a("a"),UIo=o("CanineForTokenClassification"),JIo=o(" (Canine model)"),YIo=l(),g5=a("li"),Bme=a("strong"),KIo=o("convbert"),ZIo=o(" \u2014 "),tO=a("a"),eqo=o("ConvBertForTokenClassification"),oqo=o(" (ConvBERT model)"),rqo=l(),h5=a("li"),Pme=a("strong"),tqo=o("data2vec-text"),aqo=o(" \u2014 "),aO=a("a"),nqo=o("Data2VecTextForTokenClassification"),sqo=o(" (Data2VecText model)"),lqo=l(),p5=a("li"),Ime=a("strong"),iqo=o("deberta"),dqo=o(" \u2014 "),nO=a("a"),cqo=o("DebertaForTokenClassification"),fqo=o(" (DeBERTa model)"),mqo=l(),u5=a("li"),qme=a("strong"),gqo=o("deberta-v2"),hqo=o(" \u2014 "),sO=a("a"),pqo=o("DebertaV2ForTokenClassification"),uqo=o(" (DeBERTa-v2 model)"),_qo=l(),_5=a("li"),Nme=a("strong"),bqo=o("distilbert"),vqo=o(" \u2014 "),lO=a("a"),Fqo=o("DistilBertForTokenClassification"),Tqo=o(" (DistilBERT model)"),Mqo=l(),b5=a("li"),jme=a("strong"),Eqo=o("electra"),Cqo=o(" \u2014 "),iO=a("a"),wqo=o("ElectraForTokenClassification"),Aqo=o(" (ELECTRA model)"),yqo=l(),v5=a("li"),Dme=a("strong"),Lqo=o("flaubert"),xqo=o(" \u2014 "),dO=a("a"),$qo=o("FlaubertForTokenClassification"),kqo=o(" (FlauBERT model)"),Sqo=l(),F5=a("li"),Gme=a("strong"),Rqo=o("fnet"),Bqo=o(" \u2014 "),cO=a("a"),Pqo=o("FNetForTokenClassification"),Iqo=o(" (FNet model)"),qqo=l(),T5=a("li"),Ome=a("strong"),Nqo=o("funnel"),jqo=o(" \u2014 "),fO=a("a"),Dqo=o("FunnelForTokenClassification"),Gqo=o(" (Funnel Transformer model)"),Oqo=l(),M5=a("li"),Vme=a("strong"),Vqo=o("gpt2"),Xqo=o(" \u2014 "),mO=a("a"),zqo=o("GPT2ForTokenClassification"),Qqo=o(" (OpenAI GPT-2 model)"),Wqo=l(),E5=a("li"),Xme=a("strong"),Hqo=o("ibert"),Uqo=o(" \u2014 "),gO=a("a"),Jqo=o("IBertForTokenClassification"),Yqo=o(" (I-BERT model)"),Kqo=l(),C5=a("li"),zme=a("strong"),Zqo=o("layoutlm"),eNo=o(" \u2014 "),hO=a("a"),oNo=o("LayoutLMForTokenClassification"),rNo=o(" (LayoutLM model)"),tNo=l(),w5=a("li"),Qme=a("strong"),aNo=o("layoutlmv2"),nNo=o(" \u2014 "),pO=a("a"),sNo=o("LayoutLMv2ForTokenClassification"),lNo=o(" (LayoutLMv2 model)"),iNo=l(),A5=a("li"),Wme=a("strong"),dNo=o("longformer"),cNo=o(" \u2014 "),uO=a("a"),fNo=o("LongformerForTokenClassification"),mNo=o(" (Longformer model)"),gNo=l(),y5=a("li"),Hme=a("strong"),hNo=o("megatron-bert"),pNo=o(" \u2014 "),_O=a("a"),uNo=o("MegatronBertForTokenClassification"),_No=o(" (MegatronBert model)"),bNo=l(),L5=a("li"),Ume=a("strong"),vNo=o("mobilebert"),FNo=o(" \u2014 "),bO=a("a"),TNo=o("MobileBertForTokenClassification"),MNo=o(" (MobileBERT model)"),ENo=l(),x5=a("li"),Jme=a("strong"),CNo=o("mpnet"),wNo=o(" \u2014 "),vO=a("a"),ANo=o("MPNetForTokenClassification"),yNo=o(" (MPNet model)"),LNo=l(),$5=a("li"),Yme=a("strong"),xNo=o("nystromformer"),$No=o(" \u2014 "),FO=a("a"),kNo=o("NystromformerForTokenClassification"),SNo=o(" (Nystromformer model)"),RNo=l(),k5=a("li"),Kme=a("strong"),BNo=o("qdqbert"),PNo=o(" \u2014 "),TO=a("a"),INo=o("QDQBertForTokenClassification"),qNo=o(" (QDQBert model)"),NNo=l(),S5=a("li"),Zme=a("strong"),jNo=o("rembert"),DNo=o(" \u2014 "),MO=a("a"),GNo=o("RemBertForTokenClassification"),ONo=o(" (RemBERT model)"),VNo=l(),R5=a("li"),ege=a("strong"),XNo=o("roberta"),zNo=o(" \u2014 "),EO=a("a"),QNo=o("RobertaForTokenClassification"),WNo=o(" (RoBERTa model)"),HNo=l(),B5=a("li"),oge=a("strong"),UNo=o("roformer"),JNo=o(" \u2014 "),CO=a("a"),YNo=o("RoFormerForTokenClassification"),KNo=o(" (RoFormer model)"),ZNo=l(),P5=a("li"),rge=a("strong"),ejo=o("squeezebert"),ojo=o(" \u2014 "),wO=a("a"),rjo=o("SqueezeBertForTokenClassification"),tjo=o(" (SqueezeBERT model)"),ajo=l(),I5=a("li"),tge=a("strong"),njo=o("xlm"),sjo=o(" \u2014 "),AO=a("a"),ljo=o("XLMForTokenClassification"),ijo=o(" (XLM model)"),djo=l(),q5=a("li"),age=a("strong"),cjo=o("xlm-roberta"),fjo=o(" \u2014 "),yO=a("a"),mjo=o("XLMRobertaForTokenClassification"),gjo=o(" (XLM-RoBERTa model)"),hjo=l(),N5=a("li"),nge=a("strong"),pjo=o("xlm-roberta-xl"),ujo=o(" \u2014 "),LO=a("a"),_jo=o("XLMRobertaXLForTokenClassification"),bjo=o(" (XLM-RoBERTa-XL model)"),vjo=l(),j5=a("li"),sge=a("strong"),Fjo=o("xlnet"),Tjo=o(" \u2014 "),xO=a("a"),Mjo=o("XLNetForTokenClassification"),Ejo=o(" (XLNet model)"),Cjo=l(),D5=a("li"),lge=a("strong"),wjo=o("yoso"),Ajo=o(" \u2014 "),$O=a("a"),yjo=o("YosoForTokenClassification"),Ljo=o(" (YOSO model)"),xjo=l(),G5=a("p"),$jo=o("The model is set in evaluation mode by default using "),ige=a("code"),kjo=o("model.eval()"),Sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),Rjo=o("model.train()"),Bjo=l(),F(O5.$$.fragment),SIe=l(),Hi=a("h2"),V5=a("a"),cge=a("span"),F(_y.$$.fragment),Pjo=l(),fge=a("span"),Ijo=o("AutoModelForQuestionAnswering"),RIe=l(),qo=a("div"),F(by.$$.fragment),qjo=l(),Ui=a("p"),Njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kO=a("a"),jjo=o("from_pretrained()"),Djo=o(" class method or the "),SO=a("a"),Gjo=o("from_config()"),Ojo=o(` class
method.`),Vjo=l(),vy=a("p"),Xjo=o("This class cannot be instantiated directly using "),mge=a("code"),zjo=o("__init__()"),Qjo=o(" (throws an error)."),Wjo=l(),ct=a("div"),F(Fy.$$.fragment),Hjo=l(),gge=a("p"),Ujo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jjo=l(),Ji=a("p"),Yjo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),Kjo=o("not"),Zjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=a("a"),eDo=o("from_pretrained()"),oDo=o(" to load the model weights."),rDo=l(),F(X5.$$.fragment),tDo=l(),to=a("div"),F(Ty.$$.fragment),aDo=l(),pge=a("p"),nDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sDo=l(),Pa=a("p"),lDo=o("The model class to instantiate is selected based on the "),uge=a("code"),iDo=o("model_type"),dDo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),cDo=o("pretrained_model_name_or_path"),fDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),mDo=o("pretrained_model_name_or_path"),gDo=o(":"),hDo=l(),O=a("ul"),z5=a("li"),vge=a("strong"),pDo=o("albert"),uDo=o(" \u2014 "),BO=a("a"),_Do=o("AlbertForQuestionAnswering"),bDo=o(" (ALBERT model)"),vDo=l(),Q5=a("li"),Fge=a("strong"),FDo=o("bart"),TDo=o(" \u2014 "),PO=a("a"),MDo=o("BartForQuestionAnswering"),EDo=o(" (BART model)"),CDo=l(),W5=a("li"),Tge=a("strong"),wDo=o("bert"),ADo=o(" \u2014 "),IO=a("a"),yDo=o("BertForQuestionAnswering"),LDo=o(" (BERT model)"),xDo=l(),H5=a("li"),Mge=a("strong"),$Do=o("big_bird"),kDo=o(" \u2014 "),qO=a("a"),SDo=o("BigBirdForQuestionAnswering"),RDo=o(" (BigBird model)"),BDo=l(),U5=a("li"),Ege=a("strong"),PDo=o("bigbird_pegasus"),IDo=o(" \u2014 "),NO=a("a"),qDo=o("BigBirdPegasusForQuestionAnswering"),NDo=o(" (BigBirdPegasus model)"),jDo=l(),J5=a("li"),Cge=a("strong"),DDo=o("camembert"),GDo=o(" \u2014 "),jO=a("a"),ODo=o("CamembertForQuestionAnswering"),VDo=o(" (CamemBERT model)"),XDo=l(),Y5=a("li"),wge=a("strong"),zDo=o("canine"),QDo=o(" \u2014 "),DO=a("a"),WDo=o("CanineForQuestionAnswering"),HDo=o(" (Canine model)"),UDo=l(),K5=a("li"),Age=a("strong"),JDo=o("convbert"),YDo=o(" \u2014 "),GO=a("a"),KDo=o("ConvBertForQuestionAnswering"),ZDo=o(" (ConvBERT model)"),eGo=l(),Z5=a("li"),yge=a("strong"),oGo=o("data2vec-text"),rGo=o(" \u2014 "),OO=a("a"),tGo=o("Data2VecTextForQuestionAnswering"),aGo=o(" (Data2VecText model)"),nGo=l(),e3=a("li"),Lge=a("strong"),sGo=o("deberta"),lGo=o(" \u2014 "),VO=a("a"),iGo=o("DebertaForQuestionAnswering"),dGo=o(" (DeBERTa model)"),cGo=l(),o3=a("li"),xge=a("strong"),fGo=o("deberta-v2"),mGo=o(" \u2014 "),XO=a("a"),gGo=o("DebertaV2ForQuestionAnswering"),hGo=o(" (DeBERTa-v2 model)"),pGo=l(),r3=a("li"),$ge=a("strong"),uGo=o("distilbert"),_Go=o(" \u2014 "),zO=a("a"),bGo=o("DistilBertForQuestionAnswering"),vGo=o(" (DistilBERT model)"),FGo=l(),t3=a("li"),kge=a("strong"),TGo=o("electra"),MGo=o(" \u2014 "),QO=a("a"),EGo=o("ElectraForQuestionAnswering"),CGo=o(" (ELECTRA model)"),wGo=l(),a3=a("li"),Sge=a("strong"),AGo=o("flaubert"),yGo=o(" \u2014 "),WO=a("a"),LGo=o("FlaubertForQuestionAnsweringSimple"),xGo=o(" (FlauBERT model)"),$Go=l(),n3=a("li"),Rge=a("strong"),kGo=o("fnet"),SGo=o(" \u2014 "),HO=a("a"),RGo=o("FNetForQuestionAnswering"),BGo=o(" (FNet model)"),PGo=l(),s3=a("li"),Bge=a("strong"),IGo=o("funnel"),qGo=o(" \u2014 "),UO=a("a"),NGo=o("FunnelForQuestionAnswering"),jGo=o(" (Funnel Transformer model)"),DGo=l(),l3=a("li"),Pge=a("strong"),GGo=o("gptj"),OGo=o(" \u2014 "),JO=a("a"),VGo=o("GPTJForQuestionAnswering"),XGo=o(" (GPT-J model)"),zGo=l(),i3=a("li"),Ige=a("strong"),QGo=o("ibert"),WGo=o(" \u2014 "),YO=a("a"),HGo=o("IBertForQuestionAnswering"),UGo=o(" (I-BERT model)"),JGo=l(),d3=a("li"),qge=a("strong"),YGo=o("layoutlmv2"),KGo=o(" \u2014 "),KO=a("a"),ZGo=o("LayoutLMv2ForQuestionAnswering"),eOo=o(" (LayoutLMv2 model)"),oOo=l(),c3=a("li"),Nge=a("strong"),rOo=o("led"),tOo=o(" \u2014 "),ZO=a("a"),aOo=o("LEDForQuestionAnswering"),nOo=o(" (LED model)"),sOo=l(),f3=a("li"),jge=a("strong"),lOo=o("longformer"),iOo=o(" \u2014 "),eV=a("a"),dOo=o("LongformerForQuestionAnswering"),cOo=o(" (Longformer model)"),fOo=l(),m3=a("li"),Dge=a("strong"),mOo=o("lxmert"),gOo=o(" \u2014 "),oV=a("a"),hOo=o("LxmertForQuestionAnswering"),pOo=o(" (LXMERT model)"),uOo=l(),g3=a("li"),Gge=a("strong"),_Oo=o("mbart"),bOo=o(" \u2014 "),rV=a("a"),vOo=o("MBartForQuestionAnswering"),FOo=o(" (mBART model)"),TOo=l(),h3=a("li"),Oge=a("strong"),MOo=o("megatron-bert"),EOo=o(" \u2014 "),tV=a("a"),COo=o("MegatronBertForQuestionAnswering"),wOo=o(" (MegatronBert model)"),AOo=l(),p3=a("li"),Vge=a("strong"),yOo=o("mobilebert"),LOo=o(" \u2014 "),aV=a("a"),xOo=o("MobileBertForQuestionAnswering"),$Oo=o(" (MobileBERT model)"),kOo=l(),u3=a("li"),Xge=a("strong"),SOo=o("mpnet"),ROo=o(" \u2014 "),nV=a("a"),BOo=o("MPNetForQuestionAnswering"),POo=o(" (MPNet model)"),IOo=l(),_3=a("li"),zge=a("strong"),qOo=o("nystromformer"),NOo=o(" \u2014 "),sV=a("a"),jOo=o("NystromformerForQuestionAnswering"),DOo=o(" (Nystromformer model)"),GOo=l(),b3=a("li"),Qge=a("strong"),OOo=o("qdqbert"),VOo=o(" \u2014 "),lV=a("a"),XOo=o("QDQBertForQuestionAnswering"),zOo=o(" (QDQBert model)"),QOo=l(),v3=a("li"),Wge=a("strong"),WOo=o("reformer"),HOo=o(" \u2014 "),iV=a("a"),UOo=o("ReformerForQuestionAnswering"),JOo=o(" (Reformer model)"),YOo=l(),F3=a("li"),Hge=a("strong"),KOo=o("rembert"),ZOo=o(" \u2014 "),dV=a("a"),eVo=o("RemBertForQuestionAnswering"),oVo=o(" (RemBERT model)"),rVo=l(),T3=a("li"),Uge=a("strong"),tVo=o("roberta"),aVo=o(" \u2014 "),cV=a("a"),nVo=o("RobertaForQuestionAnswering"),sVo=o(" (RoBERTa model)"),lVo=l(),M3=a("li"),Jge=a("strong"),iVo=o("roformer"),dVo=o(" \u2014 "),fV=a("a"),cVo=o("RoFormerForQuestionAnswering"),fVo=o(" (RoFormer model)"),mVo=l(),E3=a("li"),Yge=a("strong"),gVo=o("splinter"),hVo=o(" \u2014 "),mV=a("a"),pVo=o("SplinterForQuestionAnswering"),uVo=o(" (Splinter model)"),_Vo=l(),C3=a("li"),Kge=a("strong"),bVo=o("squeezebert"),vVo=o(" \u2014 "),gV=a("a"),FVo=o("SqueezeBertForQuestionAnswering"),TVo=o(" (SqueezeBERT model)"),MVo=l(),w3=a("li"),Zge=a("strong"),EVo=o("xlm"),CVo=o(" \u2014 "),hV=a("a"),wVo=o("XLMForQuestionAnsweringSimple"),AVo=o(" (XLM model)"),yVo=l(),A3=a("li"),ehe=a("strong"),LVo=o("xlm-roberta"),xVo=o(" \u2014 "),pV=a("a"),$Vo=o("XLMRobertaForQuestionAnswering"),kVo=o(" (XLM-RoBERTa model)"),SVo=l(),y3=a("li"),ohe=a("strong"),RVo=o("xlm-roberta-xl"),BVo=o(" \u2014 "),uV=a("a"),PVo=o("XLMRobertaXLForQuestionAnswering"),IVo=o(" (XLM-RoBERTa-XL model)"),qVo=l(),L3=a("li"),rhe=a("strong"),NVo=o("xlnet"),jVo=o(" \u2014 "),_V=a("a"),DVo=o("XLNetForQuestionAnsweringSimple"),GVo=o(" (XLNet model)"),OVo=l(),x3=a("li"),the=a("strong"),VVo=o("yoso"),XVo=o(" \u2014 "),bV=a("a"),zVo=o("YosoForQuestionAnswering"),QVo=o(" (YOSO model)"),WVo=l(),$3=a("p"),HVo=o("The model is set in evaluation mode by default using "),ahe=a("code"),UVo=o("model.eval()"),JVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),YVo=o("model.train()"),KVo=l(),F(k3.$$.fragment),BIe=l(),Yi=a("h2"),S3=a("a"),she=a("span"),F(My.$$.fragment),ZVo=l(),lhe=a("span"),eXo=o("AutoModelForTableQuestionAnswering"),PIe=l(),No=a("div"),F(Ey.$$.fragment),oXo=l(),Ki=a("p"),rXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vV=a("a"),tXo=o("from_pretrained()"),aXo=o(" class method or the "),FV=a("a"),nXo=o("from_config()"),sXo=o(` class
method.`),lXo=l(),Cy=a("p"),iXo=o("This class cannot be instantiated directly using "),ihe=a("code"),dXo=o("__init__()"),cXo=o(" (throws an error)."),fXo=l(),ft=a("div"),F(wy.$$.fragment),mXo=l(),dhe=a("p"),gXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hXo=l(),Zi=a("p"),pXo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),uXo=o("not"),_Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),bXo=o("from_pretrained()"),vXo=o(" to load the model weights."),FXo=l(),F(R3.$$.fragment),TXo=l(),ao=a("div"),F(Ay.$$.fragment),MXo=l(),fhe=a("p"),EXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CXo=l(),Ia=a("p"),wXo=o("The model class to instantiate is selected based on the "),mhe=a("code"),AXo=o("model_type"),yXo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),LXo=o("pretrained_model_name_or_path"),xXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),$Xo=o("pretrained_model_name_or_path"),kXo=o(":"),SXo=l(),phe=a("ul"),B3=a("li"),uhe=a("strong"),RXo=o("tapas"),BXo=o(" \u2014 "),MV=a("a"),PXo=o("TapasForQuestionAnswering"),IXo=o(" (TAPAS model)"),qXo=l(),P3=a("p"),NXo=o("The model is set in evaluation mode by default using "),_he=a("code"),jXo=o("model.eval()"),DXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),GXo=o("model.train()"),OXo=l(),F(I3.$$.fragment),IIe=l(),ed=a("h2"),q3=a("a"),vhe=a("span"),F(yy.$$.fragment),VXo=l(),Fhe=a("span"),XXo=o("AutoModelForImageClassification"),qIe=l(),jo=a("div"),F(Ly.$$.fragment),zXo=l(),od=a("p"),QXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EV=a("a"),WXo=o("from_pretrained()"),HXo=o(" class method or the "),CV=a("a"),UXo=o("from_config()"),JXo=o(` class
method.`),YXo=l(),xy=a("p"),KXo=o("This class cannot be instantiated directly using "),The=a("code"),ZXo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),mt=a("div"),F($y.$$.fragment),rzo=l(),Mhe=a("p"),tzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),azo=l(),rd=a("p"),nzo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),szo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),izo=o("from_pretrained()"),dzo=o(" to load the model weights."),czo=l(),F(N3.$$.fragment),fzo=l(),no=a("div"),F(ky.$$.fragment),mzo=l(),Che=a("p"),gzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hzo=l(),qa=a("p"),pzo=o("The model class to instantiate is selected based on the "),whe=a("code"),uzo=o("model_type"),_zo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),bzo=o("pretrained_model_name_or_path"),vzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),Fzo=o("pretrained_model_name_or_path"),Tzo=o(":"),Mzo=l(),ve=a("ul"),j3=a("li"),Lhe=a("strong"),Ezo=o("beit"),Czo=o(" \u2014 "),AV=a("a"),wzo=o("BeitForImageClassification"),Azo=o(" (BEiT model)"),yzo=l(),D3=a("li"),xhe=a("strong"),Lzo=o("convnext"),xzo=o(" \u2014 "),yV=a("a"),$zo=o("ConvNextForImageClassification"),kzo=o(" (ConvNext model)"),Szo=l(),G3=a("li"),$he=a("strong"),Rzo=o("cvt"),Bzo=o(" \u2014 "),LV=a("a"),Pzo=o("CvtForImageClassification"),Izo=o(" (CvT model)"),qzo=l(),O3=a("li"),khe=a("strong"),Nzo=o("data2vec-vision"),jzo=o(" \u2014 "),xV=a("a"),Dzo=o("Data2VecVisionForImageClassification"),Gzo=o(" (Data2VecVision model)"),Ozo=l(),Rs=a("li"),She=a("strong"),Vzo=o("deit"),Xzo=o(" \u2014 "),$V=a("a"),zzo=o("DeiTForImageClassification"),Qzo=o(" or "),kV=a("a"),Wzo=o("DeiTForImageClassificationWithTeacher"),Hzo=o(" (DeiT model)"),Uzo=l(),V3=a("li"),Rhe=a("strong"),Jzo=o("imagegpt"),Yzo=o(" \u2014 "),SV=a("a"),Kzo=o("ImageGPTForImageClassification"),Zzo=o(" (ImageGPT model)"),eQo=l(),gt=a("li"),Bhe=a("strong"),oQo=o("perceiver"),rQo=o(" \u2014 "),RV=a("a"),tQo=o("PerceiverForImageClassificationLearned"),aQo=o(" or "),BV=a("a"),nQo=o("PerceiverForImageClassificationFourier"),sQo=o(" or "),PV=a("a"),lQo=o("PerceiverForImageClassificationConvProcessing"),iQo=o(" (Perceiver model)"),dQo=l(),X3=a("li"),Phe=a("strong"),cQo=o("poolformer"),fQo=o(" \u2014 "),IV=a("a"),mQo=o("PoolFormerForImageClassification"),gQo=o(" (PoolFormer model)"),hQo=l(),z3=a("li"),Ihe=a("strong"),pQo=o("regnet"),uQo=o(" \u2014 "),qV=a("a"),_Qo=o("RegNetForImageClassification"),bQo=o(" (RegNet model)"),vQo=l(),Q3=a("li"),qhe=a("strong"),FQo=o("resnet"),TQo=o(" \u2014 "),NV=a("a"),MQo=o("ResNetForImageClassification"),EQo=o(" (ResNet model)"),CQo=l(),W3=a("li"),Nhe=a("strong"),wQo=o("segformer"),AQo=o(" \u2014 "),jV=a("a"),yQo=o("SegformerForImageClassification"),LQo=o(" (SegFormer model)"),xQo=l(),H3=a("li"),jhe=a("strong"),$Qo=o("swin"),kQo=o(" \u2014 "),DV=a("a"),SQo=o("SwinForImageClassification"),RQo=o(" (Swin model)"),BQo=l(),U3=a("li"),Dhe=a("strong"),PQo=o("van"),IQo=o(" \u2014 "),GV=a("a"),qQo=o("VanForImageClassification"),NQo=o(" (VAN model)"),jQo=l(),J3=a("li"),Ghe=a("strong"),DQo=o("vit"),GQo=o(" \u2014 "),OV=a("a"),OQo=o("ViTForImageClassification"),VQo=o(" (ViT model)"),XQo=l(),Y3=a("p"),zQo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),QQo=o("model.eval()"),WQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),HQo=o("model.train()"),UQo=l(),F(K3.$$.fragment),NIe=l(),td=a("h2"),Z3=a("a"),Xhe=a("span"),F(Sy.$$.fragment),JQo=l(),zhe=a("span"),YQo=o("AutoModelForVision2Seq"),jIe=l(),Do=a("div"),F(Ry.$$.fragment),KQo=l(),ad=a("p"),ZQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VV=a("a"),eWo=o("from_pretrained()"),oWo=o(" class method or the "),XV=a("a"),rWo=o("from_config()"),tWo=o(` class
method.`),aWo=l(),By=a("p"),nWo=o("This class cannot be instantiated directly using "),Qhe=a("code"),sWo=o("__init__()"),lWo=o(" (throws an error)."),iWo=l(),ht=a("div"),F(Py.$$.fragment),dWo=l(),Whe=a("p"),cWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fWo=l(),nd=a("p"),mWo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),gWo=o("not"),hWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),pWo=o("from_pretrained()"),uWo=o(" to load the model weights."),_Wo=l(),F(ev.$$.fragment),bWo=l(),so=a("div"),F(Iy.$$.fragment),vWo=l(),Uhe=a("p"),FWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TWo=l(),Na=a("p"),MWo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),EWo=o("model_type"),CWo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),yWo=o("pretrained_model_name_or_path"),LWo=o(":"),xWo=l(),Zhe=a("ul"),ov=a("li"),epe=a("strong"),$Wo=o("vision-encoder-decoder"),kWo=o(" \u2014 "),QV=a("a"),SWo=o("VisionEncoderDecoderModel"),RWo=o(" (Vision Encoder decoder model)"),BWo=l(),rv=a("p"),PWo=o("The model is set in evaluation mode by default using "),ope=a("code"),IWo=o("model.eval()"),qWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),NWo=o("model.train()"),jWo=l(),F(tv.$$.fragment),DIe=l(),sd=a("h2"),av=a("a"),tpe=a("span"),F(qy.$$.fragment),DWo=l(),ape=a("span"),GWo=o("AutoModelForAudioClassification"),GIe=l(),Go=a("div"),F(Ny.$$.fragment),OWo=l(),ld=a("p"),VWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WV=a("a"),XWo=o("from_pretrained()"),zWo=o(" class method or the "),HV=a("a"),QWo=o("from_config()"),WWo=o(` class
method.`),HWo=l(),jy=a("p"),UWo=o("This class cannot be instantiated directly using "),npe=a("code"),JWo=o("__init__()"),YWo=o(" (throws an error)."),KWo=l(),pt=a("div"),F(Dy.$$.fragment),ZWo=l(),spe=a("p"),eHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oHo=l(),id=a("p"),rHo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),tHo=o("not"),aHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),nHo=o("from_pretrained()"),sHo=o(" to load the model weights."),lHo=l(),F(nv.$$.fragment),iHo=l(),lo=a("div"),F(Gy.$$.fragment),dHo=l(),ipe=a("p"),cHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fHo=l(),ja=a("p"),mHo=o("The model class to instantiate is selected based on the "),dpe=a("code"),gHo=o("model_type"),hHo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),pHo=o("pretrained_model_name_or_path"),uHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),_Ho=o("pretrained_model_name_or_path"),bHo=o(":"),vHo=l(),Ne=a("ul"),sv=a("li"),mpe=a("strong"),FHo=o("data2vec-audio"),THo=o(" \u2014 "),JV=a("a"),MHo=o("Data2VecAudioForSequenceClassification"),EHo=o(" (Data2VecAudio model)"),CHo=l(),lv=a("li"),gpe=a("strong"),wHo=o("hubert"),AHo=o(" \u2014 "),YV=a("a"),yHo=o("HubertForSequenceClassification"),LHo=o(" (Hubert model)"),xHo=l(),iv=a("li"),hpe=a("strong"),$Ho=o("sew"),kHo=o(" \u2014 "),KV=a("a"),SHo=o("SEWForSequenceClassification"),RHo=o(" (SEW model)"),BHo=l(),dv=a("li"),ppe=a("strong"),PHo=o("sew-d"),IHo=o(" \u2014 "),ZV=a("a"),qHo=o("SEWDForSequenceClassification"),NHo=o(" (SEW-D model)"),jHo=l(),cv=a("li"),upe=a("strong"),DHo=o("unispeech"),GHo=o(" \u2014 "),eX=a("a"),OHo=o("UniSpeechForSequenceClassification"),VHo=o(" (UniSpeech model)"),XHo=l(),fv=a("li"),_pe=a("strong"),zHo=o("unispeech-sat"),QHo=o(" \u2014 "),oX=a("a"),WHo=o("UniSpeechSatForSequenceClassification"),HHo=o(" (UniSpeechSat model)"),UHo=l(),mv=a("li"),bpe=a("strong"),JHo=o("wav2vec2"),YHo=o(" \u2014 "),rX=a("a"),KHo=o("Wav2Vec2ForSequenceClassification"),ZHo=o(" (Wav2Vec2 model)"),eUo=l(),gv=a("li"),vpe=a("strong"),oUo=o("wavlm"),rUo=o(" \u2014 "),tX=a("a"),tUo=o("WavLMForSequenceClassification"),aUo=o(" (WavLM model)"),nUo=l(),hv=a("p"),sUo=o("The model is set in evaluation mode by default using "),Fpe=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=a("code"),dUo=o("model.train()"),cUo=l(),F(pv.$$.fragment),OIe=l(),dd=a("h2"),uv=a("a"),Mpe=a("span"),F(Oy.$$.fragment),fUo=l(),Epe=a("span"),mUo=o("AutoModelForAudioFrameClassification"),VIe=l(),Oo=a("div"),F(Vy.$$.fragment),gUo=l(),cd=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aX=a("a"),pUo=o("from_pretrained()"),uUo=o(" class method or the "),nX=a("a"),_Uo=o("from_config()"),bUo=o(` class
method.`),vUo=l(),Xy=a("p"),FUo=o("This class cannot be instantiated directly using "),Cpe=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ut=a("div"),F(zy.$$.fragment),CUo=l(),wpe=a("p"),wUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AUo=l(),fd=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),$Uo=o("from_pretrained()"),kUo=o(" to load the model weights."),SUo=l(),F(_v.$$.fragment),RUo=l(),io=a("div"),F(Qy.$$.fragment),BUo=l(),ype=a("p"),PUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IUo=l(),Da=a("p"),qUo=o("The model class to instantiate is selected based on the "),Lpe=a("code"),NUo=o("model_type"),jUo=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(":"),XUo=l(),Ga=a("ul"),bv=a("li"),kpe=a("strong"),zUo=o("data2vec-audio"),QUo=o(" \u2014 "),lX=a("a"),WUo=o("Data2VecAudioForAudioFrameClassification"),HUo=o(" (Data2VecAudio model)"),UUo=l(),vv=a("li"),Spe=a("strong"),JUo=o("unispeech-sat"),YUo=o(" \u2014 "),iX=a("a"),KUo=o("UniSpeechSatForAudioFrameClassification"),ZUo=o(" (UniSpeechSat model)"),eJo=l(),Fv=a("li"),Rpe=a("strong"),oJo=o("wav2vec2"),rJo=o(" \u2014 "),dX=a("a"),tJo=o("Wav2Vec2ForAudioFrameClassification"),aJo=o(" (Wav2Vec2 model)"),nJo=l(),Tv=a("li"),Bpe=a("strong"),sJo=o("wavlm"),lJo=o(" \u2014 "),cX=a("a"),iJo=o("WavLMForAudioFrameClassification"),dJo=o(" (WavLM model)"),cJo=l(),Mv=a("p"),fJo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),mJo=o("model.eval()"),gJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),hJo=o("model.train()"),pJo=l(),F(Ev.$$.fragment),XIe=l(),md=a("h2"),Cv=a("a"),qpe=a("span"),F(Wy.$$.fragment),uJo=l(),Npe=a("span"),_Jo=o("AutoModelForCTC"),zIe=l(),Vo=a("div"),F(Hy.$$.fragment),bJo=l(),gd=a("p"),vJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fX=a("a"),FJo=o("from_pretrained()"),TJo=o(" class method or the "),mX=a("a"),MJo=o("from_config()"),EJo=o(` class
method.`),CJo=l(),Uy=a("p"),wJo=o("This class cannot be instantiated directly using "),jpe=a("code"),AJo=o("__init__()"),yJo=o(" (throws an error)."),LJo=l(),_t=a("div"),F(Jy.$$.fragment),xJo=l(),Dpe=a("p"),$Jo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kJo=l(),hd=a("p"),SJo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),RJo=o("not"),BJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),PJo=o("from_pretrained()"),IJo=o(" to load the model weights."),qJo=l(),F(wv.$$.fragment),NJo=l(),co=a("div"),F(Yy.$$.fragment),jJo=l(),Ope=a("p"),DJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GJo=l(),Oa=a("p"),OJo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),VJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(":"),UJo=l(),je=a("ul"),Av=a("li"),Qpe=a("strong"),JJo=o("data2vec-audio"),YJo=o(" \u2014 "),hX=a("a"),KJo=o("Data2VecAudioForCTC"),ZJo=o(" (Data2VecAudio model)"),eYo=l(),yv=a("li"),Wpe=a("strong"),oYo=o("hubert"),rYo=o(" \u2014 "),pX=a("a"),tYo=o("HubertForCTC"),aYo=o(" (Hubert model)"),nYo=l(),Lv=a("li"),Hpe=a("strong"),sYo=o("sew"),lYo=o(" \u2014 "),uX=a("a"),iYo=o("SEWForCTC"),dYo=o(" (SEW model)"),cYo=l(),xv=a("li"),Upe=a("strong"),fYo=o("sew-d"),mYo=o(" \u2014 "),_X=a("a"),gYo=o("SEWDForCTC"),hYo=o(" (SEW-D model)"),pYo=l(),$v=a("li"),Jpe=a("strong"),uYo=o("unispeech"),_Yo=o(" \u2014 "),bX=a("a"),bYo=o("UniSpeechForCTC"),vYo=o(" (UniSpeech model)"),FYo=l(),kv=a("li"),Ype=a("strong"),TYo=o("unispeech-sat"),MYo=o(" \u2014 "),vX=a("a"),EYo=o("UniSpeechSatForCTC"),CYo=o(" (UniSpeechSat model)"),wYo=l(),Sv=a("li"),Kpe=a("strong"),AYo=o("wav2vec2"),yYo=o(" \u2014 "),FX=a("a"),LYo=o("Wav2Vec2ForCTC"),xYo=o(" (Wav2Vec2 model)"),$Yo=l(),Rv=a("li"),Zpe=a("strong"),kYo=o("wavlm"),SYo=o(" \u2014 "),TX=a("a"),RYo=o("WavLMForCTC"),BYo=o(" (WavLM model)"),PYo=l(),Bv=a("p"),IYo=o("The model is set in evaluation mode by default using "),eue=a("code"),qYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),jYo=o("model.train()"),DYo=l(),F(Pv.$$.fragment),QIe=l(),pd=a("h2"),Iv=a("a"),rue=a("span"),F(Ky.$$.fragment),GYo=l(),tue=a("span"),OYo=o("AutoModelForSpeechSeq2Seq"),WIe=l(),Xo=a("div"),F(Zy.$$.fragment),VYo=l(),ud=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MX=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),EX=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),eL=a("p"),JYo=o("This class cannot be instantiated directly using "),aue=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),bt=a("div"),F(oL.$$.fragment),eKo=l(),nue=a("p"),oKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rKo=l(),_d=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),F(qv.$$.fragment),dKo=l(),fo=a("div"),F(rL.$$.fragment),cKo=l(),lue=a("p"),fKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mKo=l(),Va=a("p"),gKo=o("The model class to instantiate is selected based on the "),iue=a("code"),hKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),uKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(":"),FKo=l(),tL=a("ul"),Nv=a("li"),fue=a("strong"),TKo=o("speech-encoder-decoder"),MKo=o(" \u2014 "),wX=a("a"),EKo=o("SpeechEncoderDecoderModel"),CKo=o(" (Speech Encoder decoder model)"),wKo=l(),jv=a("li"),mue=a("strong"),AKo=o("speech_to_text"),yKo=o(" \u2014 "),AX=a("a"),LKo=o("Speech2TextForConditionalGeneration"),xKo=o(" (Speech2Text model)"),$Ko=l(),Dv=a("p"),kKo=o("The model is set in evaluation mode by default using "),gue=a("code"),SKo=o("model.eval()"),RKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),BKo=o("model.train()"),PKo=l(),F(Gv.$$.fragment),HIe=l(),bd=a("h2"),Ov=a("a"),pue=a("span"),F(aL.$$.fragment),IKo=l(),uue=a("span"),qKo=o("AutoModelForAudioXVector"),UIe=l(),zo=a("div"),F(nL.$$.fragment),NKo=l(),vd=a("p"),jKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yX=a("a"),DKo=o("from_pretrained()"),GKo=o(" class method or the "),LX=a("a"),OKo=o("from_config()"),VKo=o(` class
method.`),XKo=l(),sL=a("p"),zKo=o("This class cannot be instantiated directly using "),_ue=a("code"),QKo=o("__init__()"),WKo=o(" (throws an error)."),HKo=l(),vt=a("div"),F(lL.$$.fragment),UKo=l(),bue=a("p"),JKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YKo=l(),Fd=a("p"),KKo=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),ZKo=o("not"),eZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),oZo=o("from_pretrained()"),rZo=o(" to load the model weights."),tZo=l(),F(Vv.$$.fragment),aZo=l(),mo=a("div"),F(iL.$$.fragment),nZo=l(),Fue=a("p"),sZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lZo=l(),Xa=a("p"),iZo=o("The model class to instantiate is selected based on the "),Tue=a("code"),dZo=o("model_type"),cZo=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),fZo=o("pretrained_model_name_or_path"),mZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(":"),pZo=l(),za=a("ul"),Xv=a("li"),Cue=a("strong"),uZo=o("data2vec-audio"),_Zo=o(" \u2014 "),$X=a("a"),bZo=o("Data2VecAudioForXVector"),vZo=o(" (Data2VecAudio model)"),FZo=l(),zv=a("li"),wue=a("strong"),TZo=o("unispeech-sat"),MZo=o(" \u2014 "),kX=a("a"),EZo=o("UniSpeechSatForXVector"),CZo=o(" (UniSpeechSat model)"),wZo=l(),Qv=a("li"),Aue=a("strong"),AZo=o("wav2vec2"),yZo=o(" \u2014 "),SX=a("a"),LZo=o("Wav2Vec2ForXVector"),xZo=o(" (Wav2Vec2 model)"),$Zo=l(),Wv=a("li"),yue=a("strong"),kZo=o("wavlm"),SZo=o(" \u2014 "),RX=a("a"),RZo=o("WavLMForXVector"),BZo=o(" (WavLM model)"),PZo=l(),Hv=a("p"),IZo=o("The model is set in evaluation mode by default using "),Lue=a("code"),qZo=o("model.eval()"),NZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),jZo=o("model.train()"),DZo=l(),F(Uv.$$.fragment),JIe=l(),Td=a("h2"),Jv=a("a"),$ue=a("span"),F(dL.$$.fragment),GZo=l(),kue=a("span"),OZo=o("AutoModelForMaskedImageModeling"),YIe=l(),Qo=a("div"),F(cL.$$.fragment),VZo=l(),Md=a("p"),XZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BX=a("a"),zZo=o("from_pretrained()"),QZo=o(" class method or the "),PX=a("a"),WZo=o("from_config()"),HZo=o(` class
method.`),UZo=l(),fL=a("p"),JZo=o("This class cannot be instantiated directly using "),Sue=a("code"),YZo=o("__init__()"),KZo=o(" (throws an error)."),ZZo=l(),Ft=a("div"),F(mL.$$.fragment),eer=l(),Rue=a("p"),oer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rer=l(),Ed=a("p"),ter=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),aer=o("not"),ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),ser=o("from_pretrained()"),ler=o(" to load the model weights."),ier=l(),F(Yv.$$.fragment),der=l(),go=a("div"),F(gL.$$.fragment),cer=l(),Pue=a("p"),fer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mer=l(),Qa=a("p"),ger=o("The model class to instantiate is selected based on the "),Iue=a("code"),her=o("model_type"),per=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),uer=o("pretrained_model_name_or_path"),_er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(":"),Fer=l(),Cd=a("ul"),Kv=a("li"),jue=a("strong"),Ter=o("deit"),Mer=o(" \u2014 "),qX=a("a"),Eer=o("DeiTForMaskedImageModeling"),Cer=o(" (DeiT model)"),wer=l(),Zv=a("li"),Due=a("strong"),Aer=o("swin"),yer=o(" \u2014 "),NX=a("a"),Ler=o("SwinForMaskedImageModeling"),xer=o(" (Swin model)"),$er=l(),eF=a("li"),Gue=a("strong"),ker=o("vit"),Ser=o(" \u2014 "),jX=a("a"),Rer=o("ViTForMaskedImageModeling"),Ber=o(" (ViT model)"),Per=l(),oF=a("p"),Ier=o("The model is set in evaluation mode by default using "),Oue=a("code"),qer=o("model.eval()"),Ner=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),jer=o("model.train()"),Der=l(),F(rF.$$.fragment),KIe=l(),wd=a("h2"),tF=a("a"),Xue=a("span"),F(hL.$$.fragment),Ger=l(),zue=a("span"),Oer=o("AutoModelForObjectDetection"),ZIe=l(),Wo=a("div"),F(pL.$$.fragment),Ver=l(),Ad=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DX=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),GX=a("a"),Wer=o("from_config()"),Her=o(` class
method.`),Uer=l(),uL=a("p"),Jer=o("This class cannot be instantiated directly using "),Que=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),Tt=a("div"),F(_L.$$.fragment),eor=l(),Wue=a("p"),oor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ror=l(),yd=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(aF.$$.fragment),dor=l(),ho=a("div"),F(bL.$$.fragment),cor=l(),Uue=a("p"),mor=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gor=l(),Wa=a("p"),hor=o("The model class to instantiate is selected based on the "),Jue=a("code"),por=o("model_type"),uor=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),vL=a("ul"),nF=a("li"),Zue=a("strong"),Mor=o("detr"),Eor=o(" \u2014 "),VX=a("a"),Cor=o("DetrForObjectDetection"),wor=o(" (DETR model)"),Aor=l(),sF=a("li"),e_e=a("strong"),yor=o("yolos"),Lor=o(" \u2014 "),XX=a("a"),xor=o("YolosForObjectDetection"),$or=o(" (YOLOS model)"),kor=l(),lF=a("p"),Sor=o("The model is set in evaluation mode by default using "),o_e=a("code"),Ror=o("model.eval()"),Bor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r_e=a("code"),Por=o("model.train()"),Ior=l(),F(iF.$$.fragment),eqe=l(),Ld=a("h2"),dF=a("a"),t_e=a("span"),F(FL.$$.fragment),qor=l(),a_e=a("span"),Nor=o("AutoModelForImageSegmentation"),oqe=l(),Ho=a("div"),F(TL.$$.fragment),jor=l(),xd=a("p"),Dor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zX=a("a"),Gor=o("from_pretrained()"),Oor=o(" class method or the "),QX=a("a"),Vor=o("from_config()"),Xor=o(` class
method.`),zor=l(),ML=a("p"),Qor=o("This class cannot be instantiated directly using "),n_e=a("code"),Wor=o("__init__()"),Hor=o(" (throws an error)."),Uor=l(),Mt=a("div"),F(EL.$$.fragment),Jor=l(),s_e=a("p"),Yor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Kor=l(),$d=a("p"),Zor=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),err=o("not"),orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),rrr=o("from_pretrained()"),trr=o(" to load the model weights."),arr=l(),F(cF.$$.fragment),nrr=l(),po=a("div"),F(CL.$$.fragment),srr=l(),i_e=a("p"),lrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),irr=l(),Ha=a("p"),drr=o("The model class to instantiate is selected based on the "),d_e=a("code"),crr=o("model_type"),frr=o(` property of the config object (either
passed as an argument or loaded from `),c_e=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=a("code"),hrr=o("pretrained_model_name_or_path"),prr=o(":"),urr=l(),m_e=a("ul"),fF=a("li"),g_e=a("strong"),_rr=o("detr"),brr=o(" \u2014 "),HX=a("a"),vrr=o("DetrForSegmentation"),Frr=o(" (DETR model)"),Trr=l(),mF=a("p"),Mrr=o("The model is set in evaluation mode by default using "),h_e=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),wrr=o("model.train()"),Arr=l(),F(gF.$$.fragment),rqe=l(),kd=a("h2"),hF=a("a"),u_e=a("span"),F(wL.$$.fragment),yrr=l(),__e=a("span"),Lrr=o("AutoModelForSemanticSegmentation"),tqe=l(),Uo=a("div"),F(AL.$$.fragment),xrr=l(),Sd=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UX=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),JX=a("a"),Rrr=o("from_config()"),Brr=o(` class
method.`),Prr=l(),yL=a("p"),Irr=o("This class cannot be instantiated directly using "),b_e=a("code"),qrr=o("__init__()"),Nrr=o(" (throws an error)."),jrr=l(),Et=a("div"),F(LL.$$.fragment),Drr=l(),v_e=a("p"),Grr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Orr=l(),Rd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Qrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Hrr=l(),F(pF.$$.fragment),Urr=l(),uo=a("div"),F(xL.$$.fragment),Jrr=l(),T_e=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Krr=l(),Ua=a("p"),Zrr=o("The model class to instantiate is selected based on the "),M_e=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),Ja=a("ul"),uF=a("li"),w_e=a("strong"),ltr=o("beit"),itr=o(" \u2014 "),KX=a("a"),dtr=o("BeitForSemanticSegmentation"),ctr=o(" (BEiT model)"),ftr=l(),_F=a("li"),A_e=a("strong"),mtr=o("data2vec-vision"),gtr=o(" \u2014 "),ZX=a("a"),htr=o("Data2VecVisionForSemanticSegmentation"),ptr=o(" (Data2VecVision model)"),utr=l(),bF=a("li"),y_e=a("strong"),_tr=o("dpt"),btr=o(" \u2014 "),ez=a("a"),vtr=o("DPTForSemanticSegmentation"),Ftr=o(" (DPT model)"),Ttr=l(),vF=a("li"),L_e=a("strong"),Mtr=o("segformer"),Etr=o(" \u2014 "),oz=a("a"),Ctr=o("SegformerForSemanticSegmentation"),wtr=o(" (SegFormer model)"),Atr=l(),FF=a("p"),ytr=o("The model is set in evaluation mode by default using "),x_e=a("code"),Ltr=o("model.eval()"),xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),$tr=o("model.train()"),ktr=l(),F(TF.$$.fragment),aqe=l(),Bd=a("h2"),MF=a("a"),k_e=a("span"),F($L.$$.fragment),Str=l(),S_e=a("span"),Rtr=o("AutoModelForInstanceSegmentation"),nqe=l(),Jo=a("div"),F(kL.$$.fragment),Btr=l(),Pd=a("p"),Ptr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rz=a("a"),Itr=o("from_pretrained()"),qtr=o(" class method or the "),tz=a("a"),Ntr=o("from_config()"),jtr=o(` class
method.`),Dtr=l(),SL=a("p"),Gtr=o("This class cannot be instantiated directly using "),R_e=a("code"),Otr=o("__init__()"),Vtr=o(" (throws an error)."),Xtr=l(),Ct=a("div"),F(RL.$$.fragment),ztr=l(),B_e=a("p"),Qtr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wtr=l(),Id=a("p"),Htr=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),Utr=o("not"),Jtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" to load the model weights."),Ztr=l(),F(EF.$$.fragment),ear=l(),_o=a("div"),F(BL.$$.fragment),oar=l(),I_e=a("p"),rar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tar=l(),Ya=a("p"),aar=o("The model class to instantiate is selected based on the "),q_e=a("code"),nar=o("model_type"),sar=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),far=l(),D_e=a("ul"),CF=a("li"),G_e=a("strong"),mar=o("maskformer"),gar=o(" \u2014 "),nz=a("a"),har=o("MaskFormerForInstanceSegmentation"),par=o(" (MaskFormer model)"),uar=l(),wF=a("p"),_ar=o("The model is set in evaluation mode by default using "),O_e=a("code"),bar=o("model.eval()"),Far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),Tar=o("model.train()"),Mar=l(),F(AF.$$.fragment),sqe=l(),qd=a("h2"),yF=a("a"),X_e=a("span"),F(PL.$$.fragment),Ear=l(),z_e=a("span"),Car=o("TFAutoModel"),lqe=l(),Yo=a("div"),F(IL.$$.fragment),war=l(),Nd=a("p"),Aar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sz=a("a"),yar=o("from_pretrained()"),Lar=o(" class method or the "),lz=a("a"),xar=o("from_config()"),$ar=o(` class
method.`),kar=l(),qL=a("p"),Sar=o("This class cannot be instantiated directly using "),Q_e=a("code"),Rar=o("__init__()"),Bar=o(" (throws an error)."),Par=l(),wt=a("div"),F(NL.$$.fragment),Iar=l(),W_e=a("p"),qar=o("Instantiates one of the base model classes of the library from a configuration."),Nar=l(),jd=a("p"),jar=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),Dar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Oar=o("from_pretrained()"),Var=o(" to load the model weights."),Xar=l(),F(LF.$$.fragment),zar=l(),wr=a("div"),F(jL.$$.fragment),Qar=l(),U_e=a("p"),War=o("Instantiate one of the base model classes of the library from a pretrained model."),Har=l(),Ka=a("p"),Uar=o("The model class to instantiate is selected based on the "),J_e=a("code"),Jar=o("model_type"),Yar=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(":"),rnr=l(),j=a("ul"),xF=a("li"),Z_e=a("strong"),tnr=o("albert"),anr=o(" \u2014 "),dz=a("a"),nnr=o("TFAlbertModel"),snr=o(" (ALBERT model)"),lnr=l(),$F=a("li"),e2e=a("strong"),inr=o("bart"),dnr=o(" \u2014 "),cz=a("a"),cnr=o("TFBartModel"),fnr=o(" (BART model)"),mnr=l(),kF=a("li"),o2e=a("strong"),gnr=o("bert"),hnr=o(" \u2014 "),fz=a("a"),pnr=o("TFBertModel"),unr=o(" (BERT model)"),_nr=l(),SF=a("li"),r2e=a("strong"),bnr=o("blenderbot"),vnr=o(" \u2014 "),mz=a("a"),Fnr=o("TFBlenderbotModel"),Tnr=o(" (Blenderbot model)"),Mnr=l(),RF=a("li"),t2e=a("strong"),Enr=o("blenderbot-small"),Cnr=o(" \u2014 "),gz=a("a"),wnr=o("TFBlenderbotSmallModel"),Anr=o(" (BlenderbotSmall model)"),ynr=l(),BF=a("li"),a2e=a("strong"),Lnr=o("camembert"),xnr=o(" \u2014 "),hz=a("a"),$nr=o("TFCamembertModel"),knr=o(" (CamemBERT model)"),Snr=l(),PF=a("li"),n2e=a("strong"),Rnr=o("clip"),Bnr=o(" \u2014 "),pz=a("a"),Pnr=o("TFCLIPModel"),Inr=o(" (CLIP model)"),qnr=l(),IF=a("li"),s2e=a("strong"),Nnr=o("convbert"),jnr=o(" \u2014 "),uz=a("a"),Dnr=o("TFConvBertModel"),Gnr=o(" (ConvBERT model)"),Onr=l(),qF=a("li"),l2e=a("strong"),Vnr=o("convnext"),Xnr=o(" \u2014 "),_z=a("a"),znr=o("TFConvNextModel"),Qnr=o(" (ConvNext model)"),Wnr=l(),NF=a("li"),i2e=a("strong"),Hnr=o("ctrl"),Unr=o(" \u2014 "),bz=a("a"),Jnr=o("TFCTRLModel"),Ynr=o(" (CTRL model)"),Knr=l(),jF=a("li"),d2e=a("strong"),Znr=o("data2vec-vision"),esr=o(" \u2014 "),vz=a("a"),osr=o("TFData2VecVisionModel"),rsr=o(" (Data2VecVision model)"),tsr=l(),DF=a("li"),c2e=a("strong"),asr=o("deberta"),nsr=o(" \u2014 "),Fz=a("a"),ssr=o("TFDebertaModel"),lsr=o(" (DeBERTa model)"),isr=l(),GF=a("li"),f2e=a("strong"),dsr=o("deberta-v2"),csr=o(" \u2014 "),Tz=a("a"),fsr=o("TFDebertaV2Model"),msr=o(" (DeBERTa-v2 model)"),gsr=l(),OF=a("li"),m2e=a("strong"),hsr=o("distilbert"),psr=o(" \u2014 "),Mz=a("a"),usr=o("TFDistilBertModel"),_sr=o(" (DistilBERT model)"),bsr=l(),VF=a("li"),g2e=a("strong"),vsr=o("dpr"),Fsr=o(" \u2014 "),Ez=a("a"),Tsr=o("TFDPRQuestionEncoder"),Msr=o(" (DPR model)"),Esr=l(),XF=a("li"),h2e=a("strong"),Csr=o("electra"),wsr=o(" \u2014 "),Cz=a("a"),Asr=o("TFElectraModel"),ysr=o(" (ELECTRA model)"),Lsr=l(),zF=a("li"),p2e=a("strong"),xsr=o("flaubert"),$sr=o(" \u2014 "),wz=a("a"),ksr=o("TFFlaubertModel"),Ssr=o(" (FlauBERT model)"),Rsr=l(),Bs=a("li"),u2e=a("strong"),Bsr=o("funnel"),Psr=o(" \u2014 "),Az=a("a"),Isr=o("TFFunnelModel"),qsr=o(" or "),yz=a("a"),Nsr=o("TFFunnelBaseModel"),jsr=o(" (Funnel Transformer model)"),Dsr=l(),QF=a("li"),_2e=a("strong"),Gsr=o("gpt2"),Osr=o(" \u2014 "),Lz=a("a"),Vsr=o("TFGPT2Model"),Xsr=o(" (OpenAI GPT-2 model)"),zsr=l(),WF=a("li"),b2e=a("strong"),Qsr=o("gptj"),Wsr=o(" \u2014 "),xz=a("a"),Hsr=o("TFGPTJModel"),Usr=o(" (GPT-J model)"),Jsr=l(),HF=a("li"),v2e=a("strong"),Ysr=o("hubert"),Ksr=o(" \u2014 "),$z=a("a"),Zsr=o("TFHubertModel"),elr=o(" (Hubert model)"),olr=l(),UF=a("li"),F2e=a("strong"),rlr=o("layoutlm"),tlr=o(" \u2014 "),kz=a("a"),alr=o("TFLayoutLMModel"),nlr=o(" (LayoutLM model)"),slr=l(),JF=a("li"),T2e=a("strong"),llr=o("led"),ilr=o(" \u2014 "),Sz=a("a"),dlr=o("TFLEDModel"),clr=o(" (LED model)"),flr=l(),YF=a("li"),M2e=a("strong"),mlr=o("longformer"),glr=o(" \u2014 "),Rz=a("a"),hlr=o("TFLongformerModel"),plr=o(" (Longformer model)"),ulr=l(),KF=a("li"),E2e=a("strong"),_lr=o("lxmert"),blr=o(" \u2014 "),Bz=a("a"),vlr=o("TFLxmertModel"),Flr=o(" (LXMERT model)"),Tlr=l(),ZF=a("li"),C2e=a("strong"),Mlr=o("marian"),Elr=o(" \u2014 "),Pz=a("a"),Clr=o("TFMarianModel"),wlr=o(" (Marian model)"),Alr=l(),eT=a("li"),w2e=a("strong"),ylr=o("mbart"),Llr=o(" \u2014 "),Iz=a("a"),xlr=o("TFMBartModel"),$lr=o(" (mBART model)"),klr=l(),oT=a("li"),A2e=a("strong"),Slr=o("mobilebert"),Rlr=o(" \u2014 "),qz=a("a"),Blr=o("TFMobileBertModel"),Plr=o(" (MobileBERT model)"),Ilr=l(),rT=a("li"),y2e=a("strong"),qlr=o("mpnet"),Nlr=o(" \u2014 "),Nz=a("a"),jlr=o("TFMPNetModel"),Dlr=o(" (MPNet model)"),Glr=l(),tT=a("li"),L2e=a("strong"),Olr=o("mt5"),Vlr=o(" \u2014 "),jz=a("a"),Xlr=o("TFMT5Model"),zlr=o(" (mT5 model)"),Qlr=l(),aT=a("li"),x2e=a("strong"),Wlr=o("openai-gpt"),Hlr=o(" \u2014 "),Dz=a("a"),Ulr=o("TFOpenAIGPTModel"),Jlr=o(" (OpenAI GPT model)"),Ylr=l(),nT=a("li"),$2e=a("strong"),Klr=o("pegasus"),Zlr=o(" \u2014 "),Gz=a("a"),eir=o("TFPegasusModel"),oir=o(" (Pegasus model)"),rir=l(),sT=a("li"),k2e=a("strong"),tir=o("rembert"),air=o(" \u2014 "),Oz=a("a"),nir=o("TFRemBertModel"),sir=o(" (RemBERT model)"),lir=l(),lT=a("li"),S2e=a("strong"),iir=o("roberta"),dir=o(" \u2014 "),Vz=a("a"),cir=o("TFRobertaModel"),fir=o(" (RoBERTa model)"),mir=l(),iT=a("li"),R2e=a("strong"),gir=o("roformer"),hir=o(" \u2014 "),Xz=a("a"),pir=o("TFRoFormerModel"),uir=o(" (RoFormer model)"),_ir=l(),dT=a("li"),B2e=a("strong"),bir=o("speech_to_text"),vir=o(" \u2014 "),zz=a("a"),Fir=o("TFSpeech2TextModel"),Tir=o(" (Speech2Text model)"),Mir=l(),cT=a("li"),P2e=a("strong"),Eir=o("t5"),Cir=o(" \u2014 "),Qz=a("a"),wir=o("TFT5Model"),Air=o(" (T5 model)"),yir=l(),fT=a("li"),I2e=a("strong"),Lir=o("tapas"),xir=o(" \u2014 "),Wz=a("a"),$ir=o("TFTapasModel"),kir=o(" (TAPAS model)"),Sir=l(),mT=a("li"),q2e=a("strong"),Rir=o("transfo-xl"),Bir=o(" \u2014 "),Hz=a("a"),Pir=o("TFTransfoXLModel"),Iir=o(" (Transformer-XL model)"),qir=l(),gT=a("li"),N2e=a("strong"),Nir=o("vit"),jir=o(" \u2014 "),Uz=a("a"),Dir=o("TFViTModel"),Gir=o(" (ViT model)"),Oir=l(),hT=a("li"),j2e=a("strong"),Vir=o("vit_mae"),Xir=o(" \u2014 "),Jz=a("a"),zir=o("TFViTMAEModel"),Qir=o(" (ViTMAE model)"),Wir=l(),pT=a("li"),D2e=a("strong"),Hir=o("wav2vec2"),Uir=o(" \u2014 "),Yz=a("a"),Jir=o("TFWav2Vec2Model"),Yir=o(" (Wav2Vec2 model)"),Kir=l(),uT=a("li"),G2e=a("strong"),Zir=o("xlm"),edr=o(" \u2014 "),Kz=a("a"),odr=o("TFXLMModel"),rdr=o(" (XLM model)"),tdr=l(),_T=a("li"),O2e=a("strong"),adr=o("xlm-roberta"),ndr=o(" \u2014 "),Zz=a("a"),sdr=o("TFXLMRobertaModel"),ldr=o(" (XLM-RoBERTa model)"),idr=l(),bT=a("li"),V2e=a("strong"),ddr=o("xlnet"),cdr=o(" \u2014 "),eQ=a("a"),fdr=o("TFXLNetModel"),mdr=o(" (XLNet model)"),gdr=l(),F(vT.$$.fragment),iqe=l(),Dd=a("h2"),FT=a("a"),X2e=a("span"),F(DL.$$.fragment),hdr=l(),z2e=a("span"),pdr=o("TFAutoModelForPreTraining"),dqe=l(),Ko=a("div"),F(GL.$$.fragment),udr=l(),Gd=a("p"),_dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=a("a"),bdr=o("from_pretrained()"),vdr=o(" class method or the "),rQ=a("a"),Fdr=o("from_config()"),Tdr=o(` class
method.`),Mdr=l(),OL=a("p"),Edr=o("This class cannot be instantiated directly using "),Q2e=a("code"),Cdr=o("__init__()"),wdr=o(" (throws an error)."),Adr=l(),At=a("div"),F(VL.$$.fragment),ydr=l(),W2e=a("p"),Ldr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xdr=l(),Od=a("p"),$dr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),kdr=o("not"),Sdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Rdr=o("from_pretrained()"),Bdr=o(" to load the model weights."),Pdr=l(),F(TT.$$.fragment),Idr=l(),Ar=a("div"),F(XL.$$.fragment),qdr=l(),U2e=a("p"),Ndr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jdr=l(),Za=a("p"),Ddr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Gdr=o("model_type"),Odr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Vdr=o("pretrained_model_name_or_path"),Xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),zdr=o("pretrained_model_name_or_path"),Qdr=o(":"),Wdr=l(),se=a("ul"),MT=a("li"),Z2e=a("strong"),Hdr=o("albert"),Udr=o(" \u2014 "),aQ=a("a"),Jdr=o("TFAlbertForPreTraining"),Ydr=o(" (ALBERT model)"),Kdr=l(),ET=a("li"),e1e=a("strong"),Zdr=o("bart"),ecr=o(" \u2014 "),nQ=a("a"),ocr=o("TFBartForConditionalGeneration"),rcr=o(" (BART model)"),tcr=l(),CT=a("li"),o1e=a("strong"),acr=o("bert"),ncr=o(" \u2014 "),sQ=a("a"),scr=o("TFBertForPreTraining"),lcr=o(" (BERT model)"),icr=l(),wT=a("li"),r1e=a("strong"),dcr=o("camembert"),ccr=o(" \u2014 "),lQ=a("a"),fcr=o("TFCamembertForMaskedLM"),mcr=o(" (CamemBERT model)"),gcr=l(),AT=a("li"),t1e=a("strong"),hcr=o("ctrl"),pcr=o(" \u2014 "),iQ=a("a"),ucr=o("TFCTRLLMHeadModel"),_cr=o(" (CTRL model)"),bcr=l(),yT=a("li"),a1e=a("strong"),vcr=o("distilbert"),Fcr=o(" \u2014 "),dQ=a("a"),Tcr=o("TFDistilBertForMaskedLM"),Mcr=o(" (DistilBERT model)"),Ecr=l(),LT=a("li"),n1e=a("strong"),Ccr=o("electra"),wcr=o(" \u2014 "),cQ=a("a"),Acr=o("TFElectraForPreTraining"),ycr=o(" (ELECTRA model)"),Lcr=l(),xT=a("li"),s1e=a("strong"),xcr=o("flaubert"),$cr=o(" \u2014 "),fQ=a("a"),kcr=o("TFFlaubertWithLMHeadModel"),Scr=o(" (FlauBERT model)"),Rcr=l(),$T=a("li"),l1e=a("strong"),Bcr=o("funnel"),Pcr=o(" \u2014 "),mQ=a("a"),Icr=o("TFFunnelForPreTraining"),qcr=o(" (Funnel Transformer model)"),Ncr=l(),kT=a("li"),i1e=a("strong"),jcr=o("gpt2"),Dcr=o(" \u2014 "),gQ=a("a"),Gcr=o("TFGPT2LMHeadModel"),Ocr=o(" (OpenAI GPT-2 model)"),Vcr=l(),ST=a("li"),d1e=a("strong"),Xcr=o("layoutlm"),zcr=o(" \u2014 "),hQ=a("a"),Qcr=o("TFLayoutLMForMaskedLM"),Wcr=o(" (LayoutLM model)"),Hcr=l(),RT=a("li"),c1e=a("strong"),Ucr=o("lxmert"),Jcr=o(" \u2014 "),pQ=a("a"),Ycr=o("TFLxmertForPreTraining"),Kcr=o(" (LXMERT model)"),Zcr=l(),BT=a("li"),f1e=a("strong"),efr=o("mobilebert"),ofr=o(" \u2014 "),uQ=a("a"),rfr=o("TFMobileBertForPreTraining"),tfr=o(" (MobileBERT model)"),afr=l(),PT=a("li"),m1e=a("strong"),nfr=o("mpnet"),sfr=o(" \u2014 "),_Q=a("a"),lfr=o("TFMPNetForMaskedLM"),ifr=o(" (MPNet model)"),dfr=l(),IT=a("li"),g1e=a("strong"),cfr=o("openai-gpt"),ffr=o(" \u2014 "),bQ=a("a"),mfr=o("TFOpenAIGPTLMHeadModel"),gfr=o(" (OpenAI GPT model)"),hfr=l(),qT=a("li"),h1e=a("strong"),pfr=o("roberta"),ufr=o(" \u2014 "),vQ=a("a"),_fr=o("TFRobertaForMaskedLM"),bfr=o(" (RoBERTa model)"),vfr=l(),NT=a("li"),p1e=a("strong"),Ffr=o("t5"),Tfr=o(" \u2014 "),FQ=a("a"),Mfr=o("TFT5ForConditionalGeneration"),Efr=o(" (T5 model)"),Cfr=l(),jT=a("li"),u1e=a("strong"),wfr=o("tapas"),Afr=o(" \u2014 "),TQ=a("a"),yfr=o("TFTapasForMaskedLM"),Lfr=o(" (TAPAS model)"),xfr=l(),DT=a("li"),_1e=a("strong"),$fr=o("transfo-xl"),kfr=o(" \u2014 "),MQ=a("a"),Sfr=o("TFTransfoXLLMHeadModel"),Rfr=o(" (Transformer-XL model)"),Bfr=l(),GT=a("li"),b1e=a("strong"),Pfr=o("vit_mae"),Ifr=o(" \u2014 "),EQ=a("a"),qfr=o("TFViTMAEForPreTraining"),Nfr=o(" (ViTMAE model)"),jfr=l(),OT=a("li"),v1e=a("strong"),Dfr=o("xlm"),Gfr=o(" \u2014 "),CQ=a("a"),Ofr=o("TFXLMWithLMHeadModel"),Vfr=o(" (XLM model)"),Xfr=l(),VT=a("li"),F1e=a("strong"),zfr=o("xlm-roberta"),Qfr=o(" \u2014 "),wQ=a("a"),Wfr=o("TFXLMRobertaForMaskedLM"),Hfr=o(" (XLM-RoBERTa model)"),Ufr=l(),XT=a("li"),T1e=a("strong"),Jfr=o("xlnet"),Yfr=o(" \u2014 "),AQ=a("a"),Kfr=o("TFXLNetLMHeadModel"),Zfr=o(" (XLNet model)"),emr=l(),F(zT.$$.fragment),cqe=l(),Vd=a("h2"),QT=a("a"),M1e=a("span"),F(zL.$$.fragment),omr=l(),E1e=a("span"),rmr=o("TFAutoModelForCausalLM"),fqe=l(),Zo=a("div"),F(QL.$$.fragment),tmr=l(),Xd=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),LQ=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),WL=a("p"),cmr=o("This class cannot be instantiated directly using "),C1e=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),yt=a("div"),F(HL.$$.fragment),hmr=l(),w1e=a("p"),pmr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),umr=l(),zd=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),F(WT.$$.fragment),Emr=l(),yr=a("div"),F(UL.$$.fragment),Cmr=l(),y1e=a("p"),wmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Amr=l(),en=a("p"),ymr=o("The model class to instantiate is selected based on the "),L1e=a("code"),Lmr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Bmr=l(),Me=a("ul"),HT=a("li"),k1e=a("strong"),Pmr=o("bert"),Imr=o(" \u2014 "),$Q=a("a"),qmr=o("TFBertLMHeadModel"),Nmr=o(" (BERT model)"),jmr=l(),UT=a("li"),S1e=a("strong"),Dmr=o("camembert"),Gmr=o(" \u2014 "),kQ=a("a"),Omr=o("TFCamembertForCausalLM"),Vmr=o(" (CamemBERT model)"),Xmr=l(),JT=a("li"),R1e=a("strong"),zmr=o("ctrl"),Qmr=o(" \u2014 "),SQ=a("a"),Wmr=o("TFCTRLLMHeadModel"),Hmr=o(" (CTRL model)"),Umr=l(),YT=a("li"),B1e=a("strong"),Jmr=o("gpt2"),Ymr=o(" \u2014 "),RQ=a("a"),Kmr=o("TFGPT2LMHeadModel"),Zmr=o(" (OpenAI GPT-2 model)"),egr=l(),KT=a("li"),P1e=a("strong"),ogr=o("gptj"),rgr=o(" \u2014 "),BQ=a("a"),tgr=o("TFGPTJForCausalLM"),agr=o(" (GPT-J model)"),ngr=l(),ZT=a("li"),I1e=a("strong"),sgr=o("openai-gpt"),lgr=o(" \u2014 "),PQ=a("a"),igr=o("TFOpenAIGPTLMHeadModel"),dgr=o(" (OpenAI GPT model)"),cgr=l(),e7=a("li"),q1e=a("strong"),fgr=o("rembert"),mgr=o(" \u2014 "),IQ=a("a"),ggr=o("TFRemBertForCausalLM"),hgr=o(" (RemBERT model)"),pgr=l(),o7=a("li"),N1e=a("strong"),ugr=o("roberta"),_gr=o(" \u2014 "),qQ=a("a"),bgr=o("TFRobertaForCausalLM"),vgr=o(" (RoBERTa model)"),Fgr=l(),r7=a("li"),j1e=a("strong"),Tgr=o("roformer"),Mgr=o(" \u2014 "),NQ=a("a"),Egr=o("TFRoFormerForCausalLM"),Cgr=o(" (RoFormer model)"),wgr=l(),t7=a("li"),D1e=a("strong"),Agr=o("transfo-xl"),ygr=o(" \u2014 "),jQ=a("a"),Lgr=o("TFTransfoXLLMHeadModel"),xgr=o(" (Transformer-XL model)"),$gr=l(),a7=a("li"),G1e=a("strong"),kgr=o("xlm"),Sgr=o(" \u2014 "),DQ=a("a"),Rgr=o("TFXLMWithLMHeadModel"),Bgr=o(" (XLM model)"),Pgr=l(),n7=a("li"),O1e=a("strong"),Igr=o("xlnet"),qgr=o(" \u2014 "),GQ=a("a"),Ngr=o("TFXLNetLMHeadModel"),jgr=o(" (XLNet model)"),Dgr=l(),F(s7.$$.fragment),mqe=l(),Qd=a("h2"),l7=a("a"),V1e=a("span"),F(JL.$$.fragment),Ggr=l(),X1e=a("span"),Ogr=o("TFAutoModelForImageClassification"),gqe=l(),er=a("div"),F(YL.$$.fragment),Vgr=l(),Wd=a("p"),Xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=a("a"),zgr=o("from_pretrained()"),Qgr=o(" class method or the "),VQ=a("a"),Wgr=o("from_config()"),Hgr=o(` class
method.`),Ugr=l(),KL=a("p"),Jgr=o("This class cannot be instantiated directly using "),z1e=a("code"),Ygr=o("__init__()"),Kgr=o(" (throws an error)."),Zgr=l(),Lt=a("div"),F(ZL.$$.fragment),ehr=l(),Q1e=a("p"),ohr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rhr=l(),Hd=a("p"),thr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),ahr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),shr=o("from_pretrained()"),lhr=o(" to load the model weights."),ihr=l(),F(i7.$$.fragment),dhr=l(),Lr=a("div"),F(e8.$$.fragment),chr=l(),H1e=a("p"),fhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mhr=l(),on=a("p"),ghr=o("The model class to instantiate is selected based on the "),U1e=a("code"),hhr=o("model_type"),phr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),uhr=o("pretrained_model_name_or_path"),_hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(":"),Fhr=l(),Ud=a("ul"),d7=a("li"),K1e=a("strong"),Thr=o("convnext"),Mhr=o(" \u2014 "),zQ=a("a"),Ehr=o("TFConvNextForImageClassification"),Chr=o(" (ConvNext model)"),whr=l(),c7=a("li"),Z1e=a("strong"),Ahr=o("data2vec-vision"),yhr=o(" \u2014 "),QQ=a("a"),Lhr=o("TFData2VecVisionForImageClassification"),xhr=o(" (Data2VecVision model)"),$hr=l(),f7=a("li"),ebe=a("strong"),khr=o("vit"),Shr=o(" \u2014 "),WQ=a("a"),Rhr=o("TFViTForImageClassification"),Bhr=o(" (ViT model)"),Phr=l(),F(m7.$$.fragment),hqe=l(),Jd=a("h2"),g7=a("a"),obe=a("span"),F(o8.$$.fragment),Ihr=l(),rbe=a("span"),qhr=o("TFAutoModelForMaskedLM"),pqe=l(),or=a("div"),F(r8.$$.fragment),Nhr=l(),Yd=a("p"),jhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" class method or the "),UQ=a("a"),Ohr=o("from_config()"),Vhr=o(` class
method.`),Xhr=l(),t8=a("p"),zhr=o("This class cannot be instantiated directly using "),tbe=a("code"),Qhr=o("__init__()"),Whr=o(" (throws an error)."),Hhr=l(),xt=a("div"),F(a8.$$.fragment),Uhr=l(),abe=a("p"),Jhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yhr=l(),Kd=a("p"),Khr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Zhr=o("not"),epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),opr=o("from_pretrained()"),rpr=o(" to load the model weights."),tpr=l(),F(h7.$$.fragment),apr=l(),xr=a("div"),F(n8.$$.fragment),npr=l(),sbe=a("p"),spr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lpr=l(),rn=a("p"),ipr=o("The model class to instantiate is selected based on the "),lbe=a("code"),dpr=o("model_type"),cpr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(":"),ppr=l(),ie=a("ul"),p7=a("li"),cbe=a("strong"),upr=o("albert"),_pr=o(" \u2014 "),YQ=a("a"),bpr=o("TFAlbertForMaskedLM"),vpr=o(" (ALBERT model)"),Fpr=l(),u7=a("li"),fbe=a("strong"),Tpr=o("bert"),Mpr=o(" \u2014 "),KQ=a("a"),Epr=o("TFBertForMaskedLM"),Cpr=o(" (BERT model)"),wpr=l(),_7=a("li"),mbe=a("strong"),Apr=o("camembert"),ypr=o(" \u2014 "),ZQ=a("a"),Lpr=o("TFCamembertForMaskedLM"),xpr=o(" (CamemBERT model)"),$pr=l(),b7=a("li"),gbe=a("strong"),kpr=o("convbert"),Spr=o(" \u2014 "),eW=a("a"),Rpr=o("TFConvBertForMaskedLM"),Bpr=o(" (ConvBERT model)"),Ppr=l(),v7=a("li"),hbe=a("strong"),Ipr=o("deberta"),qpr=o(" \u2014 "),oW=a("a"),Npr=o("TFDebertaForMaskedLM"),jpr=o(" (DeBERTa model)"),Dpr=l(),F7=a("li"),pbe=a("strong"),Gpr=o("deberta-v2"),Opr=o(" \u2014 "),rW=a("a"),Vpr=o("TFDebertaV2ForMaskedLM"),Xpr=o(" (DeBERTa-v2 model)"),zpr=l(),T7=a("li"),ube=a("strong"),Qpr=o("distilbert"),Wpr=o(" \u2014 "),tW=a("a"),Hpr=o("TFDistilBertForMaskedLM"),Upr=o(" (DistilBERT model)"),Jpr=l(),M7=a("li"),_be=a("strong"),Ypr=o("electra"),Kpr=o(" \u2014 "),aW=a("a"),Zpr=o("TFElectraForMaskedLM"),eur=o(" (ELECTRA model)"),our=l(),E7=a("li"),bbe=a("strong"),rur=o("flaubert"),tur=o(" \u2014 "),nW=a("a"),aur=o("TFFlaubertWithLMHeadModel"),nur=o(" (FlauBERT model)"),sur=l(),C7=a("li"),vbe=a("strong"),lur=o("funnel"),iur=o(" \u2014 "),sW=a("a"),dur=o("TFFunnelForMaskedLM"),cur=o(" (Funnel Transformer model)"),fur=l(),w7=a("li"),Fbe=a("strong"),mur=o("layoutlm"),gur=o(" \u2014 "),lW=a("a"),hur=o("TFLayoutLMForMaskedLM"),pur=o(" (LayoutLM model)"),uur=l(),A7=a("li"),Tbe=a("strong"),_ur=o("longformer"),bur=o(" \u2014 "),iW=a("a"),vur=o("TFLongformerForMaskedLM"),Fur=o(" (Longformer model)"),Tur=l(),y7=a("li"),Mbe=a("strong"),Mur=o("mobilebert"),Eur=o(" \u2014 "),dW=a("a"),Cur=o("TFMobileBertForMaskedLM"),wur=o(" (MobileBERT model)"),Aur=l(),L7=a("li"),Ebe=a("strong"),yur=o("mpnet"),Lur=o(" \u2014 "),cW=a("a"),xur=o("TFMPNetForMaskedLM"),$ur=o(" (MPNet model)"),kur=l(),x7=a("li"),Cbe=a("strong"),Sur=o("rembert"),Rur=o(" \u2014 "),fW=a("a"),Bur=o("TFRemBertForMaskedLM"),Pur=o(" (RemBERT model)"),Iur=l(),$7=a("li"),wbe=a("strong"),qur=o("roberta"),Nur=o(" \u2014 "),mW=a("a"),jur=o("TFRobertaForMaskedLM"),Dur=o(" (RoBERTa model)"),Gur=l(),k7=a("li"),Abe=a("strong"),Our=o("roformer"),Vur=o(" \u2014 "),gW=a("a"),Xur=o("TFRoFormerForMaskedLM"),zur=o(" (RoFormer model)"),Qur=l(),S7=a("li"),ybe=a("strong"),Wur=o("tapas"),Hur=o(" \u2014 "),hW=a("a"),Uur=o("TFTapasForMaskedLM"),Jur=o(" (TAPAS model)"),Yur=l(),R7=a("li"),Lbe=a("strong"),Kur=o("xlm"),Zur=o(" \u2014 "),pW=a("a"),e_r=o("TFXLMWithLMHeadModel"),o_r=o(" (XLM model)"),r_r=l(),B7=a("li"),xbe=a("strong"),t_r=o("xlm-roberta"),a_r=o(" \u2014 "),uW=a("a"),n_r=o("TFXLMRobertaForMaskedLM"),s_r=o(" (XLM-RoBERTa model)"),l_r=l(),F(P7.$$.fragment),uqe=l(),Zd=a("h2"),I7=a("a"),$be=a("span"),F(s8.$$.fragment),i_r=l(),kbe=a("span"),d_r=o("TFAutoModelForSeq2SeqLM"),_qe=l(),rr=a("div"),F(l8.$$.fragment),c_r=l(),ec=a("p"),f_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_W=a("a"),m_r=o("from_pretrained()"),g_r=o(" class method or the "),bW=a("a"),h_r=o("from_config()"),p_r=o(` class
method.`),u_r=l(),i8=a("p"),__r=o("This class cannot be instantiated directly using "),Sbe=a("code"),b_r=o("__init__()"),v_r=o(" (throws an error)."),F_r=l(),$t=a("div"),F(d8.$$.fragment),T_r=l(),Rbe=a("p"),M_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E_r=l(),oc=a("p"),C_r=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),w_r=o("not"),A_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),y_r=o("from_pretrained()"),L_r=o(" to load the model weights."),x_r=l(),F(q7.$$.fragment),$_r=l(),$r=a("div"),F(c8.$$.fragment),k_r=l(),Pbe=a("p"),S_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R_r=l(),tn=a("p"),B_r=o("The model class to instantiate is selected based on the "),Ibe=a("code"),P_r=o("model_type"),I_r=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),q_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),j_r=o("pretrained_model_name_or_path"),D_r=o(":"),G_r=l(),ye=a("ul"),N7=a("li"),jbe=a("strong"),O_r=o("bart"),V_r=o(" \u2014 "),FW=a("a"),X_r=o("TFBartForConditionalGeneration"),z_r=o(" (BART model)"),Q_r=l(),j7=a("li"),Dbe=a("strong"),W_r=o("blenderbot"),H_r=o(" \u2014 "),TW=a("a"),U_r=o("TFBlenderbotForConditionalGeneration"),J_r=o(" (Blenderbot model)"),Y_r=l(),D7=a("li"),Gbe=a("strong"),K_r=o("blenderbot-small"),Z_r=o(" \u2014 "),MW=a("a"),e2r=o("TFBlenderbotSmallForConditionalGeneration"),o2r=o(" (BlenderbotSmall model)"),r2r=l(),G7=a("li"),Obe=a("strong"),t2r=o("encoder-decoder"),a2r=o(" \u2014 "),EW=a("a"),n2r=o("TFEncoderDecoderModel"),s2r=o(" (Encoder decoder model)"),l2r=l(),O7=a("li"),Vbe=a("strong"),i2r=o("led"),d2r=o(" \u2014 "),CW=a("a"),c2r=o("TFLEDForConditionalGeneration"),f2r=o(" (LED model)"),m2r=l(),V7=a("li"),Xbe=a("strong"),g2r=o("marian"),h2r=o(" \u2014 "),wW=a("a"),p2r=o("TFMarianMTModel"),u2r=o(" (Marian model)"),_2r=l(),X7=a("li"),zbe=a("strong"),b2r=o("mbart"),v2r=o(" \u2014 "),AW=a("a"),F2r=o("TFMBartForConditionalGeneration"),T2r=o(" (mBART model)"),M2r=l(),z7=a("li"),Qbe=a("strong"),E2r=o("mt5"),C2r=o(" \u2014 "),yW=a("a"),w2r=o("TFMT5ForConditionalGeneration"),A2r=o(" (mT5 model)"),y2r=l(),Q7=a("li"),Wbe=a("strong"),L2r=o("pegasus"),x2r=o(" \u2014 "),LW=a("a"),$2r=o("TFPegasusForConditionalGeneration"),k2r=o(" (Pegasus model)"),S2r=l(),W7=a("li"),Hbe=a("strong"),R2r=o("t5"),B2r=o(" \u2014 "),xW=a("a"),P2r=o("TFT5ForConditionalGeneration"),I2r=o(" (T5 model)"),q2r=l(),F(H7.$$.fragment),bqe=l(),rc=a("h2"),U7=a("a"),Ube=a("span"),F(f8.$$.fragment),N2r=l(),Jbe=a("span"),j2r=o("TFAutoModelForSequenceClassification"),vqe=l(),tr=a("div"),F(m8.$$.fragment),D2r=l(),tc=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),kW=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),Q2r=l(),g8=a("p"),W2r=o("This class cannot be instantiated directly using "),Ybe=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),kt=a("div"),F(h8.$$.fragment),Y2r=l(),Kbe=a("p"),K2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z2r=l(),ac=a("p"),e1r=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),o1r=o("not"),r1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),t1r=o("from_pretrained()"),a1r=o(" to load the model weights."),n1r=l(),F(J7.$$.fragment),s1r=l(),kr=a("div"),F(p8.$$.fragment),l1r=l(),e5e=a("p"),i1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d1r=l(),an=a("p"),c1r=o("The model class to instantiate is selected based on the "),o5e=a("code"),f1r=o("model_type"),m1r=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),p1r=o("pretrained_model_name_or_path"),u1r=o(":"),_1r=l(),Z=a("ul"),Y7=a("li"),a5e=a("strong"),b1r=o("albert"),v1r=o(" \u2014 "),RW=a("a"),F1r=o("TFAlbertForSequenceClassification"),T1r=o(" (ALBERT model)"),M1r=l(),K7=a("li"),n5e=a("strong"),E1r=o("bert"),C1r=o(" \u2014 "),BW=a("a"),w1r=o("TFBertForSequenceClassification"),A1r=o(" (BERT model)"),y1r=l(),Z7=a("li"),s5e=a("strong"),L1r=o("camembert"),x1r=o(" \u2014 "),PW=a("a"),$1r=o("TFCamembertForSequenceClassification"),k1r=o(" (CamemBERT model)"),S1r=l(),eM=a("li"),l5e=a("strong"),R1r=o("convbert"),B1r=o(" \u2014 "),IW=a("a"),P1r=o("TFConvBertForSequenceClassification"),I1r=o(" (ConvBERT model)"),q1r=l(),oM=a("li"),i5e=a("strong"),N1r=o("ctrl"),j1r=o(" \u2014 "),qW=a("a"),D1r=o("TFCTRLForSequenceClassification"),G1r=o(" (CTRL model)"),O1r=l(),rM=a("li"),d5e=a("strong"),V1r=o("deberta"),X1r=o(" \u2014 "),NW=a("a"),z1r=o("TFDebertaForSequenceClassification"),Q1r=o(" (DeBERTa model)"),W1r=l(),tM=a("li"),c5e=a("strong"),H1r=o("deberta-v2"),U1r=o(" \u2014 "),jW=a("a"),J1r=o("TFDebertaV2ForSequenceClassification"),Y1r=o(" (DeBERTa-v2 model)"),K1r=l(),aM=a("li"),f5e=a("strong"),Z1r=o("distilbert"),ebr=o(" \u2014 "),DW=a("a"),obr=o("TFDistilBertForSequenceClassification"),rbr=o(" (DistilBERT model)"),tbr=l(),nM=a("li"),m5e=a("strong"),abr=o("electra"),nbr=o(" \u2014 "),GW=a("a"),sbr=o("TFElectraForSequenceClassification"),lbr=o(" (ELECTRA model)"),ibr=l(),sM=a("li"),g5e=a("strong"),dbr=o("flaubert"),cbr=o(" \u2014 "),OW=a("a"),fbr=o("TFFlaubertForSequenceClassification"),mbr=o(" (FlauBERT model)"),gbr=l(),lM=a("li"),h5e=a("strong"),hbr=o("funnel"),pbr=o(" \u2014 "),VW=a("a"),ubr=o("TFFunnelForSequenceClassification"),_br=o(" (Funnel Transformer model)"),bbr=l(),iM=a("li"),p5e=a("strong"),vbr=o("gpt2"),Fbr=o(" \u2014 "),XW=a("a"),Tbr=o("TFGPT2ForSequenceClassification"),Mbr=o(" (OpenAI GPT-2 model)"),Ebr=l(),dM=a("li"),u5e=a("strong"),Cbr=o("gptj"),wbr=o(" \u2014 "),zW=a("a"),Abr=o("TFGPTJForSequenceClassification"),ybr=o(" (GPT-J model)"),Lbr=l(),cM=a("li"),_5e=a("strong"),xbr=o("layoutlm"),$br=o(" \u2014 "),QW=a("a"),kbr=o("TFLayoutLMForSequenceClassification"),Sbr=o(" (LayoutLM model)"),Rbr=l(),fM=a("li"),b5e=a("strong"),Bbr=o("longformer"),Pbr=o(" \u2014 "),WW=a("a"),Ibr=o("TFLongformerForSequenceClassification"),qbr=o(" (Longformer model)"),Nbr=l(),mM=a("li"),v5e=a("strong"),jbr=o("mobilebert"),Dbr=o(" \u2014 "),HW=a("a"),Gbr=o("TFMobileBertForSequenceClassification"),Obr=o(" (MobileBERT model)"),Vbr=l(),gM=a("li"),F5e=a("strong"),Xbr=o("mpnet"),zbr=o(" \u2014 "),UW=a("a"),Qbr=o("TFMPNetForSequenceClassification"),Wbr=o(" (MPNet model)"),Hbr=l(),hM=a("li"),T5e=a("strong"),Ubr=o("openai-gpt"),Jbr=o(" \u2014 "),JW=a("a"),Ybr=o("TFOpenAIGPTForSequenceClassification"),Kbr=o(" (OpenAI GPT model)"),Zbr=l(),pM=a("li"),M5e=a("strong"),e5r=o("rembert"),o5r=o(" \u2014 "),YW=a("a"),r5r=o("TFRemBertForSequenceClassification"),t5r=o(" (RemBERT model)"),a5r=l(),uM=a("li"),E5e=a("strong"),n5r=o("roberta"),s5r=o(" \u2014 "),KW=a("a"),l5r=o("TFRobertaForSequenceClassification"),i5r=o(" (RoBERTa model)"),d5r=l(),_M=a("li"),C5e=a("strong"),c5r=o("roformer"),f5r=o(" \u2014 "),ZW=a("a"),m5r=o("TFRoFormerForSequenceClassification"),g5r=o(" (RoFormer model)"),h5r=l(),bM=a("li"),w5e=a("strong"),p5r=o("tapas"),u5r=o(" \u2014 "),eH=a("a"),_5r=o("TFTapasForSequenceClassification"),b5r=o(" (TAPAS model)"),v5r=l(),vM=a("li"),A5e=a("strong"),F5r=o("transfo-xl"),T5r=o(" \u2014 "),oH=a("a"),M5r=o("TFTransfoXLForSequenceClassification"),E5r=o(" (Transformer-XL model)"),C5r=l(),FM=a("li"),y5e=a("strong"),w5r=o("xlm"),A5r=o(" \u2014 "),rH=a("a"),y5r=o("TFXLMForSequenceClassification"),L5r=o(" (XLM model)"),x5r=l(),TM=a("li"),L5e=a("strong"),$5r=o("xlm-roberta"),k5r=o(" \u2014 "),tH=a("a"),S5r=o("TFXLMRobertaForSequenceClassification"),R5r=o(" (XLM-RoBERTa model)"),B5r=l(),MM=a("li"),x5e=a("strong"),P5r=o("xlnet"),I5r=o(" \u2014 "),aH=a("a"),q5r=o("TFXLNetForSequenceClassification"),N5r=o(" (XLNet model)"),j5r=l(),F(EM.$$.fragment),Fqe=l(),nc=a("h2"),CM=a("a"),$5e=a("span"),F(u8.$$.fragment),D5r=l(),k5e=a("span"),G5r=o("TFAutoModelForMultipleChoice"),Tqe=l(),ar=a("div"),F(_8.$$.fragment),O5r=l(),sc=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nH=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),sH=a("a"),Q5r=o("from_config()"),W5r=o(` class
method.`),H5r=l(),b8=a("p"),U5r=o("This class cannot be instantiated directly using "),S5e=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),St=a("div"),F(v8.$$.fragment),Z5r=l(),R5e=a("p"),e3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o3r=l(),lc=a("p"),r3r=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),t3r=o("not"),a3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),n3r=o("from_pretrained()"),s3r=o(" to load the model weights."),l3r=l(),F(wM.$$.fragment),i3r=l(),Sr=a("div"),F(F8.$$.fragment),d3r=l(),P5e=a("p"),c3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f3r=l(),nn=a("p"),m3r=o("The model class to instantiate is selected based on the "),I5e=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),p3r=o("pretrained_model_name_or_path"),u3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(":"),v3r=l(),pe=a("ul"),AM=a("li"),j5e=a("strong"),F3r=o("albert"),T3r=o(" \u2014 "),iH=a("a"),M3r=o("TFAlbertForMultipleChoice"),E3r=o(" (ALBERT model)"),C3r=l(),yM=a("li"),D5e=a("strong"),w3r=o("bert"),A3r=o(" \u2014 "),dH=a("a"),y3r=o("TFBertForMultipleChoice"),L3r=o(" (BERT model)"),x3r=l(),LM=a("li"),G5e=a("strong"),$3r=o("camembert"),k3r=o(" \u2014 "),cH=a("a"),S3r=o("TFCamembertForMultipleChoice"),R3r=o(" (CamemBERT model)"),B3r=l(),xM=a("li"),O5e=a("strong"),P3r=o("convbert"),I3r=o(" \u2014 "),fH=a("a"),q3r=o("TFConvBertForMultipleChoice"),N3r=o(" (ConvBERT model)"),j3r=l(),$M=a("li"),V5e=a("strong"),D3r=o("distilbert"),G3r=o(" \u2014 "),mH=a("a"),O3r=o("TFDistilBertForMultipleChoice"),V3r=o(" (DistilBERT model)"),X3r=l(),kM=a("li"),X5e=a("strong"),z3r=o("electra"),Q3r=o(" \u2014 "),gH=a("a"),W3r=o("TFElectraForMultipleChoice"),H3r=o(" (ELECTRA model)"),U3r=l(),SM=a("li"),z5e=a("strong"),J3r=o("flaubert"),Y3r=o(" \u2014 "),hH=a("a"),K3r=o("TFFlaubertForMultipleChoice"),Z3r=o(" (FlauBERT model)"),evr=l(),RM=a("li"),Q5e=a("strong"),ovr=o("funnel"),rvr=o(" \u2014 "),pH=a("a"),tvr=o("TFFunnelForMultipleChoice"),avr=o(" (Funnel Transformer model)"),nvr=l(),BM=a("li"),W5e=a("strong"),svr=o("longformer"),lvr=o(" \u2014 "),uH=a("a"),ivr=o("TFLongformerForMultipleChoice"),dvr=o(" (Longformer model)"),cvr=l(),PM=a("li"),H5e=a("strong"),fvr=o("mobilebert"),mvr=o(" \u2014 "),_H=a("a"),gvr=o("TFMobileBertForMultipleChoice"),hvr=o(" (MobileBERT model)"),pvr=l(),IM=a("li"),U5e=a("strong"),uvr=o("mpnet"),_vr=o(" \u2014 "),bH=a("a"),bvr=o("TFMPNetForMultipleChoice"),vvr=o(" (MPNet model)"),Fvr=l(),qM=a("li"),J5e=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),vH=a("a"),Evr=o("TFRemBertForMultipleChoice"),Cvr=o(" (RemBERT model)"),wvr=l(),NM=a("li"),Y5e=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),FH=a("a"),Lvr=o("TFRobertaForMultipleChoice"),xvr=o(" (RoBERTa model)"),$vr=l(),jM=a("li"),K5e=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),TH=a("a"),Rvr=o("TFRoFormerForMultipleChoice"),Bvr=o(" (RoFormer model)"),Pvr=l(),DM=a("li"),Z5e=a("strong"),Ivr=o("xlm"),qvr=o(" \u2014 "),MH=a("a"),Nvr=o("TFXLMForMultipleChoice"),jvr=o(" (XLM model)"),Dvr=l(),GM=a("li"),e3e=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),EH=a("a"),Vvr=o("TFXLMRobertaForMultipleChoice"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),OM=a("li"),o3e=a("strong"),Qvr=o("xlnet"),Wvr=o(" \u2014 "),CH=a("a"),Hvr=o("TFXLNetForMultipleChoice"),Uvr=o(" (XLNet model)"),Jvr=l(),F(VM.$$.fragment),Mqe=l(),ic=a("h2"),XM=a("a"),r3e=a("span"),F(T8.$$.fragment),Yvr=l(),t3e=a("span"),Kvr=o("TFAutoModelForNextSentencePrediction"),Eqe=l(),nr=a("div"),F(M8.$$.fragment),Zvr=l(),dc=a("p"),eFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wH=a("a"),oFr=o("from_pretrained()"),rFr=o(" class method or the "),AH=a("a"),tFr=o("from_config()"),aFr=o(` class
method.`),nFr=l(),E8=a("p"),sFr=o("This class cannot be instantiated directly using "),a3e=a("code"),lFr=o("__init__()"),iFr=o(" (throws an error)."),dFr=l(),Rt=a("div"),F(C8.$$.fragment),cFr=l(),n3e=a("p"),fFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mFr=l(),cc=a("p"),gFr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),hFr=o("not"),pFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),uFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),bFr=l(),F(zM.$$.fragment),vFr=l(),Rr=a("div"),F(w8.$$.fragment),FFr=l(),l3e=a("p"),TFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MFr=l(),sn=a("p"),EFr=o("The model class to instantiate is selected based on the "),i3e=a("code"),CFr=o("model_type"),wFr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),AFr=o("pretrained_model_name_or_path"),yFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),LFr=o("pretrained_model_name_or_path"),xFr=o(":"),$Fr=l(),A8=a("ul"),QM=a("li"),f3e=a("strong"),kFr=o("bert"),SFr=o(" \u2014 "),LH=a("a"),RFr=o("TFBertForNextSentencePrediction"),BFr=o(" (BERT model)"),PFr=l(),WM=a("li"),m3e=a("strong"),IFr=o("mobilebert"),qFr=o(" \u2014 "),xH=a("a"),NFr=o("TFMobileBertForNextSentencePrediction"),jFr=o(" (MobileBERT model)"),DFr=l(),F(HM.$$.fragment),Cqe=l(),fc=a("h2"),UM=a("a"),g3e=a("span"),F(y8.$$.fragment),GFr=l(),h3e=a("span"),OFr=o("TFAutoModelForTableQuestionAnswering"),wqe=l(),sr=a("div"),F(L8.$$.fragment),VFr=l(),mc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$H=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),kH=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),x8=a("p"),JFr=o("This class cannot be instantiated directly using "),p3e=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Bt=a("div"),F($8.$$.fragment),eTr=l(),u3e=a("p"),oTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rTr=l(),gc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),F(JM.$$.fragment),dTr=l(),Br=a("div"),F(k8.$$.fragment),cTr=l(),b3e=a("p"),fTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mTr=l(),ln=a("p"),gTr=o("The model class to instantiate is selected based on the "),v3e=a("code"),hTr=o("model_type"),pTr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),uTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(":"),FTr=l(),M3e=a("ul"),YM=a("li"),E3e=a("strong"),TTr=o("tapas"),MTr=o(" \u2014 "),RH=a("a"),ETr=o("TFTapasForQuestionAnswering"),CTr=o(" (TAPAS model)"),wTr=l(),F(KM.$$.fragment),Aqe=l(),hc=a("h2"),ZM=a("a"),C3e=a("span"),F(S8.$$.fragment),ATr=l(),w3e=a("span"),yTr=o("TFAutoModelForTokenClassification"),yqe=l(),lr=a("div"),F(R8.$$.fragment),LTr=l(),pc=a("p"),xTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BH=a("a"),$Tr=o("from_pretrained()"),kTr=o(" class method or the "),PH=a("a"),STr=o("from_config()"),RTr=o(` class
method.`),BTr=l(),B8=a("p"),PTr=o("This class cannot be instantiated directly using "),A3e=a("code"),ITr=o("__init__()"),qTr=o(" (throws an error)."),NTr=l(),Pt=a("div"),F(P8.$$.fragment),jTr=l(),y3e=a("p"),DTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GTr=l(),uc=a("p"),OTr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),VTr=o("not"),XTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),zTr=o("from_pretrained()"),QTr=o(" to load the model weights."),WTr=l(),F(e4.$$.fragment),HTr=l(),Pr=a("div"),F(I8.$$.fragment),UTr=l(),x3e=a("p"),JTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YTr=l(),dn=a("p"),KTr=o("The model class to instantiate is selected based on the "),$3e=a("code"),ZTr=o("model_type"),e7r=o(` property of the config object (either
passed as an argument or loaded from `),k3e=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(":"),n7r=l(),de=a("ul"),o4=a("li"),R3e=a("strong"),s7r=o("albert"),l7r=o(" \u2014 "),qH=a("a"),i7r=o("TFAlbertForTokenClassification"),d7r=o(" (ALBERT model)"),c7r=l(),r4=a("li"),B3e=a("strong"),f7r=o("bert"),m7r=o(" \u2014 "),NH=a("a"),g7r=o("TFBertForTokenClassification"),h7r=o(" (BERT model)"),p7r=l(),t4=a("li"),P3e=a("strong"),u7r=o("camembert"),_7r=o(" \u2014 "),jH=a("a"),b7r=o("TFCamembertForTokenClassification"),v7r=o(" (CamemBERT model)"),F7r=l(),a4=a("li"),I3e=a("strong"),T7r=o("convbert"),M7r=o(" \u2014 "),DH=a("a"),E7r=o("TFConvBertForTokenClassification"),C7r=o(" (ConvBERT model)"),w7r=l(),n4=a("li"),q3e=a("strong"),A7r=o("deberta"),y7r=o(" \u2014 "),GH=a("a"),L7r=o("TFDebertaForTokenClassification"),x7r=o(" (DeBERTa model)"),$7r=l(),s4=a("li"),N3e=a("strong"),k7r=o("deberta-v2"),S7r=o(" \u2014 "),OH=a("a"),R7r=o("TFDebertaV2ForTokenClassification"),B7r=o(" (DeBERTa-v2 model)"),P7r=l(),l4=a("li"),j3e=a("strong"),I7r=o("distilbert"),q7r=o(" \u2014 "),VH=a("a"),N7r=o("TFDistilBertForTokenClassification"),j7r=o(" (DistilBERT model)"),D7r=l(),i4=a("li"),D3e=a("strong"),G7r=o("electra"),O7r=o(" \u2014 "),XH=a("a"),V7r=o("TFElectraForTokenClassification"),X7r=o(" (ELECTRA model)"),z7r=l(),d4=a("li"),G3e=a("strong"),Q7r=o("flaubert"),W7r=o(" \u2014 "),zH=a("a"),H7r=o("TFFlaubertForTokenClassification"),U7r=o(" (FlauBERT model)"),J7r=l(),c4=a("li"),O3e=a("strong"),Y7r=o("funnel"),K7r=o(" \u2014 "),QH=a("a"),Z7r=o("TFFunnelForTokenClassification"),eMr=o(" (Funnel Transformer model)"),oMr=l(),f4=a("li"),V3e=a("strong"),rMr=o("layoutlm"),tMr=o(" \u2014 "),WH=a("a"),aMr=o("TFLayoutLMForTokenClassification"),nMr=o(" (LayoutLM model)"),sMr=l(),m4=a("li"),X3e=a("strong"),lMr=o("longformer"),iMr=o(" \u2014 "),HH=a("a"),dMr=o("TFLongformerForTokenClassification"),cMr=o(" (Longformer model)"),fMr=l(),g4=a("li"),z3e=a("strong"),mMr=o("mobilebert"),gMr=o(" \u2014 "),UH=a("a"),hMr=o("TFMobileBertForTokenClassification"),pMr=o(" (MobileBERT model)"),uMr=l(),h4=a("li"),Q3e=a("strong"),_Mr=o("mpnet"),bMr=o(" \u2014 "),JH=a("a"),vMr=o("TFMPNetForTokenClassification"),FMr=o(" (MPNet model)"),TMr=l(),p4=a("li"),W3e=a("strong"),MMr=o("rembert"),EMr=o(" \u2014 "),YH=a("a"),CMr=o("TFRemBertForTokenClassification"),wMr=o(" (RemBERT model)"),AMr=l(),u4=a("li"),H3e=a("strong"),yMr=o("roberta"),LMr=o(" \u2014 "),KH=a("a"),xMr=o("TFRobertaForTokenClassification"),$Mr=o(" (RoBERTa model)"),kMr=l(),_4=a("li"),U3e=a("strong"),SMr=o("roformer"),RMr=o(" \u2014 "),ZH=a("a"),BMr=o("TFRoFormerForTokenClassification"),PMr=o(" (RoFormer model)"),IMr=l(),b4=a("li"),J3e=a("strong"),qMr=o("xlm"),NMr=o(" \u2014 "),eU=a("a"),jMr=o("TFXLMForTokenClassification"),DMr=o(" (XLM model)"),GMr=l(),v4=a("li"),Y3e=a("strong"),OMr=o("xlm-roberta"),VMr=o(" \u2014 "),oU=a("a"),XMr=o("TFXLMRobertaForTokenClassification"),zMr=o(" (XLM-RoBERTa model)"),QMr=l(),F4=a("li"),K3e=a("strong"),WMr=o("xlnet"),HMr=o(" \u2014 "),rU=a("a"),UMr=o("TFXLNetForTokenClassification"),JMr=o(" (XLNet model)"),YMr=l(),F(T4.$$.fragment),Lqe=l(),_c=a("h2"),M4=a("a"),Z3e=a("span"),F(q8.$$.fragment),KMr=l(),eve=a("span"),ZMr=o("TFAutoModelForQuestionAnswering"),xqe=l(),ir=a("div"),F(N8.$$.fragment),e4r=l(),bc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),aU=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),j8=a("p"),l4r=o("This class cannot be instantiated directly using "),ove=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),It=a("div"),F(D8.$$.fragment),f4r=l(),rve=a("p"),m4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g4r=l(),vc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),p4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),_4r=o("from_pretrained()"),b4r=o(" to load the model weights."),v4r=l(),F(E4.$$.fragment),F4r=l(),Ir=a("div"),F(G8.$$.fragment),T4r=l(),ave=a("p"),M4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E4r=l(),cn=a("p"),C4r=o("The model class to instantiate is selected based on the "),nve=a("code"),w4r=o("model_type"),A4r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(":"),k4r=l(),ce=a("ul"),C4=a("li"),ive=a("strong"),S4r=o("albert"),R4r=o(" \u2014 "),sU=a("a"),B4r=o("TFAlbertForQuestionAnswering"),P4r=o(" (ALBERT model)"),I4r=l(),w4=a("li"),dve=a("strong"),q4r=o("bert"),N4r=o(" \u2014 "),lU=a("a"),j4r=o("TFBertForQuestionAnswering"),D4r=o(" (BERT model)"),G4r=l(),A4=a("li"),cve=a("strong"),O4r=o("camembert"),V4r=o(" \u2014 "),iU=a("a"),X4r=o("TFCamembertForQuestionAnswering"),z4r=o(" (CamemBERT model)"),Q4r=l(),y4=a("li"),fve=a("strong"),W4r=o("convbert"),H4r=o(" \u2014 "),dU=a("a"),U4r=o("TFConvBertForQuestionAnswering"),J4r=o(" (ConvBERT model)"),Y4r=l(),L4=a("li"),mve=a("strong"),K4r=o("deberta"),Z4r=o(" \u2014 "),cU=a("a"),eEr=o("TFDebertaForQuestionAnswering"),oEr=o(" (DeBERTa model)"),rEr=l(),x4=a("li"),gve=a("strong"),tEr=o("deberta-v2"),aEr=o(" \u2014 "),fU=a("a"),nEr=o("TFDebertaV2ForQuestionAnswering"),sEr=o(" (DeBERTa-v2 model)"),lEr=l(),$4=a("li"),hve=a("strong"),iEr=o("distilbert"),dEr=o(" \u2014 "),mU=a("a"),cEr=o("TFDistilBertForQuestionAnswering"),fEr=o(" (DistilBERT model)"),mEr=l(),k4=a("li"),pve=a("strong"),gEr=o("electra"),hEr=o(" \u2014 "),gU=a("a"),pEr=o("TFElectraForQuestionAnswering"),uEr=o(" (ELECTRA model)"),_Er=l(),S4=a("li"),uve=a("strong"),bEr=o("flaubert"),vEr=o(" \u2014 "),hU=a("a"),FEr=o("TFFlaubertForQuestionAnsweringSimple"),TEr=o(" (FlauBERT model)"),MEr=l(),R4=a("li"),_ve=a("strong"),EEr=o("funnel"),CEr=o(" \u2014 "),pU=a("a"),wEr=o("TFFunnelForQuestionAnswering"),AEr=o(" (Funnel Transformer model)"),yEr=l(),B4=a("li"),bve=a("strong"),LEr=o("gptj"),xEr=o(" \u2014 "),uU=a("a"),$Er=o("TFGPTJForQuestionAnswering"),kEr=o(" (GPT-J model)"),SEr=l(),P4=a("li"),vve=a("strong"),REr=o("longformer"),BEr=o(" \u2014 "),_U=a("a"),PEr=o("TFLongformerForQuestionAnswering"),IEr=o(" (Longformer model)"),qEr=l(),I4=a("li"),Fve=a("strong"),NEr=o("mobilebert"),jEr=o(" \u2014 "),bU=a("a"),DEr=o("TFMobileBertForQuestionAnswering"),GEr=o(" (MobileBERT model)"),OEr=l(),q4=a("li"),Tve=a("strong"),VEr=o("mpnet"),XEr=o(" \u2014 "),vU=a("a"),zEr=o("TFMPNetForQuestionAnswering"),QEr=o(" (MPNet model)"),WEr=l(),N4=a("li"),Mve=a("strong"),HEr=o("rembert"),UEr=o(" \u2014 "),FU=a("a"),JEr=o("TFRemBertForQuestionAnswering"),YEr=o(" (RemBERT model)"),KEr=l(),j4=a("li"),Eve=a("strong"),ZEr=o("roberta"),eCr=o(" \u2014 "),TU=a("a"),oCr=o("TFRobertaForQuestionAnswering"),rCr=o(" (RoBERTa model)"),tCr=l(),D4=a("li"),Cve=a("strong"),aCr=o("roformer"),nCr=o(" \u2014 "),MU=a("a"),sCr=o("TFRoFormerForQuestionAnswering"),lCr=o(" (RoFormer model)"),iCr=l(),G4=a("li"),wve=a("strong"),dCr=o("xlm"),cCr=o(" \u2014 "),EU=a("a"),fCr=o("TFXLMForQuestionAnsweringSimple"),mCr=o(" (XLM model)"),gCr=l(),O4=a("li"),Ave=a("strong"),hCr=o("xlm-roberta"),pCr=o(" \u2014 "),CU=a("a"),uCr=o("TFXLMRobertaForQuestionAnswering"),_Cr=o(" (XLM-RoBERTa model)"),bCr=l(),V4=a("li"),yve=a("strong"),vCr=o("xlnet"),FCr=o(" \u2014 "),wU=a("a"),TCr=o("TFXLNetForQuestionAnsweringSimple"),MCr=o(" (XLNet model)"),ECr=l(),F(X4.$$.fragment),$qe=l(),Fc=a("h2"),z4=a("a"),Lve=a("span"),F(O8.$$.fragment),CCr=l(),xve=a("span"),wCr=o("TFAutoModelForVision2Seq"),kqe=l(),dr=a("div"),F(V8.$$.fragment),ACr=l(),Tc=a("p"),yCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AU=a("a"),LCr=o("from_pretrained()"),xCr=o(" class method or the "),yU=a("a"),$Cr=o("from_config()"),kCr=o(` class
method.`),SCr=l(),X8=a("p"),RCr=o("This class cannot be instantiated directly using "),$ve=a("code"),BCr=o("__init__()"),PCr=o(" (throws an error)."),ICr=l(),qt=a("div"),F(z8.$$.fragment),qCr=l(),kve=a("p"),NCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jCr=l(),Mc=a("p"),DCr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),GCr=o("not"),OCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),VCr=o("from_pretrained()"),XCr=o(" to load the model weights."),zCr=l(),F(Q4.$$.fragment),QCr=l(),qr=a("div"),F(Q8.$$.fragment),WCr=l(),Rve=a("p"),HCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UCr=l(),fn=a("p"),JCr=o("The model class to instantiate is selected based on the "),Bve=a("code"),YCr=o("model_type"),KCr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),ZCr=o("pretrained_model_name_or_path"),ewr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(":"),twr=l(),qve=a("ul"),W4=a("li"),Nve=a("strong"),awr=o("vision-encoder-decoder"),nwr=o(" \u2014 "),xU=a("a"),swr=o("TFVisionEncoderDecoderModel"),lwr=o(" (Vision Encoder decoder model)"),iwr=l(),F(H4.$$.fragment),Sqe=l(),Ec=a("h2"),U4=a("a"),jve=a("span"),F(W8.$$.fragment),dwr=l(),Dve=a("span"),cwr=o("TFAutoModelForSpeechSeq2Seq"),Rqe=l(),cr=a("div"),F(H8.$$.fragment),fwr=l(),Cc=a("p"),mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$U=a("a"),gwr=o("from_pretrained()"),hwr=o(" class method or the "),kU=a("a"),pwr=o("from_config()"),uwr=o(` class
method.`),_wr=l(),U8=a("p"),bwr=o("This class cannot be instantiated directly using "),Gve=a("code"),vwr=o("__init__()"),Fwr=o(" (throws an error)."),Twr=l(),Nt=a("div"),F(J8.$$.fragment),Mwr=l(),Ove=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cwr=l(),wc=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),Awr=o("not"),ywr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),Lwr=o("from_pretrained()"),xwr=o(" to load the model weights."),$wr=l(),F(J4.$$.fragment),kwr=l(),Nr=a("div"),F(Y8.$$.fragment),Swr=l(),Xve=a("p"),Rwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bwr=l(),mn=a("p"),Pwr=o("The model class to instantiate is selected based on the "),zve=a("code"),Iwr=o("model_type"),qwr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),Nwr=o("pretrained_model_name_or_path"),jwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(":"),Owr=l(),Hve=a("ul"),Y4=a("li"),Uve=a("strong"),Vwr=o("speech_to_text"),Xwr=o(" \u2014 "),RU=a("a"),zwr=o("TFSpeech2TextForConditionalGeneration"),Qwr=o(" (Speech2Text model)"),Wwr=l(),F(K4.$$.fragment),Bqe=l(),Ac=a("h2"),Z4=a("a"),Jve=a("span"),F(K8.$$.fragment),Hwr=l(),Yve=a("span"),Uwr=o("FlaxAutoModel"),Pqe=l(),fr=a("div"),F(Z8.$$.fragment),Jwr=l(),yc=a("p"),Ywr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BU=a("a"),Kwr=o("from_pretrained()"),Zwr=o(" class method or the "),PU=a("a"),eAr=o("from_config()"),oAr=o(` class
method.`),rAr=l(),ex=a("p"),tAr=o("This class cannot be instantiated directly using "),Kve=a("code"),aAr=o("__init__()"),nAr=o(" (throws an error)."),sAr=l(),jt=a("div"),F(ox.$$.fragment),lAr=l(),Zve=a("p"),iAr=o("Instantiates one of the base model classes of the library from a configuration."),dAr=l(),Lc=a("p"),cAr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),fAr=o("not"),mAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),gAr=o("from_pretrained()"),hAr=o(" to load the model weights."),pAr=l(),F(eE.$$.fragment),uAr=l(),jr=a("div"),F(rx.$$.fragment),_Ar=l(),oFe=a("p"),bAr=o("Instantiate one of the base model classes of the library from a pretrained model."),vAr=l(),gn=a("p"),FAr=o("The model class to instantiate is selected based on the "),rFe=a("code"),TAr=o("model_type"),MAr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),EAr=o("pretrained_model_name_or_path"),CAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),wAr=o("pretrained_model_name_or_path"),AAr=o(":"),yAr=l(),re=a("ul"),oE=a("li"),nFe=a("strong"),LAr=o("albert"),xAr=o(" \u2014 "),qU=a("a"),$Ar=o("FlaxAlbertModel"),kAr=o(" (ALBERT model)"),SAr=l(),rE=a("li"),sFe=a("strong"),RAr=o("bart"),BAr=o(" \u2014 "),NU=a("a"),PAr=o("FlaxBartModel"),IAr=o(" (BART model)"),qAr=l(),tE=a("li"),lFe=a("strong"),NAr=o("beit"),jAr=o(" \u2014 "),jU=a("a"),DAr=o("FlaxBeitModel"),GAr=o(" (BEiT model)"),OAr=l(),aE=a("li"),iFe=a("strong"),VAr=o("bert"),XAr=o(" \u2014 "),DU=a("a"),zAr=o("FlaxBertModel"),QAr=o(" (BERT model)"),WAr=l(),nE=a("li"),dFe=a("strong"),HAr=o("big_bird"),UAr=o(" \u2014 "),GU=a("a"),JAr=o("FlaxBigBirdModel"),YAr=o(" (BigBird model)"),KAr=l(),sE=a("li"),cFe=a("strong"),ZAr=o("blenderbot"),e6r=o(" \u2014 "),OU=a("a"),o6r=o("FlaxBlenderbotModel"),r6r=o(" (Blenderbot model)"),t6r=l(),lE=a("li"),fFe=a("strong"),a6r=o("blenderbot-small"),n6r=o(" \u2014 "),VU=a("a"),s6r=o("FlaxBlenderbotSmallModel"),l6r=o(" (BlenderbotSmall model)"),i6r=l(),iE=a("li"),mFe=a("strong"),d6r=o("clip"),c6r=o(" \u2014 "),XU=a("a"),f6r=o("FlaxCLIPModel"),m6r=o(" (CLIP model)"),g6r=l(),dE=a("li"),gFe=a("strong"),h6r=o("distilbert"),p6r=o(" \u2014 "),zU=a("a"),u6r=o("FlaxDistilBertModel"),_6r=o(" (DistilBERT model)"),b6r=l(),cE=a("li"),hFe=a("strong"),v6r=o("electra"),F6r=o(" \u2014 "),QU=a("a"),T6r=o("FlaxElectraModel"),M6r=o(" (ELECTRA model)"),E6r=l(),fE=a("li"),pFe=a("strong"),C6r=o("gpt2"),w6r=o(" \u2014 "),WU=a("a"),A6r=o("FlaxGPT2Model"),y6r=o(" (OpenAI GPT-2 model)"),L6r=l(),mE=a("li"),uFe=a("strong"),x6r=o("gpt_neo"),$6r=o(" \u2014 "),HU=a("a"),k6r=o("FlaxGPTNeoModel"),S6r=o(" (GPT Neo model)"),R6r=l(),gE=a("li"),_Fe=a("strong"),B6r=o("gptj"),P6r=o(" \u2014 "),UU=a("a"),I6r=o("FlaxGPTJModel"),q6r=o(" (GPT-J model)"),N6r=l(),hE=a("li"),bFe=a("strong"),j6r=o("marian"),D6r=o(" \u2014 "),JU=a("a"),G6r=o("FlaxMarianModel"),O6r=o(" (Marian model)"),V6r=l(),pE=a("li"),vFe=a("strong"),X6r=o("mbart"),z6r=o(" \u2014 "),YU=a("a"),Q6r=o("FlaxMBartModel"),W6r=o(" (mBART model)"),H6r=l(),uE=a("li"),FFe=a("strong"),U6r=o("mt5"),J6r=o(" \u2014 "),KU=a("a"),Y6r=o("FlaxMT5Model"),K6r=o(" (mT5 model)"),Z6r=l(),_E=a("li"),TFe=a("strong"),e0r=o("pegasus"),o0r=o(" \u2014 "),ZU=a("a"),r0r=o("FlaxPegasusModel"),t0r=o(" (Pegasus model)"),a0r=l(),bE=a("li"),MFe=a("strong"),n0r=o("roberta"),s0r=o(" \u2014 "),eJ=a("a"),l0r=o("FlaxRobertaModel"),i0r=o(" (RoBERTa model)"),d0r=l(),vE=a("li"),EFe=a("strong"),c0r=o("roformer"),f0r=o(" \u2014 "),oJ=a("a"),m0r=o("FlaxRoFormerModel"),g0r=o(" (RoFormer model)"),h0r=l(),FE=a("li"),CFe=a("strong"),p0r=o("t5"),u0r=o(" \u2014 "),rJ=a("a"),_0r=o("FlaxT5Model"),b0r=o(" (T5 model)"),v0r=l(),TE=a("li"),wFe=a("strong"),F0r=o("vision-text-dual-encoder"),T0r=o(" \u2014 "),tJ=a("a"),M0r=o("FlaxVisionTextDualEncoderModel"),E0r=o(" (VisionTextDualEncoder model)"),C0r=l(),ME=a("li"),AFe=a("strong"),w0r=o("vit"),A0r=o(" \u2014 "),aJ=a("a"),y0r=o("FlaxViTModel"),L0r=o(" (ViT model)"),x0r=l(),EE=a("li"),yFe=a("strong"),$0r=o("wav2vec2"),k0r=o(" \u2014 "),nJ=a("a"),S0r=o("FlaxWav2Vec2Model"),R0r=o(" (Wav2Vec2 model)"),B0r=l(),CE=a("li"),LFe=a("strong"),P0r=o("xglm"),I0r=o(" \u2014 "),sJ=a("a"),q0r=o("FlaxXGLMModel"),N0r=o(" (XGLM model)"),j0r=l(),wE=a("li"),xFe=a("strong"),D0r=o("xlm-roberta"),G0r=o(" \u2014 "),lJ=a("a"),O0r=o("FlaxXLMRobertaModel"),V0r=o(" (XLM-RoBERTa model)"),X0r=l(),F(AE.$$.fragment),Iqe=l(),xc=a("h2"),yE=a("a"),$Fe=a("span"),F(tx.$$.fragment),z0r=l(),kFe=a("span"),Q0r=o("FlaxAutoModelForCausalLM"),qqe=l(),mr=a("div"),F(ax.$$.fragment),W0r=l(),$c=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iJ=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),dJ=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),nx=a("p"),eyr=o("This class cannot be instantiated directly using "),SFe=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),Dt=a("div"),F(sx.$$.fragment),ayr=l(),RFe=a("p"),nyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),syr=l(),kc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),F(LE.$$.fragment),gyr=l(),Dr=a("div"),F(lx.$$.fragment),hyr=l(),PFe=a("p"),pyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uyr=l(),hn=a("p"),_yr=o("The model class to instantiate is selected based on the "),IFe=a("code"),byr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),Fyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),ke=a("ul"),xE=a("li"),jFe=a("strong"),wyr=o("bart"),Ayr=o(" \u2014 "),fJ=a("a"),yyr=o("FlaxBartForCausalLM"),Lyr=o(" (BART model)"),xyr=l(),$E=a("li"),DFe=a("strong"),$yr=o("bert"),kyr=o(" \u2014 "),mJ=a("a"),Syr=o("FlaxBertForCausalLM"),Ryr=o(" (BERT model)"),Byr=l(),kE=a("li"),GFe=a("strong"),Pyr=o("big_bird"),Iyr=o(" \u2014 "),gJ=a("a"),qyr=o("FlaxBigBirdForCausalLM"),Nyr=o(" (BigBird model)"),jyr=l(),SE=a("li"),OFe=a("strong"),Dyr=o("electra"),Gyr=o(" \u2014 "),hJ=a("a"),Oyr=o("FlaxElectraForCausalLM"),Vyr=o(" (ELECTRA model)"),Xyr=l(),RE=a("li"),VFe=a("strong"),zyr=o("gpt2"),Qyr=o(" \u2014 "),pJ=a("a"),Wyr=o("FlaxGPT2LMHeadModel"),Hyr=o(" (OpenAI GPT-2 model)"),Uyr=l(),BE=a("li"),XFe=a("strong"),Jyr=o("gpt_neo"),Yyr=o(" \u2014 "),uJ=a("a"),Kyr=o("FlaxGPTNeoForCausalLM"),Zyr=o(" (GPT Neo model)"),eLr=l(),PE=a("li"),zFe=a("strong"),oLr=o("gptj"),rLr=o(" \u2014 "),_J=a("a"),tLr=o("FlaxGPTJForCausalLM"),aLr=o(" (GPT-J model)"),nLr=l(),IE=a("li"),QFe=a("strong"),sLr=o("roberta"),lLr=o(" \u2014 "),bJ=a("a"),iLr=o("FlaxRobertaForCausalLM"),dLr=o(" (RoBERTa model)"),cLr=l(),qE=a("li"),WFe=a("strong"),fLr=o("xglm"),mLr=o(" \u2014 "),vJ=a("a"),gLr=o("FlaxXGLMForCausalLM"),hLr=o(" (XGLM model)"),pLr=l(),F(NE.$$.fragment),Nqe=l(),Sc=a("h2"),jE=a("a"),HFe=a("span"),F(ix.$$.fragment),uLr=l(),UFe=a("span"),_Lr=o("FlaxAutoModelForPreTraining"),jqe=l(),gr=a("div"),F(dx.$$.fragment),bLr=l(),Rc=a("p"),vLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FJ=a("a"),FLr=o("from_pretrained()"),TLr=o(" class method or the "),TJ=a("a"),MLr=o("from_config()"),ELr=o(` class
method.`),CLr=l(),cx=a("p"),wLr=o("This class cannot be instantiated directly using "),JFe=a("code"),ALr=o("__init__()"),yLr=o(" (throws an error)."),LLr=l(),Gt=a("div"),F(fx.$$.fragment),xLr=l(),YFe=a("p"),$Lr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kLr=l(),Bc=a("p"),SLr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),RLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),PLr=o("from_pretrained()"),ILr=o(" to load the model weights."),qLr=l(),F(DE.$$.fragment),NLr=l(),Gr=a("div"),F(mx.$$.fragment),jLr=l(),ZFe=a("p"),DLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GLr=l(),pn=a("p"),OLr=o("The model class to instantiate is selected based on the "),eTe=a("code"),VLr=o("model_type"),XLr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),WLr=o("pretrained_model_name_or_path"),HLr=o(":"),ULr=l(),Ee=a("ul"),GE=a("li"),tTe=a("strong"),JLr=o("albert"),YLr=o(" \u2014 "),EJ=a("a"),KLr=o("FlaxAlbertForPreTraining"),ZLr=o(" (ALBERT model)"),e8r=l(),OE=a("li"),aTe=a("strong"),o8r=o("bart"),r8r=o(" \u2014 "),CJ=a("a"),t8r=o("FlaxBartForConditionalGeneration"),a8r=o(" (BART model)"),n8r=l(),VE=a("li"),nTe=a("strong"),s8r=o("bert"),l8r=o(" \u2014 "),wJ=a("a"),i8r=o("FlaxBertForPreTraining"),d8r=o(" (BERT model)"),c8r=l(),XE=a("li"),sTe=a("strong"),f8r=o("big_bird"),m8r=o(" \u2014 "),AJ=a("a"),g8r=o("FlaxBigBirdForPreTraining"),h8r=o(" (BigBird model)"),p8r=l(),zE=a("li"),lTe=a("strong"),u8r=o("electra"),_8r=o(" \u2014 "),yJ=a("a"),b8r=o("FlaxElectraForPreTraining"),v8r=o(" (ELECTRA model)"),F8r=l(),QE=a("li"),iTe=a("strong"),T8r=o("mbart"),M8r=o(" \u2014 "),LJ=a("a"),E8r=o("FlaxMBartForConditionalGeneration"),C8r=o(" (mBART model)"),w8r=l(),WE=a("li"),dTe=a("strong"),A8r=o("mt5"),y8r=o(" \u2014 "),xJ=a("a"),L8r=o("FlaxMT5ForConditionalGeneration"),x8r=o(" (mT5 model)"),$8r=l(),HE=a("li"),cTe=a("strong"),k8r=o("roberta"),S8r=o(" \u2014 "),$J=a("a"),R8r=o("FlaxRobertaForMaskedLM"),B8r=o(" (RoBERTa model)"),P8r=l(),UE=a("li"),fTe=a("strong"),I8r=o("roformer"),q8r=o(" \u2014 "),kJ=a("a"),N8r=o("FlaxRoFormerForMaskedLM"),j8r=o(" (RoFormer model)"),D8r=l(),JE=a("li"),mTe=a("strong"),G8r=o("t5"),O8r=o(" \u2014 "),SJ=a("a"),V8r=o("FlaxT5ForConditionalGeneration"),X8r=o(" (T5 model)"),z8r=l(),YE=a("li"),gTe=a("strong"),Q8r=o("wav2vec2"),W8r=o(" \u2014 "),RJ=a("a"),H8r=o("FlaxWav2Vec2ForPreTraining"),U8r=o(" (Wav2Vec2 model)"),J8r=l(),KE=a("li"),hTe=a("strong"),Y8r=o("xlm-roberta"),K8r=o(" \u2014 "),BJ=a("a"),Z8r=o("FlaxXLMRobertaForMaskedLM"),exr=o(" (XLM-RoBERTa model)"),oxr=l(),F(ZE.$$.fragment),Dqe=l(),Pc=a("h2"),eC=a("a"),pTe=a("span"),F(gx.$$.fragment),rxr=l(),uTe=a("span"),txr=o("FlaxAutoModelForMaskedLM"),Gqe=l(),hr=a("div"),F(hx.$$.fragment),axr=l(),Ic=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PJ=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),IJ=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),px=a("p"),fxr=o("This class cannot be instantiated directly using "),_Te=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Ot=a("div"),F(ux.$$.fragment),pxr=l(),bTe=a("p"),uxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_xr=l(),qc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F(oC.$$.fragment),Cxr=l(),Or=a("div"),F(_x.$$.fragment),wxr=l(),FTe=a("p"),Axr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yxr=l(),un=a("p"),Lxr=o("The model class to instantiate is selected based on the "),TTe=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),Rxr=o("pretrained_model_name_or_path"),Bxr=o(":"),Pxr=l(),Le=a("ul"),rC=a("li"),CTe=a("strong"),Ixr=o("albert"),qxr=o(" \u2014 "),NJ=a("a"),Nxr=o("FlaxAlbertForMaskedLM"),jxr=o(" (ALBERT model)"),Dxr=l(),tC=a("li"),wTe=a("strong"),Gxr=o("bart"),Oxr=o(" \u2014 "),jJ=a("a"),Vxr=o("FlaxBartForConditionalGeneration"),Xxr=o(" (BART model)"),zxr=l(),aC=a("li"),ATe=a("strong"),Qxr=o("bert"),Wxr=o(" \u2014 "),DJ=a("a"),Hxr=o("FlaxBertForMaskedLM"),Uxr=o(" (BERT model)"),Jxr=l(),nC=a("li"),yTe=a("strong"),Yxr=o("big_bird"),Kxr=o(" \u2014 "),GJ=a("a"),Zxr=o("FlaxBigBirdForMaskedLM"),e9r=o(" (BigBird model)"),o9r=l(),sC=a("li"),LTe=a("strong"),r9r=o("distilbert"),t9r=o(" \u2014 "),OJ=a("a"),a9r=o("FlaxDistilBertForMaskedLM"),n9r=o(" (DistilBERT model)"),s9r=l(),lC=a("li"),xTe=a("strong"),l9r=o("electra"),i9r=o(" \u2014 "),VJ=a("a"),d9r=o("FlaxElectraForMaskedLM"),c9r=o(" (ELECTRA model)"),f9r=l(),iC=a("li"),$Te=a("strong"),m9r=o("mbart"),g9r=o(" \u2014 "),XJ=a("a"),h9r=o("FlaxMBartForConditionalGeneration"),p9r=o(" (mBART model)"),u9r=l(),dC=a("li"),kTe=a("strong"),_9r=o("roberta"),b9r=o(" \u2014 "),zJ=a("a"),v9r=o("FlaxRobertaForMaskedLM"),F9r=o(" (RoBERTa model)"),T9r=l(),cC=a("li"),STe=a("strong"),M9r=o("roformer"),E9r=o(" \u2014 "),QJ=a("a"),C9r=o("FlaxRoFormerForMaskedLM"),w9r=o(" (RoFormer model)"),A9r=l(),fC=a("li"),RTe=a("strong"),y9r=o("xlm-roberta"),L9r=o(" \u2014 "),WJ=a("a"),x9r=o("FlaxXLMRobertaForMaskedLM"),$9r=o(" (XLM-RoBERTa model)"),k9r=l(),F(mC.$$.fragment),Oqe=l(),Nc=a("h2"),gC=a("a"),BTe=a("span"),F(bx.$$.fragment),S9r=l(),PTe=a("span"),R9r=o("FlaxAutoModelForSeq2SeqLM"),Vqe=l(),pr=a("div"),F(vx.$$.fragment),B9r=l(),jc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HJ=a("a"),I9r=o("from_pretrained()"),q9r=o(" class method or the "),UJ=a("a"),N9r=o("from_config()"),j9r=o(` class
method.`),D9r=l(),Fx=a("p"),G9r=o("This class cannot be instantiated directly using "),ITe=a("code"),O9r=o("__init__()"),V9r=o(" (throws an error)."),X9r=l(),Vt=a("div"),F(Tx.$$.fragment),z9r=l(),qTe=a("p"),Q9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W9r=l(),Dc=a("p"),H9r=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),U9r=o("not"),J9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),Y9r=o("from_pretrained()"),K9r=o(" to load the model weights."),Z9r=l(),F(hC.$$.fragment),e$r=l(),Vr=a("div"),F(Mx.$$.fragment),o$r=l(),jTe=a("p"),r$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t$r=l(),_n=a("p"),a$r=o("The model class to instantiate is selected based on the "),DTe=a("code"),n$r=o("model_type"),s$r=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),d$r=o("pretrained_model_name_or_path"),c$r=o(":"),f$r=l(),Se=a("ul"),pC=a("li"),VTe=a("strong"),m$r=o("bart"),g$r=o(" \u2014 "),YJ=a("a"),h$r=o("FlaxBartForConditionalGeneration"),p$r=o(" (BART model)"),u$r=l(),uC=a("li"),XTe=a("strong"),_$r=o("blenderbot"),b$r=o(" \u2014 "),KJ=a("a"),v$r=o("FlaxBlenderbotForConditionalGeneration"),F$r=o(" (Blenderbot model)"),T$r=l(),_C=a("li"),zTe=a("strong"),M$r=o("blenderbot-small"),E$r=o(" \u2014 "),ZJ=a("a"),C$r=o("FlaxBlenderbotSmallForConditionalGeneration"),w$r=o(" (BlenderbotSmall model)"),A$r=l(),bC=a("li"),QTe=a("strong"),y$r=o("encoder-decoder"),L$r=o(" \u2014 "),eY=a("a"),x$r=o("FlaxEncoderDecoderModel"),$$r=o(" (Encoder decoder model)"),k$r=l(),vC=a("li"),WTe=a("strong"),S$r=o("marian"),R$r=o(" \u2014 "),oY=a("a"),B$r=o("FlaxMarianMTModel"),P$r=o(" (Marian model)"),I$r=l(),FC=a("li"),HTe=a("strong"),q$r=o("mbart"),N$r=o(" \u2014 "),rY=a("a"),j$r=o("FlaxMBartForConditionalGeneration"),D$r=o(" (mBART model)"),G$r=l(),TC=a("li"),UTe=a("strong"),O$r=o("mt5"),V$r=o(" \u2014 "),tY=a("a"),X$r=o("FlaxMT5ForConditionalGeneration"),z$r=o(" (mT5 model)"),Q$r=l(),MC=a("li"),JTe=a("strong"),W$r=o("pegasus"),H$r=o(" \u2014 "),aY=a("a"),U$r=o("FlaxPegasusForConditionalGeneration"),J$r=o(" (Pegasus model)"),Y$r=l(),EC=a("li"),YTe=a("strong"),K$r=o("t5"),Z$r=o(" \u2014 "),nY=a("a"),ekr=o("FlaxT5ForConditionalGeneration"),okr=o(" (T5 model)"),rkr=l(),F(CC.$$.fragment),Xqe=l(),Gc=a("h2"),wC=a("a"),KTe=a("span"),F(Ex.$$.fragment),tkr=l(),ZTe=a("span"),akr=o("FlaxAutoModelForSequenceClassification"),zqe=l(),ur=a("div"),F(Cx.$$.fragment),nkr=l(),Oc=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sY=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),lY=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),wx=a("p"),mkr=o("This class cannot be instantiated directly using "),e7e=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Xt=a("div"),F(Ax.$$.fragment),ukr=l(),o7e=a("p"),_kr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bkr=l(),Vc=a("p"),vkr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),Fkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),F(AC.$$.fragment),wkr=l(),Xr=a("div"),F(yx.$$.fragment),Akr=l(),t7e=a("p"),ykr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lkr=l(),bn=a("p"),xkr=o("The model class to instantiate is selected based on the "),a7e=a("code"),$kr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),Bkr=o("pretrained_model_name_or_path"),Pkr=o(":"),Ikr=l(),xe=a("ul"),yC=a("li"),l7e=a("strong"),qkr=o("albert"),Nkr=o(" \u2014 "),dY=a("a"),jkr=o("FlaxAlbertForSequenceClassification"),Dkr=o(" (ALBERT model)"),Gkr=l(),LC=a("li"),i7e=a("strong"),Okr=o("bart"),Vkr=o(" \u2014 "),cY=a("a"),Xkr=o("FlaxBartForSequenceClassification"),zkr=o(" (BART model)"),Qkr=l(),xC=a("li"),d7e=a("strong"),Wkr=o("bert"),Hkr=o(" \u2014 "),fY=a("a"),Ukr=o("FlaxBertForSequenceClassification"),Jkr=o(" (BERT model)"),Ykr=l(),$C=a("li"),c7e=a("strong"),Kkr=o("big_bird"),Zkr=o(" \u2014 "),mY=a("a"),eSr=o("FlaxBigBirdForSequenceClassification"),oSr=o(" (BigBird model)"),rSr=l(),kC=a("li"),f7e=a("strong"),tSr=o("distilbert"),aSr=o(" \u2014 "),gY=a("a"),nSr=o("FlaxDistilBertForSequenceClassification"),sSr=o(" (DistilBERT model)"),lSr=l(),SC=a("li"),m7e=a("strong"),iSr=o("electra"),dSr=o(" \u2014 "),hY=a("a"),cSr=o("FlaxElectraForSequenceClassification"),fSr=o(" (ELECTRA model)"),mSr=l(),RC=a("li"),g7e=a("strong"),gSr=o("mbart"),hSr=o(" \u2014 "),pY=a("a"),pSr=o("FlaxMBartForSequenceClassification"),uSr=o(" (mBART model)"),_Sr=l(),BC=a("li"),h7e=a("strong"),bSr=o("roberta"),vSr=o(" \u2014 "),uY=a("a"),FSr=o("FlaxRobertaForSequenceClassification"),TSr=o(" (RoBERTa model)"),MSr=l(),PC=a("li"),p7e=a("strong"),ESr=o("roformer"),CSr=o(" \u2014 "),_Y=a("a"),wSr=o("FlaxRoFormerForSequenceClassification"),ASr=o(" (RoFormer model)"),ySr=l(),IC=a("li"),u7e=a("strong"),LSr=o("xlm-roberta"),xSr=o(" \u2014 "),bY=a("a"),$Sr=o("FlaxXLMRobertaForSequenceClassification"),kSr=o(" (XLM-RoBERTa model)"),SSr=l(),F(qC.$$.fragment),Qqe=l(),Xc=a("h2"),NC=a("a"),_7e=a("span"),F(Lx.$$.fragment),RSr=l(),b7e=a("span"),BSr=o("FlaxAutoModelForQuestionAnswering"),Wqe=l(),_r=a("div"),F(xx.$$.fragment),PSr=l(),zc=a("p"),ISr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vY=a("a"),qSr=o("from_pretrained()"),NSr=o(" class method or the "),FY=a("a"),jSr=o("from_config()"),DSr=o(` class
method.`),GSr=l(),$x=a("p"),OSr=o("This class cannot be instantiated directly using "),v7e=a("code"),VSr=o("__init__()"),XSr=o(" (throws an error)."),zSr=l(),zt=a("div"),F(kx.$$.fragment),QSr=l(),F7e=a("p"),WSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HSr=l(),Qc=a("p"),USr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),JSr=o("not"),YSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),KSr=o("from_pretrained()"),ZSr=o(" to load the model weights."),eRr=l(),F(jC.$$.fragment),oRr=l(),zr=a("div"),F(Sx.$$.fragment),rRr=l(),M7e=a("p"),tRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aRr=l(),vn=a("p"),nRr=o("The model class to instantiate is selected based on the "),E7e=a("code"),sRr=o("model_type"),lRr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(":"),mRr=l(),$e=a("ul"),DC=a("li"),A7e=a("strong"),gRr=o("albert"),hRr=o(" \u2014 "),MY=a("a"),pRr=o("FlaxAlbertForQuestionAnswering"),uRr=o(" (ALBERT model)"),_Rr=l(),GC=a("li"),y7e=a("strong"),bRr=o("bart"),vRr=o(" \u2014 "),EY=a("a"),FRr=o("FlaxBartForQuestionAnswering"),TRr=o(" (BART model)"),MRr=l(),OC=a("li"),L7e=a("strong"),ERr=o("bert"),CRr=o(" \u2014 "),CY=a("a"),wRr=o("FlaxBertForQuestionAnswering"),ARr=o(" (BERT model)"),yRr=l(),VC=a("li"),x7e=a("strong"),LRr=o("big_bird"),xRr=o(" \u2014 "),wY=a("a"),$Rr=o("FlaxBigBirdForQuestionAnswering"),kRr=o(" (BigBird model)"),SRr=l(),XC=a("li"),$7e=a("strong"),RRr=o("distilbert"),BRr=o(" \u2014 "),AY=a("a"),PRr=o("FlaxDistilBertForQuestionAnswering"),IRr=o(" (DistilBERT model)"),qRr=l(),zC=a("li"),k7e=a("strong"),NRr=o("electra"),jRr=o(" \u2014 "),yY=a("a"),DRr=o("FlaxElectraForQuestionAnswering"),GRr=o(" (ELECTRA model)"),ORr=l(),QC=a("li"),S7e=a("strong"),VRr=o("mbart"),XRr=o(" \u2014 "),LY=a("a"),zRr=o("FlaxMBartForQuestionAnswering"),QRr=o(" (mBART model)"),WRr=l(),WC=a("li"),R7e=a("strong"),HRr=o("roberta"),URr=o(" \u2014 "),xY=a("a"),JRr=o("FlaxRobertaForQuestionAnswering"),YRr=o(" (RoBERTa model)"),KRr=l(),HC=a("li"),B7e=a("strong"),ZRr=o("roformer"),eBr=o(" \u2014 "),$Y=a("a"),oBr=o("FlaxRoFormerForQuestionAnswering"),rBr=o(" (RoFormer model)"),tBr=l(),UC=a("li"),P7e=a("strong"),aBr=o("xlm-roberta"),nBr=o(" \u2014 "),kY=a("a"),sBr=o("FlaxXLMRobertaForQuestionAnswering"),lBr=o(" (XLM-RoBERTa model)"),iBr=l(),F(JC.$$.fragment),Hqe=l(),Wc=a("h2"),YC=a("a"),I7e=a("span"),F(Rx.$$.fragment),dBr=l(),q7e=a("span"),cBr=o("FlaxAutoModelForTokenClassification"),Uqe=l(),br=a("div"),F(Bx.$$.fragment),fBr=l(),Hc=a("p"),mBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SY=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),RY=a("a"),pBr=o("from_config()"),uBr=o(` class
method.`),_Br=l(),Px=a("p"),bBr=o("This class cannot be instantiated directly using "),N7e=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),Qt=a("div"),F(Ix.$$.fragment),MBr=l(),j7e=a("p"),EBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CBr=l(),Uc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),ABr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),LBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(KC.$$.fragment),kBr=l(),Qr=a("div"),F(qx.$$.fragment),SBr=l(),G7e=a("p"),RBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BBr=l(),Fn=a("p"),PBr=o("The model class to instantiate is selected based on the "),O7e=a("code"),IBr=o("model_type"),qBr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),NBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),De=a("ul"),ZC=a("li"),z7e=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),PY=a("a"),zBr=o("FlaxAlbertForTokenClassification"),QBr=o(" (ALBERT model)"),WBr=l(),ew=a("li"),Q7e=a("strong"),HBr=o("bert"),UBr=o(" \u2014 "),IY=a("a"),JBr=o("FlaxBertForTokenClassification"),YBr=o(" (BERT model)"),KBr=l(),ow=a("li"),W7e=a("strong"),ZBr=o("big_bird"),ePr=o(" \u2014 "),qY=a("a"),oPr=o("FlaxBigBirdForTokenClassification"),rPr=o(" (BigBird model)"),tPr=l(),rw=a("li"),H7e=a("strong"),aPr=o("distilbert"),nPr=o(" \u2014 "),NY=a("a"),sPr=o("FlaxDistilBertForTokenClassification"),lPr=o(" (DistilBERT model)"),iPr=l(),tw=a("li"),U7e=a("strong"),dPr=o("electra"),cPr=o(" \u2014 "),jY=a("a"),fPr=o("FlaxElectraForTokenClassification"),mPr=o(" (ELECTRA model)"),gPr=l(),aw=a("li"),J7e=a("strong"),hPr=o("roberta"),pPr=o(" \u2014 "),DY=a("a"),uPr=o("FlaxRobertaForTokenClassification"),_Pr=o(" (RoBERTa model)"),bPr=l(),nw=a("li"),Y7e=a("strong"),vPr=o("roformer"),FPr=o(" \u2014 "),GY=a("a"),TPr=o("FlaxRoFormerForTokenClassification"),MPr=o(" (RoFormer model)"),EPr=l(),sw=a("li"),K7e=a("strong"),CPr=o("xlm-roberta"),wPr=o(" \u2014 "),OY=a("a"),APr=o("FlaxXLMRobertaForTokenClassification"),yPr=o(" (XLM-RoBERTa model)"),LPr=l(),F(lw.$$.fragment),Jqe=l(),Jc=a("h2"),iw=a("a"),Z7e=a("span"),F(Nx.$$.fragment),xPr=l(),eMe=a("span"),$Pr=o("FlaxAutoModelForMultipleChoice"),Yqe=l(),vr=a("div"),F(jx.$$.fragment),kPr=l(),Yc=a("p"),SPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VY=a("a"),RPr=o("from_pretrained()"),BPr=o(" class method or the "),XY=a("a"),PPr=o("from_config()"),IPr=o(` class
method.`),qPr=l(),Dx=a("p"),NPr=o("This class cannot be instantiated directly using "),oMe=a("code"),jPr=o("__init__()"),DPr=o(" (throws an error)."),GPr=l(),Wt=a("div"),F(Gx.$$.fragment),OPr=l(),rMe=a("p"),VPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XPr=l(),Kc=a("p"),zPr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),QPr=o("not"),WPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),HPr=o("from_pretrained()"),UPr=o(" to load the model weights."),JPr=l(),F(dw.$$.fragment),YPr=l(),Wr=a("div"),F(Ox.$$.fragment),KPr=l(),aMe=a("p"),ZPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eIr=l(),Tn=a("p"),oIr=o("The model class to instantiate is selected based on the "),nMe=a("code"),rIr=o("model_type"),tIr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(":"),iIr=l(),Ge=a("ul"),cw=a("li"),iMe=a("strong"),dIr=o("albert"),cIr=o(" \u2014 "),QY=a("a"),fIr=o("FlaxAlbertForMultipleChoice"),mIr=o(" (ALBERT model)"),gIr=l(),fw=a("li"),dMe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),WY=a("a"),uIr=o("FlaxBertForMultipleChoice"),_Ir=o(" (BERT model)"),bIr=l(),mw=a("li"),cMe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),HY=a("a"),TIr=o("FlaxBigBirdForMultipleChoice"),MIr=o(" (BigBird model)"),EIr=l(),gw=a("li"),fMe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),UY=a("a"),AIr=o("FlaxDistilBertForMultipleChoice"),yIr=o(" (DistilBERT model)"),LIr=l(),hw=a("li"),mMe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),JY=a("a"),kIr=o("FlaxElectraForMultipleChoice"),SIr=o(" (ELECTRA model)"),RIr=l(),pw=a("li"),gMe=a("strong"),BIr=o("roberta"),PIr=o(" \u2014 "),YY=a("a"),IIr=o("FlaxRobertaForMultipleChoice"),qIr=o(" (RoBERTa model)"),NIr=l(),uw=a("li"),hMe=a("strong"),jIr=o("roformer"),DIr=o(" \u2014 "),KY=a("a"),GIr=o("FlaxRoFormerForMultipleChoice"),OIr=o(" (RoFormer model)"),VIr=l(),_w=a("li"),pMe=a("strong"),XIr=o("xlm-roberta"),zIr=o(" \u2014 "),ZY=a("a"),QIr=o("FlaxXLMRobertaForMultipleChoice"),WIr=o(" (XLM-RoBERTa model)"),HIr=l(),F(bw.$$.fragment),Kqe=l(),Zc=a("h2"),vw=a("a"),uMe=a("span"),F(Vx.$$.fragment),UIr=l(),_Me=a("span"),JIr=o("FlaxAutoModelForNextSentencePrediction"),Zqe=l(),Fr=a("div"),F(Xx.$$.fragment),YIr=l(),ef=a("p"),KIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eK=a("a"),ZIr=o("from_pretrained()"),eqr=o(" class method or the "),oK=a("a"),oqr=o("from_config()"),rqr=o(` class
method.`),tqr=l(),zx=a("p"),aqr=o("This class cannot be instantiated directly using "),bMe=a("code"),nqr=o("__init__()"),sqr=o(" (throws an error)."),lqr=l(),Ht=a("div"),F(Qx.$$.fragment),iqr=l(),vMe=a("p"),dqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cqr=l(),of=a("p"),fqr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),mqr=o("not"),gqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),hqr=o("from_pretrained()"),pqr=o(" to load the model weights."),uqr=l(),F(Fw.$$.fragment),_qr=l(),Hr=a("div"),F(Wx.$$.fragment),bqr=l(),TMe=a("p"),vqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fqr=l(),Mn=a("p"),Tqr=o("The model class to instantiate is selected based on the "),MMe=a("code"),Mqr=o("model_type"),Eqr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),Cqr=o("pretrained_model_name_or_path"),wqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),Aqr=o("pretrained_model_name_or_path"),yqr=o(":"),Lqr=l(),wMe=a("ul"),Tw=a("li"),AMe=a("strong"),xqr=o("bert"),$qr=o(" \u2014 "),tK=a("a"),kqr=o("FlaxBertForNextSentencePrediction"),Sqr=o(" (BERT model)"),Rqr=l(),F(Mw.$$.fragment),eNe=l(),rf=a("h2"),Ew=a("a"),yMe=a("span"),F(Hx.$$.fragment),Bqr=l(),LMe=a("span"),Pqr=o("FlaxAutoModelForImageClassification"),oNe=l(),Tr=a("div"),F(Ux.$$.fragment),Iqr=l(),tf=a("p"),qqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=a("a"),Nqr=o("from_pretrained()"),jqr=o(" class method or the "),nK=a("a"),Dqr=o("from_config()"),Gqr=o(` class
method.`),Oqr=l(),Jx=a("p"),Vqr=o("This class cannot be instantiated directly using "),xMe=a("code"),Xqr=o("__init__()"),zqr=o(" (throws an error)."),Qqr=l(),Ut=a("div"),F(Yx.$$.fragment),Wqr=l(),$Me=a("p"),Hqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Uqr=l(),af=a("p"),Jqr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),Yqr=o("not"),Kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Zqr=o("from_pretrained()"),eNr=o(" to load the model weights."),oNr=l(),F(Cw.$$.fragment),rNr=l(),Ur=a("div"),F(Kx.$$.fragment),tNr=l(),SMe=a("p"),aNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nNr=l(),En=a("p"),sNr=o("The model class to instantiate is selected based on the "),RMe=a("code"),lNr=o("model_type"),iNr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),dNr=o("pretrained_model_name_or_path"),cNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),fNr=o("pretrained_model_name_or_path"),mNr=o(":"),gNr=l(),Zx=a("ul"),ww=a("li"),IMe=a("strong"),hNr=o("beit"),pNr=o(" \u2014 "),lK=a("a"),uNr=o("FlaxBeitForImageClassification"),_Nr=o(" (BEiT model)"),bNr=l(),Aw=a("li"),qMe=a("strong"),vNr=o("vit"),FNr=o(" \u2014 "),iK=a("a"),TNr=o("FlaxViTForImageClassification"),MNr=o(" (ViT model)"),ENr=l(),F(yw.$$.fragment),rNe=l(),nf=a("h2"),Lw=a("a"),NMe=a("span"),F(e9.$$.fragment),CNr=l(),jMe=a("span"),wNr=o("FlaxAutoModelForVision2Seq"),tNe=l(),Mr=a("div"),F(o9.$$.fragment),ANr=l(),sf=a("p"),yNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dK=a("a"),LNr=o("from_pretrained()"),xNr=o(" class method or the "),cK=a("a"),$Nr=o("from_config()"),kNr=o(` class
method.`),SNr=l(),r9=a("p"),RNr=o("This class cannot be instantiated directly using "),DMe=a("code"),BNr=o("__init__()"),PNr=o(" (throws an error)."),INr=l(),Jt=a("div"),F(t9.$$.fragment),qNr=l(),GMe=a("p"),NNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jNr=l(),lf=a("p"),DNr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),GNr=o("not"),ONr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),VNr=o("from_pretrained()"),XNr=o(" to load the model weights."),zNr=l(),F(xw.$$.fragment),QNr=l(),Jr=a("div"),F(a9.$$.fragment),WNr=l(),VMe=a("p"),HNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UNr=l(),Cn=a("p"),JNr=o("The model class to instantiate is selected based on the "),XMe=a("code"),YNr=o("model_type"),KNr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),ZNr=o("pretrained_model_name_or_path"),ejr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),ojr=o("pretrained_model_name_or_path"),rjr=o(":"),tjr=l(),WMe=a("ul"),$w=a("li"),HMe=a("strong"),ajr=o("vision-encoder-decoder"),njr=o(" \u2014 "),mK=a("a"),sjr=o("FlaxVisionEncoderDecoderModel"),ljr=o(" (Vision Encoder decoder model)"),ijr=l(),F(kw.$$.fragment),this.h()},l(f){const _=V0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var n9=s(p);m=n(n9,"A",{id:!0,class:!0,href:!0});var UMe=s(m);u=n(UMe,"SPAN",{});var JMe=s(u);T(d.$$.fragment,JMe),JMe.forEach(t),UMe.forEach(t),h=i(n9),Mo=n(n9,"SPAN",{});var YMe=s(Mo);li=r(YMe,"Auto Classes"),YMe.forEach(t),n9.forEach(t),mf=i(f),et=n(f,"P",{});var s9=s(et);ii=r(s9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(s9,"CODE",{});var KMe=s(di);J6=r(KMe,"from_pretrained()"),KMe.forEach(t),gf=r(s9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),s9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var ZMe=s(An);Y6=r(ZMe,"AutoConfig"),ZMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var e4e=s(Ln);K6=r(e4e,"AutoModel"),e4e.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var o4e=s(xn);Z6=r(o4e,"AutoTokenizer"),o4e.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var l9=s(Ae);_$=r(l9,"will create a model that is an instance of "),gi=n(l9,"A",{href:!0});var r4e=s(gi);b$=r(r4e,"BertModel"),r4e.forEach(t),v$=r(l9,"."),l9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var i9=s(Ea);F$=r(i9,"There is one class of "),pf=n(i9,"CODE",{});var t4e=s(pf);T$=r(t4e,"AutoModel"),t4e.forEach(t),mDe=r(i9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),i9.forEach(t),oIe=i(f),hi=n(f,"H2",{class:!0});var d9=s(hi);uf=n(d9,"A",{id:!0,class:!0,href:!0});var a4e=s(uf);see=n(a4e,"SPAN",{});var n4e=s(see);T(e0.$$.fragment,n4e),n4e.forEach(t),a4e.forEach(t),gDe=i(d9),lee=n(d9,"SPAN",{});var s4e=s(lee);hDe=r(s4e,"Extending the Auto Classes"),s4e.forEach(t),d9.forEach(t),rIe=i(f),$n=n(f,"P",{});var df=s($n);pDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),iee=n(df,"CODE",{});var l4e=s(iee);uDe=r(l4e,"NewModel"),l4e.forEach(t),_De=r(df,", make sure you have a "),dee=n(df,"CODE",{});var i4e=s(dee);bDe=r(i4e,"NewModelConfig"),i4e.forEach(t),vDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),tIe=i(f),T(o0.$$.fragment,f),aIe=i(f),M$=n(f,"P",{});var d4e=s(M$);FDe=r(d4e,"You will then be able to use the auto classes like you would usually do!"),d4e.forEach(t),nIe=i(f),T(_f.$$.fragment,f),sIe=i(f),pi=n(f,"H2",{class:!0});var c9=s(pi);bf=n(c9,"A",{id:!0,class:!0,href:!0});var c4e=s(bf);cee=n(c4e,"SPAN",{});var f4e=s(cee);T(r0.$$.fragment,f4e),f4e.forEach(t),c4e.forEach(t),TDe=i(c9),fee=n(c9,"SPAN",{});var m4e=s(fee);MDe=r(m4e,"AutoConfig"),m4e.forEach(t),c9.forEach(t),lIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(t0.$$.fragment,Kr),EDe=i(Kr),a0=n(Kr,"P",{});var f9=s(a0);CDe=r(f9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E$=n(f9,"A",{href:!0});var g4e=s(E$);wDe=r(g4e,"from_pretrained()"),g4e.forEach(t),ADe=r(f9," class method."),f9.forEach(t),yDe=i(Kr),n0=n(Kr,"P",{});var m9=s(n0);LDe=r(m9,"This class cannot be instantiated directly using "),mee=n(m9,"CODE",{});var h4e=s(mee);xDe=r(h4e,"__init__()"),h4e.forEach(t),$De=r(m9," (throws an error)."),m9.forEach(t),kDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(s0.$$.fragment,Zr),SDe=i(Zr),gee=n(Zr,"P",{});var p4e=s(gee);RDe=r(p4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),p4e.forEach(t),BDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);PDe=r(cf,"The configuration class to instantiate is selected based on the "),hee=n(cf,"CODE",{});var u4e=s(hee);IDe=r(u4e,"model_type"),u4e.forEach(t),qDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),pee=n(cf,"CODE",{});var _4e=s(pee);NDe=r(_4e,"pretrained_model_name_or_path"),_4e.forEach(t),jDe=r(cf,":"),cf.forEach(t),DDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var Sw=s(vf);uee=n(Sw,"STRONG",{});var b4e=s(uee);GDe=r(b4e,"albert"),b4e.forEach(t),ODe=r(Sw," \u2014 "),C$=n(Sw,"A",{href:!0});var v4e=s(C$);VDe=r(v4e,"AlbertConfig"),v4e.forEach(t),XDe=r(Sw," (ALBERT model)"),Sw.forEach(t),zDe=i(y),Ff=n(y,"LI",{});var Rw=s(Ff);_ee=n(Rw,"STRONG",{});var F4e=s(_ee);QDe=r(F4e,"bart"),F4e.forEach(t),WDe=r(Rw," \u2014 "),w$=n(Rw,"A",{href:!0});var T4e=s(w$);HDe=r(T4e,"BartConfig"),T4e.forEach(t),UDe=r(Rw," (BART model)"),Rw.forEach(t),JDe=i(y),Tf=n(y,"LI",{});var Bw=s(Tf);bee=n(Bw,"STRONG",{});var M4e=s(bee);YDe=r(M4e,"beit"),M4e.forEach(t),KDe=r(Bw," \u2014 "),A$=n(Bw,"A",{href:!0});var E4e=s(A$);ZDe=r(E4e,"BeitConfig"),E4e.forEach(t),eGe=r(Bw," (BEiT model)"),Bw.forEach(t),oGe=i(y),Mf=n(y,"LI",{});var Pw=s(Mf);vee=n(Pw,"STRONG",{});var C4e=s(vee);rGe=r(C4e,"bert"),C4e.forEach(t),tGe=r(Pw," \u2014 "),y$=n(Pw,"A",{href:!0});var w4e=s(y$);aGe=r(w4e,"BertConfig"),w4e.forEach(t),nGe=r(Pw," (BERT model)"),Pw.forEach(t),sGe=i(y),Ef=n(y,"LI",{});var Iw=s(Ef);Fee=n(Iw,"STRONG",{});var A4e=s(Fee);lGe=r(A4e,"bert-generation"),A4e.forEach(t),iGe=r(Iw," \u2014 "),L$=n(Iw,"A",{href:!0});var y4e=s(L$);dGe=r(y4e,"BertGenerationConfig"),y4e.forEach(t),cGe=r(Iw," (Bert Generation model)"),Iw.forEach(t),fGe=i(y),Cf=n(y,"LI",{});var qw=s(Cf);Tee=n(qw,"STRONG",{});var L4e=s(Tee);mGe=r(L4e,"big_bird"),L4e.forEach(t),gGe=r(qw," \u2014 "),x$=n(qw,"A",{href:!0});var x4e=s(x$);hGe=r(x4e,"BigBirdConfig"),x4e.forEach(t),pGe=r(qw," (BigBird model)"),qw.forEach(t),uGe=i(y),wf=n(y,"LI",{});var Nw=s(wf);Mee=n(Nw,"STRONG",{});var $4e=s(Mee);_Ge=r($4e,"bigbird_pegasus"),$4e.forEach(t),bGe=r(Nw," \u2014 "),$$=n(Nw,"A",{href:!0});var k4e=s($$);vGe=r(k4e,"BigBirdPegasusConfig"),k4e.forEach(t),FGe=r(Nw," (BigBirdPegasus model)"),Nw.forEach(t),TGe=i(y),Af=n(y,"LI",{});var jw=s(Af);Eee=n(jw,"STRONG",{});var S4e=s(Eee);MGe=r(S4e,"blenderbot"),S4e.forEach(t),EGe=r(jw," \u2014 "),k$=n(jw,"A",{href:!0});var R4e=s(k$);CGe=r(R4e,"BlenderbotConfig"),R4e.forEach(t),wGe=r(jw," (Blenderbot model)"),jw.forEach(t),AGe=i(y),yf=n(y,"LI",{});var Dw=s(yf);Cee=n(Dw,"STRONG",{});var B4e=s(Cee);yGe=r(B4e,"blenderbot-small"),B4e.forEach(t),LGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var P4e=s(S$);xGe=r(P4e,"BlenderbotSmallConfig"),P4e.forEach(t),$Ge=r(Dw," (BlenderbotSmall model)"),Dw.forEach(t),kGe=i(y),Lf=n(y,"LI",{});var Gw=s(Lf);wee=n(Gw,"STRONG",{});var I4e=s(wee);SGe=r(I4e,"camembert"),I4e.forEach(t),RGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var q4e=s(R$);BGe=r(q4e,"CamembertConfig"),q4e.forEach(t),PGe=r(Gw," (CamemBERT model)"),Gw.forEach(t),IGe=i(y),xf=n(y,"LI",{});var Ow=s(xf);Aee=n(Ow,"STRONG",{});var N4e=s(Aee);qGe=r(N4e,"canine"),N4e.forEach(t),NGe=r(Ow," \u2014 "),B$=n(Ow,"A",{href:!0});var j4e=s(B$);jGe=r(j4e,"CanineConfig"),j4e.forEach(t),DGe=r(Ow," (Canine model)"),Ow.forEach(t),GGe=i(y),$f=n(y,"LI",{});var Vw=s($f);yee=n(Vw,"STRONG",{});var D4e=s(yee);OGe=r(D4e,"clip"),D4e.forEach(t),VGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var G4e=s(P$);XGe=r(G4e,"CLIPConfig"),G4e.forEach(t),zGe=r(Vw," (CLIP model)"),Vw.forEach(t),QGe=i(y),kf=n(y,"LI",{});var Xw=s(kf);Lee=n(Xw,"STRONG",{});var O4e=s(Lee);WGe=r(O4e,"convbert"),O4e.forEach(t),HGe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var V4e=s(I$);UGe=r(V4e,"ConvBertConfig"),V4e.forEach(t),JGe=r(Xw," (ConvBERT model)"),Xw.forEach(t),YGe=i(y),Sf=n(y,"LI",{});var zw=s(Sf);xee=n(zw,"STRONG",{});var X4e=s(xee);KGe=r(X4e,"convnext"),X4e.forEach(t),ZGe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var z4e=s(q$);eOe=r(z4e,"ConvNextConfig"),z4e.forEach(t),oOe=r(zw," (ConvNext model)"),zw.forEach(t),rOe=i(y),Rf=n(y,"LI",{});var Qw=s(Rf);$ee=n(Qw,"STRONG",{});var Q4e=s($ee);tOe=r(Q4e,"ctrl"),Q4e.forEach(t),aOe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var W4e=s(N$);nOe=r(W4e,"CTRLConfig"),W4e.forEach(t),sOe=r(Qw," (CTRL model)"),Qw.forEach(t),lOe=i(y),Bf=n(y,"LI",{});var Ww=s(Bf);kee=n(Ww,"STRONG",{});var H4e=s(kee);iOe=r(H4e,"cvt"),H4e.forEach(t),dOe=r(Ww," \u2014 "),j$=n(Ww,"A",{href:!0});var U4e=s(j$);cOe=r(U4e,"CvtConfig"),U4e.forEach(t),fOe=r(Ww," (CvT model)"),Ww.forEach(t),mOe=i(y),Pf=n(y,"LI",{});var Hw=s(Pf);See=n(Hw,"STRONG",{});var J4e=s(See);gOe=r(J4e,"data2vec-audio"),J4e.forEach(t),hOe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var Y4e=s(D$);pOe=r(Y4e,"Data2VecAudioConfig"),Y4e.forEach(t),uOe=r(Hw," (Data2VecAudio model)"),Hw.forEach(t),_Oe=i(y),If=n(y,"LI",{});var Uw=s(If);Ree=n(Uw,"STRONG",{});var K4e=s(Ree);bOe=r(K4e,"data2vec-text"),K4e.forEach(t),vOe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var Z4e=s(G$);FOe=r(Z4e,"Data2VecTextConfig"),Z4e.forEach(t),TOe=r(Uw," (Data2VecText model)"),Uw.forEach(t),MOe=i(y),qf=n(y,"LI",{});var Jw=s(qf);Bee=n(Jw,"STRONG",{});var eEe=s(Bee);EOe=r(eEe,"data2vec-vision"),eEe.forEach(t),COe=r(Jw," \u2014 "),O$=n(Jw,"A",{href:!0});var oEe=s(O$);wOe=r(oEe,"Data2VecVisionConfig"),oEe.forEach(t),AOe=r(Jw," (Data2VecVision model)"),Jw.forEach(t),yOe=i(y),Nf=n(y,"LI",{});var Yw=s(Nf);Pee=n(Yw,"STRONG",{});var rEe=s(Pee);LOe=r(rEe,"deberta"),rEe.forEach(t),xOe=r(Yw," \u2014 "),V$=n(Yw,"A",{href:!0});var tEe=s(V$);$Oe=r(tEe,"DebertaConfig"),tEe.forEach(t),kOe=r(Yw," (DeBERTa model)"),Yw.forEach(t),SOe=i(y),jf=n(y,"LI",{});var Kw=s(jf);Iee=n(Kw,"STRONG",{});var aEe=s(Iee);ROe=r(aEe,"deberta-v2"),aEe.forEach(t),BOe=r(Kw," \u2014 "),X$=n(Kw,"A",{href:!0});var nEe=s(X$);POe=r(nEe,"DebertaV2Config"),nEe.forEach(t),IOe=r(Kw," (DeBERTa-v2 model)"),Kw.forEach(t),qOe=i(y),Df=n(y,"LI",{});var Zw=s(Df);qee=n(Zw,"STRONG",{});var sEe=s(qee);NOe=r(sEe,"decision_transformer"),sEe.forEach(t),jOe=r(Zw," \u2014 "),z$=n(Zw,"A",{href:!0});var lEe=s(z$);DOe=r(lEe,"DecisionTransformerConfig"),lEe.forEach(t),GOe=r(Zw," (Decision Transformer model)"),Zw.forEach(t),OOe=i(y),Gf=n(y,"LI",{});var eA=s(Gf);Nee=n(eA,"STRONG",{});var iEe=s(Nee);VOe=r(iEe,"deit"),iEe.forEach(t),XOe=r(eA," \u2014 "),Q$=n(eA,"A",{href:!0});var cjr=s(Q$);zOe=r(cjr,"DeiTConfig"),cjr.forEach(t),QOe=r(eA," (DeiT model)"),eA.forEach(t),WOe=i(y),Of=n(y,"LI",{});var dEe=s(Of);jee=n(dEe,"STRONG",{});var fjr=s(jee);HOe=r(fjr,"detr"),fjr.forEach(t),UOe=r(dEe," \u2014 "),W$=n(dEe,"A",{href:!0});var mjr=s(W$);JOe=r(mjr,"DetrConfig"),mjr.forEach(t),YOe=r(dEe," (DETR model)"),dEe.forEach(t),KOe=i(y),Vf=n(y,"LI",{});var cEe=s(Vf);Dee=n(cEe,"STRONG",{});var gjr=s(Dee);ZOe=r(gjr,"distilbert"),gjr.forEach(t),eVe=r(cEe," \u2014 "),H$=n(cEe,"A",{href:!0});var hjr=s(H$);oVe=r(hjr,"DistilBertConfig"),hjr.forEach(t),rVe=r(cEe," (DistilBERT model)"),cEe.forEach(t),tVe=i(y),Xf=n(y,"LI",{});var fEe=s(Xf);Gee=n(fEe,"STRONG",{});var pjr=s(Gee);aVe=r(pjr,"dpr"),pjr.forEach(t),nVe=r(fEe," \u2014 "),U$=n(fEe,"A",{href:!0});var ujr=s(U$);sVe=r(ujr,"DPRConfig"),ujr.forEach(t),lVe=r(fEe," (DPR model)"),fEe.forEach(t),iVe=i(y),zf=n(y,"LI",{});var mEe=s(zf);Oee=n(mEe,"STRONG",{});var _jr=s(Oee);dVe=r(_jr,"dpt"),_jr.forEach(t),cVe=r(mEe," \u2014 "),J$=n(mEe,"A",{href:!0});var bjr=s(J$);fVe=r(bjr,"DPTConfig"),bjr.forEach(t),mVe=r(mEe," (DPT model)"),mEe.forEach(t),gVe=i(y),Qf=n(y,"LI",{});var gEe=s(Qf);Vee=n(gEe,"STRONG",{});var vjr=s(Vee);hVe=r(vjr,"electra"),vjr.forEach(t),pVe=r(gEe," \u2014 "),Y$=n(gEe,"A",{href:!0});var Fjr=s(Y$);uVe=r(Fjr,"ElectraConfig"),Fjr.forEach(t),_Ve=r(gEe," (ELECTRA model)"),gEe.forEach(t),bVe=i(y),Wf=n(y,"LI",{});var hEe=s(Wf);Xee=n(hEe,"STRONG",{});var Tjr=s(Xee);vVe=r(Tjr,"encoder-decoder"),Tjr.forEach(t),FVe=r(hEe," \u2014 "),K$=n(hEe,"A",{href:!0});var Mjr=s(K$);TVe=r(Mjr,"EncoderDecoderConfig"),Mjr.forEach(t),MVe=r(hEe," (Encoder decoder model)"),hEe.forEach(t),EVe=i(y),Hf=n(y,"LI",{});var pEe=s(Hf);zee=n(pEe,"STRONG",{});var Ejr=s(zee);CVe=r(Ejr,"flaubert"),Ejr.forEach(t),wVe=r(pEe," \u2014 "),Z$=n(pEe,"A",{href:!0});var Cjr=s(Z$);AVe=r(Cjr,"FlaubertConfig"),Cjr.forEach(t),yVe=r(pEe," (FlauBERT model)"),pEe.forEach(t),LVe=i(y),Uf=n(y,"LI",{});var uEe=s(Uf);Qee=n(uEe,"STRONG",{});var wjr=s(Qee);xVe=r(wjr,"flava"),wjr.forEach(t),$Ve=r(uEe," \u2014 "),ek=n(uEe,"A",{href:!0});var Ajr=s(ek);kVe=r(Ajr,"FlavaConfig"),Ajr.forEach(t),SVe=r(uEe," (Flava model)"),uEe.forEach(t),RVe=i(y),Jf=n(y,"LI",{});var _Ee=s(Jf);Wee=n(_Ee,"STRONG",{});var yjr=s(Wee);BVe=r(yjr,"fnet"),yjr.forEach(t),PVe=r(_Ee," \u2014 "),ok=n(_Ee,"A",{href:!0});var Ljr=s(ok);IVe=r(Ljr,"FNetConfig"),Ljr.forEach(t),qVe=r(_Ee," (FNet model)"),_Ee.forEach(t),NVe=i(y),Yf=n(y,"LI",{});var bEe=s(Yf);Hee=n(bEe,"STRONG",{});var xjr=s(Hee);jVe=r(xjr,"fsmt"),xjr.forEach(t),DVe=r(bEe," \u2014 "),rk=n(bEe,"A",{href:!0});var $jr=s(rk);GVe=r($jr,"FSMTConfig"),$jr.forEach(t),OVe=r(bEe," (FairSeq Machine-Translation model)"),bEe.forEach(t),VVe=i(y),Kf=n(y,"LI",{});var vEe=s(Kf);Uee=n(vEe,"STRONG",{});var kjr=s(Uee);XVe=r(kjr,"funnel"),kjr.forEach(t),zVe=r(vEe," \u2014 "),tk=n(vEe,"A",{href:!0});var Sjr=s(tk);QVe=r(Sjr,"FunnelConfig"),Sjr.forEach(t),WVe=r(vEe," (Funnel Transformer model)"),vEe.forEach(t),HVe=i(y),Zf=n(y,"LI",{});var FEe=s(Zf);Jee=n(FEe,"STRONG",{});var Rjr=s(Jee);UVe=r(Rjr,"glpn"),Rjr.forEach(t),JVe=r(FEe," \u2014 "),ak=n(FEe,"A",{href:!0});var Bjr=s(ak);YVe=r(Bjr,"GLPNConfig"),Bjr.forEach(t),KVe=r(FEe," (GLPN model)"),FEe.forEach(t),ZVe=i(y),em=n(y,"LI",{});var TEe=s(em);Yee=n(TEe,"STRONG",{});var Pjr=s(Yee);eXe=r(Pjr,"gpt2"),Pjr.forEach(t),oXe=r(TEe," \u2014 "),nk=n(TEe,"A",{href:!0});var Ijr=s(nk);rXe=r(Ijr,"GPT2Config"),Ijr.forEach(t),tXe=r(TEe," (OpenAI GPT-2 model)"),TEe.forEach(t),aXe=i(y),om=n(y,"LI",{});var MEe=s(om);Kee=n(MEe,"STRONG",{});var qjr=s(Kee);nXe=r(qjr,"gpt_neo"),qjr.forEach(t),sXe=r(MEe," \u2014 "),sk=n(MEe,"A",{href:!0});var Njr=s(sk);lXe=r(Njr,"GPTNeoConfig"),Njr.forEach(t),iXe=r(MEe," (GPT Neo model)"),MEe.forEach(t),dXe=i(y),rm=n(y,"LI",{});var EEe=s(rm);Zee=n(EEe,"STRONG",{});var jjr=s(Zee);cXe=r(jjr,"gptj"),jjr.forEach(t),fXe=r(EEe," \u2014 "),lk=n(EEe,"A",{href:!0});var Djr=s(lk);mXe=r(Djr,"GPTJConfig"),Djr.forEach(t),gXe=r(EEe," (GPT-J model)"),EEe.forEach(t),hXe=i(y),tm=n(y,"LI",{});var CEe=s(tm);eoe=n(CEe,"STRONG",{});var Gjr=s(eoe);pXe=r(Gjr,"hubert"),Gjr.forEach(t),uXe=r(CEe," \u2014 "),ik=n(CEe,"A",{href:!0});var Ojr=s(ik);_Xe=r(Ojr,"HubertConfig"),Ojr.forEach(t),bXe=r(CEe," (Hubert model)"),CEe.forEach(t),vXe=i(y),am=n(y,"LI",{});var wEe=s(am);ooe=n(wEe,"STRONG",{});var Vjr=s(ooe);FXe=r(Vjr,"ibert"),Vjr.forEach(t),TXe=r(wEe," \u2014 "),dk=n(wEe,"A",{href:!0});var Xjr=s(dk);MXe=r(Xjr,"IBertConfig"),Xjr.forEach(t),EXe=r(wEe," (I-BERT model)"),wEe.forEach(t),CXe=i(y),nm=n(y,"LI",{});var AEe=s(nm);roe=n(AEe,"STRONG",{});var zjr=s(roe);wXe=r(zjr,"imagegpt"),zjr.forEach(t),AXe=r(AEe," \u2014 "),ck=n(AEe,"A",{href:!0});var Qjr=s(ck);yXe=r(Qjr,"ImageGPTConfig"),Qjr.forEach(t),LXe=r(AEe," (ImageGPT model)"),AEe.forEach(t),xXe=i(y),sm=n(y,"LI",{});var yEe=s(sm);toe=n(yEe,"STRONG",{});var Wjr=s(toe);$Xe=r(Wjr,"layoutlm"),Wjr.forEach(t),kXe=r(yEe," \u2014 "),fk=n(yEe,"A",{href:!0});var Hjr=s(fk);SXe=r(Hjr,"LayoutLMConfig"),Hjr.forEach(t),RXe=r(yEe," (LayoutLM model)"),yEe.forEach(t),BXe=i(y),lm=n(y,"LI",{});var LEe=s(lm);aoe=n(LEe,"STRONG",{});var Ujr=s(aoe);PXe=r(Ujr,"layoutlmv2"),Ujr.forEach(t),IXe=r(LEe," \u2014 "),mk=n(LEe,"A",{href:!0});var Jjr=s(mk);qXe=r(Jjr,"LayoutLMv2Config"),Jjr.forEach(t),NXe=r(LEe," (LayoutLMv2 model)"),LEe.forEach(t),jXe=i(y),im=n(y,"LI",{});var xEe=s(im);noe=n(xEe,"STRONG",{});var Yjr=s(noe);DXe=r(Yjr,"led"),Yjr.forEach(t),GXe=r(xEe," \u2014 "),gk=n(xEe,"A",{href:!0});var Kjr=s(gk);OXe=r(Kjr,"LEDConfig"),Kjr.forEach(t),VXe=r(xEe," (LED model)"),xEe.forEach(t),XXe=i(y),dm=n(y,"LI",{});var $Ee=s(dm);soe=n($Ee,"STRONG",{});var Zjr=s(soe);zXe=r(Zjr,"longformer"),Zjr.forEach(t),QXe=r($Ee," \u2014 "),hk=n($Ee,"A",{href:!0});var eDr=s(hk);WXe=r(eDr,"LongformerConfig"),eDr.forEach(t),HXe=r($Ee," (Longformer model)"),$Ee.forEach(t),UXe=i(y),cm=n(y,"LI",{});var kEe=s(cm);loe=n(kEe,"STRONG",{});var oDr=s(loe);JXe=r(oDr,"luke"),oDr.forEach(t),YXe=r(kEe," \u2014 "),pk=n(kEe,"A",{href:!0});var rDr=s(pk);KXe=r(rDr,"LukeConfig"),rDr.forEach(t),ZXe=r(kEe," (LUKE model)"),kEe.forEach(t),eze=i(y),fm=n(y,"LI",{});var SEe=s(fm);ioe=n(SEe,"STRONG",{});var tDr=s(ioe);oze=r(tDr,"lxmert"),tDr.forEach(t),rze=r(SEe," \u2014 "),uk=n(SEe,"A",{href:!0});var aDr=s(uk);tze=r(aDr,"LxmertConfig"),aDr.forEach(t),aze=r(SEe," (LXMERT model)"),SEe.forEach(t),nze=i(y),mm=n(y,"LI",{});var REe=s(mm);doe=n(REe,"STRONG",{});var nDr=s(doe);sze=r(nDr,"m2m_100"),nDr.forEach(t),lze=r(REe," \u2014 "),_k=n(REe,"A",{href:!0});var sDr=s(_k);ize=r(sDr,"M2M100Config"),sDr.forEach(t),dze=r(REe," (M2M100 model)"),REe.forEach(t),cze=i(y),gm=n(y,"LI",{});var BEe=s(gm);coe=n(BEe,"STRONG",{});var lDr=s(coe);fze=r(lDr,"marian"),lDr.forEach(t),mze=r(BEe," \u2014 "),bk=n(BEe,"A",{href:!0});var iDr=s(bk);gze=r(iDr,"MarianConfig"),iDr.forEach(t),hze=r(BEe," (Marian model)"),BEe.forEach(t),pze=i(y),hm=n(y,"LI",{});var PEe=s(hm);foe=n(PEe,"STRONG",{});var dDr=s(foe);uze=r(dDr,"maskformer"),dDr.forEach(t),_ze=r(PEe," \u2014 "),vk=n(PEe,"A",{href:!0});var cDr=s(vk);bze=r(cDr,"MaskFormerConfig"),cDr.forEach(t),vze=r(PEe," (MaskFormer model)"),PEe.forEach(t),Fze=i(y),pm=n(y,"LI",{});var IEe=s(pm);moe=n(IEe,"STRONG",{});var fDr=s(moe);Tze=r(fDr,"mbart"),fDr.forEach(t),Mze=r(IEe," \u2014 "),Fk=n(IEe,"A",{href:!0});var mDr=s(Fk);Eze=r(mDr,"MBartConfig"),mDr.forEach(t),Cze=r(IEe," (mBART model)"),IEe.forEach(t),wze=i(y),um=n(y,"LI",{});var qEe=s(um);goe=n(qEe,"STRONG",{});var gDr=s(goe);Aze=r(gDr,"megatron-bert"),gDr.forEach(t),yze=r(qEe," \u2014 "),Tk=n(qEe,"A",{href:!0});var hDr=s(Tk);Lze=r(hDr,"MegatronBertConfig"),hDr.forEach(t),xze=r(qEe," (MegatronBert model)"),qEe.forEach(t),$ze=i(y),_m=n(y,"LI",{});var NEe=s(_m);hoe=n(NEe,"STRONG",{});var pDr=s(hoe);kze=r(pDr,"mobilebert"),pDr.forEach(t),Sze=r(NEe," \u2014 "),Mk=n(NEe,"A",{href:!0});var uDr=s(Mk);Rze=r(uDr,"MobileBertConfig"),uDr.forEach(t),Bze=r(NEe," (MobileBERT model)"),NEe.forEach(t),Pze=i(y),bm=n(y,"LI",{});var jEe=s(bm);poe=n(jEe,"STRONG",{});var _Dr=s(poe);Ize=r(_Dr,"mpnet"),_Dr.forEach(t),qze=r(jEe," \u2014 "),Ek=n(jEe,"A",{href:!0});var bDr=s(Ek);Nze=r(bDr,"MPNetConfig"),bDr.forEach(t),jze=r(jEe," (MPNet model)"),jEe.forEach(t),Dze=i(y),vm=n(y,"LI",{});var DEe=s(vm);uoe=n(DEe,"STRONG",{});var vDr=s(uoe);Gze=r(vDr,"mt5"),vDr.forEach(t),Oze=r(DEe," \u2014 "),Ck=n(DEe,"A",{href:!0});var FDr=s(Ck);Vze=r(FDr,"MT5Config"),FDr.forEach(t),Xze=r(DEe," (mT5 model)"),DEe.forEach(t),zze=i(y),Fm=n(y,"LI",{});var GEe=s(Fm);_oe=n(GEe,"STRONG",{});var TDr=s(_oe);Qze=r(TDr,"nystromformer"),TDr.forEach(t),Wze=r(GEe," \u2014 "),wk=n(GEe,"A",{href:!0});var MDr=s(wk);Hze=r(MDr,"NystromformerConfig"),MDr.forEach(t),Uze=r(GEe," (Nystromformer model)"),GEe.forEach(t),Jze=i(y),Tm=n(y,"LI",{});var OEe=s(Tm);boe=n(OEe,"STRONG",{});var EDr=s(boe);Yze=r(EDr,"openai-gpt"),EDr.forEach(t),Kze=r(OEe," \u2014 "),Ak=n(OEe,"A",{href:!0});var CDr=s(Ak);Zze=r(CDr,"OpenAIGPTConfig"),CDr.forEach(t),eQe=r(OEe," (OpenAI GPT model)"),OEe.forEach(t),oQe=i(y),Mm=n(y,"LI",{});var VEe=s(Mm);voe=n(VEe,"STRONG",{});var wDr=s(voe);rQe=r(wDr,"opt"),wDr.forEach(t),tQe=r(VEe," \u2014 "),yk=n(VEe,"A",{href:!0});var ADr=s(yk);aQe=r(ADr,"OPTConfig"),ADr.forEach(t),nQe=r(VEe," (OPT model)"),VEe.forEach(t),sQe=i(y),Em=n(y,"LI",{});var XEe=s(Em);Foe=n(XEe,"STRONG",{});var yDr=s(Foe);lQe=r(yDr,"pegasus"),yDr.forEach(t),iQe=r(XEe," \u2014 "),Lk=n(XEe,"A",{href:!0});var LDr=s(Lk);dQe=r(LDr,"PegasusConfig"),LDr.forEach(t),cQe=r(XEe," (Pegasus model)"),XEe.forEach(t),fQe=i(y),Cm=n(y,"LI",{});var zEe=s(Cm);Toe=n(zEe,"STRONG",{});var xDr=s(Toe);mQe=r(xDr,"perceiver"),xDr.forEach(t),gQe=r(zEe," \u2014 "),xk=n(zEe,"A",{href:!0});var $Dr=s(xk);hQe=r($Dr,"PerceiverConfig"),$Dr.forEach(t),pQe=r(zEe," (Perceiver model)"),zEe.forEach(t),uQe=i(y),wm=n(y,"LI",{});var QEe=s(wm);Moe=n(QEe,"STRONG",{});var kDr=s(Moe);_Qe=r(kDr,"plbart"),kDr.forEach(t),bQe=r(QEe," \u2014 "),$k=n(QEe,"A",{href:!0});var SDr=s($k);vQe=r(SDr,"PLBartConfig"),SDr.forEach(t),FQe=r(QEe," (PLBart model)"),QEe.forEach(t),TQe=i(y),Am=n(y,"LI",{});var WEe=s(Am);Eoe=n(WEe,"STRONG",{});var RDr=s(Eoe);MQe=r(RDr,"poolformer"),RDr.forEach(t),EQe=r(WEe," \u2014 "),kk=n(WEe,"A",{href:!0});var BDr=s(kk);CQe=r(BDr,"PoolFormerConfig"),BDr.forEach(t),wQe=r(WEe," (PoolFormer model)"),WEe.forEach(t),AQe=i(y),ym=n(y,"LI",{});var HEe=s(ym);Coe=n(HEe,"STRONG",{});var PDr=s(Coe);yQe=r(PDr,"prophetnet"),PDr.forEach(t),LQe=r(HEe," \u2014 "),Sk=n(HEe,"A",{href:!0});var IDr=s(Sk);xQe=r(IDr,"ProphetNetConfig"),IDr.forEach(t),$Qe=r(HEe," (ProphetNet model)"),HEe.forEach(t),kQe=i(y),Lm=n(y,"LI",{});var UEe=s(Lm);woe=n(UEe,"STRONG",{});var qDr=s(woe);SQe=r(qDr,"qdqbert"),qDr.forEach(t),RQe=r(UEe," \u2014 "),Rk=n(UEe,"A",{href:!0});var NDr=s(Rk);BQe=r(NDr,"QDQBertConfig"),NDr.forEach(t),PQe=r(UEe," (QDQBert model)"),UEe.forEach(t),IQe=i(y),xm=n(y,"LI",{});var JEe=s(xm);Aoe=n(JEe,"STRONG",{});var jDr=s(Aoe);qQe=r(jDr,"rag"),jDr.forEach(t),NQe=r(JEe," \u2014 "),Bk=n(JEe,"A",{href:!0});var DDr=s(Bk);jQe=r(DDr,"RagConfig"),DDr.forEach(t),DQe=r(JEe," (RAG model)"),JEe.forEach(t),GQe=i(y),$m=n(y,"LI",{});var YEe=s($m);yoe=n(YEe,"STRONG",{});var GDr=s(yoe);OQe=r(GDr,"realm"),GDr.forEach(t),VQe=r(YEe," \u2014 "),Pk=n(YEe,"A",{href:!0});var ODr=s(Pk);XQe=r(ODr,"RealmConfig"),ODr.forEach(t),zQe=r(YEe," (Realm model)"),YEe.forEach(t),QQe=i(y),km=n(y,"LI",{});var KEe=s(km);Loe=n(KEe,"STRONG",{});var VDr=s(Loe);WQe=r(VDr,"reformer"),VDr.forEach(t),HQe=r(KEe," \u2014 "),Ik=n(KEe,"A",{href:!0});var XDr=s(Ik);UQe=r(XDr,"ReformerConfig"),XDr.forEach(t),JQe=r(KEe," (Reformer model)"),KEe.forEach(t),YQe=i(y),Sm=n(y,"LI",{});var ZEe=s(Sm);xoe=n(ZEe,"STRONG",{});var zDr=s(xoe);KQe=r(zDr,"regnet"),zDr.forEach(t),ZQe=r(ZEe," \u2014 "),qk=n(ZEe,"A",{href:!0});var QDr=s(qk);eWe=r(QDr,"RegNetConfig"),QDr.forEach(t),oWe=r(ZEe," (RegNet model)"),ZEe.forEach(t),rWe=i(y),Rm=n(y,"LI",{});var eCe=s(Rm);$oe=n(eCe,"STRONG",{});var WDr=s($oe);tWe=r(WDr,"rembert"),WDr.forEach(t),aWe=r(eCe," \u2014 "),Nk=n(eCe,"A",{href:!0});var HDr=s(Nk);nWe=r(HDr,"RemBertConfig"),HDr.forEach(t),sWe=r(eCe," (RemBERT model)"),eCe.forEach(t),lWe=i(y),Bm=n(y,"LI",{});var oCe=s(Bm);koe=n(oCe,"STRONG",{});var UDr=s(koe);iWe=r(UDr,"resnet"),UDr.forEach(t),dWe=r(oCe," \u2014 "),jk=n(oCe,"A",{href:!0});var JDr=s(jk);cWe=r(JDr,"ResNetConfig"),JDr.forEach(t),fWe=r(oCe," (ResNet model)"),oCe.forEach(t),mWe=i(y),Pm=n(y,"LI",{});var rCe=s(Pm);Soe=n(rCe,"STRONG",{});var YDr=s(Soe);gWe=r(YDr,"retribert"),YDr.forEach(t),hWe=r(rCe," \u2014 "),Dk=n(rCe,"A",{href:!0});var KDr=s(Dk);pWe=r(KDr,"RetriBertConfig"),KDr.forEach(t),uWe=r(rCe," (RetriBERT model)"),rCe.forEach(t),_We=i(y),Im=n(y,"LI",{});var tCe=s(Im);Roe=n(tCe,"STRONG",{});var ZDr=s(Roe);bWe=r(ZDr,"roberta"),ZDr.forEach(t),vWe=r(tCe," \u2014 "),Gk=n(tCe,"A",{href:!0});var eGr=s(Gk);FWe=r(eGr,"RobertaConfig"),eGr.forEach(t),TWe=r(tCe," (RoBERTa model)"),tCe.forEach(t),MWe=i(y),qm=n(y,"LI",{});var aCe=s(qm);Boe=n(aCe,"STRONG",{});var oGr=s(Boe);EWe=r(oGr,"roformer"),oGr.forEach(t),CWe=r(aCe," \u2014 "),Ok=n(aCe,"A",{href:!0});var rGr=s(Ok);wWe=r(rGr,"RoFormerConfig"),rGr.forEach(t),AWe=r(aCe," (RoFormer model)"),aCe.forEach(t),yWe=i(y),Nm=n(y,"LI",{});var nCe=s(Nm);Poe=n(nCe,"STRONG",{});var tGr=s(Poe);LWe=r(tGr,"segformer"),tGr.forEach(t),xWe=r(nCe," \u2014 "),Vk=n(nCe,"A",{href:!0});var aGr=s(Vk);$We=r(aGr,"SegformerConfig"),aGr.forEach(t),kWe=r(nCe," (SegFormer model)"),nCe.forEach(t),SWe=i(y),jm=n(y,"LI",{});var sCe=s(jm);Ioe=n(sCe,"STRONG",{});var nGr=s(Ioe);RWe=r(nGr,"sew"),nGr.forEach(t),BWe=r(sCe," \u2014 "),Xk=n(sCe,"A",{href:!0});var sGr=s(Xk);PWe=r(sGr,"SEWConfig"),sGr.forEach(t),IWe=r(sCe," (SEW model)"),sCe.forEach(t),qWe=i(y),Dm=n(y,"LI",{});var lCe=s(Dm);qoe=n(lCe,"STRONG",{});var lGr=s(qoe);NWe=r(lGr,"sew-d"),lGr.forEach(t),jWe=r(lCe," \u2014 "),zk=n(lCe,"A",{href:!0});var iGr=s(zk);DWe=r(iGr,"SEWDConfig"),iGr.forEach(t),GWe=r(lCe," (SEW-D model)"),lCe.forEach(t),OWe=i(y),Gm=n(y,"LI",{});var iCe=s(Gm);Noe=n(iCe,"STRONG",{});var dGr=s(Noe);VWe=r(dGr,"speech-encoder-decoder"),dGr.forEach(t),XWe=r(iCe," \u2014 "),Qk=n(iCe,"A",{href:!0});var cGr=s(Qk);zWe=r(cGr,"SpeechEncoderDecoderConfig"),cGr.forEach(t),QWe=r(iCe," (Speech Encoder decoder model)"),iCe.forEach(t),WWe=i(y),Om=n(y,"LI",{});var dCe=s(Om);joe=n(dCe,"STRONG",{});var fGr=s(joe);HWe=r(fGr,"speech_to_text"),fGr.forEach(t),UWe=r(dCe," \u2014 "),Wk=n(dCe,"A",{href:!0});var mGr=s(Wk);JWe=r(mGr,"Speech2TextConfig"),mGr.forEach(t),YWe=r(dCe," (Speech2Text model)"),dCe.forEach(t),KWe=i(y),Vm=n(y,"LI",{});var cCe=s(Vm);Doe=n(cCe,"STRONG",{});var gGr=s(Doe);ZWe=r(gGr,"speech_to_text_2"),gGr.forEach(t),eHe=r(cCe," \u2014 "),Hk=n(cCe,"A",{href:!0});var hGr=s(Hk);oHe=r(hGr,"Speech2Text2Config"),hGr.forEach(t),rHe=r(cCe," (Speech2Text2 model)"),cCe.forEach(t),tHe=i(y),Xm=n(y,"LI",{});var fCe=s(Xm);Goe=n(fCe,"STRONG",{});var pGr=s(Goe);aHe=r(pGr,"splinter"),pGr.forEach(t),nHe=r(fCe," \u2014 "),Uk=n(fCe,"A",{href:!0});var uGr=s(Uk);sHe=r(uGr,"SplinterConfig"),uGr.forEach(t),lHe=r(fCe," (Splinter model)"),fCe.forEach(t),iHe=i(y),zm=n(y,"LI",{});var mCe=s(zm);Ooe=n(mCe,"STRONG",{});var _Gr=s(Ooe);dHe=r(_Gr,"squeezebert"),_Gr.forEach(t),cHe=r(mCe," \u2014 "),Jk=n(mCe,"A",{href:!0});var bGr=s(Jk);fHe=r(bGr,"SqueezeBertConfig"),bGr.forEach(t),mHe=r(mCe," (SqueezeBERT model)"),mCe.forEach(t),gHe=i(y),Qm=n(y,"LI",{});var gCe=s(Qm);Voe=n(gCe,"STRONG",{});var vGr=s(Voe);hHe=r(vGr,"swin"),vGr.forEach(t),pHe=r(gCe," \u2014 "),Yk=n(gCe,"A",{href:!0});var FGr=s(Yk);uHe=r(FGr,"SwinConfig"),FGr.forEach(t),_He=r(gCe," (Swin model)"),gCe.forEach(t),bHe=i(y),Wm=n(y,"LI",{});var hCe=s(Wm);Xoe=n(hCe,"STRONG",{});var TGr=s(Xoe);vHe=r(TGr,"t5"),TGr.forEach(t),FHe=r(hCe," \u2014 "),Kk=n(hCe,"A",{href:!0});var MGr=s(Kk);THe=r(MGr,"T5Config"),MGr.forEach(t),MHe=r(hCe," (T5 model)"),hCe.forEach(t),EHe=i(y),Hm=n(y,"LI",{});var pCe=s(Hm);zoe=n(pCe,"STRONG",{});var EGr=s(zoe);CHe=r(EGr,"tapas"),EGr.forEach(t),wHe=r(pCe," \u2014 "),Zk=n(pCe,"A",{href:!0});var CGr=s(Zk);AHe=r(CGr,"TapasConfig"),CGr.forEach(t),yHe=r(pCe," (TAPAS model)"),pCe.forEach(t),LHe=i(y),Um=n(y,"LI",{});var uCe=s(Um);Qoe=n(uCe,"STRONG",{});var wGr=s(Qoe);xHe=r(wGr,"tapex"),wGr.forEach(t),$He=r(uCe," \u2014 "),eS=n(uCe,"A",{href:!0});var AGr=s(eS);kHe=r(AGr,"BartConfig"),AGr.forEach(t),SHe=r(uCe," (TAPEX model)"),uCe.forEach(t),RHe=i(y),Jm=n(y,"LI",{});var _Ce=s(Jm);Woe=n(_Ce,"STRONG",{});var yGr=s(Woe);BHe=r(yGr,"transfo-xl"),yGr.forEach(t),PHe=r(_Ce," \u2014 "),oS=n(_Ce,"A",{href:!0});var LGr=s(oS);IHe=r(LGr,"TransfoXLConfig"),LGr.forEach(t),qHe=r(_Ce," (Transformer-XL model)"),_Ce.forEach(t),NHe=i(y),Ym=n(y,"LI",{});var bCe=s(Ym);Hoe=n(bCe,"STRONG",{});var xGr=s(Hoe);jHe=r(xGr,"trocr"),xGr.forEach(t),DHe=r(bCe," \u2014 "),rS=n(bCe,"A",{href:!0});var $Gr=s(rS);GHe=r($Gr,"TrOCRConfig"),$Gr.forEach(t),OHe=r(bCe," (TrOCR model)"),bCe.forEach(t),VHe=i(y),Km=n(y,"LI",{});var vCe=s(Km);Uoe=n(vCe,"STRONG",{});var kGr=s(Uoe);XHe=r(kGr,"unispeech"),kGr.forEach(t),zHe=r(vCe," \u2014 "),tS=n(vCe,"A",{href:!0});var SGr=s(tS);QHe=r(SGr,"UniSpeechConfig"),SGr.forEach(t),WHe=r(vCe," (UniSpeech model)"),vCe.forEach(t),HHe=i(y),Zm=n(y,"LI",{});var FCe=s(Zm);Joe=n(FCe,"STRONG",{});var RGr=s(Joe);UHe=r(RGr,"unispeech-sat"),RGr.forEach(t),JHe=r(FCe," \u2014 "),aS=n(FCe,"A",{href:!0});var BGr=s(aS);YHe=r(BGr,"UniSpeechSatConfig"),BGr.forEach(t),KHe=r(FCe," (UniSpeechSat model)"),FCe.forEach(t),ZHe=i(y),eg=n(y,"LI",{});var TCe=s(eg);Yoe=n(TCe,"STRONG",{});var PGr=s(Yoe);eUe=r(PGr,"van"),PGr.forEach(t),oUe=r(TCe," \u2014 "),nS=n(TCe,"A",{href:!0});var IGr=s(nS);rUe=r(IGr,"VanConfig"),IGr.forEach(t),tUe=r(TCe," (VAN model)"),TCe.forEach(t),aUe=i(y),og=n(y,"LI",{});var MCe=s(og);Koe=n(MCe,"STRONG",{});var qGr=s(Koe);nUe=r(qGr,"vilt"),qGr.forEach(t),sUe=r(MCe," \u2014 "),sS=n(MCe,"A",{href:!0});var NGr=s(sS);lUe=r(NGr,"ViltConfig"),NGr.forEach(t),iUe=r(MCe," (ViLT model)"),MCe.forEach(t),dUe=i(y),rg=n(y,"LI",{});var ECe=s(rg);Zoe=n(ECe,"STRONG",{});var jGr=s(Zoe);cUe=r(jGr,"vision-encoder-decoder"),jGr.forEach(t),fUe=r(ECe," \u2014 "),lS=n(ECe,"A",{href:!0});var DGr=s(lS);mUe=r(DGr,"VisionEncoderDecoderConfig"),DGr.forEach(t),gUe=r(ECe," (Vision Encoder decoder model)"),ECe.forEach(t),hUe=i(y),tg=n(y,"LI",{});var CCe=s(tg);ere=n(CCe,"STRONG",{});var GGr=s(ere);pUe=r(GGr,"vision-text-dual-encoder"),GGr.forEach(t),uUe=r(CCe," \u2014 "),iS=n(CCe,"A",{href:!0});var OGr=s(iS);_Ue=r(OGr,"VisionTextDualEncoderConfig"),OGr.forEach(t),bUe=r(CCe," (VisionTextDualEncoder model)"),CCe.forEach(t),vUe=i(y),ag=n(y,"LI",{});var wCe=s(ag);ore=n(wCe,"STRONG",{});var VGr=s(ore);FUe=r(VGr,"visual_bert"),VGr.forEach(t),TUe=r(wCe," \u2014 "),dS=n(wCe,"A",{href:!0});var XGr=s(dS);MUe=r(XGr,"VisualBertConfig"),XGr.forEach(t),EUe=r(wCe," (VisualBert model)"),wCe.forEach(t),CUe=i(y),ng=n(y,"LI",{});var ACe=s(ng);rre=n(ACe,"STRONG",{});var zGr=s(rre);wUe=r(zGr,"vit"),zGr.forEach(t),AUe=r(ACe," \u2014 "),cS=n(ACe,"A",{href:!0});var QGr=s(cS);yUe=r(QGr,"ViTConfig"),QGr.forEach(t),LUe=r(ACe," (ViT model)"),ACe.forEach(t),xUe=i(y),sg=n(y,"LI",{});var yCe=s(sg);tre=n(yCe,"STRONG",{});var WGr=s(tre);$Ue=r(WGr,"vit_mae"),WGr.forEach(t),kUe=r(yCe," \u2014 "),fS=n(yCe,"A",{href:!0});var HGr=s(fS);SUe=r(HGr,"ViTMAEConfig"),HGr.forEach(t),RUe=r(yCe," (ViTMAE model)"),yCe.forEach(t),BUe=i(y),lg=n(y,"LI",{});var LCe=s(lg);are=n(LCe,"STRONG",{});var UGr=s(are);PUe=r(UGr,"wav2vec2"),UGr.forEach(t),IUe=r(LCe," \u2014 "),mS=n(LCe,"A",{href:!0});var JGr=s(mS);qUe=r(JGr,"Wav2Vec2Config"),JGr.forEach(t),NUe=r(LCe," (Wav2Vec2 model)"),LCe.forEach(t),jUe=i(y),ig=n(y,"LI",{});var xCe=s(ig);nre=n(xCe,"STRONG",{});var YGr=s(nre);DUe=r(YGr,"wavlm"),YGr.forEach(t),GUe=r(xCe," \u2014 "),gS=n(xCe,"A",{href:!0});var KGr=s(gS);OUe=r(KGr,"WavLMConfig"),KGr.forEach(t),VUe=r(xCe," (WavLM model)"),xCe.forEach(t),XUe=i(y),dg=n(y,"LI",{});var $Ce=s(dg);sre=n($Ce,"STRONG",{});var ZGr=s(sre);zUe=r(ZGr,"xglm"),ZGr.forEach(t),QUe=r($Ce," \u2014 "),hS=n($Ce,"A",{href:!0});var eOr=s(hS);WUe=r(eOr,"XGLMConfig"),eOr.forEach(t),HUe=r($Ce," (XGLM model)"),$Ce.forEach(t),UUe=i(y),cg=n(y,"LI",{});var kCe=s(cg);lre=n(kCe,"STRONG",{});var oOr=s(lre);JUe=r(oOr,"xlm"),oOr.forEach(t),YUe=r(kCe," \u2014 "),pS=n(kCe,"A",{href:!0});var rOr=s(pS);KUe=r(rOr,"XLMConfig"),rOr.forEach(t),ZUe=r(kCe," (XLM model)"),kCe.forEach(t),eJe=i(y),fg=n(y,"LI",{});var SCe=s(fg);ire=n(SCe,"STRONG",{});var tOr=s(ire);oJe=r(tOr,"xlm-prophetnet"),tOr.forEach(t),rJe=r(SCe," \u2014 "),uS=n(SCe,"A",{href:!0});var aOr=s(uS);tJe=r(aOr,"XLMProphetNetConfig"),aOr.forEach(t),aJe=r(SCe," (XLMProphetNet model)"),SCe.forEach(t),nJe=i(y),mg=n(y,"LI",{});var RCe=s(mg);dre=n(RCe,"STRONG",{});var nOr=s(dre);sJe=r(nOr,"xlm-roberta"),nOr.forEach(t),lJe=r(RCe," \u2014 "),_S=n(RCe,"A",{href:!0});var sOr=s(_S);iJe=r(sOr,"XLMRobertaConfig"),sOr.forEach(t),dJe=r(RCe," (XLM-RoBERTa model)"),RCe.forEach(t),cJe=i(y),gg=n(y,"LI",{});var BCe=s(gg);cre=n(BCe,"STRONG",{});var lOr=s(cre);fJe=r(lOr,"xlm-roberta-xl"),lOr.forEach(t),mJe=r(BCe," \u2014 "),bS=n(BCe,"A",{href:!0});var iOr=s(bS);gJe=r(iOr,"XLMRobertaXLConfig"),iOr.forEach(t),hJe=r(BCe," (XLM-RoBERTa-XL model)"),BCe.forEach(t),pJe=i(y),hg=n(y,"LI",{});var PCe=s(hg);fre=n(PCe,"STRONG",{});var dOr=s(fre);uJe=r(dOr,"xlnet"),dOr.forEach(t),_Je=r(PCe," \u2014 "),vS=n(PCe,"A",{href:!0});var cOr=s(vS);bJe=r(cOr,"XLNetConfig"),cOr.forEach(t),vJe=r(PCe," (XLNet model)"),PCe.forEach(t),FJe=i(y),pg=n(y,"LI",{});var ICe=s(pg);mre=n(ICe,"STRONG",{});var fOr=s(mre);TJe=r(fOr,"yolos"),fOr.forEach(t),MJe=r(ICe," \u2014 "),FS=n(ICe,"A",{href:!0});var mOr=s(FS);EJe=r(mOr,"YolosConfig"),mOr.forEach(t),CJe=r(ICe," (YOLOS model)"),ICe.forEach(t),wJe=i(y),ug=n(y,"LI",{});var qCe=s(ug);gre=n(qCe,"STRONG",{});var gOr=s(gre);AJe=r(gOr,"yoso"),gOr.forEach(t),yJe=r(qCe," \u2014 "),TS=n(qCe,"A",{href:!0});var hOr=s(TS);LJe=r(hOr,"YosoConfig"),hOr.forEach(t),xJe=r(qCe," (YOSO model)"),qCe.forEach(t),y.forEach(t),$Je=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),kJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var nNe=s(bg);T(l0.$$.fragment,nNe),SJe=i(nNe),hre=n(nNe,"P",{});var pOr=s(hre);RJe=r(pOr,"Register a new configuration for this class."),pOr.forEach(t),nNe.forEach(t),Kr.forEach(t),iIe=i(f),_i=n(f,"H2",{class:!0});var sNe=s(_i);vg=n(sNe,"A",{id:!0,class:!0,href:!0});var uOr=s(vg);pre=n(uOr,"SPAN",{});var _Or=s(pre);T(i0.$$.fragment,_Or),_Or.forEach(t),uOr.forEach(t),BJe=i(sNe),ure=n(sNe,"SPAN",{});var bOr=s(ure);PJe=r(bOr,"AutoTokenizer"),bOr.forEach(t),sNe.forEach(t),dIe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(d0.$$.fragment,Ps),IJe=i(Ps),c0=n(Ps,"P",{});var lNe=s(c0);qJe=r(lNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MS=n(lNe,"A",{href:!0});var vOr=s(MS);NJe=r(vOr,"AutoTokenizer.from_pretrained()"),vOr.forEach(t),jJe=r(lNe," class method."),lNe.forEach(t),DJe=i(Ps),f0=n(Ps,"P",{});var iNe=s(f0);GJe=r(iNe,"This class cannot be instantiated directly using "),_re=n(iNe,"CODE",{});var FOr=s(_re);OJe=r(FOr,"__init__()"),FOr.forEach(t),VJe=r(iNe," (throws an error)."),iNe.forEach(t),XJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(m0.$$.fragment,Is),zJe=i(Is),bre=n(Is,"P",{});var TOr=s(bre);QJe=r(TOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TOr.forEach(t),WJe=i(Is),Ca=n(Is,"P",{});var oA=s(Ca);HJe=r(oA,"The tokenizer class to instantiate is selected based on the "),vre=n(oA,"CODE",{});var MOr=s(vre);UJe=r(MOr,"model_type"),MOr.forEach(t),JJe=r(oA,` property of the config object (either
passed as an argument or loaded from `),Fre=n(oA,"CODE",{});var EOr=s(Fre);YJe=r(EOr,"pretrained_model_name_or_path"),EOr.forEach(t),KJe=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tre=n(oA,"CODE",{});var COr=s(Tre);ZJe=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),eYe=r(oA,":"),oA.forEach(t),oYe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var g9=s(kn);Mre=n(g9,"STRONG",{});var wOr=s(Mre);rYe=r(wOr,"albert"),wOr.forEach(t),tYe=r(g9," \u2014 "),ES=n(g9,"A",{href:!0});var AOr=s(ES);aYe=r(AOr,"AlbertTokenizer"),AOr.forEach(t),nYe=r(g9," or "),CS=n(g9,"A",{href:!0});var yOr=s(CS);sYe=r(yOr,"AlbertTokenizerFast"),yOr.forEach(t),lYe=r(g9," (ALBERT model)"),g9.forEach(t),iYe=i(S),Sn=n(S,"LI",{});var h9=s(Sn);Ere=n(h9,"STRONG",{});var LOr=s(Ere);dYe=r(LOr,"bart"),LOr.forEach(t),cYe=r(h9," \u2014 "),wS=n(h9,"A",{href:!0});var xOr=s(wS);fYe=r(xOr,"BartTokenizer"),xOr.forEach(t),mYe=r(h9," or "),AS=n(h9,"A",{href:!0});var $Or=s(AS);gYe=r($Or,"BartTokenizerFast"),$Or.forEach(t),hYe=r(h9," (BART model)"),h9.forEach(t),pYe=i(S),Rn=n(S,"LI",{});var p9=s(Rn);Cre=n(p9,"STRONG",{});var kOr=s(Cre);uYe=r(kOr,"barthez"),kOr.forEach(t),_Ye=r(p9," \u2014 "),yS=n(p9,"A",{href:!0});var SOr=s(yS);bYe=r(SOr,"BarthezTokenizer"),SOr.forEach(t),vYe=r(p9," or "),LS=n(p9,"A",{href:!0});var ROr=s(LS);FYe=r(ROr,"BarthezTokenizerFast"),ROr.forEach(t),TYe=r(p9," (BARThez model)"),p9.forEach(t),MYe=i(S),Fg=n(S,"LI",{});var NCe=s(Fg);wre=n(NCe,"STRONG",{});var BOr=s(wre);EYe=r(BOr,"bartpho"),BOr.forEach(t),CYe=r(NCe," \u2014 "),xS=n(NCe,"A",{href:!0});var POr=s(xS);wYe=r(POr,"BartphoTokenizer"),POr.forEach(t),AYe=r(NCe," (BARTpho model)"),NCe.forEach(t),yYe=i(S),Bn=n(S,"LI",{});var u9=s(Bn);Are=n(u9,"STRONG",{});var IOr=s(Are);LYe=r(IOr,"bert"),IOr.forEach(t),xYe=r(u9," \u2014 "),$S=n(u9,"A",{href:!0});var qOr=s($S);$Ye=r(qOr,"BertTokenizer"),qOr.forEach(t),kYe=r(u9," or "),kS=n(u9,"A",{href:!0});var NOr=s(kS);SYe=r(NOr,"BertTokenizerFast"),NOr.forEach(t),RYe=r(u9," (BERT model)"),u9.forEach(t),BYe=i(S),Tg=n(S,"LI",{});var jCe=s(Tg);yre=n(jCe,"STRONG",{});var jOr=s(yre);PYe=r(jOr,"bert-generation"),jOr.forEach(t),IYe=r(jCe," \u2014 "),SS=n(jCe,"A",{href:!0});var DOr=s(SS);qYe=r(DOr,"BertGenerationTokenizer"),DOr.forEach(t),NYe=r(jCe," (Bert Generation model)"),jCe.forEach(t),jYe=i(S),Mg=n(S,"LI",{});var DCe=s(Mg);Lre=n(DCe,"STRONG",{});var GOr=s(Lre);DYe=r(GOr,"bert-japanese"),GOr.forEach(t),GYe=r(DCe," \u2014 "),RS=n(DCe,"A",{href:!0});var OOr=s(RS);OYe=r(OOr,"BertJapaneseTokenizer"),OOr.forEach(t),VYe=r(DCe," (BertJapanese model)"),DCe.forEach(t),XYe=i(S),Eg=n(S,"LI",{});var GCe=s(Eg);xre=n(GCe,"STRONG",{});var VOr=s(xre);zYe=r(VOr,"bertweet"),VOr.forEach(t),QYe=r(GCe," \u2014 "),BS=n(GCe,"A",{href:!0});var XOr=s(BS);WYe=r(XOr,"BertweetTokenizer"),XOr.forEach(t),HYe=r(GCe," (Bertweet model)"),GCe.forEach(t),UYe=i(S),Pn=n(S,"LI",{});var _9=s(Pn);$re=n(_9,"STRONG",{});var zOr=s($re);JYe=r(zOr,"big_bird"),zOr.forEach(t),YYe=r(_9," \u2014 "),PS=n(_9,"A",{href:!0});var QOr=s(PS);KYe=r(QOr,"BigBirdTokenizer"),QOr.forEach(t),ZYe=r(_9," or "),IS=n(_9,"A",{href:!0});var WOr=s(IS);eKe=r(WOr,"BigBirdTokenizerFast"),WOr.forEach(t),oKe=r(_9," (BigBird model)"),_9.forEach(t),rKe=i(S),In=n(S,"LI",{});var b9=s(In);kre=n(b9,"STRONG",{});var HOr=s(kre);tKe=r(HOr,"bigbird_pegasus"),HOr.forEach(t),aKe=r(b9," \u2014 "),qS=n(b9,"A",{href:!0});var UOr=s(qS);nKe=r(UOr,"PegasusTokenizer"),UOr.forEach(t),sKe=r(b9," or "),NS=n(b9,"A",{href:!0});var JOr=s(NS);lKe=r(JOr,"PegasusTokenizerFast"),JOr.forEach(t),iKe=r(b9," (BigBirdPegasus model)"),b9.forEach(t),dKe=i(S),qn=n(S,"LI",{});var v9=s(qn);Sre=n(v9,"STRONG",{});var YOr=s(Sre);cKe=r(YOr,"blenderbot"),YOr.forEach(t),fKe=r(v9," \u2014 "),jS=n(v9,"A",{href:!0});var KOr=s(jS);mKe=r(KOr,"BlenderbotTokenizer"),KOr.forEach(t),gKe=r(v9," or "),DS=n(v9,"A",{href:!0});var ZOr=s(DS);hKe=r(ZOr,"BlenderbotTokenizerFast"),ZOr.forEach(t),pKe=r(v9," (Blenderbot model)"),v9.forEach(t),uKe=i(S),Cg=n(S,"LI",{});var OCe=s(Cg);Rre=n(OCe,"STRONG",{});var eVr=s(Rre);_Ke=r(eVr,"blenderbot-small"),eVr.forEach(t),bKe=r(OCe," \u2014 "),GS=n(OCe,"A",{href:!0});var oVr=s(GS);vKe=r(oVr,"BlenderbotSmallTokenizer"),oVr.forEach(t),FKe=r(OCe," (BlenderbotSmall model)"),OCe.forEach(t),TKe=i(S),wg=n(S,"LI",{});var VCe=s(wg);Bre=n(VCe,"STRONG",{});var rVr=s(Bre);MKe=r(rVr,"byt5"),rVr.forEach(t),EKe=r(VCe," \u2014 "),OS=n(VCe,"A",{href:!0});var tVr=s(OS);CKe=r(tVr,"ByT5Tokenizer"),tVr.forEach(t),wKe=r(VCe," (ByT5 model)"),VCe.forEach(t),AKe=i(S),Nn=n(S,"LI",{});var F9=s(Nn);Pre=n(F9,"STRONG",{});var aVr=s(Pre);yKe=r(aVr,"camembert"),aVr.forEach(t),LKe=r(F9," \u2014 "),VS=n(F9,"A",{href:!0});var nVr=s(VS);xKe=r(nVr,"CamembertTokenizer"),nVr.forEach(t),$Ke=r(F9," or "),XS=n(F9,"A",{href:!0});var sVr=s(XS);kKe=r(sVr,"CamembertTokenizerFast"),sVr.forEach(t),SKe=r(F9," (CamemBERT model)"),F9.forEach(t),RKe=i(S),Ag=n(S,"LI",{});var XCe=s(Ag);Ire=n(XCe,"STRONG",{});var lVr=s(Ire);BKe=r(lVr,"canine"),lVr.forEach(t),PKe=r(XCe," \u2014 "),zS=n(XCe,"A",{href:!0});var iVr=s(zS);IKe=r(iVr,"CanineTokenizer"),iVr.forEach(t),qKe=r(XCe," (Canine model)"),XCe.forEach(t),NKe=i(S),jn=n(S,"LI",{});var T9=s(jn);qre=n(T9,"STRONG",{});var dVr=s(qre);jKe=r(dVr,"clip"),dVr.forEach(t),DKe=r(T9," \u2014 "),QS=n(T9,"A",{href:!0});var cVr=s(QS);GKe=r(cVr,"CLIPTokenizer"),cVr.forEach(t),OKe=r(T9," or "),WS=n(T9,"A",{href:!0});var fVr=s(WS);VKe=r(fVr,"CLIPTokenizerFast"),fVr.forEach(t),XKe=r(T9," (CLIP model)"),T9.forEach(t),zKe=i(S),Dn=n(S,"LI",{});var M9=s(Dn);Nre=n(M9,"STRONG",{});var mVr=s(Nre);QKe=r(mVr,"convbert"),mVr.forEach(t),WKe=r(M9," \u2014 "),HS=n(M9,"A",{href:!0});var gVr=s(HS);HKe=r(gVr,"ConvBertTokenizer"),gVr.forEach(t),UKe=r(M9," or "),US=n(M9,"A",{href:!0});var hVr=s(US);JKe=r(hVr,"ConvBertTokenizerFast"),hVr.forEach(t),YKe=r(M9," (ConvBERT model)"),M9.forEach(t),KKe=i(S),Gn=n(S,"LI",{});var E9=s(Gn);jre=n(E9,"STRONG",{});var pVr=s(jre);ZKe=r(pVr,"cpm"),pVr.forEach(t),eZe=r(E9," \u2014 "),JS=n(E9,"A",{href:!0});var uVr=s(JS);oZe=r(uVr,"CpmTokenizer"),uVr.forEach(t),rZe=r(E9," or "),YS=n(E9,"A",{href:!0});var _Vr=s(YS);tZe=r(_Vr,"CpmTokenizerFast"),_Vr.forEach(t),aZe=r(E9," (CPM model)"),E9.forEach(t),nZe=i(S),yg=n(S,"LI",{});var zCe=s(yg);Dre=n(zCe,"STRONG",{});var bVr=s(Dre);sZe=r(bVr,"ctrl"),bVr.forEach(t),lZe=r(zCe," \u2014 "),KS=n(zCe,"A",{href:!0});var vVr=s(KS);iZe=r(vVr,"CTRLTokenizer"),vVr.forEach(t),dZe=r(zCe," (CTRL model)"),zCe.forEach(t),cZe=i(S),On=n(S,"LI",{});var C9=s(On);Gre=n(C9,"STRONG",{});var FVr=s(Gre);fZe=r(FVr,"data2vec-text"),FVr.forEach(t),mZe=r(C9," \u2014 "),ZS=n(C9,"A",{href:!0});var TVr=s(ZS);gZe=r(TVr,"RobertaTokenizer"),TVr.forEach(t),hZe=r(C9," or "),eR=n(C9,"A",{href:!0});var MVr=s(eR);pZe=r(MVr,"RobertaTokenizerFast"),MVr.forEach(t),uZe=r(C9," (Data2VecText model)"),C9.forEach(t),_Ze=i(S),Vn=n(S,"LI",{});var w9=s(Vn);Ore=n(w9,"STRONG",{});var EVr=s(Ore);bZe=r(EVr,"deberta"),EVr.forEach(t),vZe=r(w9," \u2014 "),oR=n(w9,"A",{href:!0});var CVr=s(oR);FZe=r(CVr,"DebertaTokenizer"),CVr.forEach(t),TZe=r(w9," or "),rR=n(w9,"A",{href:!0});var wVr=s(rR);MZe=r(wVr,"DebertaTokenizerFast"),wVr.forEach(t),EZe=r(w9," (DeBERTa model)"),w9.forEach(t),CZe=i(S),Xn=n(S,"LI",{});var A9=s(Xn);Vre=n(A9,"STRONG",{});var AVr=s(Vre);wZe=r(AVr,"deberta-v2"),AVr.forEach(t),AZe=r(A9," \u2014 "),tR=n(A9,"A",{href:!0});var yVr=s(tR);yZe=r(yVr,"DebertaV2Tokenizer"),yVr.forEach(t),LZe=r(A9," or "),aR=n(A9,"A",{href:!0});var LVr=s(aR);xZe=r(LVr,"DebertaV2TokenizerFast"),LVr.forEach(t),$Ze=r(A9," (DeBERTa-v2 model)"),A9.forEach(t),kZe=i(S),zn=n(S,"LI",{});var y9=s(zn);Xre=n(y9,"STRONG",{});var xVr=s(Xre);SZe=r(xVr,"distilbert"),xVr.forEach(t),RZe=r(y9," \u2014 "),nR=n(y9,"A",{href:!0});var $Vr=s(nR);BZe=r($Vr,"DistilBertTokenizer"),$Vr.forEach(t),PZe=r(y9," or "),sR=n(y9,"A",{href:!0});var kVr=s(sR);IZe=r(kVr,"DistilBertTokenizerFast"),kVr.forEach(t),qZe=r(y9," (DistilBERT model)"),y9.forEach(t),NZe=i(S),Qn=n(S,"LI",{});var L9=s(Qn);zre=n(L9,"STRONG",{});var SVr=s(zre);jZe=r(SVr,"dpr"),SVr.forEach(t),DZe=r(L9," \u2014 "),lR=n(L9,"A",{href:!0});var RVr=s(lR);GZe=r(RVr,"DPRQuestionEncoderTokenizer"),RVr.forEach(t),OZe=r(L9," or "),iR=n(L9,"A",{href:!0});var BVr=s(iR);VZe=r(BVr,"DPRQuestionEncoderTokenizerFast"),BVr.forEach(t),XZe=r(L9," (DPR model)"),L9.forEach(t),zZe=i(S),Wn=n(S,"LI",{});var x9=s(Wn);Qre=n(x9,"STRONG",{});var PVr=s(Qre);QZe=r(PVr,"electra"),PVr.forEach(t),WZe=r(x9," \u2014 "),dR=n(x9,"A",{href:!0});var IVr=s(dR);HZe=r(IVr,"ElectraTokenizer"),IVr.forEach(t),UZe=r(x9," or "),cR=n(x9,"A",{href:!0});var qVr=s(cR);JZe=r(qVr,"ElectraTokenizerFast"),qVr.forEach(t),YZe=r(x9," (ELECTRA model)"),x9.forEach(t),KZe=i(S),Lg=n(S,"LI",{});var QCe=s(Lg);Wre=n(QCe,"STRONG",{});var NVr=s(Wre);ZZe=r(NVr,"flaubert"),NVr.forEach(t),eeo=r(QCe," \u2014 "),fR=n(QCe,"A",{href:!0});var jVr=s(fR);oeo=r(jVr,"FlaubertTokenizer"),jVr.forEach(t),reo=r(QCe," (FlauBERT model)"),QCe.forEach(t),teo=i(S),Hn=n(S,"LI",{});var $9=s(Hn);Hre=n($9,"STRONG",{});var DVr=s(Hre);aeo=r(DVr,"fnet"),DVr.forEach(t),neo=r($9," \u2014 "),mR=n($9,"A",{href:!0});var GVr=s(mR);seo=r(GVr,"FNetTokenizer"),GVr.forEach(t),leo=r($9," or "),gR=n($9,"A",{href:!0});var OVr=s(gR);ieo=r(OVr,"FNetTokenizerFast"),OVr.forEach(t),deo=r($9," (FNet model)"),$9.forEach(t),ceo=i(S),xg=n(S,"LI",{});var WCe=s(xg);Ure=n(WCe,"STRONG",{});var VVr=s(Ure);feo=r(VVr,"fsmt"),VVr.forEach(t),meo=r(WCe," \u2014 "),hR=n(WCe,"A",{href:!0});var XVr=s(hR);geo=r(XVr,"FSMTTokenizer"),XVr.forEach(t),heo=r(WCe," (FairSeq Machine-Translation model)"),WCe.forEach(t),peo=i(S),Un=n(S,"LI",{});var k9=s(Un);Jre=n(k9,"STRONG",{});var zVr=s(Jre);ueo=r(zVr,"funnel"),zVr.forEach(t),_eo=r(k9," \u2014 "),pR=n(k9,"A",{href:!0});var QVr=s(pR);beo=r(QVr,"FunnelTokenizer"),QVr.forEach(t),veo=r(k9," or "),uR=n(k9,"A",{href:!0});var WVr=s(uR);Feo=r(WVr,"FunnelTokenizerFast"),WVr.forEach(t),Teo=r(k9," (Funnel Transformer model)"),k9.forEach(t),Meo=i(S),Jn=n(S,"LI",{});var S9=s(Jn);Yre=n(S9,"STRONG",{});var HVr=s(Yre);Eeo=r(HVr,"gpt2"),HVr.forEach(t),Ceo=r(S9," \u2014 "),_R=n(S9,"A",{href:!0});var UVr=s(_R);weo=r(UVr,"GPT2Tokenizer"),UVr.forEach(t),Aeo=r(S9," or "),bR=n(S9,"A",{href:!0});var JVr=s(bR);yeo=r(JVr,"GPT2TokenizerFast"),JVr.forEach(t),Leo=r(S9," (OpenAI GPT-2 model)"),S9.forEach(t),xeo=i(S),Yn=n(S,"LI",{});var R9=s(Yn);Kre=n(R9,"STRONG",{});var YVr=s(Kre);$eo=r(YVr,"gpt_neo"),YVr.forEach(t),keo=r(R9," \u2014 "),vR=n(R9,"A",{href:!0});var KVr=s(vR);Seo=r(KVr,"GPT2Tokenizer"),KVr.forEach(t),Reo=r(R9," or "),FR=n(R9,"A",{href:!0});var ZVr=s(FR);Beo=r(ZVr,"GPT2TokenizerFast"),ZVr.forEach(t),Peo=r(R9," (GPT Neo model)"),R9.forEach(t),Ieo=i(S),Kn=n(S,"LI",{});var B9=s(Kn);Zre=n(B9,"STRONG",{});var eXr=s(Zre);qeo=r(eXr,"gptj"),eXr.forEach(t),Neo=r(B9," \u2014 "),TR=n(B9,"A",{href:!0});var oXr=s(TR);jeo=r(oXr,"GPT2Tokenizer"),oXr.forEach(t),Deo=r(B9," or "),MR=n(B9,"A",{href:!0});var rXr=s(MR);Geo=r(rXr,"GPT2TokenizerFast"),rXr.forEach(t),Oeo=r(B9," (GPT-J model)"),B9.forEach(t),Veo=i(S),Zn=n(S,"LI",{});var P9=s(Zn);ete=n(P9,"STRONG",{});var tXr=s(ete);Xeo=r(tXr,"herbert"),tXr.forEach(t),zeo=r(P9," \u2014 "),ER=n(P9,"A",{href:!0});var aXr=s(ER);Qeo=r(aXr,"HerbertTokenizer"),aXr.forEach(t),Weo=r(P9," or "),CR=n(P9,"A",{href:!0});var nXr=s(CR);Heo=r(nXr,"HerbertTokenizerFast"),nXr.forEach(t),Ueo=r(P9," (HerBERT model)"),P9.forEach(t),Jeo=i(S),$g=n(S,"LI",{});var HCe=s($g);ote=n(HCe,"STRONG",{});var sXr=s(ote);Yeo=r(sXr,"hubert"),sXr.forEach(t),Keo=r(HCe," \u2014 "),wR=n(HCe,"A",{href:!0});var lXr=s(wR);Zeo=r(lXr,"Wav2Vec2CTCTokenizer"),lXr.forEach(t),eoo=r(HCe," (Hubert model)"),HCe.forEach(t),ooo=i(S),es=n(S,"LI",{});var I9=s(es);rte=n(I9,"STRONG",{});var iXr=s(rte);roo=r(iXr,"ibert"),iXr.forEach(t),too=r(I9," \u2014 "),AR=n(I9,"A",{href:!0});var dXr=s(AR);aoo=r(dXr,"RobertaTokenizer"),dXr.forEach(t),noo=r(I9," or "),yR=n(I9,"A",{href:!0});var cXr=s(yR);soo=r(cXr,"RobertaTokenizerFast"),cXr.forEach(t),loo=r(I9," (I-BERT model)"),I9.forEach(t),ioo=i(S),os=n(S,"LI",{});var q9=s(os);tte=n(q9,"STRONG",{});var fXr=s(tte);doo=r(fXr,"layoutlm"),fXr.forEach(t),coo=r(q9," \u2014 "),LR=n(q9,"A",{href:!0});var mXr=s(LR);foo=r(mXr,"LayoutLMTokenizer"),mXr.forEach(t),moo=r(q9," or "),xR=n(q9,"A",{href:!0});var gXr=s(xR);goo=r(gXr,"LayoutLMTokenizerFast"),gXr.forEach(t),hoo=r(q9," (LayoutLM model)"),q9.forEach(t),poo=i(S),rs=n(S,"LI",{});var N9=s(rs);ate=n(N9,"STRONG",{});var hXr=s(ate);uoo=r(hXr,"layoutlmv2"),hXr.forEach(t),_oo=r(N9," \u2014 "),$R=n(N9,"A",{href:!0});var pXr=s($R);boo=r(pXr,"LayoutLMv2Tokenizer"),pXr.forEach(t),voo=r(N9," or "),kR=n(N9,"A",{href:!0});var uXr=s(kR);Foo=r(uXr,"LayoutLMv2TokenizerFast"),uXr.forEach(t),Too=r(N9," (LayoutLMv2 model)"),N9.forEach(t),Moo=i(S),ts=n(S,"LI",{});var j9=s(ts);nte=n(j9,"STRONG",{});var _Xr=s(nte);Eoo=r(_Xr,"layoutxlm"),_Xr.forEach(t),Coo=r(j9," \u2014 "),SR=n(j9,"A",{href:!0});var bXr=s(SR);woo=r(bXr,"LayoutXLMTokenizer"),bXr.forEach(t),Aoo=r(j9," or "),RR=n(j9,"A",{href:!0});var vXr=s(RR);yoo=r(vXr,"LayoutXLMTokenizerFast"),vXr.forEach(t),Loo=r(j9," (LayoutXLM model)"),j9.forEach(t),xoo=i(S),as=n(S,"LI",{});var D9=s(as);ste=n(D9,"STRONG",{});var FXr=s(ste);$oo=r(FXr,"led"),FXr.forEach(t),koo=r(D9," \u2014 "),BR=n(D9,"A",{href:!0});var TXr=s(BR);Soo=r(TXr,"LEDTokenizer"),TXr.forEach(t),Roo=r(D9," or "),PR=n(D9,"A",{href:!0});var MXr=s(PR);Boo=r(MXr,"LEDTokenizerFast"),MXr.forEach(t),Poo=r(D9," (LED model)"),D9.forEach(t),Ioo=i(S),ns=n(S,"LI",{});var G9=s(ns);lte=n(G9,"STRONG",{});var EXr=s(lte);qoo=r(EXr,"longformer"),EXr.forEach(t),Noo=r(G9," \u2014 "),IR=n(G9,"A",{href:!0});var CXr=s(IR);joo=r(CXr,"LongformerTokenizer"),CXr.forEach(t),Doo=r(G9," or "),qR=n(G9,"A",{href:!0});var wXr=s(qR);Goo=r(wXr,"LongformerTokenizerFast"),wXr.forEach(t),Ooo=r(G9," (Longformer model)"),G9.forEach(t),Voo=i(S),kg=n(S,"LI",{});var UCe=s(kg);ite=n(UCe,"STRONG",{});var AXr=s(ite);Xoo=r(AXr,"luke"),AXr.forEach(t),zoo=r(UCe," \u2014 "),NR=n(UCe,"A",{href:!0});var yXr=s(NR);Qoo=r(yXr,"LukeTokenizer"),yXr.forEach(t),Woo=r(UCe," (LUKE model)"),UCe.forEach(t),Hoo=i(S),ss=n(S,"LI",{});var O9=s(ss);dte=n(O9,"STRONG",{});var LXr=s(dte);Uoo=r(LXr,"lxmert"),LXr.forEach(t),Joo=r(O9," \u2014 "),jR=n(O9,"A",{href:!0});var xXr=s(jR);Yoo=r(xXr,"LxmertTokenizer"),xXr.forEach(t),Koo=r(O9," or "),DR=n(O9,"A",{href:!0});var $Xr=s(DR);Zoo=r($Xr,"LxmertTokenizerFast"),$Xr.forEach(t),ero=r(O9," (LXMERT model)"),O9.forEach(t),oro=i(S),Sg=n(S,"LI",{});var JCe=s(Sg);cte=n(JCe,"STRONG",{});var kXr=s(cte);rro=r(kXr,"m2m_100"),kXr.forEach(t),tro=r(JCe," \u2014 "),GR=n(JCe,"A",{href:!0});var SXr=s(GR);aro=r(SXr,"M2M100Tokenizer"),SXr.forEach(t),nro=r(JCe," (M2M100 model)"),JCe.forEach(t),sro=i(S),Rg=n(S,"LI",{});var YCe=s(Rg);fte=n(YCe,"STRONG",{});var RXr=s(fte);lro=r(RXr,"marian"),RXr.forEach(t),iro=r(YCe," \u2014 "),OR=n(YCe,"A",{href:!0});var BXr=s(OR);dro=r(BXr,"MarianTokenizer"),BXr.forEach(t),cro=r(YCe," (Marian model)"),YCe.forEach(t),fro=i(S),ls=n(S,"LI",{});var V9=s(ls);mte=n(V9,"STRONG",{});var PXr=s(mte);mro=r(PXr,"mbart"),PXr.forEach(t),gro=r(V9," \u2014 "),VR=n(V9,"A",{href:!0});var IXr=s(VR);hro=r(IXr,"MBartTokenizer"),IXr.forEach(t),pro=r(V9," or "),XR=n(V9,"A",{href:!0});var qXr=s(XR);uro=r(qXr,"MBartTokenizerFast"),qXr.forEach(t),_ro=r(V9," (mBART model)"),V9.forEach(t),bro=i(S),is=n(S,"LI",{});var X9=s(is);gte=n(X9,"STRONG",{});var NXr=s(gte);vro=r(NXr,"mbart50"),NXr.forEach(t),Fro=r(X9," \u2014 "),zR=n(X9,"A",{href:!0});var jXr=s(zR);Tro=r(jXr,"MBart50Tokenizer"),jXr.forEach(t),Mro=r(X9," or "),QR=n(X9,"A",{href:!0});var DXr=s(QR);Ero=r(DXr,"MBart50TokenizerFast"),DXr.forEach(t),Cro=r(X9," (mBART-50 model)"),X9.forEach(t),wro=i(S),ds=n(S,"LI",{});var z9=s(ds);hte=n(z9,"STRONG",{});var GXr=s(hte);Aro=r(GXr,"megatron-bert"),GXr.forEach(t),yro=r(z9," \u2014 "),WR=n(z9,"A",{href:!0});var OXr=s(WR);Lro=r(OXr,"BertTokenizer"),OXr.forEach(t),xro=r(z9," or "),HR=n(z9,"A",{href:!0});var VXr=s(HR);$ro=r(VXr,"BertTokenizerFast"),VXr.forEach(t),kro=r(z9," (MegatronBert model)"),z9.forEach(t),Sro=i(S),Bg=n(S,"LI",{});var KCe=s(Bg);pte=n(KCe,"STRONG",{});var XXr=s(pte);Rro=r(XXr,"mluke"),XXr.forEach(t),Bro=r(KCe," \u2014 "),UR=n(KCe,"A",{href:!0});var zXr=s(UR);Pro=r(zXr,"MLukeTokenizer"),zXr.forEach(t),Iro=r(KCe," (mLUKE model)"),KCe.forEach(t),qro=i(S),cs=n(S,"LI",{});var Q9=s(cs);ute=n(Q9,"STRONG",{});var QXr=s(ute);Nro=r(QXr,"mobilebert"),QXr.forEach(t),jro=r(Q9," \u2014 "),JR=n(Q9,"A",{href:!0});var WXr=s(JR);Dro=r(WXr,"MobileBertTokenizer"),WXr.forEach(t),Gro=r(Q9," or "),YR=n(Q9,"A",{href:!0});var HXr=s(YR);Oro=r(HXr,"MobileBertTokenizerFast"),HXr.forEach(t),Vro=r(Q9," (MobileBERT model)"),Q9.forEach(t),Xro=i(S),fs=n(S,"LI",{});var W9=s(fs);_te=n(W9,"STRONG",{});var UXr=s(_te);zro=r(UXr,"mpnet"),UXr.forEach(t),Qro=r(W9," \u2014 "),KR=n(W9,"A",{href:!0});var JXr=s(KR);Wro=r(JXr,"MPNetTokenizer"),JXr.forEach(t),Hro=r(W9," or "),ZR=n(W9,"A",{href:!0});var YXr=s(ZR);Uro=r(YXr,"MPNetTokenizerFast"),YXr.forEach(t),Jro=r(W9," (MPNet model)"),W9.forEach(t),Yro=i(S),ms=n(S,"LI",{});var H9=s(ms);bte=n(H9,"STRONG",{});var KXr=s(bte);Kro=r(KXr,"mt5"),KXr.forEach(t),Zro=r(H9," \u2014 "),eB=n(H9,"A",{href:!0});var ZXr=s(eB);eto=r(ZXr,"MT5Tokenizer"),ZXr.forEach(t),oto=r(H9," or "),oB=n(H9,"A",{href:!0});var ezr=s(oB);rto=r(ezr,"MT5TokenizerFast"),ezr.forEach(t),tto=r(H9," (mT5 model)"),H9.forEach(t),ato=i(S),gs=n(S,"LI",{});var U9=s(gs);vte=n(U9,"STRONG",{});var ozr=s(vte);nto=r(ozr,"nystromformer"),ozr.forEach(t),sto=r(U9," \u2014 "),rB=n(U9,"A",{href:!0});var rzr=s(rB);lto=r(rzr,"AlbertTokenizer"),rzr.forEach(t),ito=r(U9," or "),tB=n(U9,"A",{href:!0});var tzr=s(tB);dto=r(tzr,"AlbertTokenizerFast"),tzr.forEach(t),cto=r(U9," (Nystromformer model)"),U9.forEach(t),fto=i(S),hs=n(S,"LI",{});var J9=s(hs);Fte=n(J9,"STRONG",{});var azr=s(Fte);mto=r(azr,"openai-gpt"),azr.forEach(t),gto=r(J9," \u2014 "),aB=n(J9,"A",{href:!0});var nzr=s(aB);hto=r(nzr,"OpenAIGPTTokenizer"),nzr.forEach(t),pto=r(J9," or "),nB=n(J9,"A",{href:!0});var szr=s(nB);uto=r(szr,"OpenAIGPTTokenizerFast"),szr.forEach(t),_to=r(J9," (OpenAI GPT model)"),J9.forEach(t),bto=i(S),Pg=n(S,"LI",{});var ZCe=s(Pg);Tte=n(ZCe,"STRONG",{});var lzr=s(Tte);vto=r(lzr,"opt"),lzr.forEach(t),Fto=r(ZCe," \u2014 "),sB=n(ZCe,"A",{href:!0});var izr=s(sB);Tto=r(izr,"GPT2Tokenizer"),izr.forEach(t),Mto=r(ZCe," (OPT model)"),ZCe.forEach(t),Eto=i(S),ps=n(S,"LI",{});var Y9=s(ps);Mte=n(Y9,"STRONG",{});var dzr=s(Mte);Cto=r(dzr,"pegasus"),dzr.forEach(t),wto=r(Y9," \u2014 "),lB=n(Y9,"A",{href:!0});var czr=s(lB);Ato=r(czr,"PegasusTokenizer"),czr.forEach(t),yto=r(Y9," or "),iB=n(Y9,"A",{href:!0});var fzr=s(iB);Lto=r(fzr,"PegasusTokenizerFast"),fzr.forEach(t),xto=r(Y9," (Pegasus model)"),Y9.forEach(t),$to=i(S),Ig=n(S,"LI",{});var ewe=s(Ig);Ete=n(ewe,"STRONG",{});var mzr=s(Ete);kto=r(mzr,"perceiver"),mzr.forEach(t),Sto=r(ewe," \u2014 "),dB=n(ewe,"A",{href:!0});var gzr=s(dB);Rto=r(gzr,"PerceiverTokenizer"),gzr.forEach(t),Bto=r(ewe," (Perceiver model)"),ewe.forEach(t),Pto=i(S),qg=n(S,"LI",{});var owe=s(qg);Cte=n(owe,"STRONG",{});var hzr=s(Cte);Ito=r(hzr,"phobert"),hzr.forEach(t),qto=r(owe," \u2014 "),cB=n(owe,"A",{href:!0});var pzr=s(cB);Nto=r(pzr,"PhobertTokenizer"),pzr.forEach(t),jto=r(owe," (PhoBERT model)"),owe.forEach(t),Dto=i(S),Ng=n(S,"LI",{});var rwe=s(Ng);wte=n(rwe,"STRONG",{});var uzr=s(wte);Gto=r(uzr,"plbart"),uzr.forEach(t),Oto=r(rwe," \u2014 "),fB=n(rwe,"A",{href:!0});var _zr=s(fB);Vto=r(_zr,"PLBartTokenizer"),_zr.forEach(t),Xto=r(rwe," (PLBart model)"),rwe.forEach(t),zto=i(S),jg=n(S,"LI",{});var twe=s(jg);Ate=n(twe,"STRONG",{});var bzr=s(Ate);Qto=r(bzr,"prophetnet"),bzr.forEach(t),Wto=r(twe," \u2014 "),mB=n(twe,"A",{href:!0});var vzr=s(mB);Hto=r(vzr,"ProphetNetTokenizer"),vzr.forEach(t),Uto=r(twe," (ProphetNet model)"),twe.forEach(t),Jto=i(S),us=n(S,"LI",{});var K9=s(us);yte=n(K9,"STRONG",{});var Fzr=s(yte);Yto=r(Fzr,"qdqbert"),Fzr.forEach(t),Kto=r(K9," \u2014 "),gB=n(K9,"A",{href:!0});var Tzr=s(gB);Zto=r(Tzr,"BertTokenizer"),Tzr.forEach(t),eao=r(K9," or "),hB=n(K9,"A",{href:!0});var Mzr=s(hB);oao=r(Mzr,"BertTokenizerFast"),Mzr.forEach(t),rao=r(K9," (QDQBert model)"),K9.forEach(t),tao=i(S),Dg=n(S,"LI",{});var awe=s(Dg);Lte=n(awe,"STRONG",{});var Ezr=s(Lte);aao=r(Ezr,"rag"),Ezr.forEach(t),nao=r(awe," \u2014 "),pB=n(awe,"A",{href:!0});var Czr=s(pB);sao=r(Czr,"RagTokenizer"),Czr.forEach(t),lao=r(awe," (RAG model)"),awe.forEach(t),iao=i(S),_s=n(S,"LI",{});var Z9=s(_s);xte=n(Z9,"STRONG",{});var wzr=s(xte);dao=r(wzr,"realm"),wzr.forEach(t),cao=r(Z9," \u2014 "),uB=n(Z9,"A",{href:!0});var Azr=s(uB);fao=r(Azr,"RealmTokenizer"),Azr.forEach(t),mao=r(Z9," or "),_B=n(Z9,"A",{href:!0});var yzr=s(_B);gao=r(yzr,"RealmTokenizerFast"),yzr.forEach(t),hao=r(Z9," (Realm model)"),Z9.forEach(t),pao=i(S),bs=n(S,"LI",{});var e$=s(bs);$te=n(e$,"STRONG",{});var Lzr=s($te);uao=r(Lzr,"reformer"),Lzr.forEach(t),_ao=r(e$," \u2014 "),bB=n(e$,"A",{href:!0});var xzr=s(bB);bao=r(xzr,"ReformerTokenizer"),xzr.forEach(t),vao=r(e$," or "),vB=n(e$,"A",{href:!0});var $zr=s(vB);Fao=r($zr,"ReformerTokenizerFast"),$zr.forEach(t),Tao=r(e$," (Reformer model)"),e$.forEach(t),Mao=i(S),vs=n(S,"LI",{});var o$=s(vs);kte=n(o$,"STRONG",{});var kzr=s(kte);Eao=r(kzr,"rembert"),kzr.forEach(t),Cao=r(o$," \u2014 "),FB=n(o$,"A",{href:!0});var Szr=s(FB);wao=r(Szr,"RemBertTokenizer"),Szr.forEach(t),Aao=r(o$," or "),TB=n(o$,"A",{href:!0});var Rzr=s(TB);yao=r(Rzr,"RemBertTokenizerFast"),Rzr.forEach(t),Lao=r(o$," (RemBERT model)"),o$.forEach(t),xao=i(S),Fs=n(S,"LI",{});var r$=s(Fs);Ste=n(r$,"STRONG",{});var Bzr=s(Ste);$ao=r(Bzr,"retribert"),Bzr.forEach(t),kao=r(r$," \u2014 "),MB=n(r$,"A",{href:!0});var Pzr=s(MB);Sao=r(Pzr,"RetriBertTokenizer"),Pzr.forEach(t),Rao=r(r$," or "),EB=n(r$,"A",{href:!0});var Izr=s(EB);Bao=r(Izr,"RetriBertTokenizerFast"),Izr.forEach(t),Pao=r(r$," (RetriBERT model)"),r$.forEach(t),Iao=i(S),Ts=n(S,"LI",{});var t$=s(Ts);Rte=n(t$,"STRONG",{});var qzr=s(Rte);qao=r(qzr,"roberta"),qzr.forEach(t),Nao=r(t$," \u2014 "),CB=n(t$,"A",{href:!0});var Nzr=s(CB);jao=r(Nzr,"RobertaTokenizer"),Nzr.forEach(t),Dao=r(t$," or "),wB=n(t$,"A",{href:!0});var jzr=s(wB);Gao=r(jzr,"RobertaTokenizerFast"),jzr.forEach(t),Oao=r(t$," (RoBERTa model)"),t$.forEach(t),Vao=i(S),Ms=n(S,"LI",{});var a$=s(Ms);Bte=n(a$,"STRONG",{});var Dzr=s(Bte);Xao=r(Dzr,"roformer"),Dzr.forEach(t),zao=r(a$," \u2014 "),AB=n(a$,"A",{href:!0});var Gzr=s(AB);Qao=r(Gzr,"RoFormerTokenizer"),Gzr.forEach(t),Wao=r(a$," or "),yB=n(a$,"A",{href:!0});var Ozr=s(yB);Hao=r(Ozr,"RoFormerTokenizerFast"),Ozr.forEach(t),Uao=r(a$," (RoFormer model)"),a$.forEach(t),Jao=i(S),Gg=n(S,"LI",{});var nwe=s(Gg);Pte=n(nwe,"STRONG",{});var Vzr=s(Pte);Yao=r(Vzr,"speech_to_text"),Vzr.forEach(t),Kao=r(nwe," \u2014 "),LB=n(nwe,"A",{href:!0});var Xzr=s(LB);Zao=r(Xzr,"Speech2TextTokenizer"),Xzr.forEach(t),eno=r(nwe," (Speech2Text model)"),nwe.forEach(t),ono=i(S),Og=n(S,"LI",{});var swe=s(Og);Ite=n(swe,"STRONG",{});var zzr=s(Ite);rno=r(zzr,"speech_to_text_2"),zzr.forEach(t),tno=r(swe," \u2014 "),xB=n(swe,"A",{href:!0});var Qzr=s(xB);ano=r(Qzr,"Speech2Text2Tokenizer"),Qzr.forEach(t),nno=r(swe," (Speech2Text2 model)"),swe.forEach(t),sno=i(S),Es=n(S,"LI",{});var n$=s(Es);qte=n(n$,"STRONG",{});var Wzr=s(qte);lno=r(Wzr,"splinter"),Wzr.forEach(t),ino=r(n$," \u2014 "),$B=n(n$,"A",{href:!0});var Hzr=s($B);dno=r(Hzr,"SplinterTokenizer"),Hzr.forEach(t),cno=r(n$," or "),kB=n(n$,"A",{href:!0});var Uzr=s(kB);fno=r(Uzr,"SplinterTokenizerFast"),Uzr.forEach(t),mno=r(n$," (Splinter model)"),n$.forEach(t),gno=i(S),Cs=n(S,"LI",{});var s$=s(Cs);Nte=n(s$,"STRONG",{});var Jzr=s(Nte);hno=r(Jzr,"squeezebert"),Jzr.forEach(t),pno=r(s$," \u2014 "),SB=n(s$,"A",{href:!0});var Yzr=s(SB);uno=r(Yzr,"SqueezeBertTokenizer"),Yzr.forEach(t),_no=r(s$," or "),RB=n(s$,"A",{href:!0});var Kzr=s(RB);bno=r(Kzr,"SqueezeBertTokenizerFast"),Kzr.forEach(t),vno=r(s$," (SqueezeBERT model)"),s$.forEach(t),Fno=i(S),ws=n(S,"LI",{});var l$=s(ws);jte=n(l$,"STRONG",{});var Zzr=s(jte);Tno=r(Zzr,"t5"),Zzr.forEach(t),Mno=r(l$," \u2014 "),BB=n(l$,"A",{href:!0});var eQr=s(BB);Eno=r(eQr,"T5Tokenizer"),eQr.forEach(t),Cno=r(l$," or "),PB=n(l$,"A",{href:!0});var oQr=s(PB);wno=r(oQr,"T5TokenizerFast"),oQr.forEach(t),Ano=r(l$," (T5 model)"),l$.forEach(t),yno=i(S),Vg=n(S,"LI",{});var lwe=s(Vg);Dte=n(lwe,"STRONG",{});var rQr=s(Dte);Lno=r(rQr,"tapas"),rQr.forEach(t),xno=r(lwe," \u2014 "),IB=n(lwe,"A",{href:!0});var tQr=s(IB);$no=r(tQr,"TapasTokenizer"),tQr.forEach(t),kno=r(lwe," (TAPAS model)"),lwe.forEach(t),Sno=i(S),Xg=n(S,"LI",{});var iwe=s(Xg);Gte=n(iwe,"STRONG",{});var aQr=s(Gte);Rno=r(aQr,"tapex"),aQr.forEach(t),Bno=r(iwe," \u2014 "),qB=n(iwe,"A",{href:!0});var nQr=s(qB);Pno=r(nQr,"TapexTokenizer"),nQr.forEach(t),Ino=r(iwe," (TAPEX model)"),iwe.forEach(t),qno=i(S),zg=n(S,"LI",{});var dwe=s(zg);Ote=n(dwe,"STRONG",{});var sQr=s(Ote);Nno=r(sQr,"transfo-xl"),sQr.forEach(t),jno=r(dwe," \u2014 "),NB=n(dwe,"A",{href:!0});var lQr=s(NB);Dno=r(lQr,"TransfoXLTokenizer"),lQr.forEach(t),Gno=r(dwe," (Transformer-XL model)"),dwe.forEach(t),Ono=i(S),As=n(S,"LI",{});var i$=s(As);Vte=n(i$,"STRONG",{});var iQr=s(Vte);Vno=r(iQr,"visual_bert"),iQr.forEach(t),Xno=r(i$," \u2014 "),jB=n(i$,"A",{href:!0});var dQr=s(jB);zno=r(dQr,"BertTokenizer"),dQr.forEach(t),Qno=r(i$," or "),DB=n(i$,"A",{href:!0});var cQr=s(DB);Wno=r(cQr,"BertTokenizerFast"),cQr.forEach(t),Hno=r(i$," (VisualBert model)"),i$.forEach(t),Uno=i(S),Qg=n(S,"LI",{});var cwe=s(Qg);Xte=n(cwe,"STRONG",{});var fQr=s(Xte);Jno=r(fQr,"wav2vec2"),fQr.forEach(t),Yno=r(cwe," \u2014 "),GB=n(cwe,"A",{href:!0});var mQr=s(GB);Kno=r(mQr,"Wav2Vec2CTCTokenizer"),mQr.forEach(t),Zno=r(cwe," (Wav2Vec2 model)"),cwe.forEach(t),eso=i(S),Wg=n(S,"LI",{});var fwe=s(Wg);zte=n(fwe,"STRONG",{});var gQr=s(zte);oso=r(gQr,"wav2vec2_phoneme"),gQr.forEach(t),rso=r(fwe," \u2014 "),OB=n(fwe,"A",{href:!0});var hQr=s(OB);tso=r(hQr,"Wav2Vec2PhonemeCTCTokenizer"),hQr.forEach(t),aso=r(fwe," (Wav2Vec2Phoneme model)"),fwe.forEach(t),nso=i(S),ys=n(S,"LI",{});var d$=s(ys);Qte=n(d$,"STRONG",{});var pQr=s(Qte);sso=r(pQr,"xglm"),pQr.forEach(t),lso=r(d$," \u2014 "),VB=n(d$,"A",{href:!0});var uQr=s(VB);iso=r(uQr,"XGLMTokenizer"),uQr.forEach(t),dso=r(d$," or "),XB=n(d$,"A",{href:!0});var _Qr=s(XB);cso=r(_Qr,"XGLMTokenizerFast"),_Qr.forEach(t),fso=r(d$," (XGLM model)"),d$.forEach(t),mso=i(S),Hg=n(S,"LI",{});var mwe=s(Hg);Wte=n(mwe,"STRONG",{});var bQr=s(Wte);gso=r(bQr,"xlm"),bQr.forEach(t),hso=r(mwe," \u2014 "),zB=n(mwe,"A",{href:!0});var vQr=s(zB);pso=r(vQr,"XLMTokenizer"),vQr.forEach(t),uso=r(mwe," (XLM model)"),mwe.forEach(t),_so=i(S),Ug=n(S,"LI",{});var gwe=s(Ug);Hte=n(gwe,"STRONG",{});var FQr=s(Hte);bso=r(FQr,"xlm-prophetnet"),FQr.forEach(t),vso=r(gwe," \u2014 "),QB=n(gwe,"A",{href:!0});var TQr=s(QB);Fso=r(TQr,"XLMProphetNetTokenizer"),TQr.forEach(t),Tso=r(gwe," (XLMProphetNet model)"),gwe.forEach(t),Mso=i(S),Ls=n(S,"LI",{});var c$=s(Ls);Ute=n(c$,"STRONG",{});var MQr=s(Ute);Eso=r(MQr,"xlm-roberta"),MQr.forEach(t),Cso=r(c$," \u2014 "),WB=n(c$,"A",{href:!0});var EQr=s(WB);wso=r(EQr,"XLMRobertaTokenizer"),EQr.forEach(t),Aso=r(c$," or "),HB=n(c$,"A",{href:!0});var CQr=s(HB);yso=r(CQr,"XLMRobertaTokenizerFast"),CQr.forEach(t),Lso=r(c$," (XLM-RoBERTa model)"),c$.forEach(t),xso=i(S),xs=n(S,"LI",{});var f$=s(xs);Jte=n(f$,"STRONG",{});var wQr=s(Jte);$so=r(wQr,"xlm-roberta-xl"),wQr.forEach(t),kso=r(f$," \u2014 "),UB=n(f$,"A",{href:!0});var AQr=s(UB);Sso=r(AQr,"RobertaTokenizer"),AQr.forEach(t),Rso=r(f$," or "),JB=n(f$,"A",{href:!0});var yQr=s(JB);Bso=r(yQr,"RobertaTokenizerFast"),yQr.forEach(t),Pso=r(f$," (XLM-RoBERTa-XL model)"),f$.forEach(t),Iso=i(S),$s=n(S,"LI",{});var m$=s($s);Yte=n(m$,"STRONG",{});var LQr=s(Yte);qso=r(LQr,"xlnet"),LQr.forEach(t),Nso=r(m$," \u2014 "),YB=n(m$,"A",{href:!0});var xQr=s(YB);jso=r(xQr,"XLNetTokenizer"),xQr.forEach(t),Dso=r(m$," or "),KB=n(m$,"A",{href:!0});var $Qr=s(KB);Gso=r($Qr,"XLNetTokenizerFast"),$Qr.forEach(t),Oso=r(m$," (XLNet model)"),m$.forEach(t),Vso=i(S),ks=n(S,"LI",{});var g$=s(ks);Kte=n(g$,"STRONG",{});var kQr=s(Kte);Xso=r(kQr,"yoso"),kQr.forEach(t),zso=r(g$," \u2014 "),ZB=n(g$,"A",{href:!0});var SQr=s(ZB);Qso=r(SQr,"AlbertTokenizer"),SQr.forEach(t),Wso=r(g$," or "),eP=n(g$,"A",{href:!0});var RQr=s(eP);Hso=r(RQr,"AlbertTokenizerFast"),RQr.forEach(t),Uso=r(g$," (YOSO model)"),g$.forEach(t),S.forEach(t),Jso=i(Is),T(Jg.$$.fragment,Is),Is.forEach(t),Yso=i(Ps),Yg=n(Ps,"DIV",{class:!0});var dNe=s(Yg);T(g0.$$.fragment,dNe),Kso=i(dNe),Zte=n(dNe,"P",{});var BQr=s(Zte);Zso=r(BQr,"Register a new tokenizer in this mapping."),BQr.forEach(t),dNe.forEach(t),Ps.forEach(t),cIe=i(f),bi=n(f,"H2",{class:!0});var cNe=s(bi);Kg=n(cNe,"A",{id:!0,class:!0,href:!0});var PQr=s(Kg);eae=n(PQr,"SPAN",{});var IQr=s(eae);T(h0.$$.fragment,IQr),IQr.forEach(t),PQr.forEach(t),elo=i(cNe),oae=n(cNe,"SPAN",{});var qQr=s(oae);olo=r(qQr,"AutoFeatureExtractor"),qQr.forEach(t),cNe.forEach(t),fIe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(p0.$$.fragment,qs),rlo=i(qs),u0=n(qs,"P",{});var fNe=s(u0);tlo=r(fNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oP=n(fNe,"A",{href:!0});var NQr=s(oP);alo=r(NQr,"AutoFeatureExtractor.from_pretrained()"),NQr.forEach(t),nlo=r(fNe," class method."),fNe.forEach(t),slo=i(qs),_0=n(qs,"P",{});var mNe=s(_0);llo=r(mNe,"This class cannot be instantiated directly using "),rae=n(mNe,"CODE",{});var jQr=s(rae);ilo=r(jQr,"__init__()"),jQr.forEach(t),dlo=r(mNe," (throws an error)."),mNe.forEach(t),clo=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(b0.$$.fragment,Yt),flo=i(Yt),tae=n(Yt,"P",{});var DQr=s(tae);mlo=r(DQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DQr.forEach(t),glo=i(Yt),wa=n(Yt,"P",{});var rA=s(wa);hlo=r(rA,"The feature extractor class to instantiate is selected based on the "),aae=n(rA,"CODE",{});var GQr=s(aae);plo=r(GQr,"model_type"),GQr.forEach(t),ulo=r(rA,` property of the config object
(either passed as an argument or loaded from `),nae=n(rA,"CODE",{});var OQr=s(nae);_lo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),blo=r(rA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sae=n(rA,"CODE",{});var VQr=s(sae);vlo=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),Flo=r(rA,":"),rA.forEach(t),Tlo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Zg=n(ae,"LI",{});var hwe=s(Zg);lae=n(hwe,"STRONG",{});var XQr=s(lae);Mlo=r(XQr,"beit"),XQr.forEach(t),Elo=r(hwe," \u2014 "),rP=n(hwe,"A",{href:!0});var zQr=s(rP);Clo=r(zQr,"BeitFeatureExtractor"),zQr.forEach(t),wlo=r(hwe," (BEiT model)"),hwe.forEach(t),Alo=i(ae),eh=n(ae,"LI",{});var pwe=s(eh);iae=n(pwe,"STRONG",{});var QQr=s(iae);ylo=r(QQr,"clip"),QQr.forEach(t),Llo=r(pwe," \u2014 "),tP=n(pwe,"A",{href:!0});var WQr=s(tP);xlo=r(WQr,"CLIPFeatureExtractor"),WQr.forEach(t),$lo=r(pwe," (CLIP model)"),pwe.forEach(t),klo=i(ae),oh=n(ae,"LI",{});var uwe=s(oh);dae=n(uwe,"STRONG",{});var HQr=s(dae);Slo=r(HQr,"convnext"),HQr.forEach(t),Rlo=r(uwe," \u2014 "),aP=n(uwe,"A",{href:!0});var UQr=s(aP);Blo=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),Plo=r(uwe," (ConvNext model)"),uwe.forEach(t),Ilo=i(ae),rh=n(ae,"LI",{});var _we=s(rh);cae=n(_we,"STRONG",{});var JQr=s(cae);qlo=r(JQr,"data2vec-audio"),JQr.forEach(t),Nlo=r(_we," \u2014 "),nP=n(_we,"A",{href:!0});var YQr=s(nP);jlo=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),Dlo=r(_we," (Data2VecAudio model)"),_we.forEach(t),Glo=i(ae),th=n(ae,"LI",{});var bwe=s(th);fae=n(bwe,"STRONG",{});var KQr=s(fae);Olo=r(KQr,"data2vec-vision"),KQr.forEach(t),Vlo=r(bwe," \u2014 "),sP=n(bwe,"A",{href:!0});var ZQr=s(sP);Xlo=r(ZQr,"BeitFeatureExtractor"),ZQr.forEach(t),zlo=r(bwe," (Data2VecVision model)"),bwe.forEach(t),Qlo=i(ae),ah=n(ae,"LI",{});var vwe=s(ah);mae=n(vwe,"STRONG",{});var eWr=s(mae);Wlo=r(eWr,"deit"),eWr.forEach(t),Hlo=r(vwe," \u2014 "),lP=n(vwe,"A",{href:!0});var oWr=s(lP);Ulo=r(oWr,"DeiTFeatureExtractor"),oWr.forEach(t),Jlo=r(vwe," (DeiT model)"),vwe.forEach(t),Ylo=i(ae),nh=n(ae,"LI",{});var Fwe=s(nh);gae=n(Fwe,"STRONG",{});var rWr=s(gae);Klo=r(rWr,"detr"),rWr.forEach(t),Zlo=r(Fwe," \u2014 "),iP=n(Fwe,"A",{href:!0});var tWr=s(iP);eio=r(tWr,"DetrFeatureExtractor"),tWr.forEach(t),oio=r(Fwe," (DETR model)"),Fwe.forEach(t),rio=i(ae),sh=n(ae,"LI",{});var Twe=s(sh);hae=n(Twe,"STRONG",{});var aWr=s(hae);tio=r(aWr,"dpt"),aWr.forEach(t),aio=r(Twe," \u2014 "),dP=n(Twe,"A",{href:!0});var nWr=s(dP);nio=r(nWr,"DPTFeatureExtractor"),nWr.forEach(t),sio=r(Twe," (DPT model)"),Twe.forEach(t),lio=i(ae),lh=n(ae,"LI",{});var Mwe=s(lh);pae=n(Mwe,"STRONG",{});var sWr=s(pae);iio=r(sWr,"flava"),sWr.forEach(t),dio=r(Mwe," \u2014 "),cP=n(Mwe,"A",{href:!0});var lWr=s(cP);cio=r(lWr,"FlavaFeatureExtractor"),lWr.forEach(t),fio=r(Mwe," (Flava model)"),Mwe.forEach(t),mio=i(ae),ih=n(ae,"LI",{});var Ewe=s(ih);uae=n(Ewe,"STRONG",{});var iWr=s(uae);gio=r(iWr,"glpn"),iWr.forEach(t),hio=r(Ewe," \u2014 "),fP=n(Ewe,"A",{href:!0});var dWr=s(fP);pio=r(dWr,"GLPNFeatureExtractor"),dWr.forEach(t),uio=r(Ewe," (GLPN model)"),Ewe.forEach(t),_io=i(ae),dh=n(ae,"LI",{});var Cwe=s(dh);_ae=n(Cwe,"STRONG",{});var cWr=s(_ae);bio=r(cWr,"hubert"),cWr.forEach(t),vio=r(Cwe," \u2014 "),mP=n(Cwe,"A",{href:!0});var fWr=s(mP);Fio=r(fWr,"Wav2Vec2FeatureExtractor"),fWr.forEach(t),Tio=r(Cwe," (Hubert model)"),Cwe.forEach(t),Mio=i(ae),ch=n(ae,"LI",{});var wwe=s(ch);bae=n(wwe,"STRONG",{});var mWr=s(bae);Eio=r(mWr,"layoutlmv2"),mWr.forEach(t),Cio=r(wwe," \u2014 "),gP=n(wwe,"A",{href:!0});var gWr=s(gP);wio=r(gWr,"LayoutLMv2FeatureExtractor"),gWr.forEach(t),Aio=r(wwe," (LayoutLMv2 model)"),wwe.forEach(t),yio=i(ae),fh=n(ae,"LI",{});var Awe=s(fh);vae=n(Awe,"STRONG",{});var hWr=s(vae);Lio=r(hWr,"maskformer"),hWr.forEach(t),xio=r(Awe," \u2014 "),hP=n(Awe,"A",{href:!0});var pWr=s(hP);$io=r(pWr,"MaskFormerFeatureExtractor"),pWr.forEach(t),kio=r(Awe," (MaskFormer model)"),Awe.forEach(t),Sio=i(ae),mh=n(ae,"LI",{});var ywe=s(mh);Fae=n(ywe,"STRONG",{});var uWr=s(Fae);Rio=r(uWr,"perceiver"),uWr.forEach(t),Bio=r(ywe," \u2014 "),pP=n(ywe,"A",{href:!0});var _Wr=s(pP);Pio=r(_Wr,"PerceiverFeatureExtractor"),_Wr.forEach(t),Iio=r(ywe," (Perceiver model)"),ywe.forEach(t),qio=i(ae),gh=n(ae,"LI",{});var Lwe=s(gh);Tae=n(Lwe,"STRONG",{});var bWr=s(Tae);Nio=r(bWr,"poolformer"),bWr.forEach(t),jio=r(Lwe," \u2014 "),uP=n(Lwe,"A",{href:!0});var vWr=s(uP);Dio=r(vWr,"PoolFormerFeatureExtractor"),vWr.forEach(t),Gio=r(Lwe," (PoolFormer model)"),Lwe.forEach(t),Oio=i(ae),hh=n(ae,"LI",{});var xwe=s(hh);Mae=n(xwe,"STRONG",{});var FWr=s(Mae);Vio=r(FWr,"regnet"),FWr.forEach(t),Xio=r(xwe," \u2014 "),_P=n(xwe,"A",{href:!0});var TWr=s(_P);zio=r(TWr,"ConvNextFeatureExtractor"),TWr.forEach(t),Qio=r(xwe," (RegNet model)"),xwe.forEach(t),Wio=i(ae),ph=n(ae,"LI",{});var $we=s(ph);Eae=n($we,"STRONG",{});var MWr=s(Eae);Hio=r(MWr,"resnet"),MWr.forEach(t),Uio=r($we," \u2014 "),bP=n($we,"A",{href:!0});var EWr=s(bP);Jio=r(EWr,"ConvNextFeatureExtractor"),EWr.forEach(t),Yio=r($we," (ResNet model)"),$we.forEach(t),Kio=i(ae),uh=n(ae,"LI",{});var kwe=s(uh);Cae=n(kwe,"STRONG",{});var CWr=s(Cae);Zio=r(CWr,"segformer"),CWr.forEach(t),edo=r(kwe," \u2014 "),vP=n(kwe,"A",{href:!0});var wWr=s(vP);odo=r(wWr,"SegformerFeatureExtractor"),wWr.forEach(t),rdo=r(kwe," (SegFormer model)"),kwe.forEach(t),tdo=i(ae),_h=n(ae,"LI",{});var Swe=s(_h);wae=n(Swe,"STRONG",{});var AWr=s(wae);ado=r(AWr,"speech_to_text"),AWr.forEach(t),ndo=r(Swe," \u2014 "),FP=n(Swe,"A",{href:!0});var yWr=s(FP);sdo=r(yWr,"Speech2TextFeatureExtractor"),yWr.forEach(t),ldo=r(Swe," (Speech2Text model)"),Swe.forEach(t),ido=i(ae),bh=n(ae,"LI",{});var Rwe=s(bh);Aae=n(Rwe,"STRONG",{});var LWr=s(Aae);ddo=r(LWr,"swin"),LWr.forEach(t),cdo=r(Rwe," \u2014 "),TP=n(Rwe,"A",{href:!0});var xWr=s(TP);fdo=r(xWr,"ViTFeatureExtractor"),xWr.forEach(t),mdo=r(Rwe," (Swin model)"),Rwe.forEach(t),gdo=i(ae),vh=n(ae,"LI",{});var Bwe=s(vh);yae=n(Bwe,"STRONG",{});var $Wr=s(yae);hdo=r($Wr,"van"),$Wr.forEach(t),pdo=r(Bwe," \u2014 "),MP=n(Bwe,"A",{href:!0});var kWr=s(MP);udo=r(kWr,"ConvNextFeatureExtractor"),kWr.forEach(t),_do=r(Bwe," (VAN model)"),Bwe.forEach(t),bdo=i(ae),Fh=n(ae,"LI",{});var Pwe=s(Fh);Lae=n(Pwe,"STRONG",{});var SWr=s(Lae);vdo=r(SWr,"vit"),SWr.forEach(t),Fdo=r(Pwe," \u2014 "),EP=n(Pwe,"A",{href:!0});var RWr=s(EP);Tdo=r(RWr,"ViTFeatureExtractor"),RWr.forEach(t),Mdo=r(Pwe," (ViT model)"),Pwe.forEach(t),Edo=i(ae),Th=n(ae,"LI",{});var Iwe=s(Th);xae=n(Iwe,"STRONG",{});var BWr=s(xae);Cdo=r(BWr,"vit_mae"),BWr.forEach(t),wdo=r(Iwe," \u2014 "),CP=n(Iwe,"A",{href:!0});var PWr=s(CP);Ado=r(PWr,"ViTFeatureExtractor"),PWr.forEach(t),ydo=r(Iwe," (ViTMAE model)"),Iwe.forEach(t),Ldo=i(ae),Mh=n(ae,"LI",{});var qwe=s(Mh);$ae=n(qwe,"STRONG",{});var IWr=s($ae);xdo=r(IWr,"wav2vec2"),IWr.forEach(t),$do=r(qwe," \u2014 "),wP=n(qwe,"A",{href:!0});var qWr=s(wP);kdo=r(qWr,"Wav2Vec2FeatureExtractor"),qWr.forEach(t),Sdo=r(qwe," (Wav2Vec2 model)"),qwe.forEach(t),Rdo=i(ae),Eh=n(ae,"LI",{});var Nwe=s(Eh);kae=n(Nwe,"STRONG",{});var NWr=s(kae);Bdo=r(NWr,"yolos"),NWr.forEach(t),Pdo=r(Nwe," \u2014 "),AP=n(Nwe,"A",{href:!0});var jWr=s(AP);Ido=r(jWr,"YolosFeatureExtractor"),jWr.forEach(t),qdo=r(Nwe," (YOLOS model)"),Nwe.forEach(t),ae.forEach(t),Ndo=i(Yt),T(Ch.$$.fragment,Yt),jdo=i(Yt),T(wh.$$.fragment,Yt),Yt.forEach(t),Ddo=i(qs),Ah=n(qs,"DIV",{class:!0});var gNe=s(Ah);T(v0.$$.fragment,gNe),Gdo=i(gNe),Sae=n(gNe,"P",{});var DWr=s(Sae);Odo=r(DWr,"Register a new feature extractor for this class."),DWr.forEach(t),gNe.forEach(t),qs.forEach(t),mIe=i(f),vi=n(f,"H2",{class:!0});var hNe=s(vi);yh=n(hNe,"A",{id:!0,class:!0,href:!0});var GWr=s(yh);Rae=n(GWr,"SPAN",{});var OWr=s(Rae);T(F0.$$.fragment,OWr),OWr.forEach(t),GWr.forEach(t),Vdo=i(hNe),Bae=n(hNe,"SPAN",{});var VWr=s(Bae);Xdo=r(VWr,"AutoProcessor"),VWr.forEach(t),hNe.forEach(t),gIe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(T0.$$.fragment,Ns),zdo=i(Ns),M0=n(Ns,"P",{});var pNe=s(M0);Qdo=r(pNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yP=n(pNe,"A",{href:!0});var XWr=s(yP);Wdo=r(XWr,"AutoProcessor.from_pretrained()"),XWr.forEach(t),Hdo=r(pNe," class method."),pNe.forEach(t),Udo=i(Ns),E0=n(Ns,"P",{});var uNe=s(E0);Jdo=r(uNe,"This class cannot be instantiated directly using "),Pae=n(uNe,"CODE",{});var zWr=s(Pae);Ydo=r(zWr,"__init__()"),zWr.forEach(t),Kdo=r(uNe," (throws an error)."),uNe.forEach(t),Zdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(C0.$$.fragment,Kt),eco=i(Kt),Iae=n(Kt,"P",{});var QWr=s(Iae);oco=r(QWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),QWr.forEach(t),rco=i(Kt),Fi=n(Kt,"P",{});var gK=s(Fi);tco=r(gK,"The processor class to instantiate is selected based on the "),qae=n(gK,"CODE",{});var WWr=s(qae);aco=r(WWr,"model_type"),WWr.forEach(t),nco=r(gK,` property of the config object (either
passed as an argument or loaded from `),Nae=n(gK,"CODE",{});var HWr=s(Nae);sco=r(HWr,"pretrained_model_name_or_path"),HWr.forEach(t),lco=r(gK," if possible):"),gK.forEach(t),ico=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Lh=n(Fe,"LI",{});var jwe=s(Lh);jae=n(jwe,"STRONG",{});var UWr=s(jae);dco=r(UWr,"clip"),UWr.forEach(t),cco=r(jwe," \u2014 "),LP=n(jwe,"A",{href:!0});var JWr=s(LP);fco=r(JWr,"CLIPProcessor"),JWr.forEach(t),mco=r(jwe," (CLIP model)"),jwe.forEach(t),gco=i(Fe),xh=n(Fe,"LI",{});var Dwe=s(xh);Dae=n(Dwe,"STRONG",{});var YWr=s(Dae);hco=r(YWr,"flava"),YWr.forEach(t),pco=r(Dwe," \u2014 "),Gae=n(Dwe,"CODE",{});var KWr=s(Gae);uco=r(KWr,"FLAVAProcessor"),KWr.forEach(t),_co=r(Dwe," (Flava model)"),Dwe.forEach(t),bco=i(Fe),$h=n(Fe,"LI",{});var Gwe=s($h);Oae=n(Gwe,"STRONG",{});var ZWr=s(Oae);vco=r(ZWr,"layoutlmv2"),ZWr.forEach(t),Fco=r(Gwe," \u2014 "),xP=n(Gwe,"A",{href:!0});var eHr=s(xP);Tco=r(eHr,"LayoutLMv2Processor"),eHr.forEach(t),Mco=r(Gwe," (LayoutLMv2 model)"),Gwe.forEach(t),Eco=i(Fe),kh=n(Fe,"LI",{});var Owe=s(kh);Vae=n(Owe,"STRONG",{});var oHr=s(Vae);Cco=r(oHr,"layoutxlm"),oHr.forEach(t),wco=r(Owe," \u2014 "),$P=n(Owe,"A",{href:!0});var rHr=s($P);Aco=r(rHr,"LayoutXLMProcessor"),rHr.forEach(t),yco=r(Owe," (LayoutXLM model)"),Owe.forEach(t),Lco=i(Fe),Sh=n(Fe,"LI",{});var Vwe=s(Sh);Xae=n(Vwe,"STRONG",{});var tHr=s(Xae);xco=r(tHr,"sew"),tHr.forEach(t),$co=r(Vwe," \u2014 "),kP=n(Vwe,"A",{href:!0});var aHr=s(kP);kco=r(aHr,"Wav2Vec2Processor"),aHr.forEach(t),Sco=r(Vwe," (SEW model)"),Vwe.forEach(t),Rco=i(Fe),Rh=n(Fe,"LI",{});var Xwe=s(Rh);zae=n(Xwe,"STRONG",{});var nHr=s(zae);Bco=r(nHr,"sew-d"),nHr.forEach(t),Pco=r(Xwe," \u2014 "),SP=n(Xwe,"A",{href:!0});var sHr=s(SP);Ico=r(sHr,"Wav2Vec2Processor"),sHr.forEach(t),qco=r(Xwe," (SEW-D model)"),Xwe.forEach(t),Nco=i(Fe),Bh=n(Fe,"LI",{});var zwe=s(Bh);Qae=n(zwe,"STRONG",{});var lHr=s(Qae);jco=r(lHr,"speech_to_text"),lHr.forEach(t),Dco=r(zwe," \u2014 "),RP=n(zwe,"A",{href:!0});var iHr=s(RP);Gco=r(iHr,"Speech2TextProcessor"),iHr.forEach(t),Oco=r(zwe," (Speech2Text model)"),zwe.forEach(t),Vco=i(Fe),Ph=n(Fe,"LI",{});var Qwe=s(Ph);Wae=n(Qwe,"STRONG",{});var dHr=s(Wae);Xco=r(dHr,"speech_to_text_2"),dHr.forEach(t),zco=r(Qwe," \u2014 "),BP=n(Qwe,"A",{href:!0});var cHr=s(BP);Qco=r(cHr,"Speech2Text2Processor"),cHr.forEach(t),Wco=r(Qwe," (Speech2Text2 model)"),Qwe.forEach(t),Hco=i(Fe),Ih=n(Fe,"LI",{});var Wwe=s(Ih);Hae=n(Wwe,"STRONG",{});var fHr=s(Hae);Uco=r(fHr,"trocr"),fHr.forEach(t),Jco=r(Wwe," \u2014 "),PP=n(Wwe,"A",{href:!0});var mHr=s(PP);Yco=r(mHr,"TrOCRProcessor"),mHr.forEach(t),Kco=r(Wwe," (TrOCR model)"),Wwe.forEach(t),Zco=i(Fe),qh=n(Fe,"LI",{});var Hwe=s(qh);Uae=n(Hwe,"STRONG",{});var gHr=s(Uae);efo=r(gHr,"unispeech"),gHr.forEach(t),ofo=r(Hwe," \u2014 "),IP=n(Hwe,"A",{href:!0});var hHr=s(IP);rfo=r(hHr,"Wav2Vec2Processor"),hHr.forEach(t),tfo=r(Hwe," (UniSpeech model)"),Hwe.forEach(t),afo=i(Fe),Nh=n(Fe,"LI",{});var Uwe=s(Nh);Jae=n(Uwe,"STRONG",{});var pHr=s(Jae);nfo=r(pHr,"unispeech-sat"),pHr.forEach(t),sfo=r(Uwe," \u2014 "),qP=n(Uwe,"A",{href:!0});var uHr=s(qP);lfo=r(uHr,"Wav2Vec2Processor"),uHr.forEach(t),ifo=r(Uwe," (UniSpeechSat model)"),Uwe.forEach(t),dfo=i(Fe),jh=n(Fe,"LI",{});var Jwe=s(jh);Yae=n(Jwe,"STRONG",{});var _Hr=s(Yae);cfo=r(_Hr,"vilt"),_Hr.forEach(t),ffo=r(Jwe," \u2014 "),NP=n(Jwe,"A",{href:!0});var bHr=s(NP);mfo=r(bHr,"ViltProcessor"),bHr.forEach(t),gfo=r(Jwe," (ViLT model)"),Jwe.forEach(t),hfo=i(Fe),Dh=n(Fe,"LI",{});var Ywe=s(Dh);Kae=n(Ywe,"STRONG",{});var vHr=s(Kae);pfo=r(vHr,"vision-text-dual-encoder"),vHr.forEach(t),ufo=r(Ywe," \u2014 "),jP=n(Ywe,"A",{href:!0});var FHr=s(jP);_fo=r(FHr,"VisionTextDualEncoderProcessor"),FHr.forEach(t),bfo=r(Ywe," (VisionTextDualEncoder model)"),Ywe.forEach(t),vfo=i(Fe),Gh=n(Fe,"LI",{});var Kwe=s(Gh);Zae=n(Kwe,"STRONG",{});var THr=s(Zae);Ffo=r(THr,"wav2vec2"),THr.forEach(t),Tfo=r(Kwe," \u2014 "),DP=n(Kwe,"A",{href:!0});var MHr=s(DP);Mfo=r(MHr,"Wav2Vec2Processor"),MHr.forEach(t),Efo=r(Kwe," (Wav2Vec2 model)"),Kwe.forEach(t),Cfo=i(Fe),Oh=n(Fe,"LI",{});var Zwe=s(Oh);ene=n(Zwe,"STRONG",{});var EHr=s(ene);wfo=r(EHr,"wavlm"),EHr.forEach(t),Afo=r(Zwe," \u2014 "),GP=n(Zwe,"A",{href:!0});var CHr=s(GP);yfo=r(CHr,"Wav2Vec2Processor"),CHr.forEach(t),Lfo=r(Zwe," (WavLM model)"),Zwe.forEach(t),Fe.forEach(t),xfo=i(Kt),T(Vh.$$.fragment,Kt),$fo=i(Kt),T(Xh.$$.fragment,Kt),Kt.forEach(t),kfo=i(Ns),zh=n(Ns,"DIV",{class:!0});var _Ne=s(zh);T(w0.$$.fragment,_Ne),Sfo=i(_Ne),one=n(_Ne,"P",{});var wHr=s(one);Rfo=r(wHr,"Register a new processor for this class."),wHr.forEach(t),_Ne.forEach(t),Ns.forEach(t),hIe=i(f),Ti=n(f,"H2",{class:!0});var bNe=s(Ti);Qh=n(bNe,"A",{id:!0,class:!0,href:!0});var AHr=s(Qh);rne=n(AHr,"SPAN",{});var yHr=s(rne);T(A0.$$.fragment,yHr),yHr.forEach(t),AHr.forEach(t),Bfo=i(bNe),tne=n(bNe,"SPAN",{});var LHr=s(tne);Pfo=r(LHr,"AutoModel"),LHr.forEach(t),bNe.forEach(t),pIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(y0.$$.fragment,js),Ifo=i(js),Mi=n(js,"P",{});var hK=s(Mi);qfo=r(hK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OP=n(hK,"A",{href:!0});var xHr=s(OP);Nfo=r(xHr,"from_pretrained()"),xHr.forEach(t),jfo=r(hK," class method or the "),VP=n(hK,"A",{href:!0});var $Hr=s(VP);Dfo=r($Hr,"from_config()"),$Hr.forEach(t),Gfo=r(hK,` class
method.`),hK.forEach(t),Ofo=i(js),L0=n(js,"P",{});var vNe=s(L0);Vfo=r(vNe,"This class cannot be instantiated directly using "),ane=n(vNe,"CODE",{});var kHr=s(ane);Xfo=r(kHr,"__init__()"),kHr.forEach(t),zfo=r(vNe," (throws an error)."),vNe.forEach(t),Qfo=i(js),ot=n(js,"DIV",{class:!0});var tA=s(ot);T(x0.$$.fragment,tA),Wfo=i(tA),nne=n(tA,"P",{});var SHr=s(nne);Hfo=r(SHr,"Instantiates one of the base model classes of the library from a configuration."),SHr.forEach(t),Ufo=i(tA),Ei=n(tA,"P",{});var pK=s(Ei);Jfo=r(pK,`Note:
Loading a model from its configuration file does `),sne=n(pK,"STRONG",{});var RHr=s(sne);Yfo=r(RHr,"not"),RHr.forEach(t),Kfo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XP=n(pK,"A",{href:!0});var BHr=s(XP);Zfo=r(BHr,"from_pretrained()"),BHr.forEach(t),emo=r(pK," to load the model weights."),pK.forEach(t),omo=i(tA),T(Wh.$$.fragment,tA),tA.forEach(t),rmo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T($0.$$.fragment,Zt),tmo=i(Zt),lne=n(Zt,"P",{});var PHr=s(lne);amo=r(PHr,"Instantiate one of the base model classes of the library from a pretrained model."),PHr.forEach(t),nmo=i(Zt),Aa=n(Zt,"P",{});var aA=s(Aa);smo=r(aA,"The model class to instantiate is selected based on the "),ine=n(aA,"CODE",{});var IHr=s(ine);lmo=r(IHr,"model_type"),IHr.forEach(t),imo=r(aA,` property of the config object (either
passed as an argument or loaded from `),dne=n(aA,"CODE",{});var qHr=s(dne);dmo=r(qHr,"pretrained_model_name_or_path"),qHr.forEach(t),cmo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=n(aA,"CODE",{});var NHr=s(cne);fmo=r(NHr,"pretrained_model_name_or_path"),NHr.forEach(t),mmo=r(aA,":"),aA.forEach(t),gmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Hh=n($,"LI",{});var eAe=s(Hh);fne=n(eAe,"STRONG",{});var jHr=s(fne);hmo=r(jHr,"albert"),jHr.forEach(t),pmo=r(eAe," \u2014 "),zP=n(eAe,"A",{href:!0});var DHr=s(zP);umo=r(DHr,"AlbertModel"),DHr.forEach(t),_mo=r(eAe," (ALBERT model)"),eAe.forEach(t),bmo=i($),Uh=n($,"LI",{});var oAe=s(Uh);mne=n(oAe,"STRONG",{});var GHr=s(mne);vmo=r(GHr,"bart"),GHr.forEach(t),Fmo=r(oAe," \u2014 "),QP=n(oAe,"A",{href:!0});var OHr=s(QP);Tmo=r(OHr,"BartModel"),OHr.forEach(t),Mmo=r(oAe," (BART model)"),oAe.forEach(t),Emo=i($),Jh=n($,"LI",{});var rAe=s(Jh);gne=n(rAe,"STRONG",{});var VHr=s(gne);Cmo=r(VHr,"beit"),VHr.forEach(t),wmo=r(rAe," \u2014 "),WP=n(rAe,"A",{href:!0});var XHr=s(WP);Amo=r(XHr,"BeitModel"),XHr.forEach(t),ymo=r(rAe," (BEiT model)"),rAe.forEach(t),Lmo=i($),Yh=n($,"LI",{});var tAe=s(Yh);hne=n(tAe,"STRONG",{});var zHr=s(hne);xmo=r(zHr,"bert"),zHr.forEach(t),$mo=r(tAe," \u2014 "),HP=n(tAe,"A",{href:!0});var QHr=s(HP);kmo=r(QHr,"BertModel"),QHr.forEach(t),Smo=r(tAe," (BERT model)"),tAe.forEach(t),Rmo=i($),Kh=n($,"LI",{});var aAe=s(Kh);pne=n(aAe,"STRONG",{});var WHr=s(pne);Bmo=r(WHr,"bert-generation"),WHr.forEach(t),Pmo=r(aAe," \u2014 "),UP=n(aAe,"A",{href:!0});var HHr=s(UP);Imo=r(HHr,"BertGenerationEncoder"),HHr.forEach(t),qmo=r(aAe," (Bert Generation model)"),aAe.forEach(t),Nmo=i($),Zh=n($,"LI",{});var nAe=s(Zh);une=n(nAe,"STRONG",{});var UHr=s(une);jmo=r(UHr,"big_bird"),UHr.forEach(t),Dmo=r(nAe," \u2014 "),JP=n(nAe,"A",{href:!0});var JHr=s(JP);Gmo=r(JHr,"BigBirdModel"),JHr.forEach(t),Omo=r(nAe," (BigBird model)"),nAe.forEach(t),Vmo=i($),ep=n($,"LI",{});var sAe=s(ep);_ne=n(sAe,"STRONG",{});var YHr=s(_ne);Xmo=r(YHr,"bigbird_pegasus"),YHr.forEach(t),zmo=r(sAe," \u2014 "),YP=n(sAe,"A",{href:!0});var KHr=s(YP);Qmo=r(KHr,"BigBirdPegasusModel"),KHr.forEach(t),Wmo=r(sAe," (BigBirdPegasus model)"),sAe.forEach(t),Hmo=i($),op=n($,"LI",{});var lAe=s(op);bne=n(lAe,"STRONG",{});var ZHr=s(bne);Umo=r(ZHr,"blenderbot"),ZHr.forEach(t),Jmo=r(lAe," \u2014 "),KP=n(lAe,"A",{href:!0});var eUr=s(KP);Ymo=r(eUr,"BlenderbotModel"),eUr.forEach(t),Kmo=r(lAe," (Blenderbot model)"),lAe.forEach(t),Zmo=i($),rp=n($,"LI",{});var iAe=s(rp);vne=n(iAe,"STRONG",{});var oUr=s(vne);ego=r(oUr,"blenderbot-small"),oUr.forEach(t),ogo=r(iAe," \u2014 "),ZP=n(iAe,"A",{href:!0});var rUr=s(ZP);rgo=r(rUr,"BlenderbotSmallModel"),rUr.forEach(t),tgo=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),ago=i($),tp=n($,"LI",{});var dAe=s(tp);Fne=n(dAe,"STRONG",{});var tUr=s(Fne);ngo=r(tUr,"camembert"),tUr.forEach(t),sgo=r(dAe," \u2014 "),eI=n(dAe,"A",{href:!0});var aUr=s(eI);lgo=r(aUr,"CamembertModel"),aUr.forEach(t),igo=r(dAe," (CamemBERT model)"),dAe.forEach(t),dgo=i($),ap=n($,"LI",{});var cAe=s(ap);Tne=n(cAe,"STRONG",{});var nUr=s(Tne);cgo=r(nUr,"canine"),nUr.forEach(t),fgo=r(cAe," \u2014 "),oI=n(cAe,"A",{href:!0});var sUr=s(oI);mgo=r(sUr,"CanineModel"),sUr.forEach(t),ggo=r(cAe," (Canine model)"),cAe.forEach(t),hgo=i($),np=n($,"LI",{});var fAe=s(np);Mne=n(fAe,"STRONG",{});var lUr=s(Mne);pgo=r(lUr,"clip"),lUr.forEach(t),ugo=r(fAe," \u2014 "),rI=n(fAe,"A",{href:!0});var iUr=s(rI);_go=r(iUr,"CLIPModel"),iUr.forEach(t),bgo=r(fAe," (CLIP model)"),fAe.forEach(t),vgo=i($),sp=n($,"LI",{});var mAe=s(sp);Ene=n(mAe,"STRONG",{});var dUr=s(Ene);Fgo=r(dUr,"convbert"),dUr.forEach(t),Tgo=r(mAe," \u2014 "),tI=n(mAe,"A",{href:!0});var cUr=s(tI);Mgo=r(cUr,"ConvBertModel"),cUr.forEach(t),Ego=r(mAe," (ConvBERT model)"),mAe.forEach(t),Cgo=i($),lp=n($,"LI",{});var gAe=s(lp);Cne=n(gAe,"STRONG",{});var fUr=s(Cne);wgo=r(fUr,"convnext"),fUr.forEach(t),Ago=r(gAe," \u2014 "),aI=n(gAe,"A",{href:!0});var mUr=s(aI);ygo=r(mUr,"ConvNextModel"),mUr.forEach(t),Lgo=r(gAe," (ConvNext model)"),gAe.forEach(t),xgo=i($),ip=n($,"LI",{});var hAe=s(ip);wne=n(hAe,"STRONG",{});var gUr=s(wne);$go=r(gUr,"ctrl"),gUr.forEach(t),kgo=r(hAe," \u2014 "),nI=n(hAe,"A",{href:!0});var hUr=s(nI);Sgo=r(hUr,"CTRLModel"),hUr.forEach(t),Rgo=r(hAe," (CTRL model)"),hAe.forEach(t),Bgo=i($),dp=n($,"LI",{});var pAe=s(dp);Ane=n(pAe,"STRONG",{});var pUr=s(Ane);Pgo=r(pUr,"cvt"),pUr.forEach(t),Igo=r(pAe," \u2014 "),sI=n(pAe,"A",{href:!0});var uUr=s(sI);qgo=r(uUr,"CvtModel"),uUr.forEach(t),Ngo=r(pAe," (CvT model)"),pAe.forEach(t),jgo=i($),cp=n($,"LI",{});var uAe=s(cp);yne=n(uAe,"STRONG",{});var _Ur=s(yne);Dgo=r(_Ur,"data2vec-audio"),_Ur.forEach(t),Ggo=r(uAe," \u2014 "),lI=n(uAe,"A",{href:!0});var bUr=s(lI);Ogo=r(bUr,"Data2VecAudioModel"),bUr.forEach(t),Vgo=r(uAe," (Data2VecAudio model)"),uAe.forEach(t),Xgo=i($),fp=n($,"LI",{});var _Ae=s(fp);Lne=n(_Ae,"STRONG",{});var vUr=s(Lne);zgo=r(vUr,"data2vec-text"),vUr.forEach(t),Qgo=r(_Ae," \u2014 "),iI=n(_Ae,"A",{href:!0});var FUr=s(iI);Wgo=r(FUr,"Data2VecTextModel"),FUr.forEach(t),Hgo=r(_Ae," (Data2VecText model)"),_Ae.forEach(t),Ugo=i($),mp=n($,"LI",{});var bAe=s(mp);xne=n(bAe,"STRONG",{});var TUr=s(xne);Jgo=r(TUr,"data2vec-vision"),TUr.forEach(t),Ygo=r(bAe," \u2014 "),dI=n(bAe,"A",{href:!0});var MUr=s(dI);Kgo=r(MUr,"Data2VecVisionModel"),MUr.forEach(t),Zgo=r(bAe," (Data2VecVision model)"),bAe.forEach(t),eho=i($),gp=n($,"LI",{});var vAe=s(gp);$ne=n(vAe,"STRONG",{});var EUr=s($ne);oho=r(EUr,"deberta"),EUr.forEach(t),rho=r(vAe," \u2014 "),cI=n(vAe,"A",{href:!0});var CUr=s(cI);tho=r(CUr,"DebertaModel"),CUr.forEach(t),aho=r(vAe," (DeBERTa model)"),vAe.forEach(t),nho=i($),hp=n($,"LI",{});var FAe=s(hp);kne=n(FAe,"STRONG",{});var wUr=s(kne);sho=r(wUr,"deberta-v2"),wUr.forEach(t),lho=r(FAe," \u2014 "),fI=n(FAe,"A",{href:!0});var AUr=s(fI);iho=r(AUr,"DebertaV2Model"),AUr.forEach(t),dho=r(FAe," (DeBERTa-v2 model)"),FAe.forEach(t),cho=i($),pp=n($,"LI",{});var TAe=s(pp);Sne=n(TAe,"STRONG",{});var yUr=s(Sne);fho=r(yUr,"decision_transformer"),yUr.forEach(t),mho=r(TAe," \u2014 "),mI=n(TAe,"A",{href:!0});var LUr=s(mI);gho=r(LUr,"DecisionTransformerModel"),LUr.forEach(t),hho=r(TAe," (Decision Transformer model)"),TAe.forEach(t),pho=i($),up=n($,"LI",{});var MAe=s(up);Rne=n(MAe,"STRONG",{});var xUr=s(Rne);uho=r(xUr,"deit"),xUr.forEach(t),_ho=r(MAe," \u2014 "),gI=n(MAe,"A",{href:!0});var $Ur=s(gI);bho=r($Ur,"DeiTModel"),$Ur.forEach(t),vho=r(MAe," (DeiT model)"),MAe.forEach(t),Fho=i($),_p=n($,"LI",{});var EAe=s(_p);Bne=n(EAe,"STRONG",{});var kUr=s(Bne);Tho=r(kUr,"detr"),kUr.forEach(t),Mho=r(EAe," \u2014 "),hI=n(EAe,"A",{href:!0});var SUr=s(hI);Eho=r(SUr,"DetrModel"),SUr.forEach(t),Cho=r(EAe," (DETR model)"),EAe.forEach(t),who=i($),bp=n($,"LI",{});var CAe=s(bp);Pne=n(CAe,"STRONG",{});var RUr=s(Pne);Aho=r(RUr,"distilbert"),RUr.forEach(t),yho=r(CAe," \u2014 "),pI=n(CAe,"A",{href:!0});var BUr=s(pI);Lho=r(BUr,"DistilBertModel"),BUr.forEach(t),xho=r(CAe," (DistilBERT model)"),CAe.forEach(t),$ho=i($),vp=n($,"LI",{});var wAe=s(vp);Ine=n(wAe,"STRONG",{});var PUr=s(Ine);kho=r(PUr,"dpr"),PUr.forEach(t),Sho=r(wAe," \u2014 "),uI=n(wAe,"A",{href:!0});var IUr=s(uI);Rho=r(IUr,"DPRQuestionEncoder"),IUr.forEach(t),Bho=r(wAe," (DPR model)"),wAe.forEach(t),Pho=i($),Fp=n($,"LI",{});var AAe=s(Fp);qne=n(AAe,"STRONG",{});var qUr=s(qne);Iho=r(qUr,"dpt"),qUr.forEach(t),qho=r(AAe," \u2014 "),_I=n(AAe,"A",{href:!0});var NUr=s(_I);Nho=r(NUr,"DPTModel"),NUr.forEach(t),jho=r(AAe," (DPT model)"),AAe.forEach(t),Dho=i($),Tp=n($,"LI",{});var yAe=s(Tp);Nne=n(yAe,"STRONG",{});var jUr=s(Nne);Gho=r(jUr,"electra"),jUr.forEach(t),Oho=r(yAe," \u2014 "),bI=n(yAe,"A",{href:!0});var DUr=s(bI);Vho=r(DUr,"ElectraModel"),DUr.forEach(t),Xho=r(yAe," (ELECTRA model)"),yAe.forEach(t),zho=i($),Mp=n($,"LI",{});var LAe=s(Mp);jne=n(LAe,"STRONG",{});var GUr=s(jne);Qho=r(GUr,"flaubert"),GUr.forEach(t),Who=r(LAe," \u2014 "),vI=n(LAe,"A",{href:!0});var OUr=s(vI);Hho=r(OUr,"FlaubertModel"),OUr.forEach(t),Uho=r(LAe," (FlauBERT model)"),LAe.forEach(t),Jho=i($),Ep=n($,"LI",{});var xAe=s(Ep);Dne=n(xAe,"STRONG",{});var VUr=s(Dne);Yho=r(VUr,"flava"),VUr.forEach(t),Kho=r(xAe," \u2014 "),FI=n(xAe,"A",{href:!0});var XUr=s(FI);Zho=r(XUr,"FlavaModel"),XUr.forEach(t),epo=r(xAe," (Flava model)"),xAe.forEach(t),opo=i($),Cp=n($,"LI",{});var $Ae=s(Cp);Gne=n($Ae,"STRONG",{});var zUr=s(Gne);rpo=r(zUr,"fnet"),zUr.forEach(t),tpo=r($Ae," \u2014 "),TI=n($Ae,"A",{href:!0});var QUr=s(TI);apo=r(QUr,"FNetModel"),QUr.forEach(t),npo=r($Ae," (FNet model)"),$Ae.forEach(t),spo=i($),wp=n($,"LI",{});var kAe=s(wp);One=n(kAe,"STRONG",{});var WUr=s(One);lpo=r(WUr,"fsmt"),WUr.forEach(t),ipo=r(kAe," \u2014 "),MI=n(kAe,"A",{href:!0});var HUr=s(MI);dpo=r(HUr,"FSMTModel"),HUr.forEach(t),cpo=r(kAe," (FairSeq Machine-Translation model)"),kAe.forEach(t),fpo=i($),Ss=n($,"LI",{});var h$=s(Ss);Vne=n(h$,"STRONG",{});var UUr=s(Vne);mpo=r(UUr,"funnel"),UUr.forEach(t),gpo=r(h$," \u2014 "),EI=n(h$,"A",{href:!0});var JUr=s(EI);hpo=r(JUr,"FunnelModel"),JUr.forEach(t),ppo=r(h$," or "),CI=n(h$,"A",{href:!0});var YUr=s(CI);upo=r(YUr,"FunnelBaseModel"),YUr.forEach(t),_po=r(h$," (Funnel Transformer model)"),h$.forEach(t),bpo=i($),Ap=n($,"LI",{});var SAe=s(Ap);Xne=n(SAe,"STRONG",{});var KUr=s(Xne);vpo=r(KUr,"glpn"),KUr.forEach(t),Fpo=r(SAe," \u2014 "),wI=n(SAe,"A",{href:!0});var ZUr=s(wI);Tpo=r(ZUr,"GLPNModel"),ZUr.forEach(t),Mpo=r(SAe," (GLPN model)"),SAe.forEach(t),Epo=i($),yp=n($,"LI",{});var RAe=s(yp);zne=n(RAe,"STRONG",{});var eJr=s(zne);Cpo=r(eJr,"gpt2"),eJr.forEach(t),wpo=r(RAe," \u2014 "),AI=n(RAe,"A",{href:!0});var oJr=s(AI);Apo=r(oJr,"GPT2Model"),oJr.forEach(t),ypo=r(RAe," (OpenAI GPT-2 model)"),RAe.forEach(t),Lpo=i($),Lp=n($,"LI",{});var BAe=s(Lp);Qne=n(BAe,"STRONG",{});var rJr=s(Qne);xpo=r(rJr,"gpt_neo"),rJr.forEach(t),$po=r(BAe," \u2014 "),yI=n(BAe,"A",{href:!0});var tJr=s(yI);kpo=r(tJr,"GPTNeoModel"),tJr.forEach(t),Spo=r(BAe," (GPT Neo model)"),BAe.forEach(t),Rpo=i($),xp=n($,"LI",{});var PAe=s(xp);Wne=n(PAe,"STRONG",{});var aJr=s(Wne);Bpo=r(aJr,"gptj"),aJr.forEach(t),Ppo=r(PAe," \u2014 "),LI=n(PAe,"A",{href:!0});var nJr=s(LI);Ipo=r(nJr,"GPTJModel"),nJr.forEach(t),qpo=r(PAe," (GPT-J model)"),PAe.forEach(t),Npo=i($),$p=n($,"LI",{});var IAe=s($p);Hne=n(IAe,"STRONG",{});var sJr=s(Hne);jpo=r(sJr,"hubert"),sJr.forEach(t),Dpo=r(IAe," \u2014 "),xI=n(IAe,"A",{href:!0});var lJr=s(xI);Gpo=r(lJr,"HubertModel"),lJr.forEach(t),Opo=r(IAe," (Hubert model)"),IAe.forEach(t),Vpo=i($),kp=n($,"LI",{});var qAe=s(kp);Une=n(qAe,"STRONG",{});var iJr=s(Une);Xpo=r(iJr,"ibert"),iJr.forEach(t),zpo=r(qAe," \u2014 "),$I=n(qAe,"A",{href:!0});var dJr=s($I);Qpo=r(dJr,"IBertModel"),dJr.forEach(t),Wpo=r(qAe," (I-BERT model)"),qAe.forEach(t),Hpo=i($),Sp=n($,"LI",{});var NAe=s(Sp);Jne=n(NAe,"STRONG",{});var cJr=s(Jne);Upo=r(cJr,"imagegpt"),cJr.forEach(t),Jpo=r(NAe," \u2014 "),kI=n(NAe,"A",{href:!0});var fJr=s(kI);Ypo=r(fJr,"ImageGPTModel"),fJr.forEach(t),Kpo=r(NAe," (ImageGPT model)"),NAe.forEach(t),Zpo=i($),Rp=n($,"LI",{});var jAe=s(Rp);Yne=n(jAe,"STRONG",{});var mJr=s(Yne);euo=r(mJr,"layoutlm"),mJr.forEach(t),ouo=r(jAe," \u2014 "),SI=n(jAe,"A",{href:!0});var gJr=s(SI);ruo=r(gJr,"LayoutLMModel"),gJr.forEach(t),tuo=r(jAe," (LayoutLM model)"),jAe.forEach(t),auo=i($),Bp=n($,"LI",{});var DAe=s(Bp);Kne=n(DAe,"STRONG",{});var hJr=s(Kne);nuo=r(hJr,"layoutlmv2"),hJr.forEach(t),suo=r(DAe," \u2014 "),RI=n(DAe,"A",{href:!0});var pJr=s(RI);luo=r(pJr,"LayoutLMv2Model"),pJr.forEach(t),iuo=r(DAe," (LayoutLMv2 model)"),DAe.forEach(t),duo=i($),Pp=n($,"LI",{});var GAe=s(Pp);Zne=n(GAe,"STRONG",{});var uJr=s(Zne);cuo=r(uJr,"led"),uJr.forEach(t),fuo=r(GAe," \u2014 "),BI=n(GAe,"A",{href:!0});var _Jr=s(BI);muo=r(_Jr,"LEDModel"),_Jr.forEach(t),guo=r(GAe," (LED model)"),GAe.forEach(t),huo=i($),Ip=n($,"LI",{});var OAe=s(Ip);ese=n(OAe,"STRONG",{});var bJr=s(ese);puo=r(bJr,"longformer"),bJr.forEach(t),uuo=r(OAe," \u2014 "),PI=n(OAe,"A",{href:!0});var vJr=s(PI);_uo=r(vJr,"LongformerModel"),vJr.forEach(t),buo=r(OAe," (Longformer model)"),OAe.forEach(t),vuo=i($),qp=n($,"LI",{});var VAe=s(qp);ose=n(VAe,"STRONG",{});var FJr=s(ose);Fuo=r(FJr,"luke"),FJr.forEach(t),Tuo=r(VAe," \u2014 "),II=n(VAe,"A",{href:!0});var TJr=s(II);Muo=r(TJr,"LukeModel"),TJr.forEach(t),Euo=r(VAe," (LUKE model)"),VAe.forEach(t),Cuo=i($),Np=n($,"LI",{});var XAe=s(Np);rse=n(XAe,"STRONG",{});var MJr=s(rse);wuo=r(MJr,"lxmert"),MJr.forEach(t),Auo=r(XAe," \u2014 "),qI=n(XAe,"A",{href:!0});var EJr=s(qI);yuo=r(EJr,"LxmertModel"),EJr.forEach(t),Luo=r(XAe," (LXMERT model)"),XAe.forEach(t),xuo=i($),jp=n($,"LI",{});var zAe=s(jp);tse=n(zAe,"STRONG",{});var CJr=s(tse);$uo=r(CJr,"m2m_100"),CJr.forEach(t),kuo=r(zAe," \u2014 "),NI=n(zAe,"A",{href:!0});var wJr=s(NI);Suo=r(wJr,"M2M100Model"),wJr.forEach(t),Ruo=r(zAe," (M2M100 model)"),zAe.forEach(t),Buo=i($),Dp=n($,"LI",{});var QAe=s(Dp);ase=n(QAe,"STRONG",{});var AJr=s(ase);Puo=r(AJr,"marian"),AJr.forEach(t),Iuo=r(QAe," \u2014 "),jI=n(QAe,"A",{href:!0});var yJr=s(jI);quo=r(yJr,"MarianModel"),yJr.forEach(t),Nuo=r(QAe," (Marian model)"),QAe.forEach(t),juo=i($),Gp=n($,"LI",{});var WAe=s(Gp);nse=n(WAe,"STRONG",{});var LJr=s(nse);Duo=r(LJr,"maskformer"),LJr.forEach(t),Guo=r(WAe," \u2014 "),DI=n(WAe,"A",{href:!0});var xJr=s(DI);Ouo=r(xJr,"MaskFormerModel"),xJr.forEach(t),Vuo=r(WAe," (MaskFormer model)"),WAe.forEach(t),Xuo=i($),Op=n($,"LI",{});var HAe=s(Op);sse=n(HAe,"STRONG",{});var $Jr=s(sse);zuo=r($Jr,"mbart"),$Jr.forEach(t),Quo=r(HAe," \u2014 "),GI=n(HAe,"A",{href:!0});var kJr=s(GI);Wuo=r(kJr,"MBartModel"),kJr.forEach(t),Huo=r(HAe," (mBART model)"),HAe.forEach(t),Uuo=i($),Vp=n($,"LI",{});var UAe=s(Vp);lse=n(UAe,"STRONG",{});var SJr=s(lse);Juo=r(SJr,"megatron-bert"),SJr.forEach(t),Yuo=r(UAe," \u2014 "),OI=n(UAe,"A",{href:!0});var RJr=s(OI);Kuo=r(RJr,"MegatronBertModel"),RJr.forEach(t),Zuo=r(UAe," (MegatronBert model)"),UAe.forEach(t),e_o=i($),Xp=n($,"LI",{});var JAe=s(Xp);ise=n(JAe,"STRONG",{});var BJr=s(ise);o_o=r(BJr,"mobilebert"),BJr.forEach(t),r_o=r(JAe," \u2014 "),VI=n(JAe,"A",{href:!0});var PJr=s(VI);t_o=r(PJr,"MobileBertModel"),PJr.forEach(t),a_o=r(JAe," (MobileBERT model)"),JAe.forEach(t),n_o=i($),zp=n($,"LI",{});var YAe=s(zp);dse=n(YAe,"STRONG",{});var IJr=s(dse);s_o=r(IJr,"mpnet"),IJr.forEach(t),l_o=r(YAe," \u2014 "),XI=n(YAe,"A",{href:!0});var qJr=s(XI);i_o=r(qJr,"MPNetModel"),qJr.forEach(t),d_o=r(YAe," (MPNet model)"),YAe.forEach(t),c_o=i($),Qp=n($,"LI",{});var KAe=s(Qp);cse=n(KAe,"STRONG",{});var NJr=s(cse);f_o=r(NJr,"mt5"),NJr.forEach(t),m_o=r(KAe," \u2014 "),zI=n(KAe,"A",{href:!0});var jJr=s(zI);g_o=r(jJr,"MT5Model"),jJr.forEach(t),h_o=r(KAe," (mT5 model)"),KAe.forEach(t),p_o=i($),Wp=n($,"LI",{});var ZAe=s(Wp);fse=n(ZAe,"STRONG",{});var DJr=s(fse);u_o=r(DJr,"nystromformer"),DJr.forEach(t),__o=r(ZAe," \u2014 "),QI=n(ZAe,"A",{href:!0});var GJr=s(QI);b_o=r(GJr,"NystromformerModel"),GJr.forEach(t),v_o=r(ZAe," (Nystromformer model)"),ZAe.forEach(t),F_o=i($),Hp=n($,"LI",{});var e6e=s(Hp);mse=n(e6e,"STRONG",{});var OJr=s(mse);T_o=r(OJr,"openai-gpt"),OJr.forEach(t),M_o=r(e6e," \u2014 "),WI=n(e6e,"A",{href:!0});var VJr=s(WI);E_o=r(VJr,"OpenAIGPTModel"),VJr.forEach(t),C_o=r(e6e," (OpenAI GPT model)"),e6e.forEach(t),w_o=i($),Up=n($,"LI",{});var o6e=s(Up);gse=n(o6e,"STRONG",{});var XJr=s(gse);A_o=r(XJr,"opt"),XJr.forEach(t),y_o=r(o6e," \u2014 "),HI=n(o6e,"A",{href:!0});var zJr=s(HI);L_o=r(zJr,"OPTModel"),zJr.forEach(t),x_o=r(o6e," (OPT model)"),o6e.forEach(t),$_o=i($),Jp=n($,"LI",{});var r6e=s(Jp);hse=n(r6e,"STRONG",{});var QJr=s(hse);k_o=r(QJr,"pegasus"),QJr.forEach(t),S_o=r(r6e," \u2014 "),UI=n(r6e,"A",{href:!0});var WJr=s(UI);R_o=r(WJr,"PegasusModel"),WJr.forEach(t),B_o=r(r6e," (Pegasus model)"),r6e.forEach(t),P_o=i($),Yp=n($,"LI",{});var t6e=s(Yp);pse=n(t6e,"STRONG",{});var HJr=s(pse);I_o=r(HJr,"perceiver"),HJr.forEach(t),q_o=r(t6e," \u2014 "),JI=n(t6e,"A",{href:!0});var UJr=s(JI);N_o=r(UJr,"PerceiverModel"),UJr.forEach(t),j_o=r(t6e," (Perceiver model)"),t6e.forEach(t),D_o=i($),Kp=n($,"LI",{});var a6e=s(Kp);use=n(a6e,"STRONG",{});var JJr=s(use);G_o=r(JJr,"plbart"),JJr.forEach(t),O_o=r(a6e," \u2014 "),YI=n(a6e,"A",{href:!0});var YJr=s(YI);V_o=r(YJr,"PLBartModel"),YJr.forEach(t),X_o=r(a6e," (PLBart model)"),a6e.forEach(t),z_o=i($),Zp=n($,"LI",{});var n6e=s(Zp);_se=n(n6e,"STRONG",{});var KJr=s(_se);Q_o=r(KJr,"poolformer"),KJr.forEach(t),W_o=r(n6e," \u2014 "),KI=n(n6e,"A",{href:!0});var ZJr=s(KI);H_o=r(ZJr,"PoolFormerModel"),ZJr.forEach(t),U_o=r(n6e," (PoolFormer model)"),n6e.forEach(t),J_o=i($),eu=n($,"LI",{});var s6e=s(eu);bse=n(s6e,"STRONG",{});var eYr=s(bse);Y_o=r(eYr,"prophetnet"),eYr.forEach(t),K_o=r(s6e," \u2014 "),ZI=n(s6e,"A",{href:!0});var oYr=s(ZI);Z_o=r(oYr,"ProphetNetModel"),oYr.forEach(t),e2o=r(s6e," (ProphetNet model)"),s6e.forEach(t),o2o=i($),ou=n($,"LI",{});var l6e=s(ou);vse=n(l6e,"STRONG",{});var rYr=s(vse);r2o=r(rYr,"qdqbert"),rYr.forEach(t),t2o=r(l6e," \u2014 "),eq=n(l6e,"A",{href:!0});var tYr=s(eq);a2o=r(tYr,"QDQBertModel"),tYr.forEach(t),n2o=r(l6e," (QDQBert model)"),l6e.forEach(t),s2o=i($),ru=n($,"LI",{});var i6e=s(ru);Fse=n(i6e,"STRONG",{});var aYr=s(Fse);l2o=r(aYr,"reformer"),aYr.forEach(t),i2o=r(i6e," \u2014 "),oq=n(i6e,"A",{href:!0});var nYr=s(oq);d2o=r(nYr,"ReformerModel"),nYr.forEach(t),c2o=r(i6e," (Reformer model)"),i6e.forEach(t),f2o=i($),tu=n($,"LI",{});var d6e=s(tu);Tse=n(d6e,"STRONG",{});var sYr=s(Tse);m2o=r(sYr,"regnet"),sYr.forEach(t),g2o=r(d6e," \u2014 "),rq=n(d6e,"A",{href:!0});var lYr=s(rq);h2o=r(lYr,"RegNetModel"),lYr.forEach(t),p2o=r(d6e," (RegNet model)"),d6e.forEach(t),u2o=i($),au=n($,"LI",{});var c6e=s(au);Mse=n(c6e,"STRONG",{});var iYr=s(Mse);_2o=r(iYr,"rembert"),iYr.forEach(t),b2o=r(c6e," \u2014 "),tq=n(c6e,"A",{href:!0});var dYr=s(tq);v2o=r(dYr,"RemBertModel"),dYr.forEach(t),F2o=r(c6e," (RemBERT model)"),c6e.forEach(t),T2o=i($),nu=n($,"LI",{});var f6e=s(nu);Ese=n(f6e,"STRONG",{});var cYr=s(Ese);M2o=r(cYr,"resnet"),cYr.forEach(t),E2o=r(f6e," \u2014 "),aq=n(f6e,"A",{href:!0});var fYr=s(aq);C2o=r(fYr,"ResNetModel"),fYr.forEach(t),w2o=r(f6e," (ResNet model)"),f6e.forEach(t),A2o=i($),su=n($,"LI",{});var m6e=s(su);Cse=n(m6e,"STRONG",{});var mYr=s(Cse);y2o=r(mYr,"retribert"),mYr.forEach(t),L2o=r(m6e," \u2014 "),nq=n(m6e,"A",{href:!0});var gYr=s(nq);x2o=r(gYr,"RetriBertModel"),gYr.forEach(t),$2o=r(m6e," (RetriBERT model)"),m6e.forEach(t),k2o=i($),lu=n($,"LI",{});var g6e=s(lu);wse=n(g6e,"STRONG",{});var hYr=s(wse);S2o=r(hYr,"roberta"),hYr.forEach(t),R2o=r(g6e," \u2014 "),sq=n(g6e,"A",{href:!0});var pYr=s(sq);B2o=r(pYr,"RobertaModel"),pYr.forEach(t),P2o=r(g6e," (RoBERTa model)"),g6e.forEach(t),I2o=i($),iu=n($,"LI",{});var h6e=s(iu);Ase=n(h6e,"STRONG",{});var uYr=s(Ase);q2o=r(uYr,"roformer"),uYr.forEach(t),N2o=r(h6e," \u2014 "),lq=n(h6e,"A",{href:!0});var _Yr=s(lq);j2o=r(_Yr,"RoFormerModel"),_Yr.forEach(t),D2o=r(h6e," (RoFormer model)"),h6e.forEach(t),G2o=i($),du=n($,"LI",{});var p6e=s(du);yse=n(p6e,"STRONG",{});var bYr=s(yse);O2o=r(bYr,"segformer"),bYr.forEach(t),V2o=r(p6e," \u2014 "),iq=n(p6e,"A",{href:!0});var vYr=s(iq);X2o=r(vYr,"SegformerModel"),vYr.forEach(t),z2o=r(p6e," (SegFormer model)"),p6e.forEach(t),Q2o=i($),cu=n($,"LI",{});var u6e=s(cu);Lse=n(u6e,"STRONG",{});var FYr=s(Lse);W2o=r(FYr,"sew"),FYr.forEach(t),H2o=r(u6e," \u2014 "),dq=n(u6e,"A",{href:!0});var TYr=s(dq);U2o=r(TYr,"SEWModel"),TYr.forEach(t),J2o=r(u6e," (SEW model)"),u6e.forEach(t),Y2o=i($),fu=n($,"LI",{});var _6e=s(fu);xse=n(_6e,"STRONG",{});var MYr=s(xse);K2o=r(MYr,"sew-d"),MYr.forEach(t),Z2o=r(_6e," \u2014 "),cq=n(_6e,"A",{href:!0});var EYr=s(cq);e1o=r(EYr,"SEWDModel"),EYr.forEach(t),o1o=r(_6e," (SEW-D model)"),_6e.forEach(t),r1o=i($),mu=n($,"LI",{});var b6e=s(mu);$se=n(b6e,"STRONG",{});var CYr=s($se);t1o=r(CYr,"speech_to_text"),CYr.forEach(t),a1o=r(b6e," \u2014 "),fq=n(b6e,"A",{href:!0});var wYr=s(fq);n1o=r(wYr,"Speech2TextModel"),wYr.forEach(t),s1o=r(b6e," (Speech2Text model)"),b6e.forEach(t),l1o=i($),gu=n($,"LI",{});var v6e=s(gu);kse=n(v6e,"STRONG",{});var AYr=s(kse);i1o=r(AYr,"splinter"),AYr.forEach(t),d1o=r(v6e," \u2014 "),mq=n(v6e,"A",{href:!0});var yYr=s(mq);c1o=r(yYr,"SplinterModel"),yYr.forEach(t),f1o=r(v6e," (Splinter model)"),v6e.forEach(t),m1o=i($),hu=n($,"LI",{});var F6e=s(hu);Sse=n(F6e,"STRONG",{});var LYr=s(Sse);g1o=r(LYr,"squeezebert"),LYr.forEach(t),h1o=r(F6e," \u2014 "),gq=n(F6e,"A",{href:!0});var xYr=s(gq);p1o=r(xYr,"SqueezeBertModel"),xYr.forEach(t),u1o=r(F6e," (SqueezeBERT model)"),F6e.forEach(t),_1o=i($),pu=n($,"LI",{});var T6e=s(pu);Rse=n(T6e,"STRONG",{});var $Yr=s(Rse);b1o=r($Yr,"swin"),$Yr.forEach(t),v1o=r(T6e," \u2014 "),hq=n(T6e,"A",{href:!0});var kYr=s(hq);F1o=r(kYr,"SwinModel"),kYr.forEach(t),T1o=r(T6e," (Swin model)"),T6e.forEach(t),M1o=i($),uu=n($,"LI",{});var M6e=s(uu);Bse=n(M6e,"STRONG",{});var SYr=s(Bse);E1o=r(SYr,"t5"),SYr.forEach(t),C1o=r(M6e," \u2014 "),pq=n(M6e,"A",{href:!0});var RYr=s(pq);w1o=r(RYr,"T5Model"),RYr.forEach(t),A1o=r(M6e," (T5 model)"),M6e.forEach(t),y1o=i($),_u=n($,"LI",{});var E6e=s(_u);Pse=n(E6e,"STRONG",{});var BYr=s(Pse);L1o=r(BYr,"tapas"),BYr.forEach(t),x1o=r(E6e," \u2014 "),uq=n(E6e,"A",{href:!0});var PYr=s(uq);$1o=r(PYr,"TapasModel"),PYr.forEach(t),k1o=r(E6e," (TAPAS model)"),E6e.forEach(t),S1o=i($),bu=n($,"LI",{});var C6e=s(bu);Ise=n(C6e,"STRONG",{});var IYr=s(Ise);R1o=r(IYr,"transfo-xl"),IYr.forEach(t),B1o=r(C6e," \u2014 "),_q=n(C6e,"A",{href:!0});var qYr=s(_q);P1o=r(qYr,"TransfoXLModel"),qYr.forEach(t),I1o=r(C6e," (Transformer-XL model)"),C6e.forEach(t),q1o=i($),vu=n($,"LI",{});var w6e=s(vu);qse=n(w6e,"STRONG",{});var NYr=s(qse);N1o=r(NYr,"unispeech"),NYr.forEach(t),j1o=r(w6e," \u2014 "),bq=n(w6e,"A",{href:!0});var jYr=s(bq);D1o=r(jYr,"UniSpeechModel"),jYr.forEach(t),G1o=r(w6e," (UniSpeech model)"),w6e.forEach(t),O1o=i($),Fu=n($,"LI",{});var A6e=s(Fu);Nse=n(A6e,"STRONG",{});var DYr=s(Nse);V1o=r(DYr,"unispeech-sat"),DYr.forEach(t),X1o=r(A6e," \u2014 "),vq=n(A6e,"A",{href:!0});var GYr=s(vq);z1o=r(GYr,"UniSpeechSatModel"),GYr.forEach(t),Q1o=r(A6e," (UniSpeechSat model)"),A6e.forEach(t),W1o=i($),Tu=n($,"LI",{});var y6e=s(Tu);jse=n(y6e,"STRONG",{});var OYr=s(jse);H1o=r(OYr,"van"),OYr.forEach(t),U1o=r(y6e," \u2014 "),Fq=n(y6e,"A",{href:!0});var VYr=s(Fq);J1o=r(VYr,"VanModel"),VYr.forEach(t),Y1o=r(y6e," (VAN model)"),y6e.forEach(t),K1o=i($),Mu=n($,"LI",{});var L6e=s(Mu);Dse=n(L6e,"STRONG",{});var XYr=s(Dse);Z1o=r(XYr,"vilt"),XYr.forEach(t),ebo=r(L6e," \u2014 "),Tq=n(L6e,"A",{href:!0});var zYr=s(Tq);obo=r(zYr,"ViltModel"),zYr.forEach(t),rbo=r(L6e," (ViLT model)"),L6e.forEach(t),tbo=i($),Eu=n($,"LI",{});var x6e=s(Eu);Gse=n(x6e,"STRONG",{});var QYr=s(Gse);abo=r(QYr,"vision-text-dual-encoder"),QYr.forEach(t),nbo=r(x6e," \u2014 "),Mq=n(x6e,"A",{href:!0});var WYr=s(Mq);sbo=r(WYr,"VisionTextDualEncoderModel"),WYr.forEach(t),lbo=r(x6e," (VisionTextDualEncoder model)"),x6e.forEach(t),ibo=i($),Cu=n($,"LI",{});var $6e=s(Cu);Ose=n($6e,"STRONG",{});var HYr=s(Ose);dbo=r(HYr,"visual_bert"),HYr.forEach(t),cbo=r($6e," \u2014 "),Eq=n($6e,"A",{href:!0});var UYr=s(Eq);fbo=r(UYr,"VisualBertModel"),UYr.forEach(t),mbo=r($6e," (VisualBert model)"),$6e.forEach(t),gbo=i($),wu=n($,"LI",{});var k6e=s(wu);Vse=n(k6e,"STRONG",{});var JYr=s(Vse);hbo=r(JYr,"vit"),JYr.forEach(t),pbo=r(k6e," \u2014 "),Cq=n(k6e,"A",{href:!0});var YYr=s(Cq);ubo=r(YYr,"ViTModel"),YYr.forEach(t),_bo=r(k6e," (ViT model)"),k6e.forEach(t),bbo=i($),Au=n($,"LI",{});var S6e=s(Au);Xse=n(S6e,"STRONG",{});var KYr=s(Xse);vbo=r(KYr,"vit_mae"),KYr.forEach(t),Fbo=r(S6e," \u2014 "),wq=n(S6e,"A",{href:!0});var ZYr=s(wq);Tbo=r(ZYr,"ViTMAEModel"),ZYr.forEach(t),Mbo=r(S6e," (ViTMAE model)"),S6e.forEach(t),Ebo=i($),yu=n($,"LI",{});var R6e=s(yu);zse=n(R6e,"STRONG",{});var eKr=s(zse);Cbo=r(eKr,"wav2vec2"),eKr.forEach(t),wbo=r(R6e," \u2014 "),Aq=n(R6e,"A",{href:!0});var oKr=s(Aq);Abo=r(oKr,"Wav2Vec2Model"),oKr.forEach(t),ybo=r(R6e," (Wav2Vec2 model)"),R6e.forEach(t),Lbo=i($),Lu=n($,"LI",{});var B6e=s(Lu);Qse=n(B6e,"STRONG",{});var rKr=s(Qse);xbo=r(rKr,"wavlm"),rKr.forEach(t),$bo=r(B6e," \u2014 "),yq=n(B6e,"A",{href:!0});var tKr=s(yq);kbo=r(tKr,"WavLMModel"),tKr.forEach(t),Sbo=r(B6e," (WavLM model)"),B6e.forEach(t),Rbo=i($),xu=n($,"LI",{});var P6e=s(xu);Wse=n(P6e,"STRONG",{});var aKr=s(Wse);Bbo=r(aKr,"xglm"),aKr.forEach(t),Pbo=r(P6e," \u2014 "),Lq=n(P6e,"A",{href:!0});var nKr=s(Lq);Ibo=r(nKr,"XGLMModel"),nKr.forEach(t),qbo=r(P6e," (XGLM model)"),P6e.forEach(t),Nbo=i($),$u=n($,"LI",{});var I6e=s($u);Hse=n(I6e,"STRONG",{});var sKr=s(Hse);jbo=r(sKr,"xlm"),sKr.forEach(t),Dbo=r(I6e," \u2014 "),xq=n(I6e,"A",{href:!0});var lKr=s(xq);Gbo=r(lKr,"XLMModel"),lKr.forEach(t),Obo=r(I6e," (XLM model)"),I6e.forEach(t),Vbo=i($),ku=n($,"LI",{});var q6e=s(ku);Use=n(q6e,"STRONG",{});var iKr=s(Use);Xbo=r(iKr,"xlm-prophetnet"),iKr.forEach(t),zbo=r(q6e," \u2014 "),$q=n(q6e,"A",{href:!0});var dKr=s($q);Qbo=r(dKr,"XLMProphetNetModel"),dKr.forEach(t),Wbo=r(q6e," (XLMProphetNet model)"),q6e.forEach(t),Hbo=i($),Su=n($,"LI",{});var N6e=s(Su);Jse=n(N6e,"STRONG",{});var cKr=s(Jse);Ubo=r(cKr,"xlm-roberta"),cKr.forEach(t),Jbo=r(N6e," \u2014 "),kq=n(N6e,"A",{href:!0});var fKr=s(kq);Ybo=r(fKr,"XLMRobertaModel"),fKr.forEach(t),Kbo=r(N6e," (XLM-RoBERTa model)"),N6e.forEach(t),Zbo=i($),Ru=n($,"LI",{});var j6e=s(Ru);Yse=n(j6e,"STRONG",{});var mKr=s(Yse);e5o=r(mKr,"xlm-roberta-xl"),mKr.forEach(t),o5o=r(j6e," \u2014 "),Sq=n(j6e,"A",{href:!0});var gKr=s(Sq);r5o=r(gKr,"XLMRobertaXLModel"),gKr.forEach(t),t5o=r(j6e," (XLM-RoBERTa-XL model)"),j6e.forEach(t),a5o=i($),Bu=n($,"LI",{});var D6e=s(Bu);Kse=n(D6e,"STRONG",{});var hKr=s(Kse);n5o=r(hKr,"xlnet"),hKr.forEach(t),s5o=r(D6e," \u2014 "),Rq=n(D6e,"A",{href:!0});var pKr=s(Rq);l5o=r(pKr,"XLNetModel"),pKr.forEach(t),i5o=r(D6e," (XLNet model)"),D6e.forEach(t),d5o=i($),Pu=n($,"LI",{});var G6e=s(Pu);Zse=n(G6e,"STRONG",{});var uKr=s(Zse);c5o=r(uKr,"yolos"),uKr.forEach(t),f5o=r(G6e," \u2014 "),Bq=n(G6e,"A",{href:!0});var _Kr=s(Bq);m5o=r(_Kr,"YolosModel"),_Kr.forEach(t),g5o=r(G6e," (YOLOS model)"),G6e.forEach(t),h5o=i($),Iu=n($,"LI",{});var O6e=s(Iu);ele=n(O6e,"STRONG",{});var bKr=s(ele);p5o=r(bKr,"yoso"),bKr.forEach(t),u5o=r(O6e," \u2014 "),Pq=n(O6e,"A",{href:!0});var vKr=s(Pq);_5o=r(vKr,"YosoModel"),vKr.forEach(t),b5o=r(O6e," (YOSO model)"),O6e.forEach(t),$.forEach(t),v5o=i(Zt),qu=n(Zt,"P",{});var V6e=s(qu);F5o=r(V6e,"The model is set in evaluation mode by default using "),ole=n(V6e,"CODE",{});var FKr=s(ole);T5o=r(FKr,"model.eval()"),FKr.forEach(t),M5o=r(V6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=n(V6e,"CODE",{});var TKr=s(rle);E5o=r(TKr,"model.train()"),TKr.forEach(t),V6e.forEach(t),C5o=i(Zt),T(Nu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),uIe=i(f),Ci=n(f,"H2",{class:!0});var FNe=s(Ci);ju=n(FNe,"A",{id:!0,class:!0,href:!0});var MKr=s(ju);tle=n(MKr,"SPAN",{});var EKr=s(tle);T(k0.$$.fragment,EKr),EKr.forEach(t),MKr.forEach(t),w5o=i(FNe),ale=n(FNe,"SPAN",{});var CKr=s(ale);A5o=r(CKr,"AutoModelForPreTraining"),CKr.forEach(t),FNe.forEach(t),_Ie=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(S0.$$.fragment,Ds),y5o=i(Ds),wi=n(Ds,"P",{});var uK=s(wi);L5o=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Iq=n(uK,"A",{href:!0});var wKr=s(Iq);x5o=r(wKr,"from_pretrained()"),wKr.forEach(t),$5o=r(uK," class method or the "),qq=n(uK,"A",{href:!0});var AKr=s(qq);k5o=r(AKr,"from_config()"),AKr.forEach(t),S5o=r(uK,` class
method.`),uK.forEach(t),R5o=i(Ds),R0=n(Ds,"P",{});var TNe=s(R0);B5o=r(TNe,"This class cannot be instantiated directly using "),nle=n(TNe,"CODE",{});var yKr=s(nle);P5o=r(yKr,"__init__()"),yKr.forEach(t),I5o=r(TNe," (throws an error)."),TNe.forEach(t),q5o=i(Ds),rt=n(Ds,"DIV",{class:!0});var nA=s(rt);T(B0.$$.fragment,nA),N5o=i(nA),sle=n(nA,"P",{});var LKr=s(sle);j5o=r(LKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LKr.forEach(t),D5o=i(nA),Ai=n(nA,"P",{});var _K=s(Ai);G5o=r(_K,`Note:
Loading a model from its configuration file does `),lle=n(_K,"STRONG",{});var xKr=s(lle);O5o=r(xKr,"not"),xKr.forEach(t),V5o=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(_K,"A",{href:!0});var $Kr=s(Nq);X5o=r($Kr,"from_pretrained()"),$Kr.forEach(t),z5o=r(_K," to load the model weights."),_K.forEach(t),Q5o=i(nA),T(Du.$$.fragment,nA),nA.forEach(t),W5o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(P0.$$.fragment,ea),H5o=i(ea),ile=n(ea,"P",{});var kKr=s(ile);U5o=r(kKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kKr.forEach(t),J5o=i(ea),ya=n(ea,"P",{});var sA=s(ya);Y5o=r(sA,"The model class to instantiate is selected based on the "),dle=n(sA,"CODE",{});var SKr=s(dle);K5o=r(SKr,"model_type"),SKr.forEach(t),Z5o=r(sA,` property of the config object (either
passed as an argument or loaded from `),cle=n(sA,"CODE",{});var RKr=s(cle);e3o=r(RKr,"pretrained_model_name_or_path"),RKr.forEach(t),o3o=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(sA,"CODE",{});var BKr=s(fle);r3o=r(BKr,"pretrained_model_name_or_path"),BKr.forEach(t),t3o=r(sA,":"),sA.forEach(t),a3o=i(ea),G=n(ea,"UL",{});var V=s(G);Gu=n(V,"LI",{});var X6e=s(Gu);mle=n(X6e,"STRONG",{});var PKr=s(mle);n3o=r(PKr,"albert"),PKr.forEach(t),s3o=r(X6e," \u2014 "),jq=n(X6e,"A",{href:!0});var IKr=s(jq);l3o=r(IKr,"AlbertForPreTraining"),IKr.forEach(t),i3o=r(X6e," (ALBERT model)"),X6e.forEach(t),d3o=i(V),Ou=n(V,"LI",{});var z6e=s(Ou);gle=n(z6e,"STRONG",{});var qKr=s(gle);c3o=r(qKr,"bart"),qKr.forEach(t),f3o=r(z6e," \u2014 "),Dq=n(z6e,"A",{href:!0});var NKr=s(Dq);m3o=r(NKr,"BartForConditionalGeneration"),NKr.forEach(t),g3o=r(z6e," (BART model)"),z6e.forEach(t),h3o=i(V),Vu=n(V,"LI",{});var Q6e=s(Vu);hle=n(Q6e,"STRONG",{});var jKr=s(hle);p3o=r(jKr,"bert"),jKr.forEach(t),u3o=r(Q6e," \u2014 "),Gq=n(Q6e,"A",{href:!0});var DKr=s(Gq);_3o=r(DKr,"BertForPreTraining"),DKr.forEach(t),b3o=r(Q6e," (BERT model)"),Q6e.forEach(t),v3o=i(V),Xu=n(V,"LI",{});var W6e=s(Xu);ple=n(W6e,"STRONG",{});var GKr=s(ple);F3o=r(GKr,"big_bird"),GKr.forEach(t),T3o=r(W6e," \u2014 "),Oq=n(W6e,"A",{href:!0});var OKr=s(Oq);M3o=r(OKr,"BigBirdForPreTraining"),OKr.forEach(t),E3o=r(W6e," (BigBird model)"),W6e.forEach(t),C3o=i(V),zu=n(V,"LI",{});var H6e=s(zu);ule=n(H6e,"STRONG",{});var VKr=s(ule);w3o=r(VKr,"camembert"),VKr.forEach(t),A3o=r(H6e," \u2014 "),Vq=n(H6e,"A",{href:!0});var XKr=s(Vq);y3o=r(XKr,"CamembertForMaskedLM"),XKr.forEach(t),L3o=r(H6e," (CamemBERT model)"),H6e.forEach(t),x3o=i(V),Qu=n(V,"LI",{});var U6e=s(Qu);_le=n(U6e,"STRONG",{});var zKr=s(_le);$3o=r(zKr,"ctrl"),zKr.forEach(t),k3o=r(U6e," \u2014 "),Xq=n(U6e,"A",{href:!0});var QKr=s(Xq);S3o=r(QKr,"CTRLLMHeadModel"),QKr.forEach(t),R3o=r(U6e," (CTRL model)"),U6e.forEach(t),B3o=i(V),Wu=n(V,"LI",{});var J6e=s(Wu);ble=n(J6e,"STRONG",{});var WKr=s(ble);P3o=r(WKr,"data2vec-text"),WKr.forEach(t),I3o=r(J6e," \u2014 "),zq=n(J6e,"A",{href:!0});var HKr=s(zq);q3o=r(HKr,"Data2VecTextForMaskedLM"),HKr.forEach(t),N3o=r(J6e," (Data2VecText model)"),J6e.forEach(t),j3o=i(V),Hu=n(V,"LI",{});var Y6e=s(Hu);vle=n(Y6e,"STRONG",{});var UKr=s(vle);D3o=r(UKr,"deberta"),UKr.forEach(t),G3o=r(Y6e," \u2014 "),Qq=n(Y6e,"A",{href:!0});var JKr=s(Qq);O3o=r(JKr,"DebertaForMaskedLM"),JKr.forEach(t),V3o=r(Y6e," (DeBERTa model)"),Y6e.forEach(t),X3o=i(V),Uu=n(V,"LI",{});var K6e=s(Uu);Fle=n(K6e,"STRONG",{});var YKr=s(Fle);z3o=r(YKr,"deberta-v2"),YKr.forEach(t),Q3o=r(K6e," \u2014 "),Wq=n(K6e,"A",{href:!0});var KKr=s(Wq);W3o=r(KKr,"DebertaV2ForMaskedLM"),KKr.forEach(t),H3o=r(K6e," (DeBERTa-v2 model)"),K6e.forEach(t),U3o=i(V),Ju=n(V,"LI",{});var Z6e=s(Ju);Tle=n(Z6e,"STRONG",{});var ZKr=s(Tle);J3o=r(ZKr,"distilbert"),ZKr.forEach(t),Y3o=r(Z6e," \u2014 "),Hq=n(Z6e,"A",{href:!0});var eZr=s(Hq);K3o=r(eZr,"DistilBertForMaskedLM"),eZr.forEach(t),Z3o=r(Z6e," (DistilBERT model)"),Z6e.forEach(t),evo=i(V),Yu=n(V,"LI",{});var e0e=s(Yu);Mle=n(e0e,"STRONG",{});var oZr=s(Mle);ovo=r(oZr,"electra"),oZr.forEach(t),rvo=r(e0e," \u2014 "),Uq=n(e0e,"A",{href:!0});var rZr=s(Uq);tvo=r(rZr,"ElectraForPreTraining"),rZr.forEach(t),avo=r(e0e," (ELECTRA model)"),e0e.forEach(t),nvo=i(V),Ku=n(V,"LI",{});var o0e=s(Ku);Ele=n(o0e,"STRONG",{});var tZr=s(Ele);svo=r(tZr,"flaubert"),tZr.forEach(t),lvo=r(o0e," \u2014 "),Jq=n(o0e,"A",{href:!0});var aZr=s(Jq);ivo=r(aZr,"FlaubertWithLMHeadModel"),aZr.forEach(t),dvo=r(o0e," (FlauBERT model)"),o0e.forEach(t),cvo=i(V),Zu=n(V,"LI",{});var r0e=s(Zu);Cle=n(r0e,"STRONG",{});var nZr=s(Cle);fvo=r(nZr,"flava"),nZr.forEach(t),mvo=r(r0e," \u2014 "),Yq=n(r0e,"A",{href:!0});var sZr=s(Yq);gvo=r(sZr,"FlavaForPreTraining"),sZr.forEach(t),hvo=r(r0e," (Flava model)"),r0e.forEach(t),pvo=i(V),e_=n(V,"LI",{});var t0e=s(e_);wle=n(t0e,"STRONG",{});var lZr=s(wle);uvo=r(lZr,"fnet"),lZr.forEach(t),_vo=r(t0e," \u2014 "),Kq=n(t0e,"A",{href:!0});var iZr=s(Kq);bvo=r(iZr,"FNetForPreTraining"),iZr.forEach(t),vvo=r(t0e," (FNet model)"),t0e.forEach(t),Fvo=i(V),o_=n(V,"LI",{});var a0e=s(o_);Ale=n(a0e,"STRONG",{});var dZr=s(Ale);Tvo=r(dZr,"fsmt"),dZr.forEach(t),Mvo=r(a0e," \u2014 "),Zq=n(a0e,"A",{href:!0});var cZr=s(Zq);Evo=r(cZr,"FSMTForConditionalGeneration"),cZr.forEach(t),Cvo=r(a0e," (FairSeq Machine-Translation model)"),a0e.forEach(t),wvo=i(V),r_=n(V,"LI",{});var n0e=s(r_);yle=n(n0e,"STRONG",{});var fZr=s(yle);Avo=r(fZr,"funnel"),fZr.forEach(t),yvo=r(n0e," \u2014 "),eN=n(n0e,"A",{href:!0});var mZr=s(eN);Lvo=r(mZr,"FunnelForPreTraining"),mZr.forEach(t),xvo=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),$vo=i(V),t_=n(V,"LI",{});var s0e=s(t_);Lle=n(s0e,"STRONG",{});var gZr=s(Lle);kvo=r(gZr,"gpt2"),gZr.forEach(t),Svo=r(s0e," \u2014 "),oN=n(s0e,"A",{href:!0});var hZr=s(oN);Rvo=r(hZr,"GPT2LMHeadModel"),hZr.forEach(t),Bvo=r(s0e," (OpenAI GPT-2 model)"),s0e.forEach(t),Pvo=i(V),a_=n(V,"LI",{});var l0e=s(a_);xle=n(l0e,"STRONG",{});var pZr=s(xle);Ivo=r(pZr,"ibert"),pZr.forEach(t),qvo=r(l0e," \u2014 "),rN=n(l0e,"A",{href:!0});var uZr=s(rN);Nvo=r(uZr,"IBertForMaskedLM"),uZr.forEach(t),jvo=r(l0e," (I-BERT model)"),l0e.forEach(t),Dvo=i(V),n_=n(V,"LI",{});var i0e=s(n_);$le=n(i0e,"STRONG",{});var _Zr=s($le);Gvo=r(_Zr,"layoutlm"),_Zr.forEach(t),Ovo=r(i0e," \u2014 "),tN=n(i0e,"A",{href:!0});var bZr=s(tN);Vvo=r(bZr,"LayoutLMForMaskedLM"),bZr.forEach(t),Xvo=r(i0e," (LayoutLM model)"),i0e.forEach(t),zvo=i(V),s_=n(V,"LI",{});var d0e=s(s_);kle=n(d0e,"STRONG",{});var vZr=s(kle);Qvo=r(vZr,"longformer"),vZr.forEach(t),Wvo=r(d0e," \u2014 "),aN=n(d0e,"A",{href:!0});var FZr=s(aN);Hvo=r(FZr,"LongformerForMaskedLM"),FZr.forEach(t),Uvo=r(d0e," (Longformer model)"),d0e.forEach(t),Jvo=i(V),l_=n(V,"LI",{});var c0e=s(l_);Sle=n(c0e,"STRONG",{});var TZr=s(Sle);Yvo=r(TZr,"lxmert"),TZr.forEach(t),Kvo=r(c0e," \u2014 "),nN=n(c0e,"A",{href:!0});var MZr=s(nN);Zvo=r(MZr,"LxmertForPreTraining"),MZr.forEach(t),eFo=r(c0e," (LXMERT model)"),c0e.forEach(t),oFo=i(V),i_=n(V,"LI",{});var f0e=s(i_);Rle=n(f0e,"STRONG",{});var EZr=s(Rle);rFo=r(EZr,"megatron-bert"),EZr.forEach(t),tFo=r(f0e," \u2014 "),sN=n(f0e,"A",{href:!0});var CZr=s(sN);aFo=r(CZr,"MegatronBertForPreTraining"),CZr.forEach(t),nFo=r(f0e," (MegatronBert model)"),f0e.forEach(t),sFo=i(V),d_=n(V,"LI",{});var m0e=s(d_);Ble=n(m0e,"STRONG",{});var wZr=s(Ble);lFo=r(wZr,"mobilebert"),wZr.forEach(t),iFo=r(m0e," \u2014 "),lN=n(m0e,"A",{href:!0});var AZr=s(lN);dFo=r(AZr,"MobileBertForPreTraining"),AZr.forEach(t),cFo=r(m0e," (MobileBERT model)"),m0e.forEach(t),fFo=i(V),c_=n(V,"LI",{});var g0e=s(c_);Ple=n(g0e,"STRONG",{});var yZr=s(Ple);mFo=r(yZr,"mpnet"),yZr.forEach(t),gFo=r(g0e," \u2014 "),iN=n(g0e,"A",{href:!0});var LZr=s(iN);hFo=r(LZr,"MPNetForMaskedLM"),LZr.forEach(t),pFo=r(g0e," (MPNet model)"),g0e.forEach(t),uFo=i(V),f_=n(V,"LI",{});var h0e=s(f_);Ile=n(h0e,"STRONG",{});var xZr=s(Ile);_Fo=r(xZr,"openai-gpt"),xZr.forEach(t),bFo=r(h0e," \u2014 "),dN=n(h0e,"A",{href:!0});var $Zr=s(dN);vFo=r($Zr,"OpenAIGPTLMHeadModel"),$Zr.forEach(t),FFo=r(h0e," (OpenAI GPT model)"),h0e.forEach(t),TFo=i(V),m_=n(V,"LI",{});var p0e=s(m_);qle=n(p0e,"STRONG",{});var kZr=s(qle);MFo=r(kZr,"retribert"),kZr.forEach(t),EFo=r(p0e," \u2014 "),cN=n(p0e,"A",{href:!0});var SZr=s(cN);CFo=r(SZr,"RetriBertModel"),SZr.forEach(t),wFo=r(p0e," (RetriBERT model)"),p0e.forEach(t),AFo=i(V),g_=n(V,"LI",{});var u0e=s(g_);Nle=n(u0e,"STRONG",{});var RZr=s(Nle);yFo=r(RZr,"roberta"),RZr.forEach(t),LFo=r(u0e," \u2014 "),fN=n(u0e,"A",{href:!0});var BZr=s(fN);xFo=r(BZr,"RobertaForMaskedLM"),BZr.forEach(t),$Fo=r(u0e," (RoBERTa model)"),u0e.forEach(t),kFo=i(V),h_=n(V,"LI",{});var _0e=s(h_);jle=n(_0e,"STRONG",{});var PZr=s(jle);SFo=r(PZr,"squeezebert"),PZr.forEach(t),RFo=r(_0e," \u2014 "),mN=n(_0e,"A",{href:!0});var IZr=s(mN);BFo=r(IZr,"SqueezeBertForMaskedLM"),IZr.forEach(t),PFo=r(_0e," (SqueezeBERT model)"),_0e.forEach(t),IFo=i(V),p_=n(V,"LI",{});var b0e=s(p_);Dle=n(b0e,"STRONG",{});var qZr=s(Dle);qFo=r(qZr,"t5"),qZr.forEach(t),NFo=r(b0e," \u2014 "),gN=n(b0e,"A",{href:!0});var NZr=s(gN);jFo=r(NZr,"T5ForConditionalGeneration"),NZr.forEach(t),DFo=r(b0e," (T5 model)"),b0e.forEach(t),GFo=i(V),u_=n(V,"LI",{});var v0e=s(u_);Gle=n(v0e,"STRONG",{});var jZr=s(Gle);OFo=r(jZr,"tapas"),jZr.forEach(t),VFo=r(v0e," \u2014 "),hN=n(v0e,"A",{href:!0});var DZr=s(hN);XFo=r(DZr,"TapasForMaskedLM"),DZr.forEach(t),zFo=r(v0e," (TAPAS model)"),v0e.forEach(t),QFo=i(V),__=n(V,"LI",{});var F0e=s(__);Ole=n(F0e,"STRONG",{});var GZr=s(Ole);WFo=r(GZr,"transfo-xl"),GZr.forEach(t),HFo=r(F0e," \u2014 "),pN=n(F0e,"A",{href:!0});var OZr=s(pN);UFo=r(OZr,"TransfoXLLMHeadModel"),OZr.forEach(t),JFo=r(F0e," (Transformer-XL model)"),F0e.forEach(t),YFo=i(V),b_=n(V,"LI",{});var T0e=s(b_);Vle=n(T0e,"STRONG",{});var VZr=s(Vle);KFo=r(VZr,"unispeech"),VZr.forEach(t),ZFo=r(T0e," \u2014 "),uN=n(T0e,"A",{href:!0});var XZr=s(uN);eTo=r(XZr,"UniSpeechForPreTraining"),XZr.forEach(t),oTo=r(T0e," (UniSpeech model)"),T0e.forEach(t),rTo=i(V),v_=n(V,"LI",{});var M0e=s(v_);Xle=n(M0e,"STRONG",{});var zZr=s(Xle);tTo=r(zZr,"unispeech-sat"),zZr.forEach(t),aTo=r(M0e," \u2014 "),_N=n(M0e,"A",{href:!0});var QZr=s(_N);nTo=r(QZr,"UniSpeechSatForPreTraining"),QZr.forEach(t),sTo=r(M0e," (UniSpeechSat model)"),M0e.forEach(t),lTo=i(V),F_=n(V,"LI",{});var E0e=s(F_);zle=n(E0e,"STRONG",{});var WZr=s(zle);iTo=r(WZr,"visual_bert"),WZr.forEach(t),dTo=r(E0e," \u2014 "),bN=n(E0e,"A",{href:!0});var HZr=s(bN);cTo=r(HZr,"VisualBertForPreTraining"),HZr.forEach(t),fTo=r(E0e," (VisualBert model)"),E0e.forEach(t),mTo=i(V),T_=n(V,"LI",{});var C0e=s(T_);Qle=n(C0e,"STRONG",{});var UZr=s(Qle);gTo=r(UZr,"vit_mae"),UZr.forEach(t),hTo=r(C0e," \u2014 "),vN=n(C0e,"A",{href:!0});var JZr=s(vN);pTo=r(JZr,"ViTMAEForPreTraining"),JZr.forEach(t),uTo=r(C0e," (ViTMAE model)"),C0e.forEach(t),_To=i(V),M_=n(V,"LI",{});var w0e=s(M_);Wle=n(w0e,"STRONG",{});var YZr=s(Wle);bTo=r(YZr,"wav2vec2"),YZr.forEach(t),vTo=r(w0e," \u2014 "),FN=n(w0e,"A",{href:!0});var KZr=s(FN);FTo=r(KZr,"Wav2Vec2ForPreTraining"),KZr.forEach(t),TTo=r(w0e," (Wav2Vec2 model)"),w0e.forEach(t),MTo=i(V),E_=n(V,"LI",{});var A0e=s(E_);Hle=n(A0e,"STRONG",{});var ZZr=s(Hle);ETo=r(ZZr,"xlm"),ZZr.forEach(t),CTo=r(A0e," \u2014 "),TN=n(A0e,"A",{href:!0});var eet=s(TN);wTo=r(eet,"XLMWithLMHeadModel"),eet.forEach(t),ATo=r(A0e," (XLM model)"),A0e.forEach(t),yTo=i(V),C_=n(V,"LI",{});var y0e=s(C_);Ule=n(y0e,"STRONG",{});var oet=s(Ule);LTo=r(oet,"xlm-roberta"),oet.forEach(t),xTo=r(y0e," \u2014 "),MN=n(y0e,"A",{href:!0});var ret=s(MN);$To=r(ret,"XLMRobertaForMaskedLM"),ret.forEach(t),kTo=r(y0e," (XLM-RoBERTa model)"),y0e.forEach(t),STo=i(V),w_=n(V,"LI",{});var L0e=s(w_);Jle=n(L0e,"STRONG",{});var tet=s(Jle);RTo=r(tet,"xlm-roberta-xl"),tet.forEach(t),BTo=r(L0e," \u2014 "),EN=n(L0e,"A",{href:!0});var aet=s(EN);PTo=r(aet,"XLMRobertaXLForMaskedLM"),aet.forEach(t),ITo=r(L0e," (XLM-RoBERTa-XL model)"),L0e.forEach(t),qTo=i(V),A_=n(V,"LI",{});var x0e=s(A_);Yle=n(x0e,"STRONG",{});var net=s(Yle);NTo=r(net,"xlnet"),net.forEach(t),jTo=r(x0e," \u2014 "),CN=n(x0e,"A",{href:!0});var set=s(CN);DTo=r(set,"XLNetLMHeadModel"),set.forEach(t),GTo=r(x0e," (XLNet model)"),x0e.forEach(t),V.forEach(t),OTo=i(ea),y_=n(ea,"P",{});var $0e=s(y_);VTo=r($0e,"The model is set in evaluation mode by default using "),Kle=n($0e,"CODE",{});var iet=s(Kle);XTo=r(iet,"model.eval()"),iet.forEach(t),zTo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n($0e,"CODE",{});var det=s(Zle);QTo=r(det,"model.train()"),det.forEach(t),$0e.forEach(t),WTo=i(ea),T(L_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),bIe=i(f),yi=n(f,"H2",{class:!0});var MNe=s(yi);x_=n(MNe,"A",{id:!0,class:!0,href:!0});var cet=s(x_);eie=n(cet,"SPAN",{});var fet=s(eie);T(I0.$$.fragment,fet),fet.forEach(t),cet.forEach(t),HTo=i(MNe),oie=n(MNe,"SPAN",{});var met=s(oie);UTo=r(met,"AutoModelForCausalLM"),met.forEach(t),MNe.forEach(t),vIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(q0.$$.fragment,Gs),JTo=i(Gs),Li=n(Gs,"P",{});var bK=s(Li);YTo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wN=n(bK,"A",{href:!0});var get=s(wN);KTo=r(get,"from_pretrained()"),get.forEach(t),ZTo=r(bK," class method or the "),AN=n(bK,"A",{href:!0});var het=s(AN);e7o=r(het,"from_config()"),het.forEach(t),o7o=r(bK,` class
method.`),bK.forEach(t),r7o=i(Gs),N0=n(Gs,"P",{});var ENe=s(N0);t7o=r(ENe,"This class cannot be instantiated directly using "),rie=n(ENe,"CODE",{});var pet=s(rie);a7o=r(pet,"__init__()"),pet.forEach(t),n7o=r(ENe," (throws an error)."),ENe.forEach(t),s7o=i(Gs),tt=n(Gs,"DIV",{class:!0});var lA=s(tt);T(j0.$$.fragment,lA),l7o=i(lA),tie=n(lA,"P",{});var uet=s(tie);i7o=r(uet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uet.forEach(t),d7o=i(lA),xi=n(lA,"P",{});var vK=s(xi);c7o=r(vK,`Note:
Loading a model from its configuration file does `),aie=n(vK,"STRONG",{});var _et=s(aie);f7o=r(_et,"not"),_et.forEach(t),m7o=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yN=n(vK,"A",{href:!0});var bet=s(yN);g7o=r(bet,"from_pretrained()"),bet.forEach(t),h7o=r(vK," to load the model weights."),vK.forEach(t),p7o=i(lA),T($_.$$.fragment,lA),lA.forEach(t),u7o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(D0.$$.fragment,oa),_7o=i(oa),nie=n(oa,"P",{});var vet=s(nie);b7o=r(vet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vet.forEach(t),v7o=i(oa),La=n(oa,"P",{});var iA=s(La);F7o=r(iA,"The model class to instantiate is selected based on the "),sie=n(iA,"CODE",{});var Fet=s(sie);T7o=r(Fet,"model_type"),Fet.forEach(t),M7o=r(iA,` property of the config object (either
passed as an argument or loaded from `),lie=n(iA,"CODE",{});var Tet=s(lie);E7o=r(Tet,"pretrained_model_name_or_path"),Tet.forEach(t),C7o=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=n(iA,"CODE",{});var Met=s(iie);w7o=r(Met,"pretrained_model_name_or_path"),Met.forEach(t),A7o=r(iA,":"),iA.forEach(t),y7o=i(oa),z=n(oa,"UL",{});var W=s(z);k_=n(W,"LI",{});var k0e=s(k_);die=n(k0e,"STRONG",{});var Eet=s(die);L7o=r(Eet,"bart"),Eet.forEach(t),x7o=r(k0e," \u2014 "),LN=n(k0e,"A",{href:!0});var Cet=s(LN);$7o=r(Cet,"BartForCausalLM"),Cet.forEach(t),k7o=r(k0e," (BART model)"),k0e.forEach(t),S7o=i(W),S_=n(W,"LI",{});var S0e=s(S_);cie=n(S0e,"STRONG",{});var wet=s(cie);R7o=r(wet,"bert"),wet.forEach(t),B7o=r(S0e," \u2014 "),xN=n(S0e,"A",{href:!0});var Aet=s(xN);P7o=r(Aet,"BertLMHeadModel"),Aet.forEach(t),I7o=r(S0e," (BERT model)"),S0e.forEach(t),q7o=i(W),R_=n(W,"LI",{});var R0e=s(R_);fie=n(R0e,"STRONG",{});var yet=s(fie);N7o=r(yet,"bert-generation"),yet.forEach(t),j7o=r(R0e," \u2014 "),$N=n(R0e,"A",{href:!0});var Let=s($N);D7o=r(Let,"BertGenerationDecoder"),Let.forEach(t),G7o=r(R0e," (Bert Generation model)"),R0e.forEach(t),O7o=i(W),B_=n(W,"LI",{});var B0e=s(B_);mie=n(B0e,"STRONG",{});var xet=s(mie);V7o=r(xet,"big_bird"),xet.forEach(t),X7o=r(B0e," \u2014 "),kN=n(B0e,"A",{href:!0});var $et=s(kN);z7o=r($et,"BigBirdForCausalLM"),$et.forEach(t),Q7o=r(B0e," (BigBird model)"),B0e.forEach(t),W7o=i(W),P_=n(W,"LI",{});var P0e=s(P_);gie=n(P0e,"STRONG",{});var ket=s(gie);H7o=r(ket,"bigbird_pegasus"),ket.forEach(t),U7o=r(P0e," \u2014 "),SN=n(P0e,"A",{href:!0});var Set=s(SN);J7o=r(Set,"BigBirdPegasusForCausalLM"),Set.forEach(t),Y7o=r(P0e," (BigBirdPegasus model)"),P0e.forEach(t),K7o=i(W),I_=n(W,"LI",{});var I0e=s(I_);hie=n(I0e,"STRONG",{});var Ret=s(hie);Z7o=r(Ret,"blenderbot"),Ret.forEach(t),eMo=r(I0e," \u2014 "),RN=n(I0e,"A",{href:!0});var Bet=s(RN);oMo=r(Bet,"BlenderbotForCausalLM"),Bet.forEach(t),rMo=r(I0e," (Blenderbot model)"),I0e.forEach(t),tMo=i(W),q_=n(W,"LI",{});var q0e=s(q_);pie=n(q0e,"STRONG",{});var Pet=s(pie);aMo=r(Pet,"blenderbot-small"),Pet.forEach(t),nMo=r(q0e," \u2014 "),BN=n(q0e,"A",{href:!0});var Iet=s(BN);sMo=r(Iet,"BlenderbotSmallForCausalLM"),Iet.forEach(t),lMo=r(q0e," (BlenderbotSmall model)"),q0e.forEach(t),iMo=i(W),N_=n(W,"LI",{});var N0e=s(N_);uie=n(N0e,"STRONG",{});var qet=s(uie);dMo=r(qet,"camembert"),qet.forEach(t),cMo=r(N0e," \u2014 "),PN=n(N0e,"A",{href:!0});var Net=s(PN);fMo=r(Net,"CamembertForCausalLM"),Net.forEach(t),mMo=r(N0e," (CamemBERT model)"),N0e.forEach(t),gMo=i(W),j_=n(W,"LI",{});var j0e=s(j_);_ie=n(j0e,"STRONG",{});var jet=s(_ie);hMo=r(jet,"ctrl"),jet.forEach(t),pMo=r(j0e," \u2014 "),IN=n(j0e,"A",{href:!0});var Det=s(IN);uMo=r(Det,"CTRLLMHeadModel"),Det.forEach(t),_Mo=r(j0e," (CTRL model)"),j0e.forEach(t),bMo=i(W),D_=n(W,"LI",{});var D0e=s(D_);bie=n(D0e,"STRONG",{});var Get=s(bie);vMo=r(Get,"data2vec-text"),Get.forEach(t),FMo=r(D0e," \u2014 "),qN=n(D0e,"A",{href:!0});var Oet=s(qN);TMo=r(Oet,"Data2VecTextForCausalLM"),Oet.forEach(t),MMo=r(D0e," (Data2VecText model)"),D0e.forEach(t),EMo=i(W),G_=n(W,"LI",{});var G0e=s(G_);vie=n(G0e,"STRONG",{});var Vet=s(vie);CMo=r(Vet,"electra"),Vet.forEach(t),wMo=r(G0e," \u2014 "),NN=n(G0e,"A",{href:!0});var Xet=s(NN);AMo=r(Xet,"ElectraForCausalLM"),Xet.forEach(t),yMo=r(G0e," (ELECTRA model)"),G0e.forEach(t),LMo=i(W),O_=n(W,"LI",{});var O0e=s(O_);Fie=n(O0e,"STRONG",{});var zet=s(Fie);xMo=r(zet,"gpt2"),zet.forEach(t),$Mo=r(O0e," \u2014 "),jN=n(O0e,"A",{href:!0});var Qet=s(jN);kMo=r(Qet,"GPT2LMHeadModel"),Qet.forEach(t),SMo=r(O0e," (OpenAI GPT-2 model)"),O0e.forEach(t),RMo=i(W),V_=n(W,"LI",{});var V0e=s(V_);Tie=n(V0e,"STRONG",{});var Wet=s(Tie);BMo=r(Wet,"gpt_neo"),Wet.forEach(t),PMo=r(V0e," \u2014 "),DN=n(V0e,"A",{href:!0});var Het=s(DN);IMo=r(Het,"GPTNeoForCausalLM"),Het.forEach(t),qMo=r(V0e," (GPT Neo model)"),V0e.forEach(t),NMo=i(W),X_=n(W,"LI",{});var X0e=s(X_);Mie=n(X0e,"STRONG",{});var Uet=s(Mie);jMo=r(Uet,"gptj"),Uet.forEach(t),DMo=r(X0e," \u2014 "),GN=n(X0e,"A",{href:!0});var Jet=s(GN);GMo=r(Jet,"GPTJForCausalLM"),Jet.forEach(t),OMo=r(X0e," (GPT-J model)"),X0e.forEach(t),VMo=i(W),z_=n(W,"LI",{});var z0e=s(z_);Eie=n(z0e,"STRONG",{});var Yet=s(Eie);XMo=r(Yet,"marian"),Yet.forEach(t),zMo=r(z0e," \u2014 "),ON=n(z0e,"A",{href:!0});var Ket=s(ON);QMo=r(Ket,"MarianForCausalLM"),Ket.forEach(t),WMo=r(z0e," (Marian model)"),z0e.forEach(t),HMo=i(W),Q_=n(W,"LI",{});var Q0e=s(Q_);Cie=n(Q0e,"STRONG",{});var Zet=s(Cie);UMo=r(Zet,"mbart"),Zet.forEach(t),JMo=r(Q0e," \u2014 "),VN=n(Q0e,"A",{href:!0});var eot=s(VN);YMo=r(eot,"MBartForCausalLM"),eot.forEach(t),KMo=r(Q0e," (mBART model)"),Q0e.forEach(t),ZMo=i(W),W_=n(W,"LI",{});var W0e=s(W_);wie=n(W0e,"STRONG",{});var oot=s(wie);e4o=r(oot,"megatron-bert"),oot.forEach(t),o4o=r(W0e," \u2014 "),XN=n(W0e,"A",{href:!0});var rot=s(XN);r4o=r(rot,"MegatronBertForCausalLM"),rot.forEach(t),t4o=r(W0e," (MegatronBert model)"),W0e.forEach(t),a4o=i(W),H_=n(W,"LI",{});var H0e=s(H_);Aie=n(H0e,"STRONG",{});var tot=s(Aie);n4o=r(tot,"openai-gpt"),tot.forEach(t),s4o=r(H0e," \u2014 "),zN=n(H0e,"A",{href:!0});var aot=s(zN);l4o=r(aot,"OpenAIGPTLMHeadModel"),aot.forEach(t),i4o=r(H0e," (OpenAI GPT model)"),H0e.forEach(t),d4o=i(W),U_=n(W,"LI",{});var U0e=s(U_);yie=n(U0e,"STRONG",{});var not=s(yie);c4o=r(not,"opt"),not.forEach(t),f4o=r(U0e," \u2014 "),QN=n(U0e,"A",{href:!0});var sot=s(QN);m4o=r(sot,"OPTForCausalLM"),sot.forEach(t),g4o=r(U0e," (OPT model)"),U0e.forEach(t),h4o=i(W),J_=n(W,"LI",{});var J0e=s(J_);Lie=n(J0e,"STRONG",{});var lot=s(Lie);p4o=r(lot,"pegasus"),lot.forEach(t),u4o=r(J0e," \u2014 "),WN=n(J0e,"A",{href:!0});var iot=s(WN);_4o=r(iot,"PegasusForCausalLM"),iot.forEach(t),b4o=r(J0e," (Pegasus model)"),J0e.forEach(t),v4o=i(W),Y_=n(W,"LI",{});var Y0e=s(Y_);xie=n(Y0e,"STRONG",{});var dot=s(xie);F4o=r(dot,"plbart"),dot.forEach(t),T4o=r(Y0e," \u2014 "),HN=n(Y0e,"A",{href:!0});var cot=s(HN);M4o=r(cot,"PLBartForCausalLM"),cot.forEach(t),E4o=r(Y0e," (PLBart model)"),Y0e.forEach(t),C4o=i(W),K_=n(W,"LI",{});var K0e=s(K_);$ie=n(K0e,"STRONG",{});var fot=s($ie);w4o=r(fot,"prophetnet"),fot.forEach(t),A4o=r(K0e," \u2014 "),UN=n(K0e,"A",{href:!0});var mot=s(UN);y4o=r(mot,"ProphetNetForCausalLM"),mot.forEach(t),L4o=r(K0e," (ProphetNet model)"),K0e.forEach(t),x4o=i(W),Z_=n(W,"LI",{});var Z0e=s(Z_);kie=n(Z0e,"STRONG",{});var got=s(kie);$4o=r(got,"qdqbert"),got.forEach(t),k4o=r(Z0e," \u2014 "),JN=n(Z0e,"A",{href:!0});var hot=s(JN);S4o=r(hot,"QDQBertLMHeadModel"),hot.forEach(t),R4o=r(Z0e," (QDQBert model)"),Z0e.forEach(t),B4o=i(W),e2=n(W,"LI",{});var eye=s(e2);Sie=n(eye,"STRONG",{});var pot=s(Sie);P4o=r(pot,"reformer"),pot.forEach(t),I4o=r(eye," \u2014 "),YN=n(eye,"A",{href:!0});var uot=s(YN);q4o=r(uot,"ReformerModelWithLMHead"),uot.forEach(t),N4o=r(eye," (Reformer model)"),eye.forEach(t),j4o=i(W),o2=n(W,"LI",{});var oye=s(o2);Rie=n(oye,"STRONG",{});var _ot=s(Rie);D4o=r(_ot,"rembert"),_ot.forEach(t),G4o=r(oye," \u2014 "),KN=n(oye,"A",{href:!0});var bot=s(KN);O4o=r(bot,"RemBertForCausalLM"),bot.forEach(t),V4o=r(oye," (RemBERT model)"),oye.forEach(t),X4o=i(W),r2=n(W,"LI",{});var rye=s(r2);Bie=n(rye,"STRONG",{});var vot=s(Bie);z4o=r(vot,"roberta"),vot.forEach(t),Q4o=r(rye," \u2014 "),ZN=n(rye,"A",{href:!0});var Fot=s(ZN);W4o=r(Fot,"RobertaForCausalLM"),Fot.forEach(t),H4o=r(rye," (RoBERTa model)"),rye.forEach(t),U4o=i(W),t2=n(W,"LI",{});var tye=s(t2);Pie=n(tye,"STRONG",{});var Tot=s(Pie);J4o=r(Tot,"roformer"),Tot.forEach(t),Y4o=r(tye," \u2014 "),ej=n(tye,"A",{href:!0});var Mot=s(ej);K4o=r(Mot,"RoFormerForCausalLM"),Mot.forEach(t),Z4o=r(tye," (RoFormer model)"),tye.forEach(t),eEo=i(W),a2=n(W,"LI",{});var aye=s(a2);Iie=n(aye,"STRONG",{});var Eot=s(Iie);oEo=r(Eot,"speech_to_text_2"),Eot.forEach(t),rEo=r(aye," \u2014 "),oj=n(aye,"A",{href:!0});var Cot=s(oj);tEo=r(Cot,"Speech2Text2ForCausalLM"),Cot.forEach(t),aEo=r(aye," (Speech2Text2 model)"),aye.forEach(t),nEo=i(W),n2=n(W,"LI",{});var nye=s(n2);qie=n(nye,"STRONG",{});var wot=s(qie);sEo=r(wot,"transfo-xl"),wot.forEach(t),lEo=r(nye," \u2014 "),rj=n(nye,"A",{href:!0});var Aot=s(rj);iEo=r(Aot,"TransfoXLLMHeadModel"),Aot.forEach(t),dEo=r(nye," (Transformer-XL model)"),nye.forEach(t),cEo=i(W),s2=n(W,"LI",{});var sye=s(s2);Nie=n(sye,"STRONG",{});var yot=s(Nie);fEo=r(yot,"trocr"),yot.forEach(t),mEo=r(sye," \u2014 "),tj=n(sye,"A",{href:!0});var Lot=s(tj);gEo=r(Lot,"TrOCRForCausalLM"),Lot.forEach(t),hEo=r(sye," (TrOCR model)"),sye.forEach(t),pEo=i(W),l2=n(W,"LI",{});var lye=s(l2);jie=n(lye,"STRONG",{});var xot=s(jie);uEo=r(xot,"xglm"),xot.forEach(t),_Eo=r(lye," \u2014 "),aj=n(lye,"A",{href:!0});var $ot=s(aj);bEo=r($ot,"XGLMForCausalLM"),$ot.forEach(t),vEo=r(lye," (XGLM model)"),lye.forEach(t),FEo=i(W),i2=n(W,"LI",{});var iye=s(i2);Die=n(iye,"STRONG",{});var kot=s(Die);TEo=r(kot,"xlm"),kot.forEach(t),MEo=r(iye," \u2014 "),nj=n(iye,"A",{href:!0});var Sot=s(nj);EEo=r(Sot,"XLMWithLMHeadModel"),Sot.forEach(t),CEo=r(iye," (XLM model)"),iye.forEach(t),wEo=i(W),d2=n(W,"LI",{});var dye=s(d2);Gie=n(dye,"STRONG",{});var Rot=s(Gie);AEo=r(Rot,"xlm-prophetnet"),Rot.forEach(t),yEo=r(dye," \u2014 "),sj=n(dye,"A",{href:!0});var Bot=s(sj);LEo=r(Bot,"XLMProphetNetForCausalLM"),Bot.forEach(t),xEo=r(dye," (XLMProphetNet model)"),dye.forEach(t),$Eo=i(W),c2=n(W,"LI",{});var cye=s(c2);Oie=n(cye,"STRONG",{});var Pot=s(Oie);kEo=r(Pot,"xlm-roberta"),Pot.forEach(t),SEo=r(cye," \u2014 "),lj=n(cye,"A",{href:!0});var Iot=s(lj);REo=r(Iot,"XLMRobertaForCausalLM"),Iot.forEach(t),BEo=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),PEo=i(W),f2=n(W,"LI",{});var fye=s(f2);Vie=n(fye,"STRONG",{});var qot=s(Vie);IEo=r(qot,"xlm-roberta-xl"),qot.forEach(t),qEo=r(fye," \u2014 "),ij=n(fye,"A",{href:!0});var Not=s(ij);NEo=r(Not,"XLMRobertaXLForCausalLM"),Not.forEach(t),jEo=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),DEo=i(W),m2=n(W,"LI",{});var mye=s(m2);Xie=n(mye,"STRONG",{});var jot=s(Xie);GEo=r(jot,"xlnet"),jot.forEach(t),OEo=r(mye," \u2014 "),dj=n(mye,"A",{href:!0});var Dot=s(dj);VEo=r(Dot,"XLNetLMHeadModel"),Dot.forEach(t),XEo=r(mye," (XLNet model)"),mye.forEach(t),W.forEach(t),zEo=i(oa),g2=n(oa,"P",{});var gye=s(g2);QEo=r(gye,"The model is set in evaluation mode by default using "),zie=n(gye,"CODE",{});var Got=s(zie);WEo=r(Got,"model.eval()"),Got.forEach(t),HEo=r(gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=n(gye,"CODE",{});var Oot=s(Qie);UEo=r(Oot,"model.train()"),Oot.forEach(t),gye.forEach(t),JEo=i(oa),T(h2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),FIe=i(f),$i=n(f,"H2",{class:!0});var CNe=s($i);p2=n(CNe,"A",{id:!0,class:!0,href:!0});var Vot=s(p2);Wie=n(Vot,"SPAN",{});var Xot=s(Wie);T(G0.$$.fragment,Xot),Xot.forEach(t),Vot.forEach(t),YEo=i(CNe),Hie=n(CNe,"SPAN",{});var zot=s(Hie);KEo=r(zot,"AutoModelForMaskedLM"),zot.forEach(t),CNe.forEach(t),TIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(O0.$$.fragment,Os),ZEo=i(Os),ki=n(Os,"P",{});var FK=s(ki);eCo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cj=n(FK,"A",{href:!0});var Qot=s(cj);oCo=r(Qot,"from_pretrained()"),Qot.forEach(t),rCo=r(FK," class method or the "),fj=n(FK,"A",{href:!0});var Wot=s(fj);tCo=r(Wot,"from_config()"),Wot.forEach(t),aCo=r(FK,` class
method.`),FK.forEach(t),nCo=i(Os),V0=n(Os,"P",{});var wNe=s(V0);sCo=r(wNe,"This class cannot be instantiated directly using "),Uie=n(wNe,"CODE",{});var Hot=s(Uie);lCo=r(Hot,"__init__()"),Hot.forEach(t),iCo=r(wNe," (throws an error)."),wNe.forEach(t),dCo=i(Os),at=n(Os,"DIV",{class:!0});var dA=s(at);T(X0.$$.fragment,dA),cCo=i(dA),Jie=n(dA,"P",{});var Uot=s(Jie);fCo=r(Uot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Uot.forEach(t),mCo=i(dA),Si=n(dA,"P",{});var TK=s(Si);gCo=r(TK,`Note:
Loading a model from its configuration file does `),Yie=n(TK,"STRONG",{});var Jot=s(Yie);hCo=r(Jot,"not"),Jot.forEach(t),pCo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(TK,"A",{href:!0});var Yot=s(mj);uCo=r(Yot,"from_pretrained()"),Yot.forEach(t),_Co=r(TK," to load the model weights."),TK.forEach(t),bCo=i(dA),T(u2.$$.fragment,dA),dA.forEach(t),vCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(z0.$$.fragment,ra),FCo=i(ra),Kie=n(ra,"P",{});var Kot=s(Kie);TCo=r(Kot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kot.forEach(t),MCo=i(ra),xa=n(ra,"P",{});var cA=s(xa);ECo=r(cA,"The model class to instantiate is selected based on the "),Zie=n(cA,"CODE",{});var Zot=s(Zie);CCo=r(Zot,"model_type"),Zot.forEach(t),wCo=r(cA,` property of the config object (either
passed as an argument or loaded from `),ede=n(cA,"CODE",{});var ert=s(ede);ACo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),yCo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(cA,"CODE",{});var ort=s(ode);LCo=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),xCo=r(cA,":"),cA.forEach(t),$Co=i(ra),Q=n(ra,"UL",{});var H=s(Q);_2=n(H,"LI",{});var hye=s(_2);rde=n(hye,"STRONG",{});var rrt=s(rde);kCo=r(rrt,"albert"),rrt.forEach(t),SCo=r(hye," \u2014 "),gj=n(hye,"A",{href:!0});var trt=s(gj);RCo=r(trt,"AlbertForMaskedLM"),trt.forEach(t),BCo=r(hye," (ALBERT model)"),hye.forEach(t),PCo=i(H),b2=n(H,"LI",{});var pye=s(b2);tde=n(pye,"STRONG",{});var art=s(tde);ICo=r(art,"bart"),art.forEach(t),qCo=r(pye," \u2014 "),hj=n(pye,"A",{href:!0});var nrt=s(hj);NCo=r(nrt,"BartForConditionalGeneration"),nrt.forEach(t),jCo=r(pye," (BART model)"),pye.forEach(t),DCo=i(H),v2=n(H,"LI",{});var uye=s(v2);ade=n(uye,"STRONG",{});var srt=s(ade);GCo=r(srt,"bert"),srt.forEach(t),OCo=r(uye," \u2014 "),pj=n(uye,"A",{href:!0});var lrt=s(pj);VCo=r(lrt,"BertForMaskedLM"),lrt.forEach(t),XCo=r(uye," (BERT model)"),uye.forEach(t),zCo=i(H),F2=n(H,"LI",{});var _ye=s(F2);nde=n(_ye,"STRONG",{});var irt=s(nde);QCo=r(irt,"big_bird"),irt.forEach(t),WCo=r(_ye," \u2014 "),uj=n(_ye,"A",{href:!0});var drt=s(uj);HCo=r(drt,"BigBirdForMaskedLM"),drt.forEach(t),UCo=r(_ye," (BigBird model)"),_ye.forEach(t),JCo=i(H),T2=n(H,"LI",{});var bye=s(T2);sde=n(bye,"STRONG",{});var crt=s(sde);YCo=r(crt,"camembert"),crt.forEach(t),KCo=r(bye," \u2014 "),_j=n(bye,"A",{href:!0});var frt=s(_j);ZCo=r(frt,"CamembertForMaskedLM"),frt.forEach(t),ewo=r(bye," (CamemBERT model)"),bye.forEach(t),owo=i(H),M2=n(H,"LI",{});var vye=s(M2);lde=n(vye,"STRONG",{});var mrt=s(lde);rwo=r(mrt,"convbert"),mrt.forEach(t),two=r(vye," \u2014 "),bj=n(vye,"A",{href:!0});var grt=s(bj);awo=r(grt,"ConvBertForMaskedLM"),grt.forEach(t),nwo=r(vye," (ConvBERT model)"),vye.forEach(t),swo=i(H),E2=n(H,"LI",{});var Fye=s(E2);ide=n(Fye,"STRONG",{});var hrt=s(ide);lwo=r(hrt,"data2vec-text"),hrt.forEach(t),iwo=r(Fye," \u2014 "),vj=n(Fye,"A",{href:!0});var prt=s(vj);dwo=r(prt,"Data2VecTextForMaskedLM"),prt.forEach(t),cwo=r(Fye," (Data2VecText model)"),Fye.forEach(t),fwo=i(H),C2=n(H,"LI",{});var Tye=s(C2);dde=n(Tye,"STRONG",{});var urt=s(dde);mwo=r(urt,"deberta"),urt.forEach(t),gwo=r(Tye," \u2014 "),Fj=n(Tye,"A",{href:!0});var _rt=s(Fj);hwo=r(_rt,"DebertaForMaskedLM"),_rt.forEach(t),pwo=r(Tye," (DeBERTa model)"),Tye.forEach(t),uwo=i(H),w2=n(H,"LI",{});var Mye=s(w2);cde=n(Mye,"STRONG",{});var brt=s(cde);_wo=r(brt,"deberta-v2"),brt.forEach(t),bwo=r(Mye," \u2014 "),Tj=n(Mye,"A",{href:!0});var vrt=s(Tj);vwo=r(vrt,"DebertaV2ForMaskedLM"),vrt.forEach(t),Fwo=r(Mye," (DeBERTa-v2 model)"),Mye.forEach(t),Two=i(H),A2=n(H,"LI",{});var Eye=s(A2);fde=n(Eye,"STRONG",{});var Frt=s(fde);Mwo=r(Frt,"distilbert"),Frt.forEach(t),Ewo=r(Eye," \u2014 "),Mj=n(Eye,"A",{href:!0});var Trt=s(Mj);Cwo=r(Trt,"DistilBertForMaskedLM"),Trt.forEach(t),wwo=r(Eye," (DistilBERT model)"),Eye.forEach(t),Awo=i(H),y2=n(H,"LI",{});var Cye=s(y2);mde=n(Cye,"STRONG",{});var Mrt=s(mde);ywo=r(Mrt,"electra"),Mrt.forEach(t),Lwo=r(Cye," \u2014 "),Ej=n(Cye,"A",{href:!0});var Ert=s(Ej);xwo=r(Ert,"ElectraForMaskedLM"),Ert.forEach(t),$wo=r(Cye," (ELECTRA model)"),Cye.forEach(t),kwo=i(H),L2=n(H,"LI",{});var wye=s(L2);gde=n(wye,"STRONG",{});var Crt=s(gde);Swo=r(Crt,"flaubert"),Crt.forEach(t),Rwo=r(wye," \u2014 "),Cj=n(wye,"A",{href:!0});var wrt=s(Cj);Bwo=r(wrt,"FlaubertWithLMHeadModel"),wrt.forEach(t),Pwo=r(wye," (FlauBERT model)"),wye.forEach(t),Iwo=i(H),x2=n(H,"LI",{});var Aye=s(x2);hde=n(Aye,"STRONG",{});var Art=s(hde);qwo=r(Art,"fnet"),Art.forEach(t),Nwo=r(Aye," \u2014 "),wj=n(Aye,"A",{href:!0});var yrt=s(wj);jwo=r(yrt,"FNetForMaskedLM"),yrt.forEach(t),Dwo=r(Aye," (FNet model)"),Aye.forEach(t),Gwo=i(H),$2=n(H,"LI",{});var yye=s($2);pde=n(yye,"STRONG",{});var Lrt=s(pde);Owo=r(Lrt,"funnel"),Lrt.forEach(t),Vwo=r(yye," \u2014 "),Aj=n(yye,"A",{href:!0});var xrt=s(Aj);Xwo=r(xrt,"FunnelForMaskedLM"),xrt.forEach(t),zwo=r(yye," (Funnel Transformer model)"),yye.forEach(t),Qwo=i(H),k2=n(H,"LI",{});var Lye=s(k2);ude=n(Lye,"STRONG",{});var $rt=s(ude);Wwo=r($rt,"ibert"),$rt.forEach(t),Hwo=r(Lye," \u2014 "),yj=n(Lye,"A",{href:!0});var krt=s(yj);Uwo=r(krt,"IBertForMaskedLM"),krt.forEach(t),Jwo=r(Lye," (I-BERT model)"),Lye.forEach(t),Ywo=i(H),S2=n(H,"LI",{});var xye=s(S2);_de=n(xye,"STRONG",{});var Srt=s(_de);Kwo=r(Srt,"layoutlm"),Srt.forEach(t),Zwo=r(xye," \u2014 "),Lj=n(xye,"A",{href:!0});var Rrt=s(Lj);eAo=r(Rrt,"LayoutLMForMaskedLM"),Rrt.forEach(t),oAo=r(xye," (LayoutLM model)"),xye.forEach(t),rAo=i(H),R2=n(H,"LI",{});var $ye=s(R2);bde=n($ye,"STRONG",{});var Brt=s(bde);tAo=r(Brt,"longformer"),Brt.forEach(t),aAo=r($ye," \u2014 "),xj=n($ye,"A",{href:!0});var Prt=s(xj);nAo=r(Prt,"LongformerForMaskedLM"),Prt.forEach(t),sAo=r($ye," (Longformer model)"),$ye.forEach(t),lAo=i(H),B2=n(H,"LI",{});var kye=s(B2);vde=n(kye,"STRONG",{});var Irt=s(vde);iAo=r(Irt,"mbart"),Irt.forEach(t),dAo=r(kye," \u2014 "),$j=n(kye,"A",{href:!0});var qrt=s($j);cAo=r(qrt,"MBartForConditionalGeneration"),qrt.forEach(t),fAo=r(kye," (mBART model)"),kye.forEach(t),mAo=i(H),P2=n(H,"LI",{});var Sye=s(P2);Fde=n(Sye,"STRONG",{});var Nrt=s(Fde);gAo=r(Nrt,"megatron-bert"),Nrt.forEach(t),hAo=r(Sye," \u2014 "),kj=n(Sye,"A",{href:!0});var jrt=s(kj);pAo=r(jrt,"MegatronBertForMaskedLM"),jrt.forEach(t),uAo=r(Sye," (MegatronBert model)"),Sye.forEach(t),_Ao=i(H),I2=n(H,"LI",{});var Rye=s(I2);Tde=n(Rye,"STRONG",{});var Drt=s(Tde);bAo=r(Drt,"mobilebert"),Drt.forEach(t),vAo=r(Rye," \u2014 "),Sj=n(Rye,"A",{href:!0});var Grt=s(Sj);FAo=r(Grt,"MobileBertForMaskedLM"),Grt.forEach(t),TAo=r(Rye," (MobileBERT model)"),Rye.forEach(t),MAo=i(H),q2=n(H,"LI",{});var Bye=s(q2);Mde=n(Bye,"STRONG",{});var Ort=s(Mde);EAo=r(Ort,"mpnet"),Ort.forEach(t),CAo=r(Bye," \u2014 "),Rj=n(Bye,"A",{href:!0});var Vrt=s(Rj);wAo=r(Vrt,"MPNetForMaskedLM"),Vrt.forEach(t),AAo=r(Bye," (MPNet model)"),Bye.forEach(t),yAo=i(H),N2=n(H,"LI",{});var Pye=s(N2);Ede=n(Pye,"STRONG",{});var Xrt=s(Ede);LAo=r(Xrt,"nystromformer"),Xrt.forEach(t),xAo=r(Pye," \u2014 "),Bj=n(Pye,"A",{href:!0});var zrt=s(Bj);$Ao=r(zrt,"NystromformerForMaskedLM"),zrt.forEach(t),kAo=r(Pye," (Nystromformer model)"),Pye.forEach(t),SAo=i(H),j2=n(H,"LI",{});var Iye=s(j2);Cde=n(Iye,"STRONG",{});var Qrt=s(Cde);RAo=r(Qrt,"perceiver"),Qrt.forEach(t),BAo=r(Iye," \u2014 "),Pj=n(Iye,"A",{href:!0});var Wrt=s(Pj);PAo=r(Wrt,"PerceiverForMaskedLM"),Wrt.forEach(t),IAo=r(Iye," (Perceiver model)"),Iye.forEach(t),qAo=i(H),D2=n(H,"LI",{});var qye=s(D2);wde=n(qye,"STRONG",{});var Hrt=s(wde);NAo=r(Hrt,"qdqbert"),Hrt.forEach(t),jAo=r(qye," \u2014 "),Ij=n(qye,"A",{href:!0});var Urt=s(Ij);DAo=r(Urt,"QDQBertForMaskedLM"),Urt.forEach(t),GAo=r(qye," (QDQBert model)"),qye.forEach(t),OAo=i(H),G2=n(H,"LI",{});var Nye=s(G2);Ade=n(Nye,"STRONG",{});var Jrt=s(Ade);VAo=r(Jrt,"reformer"),Jrt.forEach(t),XAo=r(Nye," \u2014 "),qj=n(Nye,"A",{href:!0});var Yrt=s(qj);zAo=r(Yrt,"ReformerForMaskedLM"),Yrt.forEach(t),QAo=r(Nye," (Reformer model)"),Nye.forEach(t),WAo=i(H),O2=n(H,"LI",{});var jye=s(O2);yde=n(jye,"STRONG",{});var Krt=s(yde);HAo=r(Krt,"rembert"),Krt.forEach(t),UAo=r(jye," \u2014 "),Nj=n(jye,"A",{href:!0});var Zrt=s(Nj);JAo=r(Zrt,"RemBertForMaskedLM"),Zrt.forEach(t),YAo=r(jye," (RemBERT model)"),jye.forEach(t),KAo=i(H),V2=n(H,"LI",{});var Dye=s(V2);Lde=n(Dye,"STRONG",{});var ett=s(Lde);ZAo=r(ett,"roberta"),ett.forEach(t),e6o=r(Dye," \u2014 "),jj=n(Dye,"A",{href:!0});var ott=s(jj);o6o=r(ott,"RobertaForMaskedLM"),ott.forEach(t),r6o=r(Dye," (RoBERTa model)"),Dye.forEach(t),t6o=i(H),X2=n(H,"LI",{});var Gye=s(X2);xde=n(Gye,"STRONG",{});var rtt=s(xde);a6o=r(rtt,"roformer"),rtt.forEach(t),n6o=r(Gye," \u2014 "),Dj=n(Gye,"A",{href:!0});var ttt=s(Dj);s6o=r(ttt,"RoFormerForMaskedLM"),ttt.forEach(t),l6o=r(Gye," (RoFormer model)"),Gye.forEach(t),i6o=i(H),z2=n(H,"LI",{});var Oye=s(z2);$de=n(Oye,"STRONG",{});var att=s($de);d6o=r(att,"squeezebert"),att.forEach(t),c6o=r(Oye," \u2014 "),Gj=n(Oye,"A",{href:!0});var ntt=s(Gj);f6o=r(ntt,"SqueezeBertForMaskedLM"),ntt.forEach(t),m6o=r(Oye," (SqueezeBERT model)"),Oye.forEach(t),g6o=i(H),Q2=n(H,"LI",{});var Vye=s(Q2);kde=n(Vye,"STRONG",{});var stt=s(kde);h6o=r(stt,"tapas"),stt.forEach(t),p6o=r(Vye," \u2014 "),Oj=n(Vye,"A",{href:!0});var ltt=s(Oj);u6o=r(ltt,"TapasForMaskedLM"),ltt.forEach(t),_6o=r(Vye," (TAPAS model)"),Vye.forEach(t),b6o=i(H),W2=n(H,"LI",{});var Xye=s(W2);Sde=n(Xye,"STRONG",{});var itt=s(Sde);v6o=r(itt,"wav2vec2"),itt.forEach(t),F6o=r(Xye," \u2014 "),Rde=n(Xye,"CODE",{});var dtt=s(Rde);T6o=r(dtt,"Wav2Vec2ForMaskedLM"),dtt.forEach(t),M6o=r(Xye," (Wav2Vec2 model)"),Xye.forEach(t),E6o=i(H),H2=n(H,"LI",{});var zye=s(H2);Bde=n(zye,"STRONG",{});var ctt=s(Bde);C6o=r(ctt,"xlm"),ctt.forEach(t),w6o=r(zye," \u2014 "),Vj=n(zye,"A",{href:!0});var ftt=s(Vj);A6o=r(ftt,"XLMWithLMHeadModel"),ftt.forEach(t),y6o=r(zye," (XLM model)"),zye.forEach(t),L6o=i(H),U2=n(H,"LI",{});var Qye=s(U2);Pde=n(Qye,"STRONG",{});var mtt=s(Pde);x6o=r(mtt,"xlm-roberta"),mtt.forEach(t),$6o=r(Qye," \u2014 "),Xj=n(Qye,"A",{href:!0});var gtt=s(Xj);k6o=r(gtt,"XLMRobertaForMaskedLM"),gtt.forEach(t),S6o=r(Qye," (XLM-RoBERTa model)"),Qye.forEach(t),R6o=i(H),J2=n(H,"LI",{});var Wye=s(J2);Ide=n(Wye,"STRONG",{});var htt=s(Ide);B6o=r(htt,"xlm-roberta-xl"),htt.forEach(t),P6o=r(Wye," \u2014 "),zj=n(Wye,"A",{href:!0});var ptt=s(zj);I6o=r(ptt,"XLMRobertaXLForMaskedLM"),ptt.forEach(t),q6o=r(Wye," (XLM-RoBERTa-XL model)"),Wye.forEach(t),N6o=i(H),Y2=n(H,"LI",{});var Hye=s(Y2);qde=n(Hye,"STRONG",{});var utt=s(qde);j6o=r(utt,"yoso"),utt.forEach(t),D6o=r(Hye," \u2014 "),Qj=n(Hye,"A",{href:!0});var _tt=s(Qj);G6o=r(_tt,"YosoForMaskedLM"),_tt.forEach(t),O6o=r(Hye," (YOSO model)"),Hye.forEach(t),H.forEach(t),V6o=i(ra),K2=n(ra,"P",{});var Uye=s(K2);X6o=r(Uye,"The model is set in evaluation mode by default using "),Nde=n(Uye,"CODE",{});var btt=s(Nde);z6o=r(btt,"model.eval()"),btt.forEach(t),Q6o=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(Uye,"CODE",{});var vtt=s(jde);W6o=r(vtt,"model.train()"),vtt.forEach(t),Uye.forEach(t),H6o=i(ra),T(Z2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),MIe=i(f),Ri=n(f,"H2",{class:!0});var ANe=s(Ri);e1=n(ANe,"A",{id:!0,class:!0,href:!0});var Ftt=s(e1);Dde=n(Ftt,"SPAN",{});var Ttt=s(Dde);T(Q0.$$.fragment,Ttt),Ttt.forEach(t),Ftt.forEach(t),U6o=i(ANe),Gde=n(ANe,"SPAN",{});var Mtt=s(Gde);J6o=r(Mtt,"AutoModelForSeq2SeqLM"),Mtt.forEach(t),ANe.forEach(t),EIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(W0.$$.fragment,Vs),Y6o=i(Vs),Bi=n(Vs,"P",{});var MK=s(Bi);K6o=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wj=n(MK,"A",{href:!0});var Ett=s(Wj);Z6o=r(Ett,"from_pretrained()"),Ett.forEach(t),e0o=r(MK," class method or the "),Hj=n(MK,"A",{href:!0});var Ctt=s(Hj);o0o=r(Ctt,"from_config()"),Ctt.forEach(t),r0o=r(MK,` class
method.`),MK.forEach(t),t0o=i(Vs),H0=n(Vs,"P",{});var yNe=s(H0);a0o=r(yNe,"This class cannot be instantiated directly using "),Ode=n(yNe,"CODE",{});var wtt=s(Ode);n0o=r(wtt,"__init__()"),wtt.forEach(t),s0o=r(yNe," (throws an error)."),yNe.forEach(t),l0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var fA=s(nt);T(U0.$$.fragment,fA),i0o=i(fA),Vde=n(fA,"P",{});var Att=s(Vde);d0o=r(Att,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Att.forEach(t),c0o=i(fA),Pi=n(fA,"P",{});var EK=s(Pi);f0o=r(EK,`Note:
Loading a model from its configuration file does `),Xde=n(EK,"STRONG",{});var ytt=s(Xde);m0o=r(ytt,"not"),ytt.forEach(t),g0o=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(EK,"A",{href:!0});var Ltt=s(Uj);h0o=r(Ltt,"from_pretrained()"),Ltt.forEach(t),p0o=r(EK," to load the model weights."),EK.forEach(t),u0o=i(fA),T(o1.$$.fragment,fA),fA.forEach(t),_0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(J0.$$.fragment,ta),b0o=i(ta),zde=n(ta,"P",{});var xtt=s(zde);v0o=r(xtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xtt.forEach(t),F0o=i(ta),$a=n(ta,"P",{});var mA=s($a);T0o=r(mA,"The model class to instantiate is selected based on the "),Qde=n(mA,"CODE",{});var $tt=s(Qde);M0o=r($tt,"model_type"),$tt.forEach(t),E0o=r(mA,` property of the config object (either
passed as an argument or loaded from `),Wde=n(mA,"CODE",{});var ktt=s(Wde);C0o=r(ktt,"pretrained_model_name_or_path"),ktt.forEach(t),w0o=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(mA,"CODE",{});var Stt=s(Hde);A0o=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),y0o=r(mA,":"),mA.forEach(t),L0o=i(ta),he=n(ta,"UL",{});var ue=s(he);r1=n(ue,"LI",{});var Jye=s(r1);Ude=n(Jye,"STRONG",{});var Rtt=s(Ude);x0o=r(Rtt,"bart"),Rtt.forEach(t),$0o=r(Jye," \u2014 "),Jj=n(Jye,"A",{href:!0});var Btt=s(Jj);k0o=r(Btt,"BartForConditionalGeneration"),Btt.forEach(t),S0o=r(Jye," (BART model)"),Jye.forEach(t),R0o=i(ue),t1=n(ue,"LI",{});var Yye=s(t1);Jde=n(Yye,"STRONG",{});var Ptt=s(Jde);B0o=r(Ptt,"bigbird_pegasus"),Ptt.forEach(t),P0o=r(Yye," \u2014 "),Yj=n(Yye,"A",{href:!0});var Itt=s(Yj);I0o=r(Itt,"BigBirdPegasusForConditionalGeneration"),Itt.forEach(t),q0o=r(Yye," (BigBirdPegasus model)"),Yye.forEach(t),N0o=i(ue),a1=n(ue,"LI",{});var Kye=s(a1);Yde=n(Kye,"STRONG",{});var qtt=s(Yde);j0o=r(qtt,"blenderbot"),qtt.forEach(t),D0o=r(Kye," \u2014 "),Kj=n(Kye,"A",{href:!0});var Ntt=s(Kj);G0o=r(Ntt,"BlenderbotForConditionalGeneration"),Ntt.forEach(t),O0o=r(Kye," (Blenderbot model)"),Kye.forEach(t),V0o=i(ue),n1=n(ue,"LI",{});var Zye=s(n1);Kde=n(Zye,"STRONG",{});var jtt=s(Kde);X0o=r(jtt,"blenderbot-small"),jtt.forEach(t),z0o=r(Zye," \u2014 "),Zj=n(Zye,"A",{href:!0});var Dtt=s(Zj);Q0o=r(Dtt,"BlenderbotSmallForConditionalGeneration"),Dtt.forEach(t),W0o=r(Zye," (BlenderbotSmall model)"),Zye.forEach(t),H0o=i(ue),s1=n(ue,"LI",{});var eLe=s(s1);Zde=n(eLe,"STRONG",{});var Gtt=s(Zde);U0o=r(Gtt,"encoder-decoder"),Gtt.forEach(t),J0o=r(eLe," \u2014 "),eD=n(eLe,"A",{href:!0});var Ott=s(eD);Y0o=r(Ott,"EncoderDecoderModel"),Ott.forEach(t),K0o=r(eLe," (Encoder decoder model)"),eLe.forEach(t),Z0o=i(ue),l1=n(ue,"LI",{});var oLe=s(l1);ece=n(oLe,"STRONG",{});var Vtt=s(ece);eyo=r(Vtt,"fsmt"),Vtt.forEach(t),oyo=r(oLe," \u2014 "),oD=n(oLe,"A",{href:!0});var Xtt=s(oD);ryo=r(Xtt,"FSMTForConditionalGeneration"),Xtt.forEach(t),tyo=r(oLe," (FairSeq Machine-Translation model)"),oLe.forEach(t),ayo=i(ue),i1=n(ue,"LI",{});var rLe=s(i1);oce=n(rLe,"STRONG",{});var ztt=s(oce);nyo=r(ztt,"led"),ztt.forEach(t),syo=r(rLe," \u2014 "),rD=n(rLe,"A",{href:!0});var Qtt=s(rD);lyo=r(Qtt,"LEDForConditionalGeneration"),Qtt.forEach(t),iyo=r(rLe," (LED model)"),rLe.forEach(t),dyo=i(ue),d1=n(ue,"LI",{});var tLe=s(d1);rce=n(tLe,"STRONG",{});var Wtt=s(rce);cyo=r(Wtt,"m2m_100"),Wtt.forEach(t),fyo=r(tLe," \u2014 "),tD=n(tLe,"A",{href:!0});var Htt=s(tD);myo=r(Htt,"M2M100ForConditionalGeneration"),Htt.forEach(t),gyo=r(tLe," (M2M100 model)"),tLe.forEach(t),hyo=i(ue),c1=n(ue,"LI",{});var aLe=s(c1);tce=n(aLe,"STRONG",{});var Utt=s(tce);pyo=r(Utt,"marian"),Utt.forEach(t),uyo=r(aLe," \u2014 "),aD=n(aLe,"A",{href:!0});var Jtt=s(aD);_yo=r(Jtt,"MarianMTModel"),Jtt.forEach(t),byo=r(aLe," (Marian model)"),aLe.forEach(t),vyo=i(ue),f1=n(ue,"LI",{});var nLe=s(f1);ace=n(nLe,"STRONG",{});var Ytt=s(ace);Fyo=r(Ytt,"mbart"),Ytt.forEach(t),Tyo=r(nLe," \u2014 "),nD=n(nLe,"A",{href:!0});var Ktt=s(nD);Myo=r(Ktt,"MBartForConditionalGeneration"),Ktt.forEach(t),Eyo=r(nLe," (mBART model)"),nLe.forEach(t),Cyo=i(ue),m1=n(ue,"LI",{});var sLe=s(m1);nce=n(sLe,"STRONG",{});var Ztt=s(nce);wyo=r(Ztt,"mt5"),Ztt.forEach(t),Ayo=r(sLe," \u2014 "),sD=n(sLe,"A",{href:!0});var eat=s(sD);yyo=r(eat,"MT5ForConditionalGeneration"),eat.forEach(t),Lyo=r(sLe," (mT5 model)"),sLe.forEach(t),xyo=i(ue),g1=n(ue,"LI",{});var lLe=s(g1);sce=n(lLe,"STRONG",{});var oat=s(sce);$yo=r(oat,"pegasus"),oat.forEach(t),kyo=r(lLe," \u2014 "),lD=n(lLe,"A",{href:!0});var rat=s(lD);Syo=r(rat,"PegasusForConditionalGeneration"),rat.forEach(t),Ryo=r(lLe," (Pegasus model)"),lLe.forEach(t),Byo=i(ue),h1=n(ue,"LI",{});var iLe=s(h1);lce=n(iLe,"STRONG",{});var tat=s(lce);Pyo=r(tat,"plbart"),tat.forEach(t),Iyo=r(iLe," \u2014 "),iD=n(iLe,"A",{href:!0});var aat=s(iD);qyo=r(aat,"PLBartForConditionalGeneration"),aat.forEach(t),Nyo=r(iLe," (PLBart model)"),iLe.forEach(t),jyo=i(ue),p1=n(ue,"LI",{});var dLe=s(p1);ice=n(dLe,"STRONG",{});var nat=s(ice);Dyo=r(nat,"prophetnet"),nat.forEach(t),Gyo=r(dLe," \u2014 "),dD=n(dLe,"A",{href:!0});var sat=s(dD);Oyo=r(sat,"ProphetNetForConditionalGeneration"),sat.forEach(t),Vyo=r(dLe," (ProphetNet model)"),dLe.forEach(t),Xyo=i(ue),u1=n(ue,"LI",{});var cLe=s(u1);dce=n(cLe,"STRONG",{});var lat=s(dce);zyo=r(lat,"t5"),lat.forEach(t),Qyo=r(cLe," \u2014 "),cD=n(cLe,"A",{href:!0});var iat=s(cD);Wyo=r(iat,"T5ForConditionalGeneration"),iat.forEach(t),Hyo=r(cLe," (T5 model)"),cLe.forEach(t),Uyo=i(ue),_1=n(ue,"LI",{});var fLe=s(_1);cce=n(fLe,"STRONG",{});var dat=s(cce);Jyo=r(dat,"tapex"),dat.forEach(t),Yyo=r(fLe," \u2014 "),fD=n(fLe,"A",{href:!0});var cat=s(fD);Kyo=r(cat,"BartForConditionalGeneration"),cat.forEach(t),Zyo=r(fLe," (TAPEX model)"),fLe.forEach(t),eLo=i(ue),b1=n(ue,"LI",{});var mLe=s(b1);fce=n(mLe,"STRONG",{});var fat=s(fce);oLo=r(fat,"xlm-prophetnet"),fat.forEach(t),rLo=r(mLe," \u2014 "),mD=n(mLe,"A",{href:!0});var mat=s(mD);tLo=r(mat,"XLMProphetNetForConditionalGeneration"),mat.forEach(t),aLo=r(mLe," (XLMProphetNet model)"),mLe.forEach(t),ue.forEach(t),nLo=i(ta),v1=n(ta,"P",{});var gLe=s(v1);sLo=r(gLe,"The model is set in evaluation mode by default using "),mce=n(gLe,"CODE",{});var gat=s(mce);lLo=r(gat,"model.eval()"),gat.forEach(t),iLo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=n(gLe,"CODE",{});var hat=s(gce);dLo=r(hat,"model.train()"),hat.forEach(t),gLe.forEach(t),cLo=i(ta),T(F1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),CIe=i(f),Ii=n(f,"H2",{class:!0});var LNe=s(Ii);T1=n(LNe,"A",{id:!0,class:!0,href:!0});var pat=s(T1);hce=n(pat,"SPAN",{});var uat=s(hce);T(Y0.$$.fragment,uat),uat.forEach(t),pat.forEach(t),fLo=i(LNe),pce=n(LNe,"SPAN",{});var _at=s(pce);mLo=r(_at,"AutoModelForSequenceClassification"),_at.forEach(t),LNe.forEach(t),wIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(K0.$$.fragment,Xs),gLo=i(Xs),qi=n(Xs,"P",{});var CK=s(qi);hLo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gD=n(CK,"A",{href:!0});var bat=s(gD);pLo=r(bat,"from_pretrained()"),bat.forEach(t),uLo=r(CK," class method or the "),hD=n(CK,"A",{href:!0});var vat=s(hD);_Lo=r(vat,"from_config()"),vat.forEach(t),bLo=r(CK,` class
method.`),CK.forEach(t),vLo=i(Xs),Z0=n(Xs,"P",{});var xNe=s(Z0);FLo=r(xNe,"This class cannot be instantiated directly using "),uce=n(xNe,"CODE",{});var Fat=s(uce);TLo=r(Fat,"__init__()"),Fat.forEach(t),MLo=r(xNe," (throws an error)."),xNe.forEach(t),ELo=i(Xs),st=n(Xs,"DIV",{class:!0});var gA=s(st);T(ey.$$.fragment,gA),CLo=i(gA),_ce=n(gA,"P",{});var Tat=s(_ce);wLo=r(Tat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tat.forEach(t),ALo=i(gA),Ni=n(gA,"P",{});var wK=s(Ni);yLo=r(wK,`Note:
Loading a model from its configuration file does `),bce=n(wK,"STRONG",{});var Mat=s(bce);LLo=r(Mat,"not"),Mat.forEach(t),xLo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=n(wK,"A",{href:!0});var Eat=s(pD);$Lo=r(Eat,"from_pretrained()"),Eat.forEach(t),kLo=r(wK," to load the model weights."),wK.forEach(t),SLo=i(gA),T(M1.$$.fragment,gA),gA.forEach(t),RLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(oy.$$.fragment,aa),BLo=i(aa),vce=n(aa,"P",{});var Cat=s(vce);PLo=r(Cat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cat.forEach(t),ILo=i(aa),ka=n(aa,"P",{});var hA=s(ka);qLo=r(hA,"The model class to instantiate is selected based on the "),Fce=n(hA,"CODE",{});var wat=s(Fce);NLo=r(wat,"model_type"),wat.forEach(t),jLo=r(hA,` property of the config object (either
passed as an argument or loaded from `),Tce=n(hA,"CODE",{});var Aat=s(Tce);DLo=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),GLo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(hA,"CODE",{});var yat=s(Mce);OLo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),VLo=r(hA,":"),hA.forEach(t),XLo=i(aa),q=n(aa,"UL",{});var N=s(q);E1=n(N,"LI",{});var hLe=s(E1);Ece=n(hLe,"STRONG",{});var Lat=s(Ece);zLo=r(Lat,"albert"),Lat.forEach(t),QLo=r(hLe," \u2014 "),uD=n(hLe,"A",{href:!0});var xat=s(uD);WLo=r(xat,"AlbertForSequenceClassification"),xat.forEach(t),HLo=r(hLe," (ALBERT model)"),hLe.forEach(t),ULo=i(N),C1=n(N,"LI",{});var pLe=s(C1);Cce=n(pLe,"STRONG",{});var $at=s(Cce);JLo=r($at,"bart"),$at.forEach(t),YLo=r(pLe," \u2014 "),_D=n(pLe,"A",{href:!0});var kat=s(_D);KLo=r(kat,"BartForSequenceClassification"),kat.forEach(t),ZLo=r(pLe," (BART model)"),pLe.forEach(t),e8o=i(N),w1=n(N,"LI",{});var uLe=s(w1);wce=n(uLe,"STRONG",{});var Sat=s(wce);o8o=r(Sat,"bert"),Sat.forEach(t),r8o=r(uLe," \u2014 "),bD=n(uLe,"A",{href:!0});var Rat=s(bD);t8o=r(Rat,"BertForSequenceClassification"),Rat.forEach(t),a8o=r(uLe," (BERT model)"),uLe.forEach(t),n8o=i(N),A1=n(N,"LI",{});var _Le=s(A1);Ace=n(_Le,"STRONG",{});var Bat=s(Ace);s8o=r(Bat,"big_bird"),Bat.forEach(t),l8o=r(_Le," \u2014 "),vD=n(_Le,"A",{href:!0});var Pat=s(vD);i8o=r(Pat,"BigBirdForSequenceClassification"),Pat.forEach(t),d8o=r(_Le," (BigBird model)"),_Le.forEach(t),c8o=i(N),y1=n(N,"LI",{});var bLe=s(y1);yce=n(bLe,"STRONG",{});var Iat=s(yce);f8o=r(Iat,"bigbird_pegasus"),Iat.forEach(t),m8o=r(bLe," \u2014 "),FD=n(bLe,"A",{href:!0});var qat=s(FD);g8o=r(qat,"BigBirdPegasusForSequenceClassification"),qat.forEach(t),h8o=r(bLe," (BigBirdPegasus model)"),bLe.forEach(t),p8o=i(N),L1=n(N,"LI",{});var vLe=s(L1);Lce=n(vLe,"STRONG",{});var Nat=s(Lce);u8o=r(Nat,"camembert"),Nat.forEach(t),_8o=r(vLe," \u2014 "),TD=n(vLe,"A",{href:!0});var jat=s(TD);b8o=r(jat,"CamembertForSequenceClassification"),jat.forEach(t),v8o=r(vLe," (CamemBERT model)"),vLe.forEach(t),F8o=i(N),x1=n(N,"LI",{});var FLe=s(x1);xce=n(FLe,"STRONG",{});var Dat=s(xce);T8o=r(Dat,"canine"),Dat.forEach(t),M8o=r(FLe," \u2014 "),MD=n(FLe,"A",{href:!0});var Gat=s(MD);E8o=r(Gat,"CanineForSequenceClassification"),Gat.forEach(t),C8o=r(FLe," (Canine model)"),FLe.forEach(t),w8o=i(N),$1=n(N,"LI",{});var TLe=s($1);$ce=n(TLe,"STRONG",{});var Oat=s($ce);A8o=r(Oat,"convbert"),Oat.forEach(t),y8o=r(TLe," \u2014 "),ED=n(TLe,"A",{href:!0});var Vat=s(ED);L8o=r(Vat,"ConvBertForSequenceClassification"),Vat.forEach(t),x8o=r(TLe," (ConvBERT model)"),TLe.forEach(t),$8o=i(N),k1=n(N,"LI",{});var MLe=s(k1);kce=n(MLe,"STRONG",{});var Xat=s(kce);k8o=r(Xat,"ctrl"),Xat.forEach(t),S8o=r(MLe," \u2014 "),CD=n(MLe,"A",{href:!0});var zat=s(CD);R8o=r(zat,"CTRLForSequenceClassification"),zat.forEach(t),B8o=r(MLe," (CTRL model)"),MLe.forEach(t),P8o=i(N),S1=n(N,"LI",{});var ELe=s(S1);Sce=n(ELe,"STRONG",{});var Qat=s(Sce);I8o=r(Qat,"data2vec-text"),Qat.forEach(t),q8o=r(ELe," \u2014 "),wD=n(ELe,"A",{href:!0});var Wat=s(wD);N8o=r(Wat,"Data2VecTextForSequenceClassification"),Wat.forEach(t),j8o=r(ELe," (Data2VecText model)"),ELe.forEach(t),D8o=i(N),R1=n(N,"LI",{});var CLe=s(R1);Rce=n(CLe,"STRONG",{});var Hat=s(Rce);G8o=r(Hat,"deberta"),Hat.forEach(t),O8o=r(CLe," \u2014 "),AD=n(CLe,"A",{href:!0});var Uat=s(AD);V8o=r(Uat,"DebertaForSequenceClassification"),Uat.forEach(t),X8o=r(CLe," (DeBERTa model)"),CLe.forEach(t),z8o=i(N),B1=n(N,"LI",{});var wLe=s(B1);Bce=n(wLe,"STRONG",{});var Jat=s(Bce);Q8o=r(Jat,"deberta-v2"),Jat.forEach(t),W8o=r(wLe," \u2014 "),yD=n(wLe,"A",{href:!0});var Yat=s(yD);H8o=r(Yat,"DebertaV2ForSequenceClassification"),Yat.forEach(t),U8o=r(wLe," (DeBERTa-v2 model)"),wLe.forEach(t),J8o=i(N),P1=n(N,"LI",{});var ALe=s(P1);Pce=n(ALe,"STRONG",{});var Kat=s(Pce);Y8o=r(Kat,"distilbert"),Kat.forEach(t),K8o=r(ALe," \u2014 "),LD=n(ALe,"A",{href:!0});var Zat=s(LD);Z8o=r(Zat,"DistilBertForSequenceClassification"),Zat.forEach(t),exo=r(ALe," (DistilBERT model)"),ALe.forEach(t),oxo=i(N),I1=n(N,"LI",{});var yLe=s(I1);Ice=n(yLe,"STRONG",{});var ent=s(Ice);rxo=r(ent,"electra"),ent.forEach(t),txo=r(yLe," \u2014 "),xD=n(yLe,"A",{href:!0});var ont=s(xD);axo=r(ont,"ElectraForSequenceClassification"),ont.forEach(t),nxo=r(yLe," (ELECTRA model)"),yLe.forEach(t),sxo=i(N),q1=n(N,"LI",{});var LLe=s(q1);qce=n(LLe,"STRONG",{});var rnt=s(qce);lxo=r(rnt,"flaubert"),rnt.forEach(t),ixo=r(LLe," \u2014 "),$D=n(LLe,"A",{href:!0});var tnt=s($D);dxo=r(tnt,"FlaubertForSequenceClassification"),tnt.forEach(t),cxo=r(LLe," (FlauBERT model)"),LLe.forEach(t),fxo=i(N),N1=n(N,"LI",{});var xLe=s(N1);Nce=n(xLe,"STRONG",{});var ant=s(Nce);mxo=r(ant,"fnet"),ant.forEach(t),gxo=r(xLe," \u2014 "),kD=n(xLe,"A",{href:!0});var nnt=s(kD);hxo=r(nnt,"FNetForSequenceClassification"),nnt.forEach(t),pxo=r(xLe," (FNet model)"),xLe.forEach(t),uxo=i(N),j1=n(N,"LI",{});var $Le=s(j1);jce=n($Le,"STRONG",{});var snt=s(jce);_xo=r(snt,"funnel"),snt.forEach(t),bxo=r($Le," \u2014 "),SD=n($Le,"A",{href:!0});var lnt=s(SD);vxo=r(lnt,"FunnelForSequenceClassification"),lnt.forEach(t),Fxo=r($Le," (Funnel Transformer model)"),$Le.forEach(t),Txo=i(N),D1=n(N,"LI",{});var kLe=s(D1);Dce=n(kLe,"STRONG",{});var int=s(Dce);Mxo=r(int,"gpt2"),int.forEach(t),Exo=r(kLe," \u2014 "),RD=n(kLe,"A",{href:!0});var dnt=s(RD);Cxo=r(dnt,"GPT2ForSequenceClassification"),dnt.forEach(t),wxo=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),Axo=i(N),G1=n(N,"LI",{});var SLe=s(G1);Gce=n(SLe,"STRONG",{});var cnt=s(Gce);yxo=r(cnt,"gpt_neo"),cnt.forEach(t),Lxo=r(SLe," \u2014 "),BD=n(SLe,"A",{href:!0});var fnt=s(BD);xxo=r(fnt,"GPTNeoForSequenceClassification"),fnt.forEach(t),$xo=r(SLe," (GPT Neo model)"),SLe.forEach(t),kxo=i(N),O1=n(N,"LI",{});var RLe=s(O1);Oce=n(RLe,"STRONG",{});var mnt=s(Oce);Sxo=r(mnt,"gptj"),mnt.forEach(t),Rxo=r(RLe," \u2014 "),PD=n(RLe,"A",{href:!0});var gnt=s(PD);Bxo=r(gnt,"GPTJForSequenceClassification"),gnt.forEach(t),Pxo=r(RLe," (GPT-J model)"),RLe.forEach(t),Ixo=i(N),V1=n(N,"LI",{});var BLe=s(V1);Vce=n(BLe,"STRONG",{});var hnt=s(Vce);qxo=r(hnt,"ibert"),hnt.forEach(t),Nxo=r(BLe," \u2014 "),ID=n(BLe,"A",{href:!0});var pnt=s(ID);jxo=r(pnt,"IBertForSequenceClassification"),pnt.forEach(t),Dxo=r(BLe," (I-BERT model)"),BLe.forEach(t),Gxo=i(N),X1=n(N,"LI",{});var PLe=s(X1);Xce=n(PLe,"STRONG",{});var unt=s(Xce);Oxo=r(unt,"layoutlm"),unt.forEach(t),Vxo=r(PLe," \u2014 "),qD=n(PLe,"A",{href:!0});var _nt=s(qD);Xxo=r(_nt,"LayoutLMForSequenceClassification"),_nt.forEach(t),zxo=r(PLe," (LayoutLM model)"),PLe.forEach(t),Qxo=i(N),z1=n(N,"LI",{});var ILe=s(z1);zce=n(ILe,"STRONG",{});var bnt=s(zce);Wxo=r(bnt,"layoutlmv2"),bnt.forEach(t),Hxo=r(ILe," \u2014 "),ND=n(ILe,"A",{href:!0});var vnt=s(ND);Uxo=r(vnt,"LayoutLMv2ForSequenceClassification"),vnt.forEach(t),Jxo=r(ILe," (LayoutLMv2 model)"),ILe.forEach(t),Yxo=i(N),Q1=n(N,"LI",{});var qLe=s(Q1);Qce=n(qLe,"STRONG",{});var Fnt=s(Qce);Kxo=r(Fnt,"led"),Fnt.forEach(t),Zxo=r(qLe," \u2014 "),jD=n(qLe,"A",{href:!0});var Tnt=s(jD);e9o=r(Tnt,"LEDForSequenceClassification"),Tnt.forEach(t),o9o=r(qLe," (LED model)"),qLe.forEach(t),r9o=i(N),W1=n(N,"LI",{});var NLe=s(W1);Wce=n(NLe,"STRONG",{});var Mnt=s(Wce);t9o=r(Mnt,"longformer"),Mnt.forEach(t),a9o=r(NLe," \u2014 "),DD=n(NLe,"A",{href:!0});var Ent=s(DD);n9o=r(Ent,"LongformerForSequenceClassification"),Ent.forEach(t),s9o=r(NLe," (Longformer model)"),NLe.forEach(t),l9o=i(N),H1=n(N,"LI",{});var jLe=s(H1);Hce=n(jLe,"STRONG",{});var Cnt=s(Hce);i9o=r(Cnt,"mbart"),Cnt.forEach(t),d9o=r(jLe," \u2014 "),GD=n(jLe,"A",{href:!0});var wnt=s(GD);c9o=r(wnt,"MBartForSequenceClassification"),wnt.forEach(t),f9o=r(jLe," (mBART model)"),jLe.forEach(t),m9o=i(N),U1=n(N,"LI",{});var DLe=s(U1);Uce=n(DLe,"STRONG",{});var Ant=s(Uce);g9o=r(Ant,"megatron-bert"),Ant.forEach(t),h9o=r(DLe," \u2014 "),OD=n(DLe,"A",{href:!0});var ynt=s(OD);p9o=r(ynt,"MegatronBertForSequenceClassification"),ynt.forEach(t),u9o=r(DLe," (MegatronBert model)"),DLe.forEach(t),_9o=i(N),J1=n(N,"LI",{});var GLe=s(J1);Jce=n(GLe,"STRONG",{});var Lnt=s(Jce);b9o=r(Lnt,"mobilebert"),Lnt.forEach(t),v9o=r(GLe," \u2014 "),VD=n(GLe,"A",{href:!0});var xnt=s(VD);F9o=r(xnt,"MobileBertForSequenceClassification"),xnt.forEach(t),T9o=r(GLe," (MobileBERT model)"),GLe.forEach(t),M9o=i(N),Y1=n(N,"LI",{});var OLe=s(Y1);Yce=n(OLe,"STRONG",{});var $nt=s(Yce);E9o=r($nt,"mpnet"),$nt.forEach(t),C9o=r(OLe," \u2014 "),XD=n(OLe,"A",{href:!0});var knt=s(XD);w9o=r(knt,"MPNetForSequenceClassification"),knt.forEach(t),A9o=r(OLe," (MPNet model)"),OLe.forEach(t),y9o=i(N),K1=n(N,"LI",{});var VLe=s(K1);Kce=n(VLe,"STRONG",{});var Snt=s(Kce);L9o=r(Snt,"nystromformer"),Snt.forEach(t),x9o=r(VLe," \u2014 "),zD=n(VLe,"A",{href:!0});var Rnt=s(zD);$9o=r(Rnt,"NystromformerForSequenceClassification"),Rnt.forEach(t),k9o=r(VLe," (Nystromformer model)"),VLe.forEach(t),S9o=i(N),Z1=n(N,"LI",{});var XLe=s(Z1);Zce=n(XLe,"STRONG",{});var Bnt=s(Zce);R9o=r(Bnt,"openai-gpt"),Bnt.forEach(t),B9o=r(XLe," \u2014 "),QD=n(XLe,"A",{href:!0});var Pnt=s(QD);P9o=r(Pnt,"OpenAIGPTForSequenceClassification"),Pnt.forEach(t),I9o=r(XLe," (OpenAI GPT model)"),XLe.forEach(t),q9o=i(N),eb=n(N,"LI",{});var zLe=s(eb);efe=n(zLe,"STRONG",{});var Int=s(efe);N9o=r(Int,"perceiver"),Int.forEach(t),j9o=r(zLe," \u2014 "),WD=n(zLe,"A",{href:!0});var qnt=s(WD);D9o=r(qnt,"PerceiverForSequenceClassification"),qnt.forEach(t),G9o=r(zLe," (Perceiver model)"),zLe.forEach(t),O9o=i(N),ob=n(N,"LI",{});var QLe=s(ob);ofe=n(QLe,"STRONG",{});var Nnt=s(ofe);V9o=r(Nnt,"plbart"),Nnt.forEach(t),X9o=r(QLe," \u2014 "),HD=n(QLe,"A",{href:!0});var jnt=s(HD);z9o=r(jnt,"PLBartForSequenceClassification"),jnt.forEach(t),Q9o=r(QLe," (PLBart model)"),QLe.forEach(t),W9o=i(N),rb=n(N,"LI",{});var WLe=s(rb);rfe=n(WLe,"STRONG",{});var Dnt=s(rfe);H9o=r(Dnt,"qdqbert"),Dnt.forEach(t),U9o=r(WLe," \u2014 "),UD=n(WLe,"A",{href:!0});var Gnt=s(UD);J9o=r(Gnt,"QDQBertForSequenceClassification"),Gnt.forEach(t),Y9o=r(WLe," (QDQBert model)"),WLe.forEach(t),K9o=i(N),tb=n(N,"LI",{});var HLe=s(tb);tfe=n(HLe,"STRONG",{});var Ont=s(tfe);Z9o=r(Ont,"reformer"),Ont.forEach(t),e$o=r(HLe," \u2014 "),JD=n(HLe,"A",{href:!0});var Vnt=s(JD);o$o=r(Vnt,"ReformerForSequenceClassification"),Vnt.forEach(t),r$o=r(HLe," (Reformer model)"),HLe.forEach(t),t$o=i(N),ab=n(N,"LI",{});var ULe=s(ab);afe=n(ULe,"STRONG",{});var Xnt=s(afe);a$o=r(Xnt,"rembert"),Xnt.forEach(t),n$o=r(ULe," \u2014 "),YD=n(ULe,"A",{href:!0});var znt=s(YD);s$o=r(znt,"RemBertForSequenceClassification"),znt.forEach(t),l$o=r(ULe," (RemBERT model)"),ULe.forEach(t),i$o=i(N),nb=n(N,"LI",{});var JLe=s(nb);nfe=n(JLe,"STRONG",{});var Qnt=s(nfe);d$o=r(Qnt,"roberta"),Qnt.forEach(t),c$o=r(JLe," \u2014 "),KD=n(JLe,"A",{href:!0});var Wnt=s(KD);f$o=r(Wnt,"RobertaForSequenceClassification"),Wnt.forEach(t),m$o=r(JLe," (RoBERTa model)"),JLe.forEach(t),g$o=i(N),sb=n(N,"LI",{});var YLe=s(sb);sfe=n(YLe,"STRONG",{});var Hnt=s(sfe);h$o=r(Hnt,"roformer"),Hnt.forEach(t),p$o=r(YLe," \u2014 "),ZD=n(YLe,"A",{href:!0});var Unt=s(ZD);u$o=r(Unt,"RoFormerForSequenceClassification"),Unt.forEach(t),_$o=r(YLe," (RoFormer model)"),YLe.forEach(t),b$o=i(N),lb=n(N,"LI",{});var KLe=s(lb);lfe=n(KLe,"STRONG",{});var Jnt=s(lfe);v$o=r(Jnt,"squeezebert"),Jnt.forEach(t),F$o=r(KLe," \u2014 "),eG=n(KLe,"A",{href:!0});var Ynt=s(eG);T$o=r(Ynt,"SqueezeBertForSequenceClassification"),Ynt.forEach(t),M$o=r(KLe," (SqueezeBERT model)"),KLe.forEach(t),E$o=i(N),ib=n(N,"LI",{});var ZLe=s(ib);ife=n(ZLe,"STRONG",{});var Knt=s(ife);C$o=r(Knt,"tapas"),Knt.forEach(t),w$o=r(ZLe," \u2014 "),oG=n(ZLe,"A",{href:!0});var Znt=s(oG);A$o=r(Znt,"TapasForSequenceClassification"),Znt.forEach(t),y$o=r(ZLe," (TAPAS model)"),ZLe.forEach(t),L$o=i(N),db=n(N,"LI",{});var e8e=s(db);dfe=n(e8e,"STRONG",{});var est=s(dfe);x$o=r(est,"tapex"),est.forEach(t),$$o=r(e8e," \u2014 "),rG=n(e8e,"A",{href:!0});var ost=s(rG);k$o=r(ost,"BartForSequenceClassification"),ost.forEach(t),S$o=r(e8e," (TAPEX model)"),e8e.forEach(t),R$o=i(N),cb=n(N,"LI",{});var o8e=s(cb);cfe=n(o8e,"STRONG",{});var rst=s(cfe);B$o=r(rst,"transfo-xl"),rst.forEach(t),P$o=r(o8e," \u2014 "),tG=n(o8e,"A",{href:!0});var tst=s(tG);I$o=r(tst,"TransfoXLForSequenceClassification"),tst.forEach(t),q$o=r(o8e," (Transformer-XL model)"),o8e.forEach(t),N$o=i(N),fb=n(N,"LI",{});var r8e=s(fb);ffe=n(r8e,"STRONG",{});var ast=s(ffe);j$o=r(ast,"xlm"),ast.forEach(t),D$o=r(r8e," \u2014 "),aG=n(r8e,"A",{href:!0});var nst=s(aG);G$o=r(nst,"XLMForSequenceClassification"),nst.forEach(t),O$o=r(r8e," (XLM model)"),r8e.forEach(t),V$o=i(N),mb=n(N,"LI",{});var t8e=s(mb);mfe=n(t8e,"STRONG",{});var sst=s(mfe);X$o=r(sst,"xlm-roberta"),sst.forEach(t),z$o=r(t8e," \u2014 "),nG=n(t8e,"A",{href:!0});var lst=s(nG);Q$o=r(lst,"XLMRobertaForSequenceClassification"),lst.forEach(t),W$o=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),H$o=i(N),gb=n(N,"LI",{});var a8e=s(gb);gfe=n(a8e,"STRONG",{});var ist=s(gfe);U$o=r(ist,"xlm-roberta-xl"),ist.forEach(t),J$o=r(a8e," \u2014 "),sG=n(a8e,"A",{href:!0});var dst=s(sG);Y$o=r(dst,"XLMRobertaXLForSequenceClassification"),dst.forEach(t),K$o=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),Z$o=i(N),hb=n(N,"LI",{});var n8e=s(hb);hfe=n(n8e,"STRONG",{});var cst=s(hfe);eko=r(cst,"xlnet"),cst.forEach(t),oko=r(n8e," \u2014 "),lG=n(n8e,"A",{href:!0});var fst=s(lG);rko=r(fst,"XLNetForSequenceClassification"),fst.forEach(t),tko=r(n8e," (XLNet model)"),n8e.forEach(t),ako=i(N),pb=n(N,"LI",{});var s8e=s(pb);pfe=n(s8e,"STRONG",{});var mst=s(pfe);nko=r(mst,"yoso"),mst.forEach(t),sko=r(s8e," \u2014 "),iG=n(s8e,"A",{href:!0});var gst=s(iG);lko=r(gst,"YosoForSequenceClassification"),gst.forEach(t),iko=r(s8e," (YOSO model)"),s8e.forEach(t),N.forEach(t),dko=i(aa),ub=n(aa,"P",{});var l8e=s(ub);cko=r(l8e,"The model is set in evaluation mode by default using "),ufe=n(l8e,"CODE",{});var hst=s(ufe);fko=r(hst,"model.eval()"),hst.forEach(t),mko=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(l8e,"CODE",{});var pst=s(_fe);gko=r(pst,"model.train()"),pst.forEach(t),l8e.forEach(t),hko=i(aa),T(_b.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),AIe=i(f),ji=n(f,"H2",{class:!0});var $Ne=s(ji);bb=n($Ne,"A",{id:!0,class:!0,href:!0});var ust=s(bb);bfe=n(ust,"SPAN",{});var _st=s(bfe);T(ry.$$.fragment,_st),_st.forEach(t),ust.forEach(t),pko=i($Ne),vfe=n($Ne,"SPAN",{});var bst=s(vfe);uko=r(bst,"AutoModelForMultipleChoice"),bst.forEach(t),$Ne.forEach(t),yIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(ty.$$.fragment,zs),_ko=i(zs),Di=n(zs,"P",{});var AK=s(Di);bko=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dG=n(AK,"A",{href:!0});var vst=s(dG);vko=r(vst,"from_pretrained()"),vst.forEach(t),Fko=r(AK," class method or the "),cG=n(AK,"A",{href:!0});var Fst=s(cG);Tko=r(Fst,"from_config()"),Fst.forEach(t),Mko=r(AK,` class
method.`),AK.forEach(t),Eko=i(zs),ay=n(zs,"P",{});var kNe=s(ay);Cko=r(kNe,"This class cannot be instantiated directly using "),Ffe=n(kNe,"CODE",{});var Tst=s(Ffe);wko=r(Tst,"__init__()"),Tst.forEach(t),Ako=r(kNe," (throws an error)."),kNe.forEach(t),yko=i(zs),lt=n(zs,"DIV",{class:!0});var pA=s(lt);T(ny.$$.fragment,pA),Lko=i(pA),Tfe=n(pA,"P",{});var Mst=s(Tfe);xko=r(Mst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mst.forEach(t),$ko=i(pA),Gi=n(pA,"P",{});var yK=s(Gi);kko=r(yK,`Note:
Loading a model from its configuration file does `),Mfe=n(yK,"STRONG",{});var Est=s(Mfe);Sko=r(Est,"not"),Est.forEach(t),Rko=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(yK,"A",{href:!0});var Cst=s(fG);Bko=r(Cst,"from_pretrained()"),Cst.forEach(t),Pko=r(yK," to load the model weights."),yK.forEach(t),Iko=i(pA),T(vb.$$.fragment,pA),pA.forEach(t),qko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(sy.$$.fragment,na),Nko=i(na),Efe=n(na,"P",{});var wst=s(Efe);jko=r(wst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wst.forEach(t),Dko=i(na),Sa=n(na,"P",{});var uA=s(Sa);Gko=r(uA,"The model class to instantiate is selected based on the "),Cfe=n(uA,"CODE",{});var Ast=s(Cfe);Oko=r(Ast,"model_type"),Ast.forEach(t),Vko=r(uA,` property of the config object (either
passed as an argument or loaded from `),wfe=n(uA,"CODE",{});var yst=s(wfe);Xko=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),zko=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(uA,"CODE",{});var Lst=s(Afe);Qko=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),Wko=r(uA,":"),uA.forEach(t),Hko=i(na),Y=n(na,"UL",{});var K=s(Y);Fb=n(K,"LI",{});var i8e=s(Fb);yfe=n(i8e,"STRONG",{});var xst=s(yfe);Uko=r(xst,"albert"),xst.forEach(t),Jko=r(i8e," \u2014 "),mG=n(i8e,"A",{href:!0});var $st=s(mG);Yko=r($st,"AlbertForMultipleChoice"),$st.forEach(t),Kko=r(i8e," (ALBERT model)"),i8e.forEach(t),Zko=i(K),Tb=n(K,"LI",{});var d8e=s(Tb);Lfe=n(d8e,"STRONG",{});var kst=s(Lfe);eSo=r(kst,"bert"),kst.forEach(t),oSo=r(d8e," \u2014 "),gG=n(d8e,"A",{href:!0});var Sst=s(gG);rSo=r(Sst,"BertForMultipleChoice"),Sst.forEach(t),tSo=r(d8e," (BERT model)"),d8e.forEach(t),aSo=i(K),Mb=n(K,"LI",{});var c8e=s(Mb);xfe=n(c8e,"STRONG",{});var Rst=s(xfe);nSo=r(Rst,"big_bird"),Rst.forEach(t),sSo=r(c8e," \u2014 "),hG=n(c8e,"A",{href:!0});var Bst=s(hG);lSo=r(Bst,"BigBirdForMultipleChoice"),Bst.forEach(t),iSo=r(c8e," (BigBird model)"),c8e.forEach(t),dSo=i(K),Eb=n(K,"LI",{});var f8e=s(Eb);$fe=n(f8e,"STRONG",{});var Pst=s($fe);cSo=r(Pst,"camembert"),Pst.forEach(t),fSo=r(f8e," \u2014 "),pG=n(f8e,"A",{href:!0});var Ist=s(pG);mSo=r(Ist,"CamembertForMultipleChoice"),Ist.forEach(t),gSo=r(f8e," (CamemBERT model)"),f8e.forEach(t),hSo=i(K),Cb=n(K,"LI",{});var m8e=s(Cb);kfe=n(m8e,"STRONG",{});var qst=s(kfe);pSo=r(qst,"canine"),qst.forEach(t),uSo=r(m8e," \u2014 "),uG=n(m8e,"A",{href:!0});var Nst=s(uG);_So=r(Nst,"CanineForMultipleChoice"),Nst.forEach(t),bSo=r(m8e," (Canine model)"),m8e.forEach(t),vSo=i(K),wb=n(K,"LI",{});var g8e=s(wb);Sfe=n(g8e,"STRONG",{});var jst=s(Sfe);FSo=r(jst,"convbert"),jst.forEach(t),TSo=r(g8e," \u2014 "),_G=n(g8e,"A",{href:!0});var Dst=s(_G);MSo=r(Dst,"ConvBertForMultipleChoice"),Dst.forEach(t),ESo=r(g8e," (ConvBERT model)"),g8e.forEach(t),CSo=i(K),Ab=n(K,"LI",{});var h8e=s(Ab);Rfe=n(h8e,"STRONG",{});var Gst=s(Rfe);wSo=r(Gst,"data2vec-text"),Gst.forEach(t),ASo=r(h8e," \u2014 "),bG=n(h8e,"A",{href:!0});var Ost=s(bG);ySo=r(Ost,"Data2VecTextForMultipleChoice"),Ost.forEach(t),LSo=r(h8e," (Data2VecText model)"),h8e.forEach(t),xSo=i(K),yb=n(K,"LI",{});var p8e=s(yb);Bfe=n(p8e,"STRONG",{});var Vst=s(Bfe);$So=r(Vst,"deberta-v2"),Vst.forEach(t),kSo=r(p8e," \u2014 "),vG=n(p8e,"A",{href:!0});var Xst=s(vG);SSo=r(Xst,"DebertaV2ForMultipleChoice"),Xst.forEach(t),RSo=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),BSo=i(K),Lb=n(K,"LI",{});var u8e=s(Lb);Pfe=n(u8e,"STRONG",{});var zst=s(Pfe);PSo=r(zst,"distilbert"),zst.forEach(t),ISo=r(u8e," \u2014 "),FG=n(u8e,"A",{href:!0});var Qst=s(FG);qSo=r(Qst,"DistilBertForMultipleChoice"),Qst.forEach(t),NSo=r(u8e," (DistilBERT model)"),u8e.forEach(t),jSo=i(K),xb=n(K,"LI",{});var _8e=s(xb);Ife=n(_8e,"STRONG",{});var Wst=s(Ife);DSo=r(Wst,"electra"),Wst.forEach(t),GSo=r(_8e," \u2014 "),TG=n(_8e,"A",{href:!0});var Hst=s(TG);OSo=r(Hst,"ElectraForMultipleChoice"),Hst.forEach(t),VSo=r(_8e," (ELECTRA model)"),_8e.forEach(t),XSo=i(K),$b=n(K,"LI",{});var b8e=s($b);qfe=n(b8e,"STRONG",{});var Ust=s(qfe);zSo=r(Ust,"flaubert"),Ust.forEach(t),QSo=r(b8e," \u2014 "),MG=n(b8e,"A",{href:!0});var Jst=s(MG);WSo=r(Jst,"FlaubertForMultipleChoice"),Jst.forEach(t),HSo=r(b8e," (FlauBERT model)"),b8e.forEach(t),USo=i(K),kb=n(K,"LI",{});var v8e=s(kb);Nfe=n(v8e,"STRONG",{});var Yst=s(Nfe);JSo=r(Yst,"fnet"),Yst.forEach(t),YSo=r(v8e," \u2014 "),EG=n(v8e,"A",{href:!0});var Kst=s(EG);KSo=r(Kst,"FNetForMultipleChoice"),Kst.forEach(t),ZSo=r(v8e," (FNet model)"),v8e.forEach(t),eRo=i(K),Sb=n(K,"LI",{});var F8e=s(Sb);jfe=n(F8e,"STRONG",{});var Zst=s(jfe);oRo=r(Zst,"funnel"),Zst.forEach(t),rRo=r(F8e," \u2014 "),CG=n(F8e,"A",{href:!0});var elt=s(CG);tRo=r(elt,"FunnelForMultipleChoice"),elt.forEach(t),aRo=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),nRo=i(K),Rb=n(K,"LI",{});var T8e=s(Rb);Dfe=n(T8e,"STRONG",{});var olt=s(Dfe);sRo=r(olt,"ibert"),olt.forEach(t),lRo=r(T8e," \u2014 "),wG=n(T8e,"A",{href:!0});var rlt=s(wG);iRo=r(rlt,"IBertForMultipleChoice"),rlt.forEach(t),dRo=r(T8e," (I-BERT model)"),T8e.forEach(t),cRo=i(K),Bb=n(K,"LI",{});var M8e=s(Bb);Gfe=n(M8e,"STRONG",{});var tlt=s(Gfe);fRo=r(tlt,"longformer"),tlt.forEach(t),mRo=r(M8e," \u2014 "),AG=n(M8e,"A",{href:!0});var alt=s(AG);gRo=r(alt,"LongformerForMultipleChoice"),alt.forEach(t),hRo=r(M8e," (Longformer model)"),M8e.forEach(t),pRo=i(K),Pb=n(K,"LI",{});var E8e=s(Pb);Ofe=n(E8e,"STRONG",{});var nlt=s(Ofe);uRo=r(nlt,"megatron-bert"),nlt.forEach(t),_Ro=r(E8e," \u2014 "),yG=n(E8e,"A",{href:!0});var slt=s(yG);bRo=r(slt,"MegatronBertForMultipleChoice"),slt.forEach(t),vRo=r(E8e," (MegatronBert model)"),E8e.forEach(t),FRo=i(K),Ib=n(K,"LI",{});var C8e=s(Ib);Vfe=n(C8e,"STRONG",{});var llt=s(Vfe);TRo=r(llt,"mobilebert"),llt.forEach(t),MRo=r(C8e," \u2014 "),LG=n(C8e,"A",{href:!0});var ilt=s(LG);ERo=r(ilt,"MobileBertForMultipleChoice"),ilt.forEach(t),CRo=r(C8e," (MobileBERT model)"),C8e.forEach(t),wRo=i(K),qb=n(K,"LI",{});var w8e=s(qb);Xfe=n(w8e,"STRONG",{});var dlt=s(Xfe);ARo=r(dlt,"mpnet"),dlt.forEach(t),yRo=r(w8e," \u2014 "),xG=n(w8e,"A",{href:!0});var clt=s(xG);LRo=r(clt,"MPNetForMultipleChoice"),clt.forEach(t),xRo=r(w8e," (MPNet model)"),w8e.forEach(t),$Ro=i(K),Nb=n(K,"LI",{});var A8e=s(Nb);zfe=n(A8e,"STRONG",{});var flt=s(zfe);kRo=r(flt,"nystromformer"),flt.forEach(t),SRo=r(A8e," \u2014 "),$G=n(A8e,"A",{href:!0});var mlt=s($G);RRo=r(mlt,"NystromformerForMultipleChoice"),mlt.forEach(t),BRo=r(A8e," (Nystromformer model)"),A8e.forEach(t),PRo=i(K),jb=n(K,"LI",{});var y8e=s(jb);Qfe=n(y8e,"STRONG",{});var glt=s(Qfe);IRo=r(glt,"qdqbert"),glt.forEach(t),qRo=r(y8e," \u2014 "),kG=n(y8e,"A",{href:!0});var hlt=s(kG);NRo=r(hlt,"QDQBertForMultipleChoice"),hlt.forEach(t),jRo=r(y8e," (QDQBert model)"),y8e.forEach(t),DRo=i(K),Db=n(K,"LI",{});var L8e=s(Db);Wfe=n(L8e,"STRONG",{});var plt=s(Wfe);GRo=r(plt,"rembert"),plt.forEach(t),ORo=r(L8e," \u2014 "),SG=n(L8e,"A",{href:!0});var ult=s(SG);VRo=r(ult,"RemBertForMultipleChoice"),ult.forEach(t),XRo=r(L8e," (RemBERT model)"),L8e.forEach(t),zRo=i(K),Gb=n(K,"LI",{});var x8e=s(Gb);Hfe=n(x8e,"STRONG",{});var _lt=s(Hfe);QRo=r(_lt,"roberta"),_lt.forEach(t),WRo=r(x8e," \u2014 "),RG=n(x8e,"A",{href:!0});var blt=s(RG);HRo=r(blt,"RobertaForMultipleChoice"),blt.forEach(t),URo=r(x8e," (RoBERTa model)"),x8e.forEach(t),JRo=i(K),Ob=n(K,"LI",{});var $8e=s(Ob);Ufe=n($8e,"STRONG",{});var vlt=s(Ufe);YRo=r(vlt,"roformer"),vlt.forEach(t),KRo=r($8e," \u2014 "),BG=n($8e,"A",{href:!0});var Flt=s(BG);ZRo=r(Flt,"RoFormerForMultipleChoice"),Flt.forEach(t),eBo=r($8e," (RoFormer model)"),$8e.forEach(t),oBo=i(K),Vb=n(K,"LI",{});var k8e=s(Vb);Jfe=n(k8e,"STRONG",{});var Tlt=s(Jfe);rBo=r(Tlt,"squeezebert"),Tlt.forEach(t),tBo=r(k8e," \u2014 "),PG=n(k8e,"A",{href:!0});var Mlt=s(PG);aBo=r(Mlt,"SqueezeBertForMultipleChoice"),Mlt.forEach(t),nBo=r(k8e," (SqueezeBERT model)"),k8e.forEach(t),sBo=i(K),Xb=n(K,"LI",{});var S8e=s(Xb);Yfe=n(S8e,"STRONG",{});var Elt=s(Yfe);lBo=r(Elt,"xlm"),Elt.forEach(t),iBo=r(S8e," \u2014 "),IG=n(S8e,"A",{href:!0});var Clt=s(IG);dBo=r(Clt,"XLMForMultipleChoice"),Clt.forEach(t),cBo=r(S8e," (XLM model)"),S8e.forEach(t),fBo=i(K),zb=n(K,"LI",{});var R8e=s(zb);Kfe=n(R8e,"STRONG",{});var wlt=s(Kfe);mBo=r(wlt,"xlm-roberta"),wlt.forEach(t),gBo=r(R8e," \u2014 "),qG=n(R8e,"A",{href:!0});var Alt=s(qG);hBo=r(Alt,"XLMRobertaForMultipleChoice"),Alt.forEach(t),pBo=r(R8e," (XLM-RoBERTa model)"),R8e.forEach(t),uBo=i(K),Qb=n(K,"LI",{});var B8e=s(Qb);Zfe=n(B8e,"STRONG",{});var ylt=s(Zfe);_Bo=r(ylt,"xlm-roberta-xl"),ylt.forEach(t),bBo=r(B8e," \u2014 "),NG=n(B8e,"A",{href:!0});var Llt=s(NG);vBo=r(Llt,"XLMRobertaXLForMultipleChoice"),Llt.forEach(t),FBo=r(B8e," (XLM-RoBERTa-XL model)"),B8e.forEach(t),TBo=i(K),Wb=n(K,"LI",{});var P8e=s(Wb);eme=n(P8e,"STRONG",{});var xlt=s(eme);MBo=r(xlt,"xlnet"),xlt.forEach(t),EBo=r(P8e," \u2014 "),jG=n(P8e,"A",{href:!0});var $lt=s(jG);CBo=r($lt,"XLNetForMultipleChoice"),$lt.forEach(t),wBo=r(P8e," (XLNet model)"),P8e.forEach(t),ABo=i(K),Hb=n(K,"LI",{});var I8e=s(Hb);ome=n(I8e,"STRONG",{});var klt=s(ome);yBo=r(klt,"yoso"),klt.forEach(t),LBo=r(I8e," \u2014 "),DG=n(I8e,"A",{href:!0});var Slt=s(DG);xBo=r(Slt,"YosoForMultipleChoice"),Slt.forEach(t),$Bo=r(I8e," (YOSO model)"),I8e.forEach(t),K.forEach(t),kBo=i(na),Ub=n(na,"P",{});var q8e=s(Ub);SBo=r(q8e,"The model is set in evaluation mode by default using "),rme=n(q8e,"CODE",{});var Rlt=s(rme);RBo=r(Rlt,"model.eval()"),Rlt.forEach(t),BBo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(q8e,"CODE",{});var Blt=s(tme);PBo=r(Blt,"model.train()"),Blt.forEach(t),q8e.forEach(t),IBo=i(na),T(Jb.$$.fragment,na),na.forEach(t),zs.forEach(t),LIe=i(f),Oi=n(f,"H2",{class:!0});var SNe=s(Oi);Yb=n(SNe,"A",{id:!0,class:!0,href:!0});var Plt=s(Yb);ame=n(Plt,"SPAN",{});var Ilt=s(ame);T(ly.$$.fragment,Ilt),Ilt.forEach(t),Plt.forEach(t),qBo=i(SNe),nme=n(SNe,"SPAN",{});var qlt=s(nme);NBo=r(qlt,"AutoModelForNextSentencePrediction"),qlt.forEach(t),SNe.forEach(t),xIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(iy.$$.fragment,Qs),jBo=i(Qs),Vi=n(Qs,"P",{});var LK=s(Vi);DBo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GG=n(LK,"A",{href:!0});var Nlt=s(GG);GBo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),OBo=r(LK," class method or the "),OG=n(LK,"A",{href:!0});var jlt=s(OG);VBo=r(jlt,"from_config()"),jlt.forEach(t),XBo=r(LK,` class
method.`),LK.forEach(t),zBo=i(Qs),dy=n(Qs,"P",{});var RNe=s(dy);QBo=r(RNe,"This class cannot be instantiated directly using "),sme=n(RNe,"CODE",{});var Dlt=s(sme);WBo=r(Dlt,"__init__()"),Dlt.forEach(t),HBo=r(RNe," (throws an error)."),RNe.forEach(t),UBo=i(Qs),it=n(Qs,"DIV",{class:!0});var _A=s(it);T(cy.$$.fragment,_A),JBo=i(_A),lme=n(_A,"P",{});var Glt=s(lme);YBo=r(Glt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Glt.forEach(t),KBo=i(_A),Xi=n(_A,"P",{});var xK=s(Xi);ZBo=r(xK,`Note:
Loading a model from its configuration file does `),ime=n(xK,"STRONG",{});var Olt=s(ime);ePo=r(Olt,"not"),Olt.forEach(t),oPo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(xK,"A",{href:!0});var Vlt=s(VG);rPo=r(Vlt,"from_pretrained()"),Vlt.forEach(t),tPo=r(xK," to load the model weights."),xK.forEach(t),aPo=i(_A),T(Kb.$$.fragment,_A),_A.forEach(t),nPo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(fy.$$.fragment,sa),sPo=i(sa),dme=n(sa,"P",{});var Xlt=s(dme);lPo=r(Xlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xlt.forEach(t),iPo=i(sa),Ra=n(sa,"P",{});var bA=s(Ra);dPo=r(bA,"The model class to instantiate is selected based on the "),cme=n(bA,"CODE",{});var zlt=s(cme);cPo=r(zlt,"model_type"),zlt.forEach(t),fPo=r(bA,` property of the config object (either
passed as an argument or loaded from `),fme=n(bA,"CODE",{});var Qlt=s(fme);mPo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),gPo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(bA,"CODE",{});var Wlt=s(mme);hPo=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),pPo=r(bA,":"),bA.forEach(t),uPo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Zb=n(Ws,"LI",{});var N8e=s(Zb);gme=n(N8e,"STRONG",{});var Hlt=s(gme);_Po=r(Hlt,"bert"),Hlt.forEach(t),bPo=r(N8e," \u2014 "),XG=n(N8e,"A",{href:!0});var Ult=s(XG);vPo=r(Ult,"BertForNextSentencePrediction"),Ult.forEach(t),FPo=r(N8e," (BERT model)"),N8e.forEach(t),TPo=i(Ws),e5=n(Ws,"LI",{});var j8e=s(e5);hme=n(j8e,"STRONG",{});var Jlt=s(hme);MPo=r(Jlt,"fnet"),Jlt.forEach(t),EPo=r(j8e," \u2014 "),zG=n(j8e,"A",{href:!0});var Ylt=s(zG);CPo=r(Ylt,"FNetForNextSentencePrediction"),Ylt.forEach(t),wPo=r(j8e," (FNet model)"),j8e.forEach(t),APo=i(Ws),o5=n(Ws,"LI",{});var D8e=s(o5);pme=n(D8e,"STRONG",{});var Klt=s(pme);yPo=r(Klt,"megatron-bert"),Klt.forEach(t),LPo=r(D8e," \u2014 "),QG=n(D8e,"A",{href:!0});var Zlt=s(QG);xPo=r(Zlt,"MegatronBertForNextSentencePrediction"),Zlt.forEach(t),$Po=r(D8e," (MegatronBert model)"),D8e.forEach(t),kPo=i(Ws),r5=n(Ws,"LI",{});var G8e=s(r5);ume=n(G8e,"STRONG",{});var eit=s(ume);SPo=r(eit,"mobilebert"),eit.forEach(t),RPo=r(G8e," \u2014 "),WG=n(G8e,"A",{href:!0});var oit=s(WG);BPo=r(oit,"MobileBertForNextSentencePrediction"),oit.forEach(t),PPo=r(G8e," (MobileBERT model)"),G8e.forEach(t),IPo=i(Ws),t5=n(Ws,"LI",{});var O8e=s(t5);_me=n(O8e,"STRONG",{});var rit=s(_me);qPo=r(rit,"qdqbert"),rit.forEach(t),NPo=r(O8e," \u2014 "),HG=n(O8e,"A",{href:!0});var tit=s(HG);jPo=r(tit,"QDQBertForNextSentencePrediction"),tit.forEach(t),DPo=r(O8e," (QDQBert model)"),O8e.forEach(t),Ws.forEach(t),GPo=i(sa),a5=n(sa,"P",{});var V8e=s(a5);OPo=r(V8e,"The model is set in evaluation mode by default using "),bme=n(V8e,"CODE",{});var ait=s(bme);VPo=r(ait,"model.eval()"),ait.forEach(t),XPo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(V8e,"CODE",{});var nit=s(vme);zPo=r(nit,"model.train()"),nit.forEach(t),V8e.forEach(t),QPo=i(sa),T(n5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),$Ie=i(f),zi=n(f,"H2",{class:!0});var BNe=s(zi);s5=n(BNe,"A",{id:!0,class:!0,href:!0});var sit=s(s5);Fme=n(sit,"SPAN",{});var lit=s(Fme);T(my.$$.fragment,lit),lit.forEach(t),sit.forEach(t),WPo=i(BNe),Tme=n(BNe,"SPAN",{});var iit=s(Tme);HPo=r(iit,"AutoModelForTokenClassification"),iit.forEach(t),BNe.forEach(t),kIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(gy.$$.fragment,Hs),UPo=i(Hs),Qi=n(Hs,"P",{});var $K=s(Qi);JPo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UG=n($K,"A",{href:!0});var dit=s(UG);YPo=r(dit,"from_pretrained()"),dit.forEach(t),KPo=r($K," class method or the "),JG=n($K,"A",{href:!0});var cit=s(JG);ZPo=r(cit,"from_config()"),cit.forEach(t),eIo=r($K,` class
method.`),$K.forEach(t),oIo=i(Hs),hy=n(Hs,"P",{});var PNe=s(hy);rIo=r(PNe,"This class cannot be instantiated directly using "),Mme=n(PNe,"CODE",{});var fit=s(Mme);tIo=r(fit,"__init__()"),fit.forEach(t),aIo=r(PNe," (throws an error)."),PNe.forEach(t),nIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var vA=s(dt);T(py.$$.fragment,vA),sIo=i(vA),Eme=n(vA,"P",{});var mit=s(Eme);lIo=r(mit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mit.forEach(t),iIo=i(vA),Wi=n(vA,"P",{});var kK=s(Wi);dIo=r(kK,`Note:
Loading a model from its configuration file does `),Cme=n(kK,"STRONG",{});var git=s(Cme);cIo=r(git,"not"),git.forEach(t),fIo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(kK,"A",{href:!0});var hit=s(YG);mIo=r(hit,"from_pretrained()"),hit.forEach(t),gIo=r(kK," to load the model weights."),kK.forEach(t),hIo=i(vA),T(l5.$$.fragment,vA),vA.forEach(t),pIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(uy.$$.fragment,la),uIo=i(la),wme=n(la,"P",{});var pit=s(wme);_Io=r(pit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pit.forEach(t),bIo=i(la),Ba=n(la,"P",{});var FA=s(Ba);vIo=r(FA,"The model class to instantiate is selected based on the "),Ame=n(FA,"CODE",{});var uit=s(Ame);FIo=r(uit,"model_type"),uit.forEach(t),TIo=r(FA,` property of the config object (either
passed as an argument or loaded from `),yme=n(FA,"CODE",{});var _it=s(yme);MIo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),EIo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(FA,"CODE",{});var bit=s(Lme);CIo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),wIo=r(FA,":"),FA.forEach(t),AIo=i(la),U=n(la,"UL",{});var J=s(U);i5=n(J,"LI",{});var X8e=s(i5);xme=n(X8e,"STRONG",{});var vit=s(xme);yIo=r(vit,"albert"),vit.forEach(t),LIo=r(X8e," \u2014 "),KG=n(X8e,"A",{href:!0});var Fit=s(KG);xIo=r(Fit,"AlbertForTokenClassification"),Fit.forEach(t),$Io=r(X8e," (ALBERT model)"),X8e.forEach(t),kIo=i(J),d5=n(J,"LI",{});var z8e=s(d5);$me=n(z8e,"STRONG",{});var Tit=s($me);SIo=r(Tit,"bert"),Tit.forEach(t),RIo=r(z8e," \u2014 "),ZG=n(z8e,"A",{href:!0});var Mit=s(ZG);BIo=r(Mit,"BertForTokenClassification"),Mit.forEach(t),PIo=r(z8e," (BERT model)"),z8e.forEach(t),IIo=i(J),c5=n(J,"LI",{});var Q8e=s(c5);kme=n(Q8e,"STRONG",{});var Eit=s(kme);qIo=r(Eit,"big_bird"),Eit.forEach(t),NIo=r(Q8e," \u2014 "),eO=n(Q8e,"A",{href:!0});var Cit=s(eO);jIo=r(Cit,"BigBirdForTokenClassification"),Cit.forEach(t),DIo=r(Q8e," (BigBird model)"),Q8e.forEach(t),GIo=i(J),f5=n(J,"LI",{});var W8e=s(f5);Sme=n(W8e,"STRONG",{});var wit=s(Sme);OIo=r(wit,"camembert"),wit.forEach(t),VIo=r(W8e," \u2014 "),oO=n(W8e,"A",{href:!0});var Ait=s(oO);XIo=r(Ait,"CamembertForTokenClassification"),Ait.forEach(t),zIo=r(W8e," (CamemBERT model)"),W8e.forEach(t),QIo=i(J),m5=n(J,"LI",{});var H8e=s(m5);Rme=n(H8e,"STRONG",{});var yit=s(Rme);WIo=r(yit,"canine"),yit.forEach(t),HIo=r(H8e," \u2014 "),rO=n(H8e,"A",{href:!0});var Lit=s(rO);UIo=r(Lit,"CanineForTokenClassification"),Lit.forEach(t),JIo=r(H8e," (Canine model)"),H8e.forEach(t),YIo=i(J),g5=n(J,"LI",{});var U8e=s(g5);Bme=n(U8e,"STRONG",{});var xit=s(Bme);KIo=r(xit,"convbert"),xit.forEach(t),ZIo=r(U8e," \u2014 "),tO=n(U8e,"A",{href:!0});var $it=s(tO);eqo=r($it,"ConvBertForTokenClassification"),$it.forEach(t),oqo=r(U8e," (ConvBERT model)"),U8e.forEach(t),rqo=i(J),h5=n(J,"LI",{});var J8e=s(h5);Pme=n(J8e,"STRONG",{});var kit=s(Pme);tqo=r(kit,"data2vec-text"),kit.forEach(t),aqo=r(J8e," \u2014 "),aO=n(J8e,"A",{href:!0});var Sit=s(aO);nqo=r(Sit,"Data2VecTextForTokenClassification"),Sit.forEach(t),sqo=r(J8e," (Data2VecText model)"),J8e.forEach(t),lqo=i(J),p5=n(J,"LI",{});var Y8e=s(p5);Ime=n(Y8e,"STRONG",{});var Rit=s(Ime);iqo=r(Rit,"deberta"),Rit.forEach(t),dqo=r(Y8e," \u2014 "),nO=n(Y8e,"A",{href:!0});var Bit=s(nO);cqo=r(Bit,"DebertaForTokenClassification"),Bit.forEach(t),fqo=r(Y8e," (DeBERTa model)"),Y8e.forEach(t),mqo=i(J),u5=n(J,"LI",{});var K8e=s(u5);qme=n(K8e,"STRONG",{});var Pit=s(qme);gqo=r(Pit,"deberta-v2"),Pit.forEach(t),hqo=r(K8e," \u2014 "),sO=n(K8e,"A",{href:!0});var Iit=s(sO);pqo=r(Iit,"DebertaV2ForTokenClassification"),Iit.forEach(t),uqo=r(K8e," (DeBERTa-v2 model)"),K8e.forEach(t),_qo=i(J),_5=n(J,"LI",{});var Z8e=s(_5);Nme=n(Z8e,"STRONG",{});var qit=s(Nme);bqo=r(qit,"distilbert"),qit.forEach(t),vqo=r(Z8e," \u2014 "),lO=n(Z8e,"A",{href:!0});var Nit=s(lO);Fqo=r(Nit,"DistilBertForTokenClassification"),Nit.forEach(t),Tqo=r(Z8e," (DistilBERT model)"),Z8e.forEach(t),Mqo=i(J),b5=n(J,"LI",{});var exe=s(b5);jme=n(exe,"STRONG",{});var jit=s(jme);Eqo=r(jit,"electra"),jit.forEach(t),Cqo=r(exe," \u2014 "),iO=n(exe,"A",{href:!0});var Dit=s(iO);wqo=r(Dit,"ElectraForTokenClassification"),Dit.forEach(t),Aqo=r(exe," (ELECTRA model)"),exe.forEach(t),yqo=i(J),v5=n(J,"LI",{});var oxe=s(v5);Dme=n(oxe,"STRONG",{});var Git=s(Dme);Lqo=r(Git,"flaubert"),Git.forEach(t),xqo=r(oxe," \u2014 "),dO=n(oxe,"A",{href:!0});var Oit=s(dO);$qo=r(Oit,"FlaubertForTokenClassification"),Oit.forEach(t),kqo=r(oxe," (FlauBERT model)"),oxe.forEach(t),Sqo=i(J),F5=n(J,"LI",{});var rxe=s(F5);Gme=n(rxe,"STRONG",{});var Vit=s(Gme);Rqo=r(Vit,"fnet"),Vit.forEach(t),Bqo=r(rxe," \u2014 "),cO=n(rxe,"A",{href:!0});var Xit=s(cO);Pqo=r(Xit,"FNetForTokenClassification"),Xit.forEach(t),Iqo=r(rxe," (FNet model)"),rxe.forEach(t),qqo=i(J),T5=n(J,"LI",{});var txe=s(T5);Ome=n(txe,"STRONG",{});var zit=s(Ome);Nqo=r(zit,"funnel"),zit.forEach(t),jqo=r(txe," \u2014 "),fO=n(txe,"A",{href:!0});var Qit=s(fO);Dqo=r(Qit,"FunnelForTokenClassification"),Qit.forEach(t),Gqo=r(txe," (Funnel Transformer model)"),txe.forEach(t),Oqo=i(J),M5=n(J,"LI",{});var axe=s(M5);Vme=n(axe,"STRONG",{});var Wit=s(Vme);Vqo=r(Wit,"gpt2"),Wit.forEach(t),Xqo=r(axe," \u2014 "),mO=n(axe,"A",{href:!0});var Hit=s(mO);zqo=r(Hit,"GPT2ForTokenClassification"),Hit.forEach(t),Qqo=r(axe," (OpenAI GPT-2 model)"),axe.forEach(t),Wqo=i(J),E5=n(J,"LI",{});var nxe=s(E5);Xme=n(nxe,"STRONG",{});var Uit=s(Xme);Hqo=r(Uit,"ibert"),Uit.forEach(t),Uqo=r(nxe," \u2014 "),gO=n(nxe,"A",{href:!0});var Jit=s(gO);Jqo=r(Jit,"IBertForTokenClassification"),Jit.forEach(t),Yqo=r(nxe," (I-BERT model)"),nxe.forEach(t),Kqo=i(J),C5=n(J,"LI",{});var sxe=s(C5);zme=n(sxe,"STRONG",{});var Yit=s(zme);Zqo=r(Yit,"layoutlm"),Yit.forEach(t),eNo=r(sxe," \u2014 "),hO=n(sxe,"A",{href:!0});var Kit=s(hO);oNo=r(Kit,"LayoutLMForTokenClassification"),Kit.forEach(t),rNo=r(sxe," (LayoutLM model)"),sxe.forEach(t),tNo=i(J),w5=n(J,"LI",{});var lxe=s(w5);Qme=n(lxe,"STRONG",{});var Zit=s(Qme);aNo=r(Zit,"layoutlmv2"),Zit.forEach(t),nNo=r(lxe," \u2014 "),pO=n(lxe,"A",{href:!0});var edt=s(pO);sNo=r(edt,"LayoutLMv2ForTokenClassification"),edt.forEach(t),lNo=r(lxe," (LayoutLMv2 model)"),lxe.forEach(t),iNo=i(J),A5=n(J,"LI",{});var ixe=s(A5);Wme=n(ixe,"STRONG",{});var odt=s(Wme);dNo=r(odt,"longformer"),odt.forEach(t),cNo=r(ixe," \u2014 "),uO=n(ixe,"A",{href:!0});var rdt=s(uO);fNo=r(rdt,"LongformerForTokenClassification"),rdt.forEach(t),mNo=r(ixe," (Longformer model)"),ixe.forEach(t),gNo=i(J),y5=n(J,"LI",{});var dxe=s(y5);Hme=n(dxe,"STRONG",{});var tdt=s(Hme);hNo=r(tdt,"megatron-bert"),tdt.forEach(t),pNo=r(dxe," \u2014 "),_O=n(dxe,"A",{href:!0});var adt=s(_O);uNo=r(adt,"MegatronBertForTokenClassification"),adt.forEach(t),_No=r(dxe," (MegatronBert model)"),dxe.forEach(t),bNo=i(J),L5=n(J,"LI",{});var cxe=s(L5);Ume=n(cxe,"STRONG",{});var ndt=s(Ume);vNo=r(ndt,"mobilebert"),ndt.forEach(t),FNo=r(cxe," \u2014 "),bO=n(cxe,"A",{href:!0});var sdt=s(bO);TNo=r(sdt,"MobileBertForTokenClassification"),sdt.forEach(t),MNo=r(cxe," (MobileBERT model)"),cxe.forEach(t),ENo=i(J),x5=n(J,"LI",{});var fxe=s(x5);Jme=n(fxe,"STRONG",{});var ldt=s(Jme);CNo=r(ldt,"mpnet"),ldt.forEach(t),wNo=r(fxe," \u2014 "),vO=n(fxe,"A",{href:!0});var idt=s(vO);ANo=r(idt,"MPNetForTokenClassification"),idt.forEach(t),yNo=r(fxe," (MPNet model)"),fxe.forEach(t),LNo=i(J),$5=n(J,"LI",{});var mxe=s($5);Yme=n(mxe,"STRONG",{});var ddt=s(Yme);xNo=r(ddt,"nystromformer"),ddt.forEach(t),$No=r(mxe," \u2014 "),FO=n(mxe,"A",{href:!0});var cdt=s(FO);kNo=r(cdt,"NystromformerForTokenClassification"),cdt.forEach(t),SNo=r(mxe," (Nystromformer model)"),mxe.forEach(t),RNo=i(J),k5=n(J,"LI",{});var gxe=s(k5);Kme=n(gxe,"STRONG",{});var fdt=s(Kme);BNo=r(fdt,"qdqbert"),fdt.forEach(t),PNo=r(gxe," \u2014 "),TO=n(gxe,"A",{href:!0});var mdt=s(TO);INo=r(mdt,"QDQBertForTokenClassification"),mdt.forEach(t),qNo=r(gxe," (QDQBert model)"),gxe.forEach(t),NNo=i(J),S5=n(J,"LI",{});var hxe=s(S5);Zme=n(hxe,"STRONG",{});var gdt=s(Zme);jNo=r(gdt,"rembert"),gdt.forEach(t),DNo=r(hxe," \u2014 "),MO=n(hxe,"A",{href:!0});var hdt=s(MO);GNo=r(hdt,"RemBertForTokenClassification"),hdt.forEach(t),ONo=r(hxe," (RemBERT model)"),hxe.forEach(t),VNo=i(J),R5=n(J,"LI",{});var pxe=s(R5);ege=n(pxe,"STRONG",{});var pdt=s(ege);XNo=r(pdt,"roberta"),pdt.forEach(t),zNo=r(pxe," \u2014 "),EO=n(pxe,"A",{href:!0});var udt=s(EO);QNo=r(udt,"RobertaForTokenClassification"),udt.forEach(t),WNo=r(pxe," (RoBERTa model)"),pxe.forEach(t),HNo=i(J),B5=n(J,"LI",{});var uxe=s(B5);oge=n(uxe,"STRONG",{});var _dt=s(oge);UNo=r(_dt,"roformer"),_dt.forEach(t),JNo=r(uxe," \u2014 "),CO=n(uxe,"A",{href:!0});var bdt=s(CO);YNo=r(bdt,"RoFormerForTokenClassification"),bdt.forEach(t),KNo=r(uxe," (RoFormer model)"),uxe.forEach(t),ZNo=i(J),P5=n(J,"LI",{});var _xe=s(P5);rge=n(_xe,"STRONG",{});var vdt=s(rge);ejo=r(vdt,"squeezebert"),vdt.forEach(t),ojo=r(_xe," \u2014 "),wO=n(_xe,"A",{href:!0});var Fdt=s(wO);rjo=r(Fdt,"SqueezeBertForTokenClassification"),Fdt.forEach(t),tjo=r(_xe," (SqueezeBERT model)"),_xe.forEach(t),ajo=i(J),I5=n(J,"LI",{});var bxe=s(I5);tge=n(bxe,"STRONG",{});var Tdt=s(tge);njo=r(Tdt,"xlm"),Tdt.forEach(t),sjo=r(bxe," \u2014 "),AO=n(bxe,"A",{href:!0});var Mdt=s(AO);ljo=r(Mdt,"XLMForTokenClassification"),Mdt.forEach(t),ijo=r(bxe," (XLM model)"),bxe.forEach(t),djo=i(J),q5=n(J,"LI",{});var vxe=s(q5);age=n(vxe,"STRONG",{});var Edt=s(age);cjo=r(Edt,"xlm-roberta"),Edt.forEach(t),fjo=r(vxe," \u2014 "),yO=n(vxe,"A",{href:!0});var Cdt=s(yO);mjo=r(Cdt,"XLMRobertaForTokenClassification"),Cdt.forEach(t),gjo=r(vxe," (XLM-RoBERTa model)"),vxe.forEach(t),hjo=i(J),N5=n(J,"LI",{});var Fxe=s(N5);nge=n(Fxe,"STRONG",{});var wdt=s(nge);pjo=r(wdt,"xlm-roberta-xl"),wdt.forEach(t),ujo=r(Fxe," \u2014 "),LO=n(Fxe,"A",{href:!0});var Adt=s(LO);_jo=r(Adt,"XLMRobertaXLForTokenClassification"),Adt.forEach(t),bjo=r(Fxe," (XLM-RoBERTa-XL model)"),Fxe.forEach(t),vjo=i(J),j5=n(J,"LI",{});var Txe=s(j5);sge=n(Txe,"STRONG",{});var ydt=s(sge);Fjo=r(ydt,"xlnet"),ydt.forEach(t),Tjo=r(Txe," \u2014 "),xO=n(Txe,"A",{href:!0});var Ldt=s(xO);Mjo=r(Ldt,"XLNetForTokenClassification"),Ldt.forEach(t),Ejo=r(Txe," (XLNet model)"),Txe.forEach(t),Cjo=i(J),D5=n(J,"LI",{});var Mxe=s(D5);lge=n(Mxe,"STRONG",{});var xdt=s(lge);wjo=r(xdt,"yoso"),xdt.forEach(t),Ajo=r(Mxe," \u2014 "),$O=n(Mxe,"A",{href:!0});var $dt=s($O);yjo=r($dt,"YosoForTokenClassification"),$dt.forEach(t),Ljo=r(Mxe," (YOSO model)"),Mxe.forEach(t),J.forEach(t),xjo=i(la),G5=n(la,"P",{});var Exe=s(G5);$jo=r(Exe,"The model is set in evaluation mode by default using "),ige=n(Exe,"CODE",{});var kdt=s(ige);kjo=r(kdt,"model.eval()"),kdt.forEach(t),Sjo=r(Exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(Exe,"CODE",{});var Sdt=s(dge);Rjo=r(Sdt,"model.train()"),Sdt.forEach(t),Exe.forEach(t),Bjo=i(la),T(O5.$$.fragment,la),la.forEach(t),Hs.forEach(t),SIe=i(f),Hi=n(f,"H2",{class:!0});var INe=s(Hi);V5=n(INe,"A",{id:!0,class:!0,href:!0});var Rdt=s(V5);cge=n(Rdt,"SPAN",{});var Bdt=s(cge);T(_y.$$.fragment,Bdt),Bdt.forEach(t),Rdt.forEach(t),Pjo=i(INe),fge=n(INe,"SPAN",{});var Pdt=s(fge);Ijo=r(Pdt,"AutoModelForQuestionAnswering"),Pdt.forEach(t),INe.forEach(t),RIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(by.$$.fragment,Us),qjo=i(Us),Ui=n(Us,"P",{});var SK=s(Ui);Njo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kO=n(SK,"A",{href:!0});var Idt=s(kO);jjo=r(Idt,"from_pretrained()"),Idt.forEach(t),Djo=r(SK," class method or the "),SO=n(SK,"A",{href:!0});var qdt=s(SO);Gjo=r(qdt,"from_config()"),qdt.forEach(t),Ojo=r(SK,` class
method.`),SK.forEach(t),Vjo=i(Us),vy=n(Us,"P",{});var qNe=s(vy);Xjo=r(qNe,"This class cannot be instantiated directly using "),mge=n(qNe,"CODE",{});var Ndt=s(mge);zjo=r(Ndt,"__init__()"),Ndt.forEach(t),Qjo=r(qNe," (throws an error)."),qNe.forEach(t),Wjo=i(Us),ct=n(Us,"DIV",{class:!0});var TA=s(ct);T(Fy.$$.fragment,TA),Hjo=i(TA),gge=n(TA,"P",{});var jdt=s(gge);Ujo=r(jdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jdt.forEach(t),Jjo=i(TA),Ji=n(TA,"P",{});var RK=s(Ji);Yjo=r(RK,`Note:
Loading a model from its configuration file does `),hge=n(RK,"STRONG",{});var Ddt=s(hge);Kjo=r(Ddt,"not"),Ddt.forEach(t),Zjo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=n(RK,"A",{href:!0});var Gdt=s(RO);eDo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),oDo=r(RK," to load the model weights."),RK.forEach(t),rDo=i(TA),T(X5.$$.fragment,TA),TA.forEach(t),tDo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Ty.$$.fragment,ia),aDo=i(ia),pge=n(ia,"P",{});var Odt=s(pge);nDo=r(Odt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Odt.forEach(t),sDo=i(ia),Pa=n(ia,"P",{});var MA=s(Pa);lDo=r(MA,"The model class to instantiate is selected based on the "),uge=n(MA,"CODE",{});var Vdt=s(uge);iDo=r(Vdt,"model_type"),Vdt.forEach(t),dDo=r(MA,` property of the config object (either
passed as an argument or loaded from `),_ge=n(MA,"CODE",{});var Xdt=s(_ge);cDo=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),fDo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(MA,"CODE",{});var zdt=s(bge);mDo=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),gDo=r(MA,":"),MA.forEach(t),hDo=i(ia),O=n(ia,"UL",{});var X=s(O);z5=n(X,"LI",{});var Cxe=s(z5);vge=n(Cxe,"STRONG",{});var Qdt=s(vge);pDo=r(Qdt,"albert"),Qdt.forEach(t),uDo=r(Cxe," \u2014 "),BO=n(Cxe,"A",{href:!0});var Wdt=s(BO);_Do=r(Wdt,"AlbertForQuestionAnswering"),Wdt.forEach(t),bDo=r(Cxe," (ALBERT model)"),Cxe.forEach(t),vDo=i(X),Q5=n(X,"LI",{});var wxe=s(Q5);Fge=n(wxe,"STRONG",{});var Hdt=s(Fge);FDo=r(Hdt,"bart"),Hdt.forEach(t),TDo=r(wxe," \u2014 "),PO=n(wxe,"A",{href:!0});var Udt=s(PO);MDo=r(Udt,"BartForQuestionAnswering"),Udt.forEach(t),EDo=r(wxe," (BART model)"),wxe.forEach(t),CDo=i(X),W5=n(X,"LI",{});var Axe=s(W5);Tge=n(Axe,"STRONG",{});var Jdt=s(Tge);wDo=r(Jdt,"bert"),Jdt.forEach(t),ADo=r(Axe," \u2014 "),IO=n(Axe,"A",{href:!0});var Ydt=s(IO);yDo=r(Ydt,"BertForQuestionAnswering"),Ydt.forEach(t),LDo=r(Axe," (BERT model)"),Axe.forEach(t),xDo=i(X),H5=n(X,"LI",{});var yxe=s(H5);Mge=n(yxe,"STRONG",{});var Kdt=s(Mge);$Do=r(Kdt,"big_bird"),Kdt.forEach(t),kDo=r(yxe," \u2014 "),qO=n(yxe,"A",{href:!0});var Zdt=s(qO);SDo=r(Zdt,"BigBirdForQuestionAnswering"),Zdt.forEach(t),RDo=r(yxe," (BigBird model)"),yxe.forEach(t),BDo=i(X),U5=n(X,"LI",{});var Lxe=s(U5);Ege=n(Lxe,"STRONG",{});var ect=s(Ege);PDo=r(ect,"bigbird_pegasus"),ect.forEach(t),IDo=r(Lxe," \u2014 "),NO=n(Lxe,"A",{href:!0});var oct=s(NO);qDo=r(oct,"BigBirdPegasusForQuestionAnswering"),oct.forEach(t),NDo=r(Lxe," (BigBirdPegasus model)"),Lxe.forEach(t),jDo=i(X),J5=n(X,"LI",{});var xxe=s(J5);Cge=n(xxe,"STRONG",{});var rct=s(Cge);DDo=r(rct,"camembert"),rct.forEach(t),GDo=r(xxe," \u2014 "),jO=n(xxe,"A",{href:!0});var tct=s(jO);ODo=r(tct,"CamembertForQuestionAnswering"),tct.forEach(t),VDo=r(xxe," (CamemBERT model)"),xxe.forEach(t),XDo=i(X),Y5=n(X,"LI",{});var $xe=s(Y5);wge=n($xe,"STRONG",{});var act=s(wge);zDo=r(act,"canine"),act.forEach(t),QDo=r($xe," \u2014 "),DO=n($xe,"A",{href:!0});var nct=s(DO);WDo=r(nct,"CanineForQuestionAnswering"),nct.forEach(t),HDo=r($xe," (Canine model)"),$xe.forEach(t),UDo=i(X),K5=n(X,"LI",{});var kxe=s(K5);Age=n(kxe,"STRONG",{});var sct=s(Age);JDo=r(sct,"convbert"),sct.forEach(t),YDo=r(kxe," \u2014 "),GO=n(kxe,"A",{href:!0});var lct=s(GO);KDo=r(lct,"ConvBertForQuestionAnswering"),lct.forEach(t),ZDo=r(kxe," (ConvBERT model)"),kxe.forEach(t),eGo=i(X),Z5=n(X,"LI",{});var Sxe=s(Z5);yge=n(Sxe,"STRONG",{});var ict=s(yge);oGo=r(ict,"data2vec-text"),ict.forEach(t),rGo=r(Sxe," \u2014 "),OO=n(Sxe,"A",{href:!0});var dct=s(OO);tGo=r(dct,"Data2VecTextForQuestionAnswering"),dct.forEach(t),aGo=r(Sxe," (Data2VecText model)"),Sxe.forEach(t),nGo=i(X),e3=n(X,"LI",{});var Rxe=s(e3);Lge=n(Rxe,"STRONG",{});var cct=s(Lge);sGo=r(cct,"deberta"),cct.forEach(t),lGo=r(Rxe," \u2014 "),VO=n(Rxe,"A",{href:!0});var fct=s(VO);iGo=r(fct,"DebertaForQuestionAnswering"),fct.forEach(t),dGo=r(Rxe," (DeBERTa model)"),Rxe.forEach(t),cGo=i(X),o3=n(X,"LI",{});var Bxe=s(o3);xge=n(Bxe,"STRONG",{});var mct=s(xge);fGo=r(mct,"deberta-v2"),mct.forEach(t),mGo=r(Bxe," \u2014 "),XO=n(Bxe,"A",{href:!0});var gct=s(XO);gGo=r(gct,"DebertaV2ForQuestionAnswering"),gct.forEach(t),hGo=r(Bxe," (DeBERTa-v2 model)"),Bxe.forEach(t),pGo=i(X),r3=n(X,"LI",{});var Pxe=s(r3);$ge=n(Pxe,"STRONG",{});var hct=s($ge);uGo=r(hct,"distilbert"),hct.forEach(t),_Go=r(Pxe," \u2014 "),zO=n(Pxe,"A",{href:!0});var pct=s(zO);bGo=r(pct,"DistilBertForQuestionAnswering"),pct.forEach(t),vGo=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),FGo=i(X),t3=n(X,"LI",{});var Ixe=s(t3);kge=n(Ixe,"STRONG",{});var uct=s(kge);TGo=r(uct,"electra"),uct.forEach(t),MGo=r(Ixe," \u2014 "),QO=n(Ixe,"A",{href:!0});var _ct=s(QO);EGo=r(_ct,"ElectraForQuestionAnswering"),_ct.forEach(t),CGo=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),wGo=i(X),a3=n(X,"LI",{});var qxe=s(a3);Sge=n(qxe,"STRONG",{});var bct=s(Sge);AGo=r(bct,"flaubert"),bct.forEach(t),yGo=r(qxe," \u2014 "),WO=n(qxe,"A",{href:!0});var vct=s(WO);LGo=r(vct,"FlaubertForQuestionAnsweringSimple"),vct.forEach(t),xGo=r(qxe," (FlauBERT model)"),qxe.forEach(t),$Go=i(X),n3=n(X,"LI",{});var Nxe=s(n3);Rge=n(Nxe,"STRONG",{});var Fct=s(Rge);kGo=r(Fct,"fnet"),Fct.forEach(t),SGo=r(Nxe," \u2014 "),HO=n(Nxe,"A",{href:!0});var Tct=s(HO);RGo=r(Tct,"FNetForQuestionAnswering"),Tct.forEach(t),BGo=r(Nxe," (FNet model)"),Nxe.forEach(t),PGo=i(X),s3=n(X,"LI",{});var jxe=s(s3);Bge=n(jxe,"STRONG",{});var Mct=s(Bge);IGo=r(Mct,"funnel"),Mct.forEach(t),qGo=r(jxe," \u2014 "),UO=n(jxe,"A",{href:!0});var Ect=s(UO);NGo=r(Ect,"FunnelForQuestionAnswering"),Ect.forEach(t),jGo=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),DGo=i(X),l3=n(X,"LI",{});var Dxe=s(l3);Pge=n(Dxe,"STRONG",{});var Cct=s(Pge);GGo=r(Cct,"gptj"),Cct.forEach(t),OGo=r(Dxe," \u2014 "),JO=n(Dxe,"A",{href:!0});var wct=s(JO);VGo=r(wct,"GPTJForQuestionAnswering"),wct.forEach(t),XGo=r(Dxe," (GPT-J model)"),Dxe.forEach(t),zGo=i(X),i3=n(X,"LI",{});var Gxe=s(i3);Ige=n(Gxe,"STRONG",{});var Act=s(Ige);QGo=r(Act,"ibert"),Act.forEach(t),WGo=r(Gxe," \u2014 "),YO=n(Gxe,"A",{href:!0});var yct=s(YO);HGo=r(yct,"IBertForQuestionAnswering"),yct.forEach(t),UGo=r(Gxe," (I-BERT model)"),Gxe.forEach(t),JGo=i(X),d3=n(X,"LI",{});var Oxe=s(d3);qge=n(Oxe,"STRONG",{});var Lct=s(qge);YGo=r(Lct,"layoutlmv2"),Lct.forEach(t),KGo=r(Oxe," \u2014 "),KO=n(Oxe,"A",{href:!0});var xct=s(KO);ZGo=r(xct,"LayoutLMv2ForQuestionAnswering"),xct.forEach(t),eOo=r(Oxe," (LayoutLMv2 model)"),Oxe.forEach(t),oOo=i(X),c3=n(X,"LI",{});var Vxe=s(c3);Nge=n(Vxe,"STRONG",{});var $ct=s(Nge);rOo=r($ct,"led"),$ct.forEach(t),tOo=r(Vxe," \u2014 "),ZO=n(Vxe,"A",{href:!0});var kct=s(ZO);aOo=r(kct,"LEDForQuestionAnswering"),kct.forEach(t),nOo=r(Vxe," (LED model)"),Vxe.forEach(t),sOo=i(X),f3=n(X,"LI",{});var Xxe=s(f3);jge=n(Xxe,"STRONG",{});var Sct=s(jge);lOo=r(Sct,"longformer"),Sct.forEach(t),iOo=r(Xxe," \u2014 "),eV=n(Xxe,"A",{href:!0});var Rct=s(eV);dOo=r(Rct,"LongformerForQuestionAnswering"),Rct.forEach(t),cOo=r(Xxe," (Longformer model)"),Xxe.forEach(t),fOo=i(X),m3=n(X,"LI",{});var zxe=s(m3);Dge=n(zxe,"STRONG",{});var Bct=s(Dge);mOo=r(Bct,"lxmert"),Bct.forEach(t),gOo=r(zxe," \u2014 "),oV=n(zxe,"A",{href:!0});var Pct=s(oV);hOo=r(Pct,"LxmertForQuestionAnswering"),Pct.forEach(t),pOo=r(zxe," (LXMERT model)"),zxe.forEach(t),uOo=i(X),g3=n(X,"LI",{});var Qxe=s(g3);Gge=n(Qxe,"STRONG",{});var Ict=s(Gge);_Oo=r(Ict,"mbart"),Ict.forEach(t),bOo=r(Qxe," \u2014 "),rV=n(Qxe,"A",{href:!0});var qct=s(rV);vOo=r(qct,"MBartForQuestionAnswering"),qct.forEach(t),FOo=r(Qxe," (mBART model)"),Qxe.forEach(t),TOo=i(X),h3=n(X,"LI",{});var Wxe=s(h3);Oge=n(Wxe,"STRONG",{});var Nct=s(Oge);MOo=r(Nct,"megatron-bert"),Nct.forEach(t),EOo=r(Wxe," \u2014 "),tV=n(Wxe,"A",{href:!0});var jct=s(tV);COo=r(jct,"MegatronBertForQuestionAnswering"),jct.forEach(t),wOo=r(Wxe," (MegatronBert model)"),Wxe.forEach(t),AOo=i(X),p3=n(X,"LI",{});var Hxe=s(p3);Vge=n(Hxe,"STRONG",{});var Dct=s(Vge);yOo=r(Dct,"mobilebert"),Dct.forEach(t),LOo=r(Hxe," \u2014 "),aV=n(Hxe,"A",{href:!0});var Gct=s(aV);xOo=r(Gct,"MobileBertForQuestionAnswering"),Gct.forEach(t),$Oo=r(Hxe," (MobileBERT model)"),Hxe.forEach(t),kOo=i(X),u3=n(X,"LI",{});var Uxe=s(u3);Xge=n(Uxe,"STRONG",{});var Oct=s(Xge);SOo=r(Oct,"mpnet"),Oct.forEach(t),ROo=r(Uxe," \u2014 "),nV=n(Uxe,"A",{href:!0});var Vct=s(nV);BOo=r(Vct,"MPNetForQuestionAnswering"),Vct.forEach(t),POo=r(Uxe," (MPNet model)"),Uxe.forEach(t),IOo=i(X),_3=n(X,"LI",{});var Jxe=s(_3);zge=n(Jxe,"STRONG",{});var Xct=s(zge);qOo=r(Xct,"nystromformer"),Xct.forEach(t),NOo=r(Jxe," \u2014 "),sV=n(Jxe,"A",{href:!0});var zct=s(sV);jOo=r(zct,"NystromformerForQuestionAnswering"),zct.forEach(t),DOo=r(Jxe," (Nystromformer model)"),Jxe.forEach(t),GOo=i(X),b3=n(X,"LI",{});var Yxe=s(b3);Qge=n(Yxe,"STRONG",{});var Qct=s(Qge);OOo=r(Qct,"qdqbert"),Qct.forEach(t),VOo=r(Yxe," \u2014 "),lV=n(Yxe,"A",{href:!0});var Wct=s(lV);XOo=r(Wct,"QDQBertForQuestionAnswering"),Wct.forEach(t),zOo=r(Yxe," (QDQBert model)"),Yxe.forEach(t),QOo=i(X),v3=n(X,"LI",{});var Kxe=s(v3);Wge=n(Kxe,"STRONG",{});var Hct=s(Wge);WOo=r(Hct,"reformer"),Hct.forEach(t),HOo=r(Kxe," \u2014 "),iV=n(Kxe,"A",{href:!0});var Uct=s(iV);UOo=r(Uct,"ReformerForQuestionAnswering"),Uct.forEach(t),JOo=r(Kxe," (Reformer model)"),Kxe.forEach(t),YOo=i(X),F3=n(X,"LI",{});var Zxe=s(F3);Hge=n(Zxe,"STRONG",{});var Jct=s(Hge);KOo=r(Jct,"rembert"),Jct.forEach(t),ZOo=r(Zxe," \u2014 "),dV=n(Zxe,"A",{href:!0});var Yct=s(dV);eVo=r(Yct,"RemBertForQuestionAnswering"),Yct.forEach(t),oVo=r(Zxe," (RemBERT model)"),Zxe.forEach(t),rVo=i(X),T3=n(X,"LI",{});var e9e=s(T3);Uge=n(e9e,"STRONG",{});var Kct=s(Uge);tVo=r(Kct,"roberta"),Kct.forEach(t),aVo=r(e9e," \u2014 "),cV=n(e9e,"A",{href:!0});var Zct=s(cV);nVo=r(Zct,"RobertaForQuestionAnswering"),Zct.forEach(t),sVo=r(e9e," (RoBERTa model)"),e9e.forEach(t),lVo=i(X),M3=n(X,"LI",{});var o9e=s(M3);Jge=n(o9e,"STRONG",{});var eft=s(Jge);iVo=r(eft,"roformer"),eft.forEach(t),dVo=r(o9e," \u2014 "),fV=n(o9e,"A",{href:!0});var oft=s(fV);cVo=r(oft,"RoFormerForQuestionAnswering"),oft.forEach(t),fVo=r(o9e," (RoFormer model)"),o9e.forEach(t),mVo=i(X),E3=n(X,"LI",{});var r9e=s(E3);Yge=n(r9e,"STRONG",{});var rft=s(Yge);gVo=r(rft,"splinter"),rft.forEach(t),hVo=r(r9e," \u2014 "),mV=n(r9e,"A",{href:!0});var tft=s(mV);pVo=r(tft,"SplinterForQuestionAnswering"),tft.forEach(t),uVo=r(r9e," (Splinter model)"),r9e.forEach(t),_Vo=i(X),C3=n(X,"LI",{});var t9e=s(C3);Kge=n(t9e,"STRONG",{});var aft=s(Kge);bVo=r(aft,"squeezebert"),aft.forEach(t),vVo=r(t9e," \u2014 "),gV=n(t9e,"A",{href:!0});var nft=s(gV);FVo=r(nft,"SqueezeBertForQuestionAnswering"),nft.forEach(t),TVo=r(t9e," (SqueezeBERT model)"),t9e.forEach(t),MVo=i(X),w3=n(X,"LI",{});var a9e=s(w3);Zge=n(a9e,"STRONG",{});var sft=s(Zge);EVo=r(sft,"xlm"),sft.forEach(t),CVo=r(a9e," \u2014 "),hV=n(a9e,"A",{href:!0});var lft=s(hV);wVo=r(lft,"XLMForQuestionAnsweringSimple"),lft.forEach(t),AVo=r(a9e," (XLM model)"),a9e.forEach(t),yVo=i(X),A3=n(X,"LI",{});var n9e=s(A3);ehe=n(n9e,"STRONG",{});var ift=s(ehe);LVo=r(ift,"xlm-roberta"),ift.forEach(t),xVo=r(n9e," \u2014 "),pV=n(n9e,"A",{href:!0});var dft=s(pV);$Vo=r(dft,"XLMRobertaForQuestionAnswering"),dft.forEach(t),kVo=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),SVo=i(X),y3=n(X,"LI",{});var s9e=s(y3);ohe=n(s9e,"STRONG",{});var cft=s(ohe);RVo=r(cft,"xlm-roberta-xl"),cft.forEach(t),BVo=r(s9e," \u2014 "),uV=n(s9e,"A",{href:!0});var fft=s(uV);PVo=r(fft,"XLMRobertaXLForQuestionAnswering"),fft.forEach(t),IVo=r(s9e," (XLM-RoBERTa-XL model)"),s9e.forEach(t),qVo=i(X),L3=n(X,"LI",{});var l9e=s(L3);rhe=n(l9e,"STRONG",{});var mft=s(rhe);NVo=r(mft,"xlnet"),mft.forEach(t),jVo=r(l9e," \u2014 "),_V=n(l9e,"A",{href:!0});var gft=s(_V);DVo=r(gft,"XLNetForQuestionAnsweringSimple"),gft.forEach(t),GVo=r(l9e," (XLNet model)"),l9e.forEach(t),OVo=i(X),x3=n(X,"LI",{});var i9e=s(x3);the=n(i9e,"STRONG",{});var hft=s(the);VVo=r(hft,"yoso"),hft.forEach(t),XVo=r(i9e," \u2014 "),bV=n(i9e,"A",{href:!0});var pft=s(bV);zVo=r(pft,"YosoForQuestionAnswering"),pft.forEach(t),QVo=r(i9e," (YOSO model)"),i9e.forEach(t),X.forEach(t),WVo=i(ia),$3=n(ia,"P",{});var d9e=s($3);HVo=r(d9e,"The model is set in evaluation mode by default using "),ahe=n(d9e,"CODE",{});var uft=s(ahe);UVo=r(uft,"model.eval()"),uft.forEach(t),JVo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(d9e,"CODE",{});var _ft=s(nhe);YVo=r(_ft,"model.train()"),_ft.forEach(t),d9e.forEach(t),KVo=i(ia),T(k3.$$.fragment,ia),ia.forEach(t),Us.forEach(t),BIe=i(f),Yi=n(f,"H2",{class:!0});var NNe=s(Yi);S3=n(NNe,"A",{id:!0,class:!0,href:!0});var bft=s(S3);she=n(bft,"SPAN",{});var vft=s(she);T(My.$$.fragment,vft),vft.forEach(t),bft.forEach(t),ZVo=i(NNe),lhe=n(NNe,"SPAN",{});var Fft=s(lhe);eXo=r(Fft,"AutoModelForTableQuestionAnswering"),Fft.forEach(t),NNe.forEach(t),PIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(Ey.$$.fragment,Js),oXo=i(Js),Ki=n(Js,"P",{});var BK=s(Ki);rXo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vV=n(BK,"A",{href:!0});var Tft=s(vV);tXo=r(Tft,"from_pretrained()"),Tft.forEach(t),aXo=r(BK," class method or the "),FV=n(BK,"A",{href:!0});var Mft=s(FV);nXo=r(Mft,"from_config()"),Mft.forEach(t),sXo=r(BK,` class
method.`),BK.forEach(t),lXo=i(Js),Cy=n(Js,"P",{});var jNe=s(Cy);iXo=r(jNe,"This class cannot be instantiated directly using "),ihe=n(jNe,"CODE",{});var Eft=s(ihe);dXo=r(Eft,"__init__()"),Eft.forEach(t),cXo=r(jNe," (throws an error)."),jNe.forEach(t),fXo=i(Js),ft=n(Js,"DIV",{class:!0});var EA=s(ft);T(wy.$$.fragment,EA),mXo=i(EA),dhe=n(EA,"P",{});var Cft=s(dhe);gXo=r(Cft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Cft.forEach(t),hXo=i(EA),Zi=n(EA,"P",{});var PK=s(Zi);pXo=r(PK,`Note:
Loading a model from its configuration file does `),che=n(PK,"STRONG",{});var wft=s(che);uXo=r(wft,"not"),wft.forEach(t),_Xo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(PK,"A",{href:!0});var Aft=s(TV);bXo=r(Aft,"from_pretrained()"),Aft.forEach(t),vXo=r(PK," to load the model weights."),PK.forEach(t),FXo=i(EA),T(R3.$$.fragment,EA),EA.forEach(t),TXo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ay.$$.fragment,da),MXo=i(da),fhe=n(da,"P",{});var yft=s(fhe);EXo=r(yft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),yft.forEach(t),CXo=i(da),Ia=n(da,"P",{});var CA=s(Ia);wXo=r(CA,"The model class to instantiate is selected based on the "),mhe=n(CA,"CODE",{});var Lft=s(mhe);AXo=r(Lft,"model_type"),Lft.forEach(t),yXo=r(CA,` property of the config object (either
passed as an argument or loaded from `),ghe=n(CA,"CODE",{});var xft=s(ghe);LXo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),xXo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(CA,"CODE",{});var $ft=s(hhe);$Xo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),kXo=r(CA,":"),CA.forEach(t),SXo=i(da),phe=n(da,"UL",{});var kft=s(phe);B3=n(kft,"LI",{});var c9e=s(B3);uhe=n(c9e,"STRONG",{});var Sft=s(uhe);RXo=r(Sft,"tapas"),Sft.forEach(t),BXo=r(c9e," \u2014 "),MV=n(c9e,"A",{href:!0});var Rft=s(MV);PXo=r(Rft,"TapasForQuestionAnswering"),Rft.forEach(t),IXo=r(c9e," (TAPAS model)"),c9e.forEach(t),kft.forEach(t),qXo=i(da),P3=n(da,"P",{});var f9e=s(P3);NXo=r(f9e,"The model is set in evaluation mode by default using "),_he=n(f9e,"CODE",{});var Bft=s(_he);jXo=r(Bft,"model.eval()"),Bft.forEach(t),DXo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(f9e,"CODE",{});var Pft=s(bhe);GXo=r(Pft,"model.train()"),Pft.forEach(t),f9e.forEach(t),OXo=i(da),T(I3.$$.fragment,da),da.forEach(t),Js.forEach(t),IIe=i(f),ed=n(f,"H2",{class:!0});var DNe=s(ed);q3=n(DNe,"A",{id:!0,class:!0,href:!0});var Ift=s(q3);vhe=n(Ift,"SPAN",{});var qft=s(vhe);T(yy.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),VXo=i(DNe),Fhe=n(DNe,"SPAN",{});var Nft=s(Fhe);XXo=r(Nft,"AutoModelForImageClassification"),Nft.forEach(t),DNe.forEach(t),qIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(Ly.$$.fragment,Ys),zXo=i(Ys),od=n(Ys,"P",{});var IK=s(od);QXo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EV=n(IK,"A",{href:!0});var jft=s(EV);WXo=r(jft,"from_pretrained()"),jft.forEach(t),HXo=r(IK," class method or the "),CV=n(IK,"A",{href:!0});var Dft=s(CV);UXo=r(Dft,"from_config()"),Dft.forEach(t),JXo=r(IK,` class
method.`),IK.forEach(t),YXo=i(Ys),xy=n(Ys,"P",{});var GNe=s(xy);KXo=r(GNe,"This class cannot be instantiated directly using "),The=n(GNe,"CODE",{});var Gft=s(The);ZXo=r(Gft,"__init__()"),Gft.forEach(t),ezo=r(GNe," (throws an error)."),GNe.forEach(t),ozo=i(Ys),mt=n(Ys,"DIV",{class:!0});var wA=s(mt);T($y.$$.fragment,wA),rzo=i(wA),Mhe=n(wA,"P",{});var Oft=s(Mhe);tzo=r(Oft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Oft.forEach(t),azo=i(wA),rd=n(wA,"P",{});var qK=s(rd);nzo=r(qK,`Note:
Loading a model from its configuration file does `),Ehe=n(qK,"STRONG",{});var Vft=s(Ehe);szo=r(Vft,"not"),Vft.forEach(t),lzo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(qK,"A",{href:!0});var Xft=s(wV);izo=r(Xft,"from_pretrained()"),Xft.forEach(t),dzo=r(qK," to load the model weights."),qK.forEach(t),czo=i(wA),T(N3.$$.fragment,wA),wA.forEach(t),fzo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(ky.$$.fragment,ca),mzo=i(ca),Che=n(ca,"P",{});var zft=s(Che);gzo=r(zft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zft.forEach(t),hzo=i(ca),qa=n(ca,"P",{});var AA=s(qa);pzo=r(AA,"The model class to instantiate is selected based on the "),whe=n(AA,"CODE",{});var Qft=s(whe);uzo=r(Qft,"model_type"),Qft.forEach(t),_zo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(AA,"CODE",{});var Wft=s(Ahe);bzo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),vzo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(AA,"CODE",{});var Hft=s(yhe);Fzo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),Tzo=r(AA,":"),AA.forEach(t),Mzo=i(ca),ve=n(ca,"UL",{});var Te=s(ve);j3=n(Te,"LI",{});var m9e=s(j3);Lhe=n(m9e,"STRONG",{});var Uft=s(Lhe);Ezo=r(Uft,"beit"),Uft.forEach(t),Czo=r(m9e," \u2014 "),AV=n(m9e,"A",{href:!0});var Jft=s(AV);wzo=r(Jft,"BeitForImageClassification"),Jft.forEach(t),Azo=r(m9e," (BEiT model)"),m9e.forEach(t),yzo=i(Te),D3=n(Te,"LI",{});var g9e=s(D3);xhe=n(g9e,"STRONG",{});var Yft=s(xhe);Lzo=r(Yft,"convnext"),Yft.forEach(t),xzo=r(g9e," \u2014 "),yV=n(g9e,"A",{href:!0});var Kft=s(yV);$zo=r(Kft,"ConvNextForImageClassification"),Kft.forEach(t),kzo=r(g9e," (ConvNext model)"),g9e.forEach(t),Szo=i(Te),G3=n(Te,"LI",{});var h9e=s(G3);$he=n(h9e,"STRONG",{});var Zft=s($he);Rzo=r(Zft,"cvt"),Zft.forEach(t),Bzo=r(h9e," \u2014 "),LV=n(h9e,"A",{href:!0});var emt=s(LV);Pzo=r(emt,"CvtForImageClassification"),emt.forEach(t),Izo=r(h9e," (CvT model)"),h9e.forEach(t),qzo=i(Te),O3=n(Te,"LI",{});var p9e=s(O3);khe=n(p9e,"STRONG",{});var omt=s(khe);Nzo=r(omt,"data2vec-vision"),omt.forEach(t),jzo=r(p9e," \u2014 "),xV=n(p9e,"A",{href:!0});var rmt=s(xV);Dzo=r(rmt,"Data2VecVisionForImageClassification"),rmt.forEach(t),Gzo=r(p9e," (Data2VecVision model)"),p9e.forEach(t),Ozo=i(Te),Rs=n(Te,"LI",{});var p$=s(Rs);She=n(p$,"STRONG",{});var tmt=s(She);Vzo=r(tmt,"deit"),tmt.forEach(t),Xzo=r(p$," \u2014 "),$V=n(p$,"A",{href:!0});var amt=s($V);zzo=r(amt,"DeiTForImageClassification"),amt.forEach(t),Qzo=r(p$," or "),kV=n(p$,"A",{href:!0});var nmt=s(kV);Wzo=r(nmt,"DeiTForImageClassificationWithTeacher"),nmt.forEach(t),Hzo=r(p$," (DeiT model)"),p$.forEach(t),Uzo=i(Te),V3=n(Te,"LI",{});var u9e=s(V3);Rhe=n(u9e,"STRONG",{});var smt=s(Rhe);Jzo=r(smt,"imagegpt"),smt.forEach(t),Yzo=r(u9e," \u2014 "),SV=n(u9e,"A",{href:!0});var lmt=s(SV);Kzo=r(lmt,"ImageGPTForImageClassification"),lmt.forEach(t),Zzo=r(u9e," (ImageGPT model)"),u9e.forEach(t),eQo=i(Te),gt=n(Te,"LI",{});var ff=s(gt);Bhe=n(ff,"STRONG",{});var imt=s(Bhe);oQo=r(imt,"perceiver"),imt.forEach(t),rQo=r(ff," \u2014 "),RV=n(ff,"A",{href:!0});var dmt=s(RV);tQo=r(dmt,"PerceiverForImageClassificationLearned"),dmt.forEach(t),aQo=r(ff," or "),BV=n(ff,"A",{href:!0});var cmt=s(BV);nQo=r(cmt,"PerceiverForImageClassificationFourier"),cmt.forEach(t),sQo=r(ff," or "),PV=n(ff,"A",{href:!0});var fmt=s(PV);lQo=r(fmt,"PerceiverForImageClassificationConvProcessing"),fmt.forEach(t),iQo=r(ff," (Perceiver model)"),ff.forEach(t),dQo=i(Te),X3=n(Te,"LI",{});var _9e=s(X3);Phe=n(_9e,"STRONG",{});var mmt=s(Phe);cQo=r(mmt,"poolformer"),mmt.forEach(t),fQo=r(_9e," \u2014 "),IV=n(_9e,"A",{href:!0});var gmt=s(IV);mQo=r(gmt,"PoolFormerForImageClassification"),gmt.forEach(t),gQo=r(_9e," (PoolFormer model)"),_9e.forEach(t),hQo=i(Te),z3=n(Te,"LI",{});var b9e=s(z3);Ihe=n(b9e,"STRONG",{});var hmt=s(Ihe);pQo=r(hmt,"regnet"),hmt.forEach(t),uQo=r(b9e," \u2014 "),qV=n(b9e,"A",{href:!0});var pmt=s(qV);_Qo=r(pmt,"RegNetForImageClassification"),pmt.forEach(t),bQo=r(b9e," (RegNet model)"),b9e.forEach(t),vQo=i(Te),Q3=n(Te,"LI",{});var v9e=s(Q3);qhe=n(v9e,"STRONG",{});var umt=s(qhe);FQo=r(umt,"resnet"),umt.forEach(t),TQo=r(v9e," \u2014 "),NV=n(v9e,"A",{href:!0});var _mt=s(NV);MQo=r(_mt,"ResNetForImageClassification"),_mt.forEach(t),EQo=r(v9e," (ResNet model)"),v9e.forEach(t),CQo=i(Te),W3=n(Te,"LI",{});var F9e=s(W3);Nhe=n(F9e,"STRONG",{});var bmt=s(Nhe);wQo=r(bmt,"segformer"),bmt.forEach(t),AQo=r(F9e," \u2014 "),jV=n(F9e,"A",{href:!0});var vmt=s(jV);yQo=r(vmt,"SegformerForImageClassification"),vmt.forEach(t),LQo=r(F9e," (SegFormer model)"),F9e.forEach(t),xQo=i(Te),H3=n(Te,"LI",{});var T9e=s(H3);jhe=n(T9e,"STRONG",{});var Fmt=s(jhe);$Qo=r(Fmt,"swin"),Fmt.forEach(t),kQo=r(T9e," \u2014 "),DV=n(T9e,"A",{href:!0});var Tmt=s(DV);SQo=r(Tmt,"SwinForImageClassification"),Tmt.forEach(t),RQo=r(T9e," (Swin model)"),T9e.forEach(t),BQo=i(Te),U3=n(Te,"LI",{});var M9e=s(U3);Dhe=n(M9e,"STRONG",{});var Mmt=s(Dhe);PQo=r(Mmt,"van"),Mmt.forEach(t),IQo=r(M9e," \u2014 "),GV=n(M9e,"A",{href:!0});var Emt=s(GV);qQo=r(Emt,"VanForImageClassification"),Emt.forEach(t),NQo=r(M9e," (VAN model)"),M9e.forEach(t),jQo=i(Te),J3=n(Te,"LI",{});var E9e=s(J3);Ghe=n(E9e,"STRONG",{});var Cmt=s(Ghe);DQo=r(Cmt,"vit"),Cmt.forEach(t),GQo=r(E9e," \u2014 "),OV=n(E9e,"A",{href:!0});var wmt=s(OV);OQo=r(wmt,"ViTForImageClassification"),wmt.forEach(t),VQo=r(E9e," (ViT model)"),E9e.forEach(t),Te.forEach(t),XQo=i(ca),Y3=n(ca,"P",{});var C9e=s(Y3);zQo=r(C9e,"The model is set in evaluation mode by default using "),Ohe=n(C9e,"CODE",{});var Amt=s(Ohe);QQo=r(Amt,"model.eval()"),Amt.forEach(t),WQo=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(C9e,"CODE",{});var ymt=s(Vhe);HQo=r(ymt,"model.train()"),ymt.forEach(t),C9e.forEach(t),UQo=i(ca),T(K3.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),NIe=i(f),td=n(f,"H2",{class:!0});var ONe=s(td);Z3=n(ONe,"A",{id:!0,class:!0,href:!0});var Lmt=s(Z3);Xhe=n(Lmt,"SPAN",{});var xmt=s(Xhe);T(Sy.$$.fragment,xmt),xmt.forEach(t),Lmt.forEach(t),JQo=i(ONe),zhe=n(ONe,"SPAN",{});var $mt=s(zhe);YQo=r($mt,"AutoModelForVision2Seq"),$mt.forEach(t),ONe.forEach(t),jIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Ry.$$.fragment,Ks),KQo=i(Ks),ad=n(Ks,"P",{});var NK=s(ad);ZQo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VV=n(NK,"A",{href:!0});var kmt=s(VV);eWo=r(kmt,"from_pretrained()"),kmt.forEach(t),oWo=r(NK," class method or the "),XV=n(NK,"A",{href:!0});var Smt=s(XV);rWo=r(Smt,"from_config()"),Smt.forEach(t),tWo=r(NK,` class
method.`),NK.forEach(t),aWo=i(Ks),By=n(Ks,"P",{});var VNe=s(By);nWo=r(VNe,"This class cannot be instantiated directly using "),Qhe=n(VNe,"CODE",{});var Rmt=s(Qhe);sWo=r(Rmt,"__init__()"),Rmt.forEach(t),lWo=r(VNe," (throws an error)."),VNe.forEach(t),iWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var yA=s(ht);T(Py.$$.fragment,yA),dWo=i(yA),Whe=n(yA,"P",{});var Bmt=s(Whe);cWo=r(Bmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bmt.forEach(t),fWo=i(yA),nd=n(yA,"P",{});var jK=s(nd);mWo=r(jK,`Note:
Loading a model from its configuration file does `),Hhe=n(jK,"STRONG",{});var Pmt=s(Hhe);gWo=r(Pmt,"not"),Pmt.forEach(t),hWo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(jK,"A",{href:!0});var Imt=s(zV);pWo=r(Imt,"from_pretrained()"),Imt.forEach(t),uWo=r(jK," to load the model weights."),jK.forEach(t),_Wo=i(yA),T(ev.$$.fragment,yA),yA.forEach(t),bWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Iy.$$.fragment,fa),vWo=i(fa),Uhe=n(fa,"P",{});var qmt=s(Uhe);FWo=r(qmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qmt.forEach(t),TWo=i(fa),Na=n(fa,"P",{});var LA=s(Na);MWo=r(LA,"The model class to instantiate is selected based on the "),Jhe=n(LA,"CODE",{});var Nmt=s(Jhe);EWo=r(Nmt,"model_type"),Nmt.forEach(t),CWo=r(LA,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(LA,"CODE",{});var jmt=s(Yhe);wWo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),AWo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(LA,"CODE",{});var Dmt=s(Khe);yWo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),LWo=r(LA,":"),LA.forEach(t),xWo=i(fa),Zhe=n(fa,"UL",{});var Gmt=s(Zhe);ov=n(Gmt,"LI",{});var w9e=s(ov);epe=n(w9e,"STRONG",{});var Omt=s(epe);$Wo=r(Omt,"vision-encoder-decoder"),Omt.forEach(t),kWo=r(w9e," \u2014 "),QV=n(w9e,"A",{href:!0});var Vmt=s(QV);SWo=r(Vmt,"VisionEncoderDecoderModel"),Vmt.forEach(t),RWo=r(w9e," (Vision Encoder decoder model)"),w9e.forEach(t),Gmt.forEach(t),BWo=i(fa),rv=n(fa,"P",{});var A9e=s(rv);PWo=r(A9e,"The model is set in evaluation mode by default using "),ope=n(A9e,"CODE",{});var Xmt=s(ope);IWo=r(Xmt,"model.eval()"),Xmt.forEach(t),qWo=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(A9e,"CODE",{});var zmt=s(rpe);NWo=r(zmt,"model.train()"),zmt.forEach(t),A9e.forEach(t),jWo=i(fa),T(tv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),DIe=i(f),sd=n(f,"H2",{class:!0});var XNe=s(sd);av=n(XNe,"A",{id:!0,class:!0,href:!0});var Qmt=s(av);tpe=n(Qmt,"SPAN",{});var Wmt=s(tpe);T(qy.$$.fragment,Wmt),Wmt.forEach(t),Qmt.forEach(t),DWo=i(XNe),ape=n(XNe,"SPAN",{});var Hmt=s(ape);GWo=r(Hmt,"AutoModelForAudioClassification"),Hmt.forEach(t),XNe.forEach(t),GIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Ny.$$.fragment,Zs),OWo=i(Zs),ld=n(Zs,"P",{});var DK=s(ld);VWo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WV=n(DK,"A",{href:!0});var Umt=s(WV);XWo=r(Umt,"from_pretrained()"),Umt.forEach(t),zWo=r(DK," class method or the "),HV=n(DK,"A",{href:!0});var Jmt=s(HV);QWo=r(Jmt,"from_config()"),Jmt.forEach(t),WWo=r(DK,` class
method.`),DK.forEach(t),HWo=i(Zs),jy=n(Zs,"P",{});var zNe=s(jy);UWo=r(zNe,"This class cannot be instantiated directly using "),npe=n(zNe,"CODE",{});var Ymt=s(npe);JWo=r(Ymt,"__init__()"),Ymt.forEach(t),YWo=r(zNe," (throws an error)."),zNe.forEach(t),KWo=i(Zs),pt=n(Zs,"DIV",{class:!0});var xA=s(pt);T(Dy.$$.fragment,xA),ZWo=i(xA),spe=n(xA,"P",{});var Kmt=s(spe);eHo=r(Kmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kmt.forEach(t),oHo=i(xA),id=n(xA,"P",{});var GK=s(id);rHo=r(GK,`Note:
Loading a model from its configuration file does `),lpe=n(GK,"STRONG",{});var Zmt=s(lpe);tHo=r(Zmt,"not"),Zmt.forEach(t),aHo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(GK,"A",{href:!0});var egt=s(UV);nHo=r(egt,"from_pretrained()"),egt.forEach(t),sHo=r(GK," to load the model weights."),GK.forEach(t),lHo=i(xA),T(nv.$$.fragment,xA),xA.forEach(t),iHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Gy.$$.fragment,ma),dHo=i(ma),ipe=n(ma,"P",{});var ogt=s(ipe);cHo=r(ogt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ogt.forEach(t),fHo=i(ma),ja=n(ma,"P",{});var $A=s(ja);mHo=r($A,"The model class to instantiate is selected based on the "),dpe=n($A,"CODE",{});var rgt=s(dpe);gHo=r(rgt,"model_type"),rgt.forEach(t),hHo=r($A,` property of the config object (either
passed as an argument or loaded from `),cpe=n($A,"CODE",{});var tgt=s(cpe);pHo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),uHo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n($A,"CODE",{});var agt=s(fpe);_Ho=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),bHo=r($A,":"),$A.forEach(t),vHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);sv=n(bo,"LI",{});var y9e=s(sv);mpe=n(y9e,"STRONG",{});var ngt=s(mpe);FHo=r(ngt,"data2vec-audio"),ngt.forEach(t),THo=r(y9e," \u2014 "),JV=n(y9e,"A",{href:!0});var sgt=s(JV);MHo=r(sgt,"Data2VecAudioForSequenceClassification"),sgt.forEach(t),EHo=r(y9e," (Data2VecAudio model)"),y9e.forEach(t),CHo=i(bo),lv=n(bo,"LI",{});var L9e=s(lv);gpe=n(L9e,"STRONG",{});var lgt=s(gpe);wHo=r(lgt,"hubert"),lgt.forEach(t),AHo=r(L9e," \u2014 "),YV=n(L9e,"A",{href:!0});var igt=s(YV);yHo=r(igt,"HubertForSequenceClassification"),igt.forEach(t),LHo=r(L9e," (Hubert model)"),L9e.forEach(t),xHo=i(bo),iv=n(bo,"LI",{});var x9e=s(iv);hpe=n(x9e,"STRONG",{});var dgt=s(hpe);$Ho=r(dgt,"sew"),dgt.forEach(t),kHo=r(x9e," \u2014 "),KV=n(x9e,"A",{href:!0});var cgt=s(KV);SHo=r(cgt,"SEWForSequenceClassification"),cgt.forEach(t),RHo=r(x9e," (SEW model)"),x9e.forEach(t),BHo=i(bo),dv=n(bo,"LI",{});var $9e=s(dv);ppe=n($9e,"STRONG",{});var fgt=s(ppe);PHo=r(fgt,"sew-d"),fgt.forEach(t),IHo=r($9e," \u2014 "),ZV=n($9e,"A",{href:!0});var mgt=s(ZV);qHo=r(mgt,"SEWDForSequenceClassification"),mgt.forEach(t),NHo=r($9e," (SEW-D model)"),$9e.forEach(t),jHo=i(bo),cv=n(bo,"LI",{});var k9e=s(cv);upe=n(k9e,"STRONG",{});var ggt=s(upe);DHo=r(ggt,"unispeech"),ggt.forEach(t),GHo=r(k9e," \u2014 "),eX=n(k9e,"A",{href:!0});var hgt=s(eX);OHo=r(hgt,"UniSpeechForSequenceClassification"),hgt.forEach(t),VHo=r(k9e," (UniSpeech model)"),k9e.forEach(t),XHo=i(bo),fv=n(bo,"LI",{});var S9e=s(fv);_pe=n(S9e,"STRONG",{});var pgt=s(_pe);zHo=r(pgt,"unispeech-sat"),pgt.forEach(t),QHo=r(S9e," \u2014 "),oX=n(S9e,"A",{href:!0});var ugt=s(oX);WHo=r(ugt,"UniSpeechSatForSequenceClassification"),ugt.forEach(t),HHo=r(S9e," (UniSpeechSat model)"),S9e.forEach(t),UHo=i(bo),mv=n(bo,"LI",{});var R9e=s(mv);bpe=n(R9e,"STRONG",{});var _gt=s(bpe);JHo=r(_gt,"wav2vec2"),_gt.forEach(t),YHo=r(R9e," \u2014 "),rX=n(R9e,"A",{href:!0});var bgt=s(rX);KHo=r(bgt,"Wav2Vec2ForSequenceClassification"),bgt.forEach(t),ZHo=r(R9e," (Wav2Vec2 model)"),R9e.forEach(t),eUo=i(bo),gv=n(bo,"LI",{});var B9e=s(gv);vpe=n(B9e,"STRONG",{});var vgt=s(vpe);oUo=r(vgt,"wavlm"),vgt.forEach(t),rUo=r(B9e," \u2014 "),tX=n(B9e,"A",{href:!0});var Fgt=s(tX);tUo=r(Fgt,"WavLMForSequenceClassification"),Fgt.forEach(t),aUo=r(B9e," (WavLM model)"),B9e.forEach(t),bo.forEach(t),nUo=i(ma),hv=n(ma,"P",{});var P9e=s(hv);sUo=r(P9e,"The model is set in evaluation mode by default using "),Fpe=n(P9e,"CODE",{});var Tgt=s(Fpe);lUo=r(Tgt,"model.eval()"),Tgt.forEach(t),iUo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=n(P9e,"CODE",{});var Mgt=s(Tpe);dUo=r(Mgt,"model.train()"),Mgt.forEach(t),P9e.forEach(t),cUo=i(ma),T(pv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),OIe=i(f),dd=n(f,"H2",{class:!0});var QNe=s(dd);uv=n(QNe,"A",{id:!0,class:!0,href:!0});var Egt=s(uv);Mpe=n(Egt,"SPAN",{});var Cgt=s(Mpe);T(Oy.$$.fragment,Cgt),Cgt.forEach(t),Egt.forEach(t),fUo=i(QNe),Epe=n(QNe,"SPAN",{});var wgt=s(Epe);mUo=r(wgt,"AutoModelForAudioFrameClassification"),wgt.forEach(t),QNe.forEach(t),VIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Vy.$$.fragment,el),gUo=i(el),cd=n(el,"P",{});var OK=s(cd);hUo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aX=n(OK,"A",{href:!0});var Agt=s(aX);pUo=r(Agt,"from_pretrained()"),Agt.forEach(t),uUo=r(OK," class method or the "),nX=n(OK,"A",{href:!0});var ygt=s(nX);_Uo=r(ygt,"from_config()"),ygt.forEach(t),bUo=r(OK,` class
method.`),OK.forEach(t),vUo=i(el),Xy=n(el,"P",{});var WNe=s(Xy);FUo=r(WNe,"This class cannot be instantiated directly using "),Cpe=n(WNe,"CODE",{});var Lgt=s(Cpe);TUo=r(Lgt,"__init__()"),Lgt.forEach(t),MUo=r(WNe," (throws an error)."),WNe.forEach(t),EUo=i(el),ut=n(el,"DIV",{class:!0});var kA=s(ut);T(zy.$$.fragment,kA),CUo=i(kA),wpe=n(kA,"P",{});var xgt=s(wpe);wUo=r(xgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xgt.forEach(t),AUo=i(kA),fd=n(kA,"P",{});var VK=s(fd);yUo=r(VK,`Note:
Loading a model from its configuration file does `),Ape=n(VK,"STRONG",{});var $gt=s(Ape);LUo=r($gt,"not"),$gt.forEach(t),xUo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(VK,"A",{href:!0});var kgt=s(sX);$Uo=r(kgt,"from_pretrained()"),kgt.forEach(t),kUo=r(VK," to load the model weights."),VK.forEach(t),SUo=i(kA),T(_v.$$.fragment,kA),kA.forEach(t),RUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Qy.$$.fragment,ga),BUo=i(ga),ype=n(ga,"P",{});var Sgt=s(ype);PUo=r(Sgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sgt.forEach(t),IUo=i(ga),Da=n(ga,"P",{});var SA=s(Da);qUo=r(SA,"The model class to instantiate is selected based on the "),Lpe=n(SA,"CODE",{});var Rgt=s(Lpe);NUo=r(Rgt,"model_type"),Rgt.forEach(t),jUo=r(SA,` property of the config object (either
passed as an argument or loaded from `),xpe=n(SA,"CODE",{});var Bgt=s(xpe);DUo=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),GUo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=n(SA,"CODE",{});var Pgt=s($pe);OUo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),VUo=r(SA,":"),SA.forEach(t),XUo=i(ga),Ga=n(ga,"UL",{});var RA=s(Ga);bv=n(RA,"LI",{});var I9e=s(bv);kpe=n(I9e,"STRONG",{});var Igt=s(kpe);zUo=r(Igt,"data2vec-audio"),Igt.forEach(t),QUo=r(I9e," \u2014 "),lX=n(I9e,"A",{href:!0});var qgt=s(lX);WUo=r(qgt,"Data2VecAudioForAudioFrameClassification"),qgt.forEach(t),HUo=r(I9e," (Data2VecAudio model)"),I9e.forEach(t),UUo=i(RA),vv=n(RA,"LI",{});var q9e=s(vv);Spe=n(q9e,"STRONG",{});var Ngt=s(Spe);JUo=r(Ngt,"unispeech-sat"),Ngt.forEach(t),YUo=r(q9e," \u2014 "),iX=n(q9e,"A",{href:!0});var jgt=s(iX);KUo=r(jgt,"UniSpeechSatForAudioFrameClassification"),jgt.forEach(t),ZUo=r(q9e," (UniSpeechSat model)"),q9e.forEach(t),eJo=i(RA),Fv=n(RA,"LI",{});var N9e=s(Fv);Rpe=n(N9e,"STRONG",{});var Dgt=s(Rpe);oJo=r(Dgt,"wav2vec2"),Dgt.forEach(t),rJo=r(N9e," \u2014 "),dX=n(N9e,"A",{href:!0});var Ggt=s(dX);tJo=r(Ggt,"Wav2Vec2ForAudioFrameClassification"),Ggt.forEach(t),aJo=r(N9e," (Wav2Vec2 model)"),N9e.forEach(t),nJo=i(RA),Tv=n(RA,"LI",{});var j9e=s(Tv);Bpe=n(j9e,"STRONG",{});var Ogt=s(Bpe);sJo=r(Ogt,"wavlm"),Ogt.forEach(t),lJo=r(j9e," \u2014 "),cX=n(j9e,"A",{href:!0});var Vgt=s(cX);iJo=r(Vgt,"WavLMForAudioFrameClassification"),Vgt.forEach(t),dJo=r(j9e," (WavLM model)"),j9e.forEach(t),RA.forEach(t),cJo=i(ga),Mv=n(ga,"P",{});var D9e=s(Mv);fJo=r(D9e,"The model is set in evaluation mode by default using "),Ppe=n(D9e,"CODE",{});var Xgt=s(Ppe);mJo=r(Xgt,"model.eval()"),Xgt.forEach(t),gJo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(D9e,"CODE",{});var zgt=s(Ipe);hJo=r(zgt,"model.train()"),zgt.forEach(t),D9e.forEach(t),pJo=i(ga),T(Ev.$$.fragment,ga),ga.forEach(t),el.forEach(t),XIe=i(f),md=n(f,"H2",{class:!0});var HNe=s(md);Cv=n(HNe,"A",{id:!0,class:!0,href:!0});var Qgt=s(Cv);qpe=n(Qgt,"SPAN",{});var Wgt=s(qpe);T(Wy.$$.fragment,Wgt),Wgt.forEach(t),Qgt.forEach(t),uJo=i(HNe),Npe=n(HNe,"SPAN",{});var Hgt=s(Npe);_Jo=r(Hgt,"AutoModelForCTC"),Hgt.forEach(t),HNe.forEach(t),zIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Hy.$$.fragment,ol),bJo=i(ol),gd=n(ol,"P",{});var XK=s(gd);vJo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fX=n(XK,"A",{href:!0});var Ugt=s(fX);FJo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),TJo=r(XK," class method or the "),mX=n(XK,"A",{href:!0});var Jgt=s(mX);MJo=r(Jgt,"from_config()"),Jgt.forEach(t),EJo=r(XK,` class
method.`),XK.forEach(t),CJo=i(ol),Uy=n(ol,"P",{});var UNe=s(Uy);wJo=r(UNe,"This class cannot be instantiated directly using "),jpe=n(UNe,"CODE",{});var Ygt=s(jpe);AJo=r(Ygt,"__init__()"),Ygt.forEach(t),yJo=r(UNe," (throws an error)."),UNe.forEach(t),LJo=i(ol),_t=n(ol,"DIV",{class:!0});var BA=s(_t);T(Jy.$$.fragment,BA),xJo=i(BA),Dpe=n(BA,"P",{});var Kgt=s(Dpe);$Jo=r(Kgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kgt.forEach(t),kJo=i(BA),hd=n(BA,"P",{});var zK=s(hd);SJo=r(zK,`Note:
Loading a model from its configuration file does `),Gpe=n(zK,"STRONG",{});var Zgt=s(Gpe);RJo=r(Zgt,"not"),Zgt.forEach(t),BJo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(zK,"A",{href:!0});var eht=s(gX);PJo=r(eht,"from_pretrained()"),eht.forEach(t),IJo=r(zK," to load the model weights."),zK.forEach(t),qJo=i(BA),T(wv.$$.fragment,BA),BA.forEach(t),NJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Yy.$$.fragment,ha),jJo=i(ha),Ope=n(ha,"P",{});var oht=s(Ope);DJo=r(oht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oht.forEach(t),GJo=i(ha),Oa=n(ha,"P",{});var PA=s(Oa);OJo=r(PA,"The model class to instantiate is selected based on the "),Vpe=n(PA,"CODE",{});var rht=s(Vpe);VJo=r(rht,"model_type"),rht.forEach(t),XJo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(PA,"CODE",{});var tht=s(Xpe);zJo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),QJo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(PA,"CODE",{});var aht=s(zpe);WJo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),HJo=r(PA,":"),PA.forEach(t),UJo=i(ha),je=n(ha,"UL",{});var vo=s(je);Av=n(vo,"LI",{});var G9e=s(Av);Qpe=n(G9e,"STRONG",{});var nht=s(Qpe);JJo=r(nht,"data2vec-audio"),nht.forEach(t),YJo=r(G9e," \u2014 "),hX=n(G9e,"A",{href:!0});var sht=s(hX);KJo=r(sht,"Data2VecAudioForCTC"),sht.forEach(t),ZJo=r(G9e," (Data2VecAudio model)"),G9e.forEach(t),eYo=i(vo),yv=n(vo,"LI",{});var O9e=s(yv);Wpe=n(O9e,"STRONG",{});var lht=s(Wpe);oYo=r(lht,"hubert"),lht.forEach(t),rYo=r(O9e," \u2014 "),pX=n(O9e,"A",{href:!0});var iht=s(pX);tYo=r(iht,"HubertForCTC"),iht.forEach(t),aYo=r(O9e," (Hubert model)"),O9e.forEach(t),nYo=i(vo),Lv=n(vo,"LI",{});var V9e=s(Lv);Hpe=n(V9e,"STRONG",{});var dht=s(Hpe);sYo=r(dht,"sew"),dht.forEach(t),lYo=r(V9e," \u2014 "),uX=n(V9e,"A",{href:!0});var cht=s(uX);iYo=r(cht,"SEWForCTC"),cht.forEach(t),dYo=r(V9e," (SEW model)"),V9e.forEach(t),cYo=i(vo),xv=n(vo,"LI",{});var X9e=s(xv);Upe=n(X9e,"STRONG",{});var fht=s(Upe);fYo=r(fht,"sew-d"),fht.forEach(t),mYo=r(X9e," \u2014 "),_X=n(X9e,"A",{href:!0});var mht=s(_X);gYo=r(mht,"SEWDForCTC"),mht.forEach(t),hYo=r(X9e," (SEW-D model)"),X9e.forEach(t),pYo=i(vo),$v=n(vo,"LI",{});var z9e=s($v);Jpe=n(z9e,"STRONG",{});var ght=s(Jpe);uYo=r(ght,"unispeech"),ght.forEach(t),_Yo=r(z9e," \u2014 "),bX=n(z9e,"A",{href:!0});var hht=s(bX);bYo=r(hht,"UniSpeechForCTC"),hht.forEach(t),vYo=r(z9e," (UniSpeech model)"),z9e.forEach(t),FYo=i(vo),kv=n(vo,"LI",{});var Q9e=s(kv);Ype=n(Q9e,"STRONG",{});var pht=s(Ype);TYo=r(pht,"unispeech-sat"),pht.forEach(t),MYo=r(Q9e," \u2014 "),vX=n(Q9e,"A",{href:!0});var uht=s(vX);EYo=r(uht,"UniSpeechSatForCTC"),uht.forEach(t),CYo=r(Q9e," (UniSpeechSat model)"),Q9e.forEach(t),wYo=i(vo),Sv=n(vo,"LI",{});var W9e=s(Sv);Kpe=n(W9e,"STRONG",{});var _ht=s(Kpe);AYo=r(_ht,"wav2vec2"),_ht.forEach(t),yYo=r(W9e," \u2014 "),FX=n(W9e,"A",{href:!0});var bht=s(FX);LYo=r(bht,"Wav2Vec2ForCTC"),bht.forEach(t),xYo=r(W9e," (Wav2Vec2 model)"),W9e.forEach(t),$Yo=i(vo),Rv=n(vo,"LI",{});var H9e=s(Rv);Zpe=n(H9e,"STRONG",{});var vht=s(Zpe);kYo=r(vht,"wavlm"),vht.forEach(t),SYo=r(H9e," \u2014 "),TX=n(H9e,"A",{href:!0});var Fht=s(TX);RYo=r(Fht,"WavLMForCTC"),Fht.forEach(t),BYo=r(H9e," (WavLM model)"),H9e.forEach(t),vo.forEach(t),PYo=i(ha),Bv=n(ha,"P",{});var U9e=s(Bv);IYo=r(U9e,"The model is set in evaluation mode by default using "),eue=n(U9e,"CODE",{});var Tht=s(eue);qYo=r(Tht,"model.eval()"),Tht.forEach(t),NYo=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(U9e,"CODE",{});var Mht=s(oue);jYo=r(Mht,"model.train()"),Mht.forEach(t),U9e.forEach(t),DYo=i(ha),T(Pv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),QIe=i(f),pd=n(f,"H2",{class:!0});var JNe=s(pd);Iv=n(JNe,"A",{id:!0,class:!0,href:!0});var Eht=s(Iv);rue=n(Eht,"SPAN",{});var Cht=s(rue);T(Ky.$$.fragment,Cht),Cht.forEach(t),Eht.forEach(t),GYo=i(JNe),tue=n(JNe,"SPAN",{});var wht=s(tue);OYo=r(wht,"AutoModelForSpeechSeq2Seq"),wht.forEach(t),JNe.forEach(t),WIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Zy.$$.fragment,rl),VYo=i(rl),ud=n(rl,"P",{});var QK=s(ud);XYo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MX=n(QK,"A",{href:!0});var Aht=s(MX);zYo=r(Aht,"from_pretrained()"),Aht.forEach(t),QYo=r(QK," class method or the "),EX=n(QK,"A",{href:!0});var yht=s(EX);WYo=r(yht,"from_config()"),yht.forEach(t),HYo=r(QK,` class
method.`),QK.forEach(t),UYo=i(rl),eL=n(rl,"P",{});var YNe=s(eL);JYo=r(YNe,"This class cannot be instantiated directly using "),aue=n(YNe,"CODE",{});var Lht=s(aue);YYo=r(Lht,"__init__()"),Lht.forEach(t),KYo=r(YNe," (throws an error)."),YNe.forEach(t),ZYo=i(rl),bt=n(rl,"DIV",{class:!0});var IA=s(bt);T(oL.$$.fragment,IA),eKo=i(IA),nue=n(IA,"P",{});var xht=s(nue);oKo=r(xht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xht.forEach(t),rKo=i(IA),_d=n(IA,"P",{});var WK=s(_d);tKo=r(WK,`Note:
Loading a model from its configuration file does `),sue=n(WK,"STRONG",{});var $ht=s(sue);aKo=r($ht,"not"),$ht.forEach(t),nKo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(WK,"A",{href:!0});var kht=s(CX);sKo=r(kht,"from_pretrained()"),kht.forEach(t),lKo=r(WK," to load the model weights."),WK.forEach(t),iKo=i(IA),T(qv.$$.fragment,IA),IA.forEach(t),dKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(rL.$$.fragment,pa),cKo=i(pa),lue=n(pa,"P",{});var Sht=s(lue);fKo=r(Sht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Sht.forEach(t),mKo=i(pa),Va=n(pa,"P",{});var qA=s(Va);gKo=r(qA,"The model class to instantiate is selected based on the "),iue=n(qA,"CODE",{});var Rht=s(iue);hKo=r(Rht,"model_type"),Rht.forEach(t),pKo=r(qA,` property of the config object (either
passed as an argument or loaded from `),due=n(qA,"CODE",{});var Bht=s(due);uKo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),_Ko=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(qA,"CODE",{});var Pht=s(cue);bKo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),vKo=r(qA,":"),qA.forEach(t),FKo=i(pa),tL=n(pa,"UL",{});var KNe=s(tL);Nv=n(KNe,"LI",{});var J9e=s(Nv);fue=n(J9e,"STRONG",{});var Iht=s(fue);TKo=r(Iht,"speech-encoder-decoder"),Iht.forEach(t),MKo=r(J9e," \u2014 "),wX=n(J9e,"A",{href:!0});var qht=s(wX);EKo=r(qht,"SpeechEncoderDecoderModel"),qht.forEach(t),CKo=r(J9e," (Speech Encoder decoder model)"),J9e.forEach(t),wKo=i(KNe),jv=n(KNe,"LI",{});var Y9e=s(jv);mue=n(Y9e,"STRONG",{});var Nht=s(mue);AKo=r(Nht,"speech_to_text"),Nht.forEach(t),yKo=r(Y9e," \u2014 "),AX=n(Y9e,"A",{href:!0});var jht=s(AX);LKo=r(jht,"Speech2TextForConditionalGeneration"),jht.forEach(t),xKo=r(Y9e," (Speech2Text model)"),Y9e.forEach(t),KNe.forEach(t),$Ko=i(pa),Dv=n(pa,"P",{});var K9e=s(Dv);kKo=r(K9e,"The model is set in evaluation mode by default using "),gue=n(K9e,"CODE",{});var Dht=s(gue);SKo=r(Dht,"model.eval()"),Dht.forEach(t),RKo=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(K9e,"CODE",{});var Ght=s(hue);BKo=r(Ght,"model.train()"),Ght.forEach(t),K9e.forEach(t),PKo=i(pa),T(Gv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),HIe=i(f),bd=n(f,"H2",{class:!0});var ZNe=s(bd);Ov=n(ZNe,"A",{id:!0,class:!0,href:!0});var Oht=s(Ov);pue=n(Oht,"SPAN",{});var Vht=s(pue);T(aL.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),IKo=i(ZNe),uue=n(ZNe,"SPAN",{});var Xht=s(uue);qKo=r(Xht,"AutoModelForAudioXVector"),Xht.forEach(t),ZNe.forEach(t),UIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(nL.$$.fragment,tl),NKo=i(tl),vd=n(tl,"P",{});var HK=s(vd);jKo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yX=n(HK,"A",{href:!0});var zht=s(yX);DKo=r(zht,"from_pretrained()"),zht.forEach(t),GKo=r(HK," class method or the "),LX=n(HK,"A",{href:!0});var Qht=s(LX);OKo=r(Qht,"from_config()"),Qht.forEach(t),VKo=r(HK,` class
method.`),HK.forEach(t),XKo=i(tl),sL=n(tl,"P",{});var eje=s(sL);zKo=r(eje,"This class cannot be instantiated directly using "),_ue=n(eje,"CODE",{});var Wht=s(_ue);QKo=r(Wht,"__init__()"),Wht.forEach(t),WKo=r(eje," (throws an error)."),eje.forEach(t),HKo=i(tl),vt=n(tl,"DIV",{class:!0});var NA=s(vt);T(lL.$$.fragment,NA),UKo=i(NA),bue=n(NA,"P",{});var Hht=s(bue);JKo=r(Hht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hht.forEach(t),YKo=i(NA),Fd=n(NA,"P",{});var UK=s(Fd);KKo=r(UK,`Note:
Loading a model from its configuration file does `),vue=n(UK,"STRONG",{});var Uht=s(vue);ZKo=r(Uht,"not"),Uht.forEach(t),eZo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(UK,"A",{href:!0});var Jht=s(xX);oZo=r(Jht,"from_pretrained()"),Jht.forEach(t),rZo=r(UK," to load the model weights."),UK.forEach(t),tZo=i(NA),T(Vv.$$.fragment,NA),NA.forEach(t),aZo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(iL.$$.fragment,ua),nZo=i(ua),Fue=n(ua,"P",{});var Yht=s(Fue);sZo=r(Yht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Yht.forEach(t),lZo=i(ua),Xa=n(ua,"P",{});var jA=s(Xa);iZo=r(jA,"The model class to instantiate is selected based on the "),Tue=n(jA,"CODE",{});var Kht=s(Tue);dZo=r(Kht,"model_type"),Kht.forEach(t),cZo=r(jA,` property of the config object (either
passed as an argument or loaded from `),Mue=n(jA,"CODE",{});var Zht=s(Mue);fZo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),mZo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(jA,"CODE",{});var ept=s(Eue);gZo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),hZo=r(jA,":"),jA.forEach(t),pZo=i(ua),za=n(ua,"UL",{});var DA=s(za);Xv=n(DA,"LI",{});var Z9e=s(Xv);Cue=n(Z9e,"STRONG",{});var opt=s(Cue);uZo=r(opt,"data2vec-audio"),opt.forEach(t),_Zo=r(Z9e," \u2014 "),$X=n(Z9e,"A",{href:!0});var rpt=s($X);bZo=r(rpt,"Data2VecAudioForXVector"),rpt.forEach(t),vZo=r(Z9e," (Data2VecAudio model)"),Z9e.forEach(t),FZo=i(DA),zv=n(DA,"LI",{});var e$e=s(zv);wue=n(e$e,"STRONG",{});var tpt=s(wue);TZo=r(tpt,"unispeech-sat"),tpt.forEach(t),MZo=r(e$e," \u2014 "),kX=n(e$e,"A",{href:!0});var apt=s(kX);EZo=r(apt,"UniSpeechSatForXVector"),apt.forEach(t),CZo=r(e$e," (UniSpeechSat model)"),e$e.forEach(t),wZo=i(DA),Qv=n(DA,"LI",{});var o$e=s(Qv);Aue=n(o$e,"STRONG",{});var npt=s(Aue);AZo=r(npt,"wav2vec2"),npt.forEach(t),yZo=r(o$e," \u2014 "),SX=n(o$e,"A",{href:!0});var spt=s(SX);LZo=r(spt,"Wav2Vec2ForXVector"),spt.forEach(t),xZo=r(o$e," (Wav2Vec2 model)"),o$e.forEach(t),$Zo=i(DA),Wv=n(DA,"LI",{});var r$e=s(Wv);yue=n(r$e,"STRONG",{});var lpt=s(yue);kZo=r(lpt,"wavlm"),lpt.forEach(t),SZo=r(r$e," \u2014 "),RX=n(r$e,"A",{href:!0});var ipt=s(RX);RZo=r(ipt,"WavLMForXVector"),ipt.forEach(t),BZo=r(r$e," (WavLM model)"),r$e.forEach(t),DA.forEach(t),PZo=i(ua),Hv=n(ua,"P",{});var t$e=s(Hv);IZo=r(t$e,"The model is set in evaluation mode by default using "),Lue=n(t$e,"CODE",{});var dpt=s(Lue);qZo=r(dpt,"model.eval()"),dpt.forEach(t),NZo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(t$e,"CODE",{});var cpt=s(xue);jZo=r(cpt,"model.train()"),cpt.forEach(t),t$e.forEach(t),DZo=i(ua),T(Uv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),JIe=i(f),Td=n(f,"H2",{class:!0});var oje=s(Td);Jv=n(oje,"A",{id:!0,class:!0,href:!0});var fpt=s(Jv);$ue=n(fpt,"SPAN",{});var mpt=s($ue);T(dL.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),GZo=i(oje),kue=n(oje,"SPAN",{});var gpt=s(kue);OZo=r(gpt,"AutoModelForMaskedImageModeling"),gpt.forEach(t),oje.forEach(t),YIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(cL.$$.fragment,al),VZo=i(al),Md=n(al,"P",{});var JK=s(Md);XZo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BX=n(JK,"A",{href:!0});var hpt=s(BX);zZo=r(hpt,"from_pretrained()"),hpt.forEach(t),QZo=r(JK," class method or the "),PX=n(JK,"A",{href:!0});var ppt=s(PX);WZo=r(ppt,"from_config()"),ppt.forEach(t),HZo=r(JK,` class
method.`),JK.forEach(t),UZo=i(al),fL=n(al,"P",{});var rje=s(fL);JZo=r(rje,"This class cannot be instantiated directly using "),Sue=n(rje,"CODE",{});var upt=s(Sue);YZo=r(upt,"__init__()"),upt.forEach(t),KZo=r(rje," (throws an error)."),rje.forEach(t),ZZo=i(al),Ft=n(al,"DIV",{class:!0});var GA=s(Ft);T(mL.$$.fragment,GA),eer=i(GA),Rue=n(GA,"P",{});var _pt=s(Rue);oer=r(_pt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_pt.forEach(t),rer=i(GA),Ed=n(GA,"P",{});var YK=s(Ed);ter=r(YK,`Note:
Loading a model from its configuration file does `),Bue=n(YK,"STRONG",{});var bpt=s(Bue);aer=r(bpt,"not"),bpt.forEach(t),ner=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(YK,"A",{href:!0});var vpt=s(IX);ser=r(vpt,"from_pretrained()"),vpt.forEach(t),ler=r(YK," to load the model weights."),YK.forEach(t),ier=i(GA),T(Yv.$$.fragment,GA),GA.forEach(t),der=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(gL.$$.fragment,_a),cer=i(_a),Pue=n(_a,"P",{});var Fpt=s(Pue);fer=r(Fpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Fpt.forEach(t),mer=i(_a),Qa=n(_a,"P",{});var OA=s(Qa);ger=r(OA,"The model class to instantiate is selected based on the "),Iue=n(OA,"CODE",{});var Tpt=s(Iue);her=r(Tpt,"model_type"),Tpt.forEach(t),per=r(OA,` property of the config object (either
passed as an argument or loaded from `),que=n(OA,"CODE",{});var Mpt=s(que);uer=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),_er=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(OA,"CODE",{});var Ept=s(Nue);ber=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),ver=r(OA,":"),OA.forEach(t),Fer=i(_a),Cd=n(_a,"UL",{});var KK=s(Cd);Kv=n(KK,"LI",{});var a$e=s(Kv);jue=n(a$e,"STRONG",{});var Cpt=s(jue);Ter=r(Cpt,"deit"),Cpt.forEach(t),Mer=r(a$e," \u2014 "),qX=n(a$e,"A",{href:!0});var wpt=s(qX);Eer=r(wpt,"DeiTForMaskedImageModeling"),wpt.forEach(t),Cer=r(a$e," (DeiT model)"),a$e.forEach(t),wer=i(KK),Zv=n(KK,"LI",{});var n$e=s(Zv);Due=n(n$e,"STRONG",{});var Apt=s(Due);Aer=r(Apt,"swin"),Apt.forEach(t),yer=r(n$e," \u2014 "),NX=n(n$e,"A",{href:!0});var ypt=s(NX);Ler=r(ypt,"SwinForMaskedImageModeling"),ypt.forEach(t),xer=r(n$e," (Swin model)"),n$e.forEach(t),$er=i(KK),eF=n(KK,"LI",{});var s$e=s(eF);Gue=n(s$e,"STRONG",{});var Lpt=s(Gue);ker=r(Lpt,"vit"),Lpt.forEach(t),Ser=r(s$e," \u2014 "),jX=n(s$e,"A",{href:!0});var xpt=s(jX);Rer=r(xpt,"ViTForMaskedImageModeling"),xpt.forEach(t),Ber=r(s$e," (ViT model)"),s$e.forEach(t),KK.forEach(t),Per=i(_a),oF=n(_a,"P",{});var l$e=s(oF);Ier=r(l$e,"The model is set in evaluation mode by default using "),Oue=n(l$e,"CODE",{});var $pt=s(Oue);qer=r($pt,"model.eval()"),$pt.forEach(t),Ner=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(l$e,"CODE",{});var kpt=s(Vue);jer=r(kpt,"model.train()"),kpt.forEach(t),l$e.forEach(t),Der=i(_a),T(rF.$$.fragment,_a),_a.forEach(t),al.forEach(t),KIe=i(f),wd=n(f,"H2",{class:!0});var tje=s(wd);tF=n(tje,"A",{id:!0,class:!0,href:!0});var Spt=s(tF);Xue=n(Spt,"SPAN",{});var Rpt=s(Xue);T(hL.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),Ger=i(tje),zue=n(tje,"SPAN",{});var Bpt=s(zue);Oer=r(Bpt,"AutoModelForObjectDetection"),Bpt.forEach(t),tje.forEach(t),ZIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(pL.$$.fragment,nl),Ver=i(nl),Ad=n(nl,"P",{});var ZK=s(Ad);Xer=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DX=n(ZK,"A",{href:!0});var Ppt=s(DX);zer=r(Ppt,"from_pretrained()"),Ppt.forEach(t),Qer=r(ZK," class method or the "),GX=n(ZK,"A",{href:!0});var Ipt=s(GX);Wer=r(Ipt,"from_config()"),Ipt.forEach(t),Her=r(ZK,` class
method.`),ZK.forEach(t),Uer=i(nl),uL=n(nl,"P",{});var aje=s(uL);Jer=r(aje,"This class cannot be instantiated directly using "),Que=n(aje,"CODE",{});var qpt=s(Que);Yer=r(qpt,"__init__()"),qpt.forEach(t),Ker=r(aje," (throws an error)."),aje.forEach(t),Zer=i(nl),Tt=n(nl,"DIV",{class:!0});var VA=s(Tt);T(_L.$$.fragment,VA),eor=i(VA),Wue=n(VA,"P",{});var Npt=s(Wue);oor=r(Npt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Npt.forEach(t),ror=i(VA),yd=n(VA,"P",{});var eZ=s(yd);tor=r(eZ,`Note:
Loading a model from its configuration file does `),Hue=n(eZ,"STRONG",{});var jpt=s(Hue);aor=r(jpt,"not"),jpt.forEach(t),nor=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(eZ,"A",{href:!0});var Dpt=s(OX);sor=r(Dpt,"from_pretrained()"),Dpt.forEach(t),lor=r(eZ," to load the model weights."),eZ.forEach(t),ior=i(VA),T(aF.$$.fragment,VA),VA.forEach(t),dor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(bL.$$.fragment,ba),cor=i(ba),Uue=n(ba,"P",{});var Gpt=s(Uue);mor=r(Gpt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Gpt.forEach(t),gor=i(ba),Wa=n(ba,"P",{});var XA=s(Wa);hor=r(XA,"The model class to instantiate is selected based on the "),Jue=n(XA,"CODE",{});var Opt=s(Jue);por=r(Opt,"model_type"),Opt.forEach(t),uor=r(XA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(XA,"CODE",{});var Vpt=s(Yue);_or=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),bor=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(XA,"CODE",{});var Xpt=s(Kue);vor=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),For=r(XA,":"),XA.forEach(t),Tor=i(ba),vL=n(ba,"UL",{});var nje=s(vL);nF=n(nje,"LI",{});var i$e=s(nF);Zue=n(i$e,"STRONG",{});var zpt=s(Zue);Mor=r(zpt,"detr"),zpt.forEach(t),Eor=r(i$e," \u2014 "),VX=n(i$e,"A",{href:!0});var Qpt=s(VX);Cor=r(Qpt,"DetrForObjectDetection"),Qpt.forEach(t),wor=r(i$e," (DETR model)"),i$e.forEach(t),Aor=i(nje),sF=n(nje,"LI",{});var d$e=s(sF);e_e=n(d$e,"STRONG",{});var Wpt=s(e_e);yor=r(Wpt,"yolos"),Wpt.forEach(t),Lor=r(d$e," \u2014 "),XX=n(d$e,"A",{href:!0});var Hpt=s(XX);xor=r(Hpt,"YolosForObjectDetection"),Hpt.forEach(t),$or=r(d$e," (YOLOS model)"),d$e.forEach(t),nje.forEach(t),kor=i(ba),lF=n(ba,"P",{});var c$e=s(lF);Sor=r(c$e,"The model is set in evaluation mode by default using "),o_e=n(c$e,"CODE",{});var Upt=s(o_e);Ror=r(Upt,"model.eval()"),Upt.forEach(t),Bor=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r_e=n(c$e,"CODE",{});var Jpt=s(r_e);Por=r(Jpt,"model.train()"),Jpt.forEach(t),c$e.forEach(t),Ior=i(ba),T(iF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),eqe=i(f),Ld=n(f,"H2",{class:!0});var sje=s(Ld);dF=n(sje,"A",{id:!0,class:!0,href:!0});var Ypt=s(dF);t_e=n(Ypt,"SPAN",{});var Kpt=s(t_e);T(FL.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),qor=i(sje),a_e=n(sje,"SPAN",{});var Zpt=s(a_e);Nor=r(Zpt,"AutoModelForImageSegmentation"),Zpt.forEach(t),sje.forEach(t),oqe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(TL.$$.fragment,sl),jor=i(sl),xd=n(sl,"P",{});var oZ=s(xd);Dor=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zX=n(oZ,"A",{href:!0});var eut=s(zX);Gor=r(eut,"from_pretrained()"),eut.forEach(t),Oor=r(oZ," class method or the "),QX=n(oZ,"A",{href:!0});var out=s(QX);Vor=r(out,"from_config()"),out.forEach(t),Xor=r(oZ,` class
method.`),oZ.forEach(t),zor=i(sl),ML=n(sl,"P",{});var lje=s(ML);Qor=r(lje,"This class cannot be instantiated directly using "),n_e=n(lje,"CODE",{});var rut=s(n_e);Wor=r(rut,"__init__()"),rut.forEach(t),Hor=r(lje," (throws an error)."),lje.forEach(t),Uor=i(sl),Mt=n(sl,"DIV",{class:!0});var zA=s(Mt);T(EL.$$.fragment,zA),Jor=i(zA),s_e=n(zA,"P",{});var tut=s(s_e);Yor=r(tut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),tut.forEach(t),Kor=i(zA),$d=n(zA,"P",{});var rZ=s($d);Zor=r(rZ,`Note:
Loading a model from its configuration file does `),l_e=n(rZ,"STRONG",{});var aut=s(l_e);err=r(aut,"not"),aut.forEach(t),orr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(rZ,"A",{href:!0});var nut=s(WX);rrr=r(nut,"from_pretrained()"),nut.forEach(t),trr=r(rZ," to load the model weights."),rZ.forEach(t),arr=i(zA),T(cF.$$.fragment,zA),zA.forEach(t),nrr=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(CL.$$.fragment,va),srr=i(va),i_e=n(va,"P",{});var sut=s(i_e);lrr=r(sut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sut.forEach(t),irr=i(va),Ha=n(va,"P",{});var QA=s(Ha);drr=r(QA,"The model class to instantiate is selected based on the "),d_e=n(QA,"CODE",{});var lut=s(d_e);crr=r(lut,"model_type"),lut.forEach(t),frr=r(QA,` property of the config object (either
passed as an argument or loaded from `),c_e=n(QA,"CODE",{});var iut=s(c_e);mrr=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),grr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=n(QA,"CODE",{});var dut=s(f_e);hrr=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),prr=r(QA,":"),QA.forEach(t),urr=i(va),m_e=n(va,"UL",{});var cut=s(m_e);fF=n(cut,"LI",{});var f$e=s(fF);g_e=n(f$e,"STRONG",{});var fut=s(g_e);_rr=r(fut,"detr"),fut.forEach(t),brr=r(f$e," \u2014 "),HX=n(f$e,"A",{href:!0});var mut=s(HX);vrr=r(mut,"DetrForSegmentation"),mut.forEach(t),Frr=r(f$e," (DETR model)"),f$e.forEach(t),cut.forEach(t),Trr=i(va),mF=n(va,"P",{});var m$e=s(mF);Mrr=r(m$e,"The model is set in evaluation mode by default using "),h_e=n(m$e,"CODE",{});var gut=s(h_e);Err=r(gut,"model.eval()"),gut.forEach(t),Crr=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(m$e,"CODE",{});var hut=s(p_e);wrr=r(hut,"model.train()"),hut.forEach(t),m$e.forEach(t),Arr=i(va),T(gF.$$.fragment,va),va.forEach(t),sl.forEach(t),rqe=i(f),kd=n(f,"H2",{class:!0});var ije=s(kd);hF=n(ije,"A",{id:!0,class:!0,href:!0});var put=s(hF);u_e=n(put,"SPAN",{});var uut=s(u_e);T(wL.$$.fragment,uut),uut.forEach(t),put.forEach(t),yrr=i(ije),__e=n(ije,"SPAN",{});var _ut=s(__e);Lrr=r(_ut,"AutoModelForSemanticSegmentation"),_ut.forEach(t),ije.forEach(t),tqe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(AL.$$.fragment,ll),xrr=i(ll),Sd=n(ll,"P",{});var tZ=s(Sd);$rr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UX=n(tZ,"A",{href:!0});var but=s(UX);krr=r(but,"from_pretrained()"),but.forEach(t),Srr=r(tZ," class method or the "),JX=n(tZ,"A",{href:!0});var vut=s(JX);Rrr=r(vut,"from_config()"),vut.forEach(t),Brr=r(tZ,` class
method.`),tZ.forEach(t),Prr=i(ll),yL=n(ll,"P",{});var dje=s(yL);Irr=r(dje,"This class cannot be instantiated directly using "),b_e=n(dje,"CODE",{});var Fut=s(b_e);qrr=r(Fut,"__init__()"),Fut.forEach(t),Nrr=r(dje," (throws an error)."),dje.forEach(t),jrr=i(ll),Et=n(ll,"DIV",{class:!0});var WA=s(Et);T(LL.$$.fragment,WA),Drr=i(WA),v_e=n(WA,"P",{});var Tut=s(v_e);Grr=r(Tut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tut.forEach(t),Orr=i(WA),Rd=n(WA,"P",{});var aZ=s(Rd);Vrr=r(aZ,`Note:
Loading a model from its configuration file does `),F_e=n(aZ,"STRONG",{});var Mut=s(F_e);Xrr=r(Mut,"not"),Mut.forEach(t),zrr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(aZ,"A",{href:!0});var Eut=s(YX);Qrr=r(Eut,"from_pretrained()"),Eut.forEach(t),Wrr=r(aZ," to load the model weights."),aZ.forEach(t),Hrr=i(WA),T(pF.$$.fragment,WA),WA.forEach(t),Urr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(xL.$$.fragment,Fa),Jrr=i(Fa),T_e=n(Fa,"P",{});var Cut=s(T_e);Yrr=r(Cut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Cut.forEach(t),Krr=i(Fa),Ua=n(Fa,"P",{});var HA=s(Ua);Zrr=r(HA,"The model class to instantiate is selected based on the "),M_e=n(HA,"CODE",{});var wut=s(M_e);etr=r(wut,"model_type"),wut.forEach(t),otr=r(HA,` property of the config object (either
passed as an argument or loaded from `),E_e=n(HA,"CODE",{});var Aut=s(E_e);rtr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),ttr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(HA,"CODE",{});var yut=s(C_e);atr=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),ntr=r(HA,":"),HA.forEach(t),str=i(Fa),Ja=n(Fa,"UL",{});var UA=s(Ja);uF=n(UA,"LI",{});var g$e=s(uF);w_e=n(g$e,"STRONG",{});var Lut=s(w_e);ltr=r(Lut,"beit"),Lut.forEach(t),itr=r(g$e," \u2014 "),KX=n(g$e,"A",{href:!0});var xut=s(KX);dtr=r(xut,"BeitForSemanticSegmentation"),xut.forEach(t),ctr=r(g$e," (BEiT model)"),g$e.forEach(t),ftr=i(UA),_F=n(UA,"LI",{});var h$e=s(_F);A_e=n(h$e,"STRONG",{});var $ut=s(A_e);mtr=r($ut,"data2vec-vision"),$ut.forEach(t),gtr=r(h$e," \u2014 "),ZX=n(h$e,"A",{href:!0});var kut=s(ZX);htr=r(kut,"Data2VecVisionForSemanticSegmentation"),kut.forEach(t),ptr=r(h$e," (Data2VecVision model)"),h$e.forEach(t),utr=i(UA),bF=n(UA,"LI",{});var p$e=s(bF);y_e=n(p$e,"STRONG",{});var Sut=s(y_e);_tr=r(Sut,"dpt"),Sut.forEach(t),btr=r(p$e," \u2014 "),ez=n(p$e,"A",{href:!0});var Rut=s(ez);vtr=r(Rut,"DPTForSemanticSegmentation"),Rut.forEach(t),Ftr=r(p$e," (DPT model)"),p$e.forEach(t),Ttr=i(UA),vF=n(UA,"LI",{});var u$e=s(vF);L_e=n(u$e,"STRONG",{});var But=s(L_e);Mtr=r(But,"segformer"),But.forEach(t),Etr=r(u$e," \u2014 "),oz=n(u$e,"A",{href:!0});var Put=s(oz);Ctr=r(Put,"SegformerForSemanticSegmentation"),Put.forEach(t),wtr=r(u$e," (SegFormer model)"),u$e.forEach(t),UA.forEach(t),Atr=i(Fa),FF=n(Fa,"P",{});var _$e=s(FF);ytr=r(_$e,"The model is set in evaluation mode by default using "),x_e=n(_$e,"CODE",{});var Iut=s(x_e);Ltr=r(Iut,"model.eval()"),Iut.forEach(t),xtr=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(_$e,"CODE",{});var qut=s($_e);$tr=r(qut,"model.train()"),qut.forEach(t),_$e.forEach(t),ktr=i(Fa),T(TF.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),aqe=i(f),Bd=n(f,"H2",{class:!0});var cje=s(Bd);MF=n(cje,"A",{id:!0,class:!0,href:!0});var Nut=s(MF);k_e=n(Nut,"SPAN",{});var jut=s(k_e);T($L.$$.fragment,jut),jut.forEach(t),Nut.forEach(t),Str=i(cje),S_e=n(cje,"SPAN",{});var Dut=s(S_e);Rtr=r(Dut,"AutoModelForInstanceSegmentation"),Dut.forEach(t),cje.forEach(t),nqe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(kL.$$.fragment,il),Btr=i(il),Pd=n(il,"P",{});var nZ=s(Pd);Ptr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rz=n(nZ,"A",{href:!0});var Gut=s(rz);Itr=r(Gut,"from_pretrained()"),Gut.forEach(t),qtr=r(nZ," class method or the "),tz=n(nZ,"A",{href:!0});var Out=s(tz);Ntr=r(Out,"from_config()"),Out.forEach(t),jtr=r(nZ,` class
method.`),nZ.forEach(t),Dtr=i(il),SL=n(il,"P",{});var fje=s(SL);Gtr=r(fje,"This class cannot be instantiated directly using "),R_e=n(fje,"CODE",{});var Vut=s(R_e);Otr=r(Vut,"__init__()"),Vut.forEach(t),Vtr=r(fje," (throws an error)."),fje.forEach(t),Xtr=i(il),Ct=n(il,"DIV",{class:!0});var JA=s(Ct);T(RL.$$.fragment,JA),ztr=i(JA),B_e=n(JA,"P",{});var Xut=s(B_e);Qtr=r(Xut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xut.forEach(t),Wtr=i(JA),Id=n(JA,"P",{});var sZ=s(Id);Htr=r(sZ,`Note:
Loading a model from its configuration file does `),P_e=n(sZ,"STRONG",{});var zut=s(P_e);Utr=r(zut,"not"),zut.forEach(t),Jtr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(sZ,"A",{href:!0});var Qut=s(az);Ytr=r(Qut,"from_pretrained()"),Qut.forEach(t),Ktr=r(sZ," to load the model weights."),sZ.forEach(t),Ztr=i(JA),T(EF.$$.fragment,JA),JA.forEach(t),ear=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(BL.$$.fragment,Ta),oar=i(Ta),I_e=n(Ta,"P",{});var Wut=s(I_e);rar=r(Wut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wut.forEach(t),tar=i(Ta),Ya=n(Ta,"P",{});var YA=s(Ya);aar=r(YA,"The model class to instantiate is selected based on the "),q_e=n(YA,"CODE",{});var Hut=s(q_e);nar=r(Hut,"model_type"),Hut.forEach(t),sar=r(YA,` property of the config object (either
passed as an argument or loaded from `),N_e=n(YA,"CODE",{});var Uut=s(N_e);lar=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),iar=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(YA,"CODE",{});var Jut=s(j_e);dar=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),car=r(YA,":"),YA.forEach(t),far=i(Ta),D_e=n(Ta,"UL",{});var Yut=s(D_e);CF=n(Yut,"LI",{});var b$e=s(CF);G_e=n(b$e,"STRONG",{});var Kut=s(G_e);mar=r(Kut,"maskformer"),Kut.forEach(t),gar=r(b$e," \u2014 "),nz=n(b$e,"A",{href:!0});var Zut=s(nz);har=r(Zut,"MaskFormerForInstanceSegmentation"),Zut.forEach(t),par=r(b$e," (MaskFormer model)"),b$e.forEach(t),Yut.forEach(t),uar=i(Ta),wF=n(Ta,"P",{});var v$e=s(wF);_ar=r(v$e,"The model is set in evaluation mode by default using "),O_e=n(v$e,"CODE",{});var e_t=s(O_e);bar=r(e_t,"model.eval()"),e_t.forEach(t),Far=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(v$e,"CODE",{});var o_t=s(V_e);Tar=r(o_t,"model.train()"),o_t.forEach(t),v$e.forEach(t),Mar=i(Ta),T(AF.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),sqe=i(f),qd=n(f,"H2",{class:!0});var mje=s(qd);yF=n(mje,"A",{id:!0,class:!0,href:!0});var r_t=s(yF);X_e=n(r_t,"SPAN",{});var t_t=s(X_e);T(PL.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),Ear=i(mje),z_e=n(mje,"SPAN",{});var a_t=s(z_e);Car=r(a_t,"TFAutoModel"),a_t.forEach(t),mje.forEach(t),lqe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(IL.$$.fragment,dl),war=i(dl),Nd=n(dl,"P",{});var lZ=s(Nd);Aar=r(lZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sz=n(lZ,"A",{href:!0});var n_t=s(sz);yar=r(n_t,"from_pretrained()"),n_t.forEach(t),Lar=r(lZ," class method or the "),lz=n(lZ,"A",{href:!0});var s_t=s(lz);xar=r(s_t,"from_config()"),s_t.forEach(t),$ar=r(lZ,` class
method.`),lZ.forEach(t),kar=i(dl),qL=n(dl,"P",{});var gje=s(qL);Sar=r(gje,"This class cannot be instantiated directly using "),Q_e=n(gje,"CODE",{});var l_t=s(Q_e);Rar=r(l_t,"__init__()"),l_t.forEach(t),Bar=r(gje," (throws an error)."),gje.forEach(t),Par=i(dl),wt=n(dl,"DIV",{class:!0});var KA=s(wt);T(NL.$$.fragment,KA),Iar=i(KA),W_e=n(KA,"P",{});var i_t=s(W_e);qar=r(i_t,"Instantiates one of the base model classes of the library from a configuration."),i_t.forEach(t),Nar=i(KA),jd=n(KA,"P",{});var iZ=s(jd);jar=r(iZ,`Note:
Loading a model from its configuration file does `),H_e=n(iZ,"STRONG",{});var d_t=s(H_e);Dar=r(d_t,"not"),d_t.forEach(t),Gar=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(iZ,"A",{href:!0});var c_t=s(iz);Oar=r(c_t,"from_pretrained()"),c_t.forEach(t),Var=r(iZ," to load the model weights."),iZ.forEach(t),Xar=i(KA),T(LF.$$.fragment,KA),KA.forEach(t),zar=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(jL.$$.fragment,cl),Qar=i(cl),U_e=n(cl,"P",{});var f_t=s(U_e);War=r(f_t,"Instantiate one of the base model classes of the library from a pretrained model."),f_t.forEach(t),Har=i(cl),Ka=n(cl,"P",{});var ZA=s(Ka);Uar=r(ZA,"The model class to instantiate is selected based on the "),J_e=n(ZA,"CODE",{});var m_t=s(J_e);Jar=r(m_t,"model_type"),m_t.forEach(t),Yar=r(ZA,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(ZA,"CODE",{});var g_t=s(Y_e);Kar=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),Zar=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(ZA,"CODE",{});var h_t=s(K_e);enr=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),onr=r(ZA,":"),ZA.forEach(t),rnr=i(cl),j=n(cl,"UL",{});var D=s(j);xF=n(D,"LI",{});var F$e=s(xF);Z_e=n(F$e,"STRONG",{});var p_t=s(Z_e);tnr=r(p_t,"albert"),p_t.forEach(t),anr=r(F$e," \u2014 "),dz=n(F$e,"A",{href:!0});var u_t=s(dz);nnr=r(u_t,"TFAlbertModel"),u_t.forEach(t),snr=r(F$e," (ALBERT model)"),F$e.forEach(t),lnr=i(D),$F=n(D,"LI",{});var T$e=s($F);e2e=n(T$e,"STRONG",{});var __t=s(e2e);inr=r(__t,"bart"),__t.forEach(t),dnr=r(T$e," \u2014 "),cz=n(T$e,"A",{href:!0});var b_t=s(cz);cnr=r(b_t,"TFBartModel"),b_t.forEach(t),fnr=r(T$e," (BART model)"),T$e.forEach(t),mnr=i(D),kF=n(D,"LI",{});var M$e=s(kF);o2e=n(M$e,"STRONG",{});var v_t=s(o2e);gnr=r(v_t,"bert"),v_t.forEach(t),hnr=r(M$e," \u2014 "),fz=n(M$e,"A",{href:!0});var F_t=s(fz);pnr=r(F_t,"TFBertModel"),F_t.forEach(t),unr=r(M$e," (BERT model)"),M$e.forEach(t),_nr=i(D),SF=n(D,"LI",{});var E$e=s(SF);r2e=n(E$e,"STRONG",{});var T_t=s(r2e);bnr=r(T_t,"blenderbot"),T_t.forEach(t),vnr=r(E$e," \u2014 "),mz=n(E$e,"A",{href:!0});var M_t=s(mz);Fnr=r(M_t,"TFBlenderbotModel"),M_t.forEach(t),Tnr=r(E$e," (Blenderbot model)"),E$e.forEach(t),Mnr=i(D),RF=n(D,"LI",{});var C$e=s(RF);t2e=n(C$e,"STRONG",{});var E_t=s(t2e);Enr=r(E_t,"blenderbot-small"),E_t.forEach(t),Cnr=r(C$e," \u2014 "),gz=n(C$e,"A",{href:!0});var C_t=s(gz);wnr=r(C_t,"TFBlenderbotSmallModel"),C_t.forEach(t),Anr=r(C$e," (BlenderbotSmall model)"),C$e.forEach(t),ynr=i(D),BF=n(D,"LI",{});var w$e=s(BF);a2e=n(w$e,"STRONG",{});var w_t=s(a2e);Lnr=r(w_t,"camembert"),w_t.forEach(t),xnr=r(w$e," \u2014 "),hz=n(w$e,"A",{href:!0});var A_t=s(hz);$nr=r(A_t,"TFCamembertModel"),A_t.forEach(t),knr=r(w$e," (CamemBERT model)"),w$e.forEach(t),Snr=i(D),PF=n(D,"LI",{});var A$e=s(PF);n2e=n(A$e,"STRONG",{});var y_t=s(n2e);Rnr=r(y_t,"clip"),y_t.forEach(t),Bnr=r(A$e," \u2014 "),pz=n(A$e,"A",{href:!0});var L_t=s(pz);Pnr=r(L_t,"TFCLIPModel"),L_t.forEach(t),Inr=r(A$e," (CLIP model)"),A$e.forEach(t),qnr=i(D),IF=n(D,"LI",{});var y$e=s(IF);s2e=n(y$e,"STRONG",{});var x_t=s(s2e);Nnr=r(x_t,"convbert"),x_t.forEach(t),jnr=r(y$e," \u2014 "),uz=n(y$e,"A",{href:!0});var $_t=s(uz);Dnr=r($_t,"TFConvBertModel"),$_t.forEach(t),Gnr=r(y$e," (ConvBERT model)"),y$e.forEach(t),Onr=i(D),qF=n(D,"LI",{});var L$e=s(qF);l2e=n(L$e,"STRONG",{});var k_t=s(l2e);Vnr=r(k_t,"convnext"),k_t.forEach(t),Xnr=r(L$e," \u2014 "),_z=n(L$e,"A",{href:!0});var S_t=s(_z);znr=r(S_t,"TFConvNextModel"),S_t.forEach(t),Qnr=r(L$e," (ConvNext model)"),L$e.forEach(t),Wnr=i(D),NF=n(D,"LI",{});var x$e=s(NF);i2e=n(x$e,"STRONG",{});var R_t=s(i2e);Hnr=r(R_t,"ctrl"),R_t.forEach(t),Unr=r(x$e," \u2014 "),bz=n(x$e,"A",{href:!0});var B_t=s(bz);Jnr=r(B_t,"TFCTRLModel"),B_t.forEach(t),Ynr=r(x$e," (CTRL model)"),x$e.forEach(t),Knr=i(D),jF=n(D,"LI",{});var $$e=s(jF);d2e=n($$e,"STRONG",{});var P_t=s(d2e);Znr=r(P_t,"data2vec-vision"),P_t.forEach(t),esr=r($$e," \u2014 "),vz=n($$e,"A",{href:!0});var I_t=s(vz);osr=r(I_t,"TFData2VecVisionModel"),I_t.forEach(t),rsr=r($$e," (Data2VecVision model)"),$$e.forEach(t),tsr=i(D),DF=n(D,"LI",{});var k$e=s(DF);c2e=n(k$e,"STRONG",{});var q_t=s(c2e);asr=r(q_t,"deberta"),q_t.forEach(t),nsr=r(k$e," \u2014 "),Fz=n(k$e,"A",{href:!0});var N_t=s(Fz);ssr=r(N_t,"TFDebertaModel"),N_t.forEach(t),lsr=r(k$e," (DeBERTa model)"),k$e.forEach(t),isr=i(D),GF=n(D,"LI",{});var S$e=s(GF);f2e=n(S$e,"STRONG",{});var j_t=s(f2e);dsr=r(j_t,"deberta-v2"),j_t.forEach(t),csr=r(S$e," \u2014 "),Tz=n(S$e,"A",{href:!0});var D_t=s(Tz);fsr=r(D_t,"TFDebertaV2Model"),D_t.forEach(t),msr=r(S$e," (DeBERTa-v2 model)"),S$e.forEach(t),gsr=i(D),OF=n(D,"LI",{});var R$e=s(OF);m2e=n(R$e,"STRONG",{});var G_t=s(m2e);hsr=r(G_t,"distilbert"),G_t.forEach(t),psr=r(R$e," \u2014 "),Mz=n(R$e,"A",{href:!0});var O_t=s(Mz);usr=r(O_t,"TFDistilBertModel"),O_t.forEach(t),_sr=r(R$e," (DistilBERT model)"),R$e.forEach(t),bsr=i(D),VF=n(D,"LI",{});var B$e=s(VF);g2e=n(B$e,"STRONG",{});var V_t=s(g2e);vsr=r(V_t,"dpr"),V_t.forEach(t),Fsr=r(B$e," \u2014 "),Ez=n(B$e,"A",{href:!0});var X_t=s(Ez);Tsr=r(X_t,"TFDPRQuestionEncoder"),X_t.forEach(t),Msr=r(B$e," (DPR model)"),B$e.forEach(t),Esr=i(D),XF=n(D,"LI",{});var P$e=s(XF);h2e=n(P$e,"STRONG",{});var z_t=s(h2e);Csr=r(z_t,"electra"),z_t.forEach(t),wsr=r(P$e," \u2014 "),Cz=n(P$e,"A",{href:!0});var Q_t=s(Cz);Asr=r(Q_t,"TFElectraModel"),Q_t.forEach(t),ysr=r(P$e," (ELECTRA model)"),P$e.forEach(t),Lsr=i(D),zF=n(D,"LI",{});var I$e=s(zF);p2e=n(I$e,"STRONG",{});var W_t=s(p2e);xsr=r(W_t,"flaubert"),W_t.forEach(t),$sr=r(I$e," \u2014 "),wz=n(I$e,"A",{href:!0});var H_t=s(wz);ksr=r(H_t,"TFFlaubertModel"),H_t.forEach(t),Ssr=r(I$e," (FlauBERT model)"),I$e.forEach(t),Rsr=i(D),Bs=n(D,"LI",{});var u$=s(Bs);u2e=n(u$,"STRONG",{});var U_t=s(u2e);Bsr=r(U_t,"funnel"),U_t.forEach(t),Psr=r(u$," \u2014 "),Az=n(u$,"A",{href:!0});var J_t=s(Az);Isr=r(J_t,"TFFunnelModel"),J_t.forEach(t),qsr=r(u$," or "),yz=n(u$,"A",{href:!0});var Y_t=s(yz);Nsr=r(Y_t,"TFFunnelBaseModel"),Y_t.forEach(t),jsr=r(u$," (Funnel Transformer model)"),u$.forEach(t),Dsr=i(D),QF=n(D,"LI",{});var q$e=s(QF);_2e=n(q$e,"STRONG",{});var K_t=s(_2e);Gsr=r(K_t,"gpt2"),K_t.forEach(t),Osr=r(q$e," \u2014 "),Lz=n(q$e,"A",{href:!0});var Z_t=s(Lz);Vsr=r(Z_t,"TFGPT2Model"),Z_t.forEach(t),Xsr=r(q$e," (OpenAI GPT-2 model)"),q$e.forEach(t),zsr=i(D),WF=n(D,"LI",{});var N$e=s(WF);b2e=n(N$e,"STRONG",{});var e2t=s(b2e);Qsr=r(e2t,"gptj"),e2t.forEach(t),Wsr=r(N$e," \u2014 "),xz=n(N$e,"A",{href:!0});var o2t=s(xz);Hsr=r(o2t,"TFGPTJModel"),o2t.forEach(t),Usr=r(N$e," (GPT-J model)"),N$e.forEach(t),Jsr=i(D),HF=n(D,"LI",{});var j$e=s(HF);v2e=n(j$e,"STRONG",{});var r2t=s(v2e);Ysr=r(r2t,"hubert"),r2t.forEach(t),Ksr=r(j$e," \u2014 "),$z=n(j$e,"A",{href:!0});var t2t=s($z);Zsr=r(t2t,"TFHubertModel"),t2t.forEach(t),elr=r(j$e," (Hubert model)"),j$e.forEach(t),olr=i(D),UF=n(D,"LI",{});var D$e=s(UF);F2e=n(D$e,"STRONG",{});var a2t=s(F2e);rlr=r(a2t,"layoutlm"),a2t.forEach(t),tlr=r(D$e," \u2014 "),kz=n(D$e,"A",{href:!0});var n2t=s(kz);alr=r(n2t,"TFLayoutLMModel"),n2t.forEach(t),nlr=r(D$e," (LayoutLM model)"),D$e.forEach(t),slr=i(D),JF=n(D,"LI",{});var G$e=s(JF);T2e=n(G$e,"STRONG",{});var s2t=s(T2e);llr=r(s2t,"led"),s2t.forEach(t),ilr=r(G$e," \u2014 "),Sz=n(G$e,"A",{href:!0});var l2t=s(Sz);dlr=r(l2t,"TFLEDModel"),l2t.forEach(t),clr=r(G$e," (LED model)"),G$e.forEach(t),flr=i(D),YF=n(D,"LI",{});var O$e=s(YF);M2e=n(O$e,"STRONG",{});var i2t=s(M2e);mlr=r(i2t,"longformer"),i2t.forEach(t),glr=r(O$e," \u2014 "),Rz=n(O$e,"A",{href:!0});var d2t=s(Rz);hlr=r(d2t,"TFLongformerModel"),d2t.forEach(t),plr=r(O$e," (Longformer model)"),O$e.forEach(t),ulr=i(D),KF=n(D,"LI",{});var V$e=s(KF);E2e=n(V$e,"STRONG",{});var c2t=s(E2e);_lr=r(c2t,"lxmert"),c2t.forEach(t),blr=r(V$e," \u2014 "),Bz=n(V$e,"A",{href:!0});var f2t=s(Bz);vlr=r(f2t,"TFLxmertModel"),f2t.forEach(t),Flr=r(V$e," (LXMERT model)"),V$e.forEach(t),Tlr=i(D),ZF=n(D,"LI",{});var X$e=s(ZF);C2e=n(X$e,"STRONG",{});var m2t=s(C2e);Mlr=r(m2t,"marian"),m2t.forEach(t),Elr=r(X$e," \u2014 "),Pz=n(X$e,"A",{href:!0});var g2t=s(Pz);Clr=r(g2t,"TFMarianModel"),g2t.forEach(t),wlr=r(X$e," (Marian model)"),X$e.forEach(t),Alr=i(D),eT=n(D,"LI",{});var z$e=s(eT);w2e=n(z$e,"STRONG",{});var h2t=s(w2e);ylr=r(h2t,"mbart"),h2t.forEach(t),Llr=r(z$e," \u2014 "),Iz=n(z$e,"A",{href:!0});var p2t=s(Iz);xlr=r(p2t,"TFMBartModel"),p2t.forEach(t),$lr=r(z$e," (mBART model)"),z$e.forEach(t),klr=i(D),oT=n(D,"LI",{});var Q$e=s(oT);A2e=n(Q$e,"STRONG",{});var u2t=s(A2e);Slr=r(u2t,"mobilebert"),u2t.forEach(t),Rlr=r(Q$e," \u2014 "),qz=n(Q$e,"A",{href:!0});var _2t=s(qz);Blr=r(_2t,"TFMobileBertModel"),_2t.forEach(t),Plr=r(Q$e," (MobileBERT model)"),Q$e.forEach(t),Ilr=i(D),rT=n(D,"LI",{});var W$e=s(rT);y2e=n(W$e,"STRONG",{});var b2t=s(y2e);qlr=r(b2t,"mpnet"),b2t.forEach(t),Nlr=r(W$e," \u2014 "),Nz=n(W$e,"A",{href:!0});var v2t=s(Nz);jlr=r(v2t,"TFMPNetModel"),v2t.forEach(t),Dlr=r(W$e," (MPNet model)"),W$e.forEach(t),Glr=i(D),tT=n(D,"LI",{});var H$e=s(tT);L2e=n(H$e,"STRONG",{});var F2t=s(L2e);Olr=r(F2t,"mt5"),F2t.forEach(t),Vlr=r(H$e," \u2014 "),jz=n(H$e,"A",{href:!0});var T2t=s(jz);Xlr=r(T2t,"TFMT5Model"),T2t.forEach(t),zlr=r(H$e," (mT5 model)"),H$e.forEach(t),Qlr=i(D),aT=n(D,"LI",{});var U$e=s(aT);x2e=n(U$e,"STRONG",{});var M2t=s(x2e);Wlr=r(M2t,"openai-gpt"),M2t.forEach(t),Hlr=r(U$e," \u2014 "),Dz=n(U$e,"A",{href:!0});var E2t=s(Dz);Ulr=r(E2t,"TFOpenAIGPTModel"),E2t.forEach(t),Jlr=r(U$e," (OpenAI GPT model)"),U$e.forEach(t),Ylr=i(D),nT=n(D,"LI",{});var J$e=s(nT);$2e=n(J$e,"STRONG",{});var C2t=s($2e);Klr=r(C2t,"pegasus"),C2t.forEach(t),Zlr=r(J$e," \u2014 "),Gz=n(J$e,"A",{href:!0});var w2t=s(Gz);eir=r(w2t,"TFPegasusModel"),w2t.forEach(t),oir=r(J$e," (Pegasus model)"),J$e.forEach(t),rir=i(D),sT=n(D,"LI",{});var Y$e=s(sT);k2e=n(Y$e,"STRONG",{});var A2t=s(k2e);tir=r(A2t,"rembert"),A2t.forEach(t),air=r(Y$e," \u2014 "),Oz=n(Y$e,"A",{href:!0});var y2t=s(Oz);nir=r(y2t,"TFRemBertModel"),y2t.forEach(t),sir=r(Y$e," (RemBERT model)"),Y$e.forEach(t),lir=i(D),lT=n(D,"LI",{});var K$e=s(lT);S2e=n(K$e,"STRONG",{});var L2t=s(S2e);iir=r(L2t,"roberta"),L2t.forEach(t),dir=r(K$e," \u2014 "),Vz=n(K$e,"A",{href:!0});var x2t=s(Vz);cir=r(x2t,"TFRobertaModel"),x2t.forEach(t),fir=r(K$e," (RoBERTa model)"),K$e.forEach(t),mir=i(D),iT=n(D,"LI",{});var Z$e=s(iT);R2e=n(Z$e,"STRONG",{});var $2t=s(R2e);gir=r($2t,"roformer"),$2t.forEach(t),hir=r(Z$e," \u2014 "),Xz=n(Z$e,"A",{href:!0});var k2t=s(Xz);pir=r(k2t,"TFRoFormerModel"),k2t.forEach(t),uir=r(Z$e," (RoFormer model)"),Z$e.forEach(t),_ir=i(D),dT=n(D,"LI",{});var eke=s(dT);B2e=n(eke,"STRONG",{});var S2t=s(B2e);bir=r(S2t,"speech_to_text"),S2t.forEach(t),vir=r(eke," \u2014 "),zz=n(eke,"A",{href:!0});var R2t=s(zz);Fir=r(R2t,"TFSpeech2TextModel"),R2t.forEach(t),Tir=r(eke," (Speech2Text model)"),eke.forEach(t),Mir=i(D),cT=n(D,"LI",{});var oke=s(cT);P2e=n(oke,"STRONG",{});var B2t=s(P2e);Eir=r(B2t,"t5"),B2t.forEach(t),Cir=r(oke," \u2014 "),Qz=n(oke,"A",{href:!0});var P2t=s(Qz);wir=r(P2t,"TFT5Model"),P2t.forEach(t),Air=r(oke," (T5 model)"),oke.forEach(t),yir=i(D),fT=n(D,"LI",{});var rke=s(fT);I2e=n(rke,"STRONG",{});var I2t=s(I2e);Lir=r(I2t,"tapas"),I2t.forEach(t),xir=r(rke," \u2014 "),Wz=n(rke,"A",{href:!0});var q2t=s(Wz);$ir=r(q2t,"TFTapasModel"),q2t.forEach(t),kir=r(rke," (TAPAS model)"),rke.forEach(t),Sir=i(D),mT=n(D,"LI",{});var tke=s(mT);q2e=n(tke,"STRONG",{});var N2t=s(q2e);Rir=r(N2t,"transfo-xl"),N2t.forEach(t),Bir=r(tke," \u2014 "),Hz=n(tke,"A",{href:!0});var j2t=s(Hz);Pir=r(j2t,"TFTransfoXLModel"),j2t.forEach(t),Iir=r(tke," (Transformer-XL model)"),tke.forEach(t),qir=i(D),gT=n(D,"LI",{});var ake=s(gT);N2e=n(ake,"STRONG",{});var D2t=s(N2e);Nir=r(D2t,"vit"),D2t.forEach(t),jir=r(ake," \u2014 "),Uz=n(ake,"A",{href:!0});var G2t=s(Uz);Dir=r(G2t,"TFViTModel"),G2t.forEach(t),Gir=r(ake," (ViT model)"),ake.forEach(t),Oir=i(D),hT=n(D,"LI",{});var nke=s(hT);j2e=n(nke,"STRONG",{});var O2t=s(j2e);Vir=r(O2t,"vit_mae"),O2t.forEach(t),Xir=r(nke," \u2014 "),Jz=n(nke,"A",{href:!0});var V2t=s(Jz);zir=r(V2t,"TFViTMAEModel"),V2t.forEach(t),Qir=r(nke," (ViTMAE model)"),nke.forEach(t),Wir=i(D),pT=n(D,"LI",{});var ske=s(pT);D2e=n(ske,"STRONG",{});var X2t=s(D2e);Hir=r(X2t,"wav2vec2"),X2t.forEach(t),Uir=r(ske," \u2014 "),Yz=n(ske,"A",{href:!0});var z2t=s(Yz);Jir=r(z2t,"TFWav2Vec2Model"),z2t.forEach(t),Yir=r(ske," (Wav2Vec2 model)"),ske.forEach(t),Kir=i(D),uT=n(D,"LI",{});var lke=s(uT);G2e=n(lke,"STRONG",{});var Q2t=s(G2e);Zir=r(Q2t,"xlm"),Q2t.forEach(t),edr=r(lke," \u2014 "),Kz=n(lke,"A",{href:!0});var W2t=s(Kz);odr=r(W2t,"TFXLMModel"),W2t.forEach(t),rdr=r(lke," (XLM model)"),lke.forEach(t),tdr=i(D),_T=n(D,"LI",{});var ike=s(_T);O2e=n(ike,"STRONG",{});var H2t=s(O2e);adr=r(H2t,"xlm-roberta"),H2t.forEach(t),ndr=r(ike," \u2014 "),Zz=n(ike,"A",{href:!0});var U2t=s(Zz);sdr=r(U2t,"TFXLMRobertaModel"),U2t.forEach(t),ldr=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),idr=i(D),bT=n(D,"LI",{});var dke=s(bT);V2e=n(dke,"STRONG",{});var J2t=s(V2e);ddr=r(J2t,"xlnet"),J2t.forEach(t),cdr=r(dke," \u2014 "),eQ=n(dke,"A",{href:!0});var Y2t=s(eQ);fdr=r(Y2t,"TFXLNetModel"),Y2t.forEach(t),mdr=r(dke," (XLNet model)"),dke.forEach(t),D.forEach(t),gdr=i(cl),T(vT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),iqe=i(f),Dd=n(f,"H2",{class:!0});var hje=s(Dd);FT=n(hje,"A",{id:!0,class:!0,href:!0});var K2t=s(FT);X2e=n(K2t,"SPAN",{});var Z2t=s(X2e);T(DL.$$.fragment,Z2t),Z2t.forEach(t),K2t.forEach(t),hdr=i(hje),z2e=n(hje,"SPAN",{});var e1t=s(z2e);pdr=r(e1t,"TFAutoModelForPreTraining"),e1t.forEach(t),hje.forEach(t),dqe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(GL.$$.fragment,fl),udr=i(fl),Gd=n(fl,"P",{});var dZ=s(Gd);_dr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=n(dZ,"A",{href:!0});var o1t=s(oQ);bdr=r(o1t,"from_pretrained()"),o1t.forEach(t),vdr=r(dZ," class method or the "),rQ=n(dZ,"A",{href:!0});var r1t=s(rQ);Fdr=r(r1t,"from_config()"),r1t.forEach(t),Tdr=r(dZ,` class
method.`),dZ.forEach(t),Mdr=i(fl),OL=n(fl,"P",{});var pje=s(OL);Edr=r(pje,"This class cannot be instantiated directly using "),Q2e=n(pje,"CODE",{});var t1t=s(Q2e);Cdr=r(t1t,"__init__()"),t1t.forEach(t),wdr=r(pje," (throws an error)."),pje.forEach(t),Adr=i(fl),At=n(fl,"DIV",{class:!0});var e6=s(At);T(VL.$$.fragment,e6),ydr=i(e6),W2e=n(e6,"P",{});var a1t=s(W2e);Ldr=r(a1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a1t.forEach(t),xdr=i(e6),Od=n(e6,"P",{});var cZ=s(Od);$dr=r(cZ,`Note:
Loading a model from its configuration file does `),H2e=n(cZ,"STRONG",{});var n1t=s(H2e);kdr=r(n1t,"not"),n1t.forEach(t),Sdr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(cZ,"A",{href:!0});var s1t=s(tQ);Rdr=r(s1t,"from_pretrained()"),s1t.forEach(t),Bdr=r(cZ," to load the model weights."),cZ.forEach(t),Pdr=i(e6),T(TT.$$.fragment,e6),e6.forEach(t),Idr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(XL.$$.fragment,ml),qdr=i(ml),U2e=n(ml,"P",{});var l1t=s(U2e);Ndr=r(l1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l1t.forEach(t),jdr=i(ml),Za=n(ml,"P",{});var o6=s(Za);Ddr=r(o6,"The model class to instantiate is selected based on the "),J2e=n(o6,"CODE",{});var i1t=s(J2e);Gdr=r(i1t,"model_type"),i1t.forEach(t),Odr=r(o6,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(o6,"CODE",{});var d1t=s(Y2e);Vdr=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),Xdr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(o6,"CODE",{});var c1t=s(K2e);zdr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Qdr=r(o6,":"),o6.forEach(t),Wdr=i(ml),se=n(ml,"UL",{});var le=s(se);MT=n(le,"LI",{});var cke=s(MT);Z2e=n(cke,"STRONG",{});var f1t=s(Z2e);Hdr=r(f1t,"albert"),f1t.forEach(t),Udr=r(cke," \u2014 "),aQ=n(cke,"A",{href:!0});var m1t=s(aQ);Jdr=r(m1t,"TFAlbertForPreTraining"),m1t.forEach(t),Ydr=r(cke," (ALBERT model)"),cke.forEach(t),Kdr=i(le),ET=n(le,"LI",{});var fke=s(ET);e1e=n(fke,"STRONG",{});var g1t=s(e1e);Zdr=r(g1t,"bart"),g1t.forEach(t),ecr=r(fke," \u2014 "),nQ=n(fke,"A",{href:!0});var h1t=s(nQ);ocr=r(h1t,"TFBartForConditionalGeneration"),h1t.forEach(t),rcr=r(fke," (BART model)"),fke.forEach(t),tcr=i(le),CT=n(le,"LI",{});var mke=s(CT);o1e=n(mke,"STRONG",{});var p1t=s(o1e);acr=r(p1t,"bert"),p1t.forEach(t),ncr=r(mke," \u2014 "),sQ=n(mke,"A",{href:!0});var u1t=s(sQ);scr=r(u1t,"TFBertForPreTraining"),u1t.forEach(t),lcr=r(mke," (BERT model)"),mke.forEach(t),icr=i(le),wT=n(le,"LI",{});var gke=s(wT);r1e=n(gke,"STRONG",{});var _1t=s(r1e);dcr=r(_1t,"camembert"),_1t.forEach(t),ccr=r(gke," \u2014 "),lQ=n(gke,"A",{href:!0});var b1t=s(lQ);fcr=r(b1t,"TFCamembertForMaskedLM"),b1t.forEach(t),mcr=r(gke," (CamemBERT model)"),gke.forEach(t),gcr=i(le),AT=n(le,"LI",{});var hke=s(AT);t1e=n(hke,"STRONG",{});var v1t=s(t1e);hcr=r(v1t,"ctrl"),v1t.forEach(t),pcr=r(hke," \u2014 "),iQ=n(hke,"A",{href:!0});var F1t=s(iQ);ucr=r(F1t,"TFCTRLLMHeadModel"),F1t.forEach(t),_cr=r(hke," (CTRL model)"),hke.forEach(t),bcr=i(le),yT=n(le,"LI",{});var pke=s(yT);a1e=n(pke,"STRONG",{});var T1t=s(a1e);vcr=r(T1t,"distilbert"),T1t.forEach(t),Fcr=r(pke," \u2014 "),dQ=n(pke,"A",{href:!0});var M1t=s(dQ);Tcr=r(M1t,"TFDistilBertForMaskedLM"),M1t.forEach(t),Mcr=r(pke," (DistilBERT model)"),pke.forEach(t),Ecr=i(le),LT=n(le,"LI",{});var uke=s(LT);n1e=n(uke,"STRONG",{});var E1t=s(n1e);Ccr=r(E1t,"electra"),E1t.forEach(t),wcr=r(uke," \u2014 "),cQ=n(uke,"A",{href:!0});var C1t=s(cQ);Acr=r(C1t,"TFElectraForPreTraining"),C1t.forEach(t),ycr=r(uke," (ELECTRA model)"),uke.forEach(t),Lcr=i(le),xT=n(le,"LI",{});var _ke=s(xT);s1e=n(_ke,"STRONG",{});var w1t=s(s1e);xcr=r(w1t,"flaubert"),w1t.forEach(t),$cr=r(_ke," \u2014 "),fQ=n(_ke,"A",{href:!0});var A1t=s(fQ);kcr=r(A1t,"TFFlaubertWithLMHeadModel"),A1t.forEach(t),Scr=r(_ke," (FlauBERT model)"),_ke.forEach(t),Rcr=i(le),$T=n(le,"LI",{});var bke=s($T);l1e=n(bke,"STRONG",{});var y1t=s(l1e);Bcr=r(y1t,"funnel"),y1t.forEach(t),Pcr=r(bke," \u2014 "),mQ=n(bke,"A",{href:!0});var L1t=s(mQ);Icr=r(L1t,"TFFunnelForPreTraining"),L1t.forEach(t),qcr=r(bke," (Funnel Transformer model)"),bke.forEach(t),Ncr=i(le),kT=n(le,"LI",{});var vke=s(kT);i1e=n(vke,"STRONG",{});var x1t=s(i1e);jcr=r(x1t,"gpt2"),x1t.forEach(t),Dcr=r(vke," \u2014 "),gQ=n(vke,"A",{href:!0});var $1t=s(gQ);Gcr=r($1t,"TFGPT2LMHeadModel"),$1t.forEach(t),Ocr=r(vke," (OpenAI GPT-2 model)"),vke.forEach(t),Vcr=i(le),ST=n(le,"LI",{});var Fke=s(ST);d1e=n(Fke,"STRONG",{});var k1t=s(d1e);Xcr=r(k1t,"layoutlm"),k1t.forEach(t),zcr=r(Fke," \u2014 "),hQ=n(Fke,"A",{href:!0});var S1t=s(hQ);Qcr=r(S1t,"TFLayoutLMForMaskedLM"),S1t.forEach(t),Wcr=r(Fke," (LayoutLM model)"),Fke.forEach(t),Hcr=i(le),RT=n(le,"LI",{});var Tke=s(RT);c1e=n(Tke,"STRONG",{});var R1t=s(c1e);Ucr=r(R1t,"lxmert"),R1t.forEach(t),Jcr=r(Tke," \u2014 "),pQ=n(Tke,"A",{href:!0});var B1t=s(pQ);Ycr=r(B1t,"TFLxmertForPreTraining"),B1t.forEach(t),Kcr=r(Tke," (LXMERT model)"),Tke.forEach(t),Zcr=i(le),BT=n(le,"LI",{});var Mke=s(BT);f1e=n(Mke,"STRONG",{});var P1t=s(f1e);efr=r(P1t,"mobilebert"),P1t.forEach(t),ofr=r(Mke," \u2014 "),uQ=n(Mke,"A",{href:!0});var I1t=s(uQ);rfr=r(I1t,"TFMobileBertForPreTraining"),I1t.forEach(t),tfr=r(Mke," (MobileBERT model)"),Mke.forEach(t),afr=i(le),PT=n(le,"LI",{});var Eke=s(PT);m1e=n(Eke,"STRONG",{});var q1t=s(m1e);nfr=r(q1t,"mpnet"),q1t.forEach(t),sfr=r(Eke," \u2014 "),_Q=n(Eke,"A",{href:!0});var N1t=s(_Q);lfr=r(N1t,"TFMPNetForMaskedLM"),N1t.forEach(t),ifr=r(Eke," (MPNet model)"),Eke.forEach(t),dfr=i(le),IT=n(le,"LI",{});var Cke=s(IT);g1e=n(Cke,"STRONG",{});var j1t=s(g1e);cfr=r(j1t,"openai-gpt"),j1t.forEach(t),ffr=r(Cke," \u2014 "),bQ=n(Cke,"A",{href:!0});var D1t=s(bQ);mfr=r(D1t,"TFOpenAIGPTLMHeadModel"),D1t.forEach(t),gfr=r(Cke," (OpenAI GPT model)"),Cke.forEach(t),hfr=i(le),qT=n(le,"LI",{});var wke=s(qT);h1e=n(wke,"STRONG",{});var G1t=s(h1e);pfr=r(G1t,"roberta"),G1t.forEach(t),ufr=r(wke," \u2014 "),vQ=n(wke,"A",{href:!0});var O1t=s(vQ);_fr=r(O1t,"TFRobertaForMaskedLM"),O1t.forEach(t),bfr=r(wke," (RoBERTa model)"),wke.forEach(t),vfr=i(le),NT=n(le,"LI",{});var Ake=s(NT);p1e=n(Ake,"STRONG",{});var V1t=s(p1e);Ffr=r(V1t,"t5"),V1t.forEach(t),Tfr=r(Ake," \u2014 "),FQ=n(Ake,"A",{href:!0});var X1t=s(FQ);Mfr=r(X1t,"TFT5ForConditionalGeneration"),X1t.forEach(t),Efr=r(Ake," (T5 model)"),Ake.forEach(t),Cfr=i(le),jT=n(le,"LI",{});var yke=s(jT);u1e=n(yke,"STRONG",{});var z1t=s(u1e);wfr=r(z1t,"tapas"),z1t.forEach(t),Afr=r(yke," \u2014 "),TQ=n(yke,"A",{href:!0});var Q1t=s(TQ);yfr=r(Q1t,"TFTapasForMaskedLM"),Q1t.forEach(t),Lfr=r(yke," (TAPAS model)"),yke.forEach(t),xfr=i(le),DT=n(le,"LI",{});var Lke=s(DT);_1e=n(Lke,"STRONG",{});var W1t=s(_1e);$fr=r(W1t,"transfo-xl"),W1t.forEach(t),kfr=r(Lke," \u2014 "),MQ=n(Lke,"A",{href:!0});var H1t=s(MQ);Sfr=r(H1t,"TFTransfoXLLMHeadModel"),H1t.forEach(t),Rfr=r(Lke," (Transformer-XL model)"),Lke.forEach(t),Bfr=i(le),GT=n(le,"LI",{});var xke=s(GT);b1e=n(xke,"STRONG",{});var U1t=s(b1e);Pfr=r(U1t,"vit_mae"),U1t.forEach(t),Ifr=r(xke," \u2014 "),EQ=n(xke,"A",{href:!0});var J1t=s(EQ);qfr=r(J1t,"TFViTMAEForPreTraining"),J1t.forEach(t),Nfr=r(xke," (ViTMAE model)"),xke.forEach(t),jfr=i(le),OT=n(le,"LI",{});var $ke=s(OT);v1e=n($ke,"STRONG",{});var Y1t=s(v1e);Dfr=r(Y1t,"xlm"),Y1t.forEach(t),Gfr=r($ke," \u2014 "),CQ=n($ke,"A",{href:!0});var K1t=s(CQ);Ofr=r(K1t,"TFXLMWithLMHeadModel"),K1t.forEach(t),Vfr=r($ke," (XLM model)"),$ke.forEach(t),Xfr=i(le),VT=n(le,"LI",{});var kke=s(VT);F1e=n(kke,"STRONG",{});var Z1t=s(F1e);zfr=r(Z1t,"xlm-roberta"),Z1t.forEach(t),Qfr=r(kke," \u2014 "),wQ=n(kke,"A",{href:!0});var ebt=s(wQ);Wfr=r(ebt,"TFXLMRobertaForMaskedLM"),ebt.forEach(t),Hfr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),Ufr=i(le),XT=n(le,"LI",{});var Ske=s(XT);T1e=n(Ske,"STRONG",{});var obt=s(T1e);Jfr=r(obt,"xlnet"),obt.forEach(t),Yfr=r(Ske," \u2014 "),AQ=n(Ske,"A",{href:!0});var rbt=s(AQ);Kfr=r(rbt,"TFXLNetLMHeadModel"),rbt.forEach(t),Zfr=r(Ske," (XLNet model)"),Ske.forEach(t),le.forEach(t),emr=i(ml),T(zT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),cqe=i(f),Vd=n(f,"H2",{class:!0});var uje=s(Vd);QT=n(uje,"A",{id:!0,class:!0,href:!0});var tbt=s(QT);M1e=n(tbt,"SPAN",{});var abt=s(M1e);T(zL.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),omr=i(uje),E1e=n(uje,"SPAN",{});var nbt=s(E1e);rmr=r(nbt,"TFAutoModelForCausalLM"),nbt.forEach(t),uje.forEach(t),fqe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(QL.$$.fragment,gl),tmr=i(gl),Xd=n(gl,"P",{});var fZ=s(Xd);amr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=n(fZ,"A",{href:!0});var sbt=s(yQ);nmr=r(sbt,"from_pretrained()"),sbt.forEach(t),smr=r(fZ," class method or the "),LQ=n(fZ,"A",{href:!0});var lbt=s(LQ);lmr=r(lbt,"from_config()"),lbt.forEach(t),imr=r(fZ,` class
method.`),fZ.forEach(t),dmr=i(gl),WL=n(gl,"P",{});var _je=s(WL);cmr=r(_je,"This class cannot be instantiated directly using "),C1e=n(_je,"CODE",{});var ibt=s(C1e);fmr=r(ibt,"__init__()"),ibt.forEach(t),mmr=r(_je," (throws an error)."),_je.forEach(t),gmr=i(gl),yt=n(gl,"DIV",{class:!0});var r6=s(yt);T(HL.$$.fragment,r6),hmr=i(r6),w1e=n(r6,"P",{});var dbt=s(w1e);pmr=r(dbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dbt.forEach(t),umr=i(r6),zd=n(r6,"P",{});var mZ=s(zd);_mr=r(mZ,`Note:
Loading a model from its configuration file does `),A1e=n(mZ,"STRONG",{});var cbt=s(A1e);bmr=r(cbt,"not"),cbt.forEach(t),vmr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(mZ,"A",{href:!0});var fbt=s(xQ);Fmr=r(fbt,"from_pretrained()"),fbt.forEach(t),Tmr=r(mZ," to load the model weights."),mZ.forEach(t),Mmr=i(r6),T(WT.$$.fragment,r6),r6.forEach(t),Emr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(UL.$$.fragment,hl),Cmr=i(hl),y1e=n(hl,"P",{});var mbt=s(y1e);wmr=r(mbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mbt.forEach(t),Amr=i(hl),en=n(hl,"P",{});var t6=s(en);ymr=r(t6,"The model class to instantiate is selected based on the "),L1e=n(t6,"CODE",{});var gbt=s(L1e);Lmr=r(gbt,"model_type"),gbt.forEach(t),xmr=r(t6,` property of the config object (either
passed as an argument or loaded from `),x1e=n(t6,"CODE",{});var hbt=s(x1e);$mr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),kmr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(t6,"CODE",{});var pbt=s($1e);Smr=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),Rmr=r(t6,":"),t6.forEach(t),Bmr=i(hl),Me=n(hl,"UL",{});var Ce=s(Me);HT=n(Ce,"LI",{});var Rke=s(HT);k1e=n(Rke,"STRONG",{});var ubt=s(k1e);Pmr=r(ubt,"bert"),ubt.forEach(t),Imr=r(Rke," \u2014 "),$Q=n(Rke,"A",{href:!0});var _bt=s($Q);qmr=r(_bt,"TFBertLMHeadModel"),_bt.forEach(t),Nmr=r(Rke," (BERT model)"),Rke.forEach(t),jmr=i(Ce),UT=n(Ce,"LI",{});var Bke=s(UT);S1e=n(Bke,"STRONG",{});var bbt=s(S1e);Dmr=r(bbt,"camembert"),bbt.forEach(t),Gmr=r(Bke," \u2014 "),kQ=n(Bke,"A",{href:!0});var vbt=s(kQ);Omr=r(vbt,"TFCamembertForCausalLM"),vbt.forEach(t),Vmr=r(Bke," (CamemBERT model)"),Bke.forEach(t),Xmr=i(Ce),JT=n(Ce,"LI",{});var Pke=s(JT);R1e=n(Pke,"STRONG",{});var Fbt=s(R1e);zmr=r(Fbt,"ctrl"),Fbt.forEach(t),Qmr=r(Pke," \u2014 "),SQ=n(Pke,"A",{href:!0});var Tbt=s(SQ);Wmr=r(Tbt,"TFCTRLLMHeadModel"),Tbt.forEach(t),Hmr=r(Pke," (CTRL model)"),Pke.forEach(t),Umr=i(Ce),YT=n(Ce,"LI",{});var Ike=s(YT);B1e=n(Ike,"STRONG",{});var Mbt=s(B1e);Jmr=r(Mbt,"gpt2"),Mbt.forEach(t),Ymr=r(Ike," \u2014 "),RQ=n(Ike,"A",{href:!0});var Ebt=s(RQ);Kmr=r(Ebt,"TFGPT2LMHeadModel"),Ebt.forEach(t),Zmr=r(Ike," (OpenAI GPT-2 model)"),Ike.forEach(t),egr=i(Ce),KT=n(Ce,"LI",{});var qke=s(KT);P1e=n(qke,"STRONG",{});var Cbt=s(P1e);ogr=r(Cbt,"gptj"),Cbt.forEach(t),rgr=r(qke," \u2014 "),BQ=n(qke,"A",{href:!0});var wbt=s(BQ);tgr=r(wbt,"TFGPTJForCausalLM"),wbt.forEach(t),agr=r(qke," (GPT-J model)"),qke.forEach(t),ngr=i(Ce),ZT=n(Ce,"LI",{});var Nke=s(ZT);I1e=n(Nke,"STRONG",{});var Abt=s(I1e);sgr=r(Abt,"openai-gpt"),Abt.forEach(t),lgr=r(Nke," \u2014 "),PQ=n(Nke,"A",{href:!0});var ybt=s(PQ);igr=r(ybt,"TFOpenAIGPTLMHeadModel"),ybt.forEach(t),dgr=r(Nke," (OpenAI GPT model)"),Nke.forEach(t),cgr=i(Ce),e7=n(Ce,"LI",{});var jke=s(e7);q1e=n(jke,"STRONG",{});var Lbt=s(q1e);fgr=r(Lbt,"rembert"),Lbt.forEach(t),mgr=r(jke," \u2014 "),IQ=n(jke,"A",{href:!0});var xbt=s(IQ);ggr=r(xbt,"TFRemBertForCausalLM"),xbt.forEach(t),hgr=r(jke," (RemBERT model)"),jke.forEach(t),pgr=i(Ce),o7=n(Ce,"LI",{});var Dke=s(o7);N1e=n(Dke,"STRONG",{});var $bt=s(N1e);ugr=r($bt,"roberta"),$bt.forEach(t),_gr=r(Dke," \u2014 "),qQ=n(Dke,"A",{href:!0});var kbt=s(qQ);bgr=r(kbt,"TFRobertaForCausalLM"),kbt.forEach(t),vgr=r(Dke," (RoBERTa model)"),Dke.forEach(t),Fgr=i(Ce),r7=n(Ce,"LI",{});var Gke=s(r7);j1e=n(Gke,"STRONG",{});var Sbt=s(j1e);Tgr=r(Sbt,"roformer"),Sbt.forEach(t),Mgr=r(Gke," \u2014 "),NQ=n(Gke,"A",{href:!0});var Rbt=s(NQ);Egr=r(Rbt,"TFRoFormerForCausalLM"),Rbt.forEach(t),Cgr=r(Gke," (RoFormer model)"),Gke.forEach(t),wgr=i(Ce),t7=n(Ce,"LI",{});var Oke=s(t7);D1e=n(Oke,"STRONG",{});var Bbt=s(D1e);Agr=r(Bbt,"transfo-xl"),Bbt.forEach(t),ygr=r(Oke," \u2014 "),jQ=n(Oke,"A",{href:!0});var Pbt=s(jQ);Lgr=r(Pbt,"TFTransfoXLLMHeadModel"),Pbt.forEach(t),xgr=r(Oke," (Transformer-XL model)"),Oke.forEach(t),$gr=i(Ce),a7=n(Ce,"LI",{});var Vke=s(a7);G1e=n(Vke,"STRONG",{});var Ibt=s(G1e);kgr=r(Ibt,"xlm"),Ibt.forEach(t),Sgr=r(Vke," \u2014 "),DQ=n(Vke,"A",{href:!0});var qbt=s(DQ);Rgr=r(qbt,"TFXLMWithLMHeadModel"),qbt.forEach(t),Bgr=r(Vke," (XLM model)"),Vke.forEach(t),Pgr=i(Ce),n7=n(Ce,"LI",{});var Xke=s(n7);O1e=n(Xke,"STRONG",{});var Nbt=s(O1e);Igr=r(Nbt,"xlnet"),Nbt.forEach(t),qgr=r(Xke," \u2014 "),GQ=n(Xke,"A",{href:!0});var jbt=s(GQ);Ngr=r(jbt,"TFXLNetLMHeadModel"),jbt.forEach(t),jgr=r(Xke," (XLNet model)"),Xke.forEach(t),Ce.forEach(t),Dgr=i(hl),T(s7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),mqe=i(f),Qd=n(f,"H2",{class:!0});var bje=s(Qd);l7=n(bje,"A",{id:!0,class:!0,href:!0});var Dbt=s(l7);V1e=n(Dbt,"SPAN",{});var Gbt=s(V1e);T(JL.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),Ggr=i(bje),X1e=n(bje,"SPAN",{});var Obt=s(X1e);Ogr=r(Obt,"TFAutoModelForImageClassification"),Obt.forEach(t),bje.forEach(t),gqe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(YL.$$.fragment,pl),Vgr=i(pl),Wd=n(pl,"P",{});var gZ=s(Wd);Xgr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=n(gZ,"A",{href:!0});var Vbt=s(OQ);zgr=r(Vbt,"from_pretrained()"),Vbt.forEach(t),Qgr=r(gZ," class method or the "),VQ=n(gZ,"A",{href:!0});var Xbt=s(VQ);Wgr=r(Xbt,"from_config()"),Xbt.forEach(t),Hgr=r(gZ,` class
method.`),gZ.forEach(t),Ugr=i(pl),KL=n(pl,"P",{});var vje=s(KL);Jgr=r(vje,"This class cannot be instantiated directly using "),z1e=n(vje,"CODE",{});var zbt=s(z1e);Ygr=r(zbt,"__init__()"),zbt.forEach(t),Kgr=r(vje," (throws an error)."),vje.forEach(t),Zgr=i(pl),Lt=n(pl,"DIV",{class:!0});var a6=s(Lt);T(ZL.$$.fragment,a6),ehr=i(a6),Q1e=n(a6,"P",{});var Qbt=s(Q1e);ohr=r(Qbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qbt.forEach(t),rhr=i(a6),Hd=n(a6,"P",{});var hZ=s(Hd);thr=r(hZ,`Note:
Loading a model from its configuration file does `),W1e=n(hZ,"STRONG",{});var Wbt=s(W1e);ahr=r(Wbt,"not"),Wbt.forEach(t),nhr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(hZ,"A",{href:!0});var Hbt=s(XQ);shr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),lhr=r(hZ," to load the model weights."),hZ.forEach(t),ihr=i(a6),T(i7.$$.fragment,a6),a6.forEach(t),dhr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(e8.$$.fragment,ul),chr=i(ul),H1e=n(ul,"P",{});var Ubt=s(H1e);fhr=r(Ubt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ubt.forEach(t),mhr=i(ul),on=n(ul,"P",{});var n6=s(on);ghr=r(n6,"The model class to instantiate is selected based on the "),U1e=n(n6,"CODE",{});var Jbt=s(U1e);hhr=r(Jbt,"model_type"),Jbt.forEach(t),phr=r(n6,` property of the config object (either
passed as an argument or loaded from `),J1e=n(n6,"CODE",{});var Ybt=s(J1e);uhr=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),_hr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(n6,"CODE",{});var Kbt=s(Y1e);bhr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),vhr=r(n6,":"),n6.forEach(t),Fhr=i(ul),Ud=n(ul,"UL",{});var pZ=s(Ud);d7=n(pZ,"LI",{});var zke=s(d7);K1e=n(zke,"STRONG",{});var Zbt=s(K1e);Thr=r(Zbt,"convnext"),Zbt.forEach(t),Mhr=r(zke," \u2014 "),zQ=n(zke,"A",{href:!0});var e5t=s(zQ);Ehr=r(e5t,"TFConvNextForImageClassification"),e5t.forEach(t),Chr=r(zke," (ConvNext model)"),zke.forEach(t),whr=i(pZ),c7=n(pZ,"LI",{});var Qke=s(c7);Z1e=n(Qke,"STRONG",{});var o5t=s(Z1e);Ahr=r(o5t,"data2vec-vision"),o5t.forEach(t),yhr=r(Qke," \u2014 "),QQ=n(Qke,"A",{href:!0});var r5t=s(QQ);Lhr=r(r5t,"TFData2VecVisionForImageClassification"),r5t.forEach(t),xhr=r(Qke," (Data2VecVision model)"),Qke.forEach(t),$hr=i(pZ),f7=n(pZ,"LI",{});var Wke=s(f7);ebe=n(Wke,"STRONG",{});var t5t=s(ebe);khr=r(t5t,"vit"),t5t.forEach(t),Shr=r(Wke," \u2014 "),WQ=n(Wke,"A",{href:!0});var a5t=s(WQ);Rhr=r(a5t,"TFViTForImageClassification"),a5t.forEach(t),Bhr=r(Wke," (ViT model)"),Wke.forEach(t),pZ.forEach(t),Phr=i(ul),T(m7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),hqe=i(f),Jd=n(f,"H2",{class:!0});var Fje=s(Jd);g7=n(Fje,"A",{id:!0,class:!0,href:!0});var n5t=s(g7);obe=n(n5t,"SPAN",{});var s5t=s(obe);T(o8.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),Ihr=i(Fje),rbe=n(Fje,"SPAN",{});var l5t=s(rbe);qhr=r(l5t,"TFAutoModelForMaskedLM"),l5t.forEach(t),Fje.forEach(t),pqe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(r8.$$.fragment,_l),Nhr=i(_l),Yd=n(_l,"P",{});var uZ=s(Yd);jhr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HQ=n(uZ,"A",{href:!0});var i5t=s(HQ);Dhr=r(i5t,"from_pretrained()"),i5t.forEach(t),Ghr=r(uZ," class method or the "),UQ=n(uZ,"A",{href:!0});var d5t=s(UQ);Ohr=r(d5t,"from_config()"),d5t.forEach(t),Vhr=r(uZ,` class
method.`),uZ.forEach(t),Xhr=i(_l),t8=n(_l,"P",{});var Tje=s(t8);zhr=r(Tje,"This class cannot be instantiated directly using "),tbe=n(Tje,"CODE",{});var c5t=s(tbe);Qhr=r(c5t,"__init__()"),c5t.forEach(t),Whr=r(Tje," (throws an error)."),Tje.forEach(t),Hhr=i(_l),xt=n(_l,"DIV",{class:!0});var s6=s(xt);T(a8.$$.fragment,s6),Uhr=i(s6),abe=n(s6,"P",{});var f5t=s(abe);Jhr=r(f5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f5t.forEach(t),Yhr=i(s6),Kd=n(s6,"P",{});var _Z=s(Kd);Khr=r(_Z,`Note:
Loading a model from its configuration file does `),nbe=n(_Z,"STRONG",{});var m5t=s(nbe);Zhr=r(m5t,"not"),m5t.forEach(t),epr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(_Z,"A",{href:!0});var g5t=s(JQ);opr=r(g5t,"from_pretrained()"),g5t.forEach(t),rpr=r(_Z," to load the model weights."),_Z.forEach(t),tpr=i(s6),T(h7.$$.fragment,s6),s6.forEach(t),apr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(n8.$$.fragment,bl),npr=i(bl),sbe=n(bl,"P",{});var h5t=s(sbe);spr=r(h5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h5t.forEach(t),lpr=i(bl),rn=n(bl,"P",{});var l6=s(rn);ipr=r(l6,"The model class to instantiate is selected based on the "),lbe=n(l6,"CODE",{});var p5t=s(lbe);dpr=r(p5t,"model_type"),p5t.forEach(t),cpr=r(l6,` property of the config object (either
passed as an argument or loaded from `),ibe=n(l6,"CODE",{});var u5t=s(ibe);fpr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),mpr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(l6,"CODE",{});var _5t=s(dbe);gpr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),hpr=r(l6,":"),l6.forEach(t),ppr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);p7=n(fe,"LI",{});var Hke=s(p7);cbe=n(Hke,"STRONG",{});var b5t=s(cbe);upr=r(b5t,"albert"),b5t.forEach(t),_pr=r(Hke," \u2014 "),YQ=n(Hke,"A",{href:!0});var v5t=s(YQ);bpr=r(v5t,"TFAlbertForMaskedLM"),v5t.forEach(t),vpr=r(Hke," (ALBERT model)"),Hke.forEach(t),Fpr=i(fe),u7=n(fe,"LI",{});var Uke=s(u7);fbe=n(Uke,"STRONG",{});var F5t=s(fbe);Tpr=r(F5t,"bert"),F5t.forEach(t),Mpr=r(Uke," \u2014 "),KQ=n(Uke,"A",{href:!0});var T5t=s(KQ);Epr=r(T5t,"TFBertForMaskedLM"),T5t.forEach(t),Cpr=r(Uke," (BERT model)"),Uke.forEach(t),wpr=i(fe),_7=n(fe,"LI",{});var Jke=s(_7);mbe=n(Jke,"STRONG",{});var M5t=s(mbe);Apr=r(M5t,"camembert"),M5t.forEach(t),ypr=r(Jke," \u2014 "),ZQ=n(Jke,"A",{href:!0});var E5t=s(ZQ);Lpr=r(E5t,"TFCamembertForMaskedLM"),E5t.forEach(t),xpr=r(Jke," (CamemBERT model)"),Jke.forEach(t),$pr=i(fe),b7=n(fe,"LI",{});var Yke=s(b7);gbe=n(Yke,"STRONG",{});var C5t=s(gbe);kpr=r(C5t,"convbert"),C5t.forEach(t),Spr=r(Yke," \u2014 "),eW=n(Yke,"A",{href:!0});var w5t=s(eW);Rpr=r(w5t,"TFConvBertForMaskedLM"),w5t.forEach(t),Bpr=r(Yke," (ConvBERT model)"),Yke.forEach(t),Ppr=i(fe),v7=n(fe,"LI",{});var Kke=s(v7);hbe=n(Kke,"STRONG",{});var A5t=s(hbe);Ipr=r(A5t,"deberta"),A5t.forEach(t),qpr=r(Kke," \u2014 "),oW=n(Kke,"A",{href:!0});var y5t=s(oW);Npr=r(y5t,"TFDebertaForMaskedLM"),y5t.forEach(t),jpr=r(Kke," (DeBERTa model)"),Kke.forEach(t),Dpr=i(fe),F7=n(fe,"LI",{});var Zke=s(F7);pbe=n(Zke,"STRONG",{});var L5t=s(pbe);Gpr=r(L5t,"deberta-v2"),L5t.forEach(t),Opr=r(Zke," \u2014 "),rW=n(Zke,"A",{href:!0});var x5t=s(rW);Vpr=r(x5t,"TFDebertaV2ForMaskedLM"),x5t.forEach(t),Xpr=r(Zke," (DeBERTa-v2 model)"),Zke.forEach(t),zpr=i(fe),T7=n(fe,"LI",{});var eSe=s(T7);ube=n(eSe,"STRONG",{});var $5t=s(ube);Qpr=r($5t,"distilbert"),$5t.forEach(t),Wpr=r(eSe," \u2014 "),tW=n(eSe,"A",{href:!0});var k5t=s(tW);Hpr=r(k5t,"TFDistilBertForMaskedLM"),k5t.forEach(t),Upr=r(eSe," (DistilBERT model)"),eSe.forEach(t),Jpr=i(fe),M7=n(fe,"LI",{});var oSe=s(M7);_be=n(oSe,"STRONG",{});var S5t=s(_be);Ypr=r(S5t,"electra"),S5t.forEach(t),Kpr=r(oSe," \u2014 "),aW=n(oSe,"A",{href:!0});var R5t=s(aW);Zpr=r(R5t,"TFElectraForMaskedLM"),R5t.forEach(t),eur=r(oSe," (ELECTRA model)"),oSe.forEach(t),our=i(fe),E7=n(fe,"LI",{});var rSe=s(E7);bbe=n(rSe,"STRONG",{});var B5t=s(bbe);rur=r(B5t,"flaubert"),B5t.forEach(t),tur=r(rSe," \u2014 "),nW=n(rSe,"A",{href:!0});var P5t=s(nW);aur=r(P5t,"TFFlaubertWithLMHeadModel"),P5t.forEach(t),nur=r(rSe," (FlauBERT model)"),rSe.forEach(t),sur=i(fe),C7=n(fe,"LI",{});var tSe=s(C7);vbe=n(tSe,"STRONG",{});var I5t=s(vbe);lur=r(I5t,"funnel"),I5t.forEach(t),iur=r(tSe," \u2014 "),sW=n(tSe,"A",{href:!0});var q5t=s(sW);dur=r(q5t,"TFFunnelForMaskedLM"),q5t.forEach(t),cur=r(tSe," (Funnel Transformer model)"),tSe.forEach(t),fur=i(fe),w7=n(fe,"LI",{});var aSe=s(w7);Fbe=n(aSe,"STRONG",{});var N5t=s(Fbe);mur=r(N5t,"layoutlm"),N5t.forEach(t),gur=r(aSe," \u2014 "),lW=n(aSe,"A",{href:!0});var j5t=s(lW);hur=r(j5t,"TFLayoutLMForMaskedLM"),j5t.forEach(t),pur=r(aSe," (LayoutLM model)"),aSe.forEach(t),uur=i(fe),A7=n(fe,"LI",{});var nSe=s(A7);Tbe=n(nSe,"STRONG",{});var D5t=s(Tbe);_ur=r(D5t,"longformer"),D5t.forEach(t),bur=r(nSe," \u2014 "),iW=n(nSe,"A",{href:!0});var G5t=s(iW);vur=r(G5t,"TFLongformerForMaskedLM"),G5t.forEach(t),Fur=r(nSe," (Longformer model)"),nSe.forEach(t),Tur=i(fe),y7=n(fe,"LI",{});var sSe=s(y7);Mbe=n(sSe,"STRONG",{});var O5t=s(Mbe);Mur=r(O5t,"mobilebert"),O5t.forEach(t),Eur=r(sSe," \u2014 "),dW=n(sSe,"A",{href:!0});var V5t=s(dW);Cur=r(V5t,"TFMobileBertForMaskedLM"),V5t.forEach(t),wur=r(sSe," (MobileBERT model)"),sSe.forEach(t),Aur=i(fe),L7=n(fe,"LI",{});var lSe=s(L7);Ebe=n(lSe,"STRONG",{});var X5t=s(Ebe);yur=r(X5t,"mpnet"),X5t.forEach(t),Lur=r(lSe," \u2014 "),cW=n(lSe,"A",{href:!0});var z5t=s(cW);xur=r(z5t,"TFMPNetForMaskedLM"),z5t.forEach(t),$ur=r(lSe," (MPNet model)"),lSe.forEach(t),kur=i(fe),x7=n(fe,"LI",{});var iSe=s(x7);Cbe=n(iSe,"STRONG",{});var Q5t=s(Cbe);Sur=r(Q5t,"rembert"),Q5t.forEach(t),Rur=r(iSe," \u2014 "),fW=n(iSe,"A",{href:!0});var W5t=s(fW);Bur=r(W5t,"TFRemBertForMaskedLM"),W5t.forEach(t),Pur=r(iSe," (RemBERT model)"),iSe.forEach(t),Iur=i(fe),$7=n(fe,"LI",{});var dSe=s($7);wbe=n(dSe,"STRONG",{});var H5t=s(wbe);qur=r(H5t,"roberta"),H5t.forEach(t),Nur=r(dSe," \u2014 "),mW=n(dSe,"A",{href:!0});var U5t=s(mW);jur=r(U5t,"TFRobertaForMaskedLM"),U5t.forEach(t),Dur=r(dSe," (RoBERTa model)"),dSe.forEach(t),Gur=i(fe),k7=n(fe,"LI",{});var cSe=s(k7);Abe=n(cSe,"STRONG",{});var J5t=s(Abe);Our=r(J5t,"roformer"),J5t.forEach(t),Vur=r(cSe," \u2014 "),gW=n(cSe,"A",{href:!0});var Y5t=s(gW);Xur=r(Y5t,"TFRoFormerForMaskedLM"),Y5t.forEach(t),zur=r(cSe," (RoFormer model)"),cSe.forEach(t),Qur=i(fe),S7=n(fe,"LI",{});var fSe=s(S7);ybe=n(fSe,"STRONG",{});var K5t=s(ybe);Wur=r(K5t,"tapas"),K5t.forEach(t),Hur=r(fSe," \u2014 "),hW=n(fSe,"A",{href:!0});var Z5t=s(hW);Uur=r(Z5t,"TFTapasForMaskedLM"),Z5t.forEach(t),Jur=r(fSe," (TAPAS model)"),fSe.forEach(t),Yur=i(fe),R7=n(fe,"LI",{});var mSe=s(R7);Lbe=n(mSe,"STRONG",{});var e3t=s(Lbe);Kur=r(e3t,"xlm"),e3t.forEach(t),Zur=r(mSe," \u2014 "),pW=n(mSe,"A",{href:!0});var o3t=s(pW);e_r=r(o3t,"TFXLMWithLMHeadModel"),o3t.forEach(t),o_r=r(mSe," (XLM model)"),mSe.forEach(t),r_r=i(fe),B7=n(fe,"LI",{});var gSe=s(B7);xbe=n(gSe,"STRONG",{});var r3t=s(xbe);t_r=r(r3t,"xlm-roberta"),r3t.forEach(t),a_r=r(gSe," \u2014 "),uW=n(gSe,"A",{href:!0});var t3t=s(uW);n_r=r(t3t,"TFXLMRobertaForMaskedLM"),t3t.forEach(t),s_r=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),fe.forEach(t),l_r=i(bl),T(P7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),uqe=i(f),Zd=n(f,"H2",{class:!0});var Mje=s(Zd);I7=n(Mje,"A",{id:!0,class:!0,href:!0});var a3t=s(I7);$be=n(a3t,"SPAN",{});var n3t=s($be);T(s8.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),i_r=i(Mje),kbe=n(Mje,"SPAN",{});var s3t=s(kbe);d_r=r(s3t,"TFAutoModelForSeq2SeqLM"),s3t.forEach(t),Mje.forEach(t),_qe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(l8.$$.fragment,vl),c_r=i(vl),ec=n(vl,"P",{});var bZ=s(ec);f_r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_W=n(bZ,"A",{href:!0});var l3t=s(_W);m_r=r(l3t,"from_pretrained()"),l3t.forEach(t),g_r=r(bZ," class method or the "),bW=n(bZ,"A",{href:!0});var i3t=s(bW);h_r=r(i3t,"from_config()"),i3t.forEach(t),p_r=r(bZ,` class
method.`),bZ.forEach(t),u_r=i(vl),i8=n(vl,"P",{});var Eje=s(i8);__r=r(Eje,"This class cannot be instantiated directly using "),Sbe=n(Eje,"CODE",{});var d3t=s(Sbe);b_r=r(d3t,"__init__()"),d3t.forEach(t),v_r=r(Eje," (throws an error)."),Eje.forEach(t),F_r=i(vl),$t=n(vl,"DIV",{class:!0});var i6=s($t);T(d8.$$.fragment,i6),T_r=i(i6),Rbe=n(i6,"P",{});var c3t=s(Rbe);M_r=r(c3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c3t.forEach(t),E_r=i(i6),oc=n(i6,"P",{});var vZ=s(oc);C_r=r(vZ,`Note:
Loading a model from its configuration file does `),Bbe=n(vZ,"STRONG",{});var f3t=s(Bbe);w_r=r(f3t,"not"),f3t.forEach(t),A_r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(vZ,"A",{href:!0});var m3t=s(vW);y_r=r(m3t,"from_pretrained()"),m3t.forEach(t),L_r=r(vZ," to load the model weights."),vZ.forEach(t),x_r=i(i6),T(q7.$$.fragment,i6),i6.forEach(t),$_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(c8.$$.fragment,Fl),k_r=i(Fl),Pbe=n(Fl,"P",{});var g3t=s(Pbe);S_r=r(g3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g3t.forEach(t),R_r=i(Fl),tn=n(Fl,"P",{});var d6=s(tn);B_r=r(d6,"The model class to instantiate is selected based on the "),Ibe=n(d6,"CODE",{});var h3t=s(Ibe);P_r=r(h3t,"model_type"),h3t.forEach(t),I_r=r(d6,` property of the config object (either
passed as an argument or loaded from `),qbe=n(d6,"CODE",{});var p3t=s(qbe);q_r=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),N_r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(d6,"CODE",{});var u3t=s(Nbe);j_r=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),D_r=r(d6,":"),d6.forEach(t),G_r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);N7=n(Re,"LI",{});var hSe=s(N7);jbe=n(hSe,"STRONG",{});var _3t=s(jbe);O_r=r(_3t,"bart"),_3t.forEach(t),V_r=r(hSe," \u2014 "),FW=n(hSe,"A",{href:!0});var b3t=s(FW);X_r=r(b3t,"TFBartForConditionalGeneration"),b3t.forEach(t),z_r=r(hSe," (BART model)"),hSe.forEach(t),Q_r=i(Re),j7=n(Re,"LI",{});var pSe=s(j7);Dbe=n(pSe,"STRONG",{});var v3t=s(Dbe);W_r=r(v3t,"blenderbot"),v3t.forEach(t),H_r=r(pSe," \u2014 "),TW=n(pSe,"A",{href:!0});var F3t=s(TW);U_r=r(F3t,"TFBlenderbotForConditionalGeneration"),F3t.forEach(t),J_r=r(pSe," (Blenderbot model)"),pSe.forEach(t),Y_r=i(Re),D7=n(Re,"LI",{});var uSe=s(D7);Gbe=n(uSe,"STRONG",{});var T3t=s(Gbe);K_r=r(T3t,"blenderbot-small"),T3t.forEach(t),Z_r=r(uSe," \u2014 "),MW=n(uSe,"A",{href:!0});var M3t=s(MW);e2r=r(M3t,"TFBlenderbotSmallForConditionalGeneration"),M3t.forEach(t),o2r=r(uSe," (BlenderbotSmall model)"),uSe.forEach(t),r2r=i(Re),G7=n(Re,"LI",{});var _Se=s(G7);Obe=n(_Se,"STRONG",{});var E3t=s(Obe);t2r=r(E3t,"encoder-decoder"),E3t.forEach(t),a2r=r(_Se," \u2014 "),EW=n(_Se,"A",{href:!0});var C3t=s(EW);n2r=r(C3t,"TFEncoderDecoderModel"),C3t.forEach(t),s2r=r(_Se," (Encoder decoder model)"),_Se.forEach(t),l2r=i(Re),O7=n(Re,"LI",{});var bSe=s(O7);Vbe=n(bSe,"STRONG",{});var w3t=s(Vbe);i2r=r(w3t,"led"),w3t.forEach(t),d2r=r(bSe," \u2014 "),CW=n(bSe,"A",{href:!0});var A3t=s(CW);c2r=r(A3t,"TFLEDForConditionalGeneration"),A3t.forEach(t),f2r=r(bSe," (LED model)"),bSe.forEach(t),m2r=i(Re),V7=n(Re,"LI",{});var vSe=s(V7);Xbe=n(vSe,"STRONG",{});var y3t=s(Xbe);g2r=r(y3t,"marian"),y3t.forEach(t),h2r=r(vSe," \u2014 "),wW=n(vSe,"A",{href:!0});var L3t=s(wW);p2r=r(L3t,"TFMarianMTModel"),L3t.forEach(t),u2r=r(vSe," (Marian model)"),vSe.forEach(t),_2r=i(Re),X7=n(Re,"LI",{});var FSe=s(X7);zbe=n(FSe,"STRONG",{});var x3t=s(zbe);b2r=r(x3t,"mbart"),x3t.forEach(t),v2r=r(FSe," \u2014 "),AW=n(FSe,"A",{href:!0});var $3t=s(AW);F2r=r($3t,"TFMBartForConditionalGeneration"),$3t.forEach(t),T2r=r(FSe," (mBART model)"),FSe.forEach(t),M2r=i(Re),z7=n(Re,"LI",{});var TSe=s(z7);Qbe=n(TSe,"STRONG",{});var k3t=s(Qbe);E2r=r(k3t,"mt5"),k3t.forEach(t),C2r=r(TSe," \u2014 "),yW=n(TSe,"A",{href:!0});var S3t=s(yW);w2r=r(S3t,"TFMT5ForConditionalGeneration"),S3t.forEach(t),A2r=r(TSe," (mT5 model)"),TSe.forEach(t),y2r=i(Re),Q7=n(Re,"LI",{});var MSe=s(Q7);Wbe=n(MSe,"STRONG",{});var R3t=s(Wbe);L2r=r(R3t,"pegasus"),R3t.forEach(t),x2r=r(MSe," \u2014 "),LW=n(MSe,"A",{href:!0});var B3t=s(LW);$2r=r(B3t,"TFPegasusForConditionalGeneration"),B3t.forEach(t),k2r=r(MSe," (Pegasus model)"),MSe.forEach(t),S2r=i(Re),W7=n(Re,"LI",{});var ESe=s(W7);Hbe=n(ESe,"STRONG",{});var P3t=s(Hbe);R2r=r(P3t,"t5"),P3t.forEach(t),B2r=r(ESe," \u2014 "),xW=n(ESe,"A",{href:!0});var I3t=s(xW);P2r=r(I3t,"TFT5ForConditionalGeneration"),I3t.forEach(t),I2r=r(ESe," (T5 model)"),ESe.forEach(t),Re.forEach(t),q2r=i(Fl),T(H7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),bqe=i(f),rc=n(f,"H2",{class:!0});var Cje=s(rc);U7=n(Cje,"A",{id:!0,class:!0,href:!0});var q3t=s(U7);Ube=n(q3t,"SPAN",{});var N3t=s(Ube);T(f8.$$.fragment,N3t),N3t.forEach(t),q3t.forEach(t),N2r=i(Cje),Jbe=n(Cje,"SPAN",{});var j3t=s(Jbe);j2r=r(j3t,"TFAutoModelForSequenceClassification"),j3t.forEach(t),Cje.forEach(t),vqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(m8.$$.fragment,Tl),D2r=i(Tl),tc=n(Tl,"P",{});var FZ=s(tc);G2r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$W=n(FZ,"A",{href:!0});var D3t=s($W);O2r=r(D3t,"from_pretrained()"),D3t.forEach(t),V2r=r(FZ," class method or the "),kW=n(FZ,"A",{href:!0});var G3t=s(kW);X2r=r(G3t,"from_config()"),G3t.forEach(t),z2r=r(FZ,` class
method.`),FZ.forEach(t),Q2r=i(Tl),g8=n(Tl,"P",{});var wje=s(g8);W2r=r(wje,"This class cannot be instantiated directly using "),Ybe=n(wje,"CODE",{});var O3t=s(Ybe);H2r=r(O3t,"__init__()"),O3t.forEach(t),U2r=r(wje," (throws an error)."),wje.forEach(t),J2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var c6=s(kt);T(h8.$$.fragment,c6),Y2r=i(c6),Kbe=n(c6,"P",{});var V3t=s(Kbe);K2r=r(V3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V3t.forEach(t),Z2r=i(c6),ac=n(c6,"P",{});var TZ=s(ac);e1r=r(TZ,`Note:
Loading a model from its configuration file does `),Zbe=n(TZ,"STRONG",{});var X3t=s(Zbe);o1r=r(X3t,"not"),X3t.forEach(t),r1r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(TZ,"A",{href:!0});var z3t=s(SW);t1r=r(z3t,"from_pretrained()"),z3t.forEach(t),a1r=r(TZ," to load the model weights."),TZ.forEach(t),n1r=i(c6),T(J7.$$.fragment,c6),c6.forEach(t),s1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(p8.$$.fragment,Ml),l1r=i(Ml),e5e=n(Ml,"P",{});var Q3t=s(e5e);i1r=r(Q3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q3t.forEach(t),d1r=i(Ml),an=n(Ml,"P",{});var f6=s(an);c1r=r(f6,"The model class to instantiate is selected based on the "),o5e=n(f6,"CODE",{});var W3t=s(o5e);f1r=r(W3t,"model_type"),W3t.forEach(t),m1r=r(f6,` property of the config object (either
passed as an argument or loaded from `),r5e=n(f6,"CODE",{});var H3t=s(r5e);g1r=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),h1r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(f6,"CODE",{});var U3t=s(t5e);p1r=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),u1r=r(f6,":"),f6.forEach(t),_1r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);Y7=n(te,"LI",{});var CSe=s(Y7);a5e=n(CSe,"STRONG",{});var J3t=s(a5e);b1r=r(J3t,"albert"),J3t.forEach(t),v1r=r(CSe," \u2014 "),RW=n(CSe,"A",{href:!0});var Y3t=s(RW);F1r=r(Y3t,"TFAlbertForSequenceClassification"),Y3t.forEach(t),T1r=r(CSe," (ALBERT model)"),CSe.forEach(t),M1r=i(te),K7=n(te,"LI",{});var wSe=s(K7);n5e=n(wSe,"STRONG",{});var K3t=s(n5e);E1r=r(K3t,"bert"),K3t.forEach(t),C1r=r(wSe," \u2014 "),BW=n(wSe,"A",{href:!0});var Z3t=s(BW);w1r=r(Z3t,"TFBertForSequenceClassification"),Z3t.forEach(t),A1r=r(wSe," (BERT model)"),wSe.forEach(t),y1r=i(te),Z7=n(te,"LI",{});var ASe=s(Z7);s5e=n(ASe,"STRONG",{});var evt=s(s5e);L1r=r(evt,"camembert"),evt.forEach(t),x1r=r(ASe," \u2014 "),PW=n(ASe,"A",{href:!0});var ovt=s(PW);$1r=r(ovt,"TFCamembertForSequenceClassification"),ovt.forEach(t),k1r=r(ASe," (CamemBERT model)"),ASe.forEach(t),S1r=i(te),eM=n(te,"LI",{});var ySe=s(eM);l5e=n(ySe,"STRONG",{});var rvt=s(l5e);R1r=r(rvt,"convbert"),rvt.forEach(t),B1r=r(ySe," \u2014 "),IW=n(ySe,"A",{href:!0});var tvt=s(IW);P1r=r(tvt,"TFConvBertForSequenceClassification"),tvt.forEach(t),I1r=r(ySe," (ConvBERT model)"),ySe.forEach(t),q1r=i(te),oM=n(te,"LI",{});var LSe=s(oM);i5e=n(LSe,"STRONG",{});var avt=s(i5e);N1r=r(avt,"ctrl"),avt.forEach(t),j1r=r(LSe," \u2014 "),qW=n(LSe,"A",{href:!0});var nvt=s(qW);D1r=r(nvt,"TFCTRLForSequenceClassification"),nvt.forEach(t),G1r=r(LSe," (CTRL model)"),LSe.forEach(t),O1r=i(te),rM=n(te,"LI",{});var xSe=s(rM);d5e=n(xSe,"STRONG",{});var svt=s(d5e);V1r=r(svt,"deberta"),svt.forEach(t),X1r=r(xSe," \u2014 "),NW=n(xSe,"A",{href:!0});var lvt=s(NW);z1r=r(lvt,"TFDebertaForSequenceClassification"),lvt.forEach(t),Q1r=r(xSe," (DeBERTa model)"),xSe.forEach(t),W1r=i(te),tM=n(te,"LI",{});var $Se=s(tM);c5e=n($Se,"STRONG",{});var ivt=s(c5e);H1r=r(ivt,"deberta-v2"),ivt.forEach(t),U1r=r($Se," \u2014 "),jW=n($Se,"A",{href:!0});var dvt=s(jW);J1r=r(dvt,"TFDebertaV2ForSequenceClassification"),dvt.forEach(t),Y1r=r($Se," (DeBERTa-v2 model)"),$Se.forEach(t),K1r=i(te),aM=n(te,"LI",{});var kSe=s(aM);f5e=n(kSe,"STRONG",{});var cvt=s(f5e);Z1r=r(cvt,"distilbert"),cvt.forEach(t),ebr=r(kSe," \u2014 "),DW=n(kSe,"A",{href:!0});var fvt=s(DW);obr=r(fvt,"TFDistilBertForSequenceClassification"),fvt.forEach(t),rbr=r(kSe," (DistilBERT model)"),kSe.forEach(t),tbr=i(te),nM=n(te,"LI",{});var SSe=s(nM);m5e=n(SSe,"STRONG",{});var mvt=s(m5e);abr=r(mvt,"electra"),mvt.forEach(t),nbr=r(SSe," \u2014 "),GW=n(SSe,"A",{href:!0});var gvt=s(GW);sbr=r(gvt,"TFElectraForSequenceClassification"),gvt.forEach(t),lbr=r(SSe," (ELECTRA model)"),SSe.forEach(t),ibr=i(te),sM=n(te,"LI",{});var RSe=s(sM);g5e=n(RSe,"STRONG",{});var hvt=s(g5e);dbr=r(hvt,"flaubert"),hvt.forEach(t),cbr=r(RSe," \u2014 "),OW=n(RSe,"A",{href:!0});var pvt=s(OW);fbr=r(pvt,"TFFlaubertForSequenceClassification"),pvt.forEach(t),mbr=r(RSe," (FlauBERT model)"),RSe.forEach(t),gbr=i(te),lM=n(te,"LI",{});var BSe=s(lM);h5e=n(BSe,"STRONG",{});var uvt=s(h5e);hbr=r(uvt,"funnel"),uvt.forEach(t),pbr=r(BSe," \u2014 "),VW=n(BSe,"A",{href:!0});var _vt=s(VW);ubr=r(_vt,"TFFunnelForSequenceClassification"),_vt.forEach(t),_br=r(BSe," (Funnel Transformer model)"),BSe.forEach(t),bbr=i(te),iM=n(te,"LI",{});var PSe=s(iM);p5e=n(PSe,"STRONG",{});var bvt=s(p5e);vbr=r(bvt,"gpt2"),bvt.forEach(t),Fbr=r(PSe," \u2014 "),XW=n(PSe,"A",{href:!0});var vvt=s(XW);Tbr=r(vvt,"TFGPT2ForSequenceClassification"),vvt.forEach(t),Mbr=r(PSe," (OpenAI GPT-2 model)"),PSe.forEach(t),Ebr=i(te),dM=n(te,"LI",{});var ISe=s(dM);u5e=n(ISe,"STRONG",{});var Fvt=s(u5e);Cbr=r(Fvt,"gptj"),Fvt.forEach(t),wbr=r(ISe," \u2014 "),zW=n(ISe,"A",{href:!0});var Tvt=s(zW);Abr=r(Tvt,"TFGPTJForSequenceClassification"),Tvt.forEach(t),ybr=r(ISe," (GPT-J model)"),ISe.forEach(t),Lbr=i(te),cM=n(te,"LI",{});var qSe=s(cM);_5e=n(qSe,"STRONG",{});var Mvt=s(_5e);xbr=r(Mvt,"layoutlm"),Mvt.forEach(t),$br=r(qSe," \u2014 "),QW=n(qSe,"A",{href:!0});var Evt=s(QW);kbr=r(Evt,"TFLayoutLMForSequenceClassification"),Evt.forEach(t),Sbr=r(qSe," (LayoutLM model)"),qSe.forEach(t),Rbr=i(te),fM=n(te,"LI",{});var NSe=s(fM);b5e=n(NSe,"STRONG",{});var Cvt=s(b5e);Bbr=r(Cvt,"longformer"),Cvt.forEach(t),Pbr=r(NSe," \u2014 "),WW=n(NSe,"A",{href:!0});var wvt=s(WW);Ibr=r(wvt,"TFLongformerForSequenceClassification"),wvt.forEach(t),qbr=r(NSe," (Longformer model)"),NSe.forEach(t),Nbr=i(te),mM=n(te,"LI",{});var jSe=s(mM);v5e=n(jSe,"STRONG",{});var Avt=s(v5e);jbr=r(Avt,"mobilebert"),Avt.forEach(t),Dbr=r(jSe," \u2014 "),HW=n(jSe,"A",{href:!0});var yvt=s(HW);Gbr=r(yvt,"TFMobileBertForSequenceClassification"),yvt.forEach(t),Obr=r(jSe," (MobileBERT model)"),jSe.forEach(t),Vbr=i(te),gM=n(te,"LI",{});var DSe=s(gM);F5e=n(DSe,"STRONG",{});var Lvt=s(F5e);Xbr=r(Lvt,"mpnet"),Lvt.forEach(t),zbr=r(DSe," \u2014 "),UW=n(DSe,"A",{href:!0});var xvt=s(UW);Qbr=r(xvt,"TFMPNetForSequenceClassification"),xvt.forEach(t),Wbr=r(DSe," (MPNet model)"),DSe.forEach(t),Hbr=i(te),hM=n(te,"LI",{});var GSe=s(hM);T5e=n(GSe,"STRONG",{});var $vt=s(T5e);Ubr=r($vt,"openai-gpt"),$vt.forEach(t),Jbr=r(GSe," \u2014 "),JW=n(GSe,"A",{href:!0});var kvt=s(JW);Ybr=r(kvt,"TFOpenAIGPTForSequenceClassification"),kvt.forEach(t),Kbr=r(GSe," (OpenAI GPT model)"),GSe.forEach(t),Zbr=i(te),pM=n(te,"LI",{});var OSe=s(pM);M5e=n(OSe,"STRONG",{});var Svt=s(M5e);e5r=r(Svt,"rembert"),Svt.forEach(t),o5r=r(OSe," \u2014 "),YW=n(OSe,"A",{href:!0});var Rvt=s(YW);r5r=r(Rvt,"TFRemBertForSequenceClassification"),Rvt.forEach(t),t5r=r(OSe," (RemBERT model)"),OSe.forEach(t),a5r=i(te),uM=n(te,"LI",{});var VSe=s(uM);E5e=n(VSe,"STRONG",{});var Bvt=s(E5e);n5r=r(Bvt,"roberta"),Bvt.forEach(t),s5r=r(VSe," \u2014 "),KW=n(VSe,"A",{href:!0});var Pvt=s(KW);l5r=r(Pvt,"TFRobertaForSequenceClassification"),Pvt.forEach(t),i5r=r(VSe," (RoBERTa model)"),VSe.forEach(t),d5r=i(te),_M=n(te,"LI",{});var XSe=s(_M);C5e=n(XSe,"STRONG",{});var Ivt=s(C5e);c5r=r(Ivt,"roformer"),Ivt.forEach(t),f5r=r(XSe," \u2014 "),ZW=n(XSe,"A",{href:!0});var qvt=s(ZW);m5r=r(qvt,"TFRoFormerForSequenceClassification"),qvt.forEach(t),g5r=r(XSe," (RoFormer model)"),XSe.forEach(t),h5r=i(te),bM=n(te,"LI",{});var zSe=s(bM);w5e=n(zSe,"STRONG",{});var Nvt=s(w5e);p5r=r(Nvt,"tapas"),Nvt.forEach(t),u5r=r(zSe," \u2014 "),eH=n(zSe,"A",{href:!0});var jvt=s(eH);_5r=r(jvt,"TFTapasForSequenceClassification"),jvt.forEach(t),b5r=r(zSe," (TAPAS model)"),zSe.forEach(t),v5r=i(te),vM=n(te,"LI",{});var QSe=s(vM);A5e=n(QSe,"STRONG",{});var Dvt=s(A5e);F5r=r(Dvt,"transfo-xl"),Dvt.forEach(t),T5r=r(QSe," \u2014 "),oH=n(QSe,"A",{href:!0});var Gvt=s(oH);M5r=r(Gvt,"TFTransfoXLForSequenceClassification"),Gvt.forEach(t),E5r=r(QSe," (Transformer-XL model)"),QSe.forEach(t),C5r=i(te),FM=n(te,"LI",{});var WSe=s(FM);y5e=n(WSe,"STRONG",{});var Ovt=s(y5e);w5r=r(Ovt,"xlm"),Ovt.forEach(t),A5r=r(WSe," \u2014 "),rH=n(WSe,"A",{href:!0});var Vvt=s(rH);y5r=r(Vvt,"TFXLMForSequenceClassification"),Vvt.forEach(t),L5r=r(WSe," (XLM model)"),WSe.forEach(t),x5r=i(te),TM=n(te,"LI",{});var HSe=s(TM);L5e=n(HSe,"STRONG",{});var Xvt=s(L5e);$5r=r(Xvt,"xlm-roberta"),Xvt.forEach(t),k5r=r(HSe," \u2014 "),tH=n(HSe,"A",{href:!0});var zvt=s(tH);S5r=r(zvt,"TFXLMRobertaForSequenceClassification"),zvt.forEach(t),R5r=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),B5r=i(te),MM=n(te,"LI",{});var USe=s(MM);x5e=n(USe,"STRONG",{});var Qvt=s(x5e);P5r=r(Qvt,"xlnet"),Qvt.forEach(t),I5r=r(USe," \u2014 "),aH=n(USe,"A",{href:!0});var Wvt=s(aH);q5r=r(Wvt,"TFXLNetForSequenceClassification"),Wvt.forEach(t),N5r=r(USe," (XLNet model)"),USe.forEach(t),te.forEach(t),j5r=i(Ml),T(EM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Fqe=i(f),nc=n(f,"H2",{class:!0});var Aje=s(nc);CM=n(Aje,"A",{id:!0,class:!0,href:!0});var Hvt=s(CM);$5e=n(Hvt,"SPAN",{});var Uvt=s($5e);T(u8.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),D5r=i(Aje),k5e=n(Aje,"SPAN",{});var Jvt=s(k5e);G5r=r(Jvt,"TFAutoModelForMultipleChoice"),Jvt.forEach(t),Aje.forEach(t),Tqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(_8.$$.fragment,El),O5r=i(El),sc=n(El,"P",{});var MZ=s(sc);V5r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nH=n(MZ,"A",{href:!0});var Yvt=s(nH);X5r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),z5r=r(MZ," class method or the "),sH=n(MZ,"A",{href:!0});var Kvt=s(sH);Q5r=r(Kvt,"from_config()"),Kvt.forEach(t),W5r=r(MZ,` class
method.`),MZ.forEach(t),H5r=i(El),b8=n(El,"P",{});var yje=s(b8);U5r=r(yje,"This class cannot be instantiated directly using "),S5e=n(yje,"CODE",{});var Zvt=s(S5e);J5r=r(Zvt,"__init__()"),Zvt.forEach(t),Y5r=r(yje," (throws an error)."),yje.forEach(t),K5r=i(El),St=n(El,"DIV",{class:!0});var m6=s(St);T(v8.$$.fragment,m6),Z5r=i(m6),R5e=n(m6,"P",{});var eFt=s(R5e);e3r=r(eFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eFt.forEach(t),o3r=i(m6),lc=n(m6,"P",{});var EZ=s(lc);r3r=r(EZ,`Note:
Loading a model from its configuration file does `),B5e=n(EZ,"STRONG",{});var oFt=s(B5e);t3r=r(oFt,"not"),oFt.forEach(t),a3r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(EZ,"A",{href:!0});var rFt=s(lH);n3r=r(rFt,"from_pretrained()"),rFt.forEach(t),s3r=r(EZ," to load the model weights."),EZ.forEach(t),l3r=i(m6),T(wM.$$.fragment,m6),m6.forEach(t),i3r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(F8.$$.fragment,Cl),d3r=i(Cl),P5e=n(Cl,"P",{});var tFt=s(P5e);c3r=r(tFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tFt.forEach(t),f3r=i(Cl),nn=n(Cl,"P",{});var g6=s(nn);m3r=r(g6,"The model class to instantiate is selected based on the "),I5e=n(g6,"CODE",{});var aFt=s(I5e);g3r=r(aFt,"model_type"),aFt.forEach(t),h3r=r(g6,` property of the config object (either
passed as an argument or loaded from `),q5e=n(g6,"CODE",{});var nFt=s(q5e);p3r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),u3r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(g6,"CODE",{});var sFt=s(N5e);_3r=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),b3r=r(g6,":"),g6.forEach(t),v3r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);AM=n(_e,"LI",{});var JSe=s(AM);j5e=n(JSe,"STRONG",{});var lFt=s(j5e);F3r=r(lFt,"albert"),lFt.forEach(t),T3r=r(JSe," \u2014 "),iH=n(JSe,"A",{href:!0});var iFt=s(iH);M3r=r(iFt,"TFAlbertForMultipleChoice"),iFt.forEach(t),E3r=r(JSe," (ALBERT model)"),JSe.forEach(t),C3r=i(_e),yM=n(_e,"LI",{});var YSe=s(yM);D5e=n(YSe,"STRONG",{});var dFt=s(D5e);w3r=r(dFt,"bert"),dFt.forEach(t),A3r=r(YSe," \u2014 "),dH=n(YSe,"A",{href:!0});var cFt=s(dH);y3r=r(cFt,"TFBertForMultipleChoice"),cFt.forEach(t),L3r=r(YSe," (BERT model)"),YSe.forEach(t),x3r=i(_e),LM=n(_e,"LI",{});var KSe=s(LM);G5e=n(KSe,"STRONG",{});var fFt=s(G5e);$3r=r(fFt,"camembert"),fFt.forEach(t),k3r=r(KSe," \u2014 "),cH=n(KSe,"A",{href:!0});var mFt=s(cH);S3r=r(mFt,"TFCamembertForMultipleChoice"),mFt.forEach(t),R3r=r(KSe," (CamemBERT model)"),KSe.forEach(t),B3r=i(_e),xM=n(_e,"LI",{});var ZSe=s(xM);O5e=n(ZSe,"STRONG",{});var gFt=s(O5e);P3r=r(gFt,"convbert"),gFt.forEach(t),I3r=r(ZSe," \u2014 "),fH=n(ZSe,"A",{href:!0});var hFt=s(fH);q3r=r(hFt,"TFConvBertForMultipleChoice"),hFt.forEach(t),N3r=r(ZSe," (ConvBERT model)"),ZSe.forEach(t),j3r=i(_e),$M=n(_e,"LI",{});var eRe=s($M);V5e=n(eRe,"STRONG",{});var pFt=s(V5e);D3r=r(pFt,"distilbert"),pFt.forEach(t),G3r=r(eRe," \u2014 "),mH=n(eRe,"A",{href:!0});var uFt=s(mH);O3r=r(uFt,"TFDistilBertForMultipleChoice"),uFt.forEach(t),V3r=r(eRe," (DistilBERT model)"),eRe.forEach(t),X3r=i(_e),kM=n(_e,"LI",{});var oRe=s(kM);X5e=n(oRe,"STRONG",{});var _Ft=s(X5e);z3r=r(_Ft,"electra"),_Ft.forEach(t),Q3r=r(oRe," \u2014 "),gH=n(oRe,"A",{href:!0});var bFt=s(gH);W3r=r(bFt,"TFElectraForMultipleChoice"),bFt.forEach(t),H3r=r(oRe," (ELECTRA model)"),oRe.forEach(t),U3r=i(_e),SM=n(_e,"LI",{});var rRe=s(SM);z5e=n(rRe,"STRONG",{});var vFt=s(z5e);J3r=r(vFt,"flaubert"),vFt.forEach(t),Y3r=r(rRe," \u2014 "),hH=n(rRe,"A",{href:!0});var FFt=s(hH);K3r=r(FFt,"TFFlaubertForMultipleChoice"),FFt.forEach(t),Z3r=r(rRe," (FlauBERT model)"),rRe.forEach(t),evr=i(_e),RM=n(_e,"LI",{});var tRe=s(RM);Q5e=n(tRe,"STRONG",{});var TFt=s(Q5e);ovr=r(TFt,"funnel"),TFt.forEach(t),rvr=r(tRe," \u2014 "),pH=n(tRe,"A",{href:!0});var MFt=s(pH);tvr=r(MFt,"TFFunnelForMultipleChoice"),MFt.forEach(t),avr=r(tRe," (Funnel Transformer model)"),tRe.forEach(t),nvr=i(_e),BM=n(_e,"LI",{});var aRe=s(BM);W5e=n(aRe,"STRONG",{});var EFt=s(W5e);svr=r(EFt,"longformer"),EFt.forEach(t),lvr=r(aRe," \u2014 "),uH=n(aRe,"A",{href:!0});var CFt=s(uH);ivr=r(CFt,"TFLongformerForMultipleChoice"),CFt.forEach(t),dvr=r(aRe," (Longformer model)"),aRe.forEach(t),cvr=i(_e),PM=n(_e,"LI",{});var nRe=s(PM);H5e=n(nRe,"STRONG",{});var wFt=s(H5e);fvr=r(wFt,"mobilebert"),wFt.forEach(t),mvr=r(nRe," \u2014 "),_H=n(nRe,"A",{href:!0});var AFt=s(_H);gvr=r(AFt,"TFMobileBertForMultipleChoice"),AFt.forEach(t),hvr=r(nRe," (MobileBERT model)"),nRe.forEach(t),pvr=i(_e),IM=n(_e,"LI",{});var sRe=s(IM);U5e=n(sRe,"STRONG",{});var yFt=s(U5e);uvr=r(yFt,"mpnet"),yFt.forEach(t),_vr=r(sRe," \u2014 "),bH=n(sRe,"A",{href:!0});var LFt=s(bH);bvr=r(LFt,"TFMPNetForMultipleChoice"),LFt.forEach(t),vvr=r(sRe," (MPNet model)"),sRe.forEach(t),Fvr=i(_e),qM=n(_e,"LI",{});var lRe=s(qM);J5e=n(lRe,"STRONG",{});var xFt=s(J5e);Tvr=r(xFt,"rembert"),xFt.forEach(t),Mvr=r(lRe," \u2014 "),vH=n(lRe,"A",{href:!0});var $Ft=s(vH);Evr=r($Ft,"TFRemBertForMultipleChoice"),$Ft.forEach(t),Cvr=r(lRe," (RemBERT model)"),lRe.forEach(t),wvr=i(_e),NM=n(_e,"LI",{});var iRe=s(NM);Y5e=n(iRe,"STRONG",{});var kFt=s(Y5e);Avr=r(kFt,"roberta"),kFt.forEach(t),yvr=r(iRe," \u2014 "),FH=n(iRe,"A",{href:!0});var SFt=s(FH);Lvr=r(SFt,"TFRobertaForMultipleChoice"),SFt.forEach(t),xvr=r(iRe," (RoBERTa model)"),iRe.forEach(t),$vr=i(_e),jM=n(_e,"LI",{});var dRe=s(jM);K5e=n(dRe,"STRONG",{});var RFt=s(K5e);kvr=r(RFt,"roformer"),RFt.forEach(t),Svr=r(dRe," \u2014 "),TH=n(dRe,"A",{href:!0});var BFt=s(TH);Rvr=r(BFt,"TFRoFormerForMultipleChoice"),BFt.forEach(t),Bvr=r(dRe," (RoFormer model)"),dRe.forEach(t),Pvr=i(_e),DM=n(_e,"LI",{});var cRe=s(DM);Z5e=n(cRe,"STRONG",{});var PFt=s(Z5e);Ivr=r(PFt,"xlm"),PFt.forEach(t),qvr=r(cRe," \u2014 "),MH=n(cRe,"A",{href:!0});var IFt=s(MH);Nvr=r(IFt,"TFXLMForMultipleChoice"),IFt.forEach(t),jvr=r(cRe," (XLM model)"),cRe.forEach(t),Dvr=i(_e),GM=n(_e,"LI",{});var fRe=s(GM);e3e=n(fRe,"STRONG",{});var qFt=s(e3e);Gvr=r(qFt,"xlm-roberta"),qFt.forEach(t),Ovr=r(fRe," \u2014 "),EH=n(fRe,"A",{href:!0});var NFt=s(EH);Vvr=r(NFt,"TFXLMRobertaForMultipleChoice"),NFt.forEach(t),Xvr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),zvr=i(_e),OM=n(_e,"LI",{});var mRe=s(OM);o3e=n(mRe,"STRONG",{});var jFt=s(o3e);Qvr=r(jFt,"xlnet"),jFt.forEach(t),Wvr=r(mRe," \u2014 "),CH=n(mRe,"A",{href:!0});var DFt=s(CH);Hvr=r(DFt,"TFXLNetForMultipleChoice"),DFt.forEach(t),Uvr=r(mRe," (XLNet model)"),mRe.forEach(t),_e.forEach(t),Jvr=i(Cl),T(VM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Mqe=i(f),ic=n(f,"H2",{class:!0});var Lje=s(ic);XM=n(Lje,"A",{id:!0,class:!0,href:!0});var GFt=s(XM);r3e=n(GFt,"SPAN",{});var OFt=s(r3e);T(T8.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),Yvr=i(Lje),t3e=n(Lje,"SPAN",{});var VFt=s(t3e);Kvr=r(VFt,"TFAutoModelForNextSentencePrediction"),VFt.forEach(t),Lje.forEach(t),Eqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(M8.$$.fragment,wl),Zvr=i(wl),dc=n(wl,"P",{});var CZ=s(dc);eFr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wH=n(CZ,"A",{href:!0});var XFt=s(wH);oFr=r(XFt,"from_pretrained()"),XFt.forEach(t),rFr=r(CZ," class method or the "),AH=n(CZ,"A",{href:!0});var zFt=s(AH);tFr=r(zFt,"from_config()"),zFt.forEach(t),aFr=r(CZ,` class
method.`),CZ.forEach(t),nFr=i(wl),E8=n(wl,"P",{});var xje=s(E8);sFr=r(xje,"This class cannot be instantiated directly using "),a3e=n(xje,"CODE",{});var QFt=s(a3e);lFr=r(QFt,"__init__()"),QFt.forEach(t),iFr=r(xje," (throws an error)."),xje.forEach(t),dFr=i(wl),Rt=n(wl,"DIV",{class:!0});var h6=s(Rt);T(C8.$$.fragment,h6),cFr=i(h6),n3e=n(h6,"P",{});var WFt=s(n3e);fFr=r(WFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WFt.forEach(t),mFr=i(h6),cc=n(h6,"P",{});var wZ=s(cc);gFr=r(wZ,`Note:
Loading a model from its configuration file does `),s3e=n(wZ,"STRONG",{});var HFt=s(s3e);hFr=r(HFt,"not"),HFt.forEach(t),pFr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(wZ,"A",{href:!0});var UFt=s(yH);uFr=r(UFt,"from_pretrained()"),UFt.forEach(t),_Fr=r(wZ," to load the model weights."),wZ.forEach(t),bFr=i(h6),T(zM.$$.fragment,h6),h6.forEach(t),vFr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(w8.$$.fragment,Al),FFr=i(Al),l3e=n(Al,"P",{});var JFt=s(l3e);TFr=r(JFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JFt.forEach(t),MFr=i(Al),sn=n(Al,"P",{});var p6=s(sn);EFr=r(p6,"The model class to instantiate is selected based on the "),i3e=n(p6,"CODE",{});var YFt=s(i3e);CFr=r(YFt,"model_type"),YFt.forEach(t),wFr=r(p6,` property of the config object (either
passed as an argument or loaded from `),d3e=n(p6,"CODE",{});var KFt=s(d3e);AFr=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),yFr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(p6,"CODE",{});var ZFt=s(c3e);LFr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),xFr=r(p6,":"),p6.forEach(t),$Fr=i(Al),A8=n(Al,"UL",{});var $je=s(A8);QM=n($je,"LI",{});var gRe=s(QM);f3e=n(gRe,"STRONG",{});var eTt=s(f3e);kFr=r(eTt,"bert"),eTt.forEach(t),SFr=r(gRe," \u2014 "),LH=n(gRe,"A",{href:!0});var oTt=s(LH);RFr=r(oTt,"TFBertForNextSentencePrediction"),oTt.forEach(t),BFr=r(gRe," (BERT model)"),gRe.forEach(t),PFr=i($je),WM=n($je,"LI",{});var hRe=s(WM);m3e=n(hRe,"STRONG",{});var rTt=s(m3e);IFr=r(rTt,"mobilebert"),rTt.forEach(t),qFr=r(hRe," \u2014 "),xH=n(hRe,"A",{href:!0});var tTt=s(xH);NFr=r(tTt,"TFMobileBertForNextSentencePrediction"),tTt.forEach(t),jFr=r(hRe," (MobileBERT model)"),hRe.forEach(t),$je.forEach(t),DFr=i(Al),T(HM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Cqe=i(f),fc=n(f,"H2",{class:!0});var kje=s(fc);UM=n(kje,"A",{id:!0,class:!0,href:!0});var aTt=s(UM);g3e=n(aTt,"SPAN",{});var nTt=s(g3e);T(y8.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),GFr=i(kje),h3e=n(kje,"SPAN",{});var sTt=s(h3e);OFr=r(sTt,"TFAutoModelForTableQuestionAnswering"),sTt.forEach(t),kje.forEach(t),wqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(L8.$$.fragment,yl),VFr=i(yl),mc=n(yl,"P",{});var AZ=s(mc);XFr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$H=n(AZ,"A",{href:!0});var lTt=s($H);zFr=r(lTt,"from_pretrained()"),lTt.forEach(t),QFr=r(AZ," class method or the "),kH=n(AZ,"A",{href:!0});var iTt=s(kH);WFr=r(iTt,"from_config()"),iTt.forEach(t),HFr=r(AZ,` class
method.`),AZ.forEach(t),UFr=i(yl),x8=n(yl,"P",{});var Sje=s(x8);JFr=r(Sje,"This class cannot be instantiated directly using "),p3e=n(Sje,"CODE",{});var dTt=s(p3e);YFr=r(dTt,"__init__()"),dTt.forEach(t),KFr=r(Sje," (throws an error)."),Sje.forEach(t),ZFr=i(yl),Bt=n(yl,"DIV",{class:!0});var u6=s(Bt);T($8.$$.fragment,u6),eTr=i(u6),u3e=n(u6,"P",{});var cTt=s(u3e);oTr=r(cTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cTt.forEach(t),rTr=i(u6),gc=n(u6,"P",{});var yZ=s(gc);tTr=r(yZ,`Note:
Loading a model from its configuration file does `),_3e=n(yZ,"STRONG",{});var fTt=s(_3e);aTr=r(fTt,"not"),fTt.forEach(t),nTr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(yZ,"A",{href:!0});var mTt=s(SH);sTr=r(mTt,"from_pretrained()"),mTt.forEach(t),lTr=r(yZ," to load the model weights."),yZ.forEach(t),iTr=i(u6),T(JM.$$.fragment,u6),u6.forEach(t),dTr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(k8.$$.fragment,Ll),cTr=i(Ll),b3e=n(Ll,"P",{});var gTt=s(b3e);fTr=r(gTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gTt.forEach(t),mTr=i(Ll),ln=n(Ll,"P",{});var _6=s(ln);gTr=r(_6,"The model class to instantiate is selected based on the "),v3e=n(_6,"CODE",{});var hTt=s(v3e);hTr=r(hTt,"model_type"),hTt.forEach(t),pTr=r(_6,` property of the config object (either
passed as an argument or loaded from `),F3e=n(_6,"CODE",{});var pTt=s(F3e);uTr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),_Tr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(_6,"CODE",{});var uTt=s(T3e);bTr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),vTr=r(_6,":"),_6.forEach(t),FTr=i(Ll),M3e=n(Ll,"UL",{});var _Tt=s(M3e);YM=n(_Tt,"LI",{});var pRe=s(YM);E3e=n(pRe,"STRONG",{});var bTt=s(E3e);TTr=r(bTt,"tapas"),bTt.forEach(t),MTr=r(pRe," \u2014 "),RH=n(pRe,"A",{href:!0});var vTt=s(RH);ETr=r(vTt,"TFTapasForQuestionAnswering"),vTt.forEach(t),CTr=r(pRe," (TAPAS model)"),pRe.forEach(t),_Tt.forEach(t),wTr=i(Ll),T(KM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Aqe=i(f),hc=n(f,"H2",{class:!0});var Rje=s(hc);ZM=n(Rje,"A",{id:!0,class:!0,href:!0});var FTt=s(ZM);C3e=n(FTt,"SPAN",{});var TTt=s(C3e);T(S8.$$.fragment,TTt),TTt.forEach(t),FTt.forEach(t),ATr=i(Rje),w3e=n(Rje,"SPAN",{});var MTt=s(w3e);yTr=r(MTt,"TFAutoModelForTokenClassification"),MTt.forEach(t),Rje.forEach(t),yqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(R8.$$.fragment,xl),LTr=i(xl),pc=n(xl,"P",{});var LZ=s(pc);xTr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BH=n(LZ,"A",{href:!0});var ETt=s(BH);$Tr=r(ETt,"from_pretrained()"),ETt.forEach(t),kTr=r(LZ," class method or the "),PH=n(LZ,"A",{href:!0});var CTt=s(PH);STr=r(CTt,"from_config()"),CTt.forEach(t),RTr=r(LZ,` class
method.`),LZ.forEach(t),BTr=i(xl),B8=n(xl,"P",{});var Bje=s(B8);PTr=r(Bje,"This class cannot be instantiated directly using "),A3e=n(Bje,"CODE",{});var wTt=s(A3e);ITr=r(wTt,"__init__()"),wTt.forEach(t),qTr=r(Bje," (throws an error)."),Bje.forEach(t),NTr=i(xl),Pt=n(xl,"DIV",{class:!0});var b6=s(Pt);T(P8.$$.fragment,b6),jTr=i(b6),y3e=n(b6,"P",{});var ATt=s(y3e);DTr=r(ATt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ATt.forEach(t),GTr=i(b6),uc=n(b6,"P",{});var xZ=s(uc);OTr=r(xZ,`Note:
Loading a model from its configuration file does `),L3e=n(xZ,"STRONG",{});var yTt=s(L3e);VTr=r(yTt,"not"),yTt.forEach(t),XTr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(xZ,"A",{href:!0});var LTt=s(IH);zTr=r(LTt,"from_pretrained()"),LTt.forEach(t),QTr=r(xZ," to load the model weights."),xZ.forEach(t),WTr=i(b6),T(e4.$$.fragment,b6),b6.forEach(t),HTr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(I8.$$.fragment,$l),UTr=i($l),x3e=n($l,"P",{});var xTt=s(x3e);JTr=r(xTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xTt.forEach(t),YTr=i($l),dn=n($l,"P",{});var v6=s(dn);KTr=r(v6,"The model class to instantiate is selected based on the "),$3e=n(v6,"CODE",{});var $Tt=s($3e);ZTr=r($Tt,"model_type"),$Tt.forEach(t),e7r=r(v6,` property of the config object (either
passed as an argument or loaded from `),k3e=n(v6,"CODE",{});var kTt=s(k3e);o7r=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),r7r=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=n(v6,"CODE",{});var STt=s(S3e);t7r=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),a7r=r(v6,":"),v6.forEach(t),n7r=i($l),de=n($l,"UL",{});var me=s(de);o4=n(me,"LI",{});var uRe=s(o4);R3e=n(uRe,"STRONG",{});var RTt=s(R3e);s7r=r(RTt,"albert"),RTt.forEach(t),l7r=r(uRe," \u2014 "),qH=n(uRe,"A",{href:!0});var BTt=s(qH);i7r=r(BTt,"TFAlbertForTokenClassification"),BTt.forEach(t),d7r=r(uRe," (ALBERT model)"),uRe.forEach(t),c7r=i(me),r4=n(me,"LI",{});var _Re=s(r4);B3e=n(_Re,"STRONG",{});var PTt=s(B3e);f7r=r(PTt,"bert"),PTt.forEach(t),m7r=r(_Re," \u2014 "),NH=n(_Re,"A",{href:!0});var ITt=s(NH);g7r=r(ITt,"TFBertForTokenClassification"),ITt.forEach(t),h7r=r(_Re," (BERT model)"),_Re.forEach(t),p7r=i(me),t4=n(me,"LI",{});var bRe=s(t4);P3e=n(bRe,"STRONG",{});var qTt=s(P3e);u7r=r(qTt,"camembert"),qTt.forEach(t),_7r=r(bRe," \u2014 "),jH=n(bRe,"A",{href:!0});var NTt=s(jH);b7r=r(NTt,"TFCamembertForTokenClassification"),NTt.forEach(t),v7r=r(bRe," (CamemBERT model)"),bRe.forEach(t),F7r=i(me),a4=n(me,"LI",{});var vRe=s(a4);I3e=n(vRe,"STRONG",{});var jTt=s(I3e);T7r=r(jTt,"convbert"),jTt.forEach(t),M7r=r(vRe," \u2014 "),DH=n(vRe,"A",{href:!0});var DTt=s(DH);E7r=r(DTt,"TFConvBertForTokenClassification"),DTt.forEach(t),C7r=r(vRe," (ConvBERT model)"),vRe.forEach(t),w7r=i(me),n4=n(me,"LI",{});var FRe=s(n4);q3e=n(FRe,"STRONG",{});var GTt=s(q3e);A7r=r(GTt,"deberta"),GTt.forEach(t),y7r=r(FRe," \u2014 "),GH=n(FRe,"A",{href:!0});var OTt=s(GH);L7r=r(OTt,"TFDebertaForTokenClassification"),OTt.forEach(t),x7r=r(FRe," (DeBERTa model)"),FRe.forEach(t),$7r=i(me),s4=n(me,"LI",{});var TRe=s(s4);N3e=n(TRe,"STRONG",{});var VTt=s(N3e);k7r=r(VTt,"deberta-v2"),VTt.forEach(t),S7r=r(TRe," \u2014 "),OH=n(TRe,"A",{href:!0});var XTt=s(OH);R7r=r(XTt,"TFDebertaV2ForTokenClassification"),XTt.forEach(t),B7r=r(TRe," (DeBERTa-v2 model)"),TRe.forEach(t),P7r=i(me),l4=n(me,"LI",{});var MRe=s(l4);j3e=n(MRe,"STRONG",{});var zTt=s(j3e);I7r=r(zTt,"distilbert"),zTt.forEach(t),q7r=r(MRe," \u2014 "),VH=n(MRe,"A",{href:!0});var QTt=s(VH);N7r=r(QTt,"TFDistilBertForTokenClassification"),QTt.forEach(t),j7r=r(MRe," (DistilBERT model)"),MRe.forEach(t),D7r=i(me),i4=n(me,"LI",{});var ERe=s(i4);D3e=n(ERe,"STRONG",{});var WTt=s(D3e);G7r=r(WTt,"electra"),WTt.forEach(t),O7r=r(ERe," \u2014 "),XH=n(ERe,"A",{href:!0});var HTt=s(XH);V7r=r(HTt,"TFElectraForTokenClassification"),HTt.forEach(t),X7r=r(ERe," (ELECTRA model)"),ERe.forEach(t),z7r=i(me),d4=n(me,"LI",{});var CRe=s(d4);G3e=n(CRe,"STRONG",{});var UTt=s(G3e);Q7r=r(UTt,"flaubert"),UTt.forEach(t),W7r=r(CRe," \u2014 "),zH=n(CRe,"A",{href:!0});var JTt=s(zH);H7r=r(JTt,"TFFlaubertForTokenClassification"),JTt.forEach(t),U7r=r(CRe," (FlauBERT model)"),CRe.forEach(t),J7r=i(me),c4=n(me,"LI",{});var wRe=s(c4);O3e=n(wRe,"STRONG",{});var YTt=s(O3e);Y7r=r(YTt,"funnel"),YTt.forEach(t),K7r=r(wRe," \u2014 "),QH=n(wRe,"A",{href:!0});var KTt=s(QH);Z7r=r(KTt,"TFFunnelForTokenClassification"),KTt.forEach(t),eMr=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),oMr=i(me),f4=n(me,"LI",{});var ARe=s(f4);V3e=n(ARe,"STRONG",{});var ZTt=s(V3e);rMr=r(ZTt,"layoutlm"),ZTt.forEach(t),tMr=r(ARe," \u2014 "),WH=n(ARe,"A",{href:!0});var e7t=s(WH);aMr=r(e7t,"TFLayoutLMForTokenClassification"),e7t.forEach(t),nMr=r(ARe," (LayoutLM model)"),ARe.forEach(t),sMr=i(me),m4=n(me,"LI",{});var yRe=s(m4);X3e=n(yRe,"STRONG",{});var o7t=s(X3e);lMr=r(o7t,"longformer"),o7t.forEach(t),iMr=r(yRe," \u2014 "),HH=n(yRe,"A",{href:!0});var r7t=s(HH);dMr=r(r7t,"TFLongformerForTokenClassification"),r7t.forEach(t),cMr=r(yRe," (Longformer model)"),yRe.forEach(t),fMr=i(me),g4=n(me,"LI",{});var LRe=s(g4);z3e=n(LRe,"STRONG",{});var t7t=s(z3e);mMr=r(t7t,"mobilebert"),t7t.forEach(t),gMr=r(LRe," \u2014 "),UH=n(LRe,"A",{href:!0});var a7t=s(UH);hMr=r(a7t,"TFMobileBertForTokenClassification"),a7t.forEach(t),pMr=r(LRe," (MobileBERT model)"),LRe.forEach(t),uMr=i(me),h4=n(me,"LI",{});var xRe=s(h4);Q3e=n(xRe,"STRONG",{});var n7t=s(Q3e);_Mr=r(n7t,"mpnet"),n7t.forEach(t),bMr=r(xRe," \u2014 "),JH=n(xRe,"A",{href:!0});var s7t=s(JH);vMr=r(s7t,"TFMPNetForTokenClassification"),s7t.forEach(t),FMr=r(xRe," (MPNet model)"),xRe.forEach(t),TMr=i(me),p4=n(me,"LI",{});var $Re=s(p4);W3e=n($Re,"STRONG",{});var l7t=s(W3e);MMr=r(l7t,"rembert"),l7t.forEach(t),EMr=r($Re," \u2014 "),YH=n($Re,"A",{href:!0});var i7t=s(YH);CMr=r(i7t,"TFRemBertForTokenClassification"),i7t.forEach(t),wMr=r($Re," (RemBERT model)"),$Re.forEach(t),AMr=i(me),u4=n(me,"LI",{});var kRe=s(u4);H3e=n(kRe,"STRONG",{});var d7t=s(H3e);yMr=r(d7t,"roberta"),d7t.forEach(t),LMr=r(kRe," \u2014 "),KH=n(kRe,"A",{href:!0});var c7t=s(KH);xMr=r(c7t,"TFRobertaForTokenClassification"),c7t.forEach(t),$Mr=r(kRe," (RoBERTa model)"),kRe.forEach(t),kMr=i(me),_4=n(me,"LI",{});var SRe=s(_4);U3e=n(SRe,"STRONG",{});var f7t=s(U3e);SMr=r(f7t,"roformer"),f7t.forEach(t),RMr=r(SRe," \u2014 "),ZH=n(SRe,"A",{href:!0});var m7t=s(ZH);BMr=r(m7t,"TFRoFormerForTokenClassification"),m7t.forEach(t),PMr=r(SRe," (RoFormer model)"),SRe.forEach(t),IMr=i(me),b4=n(me,"LI",{});var RRe=s(b4);J3e=n(RRe,"STRONG",{});var g7t=s(J3e);qMr=r(g7t,"xlm"),g7t.forEach(t),NMr=r(RRe," \u2014 "),eU=n(RRe,"A",{href:!0});var h7t=s(eU);jMr=r(h7t,"TFXLMForTokenClassification"),h7t.forEach(t),DMr=r(RRe," (XLM model)"),RRe.forEach(t),GMr=i(me),v4=n(me,"LI",{});var BRe=s(v4);Y3e=n(BRe,"STRONG",{});var p7t=s(Y3e);OMr=r(p7t,"xlm-roberta"),p7t.forEach(t),VMr=r(BRe," \u2014 "),oU=n(BRe,"A",{href:!0});var u7t=s(oU);XMr=r(u7t,"TFXLMRobertaForTokenClassification"),u7t.forEach(t),zMr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),QMr=i(me),F4=n(me,"LI",{});var PRe=s(F4);K3e=n(PRe,"STRONG",{});var _7t=s(K3e);WMr=r(_7t,"xlnet"),_7t.forEach(t),HMr=r(PRe," \u2014 "),rU=n(PRe,"A",{href:!0});var b7t=s(rU);UMr=r(b7t,"TFXLNetForTokenClassification"),b7t.forEach(t),JMr=r(PRe," (XLNet model)"),PRe.forEach(t),me.forEach(t),YMr=i($l),T(T4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Lqe=i(f),_c=n(f,"H2",{class:!0});var Pje=s(_c);M4=n(Pje,"A",{id:!0,class:!0,href:!0});var v7t=s(M4);Z3e=n(v7t,"SPAN",{});var F7t=s(Z3e);T(q8.$$.fragment,F7t),F7t.forEach(t),v7t.forEach(t),KMr=i(Pje),eve=n(Pje,"SPAN",{});var T7t=s(eve);ZMr=r(T7t,"TFAutoModelForQuestionAnswering"),T7t.forEach(t),Pje.forEach(t),xqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(N8.$$.fragment,kl),e4r=i(kl),bc=n(kl,"P",{});var $Z=s(bc);o4r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tU=n($Z,"A",{href:!0});var M7t=s(tU);r4r=r(M7t,"from_pretrained()"),M7t.forEach(t),t4r=r($Z," class method or the "),aU=n($Z,"A",{href:!0});var E7t=s(aU);a4r=r(E7t,"from_config()"),E7t.forEach(t),n4r=r($Z,` class
method.`),$Z.forEach(t),s4r=i(kl),j8=n(kl,"P",{});var Ije=s(j8);l4r=r(Ije,"This class cannot be instantiated directly using "),ove=n(Ije,"CODE",{});var C7t=s(ove);i4r=r(C7t,"__init__()"),C7t.forEach(t),d4r=r(Ije," (throws an error)."),Ije.forEach(t),c4r=i(kl),It=n(kl,"DIV",{class:!0});var F6=s(It);T(D8.$$.fragment,F6),f4r=i(F6),rve=n(F6,"P",{});var w7t=s(rve);m4r=r(w7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w7t.forEach(t),g4r=i(F6),vc=n(F6,"P",{});var kZ=s(vc);h4r=r(kZ,`Note:
Loading a model from its configuration file does `),tve=n(kZ,"STRONG",{});var A7t=s(tve);p4r=r(A7t,"not"),A7t.forEach(t),u4r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(kZ,"A",{href:!0});var y7t=s(nU);_4r=r(y7t,"from_pretrained()"),y7t.forEach(t),b4r=r(kZ," to load the model weights."),kZ.forEach(t),v4r=i(F6),T(E4.$$.fragment,F6),F6.forEach(t),F4r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(G8.$$.fragment,Sl),T4r=i(Sl),ave=n(Sl,"P",{});var L7t=s(ave);M4r=r(L7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L7t.forEach(t),E4r=i(Sl),cn=n(Sl,"P",{});var T6=s(cn);C4r=r(T6,"The model class to instantiate is selected based on the "),nve=n(T6,"CODE",{});var x7t=s(nve);w4r=r(x7t,"model_type"),x7t.forEach(t),A4r=r(T6,` property of the config object (either
passed as an argument or loaded from `),sve=n(T6,"CODE",{});var $7t=s(sve);y4r=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),L4r=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(T6,"CODE",{});var k7t=s(lve);x4r=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),$4r=r(T6,":"),T6.forEach(t),k4r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);C4=n(ge,"LI",{});var IRe=s(C4);ive=n(IRe,"STRONG",{});var S7t=s(ive);S4r=r(S7t,"albert"),S7t.forEach(t),R4r=r(IRe," \u2014 "),sU=n(IRe,"A",{href:!0});var R7t=s(sU);B4r=r(R7t,"TFAlbertForQuestionAnswering"),R7t.forEach(t),P4r=r(IRe," (ALBERT model)"),IRe.forEach(t),I4r=i(ge),w4=n(ge,"LI",{});var qRe=s(w4);dve=n(qRe,"STRONG",{});var B7t=s(dve);q4r=r(B7t,"bert"),B7t.forEach(t),N4r=r(qRe," \u2014 "),lU=n(qRe,"A",{href:!0});var P7t=s(lU);j4r=r(P7t,"TFBertForQuestionAnswering"),P7t.forEach(t),D4r=r(qRe," (BERT model)"),qRe.forEach(t),G4r=i(ge),A4=n(ge,"LI",{});var NRe=s(A4);cve=n(NRe,"STRONG",{});var I7t=s(cve);O4r=r(I7t,"camembert"),I7t.forEach(t),V4r=r(NRe," \u2014 "),iU=n(NRe,"A",{href:!0});var q7t=s(iU);X4r=r(q7t,"TFCamembertForQuestionAnswering"),q7t.forEach(t),z4r=r(NRe," (CamemBERT model)"),NRe.forEach(t),Q4r=i(ge),y4=n(ge,"LI",{});var jRe=s(y4);fve=n(jRe,"STRONG",{});var N7t=s(fve);W4r=r(N7t,"convbert"),N7t.forEach(t),H4r=r(jRe," \u2014 "),dU=n(jRe,"A",{href:!0});var j7t=s(dU);U4r=r(j7t,"TFConvBertForQuestionAnswering"),j7t.forEach(t),J4r=r(jRe," (ConvBERT model)"),jRe.forEach(t),Y4r=i(ge),L4=n(ge,"LI",{});var DRe=s(L4);mve=n(DRe,"STRONG",{});var D7t=s(mve);K4r=r(D7t,"deberta"),D7t.forEach(t),Z4r=r(DRe," \u2014 "),cU=n(DRe,"A",{href:!0});var G7t=s(cU);eEr=r(G7t,"TFDebertaForQuestionAnswering"),G7t.forEach(t),oEr=r(DRe," (DeBERTa model)"),DRe.forEach(t),rEr=i(ge),x4=n(ge,"LI",{});var GRe=s(x4);gve=n(GRe,"STRONG",{});var O7t=s(gve);tEr=r(O7t,"deberta-v2"),O7t.forEach(t),aEr=r(GRe," \u2014 "),fU=n(GRe,"A",{href:!0});var V7t=s(fU);nEr=r(V7t,"TFDebertaV2ForQuestionAnswering"),V7t.forEach(t),sEr=r(GRe," (DeBERTa-v2 model)"),GRe.forEach(t),lEr=i(ge),$4=n(ge,"LI",{});var ORe=s($4);hve=n(ORe,"STRONG",{});var X7t=s(hve);iEr=r(X7t,"distilbert"),X7t.forEach(t),dEr=r(ORe," \u2014 "),mU=n(ORe,"A",{href:!0});var z7t=s(mU);cEr=r(z7t,"TFDistilBertForQuestionAnswering"),z7t.forEach(t),fEr=r(ORe," (DistilBERT model)"),ORe.forEach(t),mEr=i(ge),k4=n(ge,"LI",{});var VRe=s(k4);pve=n(VRe,"STRONG",{});var Q7t=s(pve);gEr=r(Q7t,"electra"),Q7t.forEach(t),hEr=r(VRe," \u2014 "),gU=n(VRe,"A",{href:!0});var W7t=s(gU);pEr=r(W7t,"TFElectraForQuestionAnswering"),W7t.forEach(t),uEr=r(VRe," (ELECTRA model)"),VRe.forEach(t),_Er=i(ge),S4=n(ge,"LI",{});var XRe=s(S4);uve=n(XRe,"STRONG",{});var H7t=s(uve);bEr=r(H7t,"flaubert"),H7t.forEach(t),vEr=r(XRe," \u2014 "),hU=n(XRe,"A",{href:!0});var U7t=s(hU);FEr=r(U7t,"TFFlaubertForQuestionAnsweringSimple"),U7t.forEach(t),TEr=r(XRe," (FlauBERT model)"),XRe.forEach(t),MEr=i(ge),R4=n(ge,"LI",{});var zRe=s(R4);_ve=n(zRe,"STRONG",{});var J7t=s(_ve);EEr=r(J7t,"funnel"),J7t.forEach(t),CEr=r(zRe," \u2014 "),pU=n(zRe,"A",{href:!0});var Y7t=s(pU);wEr=r(Y7t,"TFFunnelForQuestionAnswering"),Y7t.forEach(t),AEr=r(zRe," (Funnel Transformer model)"),zRe.forEach(t),yEr=i(ge),B4=n(ge,"LI",{});var QRe=s(B4);bve=n(QRe,"STRONG",{});var K7t=s(bve);LEr=r(K7t,"gptj"),K7t.forEach(t),xEr=r(QRe," \u2014 "),uU=n(QRe,"A",{href:!0});var Z7t=s(uU);$Er=r(Z7t,"TFGPTJForQuestionAnswering"),Z7t.forEach(t),kEr=r(QRe," (GPT-J model)"),QRe.forEach(t),SEr=i(ge),P4=n(ge,"LI",{});var WRe=s(P4);vve=n(WRe,"STRONG",{});var eMt=s(vve);REr=r(eMt,"longformer"),eMt.forEach(t),BEr=r(WRe," \u2014 "),_U=n(WRe,"A",{href:!0});var oMt=s(_U);PEr=r(oMt,"TFLongformerForQuestionAnswering"),oMt.forEach(t),IEr=r(WRe," (Longformer model)"),WRe.forEach(t),qEr=i(ge),I4=n(ge,"LI",{});var HRe=s(I4);Fve=n(HRe,"STRONG",{});var rMt=s(Fve);NEr=r(rMt,"mobilebert"),rMt.forEach(t),jEr=r(HRe," \u2014 "),bU=n(HRe,"A",{href:!0});var tMt=s(bU);DEr=r(tMt,"TFMobileBertForQuestionAnswering"),tMt.forEach(t),GEr=r(HRe," (MobileBERT model)"),HRe.forEach(t),OEr=i(ge),q4=n(ge,"LI",{});var URe=s(q4);Tve=n(URe,"STRONG",{});var aMt=s(Tve);VEr=r(aMt,"mpnet"),aMt.forEach(t),XEr=r(URe," \u2014 "),vU=n(URe,"A",{href:!0});var nMt=s(vU);zEr=r(nMt,"TFMPNetForQuestionAnswering"),nMt.forEach(t),QEr=r(URe," (MPNet model)"),URe.forEach(t),WEr=i(ge),N4=n(ge,"LI",{});var JRe=s(N4);Mve=n(JRe,"STRONG",{});var sMt=s(Mve);HEr=r(sMt,"rembert"),sMt.forEach(t),UEr=r(JRe," \u2014 "),FU=n(JRe,"A",{href:!0});var lMt=s(FU);JEr=r(lMt,"TFRemBertForQuestionAnswering"),lMt.forEach(t),YEr=r(JRe," (RemBERT model)"),JRe.forEach(t),KEr=i(ge),j4=n(ge,"LI",{});var YRe=s(j4);Eve=n(YRe,"STRONG",{});var iMt=s(Eve);ZEr=r(iMt,"roberta"),iMt.forEach(t),eCr=r(YRe," \u2014 "),TU=n(YRe,"A",{href:!0});var dMt=s(TU);oCr=r(dMt,"TFRobertaForQuestionAnswering"),dMt.forEach(t),rCr=r(YRe," (RoBERTa model)"),YRe.forEach(t),tCr=i(ge),D4=n(ge,"LI",{});var KRe=s(D4);Cve=n(KRe,"STRONG",{});var cMt=s(Cve);aCr=r(cMt,"roformer"),cMt.forEach(t),nCr=r(KRe," \u2014 "),MU=n(KRe,"A",{href:!0});var fMt=s(MU);sCr=r(fMt,"TFRoFormerForQuestionAnswering"),fMt.forEach(t),lCr=r(KRe," (RoFormer model)"),KRe.forEach(t),iCr=i(ge),G4=n(ge,"LI",{});var ZRe=s(G4);wve=n(ZRe,"STRONG",{});var mMt=s(wve);dCr=r(mMt,"xlm"),mMt.forEach(t),cCr=r(ZRe," \u2014 "),EU=n(ZRe,"A",{href:!0});var gMt=s(EU);fCr=r(gMt,"TFXLMForQuestionAnsweringSimple"),gMt.forEach(t),mCr=r(ZRe," (XLM model)"),ZRe.forEach(t),gCr=i(ge),O4=n(ge,"LI",{});var eBe=s(O4);Ave=n(eBe,"STRONG",{});var hMt=s(Ave);hCr=r(hMt,"xlm-roberta"),hMt.forEach(t),pCr=r(eBe," \u2014 "),CU=n(eBe,"A",{href:!0});var pMt=s(CU);uCr=r(pMt,"TFXLMRobertaForQuestionAnswering"),pMt.forEach(t),_Cr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),bCr=i(ge),V4=n(ge,"LI",{});var oBe=s(V4);yve=n(oBe,"STRONG",{});var uMt=s(yve);vCr=r(uMt,"xlnet"),uMt.forEach(t),FCr=r(oBe," \u2014 "),wU=n(oBe,"A",{href:!0});var _Mt=s(wU);TCr=r(_Mt,"TFXLNetForQuestionAnsweringSimple"),_Mt.forEach(t),MCr=r(oBe," (XLNet model)"),oBe.forEach(t),ge.forEach(t),ECr=i(Sl),T(X4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),$qe=i(f),Fc=n(f,"H2",{class:!0});var qje=s(Fc);z4=n(qje,"A",{id:!0,class:!0,href:!0});var bMt=s(z4);Lve=n(bMt,"SPAN",{});var vMt=s(Lve);T(O8.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),CCr=i(qje),xve=n(qje,"SPAN",{});var FMt=s(xve);wCr=r(FMt,"TFAutoModelForVision2Seq"),FMt.forEach(t),qje.forEach(t),kqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(V8.$$.fragment,Rl),ACr=i(Rl),Tc=n(Rl,"P",{});var SZ=s(Tc);yCr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AU=n(SZ,"A",{href:!0});var TMt=s(AU);LCr=r(TMt,"from_pretrained()"),TMt.forEach(t),xCr=r(SZ," class method or the "),yU=n(SZ,"A",{href:!0});var MMt=s(yU);$Cr=r(MMt,"from_config()"),MMt.forEach(t),kCr=r(SZ,` class
method.`),SZ.forEach(t),SCr=i(Rl),X8=n(Rl,"P",{});var Nje=s(X8);RCr=r(Nje,"This class cannot be instantiated directly using "),$ve=n(Nje,"CODE",{});var EMt=s($ve);BCr=r(EMt,"__init__()"),EMt.forEach(t),PCr=r(Nje," (throws an error)."),Nje.forEach(t),ICr=i(Rl),qt=n(Rl,"DIV",{class:!0});var M6=s(qt);T(z8.$$.fragment,M6),qCr=i(M6),kve=n(M6,"P",{});var CMt=s(kve);NCr=r(CMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CMt.forEach(t),jCr=i(M6),Mc=n(M6,"P",{});var RZ=s(Mc);DCr=r(RZ,`Note:
Loading a model from its configuration file does `),Sve=n(RZ,"STRONG",{});var wMt=s(Sve);GCr=r(wMt,"not"),wMt.forEach(t),OCr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(RZ,"A",{href:!0});var AMt=s(LU);VCr=r(AMt,"from_pretrained()"),AMt.forEach(t),XCr=r(RZ," to load the model weights."),RZ.forEach(t),zCr=i(M6),T(Q4.$$.fragment,M6),M6.forEach(t),QCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Q8.$$.fragment,Bl),WCr=i(Bl),Rve=n(Bl,"P",{});var yMt=s(Rve);HCr=r(yMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yMt.forEach(t),UCr=i(Bl),fn=n(Bl,"P",{});var E6=s(fn);JCr=r(E6,"The model class to instantiate is selected based on the "),Bve=n(E6,"CODE",{});var LMt=s(Bve);YCr=r(LMt,"model_type"),LMt.forEach(t),KCr=r(E6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(E6,"CODE",{});var xMt=s(Pve);ZCr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),ewr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(E6,"CODE",{});var $Mt=s(Ive);owr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),rwr=r(E6,":"),E6.forEach(t),twr=i(Bl),qve=n(Bl,"UL",{});var kMt=s(qve);W4=n(kMt,"LI",{});var rBe=s(W4);Nve=n(rBe,"STRONG",{});var SMt=s(Nve);awr=r(SMt,"vision-encoder-decoder"),SMt.forEach(t),nwr=r(rBe," \u2014 "),xU=n(rBe,"A",{href:!0});var RMt=s(xU);swr=r(RMt,"TFVisionEncoderDecoderModel"),RMt.forEach(t),lwr=r(rBe," (Vision Encoder decoder model)"),rBe.forEach(t),kMt.forEach(t),iwr=i(Bl),T(H4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Sqe=i(f),Ec=n(f,"H2",{class:!0});var jje=s(Ec);U4=n(jje,"A",{id:!0,class:!0,href:!0});var BMt=s(U4);jve=n(BMt,"SPAN",{});var PMt=s(jve);T(W8.$$.fragment,PMt),PMt.forEach(t),BMt.forEach(t),dwr=i(jje),Dve=n(jje,"SPAN",{});var IMt=s(Dve);cwr=r(IMt,"TFAutoModelForSpeechSeq2Seq"),IMt.forEach(t),jje.forEach(t),Rqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(H8.$$.fragment,Pl),fwr=i(Pl),Cc=n(Pl,"P",{});var BZ=s(Cc);mwr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$U=n(BZ,"A",{href:!0});var qMt=s($U);gwr=r(qMt,"from_pretrained()"),qMt.forEach(t),hwr=r(BZ," class method or the "),kU=n(BZ,"A",{href:!0});var NMt=s(kU);pwr=r(NMt,"from_config()"),NMt.forEach(t),uwr=r(BZ,` class
method.`),BZ.forEach(t),_wr=i(Pl),U8=n(Pl,"P",{});var Dje=s(U8);bwr=r(Dje,"This class cannot be instantiated directly using "),Gve=n(Dje,"CODE",{});var jMt=s(Gve);vwr=r(jMt,"__init__()"),jMt.forEach(t),Fwr=r(Dje," (throws an error)."),Dje.forEach(t),Twr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var C6=s(Nt);T(J8.$$.fragment,C6),Mwr=i(C6),Ove=n(C6,"P",{});var DMt=s(Ove);Ewr=r(DMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DMt.forEach(t),Cwr=i(C6),wc=n(C6,"P",{});var PZ=s(wc);wwr=r(PZ,`Note:
Loading a model from its configuration file does `),Vve=n(PZ,"STRONG",{});var GMt=s(Vve);Awr=r(GMt,"not"),GMt.forEach(t),ywr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(PZ,"A",{href:!0});var OMt=s(SU);Lwr=r(OMt,"from_pretrained()"),OMt.forEach(t),xwr=r(PZ," to load the model weights."),PZ.forEach(t),$wr=i(C6),T(J4.$$.fragment,C6),C6.forEach(t),kwr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Y8.$$.fragment,Il),Swr=i(Il),Xve=n(Il,"P",{});var VMt=s(Xve);Rwr=r(VMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VMt.forEach(t),Bwr=i(Il),mn=n(Il,"P",{});var w6=s(mn);Pwr=r(w6,"The model class to instantiate is selected based on the "),zve=n(w6,"CODE",{});var XMt=s(zve);Iwr=r(XMt,"model_type"),XMt.forEach(t),qwr=r(w6,` property of the config object (either
passed as an argument or loaded from `),Qve=n(w6,"CODE",{});var zMt=s(Qve);Nwr=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),jwr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(w6,"CODE",{});var QMt=s(Wve);Dwr=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),Gwr=r(w6,":"),w6.forEach(t),Owr=i(Il),Hve=n(Il,"UL",{});var WMt=s(Hve);Y4=n(WMt,"LI",{});var tBe=s(Y4);Uve=n(tBe,"STRONG",{});var HMt=s(Uve);Vwr=r(HMt,"speech_to_text"),HMt.forEach(t),Xwr=r(tBe," \u2014 "),RU=n(tBe,"A",{href:!0});var UMt=s(RU);zwr=r(UMt,"TFSpeech2TextForConditionalGeneration"),UMt.forEach(t),Qwr=r(tBe," (Speech2Text model)"),tBe.forEach(t),WMt.forEach(t),Wwr=i(Il),T(K4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Bqe=i(f),Ac=n(f,"H2",{class:!0});var Gje=s(Ac);Z4=n(Gje,"A",{id:!0,class:!0,href:!0});var JMt=s(Z4);Jve=n(JMt,"SPAN",{});var YMt=s(Jve);T(K8.$$.fragment,YMt),YMt.forEach(t),JMt.forEach(t),Hwr=i(Gje),Yve=n(Gje,"SPAN",{});var KMt=s(Yve);Uwr=r(KMt,"FlaxAutoModel"),KMt.forEach(t),Gje.forEach(t),Pqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(Z8.$$.fragment,ql),Jwr=i(ql),yc=n(ql,"P",{});var IZ=s(yc);Ywr=r(IZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BU=n(IZ,"A",{href:!0});var ZMt=s(BU);Kwr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),Zwr=r(IZ," class method or the "),PU=n(IZ,"A",{href:!0});var e4t=s(PU);eAr=r(e4t,"from_config()"),e4t.forEach(t),oAr=r(IZ,` class
method.`),IZ.forEach(t),rAr=i(ql),ex=n(ql,"P",{});var Oje=s(ex);tAr=r(Oje,"This class cannot be instantiated directly using "),Kve=n(Oje,"CODE",{});var o4t=s(Kve);aAr=r(o4t,"__init__()"),o4t.forEach(t),nAr=r(Oje," (throws an error)."),Oje.forEach(t),sAr=i(ql),jt=n(ql,"DIV",{class:!0});var A6=s(jt);T(ox.$$.fragment,A6),lAr=i(A6),Zve=n(A6,"P",{});var r4t=s(Zve);iAr=r(r4t,"Instantiates one of the base model classes of the library from a configuration."),r4t.forEach(t),dAr=i(A6),Lc=n(A6,"P",{});var qZ=s(Lc);cAr=r(qZ,`Note:
Loading a model from its configuration file does `),eFe=n(qZ,"STRONG",{});var t4t=s(eFe);fAr=r(t4t,"not"),t4t.forEach(t),mAr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(qZ,"A",{href:!0});var a4t=s(IU);gAr=r(a4t,"from_pretrained()"),a4t.forEach(t),hAr=r(qZ," to load the model weights."),qZ.forEach(t),pAr=i(A6),T(eE.$$.fragment,A6),A6.forEach(t),uAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(rx.$$.fragment,Nl),_Ar=i(Nl),oFe=n(Nl,"P",{});var n4t=s(oFe);bAr=r(n4t,"Instantiate one of the base model classes of the library from a pretrained model."),n4t.forEach(t),vAr=i(Nl),gn=n(Nl,"P",{});var y6=s(gn);FAr=r(y6,"The model class to instantiate is selected based on the "),rFe=n(y6,"CODE",{});var s4t=s(rFe);TAr=r(s4t,"model_type"),s4t.forEach(t),MAr=r(y6,` property of the config object (either
passed as an argument or loaded from `),tFe=n(y6,"CODE",{});var l4t=s(tFe);EAr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),CAr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(y6,"CODE",{});var i4t=s(aFe);wAr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),AAr=r(y6,":"),y6.forEach(t),yAr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);oE=n(ne,"LI",{});var aBe=s(oE);nFe=n(aBe,"STRONG",{});var d4t=s(nFe);LAr=r(d4t,"albert"),d4t.forEach(t),xAr=r(aBe," \u2014 "),qU=n(aBe,"A",{href:!0});var c4t=s(qU);$Ar=r(c4t,"FlaxAlbertModel"),c4t.forEach(t),kAr=r(aBe," (ALBERT model)"),aBe.forEach(t),SAr=i(ne),rE=n(ne,"LI",{});var nBe=s(rE);sFe=n(nBe,"STRONG",{});var f4t=s(sFe);RAr=r(f4t,"bart"),f4t.forEach(t),BAr=r(nBe," \u2014 "),NU=n(nBe,"A",{href:!0});var m4t=s(NU);PAr=r(m4t,"FlaxBartModel"),m4t.forEach(t),IAr=r(nBe," (BART model)"),nBe.forEach(t),qAr=i(ne),tE=n(ne,"LI",{});var sBe=s(tE);lFe=n(sBe,"STRONG",{});var g4t=s(lFe);NAr=r(g4t,"beit"),g4t.forEach(t),jAr=r(sBe," \u2014 "),jU=n(sBe,"A",{href:!0});var h4t=s(jU);DAr=r(h4t,"FlaxBeitModel"),h4t.forEach(t),GAr=r(sBe," (BEiT model)"),sBe.forEach(t),OAr=i(ne),aE=n(ne,"LI",{});var lBe=s(aE);iFe=n(lBe,"STRONG",{});var p4t=s(iFe);VAr=r(p4t,"bert"),p4t.forEach(t),XAr=r(lBe," \u2014 "),DU=n(lBe,"A",{href:!0});var u4t=s(DU);zAr=r(u4t,"FlaxBertModel"),u4t.forEach(t),QAr=r(lBe," (BERT model)"),lBe.forEach(t),WAr=i(ne),nE=n(ne,"LI",{});var iBe=s(nE);dFe=n(iBe,"STRONG",{});var _4t=s(dFe);HAr=r(_4t,"big_bird"),_4t.forEach(t),UAr=r(iBe," \u2014 "),GU=n(iBe,"A",{href:!0});var b4t=s(GU);JAr=r(b4t,"FlaxBigBirdModel"),b4t.forEach(t),YAr=r(iBe," (BigBird model)"),iBe.forEach(t),KAr=i(ne),sE=n(ne,"LI",{});var dBe=s(sE);cFe=n(dBe,"STRONG",{});var v4t=s(cFe);ZAr=r(v4t,"blenderbot"),v4t.forEach(t),e6r=r(dBe," \u2014 "),OU=n(dBe,"A",{href:!0});var F4t=s(OU);o6r=r(F4t,"FlaxBlenderbotModel"),F4t.forEach(t),r6r=r(dBe," (Blenderbot model)"),dBe.forEach(t),t6r=i(ne),lE=n(ne,"LI",{});var cBe=s(lE);fFe=n(cBe,"STRONG",{});var T4t=s(fFe);a6r=r(T4t,"blenderbot-small"),T4t.forEach(t),n6r=r(cBe," \u2014 "),VU=n(cBe,"A",{href:!0});var M4t=s(VU);s6r=r(M4t,"FlaxBlenderbotSmallModel"),M4t.forEach(t),l6r=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),i6r=i(ne),iE=n(ne,"LI",{});var fBe=s(iE);mFe=n(fBe,"STRONG",{});var E4t=s(mFe);d6r=r(E4t,"clip"),E4t.forEach(t),c6r=r(fBe," \u2014 "),XU=n(fBe,"A",{href:!0});var C4t=s(XU);f6r=r(C4t,"FlaxCLIPModel"),C4t.forEach(t),m6r=r(fBe," (CLIP model)"),fBe.forEach(t),g6r=i(ne),dE=n(ne,"LI",{});var mBe=s(dE);gFe=n(mBe,"STRONG",{});var w4t=s(gFe);h6r=r(w4t,"distilbert"),w4t.forEach(t),p6r=r(mBe," \u2014 "),zU=n(mBe,"A",{href:!0});var A4t=s(zU);u6r=r(A4t,"FlaxDistilBertModel"),A4t.forEach(t),_6r=r(mBe," (DistilBERT model)"),mBe.forEach(t),b6r=i(ne),cE=n(ne,"LI",{});var gBe=s(cE);hFe=n(gBe,"STRONG",{});var y4t=s(hFe);v6r=r(y4t,"electra"),y4t.forEach(t),F6r=r(gBe," \u2014 "),QU=n(gBe,"A",{href:!0});var L4t=s(QU);T6r=r(L4t,"FlaxElectraModel"),L4t.forEach(t),M6r=r(gBe," (ELECTRA model)"),gBe.forEach(t),E6r=i(ne),fE=n(ne,"LI",{});var hBe=s(fE);pFe=n(hBe,"STRONG",{});var x4t=s(pFe);C6r=r(x4t,"gpt2"),x4t.forEach(t),w6r=r(hBe," \u2014 "),WU=n(hBe,"A",{href:!0});var $4t=s(WU);A6r=r($4t,"FlaxGPT2Model"),$4t.forEach(t),y6r=r(hBe," (OpenAI GPT-2 model)"),hBe.forEach(t),L6r=i(ne),mE=n(ne,"LI",{});var pBe=s(mE);uFe=n(pBe,"STRONG",{});var k4t=s(uFe);x6r=r(k4t,"gpt_neo"),k4t.forEach(t),$6r=r(pBe," \u2014 "),HU=n(pBe,"A",{href:!0});var S4t=s(HU);k6r=r(S4t,"FlaxGPTNeoModel"),S4t.forEach(t),S6r=r(pBe," (GPT Neo model)"),pBe.forEach(t),R6r=i(ne),gE=n(ne,"LI",{});var uBe=s(gE);_Fe=n(uBe,"STRONG",{});var R4t=s(_Fe);B6r=r(R4t,"gptj"),R4t.forEach(t),P6r=r(uBe," \u2014 "),UU=n(uBe,"A",{href:!0});var B4t=s(UU);I6r=r(B4t,"FlaxGPTJModel"),B4t.forEach(t),q6r=r(uBe," (GPT-J model)"),uBe.forEach(t),N6r=i(ne),hE=n(ne,"LI",{});var _Be=s(hE);bFe=n(_Be,"STRONG",{});var P4t=s(bFe);j6r=r(P4t,"marian"),P4t.forEach(t),D6r=r(_Be," \u2014 "),JU=n(_Be,"A",{href:!0});var I4t=s(JU);G6r=r(I4t,"FlaxMarianModel"),I4t.forEach(t),O6r=r(_Be," (Marian model)"),_Be.forEach(t),V6r=i(ne),pE=n(ne,"LI",{});var bBe=s(pE);vFe=n(bBe,"STRONG",{});var q4t=s(vFe);X6r=r(q4t,"mbart"),q4t.forEach(t),z6r=r(bBe," \u2014 "),YU=n(bBe,"A",{href:!0});var N4t=s(YU);Q6r=r(N4t,"FlaxMBartModel"),N4t.forEach(t),W6r=r(bBe," (mBART model)"),bBe.forEach(t),H6r=i(ne),uE=n(ne,"LI",{});var vBe=s(uE);FFe=n(vBe,"STRONG",{});var j4t=s(FFe);U6r=r(j4t,"mt5"),j4t.forEach(t),J6r=r(vBe," \u2014 "),KU=n(vBe,"A",{href:!0});var D4t=s(KU);Y6r=r(D4t,"FlaxMT5Model"),D4t.forEach(t),K6r=r(vBe," (mT5 model)"),vBe.forEach(t),Z6r=i(ne),_E=n(ne,"LI",{});var FBe=s(_E);TFe=n(FBe,"STRONG",{});var G4t=s(TFe);e0r=r(G4t,"pegasus"),G4t.forEach(t),o0r=r(FBe," \u2014 "),ZU=n(FBe,"A",{href:!0});var O4t=s(ZU);r0r=r(O4t,"FlaxPegasusModel"),O4t.forEach(t),t0r=r(FBe," (Pegasus model)"),FBe.forEach(t),a0r=i(ne),bE=n(ne,"LI",{});var TBe=s(bE);MFe=n(TBe,"STRONG",{});var V4t=s(MFe);n0r=r(V4t,"roberta"),V4t.forEach(t),s0r=r(TBe," \u2014 "),eJ=n(TBe,"A",{href:!0});var X4t=s(eJ);l0r=r(X4t,"FlaxRobertaModel"),X4t.forEach(t),i0r=r(TBe," (RoBERTa model)"),TBe.forEach(t),d0r=i(ne),vE=n(ne,"LI",{});var MBe=s(vE);EFe=n(MBe,"STRONG",{});var z4t=s(EFe);c0r=r(z4t,"roformer"),z4t.forEach(t),f0r=r(MBe," \u2014 "),oJ=n(MBe,"A",{href:!0});var Q4t=s(oJ);m0r=r(Q4t,"FlaxRoFormerModel"),Q4t.forEach(t),g0r=r(MBe," (RoFormer model)"),MBe.forEach(t),h0r=i(ne),FE=n(ne,"LI",{});var EBe=s(FE);CFe=n(EBe,"STRONG",{});var W4t=s(CFe);p0r=r(W4t,"t5"),W4t.forEach(t),u0r=r(EBe," \u2014 "),rJ=n(EBe,"A",{href:!0});var H4t=s(rJ);_0r=r(H4t,"FlaxT5Model"),H4t.forEach(t),b0r=r(EBe," (T5 model)"),EBe.forEach(t),v0r=i(ne),TE=n(ne,"LI",{});var CBe=s(TE);wFe=n(CBe,"STRONG",{});var U4t=s(wFe);F0r=r(U4t,"vision-text-dual-encoder"),U4t.forEach(t),T0r=r(CBe," \u2014 "),tJ=n(CBe,"A",{href:!0});var J4t=s(tJ);M0r=r(J4t,"FlaxVisionTextDualEncoderModel"),J4t.forEach(t),E0r=r(CBe," (VisionTextDualEncoder model)"),CBe.forEach(t),C0r=i(ne),ME=n(ne,"LI",{});var wBe=s(ME);AFe=n(wBe,"STRONG",{});var Y4t=s(AFe);w0r=r(Y4t,"vit"),Y4t.forEach(t),A0r=r(wBe," \u2014 "),aJ=n(wBe,"A",{href:!0});var K4t=s(aJ);y0r=r(K4t,"FlaxViTModel"),K4t.forEach(t),L0r=r(wBe," (ViT model)"),wBe.forEach(t),x0r=i(ne),EE=n(ne,"LI",{});var ABe=s(EE);yFe=n(ABe,"STRONG",{});var Z4t=s(yFe);$0r=r(Z4t,"wav2vec2"),Z4t.forEach(t),k0r=r(ABe," \u2014 "),nJ=n(ABe,"A",{href:!0});var eEt=s(nJ);S0r=r(eEt,"FlaxWav2Vec2Model"),eEt.forEach(t),R0r=r(ABe," (Wav2Vec2 model)"),ABe.forEach(t),B0r=i(ne),CE=n(ne,"LI",{});var yBe=s(CE);LFe=n(yBe,"STRONG",{});var oEt=s(LFe);P0r=r(oEt,"xglm"),oEt.forEach(t),I0r=r(yBe," \u2014 "),sJ=n(yBe,"A",{href:!0});var rEt=s(sJ);q0r=r(rEt,"FlaxXGLMModel"),rEt.forEach(t),N0r=r(yBe," (XGLM model)"),yBe.forEach(t),j0r=i(ne),wE=n(ne,"LI",{});var LBe=s(wE);xFe=n(LBe,"STRONG",{});var tEt=s(xFe);D0r=r(tEt,"xlm-roberta"),tEt.forEach(t),G0r=r(LBe," \u2014 "),lJ=n(LBe,"A",{href:!0});var aEt=s(lJ);O0r=r(aEt,"FlaxXLMRobertaModel"),aEt.forEach(t),V0r=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),ne.forEach(t),X0r=i(Nl),T(AE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Iqe=i(f),xc=n(f,"H2",{class:!0});var Vje=s(xc);yE=n(Vje,"A",{id:!0,class:!0,href:!0});var nEt=s(yE);$Fe=n(nEt,"SPAN",{});var sEt=s($Fe);T(tx.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),z0r=i(Vje),kFe=n(Vje,"SPAN",{});var lEt=s(kFe);Q0r=r(lEt,"FlaxAutoModelForCausalLM"),lEt.forEach(t),Vje.forEach(t),qqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(ax.$$.fragment,jl),W0r=i(jl),$c=n(jl,"P",{});var NZ=s($c);H0r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iJ=n(NZ,"A",{href:!0});var iEt=s(iJ);U0r=r(iEt,"from_pretrained()"),iEt.forEach(t),J0r=r(NZ," class method or the "),dJ=n(NZ,"A",{href:!0});var dEt=s(dJ);Y0r=r(dEt,"from_config()"),dEt.forEach(t),K0r=r(NZ,` class
method.`),NZ.forEach(t),Z0r=i(jl),nx=n(jl,"P",{});var Xje=s(nx);eyr=r(Xje,"This class cannot be instantiated directly using "),SFe=n(Xje,"CODE",{});var cEt=s(SFe);oyr=r(cEt,"__init__()"),cEt.forEach(t),ryr=r(Xje," (throws an error)."),Xje.forEach(t),tyr=i(jl),Dt=n(jl,"DIV",{class:!0});var L6=s(Dt);T(sx.$$.fragment,L6),ayr=i(L6),RFe=n(L6,"P",{});var fEt=s(RFe);nyr=r(fEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fEt.forEach(t),syr=i(L6),kc=n(L6,"P",{});var jZ=s(kc);lyr=r(jZ,`Note:
Loading a model from its configuration file does `),BFe=n(jZ,"STRONG",{});var mEt=s(BFe);iyr=r(mEt,"not"),mEt.forEach(t),dyr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(jZ,"A",{href:!0});var gEt=s(cJ);cyr=r(gEt,"from_pretrained()"),gEt.forEach(t),fyr=r(jZ," to load the model weights."),jZ.forEach(t),myr=i(L6),T(LE.$$.fragment,L6),L6.forEach(t),gyr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(lx.$$.fragment,Dl),hyr=i(Dl),PFe=n(Dl,"P",{});var hEt=s(PFe);pyr=r(hEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hEt.forEach(t),uyr=i(Dl),hn=n(Dl,"P",{});var x6=s(hn);_yr=r(x6,"The model class to instantiate is selected based on the "),IFe=n(x6,"CODE",{});var pEt=s(IFe);byr=r(pEt,"model_type"),pEt.forEach(t),vyr=r(x6,` property of the config object (either
passed as an argument or loaded from `),qFe=n(x6,"CODE",{});var uEt=s(qFe);Fyr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),Tyr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(x6,"CODE",{});var _Et=s(NFe);Myr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),Eyr=r(x6,":"),x6.forEach(t),Cyr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);xE=n(Oe,"LI",{});var xBe=s(xE);jFe=n(xBe,"STRONG",{});var bEt=s(jFe);wyr=r(bEt,"bart"),bEt.forEach(t),Ayr=r(xBe," \u2014 "),fJ=n(xBe,"A",{href:!0});var vEt=s(fJ);yyr=r(vEt,"FlaxBartForCausalLM"),vEt.forEach(t),Lyr=r(xBe," (BART model)"),xBe.forEach(t),xyr=i(Oe),$E=n(Oe,"LI",{});var $Be=s($E);DFe=n($Be,"STRONG",{});var FEt=s(DFe);$yr=r(FEt,"bert"),FEt.forEach(t),kyr=r($Be," \u2014 "),mJ=n($Be,"A",{href:!0});var TEt=s(mJ);Syr=r(TEt,"FlaxBertForCausalLM"),TEt.forEach(t),Ryr=r($Be," (BERT model)"),$Be.forEach(t),Byr=i(Oe),kE=n(Oe,"LI",{});var kBe=s(kE);GFe=n(kBe,"STRONG",{});var MEt=s(GFe);Pyr=r(MEt,"big_bird"),MEt.forEach(t),Iyr=r(kBe," \u2014 "),gJ=n(kBe,"A",{href:!0});var EEt=s(gJ);qyr=r(EEt,"FlaxBigBirdForCausalLM"),EEt.forEach(t),Nyr=r(kBe," (BigBird model)"),kBe.forEach(t),jyr=i(Oe),SE=n(Oe,"LI",{});var SBe=s(SE);OFe=n(SBe,"STRONG",{});var CEt=s(OFe);Dyr=r(CEt,"electra"),CEt.forEach(t),Gyr=r(SBe," \u2014 "),hJ=n(SBe,"A",{href:!0});var wEt=s(hJ);Oyr=r(wEt,"FlaxElectraForCausalLM"),wEt.forEach(t),Vyr=r(SBe," (ELECTRA model)"),SBe.forEach(t),Xyr=i(Oe),RE=n(Oe,"LI",{});var RBe=s(RE);VFe=n(RBe,"STRONG",{});var AEt=s(VFe);zyr=r(AEt,"gpt2"),AEt.forEach(t),Qyr=r(RBe," \u2014 "),pJ=n(RBe,"A",{href:!0});var yEt=s(pJ);Wyr=r(yEt,"FlaxGPT2LMHeadModel"),yEt.forEach(t),Hyr=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),Uyr=i(Oe),BE=n(Oe,"LI",{});var BBe=s(BE);XFe=n(BBe,"STRONG",{});var LEt=s(XFe);Jyr=r(LEt,"gpt_neo"),LEt.forEach(t),Yyr=r(BBe," \u2014 "),uJ=n(BBe,"A",{href:!0});var xEt=s(uJ);Kyr=r(xEt,"FlaxGPTNeoForCausalLM"),xEt.forEach(t),Zyr=r(BBe," (GPT Neo model)"),BBe.forEach(t),eLr=i(Oe),PE=n(Oe,"LI",{});var PBe=s(PE);zFe=n(PBe,"STRONG",{});var $Et=s(zFe);oLr=r($Et,"gptj"),$Et.forEach(t),rLr=r(PBe," \u2014 "),_J=n(PBe,"A",{href:!0});var kEt=s(_J);tLr=r(kEt,"FlaxGPTJForCausalLM"),kEt.forEach(t),aLr=r(PBe," (GPT-J model)"),PBe.forEach(t),nLr=i(Oe),IE=n(Oe,"LI",{});var IBe=s(IE);QFe=n(IBe,"STRONG",{});var SEt=s(QFe);sLr=r(SEt,"roberta"),SEt.forEach(t),lLr=r(IBe," \u2014 "),bJ=n(IBe,"A",{href:!0});var REt=s(bJ);iLr=r(REt,"FlaxRobertaForCausalLM"),REt.forEach(t),dLr=r(IBe," (RoBERTa model)"),IBe.forEach(t),cLr=i(Oe),qE=n(Oe,"LI",{});var qBe=s(qE);WFe=n(qBe,"STRONG",{});var BEt=s(WFe);fLr=r(BEt,"xglm"),BEt.forEach(t),mLr=r(qBe," \u2014 "),vJ=n(qBe,"A",{href:!0});var PEt=s(vJ);gLr=r(PEt,"FlaxXGLMForCausalLM"),PEt.forEach(t),hLr=r(qBe," (XGLM model)"),qBe.forEach(t),Oe.forEach(t),pLr=i(Dl),T(NE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Nqe=i(f),Sc=n(f,"H2",{class:!0});var zje=s(Sc);jE=n(zje,"A",{id:!0,class:!0,href:!0});var IEt=s(jE);HFe=n(IEt,"SPAN",{});var qEt=s(HFe);T(ix.$$.fragment,qEt),qEt.forEach(t),IEt.forEach(t),uLr=i(zje),UFe=n(zje,"SPAN",{});var NEt=s(UFe);_Lr=r(NEt,"FlaxAutoModelForPreTraining"),NEt.forEach(t),zje.forEach(t),jqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(dx.$$.fragment,Gl),bLr=i(Gl),Rc=n(Gl,"P",{});var DZ=s(Rc);vLr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FJ=n(DZ,"A",{href:!0});var jEt=s(FJ);FLr=r(jEt,"from_pretrained()"),jEt.forEach(t),TLr=r(DZ," class method or the "),TJ=n(DZ,"A",{href:!0});var DEt=s(TJ);MLr=r(DEt,"from_config()"),DEt.forEach(t),ELr=r(DZ,` class
method.`),DZ.forEach(t),CLr=i(Gl),cx=n(Gl,"P",{});var Qje=s(cx);wLr=r(Qje,"This class cannot be instantiated directly using "),JFe=n(Qje,"CODE",{});var GEt=s(JFe);ALr=r(GEt,"__init__()"),GEt.forEach(t),yLr=r(Qje," (throws an error)."),Qje.forEach(t),LLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var $6=s(Gt);T(fx.$$.fragment,$6),xLr=i($6),YFe=n($6,"P",{});var OEt=s(YFe);$Lr=r(OEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OEt.forEach(t),kLr=i($6),Bc=n($6,"P",{});var GZ=s(Bc);SLr=r(GZ,`Note:
Loading a model from its configuration file does `),KFe=n(GZ,"STRONG",{});var VEt=s(KFe);RLr=r(VEt,"not"),VEt.forEach(t),BLr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(GZ,"A",{href:!0});var XEt=s(MJ);PLr=r(XEt,"from_pretrained()"),XEt.forEach(t),ILr=r(GZ," to load the model weights."),GZ.forEach(t),qLr=i($6),T(DE.$$.fragment,$6),$6.forEach(t),NLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(mx.$$.fragment,Ol),jLr=i(Ol),ZFe=n(Ol,"P",{});var zEt=s(ZFe);DLr=r(zEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zEt.forEach(t),GLr=i(Ol),pn=n(Ol,"P",{});var k6=s(pn);OLr=r(k6,"The model class to instantiate is selected based on the "),eTe=n(k6,"CODE",{});var QEt=s(eTe);VLr=r(QEt,"model_type"),QEt.forEach(t),XLr=r(k6,` property of the config object (either
passed as an argument or loaded from `),oTe=n(k6,"CODE",{});var WEt=s(oTe);zLr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),QLr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(k6,"CODE",{});var HEt=s(rTe);WLr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),HLr=r(k6,":"),k6.forEach(t),ULr=i(Ol),Ee=n(Ol,"UL",{});var we=s(Ee);GE=n(we,"LI",{});var NBe=s(GE);tTe=n(NBe,"STRONG",{});var UEt=s(tTe);JLr=r(UEt,"albert"),UEt.forEach(t),YLr=r(NBe," \u2014 "),EJ=n(NBe,"A",{href:!0});var JEt=s(EJ);KLr=r(JEt,"FlaxAlbertForPreTraining"),JEt.forEach(t),ZLr=r(NBe," (ALBERT model)"),NBe.forEach(t),e8r=i(we),OE=n(we,"LI",{});var jBe=s(OE);aTe=n(jBe,"STRONG",{});var YEt=s(aTe);o8r=r(YEt,"bart"),YEt.forEach(t),r8r=r(jBe," \u2014 "),CJ=n(jBe,"A",{href:!0});var KEt=s(CJ);t8r=r(KEt,"FlaxBartForConditionalGeneration"),KEt.forEach(t),a8r=r(jBe," (BART model)"),jBe.forEach(t),n8r=i(we),VE=n(we,"LI",{});var DBe=s(VE);nTe=n(DBe,"STRONG",{});var ZEt=s(nTe);s8r=r(ZEt,"bert"),ZEt.forEach(t),l8r=r(DBe," \u2014 "),wJ=n(DBe,"A",{href:!0});var eCt=s(wJ);i8r=r(eCt,"FlaxBertForPreTraining"),eCt.forEach(t),d8r=r(DBe," (BERT model)"),DBe.forEach(t),c8r=i(we),XE=n(we,"LI",{});var GBe=s(XE);sTe=n(GBe,"STRONG",{});var oCt=s(sTe);f8r=r(oCt,"big_bird"),oCt.forEach(t),m8r=r(GBe," \u2014 "),AJ=n(GBe,"A",{href:!0});var rCt=s(AJ);g8r=r(rCt,"FlaxBigBirdForPreTraining"),rCt.forEach(t),h8r=r(GBe," (BigBird model)"),GBe.forEach(t),p8r=i(we),zE=n(we,"LI",{});var OBe=s(zE);lTe=n(OBe,"STRONG",{});var tCt=s(lTe);u8r=r(tCt,"electra"),tCt.forEach(t),_8r=r(OBe," \u2014 "),yJ=n(OBe,"A",{href:!0});var aCt=s(yJ);b8r=r(aCt,"FlaxElectraForPreTraining"),aCt.forEach(t),v8r=r(OBe," (ELECTRA model)"),OBe.forEach(t),F8r=i(we),QE=n(we,"LI",{});var VBe=s(QE);iTe=n(VBe,"STRONG",{});var nCt=s(iTe);T8r=r(nCt,"mbart"),nCt.forEach(t),M8r=r(VBe," \u2014 "),LJ=n(VBe,"A",{href:!0});var sCt=s(LJ);E8r=r(sCt,"FlaxMBartForConditionalGeneration"),sCt.forEach(t),C8r=r(VBe," (mBART model)"),VBe.forEach(t),w8r=i(we),WE=n(we,"LI",{});var XBe=s(WE);dTe=n(XBe,"STRONG",{});var lCt=s(dTe);A8r=r(lCt,"mt5"),lCt.forEach(t),y8r=r(XBe," \u2014 "),xJ=n(XBe,"A",{href:!0});var iCt=s(xJ);L8r=r(iCt,"FlaxMT5ForConditionalGeneration"),iCt.forEach(t),x8r=r(XBe," (mT5 model)"),XBe.forEach(t),$8r=i(we),HE=n(we,"LI",{});var zBe=s(HE);cTe=n(zBe,"STRONG",{});var dCt=s(cTe);k8r=r(dCt,"roberta"),dCt.forEach(t),S8r=r(zBe," \u2014 "),$J=n(zBe,"A",{href:!0});var cCt=s($J);R8r=r(cCt,"FlaxRobertaForMaskedLM"),cCt.forEach(t),B8r=r(zBe," (RoBERTa model)"),zBe.forEach(t),P8r=i(we),UE=n(we,"LI",{});var QBe=s(UE);fTe=n(QBe,"STRONG",{});var fCt=s(fTe);I8r=r(fCt,"roformer"),fCt.forEach(t),q8r=r(QBe," \u2014 "),kJ=n(QBe,"A",{href:!0});var mCt=s(kJ);N8r=r(mCt,"FlaxRoFormerForMaskedLM"),mCt.forEach(t),j8r=r(QBe," (RoFormer model)"),QBe.forEach(t),D8r=i(we),JE=n(we,"LI",{});var WBe=s(JE);mTe=n(WBe,"STRONG",{});var gCt=s(mTe);G8r=r(gCt,"t5"),gCt.forEach(t),O8r=r(WBe," \u2014 "),SJ=n(WBe,"A",{href:!0});var hCt=s(SJ);V8r=r(hCt,"FlaxT5ForConditionalGeneration"),hCt.forEach(t),X8r=r(WBe," (T5 model)"),WBe.forEach(t),z8r=i(we),YE=n(we,"LI",{});var HBe=s(YE);gTe=n(HBe,"STRONG",{});var pCt=s(gTe);Q8r=r(pCt,"wav2vec2"),pCt.forEach(t),W8r=r(HBe," \u2014 "),RJ=n(HBe,"A",{href:!0});var uCt=s(RJ);H8r=r(uCt,"FlaxWav2Vec2ForPreTraining"),uCt.forEach(t),U8r=r(HBe," (Wav2Vec2 model)"),HBe.forEach(t),J8r=i(we),KE=n(we,"LI",{});var UBe=s(KE);hTe=n(UBe,"STRONG",{});var _Ct=s(hTe);Y8r=r(_Ct,"xlm-roberta"),_Ct.forEach(t),K8r=r(UBe," \u2014 "),BJ=n(UBe,"A",{href:!0});var bCt=s(BJ);Z8r=r(bCt,"FlaxXLMRobertaForMaskedLM"),bCt.forEach(t),exr=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),we.forEach(t),oxr=i(Ol),T(ZE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Dqe=i(f),Pc=n(f,"H2",{class:!0});var Wje=s(Pc);eC=n(Wje,"A",{id:!0,class:!0,href:!0});var vCt=s(eC);pTe=n(vCt,"SPAN",{});var FCt=s(pTe);T(gx.$$.fragment,FCt),FCt.forEach(t),vCt.forEach(t),rxr=i(Wje),uTe=n(Wje,"SPAN",{});var TCt=s(uTe);txr=r(TCt,"FlaxAutoModelForMaskedLM"),TCt.forEach(t),Wje.forEach(t),Gqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(hx.$$.fragment,Vl),axr=i(Vl),Ic=n(Vl,"P",{});var OZ=s(Ic);nxr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PJ=n(OZ,"A",{href:!0});var MCt=s(PJ);sxr=r(MCt,"from_pretrained()"),MCt.forEach(t),lxr=r(OZ," class method or the "),IJ=n(OZ,"A",{href:!0});var ECt=s(IJ);ixr=r(ECt,"from_config()"),ECt.forEach(t),dxr=r(OZ,` class
method.`),OZ.forEach(t),cxr=i(Vl),px=n(Vl,"P",{});var Hje=s(px);fxr=r(Hje,"This class cannot be instantiated directly using "),_Te=n(Hje,"CODE",{});var CCt=s(_Te);mxr=r(CCt,"__init__()"),CCt.forEach(t),gxr=r(Hje," (throws an error)."),Hje.forEach(t),hxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var S6=s(Ot);T(ux.$$.fragment,S6),pxr=i(S6),bTe=n(S6,"P",{});var wCt=s(bTe);uxr=r(wCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wCt.forEach(t),_xr=i(S6),qc=n(S6,"P",{});var VZ=s(qc);bxr=r(VZ,`Note:
Loading a model from its configuration file does `),vTe=n(VZ,"STRONG",{});var ACt=s(vTe);vxr=r(ACt,"not"),ACt.forEach(t),Fxr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(VZ,"A",{href:!0});var yCt=s(qJ);Txr=r(yCt,"from_pretrained()"),yCt.forEach(t),Mxr=r(VZ," to load the model weights."),VZ.forEach(t),Exr=i(S6),T(oC.$$.fragment,S6),S6.forEach(t),Cxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(_x.$$.fragment,Xl),wxr=i(Xl),FTe=n(Xl,"P",{});var LCt=s(FTe);Axr=r(LCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LCt.forEach(t),yxr=i(Xl),un=n(Xl,"P",{});var R6=s(un);Lxr=r(R6,"The model class to instantiate is selected based on the "),TTe=n(R6,"CODE",{});var xCt=s(TTe);xxr=r(xCt,"model_type"),xCt.forEach(t),$xr=r(R6,` property of the config object (either
passed as an argument or loaded from `),MTe=n(R6,"CODE",{});var $Ct=s(MTe);kxr=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),Sxr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(R6,"CODE",{});var kCt=s(ETe);Rxr=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),Bxr=r(R6,":"),R6.forEach(t),Pxr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);rC=n(Be,"LI",{});var JBe=s(rC);CTe=n(JBe,"STRONG",{});var SCt=s(CTe);Ixr=r(SCt,"albert"),SCt.forEach(t),qxr=r(JBe," \u2014 "),NJ=n(JBe,"A",{href:!0});var RCt=s(NJ);Nxr=r(RCt,"FlaxAlbertForMaskedLM"),RCt.forEach(t),jxr=r(JBe," (ALBERT model)"),JBe.forEach(t),Dxr=i(Be),tC=n(Be,"LI",{});var YBe=s(tC);wTe=n(YBe,"STRONG",{});var BCt=s(wTe);Gxr=r(BCt,"bart"),BCt.forEach(t),Oxr=r(YBe," \u2014 "),jJ=n(YBe,"A",{href:!0});var PCt=s(jJ);Vxr=r(PCt,"FlaxBartForConditionalGeneration"),PCt.forEach(t),Xxr=r(YBe," (BART model)"),YBe.forEach(t),zxr=i(Be),aC=n(Be,"LI",{});var KBe=s(aC);ATe=n(KBe,"STRONG",{});var ICt=s(ATe);Qxr=r(ICt,"bert"),ICt.forEach(t),Wxr=r(KBe," \u2014 "),DJ=n(KBe,"A",{href:!0});var qCt=s(DJ);Hxr=r(qCt,"FlaxBertForMaskedLM"),qCt.forEach(t),Uxr=r(KBe," (BERT model)"),KBe.forEach(t),Jxr=i(Be),nC=n(Be,"LI",{});var ZBe=s(nC);yTe=n(ZBe,"STRONG",{});var NCt=s(yTe);Yxr=r(NCt,"big_bird"),NCt.forEach(t),Kxr=r(ZBe," \u2014 "),GJ=n(ZBe,"A",{href:!0});var jCt=s(GJ);Zxr=r(jCt,"FlaxBigBirdForMaskedLM"),jCt.forEach(t),e9r=r(ZBe," (BigBird model)"),ZBe.forEach(t),o9r=i(Be),sC=n(Be,"LI",{});var ePe=s(sC);LTe=n(ePe,"STRONG",{});var DCt=s(LTe);r9r=r(DCt,"distilbert"),DCt.forEach(t),t9r=r(ePe," \u2014 "),OJ=n(ePe,"A",{href:!0});var GCt=s(OJ);a9r=r(GCt,"FlaxDistilBertForMaskedLM"),GCt.forEach(t),n9r=r(ePe," (DistilBERT model)"),ePe.forEach(t),s9r=i(Be),lC=n(Be,"LI",{});var oPe=s(lC);xTe=n(oPe,"STRONG",{});var OCt=s(xTe);l9r=r(OCt,"electra"),OCt.forEach(t),i9r=r(oPe," \u2014 "),VJ=n(oPe,"A",{href:!0});var VCt=s(VJ);d9r=r(VCt,"FlaxElectraForMaskedLM"),VCt.forEach(t),c9r=r(oPe," (ELECTRA model)"),oPe.forEach(t),f9r=i(Be),iC=n(Be,"LI",{});var rPe=s(iC);$Te=n(rPe,"STRONG",{});var XCt=s($Te);m9r=r(XCt,"mbart"),XCt.forEach(t),g9r=r(rPe," \u2014 "),XJ=n(rPe,"A",{href:!0});var zCt=s(XJ);h9r=r(zCt,"FlaxMBartForConditionalGeneration"),zCt.forEach(t),p9r=r(rPe," (mBART model)"),rPe.forEach(t),u9r=i(Be),dC=n(Be,"LI",{});var tPe=s(dC);kTe=n(tPe,"STRONG",{});var QCt=s(kTe);_9r=r(QCt,"roberta"),QCt.forEach(t),b9r=r(tPe," \u2014 "),zJ=n(tPe,"A",{href:!0});var WCt=s(zJ);v9r=r(WCt,"FlaxRobertaForMaskedLM"),WCt.forEach(t),F9r=r(tPe," (RoBERTa model)"),tPe.forEach(t),T9r=i(Be),cC=n(Be,"LI",{});var aPe=s(cC);STe=n(aPe,"STRONG",{});var HCt=s(STe);M9r=r(HCt,"roformer"),HCt.forEach(t),E9r=r(aPe," \u2014 "),QJ=n(aPe,"A",{href:!0});var UCt=s(QJ);C9r=r(UCt,"FlaxRoFormerForMaskedLM"),UCt.forEach(t),w9r=r(aPe," (RoFormer model)"),aPe.forEach(t),A9r=i(Be),fC=n(Be,"LI",{});var nPe=s(fC);RTe=n(nPe,"STRONG",{});var JCt=s(RTe);y9r=r(JCt,"xlm-roberta"),JCt.forEach(t),L9r=r(nPe," \u2014 "),WJ=n(nPe,"A",{href:!0});var YCt=s(WJ);x9r=r(YCt,"FlaxXLMRobertaForMaskedLM"),YCt.forEach(t),$9r=r(nPe," (XLM-RoBERTa model)"),nPe.forEach(t),Be.forEach(t),k9r=i(Xl),T(mC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Oqe=i(f),Nc=n(f,"H2",{class:!0});var Uje=s(Nc);gC=n(Uje,"A",{id:!0,class:!0,href:!0});var KCt=s(gC);BTe=n(KCt,"SPAN",{});var ZCt=s(BTe);T(bx.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),S9r=i(Uje),PTe=n(Uje,"SPAN",{});var ewt=s(PTe);R9r=r(ewt,"FlaxAutoModelForSeq2SeqLM"),ewt.forEach(t),Uje.forEach(t),Vqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(vx.$$.fragment,zl),B9r=i(zl),jc=n(zl,"P",{});var XZ=s(jc);P9r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HJ=n(XZ,"A",{href:!0});var owt=s(HJ);I9r=r(owt,"from_pretrained()"),owt.forEach(t),q9r=r(XZ," class method or the "),UJ=n(XZ,"A",{href:!0});var rwt=s(UJ);N9r=r(rwt,"from_config()"),rwt.forEach(t),j9r=r(XZ,` class
method.`),XZ.forEach(t),D9r=i(zl),Fx=n(zl,"P",{});var Jje=s(Fx);G9r=r(Jje,"This class cannot be instantiated directly using "),ITe=n(Jje,"CODE",{});var twt=s(ITe);O9r=r(twt,"__init__()"),twt.forEach(t),V9r=r(Jje," (throws an error)."),Jje.forEach(t),X9r=i(zl),Vt=n(zl,"DIV",{class:!0});var B6=s(Vt);T(Tx.$$.fragment,B6),z9r=i(B6),qTe=n(B6,"P",{});var awt=s(qTe);Q9r=r(awt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),awt.forEach(t),W9r=i(B6),Dc=n(B6,"P",{});var zZ=s(Dc);H9r=r(zZ,`Note:
Loading a model from its configuration file does `),NTe=n(zZ,"STRONG",{});var nwt=s(NTe);U9r=r(nwt,"not"),nwt.forEach(t),J9r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(zZ,"A",{href:!0});var swt=s(JJ);Y9r=r(swt,"from_pretrained()"),swt.forEach(t),K9r=r(zZ," to load the model weights."),zZ.forEach(t),Z9r=i(B6),T(hC.$$.fragment,B6),B6.forEach(t),e$r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(Mx.$$.fragment,Ql),o$r=i(Ql),jTe=n(Ql,"P",{});var lwt=s(jTe);r$r=r(lwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lwt.forEach(t),t$r=i(Ql),_n=n(Ql,"P",{});var P6=s(_n);a$r=r(P6,"The model class to instantiate is selected based on the "),DTe=n(P6,"CODE",{});var iwt=s(DTe);n$r=r(iwt,"model_type"),iwt.forEach(t),s$r=r(P6,` property of the config object (either
passed as an argument or loaded from `),GTe=n(P6,"CODE",{});var dwt=s(GTe);l$r=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),i$r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(P6,"CODE",{});var cwt=s(OTe);d$r=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),c$r=r(P6,":"),P6.forEach(t),f$r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);pC=n(Ve,"LI",{});var sPe=s(pC);VTe=n(sPe,"STRONG",{});var fwt=s(VTe);m$r=r(fwt,"bart"),fwt.forEach(t),g$r=r(sPe," \u2014 "),YJ=n(sPe,"A",{href:!0});var mwt=s(YJ);h$r=r(mwt,"FlaxBartForConditionalGeneration"),mwt.forEach(t),p$r=r(sPe," (BART model)"),sPe.forEach(t),u$r=i(Ve),uC=n(Ve,"LI",{});var lPe=s(uC);XTe=n(lPe,"STRONG",{});var gwt=s(XTe);_$r=r(gwt,"blenderbot"),gwt.forEach(t),b$r=r(lPe," \u2014 "),KJ=n(lPe,"A",{href:!0});var hwt=s(KJ);v$r=r(hwt,"FlaxBlenderbotForConditionalGeneration"),hwt.forEach(t),F$r=r(lPe," (Blenderbot model)"),lPe.forEach(t),T$r=i(Ve),_C=n(Ve,"LI",{});var iPe=s(_C);zTe=n(iPe,"STRONG",{});var pwt=s(zTe);M$r=r(pwt,"blenderbot-small"),pwt.forEach(t),E$r=r(iPe," \u2014 "),ZJ=n(iPe,"A",{href:!0});var uwt=s(ZJ);C$r=r(uwt,"FlaxBlenderbotSmallForConditionalGeneration"),uwt.forEach(t),w$r=r(iPe," (BlenderbotSmall model)"),iPe.forEach(t),A$r=i(Ve),bC=n(Ve,"LI",{});var dPe=s(bC);QTe=n(dPe,"STRONG",{});var _wt=s(QTe);y$r=r(_wt,"encoder-decoder"),_wt.forEach(t),L$r=r(dPe," \u2014 "),eY=n(dPe,"A",{href:!0});var bwt=s(eY);x$r=r(bwt,"FlaxEncoderDecoderModel"),bwt.forEach(t),$$r=r(dPe," (Encoder decoder model)"),dPe.forEach(t),k$r=i(Ve),vC=n(Ve,"LI",{});var cPe=s(vC);WTe=n(cPe,"STRONG",{});var vwt=s(WTe);S$r=r(vwt,"marian"),vwt.forEach(t),R$r=r(cPe," \u2014 "),oY=n(cPe,"A",{href:!0});var Fwt=s(oY);B$r=r(Fwt,"FlaxMarianMTModel"),Fwt.forEach(t),P$r=r(cPe," (Marian model)"),cPe.forEach(t),I$r=i(Ve),FC=n(Ve,"LI",{});var fPe=s(FC);HTe=n(fPe,"STRONG",{});var Twt=s(HTe);q$r=r(Twt,"mbart"),Twt.forEach(t),N$r=r(fPe," \u2014 "),rY=n(fPe,"A",{href:!0});var Mwt=s(rY);j$r=r(Mwt,"FlaxMBartForConditionalGeneration"),Mwt.forEach(t),D$r=r(fPe," (mBART model)"),fPe.forEach(t),G$r=i(Ve),TC=n(Ve,"LI",{});var mPe=s(TC);UTe=n(mPe,"STRONG",{});var Ewt=s(UTe);O$r=r(Ewt,"mt5"),Ewt.forEach(t),V$r=r(mPe," \u2014 "),tY=n(mPe,"A",{href:!0});var Cwt=s(tY);X$r=r(Cwt,"FlaxMT5ForConditionalGeneration"),Cwt.forEach(t),z$r=r(mPe," (mT5 model)"),mPe.forEach(t),Q$r=i(Ve),MC=n(Ve,"LI",{});var gPe=s(MC);JTe=n(gPe,"STRONG",{});var wwt=s(JTe);W$r=r(wwt,"pegasus"),wwt.forEach(t),H$r=r(gPe," \u2014 "),aY=n(gPe,"A",{href:!0});var Awt=s(aY);U$r=r(Awt,"FlaxPegasusForConditionalGeneration"),Awt.forEach(t),J$r=r(gPe," (Pegasus model)"),gPe.forEach(t),Y$r=i(Ve),EC=n(Ve,"LI",{});var hPe=s(EC);YTe=n(hPe,"STRONG",{});var ywt=s(YTe);K$r=r(ywt,"t5"),ywt.forEach(t),Z$r=r(hPe," \u2014 "),nY=n(hPe,"A",{href:!0});var Lwt=s(nY);ekr=r(Lwt,"FlaxT5ForConditionalGeneration"),Lwt.forEach(t),okr=r(hPe," (T5 model)"),hPe.forEach(t),Ve.forEach(t),rkr=i(Ql),T(CC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Xqe=i(f),Gc=n(f,"H2",{class:!0});var Yje=s(Gc);wC=n(Yje,"A",{id:!0,class:!0,href:!0});var xwt=s(wC);KTe=n(xwt,"SPAN",{});var $wt=s(KTe);T(Ex.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),tkr=i(Yje),ZTe=n(Yje,"SPAN",{});var kwt=s(ZTe);akr=r(kwt,"FlaxAutoModelForSequenceClassification"),kwt.forEach(t),Yje.forEach(t),zqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Cx.$$.fragment,Wl),nkr=i(Wl),Oc=n(Wl,"P",{});var QZ=s(Oc);skr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sY=n(QZ,"A",{href:!0});var Swt=s(sY);lkr=r(Swt,"from_pretrained()"),Swt.forEach(t),ikr=r(QZ," class method or the "),lY=n(QZ,"A",{href:!0});var Rwt=s(lY);dkr=r(Rwt,"from_config()"),Rwt.forEach(t),ckr=r(QZ,` class
method.`),QZ.forEach(t),fkr=i(Wl),wx=n(Wl,"P",{});var Kje=s(wx);mkr=r(Kje,"This class cannot be instantiated directly using "),e7e=n(Kje,"CODE",{});var Bwt=s(e7e);gkr=r(Bwt,"__init__()"),Bwt.forEach(t),hkr=r(Kje," (throws an error)."),Kje.forEach(t),pkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var I6=s(Xt);T(Ax.$$.fragment,I6),ukr=i(I6),o7e=n(I6,"P",{});var Pwt=s(o7e);_kr=r(Pwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pwt.forEach(t),bkr=i(I6),Vc=n(I6,"P",{});var WZ=s(Vc);vkr=r(WZ,`Note:
Loading a model from its configuration file does `),r7e=n(WZ,"STRONG",{});var Iwt=s(r7e);Fkr=r(Iwt,"not"),Iwt.forEach(t),Tkr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(WZ,"A",{href:!0});var qwt=s(iY);Mkr=r(qwt,"from_pretrained()"),qwt.forEach(t),Ekr=r(WZ," to load the model weights."),WZ.forEach(t),Ckr=i(I6),T(AC.$$.fragment,I6),I6.forEach(t),wkr=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(yx.$$.fragment,Hl),Akr=i(Hl),t7e=n(Hl,"P",{});var Nwt=s(t7e);ykr=r(Nwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nwt.forEach(t),Lkr=i(Hl),bn=n(Hl,"P",{});var q6=s(bn);xkr=r(q6,"The model class to instantiate is selected based on the "),a7e=n(q6,"CODE",{});var jwt=s(a7e);$kr=r(jwt,"model_type"),jwt.forEach(t),kkr=r(q6,` property of the config object (either
passed as an argument or loaded from `),n7e=n(q6,"CODE",{});var Dwt=s(n7e);Skr=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),Rkr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(q6,"CODE",{});var Gwt=s(s7e);Bkr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),Pkr=r(q6,":"),q6.forEach(t),Ikr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);yC=n(Pe,"LI",{});var pPe=s(yC);l7e=n(pPe,"STRONG",{});var Owt=s(l7e);qkr=r(Owt,"albert"),Owt.forEach(t),Nkr=r(pPe," \u2014 "),dY=n(pPe,"A",{href:!0});var Vwt=s(dY);jkr=r(Vwt,"FlaxAlbertForSequenceClassification"),Vwt.forEach(t),Dkr=r(pPe," (ALBERT model)"),pPe.forEach(t),Gkr=i(Pe),LC=n(Pe,"LI",{});var uPe=s(LC);i7e=n(uPe,"STRONG",{});var Xwt=s(i7e);Okr=r(Xwt,"bart"),Xwt.forEach(t),Vkr=r(uPe," \u2014 "),cY=n(uPe,"A",{href:!0});var zwt=s(cY);Xkr=r(zwt,"FlaxBartForSequenceClassification"),zwt.forEach(t),zkr=r(uPe," (BART model)"),uPe.forEach(t),Qkr=i(Pe),xC=n(Pe,"LI",{});var _Pe=s(xC);d7e=n(_Pe,"STRONG",{});var Qwt=s(d7e);Wkr=r(Qwt,"bert"),Qwt.forEach(t),Hkr=r(_Pe," \u2014 "),fY=n(_Pe,"A",{href:!0});var Wwt=s(fY);Ukr=r(Wwt,"FlaxBertForSequenceClassification"),Wwt.forEach(t),Jkr=r(_Pe," (BERT model)"),_Pe.forEach(t),Ykr=i(Pe),$C=n(Pe,"LI",{});var bPe=s($C);c7e=n(bPe,"STRONG",{});var Hwt=s(c7e);Kkr=r(Hwt,"big_bird"),Hwt.forEach(t),Zkr=r(bPe," \u2014 "),mY=n(bPe,"A",{href:!0});var Uwt=s(mY);eSr=r(Uwt,"FlaxBigBirdForSequenceClassification"),Uwt.forEach(t),oSr=r(bPe," (BigBird model)"),bPe.forEach(t),rSr=i(Pe),kC=n(Pe,"LI",{});var vPe=s(kC);f7e=n(vPe,"STRONG",{});var Jwt=s(f7e);tSr=r(Jwt,"distilbert"),Jwt.forEach(t),aSr=r(vPe," \u2014 "),gY=n(vPe,"A",{href:!0});var Ywt=s(gY);nSr=r(Ywt,"FlaxDistilBertForSequenceClassification"),Ywt.forEach(t),sSr=r(vPe," (DistilBERT model)"),vPe.forEach(t),lSr=i(Pe),SC=n(Pe,"LI",{});var FPe=s(SC);m7e=n(FPe,"STRONG",{});var Kwt=s(m7e);iSr=r(Kwt,"electra"),Kwt.forEach(t),dSr=r(FPe," \u2014 "),hY=n(FPe,"A",{href:!0});var Zwt=s(hY);cSr=r(Zwt,"FlaxElectraForSequenceClassification"),Zwt.forEach(t),fSr=r(FPe," (ELECTRA model)"),FPe.forEach(t),mSr=i(Pe),RC=n(Pe,"LI",{});var TPe=s(RC);g7e=n(TPe,"STRONG",{});var eAt=s(g7e);gSr=r(eAt,"mbart"),eAt.forEach(t),hSr=r(TPe," \u2014 "),pY=n(TPe,"A",{href:!0});var oAt=s(pY);pSr=r(oAt,"FlaxMBartForSequenceClassification"),oAt.forEach(t),uSr=r(TPe," (mBART model)"),TPe.forEach(t),_Sr=i(Pe),BC=n(Pe,"LI",{});var MPe=s(BC);h7e=n(MPe,"STRONG",{});var rAt=s(h7e);bSr=r(rAt,"roberta"),rAt.forEach(t),vSr=r(MPe," \u2014 "),uY=n(MPe,"A",{href:!0});var tAt=s(uY);FSr=r(tAt,"FlaxRobertaForSequenceClassification"),tAt.forEach(t),TSr=r(MPe," (RoBERTa model)"),MPe.forEach(t),MSr=i(Pe),PC=n(Pe,"LI",{});var EPe=s(PC);p7e=n(EPe,"STRONG",{});var aAt=s(p7e);ESr=r(aAt,"roformer"),aAt.forEach(t),CSr=r(EPe," \u2014 "),_Y=n(EPe,"A",{href:!0});var nAt=s(_Y);wSr=r(nAt,"FlaxRoFormerForSequenceClassification"),nAt.forEach(t),ASr=r(EPe," (RoFormer model)"),EPe.forEach(t),ySr=i(Pe),IC=n(Pe,"LI",{});var CPe=s(IC);u7e=n(CPe,"STRONG",{});var sAt=s(u7e);LSr=r(sAt,"xlm-roberta"),sAt.forEach(t),xSr=r(CPe," \u2014 "),bY=n(CPe,"A",{href:!0});var lAt=s(bY);$Sr=r(lAt,"FlaxXLMRobertaForSequenceClassification"),lAt.forEach(t),kSr=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),Pe.forEach(t),SSr=i(Hl),T(qC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Qqe=i(f),Xc=n(f,"H2",{class:!0});var Zje=s(Xc);NC=n(Zje,"A",{id:!0,class:!0,href:!0});var iAt=s(NC);_7e=n(iAt,"SPAN",{});var dAt=s(_7e);T(Lx.$$.fragment,dAt),dAt.forEach(t),iAt.forEach(t),RSr=i(Zje),b7e=n(Zje,"SPAN",{});var cAt=s(b7e);BSr=r(cAt,"FlaxAutoModelForQuestionAnswering"),cAt.forEach(t),Zje.forEach(t),Wqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(xx.$$.fragment,Ul),PSr=i(Ul),zc=n(Ul,"P",{});var HZ=s(zc);ISr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vY=n(HZ,"A",{href:!0});var fAt=s(vY);qSr=r(fAt,"from_pretrained()"),fAt.forEach(t),NSr=r(HZ," class method or the "),FY=n(HZ,"A",{href:!0});var mAt=s(FY);jSr=r(mAt,"from_config()"),mAt.forEach(t),DSr=r(HZ,` class
method.`),HZ.forEach(t),GSr=i(Ul),$x=n(Ul,"P",{});var eDe=s($x);OSr=r(eDe,"This class cannot be instantiated directly using "),v7e=n(eDe,"CODE",{});var gAt=s(v7e);VSr=r(gAt,"__init__()"),gAt.forEach(t),XSr=r(eDe," (throws an error)."),eDe.forEach(t),zSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var N6=s(zt);T(kx.$$.fragment,N6),QSr=i(N6),F7e=n(N6,"P",{});var hAt=s(F7e);WSr=r(hAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hAt.forEach(t),HSr=i(N6),Qc=n(N6,"P",{});var UZ=s(Qc);USr=r(UZ,`Note:
Loading a model from its configuration file does `),T7e=n(UZ,"STRONG",{});var pAt=s(T7e);JSr=r(pAt,"not"),pAt.forEach(t),YSr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(UZ,"A",{href:!0});var uAt=s(TY);KSr=r(uAt,"from_pretrained()"),uAt.forEach(t),ZSr=r(UZ," to load the model weights."),UZ.forEach(t),eRr=i(N6),T(jC.$$.fragment,N6),N6.forEach(t),oRr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Sx.$$.fragment,Jl),rRr=i(Jl),M7e=n(Jl,"P",{});var _At=s(M7e);tRr=r(_At,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_At.forEach(t),aRr=i(Jl),vn=n(Jl,"P",{});var j6=s(vn);nRr=r(j6,"The model class to instantiate is selected based on the "),E7e=n(j6,"CODE",{});var bAt=s(E7e);sRr=r(bAt,"model_type"),bAt.forEach(t),lRr=r(j6,` property of the config object (either
passed as an argument or loaded from `),C7e=n(j6,"CODE",{});var vAt=s(C7e);iRr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),dRr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(j6,"CODE",{});var FAt=s(w7e);cRr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),fRr=r(j6,":"),j6.forEach(t),mRr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);DC=n(Ie,"LI",{});var wPe=s(DC);A7e=n(wPe,"STRONG",{});var TAt=s(A7e);gRr=r(TAt,"albert"),TAt.forEach(t),hRr=r(wPe," \u2014 "),MY=n(wPe,"A",{href:!0});var MAt=s(MY);pRr=r(MAt,"FlaxAlbertForQuestionAnswering"),MAt.forEach(t),uRr=r(wPe," (ALBERT model)"),wPe.forEach(t),_Rr=i(Ie),GC=n(Ie,"LI",{});var APe=s(GC);y7e=n(APe,"STRONG",{});var EAt=s(y7e);bRr=r(EAt,"bart"),EAt.forEach(t),vRr=r(APe," \u2014 "),EY=n(APe,"A",{href:!0});var CAt=s(EY);FRr=r(CAt,"FlaxBartForQuestionAnswering"),CAt.forEach(t),TRr=r(APe," (BART model)"),APe.forEach(t),MRr=i(Ie),OC=n(Ie,"LI",{});var yPe=s(OC);L7e=n(yPe,"STRONG",{});var wAt=s(L7e);ERr=r(wAt,"bert"),wAt.forEach(t),CRr=r(yPe," \u2014 "),CY=n(yPe,"A",{href:!0});var AAt=s(CY);wRr=r(AAt,"FlaxBertForQuestionAnswering"),AAt.forEach(t),ARr=r(yPe," (BERT model)"),yPe.forEach(t),yRr=i(Ie),VC=n(Ie,"LI",{});var LPe=s(VC);x7e=n(LPe,"STRONG",{});var yAt=s(x7e);LRr=r(yAt,"big_bird"),yAt.forEach(t),xRr=r(LPe," \u2014 "),wY=n(LPe,"A",{href:!0});var LAt=s(wY);$Rr=r(LAt,"FlaxBigBirdForQuestionAnswering"),LAt.forEach(t),kRr=r(LPe," (BigBird model)"),LPe.forEach(t),SRr=i(Ie),XC=n(Ie,"LI",{});var xPe=s(XC);$7e=n(xPe,"STRONG",{});var xAt=s($7e);RRr=r(xAt,"distilbert"),xAt.forEach(t),BRr=r(xPe," \u2014 "),AY=n(xPe,"A",{href:!0});var $At=s(AY);PRr=r($At,"FlaxDistilBertForQuestionAnswering"),$At.forEach(t),IRr=r(xPe," (DistilBERT model)"),xPe.forEach(t),qRr=i(Ie),zC=n(Ie,"LI",{});var $Pe=s(zC);k7e=n($Pe,"STRONG",{});var kAt=s(k7e);NRr=r(kAt,"electra"),kAt.forEach(t),jRr=r($Pe," \u2014 "),yY=n($Pe,"A",{href:!0});var SAt=s(yY);DRr=r(SAt,"FlaxElectraForQuestionAnswering"),SAt.forEach(t),GRr=r($Pe," (ELECTRA model)"),$Pe.forEach(t),ORr=i(Ie),QC=n(Ie,"LI",{});var kPe=s(QC);S7e=n(kPe,"STRONG",{});var RAt=s(S7e);VRr=r(RAt,"mbart"),RAt.forEach(t),XRr=r(kPe," \u2014 "),LY=n(kPe,"A",{href:!0});var BAt=s(LY);zRr=r(BAt,"FlaxMBartForQuestionAnswering"),BAt.forEach(t),QRr=r(kPe," (mBART model)"),kPe.forEach(t),WRr=i(Ie),WC=n(Ie,"LI",{});var SPe=s(WC);R7e=n(SPe,"STRONG",{});var PAt=s(R7e);HRr=r(PAt,"roberta"),PAt.forEach(t),URr=r(SPe," \u2014 "),xY=n(SPe,"A",{href:!0});var IAt=s(xY);JRr=r(IAt,"FlaxRobertaForQuestionAnswering"),IAt.forEach(t),YRr=r(SPe," (RoBERTa model)"),SPe.forEach(t),KRr=i(Ie),HC=n(Ie,"LI",{});var RPe=s(HC);B7e=n(RPe,"STRONG",{});var qAt=s(B7e);ZRr=r(qAt,"roformer"),qAt.forEach(t),eBr=r(RPe," \u2014 "),$Y=n(RPe,"A",{href:!0});var NAt=s($Y);oBr=r(NAt,"FlaxRoFormerForQuestionAnswering"),NAt.forEach(t),rBr=r(RPe," (RoFormer model)"),RPe.forEach(t),tBr=i(Ie),UC=n(Ie,"LI",{});var BPe=s(UC);P7e=n(BPe,"STRONG",{});var jAt=s(P7e);aBr=r(jAt,"xlm-roberta"),jAt.forEach(t),nBr=r(BPe," \u2014 "),kY=n(BPe,"A",{href:!0});var DAt=s(kY);sBr=r(DAt,"FlaxXLMRobertaForQuestionAnswering"),DAt.forEach(t),lBr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),Ie.forEach(t),iBr=i(Jl),T(JC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Hqe=i(f),Wc=n(f,"H2",{class:!0});var oDe=s(Wc);YC=n(oDe,"A",{id:!0,class:!0,href:!0});var GAt=s(YC);I7e=n(GAt,"SPAN",{});var OAt=s(I7e);T(Rx.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),dBr=i(oDe),q7e=n(oDe,"SPAN",{});var VAt=s(q7e);cBr=r(VAt,"FlaxAutoModelForTokenClassification"),VAt.forEach(t),oDe.forEach(t),Uqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Bx.$$.fragment,Yl),fBr=i(Yl),Hc=n(Yl,"P",{});var JZ=s(Hc);mBr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SY=n(JZ,"A",{href:!0});var XAt=s(SY);gBr=r(XAt,"from_pretrained()"),XAt.forEach(t),hBr=r(JZ," class method or the "),RY=n(JZ,"A",{href:!0});var zAt=s(RY);pBr=r(zAt,"from_config()"),zAt.forEach(t),uBr=r(JZ,` class
method.`),JZ.forEach(t),_Br=i(Yl),Px=n(Yl,"P",{});var rDe=s(Px);bBr=r(rDe,"This class cannot be instantiated directly using "),N7e=n(rDe,"CODE",{});var QAt=s(N7e);vBr=r(QAt,"__init__()"),QAt.forEach(t),FBr=r(rDe," (throws an error)."),rDe.forEach(t),TBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var D6=s(Qt);T(Ix.$$.fragment,D6),MBr=i(D6),j7e=n(D6,"P",{});var WAt=s(j7e);EBr=r(WAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WAt.forEach(t),CBr=i(D6),Uc=n(D6,"P",{});var YZ=s(Uc);wBr=r(YZ,`Note:
Loading a model from its configuration file does `),D7e=n(YZ,"STRONG",{});var HAt=s(D7e);ABr=r(HAt,"not"),HAt.forEach(t),yBr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(YZ,"A",{href:!0});var UAt=s(BY);LBr=r(UAt,"from_pretrained()"),UAt.forEach(t),xBr=r(YZ," to load the model weights."),YZ.forEach(t),$Br=i(D6),T(KC.$$.fragment,D6),D6.forEach(t),kBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(qx.$$.fragment,Kl),SBr=i(Kl),G7e=n(Kl,"P",{});var JAt=s(G7e);RBr=r(JAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JAt.forEach(t),BBr=i(Kl),Fn=n(Kl,"P",{});var G6=s(Fn);PBr=r(G6,"The model class to instantiate is selected based on the "),O7e=n(G6,"CODE",{});var YAt=s(O7e);IBr=r(YAt,"model_type"),YAt.forEach(t),qBr=r(G6,` property of the config object (either
passed as an argument or loaded from `),V7e=n(G6,"CODE",{});var KAt=s(V7e);NBr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),jBr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(G6,"CODE",{});var ZAt=s(X7e);DBr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),GBr=r(G6,":"),G6.forEach(t),OBr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);ZC=n(Fo,"LI",{});var PPe=s(ZC);z7e=n(PPe,"STRONG",{});var e6t=s(z7e);VBr=r(e6t,"albert"),e6t.forEach(t),XBr=r(PPe," \u2014 "),PY=n(PPe,"A",{href:!0});var o6t=s(PY);zBr=r(o6t,"FlaxAlbertForTokenClassification"),o6t.forEach(t),QBr=r(PPe," (ALBERT model)"),PPe.forEach(t),WBr=i(Fo),ew=n(Fo,"LI",{});var IPe=s(ew);Q7e=n(IPe,"STRONG",{});var r6t=s(Q7e);HBr=r(r6t,"bert"),r6t.forEach(t),UBr=r(IPe," \u2014 "),IY=n(IPe,"A",{href:!0});var t6t=s(IY);JBr=r(t6t,"FlaxBertForTokenClassification"),t6t.forEach(t),YBr=r(IPe," (BERT model)"),IPe.forEach(t),KBr=i(Fo),ow=n(Fo,"LI",{});var qPe=s(ow);W7e=n(qPe,"STRONG",{});var a6t=s(W7e);ZBr=r(a6t,"big_bird"),a6t.forEach(t),ePr=r(qPe," \u2014 "),qY=n(qPe,"A",{href:!0});var n6t=s(qY);oPr=r(n6t,"FlaxBigBirdForTokenClassification"),n6t.forEach(t),rPr=r(qPe," (BigBird model)"),qPe.forEach(t),tPr=i(Fo),rw=n(Fo,"LI",{});var NPe=s(rw);H7e=n(NPe,"STRONG",{});var s6t=s(H7e);aPr=r(s6t,"distilbert"),s6t.forEach(t),nPr=r(NPe," \u2014 "),NY=n(NPe,"A",{href:!0});var l6t=s(NY);sPr=r(l6t,"FlaxDistilBertForTokenClassification"),l6t.forEach(t),lPr=r(NPe," (DistilBERT model)"),NPe.forEach(t),iPr=i(Fo),tw=n(Fo,"LI",{});var jPe=s(tw);U7e=n(jPe,"STRONG",{});var i6t=s(U7e);dPr=r(i6t,"electra"),i6t.forEach(t),cPr=r(jPe," \u2014 "),jY=n(jPe,"A",{href:!0});var d6t=s(jY);fPr=r(d6t,"FlaxElectraForTokenClassification"),d6t.forEach(t),mPr=r(jPe," (ELECTRA model)"),jPe.forEach(t),gPr=i(Fo),aw=n(Fo,"LI",{});var DPe=s(aw);J7e=n(DPe,"STRONG",{});var c6t=s(J7e);hPr=r(c6t,"roberta"),c6t.forEach(t),pPr=r(DPe," \u2014 "),DY=n(DPe,"A",{href:!0});var f6t=s(DY);uPr=r(f6t,"FlaxRobertaForTokenClassification"),f6t.forEach(t),_Pr=r(DPe," (RoBERTa model)"),DPe.forEach(t),bPr=i(Fo),nw=n(Fo,"LI",{});var GPe=s(nw);Y7e=n(GPe,"STRONG",{});var m6t=s(Y7e);vPr=r(m6t,"roformer"),m6t.forEach(t),FPr=r(GPe," \u2014 "),GY=n(GPe,"A",{href:!0});var g6t=s(GY);TPr=r(g6t,"FlaxRoFormerForTokenClassification"),g6t.forEach(t),MPr=r(GPe," (RoFormer model)"),GPe.forEach(t),EPr=i(Fo),sw=n(Fo,"LI",{});var OPe=s(sw);K7e=n(OPe,"STRONG",{});var h6t=s(K7e);CPr=r(h6t,"xlm-roberta"),h6t.forEach(t),wPr=r(OPe," \u2014 "),OY=n(OPe,"A",{href:!0});var p6t=s(OY);APr=r(p6t,"FlaxXLMRobertaForTokenClassification"),p6t.forEach(t),yPr=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),Fo.forEach(t),LPr=i(Kl),T(lw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Jqe=i(f),Jc=n(f,"H2",{class:!0});var tDe=s(Jc);iw=n(tDe,"A",{id:!0,class:!0,href:!0});var u6t=s(iw);Z7e=n(u6t,"SPAN",{});var _6t=s(Z7e);T(Nx.$$.fragment,_6t),_6t.forEach(t),u6t.forEach(t),xPr=i(tDe),eMe=n(tDe,"SPAN",{});var b6t=s(eMe);$Pr=r(b6t,"FlaxAutoModelForMultipleChoice"),b6t.forEach(t),tDe.forEach(t),Yqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(jx.$$.fragment,Zl),kPr=i(Zl),Yc=n(Zl,"P",{});var KZ=s(Yc);SPr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VY=n(KZ,"A",{href:!0});var v6t=s(VY);RPr=r(v6t,"from_pretrained()"),v6t.forEach(t),BPr=r(KZ," class method or the "),XY=n(KZ,"A",{href:!0});var F6t=s(XY);PPr=r(F6t,"from_config()"),F6t.forEach(t),IPr=r(KZ,` class
method.`),KZ.forEach(t),qPr=i(Zl),Dx=n(Zl,"P",{});var aDe=s(Dx);NPr=r(aDe,"This class cannot be instantiated directly using "),oMe=n(aDe,"CODE",{});var T6t=s(oMe);jPr=r(T6t,"__init__()"),T6t.forEach(t),DPr=r(aDe," (throws an error)."),aDe.forEach(t),GPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var O6=s(Wt);T(Gx.$$.fragment,O6),OPr=i(O6),rMe=n(O6,"P",{});var M6t=s(rMe);VPr=r(M6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M6t.forEach(t),XPr=i(O6),Kc=n(O6,"P",{});var ZZ=s(Kc);zPr=r(ZZ,`Note:
Loading a model from its configuration file does `),tMe=n(ZZ,"STRONG",{});var E6t=s(tMe);QPr=r(E6t,"not"),E6t.forEach(t),WPr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(ZZ,"A",{href:!0});var C6t=s(zY);HPr=r(C6t,"from_pretrained()"),C6t.forEach(t),UPr=r(ZZ," to load the model weights."),ZZ.forEach(t),JPr=i(O6),T(dw.$$.fragment,O6),O6.forEach(t),YPr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Ox.$$.fragment,ei),KPr=i(ei),aMe=n(ei,"P",{});var w6t=s(aMe);ZPr=r(w6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w6t.forEach(t),eIr=i(ei),Tn=n(ei,"P",{});var V6=s(Tn);oIr=r(V6,"The model class to instantiate is selected based on the "),nMe=n(V6,"CODE",{});var A6t=s(nMe);rIr=r(A6t,"model_type"),A6t.forEach(t),tIr=r(V6,` property of the config object (either
passed as an argument or loaded from `),sMe=n(V6,"CODE",{});var y6t=s(sMe);aIr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),nIr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(V6,"CODE",{});var L6t=s(lMe);sIr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),lIr=r(V6,":"),V6.forEach(t),iIr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);cw=n(To,"LI",{});var VPe=s(cw);iMe=n(VPe,"STRONG",{});var x6t=s(iMe);dIr=r(x6t,"albert"),x6t.forEach(t),cIr=r(VPe," \u2014 "),QY=n(VPe,"A",{href:!0});var $6t=s(QY);fIr=r($6t,"FlaxAlbertForMultipleChoice"),$6t.forEach(t),mIr=r(VPe," (ALBERT model)"),VPe.forEach(t),gIr=i(To),fw=n(To,"LI",{});var XPe=s(fw);dMe=n(XPe,"STRONG",{});var k6t=s(dMe);hIr=r(k6t,"bert"),k6t.forEach(t),pIr=r(XPe," \u2014 "),WY=n(XPe,"A",{href:!0});var S6t=s(WY);uIr=r(S6t,"FlaxBertForMultipleChoice"),S6t.forEach(t),_Ir=r(XPe," (BERT model)"),XPe.forEach(t),bIr=i(To),mw=n(To,"LI",{});var zPe=s(mw);cMe=n(zPe,"STRONG",{});var R6t=s(cMe);vIr=r(R6t,"big_bird"),R6t.forEach(t),FIr=r(zPe," \u2014 "),HY=n(zPe,"A",{href:!0});var B6t=s(HY);TIr=r(B6t,"FlaxBigBirdForMultipleChoice"),B6t.forEach(t),MIr=r(zPe," (BigBird model)"),zPe.forEach(t),EIr=i(To),gw=n(To,"LI",{});var QPe=s(gw);fMe=n(QPe,"STRONG",{});var P6t=s(fMe);CIr=r(P6t,"distilbert"),P6t.forEach(t),wIr=r(QPe," \u2014 "),UY=n(QPe,"A",{href:!0});var I6t=s(UY);AIr=r(I6t,"FlaxDistilBertForMultipleChoice"),I6t.forEach(t),yIr=r(QPe," (DistilBERT model)"),QPe.forEach(t),LIr=i(To),hw=n(To,"LI",{});var WPe=s(hw);mMe=n(WPe,"STRONG",{});var q6t=s(mMe);xIr=r(q6t,"electra"),q6t.forEach(t),$Ir=r(WPe," \u2014 "),JY=n(WPe,"A",{href:!0});var N6t=s(JY);kIr=r(N6t,"FlaxElectraForMultipleChoice"),N6t.forEach(t),SIr=r(WPe," (ELECTRA model)"),WPe.forEach(t),RIr=i(To),pw=n(To,"LI",{});var HPe=s(pw);gMe=n(HPe,"STRONG",{});var j6t=s(gMe);BIr=r(j6t,"roberta"),j6t.forEach(t),PIr=r(HPe," \u2014 "),YY=n(HPe,"A",{href:!0});var D6t=s(YY);IIr=r(D6t,"FlaxRobertaForMultipleChoice"),D6t.forEach(t),qIr=r(HPe," (RoBERTa model)"),HPe.forEach(t),NIr=i(To),uw=n(To,"LI",{});var UPe=s(uw);hMe=n(UPe,"STRONG",{});var G6t=s(hMe);jIr=r(G6t,"roformer"),G6t.forEach(t),DIr=r(UPe," \u2014 "),KY=n(UPe,"A",{href:!0});var O6t=s(KY);GIr=r(O6t,"FlaxRoFormerForMultipleChoice"),O6t.forEach(t),OIr=r(UPe," (RoFormer model)"),UPe.forEach(t),VIr=i(To),_w=n(To,"LI",{});var JPe=s(_w);pMe=n(JPe,"STRONG",{});var V6t=s(pMe);XIr=r(V6t,"xlm-roberta"),V6t.forEach(t),zIr=r(JPe," \u2014 "),ZY=n(JPe,"A",{href:!0});var X6t=s(ZY);QIr=r(X6t,"FlaxXLMRobertaForMultipleChoice"),X6t.forEach(t),WIr=r(JPe," (XLM-RoBERTa model)"),JPe.forEach(t),To.forEach(t),HIr=i(ei),T(bw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Kqe=i(f),Zc=n(f,"H2",{class:!0});var nDe=s(Zc);vw=n(nDe,"A",{id:!0,class:!0,href:!0});var z6t=s(vw);uMe=n(z6t,"SPAN",{});var Q6t=s(uMe);T(Vx.$$.fragment,Q6t),Q6t.forEach(t),z6t.forEach(t),UIr=i(nDe),_Me=n(nDe,"SPAN",{});var W6t=s(_Me);JIr=r(W6t,"FlaxAutoModelForNextSentencePrediction"),W6t.forEach(t),nDe.forEach(t),Zqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Xx.$$.fragment,oi),YIr=i(oi),ef=n(oi,"P",{});var eee=s(ef);KIr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eK=n(eee,"A",{href:!0});var H6t=s(eK);ZIr=r(H6t,"from_pretrained()"),H6t.forEach(t),eqr=r(eee," class method or the "),oK=n(eee,"A",{href:!0});var U6t=s(oK);oqr=r(U6t,"from_config()"),U6t.forEach(t),rqr=r(eee,` class
method.`),eee.forEach(t),tqr=i(oi),zx=n(oi,"P",{});var sDe=s(zx);aqr=r(sDe,"This class cannot be instantiated directly using "),bMe=n(sDe,"CODE",{});var J6t=s(bMe);nqr=r(J6t,"__init__()"),J6t.forEach(t),sqr=r(sDe," (throws an error)."),sDe.forEach(t),lqr=i(oi),Ht=n(oi,"DIV",{class:!0});var X6=s(Ht);T(Qx.$$.fragment,X6),iqr=i(X6),vMe=n(X6,"P",{});var Y6t=s(vMe);dqr=r(Y6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y6t.forEach(t),cqr=i(X6),of=n(X6,"P",{});var oee=s(of);fqr=r(oee,`Note:
Loading a model from its configuration file does `),FMe=n(oee,"STRONG",{});var K6t=s(FMe);mqr=r(K6t,"not"),K6t.forEach(t),gqr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(oee,"A",{href:!0});var Z6t=s(rK);hqr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),pqr=r(oee," to load the model weights."),oee.forEach(t),uqr=i(X6),T(Fw.$$.fragment,X6),X6.forEach(t),_qr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Wx.$$.fragment,ri),bqr=i(ri),TMe=n(ri,"P",{});var e0t=s(TMe);vqr=r(e0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e0t.forEach(t),Fqr=i(ri),Mn=n(ri,"P",{});var z6=s(Mn);Tqr=r(z6,"The model class to instantiate is selected based on the "),MMe=n(z6,"CODE",{});var o0t=s(MMe);Mqr=r(o0t,"model_type"),o0t.forEach(t),Eqr=r(z6,` property of the config object (either
passed as an argument or loaded from `),EMe=n(z6,"CODE",{});var r0t=s(EMe);Cqr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),wqr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(z6,"CODE",{});var t0t=s(CMe);Aqr=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),yqr=r(z6,":"),z6.forEach(t),Lqr=i(ri),wMe=n(ri,"UL",{});var a0t=s(wMe);Tw=n(a0t,"LI",{});var YPe=s(Tw);AMe=n(YPe,"STRONG",{});var n0t=s(AMe);xqr=r(n0t,"bert"),n0t.forEach(t),$qr=r(YPe," \u2014 "),tK=n(YPe,"A",{href:!0});var s0t=s(tK);kqr=r(s0t,"FlaxBertForNextSentencePrediction"),s0t.forEach(t),Sqr=r(YPe," (BERT model)"),YPe.forEach(t),a0t.forEach(t),Rqr=i(ri),T(Mw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),eNe=i(f),rf=n(f,"H2",{class:!0});var lDe=s(rf);Ew=n(lDe,"A",{id:!0,class:!0,href:!0});var l0t=s(Ew);yMe=n(l0t,"SPAN",{});var i0t=s(yMe);T(Hx.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),Bqr=i(lDe),LMe=n(lDe,"SPAN",{});var d0t=s(LMe);Pqr=r(d0t,"FlaxAutoModelForImageClassification"),d0t.forEach(t),lDe.forEach(t),oNe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Ux.$$.fragment,ti),Iqr=i(ti),tf=n(ti,"P",{});var ree=s(tf);qqr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aK=n(ree,"A",{href:!0});var c0t=s(aK);Nqr=r(c0t,"from_pretrained()"),c0t.forEach(t),jqr=r(ree," class method or the "),nK=n(ree,"A",{href:!0});var f0t=s(nK);Dqr=r(f0t,"from_config()"),f0t.forEach(t),Gqr=r(ree,` class
method.`),ree.forEach(t),Oqr=i(ti),Jx=n(ti,"P",{});var iDe=s(Jx);Vqr=r(iDe,"This class cannot be instantiated directly using "),xMe=n(iDe,"CODE",{});var m0t=s(xMe);Xqr=r(m0t,"__init__()"),m0t.forEach(t),zqr=r(iDe," (throws an error)."),iDe.forEach(t),Qqr=i(ti),Ut=n(ti,"DIV",{class:!0});var Q6=s(Ut);T(Yx.$$.fragment,Q6),Wqr=i(Q6),$Me=n(Q6,"P",{});var g0t=s($Me);Hqr=r(g0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g0t.forEach(t),Uqr=i(Q6),af=n(Q6,"P",{});var tee=s(af);Jqr=r(tee,`Note:
Loading a model from its configuration file does `),kMe=n(tee,"STRONG",{});var h0t=s(kMe);Yqr=r(h0t,"not"),h0t.forEach(t),Kqr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(tee,"A",{href:!0});var p0t=s(sK);Zqr=r(p0t,"from_pretrained()"),p0t.forEach(t),eNr=r(tee," to load the model weights."),tee.forEach(t),oNr=i(Q6),T(Cw.$$.fragment,Q6),Q6.forEach(t),rNr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Kx.$$.fragment,ai),tNr=i(ai),SMe=n(ai,"P",{});var u0t=s(SMe);aNr=r(u0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u0t.forEach(t),nNr=i(ai),En=n(ai,"P",{});var W6=s(En);sNr=r(W6,"The model class to instantiate is selected based on the "),RMe=n(W6,"CODE",{});var _0t=s(RMe);lNr=r(_0t,"model_type"),_0t.forEach(t),iNr=r(W6,` property of the config object (either
passed as an argument or loaded from `),BMe=n(W6,"CODE",{});var b0t=s(BMe);dNr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),cNr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(W6,"CODE",{});var v0t=s(PMe);fNr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),mNr=r(W6,":"),W6.forEach(t),gNr=i(ai),Zx=n(ai,"UL",{});var dDe=s(Zx);ww=n(dDe,"LI",{});var KPe=s(ww);IMe=n(KPe,"STRONG",{});var F0t=s(IMe);hNr=r(F0t,"beit"),F0t.forEach(t),pNr=r(KPe," \u2014 "),lK=n(KPe,"A",{href:!0});var T0t=s(lK);uNr=r(T0t,"FlaxBeitForImageClassification"),T0t.forEach(t),_Nr=r(KPe," (BEiT model)"),KPe.forEach(t),bNr=i(dDe),Aw=n(dDe,"LI",{});var ZPe=s(Aw);qMe=n(ZPe,"STRONG",{});var M0t=s(qMe);vNr=r(M0t,"vit"),M0t.forEach(t),FNr=r(ZPe," \u2014 "),iK=n(ZPe,"A",{href:!0});var E0t=s(iK);TNr=r(E0t,"FlaxViTForImageClassification"),E0t.forEach(t),MNr=r(ZPe," (ViT model)"),ZPe.forEach(t),dDe.forEach(t),ENr=i(ai),T(yw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),rNe=i(f),nf=n(f,"H2",{class:!0});var cDe=s(nf);Lw=n(cDe,"A",{id:!0,class:!0,href:!0});var C0t=s(Lw);NMe=n(C0t,"SPAN",{});var w0t=s(NMe);T(e9.$$.fragment,w0t),w0t.forEach(t),C0t.forEach(t),CNr=i(cDe),jMe=n(cDe,"SPAN",{});var A0t=s(jMe);wNr=r(A0t,"FlaxAutoModelForVision2Seq"),A0t.forEach(t),cDe.forEach(t),tNe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(o9.$$.fragment,ni),ANr=i(ni),sf=n(ni,"P",{});var aee=s(sf);yNr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dK=n(aee,"A",{href:!0});var y0t=s(dK);LNr=r(y0t,"from_pretrained()"),y0t.forEach(t),xNr=r(aee," class method or the "),cK=n(aee,"A",{href:!0});var L0t=s(cK);$Nr=r(L0t,"from_config()"),L0t.forEach(t),kNr=r(aee,` class
method.`),aee.forEach(t),SNr=i(ni),r9=n(ni,"P",{});var fDe=s(r9);RNr=r(fDe,"This class cannot be instantiated directly using "),DMe=n(fDe,"CODE",{});var x0t=s(DMe);BNr=r(x0t,"__init__()"),x0t.forEach(t),PNr=r(fDe," (throws an error)."),fDe.forEach(t),INr=i(ni),Jt=n(ni,"DIV",{class:!0});var H6=s(Jt);T(t9.$$.fragment,H6),qNr=i(H6),GMe=n(H6,"P",{});var $0t=s(GMe);NNr=r($0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$0t.forEach(t),jNr=i(H6),lf=n(H6,"P",{});var nee=s(lf);DNr=r(nee,`Note:
Loading a model from its configuration file does `),OMe=n(nee,"STRONG",{});var k0t=s(OMe);GNr=r(k0t,"not"),k0t.forEach(t),ONr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(nee,"A",{href:!0});var S0t=s(fK);VNr=r(S0t,"from_pretrained()"),S0t.forEach(t),XNr=r(nee," to load the model weights."),nee.forEach(t),zNr=i(H6),T(xw.$$.fragment,H6),H6.forEach(t),QNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(a9.$$.fragment,si),WNr=i(si),VMe=n(si,"P",{});var R0t=s(VMe);HNr=r(R0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R0t.forEach(t),UNr=i(si),Cn=n(si,"P",{});var U6=s(Cn);JNr=r(U6,"The model class to instantiate is selected based on the "),XMe=n(U6,"CODE",{});var B0t=s(XMe);YNr=r(B0t,"model_type"),B0t.forEach(t),KNr=r(U6,` property of the config object (either
passed as an argument or loaded from `),zMe=n(U6,"CODE",{});var P0t=s(zMe);ZNr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),ejr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(U6,"CODE",{});var I0t=s(QMe);ojr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),rjr=r(U6,":"),U6.forEach(t),tjr=i(si),WMe=n(si,"UL",{});var q0t=s(WMe);$w=n(q0t,"LI",{});var eIe=s($w);HMe=n(eIe,"STRONG",{});var N0t=s(HMe);ajr=r(N0t,"vision-encoder-decoder"),N0t.forEach(t),njr=r(eIe," \u2014 "),mK=n(eIe,"A",{href:!0});var j0t=s(mK);sjr=r(j0t,"FlaxVisionEncoderDecoderModel"),j0t.forEach(t),ljr=r(eIe," (Vision Encoder decoder model)"),eIe.forEach(t),q0t.forEach(t),ijr=i(si),T(kw.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(VLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(E$,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(C$,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig"),c(w$,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig"),c(A$,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig"),c(y$,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig"),c(L$,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(x$,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig"),c($$,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(k$,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(S$,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(R$,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig"),c(B$,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig"),c(P$,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig"),c(I$,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig"),c(q$,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig"),c(N$,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig"),c(j$,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig"),c(D$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(G$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(O$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(V$,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig"),c(X$,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(z$,"href","/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Q$,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig"),c(W$,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig"),c(H$,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig"),c(U$,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig"),c(J$,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig"),c(Y$,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig"),c(K$,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Z$,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ek,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig"),c(ok,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig"),c(rk,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig"),c(tk,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig"),c(ak,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNConfig"),c(nk,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config"),c(sk,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(lk,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig"),c(ik,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig"),c(dk,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig"),c(ck,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(fk,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(mk,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gk,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig"),c(hk,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig"),c(pk,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeConfig"),c(uk,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig"),c(_k,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config"),c(bk,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig"),c(vk,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Fk,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig"),c(Tk,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Mk,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ek,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ck,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config"),c(wk,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ak,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(yk,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig"),c(Lk,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig"),c(xk,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig"),c($k,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig"),c(kk,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Sk,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Rk,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Bk,"href","/docs/transformers/pr_17253/en/model_doc/rag#transformers.RagConfig"),c(Pk,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmConfig"),c(Ik,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig"),c(qk,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig"),c(Nk,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig"),c(jk,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig"),c(Dk,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig"),c(Gk,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig"),c(Ok,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig"),c(Vk,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig"),c(Xk,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig"),c(zk,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig"),c(Qk,"href","/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Wk,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Hk,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Uk,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig"),c(Jk,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Yk,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig"),c(Kk,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config"),c(Zk,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig"),c(eS,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig"),c(oS,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rS,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRConfig"),c(tS,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aS,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nS,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig"),c(sS,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltConfig"),c(lS,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(iS,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(dS,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(cS,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig"),c(fS,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(mS,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(gS,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig"),c(hS,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig"),c(pS,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig"),c(uS,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(_S,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(bS,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(vS,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig"),c(FS,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig"),c(TS,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(MS,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ES,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(CS,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wS,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartTokenizer"),c(AS,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartTokenizerFast"),c(yS,"href","/docs/transformers/pr_17253/en/model_doc/barthez#transformers.BarthezTokenizer"),c(LS,"href","/docs/transformers/pr_17253/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(xS,"href","/docs/transformers/pr_17253/en/model_doc/bartpho#transformers.BartphoTokenizer"),c($S,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(kS,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(SS,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(RS,"href","/docs/transformers/pr_17253/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(BS,"href","/docs/transformers/pr_17253/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(PS,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(IS,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(qS,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NS,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(DS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(GS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(OS,"href","/docs/transformers/pr_17253/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VS,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XS,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineTokenizer"),c(QS,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPTokenizer"),c(WS,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HS,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(US,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JS,"href","/docs/transformers/pr_17253/en/model_doc/cpm#transformers.CpmTokenizer"),c(YS,"href","/docs/transformers/pr_17253/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KS,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZS,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oR,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rR,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tR,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aR,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nR,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sR,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iR,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dR,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraTokenizer"),c(cR,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(fR,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mR,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetTokenizer"),c(gR,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hR,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(pR,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelTokenizer"),c(uR,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(_R,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ER,"href","/docs/transformers/pr_17253/en/model_doc/herbert#transformers.HerbertTokenizer"),c(CR,"href","/docs/transformers/pr_17253/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(xR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c($R,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(kR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(SR,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RR,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(BR,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDTokenizer"),c(PR,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDTokenizerFast"),c(IR,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerTokenizer"),c(qR,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(NR,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeTokenizer"),c(jR,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(DR,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(GR,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(OR,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianTokenizer"),c(VR,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartTokenizer"),c(XR,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(zR,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(QR,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(WR,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(HR,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17253/en/model_doc/mluke#transformers.MLukeTokenizer"),c(JR,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(YR,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ZR,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(eB,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5Tokenizer"),c(oB,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5TokenizerFast"),c(rB,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(tB,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nB,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sB,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lB,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iB,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dB,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(cB,"href","/docs/transformers/pr_17253/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fB,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mB,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gB,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17253/en/model_doc/rag#transformers.RagTokenizer"),c(uB,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmTokenizer"),c(_B,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bB,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vB,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(FB,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertTokenizer"),c(TB,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(EB,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AB,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(yB,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(LB,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(xB,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c($B,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kB,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(SB,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(RB,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5Tokenizer"),c(PB,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5TokenizerFast"),c(IB,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasTokenizer"),c(qB,"href","/docs/transformers/pr_17253/en/model_doc/tapex#transformers.TapexTokenizer"),c(NB,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jB,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(DB,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(VB,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMTokenizer"),c(XB,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(zB,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMTokenizer"),c(QB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(HB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(UB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YB,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(KB,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(eP,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoFeatureExtractor"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(oP,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(rP,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sP,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gP,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hP,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AP,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(yP,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(LP,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPProcessor"),c(xP,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($P,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(kP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(BP,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(PP,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRProcessor"),c(IP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NP,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltProcessor"),c(jP,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoModel"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(OP,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VP,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XP,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zP,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertModel"),c(QP,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartModel"),c(WP,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitModel"),c(HP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel"),c(UP,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(JP,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdModel"),c(YP,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(KP,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(ZP,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(eI,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertModel"),c(oI,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineModel"),c(rI,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPModel"),c(tI,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertModel"),c(aI,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextModel"),c(nI,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLModel"),c(sI,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtModel"),c(lI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cI,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaModel"),c(fI,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mI,"href","/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gI,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTModel"),c(hI,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrModel"),c(pI,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertModel"),c(uI,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_I,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTModel"),c(bI,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraModel"),c(vI,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertModel"),c(FI,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaModel"),c(TI,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetModel"),c(MI,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTModel"),c(EI,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelModel"),c(CI,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wI,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNModel"),c(AI,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Model"),c(yI,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(LI,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJModel"),c(xI,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertModel"),c($I,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertModel"),c(kI,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SI,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RI,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(BI,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDModel"),c(PI,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerModel"),c(II,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeModel"),c(qI,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertModel"),c(NI,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Model"),c(jI,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianModel"),c(DI,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GI,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartModel"),c(OI,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VI,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XI,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetModel"),c(zI,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Model"),c(QI,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerModel"),c(WI,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(HI,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTModel"),c(UI,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusModel"),c(JI,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverModel"),c(YI,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartModel"),c(KI,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ZI,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(eq,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertModel"),c(oq,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModel"),c(rq,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetModel"),c(tq,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertModel"),c(aq,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetModel"),c(nq,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel"),c(sq,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaModel"),c(lq,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerModel"),c(iq,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerModel"),c(dq,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWModel"),c(cq,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDModel"),c(fq,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(mq,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterModel"),c(gq,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(hq,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinModel"),c(pq,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Model"),c(uq,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasModel"),c(_q,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(bq,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechModel"),c(vq,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Fq,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanModel"),c(Tq,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltModel"),c(Mq,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Eq,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Cq,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTModel"),c(wq,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Aq,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(yq,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMModel"),c(Lq,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMModel"),c(xq,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMModel"),c($q,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(kq,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Sq,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Rq,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetModel"),c(Bq,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosModel"),c(Pq,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"id","transformers.AutoModelForPreTraining"),c(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ju,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Iq,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qq,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jq,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Dq,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Gq,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForPreTraining"),c(Oq,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Vq,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zq,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Jq,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Kq,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Zq,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eN,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(oN,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rN,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tN,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aN,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nN,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(sN,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(lN,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(iN,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dN,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cN,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel"),c(fN,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mN,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(hN,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pN,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uN,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(_N,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(bN,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(vN,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(FN,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(TN,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MN,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EN,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CN,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x_,"id","transformers.AutoModelForCausalLM"),c(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(wN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LN,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForCausalLM"),c(xN,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertLMHeadModel"),c($N,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(kN,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(SN,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(RN,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(BN,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(PN,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(IN,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qN,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(NN,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForCausalLM"),c(jN,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(DN,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(GN,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ON,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianForCausalLM"),c(VN,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForCausalLM"),c(XN,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(zN,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(QN,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTForCausalLM"),c(WN,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(HN,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(UN,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(JN,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(YN,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(KN,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ZN,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ej,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(oj,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(rj,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tj,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(aj,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(nj,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(lj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ij,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(dj,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForMaskedLM"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(cj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gj,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(_j,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wj,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(yj,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xj,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($j,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(qj,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForSeq2SeqLM"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Wj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oD,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianMTModel"),c(nD,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForSequenceClassification"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(gD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uD,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c($D,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForMultipleChoice"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(dG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($G,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForNextSentencePrediction"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(GG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(zG,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(QG,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(WG,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(HG,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.AutoModelForTokenClassification"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForTokenClassification"),c(eO,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oO,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tO,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nO,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sO,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lO,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dO,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fO,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mO,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gO,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pO,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(uO,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(_O,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(FO,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(TO,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(CO,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(wO,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yO,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LO,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(xO,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c($O,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.AutoModelForQuestionAnswering"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(kO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(HO,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pV,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bV,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForTableQuestionAnswering"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(vV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.AutoModelForImageClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(EV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForImageClassification"),c(yV,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(LV,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtForImageClassification"),c(xV,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($V,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kV,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SV,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IV,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qV,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NV,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(jV,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(DV,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForImageClassification"),c(GV,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanForImageClassification"),c(OV,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.AutoModelForVision2Seq"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(VV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForAudioClassification"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(WV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForAudioFrameClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(aX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForCTC"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(fX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(pX,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForCTC"),c(uX,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForCTC"),c(_X,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(MX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AX,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForAudioXVector"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(yX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForMaskedImageModeling"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(BX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(NX,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jX,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForObjectDetection"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForObjectDetection"),c(XX,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForImageSegmentation"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(zX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForSemanticSegmentation"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(UX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(ZX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(ez,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(oz,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForInstanceSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.TFAutoModel"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertModel"),c(cz,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartModel"),c(fz,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertModel"),c(mz,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gz,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hz,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertModel"),c(pz,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.TFCLIPModel"),c(uz,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertModel"),c(_z,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextModel"),c(bz,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLModel"),c(vz,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Fz,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaModel"),c(Tz,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Mz,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Ez,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Cz,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraModel"),c(wz,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Az,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelModel"),c(yz,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Lz,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2Model"),c(xz,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJModel"),c($z,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.TFHubertModel"),c(kz,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Sz,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDModel"),c(Rz,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerModel"),c(Bz,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Pz,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianModel"),c(Iz,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartModel"),c(qz,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Nz,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jz,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5Model"),c(Dz,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Gz,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Oz,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertModel"),c(Vz,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaModel"),c(Xz,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerModel"),c(zz,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Qz,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5Model"),c(Wz,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasModel"),c(Hz,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Uz,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTModel"),c(Jz,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Yz,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Kz,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMModel"),c(Zz,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(eQ,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.TFAutoModelForPreTraining"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sQ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(fQ,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(gQ,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hQ,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_Q,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(CQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForCausalLM"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(SQ,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BQ,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(PQ,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(qQ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(NQ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jQ,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForImageClassification"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(QQ,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(WQ,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.TFAutoModelForMaskedLM"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eW,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(oW,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(rW,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(tW,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(nW,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sW,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(lW,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(iW,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(dW,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(cW,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fW,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(mW,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(gW,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(hW,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pW,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uW,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(_W,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(CW,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianMTModel"),c(AW,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(LW,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.TFAutoModelForSequenceClassification"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c($W,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForMultipleChoice"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(nH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(wH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(xH,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c($H,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForTokenClassification"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(GH,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(OH,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(VH,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(zH,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(QH,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(WH,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(HH,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(UH,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(JH,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(YH,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(KH,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(eU,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(oU,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(rU,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForQuestionAnswering"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(tU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(pU,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(CU,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForVision2Seq"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c($U,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.FlaxAutoModel"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(BU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertModel"),c(NU,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartModel"),c(jU,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitModel"),c(DU,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertModel"),c(GU,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(OU,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(VU,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(XU,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.FlaxCLIPModel"),c(zU,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(QU,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraModel"),c(WU,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(HU,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(UU,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(JU,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianModel"),c(YU,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartModel"),c(KU,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5Model"),c(ZU,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(eJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(oJ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(rJ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5Model"),c(tJ,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(aJ,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTModel"),c(nJ,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(sJ,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(lJ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.FlaxAutoModelForCausalLM"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(mJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(gJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(hJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(pJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(uJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(_J,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(bJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(vJ,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.FlaxAutoModelForPreTraining"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(CJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(AJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(yJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(LJ,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(BJ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForMaskedLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(oY,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(rY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForTokenClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(NY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(jY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(DY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(GY,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(OY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(KY,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForImageClassification"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(aK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(iK,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(dK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,J6),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,Y6),e(Xe,yn),e(Xe,Ln),e(Ln,K6),e(Xe,fi),e(Xe,xn),e(xn,Z6),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,_$),e(Ae,gi),e(gi,b$),e(Ae,v$),b(f,Eo,_),b(f,Ea,_),e(Ea,F$),e(Ea,pf),e(pf,T$),e(Ea,mDe),b(f,oIe,_),b(f,hi,_),e(hi,uf),e(uf,see),M(e0,see,null),e(hi,gDe),e(hi,lee),e(lee,hDe),b(f,rIe,_),b(f,$n,_),e($n,pDe),e($n,iee),e(iee,uDe),e($n,_De),e($n,dee),e(dee,bDe),e($n,vDe),b(f,tIe,_),M(o0,f,_),b(f,aIe,_),b(f,M$,_),e(M$,FDe),b(f,nIe,_),M(_f,f,_),b(f,sIe,_),b(f,pi,_),e(pi,bf),e(bf,cee),M(r0,cee,null),e(pi,TDe),e(pi,fee),e(fee,MDe),b(f,lIe,_),b(f,Co,_),M(t0,Co,null),e(Co,EDe),e(Co,a0),e(a0,CDe),e(a0,E$),e(E$,wDe),e(a0,ADe),e(Co,yDe),e(Co,n0),e(n0,LDe),e(n0,mee),e(mee,xDe),e(n0,$De),e(Co,kDe),e(Co,Er),M(s0,Er,null),e(Er,SDe),e(Er,gee),e(gee,RDe),e(Er,BDe),e(Er,ui),e(ui,PDe),e(ui,hee),e(hee,IDe),e(ui,qDe),e(ui,pee),e(pee,NDe),e(ui,jDe),e(Er,DDe),e(Er,A),e(A,vf),e(vf,uee),e(uee,GDe),e(vf,ODe),e(vf,C$),e(C$,VDe),e(vf,XDe),e(A,zDe),e(A,Ff),e(Ff,_ee),e(_ee,QDe),e(Ff,WDe),e(Ff,w$),e(w$,HDe),e(Ff,UDe),e(A,JDe),e(A,Tf),e(Tf,bee),e(bee,YDe),e(Tf,KDe),e(Tf,A$),e(A$,ZDe),e(Tf,eGe),e(A,oGe),e(A,Mf),e(Mf,vee),e(vee,rGe),e(Mf,tGe),e(Mf,y$),e(y$,aGe),e(Mf,nGe),e(A,sGe),e(A,Ef),e(Ef,Fee),e(Fee,lGe),e(Ef,iGe),e(Ef,L$),e(L$,dGe),e(Ef,cGe),e(A,fGe),e(A,Cf),e(Cf,Tee),e(Tee,mGe),e(Cf,gGe),e(Cf,x$),e(x$,hGe),e(Cf,pGe),e(A,uGe),e(A,wf),e(wf,Mee),e(Mee,_Ge),e(wf,bGe),e(wf,$$),e($$,vGe),e(wf,FGe),e(A,TGe),e(A,Af),e(Af,Eee),e(Eee,MGe),e(Af,EGe),e(Af,k$),e(k$,CGe),e(Af,wGe),e(A,AGe),e(A,yf),e(yf,Cee),e(Cee,yGe),e(yf,LGe),e(yf,S$),e(S$,xGe),e(yf,$Ge),e(A,kGe),e(A,Lf),e(Lf,wee),e(wee,SGe),e(Lf,RGe),e(Lf,R$),e(R$,BGe),e(Lf,PGe),e(A,IGe),e(A,xf),e(xf,Aee),e(Aee,qGe),e(xf,NGe),e(xf,B$),e(B$,jGe),e(xf,DGe),e(A,GGe),e(A,$f),e($f,yee),e(yee,OGe),e($f,VGe),e($f,P$),e(P$,XGe),e($f,zGe),e(A,QGe),e(A,kf),e(kf,Lee),e(Lee,WGe),e(kf,HGe),e(kf,I$),e(I$,UGe),e(kf,JGe),e(A,YGe),e(A,Sf),e(Sf,xee),e(xee,KGe),e(Sf,ZGe),e(Sf,q$),e(q$,eOe),e(Sf,oOe),e(A,rOe),e(A,Rf),e(Rf,$ee),e($ee,tOe),e(Rf,aOe),e(Rf,N$),e(N$,nOe),e(Rf,sOe),e(A,lOe),e(A,Bf),e(Bf,kee),e(kee,iOe),e(Bf,dOe),e(Bf,j$),e(j$,cOe),e(Bf,fOe),e(A,mOe),e(A,Pf),e(Pf,See),e(See,gOe),e(Pf,hOe),e(Pf,D$),e(D$,pOe),e(Pf,uOe),e(A,_Oe),e(A,If),e(If,Ree),e(Ree,bOe),e(If,vOe),e(If,G$),e(G$,FOe),e(If,TOe),e(A,MOe),e(A,qf),e(qf,Bee),e(Bee,EOe),e(qf,COe),e(qf,O$),e(O$,wOe),e(qf,AOe),e(A,yOe),e(A,Nf),e(Nf,Pee),e(Pee,LOe),e(Nf,xOe),e(Nf,V$),e(V$,$Oe),e(Nf,kOe),e(A,SOe),e(A,jf),e(jf,Iee),e(Iee,ROe),e(jf,BOe),e(jf,X$),e(X$,POe),e(jf,IOe),e(A,qOe),e(A,Df),e(Df,qee),e(qee,NOe),e(Df,jOe),e(Df,z$),e(z$,DOe),e(Df,GOe),e(A,OOe),e(A,Gf),e(Gf,Nee),e(Nee,VOe),e(Gf,XOe),e(Gf,Q$),e(Q$,zOe),e(Gf,QOe),e(A,WOe),e(A,Of),e(Of,jee),e(jee,HOe),e(Of,UOe),e(Of,W$),e(W$,JOe),e(Of,YOe),e(A,KOe),e(A,Vf),e(Vf,Dee),e(Dee,ZOe),e(Vf,eVe),e(Vf,H$),e(H$,oVe),e(Vf,rVe),e(A,tVe),e(A,Xf),e(Xf,Gee),e(Gee,aVe),e(Xf,nVe),e(Xf,U$),e(U$,sVe),e(Xf,lVe),e(A,iVe),e(A,zf),e(zf,Oee),e(Oee,dVe),e(zf,cVe),e(zf,J$),e(J$,fVe),e(zf,mVe),e(A,gVe),e(A,Qf),e(Qf,Vee),e(Vee,hVe),e(Qf,pVe),e(Qf,Y$),e(Y$,uVe),e(Qf,_Ve),e(A,bVe),e(A,Wf),e(Wf,Xee),e(Xee,vVe),e(Wf,FVe),e(Wf,K$),e(K$,TVe),e(Wf,MVe),e(A,EVe),e(A,Hf),e(Hf,zee),e(zee,CVe),e(Hf,wVe),e(Hf,Z$),e(Z$,AVe),e(Hf,yVe),e(A,LVe),e(A,Uf),e(Uf,Qee),e(Qee,xVe),e(Uf,$Ve),e(Uf,ek),e(ek,kVe),e(Uf,SVe),e(A,RVe),e(A,Jf),e(Jf,Wee),e(Wee,BVe),e(Jf,PVe),e(Jf,ok),e(ok,IVe),e(Jf,qVe),e(A,NVe),e(A,Yf),e(Yf,Hee),e(Hee,jVe),e(Yf,DVe),e(Yf,rk),e(rk,GVe),e(Yf,OVe),e(A,VVe),e(A,Kf),e(Kf,Uee),e(Uee,XVe),e(Kf,zVe),e(Kf,tk),e(tk,QVe),e(Kf,WVe),e(A,HVe),e(A,Zf),e(Zf,Jee),e(Jee,UVe),e(Zf,JVe),e(Zf,ak),e(ak,YVe),e(Zf,KVe),e(A,ZVe),e(A,em),e(em,Yee),e(Yee,eXe),e(em,oXe),e(em,nk),e(nk,rXe),e(em,tXe),e(A,aXe),e(A,om),e(om,Kee),e(Kee,nXe),e(om,sXe),e(om,sk),e(sk,lXe),e(om,iXe),e(A,dXe),e(A,rm),e(rm,Zee),e(Zee,cXe),e(rm,fXe),e(rm,lk),e(lk,mXe),e(rm,gXe),e(A,hXe),e(A,tm),e(tm,eoe),e(eoe,pXe),e(tm,uXe),e(tm,ik),e(ik,_Xe),e(tm,bXe),e(A,vXe),e(A,am),e(am,ooe),e(ooe,FXe),e(am,TXe),e(am,dk),e(dk,MXe),e(am,EXe),e(A,CXe),e(A,nm),e(nm,roe),e(roe,wXe),e(nm,AXe),e(nm,ck),e(ck,yXe),e(nm,LXe),e(A,xXe),e(A,sm),e(sm,toe),e(toe,$Xe),e(sm,kXe),e(sm,fk),e(fk,SXe),e(sm,RXe),e(A,BXe),e(A,lm),e(lm,aoe),e(aoe,PXe),e(lm,IXe),e(lm,mk),e(mk,qXe),e(lm,NXe),e(A,jXe),e(A,im),e(im,noe),e(noe,DXe),e(im,GXe),e(im,gk),e(gk,OXe),e(im,VXe),e(A,XXe),e(A,dm),e(dm,soe),e(soe,zXe),e(dm,QXe),e(dm,hk),e(hk,WXe),e(dm,HXe),e(A,UXe),e(A,cm),e(cm,loe),e(loe,JXe),e(cm,YXe),e(cm,pk),e(pk,KXe),e(cm,ZXe),e(A,eze),e(A,fm),e(fm,ioe),e(ioe,oze),e(fm,rze),e(fm,uk),e(uk,tze),e(fm,aze),e(A,nze),e(A,mm),e(mm,doe),e(doe,sze),e(mm,lze),e(mm,_k),e(_k,ize),e(mm,dze),e(A,cze),e(A,gm),e(gm,coe),e(coe,fze),e(gm,mze),e(gm,bk),e(bk,gze),e(gm,hze),e(A,pze),e(A,hm),e(hm,foe),e(foe,uze),e(hm,_ze),e(hm,vk),e(vk,bze),e(hm,vze),e(A,Fze),e(A,pm),e(pm,moe),e(moe,Tze),e(pm,Mze),e(pm,Fk),e(Fk,Eze),e(pm,Cze),e(A,wze),e(A,um),e(um,goe),e(goe,Aze),e(um,yze),e(um,Tk),e(Tk,Lze),e(um,xze),e(A,$ze),e(A,_m),e(_m,hoe),e(hoe,kze),e(_m,Sze),e(_m,Mk),e(Mk,Rze),e(_m,Bze),e(A,Pze),e(A,bm),e(bm,poe),e(poe,Ize),e(bm,qze),e(bm,Ek),e(Ek,Nze),e(bm,jze),e(A,Dze),e(A,vm),e(vm,uoe),e(uoe,Gze),e(vm,Oze),e(vm,Ck),e(Ck,Vze),e(vm,Xze),e(A,zze),e(A,Fm),e(Fm,_oe),e(_oe,Qze),e(Fm,Wze),e(Fm,wk),e(wk,Hze),e(Fm,Uze),e(A,Jze),e(A,Tm),e(Tm,boe),e(boe,Yze),e(Tm,Kze),e(Tm,Ak),e(Ak,Zze),e(Tm,eQe),e(A,oQe),e(A,Mm),e(Mm,voe),e(voe,rQe),e(Mm,tQe),e(Mm,yk),e(yk,aQe),e(Mm,nQe),e(A,sQe),e(A,Em),e(Em,Foe),e(Foe,lQe),e(Em,iQe),e(Em,Lk),e(Lk,dQe),e(Em,cQe),e(A,fQe),e(A,Cm),e(Cm,Toe),e(Toe,mQe),e(Cm,gQe),e(Cm,xk),e(xk,hQe),e(Cm,pQe),e(A,uQe),e(A,wm),e(wm,Moe),e(Moe,_Qe),e(wm,bQe),e(wm,$k),e($k,vQe),e(wm,FQe),e(A,TQe),e(A,Am),e(Am,Eoe),e(Eoe,MQe),e(Am,EQe),e(Am,kk),e(kk,CQe),e(Am,wQe),e(A,AQe),e(A,ym),e(ym,Coe),e(Coe,yQe),e(ym,LQe),e(ym,Sk),e(Sk,xQe),e(ym,$Qe),e(A,kQe),e(A,Lm),e(Lm,woe),e(woe,SQe),e(Lm,RQe),e(Lm,Rk),e(Rk,BQe),e(Lm,PQe),e(A,IQe),e(A,xm),e(xm,Aoe),e(Aoe,qQe),e(xm,NQe),e(xm,Bk),e(Bk,jQe),e(xm,DQe),e(A,GQe),e(A,$m),e($m,yoe),e(yoe,OQe),e($m,VQe),e($m,Pk),e(Pk,XQe),e($m,zQe),e(A,QQe),e(A,km),e(km,Loe),e(Loe,WQe),e(km,HQe),e(km,Ik),e(Ik,UQe),e(km,JQe),e(A,YQe),e(A,Sm),e(Sm,xoe),e(xoe,KQe),e(Sm,ZQe),e(Sm,qk),e(qk,eWe),e(Sm,oWe),e(A,rWe),e(A,Rm),e(Rm,$oe),e($oe,tWe),e(Rm,aWe),e(Rm,Nk),e(Nk,nWe),e(Rm,sWe),e(A,lWe),e(A,Bm),e(Bm,koe),e(koe,iWe),e(Bm,dWe),e(Bm,jk),e(jk,cWe),e(Bm,fWe),e(A,mWe),e(A,Pm),e(Pm,Soe),e(Soe,gWe),e(Pm,hWe),e(Pm,Dk),e(Dk,pWe),e(Pm,uWe),e(A,_We),e(A,Im),e(Im,Roe),e(Roe,bWe),e(Im,vWe),e(Im,Gk),e(Gk,FWe),e(Im,TWe),e(A,MWe),e(A,qm),e(qm,Boe),e(Boe,EWe),e(qm,CWe),e(qm,Ok),e(Ok,wWe),e(qm,AWe),e(A,yWe),e(A,Nm),e(Nm,Poe),e(Poe,LWe),e(Nm,xWe),e(Nm,Vk),e(Vk,$We),e(Nm,kWe),e(A,SWe),e(A,jm),e(jm,Ioe),e(Ioe,RWe),e(jm,BWe),e(jm,Xk),e(Xk,PWe),e(jm,IWe),e(A,qWe),e(A,Dm),e(Dm,qoe),e(qoe,NWe),e(Dm,jWe),e(Dm,zk),e(zk,DWe),e(Dm,GWe),e(A,OWe),e(A,Gm),e(Gm,Noe),e(Noe,VWe),e(Gm,XWe),e(Gm,Qk),e(Qk,zWe),e(Gm,QWe),e(A,WWe),e(A,Om),e(Om,joe),e(joe,HWe),e(Om,UWe),e(Om,Wk),e(Wk,JWe),e(Om,YWe),e(A,KWe),e(A,Vm),e(Vm,Doe),e(Doe,ZWe),e(Vm,eHe),e(Vm,Hk),e(Hk,oHe),e(Vm,rHe),e(A,tHe),e(A,Xm),e(Xm,Goe),e(Goe,aHe),e(Xm,nHe),e(Xm,Uk),e(Uk,sHe),e(Xm,lHe),e(A,iHe),e(A,zm),e(zm,Ooe),e(Ooe,dHe),e(zm,cHe),e(zm,Jk),e(Jk,fHe),e(zm,mHe),e(A,gHe),e(A,Qm),e(Qm,Voe),e(Voe,hHe),e(Qm,pHe),e(Qm,Yk),e(Yk,uHe),e(Qm,_He),e(A,bHe),e(A,Wm),e(Wm,Xoe),e(Xoe,vHe),e(Wm,FHe),e(Wm,Kk),e(Kk,THe),e(Wm,MHe),e(A,EHe),e(A,Hm),e(Hm,zoe),e(zoe,CHe),e(Hm,wHe),e(Hm,Zk),e(Zk,AHe),e(Hm,yHe),e(A,LHe),e(A,Um),e(Um,Qoe),e(Qoe,xHe),e(Um,$He),e(Um,eS),e(eS,kHe),e(Um,SHe),e(A,RHe),e(A,Jm),e(Jm,Woe),e(Woe,BHe),e(Jm,PHe),e(Jm,oS),e(oS,IHe),e(Jm,qHe),e(A,NHe),e(A,Ym),e(Ym,Hoe),e(Hoe,jHe),e(Ym,DHe),e(Ym,rS),e(rS,GHe),e(Ym,OHe),e(A,VHe),e(A,Km),e(Km,Uoe),e(Uoe,XHe),e(Km,zHe),e(Km,tS),e(tS,QHe),e(Km,WHe),e(A,HHe),e(A,Zm),e(Zm,Joe),e(Joe,UHe),e(Zm,JHe),e(Zm,aS),e(aS,YHe),e(Zm,KHe),e(A,ZHe),e(A,eg),e(eg,Yoe),e(Yoe,eUe),e(eg,oUe),e(eg,nS),e(nS,rUe),e(eg,tUe),e(A,aUe),e(A,og),e(og,Koe),e(Koe,nUe),e(og,sUe),e(og,sS),e(sS,lUe),e(og,iUe),e(A,dUe),e(A,rg),e(rg,Zoe),e(Zoe,cUe),e(rg,fUe),e(rg,lS),e(lS,mUe),e(rg,gUe),e(A,hUe),e(A,tg),e(tg,ere),e(ere,pUe),e(tg,uUe),e(tg,iS),e(iS,_Ue),e(tg,bUe),e(A,vUe),e(A,ag),e(ag,ore),e(ore,FUe),e(ag,TUe),e(ag,dS),e(dS,MUe),e(ag,EUe),e(A,CUe),e(A,ng),e(ng,rre),e(rre,wUe),e(ng,AUe),e(ng,cS),e(cS,yUe),e(ng,LUe),e(A,xUe),e(A,sg),e(sg,tre),e(tre,$Ue),e(sg,kUe),e(sg,fS),e(fS,SUe),e(sg,RUe),e(A,BUe),e(A,lg),e(lg,are),e(are,PUe),e(lg,IUe),e(lg,mS),e(mS,qUe),e(lg,NUe),e(A,jUe),e(A,ig),e(ig,nre),e(nre,DUe),e(ig,GUe),e(ig,gS),e(gS,OUe),e(ig,VUe),e(A,XUe),e(A,dg),e(dg,sre),e(sre,zUe),e(dg,QUe),e(dg,hS),e(hS,WUe),e(dg,HUe),e(A,UUe),e(A,cg),e(cg,lre),e(lre,JUe),e(cg,YUe),e(cg,pS),e(pS,KUe),e(cg,ZUe),e(A,eJe),e(A,fg),e(fg,ire),e(ire,oJe),e(fg,rJe),e(fg,uS),e(uS,tJe),e(fg,aJe),e(A,nJe),e(A,mg),e(mg,dre),e(dre,sJe),e(mg,lJe),e(mg,_S),e(_S,iJe),e(mg,dJe),e(A,cJe),e(A,gg),e(gg,cre),e(cre,fJe),e(gg,mJe),e(gg,bS),e(bS,gJe),e(gg,hJe),e(A,pJe),e(A,hg),e(hg,fre),e(fre,uJe),e(hg,_Je),e(hg,vS),e(vS,bJe),e(hg,vJe),e(A,FJe),e(A,pg),e(pg,mre),e(mre,TJe),e(pg,MJe),e(pg,FS),e(FS,EJe),e(pg,CJe),e(A,wJe),e(A,ug),e(ug,gre),e(gre,AJe),e(ug,yJe),e(ug,TS),e(TS,LJe),e(ug,xJe),e(Er,$Je),M(_g,Er,null),e(Co,kJe),e(Co,bg),M(l0,bg,null),e(bg,SJe),e(bg,hre),e(hre,RJe),b(f,iIe,_),b(f,_i,_),e(_i,vg),e(vg,pre),M(i0,pre,null),e(_i,BJe),e(_i,ure),e(ure,PJe),b(f,dIe,_),b(f,wo,_),M(d0,wo,null),e(wo,IJe),e(wo,c0),e(c0,qJe),e(c0,MS),e(MS,NJe),e(c0,jJe),e(wo,DJe),e(wo,f0),e(f0,GJe),e(f0,_re),e(_re,OJe),e(f0,VJe),e(wo,XJe),e(wo,Cr),M(m0,Cr,null),e(Cr,zJe),e(Cr,bre),e(bre,QJe),e(Cr,WJe),e(Cr,Ca),e(Ca,HJe),e(Ca,vre),e(vre,UJe),e(Ca,JJe),e(Ca,Fre),e(Fre,YJe),e(Ca,KJe),e(Ca,Tre),e(Tre,ZJe),e(Ca,eYe),e(Cr,oYe),e(Cr,k),e(k,kn),e(kn,Mre),e(Mre,rYe),e(kn,tYe),e(kn,ES),e(ES,aYe),e(kn,nYe),e(kn,CS),e(CS,sYe),e(kn,lYe),e(k,iYe),e(k,Sn),e(Sn,Ere),e(Ere,dYe),e(Sn,cYe),e(Sn,wS),e(wS,fYe),e(Sn,mYe),e(Sn,AS),e(AS,gYe),e(Sn,hYe),e(k,pYe),e(k,Rn),e(Rn,Cre),e(Cre,uYe),e(Rn,_Ye),e(Rn,yS),e(yS,bYe),e(Rn,vYe),e(Rn,LS),e(LS,FYe),e(Rn,TYe),e(k,MYe),e(k,Fg),e(Fg,wre),e(wre,EYe),e(Fg,CYe),e(Fg,xS),e(xS,wYe),e(Fg,AYe),e(k,yYe),e(k,Bn),e(Bn,Are),e(Are,LYe),e(Bn,xYe),e(Bn,$S),e($S,$Ye),e(Bn,kYe),e(Bn,kS),e(kS,SYe),e(Bn,RYe),e(k,BYe),e(k,Tg),e(Tg,yre),e(yre,PYe),e(Tg,IYe),e(Tg,SS),e(SS,qYe),e(Tg,NYe),e(k,jYe),e(k,Mg),e(Mg,Lre),e(Lre,DYe),e(Mg,GYe),e(Mg,RS),e(RS,OYe),e(Mg,VYe),e(k,XYe),e(k,Eg),e(Eg,xre),e(xre,zYe),e(Eg,QYe),e(Eg,BS),e(BS,WYe),e(Eg,HYe),e(k,UYe),e(k,Pn),e(Pn,$re),e($re,JYe),e(Pn,YYe),e(Pn,PS),e(PS,KYe),e(Pn,ZYe),e(Pn,IS),e(IS,eKe),e(Pn,oKe),e(k,rKe),e(k,In),e(In,kre),e(kre,tKe),e(In,aKe),e(In,qS),e(qS,nKe),e(In,sKe),e(In,NS),e(NS,lKe),e(In,iKe),e(k,dKe),e(k,qn),e(qn,Sre),e(Sre,cKe),e(qn,fKe),e(qn,jS),e(jS,mKe),e(qn,gKe),e(qn,DS),e(DS,hKe),e(qn,pKe),e(k,uKe),e(k,Cg),e(Cg,Rre),e(Rre,_Ke),e(Cg,bKe),e(Cg,GS),e(GS,vKe),e(Cg,FKe),e(k,TKe),e(k,wg),e(wg,Bre),e(Bre,MKe),e(wg,EKe),e(wg,OS),e(OS,CKe),e(wg,wKe),e(k,AKe),e(k,Nn),e(Nn,Pre),e(Pre,yKe),e(Nn,LKe),e(Nn,VS),e(VS,xKe),e(Nn,$Ke),e(Nn,XS),e(XS,kKe),e(Nn,SKe),e(k,RKe),e(k,Ag),e(Ag,Ire),e(Ire,BKe),e(Ag,PKe),e(Ag,zS),e(zS,IKe),e(Ag,qKe),e(k,NKe),e(k,jn),e(jn,qre),e(qre,jKe),e(jn,DKe),e(jn,QS),e(QS,GKe),e(jn,OKe),e(jn,WS),e(WS,VKe),e(jn,XKe),e(k,zKe),e(k,Dn),e(Dn,Nre),e(Nre,QKe),e(Dn,WKe),e(Dn,HS),e(HS,HKe),e(Dn,UKe),e(Dn,US),e(US,JKe),e(Dn,YKe),e(k,KKe),e(k,Gn),e(Gn,jre),e(jre,ZKe),e(Gn,eZe),e(Gn,JS),e(JS,oZe),e(Gn,rZe),e(Gn,YS),e(YS,tZe),e(Gn,aZe),e(k,nZe),e(k,yg),e(yg,Dre),e(Dre,sZe),e(yg,lZe),e(yg,KS),e(KS,iZe),e(yg,dZe),e(k,cZe),e(k,On),e(On,Gre),e(Gre,fZe),e(On,mZe),e(On,ZS),e(ZS,gZe),e(On,hZe),e(On,eR),e(eR,pZe),e(On,uZe),e(k,_Ze),e(k,Vn),e(Vn,Ore),e(Ore,bZe),e(Vn,vZe),e(Vn,oR),e(oR,FZe),e(Vn,TZe),e(Vn,rR),e(rR,MZe),e(Vn,EZe),e(k,CZe),e(k,Xn),e(Xn,Vre),e(Vre,wZe),e(Xn,AZe),e(Xn,tR),e(tR,yZe),e(Xn,LZe),e(Xn,aR),e(aR,xZe),e(Xn,$Ze),e(k,kZe),e(k,zn),e(zn,Xre),e(Xre,SZe),e(zn,RZe),e(zn,nR),e(nR,BZe),e(zn,PZe),e(zn,sR),e(sR,IZe),e(zn,qZe),e(k,NZe),e(k,Qn),e(Qn,zre),e(zre,jZe),e(Qn,DZe),e(Qn,lR),e(lR,GZe),e(Qn,OZe),e(Qn,iR),e(iR,VZe),e(Qn,XZe),e(k,zZe),e(k,Wn),e(Wn,Qre),e(Qre,QZe),e(Wn,WZe),e(Wn,dR),e(dR,HZe),e(Wn,UZe),e(Wn,cR),e(cR,JZe),e(Wn,YZe),e(k,KZe),e(k,Lg),e(Lg,Wre),e(Wre,ZZe),e(Lg,eeo),e(Lg,fR),e(fR,oeo),e(Lg,reo),e(k,teo),e(k,Hn),e(Hn,Hre),e(Hre,aeo),e(Hn,neo),e(Hn,mR),e(mR,seo),e(Hn,leo),e(Hn,gR),e(gR,ieo),e(Hn,deo),e(k,ceo),e(k,xg),e(xg,Ure),e(Ure,feo),e(xg,meo),e(xg,hR),e(hR,geo),e(xg,heo),e(k,peo),e(k,Un),e(Un,Jre),e(Jre,ueo),e(Un,_eo),e(Un,pR),e(pR,beo),e(Un,veo),e(Un,uR),e(uR,Feo),e(Un,Teo),e(k,Meo),e(k,Jn),e(Jn,Yre),e(Yre,Eeo),e(Jn,Ceo),e(Jn,_R),e(_R,weo),e(Jn,Aeo),e(Jn,bR),e(bR,yeo),e(Jn,Leo),e(k,xeo),e(k,Yn),e(Yn,Kre),e(Kre,$eo),e(Yn,keo),e(Yn,vR),e(vR,Seo),e(Yn,Reo),e(Yn,FR),e(FR,Beo),e(Yn,Peo),e(k,Ieo),e(k,Kn),e(Kn,Zre),e(Zre,qeo),e(Kn,Neo),e(Kn,TR),e(TR,jeo),e(Kn,Deo),e(Kn,MR),e(MR,Geo),e(Kn,Oeo),e(k,Veo),e(k,Zn),e(Zn,ete),e(ete,Xeo),e(Zn,zeo),e(Zn,ER),e(ER,Qeo),e(Zn,Weo),e(Zn,CR),e(CR,Heo),e(Zn,Ueo),e(k,Jeo),e(k,$g),e($g,ote),e(ote,Yeo),e($g,Keo),e($g,wR),e(wR,Zeo),e($g,eoo),e(k,ooo),e(k,es),e(es,rte),e(rte,roo),e(es,too),e(es,AR),e(AR,aoo),e(es,noo),e(es,yR),e(yR,soo),e(es,loo),e(k,ioo),e(k,os),e(os,tte),e(tte,doo),e(os,coo),e(os,LR),e(LR,foo),e(os,moo),e(os,xR),e(xR,goo),e(os,hoo),e(k,poo),e(k,rs),e(rs,ate),e(ate,uoo),e(rs,_oo),e(rs,$R),e($R,boo),e(rs,voo),e(rs,kR),e(kR,Foo),e(rs,Too),e(k,Moo),e(k,ts),e(ts,nte),e(nte,Eoo),e(ts,Coo),e(ts,SR),e(SR,woo),e(ts,Aoo),e(ts,RR),e(RR,yoo),e(ts,Loo),e(k,xoo),e(k,as),e(as,ste),e(ste,$oo),e(as,koo),e(as,BR),e(BR,Soo),e(as,Roo),e(as,PR),e(PR,Boo),e(as,Poo),e(k,Ioo),e(k,ns),e(ns,lte),e(lte,qoo),e(ns,Noo),e(ns,IR),e(IR,joo),e(ns,Doo),e(ns,qR),e(qR,Goo),e(ns,Ooo),e(k,Voo),e(k,kg),e(kg,ite),e(ite,Xoo),e(kg,zoo),e(kg,NR),e(NR,Qoo),e(kg,Woo),e(k,Hoo),e(k,ss),e(ss,dte),e(dte,Uoo),e(ss,Joo),e(ss,jR),e(jR,Yoo),e(ss,Koo),e(ss,DR),e(DR,Zoo),e(ss,ero),e(k,oro),e(k,Sg),e(Sg,cte),e(cte,rro),e(Sg,tro),e(Sg,GR),e(GR,aro),e(Sg,nro),e(k,sro),e(k,Rg),e(Rg,fte),e(fte,lro),e(Rg,iro),e(Rg,OR),e(OR,dro),e(Rg,cro),e(k,fro),e(k,ls),e(ls,mte),e(mte,mro),e(ls,gro),e(ls,VR),e(VR,hro),e(ls,pro),e(ls,XR),e(XR,uro),e(ls,_ro),e(k,bro),e(k,is),e(is,gte),e(gte,vro),e(is,Fro),e(is,zR),e(zR,Tro),e(is,Mro),e(is,QR),e(QR,Ero),e(is,Cro),e(k,wro),e(k,ds),e(ds,hte),e(hte,Aro),e(ds,yro),e(ds,WR),e(WR,Lro),e(ds,xro),e(ds,HR),e(HR,$ro),e(ds,kro),e(k,Sro),e(k,Bg),e(Bg,pte),e(pte,Rro),e(Bg,Bro),e(Bg,UR),e(UR,Pro),e(Bg,Iro),e(k,qro),e(k,cs),e(cs,ute),e(ute,Nro),e(cs,jro),e(cs,JR),e(JR,Dro),e(cs,Gro),e(cs,YR),e(YR,Oro),e(cs,Vro),e(k,Xro),e(k,fs),e(fs,_te),e(_te,zro),e(fs,Qro),e(fs,KR),e(KR,Wro),e(fs,Hro),e(fs,ZR),e(ZR,Uro),e(fs,Jro),e(k,Yro),e(k,ms),e(ms,bte),e(bte,Kro),e(ms,Zro),e(ms,eB),e(eB,eto),e(ms,oto),e(ms,oB),e(oB,rto),e(ms,tto),e(k,ato),e(k,gs),e(gs,vte),e(vte,nto),e(gs,sto),e(gs,rB),e(rB,lto),e(gs,ito),e(gs,tB),e(tB,dto),e(gs,cto),e(k,fto),e(k,hs),e(hs,Fte),e(Fte,mto),e(hs,gto),e(hs,aB),e(aB,hto),e(hs,pto),e(hs,nB),e(nB,uto),e(hs,_to),e(k,bto),e(k,Pg),e(Pg,Tte),e(Tte,vto),e(Pg,Fto),e(Pg,sB),e(sB,Tto),e(Pg,Mto),e(k,Eto),e(k,ps),e(ps,Mte),e(Mte,Cto),e(ps,wto),e(ps,lB),e(lB,Ato),e(ps,yto),e(ps,iB),e(iB,Lto),e(ps,xto),e(k,$to),e(k,Ig),e(Ig,Ete),e(Ete,kto),e(Ig,Sto),e(Ig,dB),e(dB,Rto),e(Ig,Bto),e(k,Pto),e(k,qg),e(qg,Cte),e(Cte,Ito),e(qg,qto),e(qg,cB),e(cB,Nto),e(qg,jto),e(k,Dto),e(k,Ng),e(Ng,wte),e(wte,Gto),e(Ng,Oto),e(Ng,fB),e(fB,Vto),e(Ng,Xto),e(k,zto),e(k,jg),e(jg,Ate),e(Ate,Qto),e(jg,Wto),e(jg,mB),e(mB,Hto),e(jg,Uto),e(k,Jto),e(k,us),e(us,yte),e(yte,Yto),e(us,Kto),e(us,gB),e(gB,Zto),e(us,eao),e(us,hB),e(hB,oao),e(us,rao),e(k,tao),e(k,Dg),e(Dg,Lte),e(Lte,aao),e(Dg,nao),e(Dg,pB),e(pB,sao),e(Dg,lao),e(k,iao),e(k,_s),e(_s,xte),e(xte,dao),e(_s,cao),e(_s,uB),e(uB,fao),e(_s,mao),e(_s,_B),e(_B,gao),e(_s,hao),e(k,pao),e(k,bs),e(bs,$te),e($te,uao),e(bs,_ao),e(bs,bB),e(bB,bao),e(bs,vao),e(bs,vB),e(vB,Fao),e(bs,Tao),e(k,Mao),e(k,vs),e(vs,kte),e(kte,Eao),e(vs,Cao),e(vs,FB),e(FB,wao),e(vs,Aao),e(vs,TB),e(TB,yao),e(vs,Lao),e(k,xao),e(k,Fs),e(Fs,Ste),e(Ste,$ao),e(Fs,kao),e(Fs,MB),e(MB,Sao),e(Fs,Rao),e(Fs,EB),e(EB,Bao),e(Fs,Pao),e(k,Iao),e(k,Ts),e(Ts,Rte),e(Rte,qao),e(Ts,Nao),e(Ts,CB),e(CB,jao),e(Ts,Dao),e(Ts,wB),e(wB,Gao),e(Ts,Oao),e(k,Vao),e(k,Ms),e(Ms,Bte),e(Bte,Xao),e(Ms,zao),e(Ms,AB),e(AB,Qao),e(Ms,Wao),e(Ms,yB),e(yB,Hao),e(Ms,Uao),e(k,Jao),e(k,Gg),e(Gg,Pte),e(Pte,Yao),e(Gg,Kao),e(Gg,LB),e(LB,Zao),e(Gg,eno),e(k,ono),e(k,Og),e(Og,Ite),e(Ite,rno),e(Og,tno),e(Og,xB),e(xB,ano),e(Og,nno),e(k,sno),e(k,Es),e(Es,qte),e(qte,lno),e(Es,ino),e(Es,$B),e($B,dno),e(Es,cno),e(Es,kB),e(kB,fno),e(Es,mno),e(k,gno),e(k,Cs),e(Cs,Nte),e(Nte,hno),e(Cs,pno),e(Cs,SB),e(SB,uno),e(Cs,_no),e(Cs,RB),e(RB,bno),e(Cs,vno),e(k,Fno),e(k,ws),e(ws,jte),e(jte,Tno),e(ws,Mno),e(ws,BB),e(BB,Eno),e(ws,Cno),e(ws,PB),e(PB,wno),e(ws,Ano),e(k,yno),e(k,Vg),e(Vg,Dte),e(Dte,Lno),e(Vg,xno),e(Vg,IB),e(IB,$no),e(Vg,kno),e(k,Sno),e(k,Xg),e(Xg,Gte),e(Gte,Rno),e(Xg,Bno),e(Xg,qB),e(qB,Pno),e(Xg,Ino),e(k,qno),e(k,zg),e(zg,Ote),e(Ote,Nno),e(zg,jno),e(zg,NB),e(NB,Dno),e(zg,Gno),e(k,Ono),e(k,As),e(As,Vte),e(Vte,Vno),e(As,Xno),e(As,jB),e(jB,zno),e(As,Qno),e(As,DB),e(DB,Wno),e(As,Hno),e(k,Uno),e(k,Qg),e(Qg,Xte),e(Xte,Jno),e(Qg,Yno),e(Qg,GB),e(GB,Kno),e(Qg,Zno),e(k,eso),e(k,Wg),e(Wg,zte),e(zte,oso),e(Wg,rso),e(Wg,OB),e(OB,tso),e(Wg,aso),e(k,nso),e(k,ys),e(ys,Qte),e(Qte,sso),e(ys,lso),e(ys,VB),e(VB,iso),e(ys,dso),e(ys,XB),e(XB,cso),e(ys,fso),e(k,mso),e(k,Hg),e(Hg,Wte),e(Wte,gso),e(Hg,hso),e(Hg,zB),e(zB,pso),e(Hg,uso),e(k,_so),e(k,Ug),e(Ug,Hte),e(Hte,bso),e(Ug,vso),e(Ug,QB),e(QB,Fso),e(Ug,Tso),e(k,Mso),e(k,Ls),e(Ls,Ute),e(Ute,Eso),e(Ls,Cso),e(Ls,WB),e(WB,wso),e(Ls,Aso),e(Ls,HB),e(HB,yso),e(Ls,Lso),e(k,xso),e(k,xs),e(xs,Jte),e(Jte,$so),e(xs,kso),e(xs,UB),e(UB,Sso),e(xs,Rso),e(xs,JB),e(JB,Bso),e(xs,Pso),e(k,Iso),e(k,$s),e($s,Yte),e(Yte,qso),e($s,Nso),e($s,YB),e(YB,jso),e($s,Dso),e($s,KB),e(KB,Gso),e($s,Oso),e(k,Vso),e(k,ks),e(ks,Kte),e(Kte,Xso),e(ks,zso),e(ks,ZB),e(ZB,Qso),e(ks,Wso),e(ks,eP),e(eP,Hso),e(ks,Uso),e(Cr,Jso),M(Jg,Cr,null),e(wo,Yso),e(wo,Yg),M(g0,Yg,null),e(Yg,Kso),e(Yg,Zte),e(Zte,Zso),b(f,cIe,_),b(f,bi,_),e(bi,Kg),e(Kg,eae),M(h0,eae,null),e(bi,elo),e(bi,oae),e(oae,olo),b(f,fIe,_),b(f,Ao,_),M(p0,Ao,null),e(Ao,rlo),e(Ao,u0),e(u0,tlo),e(u0,oP),e(oP,alo),e(u0,nlo),e(Ao,slo),e(Ao,_0),e(_0,llo),e(_0,rae),e(rae,ilo),e(_0,dlo),e(Ao,clo),e(Ao,Qe),M(b0,Qe,null),e(Qe,flo),e(Qe,tae),e(tae,mlo),e(Qe,glo),e(Qe,wa),e(wa,hlo),e(wa,aae),e(aae,plo),e(wa,ulo),e(wa,nae),e(nae,_lo),e(wa,blo),e(wa,sae),e(sae,vlo),e(wa,Flo),e(Qe,Tlo),e(Qe,oe),e(oe,Zg),e(Zg,lae),e(lae,Mlo),e(Zg,Elo),e(Zg,rP),e(rP,Clo),e(Zg,wlo),e(oe,Alo),e(oe,eh),e(eh,iae),e(iae,ylo),e(eh,Llo),e(eh,tP),e(tP,xlo),e(eh,$lo),e(oe,klo),e(oe,oh),e(oh,dae),e(dae,Slo),e(oh,Rlo),e(oh,aP),e(aP,Blo),e(oh,Plo),e(oe,Ilo),e(oe,rh),e(rh,cae),e(cae,qlo),e(rh,Nlo),e(rh,nP),e(nP,jlo),e(rh,Dlo),e(oe,Glo),e(oe,th),e(th,fae),e(fae,Olo),e(th,Vlo),e(th,sP),e(sP,Xlo),e(th,zlo),e(oe,Qlo),e(oe,ah),e(ah,mae),e(mae,Wlo),e(ah,Hlo),e(ah,lP),e(lP,Ulo),e(ah,Jlo),e(oe,Ylo),e(oe,nh),e(nh,gae),e(gae,Klo),e(nh,Zlo),e(nh,iP),e(iP,eio),e(nh,oio),e(oe,rio),e(oe,sh),e(sh,hae),e(hae,tio),e(sh,aio),e(sh,dP),e(dP,nio),e(sh,sio),e(oe,lio),e(oe,lh),e(lh,pae),e(pae,iio),e(lh,dio),e(lh,cP),e(cP,cio),e(lh,fio),e(oe,mio),e(oe,ih),e(ih,uae),e(uae,gio),e(ih,hio),e(ih,fP),e(fP,pio),e(ih,uio),e(oe,_io),e(oe,dh),e(dh,_ae),e(_ae,bio),e(dh,vio),e(dh,mP),e(mP,Fio),e(dh,Tio),e(oe,Mio),e(oe,ch),e(ch,bae),e(bae,Eio),e(ch,Cio),e(ch,gP),e(gP,wio),e(ch,Aio),e(oe,yio),e(oe,fh),e(fh,vae),e(vae,Lio),e(fh,xio),e(fh,hP),e(hP,$io),e(fh,kio),e(oe,Sio),e(oe,mh),e(mh,Fae),e(Fae,Rio),e(mh,Bio),e(mh,pP),e(pP,Pio),e(mh,Iio),e(oe,qio),e(oe,gh),e(gh,Tae),e(Tae,Nio),e(gh,jio),e(gh,uP),e(uP,Dio),e(gh,Gio),e(oe,Oio),e(oe,hh),e(hh,Mae),e(Mae,Vio),e(hh,Xio),e(hh,_P),e(_P,zio),e(hh,Qio),e(oe,Wio),e(oe,ph),e(ph,Eae),e(Eae,Hio),e(ph,Uio),e(ph,bP),e(bP,Jio),e(ph,Yio),e(oe,Kio),e(oe,uh),e(uh,Cae),e(Cae,Zio),e(uh,edo),e(uh,vP),e(vP,odo),e(uh,rdo),e(oe,tdo),e(oe,_h),e(_h,wae),e(wae,ado),e(_h,ndo),e(_h,FP),e(FP,sdo),e(_h,ldo),e(oe,ido),e(oe,bh),e(bh,Aae),e(Aae,ddo),e(bh,cdo),e(bh,TP),e(TP,fdo),e(bh,mdo),e(oe,gdo),e(oe,vh),e(vh,yae),e(yae,hdo),e(vh,pdo),e(vh,MP),e(MP,udo),e(vh,_do),e(oe,bdo),e(oe,Fh),e(Fh,Lae),e(Lae,vdo),e(Fh,Fdo),e(Fh,EP),e(EP,Tdo),e(Fh,Mdo),e(oe,Edo),e(oe,Th),e(Th,xae),e(xae,Cdo),e(Th,wdo),e(Th,CP),e(CP,Ado),e(Th,ydo),e(oe,Ldo),e(oe,Mh),e(Mh,$ae),e($ae,xdo),e(Mh,$do),e(Mh,wP),e(wP,kdo),e(Mh,Sdo),e(oe,Rdo),e(oe,Eh),e(Eh,kae),e(kae,Bdo),e(Eh,Pdo),e(Eh,AP),e(AP,Ido),e(Eh,qdo),e(Qe,Ndo),M(Ch,Qe,null),e(Qe,jdo),M(wh,Qe,null),e(Ao,Ddo),e(Ao,Ah),M(v0,Ah,null),e(Ah,Gdo),e(Ah,Sae),e(Sae,Odo),b(f,mIe,_),b(f,vi,_),e(vi,yh),e(yh,Rae),M(F0,Rae,null),e(vi,Vdo),e(vi,Bae),e(Bae,Xdo),b(f,gIe,_),b(f,yo,_),M(T0,yo,null),e(yo,zdo),e(yo,M0),e(M0,Qdo),e(M0,yP),e(yP,Wdo),e(M0,Hdo),e(yo,Udo),e(yo,E0),e(E0,Jdo),e(E0,Pae),e(Pae,Ydo),e(E0,Kdo),e(yo,Zdo),e(yo,We),M(C0,We,null),e(We,eco),e(We,Iae),e(Iae,oco),e(We,rco),e(We,Fi),e(Fi,tco),e(Fi,qae),e(qae,aco),e(Fi,nco),e(Fi,Nae),e(Nae,sco),e(Fi,lco),e(We,ico),e(We,be),e(be,Lh),e(Lh,jae),e(jae,dco),e(Lh,cco),e(Lh,LP),e(LP,fco),e(Lh,mco),e(be,gco),e(be,xh),e(xh,Dae),e(Dae,hco),e(xh,pco),e(xh,Gae),e(Gae,uco),e(xh,_co),e(be,bco),e(be,$h),e($h,Oae),e(Oae,vco),e($h,Fco),e($h,xP),e(xP,Tco),e($h,Mco),e(be,Eco),e(be,kh),e(kh,Vae),e(Vae,Cco),e(kh,wco),e(kh,$P),e($P,Aco),e(kh,yco),e(be,Lco),e(be,Sh),e(Sh,Xae),e(Xae,xco),e(Sh,$co),e(Sh,kP),e(kP,kco),e(Sh,Sco),e(be,Rco),e(be,Rh),e(Rh,zae),e(zae,Bco),e(Rh,Pco),e(Rh,SP),e(SP,Ico),e(Rh,qco),e(be,Nco),e(be,Bh),e(Bh,Qae),e(Qae,jco),e(Bh,Dco),e(Bh,RP),e(RP,Gco),e(Bh,Oco),e(be,Vco),e(be,Ph),e(Ph,Wae),e(Wae,Xco),e(Ph,zco),e(Ph,BP),e(BP,Qco),e(Ph,Wco),e(be,Hco),e(be,Ih),e(Ih,Hae),e(Hae,Uco),e(Ih,Jco),e(Ih,PP),e(PP,Yco),e(Ih,Kco),e(be,Zco),e(be,qh),e(qh,Uae),e(Uae,efo),e(qh,ofo),e(qh,IP),e(IP,rfo),e(qh,tfo),e(be,afo),e(be,Nh),e(Nh,Jae),e(Jae,nfo),e(Nh,sfo),e(Nh,qP),e(qP,lfo),e(Nh,ifo),e(be,dfo),e(be,jh),e(jh,Yae),e(Yae,cfo),e(jh,ffo),e(jh,NP),e(NP,mfo),e(jh,gfo),e(be,hfo),e(be,Dh),e(Dh,Kae),e(Kae,pfo),e(Dh,ufo),e(Dh,jP),e(jP,_fo),e(Dh,bfo),e(be,vfo),e(be,Gh),e(Gh,Zae),e(Zae,Ffo),e(Gh,Tfo),e(Gh,DP),e(DP,Mfo),e(Gh,Efo),e(be,Cfo),e(be,Oh),e(Oh,ene),e(ene,wfo),e(Oh,Afo),e(Oh,GP),e(GP,yfo),e(Oh,Lfo),e(We,xfo),M(Vh,We,null),e(We,$fo),M(Xh,We,null),e(yo,kfo),e(yo,zh),M(w0,zh,null),e(zh,Sfo),e(zh,one),e(one,Rfo),b(f,hIe,_),b(f,Ti,_),e(Ti,Qh),e(Qh,rne),M(A0,rne,null),e(Ti,Bfo),e(Ti,tne),e(tne,Pfo),b(f,pIe,_),b(f,Lo,_),M(y0,Lo,null),e(Lo,Ifo),e(Lo,Mi),e(Mi,qfo),e(Mi,OP),e(OP,Nfo),e(Mi,jfo),e(Mi,VP),e(VP,Dfo),e(Mi,Gfo),e(Lo,Ofo),e(Lo,L0),e(L0,Vfo),e(L0,ane),e(ane,Xfo),e(L0,zfo),e(Lo,Qfo),e(Lo,ot),M(x0,ot,null),e(ot,Wfo),e(ot,nne),e(nne,Hfo),e(ot,Ufo),e(ot,Ei),e(Ei,Jfo),e(Ei,sne),e(sne,Yfo),e(Ei,Kfo),e(Ei,XP),e(XP,Zfo),e(Ei,emo),e(ot,omo),M(Wh,ot,null),e(Lo,rmo),e(Lo,He),M($0,He,null),e(He,tmo),e(He,lne),e(lne,amo),e(He,nmo),e(He,Aa),e(Aa,smo),e(Aa,ine),e(ine,lmo),e(Aa,imo),e(Aa,dne),e(dne,dmo),e(Aa,cmo),e(Aa,cne),e(cne,fmo),e(Aa,mmo),e(He,gmo),e(He,x),e(x,Hh),e(Hh,fne),e(fne,hmo),e(Hh,pmo),e(Hh,zP),e(zP,umo),e(Hh,_mo),e(x,bmo),e(x,Uh),e(Uh,mne),e(mne,vmo),e(Uh,Fmo),e(Uh,QP),e(QP,Tmo),e(Uh,Mmo),e(x,Emo),e(x,Jh),e(Jh,gne),e(gne,Cmo),e(Jh,wmo),e(Jh,WP),e(WP,Amo),e(Jh,ymo),e(x,Lmo),e(x,Yh),e(Yh,hne),e(hne,xmo),e(Yh,$mo),e(Yh,HP),e(HP,kmo),e(Yh,Smo),e(x,Rmo),e(x,Kh),e(Kh,pne),e(pne,Bmo),e(Kh,Pmo),e(Kh,UP),e(UP,Imo),e(Kh,qmo),e(x,Nmo),e(x,Zh),e(Zh,une),e(une,jmo),e(Zh,Dmo),e(Zh,JP),e(JP,Gmo),e(Zh,Omo),e(x,Vmo),e(x,ep),e(ep,_ne),e(_ne,Xmo),e(ep,zmo),e(ep,YP),e(YP,Qmo),e(ep,Wmo),e(x,Hmo),e(x,op),e(op,bne),e(bne,Umo),e(op,Jmo),e(op,KP),e(KP,Ymo),e(op,Kmo),e(x,Zmo),e(x,rp),e(rp,vne),e(vne,ego),e(rp,ogo),e(rp,ZP),e(ZP,rgo),e(rp,tgo),e(x,ago),e(x,tp),e(tp,Fne),e(Fne,ngo),e(tp,sgo),e(tp,eI),e(eI,lgo),e(tp,igo),e(x,dgo),e(x,ap),e(ap,Tne),e(Tne,cgo),e(ap,fgo),e(ap,oI),e(oI,mgo),e(ap,ggo),e(x,hgo),e(x,np),e(np,Mne),e(Mne,pgo),e(np,ugo),e(np,rI),e(rI,_go),e(np,bgo),e(x,vgo),e(x,sp),e(sp,Ene),e(Ene,Fgo),e(sp,Tgo),e(sp,tI),e(tI,Mgo),e(sp,Ego),e(x,Cgo),e(x,lp),e(lp,Cne),e(Cne,wgo),e(lp,Ago),e(lp,aI),e(aI,ygo),e(lp,Lgo),e(x,xgo),e(x,ip),e(ip,wne),e(wne,$go),e(ip,kgo),e(ip,nI),e(nI,Sgo),e(ip,Rgo),e(x,Bgo),e(x,dp),e(dp,Ane),e(Ane,Pgo),e(dp,Igo),e(dp,sI),e(sI,qgo),e(dp,Ngo),e(x,jgo),e(x,cp),e(cp,yne),e(yne,Dgo),e(cp,Ggo),e(cp,lI),e(lI,Ogo),e(cp,Vgo),e(x,Xgo),e(x,fp),e(fp,Lne),e(Lne,zgo),e(fp,Qgo),e(fp,iI),e(iI,Wgo),e(fp,Hgo),e(x,Ugo),e(x,mp),e(mp,xne),e(xne,Jgo),e(mp,Ygo),e(mp,dI),e(dI,Kgo),e(mp,Zgo),e(x,eho),e(x,gp),e(gp,$ne),e($ne,oho),e(gp,rho),e(gp,cI),e(cI,tho),e(gp,aho),e(x,nho),e(x,hp),e(hp,kne),e(kne,sho),e(hp,lho),e(hp,fI),e(fI,iho),e(hp,dho),e(x,cho),e(x,pp),e(pp,Sne),e(Sne,fho),e(pp,mho),e(pp,mI),e(mI,gho),e(pp,hho),e(x,pho),e(x,up),e(up,Rne),e(Rne,uho),e(up,_ho),e(up,gI),e(gI,bho),e(up,vho),e(x,Fho),e(x,_p),e(_p,Bne),e(Bne,Tho),e(_p,Mho),e(_p,hI),e(hI,Eho),e(_p,Cho),e(x,who),e(x,bp),e(bp,Pne),e(Pne,Aho),e(bp,yho),e(bp,pI),e(pI,Lho),e(bp,xho),e(x,$ho),e(x,vp),e(vp,Ine),e(Ine,kho),e(vp,Sho),e(vp,uI),e(uI,Rho),e(vp,Bho),e(x,Pho),e(x,Fp),e(Fp,qne),e(qne,Iho),e(Fp,qho),e(Fp,_I),e(_I,Nho),e(Fp,jho),e(x,Dho),e(x,Tp),e(Tp,Nne),e(Nne,Gho),e(Tp,Oho),e(Tp,bI),e(bI,Vho),e(Tp,Xho),e(x,zho),e(x,Mp),e(Mp,jne),e(jne,Qho),e(Mp,Who),e(Mp,vI),e(vI,Hho),e(Mp,Uho),e(x,Jho),e(x,Ep),e(Ep,Dne),e(Dne,Yho),e(Ep,Kho),e(Ep,FI),e(FI,Zho),e(Ep,epo),e(x,opo),e(x,Cp),e(Cp,Gne),e(Gne,rpo),e(Cp,tpo),e(Cp,TI),e(TI,apo),e(Cp,npo),e(x,spo),e(x,wp),e(wp,One),e(One,lpo),e(wp,ipo),e(wp,MI),e(MI,dpo),e(wp,cpo),e(x,fpo),e(x,Ss),e(Ss,Vne),e(Vne,mpo),e(Ss,gpo),e(Ss,EI),e(EI,hpo),e(Ss,ppo),e(Ss,CI),e(CI,upo),e(Ss,_po),e(x,bpo),e(x,Ap),e(Ap,Xne),e(Xne,vpo),e(Ap,Fpo),e(Ap,wI),e(wI,Tpo),e(Ap,Mpo),e(x,Epo),e(x,yp),e(yp,zne),e(zne,Cpo),e(yp,wpo),e(yp,AI),e(AI,Apo),e(yp,ypo),e(x,Lpo),e(x,Lp),e(Lp,Qne),e(Qne,xpo),e(Lp,$po),e(Lp,yI),e(yI,kpo),e(Lp,Spo),e(x,Rpo),e(x,xp),e(xp,Wne),e(Wne,Bpo),e(xp,Ppo),e(xp,LI),e(LI,Ipo),e(xp,qpo),e(x,Npo),e(x,$p),e($p,Hne),e(Hne,jpo),e($p,Dpo),e($p,xI),e(xI,Gpo),e($p,Opo),e(x,Vpo),e(x,kp),e(kp,Une),e(Une,Xpo),e(kp,zpo),e(kp,$I),e($I,Qpo),e(kp,Wpo),e(x,Hpo),e(x,Sp),e(Sp,Jne),e(Jne,Upo),e(Sp,Jpo),e(Sp,kI),e(kI,Ypo),e(Sp,Kpo),e(x,Zpo),e(x,Rp),e(Rp,Yne),e(Yne,euo),e(Rp,ouo),e(Rp,SI),e(SI,ruo),e(Rp,tuo),e(x,auo),e(x,Bp),e(Bp,Kne),e(Kne,nuo),e(Bp,suo),e(Bp,RI),e(RI,luo),e(Bp,iuo),e(x,duo),e(x,Pp),e(Pp,Zne),e(Zne,cuo),e(Pp,fuo),e(Pp,BI),e(BI,muo),e(Pp,guo),e(x,huo),e(x,Ip),e(Ip,ese),e(ese,puo),e(Ip,uuo),e(Ip,PI),e(PI,_uo),e(Ip,buo),e(x,vuo),e(x,qp),e(qp,ose),e(ose,Fuo),e(qp,Tuo),e(qp,II),e(II,Muo),e(qp,Euo),e(x,Cuo),e(x,Np),e(Np,rse),e(rse,wuo),e(Np,Auo),e(Np,qI),e(qI,yuo),e(Np,Luo),e(x,xuo),e(x,jp),e(jp,tse),e(tse,$uo),e(jp,kuo),e(jp,NI),e(NI,Suo),e(jp,Ruo),e(x,Buo),e(x,Dp),e(Dp,ase),e(ase,Puo),e(Dp,Iuo),e(Dp,jI),e(jI,quo),e(Dp,Nuo),e(x,juo),e(x,Gp),e(Gp,nse),e(nse,Duo),e(Gp,Guo),e(Gp,DI),e(DI,Ouo),e(Gp,Vuo),e(x,Xuo),e(x,Op),e(Op,sse),e(sse,zuo),e(Op,Quo),e(Op,GI),e(GI,Wuo),e(Op,Huo),e(x,Uuo),e(x,Vp),e(Vp,lse),e(lse,Juo),e(Vp,Yuo),e(Vp,OI),e(OI,Kuo),e(Vp,Zuo),e(x,e_o),e(x,Xp),e(Xp,ise),e(ise,o_o),e(Xp,r_o),e(Xp,VI),e(VI,t_o),e(Xp,a_o),e(x,n_o),e(x,zp),e(zp,dse),e(dse,s_o),e(zp,l_o),e(zp,XI),e(XI,i_o),e(zp,d_o),e(x,c_o),e(x,Qp),e(Qp,cse),e(cse,f_o),e(Qp,m_o),e(Qp,zI),e(zI,g_o),e(Qp,h_o),e(x,p_o),e(x,Wp),e(Wp,fse),e(fse,u_o),e(Wp,__o),e(Wp,QI),e(QI,b_o),e(Wp,v_o),e(x,F_o),e(x,Hp),e(Hp,mse),e(mse,T_o),e(Hp,M_o),e(Hp,WI),e(WI,E_o),e(Hp,C_o),e(x,w_o),e(x,Up),e(Up,gse),e(gse,A_o),e(Up,y_o),e(Up,HI),e(HI,L_o),e(Up,x_o),e(x,$_o),e(x,Jp),e(Jp,hse),e(hse,k_o),e(Jp,S_o),e(Jp,UI),e(UI,R_o),e(Jp,B_o),e(x,P_o),e(x,Yp),e(Yp,pse),e(pse,I_o),e(Yp,q_o),e(Yp,JI),e(JI,N_o),e(Yp,j_o),e(x,D_o),e(x,Kp),e(Kp,use),e(use,G_o),e(Kp,O_o),e(Kp,YI),e(YI,V_o),e(Kp,X_o),e(x,z_o),e(x,Zp),e(Zp,_se),e(_se,Q_o),e(Zp,W_o),e(Zp,KI),e(KI,H_o),e(Zp,U_o),e(x,J_o),e(x,eu),e(eu,bse),e(bse,Y_o),e(eu,K_o),e(eu,ZI),e(ZI,Z_o),e(eu,e2o),e(x,o2o),e(x,ou),e(ou,vse),e(vse,r2o),e(ou,t2o),e(ou,eq),e(eq,a2o),e(ou,n2o),e(x,s2o),e(x,ru),e(ru,Fse),e(Fse,l2o),e(ru,i2o),e(ru,oq),e(oq,d2o),e(ru,c2o),e(x,f2o),e(x,tu),e(tu,Tse),e(Tse,m2o),e(tu,g2o),e(tu,rq),e(rq,h2o),e(tu,p2o),e(x,u2o),e(x,au),e(au,Mse),e(Mse,_2o),e(au,b2o),e(au,tq),e(tq,v2o),e(au,F2o),e(x,T2o),e(x,nu),e(nu,Ese),e(Ese,M2o),e(nu,E2o),e(nu,aq),e(aq,C2o),e(nu,w2o),e(x,A2o),e(x,su),e(su,Cse),e(Cse,y2o),e(su,L2o),e(su,nq),e(nq,x2o),e(su,$2o),e(x,k2o),e(x,lu),e(lu,wse),e(wse,S2o),e(lu,R2o),e(lu,sq),e(sq,B2o),e(lu,P2o),e(x,I2o),e(x,iu),e(iu,Ase),e(Ase,q2o),e(iu,N2o),e(iu,lq),e(lq,j2o),e(iu,D2o),e(x,G2o),e(x,du),e(du,yse),e(yse,O2o),e(du,V2o),e(du,iq),e(iq,X2o),e(du,z2o),e(x,Q2o),e(x,cu),e(cu,Lse),e(Lse,W2o),e(cu,H2o),e(cu,dq),e(dq,U2o),e(cu,J2o),e(x,Y2o),e(x,fu),e(fu,xse),e(xse,K2o),e(fu,Z2o),e(fu,cq),e(cq,e1o),e(fu,o1o),e(x,r1o),e(x,mu),e(mu,$se),e($se,t1o),e(mu,a1o),e(mu,fq),e(fq,n1o),e(mu,s1o),e(x,l1o),e(x,gu),e(gu,kse),e(kse,i1o),e(gu,d1o),e(gu,mq),e(mq,c1o),e(gu,f1o),e(x,m1o),e(x,hu),e(hu,Sse),e(Sse,g1o),e(hu,h1o),e(hu,gq),e(gq,p1o),e(hu,u1o),e(x,_1o),e(x,pu),e(pu,Rse),e(Rse,b1o),e(pu,v1o),e(pu,hq),e(hq,F1o),e(pu,T1o),e(x,M1o),e(x,uu),e(uu,Bse),e(Bse,E1o),e(uu,C1o),e(uu,pq),e(pq,w1o),e(uu,A1o),e(x,y1o),e(x,_u),e(_u,Pse),e(Pse,L1o),e(_u,x1o),e(_u,uq),e(uq,$1o),e(_u,k1o),e(x,S1o),e(x,bu),e(bu,Ise),e(Ise,R1o),e(bu,B1o),e(bu,_q),e(_q,P1o),e(bu,I1o),e(x,q1o),e(x,vu),e(vu,qse),e(qse,N1o),e(vu,j1o),e(vu,bq),e(bq,D1o),e(vu,G1o),e(x,O1o),e(x,Fu),e(Fu,Nse),e(Nse,V1o),e(Fu,X1o),e(Fu,vq),e(vq,z1o),e(Fu,Q1o),e(x,W1o),e(x,Tu),e(Tu,jse),e(jse,H1o),e(Tu,U1o),e(Tu,Fq),e(Fq,J1o),e(Tu,Y1o),e(x,K1o),e(x,Mu),e(Mu,Dse),e(Dse,Z1o),e(Mu,ebo),e(Mu,Tq),e(Tq,obo),e(Mu,rbo),e(x,tbo),e(x,Eu),e(Eu,Gse),e(Gse,abo),e(Eu,nbo),e(Eu,Mq),e(Mq,sbo),e(Eu,lbo),e(x,ibo),e(x,Cu),e(Cu,Ose),e(Ose,dbo),e(Cu,cbo),e(Cu,Eq),e(Eq,fbo),e(Cu,mbo),e(x,gbo),e(x,wu),e(wu,Vse),e(Vse,hbo),e(wu,pbo),e(wu,Cq),e(Cq,ubo),e(wu,_bo),e(x,bbo),e(x,Au),e(Au,Xse),e(Xse,vbo),e(Au,Fbo),e(Au,wq),e(wq,Tbo),e(Au,Mbo),e(x,Ebo),e(x,yu),e(yu,zse),e(zse,Cbo),e(yu,wbo),e(yu,Aq),e(Aq,Abo),e(yu,ybo),e(x,Lbo),e(x,Lu),e(Lu,Qse),e(Qse,xbo),e(Lu,$bo),e(Lu,yq),e(yq,kbo),e(Lu,Sbo),e(x,Rbo),e(x,xu),e(xu,Wse),e(Wse,Bbo),e(xu,Pbo),e(xu,Lq),e(Lq,Ibo),e(xu,qbo),e(x,Nbo),e(x,$u),e($u,Hse),e(Hse,jbo),e($u,Dbo),e($u,xq),e(xq,Gbo),e($u,Obo),e(x,Vbo),e(x,ku),e(ku,Use),e(Use,Xbo),e(ku,zbo),e(ku,$q),e($q,Qbo),e(ku,Wbo),e(x,Hbo),e(x,Su),e(Su,Jse),e(Jse,Ubo),e(Su,Jbo),e(Su,kq),e(kq,Ybo),e(Su,Kbo),e(x,Zbo),e(x,Ru),e(Ru,Yse),e(Yse,e5o),e(Ru,o5o),e(Ru,Sq),e(Sq,r5o),e(Ru,t5o),e(x,a5o),e(x,Bu),e(Bu,Kse),e(Kse,n5o),e(Bu,s5o),e(Bu,Rq),e(Rq,l5o),e(Bu,i5o),e(x,d5o),e(x,Pu),e(Pu,Zse),e(Zse,c5o),e(Pu,f5o),e(Pu,Bq),e(Bq,m5o),e(Pu,g5o),e(x,h5o),e(x,Iu),e(Iu,ele),e(ele,p5o),e(Iu,u5o),e(Iu,Pq),e(Pq,_5o),e(Iu,b5o),e(He,v5o),e(He,qu),e(qu,F5o),e(qu,ole),e(ole,T5o),e(qu,M5o),e(qu,rle),e(rle,E5o),e(He,C5o),M(Nu,He,null),b(f,uIe,_),b(f,Ci,_),e(Ci,ju),e(ju,tle),M(k0,tle,null),e(Ci,w5o),e(Ci,ale),e(ale,A5o),b(f,_Ie,_),b(f,xo,_),M(S0,xo,null),e(xo,y5o),e(xo,wi),e(wi,L5o),e(wi,Iq),e(Iq,x5o),e(wi,$5o),e(wi,qq),e(qq,k5o),e(wi,S5o),e(xo,R5o),e(xo,R0),e(R0,B5o),e(R0,nle),e(nle,P5o),e(R0,I5o),e(xo,q5o),e(xo,rt),M(B0,rt,null),e(rt,N5o),e(rt,sle),e(sle,j5o),e(rt,D5o),e(rt,Ai),e(Ai,G5o),e(Ai,lle),e(lle,O5o),e(Ai,V5o),e(Ai,Nq),e(Nq,X5o),e(Ai,z5o),e(rt,Q5o),M(Du,rt,null),e(xo,W5o),e(xo,Ue),M(P0,Ue,null),e(Ue,H5o),e(Ue,ile),e(ile,U5o),e(Ue,J5o),e(Ue,ya),e(ya,Y5o),e(ya,dle),e(dle,K5o),e(ya,Z5o),e(ya,cle),e(cle,e3o),e(ya,o3o),e(ya,fle),e(fle,r3o),e(ya,t3o),e(Ue,a3o),e(Ue,G),e(G,Gu),e(Gu,mle),e(mle,n3o),e(Gu,s3o),e(Gu,jq),e(jq,l3o),e(Gu,i3o),e(G,d3o),e(G,Ou),e(Ou,gle),e(gle,c3o),e(Ou,f3o),e(Ou,Dq),e(Dq,m3o),e(Ou,g3o),e(G,h3o),e(G,Vu),e(Vu,hle),e(hle,p3o),e(Vu,u3o),e(Vu,Gq),e(Gq,_3o),e(Vu,b3o),e(G,v3o),e(G,Xu),e(Xu,ple),e(ple,F3o),e(Xu,T3o),e(Xu,Oq),e(Oq,M3o),e(Xu,E3o),e(G,C3o),e(G,zu),e(zu,ule),e(ule,w3o),e(zu,A3o),e(zu,Vq),e(Vq,y3o),e(zu,L3o),e(G,x3o),e(G,Qu),e(Qu,_le),e(_le,$3o),e(Qu,k3o),e(Qu,Xq),e(Xq,S3o),e(Qu,R3o),e(G,B3o),e(G,Wu),e(Wu,ble),e(ble,P3o),e(Wu,I3o),e(Wu,zq),e(zq,q3o),e(Wu,N3o),e(G,j3o),e(G,Hu),e(Hu,vle),e(vle,D3o),e(Hu,G3o),e(Hu,Qq),e(Qq,O3o),e(Hu,V3o),e(G,X3o),e(G,Uu),e(Uu,Fle),e(Fle,z3o),e(Uu,Q3o),e(Uu,Wq),e(Wq,W3o),e(Uu,H3o),e(G,U3o),e(G,Ju),e(Ju,Tle),e(Tle,J3o),e(Ju,Y3o),e(Ju,Hq),e(Hq,K3o),e(Ju,Z3o),e(G,evo),e(G,Yu),e(Yu,Mle),e(Mle,ovo),e(Yu,rvo),e(Yu,Uq),e(Uq,tvo),e(Yu,avo),e(G,nvo),e(G,Ku),e(Ku,Ele),e(Ele,svo),e(Ku,lvo),e(Ku,Jq),e(Jq,ivo),e(Ku,dvo),e(G,cvo),e(G,Zu),e(Zu,Cle),e(Cle,fvo),e(Zu,mvo),e(Zu,Yq),e(Yq,gvo),e(Zu,hvo),e(G,pvo),e(G,e_),e(e_,wle),e(wle,uvo),e(e_,_vo),e(e_,Kq),e(Kq,bvo),e(e_,vvo),e(G,Fvo),e(G,o_),e(o_,Ale),e(Ale,Tvo),e(o_,Mvo),e(o_,Zq),e(Zq,Evo),e(o_,Cvo),e(G,wvo),e(G,r_),e(r_,yle),e(yle,Avo),e(r_,yvo),e(r_,eN),e(eN,Lvo),e(r_,xvo),e(G,$vo),e(G,t_),e(t_,Lle),e(Lle,kvo),e(t_,Svo),e(t_,oN),e(oN,Rvo),e(t_,Bvo),e(G,Pvo),e(G,a_),e(a_,xle),e(xle,Ivo),e(a_,qvo),e(a_,rN),e(rN,Nvo),e(a_,jvo),e(G,Dvo),e(G,n_),e(n_,$le),e($le,Gvo),e(n_,Ovo),e(n_,tN),e(tN,Vvo),e(n_,Xvo),e(G,zvo),e(G,s_),e(s_,kle),e(kle,Qvo),e(s_,Wvo),e(s_,aN),e(aN,Hvo),e(s_,Uvo),e(G,Jvo),e(G,l_),e(l_,Sle),e(Sle,Yvo),e(l_,Kvo),e(l_,nN),e(nN,Zvo),e(l_,eFo),e(G,oFo),e(G,i_),e(i_,Rle),e(Rle,rFo),e(i_,tFo),e(i_,sN),e(sN,aFo),e(i_,nFo),e(G,sFo),e(G,d_),e(d_,Ble),e(Ble,lFo),e(d_,iFo),e(d_,lN),e(lN,dFo),e(d_,cFo),e(G,fFo),e(G,c_),e(c_,Ple),e(Ple,mFo),e(c_,gFo),e(c_,iN),e(iN,hFo),e(c_,pFo),e(G,uFo),e(G,f_),e(f_,Ile),e(Ile,_Fo),e(f_,bFo),e(f_,dN),e(dN,vFo),e(f_,FFo),e(G,TFo),e(G,m_),e(m_,qle),e(qle,MFo),e(m_,EFo),e(m_,cN),e(cN,CFo),e(m_,wFo),e(G,AFo),e(G,g_),e(g_,Nle),e(Nle,yFo),e(g_,LFo),e(g_,fN),e(fN,xFo),e(g_,$Fo),e(G,kFo),e(G,h_),e(h_,jle),e(jle,SFo),e(h_,RFo),e(h_,mN),e(mN,BFo),e(h_,PFo),e(G,IFo),e(G,p_),e(p_,Dle),e(Dle,qFo),e(p_,NFo),e(p_,gN),e(gN,jFo),e(p_,DFo),e(G,GFo),e(G,u_),e(u_,Gle),e(Gle,OFo),e(u_,VFo),e(u_,hN),e(hN,XFo),e(u_,zFo),e(G,QFo),e(G,__),e(__,Ole),e(Ole,WFo),e(__,HFo),e(__,pN),e(pN,UFo),e(__,JFo),e(G,YFo),e(G,b_),e(b_,Vle),e(Vle,KFo),e(b_,ZFo),e(b_,uN),e(uN,eTo),e(b_,oTo),e(G,rTo),e(G,v_),e(v_,Xle),e(Xle,tTo),e(v_,aTo),e(v_,_N),e(_N,nTo),e(v_,sTo),e(G,lTo),e(G,F_),e(F_,zle),e(zle,iTo),e(F_,dTo),e(F_,bN),e(bN,cTo),e(F_,fTo),e(G,mTo),e(G,T_),e(T_,Qle),e(Qle,gTo),e(T_,hTo),e(T_,vN),e(vN,pTo),e(T_,uTo),e(G,_To),e(G,M_),e(M_,Wle),e(Wle,bTo),e(M_,vTo),e(M_,FN),e(FN,FTo),e(M_,TTo),e(G,MTo),e(G,E_),e(E_,Hle),e(Hle,ETo),e(E_,CTo),e(E_,TN),e(TN,wTo),e(E_,ATo),e(G,yTo),e(G,C_),e(C_,Ule),e(Ule,LTo),e(C_,xTo),e(C_,MN),e(MN,$To),e(C_,kTo),e(G,STo),e(G,w_),e(w_,Jle),e(Jle,RTo),e(w_,BTo),e(w_,EN),e(EN,PTo),e(w_,ITo),e(G,qTo),e(G,A_),e(A_,Yle),e(Yle,NTo),e(A_,jTo),e(A_,CN),e(CN,DTo),e(A_,GTo),e(Ue,OTo),e(Ue,y_),e(y_,VTo),e(y_,Kle),e(Kle,XTo),e(y_,zTo),e(y_,Zle),e(Zle,QTo),e(Ue,WTo),M(L_,Ue,null),b(f,bIe,_),b(f,yi,_),e(yi,x_),e(x_,eie),M(I0,eie,null),e(yi,HTo),e(yi,oie),e(oie,UTo),b(f,vIe,_),b(f,$o,_),M(q0,$o,null),e($o,JTo),e($o,Li),e(Li,YTo),e(Li,wN),e(wN,KTo),e(Li,ZTo),e(Li,AN),e(AN,e7o),e(Li,o7o),e($o,r7o),e($o,N0),e(N0,t7o),e(N0,rie),e(rie,a7o),e(N0,n7o),e($o,s7o),e($o,tt),M(j0,tt,null),e(tt,l7o),e(tt,tie),e(tie,i7o),e(tt,d7o),e(tt,xi),e(xi,c7o),e(xi,aie),e(aie,f7o),e(xi,m7o),e(xi,yN),e(yN,g7o),e(xi,h7o),e(tt,p7o),M($_,tt,null),e($o,u7o),e($o,Je),M(D0,Je,null),e(Je,_7o),e(Je,nie),e(nie,b7o),e(Je,v7o),e(Je,La),e(La,F7o),e(La,sie),e(sie,T7o),e(La,M7o),e(La,lie),e(lie,E7o),e(La,C7o),e(La,iie),e(iie,w7o),e(La,A7o),e(Je,y7o),e(Je,z),e(z,k_),e(k_,die),e(die,L7o),e(k_,x7o),e(k_,LN),e(LN,$7o),e(k_,k7o),e(z,S7o),e(z,S_),e(S_,cie),e(cie,R7o),e(S_,B7o),e(S_,xN),e(xN,P7o),e(S_,I7o),e(z,q7o),e(z,R_),e(R_,fie),e(fie,N7o),e(R_,j7o),e(R_,$N),e($N,D7o),e(R_,G7o),e(z,O7o),e(z,B_),e(B_,mie),e(mie,V7o),e(B_,X7o),e(B_,kN),e(kN,z7o),e(B_,Q7o),e(z,W7o),e(z,P_),e(P_,gie),e(gie,H7o),e(P_,U7o),e(P_,SN),e(SN,J7o),e(P_,Y7o),e(z,K7o),e(z,I_),e(I_,hie),e(hie,Z7o),e(I_,eMo),e(I_,RN),e(RN,oMo),e(I_,rMo),e(z,tMo),e(z,q_),e(q_,pie),e(pie,aMo),e(q_,nMo),e(q_,BN),e(BN,sMo),e(q_,lMo),e(z,iMo),e(z,N_),e(N_,uie),e(uie,dMo),e(N_,cMo),e(N_,PN),e(PN,fMo),e(N_,mMo),e(z,gMo),e(z,j_),e(j_,_ie),e(_ie,hMo),e(j_,pMo),e(j_,IN),e(IN,uMo),e(j_,_Mo),e(z,bMo),e(z,D_),e(D_,bie),e(bie,vMo),e(D_,FMo),e(D_,qN),e(qN,TMo),e(D_,MMo),e(z,EMo),e(z,G_),e(G_,vie),e(vie,CMo),e(G_,wMo),e(G_,NN),e(NN,AMo),e(G_,yMo),e(z,LMo),e(z,O_),e(O_,Fie),e(Fie,xMo),e(O_,$Mo),e(O_,jN),e(jN,kMo),e(O_,SMo),e(z,RMo),e(z,V_),e(V_,Tie),e(Tie,BMo),e(V_,PMo),e(V_,DN),e(DN,IMo),e(V_,qMo),e(z,NMo),e(z,X_),e(X_,Mie),e(Mie,jMo),e(X_,DMo),e(X_,GN),e(GN,GMo),e(X_,OMo),e(z,VMo),e(z,z_),e(z_,Eie),e(Eie,XMo),e(z_,zMo),e(z_,ON),e(ON,QMo),e(z_,WMo),e(z,HMo),e(z,Q_),e(Q_,Cie),e(Cie,UMo),e(Q_,JMo),e(Q_,VN),e(VN,YMo),e(Q_,KMo),e(z,ZMo),e(z,W_),e(W_,wie),e(wie,e4o),e(W_,o4o),e(W_,XN),e(XN,r4o),e(W_,t4o),e(z,a4o),e(z,H_),e(H_,Aie),e(Aie,n4o),e(H_,s4o),e(H_,zN),e(zN,l4o),e(H_,i4o),e(z,d4o),e(z,U_),e(U_,yie),e(yie,c4o),e(U_,f4o),e(U_,QN),e(QN,m4o),e(U_,g4o),e(z,h4o),e(z,J_),e(J_,Lie),e(Lie,p4o),e(J_,u4o),e(J_,WN),e(WN,_4o),e(J_,b4o),e(z,v4o),e(z,Y_),e(Y_,xie),e(xie,F4o),e(Y_,T4o),e(Y_,HN),e(HN,M4o),e(Y_,E4o),e(z,C4o),e(z,K_),e(K_,$ie),e($ie,w4o),e(K_,A4o),e(K_,UN),e(UN,y4o),e(K_,L4o),e(z,x4o),e(z,Z_),e(Z_,kie),e(kie,$4o),e(Z_,k4o),e(Z_,JN),e(JN,S4o),e(Z_,R4o),e(z,B4o),e(z,e2),e(e2,Sie),e(Sie,P4o),e(e2,I4o),e(e2,YN),e(YN,q4o),e(e2,N4o),e(z,j4o),e(z,o2),e(o2,Rie),e(Rie,D4o),e(o2,G4o),e(o2,KN),e(KN,O4o),e(o2,V4o),e(z,X4o),e(z,r2),e(r2,Bie),e(Bie,z4o),e(r2,Q4o),e(r2,ZN),e(ZN,W4o),e(r2,H4o),e(z,U4o),e(z,t2),e(t2,Pie),e(Pie,J4o),e(t2,Y4o),e(t2,ej),e(ej,K4o),e(t2,Z4o),e(z,eEo),e(z,a2),e(a2,Iie),e(Iie,oEo),e(a2,rEo),e(a2,oj),e(oj,tEo),e(a2,aEo),e(z,nEo),e(z,n2),e(n2,qie),e(qie,sEo),e(n2,lEo),e(n2,rj),e(rj,iEo),e(n2,dEo),e(z,cEo),e(z,s2),e(s2,Nie),e(Nie,fEo),e(s2,mEo),e(s2,tj),e(tj,gEo),e(s2,hEo),e(z,pEo),e(z,l2),e(l2,jie),e(jie,uEo),e(l2,_Eo),e(l2,aj),e(aj,bEo),e(l2,vEo),e(z,FEo),e(z,i2),e(i2,Die),e(Die,TEo),e(i2,MEo),e(i2,nj),e(nj,EEo),e(i2,CEo),e(z,wEo),e(z,d2),e(d2,Gie),e(Gie,AEo),e(d2,yEo),e(d2,sj),e(sj,LEo),e(d2,xEo),e(z,$Eo),e(z,c2),e(c2,Oie),e(Oie,kEo),e(c2,SEo),e(c2,lj),e(lj,REo),e(c2,BEo),e(z,PEo),e(z,f2),e(f2,Vie),e(Vie,IEo),e(f2,qEo),e(f2,ij),e(ij,NEo),e(f2,jEo),e(z,DEo),e(z,m2),e(m2,Xie),e(Xie,GEo),e(m2,OEo),e(m2,dj),e(dj,VEo),e(m2,XEo),e(Je,zEo),e(Je,g2),e(g2,QEo),e(g2,zie),e(zie,WEo),e(g2,HEo),e(g2,Qie),e(Qie,UEo),e(Je,JEo),M(h2,Je,null),b(f,FIe,_),b(f,$i,_),e($i,p2),e(p2,Wie),M(G0,Wie,null),e($i,YEo),e($i,Hie),e(Hie,KEo),b(f,TIe,_),b(f,ko,_),M(O0,ko,null),e(ko,ZEo),e(ko,ki),e(ki,eCo),e(ki,cj),e(cj,oCo),e(ki,rCo),e(ki,fj),e(fj,tCo),e(ki,aCo),e(ko,nCo),e(ko,V0),e(V0,sCo),e(V0,Uie),e(Uie,lCo),e(V0,iCo),e(ko,dCo),e(ko,at),M(X0,at,null),e(at,cCo),e(at,Jie),e(Jie,fCo),e(at,mCo),e(at,Si),e(Si,gCo),e(Si,Yie),e(Yie,hCo),e(Si,pCo),e(Si,mj),e(mj,uCo),e(Si,_Co),e(at,bCo),M(u2,at,null),e(ko,vCo),e(ko,Ye),M(z0,Ye,null),e(Ye,FCo),e(Ye,Kie),e(Kie,TCo),e(Ye,MCo),e(Ye,xa),e(xa,ECo),e(xa,Zie),e(Zie,CCo),e(xa,wCo),e(xa,ede),e(ede,ACo),e(xa,yCo),e(xa,ode),e(ode,LCo),e(xa,xCo),e(Ye,$Co),e(Ye,Q),e(Q,_2),e(_2,rde),e(rde,kCo),e(_2,SCo),e(_2,gj),e(gj,RCo),e(_2,BCo),e(Q,PCo),e(Q,b2),e(b2,tde),e(tde,ICo),e(b2,qCo),e(b2,hj),e(hj,NCo),e(b2,jCo),e(Q,DCo),e(Q,v2),e(v2,ade),e(ade,GCo),e(v2,OCo),e(v2,pj),e(pj,VCo),e(v2,XCo),e(Q,zCo),e(Q,F2),e(F2,nde),e(nde,QCo),e(F2,WCo),e(F2,uj),e(uj,HCo),e(F2,UCo),e(Q,JCo),e(Q,T2),e(T2,sde),e(sde,YCo),e(T2,KCo),e(T2,_j),e(_j,ZCo),e(T2,ewo),e(Q,owo),e(Q,M2),e(M2,lde),e(lde,rwo),e(M2,two),e(M2,bj),e(bj,awo),e(M2,nwo),e(Q,swo),e(Q,E2),e(E2,ide),e(ide,lwo),e(E2,iwo),e(E2,vj),e(vj,dwo),e(E2,cwo),e(Q,fwo),e(Q,C2),e(C2,dde),e(dde,mwo),e(C2,gwo),e(C2,Fj),e(Fj,hwo),e(C2,pwo),e(Q,uwo),e(Q,w2),e(w2,cde),e(cde,_wo),e(w2,bwo),e(w2,Tj),e(Tj,vwo),e(w2,Fwo),e(Q,Two),e(Q,A2),e(A2,fde),e(fde,Mwo),e(A2,Ewo),e(A2,Mj),e(Mj,Cwo),e(A2,wwo),e(Q,Awo),e(Q,y2),e(y2,mde),e(mde,ywo),e(y2,Lwo),e(y2,Ej),e(Ej,xwo),e(y2,$wo),e(Q,kwo),e(Q,L2),e(L2,gde),e(gde,Swo),e(L2,Rwo),e(L2,Cj),e(Cj,Bwo),e(L2,Pwo),e(Q,Iwo),e(Q,x2),e(x2,hde),e(hde,qwo),e(x2,Nwo),e(x2,wj),e(wj,jwo),e(x2,Dwo),e(Q,Gwo),e(Q,$2),e($2,pde),e(pde,Owo),e($2,Vwo),e($2,Aj),e(Aj,Xwo),e($2,zwo),e(Q,Qwo),e(Q,k2),e(k2,ude),e(ude,Wwo),e(k2,Hwo),e(k2,yj),e(yj,Uwo),e(k2,Jwo),e(Q,Ywo),e(Q,S2),e(S2,_de),e(_de,Kwo),e(S2,Zwo),e(S2,Lj),e(Lj,eAo),e(S2,oAo),e(Q,rAo),e(Q,R2),e(R2,bde),e(bde,tAo),e(R2,aAo),e(R2,xj),e(xj,nAo),e(R2,sAo),e(Q,lAo),e(Q,B2),e(B2,vde),e(vde,iAo),e(B2,dAo),e(B2,$j),e($j,cAo),e(B2,fAo),e(Q,mAo),e(Q,P2),e(P2,Fde),e(Fde,gAo),e(P2,hAo),e(P2,kj),e(kj,pAo),e(P2,uAo),e(Q,_Ao),e(Q,I2),e(I2,Tde),e(Tde,bAo),e(I2,vAo),e(I2,Sj),e(Sj,FAo),e(I2,TAo),e(Q,MAo),e(Q,q2),e(q2,Mde),e(Mde,EAo),e(q2,CAo),e(q2,Rj),e(Rj,wAo),e(q2,AAo),e(Q,yAo),e(Q,N2),e(N2,Ede),e(Ede,LAo),e(N2,xAo),e(N2,Bj),e(Bj,$Ao),e(N2,kAo),e(Q,SAo),e(Q,j2),e(j2,Cde),e(Cde,RAo),e(j2,BAo),e(j2,Pj),e(Pj,PAo),e(j2,IAo),e(Q,qAo),e(Q,D2),e(D2,wde),e(wde,NAo),e(D2,jAo),e(D2,Ij),e(Ij,DAo),e(D2,GAo),e(Q,OAo),e(Q,G2),e(G2,Ade),e(Ade,VAo),e(G2,XAo),e(G2,qj),e(qj,zAo),e(G2,QAo),e(Q,WAo),e(Q,O2),e(O2,yde),e(yde,HAo),e(O2,UAo),e(O2,Nj),e(Nj,JAo),e(O2,YAo),e(Q,KAo),e(Q,V2),e(V2,Lde),e(Lde,ZAo),e(V2,e6o),e(V2,jj),e(jj,o6o),e(V2,r6o),e(Q,t6o),e(Q,X2),e(X2,xde),e(xde,a6o),e(X2,n6o),e(X2,Dj),e(Dj,s6o),e(X2,l6o),e(Q,i6o),e(Q,z2),e(z2,$de),e($de,d6o),e(z2,c6o),e(z2,Gj),e(Gj,f6o),e(z2,m6o),e(Q,g6o),e(Q,Q2),e(Q2,kde),e(kde,h6o),e(Q2,p6o),e(Q2,Oj),e(Oj,u6o),e(Q2,_6o),e(Q,b6o),e(Q,W2),e(W2,Sde),e(Sde,v6o),e(W2,F6o),e(W2,Rde),e(Rde,T6o),e(W2,M6o),e(Q,E6o),e(Q,H2),e(H2,Bde),e(Bde,C6o),e(H2,w6o),e(H2,Vj),e(Vj,A6o),e(H2,y6o),e(Q,L6o),e(Q,U2),e(U2,Pde),e(Pde,x6o),e(U2,$6o),e(U2,Xj),e(Xj,k6o),e(U2,S6o),e(Q,R6o),e(Q,J2),e(J2,Ide),e(Ide,B6o),e(J2,P6o),e(J2,zj),e(zj,I6o),e(J2,q6o),e(Q,N6o),e(Q,Y2),e(Y2,qde),e(qde,j6o),e(Y2,D6o),e(Y2,Qj),e(Qj,G6o),e(Y2,O6o),e(Ye,V6o),e(Ye,K2),e(K2,X6o),e(K2,Nde),e(Nde,z6o),e(K2,Q6o),e(K2,jde),e(jde,W6o),e(Ye,H6o),M(Z2,Ye,null),b(f,MIe,_),b(f,Ri,_),e(Ri,e1),e(e1,Dde),M(Q0,Dde,null),e(Ri,U6o),e(Ri,Gde),e(Gde,J6o),b(f,EIe,_),b(f,So,_),M(W0,So,null),e(So,Y6o),e(So,Bi),e(Bi,K6o),e(Bi,Wj),e(Wj,Z6o),e(Bi,e0o),e(Bi,Hj),e(Hj,o0o),e(Bi,r0o),e(So,t0o),e(So,H0),e(H0,a0o),e(H0,Ode),e(Ode,n0o),e(H0,s0o),e(So,l0o),e(So,nt),M(U0,nt,null),e(nt,i0o),e(nt,Vde),e(Vde,d0o),e(nt,c0o),e(nt,Pi),e(Pi,f0o),e(Pi,Xde),e(Xde,m0o),e(Pi,g0o),e(Pi,Uj),e(Uj,h0o),e(Pi,p0o),e(nt,u0o),M(o1,nt,null),e(So,_0o),e(So,Ke),M(J0,Ke,null),e(Ke,b0o),e(Ke,zde),e(zde,v0o),e(Ke,F0o),e(Ke,$a),e($a,T0o),e($a,Qde),e(Qde,M0o),e($a,E0o),e($a,Wde),e(Wde,C0o),e($a,w0o),e($a,Hde),e(Hde,A0o),e($a,y0o),e(Ke,L0o),e(Ke,he),e(he,r1),e(r1,Ude),e(Ude,x0o),e(r1,$0o),e(r1,Jj),e(Jj,k0o),e(r1,S0o),e(he,R0o),e(he,t1),e(t1,Jde),e(Jde,B0o),e(t1,P0o),e(t1,Yj),e(Yj,I0o),e(t1,q0o),e(he,N0o),e(he,a1),e(a1,Yde),e(Yde,j0o),e(a1,D0o),e(a1,Kj),e(Kj,G0o),e(a1,O0o),e(he,V0o),e(he,n1),e(n1,Kde),e(Kde,X0o),e(n1,z0o),e(n1,Zj),e(Zj,Q0o),e(n1,W0o),e(he,H0o),e(he,s1),e(s1,Zde),e(Zde,U0o),e(s1,J0o),e(s1,eD),e(eD,Y0o),e(s1,K0o),e(he,Z0o),e(he,l1),e(l1,ece),e(ece,eyo),e(l1,oyo),e(l1,oD),e(oD,ryo),e(l1,tyo),e(he,ayo),e(he,i1),e(i1,oce),e(oce,nyo),e(i1,syo),e(i1,rD),e(rD,lyo),e(i1,iyo),e(he,dyo),e(he,d1),e(d1,rce),e(rce,cyo),e(d1,fyo),e(d1,tD),e(tD,myo),e(d1,gyo),e(he,hyo),e(he,c1),e(c1,tce),e(tce,pyo),e(c1,uyo),e(c1,aD),e(aD,_yo),e(c1,byo),e(he,vyo),e(he,f1),e(f1,ace),e(ace,Fyo),e(f1,Tyo),e(f1,nD),e(nD,Myo),e(f1,Eyo),e(he,Cyo),e(he,m1),e(m1,nce),e(nce,wyo),e(m1,Ayo),e(m1,sD),e(sD,yyo),e(m1,Lyo),e(he,xyo),e(he,g1),e(g1,sce),e(sce,$yo),e(g1,kyo),e(g1,lD),e(lD,Syo),e(g1,Ryo),e(he,Byo),e(he,h1),e(h1,lce),e(lce,Pyo),e(h1,Iyo),e(h1,iD),e(iD,qyo),e(h1,Nyo),e(he,jyo),e(he,p1),e(p1,ice),e(ice,Dyo),e(p1,Gyo),e(p1,dD),e(dD,Oyo),e(p1,Vyo),e(he,Xyo),e(he,u1),e(u1,dce),e(dce,zyo),e(u1,Qyo),e(u1,cD),e(cD,Wyo),e(u1,Hyo),e(he,Uyo),e(he,_1),e(_1,cce),e(cce,Jyo),e(_1,Yyo),e(_1,fD),e(fD,Kyo),e(_1,Zyo),e(he,eLo),e(he,b1),e(b1,fce),e(fce,oLo),e(b1,rLo),e(b1,mD),e(mD,tLo),e(b1,aLo),e(Ke,nLo),e(Ke,v1),e(v1,sLo),e(v1,mce),e(mce,lLo),e(v1,iLo),e(v1,gce),e(gce,dLo),e(Ke,cLo),M(F1,Ke,null),b(f,CIe,_),b(f,Ii,_),e(Ii,T1),e(T1,hce),M(Y0,hce,null),e(Ii,fLo),e(Ii,pce),e(pce,mLo),b(f,wIe,_),b(f,Ro,_),M(K0,Ro,null),e(Ro,gLo),e(Ro,qi),e(qi,hLo),e(qi,gD),e(gD,pLo),e(qi,uLo),e(qi,hD),e(hD,_Lo),e(qi,bLo),e(Ro,vLo),e(Ro,Z0),e(Z0,FLo),e(Z0,uce),e(uce,TLo),e(Z0,MLo),e(Ro,ELo),e(Ro,st),M(ey,st,null),e(st,CLo),e(st,_ce),e(_ce,wLo),e(st,ALo),e(st,Ni),e(Ni,yLo),e(Ni,bce),e(bce,LLo),e(Ni,xLo),e(Ni,pD),e(pD,$Lo),e(Ni,kLo),e(st,SLo),M(M1,st,null),e(Ro,RLo),e(Ro,Ze),M(oy,Ze,null),e(Ze,BLo),e(Ze,vce),e(vce,PLo),e(Ze,ILo),e(Ze,ka),e(ka,qLo),e(ka,Fce),e(Fce,NLo),e(ka,jLo),e(ka,Tce),e(Tce,DLo),e(ka,GLo),e(ka,Mce),e(Mce,OLo),e(ka,VLo),e(Ze,XLo),e(Ze,q),e(q,E1),e(E1,Ece),e(Ece,zLo),e(E1,QLo),e(E1,uD),e(uD,WLo),e(E1,HLo),e(q,ULo),e(q,C1),e(C1,Cce),e(Cce,JLo),e(C1,YLo),e(C1,_D),e(_D,KLo),e(C1,ZLo),e(q,e8o),e(q,w1),e(w1,wce),e(wce,o8o),e(w1,r8o),e(w1,bD),e(bD,t8o),e(w1,a8o),e(q,n8o),e(q,A1),e(A1,Ace),e(Ace,s8o),e(A1,l8o),e(A1,vD),e(vD,i8o),e(A1,d8o),e(q,c8o),e(q,y1),e(y1,yce),e(yce,f8o),e(y1,m8o),e(y1,FD),e(FD,g8o),e(y1,h8o),e(q,p8o),e(q,L1),e(L1,Lce),e(Lce,u8o),e(L1,_8o),e(L1,TD),e(TD,b8o),e(L1,v8o),e(q,F8o),e(q,x1),e(x1,xce),e(xce,T8o),e(x1,M8o),e(x1,MD),e(MD,E8o),e(x1,C8o),e(q,w8o),e(q,$1),e($1,$ce),e($ce,A8o),e($1,y8o),e($1,ED),e(ED,L8o),e($1,x8o),e(q,$8o),e(q,k1),e(k1,kce),e(kce,k8o),e(k1,S8o),e(k1,CD),e(CD,R8o),e(k1,B8o),e(q,P8o),e(q,S1),e(S1,Sce),e(Sce,I8o),e(S1,q8o),e(S1,wD),e(wD,N8o),e(S1,j8o),e(q,D8o),e(q,R1),e(R1,Rce),e(Rce,G8o),e(R1,O8o),e(R1,AD),e(AD,V8o),e(R1,X8o),e(q,z8o),e(q,B1),e(B1,Bce),e(Bce,Q8o),e(B1,W8o),e(B1,yD),e(yD,H8o),e(B1,U8o),e(q,J8o),e(q,P1),e(P1,Pce),e(Pce,Y8o),e(P1,K8o),e(P1,LD),e(LD,Z8o),e(P1,exo),e(q,oxo),e(q,I1),e(I1,Ice),e(Ice,rxo),e(I1,txo),e(I1,xD),e(xD,axo),e(I1,nxo),e(q,sxo),e(q,q1),e(q1,qce),e(qce,lxo),e(q1,ixo),e(q1,$D),e($D,dxo),e(q1,cxo),e(q,fxo),e(q,N1),e(N1,Nce),e(Nce,mxo),e(N1,gxo),e(N1,kD),e(kD,hxo),e(N1,pxo),e(q,uxo),e(q,j1),e(j1,jce),e(jce,_xo),e(j1,bxo),e(j1,SD),e(SD,vxo),e(j1,Fxo),e(q,Txo),e(q,D1),e(D1,Dce),e(Dce,Mxo),e(D1,Exo),e(D1,RD),e(RD,Cxo),e(D1,wxo),e(q,Axo),e(q,G1),e(G1,Gce),e(Gce,yxo),e(G1,Lxo),e(G1,BD),e(BD,xxo),e(G1,$xo),e(q,kxo),e(q,O1),e(O1,Oce),e(Oce,Sxo),e(O1,Rxo),e(O1,PD),e(PD,Bxo),e(O1,Pxo),e(q,Ixo),e(q,V1),e(V1,Vce),e(Vce,qxo),e(V1,Nxo),e(V1,ID),e(ID,jxo),e(V1,Dxo),e(q,Gxo),e(q,X1),e(X1,Xce),e(Xce,Oxo),e(X1,Vxo),e(X1,qD),e(qD,Xxo),e(X1,zxo),e(q,Qxo),e(q,z1),e(z1,zce),e(zce,Wxo),e(z1,Hxo),e(z1,ND),e(ND,Uxo),e(z1,Jxo),e(q,Yxo),e(q,Q1),e(Q1,Qce),e(Qce,Kxo),e(Q1,Zxo),e(Q1,jD),e(jD,e9o),e(Q1,o9o),e(q,r9o),e(q,W1),e(W1,Wce),e(Wce,t9o),e(W1,a9o),e(W1,DD),e(DD,n9o),e(W1,s9o),e(q,l9o),e(q,H1),e(H1,Hce),e(Hce,i9o),e(H1,d9o),e(H1,GD),e(GD,c9o),e(H1,f9o),e(q,m9o),e(q,U1),e(U1,Uce),e(Uce,g9o),e(U1,h9o),e(U1,OD),e(OD,p9o),e(U1,u9o),e(q,_9o),e(q,J1),e(J1,Jce),e(Jce,b9o),e(J1,v9o),e(J1,VD),e(VD,F9o),e(J1,T9o),e(q,M9o),e(q,Y1),e(Y1,Yce),e(Yce,E9o),e(Y1,C9o),e(Y1,XD),e(XD,w9o),e(Y1,A9o),e(q,y9o),e(q,K1),e(K1,Kce),e(Kce,L9o),e(K1,x9o),e(K1,zD),e(zD,$9o),e(K1,k9o),e(q,S9o),e(q,Z1),e(Z1,Zce),e(Zce,R9o),e(Z1,B9o),e(Z1,QD),e(QD,P9o),e(Z1,I9o),e(q,q9o),e(q,eb),e(eb,efe),e(efe,N9o),e(eb,j9o),e(eb,WD),e(WD,D9o),e(eb,G9o),e(q,O9o),e(q,ob),e(ob,ofe),e(ofe,V9o),e(ob,X9o),e(ob,HD),e(HD,z9o),e(ob,Q9o),e(q,W9o),e(q,rb),e(rb,rfe),e(rfe,H9o),e(rb,U9o),e(rb,UD),e(UD,J9o),e(rb,Y9o),e(q,K9o),e(q,tb),e(tb,tfe),e(tfe,Z9o),e(tb,e$o),e(tb,JD),e(JD,o$o),e(tb,r$o),e(q,t$o),e(q,ab),e(ab,afe),e(afe,a$o),e(ab,n$o),e(ab,YD),e(YD,s$o),e(ab,l$o),e(q,i$o),e(q,nb),e(nb,nfe),e(nfe,d$o),e(nb,c$o),e(nb,KD),e(KD,f$o),e(nb,m$o),e(q,g$o),e(q,sb),e(sb,sfe),e(sfe,h$o),e(sb,p$o),e(sb,ZD),e(ZD,u$o),e(sb,_$o),e(q,b$o),e(q,lb),e(lb,lfe),e(lfe,v$o),e(lb,F$o),e(lb,eG),e(eG,T$o),e(lb,M$o),e(q,E$o),e(q,ib),e(ib,ife),e(ife,C$o),e(ib,w$o),e(ib,oG),e(oG,A$o),e(ib,y$o),e(q,L$o),e(q,db),e(db,dfe),e(dfe,x$o),e(db,$$o),e(db,rG),e(rG,k$o),e(db,S$o),e(q,R$o),e(q,cb),e(cb,cfe),e(cfe,B$o),e(cb,P$o),e(cb,tG),e(tG,I$o),e(cb,q$o),e(q,N$o),e(q,fb),e(fb,ffe),e(ffe,j$o),e(fb,D$o),e(fb,aG),e(aG,G$o),e(fb,O$o),e(q,V$o),e(q,mb),e(mb,mfe),e(mfe,X$o),e(mb,z$o),e(mb,nG),e(nG,Q$o),e(mb,W$o),e(q,H$o),e(q,gb),e(gb,gfe),e(gfe,U$o),e(gb,J$o),e(gb,sG),e(sG,Y$o),e(gb,K$o),e(q,Z$o),e(q,hb),e(hb,hfe),e(hfe,eko),e(hb,oko),e(hb,lG),e(lG,rko),e(hb,tko),e(q,ako),e(q,pb),e(pb,pfe),e(pfe,nko),e(pb,sko),e(pb,iG),e(iG,lko),e(pb,iko),e(Ze,dko),e(Ze,ub),e(ub,cko),e(ub,ufe),e(ufe,fko),e(ub,mko),e(ub,_fe),e(_fe,gko),e(Ze,hko),M(_b,Ze,null),b(f,AIe,_),b(f,ji,_),e(ji,bb),e(bb,bfe),M(ry,bfe,null),e(ji,pko),e(ji,vfe),e(vfe,uko),b(f,yIe,_),b(f,Bo,_),M(ty,Bo,null),e(Bo,_ko),e(Bo,Di),e(Di,bko),e(Di,dG),e(dG,vko),e(Di,Fko),e(Di,cG),e(cG,Tko),e(Di,Mko),e(Bo,Eko),e(Bo,ay),e(ay,Cko),e(ay,Ffe),e(Ffe,wko),e(ay,Ako),e(Bo,yko),e(Bo,lt),M(ny,lt,null),e(lt,Lko),e(lt,Tfe),e(Tfe,xko),e(lt,$ko),e(lt,Gi),e(Gi,kko),e(Gi,Mfe),e(Mfe,Sko),e(Gi,Rko),e(Gi,fG),e(fG,Bko),e(Gi,Pko),e(lt,Iko),M(vb,lt,null),e(Bo,qko),e(Bo,eo),M(sy,eo,null),e(eo,Nko),e(eo,Efe),e(Efe,jko),e(eo,Dko),e(eo,Sa),e(Sa,Gko),e(Sa,Cfe),e(Cfe,Oko),e(Sa,Vko),e(Sa,wfe),e(wfe,Xko),e(Sa,zko),e(Sa,Afe),e(Afe,Qko),e(Sa,Wko),e(eo,Hko),e(eo,Y),e(Y,Fb),e(Fb,yfe),e(yfe,Uko),e(Fb,Jko),e(Fb,mG),e(mG,Yko),e(Fb,Kko),e(Y,Zko),e(Y,Tb),e(Tb,Lfe),e(Lfe,eSo),e(Tb,oSo),e(Tb,gG),e(gG,rSo),e(Tb,tSo),e(Y,aSo),e(Y,Mb),e(Mb,xfe),e(xfe,nSo),e(Mb,sSo),e(Mb,hG),e(hG,lSo),e(Mb,iSo),e(Y,dSo),e(Y,Eb),e(Eb,$fe),e($fe,cSo),e(Eb,fSo),e(Eb,pG),e(pG,mSo),e(Eb,gSo),e(Y,hSo),e(Y,Cb),e(Cb,kfe),e(kfe,pSo),e(Cb,uSo),e(Cb,uG),e(uG,_So),e(Cb,bSo),e(Y,vSo),e(Y,wb),e(wb,Sfe),e(Sfe,FSo),e(wb,TSo),e(wb,_G),e(_G,MSo),e(wb,ESo),e(Y,CSo),e(Y,Ab),e(Ab,Rfe),e(Rfe,wSo),e(Ab,ASo),e(Ab,bG),e(bG,ySo),e(Ab,LSo),e(Y,xSo),e(Y,yb),e(yb,Bfe),e(Bfe,$So),e(yb,kSo),e(yb,vG),e(vG,SSo),e(yb,RSo),e(Y,BSo),e(Y,Lb),e(Lb,Pfe),e(Pfe,PSo),e(Lb,ISo),e(Lb,FG),e(FG,qSo),e(Lb,NSo),e(Y,jSo),e(Y,xb),e(xb,Ife),e(Ife,DSo),e(xb,GSo),e(xb,TG),e(TG,OSo),e(xb,VSo),e(Y,XSo),e(Y,$b),e($b,qfe),e(qfe,zSo),e($b,QSo),e($b,MG),e(MG,WSo),e($b,HSo),e(Y,USo),e(Y,kb),e(kb,Nfe),e(Nfe,JSo),e(kb,YSo),e(kb,EG),e(EG,KSo),e(kb,ZSo),e(Y,eRo),e(Y,Sb),e(Sb,jfe),e(jfe,oRo),e(Sb,rRo),e(Sb,CG),e(CG,tRo),e(Sb,aRo),e(Y,nRo),e(Y,Rb),e(Rb,Dfe),e(Dfe,sRo),e(Rb,lRo),e(Rb,wG),e(wG,iRo),e(Rb,dRo),e(Y,cRo),e(Y,Bb),e(Bb,Gfe),e(Gfe,fRo),e(Bb,mRo),e(Bb,AG),e(AG,gRo),e(Bb,hRo),e(Y,pRo),e(Y,Pb),e(Pb,Ofe),e(Ofe,uRo),e(Pb,_Ro),e(Pb,yG),e(yG,bRo),e(Pb,vRo),e(Y,FRo),e(Y,Ib),e(Ib,Vfe),e(Vfe,TRo),e(Ib,MRo),e(Ib,LG),e(LG,ERo),e(Ib,CRo),e(Y,wRo),e(Y,qb),e(qb,Xfe),e(Xfe,ARo),e(qb,yRo),e(qb,xG),e(xG,LRo),e(qb,xRo),e(Y,$Ro),e(Y,Nb),e(Nb,zfe),e(zfe,kRo),e(Nb,SRo),e(Nb,$G),e($G,RRo),e(Nb,BRo),e(Y,PRo),e(Y,jb),e(jb,Qfe),e(Qfe,IRo),e(jb,qRo),e(jb,kG),e(kG,NRo),e(jb,jRo),e(Y,DRo),e(Y,Db),e(Db,Wfe),e(Wfe,GRo),e(Db,ORo),e(Db,SG),e(SG,VRo),e(Db,XRo),e(Y,zRo),e(Y,Gb),e(Gb,Hfe),e(Hfe,QRo),e(Gb,WRo),e(Gb,RG),e(RG,HRo),e(Gb,URo),e(Y,JRo),e(Y,Ob),e(Ob,Ufe),e(Ufe,YRo),e(Ob,KRo),e(Ob,BG),e(BG,ZRo),e(Ob,eBo),e(Y,oBo),e(Y,Vb),e(Vb,Jfe),e(Jfe,rBo),e(Vb,tBo),e(Vb,PG),e(PG,aBo),e(Vb,nBo),e(Y,sBo),e(Y,Xb),e(Xb,Yfe),e(Yfe,lBo),e(Xb,iBo),e(Xb,IG),e(IG,dBo),e(Xb,cBo),e(Y,fBo),e(Y,zb),e(zb,Kfe),e(Kfe,mBo),e(zb,gBo),e(zb,qG),e(qG,hBo),e(zb,pBo),e(Y,uBo),e(Y,Qb),e(Qb,Zfe),e(Zfe,_Bo),e(Qb,bBo),e(Qb,NG),e(NG,vBo),e(Qb,FBo),e(Y,TBo),e(Y,Wb),e(Wb,eme),e(eme,MBo),e(Wb,EBo),e(Wb,jG),e(jG,CBo),e(Wb,wBo),e(Y,ABo),e(Y,Hb),e(Hb,ome),e(ome,yBo),e(Hb,LBo),e(Hb,DG),e(DG,xBo),e(Hb,$Bo),e(eo,kBo),e(eo,Ub),e(Ub,SBo),e(Ub,rme),e(rme,RBo),e(Ub,BBo),e(Ub,tme),e(tme,PBo),e(eo,IBo),M(Jb,eo,null),b(f,LIe,_),b(f,Oi,_),e(Oi,Yb),e(Yb,ame),M(ly,ame,null),e(Oi,qBo),e(Oi,nme),e(nme,NBo),b(f,xIe,_),b(f,Po,_),M(iy,Po,null),e(Po,jBo),e(Po,Vi),e(Vi,DBo),e(Vi,GG),e(GG,GBo),e(Vi,OBo),e(Vi,OG),e(OG,VBo),e(Vi,XBo),e(Po,zBo),e(Po,dy),e(dy,QBo),e(dy,sme),e(sme,WBo),e(dy,HBo),e(Po,UBo),e(Po,it),M(cy,it,null),e(it,JBo),e(it,lme),e(lme,YBo),e(it,KBo),e(it,Xi),e(Xi,ZBo),e(Xi,ime),e(ime,ePo),e(Xi,oPo),e(Xi,VG),e(VG,rPo),e(Xi,tPo),e(it,aPo),M(Kb,it,null),e(Po,nPo),e(Po,oo),M(fy,oo,null),e(oo,sPo),e(oo,dme),e(dme,lPo),e(oo,iPo),e(oo,Ra),e(Ra,dPo),e(Ra,cme),e(cme,cPo),e(Ra,fPo),e(Ra,fme),e(fme,mPo),e(Ra,gPo),e(Ra,mme),e(mme,hPo),e(Ra,pPo),e(oo,uPo),e(oo,Yr),e(Yr,Zb),e(Zb,gme),e(gme,_Po),e(Zb,bPo),e(Zb,XG),e(XG,vPo),e(Zb,FPo),e(Yr,TPo),e(Yr,e5),e(e5,hme),e(hme,MPo),e(e5,EPo),e(e5,zG),e(zG,CPo),e(e5,wPo),e(Yr,APo),e(Yr,o5),e(o5,pme),e(pme,yPo),e(o5,LPo),e(o5,QG),e(QG,xPo),e(o5,$Po),e(Yr,kPo),e(Yr,r5),e(r5,ume),e(ume,SPo),e(r5,RPo),e(r5,WG),e(WG,BPo),e(r5,PPo),e(Yr,IPo),e(Yr,t5),e(t5,_me),e(_me,qPo),e(t5,NPo),e(t5,HG),e(HG,jPo),e(t5,DPo),e(oo,GPo),e(oo,a5),e(a5,OPo),e(a5,bme),e(bme,VPo),e(a5,XPo),e(a5,vme),e(vme,zPo),e(oo,QPo),M(n5,oo,null),b(f,$Ie,_),b(f,zi,_),e(zi,s5),e(s5,Fme),M(my,Fme,null),e(zi,WPo),e(zi,Tme),e(Tme,HPo),b(f,kIe,_),b(f,Io,_),M(gy,Io,null),e(Io,UPo),e(Io,Qi),e(Qi,JPo),e(Qi,UG),e(UG,YPo),e(Qi,KPo),e(Qi,JG),e(JG,ZPo),e(Qi,eIo),e(Io,oIo),e(Io,hy),e(hy,rIo),e(hy,Mme),e(Mme,tIo),e(hy,aIo),e(Io,nIo),e(Io,dt),M(py,dt,null),e(dt,sIo),e(dt,Eme),e(Eme,lIo),e(dt,iIo),e(dt,Wi),e(Wi,dIo),e(Wi,Cme),e(Cme,cIo),e(Wi,fIo),e(Wi,YG),e(YG,mIo),e(Wi,gIo),e(dt,hIo),M(l5,dt,null),e(Io,pIo),e(Io,ro),M(uy,ro,null),e(ro,uIo),e(ro,wme),e(wme,_Io),e(ro,bIo),e(ro,Ba),e(Ba,vIo),e(Ba,Ame),e(Ame,FIo),e(Ba,TIo),e(Ba,yme),e(yme,MIo),e(Ba,EIo),e(Ba,Lme),e(Lme,CIo),e(Ba,wIo),e(ro,AIo),e(ro,U),e(U,i5),e(i5,xme),e(xme,yIo),e(i5,LIo),e(i5,KG),e(KG,xIo),e(i5,$Io),e(U,kIo),e(U,d5),e(d5,$me),e($me,SIo),e(d5,RIo),e(d5,ZG),e(ZG,BIo),e(d5,PIo),e(U,IIo),e(U,c5),e(c5,kme),e(kme,qIo),e(c5,NIo),e(c5,eO),e(eO,jIo),e(c5,DIo),e(U,GIo),e(U,f5),e(f5,Sme),e(Sme,OIo),e(f5,VIo),e(f5,oO),e(oO,XIo),e(f5,zIo),e(U,QIo),e(U,m5),e(m5,Rme),e(Rme,WIo),e(m5,HIo),e(m5,rO),e(rO,UIo),e(m5,JIo),e(U,YIo),e(U,g5),e(g5,Bme),e(Bme,KIo),e(g5,ZIo),e(g5,tO),e(tO,eqo),e(g5,oqo),e(U,rqo),e(U,h5),e(h5,Pme),e(Pme,tqo),e(h5,aqo),e(h5,aO),e(aO,nqo),e(h5,sqo),e(U,lqo),e(U,p5),e(p5,Ime),e(Ime,iqo),e(p5,dqo),e(p5,nO),e(nO,cqo),e(p5,fqo),e(U,mqo),e(U,u5),e(u5,qme),e(qme,gqo),e(u5,hqo),e(u5,sO),e(sO,pqo),e(u5,uqo),e(U,_qo),e(U,_5),e(_5,Nme),e(Nme,bqo),e(_5,vqo),e(_5,lO),e(lO,Fqo),e(_5,Tqo),e(U,Mqo),e(U,b5),e(b5,jme),e(jme,Eqo),e(b5,Cqo),e(b5,iO),e(iO,wqo),e(b5,Aqo),e(U,yqo),e(U,v5),e(v5,Dme),e(Dme,Lqo),e(v5,xqo),e(v5,dO),e(dO,$qo),e(v5,kqo),e(U,Sqo),e(U,F5),e(F5,Gme),e(Gme,Rqo),e(F5,Bqo),e(F5,cO),e(cO,Pqo),e(F5,Iqo),e(U,qqo),e(U,T5),e(T5,Ome),e(Ome,Nqo),e(T5,jqo),e(T5,fO),e(fO,Dqo),e(T5,Gqo),e(U,Oqo),e(U,M5),e(M5,Vme),e(Vme,Vqo),e(M5,Xqo),e(M5,mO),e(mO,zqo),e(M5,Qqo),e(U,Wqo),e(U,E5),e(E5,Xme),e(Xme,Hqo),e(E5,Uqo),e(E5,gO),e(gO,Jqo),e(E5,Yqo),e(U,Kqo),e(U,C5),e(C5,zme),e(zme,Zqo),e(C5,eNo),e(C5,hO),e(hO,oNo),e(C5,rNo),e(U,tNo),e(U,w5),e(w5,Qme),e(Qme,aNo),e(w5,nNo),e(w5,pO),e(pO,sNo),e(w5,lNo),e(U,iNo),e(U,A5),e(A5,Wme),e(Wme,dNo),e(A5,cNo),e(A5,uO),e(uO,fNo),e(A5,mNo),e(U,gNo),e(U,y5),e(y5,Hme),e(Hme,hNo),e(y5,pNo),e(y5,_O),e(_O,uNo),e(y5,_No),e(U,bNo),e(U,L5),e(L5,Ume),e(Ume,vNo),e(L5,FNo),e(L5,bO),e(bO,TNo),e(L5,MNo),e(U,ENo),e(U,x5),e(x5,Jme),e(Jme,CNo),e(x5,wNo),e(x5,vO),e(vO,ANo),e(x5,yNo),e(U,LNo),e(U,$5),e($5,Yme),e(Yme,xNo),e($5,$No),e($5,FO),e(FO,kNo),e($5,SNo),e(U,RNo),e(U,k5),e(k5,Kme),e(Kme,BNo),e(k5,PNo),e(k5,TO),e(TO,INo),e(k5,qNo),e(U,NNo),e(U,S5),e(S5,Zme),e(Zme,jNo),e(S5,DNo),e(S5,MO),e(MO,GNo),e(S5,ONo),e(U,VNo),e(U,R5),e(R5,ege),e(ege,XNo),e(R5,zNo),e(R5,EO),e(EO,QNo),e(R5,WNo),e(U,HNo),e(U,B5),e(B5,oge),e(oge,UNo),e(B5,JNo),e(B5,CO),e(CO,YNo),e(B5,KNo),e(U,ZNo),e(U,P5),e(P5,rge),e(rge,ejo),e(P5,ojo),e(P5,wO),e(wO,rjo),e(P5,tjo),e(U,ajo),e(U,I5),e(I5,tge),e(tge,njo),e(I5,sjo),e(I5,AO),e(AO,ljo),e(I5,ijo),e(U,djo),e(U,q5),e(q5,age),e(age,cjo),e(q5,fjo),e(q5,yO),e(yO,mjo),e(q5,gjo),e(U,hjo),e(U,N5),e(N5,nge),e(nge,pjo),e(N5,ujo),e(N5,LO),e(LO,_jo),e(N5,bjo),e(U,vjo),e(U,j5),e(j5,sge),e(sge,Fjo),e(j5,Tjo),e(j5,xO),e(xO,Mjo),e(j5,Ejo),e(U,Cjo),e(U,D5),e(D5,lge),e(lge,wjo),e(D5,Ajo),e(D5,$O),e($O,yjo),e(D5,Ljo),e(ro,xjo),e(ro,G5),e(G5,$jo),e(G5,ige),e(ige,kjo),e(G5,Sjo),e(G5,dge),e(dge,Rjo),e(ro,Bjo),M(O5,ro,null),b(f,SIe,_),b(f,Hi,_),e(Hi,V5),e(V5,cge),M(_y,cge,null),e(Hi,Pjo),e(Hi,fge),e(fge,Ijo),b(f,RIe,_),b(f,qo,_),M(by,qo,null),e(qo,qjo),e(qo,Ui),e(Ui,Njo),e(Ui,kO),e(kO,jjo),e(Ui,Djo),e(Ui,SO),e(SO,Gjo),e(Ui,Ojo),e(qo,Vjo),e(qo,vy),e(vy,Xjo),e(vy,mge),e(mge,zjo),e(vy,Qjo),e(qo,Wjo),e(qo,ct),M(Fy,ct,null),e(ct,Hjo),e(ct,gge),e(gge,Ujo),e(ct,Jjo),e(ct,Ji),e(Ji,Yjo),e(Ji,hge),e(hge,Kjo),e(Ji,Zjo),e(Ji,RO),e(RO,eDo),e(Ji,oDo),e(ct,rDo),M(X5,ct,null),e(qo,tDo),e(qo,to),M(Ty,to,null),e(to,aDo),e(to,pge),e(pge,nDo),e(to,sDo),e(to,Pa),e(Pa,lDo),e(Pa,uge),e(uge,iDo),e(Pa,dDo),e(Pa,_ge),e(_ge,cDo),e(Pa,fDo),e(Pa,bge),e(bge,mDo),e(Pa,gDo),e(to,hDo),e(to,O),e(O,z5),e(z5,vge),e(vge,pDo),e(z5,uDo),e(z5,BO),e(BO,_Do),e(z5,bDo),e(O,vDo),e(O,Q5),e(Q5,Fge),e(Fge,FDo),e(Q5,TDo),e(Q5,PO),e(PO,MDo),e(Q5,EDo),e(O,CDo),e(O,W5),e(W5,Tge),e(Tge,wDo),e(W5,ADo),e(W5,IO),e(IO,yDo),e(W5,LDo),e(O,xDo),e(O,H5),e(H5,Mge),e(Mge,$Do),e(H5,kDo),e(H5,qO),e(qO,SDo),e(H5,RDo),e(O,BDo),e(O,U5),e(U5,Ege),e(Ege,PDo),e(U5,IDo),e(U5,NO),e(NO,qDo),e(U5,NDo),e(O,jDo),e(O,J5),e(J5,Cge),e(Cge,DDo),e(J5,GDo),e(J5,jO),e(jO,ODo),e(J5,VDo),e(O,XDo),e(O,Y5),e(Y5,wge),e(wge,zDo),e(Y5,QDo),e(Y5,DO),e(DO,WDo),e(Y5,HDo),e(O,UDo),e(O,K5),e(K5,Age),e(Age,JDo),e(K5,YDo),e(K5,GO),e(GO,KDo),e(K5,ZDo),e(O,eGo),e(O,Z5),e(Z5,yge),e(yge,oGo),e(Z5,rGo),e(Z5,OO),e(OO,tGo),e(Z5,aGo),e(O,nGo),e(O,e3),e(e3,Lge),e(Lge,sGo),e(e3,lGo),e(e3,VO),e(VO,iGo),e(e3,dGo),e(O,cGo),e(O,o3),e(o3,xge),e(xge,fGo),e(o3,mGo),e(o3,XO),e(XO,gGo),e(o3,hGo),e(O,pGo),e(O,r3),e(r3,$ge),e($ge,uGo),e(r3,_Go),e(r3,zO),e(zO,bGo),e(r3,vGo),e(O,FGo),e(O,t3),e(t3,kge),e(kge,TGo),e(t3,MGo),e(t3,QO),e(QO,EGo),e(t3,CGo),e(O,wGo),e(O,a3),e(a3,Sge),e(Sge,AGo),e(a3,yGo),e(a3,WO),e(WO,LGo),e(a3,xGo),e(O,$Go),e(O,n3),e(n3,Rge),e(Rge,kGo),e(n3,SGo),e(n3,HO),e(HO,RGo),e(n3,BGo),e(O,PGo),e(O,s3),e(s3,Bge),e(Bge,IGo),e(s3,qGo),e(s3,UO),e(UO,NGo),e(s3,jGo),e(O,DGo),e(O,l3),e(l3,Pge),e(Pge,GGo),e(l3,OGo),e(l3,JO),e(JO,VGo),e(l3,XGo),e(O,zGo),e(O,i3),e(i3,Ige),e(Ige,QGo),e(i3,WGo),e(i3,YO),e(YO,HGo),e(i3,UGo),e(O,JGo),e(O,d3),e(d3,qge),e(qge,YGo),e(d3,KGo),e(d3,KO),e(KO,ZGo),e(d3,eOo),e(O,oOo),e(O,c3),e(c3,Nge),e(Nge,rOo),e(c3,tOo),e(c3,ZO),e(ZO,aOo),e(c3,nOo),e(O,sOo),e(O,f3),e(f3,jge),e(jge,lOo),e(f3,iOo),e(f3,eV),e(eV,dOo),e(f3,cOo),e(O,fOo),e(O,m3),e(m3,Dge),e(Dge,mOo),e(m3,gOo),e(m3,oV),e(oV,hOo),e(m3,pOo),e(O,uOo),e(O,g3),e(g3,Gge),e(Gge,_Oo),e(g3,bOo),e(g3,rV),e(rV,vOo),e(g3,FOo),e(O,TOo),e(O,h3),e(h3,Oge),e(Oge,MOo),e(h3,EOo),e(h3,tV),e(tV,COo),e(h3,wOo),e(O,AOo),e(O,p3),e(p3,Vge),e(Vge,yOo),e(p3,LOo),e(p3,aV),e(aV,xOo),e(p3,$Oo),e(O,kOo),e(O,u3),e(u3,Xge),e(Xge,SOo),e(u3,ROo),e(u3,nV),e(nV,BOo),e(u3,POo),e(O,IOo),e(O,_3),e(_3,zge),e(zge,qOo),e(_3,NOo),e(_3,sV),e(sV,jOo),e(_3,DOo),e(O,GOo),e(O,b3),e(b3,Qge),e(Qge,OOo),e(b3,VOo),e(b3,lV),e(lV,XOo),e(b3,zOo),e(O,QOo),e(O,v3),e(v3,Wge),e(Wge,WOo),e(v3,HOo),e(v3,iV),e(iV,UOo),e(v3,JOo),e(O,YOo),e(O,F3),e(F3,Hge),e(Hge,KOo),e(F3,ZOo),e(F3,dV),e(dV,eVo),e(F3,oVo),e(O,rVo),e(O,T3),e(T3,Uge),e(Uge,tVo),e(T3,aVo),e(T3,cV),e(cV,nVo),e(T3,sVo),e(O,lVo),e(O,M3),e(M3,Jge),e(Jge,iVo),e(M3,dVo),e(M3,fV),e(fV,cVo),e(M3,fVo),e(O,mVo),e(O,E3),e(E3,Yge),e(Yge,gVo),e(E3,hVo),e(E3,mV),e(mV,pVo),e(E3,uVo),e(O,_Vo),e(O,C3),e(C3,Kge),e(Kge,bVo),e(C3,vVo),e(C3,gV),e(gV,FVo),e(C3,TVo),e(O,MVo),e(O,w3),e(w3,Zge),e(Zge,EVo),e(w3,CVo),e(w3,hV),e(hV,wVo),e(w3,AVo),e(O,yVo),e(O,A3),e(A3,ehe),e(ehe,LVo),e(A3,xVo),e(A3,pV),e(pV,$Vo),e(A3,kVo),e(O,SVo),e(O,y3),e(y3,ohe),e(ohe,RVo),e(y3,BVo),e(y3,uV),e(uV,PVo),e(y3,IVo),e(O,qVo),e(O,L3),e(L3,rhe),e(rhe,NVo),e(L3,jVo),e(L3,_V),e(_V,DVo),e(L3,GVo),e(O,OVo),e(O,x3),e(x3,the),e(the,VVo),e(x3,XVo),e(x3,bV),e(bV,zVo),e(x3,QVo),e(to,WVo),e(to,$3),e($3,HVo),e($3,ahe),e(ahe,UVo),e($3,JVo),e($3,nhe),e(nhe,YVo),e(to,KVo),M(k3,to,null),b(f,BIe,_),b(f,Yi,_),e(Yi,S3),e(S3,she),M(My,she,null),e(Yi,ZVo),e(Yi,lhe),e(lhe,eXo),b(f,PIe,_),b(f,No,_),M(Ey,No,null),e(No,oXo),e(No,Ki),e(Ki,rXo),e(Ki,vV),e(vV,tXo),e(Ki,aXo),e(Ki,FV),e(FV,nXo),e(Ki,sXo),e(No,lXo),e(No,Cy),e(Cy,iXo),e(Cy,ihe),e(ihe,dXo),e(Cy,cXo),e(No,fXo),e(No,ft),M(wy,ft,null),e(ft,mXo),e(ft,dhe),e(dhe,gXo),e(ft,hXo),e(ft,Zi),e(Zi,pXo),e(Zi,che),e(che,uXo),e(Zi,_Xo),e(Zi,TV),e(TV,bXo),e(Zi,vXo),e(ft,FXo),M(R3,ft,null),e(No,TXo),e(No,ao),M(Ay,ao,null),e(ao,MXo),e(ao,fhe),e(fhe,EXo),e(ao,CXo),e(ao,Ia),e(Ia,wXo),e(Ia,mhe),e(mhe,AXo),e(Ia,yXo),e(Ia,ghe),e(ghe,LXo),e(Ia,xXo),e(Ia,hhe),e(hhe,$Xo),e(Ia,kXo),e(ao,SXo),e(ao,phe),e(phe,B3),e(B3,uhe),e(uhe,RXo),e(B3,BXo),e(B3,MV),e(MV,PXo),e(B3,IXo),e(ao,qXo),e(ao,P3),e(P3,NXo),e(P3,_he),e(_he,jXo),e(P3,DXo),e(P3,bhe),e(bhe,GXo),e(ao,OXo),M(I3,ao,null),b(f,IIe,_),b(f,ed,_),e(ed,q3),e(q3,vhe),M(yy,vhe,null),e(ed,VXo),e(ed,Fhe),e(Fhe,XXo),b(f,qIe,_),b(f,jo,_),M(Ly,jo,null),e(jo,zXo),e(jo,od),e(od,QXo),e(od,EV),e(EV,WXo),e(od,HXo),e(od,CV),e(CV,UXo),e(od,JXo),e(jo,YXo),e(jo,xy),e(xy,KXo),e(xy,The),e(The,ZXo),e(xy,ezo),e(jo,ozo),e(jo,mt),M($y,mt,null),e(mt,rzo),e(mt,Mhe),e(Mhe,tzo),e(mt,azo),e(mt,rd),e(rd,nzo),e(rd,Ehe),e(Ehe,szo),e(rd,lzo),e(rd,wV),e(wV,izo),e(rd,dzo),e(mt,czo),M(N3,mt,null),e(jo,fzo),e(jo,no),M(ky,no,null),e(no,mzo),e(no,Che),e(Che,gzo),e(no,hzo),e(no,qa),e(qa,pzo),e(qa,whe),e(whe,uzo),e(qa,_zo),e(qa,Ahe),e(Ahe,bzo),e(qa,vzo),e(qa,yhe),e(yhe,Fzo),e(qa,Tzo),e(no,Mzo),e(no,ve),e(ve,j3),e(j3,Lhe),e(Lhe,Ezo),e(j3,Czo),e(j3,AV),e(AV,wzo),e(j3,Azo),e(ve,yzo),e(ve,D3),e(D3,xhe),e(xhe,Lzo),e(D3,xzo),e(D3,yV),e(yV,$zo),e(D3,kzo),e(ve,Szo),e(ve,G3),e(G3,$he),e($he,Rzo),e(G3,Bzo),e(G3,LV),e(LV,Pzo),e(G3,Izo),e(ve,qzo),e(ve,O3),e(O3,khe),e(khe,Nzo),e(O3,jzo),e(O3,xV),e(xV,Dzo),e(O3,Gzo),e(ve,Ozo),e(ve,Rs),e(Rs,She),e(She,Vzo),e(Rs,Xzo),e(Rs,$V),e($V,zzo),e(Rs,Qzo),e(Rs,kV),e(kV,Wzo),e(Rs,Hzo),e(ve,Uzo),e(ve,V3),e(V3,Rhe),e(Rhe,Jzo),e(V3,Yzo),e(V3,SV),e(SV,Kzo),e(V3,Zzo),e(ve,eQo),e(ve,gt),e(gt,Bhe),e(Bhe,oQo),e(gt,rQo),e(gt,RV),e(RV,tQo),e(gt,aQo),e(gt,BV),e(BV,nQo),e(gt,sQo),e(gt,PV),e(PV,lQo),e(gt,iQo),e(ve,dQo),e(ve,X3),e(X3,Phe),e(Phe,cQo),e(X3,fQo),e(X3,IV),e(IV,mQo),e(X3,gQo),e(ve,hQo),e(ve,z3),e(z3,Ihe),e(Ihe,pQo),e(z3,uQo),e(z3,qV),e(qV,_Qo),e(z3,bQo),e(ve,vQo),e(ve,Q3),e(Q3,qhe),e(qhe,FQo),e(Q3,TQo),e(Q3,NV),e(NV,MQo),e(Q3,EQo),e(ve,CQo),e(ve,W3),e(W3,Nhe),e(Nhe,wQo),e(W3,AQo),e(W3,jV),e(jV,yQo),e(W3,LQo),e(ve,xQo),e(ve,H3),e(H3,jhe),e(jhe,$Qo),e(H3,kQo),e(H3,DV),e(DV,SQo),e(H3,RQo),e(ve,BQo),e(ve,U3),e(U3,Dhe),e(Dhe,PQo),e(U3,IQo),e(U3,GV),e(GV,qQo),e(U3,NQo),e(ve,jQo),e(ve,J3),e(J3,Ghe),e(Ghe,DQo),e(J3,GQo),e(J3,OV),e(OV,OQo),e(J3,VQo),e(no,XQo),e(no,Y3),e(Y3,zQo),e(Y3,Ohe),e(Ohe,QQo),e(Y3,WQo),e(Y3,Vhe),e(Vhe,HQo),e(no,UQo),M(K3,no,null),b(f,NIe,_),b(f,td,_),e(td,Z3),e(Z3,Xhe),M(Sy,Xhe,null),e(td,JQo),e(td,zhe),e(zhe,YQo),b(f,jIe,_),b(f,Do,_),M(Ry,Do,null),e(Do,KQo),e(Do,ad),e(ad,ZQo),e(ad,VV),e(VV,eWo),e(ad,oWo),e(ad,XV),e(XV,rWo),e(ad,tWo),e(Do,aWo),e(Do,By),e(By,nWo),e(By,Qhe),e(Qhe,sWo),e(By,lWo),e(Do,iWo),e(Do,ht),M(Py,ht,null),e(ht,dWo),e(ht,Whe),e(Whe,cWo),e(ht,fWo),e(ht,nd),e(nd,mWo),e(nd,Hhe),e(Hhe,gWo),e(nd,hWo),e(nd,zV),e(zV,pWo),e(nd,uWo),e(ht,_Wo),M(ev,ht,null),e(Do,bWo),e(Do,so),M(Iy,so,null),e(so,vWo),e(so,Uhe),e(Uhe,FWo),e(so,TWo),e(so,Na),e(Na,MWo),e(Na,Jhe),e(Jhe,EWo),e(Na,CWo),e(Na,Yhe),e(Yhe,wWo),e(Na,AWo),e(Na,Khe),e(Khe,yWo),e(Na,LWo),e(so,xWo),e(so,Zhe),e(Zhe,ov),e(ov,epe),e(epe,$Wo),e(ov,kWo),e(ov,QV),e(QV,SWo),e(ov,RWo),e(so,BWo),e(so,rv),e(rv,PWo),e(rv,ope),e(ope,IWo),e(rv,qWo),e(rv,rpe),e(rpe,NWo),e(so,jWo),M(tv,so,null),b(f,DIe,_),b(f,sd,_),e(sd,av),e(av,tpe),M(qy,tpe,null),e(sd,DWo),e(sd,ape),e(ape,GWo),b(f,GIe,_),b(f,Go,_),M(Ny,Go,null),e(Go,OWo),e(Go,ld),e(ld,VWo),e(ld,WV),e(WV,XWo),e(ld,zWo),e(ld,HV),e(HV,QWo),e(ld,WWo),e(Go,HWo),e(Go,jy),e(jy,UWo),e(jy,npe),e(npe,JWo),e(jy,YWo),e(Go,KWo),e(Go,pt),M(Dy,pt,null),e(pt,ZWo),e(pt,spe),e(spe,eHo),e(pt,oHo),e(pt,id),e(id,rHo),e(id,lpe),e(lpe,tHo),e(id,aHo),e(id,UV),e(UV,nHo),e(id,sHo),e(pt,lHo),M(nv,pt,null),e(Go,iHo),e(Go,lo),M(Gy,lo,null),e(lo,dHo),e(lo,ipe),e(ipe,cHo),e(lo,fHo),e(lo,ja),e(ja,mHo),e(ja,dpe),e(dpe,gHo),e(ja,hHo),e(ja,cpe),e(cpe,pHo),e(ja,uHo),e(ja,fpe),e(fpe,_Ho),e(ja,bHo),e(lo,vHo),e(lo,Ne),e(Ne,sv),e(sv,mpe),e(mpe,FHo),e(sv,THo),e(sv,JV),e(JV,MHo),e(sv,EHo),e(Ne,CHo),e(Ne,lv),e(lv,gpe),e(gpe,wHo),e(lv,AHo),e(lv,YV),e(YV,yHo),e(lv,LHo),e(Ne,xHo),e(Ne,iv),e(iv,hpe),e(hpe,$Ho),e(iv,kHo),e(iv,KV),e(KV,SHo),e(iv,RHo),e(Ne,BHo),e(Ne,dv),e(dv,ppe),e(ppe,PHo),e(dv,IHo),e(dv,ZV),e(ZV,qHo),e(dv,NHo),e(Ne,jHo),e(Ne,cv),e(cv,upe),e(upe,DHo),e(cv,GHo),e(cv,eX),e(eX,OHo),e(cv,VHo),e(Ne,XHo),e(Ne,fv),e(fv,_pe),e(_pe,zHo),e(fv,QHo),e(fv,oX),e(oX,WHo),e(fv,HHo),e(Ne,UHo),e(Ne,mv),e(mv,bpe),e(bpe,JHo),e(mv,YHo),e(mv,rX),e(rX,KHo),e(mv,ZHo),e(Ne,eUo),e(Ne,gv),e(gv,vpe),e(vpe,oUo),e(gv,rUo),e(gv,tX),e(tX,tUo),e(gv,aUo),e(lo,nUo),e(lo,hv),e(hv,sUo),e(hv,Fpe),e(Fpe,lUo),e(hv,iUo),e(hv,Tpe),e(Tpe,dUo),e(lo,cUo),M(pv,lo,null),b(f,OIe,_),b(f,dd,_),e(dd,uv),e(uv,Mpe),M(Oy,Mpe,null),e(dd,fUo),e(dd,Epe),e(Epe,mUo),b(f,VIe,_),b(f,Oo,_),M(Vy,Oo,null),e(Oo,gUo),e(Oo,cd),e(cd,hUo),e(cd,aX),e(aX,pUo),e(cd,uUo),e(cd,nX),e(nX,_Uo),e(cd,bUo),e(Oo,vUo),e(Oo,Xy),e(Xy,FUo),e(Xy,Cpe),e(Cpe,TUo),e(Xy,MUo),e(Oo,EUo),e(Oo,ut),M(zy,ut,null),e(ut,CUo),e(ut,wpe),e(wpe,wUo),e(ut,AUo),e(ut,fd),e(fd,yUo),e(fd,Ape),e(Ape,LUo),e(fd,xUo),e(fd,sX),e(sX,$Uo),e(fd,kUo),e(ut,SUo),M(_v,ut,null),e(Oo,RUo),e(Oo,io),M(Qy,io,null),e(io,BUo),e(io,ype),e(ype,PUo),e(io,IUo),e(io,Da),e(Da,qUo),e(Da,Lpe),e(Lpe,NUo),e(Da,jUo),e(Da,xpe),e(xpe,DUo),e(Da,GUo),e(Da,$pe),e($pe,OUo),e(Da,VUo),e(io,XUo),e(io,Ga),e(Ga,bv),e(bv,kpe),e(kpe,zUo),e(bv,QUo),e(bv,lX),e(lX,WUo),e(bv,HUo),e(Ga,UUo),e(Ga,vv),e(vv,Spe),e(Spe,JUo),e(vv,YUo),e(vv,iX),e(iX,KUo),e(vv,ZUo),e(Ga,eJo),e(Ga,Fv),e(Fv,Rpe),e(Rpe,oJo),e(Fv,rJo),e(Fv,dX),e(dX,tJo),e(Fv,aJo),e(Ga,nJo),e(Ga,Tv),e(Tv,Bpe),e(Bpe,sJo),e(Tv,lJo),e(Tv,cX),e(cX,iJo),e(Tv,dJo),e(io,cJo),e(io,Mv),e(Mv,fJo),e(Mv,Ppe),e(Ppe,mJo),e(Mv,gJo),e(Mv,Ipe),e(Ipe,hJo),e(io,pJo),M(Ev,io,null),b(f,XIe,_),b(f,md,_),e(md,Cv),e(Cv,qpe),M(Wy,qpe,null),e(md,uJo),e(md,Npe),e(Npe,_Jo),b(f,zIe,_),b(f,Vo,_),M(Hy,Vo,null),e(Vo,bJo),e(Vo,gd),e(gd,vJo),e(gd,fX),e(fX,FJo),e(gd,TJo),e(gd,mX),e(mX,MJo),e(gd,EJo),e(Vo,CJo),e(Vo,Uy),e(Uy,wJo),e(Uy,jpe),e(jpe,AJo),e(Uy,yJo),e(Vo,LJo),e(Vo,_t),M(Jy,_t,null),e(_t,xJo),e(_t,Dpe),e(Dpe,$Jo),e(_t,kJo),e(_t,hd),e(hd,SJo),e(hd,Gpe),e(Gpe,RJo),e(hd,BJo),e(hd,gX),e(gX,PJo),e(hd,IJo),e(_t,qJo),M(wv,_t,null),e(Vo,NJo),e(Vo,co),M(Yy,co,null),e(co,jJo),e(co,Ope),e(Ope,DJo),e(co,GJo),e(co,Oa),e(Oa,OJo),e(Oa,Vpe),e(Vpe,VJo),e(Oa,XJo),e(Oa,Xpe),e(Xpe,zJo),e(Oa,QJo),e(Oa,zpe),e(zpe,WJo),e(Oa,HJo),e(co,UJo),e(co,je),e(je,Av),e(Av,Qpe),e(Qpe,JJo),e(Av,YJo),e(Av,hX),e(hX,KJo),e(Av,ZJo),e(je,eYo),e(je,yv),e(yv,Wpe),e(Wpe,oYo),e(yv,rYo),e(yv,pX),e(pX,tYo),e(yv,aYo),e(je,nYo),e(je,Lv),e(Lv,Hpe),e(Hpe,sYo),e(Lv,lYo),e(Lv,uX),e(uX,iYo),e(Lv,dYo),e(je,cYo),e(je,xv),e(xv,Upe),e(Upe,fYo),e(xv,mYo),e(xv,_X),e(_X,gYo),e(xv,hYo),e(je,pYo),e(je,$v),e($v,Jpe),e(Jpe,uYo),e($v,_Yo),e($v,bX),e(bX,bYo),e($v,vYo),e(je,FYo),e(je,kv),e(kv,Ype),e(Ype,TYo),e(kv,MYo),e(kv,vX),e(vX,EYo),e(kv,CYo),e(je,wYo),e(je,Sv),e(Sv,Kpe),e(Kpe,AYo),e(Sv,yYo),e(Sv,FX),e(FX,LYo),e(Sv,xYo),e(je,$Yo),e(je,Rv),e(Rv,Zpe),e(Zpe,kYo),e(Rv,SYo),e(Rv,TX),e(TX,RYo),e(Rv,BYo),e(co,PYo),e(co,Bv),e(Bv,IYo),e(Bv,eue),e(eue,qYo),e(Bv,NYo),e(Bv,oue),e(oue,jYo),e(co,DYo),M(Pv,co,null),b(f,QIe,_),b(f,pd,_),e(pd,Iv),e(Iv,rue),M(Ky,rue,null),e(pd,GYo),e(pd,tue),e(tue,OYo),b(f,WIe,_),b(f,Xo,_),M(Zy,Xo,null),e(Xo,VYo),e(Xo,ud),e(ud,XYo),e(ud,MX),e(MX,zYo),e(ud,QYo),e(ud,EX),e(EX,WYo),e(ud,HYo),e(Xo,UYo),e(Xo,eL),e(eL,JYo),e(eL,aue),e(aue,YYo),e(eL,KYo),e(Xo,ZYo),e(Xo,bt),M(oL,bt,null),e(bt,eKo),e(bt,nue),e(nue,oKo),e(bt,rKo),e(bt,_d),e(_d,tKo),e(_d,sue),e(sue,aKo),e(_d,nKo),e(_d,CX),e(CX,sKo),e(_d,lKo),e(bt,iKo),M(qv,bt,null),e(Xo,dKo),e(Xo,fo),M(rL,fo,null),e(fo,cKo),e(fo,lue),e(lue,fKo),e(fo,mKo),e(fo,Va),e(Va,gKo),e(Va,iue),e(iue,hKo),e(Va,pKo),e(Va,due),e(due,uKo),e(Va,_Ko),e(Va,cue),e(cue,bKo),e(Va,vKo),e(fo,FKo),e(fo,tL),e(tL,Nv),e(Nv,fue),e(fue,TKo),e(Nv,MKo),e(Nv,wX),e(wX,EKo),e(Nv,CKo),e(tL,wKo),e(tL,jv),e(jv,mue),e(mue,AKo),e(jv,yKo),e(jv,AX),e(AX,LKo),e(jv,xKo),e(fo,$Ko),e(fo,Dv),e(Dv,kKo),e(Dv,gue),e(gue,SKo),e(Dv,RKo),e(Dv,hue),e(hue,BKo),e(fo,PKo),M(Gv,fo,null),b(f,HIe,_),b(f,bd,_),e(bd,Ov),e(Ov,pue),M(aL,pue,null),e(bd,IKo),e(bd,uue),e(uue,qKo),b(f,UIe,_),b(f,zo,_),M(nL,zo,null),e(zo,NKo),e(zo,vd),e(vd,jKo),e(vd,yX),e(yX,DKo),e(vd,GKo),e(vd,LX),e(LX,OKo),e(vd,VKo),e(zo,XKo),e(zo,sL),e(sL,zKo),e(sL,_ue),e(_ue,QKo),e(sL,WKo),e(zo,HKo),e(zo,vt),M(lL,vt,null),e(vt,UKo),e(vt,bue),e(bue,JKo),e(vt,YKo),e(vt,Fd),e(Fd,KKo),e(Fd,vue),e(vue,ZKo),e(Fd,eZo),e(Fd,xX),e(xX,oZo),e(Fd,rZo),e(vt,tZo),M(Vv,vt,null),e(zo,aZo),e(zo,mo),M(iL,mo,null),e(mo,nZo),e(mo,Fue),e(Fue,sZo),e(mo,lZo),e(mo,Xa),e(Xa,iZo),e(Xa,Tue),e(Tue,dZo),e(Xa,cZo),e(Xa,Mue),e(Mue,fZo),e(Xa,mZo),e(Xa,Eue),e(Eue,gZo),e(Xa,hZo),e(mo,pZo),e(mo,za),e(za,Xv),e(Xv,Cue),e(Cue,uZo),e(Xv,_Zo),e(Xv,$X),e($X,bZo),e(Xv,vZo),e(za,FZo),e(za,zv),e(zv,wue),e(wue,TZo),e(zv,MZo),e(zv,kX),e(kX,EZo),e(zv,CZo),e(za,wZo),e(za,Qv),e(Qv,Aue),e(Aue,AZo),e(Qv,yZo),e(Qv,SX),e(SX,LZo),e(Qv,xZo),e(za,$Zo),e(za,Wv),e(Wv,yue),e(yue,kZo),e(Wv,SZo),e(Wv,RX),e(RX,RZo),e(Wv,BZo),e(mo,PZo),e(mo,Hv),e(Hv,IZo),e(Hv,Lue),e(Lue,qZo),e(Hv,NZo),e(Hv,xue),e(xue,jZo),e(mo,DZo),M(Uv,mo,null),b(f,JIe,_),b(f,Td,_),e(Td,Jv),e(Jv,$ue),M(dL,$ue,null),e(Td,GZo),e(Td,kue),e(kue,OZo),b(f,YIe,_),b(f,Qo,_),M(cL,Qo,null),e(Qo,VZo),e(Qo,Md),e(Md,XZo),e(Md,BX),e(BX,zZo),e(Md,QZo),e(Md,PX),e(PX,WZo),e(Md,HZo),e(Qo,UZo),e(Qo,fL),e(fL,JZo),e(fL,Sue),e(Sue,YZo),e(fL,KZo),e(Qo,ZZo),e(Qo,Ft),M(mL,Ft,null),e(Ft,eer),e(Ft,Rue),e(Rue,oer),e(Ft,rer),e(Ft,Ed),e(Ed,ter),e(Ed,Bue),e(Bue,aer),e(Ed,ner),e(Ed,IX),e(IX,ser),e(Ed,ler),e(Ft,ier),M(Yv,Ft,null),e(Qo,der),e(Qo,go),M(gL,go,null),e(go,cer),e(go,Pue),e(Pue,fer),e(go,mer),e(go,Qa),e(Qa,ger),e(Qa,Iue),e(Iue,her),e(Qa,per),e(Qa,que),e(que,uer),e(Qa,_er),e(Qa,Nue),e(Nue,ber),e(Qa,ver),e(go,Fer),e(go,Cd),e(Cd,Kv),e(Kv,jue),e(jue,Ter),e(Kv,Mer),e(Kv,qX),e(qX,Eer),e(Kv,Cer),e(Cd,wer),e(Cd,Zv),e(Zv,Due),e(Due,Aer),e(Zv,yer),e(Zv,NX),e(NX,Ler),e(Zv,xer),e(Cd,$er),e(Cd,eF),e(eF,Gue),e(Gue,ker),e(eF,Ser),e(eF,jX),e(jX,Rer),e(eF,Ber),e(go,Per),e(go,oF),e(oF,Ier),e(oF,Oue),e(Oue,qer),e(oF,Ner),e(oF,Vue),e(Vue,jer),e(go,Der),M(rF,go,null),b(f,KIe,_),b(f,wd,_),e(wd,tF),e(tF,Xue),M(hL,Xue,null),e(wd,Ger),e(wd,zue),e(zue,Oer),b(f,ZIe,_),b(f,Wo,_),M(pL,Wo,null),e(Wo,Ver),e(Wo,Ad),e(Ad,Xer),e(Ad,DX),e(DX,zer),e(Ad,Qer),e(Ad,GX),e(GX,Wer),e(Ad,Her),e(Wo,Uer),e(Wo,uL),e(uL,Jer),e(uL,Que),e(Que,Yer),e(uL,Ker),e(Wo,Zer),e(Wo,Tt),M(_L,Tt,null),e(Tt,eor),e(Tt,Wue),e(Wue,oor),e(Tt,ror),e(Tt,yd),e(yd,tor),e(yd,Hue),e(Hue,aor),e(yd,nor),e(yd,OX),e(OX,sor),e(yd,lor),e(Tt,ior),M(aF,Tt,null),e(Wo,dor),e(Wo,ho),M(bL,ho,null),e(ho,cor),e(ho,Uue),e(Uue,mor),e(ho,gor),e(ho,Wa),e(Wa,hor),e(Wa,Jue),e(Jue,por),e(Wa,uor),e(Wa,Yue),e(Yue,_or),e(Wa,bor),e(Wa,Kue),e(Kue,vor),e(Wa,For),e(ho,Tor),e(ho,vL),e(vL,nF),e(nF,Zue),e(Zue,Mor),e(nF,Eor),e(nF,VX),e(VX,Cor),e(nF,wor),e(vL,Aor),e(vL,sF),e(sF,e_e),e(e_e,yor),e(sF,Lor),e(sF,XX),e(XX,xor),e(sF,$or),e(ho,kor),e(ho,lF),e(lF,Sor),e(lF,o_e),e(o_e,Ror),e(lF,Bor),e(lF,r_e),e(r_e,Por),e(ho,Ior),M(iF,ho,null),b(f,eqe,_),b(f,Ld,_),e(Ld,dF),e(dF,t_e),M(FL,t_e,null),e(Ld,qor),e(Ld,a_e),e(a_e,Nor),b(f,oqe,_),b(f,Ho,_),M(TL,Ho,null),e(Ho,jor),e(Ho,xd),e(xd,Dor),e(xd,zX),e(zX,Gor),e(xd,Oor),e(xd,QX),e(QX,Vor),e(xd,Xor),e(Ho,zor),e(Ho,ML),e(ML,Qor),e(ML,n_e),e(n_e,Wor),e(ML,Hor),e(Ho,Uor),e(Ho,Mt),M(EL,Mt,null),e(Mt,Jor),e(Mt,s_e),e(s_e,Yor),e(Mt,Kor),e(Mt,$d),e($d,Zor),e($d,l_e),e(l_e,err),e($d,orr),e($d,WX),e(WX,rrr),e($d,trr),e(Mt,arr),M(cF,Mt,null),e(Ho,nrr),e(Ho,po),M(CL,po,null),e(po,srr),e(po,i_e),e(i_e,lrr),e(po,irr),e(po,Ha),e(Ha,drr),e(Ha,d_e),e(d_e,crr),e(Ha,frr),e(Ha,c_e),e(c_e,mrr),e(Ha,grr),e(Ha,f_e),e(f_e,hrr),e(Ha,prr),e(po,urr),e(po,m_e),e(m_e,fF),e(fF,g_e),e(g_e,_rr),e(fF,brr),e(fF,HX),e(HX,vrr),e(fF,Frr),e(po,Trr),e(po,mF),e(mF,Mrr),e(mF,h_e),e(h_e,Err),e(mF,Crr),e(mF,p_e),e(p_e,wrr),e(po,Arr),M(gF,po,null),b(f,rqe,_),b(f,kd,_),e(kd,hF),e(hF,u_e),M(wL,u_e,null),e(kd,yrr),e(kd,__e),e(__e,Lrr),b(f,tqe,_),b(f,Uo,_),M(AL,Uo,null),e(Uo,xrr),e(Uo,Sd),e(Sd,$rr),e(Sd,UX),e(UX,krr),e(Sd,Srr),e(Sd,JX),e(JX,Rrr),e(Sd,Brr),e(Uo,Prr),e(Uo,yL),e(yL,Irr),e(yL,b_e),e(b_e,qrr),e(yL,Nrr),e(Uo,jrr),e(Uo,Et),M(LL,Et,null),e(Et,Drr),e(Et,v_e),e(v_e,Grr),e(Et,Orr),e(Et,Rd),e(Rd,Vrr),e(Rd,F_e),e(F_e,Xrr),e(Rd,zrr),e(Rd,YX),e(YX,Qrr),e(Rd,Wrr),e(Et,Hrr),M(pF,Et,null),e(Uo,Urr),e(Uo,uo),M(xL,uo,null),e(uo,Jrr),e(uo,T_e),e(T_e,Yrr),e(uo,Krr),e(uo,Ua),e(Ua,Zrr),e(Ua,M_e),e(M_e,etr),e(Ua,otr),e(Ua,E_e),e(E_e,rtr),e(Ua,ttr),e(Ua,C_e),e(C_e,atr),e(Ua,ntr),e(uo,str),e(uo,Ja),e(Ja,uF),e(uF,w_e),e(w_e,ltr),e(uF,itr),e(uF,KX),e(KX,dtr),e(uF,ctr),e(Ja,ftr),e(Ja,_F),e(_F,A_e),e(A_e,mtr),e(_F,gtr),e(_F,ZX),e(ZX,htr),e(_F,ptr),e(Ja,utr),e(Ja,bF),e(bF,y_e),e(y_e,_tr),e(bF,btr),e(bF,ez),e(ez,vtr),e(bF,Ftr),e(Ja,Ttr),e(Ja,vF),e(vF,L_e),e(L_e,Mtr),e(vF,Etr),e(vF,oz),e(oz,Ctr),e(vF,wtr),e(uo,Atr),e(uo,FF),e(FF,ytr),e(FF,x_e),e(x_e,Ltr),e(FF,xtr),e(FF,$_e),e($_e,$tr),e(uo,ktr),M(TF,uo,null),b(f,aqe,_),b(f,Bd,_),e(Bd,MF),e(MF,k_e),M($L,k_e,null),e(Bd,Str),e(Bd,S_e),e(S_e,Rtr),b(f,nqe,_),b(f,Jo,_),M(kL,Jo,null),e(Jo,Btr),e(Jo,Pd),e(Pd,Ptr),e(Pd,rz),e(rz,Itr),e(Pd,qtr),e(Pd,tz),e(tz,Ntr),e(Pd,jtr),e(Jo,Dtr),e(Jo,SL),e(SL,Gtr),e(SL,R_e),e(R_e,Otr),e(SL,Vtr),e(Jo,Xtr),e(Jo,Ct),M(RL,Ct,null),e(Ct,ztr),e(Ct,B_e),e(B_e,Qtr),e(Ct,Wtr),e(Ct,Id),e(Id,Htr),e(Id,P_e),e(P_e,Utr),e(Id,Jtr),e(Id,az),e(az,Ytr),e(Id,Ktr),e(Ct,Ztr),M(EF,Ct,null),e(Jo,ear),e(Jo,_o),M(BL,_o,null),e(_o,oar),e(_o,I_e),e(I_e,rar),e(_o,tar),e(_o,Ya),e(Ya,aar),e(Ya,q_e),e(q_e,nar),e(Ya,sar),e(Ya,N_e),e(N_e,lar),e(Ya,iar),e(Ya,j_e),e(j_e,dar),e(Ya,car),e(_o,far),e(_o,D_e),e(D_e,CF),e(CF,G_e),e(G_e,mar),e(CF,gar),e(CF,nz),e(nz,har),e(CF,par),e(_o,uar),e(_o,wF),e(wF,_ar),e(wF,O_e),e(O_e,bar),e(wF,Far),e(wF,V_e),e(V_e,Tar),e(_o,Mar),M(AF,_o,null),b(f,sqe,_),b(f,qd,_),e(qd,yF),e(yF,X_e),M(PL,X_e,null),e(qd,Ear),e(qd,z_e),e(z_e,Car),b(f,lqe,_),b(f,Yo,_),M(IL,Yo,null),e(Yo,war),e(Yo,Nd),e(Nd,Aar),e(Nd,sz),e(sz,yar),e(Nd,Lar),e(Nd,lz),e(lz,xar),e(Nd,$ar),e(Yo,kar),e(Yo,qL),e(qL,Sar),e(qL,Q_e),e(Q_e,Rar),e(qL,Bar),e(Yo,Par),e(Yo,wt),M(NL,wt,null),e(wt,Iar),e(wt,W_e),e(W_e,qar),e(wt,Nar),e(wt,jd),e(jd,jar),e(jd,H_e),e(H_e,Dar),e(jd,Gar),e(jd,iz),e(iz,Oar),e(jd,Var),e(wt,Xar),M(LF,wt,null),e(Yo,zar),e(Yo,wr),M(jL,wr,null),e(wr,Qar),e(wr,U_e),e(U_e,War),e(wr,Har),e(wr,Ka),e(Ka,Uar),e(Ka,J_e),e(J_e,Jar),e(Ka,Yar),e(Ka,Y_e),e(Y_e,Kar),e(Ka,Zar),e(Ka,K_e),e(K_e,enr),e(Ka,onr),e(wr,rnr),e(wr,j),e(j,xF),e(xF,Z_e),e(Z_e,tnr),e(xF,anr),e(xF,dz),e(dz,nnr),e(xF,snr),e(j,lnr),e(j,$F),e($F,e2e),e(e2e,inr),e($F,dnr),e($F,cz),e(cz,cnr),e($F,fnr),e(j,mnr),e(j,kF),e(kF,o2e),e(o2e,gnr),e(kF,hnr),e(kF,fz),e(fz,pnr),e(kF,unr),e(j,_nr),e(j,SF),e(SF,r2e),e(r2e,bnr),e(SF,vnr),e(SF,mz),e(mz,Fnr),e(SF,Tnr),e(j,Mnr),e(j,RF),e(RF,t2e),e(t2e,Enr),e(RF,Cnr),e(RF,gz),e(gz,wnr),e(RF,Anr),e(j,ynr),e(j,BF),e(BF,a2e),e(a2e,Lnr),e(BF,xnr),e(BF,hz),e(hz,$nr),e(BF,knr),e(j,Snr),e(j,PF),e(PF,n2e),e(n2e,Rnr),e(PF,Bnr),e(PF,pz),e(pz,Pnr),e(PF,Inr),e(j,qnr),e(j,IF),e(IF,s2e),e(s2e,Nnr),e(IF,jnr),e(IF,uz),e(uz,Dnr),e(IF,Gnr),e(j,Onr),e(j,qF),e(qF,l2e),e(l2e,Vnr),e(qF,Xnr),e(qF,_z),e(_z,znr),e(qF,Qnr),e(j,Wnr),e(j,NF),e(NF,i2e),e(i2e,Hnr),e(NF,Unr),e(NF,bz),e(bz,Jnr),e(NF,Ynr),e(j,Knr),e(j,jF),e(jF,d2e),e(d2e,Znr),e(jF,esr),e(jF,vz),e(vz,osr),e(jF,rsr),e(j,tsr),e(j,DF),e(DF,c2e),e(c2e,asr),e(DF,nsr),e(DF,Fz),e(Fz,ssr),e(DF,lsr),e(j,isr),e(j,GF),e(GF,f2e),e(f2e,dsr),e(GF,csr),e(GF,Tz),e(Tz,fsr),e(GF,msr),e(j,gsr),e(j,OF),e(OF,m2e),e(m2e,hsr),e(OF,psr),e(OF,Mz),e(Mz,usr),e(OF,_sr),e(j,bsr),e(j,VF),e(VF,g2e),e(g2e,vsr),e(VF,Fsr),e(VF,Ez),e(Ez,Tsr),e(VF,Msr),e(j,Esr),e(j,XF),e(XF,h2e),e(h2e,Csr),e(XF,wsr),e(XF,Cz),e(Cz,Asr),e(XF,ysr),e(j,Lsr),e(j,zF),e(zF,p2e),e(p2e,xsr),e(zF,$sr),e(zF,wz),e(wz,ksr),e(zF,Ssr),e(j,Rsr),e(j,Bs),e(Bs,u2e),e(u2e,Bsr),e(Bs,Psr),e(Bs,Az),e(Az,Isr),e(Bs,qsr),e(Bs,yz),e(yz,Nsr),e(Bs,jsr),e(j,Dsr),e(j,QF),e(QF,_2e),e(_2e,Gsr),e(QF,Osr),e(QF,Lz),e(Lz,Vsr),e(QF,Xsr),e(j,zsr),e(j,WF),e(WF,b2e),e(b2e,Qsr),e(WF,Wsr),e(WF,xz),e(xz,Hsr),e(WF,Usr),e(j,Jsr),e(j,HF),e(HF,v2e),e(v2e,Ysr),e(HF,Ksr),e(HF,$z),e($z,Zsr),e(HF,elr),e(j,olr),e(j,UF),e(UF,F2e),e(F2e,rlr),e(UF,tlr),e(UF,kz),e(kz,alr),e(UF,nlr),e(j,slr),e(j,JF),e(JF,T2e),e(T2e,llr),e(JF,ilr),e(JF,Sz),e(Sz,dlr),e(JF,clr),e(j,flr),e(j,YF),e(YF,M2e),e(M2e,mlr),e(YF,glr),e(YF,Rz),e(Rz,hlr),e(YF,plr),e(j,ulr),e(j,KF),e(KF,E2e),e(E2e,_lr),e(KF,blr),e(KF,Bz),e(Bz,vlr),e(KF,Flr),e(j,Tlr),e(j,ZF),e(ZF,C2e),e(C2e,Mlr),e(ZF,Elr),e(ZF,Pz),e(Pz,Clr),e(ZF,wlr),e(j,Alr),e(j,eT),e(eT,w2e),e(w2e,ylr),e(eT,Llr),e(eT,Iz),e(Iz,xlr),e(eT,$lr),e(j,klr),e(j,oT),e(oT,A2e),e(A2e,Slr),e(oT,Rlr),e(oT,qz),e(qz,Blr),e(oT,Plr),e(j,Ilr),e(j,rT),e(rT,y2e),e(y2e,qlr),e(rT,Nlr),e(rT,Nz),e(Nz,jlr),e(rT,Dlr),e(j,Glr),e(j,tT),e(tT,L2e),e(L2e,Olr),e(tT,Vlr),e(tT,jz),e(jz,Xlr),e(tT,zlr),e(j,Qlr),e(j,aT),e(aT,x2e),e(x2e,Wlr),e(aT,Hlr),e(aT,Dz),e(Dz,Ulr),e(aT,Jlr),e(j,Ylr),e(j,nT),e(nT,$2e),e($2e,Klr),e(nT,Zlr),e(nT,Gz),e(Gz,eir),e(nT,oir),e(j,rir),e(j,sT),e(sT,k2e),e(k2e,tir),e(sT,air),e(sT,Oz),e(Oz,nir),e(sT,sir),e(j,lir),e(j,lT),e(lT,S2e),e(S2e,iir),e(lT,dir),e(lT,Vz),e(Vz,cir),e(lT,fir),e(j,mir),e(j,iT),e(iT,R2e),e(R2e,gir),e(iT,hir),e(iT,Xz),e(Xz,pir),e(iT,uir),e(j,_ir),e(j,dT),e(dT,B2e),e(B2e,bir),e(dT,vir),e(dT,zz),e(zz,Fir),e(dT,Tir),e(j,Mir),e(j,cT),e(cT,P2e),e(P2e,Eir),e(cT,Cir),e(cT,Qz),e(Qz,wir),e(cT,Air),e(j,yir),e(j,fT),e(fT,I2e),e(I2e,Lir),e(fT,xir),e(fT,Wz),e(Wz,$ir),e(fT,kir),e(j,Sir),e(j,mT),e(mT,q2e),e(q2e,Rir),e(mT,Bir),e(mT,Hz),e(Hz,Pir),e(mT,Iir),e(j,qir),e(j,gT),e(gT,N2e),e(N2e,Nir),e(gT,jir),e(gT,Uz),e(Uz,Dir),e(gT,Gir),e(j,Oir),e(j,hT),e(hT,j2e),e(j2e,Vir),e(hT,Xir),e(hT,Jz),e(Jz,zir),e(hT,Qir),e(j,Wir),e(j,pT),e(pT,D2e),e(D2e,Hir),e(pT,Uir),e(pT,Yz),e(Yz,Jir),e(pT,Yir),e(j,Kir),e(j,uT),e(uT,G2e),e(G2e,Zir),e(uT,edr),e(uT,Kz),e(Kz,odr),e(uT,rdr),e(j,tdr),e(j,_T),e(_T,O2e),e(O2e,adr),e(_T,ndr),e(_T,Zz),e(Zz,sdr),e(_T,ldr),e(j,idr),e(j,bT),e(bT,V2e),e(V2e,ddr),e(bT,cdr),e(bT,eQ),e(eQ,fdr),e(bT,mdr),e(wr,gdr),M(vT,wr,null),b(f,iqe,_),b(f,Dd,_),e(Dd,FT),e(FT,X2e),M(DL,X2e,null),e(Dd,hdr),e(Dd,z2e),e(z2e,pdr),b(f,dqe,_),b(f,Ko,_),M(GL,Ko,null),e(Ko,udr),e(Ko,Gd),e(Gd,_dr),e(Gd,oQ),e(oQ,bdr),e(Gd,vdr),e(Gd,rQ),e(rQ,Fdr),e(Gd,Tdr),e(Ko,Mdr),e(Ko,OL),e(OL,Edr),e(OL,Q2e),e(Q2e,Cdr),e(OL,wdr),e(Ko,Adr),e(Ko,At),M(VL,At,null),e(At,ydr),e(At,W2e),e(W2e,Ldr),e(At,xdr),e(At,Od),e(Od,$dr),e(Od,H2e),e(H2e,kdr),e(Od,Sdr),e(Od,tQ),e(tQ,Rdr),e(Od,Bdr),e(At,Pdr),M(TT,At,null),e(Ko,Idr),e(Ko,Ar),M(XL,Ar,null),e(Ar,qdr),e(Ar,U2e),e(U2e,Ndr),e(Ar,jdr),e(Ar,Za),e(Za,Ddr),e(Za,J2e),e(J2e,Gdr),e(Za,Odr),e(Za,Y2e),e(Y2e,Vdr),e(Za,Xdr),e(Za,K2e),e(K2e,zdr),e(Za,Qdr),e(Ar,Wdr),e(Ar,se),e(se,MT),e(MT,Z2e),e(Z2e,Hdr),e(MT,Udr),e(MT,aQ),e(aQ,Jdr),e(MT,Ydr),e(se,Kdr),e(se,ET),e(ET,e1e),e(e1e,Zdr),e(ET,ecr),e(ET,nQ),e(nQ,ocr),e(ET,rcr),e(se,tcr),e(se,CT),e(CT,o1e),e(o1e,acr),e(CT,ncr),e(CT,sQ),e(sQ,scr),e(CT,lcr),e(se,icr),e(se,wT),e(wT,r1e),e(r1e,dcr),e(wT,ccr),e(wT,lQ),e(lQ,fcr),e(wT,mcr),e(se,gcr),e(se,AT),e(AT,t1e),e(t1e,hcr),e(AT,pcr),e(AT,iQ),e(iQ,ucr),e(AT,_cr),e(se,bcr),e(se,yT),e(yT,a1e),e(a1e,vcr),e(yT,Fcr),e(yT,dQ),e(dQ,Tcr),e(yT,Mcr),e(se,Ecr),e(se,LT),e(LT,n1e),e(n1e,Ccr),e(LT,wcr),e(LT,cQ),e(cQ,Acr),e(LT,ycr),e(se,Lcr),e(se,xT),e(xT,s1e),e(s1e,xcr),e(xT,$cr),e(xT,fQ),e(fQ,kcr),e(xT,Scr),e(se,Rcr),e(se,$T),e($T,l1e),e(l1e,Bcr),e($T,Pcr),e($T,mQ),e(mQ,Icr),e($T,qcr),e(se,Ncr),e(se,kT),e(kT,i1e),e(i1e,jcr),e(kT,Dcr),e(kT,gQ),e(gQ,Gcr),e(kT,Ocr),e(se,Vcr),e(se,ST),e(ST,d1e),e(d1e,Xcr),e(ST,zcr),e(ST,hQ),e(hQ,Qcr),e(ST,Wcr),e(se,Hcr),e(se,RT),e(RT,c1e),e(c1e,Ucr),e(RT,Jcr),e(RT,pQ),e(pQ,Ycr),e(RT,Kcr),e(se,Zcr),e(se,BT),e(BT,f1e),e(f1e,efr),e(BT,ofr),e(BT,uQ),e(uQ,rfr),e(BT,tfr),e(se,afr),e(se,PT),e(PT,m1e),e(m1e,nfr),e(PT,sfr),e(PT,_Q),e(_Q,lfr),e(PT,ifr),e(se,dfr),e(se,IT),e(IT,g1e),e(g1e,cfr),e(IT,ffr),e(IT,bQ),e(bQ,mfr),e(IT,gfr),e(se,hfr),e(se,qT),e(qT,h1e),e(h1e,pfr),e(qT,ufr),e(qT,vQ),e(vQ,_fr),e(qT,bfr),e(se,vfr),e(se,NT),e(NT,p1e),e(p1e,Ffr),e(NT,Tfr),e(NT,FQ),e(FQ,Mfr),e(NT,Efr),e(se,Cfr),e(se,jT),e(jT,u1e),e(u1e,wfr),e(jT,Afr),e(jT,TQ),e(TQ,yfr),e(jT,Lfr),e(se,xfr),e(se,DT),e(DT,_1e),e(_1e,$fr),e(DT,kfr),e(DT,MQ),e(MQ,Sfr),e(DT,Rfr),e(se,Bfr),e(se,GT),e(GT,b1e),e(b1e,Pfr),e(GT,Ifr),e(GT,EQ),e(EQ,qfr),e(GT,Nfr),e(se,jfr),e(se,OT),e(OT,v1e),e(v1e,Dfr),e(OT,Gfr),e(OT,CQ),e(CQ,Ofr),e(OT,Vfr),e(se,Xfr),e(se,VT),e(VT,F1e),e(F1e,zfr),e(VT,Qfr),e(VT,wQ),e(wQ,Wfr),e(VT,Hfr),e(se,Ufr),e(se,XT),e(XT,T1e),e(T1e,Jfr),e(XT,Yfr),e(XT,AQ),e(AQ,Kfr),e(XT,Zfr),e(Ar,emr),M(zT,Ar,null),b(f,cqe,_),b(f,Vd,_),e(Vd,QT),e(QT,M1e),M(zL,M1e,null),e(Vd,omr),e(Vd,E1e),e(E1e,rmr),b(f,fqe,_),b(f,Zo,_),M(QL,Zo,null),e(Zo,tmr),e(Zo,Xd),e(Xd,amr),e(Xd,yQ),e(yQ,nmr),e(Xd,smr),e(Xd,LQ),e(LQ,lmr),e(Xd,imr),e(Zo,dmr),e(Zo,WL),e(WL,cmr),e(WL,C1e),e(C1e,fmr),e(WL,mmr),e(Zo,gmr),e(Zo,yt),M(HL,yt,null),e(yt,hmr),e(yt,w1e),e(w1e,pmr),e(yt,umr),e(yt,zd),e(zd,_mr),e(zd,A1e),e(A1e,bmr),e(zd,vmr),e(zd,xQ),e(xQ,Fmr),e(zd,Tmr),e(yt,Mmr),M(WT,yt,null),e(Zo,Emr),e(Zo,yr),M(UL,yr,null),e(yr,Cmr),e(yr,y1e),e(y1e,wmr),e(yr,Amr),e(yr,en),e(en,ymr),e(en,L1e),e(L1e,Lmr),e(en,xmr),e(en,x1e),e(x1e,$mr),e(en,kmr),e(en,$1e),e($1e,Smr),e(en,Rmr),e(yr,Bmr),e(yr,Me),e(Me,HT),e(HT,k1e),e(k1e,Pmr),e(HT,Imr),e(HT,$Q),e($Q,qmr),e(HT,Nmr),e(Me,jmr),e(Me,UT),e(UT,S1e),e(S1e,Dmr),e(UT,Gmr),e(UT,kQ),e(kQ,Omr),e(UT,Vmr),e(Me,Xmr),e(Me,JT),e(JT,R1e),e(R1e,zmr),e(JT,Qmr),e(JT,SQ),e(SQ,Wmr),e(JT,Hmr),e(Me,Umr),e(Me,YT),e(YT,B1e),e(B1e,Jmr),e(YT,Ymr),e(YT,RQ),e(RQ,Kmr),e(YT,Zmr),e(Me,egr),e(Me,KT),e(KT,P1e),e(P1e,ogr),e(KT,rgr),e(KT,BQ),e(BQ,tgr),e(KT,agr),e(Me,ngr),e(Me,ZT),e(ZT,I1e),e(I1e,sgr),e(ZT,lgr),e(ZT,PQ),e(PQ,igr),e(ZT,dgr),e(Me,cgr),e(Me,e7),e(e7,q1e),e(q1e,fgr),e(e7,mgr),e(e7,IQ),e(IQ,ggr),e(e7,hgr),e(Me,pgr),e(Me,o7),e(o7,N1e),e(N1e,ugr),e(o7,_gr),e(o7,qQ),e(qQ,bgr),e(o7,vgr),e(Me,Fgr),e(Me,r7),e(r7,j1e),e(j1e,Tgr),e(r7,Mgr),e(r7,NQ),e(NQ,Egr),e(r7,Cgr),e(Me,wgr),e(Me,t7),e(t7,D1e),e(D1e,Agr),e(t7,ygr),e(t7,jQ),e(jQ,Lgr),e(t7,xgr),e(Me,$gr),e(Me,a7),e(a7,G1e),e(G1e,kgr),e(a7,Sgr),e(a7,DQ),e(DQ,Rgr),e(a7,Bgr),e(Me,Pgr),e(Me,n7),e(n7,O1e),e(O1e,Igr),e(n7,qgr),e(n7,GQ),e(GQ,Ngr),e(n7,jgr),e(yr,Dgr),M(s7,yr,null),b(f,mqe,_),b(f,Qd,_),e(Qd,l7),e(l7,V1e),M(JL,V1e,null),e(Qd,Ggr),e(Qd,X1e),e(X1e,Ogr),b(f,gqe,_),b(f,er,_),M(YL,er,null),e(er,Vgr),e(er,Wd),e(Wd,Xgr),e(Wd,OQ),e(OQ,zgr),e(Wd,Qgr),e(Wd,VQ),e(VQ,Wgr),e(Wd,Hgr),e(er,Ugr),e(er,KL),e(KL,Jgr),e(KL,z1e),e(z1e,Ygr),e(KL,Kgr),e(er,Zgr),e(er,Lt),M(ZL,Lt,null),e(Lt,ehr),e(Lt,Q1e),e(Q1e,ohr),e(Lt,rhr),e(Lt,Hd),e(Hd,thr),e(Hd,W1e),e(W1e,ahr),e(Hd,nhr),e(Hd,XQ),e(XQ,shr),e(Hd,lhr),e(Lt,ihr),M(i7,Lt,null),e(er,dhr),e(er,Lr),M(e8,Lr,null),e(Lr,chr),e(Lr,H1e),e(H1e,fhr),e(Lr,mhr),e(Lr,on),e(on,ghr),e(on,U1e),e(U1e,hhr),e(on,phr),e(on,J1e),e(J1e,uhr),e(on,_hr),e(on,Y1e),e(Y1e,bhr),e(on,vhr),e(Lr,Fhr),e(Lr,Ud),e(Ud,d7),e(d7,K1e),e(K1e,Thr),e(d7,Mhr),e(d7,zQ),e(zQ,Ehr),e(d7,Chr),e(Ud,whr),e(Ud,c7),e(c7,Z1e),e(Z1e,Ahr),e(c7,yhr),e(c7,QQ),e(QQ,Lhr),e(c7,xhr),e(Ud,$hr),e(Ud,f7),e(f7,ebe),e(ebe,khr),e(f7,Shr),e(f7,WQ),e(WQ,Rhr),e(f7,Bhr),e(Lr,Phr),M(m7,Lr,null),b(f,hqe,_),b(f,Jd,_),e(Jd,g7),e(g7,obe),M(o8,obe,null),e(Jd,Ihr),e(Jd,rbe),e(rbe,qhr),b(f,pqe,_),b(f,or,_),M(r8,or,null),e(or,Nhr),e(or,Yd),e(Yd,jhr),e(Yd,HQ),e(HQ,Dhr),e(Yd,Ghr),e(Yd,UQ),e(UQ,Ohr),e(Yd,Vhr),e(or,Xhr),e(or,t8),e(t8,zhr),e(t8,tbe),e(tbe,Qhr),e(t8,Whr),e(or,Hhr),e(or,xt),M(a8,xt,null),e(xt,Uhr),e(xt,abe),e(abe,Jhr),e(xt,Yhr),e(xt,Kd),e(Kd,Khr),e(Kd,nbe),e(nbe,Zhr),e(Kd,epr),e(Kd,JQ),e(JQ,opr),e(Kd,rpr),e(xt,tpr),M(h7,xt,null),e(or,apr),e(or,xr),M(n8,xr,null),e(xr,npr),e(xr,sbe),e(sbe,spr),e(xr,lpr),e(xr,rn),e(rn,ipr),e(rn,lbe),e(lbe,dpr),e(rn,cpr),e(rn,ibe),e(ibe,fpr),e(rn,mpr),e(rn,dbe),e(dbe,gpr),e(rn,hpr),e(xr,ppr),e(xr,ie),e(ie,p7),e(p7,cbe),e(cbe,upr),e(p7,_pr),e(p7,YQ),e(YQ,bpr),e(p7,vpr),e(ie,Fpr),e(ie,u7),e(u7,fbe),e(fbe,Tpr),e(u7,Mpr),e(u7,KQ),e(KQ,Epr),e(u7,Cpr),e(ie,wpr),e(ie,_7),e(_7,mbe),e(mbe,Apr),e(_7,ypr),e(_7,ZQ),e(ZQ,Lpr),e(_7,xpr),e(ie,$pr),e(ie,b7),e(b7,gbe),e(gbe,kpr),e(b7,Spr),e(b7,eW),e(eW,Rpr),e(b7,Bpr),e(ie,Ppr),e(ie,v7),e(v7,hbe),e(hbe,Ipr),e(v7,qpr),e(v7,oW),e(oW,Npr),e(v7,jpr),e(ie,Dpr),e(ie,F7),e(F7,pbe),e(pbe,Gpr),e(F7,Opr),e(F7,rW),e(rW,Vpr),e(F7,Xpr),e(ie,zpr),e(ie,T7),e(T7,ube),e(ube,Qpr),e(T7,Wpr),e(T7,tW),e(tW,Hpr),e(T7,Upr),e(ie,Jpr),e(ie,M7),e(M7,_be),e(_be,Ypr),e(M7,Kpr),e(M7,aW),e(aW,Zpr),e(M7,eur),e(ie,our),e(ie,E7),e(E7,bbe),e(bbe,rur),e(E7,tur),e(E7,nW),e(nW,aur),e(E7,nur),e(ie,sur),e(ie,C7),e(C7,vbe),e(vbe,lur),e(C7,iur),e(C7,sW),e(sW,dur),e(C7,cur),e(ie,fur),e(ie,w7),e(w7,Fbe),e(Fbe,mur),e(w7,gur),e(w7,lW),e(lW,hur),e(w7,pur),e(ie,uur),e(ie,A7),e(A7,Tbe),e(Tbe,_ur),e(A7,bur),e(A7,iW),e(iW,vur),e(A7,Fur),e(ie,Tur),e(ie,y7),e(y7,Mbe),e(Mbe,Mur),e(y7,Eur),e(y7,dW),e(dW,Cur),e(y7,wur),e(ie,Aur),e(ie,L7),e(L7,Ebe),e(Ebe,yur),e(L7,Lur),e(L7,cW),e(cW,xur),e(L7,$ur),e(ie,kur),e(ie,x7),e(x7,Cbe),e(Cbe,Sur),e(x7,Rur),e(x7,fW),e(fW,Bur),e(x7,Pur),e(ie,Iur),e(ie,$7),e($7,wbe),e(wbe,qur),e($7,Nur),e($7,mW),e(mW,jur),e($7,Dur),e(ie,Gur),e(ie,k7),e(k7,Abe),e(Abe,Our),e(k7,Vur),e(k7,gW),e(gW,Xur),e(k7,zur),e(ie,Qur),e(ie,S7),e(S7,ybe),e(ybe,Wur),e(S7,Hur),e(S7,hW),e(hW,Uur),e(S7,Jur),e(ie,Yur),e(ie,R7),e(R7,Lbe),e(Lbe,Kur),e(R7,Zur),e(R7,pW),e(pW,e_r),e(R7,o_r),e(ie,r_r),e(ie,B7),e(B7,xbe),e(xbe,t_r),e(B7,a_r),e(B7,uW),e(uW,n_r),e(B7,s_r),e(xr,l_r),M(P7,xr,null),b(f,uqe,_),b(f,Zd,_),e(Zd,I7),e(I7,$be),M(s8,$be,null),e(Zd,i_r),e(Zd,kbe),e(kbe,d_r),b(f,_qe,_),b(f,rr,_),M(l8,rr,null),e(rr,c_r),e(rr,ec),e(ec,f_r),e(ec,_W),e(_W,m_r),e(ec,g_r),e(ec,bW),e(bW,h_r),e(ec,p_r),e(rr,u_r),e(rr,i8),e(i8,__r),e(i8,Sbe),e(Sbe,b_r),e(i8,v_r),e(rr,F_r),e(rr,$t),M(d8,$t,null),e($t,T_r),e($t,Rbe),e(Rbe,M_r),e($t,E_r),e($t,oc),e(oc,C_r),e(oc,Bbe),e(Bbe,w_r),e(oc,A_r),e(oc,vW),e(vW,y_r),e(oc,L_r),e($t,x_r),M(q7,$t,null),e(rr,$_r),e(rr,$r),M(c8,$r,null),e($r,k_r),e($r,Pbe),e(Pbe,S_r),e($r,R_r),e($r,tn),e(tn,B_r),e(tn,Ibe),e(Ibe,P_r),e(tn,I_r),e(tn,qbe),e(qbe,q_r),e(tn,N_r),e(tn,Nbe),e(Nbe,j_r),e(tn,D_r),e($r,G_r),e($r,ye),e(ye,N7),e(N7,jbe),e(jbe,O_r),e(N7,V_r),e(N7,FW),e(FW,X_r),e(N7,z_r),e(ye,Q_r),e(ye,j7),e(j7,Dbe),e(Dbe,W_r),e(j7,H_r),e(j7,TW),e(TW,U_r),e(j7,J_r),e(ye,Y_r),e(ye,D7),e(D7,Gbe),e(Gbe,K_r),e(D7,Z_r),e(D7,MW),e(MW,e2r),e(D7,o2r),e(ye,r2r),e(ye,G7),e(G7,Obe),e(Obe,t2r),e(G7,a2r),e(G7,EW),e(EW,n2r),e(G7,s2r),e(ye,l2r),e(ye,O7),e(O7,Vbe),e(Vbe,i2r),e(O7,d2r),e(O7,CW),e(CW,c2r),e(O7,f2r),e(ye,m2r),e(ye,V7),e(V7,Xbe),e(Xbe,g2r),e(V7,h2r),e(V7,wW),e(wW,p2r),e(V7,u2r),e(ye,_2r),e(ye,X7),e(X7,zbe),e(zbe,b2r),e(X7,v2r),e(X7,AW),e(AW,F2r),e(X7,T2r),e(ye,M2r),e(ye,z7),e(z7,Qbe),e(Qbe,E2r),e(z7,C2r),e(z7,yW),e(yW,w2r),e(z7,A2r),e(ye,y2r),e(ye,Q7),e(Q7,Wbe),e(Wbe,L2r),e(Q7,x2r),e(Q7,LW),e(LW,$2r),e(Q7,k2r),e(ye,S2r),e(ye,W7),e(W7,Hbe),e(Hbe,R2r),e(W7,B2r),e(W7,xW),e(xW,P2r),e(W7,I2r),e($r,q2r),M(H7,$r,null),b(f,bqe,_),b(f,rc,_),e(rc,U7),e(U7,Ube),M(f8,Ube,null),e(rc,N2r),e(rc,Jbe),e(Jbe,j2r),b(f,vqe,_),b(f,tr,_),M(m8,tr,null),e(tr,D2r),e(tr,tc),e(tc,G2r),e(tc,$W),e($W,O2r),e(tc,V2r),e(tc,kW),e(kW,X2r),e(tc,z2r),e(tr,Q2r),e(tr,g8),e(g8,W2r),e(g8,Ybe),e(Ybe,H2r),e(g8,U2r),e(tr,J2r),e(tr,kt),M(h8,kt,null),e(kt,Y2r),e(kt,Kbe),e(Kbe,K2r),e(kt,Z2r),e(kt,ac),e(ac,e1r),e(ac,Zbe),e(Zbe,o1r),e(ac,r1r),e(ac,SW),e(SW,t1r),e(ac,a1r),e(kt,n1r),M(J7,kt,null),e(tr,s1r),e(tr,kr),M(p8,kr,null),e(kr,l1r),e(kr,e5e),e(e5e,i1r),e(kr,d1r),e(kr,an),e(an,c1r),e(an,o5e),e(o5e,f1r),e(an,m1r),e(an,r5e),e(r5e,g1r),e(an,h1r),e(an,t5e),e(t5e,p1r),e(an,u1r),e(kr,_1r),e(kr,Z),e(Z,Y7),e(Y7,a5e),e(a5e,b1r),e(Y7,v1r),e(Y7,RW),e(RW,F1r),e(Y7,T1r),e(Z,M1r),e(Z,K7),e(K7,n5e),e(n5e,E1r),e(K7,C1r),e(K7,BW),e(BW,w1r),e(K7,A1r),e(Z,y1r),e(Z,Z7),e(Z7,s5e),e(s5e,L1r),e(Z7,x1r),e(Z7,PW),e(PW,$1r),e(Z7,k1r),e(Z,S1r),e(Z,eM),e(eM,l5e),e(l5e,R1r),e(eM,B1r),e(eM,IW),e(IW,P1r),e(eM,I1r),e(Z,q1r),e(Z,oM),e(oM,i5e),e(i5e,N1r),e(oM,j1r),e(oM,qW),e(qW,D1r),e(oM,G1r),e(Z,O1r),e(Z,rM),e(rM,d5e),e(d5e,V1r),e(rM,X1r),e(rM,NW),e(NW,z1r),e(rM,Q1r),e(Z,W1r),e(Z,tM),e(tM,c5e),e(c5e,H1r),e(tM,U1r),e(tM,jW),e(jW,J1r),e(tM,Y1r),e(Z,K1r),e(Z,aM),e(aM,f5e),e(f5e,Z1r),e(aM,ebr),e(aM,DW),e(DW,obr),e(aM,rbr),e(Z,tbr),e(Z,nM),e(nM,m5e),e(m5e,abr),e(nM,nbr),e(nM,GW),e(GW,sbr),e(nM,lbr),e(Z,ibr),e(Z,sM),e(sM,g5e),e(g5e,dbr),e(sM,cbr),e(sM,OW),e(OW,fbr),e(sM,mbr),e(Z,gbr),e(Z,lM),e(lM,h5e),e(h5e,hbr),e(lM,pbr),e(lM,VW),e(VW,ubr),e(lM,_br),e(Z,bbr),e(Z,iM),e(iM,p5e),e(p5e,vbr),e(iM,Fbr),e(iM,XW),e(XW,Tbr),e(iM,Mbr),e(Z,Ebr),e(Z,dM),e(dM,u5e),e(u5e,Cbr),e(dM,wbr),e(dM,zW),e(zW,Abr),e(dM,ybr),e(Z,Lbr),e(Z,cM),e(cM,_5e),e(_5e,xbr),e(cM,$br),e(cM,QW),e(QW,kbr),e(cM,Sbr),e(Z,Rbr),e(Z,fM),e(fM,b5e),e(b5e,Bbr),e(fM,Pbr),e(fM,WW),e(WW,Ibr),e(fM,qbr),e(Z,Nbr),e(Z,mM),e(mM,v5e),e(v5e,jbr),e(mM,Dbr),e(mM,HW),e(HW,Gbr),e(mM,Obr),e(Z,Vbr),e(Z,gM),e(gM,F5e),e(F5e,Xbr),e(gM,zbr),e(gM,UW),e(UW,Qbr),e(gM,Wbr),e(Z,Hbr),e(Z,hM),e(hM,T5e),e(T5e,Ubr),e(hM,Jbr),e(hM,JW),e(JW,Ybr),e(hM,Kbr),e(Z,Zbr),e(Z,pM),e(pM,M5e),e(M5e,e5r),e(pM,o5r),e(pM,YW),e(YW,r5r),e(pM,t5r),e(Z,a5r),e(Z,uM),e(uM,E5e),e(E5e,n5r),e(uM,s5r),e(uM,KW),e(KW,l5r),e(uM,i5r),e(Z,d5r),e(Z,_M),e(_M,C5e),e(C5e,c5r),e(_M,f5r),e(_M,ZW),e(ZW,m5r),e(_M,g5r),e(Z,h5r),e(Z,bM),e(bM,w5e),e(w5e,p5r),e(bM,u5r),e(bM,eH),e(eH,_5r),e(bM,b5r),e(Z,v5r),e(Z,vM),e(vM,A5e),e(A5e,F5r),e(vM,T5r),e(vM,oH),e(oH,M5r),e(vM,E5r),e(Z,C5r),e(Z,FM),e(FM,y5e),e(y5e,w5r),e(FM,A5r),e(FM,rH),e(rH,y5r),e(FM,L5r),e(Z,x5r),e(Z,TM),e(TM,L5e),e(L5e,$5r),e(TM,k5r),e(TM,tH),e(tH,S5r),e(TM,R5r),e(Z,B5r),e(Z,MM),e(MM,x5e),e(x5e,P5r),e(MM,I5r),e(MM,aH),e(aH,q5r),e(MM,N5r),e(kr,j5r),M(EM,kr,null),b(f,Fqe,_),b(f,nc,_),e(nc,CM),e(CM,$5e),M(u8,$5e,null),e(nc,D5r),e(nc,k5e),e(k5e,G5r),b(f,Tqe,_),b(f,ar,_),M(_8,ar,null),e(ar,O5r),e(ar,sc),e(sc,V5r),e(sc,nH),e(nH,X5r),e(sc,z5r),e(sc,sH),e(sH,Q5r),e(sc,W5r),e(ar,H5r),e(ar,b8),e(b8,U5r),e(b8,S5e),e(S5e,J5r),e(b8,Y5r),e(ar,K5r),e(ar,St),M(v8,St,null),e(St,Z5r),e(St,R5e),e(R5e,e3r),e(St,o3r),e(St,lc),e(lc,r3r),e(lc,B5e),e(B5e,t3r),e(lc,a3r),e(lc,lH),e(lH,n3r),e(lc,s3r),e(St,l3r),M(wM,St,null),e(ar,i3r),e(ar,Sr),M(F8,Sr,null),e(Sr,d3r),e(Sr,P5e),e(P5e,c3r),e(Sr,f3r),e(Sr,nn),e(nn,m3r),e(nn,I5e),e(I5e,g3r),e(nn,h3r),e(nn,q5e),e(q5e,p3r),e(nn,u3r),e(nn,N5e),e(N5e,_3r),e(nn,b3r),e(Sr,v3r),e(Sr,pe),e(pe,AM),e(AM,j5e),e(j5e,F3r),e(AM,T3r),e(AM,iH),e(iH,M3r),e(AM,E3r),e(pe,C3r),e(pe,yM),e(yM,D5e),e(D5e,w3r),e(yM,A3r),e(yM,dH),e(dH,y3r),e(yM,L3r),e(pe,x3r),e(pe,LM),e(LM,G5e),e(G5e,$3r),e(LM,k3r),e(LM,cH),e(cH,S3r),e(LM,R3r),e(pe,B3r),e(pe,xM),e(xM,O5e),e(O5e,P3r),e(xM,I3r),e(xM,fH),e(fH,q3r),e(xM,N3r),e(pe,j3r),e(pe,$M),e($M,V5e),e(V5e,D3r),e($M,G3r),e($M,mH),e(mH,O3r),e($M,V3r),e(pe,X3r),e(pe,kM),e(kM,X5e),e(X5e,z3r),e(kM,Q3r),e(kM,gH),e(gH,W3r),e(kM,H3r),e(pe,U3r),e(pe,SM),e(SM,z5e),e(z5e,J3r),e(SM,Y3r),e(SM,hH),e(hH,K3r),e(SM,Z3r),e(pe,evr),e(pe,RM),e(RM,Q5e),e(Q5e,ovr),e(RM,rvr),e(RM,pH),e(pH,tvr),e(RM,avr),e(pe,nvr),e(pe,BM),e(BM,W5e),e(W5e,svr),e(BM,lvr),e(BM,uH),e(uH,ivr),e(BM,dvr),e(pe,cvr),e(pe,PM),e(PM,H5e),e(H5e,fvr),e(PM,mvr),e(PM,_H),e(_H,gvr),e(PM,hvr),e(pe,pvr),e(pe,IM),e(IM,U5e),e(U5e,uvr),e(IM,_vr),e(IM,bH),e(bH,bvr),e(IM,vvr),e(pe,Fvr),e(pe,qM),e(qM,J5e),e(J5e,Tvr),e(qM,Mvr),e(qM,vH),e(vH,Evr),e(qM,Cvr),e(pe,wvr),e(pe,NM),e(NM,Y5e),e(Y5e,Avr),e(NM,yvr),e(NM,FH),e(FH,Lvr),e(NM,xvr),e(pe,$vr),e(pe,jM),e(jM,K5e),e(K5e,kvr),e(jM,Svr),e(jM,TH),e(TH,Rvr),e(jM,Bvr),e(pe,Pvr),e(pe,DM),e(DM,Z5e),e(Z5e,Ivr),e(DM,qvr),e(DM,MH),e(MH,Nvr),e(DM,jvr),e(pe,Dvr),e(pe,GM),e(GM,e3e),e(e3e,Gvr),e(GM,Ovr),e(GM,EH),e(EH,Vvr),e(GM,Xvr),e(pe,zvr),e(pe,OM),e(OM,o3e),e(o3e,Qvr),e(OM,Wvr),e(OM,CH),e(CH,Hvr),e(OM,Uvr),e(Sr,Jvr),M(VM,Sr,null),b(f,Mqe,_),b(f,ic,_),e(ic,XM),e(XM,r3e),M(T8,r3e,null),e(ic,Yvr),e(ic,t3e),e(t3e,Kvr),b(f,Eqe,_),b(f,nr,_),M(M8,nr,null),e(nr,Zvr),e(nr,dc),e(dc,eFr),e(dc,wH),e(wH,oFr),e(dc,rFr),e(dc,AH),e(AH,tFr),e(dc,aFr),e(nr,nFr),e(nr,E8),e(E8,sFr),e(E8,a3e),e(a3e,lFr),e(E8,iFr),e(nr,dFr),e(nr,Rt),M(C8,Rt,null),e(Rt,cFr),e(Rt,n3e),e(n3e,fFr),e(Rt,mFr),e(Rt,cc),e(cc,gFr),e(cc,s3e),e(s3e,hFr),e(cc,pFr),e(cc,yH),e(yH,uFr),e(cc,_Fr),e(Rt,bFr),M(zM,Rt,null),e(nr,vFr),e(nr,Rr),M(w8,Rr,null),e(Rr,FFr),e(Rr,l3e),e(l3e,TFr),e(Rr,MFr),e(Rr,sn),e(sn,EFr),e(sn,i3e),e(i3e,CFr),e(sn,wFr),e(sn,d3e),e(d3e,AFr),e(sn,yFr),e(sn,c3e),e(c3e,LFr),e(sn,xFr),e(Rr,$Fr),e(Rr,A8),e(A8,QM),e(QM,f3e),e(f3e,kFr),e(QM,SFr),e(QM,LH),e(LH,RFr),e(QM,BFr),e(A8,PFr),e(A8,WM),e(WM,m3e),e(m3e,IFr),e(WM,qFr),e(WM,xH),e(xH,NFr),e(WM,jFr),e(Rr,DFr),M(HM,Rr,null),b(f,Cqe,_),b(f,fc,_),e(fc,UM),e(UM,g3e),M(y8,g3e,null),e(fc,GFr),e(fc,h3e),e(h3e,OFr),b(f,wqe,_),b(f,sr,_),M(L8,sr,null),e(sr,VFr),e(sr,mc),e(mc,XFr),e(mc,$H),e($H,zFr),e(mc,QFr),e(mc,kH),e(kH,WFr),e(mc,HFr),e(sr,UFr),e(sr,x8),e(x8,JFr),e(x8,p3e),e(p3e,YFr),e(x8,KFr),e(sr,ZFr),e(sr,Bt),M($8,Bt,null),e(Bt,eTr),e(Bt,u3e),e(u3e,oTr),e(Bt,rTr),e(Bt,gc),e(gc,tTr),e(gc,_3e),e(_3e,aTr),e(gc,nTr),e(gc,SH),e(SH,sTr),e(gc,lTr),e(Bt,iTr),M(JM,Bt,null),e(sr,dTr),e(sr,Br),M(k8,Br,null),e(Br,cTr),e(Br,b3e),e(b3e,fTr),e(Br,mTr),e(Br,ln),e(ln,gTr),e(ln,v3e),e(v3e,hTr),e(ln,pTr),e(ln,F3e),e(F3e,uTr),e(ln,_Tr),e(ln,T3e),e(T3e,bTr),e(ln,vTr),e(Br,FTr),e(Br,M3e),e(M3e,YM),e(YM,E3e),e(E3e,TTr),e(YM,MTr),e(YM,RH),e(RH,ETr),e(YM,CTr),e(Br,wTr),M(KM,Br,null),b(f,Aqe,_),b(f,hc,_),e(hc,ZM),e(ZM,C3e),M(S8,C3e,null),e(hc,ATr),e(hc,w3e),e(w3e,yTr),b(f,yqe,_),b(f,lr,_),M(R8,lr,null),e(lr,LTr),e(lr,pc),e(pc,xTr),e(pc,BH),e(BH,$Tr),e(pc,kTr),e(pc,PH),e(PH,STr),e(pc,RTr),e(lr,BTr),e(lr,B8),e(B8,PTr),e(B8,A3e),e(A3e,ITr),e(B8,qTr),e(lr,NTr),e(lr,Pt),M(P8,Pt,null),e(Pt,jTr),e(Pt,y3e),e(y3e,DTr),e(Pt,GTr),e(Pt,uc),e(uc,OTr),e(uc,L3e),e(L3e,VTr),e(uc,XTr),e(uc,IH),e(IH,zTr),e(uc,QTr),e(Pt,WTr),M(e4,Pt,null),e(lr,HTr),e(lr,Pr),M(I8,Pr,null),e(Pr,UTr),e(Pr,x3e),e(x3e,JTr),e(Pr,YTr),e(Pr,dn),e(dn,KTr),e(dn,$3e),e($3e,ZTr),e(dn,e7r),e(dn,k3e),e(k3e,o7r),e(dn,r7r),e(dn,S3e),e(S3e,t7r),e(dn,a7r),e(Pr,n7r),e(Pr,de),e(de,o4),e(o4,R3e),e(R3e,s7r),e(o4,l7r),e(o4,qH),e(qH,i7r),e(o4,d7r),e(de,c7r),e(de,r4),e(r4,B3e),e(B3e,f7r),e(r4,m7r),e(r4,NH),e(NH,g7r),e(r4,h7r),e(de,p7r),e(de,t4),e(t4,P3e),e(P3e,u7r),e(t4,_7r),e(t4,jH),e(jH,b7r),e(t4,v7r),e(de,F7r),e(de,a4),e(a4,I3e),e(I3e,T7r),e(a4,M7r),e(a4,DH),e(DH,E7r),e(a4,C7r),e(de,w7r),e(de,n4),e(n4,q3e),e(q3e,A7r),e(n4,y7r),e(n4,GH),e(GH,L7r),e(n4,x7r),e(de,$7r),e(de,s4),e(s4,N3e),e(N3e,k7r),e(s4,S7r),e(s4,OH),e(OH,R7r),e(s4,B7r),e(de,P7r),e(de,l4),e(l4,j3e),e(j3e,I7r),e(l4,q7r),e(l4,VH),e(VH,N7r),e(l4,j7r),e(de,D7r),e(de,i4),e(i4,D3e),e(D3e,G7r),e(i4,O7r),e(i4,XH),e(XH,V7r),e(i4,X7r),e(de,z7r),e(de,d4),e(d4,G3e),e(G3e,Q7r),e(d4,W7r),e(d4,zH),e(zH,H7r),e(d4,U7r),e(de,J7r),e(de,c4),e(c4,O3e),e(O3e,Y7r),e(c4,K7r),e(c4,QH),e(QH,Z7r),e(c4,eMr),e(de,oMr),e(de,f4),e(f4,V3e),e(V3e,rMr),e(f4,tMr),e(f4,WH),e(WH,aMr),e(f4,nMr),e(de,sMr),e(de,m4),e(m4,X3e),e(X3e,lMr),e(m4,iMr),e(m4,HH),e(HH,dMr),e(m4,cMr),e(de,fMr),e(de,g4),e(g4,z3e),e(z3e,mMr),e(g4,gMr),e(g4,UH),e(UH,hMr),e(g4,pMr),e(de,uMr),e(de,h4),e(h4,Q3e),e(Q3e,_Mr),e(h4,bMr),e(h4,JH),e(JH,vMr),e(h4,FMr),e(de,TMr),e(de,p4),e(p4,W3e),e(W3e,MMr),e(p4,EMr),e(p4,YH),e(YH,CMr),e(p4,wMr),e(de,AMr),e(de,u4),e(u4,H3e),e(H3e,yMr),e(u4,LMr),e(u4,KH),e(KH,xMr),e(u4,$Mr),e(de,kMr),e(de,_4),e(_4,U3e),e(U3e,SMr),e(_4,RMr),e(_4,ZH),e(ZH,BMr),e(_4,PMr),e(de,IMr),e(de,b4),e(b4,J3e),e(J3e,qMr),e(b4,NMr),e(b4,eU),e(eU,jMr),e(b4,DMr),e(de,GMr),e(de,v4),e(v4,Y3e),e(Y3e,OMr),e(v4,VMr),e(v4,oU),e(oU,XMr),e(v4,zMr),e(de,QMr),e(de,F4),e(F4,K3e),e(K3e,WMr),e(F4,HMr),e(F4,rU),e(rU,UMr),e(F4,JMr),e(Pr,YMr),M(T4,Pr,null),b(f,Lqe,_),b(f,_c,_),e(_c,M4),e(M4,Z3e),M(q8,Z3e,null),e(_c,KMr),e(_c,eve),e(eve,ZMr),b(f,xqe,_),b(f,ir,_),M(N8,ir,null),e(ir,e4r),e(ir,bc),e(bc,o4r),e(bc,tU),e(tU,r4r),e(bc,t4r),e(bc,aU),e(aU,a4r),e(bc,n4r),e(ir,s4r),e(ir,j8),e(j8,l4r),e(j8,ove),e(ove,i4r),e(j8,d4r),e(ir,c4r),e(ir,It),M(D8,It,null),e(It,f4r),e(It,rve),e(rve,m4r),e(It,g4r),e(It,vc),e(vc,h4r),e(vc,tve),e(tve,p4r),e(vc,u4r),e(vc,nU),e(nU,_4r),e(vc,b4r),e(It,v4r),M(E4,It,null),e(ir,F4r),e(ir,Ir),M(G8,Ir,null),e(Ir,T4r),e(Ir,ave),e(ave,M4r),e(Ir,E4r),e(Ir,cn),e(cn,C4r),e(cn,nve),e(nve,w4r),e(cn,A4r),e(cn,sve),e(sve,y4r),e(cn,L4r),e(cn,lve),e(lve,x4r),e(cn,$4r),e(Ir,k4r),e(Ir,ce),e(ce,C4),e(C4,ive),e(ive,S4r),e(C4,R4r),e(C4,sU),e(sU,B4r),e(C4,P4r),e(ce,I4r),e(ce,w4),e(w4,dve),e(dve,q4r),e(w4,N4r),e(w4,lU),e(lU,j4r),e(w4,D4r),e(ce,G4r),e(ce,A4),e(A4,cve),e(cve,O4r),e(A4,V4r),e(A4,iU),e(iU,X4r),e(A4,z4r),e(ce,Q4r),e(ce,y4),e(y4,fve),e(fve,W4r),e(y4,H4r),e(y4,dU),e(dU,U4r),e(y4,J4r),e(ce,Y4r),e(ce,L4),e(L4,mve),e(mve,K4r),e(L4,Z4r),e(L4,cU),e(cU,eEr),e(L4,oEr),e(ce,rEr),e(ce,x4),e(x4,gve),e(gve,tEr),e(x4,aEr),e(x4,fU),e(fU,nEr),e(x4,sEr),e(ce,lEr),e(ce,$4),e($4,hve),e(hve,iEr),e($4,dEr),e($4,mU),e(mU,cEr),e($4,fEr),e(ce,mEr),e(ce,k4),e(k4,pve),e(pve,gEr),e(k4,hEr),e(k4,gU),e(gU,pEr),e(k4,uEr),e(ce,_Er),e(ce,S4),e(S4,uve),e(uve,bEr),e(S4,vEr),e(S4,hU),e(hU,FEr),e(S4,TEr),e(ce,MEr),e(ce,R4),e(R4,_ve),e(_ve,EEr),e(R4,CEr),e(R4,pU),e(pU,wEr),e(R4,AEr),e(ce,yEr),e(ce,B4),e(B4,bve),e(bve,LEr),e(B4,xEr),e(B4,uU),e(uU,$Er),e(B4,kEr),e(ce,SEr),e(ce,P4),e(P4,vve),e(vve,REr),e(P4,BEr),e(P4,_U),e(_U,PEr),e(P4,IEr),e(ce,qEr),e(ce,I4),e(I4,Fve),e(Fve,NEr),e(I4,jEr),e(I4,bU),e(bU,DEr),e(I4,GEr),e(ce,OEr),e(ce,q4),e(q4,Tve),e(Tve,VEr),e(q4,XEr),e(q4,vU),e(vU,zEr),e(q4,QEr),e(ce,WEr),e(ce,N4),e(N4,Mve),e(Mve,HEr),e(N4,UEr),e(N4,FU),e(FU,JEr),e(N4,YEr),e(ce,KEr),e(ce,j4),e(j4,Eve),e(Eve,ZEr),e(j4,eCr),e(j4,TU),e(TU,oCr),e(j4,rCr),e(ce,tCr),e(ce,D4),e(D4,Cve),e(Cve,aCr),e(D4,nCr),e(D4,MU),e(MU,sCr),e(D4,lCr),e(ce,iCr),e(ce,G4),e(G4,wve),e(wve,dCr),e(G4,cCr),e(G4,EU),e(EU,fCr),e(G4,mCr),e(ce,gCr),e(ce,O4),e(O4,Ave),e(Ave,hCr),e(O4,pCr),e(O4,CU),e(CU,uCr),e(O4,_Cr),e(ce,bCr),e(ce,V4),e(V4,yve),e(yve,vCr),e(V4,FCr),e(V4,wU),e(wU,TCr),e(V4,MCr),e(Ir,ECr),M(X4,Ir,null),b(f,$qe,_),b(f,Fc,_),e(Fc,z4),e(z4,Lve),M(O8,Lve,null),e(Fc,CCr),e(Fc,xve),e(xve,wCr),b(f,kqe,_),b(f,dr,_),M(V8,dr,null),e(dr,ACr),e(dr,Tc),e(Tc,yCr),e(Tc,AU),e(AU,LCr),e(Tc,xCr),e(Tc,yU),e(yU,$Cr),e(Tc,kCr),e(dr,SCr),e(dr,X8),e(X8,RCr),e(X8,$ve),e($ve,BCr),e(X8,PCr),e(dr,ICr),e(dr,qt),M(z8,qt,null),e(qt,qCr),e(qt,kve),e(kve,NCr),e(qt,jCr),e(qt,Mc),e(Mc,DCr),e(Mc,Sve),e(Sve,GCr),e(Mc,OCr),e(Mc,LU),e(LU,VCr),e(Mc,XCr),e(qt,zCr),M(Q4,qt,null),e(dr,QCr),e(dr,qr),M(Q8,qr,null),e(qr,WCr),e(qr,Rve),e(Rve,HCr),e(qr,UCr),e(qr,fn),e(fn,JCr),e(fn,Bve),e(Bve,YCr),e(fn,KCr),e(fn,Pve),e(Pve,ZCr),e(fn,ewr),e(fn,Ive),e(Ive,owr),e(fn,rwr),e(qr,twr),e(qr,qve),e(qve,W4),e(W4,Nve),e(Nve,awr),e(W4,nwr),e(W4,xU),e(xU,swr),e(W4,lwr),e(qr,iwr),M(H4,qr,null),b(f,Sqe,_),b(f,Ec,_),e(Ec,U4),e(U4,jve),M(W8,jve,null),e(Ec,dwr),e(Ec,Dve),e(Dve,cwr),b(f,Rqe,_),b(f,cr,_),M(H8,cr,null),e(cr,fwr),e(cr,Cc),e(Cc,mwr),e(Cc,$U),e($U,gwr),e(Cc,hwr),e(Cc,kU),e(kU,pwr),e(Cc,uwr),e(cr,_wr),e(cr,U8),e(U8,bwr),e(U8,Gve),e(Gve,vwr),e(U8,Fwr),e(cr,Twr),e(cr,Nt),M(J8,Nt,null),e(Nt,Mwr),e(Nt,Ove),e(Ove,Ewr),e(Nt,Cwr),e(Nt,wc),e(wc,wwr),e(wc,Vve),e(Vve,Awr),e(wc,ywr),e(wc,SU),e(SU,Lwr),e(wc,xwr),e(Nt,$wr),M(J4,Nt,null),e(cr,kwr),e(cr,Nr),M(Y8,Nr,null),e(Nr,Swr),e(Nr,Xve),e(Xve,Rwr),e(Nr,Bwr),e(Nr,mn),e(mn,Pwr),e(mn,zve),e(zve,Iwr),e(mn,qwr),e(mn,Qve),e(Qve,Nwr),e(mn,jwr),e(mn,Wve),e(Wve,Dwr),e(mn,Gwr),e(Nr,Owr),e(Nr,Hve),e(Hve,Y4),e(Y4,Uve),e(Uve,Vwr),e(Y4,Xwr),e(Y4,RU),e(RU,zwr),e(Y4,Qwr),e(Nr,Wwr),M(K4,Nr,null),b(f,Bqe,_),b(f,Ac,_),e(Ac,Z4),e(Z4,Jve),M(K8,Jve,null),e(Ac,Hwr),e(Ac,Yve),e(Yve,Uwr),b(f,Pqe,_),b(f,fr,_),M(Z8,fr,null),e(fr,Jwr),e(fr,yc),e(yc,Ywr),e(yc,BU),e(BU,Kwr),e(yc,Zwr),e(yc,PU),e(PU,eAr),e(yc,oAr),e(fr,rAr),e(fr,ex),e(ex,tAr),e(ex,Kve),e(Kve,aAr),e(ex,nAr),e(fr,sAr),e(fr,jt),M(ox,jt,null),e(jt,lAr),e(jt,Zve),e(Zve,iAr),e(jt,dAr),e(jt,Lc),e(Lc,cAr),e(Lc,eFe),e(eFe,fAr),e(Lc,mAr),e(Lc,IU),e(IU,gAr),e(Lc,hAr),e(jt,pAr),M(eE,jt,null),e(fr,uAr),e(fr,jr),M(rx,jr,null),e(jr,_Ar),e(jr,oFe),e(oFe,bAr),e(jr,vAr),e(jr,gn),e(gn,FAr),e(gn,rFe),e(rFe,TAr),e(gn,MAr),e(gn,tFe),e(tFe,EAr),e(gn,CAr),e(gn,aFe),e(aFe,wAr),e(gn,AAr),e(jr,yAr),e(jr,re),e(re,oE),e(oE,nFe),e(nFe,LAr),e(oE,xAr),e(oE,qU),e(qU,$Ar),e(oE,kAr),e(re,SAr),e(re,rE),e(rE,sFe),e(sFe,RAr),e(rE,BAr),e(rE,NU),e(NU,PAr),e(rE,IAr),e(re,qAr),e(re,tE),e(tE,lFe),e(lFe,NAr),e(tE,jAr),e(tE,jU),e(jU,DAr),e(tE,GAr),e(re,OAr),e(re,aE),e(aE,iFe),e(iFe,VAr),e(aE,XAr),e(aE,DU),e(DU,zAr),e(aE,QAr),e(re,WAr),e(re,nE),e(nE,dFe),e(dFe,HAr),e(nE,UAr),e(nE,GU),e(GU,JAr),e(nE,YAr),e(re,KAr),e(re,sE),e(sE,cFe),e(cFe,ZAr),e(sE,e6r),e(sE,OU),e(OU,o6r),e(sE,r6r),e(re,t6r),e(re,lE),e(lE,fFe),e(fFe,a6r),e(lE,n6r),e(lE,VU),e(VU,s6r),e(lE,l6r),e(re,i6r),e(re,iE),e(iE,mFe),e(mFe,d6r),e(iE,c6r),e(iE,XU),e(XU,f6r),e(iE,m6r),e(re,g6r),e(re,dE),e(dE,gFe),e(gFe,h6r),e(dE,p6r),e(dE,zU),e(zU,u6r),e(dE,_6r),e(re,b6r),e(re,cE),e(cE,hFe),e(hFe,v6r),e(cE,F6r),e(cE,QU),e(QU,T6r),e(cE,M6r),e(re,E6r),e(re,fE),e(fE,pFe),e(pFe,C6r),e(fE,w6r),e(fE,WU),e(WU,A6r),e(fE,y6r),e(re,L6r),e(re,mE),e(mE,uFe),e(uFe,x6r),e(mE,$6r),e(mE,HU),e(HU,k6r),e(mE,S6r),e(re,R6r),e(re,gE),e(gE,_Fe),e(_Fe,B6r),e(gE,P6r),e(gE,UU),e(UU,I6r),e(gE,q6r),e(re,N6r),e(re,hE),e(hE,bFe),e(bFe,j6r),e(hE,D6r),e(hE,JU),e(JU,G6r),e(hE,O6r),e(re,V6r),e(re,pE),e(pE,vFe),e(vFe,X6r),e(pE,z6r),e(pE,YU),e(YU,Q6r),e(pE,W6r),e(re,H6r),e(re,uE),e(uE,FFe),e(FFe,U6r),e(uE,J6r),e(uE,KU),e(KU,Y6r),e(uE,K6r),e(re,Z6r),e(re,_E),e(_E,TFe),e(TFe,e0r),e(_E,o0r),e(_E,ZU),e(ZU,r0r),e(_E,t0r),e(re,a0r),e(re,bE),e(bE,MFe),e(MFe,n0r),e(bE,s0r),e(bE,eJ),e(eJ,l0r),e(bE,i0r),e(re,d0r),e(re,vE),e(vE,EFe),e(EFe,c0r),e(vE,f0r),e(vE,oJ),e(oJ,m0r),e(vE,g0r),e(re,h0r),e(re,FE),e(FE,CFe),e(CFe,p0r),e(FE,u0r),e(FE,rJ),e(rJ,_0r),e(FE,b0r),e(re,v0r),e(re,TE),e(TE,wFe),e(wFe,F0r),e(TE,T0r),e(TE,tJ),e(tJ,M0r),e(TE,E0r),e(re,C0r),e(re,ME),e(ME,AFe),e(AFe,w0r),e(ME,A0r),e(ME,aJ),e(aJ,y0r),e(ME,L0r),e(re,x0r),e(re,EE),e(EE,yFe),e(yFe,$0r),e(EE,k0r),e(EE,nJ),e(nJ,S0r),e(EE,R0r),e(re,B0r),e(re,CE),e(CE,LFe),e(LFe,P0r),e(CE,I0r),e(CE,sJ),e(sJ,q0r),e(CE,N0r),e(re,j0r),e(re,wE),e(wE,xFe),e(xFe,D0r),e(wE,G0r),e(wE,lJ),e(lJ,O0r),e(wE,V0r),e(jr,X0r),M(AE,jr,null),b(f,Iqe,_),b(f,xc,_),e(xc,yE),e(yE,$Fe),M(tx,$Fe,null),e(xc,z0r),e(xc,kFe),e(kFe,Q0r),b(f,qqe,_),b(f,mr,_),M(ax,mr,null),e(mr,W0r),e(mr,$c),e($c,H0r),e($c,iJ),e(iJ,U0r),e($c,J0r),e($c,dJ),e(dJ,Y0r),e($c,K0r),e(mr,Z0r),e(mr,nx),e(nx,eyr),e(nx,SFe),e(SFe,oyr),e(nx,ryr),e(mr,tyr),e(mr,Dt),M(sx,Dt,null),e(Dt,ayr),e(Dt,RFe),e(RFe,nyr),e(Dt,syr),e(Dt,kc),e(kc,lyr),e(kc,BFe),e(BFe,iyr),e(kc,dyr),e(kc,cJ),e(cJ,cyr),e(kc,fyr),e(Dt,myr),M(LE,Dt,null),e(mr,gyr),e(mr,Dr),M(lx,Dr,null),e(Dr,hyr),e(Dr,PFe),e(PFe,pyr),e(Dr,uyr),e(Dr,hn),e(hn,_yr),e(hn,IFe),e(IFe,byr),e(hn,vyr),e(hn,qFe),e(qFe,Fyr),e(hn,Tyr),e(hn,NFe),e(NFe,Myr),e(hn,Eyr),e(Dr,Cyr),e(Dr,ke),e(ke,xE),e(xE,jFe),e(jFe,wyr),e(xE,Ayr),e(xE,fJ),e(fJ,yyr),e(xE,Lyr),e(ke,xyr),e(ke,$E),e($E,DFe),e(DFe,$yr),e($E,kyr),e($E,mJ),e(mJ,Syr),e($E,Ryr),e(ke,Byr),e(ke,kE),e(kE,GFe),e(GFe,Pyr),e(kE,Iyr),e(kE,gJ),e(gJ,qyr),e(kE,Nyr),e(ke,jyr),e(ke,SE),e(SE,OFe),e(OFe,Dyr),e(SE,Gyr),e(SE,hJ),e(hJ,Oyr),e(SE,Vyr),e(ke,Xyr),e(ke,RE),e(RE,VFe),e(VFe,zyr),e(RE,Qyr),e(RE,pJ),e(pJ,Wyr),e(RE,Hyr),e(ke,Uyr),e(ke,BE),e(BE,XFe),e(XFe,Jyr),e(BE,Yyr),e(BE,uJ),e(uJ,Kyr),e(BE,Zyr),e(ke,eLr),e(ke,PE),e(PE,zFe),e(zFe,oLr),e(PE,rLr),e(PE,_J),e(_J,tLr),e(PE,aLr),e(ke,nLr),e(ke,IE),e(IE,QFe),e(QFe,sLr),e(IE,lLr),e(IE,bJ),e(bJ,iLr),e(IE,dLr),e(ke,cLr),e(ke,qE),e(qE,WFe),e(WFe,fLr),e(qE,mLr),e(qE,vJ),e(vJ,gLr),e(qE,hLr),e(Dr,pLr),M(NE,Dr,null),b(f,Nqe,_),b(f,Sc,_),e(Sc,jE),e(jE,HFe),M(ix,HFe,null),e(Sc,uLr),e(Sc,UFe),e(UFe,_Lr),b(f,jqe,_),b(f,gr,_),M(dx,gr,null),e(gr,bLr),e(gr,Rc),e(Rc,vLr),e(Rc,FJ),e(FJ,FLr),e(Rc,TLr),e(Rc,TJ),e(TJ,MLr),e(Rc,ELr),e(gr,CLr),e(gr,cx),e(cx,wLr),e(cx,JFe),e(JFe,ALr),e(cx,yLr),e(gr,LLr),e(gr,Gt),M(fx,Gt,null),e(Gt,xLr),e(Gt,YFe),e(YFe,$Lr),e(Gt,kLr),e(Gt,Bc),e(Bc,SLr),e(Bc,KFe),e(KFe,RLr),e(Bc,BLr),e(Bc,MJ),e(MJ,PLr),e(Bc,ILr),e(Gt,qLr),M(DE,Gt,null),e(gr,NLr),e(gr,Gr),M(mx,Gr,null),e(Gr,jLr),e(Gr,ZFe),e(ZFe,DLr),e(Gr,GLr),e(Gr,pn),e(pn,OLr),e(pn,eTe),e(eTe,VLr),e(pn,XLr),e(pn,oTe),e(oTe,zLr),e(pn,QLr),e(pn,rTe),e(rTe,WLr),e(pn,HLr),e(Gr,ULr),e(Gr,Ee),e(Ee,GE),e(GE,tTe),e(tTe,JLr),e(GE,YLr),e(GE,EJ),e(EJ,KLr),e(GE,ZLr),e(Ee,e8r),e(Ee,OE),e(OE,aTe),e(aTe,o8r),e(OE,r8r),e(OE,CJ),e(CJ,t8r),e(OE,a8r),e(Ee,n8r),e(Ee,VE),e(VE,nTe),e(nTe,s8r),e(VE,l8r),e(VE,wJ),e(wJ,i8r),e(VE,d8r),e(Ee,c8r),e(Ee,XE),e(XE,sTe),e(sTe,f8r),e(XE,m8r),e(XE,AJ),e(AJ,g8r),e(XE,h8r),e(Ee,p8r),e(Ee,zE),e(zE,lTe),e(lTe,u8r),e(zE,_8r),e(zE,yJ),e(yJ,b8r),e(zE,v8r),e(Ee,F8r),e(Ee,QE),e(QE,iTe),e(iTe,T8r),e(QE,M8r),e(QE,LJ),e(LJ,E8r),e(QE,C8r),e(Ee,w8r),e(Ee,WE),e(WE,dTe),e(dTe,A8r),e(WE,y8r),e(WE,xJ),e(xJ,L8r),e(WE,x8r),e(Ee,$8r),e(Ee,HE),e(HE,cTe),e(cTe,k8r),e(HE,S8r),e(HE,$J),e($J,R8r),e(HE,B8r),e(Ee,P8r),e(Ee,UE),e(UE,fTe),e(fTe,I8r),e(UE,q8r),e(UE,kJ),e(kJ,N8r),e(UE,j8r),e(Ee,D8r),e(Ee,JE),e(JE,mTe),e(mTe,G8r),e(JE,O8r),e(JE,SJ),e(SJ,V8r),e(JE,X8r),e(Ee,z8r),e(Ee,YE),e(YE,gTe),e(gTe,Q8r),e(YE,W8r),e(YE,RJ),e(RJ,H8r),e(YE,U8r),e(Ee,J8r),e(Ee,KE),e(KE,hTe),e(hTe,Y8r),e(KE,K8r),e(KE,BJ),e(BJ,Z8r),e(KE,exr),e(Gr,oxr),M(ZE,Gr,null),b(f,Dqe,_),b(f,Pc,_),e(Pc,eC),e(eC,pTe),M(gx,pTe,null),e(Pc,rxr),e(Pc,uTe),e(uTe,txr),b(f,Gqe,_),b(f,hr,_),M(hx,hr,null),e(hr,axr),e(hr,Ic),e(Ic,nxr),e(Ic,PJ),e(PJ,sxr),e(Ic,lxr),e(Ic,IJ),e(IJ,ixr),e(Ic,dxr),e(hr,cxr),e(hr,px),e(px,fxr),e(px,_Te),e(_Te,mxr),e(px,gxr),e(hr,hxr),e(hr,Ot),M(ux,Ot,null),e(Ot,pxr),e(Ot,bTe),e(bTe,uxr),e(Ot,_xr),e(Ot,qc),e(qc,bxr),e(qc,vTe),e(vTe,vxr),e(qc,Fxr),e(qc,qJ),e(qJ,Txr),e(qc,Mxr),e(Ot,Exr),M(oC,Ot,null),e(hr,Cxr),e(hr,Or),M(_x,Or,null),e(Or,wxr),e(Or,FTe),e(FTe,Axr),e(Or,yxr),e(Or,un),e(un,Lxr),e(un,TTe),e(TTe,xxr),e(un,$xr),e(un,MTe),e(MTe,kxr),e(un,Sxr),e(un,ETe),e(ETe,Rxr),e(un,Bxr),e(Or,Pxr),e(Or,Le),e(Le,rC),e(rC,CTe),e(CTe,Ixr),e(rC,qxr),e(rC,NJ),e(NJ,Nxr),e(rC,jxr),e(Le,Dxr),e(Le,tC),e(tC,wTe),e(wTe,Gxr),e(tC,Oxr),e(tC,jJ),e(jJ,Vxr),e(tC,Xxr),e(Le,zxr),e(Le,aC),e(aC,ATe),e(ATe,Qxr),e(aC,Wxr),e(aC,DJ),e(DJ,Hxr),e(aC,Uxr),e(Le,Jxr),e(Le,nC),e(nC,yTe),e(yTe,Yxr),e(nC,Kxr),e(nC,GJ),e(GJ,Zxr),e(nC,e9r),e(Le,o9r),e(Le,sC),e(sC,LTe),e(LTe,r9r),e(sC,t9r),e(sC,OJ),e(OJ,a9r),e(sC,n9r),e(Le,s9r),e(Le,lC),e(lC,xTe),e(xTe,l9r),e(lC,i9r),e(lC,VJ),e(VJ,d9r),e(lC,c9r),e(Le,f9r),e(Le,iC),e(iC,$Te),e($Te,m9r),e(iC,g9r),e(iC,XJ),e(XJ,h9r),e(iC,p9r),e(Le,u9r),e(Le,dC),e(dC,kTe),e(kTe,_9r),e(dC,b9r),e(dC,zJ),e(zJ,v9r),e(dC,F9r),e(Le,T9r),e(Le,cC),e(cC,STe),e(STe,M9r),e(cC,E9r),e(cC,QJ),e(QJ,C9r),e(cC,w9r),e(Le,A9r),e(Le,fC),e(fC,RTe),e(RTe,y9r),e(fC,L9r),e(fC,WJ),e(WJ,x9r),e(fC,$9r),e(Or,k9r),M(mC,Or,null),b(f,Oqe,_),b(f,Nc,_),e(Nc,gC),e(gC,BTe),M(bx,BTe,null),e(Nc,S9r),e(Nc,PTe),e(PTe,R9r),b(f,Vqe,_),b(f,pr,_),M(vx,pr,null),e(pr,B9r),e(pr,jc),e(jc,P9r),e(jc,HJ),e(HJ,I9r),e(jc,q9r),e(jc,UJ),e(UJ,N9r),e(jc,j9r),e(pr,D9r),e(pr,Fx),e(Fx,G9r),e(Fx,ITe),e(ITe,O9r),e(Fx,V9r),e(pr,X9r),e(pr,Vt),M(Tx,Vt,null),e(Vt,z9r),e(Vt,qTe),e(qTe,Q9r),e(Vt,W9r),e(Vt,Dc),e(Dc,H9r),e(Dc,NTe),e(NTe,U9r),e(Dc,J9r),e(Dc,JJ),e(JJ,Y9r),e(Dc,K9r),e(Vt,Z9r),M(hC,Vt,null),e(pr,e$r),e(pr,Vr),M(Mx,Vr,null),e(Vr,o$r),e(Vr,jTe),e(jTe,r$r),e(Vr,t$r),e(Vr,_n),e(_n,a$r),e(_n,DTe),e(DTe,n$r),e(_n,s$r),e(_n,GTe),e(GTe,l$r),e(_n,i$r),e(_n,OTe),e(OTe,d$r),e(_n,c$r),e(Vr,f$r),e(Vr,Se),e(Se,pC),e(pC,VTe),e(VTe,m$r),e(pC,g$r),e(pC,YJ),e(YJ,h$r),e(pC,p$r),e(Se,u$r),e(Se,uC),e(uC,XTe),e(XTe,_$r),e(uC,b$r),e(uC,KJ),e(KJ,v$r),e(uC,F$r),e(Se,T$r),e(Se,_C),e(_C,zTe),e(zTe,M$r),e(_C,E$r),e(_C,ZJ),e(ZJ,C$r),e(_C,w$r),e(Se,A$r),e(Se,bC),e(bC,QTe),e(QTe,y$r),e(bC,L$r),e(bC,eY),e(eY,x$r),e(bC,$$r),e(Se,k$r),e(Se,vC),e(vC,WTe),e(WTe,S$r),e(vC,R$r),e(vC,oY),e(oY,B$r),e(vC,P$r),e(Se,I$r),e(Se,FC),e(FC,HTe),e(HTe,q$r),e(FC,N$r),e(FC,rY),e(rY,j$r),e(FC,D$r),e(Se,G$r),e(Se,TC),e(TC,UTe),e(UTe,O$r),e(TC,V$r),e(TC,tY),e(tY,X$r),e(TC,z$r),e(Se,Q$r),e(Se,MC),e(MC,JTe),e(JTe,W$r),e(MC,H$r),e(MC,aY),e(aY,U$r),e(MC,J$r),e(Se,Y$r),e(Se,EC),e(EC,YTe),e(YTe,K$r),e(EC,Z$r),e(EC,nY),e(nY,ekr),e(EC,okr),e(Vr,rkr),M(CC,Vr,null),b(f,Xqe,_),b(f,Gc,_),e(Gc,wC),e(wC,KTe),M(Ex,KTe,null),e(Gc,tkr),e(Gc,ZTe),e(ZTe,akr),b(f,zqe,_),b(f,ur,_),M(Cx,ur,null),e(ur,nkr),e(ur,Oc),e(Oc,skr),e(Oc,sY),e(sY,lkr),e(Oc,ikr),e(Oc,lY),e(lY,dkr),e(Oc,ckr),e(ur,fkr),e(ur,wx),e(wx,mkr),e(wx,e7e),e(e7e,gkr),e(wx,hkr),e(ur,pkr),e(ur,Xt),M(Ax,Xt,null),e(Xt,ukr),e(Xt,o7e),e(o7e,_kr),e(Xt,bkr),e(Xt,Vc),e(Vc,vkr),e(Vc,r7e),e(r7e,Fkr),e(Vc,Tkr),e(Vc,iY),e(iY,Mkr),e(Vc,Ekr),e(Xt,Ckr),M(AC,Xt,null),e(ur,wkr),e(ur,Xr),M(yx,Xr,null),e(Xr,Akr),e(Xr,t7e),e(t7e,ykr),e(Xr,Lkr),e(Xr,bn),e(bn,xkr),e(bn,a7e),e(a7e,$kr),e(bn,kkr),e(bn,n7e),e(n7e,Skr),e(bn,Rkr),e(bn,s7e),e(s7e,Bkr),e(bn,Pkr),e(Xr,Ikr),e(Xr,xe),e(xe,yC),e(yC,l7e),e(l7e,qkr),e(yC,Nkr),e(yC,dY),e(dY,jkr),e(yC,Dkr),e(xe,Gkr),e(xe,LC),e(LC,i7e),e(i7e,Okr),e(LC,Vkr),e(LC,cY),e(cY,Xkr),e(LC,zkr),e(xe,Qkr),e(xe,xC),e(xC,d7e),e(d7e,Wkr),e(xC,Hkr),e(xC,fY),e(fY,Ukr),e(xC,Jkr),e(xe,Ykr),e(xe,$C),e($C,c7e),e(c7e,Kkr),e($C,Zkr),e($C,mY),e(mY,eSr),e($C,oSr),e(xe,rSr),e(xe,kC),e(kC,f7e),e(f7e,tSr),e(kC,aSr),e(kC,gY),e(gY,nSr),e(kC,sSr),e(xe,lSr),e(xe,SC),e(SC,m7e),e(m7e,iSr),e(SC,dSr),e(SC,hY),e(hY,cSr),e(SC,fSr),e(xe,mSr),e(xe,RC),e(RC,g7e),e(g7e,gSr),e(RC,hSr),e(RC,pY),e(pY,pSr),e(RC,uSr),e(xe,_Sr),e(xe,BC),e(BC,h7e),e(h7e,bSr),e(BC,vSr),e(BC,uY),e(uY,FSr),e(BC,TSr),e(xe,MSr),e(xe,PC),e(PC,p7e),e(p7e,ESr),e(PC,CSr),e(PC,_Y),e(_Y,wSr),e(PC,ASr),e(xe,ySr),e(xe,IC),e(IC,u7e),e(u7e,LSr),e(IC,xSr),e(IC,bY),e(bY,$Sr),e(IC,kSr),e(Xr,SSr),M(qC,Xr,null),b(f,Qqe,_),b(f,Xc,_),e(Xc,NC),e(NC,_7e),M(Lx,_7e,null),e(Xc,RSr),e(Xc,b7e),e(b7e,BSr),b(f,Wqe,_),b(f,_r,_),M(xx,_r,null),e(_r,PSr),e(_r,zc),e(zc,ISr),e(zc,vY),e(vY,qSr),e(zc,NSr),e(zc,FY),e(FY,jSr),e(zc,DSr),e(_r,GSr),e(_r,$x),e($x,OSr),e($x,v7e),e(v7e,VSr),e($x,XSr),e(_r,zSr),e(_r,zt),M(kx,zt,null),e(zt,QSr),e(zt,F7e),e(F7e,WSr),e(zt,HSr),e(zt,Qc),e(Qc,USr),e(Qc,T7e),e(T7e,JSr),e(Qc,YSr),e(Qc,TY),e(TY,KSr),e(Qc,ZSr),e(zt,eRr),M(jC,zt,null),e(_r,oRr),e(_r,zr),M(Sx,zr,null),e(zr,rRr),e(zr,M7e),e(M7e,tRr),e(zr,aRr),e(zr,vn),e(vn,nRr),e(vn,E7e),e(E7e,sRr),e(vn,lRr),e(vn,C7e),e(C7e,iRr),e(vn,dRr),e(vn,w7e),e(w7e,cRr),e(vn,fRr),e(zr,mRr),e(zr,$e),e($e,DC),e(DC,A7e),e(A7e,gRr),e(DC,hRr),e(DC,MY),e(MY,pRr),e(DC,uRr),e($e,_Rr),e($e,GC),e(GC,y7e),e(y7e,bRr),e(GC,vRr),e(GC,EY),e(EY,FRr),e(GC,TRr),e($e,MRr),e($e,OC),e(OC,L7e),e(L7e,ERr),e(OC,CRr),e(OC,CY),e(CY,wRr),e(OC,ARr),e($e,yRr),e($e,VC),e(VC,x7e),e(x7e,LRr),e(VC,xRr),e(VC,wY),e(wY,$Rr),e(VC,kRr),e($e,SRr),e($e,XC),e(XC,$7e),e($7e,RRr),e(XC,BRr),e(XC,AY),e(AY,PRr),e(XC,IRr),e($e,qRr),e($e,zC),e(zC,k7e),e(k7e,NRr),e(zC,jRr),e(zC,yY),e(yY,DRr),e(zC,GRr),e($e,ORr),e($e,QC),e(QC,S7e),e(S7e,VRr),e(QC,XRr),e(QC,LY),e(LY,zRr),e(QC,QRr),e($e,WRr),e($e,WC),e(WC,R7e),e(R7e,HRr),e(WC,URr),e(WC,xY),e(xY,JRr),e(WC,YRr),e($e,KRr),e($e,HC),e(HC,B7e),e(B7e,ZRr),e(HC,eBr),e(HC,$Y),e($Y,oBr),e(HC,rBr),e($e,tBr),e($e,UC),e(UC,P7e),e(P7e,aBr),e(UC,nBr),e(UC,kY),e(kY,sBr),e(UC,lBr),e(zr,iBr),M(JC,zr,null),b(f,Hqe,_),b(f,Wc,_),e(Wc,YC),e(YC,I7e),M(Rx,I7e,null),e(Wc,dBr),e(Wc,q7e),e(q7e,cBr),b(f,Uqe,_),b(f,br,_),M(Bx,br,null),e(br,fBr),e(br,Hc),e(Hc,mBr),e(Hc,SY),e(SY,gBr),e(Hc,hBr),e(Hc,RY),e(RY,pBr),e(Hc,uBr),e(br,_Br),e(br,Px),e(Px,bBr),e(Px,N7e),e(N7e,vBr),e(Px,FBr),e(br,TBr),e(br,Qt),M(Ix,Qt,null),e(Qt,MBr),e(Qt,j7e),e(j7e,EBr),e(Qt,CBr),e(Qt,Uc),e(Uc,wBr),e(Uc,D7e),e(D7e,ABr),e(Uc,yBr),e(Uc,BY),e(BY,LBr),e(Uc,xBr),e(Qt,$Br),M(KC,Qt,null),e(br,kBr),e(br,Qr),M(qx,Qr,null),e(Qr,SBr),e(Qr,G7e),e(G7e,RBr),e(Qr,BBr),e(Qr,Fn),e(Fn,PBr),e(Fn,O7e),e(O7e,IBr),e(Fn,qBr),e(Fn,V7e),e(V7e,NBr),e(Fn,jBr),e(Fn,X7e),e(X7e,DBr),e(Fn,GBr),e(Qr,OBr),e(Qr,De),e(De,ZC),e(ZC,z7e),e(z7e,VBr),e(ZC,XBr),e(ZC,PY),e(PY,zBr),e(ZC,QBr),e(De,WBr),e(De,ew),e(ew,Q7e),e(Q7e,HBr),e(ew,UBr),e(ew,IY),e(IY,JBr),e(ew,YBr),e(De,KBr),e(De,ow),e(ow,W7e),e(W7e,ZBr),e(ow,ePr),e(ow,qY),e(qY,oPr),e(ow,rPr),e(De,tPr),e(De,rw),e(rw,H7e),e(H7e,aPr),e(rw,nPr),e(rw,NY),e(NY,sPr),e(rw,lPr),e(De,iPr),e(De,tw),e(tw,U7e),e(U7e,dPr),e(tw,cPr),e(tw,jY),e(jY,fPr),e(tw,mPr),e(De,gPr),e(De,aw),e(aw,J7e),e(J7e,hPr),e(aw,pPr),e(aw,DY),e(DY,uPr),e(aw,_Pr),e(De,bPr),e(De,nw),e(nw,Y7e),e(Y7e,vPr),e(nw,FPr),e(nw,GY),e(GY,TPr),e(nw,MPr),e(De,EPr),e(De,sw),e(sw,K7e),e(K7e,CPr),e(sw,wPr),e(sw,OY),e(OY,APr),e(sw,yPr),e(Qr,LPr),M(lw,Qr,null),b(f,Jqe,_),b(f,Jc,_),e(Jc,iw),e(iw,Z7e),M(Nx,Z7e,null),e(Jc,xPr),e(Jc,eMe),e(eMe,$Pr),b(f,Yqe,_),b(f,vr,_),M(jx,vr,null),e(vr,kPr),e(vr,Yc),e(Yc,SPr),e(Yc,VY),e(VY,RPr),e(Yc,BPr),e(Yc,XY),e(XY,PPr),e(Yc,IPr),e(vr,qPr),e(vr,Dx),e(Dx,NPr),e(Dx,oMe),e(oMe,jPr),e(Dx,DPr),e(vr,GPr),e(vr,Wt),M(Gx,Wt,null),e(Wt,OPr),e(Wt,rMe),e(rMe,VPr),e(Wt,XPr),e(Wt,Kc),e(Kc,zPr),e(Kc,tMe),e(tMe,QPr),e(Kc,WPr),e(Kc,zY),e(zY,HPr),e(Kc,UPr),e(Wt,JPr),M(dw,Wt,null),e(vr,YPr),e(vr,Wr),M(Ox,Wr,null),e(Wr,KPr),e(Wr,aMe),e(aMe,ZPr),e(Wr,eIr),e(Wr,Tn),e(Tn,oIr),e(Tn,nMe),e(nMe,rIr),e(Tn,tIr),e(Tn,sMe),e(sMe,aIr),e(Tn,nIr),e(Tn,lMe),e(lMe,sIr),e(Tn,lIr),e(Wr,iIr),e(Wr,Ge),e(Ge,cw),e(cw,iMe),e(iMe,dIr),e(cw,cIr),e(cw,QY),e(QY,fIr),e(cw,mIr),e(Ge,gIr),e(Ge,fw),e(fw,dMe),e(dMe,hIr),e(fw,pIr),e(fw,WY),e(WY,uIr),e(fw,_Ir),e(Ge,bIr),e(Ge,mw),e(mw,cMe),e(cMe,vIr),e(mw,FIr),e(mw,HY),e(HY,TIr),e(mw,MIr),e(Ge,EIr),e(Ge,gw),e(gw,fMe),e(fMe,CIr),e(gw,wIr),e(gw,UY),e(UY,AIr),e(gw,yIr),e(Ge,LIr),e(Ge,hw),e(hw,mMe),e(mMe,xIr),e(hw,$Ir),e(hw,JY),e(JY,kIr),e(hw,SIr),e(Ge,RIr),e(Ge,pw),e(pw,gMe),e(gMe,BIr),e(pw,PIr),e(pw,YY),e(YY,IIr),e(pw,qIr),e(Ge,NIr),e(Ge,uw),e(uw,hMe),e(hMe,jIr),e(uw,DIr),e(uw,KY),e(KY,GIr),e(uw,OIr),e(Ge,VIr),e(Ge,_w),e(_w,pMe),e(pMe,XIr),e(_w,zIr),e(_w,ZY),e(ZY,QIr),e(_w,WIr),e(Wr,HIr),M(bw,Wr,null),b(f,Kqe,_),b(f,Zc,_),e(Zc,vw),e(vw,uMe),M(Vx,uMe,null),e(Zc,UIr),e(Zc,_Me),e(_Me,JIr),b(f,Zqe,_),b(f,Fr,_),M(Xx,Fr,null),e(Fr,YIr),e(Fr,ef),e(ef,KIr),e(ef,eK),e(eK,ZIr),e(ef,eqr),e(ef,oK),e(oK,oqr),e(ef,rqr),e(Fr,tqr),e(Fr,zx),e(zx,aqr),e(zx,bMe),e(bMe,nqr),e(zx,sqr),e(Fr,lqr),e(Fr,Ht),M(Qx,Ht,null),e(Ht,iqr),e(Ht,vMe),e(vMe,dqr),e(Ht,cqr),e(Ht,of),e(of,fqr),e(of,FMe),e(FMe,mqr),e(of,gqr),e(of,rK),e(rK,hqr),e(of,pqr),e(Ht,uqr),M(Fw,Ht,null),e(Fr,_qr),e(Fr,Hr),M(Wx,Hr,null),e(Hr,bqr),e(Hr,TMe),e(TMe,vqr),e(Hr,Fqr),e(Hr,Mn),e(Mn,Tqr),e(Mn,MMe),e(MMe,Mqr),e(Mn,Eqr),e(Mn,EMe),e(EMe,Cqr),e(Mn,wqr),e(Mn,CMe),e(CMe,Aqr),e(Mn,yqr),e(Hr,Lqr),e(Hr,wMe),e(wMe,Tw),e(Tw,AMe),e(AMe,xqr),e(Tw,$qr),e(Tw,tK),e(tK,kqr),e(Tw,Sqr),e(Hr,Rqr),M(Mw,Hr,null),b(f,eNe,_),b(f,rf,_),e(rf,Ew),e(Ew,yMe),M(Hx,yMe,null),e(rf,Bqr),e(rf,LMe),e(LMe,Pqr),b(f,oNe,_),b(f,Tr,_),M(Ux,Tr,null),e(Tr,Iqr),e(Tr,tf),e(tf,qqr),e(tf,aK),e(aK,Nqr),e(tf,jqr),e(tf,nK),e(nK,Dqr),e(tf,Gqr),e(Tr,Oqr),e(Tr,Jx),e(Jx,Vqr),e(Jx,xMe),e(xMe,Xqr),e(Jx,zqr),e(Tr,Qqr),e(Tr,Ut),M(Yx,Ut,null),e(Ut,Wqr),e(Ut,$Me),e($Me,Hqr),e(Ut,Uqr),e(Ut,af),e(af,Jqr),e(af,kMe),e(kMe,Yqr),e(af,Kqr),e(af,sK),e(sK,Zqr),e(af,eNr),e(Ut,oNr),M(Cw,Ut,null),e(Tr,rNr),e(Tr,Ur),M(Kx,Ur,null),e(Ur,tNr),e(Ur,SMe),e(SMe,aNr),e(Ur,nNr),e(Ur,En),e(En,sNr),e(En,RMe),e(RMe,lNr),e(En,iNr),e(En,BMe),e(BMe,dNr),e(En,cNr),e(En,PMe),e(PMe,fNr),e(En,mNr),e(Ur,gNr),e(Ur,Zx),e(Zx,ww),e(ww,IMe),e(IMe,hNr),e(ww,pNr),e(ww,lK),e(lK,uNr),e(ww,_Nr),e(Zx,bNr),e(Zx,Aw),e(Aw,qMe),e(qMe,vNr),e(Aw,FNr),e(Aw,iK),e(iK,TNr),e(Aw,MNr),e(Ur,ENr),M(yw,Ur,null),b(f,rNe,_),b(f,nf,_),e(nf,Lw),e(Lw,NMe),M(e9,NMe,null),e(nf,CNr),e(nf,jMe),e(jMe,wNr),b(f,tNe,_),b(f,Mr,_),M(o9,Mr,null),e(Mr,ANr),e(Mr,sf),e(sf,yNr),e(sf,dK),e(dK,LNr),e(sf,xNr),e(sf,cK),e(cK,$Nr),e(sf,kNr),e(Mr,SNr),e(Mr,r9),e(r9,RNr),e(r9,DMe),e(DMe,BNr),e(r9,PNr),e(Mr,INr),e(Mr,Jt),M(t9,Jt,null),e(Jt,qNr),e(Jt,GMe),e(GMe,NNr),e(Jt,jNr),e(Jt,lf),e(lf,DNr),e(lf,OMe),e(OMe,GNr),e(lf,ONr),e(lf,fK),e(fK,VNr),e(lf,XNr),e(Jt,zNr),M(xw,Jt,null),e(Mr,QNr),e(Mr,Jr),M(a9,Jr,null),e(Jr,WNr),e(Jr,VMe),e(VMe,HNr),e(Jr,UNr),e(Jr,Cn),e(Cn,JNr),e(Cn,XMe),e(XMe,YNr),e(Cn,KNr),e(Cn,zMe),e(zMe,ZNr),e(Cn,ejr),e(Cn,QMe),e(QMe,ojr),e(Cn,rjr),e(Jr,tjr),e(Jr,WMe),e(WMe,$w),e($w,HMe),e(HMe,ajr),e($w,njr),e($w,mK),e(mK,sjr),e($w,ljr),e(Jr,ijr),M(kw,Jr,null),aNe=!0},p(f,[_]){const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),_f.$set(n9);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),_g.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),Jg.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Ch.$set(YMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),wh.$set(s9);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),Vh.$set(KMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Xh.$set(wn);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),Wh.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),Nu.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),Du.$set(o4e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),L_.$set(l9);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),$_.$set(r4e);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),h2.$set(i9);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),u2.$set(t4e);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),Z2.$set(d9);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),o1.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),F1.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),M1.$set(s4e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),_b.$set(df);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),vb.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),Jb.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),Kb.$set(d4e);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),n5.$set(c9);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),l5.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),O5.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),X5.$set(m4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),k3.$set(Kr);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),R3.$set(f9);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),I3.$set(g4e);const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),N3.$set(m9);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),K3.$set(h4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),ev.$set(Zr);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),tv.$set(p4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),nv.$set(cf);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),pv.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),_v.$set(_4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Ev.$set(y);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),wv.$set(Sw);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),Pv.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),qv.$set(v4e);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),Gv.$set(Rw);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),Vv.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),Uv.$set(T4e);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),Yv.$set(Bw);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),rF.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),aF.$set(E4e);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),iF.$set(Pw);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),cF.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),gF.$set(w4e);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),pF.$set(Iw);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),TF.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),EF.$set(y4e);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),AF.$set(qw);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),LF.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),vT.$set(x4e);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),TT.$set(Nw);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),zT.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),WT.$set(k4e);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),s7.$set(jw);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),i7.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),m7.$set(R4e);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),h7.$set(Dw);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),P7.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),q7.$set(P4e);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),H7.$set(Gw);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),J7.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),EM.$set(q4e);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),wM.$set(Ow);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),VM.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),zM.$set(j4e);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),HM.$set(Vw);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),JM.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),KM.$set(G4e);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),e4.$set(Xw);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),T4.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),E4.$set(V4e);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),X4.$set(zw);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),Q4.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),H4.$set(z4e);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),J4.$set(Qw);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),K4.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),eE.$set(W4e);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),AE.$set(Ww);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),LE.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),NE.$set(U4e);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),DE.$set(Hw);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),ZE.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),oC.$set(Y4e);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),mC.$set(Uw);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),hC.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),CC.$set(Z4e);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),AC.$set(Jw);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),qC.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),jC.$set(oEe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),JC.$set(Yw);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),KC.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),lw.$set(tEe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),dw.$set(Kw);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),bw.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),Fw.$set(nEe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),Mw.$set(Zw);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),Cw.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),yw.$set(lEe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),xw.$set(eA);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),kw.$set(iEe)},i(f){aNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(_f.$$.fragment,f),E(r0.$$.fragment,f),E(t0.$$.fragment,f),E(s0.$$.fragment,f),E(_g.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(d0.$$.fragment,f),E(m0.$$.fragment,f),E(Jg.$$.fragment,f),E(g0.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(b0.$$.fragment,f),E(Ch.$$.fragment,f),E(wh.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(C0.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(y0.$$.fragment,f),E(x0.$$.fragment,f),E(Wh.$$.fragment,f),E($0.$$.fragment,f),E(Nu.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(B0.$$.fragment,f),E(Du.$$.fragment,f),E(P0.$$.fragment,f),E(L_.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E($_.$$.fragment,f),E(D0.$$.fragment,f),E(h2.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(u2.$$.fragment,f),E(z0.$$.fragment,f),E(Z2.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(U0.$$.fragment,f),E(o1.$$.fragment,f),E(J0.$$.fragment,f),E(F1.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(ey.$$.fragment,f),E(M1.$$.fragment,f),E(oy.$$.fragment,f),E(_b.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(vb.$$.fragment,f),E(sy.$$.fragment,f),E(Jb.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Kb.$$.fragment,f),E(fy.$$.fragment,f),E(n5.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(l5.$$.fragment,f),E(uy.$$.fragment,f),E(O5.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(X5.$$.fragment,f),E(Ty.$$.fragment,f),E(k3.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(R3.$$.fragment,f),E(Ay.$$.fragment,f),E(I3.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(N3.$$.fragment,f),E(ky.$$.fragment,f),E(K3.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(ev.$$.fragment,f),E(Iy.$$.fragment,f),E(tv.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(nv.$$.fragment,f),E(Gy.$$.fragment,f),E(pv.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(_v.$$.fragment,f),E(Qy.$$.fragment,f),E(Ev.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(wv.$$.fragment,f),E(Yy.$$.fragment,f),E(Pv.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(qv.$$.fragment,f),E(rL.$$.fragment,f),E(Gv.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Vv.$$.fragment,f),E(iL.$$.fragment,f),E(Uv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Yv.$$.fragment,f),E(gL.$$.fragment,f),E(rF.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(aF.$$.fragment,f),E(bL.$$.fragment,f),E(iF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(cF.$$.fragment,f),E(CL.$$.fragment,f),E(gF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(pF.$$.fragment,f),E(xL.$$.fragment,f),E(TF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(EF.$$.fragment,f),E(BL.$$.fragment,f),E(AF.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(LF.$$.fragment,f),E(jL.$$.fragment,f),E(vT.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(TT.$$.fragment,f),E(XL.$$.fragment,f),E(zT.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(WT.$$.fragment,f),E(UL.$$.fragment,f),E(s7.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(i7.$$.fragment,f),E(e8.$$.fragment,f),E(m7.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(h7.$$.fragment,f),E(n8.$$.fragment,f),E(P7.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(q7.$$.fragment,f),E(c8.$$.fragment,f),E(H7.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(J7.$$.fragment,f),E(p8.$$.fragment,f),E(EM.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(wM.$$.fragment,f),E(F8.$$.fragment,f),E(VM.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(zM.$$.fragment,f),E(w8.$$.fragment,f),E(HM.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(JM.$$.fragment,f),E(k8.$$.fragment,f),E(KM.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(e4.$$.fragment,f),E(I8.$$.fragment,f),E(T4.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(E4.$$.fragment,f),E(G8.$$.fragment,f),E(X4.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(Q4.$$.fragment,f),E(Q8.$$.fragment,f),E(H4.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(J4.$$.fragment,f),E(Y8.$$.fragment,f),E(K4.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(eE.$$.fragment,f),E(rx.$$.fragment,f),E(AE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(LE.$$.fragment,f),E(lx.$$.fragment,f),E(NE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(DE.$$.fragment,f),E(mx.$$.fragment,f),E(ZE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(oC.$$.fragment,f),E(_x.$$.fragment,f),E(mC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(hC.$$.fragment,f),E(Mx.$$.fragment,f),E(CC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(AC.$$.fragment,f),E(yx.$$.fragment,f),E(qC.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(jC.$$.fragment,f),E(Sx.$$.fragment,f),E(JC.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(KC.$$.fragment,f),E(qx.$$.fragment,f),E(lw.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(dw.$$.fragment,f),E(Ox.$$.fragment,f),E(bw.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(Fw.$$.fragment,f),E(Wx.$$.fragment,f),E(Mw.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(Cw.$$.fragment,f),E(Kx.$$.fragment,f),E(yw.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(xw.$$.fragment,f),E(a9.$$.fragment,f),E(kw.$$.fragment,f),aNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(_f.$$.fragment,f),C(r0.$$.fragment,f),C(t0.$$.fragment,f),C(s0.$$.fragment,f),C(_g.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(d0.$$.fragment,f),C(m0.$$.fragment,f),C(Jg.$$.fragment,f),C(g0.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(b0.$$.fragment,f),C(Ch.$$.fragment,f),C(wh.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(C0.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(y0.$$.fragment,f),C(x0.$$.fragment,f),C(Wh.$$.fragment,f),C($0.$$.fragment,f),C(Nu.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(B0.$$.fragment,f),C(Du.$$.fragment,f),C(P0.$$.fragment,f),C(L_.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C($_.$$.fragment,f),C(D0.$$.fragment,f),C(h2.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(u2.$$.fragment,f),C(z0.$$.fragment,f),C(Z2.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(U0.$$.fragment,f),C(o1.$$.fragment,f),C(J0.$$.fragment,f),C(F1.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(ey.$$.fragment,f),C(M1.$$.fragment,f),C(oy.$$.fragment,f),C(_b.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(vb.$$.fragment,f),C(sy.$$.fragment,f),C(Jb.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Kb.$$.fragment,f),C(fy.$$.fragment,f),C(n5.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(l5.$$.fragment,f),C(uy.$$.fragment,f),C(O5.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(X5.$$.fragment,f),C(Ty.$$.fragment,f),C(k3.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(R3.$$.fragment,f),C(Ay.$$.fragment,f),C(I3.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(N3.$$.fragment,f),C(ky.$$.fragment,f),C(K3.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(ev.$$.fragment,f),C(Iy.$$.fragment,f),C(tv.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(nv.$$.fragment,f),C(Gy.$$.fragment,f),C(pv.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(_v.$$.fragment,f),C(Qy.$$.fragment,f),C(Ev.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(wv.$$.fragment,f),C(Yy.$$.fragment,f),C(Pv.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(qv.$$.fragment,f),C(rL.$$.fragment,f),C(Gv.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Vv.$$.fragment,f),C(iL.$$.fragment,f),C(Uv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Yv.$$.fragment,f),C(gL.$$.fragment,f),C(rF.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(aF.$$.fragment,f),C(bL.$$.fragment,f),C(iF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(cF.$$.fragment,f),C(CL.$$.fragment,f),C(gF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(pF.$$.fragment,f),C(xL.$$.fragment,f),C(TF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(EF.$$.fragment,f),C(BL.$$.fragment,f),C(AF.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(LF.$$.fragment,f),C(jL.$$.fragment,f),C(vT.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(TT.$$.fragment,f),C(XL.$$.fragment,f),C(zT.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(WT.$$.fragment,f),C(UL.$$.fragment,f),C(s7.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(i7.$$.fragment,f),C(e8.$$.fragment,f),C(m7.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(h7.$$.fragment,f),C(n8.$$.fragment,f),C(P7.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(q7.$$.fragment,f),C(c8.$$.fragment,f),C(H7.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(J7.$$.fragment,f),C(p8.$$.fragment,f),C(EM.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(wM.$$.fragment,f),C(F8.$$.fragment,f),C(VM.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(zM.$$.fragment,f),C(w8.$$.fragment,f),C(HM.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(JM.$$.fragment,f),C(k8.$$.fragment,f),C(KM.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(e4.$$.fragment,f),C(I8.$$.fragment,f),C(T4.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(E4.$$.fragment,f),C(G8.$$.fragment,f),C(X4.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(Q4.$$.fragment,f),C(Q8.$$.fragment,f),C(H4.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(J4.$$.fragment,f),C(Y8.$$.fragment,f),C(K4.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(eE.$$.fragment,f),C(rx.$$.fragment,f),C(AE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(LE.$$.fragment,f),C(lx.$$.fragment,f),C(NE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(DE.$$.fragment,f),C(mx.$$.fragment,f),C(ZE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(oC.$$.fragment,f),C(_x.$$.fragment,f),C(mC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(hC.$$.fragment,f),C(Mx.$$.fragment,f),C(CC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(AC.$$.fragment,f),C(yx.$$.fragment,f),C(qC.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(jC.$$.fragment,f),C(Sx.$$.fragment,f),C(JC.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(KC.$$.fragment,f),C(qx.$$.fragment,f),C(lw.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(dw.$$.fragment,f),C(Ox.$$.fragment,f),C(bw.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(Fw.$$.fragment,f),C(Wx.$$.fragment,f),C(Mw.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(Cw.$$.fragment,f),C(Kx.$$.fragment,f),C(yw.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(xw.$$.fragment,f),C(a9.$$.fragment,f),C(kw.$$.fragment,f),aNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(oIe),f&&t(hi),w(e0),f&&t(rIe),f&&t($n),f&&t(tIe),w(o0,f),f&&t(aIe),f&&t(M$),f&&t(nIe),w(_f,f),f&&t(sIe),f&&t(pi),w(r0),f&&t(lIe),f&&t(Co),w(t0),w(s0),w(_g),w(l0),f&&t(iIe),f&&t(_i),w(i0),f&&t(dIe),f&&t(wo),w(d0),w(m0),w(Jg),w(g0),f&&t(cIe),f&&t(bi),w(h0),f&&t(fIe),f&&t(Ao),w(p0),w(b0),w(Ch),w(wh),w(v0),f&&t(mIe),f&&t(vi),w(F0),f&&t(gIe),f&&t(yo),w(T0),w(C0),w(Vh),w(Xh),w(w0),f&&t(hIe),f&&t(Ti),w(A0),f&&t(pIe),f&&t(Lo),w(y0),w(x0),w(Wh),w($0),w(Nu),f&&t(uIe),f&&t(Ci),w(k0),f&&t(_Ie),f&&t(xo),w(S0),w(B0),w(Du),w(P0),w(L_),f&&t(bIe),f&&t(yi),w(I0),f&&t(vIe),f&&t($o),w(q0),w(j0),w($_),w(D0),w(h2),f&&t(FIe),f&&t($i),w(G0),f&&t(TIe),f&&t(ko),w(O0),w(X0),w(u2),w(z0),w(Z2),f&&t(MIe),f&&t(Ri),w(Q0),f&&t(EIe),f&&t(So),w(W0),w(U0),w(o1),w(J0),w(F1),f&&t(CIe),f&&t(Ii),w(Y0),f&&t(wIe),f&&t(Ro),w(K0),w(ey),w(M1),w(oy),w(_b),f&&t(AIe),f&&t(ji),w(ry),f&&t(yIe),f&&t(Bo),w(ty),w(ny),w(vb),w(sy),w(Jb),f&&t(LIe),f&&t(Oi),w(ly),f&&t(xIe),f&&t(Po),w(iy),w(cy),w(Kb),w(fy),w(n5),f&&t($Ie),f&&t(zi),w(my),f&&t(kIe),f&&t(Io),w(gy),w(py),w(l5),w(uy),w(O5),f&&t(SIe),f&&t(Hi),w(_y),f&&t(RIe),f&&t(qo),w(by),w(Fy),w(X5),w(Ty),w(k3),f&&t(BIe),f&&t(Yi),w(My),f&&t(PIe),f&&t(No),w(Ey),w(wy),w(R3),w(Ay),w(I3),f&&t(IIe),f&&t(ed),w(yy),f&&t(qIe),f&&t(jo),w(Ly),w($y),w(N3),w(ky),w(K3),f&&t(NIe),f&&t(td),w(Sy),f&&t(jIe),f&&t(Do),w(Ry),w(Py),w(ev),w(Iy),w(tv),f&&t(DIe),f&&t(sd),w(qy),f&&t(GIe),f&&t(Go),w(Ny),w(Dy),w(nv),w(Gy),w(pv),f&&t(OIe),f&&t(dd),w(Oy),f&&t(VIe),f&&t(Oo),w(Vy),w(zy),w(_v),w(Qy),w(Ev),f&&t(XIe),f&&t(md),w(Wy),f&&t(zIe),f&&t(Vo),w(Hy),w(Jy),w(wv),w(Yy),w(Pv),f&&t(QIe),f&&t(pd),w(Ky),f&&t(WIe),f&&t(Xo),w(Zy),w(oL),w(qv),w(rL),w(Gv),f&&t(HIe),f&&t(bd),w(aL),f&&t(UIe),f&&t(zo),w(nL),w(lL),w(Vv),w(iL),w(Uv),f&&t(JIe),f&&t(Td),w(dL),f&&t(YIe),f&&t(Qo),w(cL),w(mL),w(Yv),w(gL),w(rF),f&&t(KIe),f&&t(wd),w(hL),f&&t(ZIe),f&&t(Wo),w(pL),w(_L),w(aF),w(bL),w(iF),f&&t(eqe),f&&t(Ld),w(FL),f&&t(oqe),f&&t(Ho),w(TL),w(EL),w(cF),w(CL),w(gF),f&&t(rqe),f&&t(kd),w(wL),f&&t(tqe),f&&t(Uo),w(AL),w(LL),w(pF),w(xL),w(TF),f&&t(aqe),f&&t(Bd),w($L),f&&t(nqe),f&&t(Jo),w(kL),w(RL),w(EF),w(BL),w(AF),f&&t(sqe),f&&t(qd),w(PL),f&&t(lqe),f&&t(Yo),w(IL),w(NL),w(LF),w(jL),w(vT),f&&t(iqe),f&&t(Dd),w(DL),f&&t(dqe),f&&t(Ko),w(GL),w(VL),w(TT),w(XL),w(zT),f&&t(cqe),f&&t(Vd),w(zL),f&&t(fqe),f&&t(Zo),w(QL),w(HL),w(WT),w(UL),w(s7),f&&t(mqe),f&&t(Qd),w(JL),f&&t(gqe),f&&t(er),w(YL),w(ZL),w(i7),w(e8),w(m7),f&&t(hqe),f&&t(Jd),w(o8),f&&t(pqe),f&&t(or),w(r8),w(a8),w(h7),w(n8),w(P7),f&&t(uqe),f&&t(Zd),w(s8),f&&t(_qe),f&&t(rr),w(l8),w(d8),w(q7),w(c8),w(H7),f&&t(bqe),f&&t(rc),w(f8),f&&t(vqe),f&&t(tr),w(m8),w(h8),w(J7),w(p8),w(EM),f&&t(Fqe),f&&t(nc),w(u8),f&&t(Tqe),f&&t(ar),w(_8),w(v8),w(wM),w(F8),w(VM),f&&t(Mqe),f&&t(ic),w(T8),f&&t(Eqe),f&&t(nr),w(M8),w(C8),w(zM),w(w8),w(HM),f&&t(Cqe),f&&t(fc),w(y8),f&&t(wqe),f&&t(sr),w(L8),w($8),w(JM),w(k8),w(KM),f&&t(Aqe),f&&t(hc),w(S8),f&&t(yqe),f&&t(lr),w(R8),w(P8),w(e4),w(I8),w(T4),f&&t(Lqe),f&&t(_c),w(q8),f&&t(xqe),f&&t(ir),w(N8),w(D8),w(E4),w(G8),w(X4),f&&t($qe),f&&t(Fc),w(O8),f&&t(kqe),f&&t(dr),w(V8),w(z8),w(Q4),w(Q8),w(H4),f&&t(Sqe),f&&t(Ec),w(W8),f&&t(Rqe),f&&t(cr),w(H8),w(J8),w(J4),w(Y8),w(K4),f&&t(Bqe),f&&t(Ac),w(K8),f&&t(Pqe),f&&t(fr),w(Z8),w(ox),w(eE),w(rx),w(AE),f&&t(Iqe),f&&t(xc),w(tx),f&&t(qqe),f&&t(mr),w(ax),w(sx),w(LE),w(lx),w(NE),f&&t(Nqe),f&&t(Sc),w(ix),f&&t(jqe),f&&t(gr),w(dx),w(fx),w(DE),w(mx),w(ZE),f&&t(Dqe),f&&t(Pc),w(gx),f&&t(Gqe),f&&t(hr),w(hx),w(ux),w(oC),w(_x),w(mC),f&&t(Oqe),f&&t(Nc),w(bx),f&&t(Vqe),f&&t(pr),w(vx),w(Tx),w(hC),w(Mx),w(CC),f&&t(Xqe),f&&t(Gc),w(Ex),f&&t(zqe),f&&t(ur),w(Cx),w(Ax),w(AC),w(yx),w(qC),f&&t(Qqe),f&&t(Xc),w(Lx),f&&t(Wqe),f&&t(_r),w(xx),w(kx),w(jC),w(Sx),w(JC),f&&t(Hqe),f&&t(Wc),w(Rx),f&&t(Uqe),f&&t(br),w(Bx),w(Ix),w(KC),w(qx),w(lw),f&&t(Jqe),f&&t(Jc),w(Nx),f&&t(Yqe),f&&t(vr),w(jx),w(Gx),w(dw),w(Ox),w(bw),f&&t(Kqe),f&&t(Zc),w(Vx),f&&t(Zqe),f&&t(Fr),w(Xx),w(Qx),w(Fw),w(Wx),w(Mw),f&&t(eNe),f&&t(rf),w(Hx),f&&t(oNe),f&&t(Tr),w(Ux),w(Yx),w(Cw),w(Kx),w(yw),f&&t(rNe),f&&t(nf),w(e9),f&&t(tNe),f&&t(Mr),w(o9),w(t9),w(xw),w(a9),w(kw)}}}const VLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function XLt(L){return X0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class YLt extends D0t{constructor(g){super();G0t(this,g,XLt,OLt,O0t,{})}}export{YLt as default,VLt as metadata};
