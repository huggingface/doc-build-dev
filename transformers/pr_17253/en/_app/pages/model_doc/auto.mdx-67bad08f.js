import{S as OLt,i as VLt,s as XLt,e as a,k as l,w as F,t as o,M as zLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as WLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function QLt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,l6,pf,je,We,gi,yn,i6,Ln,xn,d6,hi,$n,c6,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),l6=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),i6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),d6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),c6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var L$=s(p);m=r(L$,"NewModelConfig"),L$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var x$=s(ci);hf=r(x$,"model_type"),x$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var $$=s(fi);mi=r($$,'"new-model"'),$$.forEach(t),l6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),i6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var k$=s(Ln);xn=r(k$,"PreTrainedModel"),k$.forEach(t),d6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),c6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var S$=s(pi);_f=r(S$,"NewModelConfig"),S$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,l6),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,i6),e(je,Ln),e(Ln,xn),e(je,d6),e(je,hi),e(hi,$n),e(je,c6),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,l6,pf,je,We,gi,yn,i6,Ln,xn,d6,hi,$n,c6,pi,_f,Ca,Qe,Ae,L$,_i,x$,$$,Eo,wa,k$,uf,S$,KDe,GIe,ui,bf,Aee,f6,ZDe,yee,eGe,OIe,kn,oGe,Lee,rGe,tGe,xee,aGe,nGe,VIe,m6,XIe,R$,sGe,zIe,vf,WIe,bi,Ff,$ee,g6,lGe,kee,iGe,QIe,Co,h6,dGe,p6,cGe,P$,fGe,mGe,gGe,_6,hGe,See,pGe,_Ge,uGe,Er,u6,bGe,Ree,vGe,FGe,vi,TGe,Pee,MGe,EGe,Bee,CGe,wGe,AGe,A,Tf,Iee,yGe,LGe,B$,xGe,$Ge,kGe,Mf,qee,SGe,RGe,I$,PGe,BGe,IGe,Ef,Nee,qGe,NGe,q$,jGe,DGe,GGe,Cf,jee,OGe,VGe,N$,XGe,zGe,WGe,wf,Dee,QGe,HGe,j$,UGe,JGe,YGe,Af,Gee,KGe,ZGe,D$,eOe,oOe,rOe,yf,Oee,tOe,aOe,G$,nOe,sOe,lOe,Lf,Vee,iOe,dOe,O$,cOe,fOe,mOe,xf,Xee,gOe,hOe,V$,pOe,_Oe,uOe,$f,zee,bOe,vOe,X$,FOe,TOe,MOe,kf,Wee,EOe,COe,z$,wOe,AOe,yOe,Sf,Qee,LOe,xOe,W$,$Oe,kOe,SOe,Rf,Hee,ROe,POe,Q$,BOe,IOe,qOe,Pf,Uee,NOe,jOe,H$,DOe,GOe,OOe,Bf,Jee,VOe,XOe,U$,zOe,WOe,QOe,If,Yee,HOe,UOe,J$,JOe,YOe,KOe,qf,Kee,ZOe,eVe,Y$,oVe,rVe,tVe,Nf,Zee,aVe,nVe,K$,sVe,lVe,iVe,jf,eoe,dVe,cVe,Z$,fVe,mVe,gVe,Df,ooe,hVe,pVe,ek,_Ve,uVe,bVe,Gf,roe,vVe,FVe,ok,TVe,MVe,EVe,Of,toe,CVe,wVe,rk,AVe,yVe,LVe,Vf,aoe,xVe,$Ve,tk,kVe,SVe,RVe,Xf,noe,PVe,BVe,ak,IVe,qVe,NVe,zf,soe,jVe,DVe,nk,GVe,OVe,VVe,Wf,loe,XVe,zVe,sk,WVe,QVe,HVe,Qf,ioe,UVe,JVe,lk,YVe,KVe,ZVe,Hf,doe,eXe,oXe,ik,rXe,tXe,aXe,Uf,coe,nXe,sXe,dk,lXe,iXe,dXe,Jf,foe,cXe,fXe,ck,mXe,gXe,hXe,Yf,moe,pXe,_Xe,fk,uXe,bXe,vXe,Kf,goe,FXe,TXe,mk,MXe,EXe,CXe,Zf,hoe,wXe,AXe,gk,yXe,LXe,xXe,em,poe,$Xe,kXe,hk,SXe,RXe,PXe,om,_oe,BXe,IXe,pk,qXe,NXe,jXe,rm,uoe,DXe,GXe,_k,OXe,VXe,XXe,tm,boe,zXe,WXe,uk,QXe,HXe,UXe,am,voe,JXe,YXe,bk,KXe,ZXe,eze,nm,Foe,oze,rze,vk,tze,aze,nze,sm,Toe,sze,lze,Fk,ize,dze,cze,lm,Moe,fze,mze,Tk,gze,hze,pze,im,Eoe,_ze,uze,Mk,bze,vze,Fze,dm,Coe,Tze,Mze,Ek,Eze,Cze,wze,cm,woe,Aze,yze,Ck,Lze,xze,$ze,fm,Aoe,kze,Sze,wk,Rze,Pze,Bze,mm,yoe,Ize,qze,Ak,Nze,jze,Dze,gm,Loe,Gze,Oze,yk,Vze,Xze,zze,hm,xoe,Wze,Qze,Lk,Hze,Uze,Jze,pm,$oe,Yze,Kze,xk,Zze,eWe,oWe,_m,koe,rWe,tWe,$k,aWe,nWe,sWe,um,Soe,lWe,iWe,kk,dWe,cWe,fWe,bm,Roe,mWe,gWe,Sk,hWe,pWe,_We,vm,Poe,uWe,bWe,Rk,vWe,FWe,TWe,Fm,Boe,MWe,EWe,Pk,CWe,wWe,AWe,Tm,Ioe,yWe,LWe,Bk,xWe,$We,kWe,Mm,qoe,SWe,RWe,Ik,PWe,BWe,IWe,Em,Noe,qWe,NWe,qk,jWe,DWe,GWe,Cm,joe,OWe,VWe,Nk,XWe,zWe,WWe,wm,Doe,QWe,HWe,jk,UWe,JWe,YWe,Am,Goe,KWe,ZWe,Dk,eQe,oQe,rQe,ym,Ooe,tQe,aQe,Gk,nQe,sQe,lQe,Lm,Voe,iQe,dQe,Ok,cQe,fQe,mQe,xm,Xoe,gQe,hQe,Vk,pQe,_Qe,uQe,$m,zoe,bQe,vQe,Xk,FQe,TQe,MQe,km,Woe,EQe,CQe,zk,wQe,AQe,yQe,Sm,Qoe,LQe,xQe,Wk,$Qe,kQe,SQe,Rm,Hoe,RQe,PQe,Qk,BQe,IQe,qQe,Pm,Uoe,NQe,jQe,Hk,DQe,GQe,OQe,Bm,Joe,VQe,XQe,Uk,zQe,WQe,QQe,Im,Yoe,HQe,UQe,Jk,JQe,YQe,KQe,qm,Koe,ZQe,eHe,Yk,oHe,rHe,tHe,Nm,Zoe,aHe,nHe,Kk,sHe,lHe,iHe,jm,ere,dHe,cHe,Zk,fHe,mHe,gHe,Dm,ore,hHe,pHe,eS,_He,uHe,bHe,Gm,rre,vHe,FHe,oS,THe,MHe,EHe,Om,tre,CHe,wHe,rS,AHe,yHe,LHe,Vm,are,xHe,$He,tS,kHe,SHe,RHe,Xm,nre,PHe,BHe,aS,IHe,qHe,NHe,zm,sre,jHe,DHe,nS,GHe,OHe,VHe,Wm,lre,XHe,zHe,sS,WHe,QHe,HHe,Qm,ire,UHe,JHe,lS,YHe,KHe,ZHe,Hm,dre,eUe,oUe,iS,rUe,tUe,aUe,Um,cre,nUe,sUe,dS,lUe,iUe,dUe,Jm,fre,cUe,fUe,cS,mUe,gUe,hUe,Ym,mre,pUe,_Ue,fS,uUe,bUe,vUe,Km,gre,FUe,TUe,mS,MUe,EUe,CUe,Zm,hre,wUe,AUe,gS,yUe,LUe,xUe,eg,pre,$Ue,kUe,hS,SUe,RUe,PUe,og,_re,BUe,IUe,pS,qUe,NUe,jUe,rg,ure,DUe,GUe,_S,OUe,VUe,XUe,tg,bre,zUe,WUe,uS,QUe,HUe,UUe,ag,vre,JUe,YUe,bS,KUe,ZUe,eJe,ng,Fre,oJe,rJe,vS,tJe,aJe,nJe,sg,Tre,sJe,lJe,FS,iJe,dJe,cJe,lg,Mre,fJe,mJe,TS,gJe,hJe,pJe,ig,Ere,_Je,uJe,MS,bJe,vJe,FJe,dg,Cre,TJe,MJe,ES,EJe,CJe,wJe,cg,wre,AJe,yJe,CS,LJe,xJe,$Je,fg,Are,kJe,SJe,wS,RJe,PJe,BJe,mg,yre,IJe,qJe,AS,NJe,jJe,DJe,gg,Lre,GJe,OJe,yS,VJe,XJe,zJe,hg,xre,WJe,QJe,LS,HJe,UJe,JJe,pg,$re,YJe,KJe,xS,ZJe,eYe,oYe,_g,kre,rYe,tYe,$S,aYe,nYe,sYe,ug,Sre,lYe,iYe,kS,dYe,cYe,fYe,bg,Rre,mYe,gYe,SS,hYe,pYe,_Ye,vg,uYe,Fg,b6,bYe,Pre,vYe,HIe,Fi,Tg,Bre,v6,FYe,Ire,TYe,UIe,wo,F6,MYe,T6,EYe,RS,CYe,wYe,AYe,M6,yYe,qre,LYe,xYe,$Ye,Cr,E6,kYe,Nre,SYe,RYe,Aa,PYe,jre,BYe,IYe,Dre,qYe,NYe,Gre,jYe,DYe,GYe,k,Sn,Ore,OYe,VYe,PS,XYe,zYe,BS,WYe,QYe,HYe,Rn,Vre,UYe,JYe,IS,YYe,KYe,qS,ZYe,eKe,oKe,Pn,Xre,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,Mg,zre,dKe,cKe,DS,fKe,mKe,gKe,Bn,Wre,hKe,pKe,GS,_Ke,uKe,OS,bKe,vKe,FKe,Eg,Qre,TKe,MKe,VS,EKe,CKe,wKe,Cg,Hre,AKe,yKe,XS,LKe,xKe,$Ke,wg,Ure,kKe,SKe,zS,RKe,PKe,BKe,In,Jre,IKe,qKe,WS,NKe,jKe,QS,DKe,GKe,OKe,qn,Yre,VKe,XKe,HS,zKe,WKe,US,QKe,HKe,UKe,Nn,Kre,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,Ag,Zre,tZe,aZe,KS,nZe,sZe,lZe,yg,ete,iZe,dZe,ZS,cZe,fZe,mZe,jn,ote,gZe,hZe,eR,pZe,_Ze,oR,uZe,bZe,vZe,Lg,rte,FZe,TZe,rR,MZe,EZe,CZe,Dn,tte,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,Gn,ate,SZe,RZe,nR,PZe,BZe,sR,IZe,qZe,NZe,On,nte,jZe,DZe,lR,GZe,OZe,iR,VZe,XZe,zZe,xg,ste,WZe,QZe,dR,HZe,UZe,JZe,Vn,lte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,Xn,ite,aeo,neo,mR,seo,leo,gR,ieo,deo,ceo,zn,dte,feo,meo,hR,geo,heo,pR,peo,_eo,ueo,Wn,cte,beo,veo,_R,Feo,Teo,uR,Meo,Eeo,Ceo,Qn,fte,weo,Aeo,bR,yeo,Leo,vR,xeo,$eo,keo,Hn,mte,Seo,Reo,FR,Peo,Beo,TR,Ieo,qeo,Neo,$g,gte,jeo,Deo,MR,Geo,Oeo,Veo,Un,hte,Xeo,zeo,ER,Weo,Qeo,CR,Heo,Ueo,Jeo,kg,pte,Yeo,Keo,wR,Zeo,eoo,ooo,Jn,_te,roo,too,AR,aoo,noo,yR,soo,loo,ioo,Yn,ute,doo,coo,LR,foo,moo,xR,goo,hoo,poo,Kn,bte,_oo,uoo,$R,boo,voo,kR,Foo,Too,Moo,Zn,vte,Eoo,Coo,SR,woo,Aoo,RR,yoo,Loo,xoo,es,Fte,$oo,koo,PR,Soo,Roo,BR,Poo,Boo,Ioo,Sg,Tte,qoo,Noo,IR,joo,Doo,Goo,os,Mte,Ooo,Voo,qR,Xoo,zoo,NR,Woo,Qoo,Hoo,rs,Ete,Uoo,Joo,jR,Yoo,Koo,DR,Zoo,ero,oro,ts,Cte,rro,tro,GR,aro,nro,OR,sro,lro,iro,as,wte,dro,cro,VR,fro,mro,XR,gro,hro,pro,ns,Ate,_ro,uro,zR,bro,vro,WR,Fro,Tro,Mro,ss,yte,Ero,Cro,QR,wro,Aro,HR,yro,Lro,xro,Rg,Lte,$ro,kro,UR,Sro,Rro,Pro,ls,xte,Bro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,Pg,$te,Oro,Vro,KR,Xro,zro,Wro,Bg,kte,Qro,Hro,ZR,Uro,Jro,Yro,is,Ste,Kro,Zro,eP,eto,oto,oP,rto,tto,ato,ds,Rte,nto,sto,rP,lto,ito,tP,dto,cto,fto,cs,Pte,mto,gto,aP,hto,pto,nP,_to,uto,bto,Ig,Bte,vto,Fto,sP,Tto,Mto,Eto,fs,Ite,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,ms,qte,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,gs,Nte,Nto,jto,fP,Dto,Gto,mP,Oto,Vto,Xto,hs,jte,zto,Wto,gP,Qto,Hto,hP,Uto,Jto,Yto,ps,Dte,Kto,Zto,pP,eao,oao,_P,rao,tao,aao,qg,Gte,nao,sao,uP,lao,iao,dao,_s,Ote,cao,fao,bP,mao,gao,vP,hao,pao,_ao,Ng,Vte,uao,bao,FP,vao,Fao,Tao,jg,Xte,Mao,Eao,TP,Cao,wao,Aao,Dg,zte,yao,Lao,MP,xao,$ao,kao,Gg,Wte,Sao,Rao,EP,Pao,Bao,Iao,us,Qte,qao,Nao,CP,jao,Dao,wP,Gao,Oao,Vao,Og,Hte,Xao,zao,AP,Wao,Qao,Hao,bs,Ute,Uao,Jao,yP,Yao,Kao,LP,Zao,eno,ono,vs,Jte,rno,tno,xP,ano,nno,$P,sno,lno,ino,Fs,Yte,dno,cno,kP,fno,mno,SP,gno,hno,pno,Ts,Kte,_no,uno,RP,bno,vno,PP,Fno,Tno,Mno,Ms,Zte,Eno,Cno,BP,wno,Ano,IP,yno,Lno,xno,Es,eae,$no,kno,qP,Sno,Rno,NP,Pno,Bno,Ino,Vg,oae,qno,Nno,jP,jno,Dno,Gno,Xg,rae,Ono,Vno,DP,Xno,zno,Wno,Cs,tae,Qno,Hno,GP,Uno,Jno,OP,Yno,Kno,Zno,ws,aae,eso,oso,VP,rso,tso,XP,aso,nso,sso,As,nae,lso,iso,zP,dso,cso,WP,fso,mso,gso,zg,sae,hso,pso,QP,_so,uso,bso,Wg,lae,vso,Fso,HP,Tso,Mso,Eso,Qg,iae,Cso,wso,UP,Aso,yso,Lso,ys,dae,xso,$so,JP,kso,Sso,YP,Rso,Pso,Bso,Hg,cae,Iso,qso,KP,Nso,jso,Dso,Ug,fae,Gso,Oso,ZP,Vso,Xso,zso,Jg,mae,Wso,Qso,eB,Hso,Uso,Jso,Ls,gae,Yso,Kso,oB,Zso,elo,rB,olo,rlo,tlo,Yg,hae,alo,nlo,tB,slo,llo,ilo,Kg,pae,dlo,clo,aB,flo,mlo,glo,xs,_ae,hlo,plo,nB,_lo,ulo,sB,blo,vlo,Flo,$s,uae,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,ylo,ks,bae,Llo,xlo,dB,$lo,klo,cB,Slo,Rlo,Plo,Ss,vae,Blo,Ilo,fB,qlo,Nlo,mB,jlo,Dlo,Glo,Zg,Olo,eh,C6,Vlo,Fae,Xlo,JIe,Ti,oh,Tae,w6,zlo,Mae,Wlo,YIe,Ao,A6,Qlo,y6,Hlo,gB,Ulo,Jlo,Ylo,L6,Klo,Eae,Zlo,eio,oio,He,x6,rio,Cae,tio,aio,ya,nio,wae,sio,lio,Aae,iio,dio,yae,cio,fio,mio,Z,rh,Lae,gio,hio,hB,pio,_io,uio,th,xae,bio,vio,pB,Fio,Tio,Mio,ah,$ae,Eio,Cio,_B,wio,Aio,yio,nh,kae,Lio,xio,uB,$io,kio,Sio,sh,Sae,Rio,Pio,bB,Bio,Iio,qio,lh,Rae,Nio,jio,vB,Dio,Gio,Oio,ih,Pae,Vio,Xio,FB,zio,Wio,Qio,dh,Bae,Hio,Uio,TB,Jio,Yio,Kio,ch,Iae,Zio,edo,MB,odo,rdo,tdo,fh,qae,ado,ndo,EB,sdo,ldo,ido,mh,Nae,ddo,cdo,CB,fdo,mdo,gdo,gh,jae,hdo,pdo,wB,_do,udo,bdo,hh,Dae,vdo,Fdo,AB,Tdo,Mdo,Edo,ph,Gae,Cdo,wdo,yB,Ado,ydo,Ldo,_h,Oae,xdo,$do,LB,kdo,Sdo,Rdo,uh,Vae,Pdo,Bdo,xB,Ido,qdo,Ndo,bh,Xae,jdo,Ddo,$B,Gdo,Odo,Vdo,vh,zae,Xdo,zdo,kB,Wdo,Qdo,Hdo,Fh,Wae,Udo,Jdo,SB,Ydo,Kdo,Zdo,Th,Qae,eco,oco,RB,rco,tco,aco,Mh,Hae,nco,sco,PB,lco,ico,dco,Eh,Uae,cco,fco,BB,mco,gco,hco,Ch,Jae,pco,_co,IB,uco,bco,vco,wh,Yae,Fco,Tco,qB,Mco,Eco,Cco,Ah,Kae,wco,Aco,NB,yco,Lco,xco,yh,Zae,$co,kco,jB,Sco,Rco,Pco,Lh,ene,Bco,Ico,DB,qco,Nco,jco,xh,Dco,$h,Gco,kh,$6,Oco,one,Vco,KIe,Mi,Sh,rne,k6,Xco,tne,zco,ZIe,yo,S6,Wco,R6,Qco,GB,Hco,Uco,Jco,P6,Yco,ane,Kco,Zco,efo,Ue,B6,ofo,nne,rfo,tfo,Ei,afo,sne,nfo,sfo,lne,lfo,ifo,dfo,pe,Rh,ine,cfo,ffo,OB,mfo,gfo,hfo,Ph,dne,pfo,_fo,cne,ufo,bfo,vfo,Bh,fne,Ffo,Tfo,VB,Mfo,Efo,Cfo,Ih,mne,wfo,Afo,XB,yfo,Lfo,xfo,qh,gne,$fo,kfo,zB,Sfo,Rfo,Pfo,Nh,hne,Bfo,Ifo,WB,qfo,Nfo,jfo,jh,pne,Dfo,Gfo,QB,Ofo,Vfo,Xfo,Dh,_ne,zfo,Wfo,HB,Qfo,Hfo,Ufo,Gh,une,Jfo,Yfo,UB,Kfo,Zfo,emo,Oh,bne,omo,rmo,JB,tmo,amo,nmo,Vh,vne,smo,lmo,YB,imo,dmo,cmo,Xh,Fne,fmo,mmo,KB,gmo,hmo,pmo,zh,Tne,_mo,umo,ZB,bmo,vmo,Fmo,Wh,Mne,Tmo,Mmo,eI,Emo,Cmo,wmo,Qh,Ene,Amo,ymo,oI,Lmo,xmo,$mo,Hh,Cne,kmo,Smo,rI,Rmo,Pmo,Bmo,Uh,Imo,Jh,qmo,Yh,I6,Nmo,wne,jmo,eqe,Ci,Kh,Ane,q6,Dmo,yne,Gmo,oqe,Lo,N6,Omo,wi,Vmo,tI,Xmo,zmo,aI,Wmo,Qmo,Hmo,j6,Umo,Lne,Jmo,Ymo,Kmo,tt,D6,Zmo,xne,ego,ogo,Ai,rgo,$ne,tgo,ago,nI,ngo,sgo,lgo,Zh,igo,Je,G6,dgo,kne,cgo,fgo,La,mgo,Sne,ggo,hgo,Rne,pgo,_go,Pne,ugo,bgo,vgo,x,ep,Bne,Fgo,Tgo,sI,Mgo,Ego,Cgo,op,Ine,wgo,Ago,lI,ygo,Lgo,xgo,rp,qne,$go,kgo,iI,Sgo,Rgo,Pgo,tp,Nne,Bgo,Igo,dI,qgo,Ngo,jgo,ap,jne,Dgo,Ggo,cI,Ogo,Vgo,Xgo,np,Dne,zgo,Wgo,fI,Qgo,Hgo,Ugo,sp,Gne,Jgo,Ygo,mI,Kgo,Zgo,eho,lp,One,oho,rho,gI,tho,aho,nho,ip,Vne,sho,lho,hI,iho,dho,cho,dp,Xne,fho,mho,pI,gho,hho,pho,cp,zne,_ho,uho,_I,bho,vho,Fho,fp,Wne,Tho,Mho,uI,Eho,Cho,who,mp,Qne,Aho,yho,bI,Lho,xho,$ho,gp,Hne,kho,Sho,vI,Rho,Pho,Bho,hp,Une,Iho,qho,FI,Nho,jho,Dho,pp,Jne,Gho,Oho,TI,Vho,Xho,zho,_p,Yne,Who,Qho,MI,Hho,Uho,Jho,up,Kne,Yho,Kho,EI,Zho,epo,opo,bp,Zne,rpo,tpo,CI,apo,npo,spo,vp,ese,lpo,ipo,wI,dpo,cpo,fpo,Fp,ose,mpo,gpo,AI,hpo,ppo,_po,Tp,rse,upo,bpo,yI,vpo,Fpo,Tpo,Mp,tse,Mpo,Epo,LI,Cpo,wpo,Apo,Ep,ase,ypo,Lpo,xI,xpo,$po,kpo,Cp,nse,Spo,Rpo,$I,Ppo,Bpo,Ipo,wp,sse,qpo,Npo,kI,jpo,Dpo,Gpo,Ap,lse,Opo,Vpo,SI,Xpo,zpo,Wpo,yp,ise,Qpo,Hpo,RI,Upo,Jpo,Ypo,Lp,dse,Kpo,Zpo,PI,e_o,o_o,r_o,xp,cse,t_o,a_o,BI,n_o,s_o,l_o,$p,fse,i_o,d_o,II,c_o,f_o,m_o,kp,mse,g_o,h_o,qI,p_o,__o,u_o,Rs,gse,b_o,v_o,NI,F_o,T_o,jI,M_o,E_o,C_o,Sp,hse,w_o,A_o,DI,y_o,L_o,x_o,Rp,pse,$_o,k_o,GI,S_o,R_o,P_o,Pp,_se,B_o,I_o,OI,q_o,N_o,j_o,Bp,use,D_o,G_o,VI,O_o,V_o,X_o,Ip,bse,z_o,W_o,XI,Q_o,H_o,U_o,qp,vse,J_o,Y_o,zI,K_o,Z_o,euo,Np,Fse,ouo,ruo,WI,tuo,auo,nuo,jp,Tse,suo,luo,QI,iuo,duo,cuo,Dp,Mse,fuo,muo,HI,guo,huo,puo,Gp,Ese,_uo,uuo,UI,buo,vuo,Fuo,Op,Cse,Tuo,Muo,JI,Euo,Cuo,wuo,Vp,wse,Auo,yuo,YI,Luo,xuo,$uo,Xp,Ase,kuo,Suo,KI,Ruo,Puo,Buo,zp,yse,Iuo,quo,ZI,Nuo,juo,Duo,Wp,Lse,Guo,Ouo,eq,Vuo,Xuo,zuo,Qp,xse,Wuo,Quo,oq,Huo,Uuo,Juo,Hp,$se,Yuo,Kuo,rq,Zuo,e2o,o2o,Up,kse,r2o,t2o,tq,a2o,n2o,s2o,Jp,Sse,l2o,i2o,aq,d2o,c2o,f2o,Yp,Rse,m2o,g2o,nq,h2o,p2o,_2o,Kp,Pse,u2o,b2o,sq,v2o,F2o,T2o,Zp,Bse,M2o,E2o,lq,C2o,w2o,A2o,e_,Ise,y2o,L2o,iq,x2o,$2o,k2o,o_,qse,S2o,R2o,dq,P2o,B2o,I2o,r_,Nse,q2o,N2o,cq,j2o,D2o,G2o,t_,jse,O2o,V2o,fq,X2o,z2o,W2o,a_,Dse,Q2o,H2o,mq,U2o,J2o,Y2o,n_,Gse,K2o,Z2o,gq,e1o,o1o,r1o,s_,Ose,t1o,a1o,hq,n1o,s1o,l1o,l_,Vse,i1o,d1o,pq,c1o,f1o,m1o,i_,Xse,g1o,h1o,_q,p1o,_1o,u1o,d_,zse,b1o,v1o,uq,F1o,T1o,M1o,c_,Wse,E1o,C1o,bq,w1o,A1o,y1o,f_,Qse,L1o,x1o,vq,$1o,k1o,S1o,m_,Hse,R1o,P1o,Fq,B1o,I1o,q1o,g_,Use,N1o,j1o,Tq,D1o,G1o,O1o,h_,Jse,V1o,X1o,Mq,z1o,W1o,Q1o,p_,Yse,H1o,U1o,Eq,J1o,Y1o,K1o,__,Kse,Z1o,ebo,Cq,obo,rbo,tbo,u_,Zse,abo,nbo,wq,sbo,lbo,ibo,b_,ele,dbo,cbo,Aq,fbo,mbo,gbo,v_,ole,hbo,pbo,yq,_bo,ubo,bbo,F_,rle,vbo,Fbo,Lq,Tbo,Mbo,Ebo,T_,tle,Cbo,wbo,xq,Abo,ybo,Lbo,M_,ale,xbo,$bo,$q,kbo,Sbo,Rbo,E_,nle,Pbo,Bbo,kq,Ibo,qbo,Nbo,C_,sle,jbo,Dbo,Sq,Gbo,Obo,Vbo,w_,lle,Xbo,zbo,Rq,Wbo,Qbo,Hbo,A_,ile,Ubo,Jbo,Pq,Ybo,Kbo,Zbo,y_,dle,e5o,o5o,Bq,r5o,t5o,a5o,L_,cle,n5o,s5o,Iq,l5o,i5o,d5o,x_,fle,c5o,f5o,qq,m5o,g5o,h5o,$_,mle,p5o,_5o,Nq,u5o,b5o,v5o,k_,gle,F5o,T5o,jq,M5o,E5o,C5o,S_,hle,w5o,A5o,Dq,y5o,L5o,x5o,R_,ple,$5o,k5o,Gq,S5o,R5o,P5o,P_,_le,B5o,I5o,Oq,q5o,N5o,j5o,B_,ule,D5o,G5o,Vq,O5o,V5o,X5o,I_,ble,z5o,W5o,Xq,Q5o,H5o,U5o,q_,vle,J5o,Y5o,zq,K5o,Z5o,evo,N_,Fle,ovo,rvo,Wq,tvo,avo,nvo,j_,Tle,svo,lvo,Qq,ivo,dvo,cvo,D_,Mle,fvo,mvo,Hq,gvo,hvo,pvo,G_,Ele,_vo,uvo,Uq,bvo,vvo,Fvo,O_,Cle,Tvo,Mvo,Jq,Evo,Cvo,wvo,V_,wle,Avo,yvo,Yq,Lvo,xvo,$vo,X_,kvo,Ale,Svo,Rvo,yle,Pvo,Bvo,z_,rqe,yi,W_,Lle,O6,Ivo,xle,qvo,tqe,xo,V6,Nvo,Li,jvo,Kq,Dvo,Gvo,Zq,Ovo,Vvo,Xvo,X6,zvo,$le,Wvo,Qvo,Hvo,at,z6,Uvo,kle,Jvo,Yvo,xi,Kvo,Sle,Zvo,e3o,eN,o3o,r3o,t3o,Q_,a3o,Ye,W6,n3o,Rle,s3o,l3o,xa,i3o,Ple,d3o,c3o,Ble,f3o,m3o,Ile,g3o,h3o,p3o,G,H_,qle,_3o,u3o,oN,b3o,v3o,F3o,U_,Nle,T3o,M3o,rN,E3o,C3o,w3o,J_,jle,A3o,y3o,tN,L3o,x3o,$3o,Y_,Dle,k3o,S3o,aN,R3o,P3o,B3o,K_,Gle,I3o,q3o,nN,N3o,j3o,D3o,Z_,Ole,G3o,O3o,sN,V3o,X3o,z3o,eu,Vle,W3o,Q3o,lN,H3o,U3o,J3o,ou,Xle,Y3o,K3o,iN,Z3o,eFo,oFo,ru,zle,rFo,tFo,dN,aFo,nFo,sFo,tu,Wle,lFo,iFo,cN,dFo,cFo,fFo,au,Qle,mFo,gFo,fN,hFo,pFo,_Fo,nu,Hle,uFo,bFo,mN,vFo,FFo,TFo,su,Ule,MFo,EFo,gN,CFo,wFo,AFo,lu,Jle,yFo,LFo,hN,xFo,$Fo,kFo,iu,Yle,SFo,RFo,pN,PFo,BFo,IFo,du,Kle,qFo,NFo,_N,jFo,DFo,GFo,cu,Zle,OFo,VFo,uN,XFo,zFo,WFo,fu,eie,QFo,HFo,bN,UFo,JFo,YFo,mu,oie,KFo,ZFo,vN,eTo,oTo,rTo,gu,rie,tTo,aTo,FN,nTo,sTo,lTo,hu,tie,iTo,dTo,TN,cTo,fTo,mTo,pu,aie,gTo,hTo,MN,pTo,_To,uTo,_u,nie,bTo,vTo,EN,FTo,TTo,MTo,uu,sie,ETo,CTo,CN,wTo,ATo,yTo,bu,lie,LTo,xTo,wN,$To,kTo,STo,vu,iie,RTo,PTo,AN,BTo,ITo,qTo,Fu,die,NTo,jTo,yN,DTo,GTo,OTo,Tu,cie,VTo,XTo,LN,zTo,WTo,QTo,Mu,fie,HTo,UTo,xN,JTo,YTo,KTo,Eu,mie,ZTo,e7o,$N,o7o,r7o,t7o,Cu,gie,a7o,n7o,kN,s7o,l7o,i7o,wu,hie,d7o,c7o,SN,f7o,m7o,g7o,Au,pie,h7o,p7o,RN,_7o,u7o,b7o,yu,_ie,v7o,F7o,PN,T7o,M7o,E7o,Lu,uie,C7o,w7o,BN,A7o,y7o,L7o,xu,bie,x7o,$7o,IN,k7o,S7o,R7o,$u,vie,P7o,B7o,qN,I7o,q7o,N7o,ku,Fie,j7o,D7o,NN,G7o,O7o,V7o,Su,Tie,X7o,z7o,jN,W7o,Q7o,H7o,Ru,Mie,U7o,J7o,DN,Y7o,K7o,Z7o,Pu,Eie,eMo,oMo,GN,rMo,tMo,aMo,Bu,nMo,Cie,sMo,lMo,wie,iMo,dMo,Iu,aqe,$i,qu,Aie,Q6,cMo,yie,fMo,nqe,$o,H6,mMo,ki,gMo,ON,hMo,pMo,VN,_Mo,uMo,bMo,U6,vMo,Lie,FMo,TMo,MMo,nt,J6,EMo,xie,CMo,wMo,Si,AMo,$ie,yMo,LMo,XN,xMo,$Mo,kMo,Nu,SMo,Ke,Y6,RMo,kie,PMo,BMo,$a,IMo,Sie,qMo,NMo,Rie,jMo,DMo,Pie,GMo,OMo,VMo,z,ju,Bie,XMo,zMo,zN,WMo,QMo,HMo,Du,Iie,UMo,JMo,WN,YMo,KMo,ZMo,Gu,qie,e4o,o4o,QN,r4o,t4o,a4o,Ou,Nie,n4o,s4o,HN,l4o,i4o,d4o,Vu,jie,c4o,f4o,UN,m4o,g4o,h4o,Xu,Die,p4o,_4o,JN,u4o,b4o,v4o,zu,Gie,F4o,T4o,YN,M4o,E4o,C4o,Wu,Oie,w4o,A4o,KN,y4o,L4o,x4o,Qu,Vie,$4o,k4o,ZN,S4o,R4o,P4o,Hu,Xie,B4o,I4o,ej,q4o,N4o,j4o,Uu,zie,D4o,G4o,oj,O4o,V4o,X4o,Ju,Wie,z4o,W4o,rj,Q4o,H4o,U4o,Yu,Qie,J4o,Y4o,tj,K4o,Z4o,eEo,Ku,Hie,oEo,rEo,aj,tEo,aEo,nEo,Zu,Uie,sEo,lEo,nj,iEo,dEo,cEo,e2,Jie,fEo,mEo,sj,gEo,hEo,pEo,o2,Yie,_Eo,uEo,lj,bEo,vEo,FEo,r2,Kie,TEo,MEo,ij,EEo,CEo,wEo,t2,Zie,AEo,yEo,dj,LEo,xEo,$Eo,a2,ede,kEo,SEo,cj,REo,PEo,BEo,n2,ode,IEo,qEo,fj,NEo,jEo,DEo,s2,rde,GEo,OEo,mj,VEo,XEo,zEo,l2,tde,WEo,QEo,gj,HEo,UEo,JEo,i2,ade,YEo,KEo,hj,ZEo,eCo,oCo,d2,nde,rCo,tCo,pj,aCo,nCo,sCo,c2,sde,lCo,iCo,_j,dCo,cCo,fCo,f2,lde,mCo,gCo,uj,hCo,pCo,_Co,m2,ide,uCo,bCo,bj,vCo,FCo,TCo,g2,dde,MCo,ECo,vj,CCo,wCo,ACo,h2,cde,yCo,LCo,Fj,xCo,$Co,kCo,p2,fde,SCo,RCo,Tj,PCo,BCo,ICo,_2,mde,qCo,NCo,Mj,jCo,DCo,GCo,u2,gde,OCo,VCo,Ej,XCo,zCo,WCo,b2,hde,QCo,HCo,Cj,UCo,JCo,YCo,v2,pde,KCo,ZCo,wj,ewo,owo,rwo,F2,_de,two,awo,Aj,nwo,swo,lwo,T2,iwo,ude,dwo,cwo,bde,fwo,mwo,M2,sqe,Ri,E2,vde,K6,gwo,Fde,hwo,lqe,ko,Z6,pwo,Pi,_wo,yj,uwo,bwo,Lj,vwo,Fwo,Two,ey,Mwo,Tde,Ewo,Cwo,wwo,st,oy,Awo,Mde,ywo,Lwo,Bi,xwo,Ede,$wo,kwo,xj,Swo,Rwo,Pwo,C2,Bwo,Ze,ry,Iwo,Cde,qwo,Nwo,ka,jwo,wde,Dwo,Gwo,Ade,Owo,Vwo,yde,Xwo,zwo,Wwo,W,w2,Lde,Qwo,Hwo,$j,Uwo,Jwo,Ywo,A2,xde,Kwo,Zwo,kj,e0o,o0o,r0o,y2,$de,t0o,a0o,Sj,n0o,s0o,l0o,L2,kde,i0o,d0o,Rj,c0o,f0o,m0o,x2,Sde,g0o,h0o,Pj,p0o,_0o,u0o,$2,Rde,b0o,v0o,Bj,F0o,T0o,M0o,k2,Pde,E0o,C0o,Ij,w0o,A0o,y0o,S2,Bde,L0o,x0o,qj,$0o,k0o,S0o,R2,Ide,R0o,P0o,Nj,B0o,I0o,q0o,P2,qde,N0o,j0o,jj,D0o,G0o,O0o,B2,Nde,V0o,X0o,Dj,z0o,W0o,Q0o,I2,jde,H0o,U0o,Gj,J0o,Y0o,K0o,q2,Dde,Z0o,eAo,Oj,oAo,rAo,tAo,N2,Gde,aAo,nAo,Vj,sAo,lAo,iAo,j2,Ode,dAo,cAo,Xj,fAo,mAo,gAo,D2,Vde,hAo,pAo,zj,_Ao,uAo,bAo,G2,Xde,vAo,FAo,Wj,TAo,MAo,EAo,O2,zde,CAo,wAo,Qj,AAo,yAo,LAo,V2,Wde,xAo,$Ao,Hj,kAo,SAo,RAo,X2,Qde,PAo,BAo,Uj,IAo,qAo,NAo,z2,Hde,jAo,DAo,Jj,GAo,OAo,VAo,W2,Ude,XAo,zAo,Yj,WAo,QAo,HAo,Q2,Jde,UAo,JAo,Kj,YAo,KAo,ZAo,H2,Yde,e6o,o6o,Zj,r6o,t6o,a6o,U2,Kde,n6o,s6o,eD,l6o,i6o,d6o,J2,Zde,c6o,f6o,oD,m6o,g6o,h6o,Y2,ece,p6o,_6o,rD,u6o,b6o,v6o,K2,oce,F6o,T6o,tD,M6o,E6o,C6o,Z2,rce,w6o,A6o,aD,y6o,L6o,x6o,e1,tce,$6o,k6o,nD,S6o,R6o,P6o,o1,ace,B6o,I6o,nce,q6o,N6o,j6o,r1,sce,D6o,G6o,sD,O6o,V6o,X6o,t1,lce,z6o,W6o,lD,Q6o,H6o,U6o,a1,ice,J6o,Y6o,iD,K6o,Z6o,eyo,n1,dce,oyo,ryo,dD,tyo,ayo,nyo,s1,syo,cce,lyo,iyo,fce,dyo,cyo,l1,iqe,Ii,i1,mce,ty,fyo,gce,myo,dqe,So,ay,gyo,qi,hyo,cD,pyo,_yo,fD,uyo,byo,vyo,ny,Fyo,hce,Tyo,Myo,Eyo,lt,sy,Cyo,pce,wyo,Ayo,Ni,yyo,_ce,Lyo,xyo,mD,$yo,kyo,Syo,d1,Ryo,eo,ly,Pyo,uce,Byo,Iyo,Sa,qyo,bce,Nyo,jyo,vce,Dyo,Gyo,Fce,Oyo,Vyo,Xyo,_e,c1,Tce,zyo,Wyo,gD,Qyo,Hyo,Uyo,f1,Mce,Jyo,Yyo,hD,Kyo,Zyo,eLo,m1,Ece,oLo,rLo,pD,tLo,aLo,nLo,g1,Cce,sLo,lLo,_D,iLo,dLo,cLo,h1,wce,fLo,mLo,uD,gLo,hLo,pLo,p1,Ace,_Lo,uLo,bD,bLo,vLo,FLo,_1,yce,TLo,MLo,vD,ELo,CLo,wLo,u1,Lce,ALo,yLo,FD,LLo,xLo,$Lo,b1,xce,kLo,SLo,TD,RLo,PLo,BLo,v1,$ce,ILo,qLo,MD,NLo,jLo,DLo,F1,kce,GLo,OLo,ED,VLo,XLo,zLo,T1,Sce,WLo,QLo,CD,HLo,ULo,JLo,M1,Rce,YLo,KLo,wD,ZLo,e8o,o8o,E1,Pce,r8o,t8o,AD,a8o,n8o,s8o,C1,Bce,l8o,i8o,yD,d8o,c8o,f8o,w1,Ice,m8o,g8o,LD,h8o,p8o,_8o,A1,u8o,qce,b8o,v8o,Nce,F8o,T8o,y1,cqe,ji,L1,jce,iy,M8o,Dce,E8o,fqe,Ro,dy,C8o,Di,w8o,xD,A8o,y8o,$D,L8o,x8o,$8o,cy,k8o,Gce,S8o,R8o,P8o,it,fy,B8o,Oce,I8o,q8o,Gi,N8o,Vce,j8o,D8o,kD,G8o,O8o,V8o,x1,X8o,oo,my,z8o,Xce,W8o,Q8o,Ra,H8o,zce,U8o,J8o,Wce,Y8o,K8o,Qce,Z8o,exo,oxo,q,$1,Hce,rxo,txo,SD,axo,nxo,sxo,k1,Uce,lxo,ixo,RD,dxo,cxo,fxo,S1,Jce,mxo,gxo,PD,hxo,pxo,_xo,R1,Yce,uxo,bxo,BD,vxo,Fxo,Txo,P1,Kce,Mxo,Exo,ID,Cxo,wxo,Axo,B1,Zce,yxo,Lxo,qD,xxo,$xo,kxo,I1,efe,Sxo,Rxo,ND,Pxo,Bxo,Ixo,q1,ofe,qxo,Nxo,jD,jxo,Dxo,Gxo,N1,rfe,Oxo,Vxo,DD,Xxo,zxo,Wxo,j1,tfe,Qxo,Hxo,GD,Uxo,Jxo,Yxo,D1,afe,Kxo,Zxo,OD,e9o,o9o,r9o,G1,nfe,t9o,a9o,VD,n9o,s9o,l9o,O1,sfe,i9o,d9o,XD,c9o,f9o,m9o,V1,lfe,g9o,h9o,zD,p9o,_9o,u9o,X1,ife,b9o,v9o,WD,F9o,T9o,M9o,z1,dfe,E9o,C9o,QD,w9o,A9o,y9o,W1,cfe,L9o,x9o,HD,$9o,k9o,S9o,Q1,ffe,R9o,P9o,UD,B9o,I9o,q9o,H1,mfe,N9o,j9o,JD,D9o,G9o,O9o,U1,gfe,V9o,X9o,YD,z9o,W9o,Q9o,J1,hfe,H9o,U9o,KD,J9o,Y9o,K9o,Y1,pfe,Z9o,e$o,ZD,o$o,r$o,t$o,K1,_fe,a$o,n$o,eG,s$o,l$o,i$o,Z1,ufe,d$o,c$o,oG,f$o,m$o,g$o,eb,bfe,h$o,p$o,rG,_$o,u$o,b$o,ob,vfe,v$o,F$o,tG,T$o,M$o,E$o,rb,Ffe,C$o,w$o,aG,A$o,y$o,L$o,tb,Tfe,x$o,$$o,nG,k$o,S$o,R$o,ab,Mfe,P$o,B$o,sG,I$o,q$o,N$o,nb,Efe,j$o,D$o,lG,G$o,O$o,V$o,sb,Cfe,X$o,z$o,iG,W$o,Q$o,H$o,lb,wfe,U$o,J$o,dG,Y$o,K$o,Z$o,ib,Afe,eko,oko,cG,rko,tko,ako,db,yfe,nko,sko,fG,lko,iko,dko,cb,Lfe,cko,fko,mG,mko,gko,hko,fb,xfe,pko,_ko,gG,uko,bko,vko,mb,$fe,Fko,Tko,hG,Mko,Eko,Cko,gb,kfe,wko,Ako,pG,yko,Lko,xko,hb,Sfe,$ko,kko,_G,Sko,Rko,Pko,pb,Rfe,Bko,Iko,uG,qko,Nko,jko,_b,Pfe,Dko,Gko,bG,Oko,Vko,Xko,ub,Bfe,zko,Wko,vG,Qko,Hko,Uko,bb,Ife,Jko,Yko,FG,Kko,Zko,eSo,vb,qfe,oSo,rSo,TG,tSo,aSo,nSo,Fb,Nfe,sSo,lSo,MG,iSo,dSo,cSo,Tb,jfe,fSo,mSo,EG,gSo,hSo,pSo,Mb,_So,Dfe,uSo,bSo,Gfe,vSo,FSo,Eb,mqe,Oi,Cb,Ofe,gy,TSo,Vfe,MSo,gqe,Po,hy,ESo,Vi,CSo,CG,wSo,ASo,wG,ySo,LSo,xSo,py,$So,Xfe,kSo,SSo,RSo,dt,_y,PSo,zfe,BSo,ISo,Xi,qSo,Wfe,NSo,jSo,AG,DSo,GSo,OSo,wb,VSo,ro,uy,XSo,Qfe,zSo,WSo,Pa,QSo,Hfe,HSo,USo,Ufe,JSo,YSo,Jfe,KSo,ZSo,eRo,Y,Ab,Yfe,oRo,rRo,yG,tRo,aRo,nRo,yb,Kfe,sRo,lRo,LG,iRo,dRo,cRo,Lb,Zfe,fRo,mRo,xG,gRo,hRo,pRo,xb,eme,_Ro,uRo,$G,bRo,vRo,FRo,$b,ome,TRo,MRo,kG,ERo,CRo,wRo,kb,rme,ARo,yRo,SG,LRo,xRo,$Ro,Sb,tme,kRo,SRo,RG,RRo,PRo,BRo,Rb,ame,IRo,qRo,PG,NRo,jRo,DRo,Pb,nme,GRo,ORo,BG,VRo,XRo,zRo,Bb,sme,WRo,QRo,IG,HRo,URo,JRo,Ib,lme,YRo,KRo,qG,ZRo,ePo,oPo,qb,ime,rPo,tPo,NG,aPo,nPo,sPo,Nb,dme,lPo,iPo,jG,dPo,cPo,fPo,jb,cme,mPo,gPo,DG,hPo,pPo,_Po,Db,fme,uPo,bPo,GG,vPo,FPo,TPo,Gb,mme,MPo,EPo,OG,CPo,wPo,APo,Ob,gme,yPo,LPo,VG,xPo,$Po,kPo,Vb,hme,SPo,RPo,XG,PPo,BPo,IPo,Xb,pme,qPo,NPo,zG,jPo,DPo,GPo,zb,_me,OPo,VPo,WG,XPo,zPo,WPo,Wb,ume,QPo,HPo,QG,UPo,JPo,YPo,Qb,bme,KPo,ZPo,HG,eBo,oBo,rBo,Hb,vme,tBo,aBo,UG,nBo,sBo,lBo,Ub,Fme,iBo,dBo,JG,cBo,fBo,mBo,Jb,Tme,gBo,hBo,YG,pBo,_Bo,uBo,Yb,Mme,bBo,vBo,KG,FBo,TBo,MBo,Kb,Eme,EBo,CBo,ZG,wBo,ABo,yBo,Zb,Cme,LBo,xBo,eO,$Bo,kBo,SBo,e5,wme,RBo,PBo,oO,BBo,IBo,qBo,o5,NBo,Ame,jBo,DBo,yme,GBo,OBo,r5,hqe,zi,t5,Lme,by,VBo,xme,XBo,pqe,Bo,vy,zBo,Wi,WBo,rO,QBo,HBo,tO,UBo,JBo,YBo,Fy,KBo,$me,ZBo,eIo,oIo,ct,Ty,rIo,kme,tIo,aIo,Qi,nIo,Sme,sIo,lIo,aO,iIo,dIo,cIo,a5,fIo,to,My,mIo,Rme,gIo,hIo,Ba,pIo,Pme,_Io,uIo,Bme,bIo,vIo,Ime,FIo,TIo,MIo,Yr,n5,qme,EIo,CIo,nO,wIo,AIo,yIo,s5,Nme,LIo,xIo,sO,$Io,kIo,SIo,l5,jme,RIo,PIo,lO,BIo,IIo,qIo,i5,Dme,NIo,jIo,iO,DIo,GIo,OIo,d5,Gme,VIo,XIo,dO,zIo,WIo,QIo,c5,HIo,Ome,UIo,JIo,Vme,YIo,KIo,f5,_qe,Hi,m5,Xme,Ey,ZIo,zme,eqo,uqe,Io,Cy,oqo,Ui,rqo,cO,tqo,aqo,fO,nqo,sqo,lqo,wy,iqo,Wme,dqo,cqo,fqo,ft,Ay,mqo,Qme,gqo,hqo,Ji,pqo,Hme,_qo,uqo,mO,bqo,vqo,Fqo,g5,Tqo,ao,yy,Mqo,Ume,Eqo,Cqo,Ia,wqo,Jme,Aqo,yqo,Yme,Lqo,xqo,Kme,$qo,kqo,Sqo,U,h5,Zme,Rqo,Pqo,gO,Bqo,Iqo,qqo,p5,ege,Nqo,jqo,hO,Dqo,Gqo,Oqo,_5,oge,Vqo,Xqo,pO,zqo,Wqo,Qqo,u5,rge,Hqo,Uqo,_O,Jqo,Yqo,Kqo,b5,tge,Zqo,eNo,uO,oNo,rNo,tNo,v5,age,aNo,nNo,bO,sNo,lNo,iNo,F5,nge,dNo,cNo,vO,fNo,mNo,gNo,T5,sge,hNo,pNo,FO,_No,uNo,bNo,M5,lge,vNo,FNo,TO,TNo,MNo,ENo,E5,ige,CNo,wNo,MO,ANo,yNo,LNo,C5,dge,xNo,$No,EO,kNo,SNo,RNo,w5,cge,PNo,BNo,CO,INo,qNo,NNo,A5,fge,jNo,DNo,wO,GNo,ONo,VNo,y5,mge,XNo,zNo,AO,WNo,QNo,HNo,L5,gge,UNo,JNo,yO,YNo,KNo,ZNo,x5,hge,ejo,ojo,LO,rjo,tjo,ajo,$5,pge,njo,sjo,xO,ljo,ijo,djo,k5,_ge,cjo,fjo,$O,mjo,gjo,hjo,S5,uge,pjo,_jo,kO,ujo,bjo,vjo,R5,bge,Fjo,Tjo,SO,Mjo,Ejo,Cjo,P5,vge,wjo,Ajo,RO,yjo,Ljo,xjo,B5,Fge,$jo,kjo,PO,Sjo,Rjo,Pjo,I5,Tge,Bjo,Ijo,BO,qjo,Njo,jjo,q5,Mge,Djo,Gjo,IO,Ojo,Vjo,Xjo,N5,Ege,zjo,Wjo,qO,Qjo,Hjo,Ujo,j5,Cge,Jjo,Yjo,NO,Kjo,Zjo,eDo,D5,wge,oDo,rDo,jO,tDo,aDo,nDo,G5,Age,sDo,lDo,DO,iDo,dDo,cDo,O5,yge,fDo,mDo,GO,gDo,hDo,pDo,V5,Lge,_Do,uDo,OO,bDo,vDo,FDo,X5,xge,TDo,MDo,VO,EDo,CDo,wDo,z5,$ge,ADo,yDo,XO,LDo,xDo,$Do,W5,kge,kDo,SDo,zO,RDo,PDo,BDo,Q5,IDo,Sge,qDo,NDo,Rge,jDo,DDo,H5,bqe,Yi,U5,Pge,Ly,GDo,Bge,ODo,vqe,qo,xy,VDo,Ki,XDo,WO,zDo,WDo,QO,QDo,HDo,UDo,$y,JDo,Ige,YDo,KDo,ZDo,mt,ky,eGo,qge,oGo,rGo,Zi,tGo,Nge,aGo,nGo,HO,sGo,lGo,iGo,J5,dGo,no,Sy,cGo,jge,fGo,mGo,qa,gGo,Dge,hGo,pGo,Gge,_Go,uGo,Oge,bGo,vGo,FGo,V,Y5,Vge,TGo,MGo,UO,EGo,CGo,wGo,K5,Xge,AGo,yGo,JO,LGo,xGo,$Go,Z5,zge,kGo,SGo,YO,RGo,PGo,BGo,ev,Wge,IGo,qGo,KO,NGo,jGo,DGo,ov,Qge,GGo,OGo,ZO,VGo,XGo,zGo,rv,Hge,WGo,QGo,eV,HGo,UGo,JGo,tv,Uge,YGo,KGo,oV,ZGo,eOo,oOo,av,Jge,rOo,tOo,rV,aOo,nOo,sOo,nv,Yge,lOo,iOo,tV,dOo,cOo,fOo,sv,Kge,mOo,gOo,aV,hOo,pOo,_Oo,lv,Zge,uOo,bOo,nV,vOo,FOo,TOo,iv,ehe,MOo,EOo,sV,COo,wOo,AOo,dv,ohe,yOo,LOo,lV,xOo,$Oo,kOo,cv,rhe,SOo,ROo,iV,POo,BOo,IOo,fv,the,qOo,NOo,dV,jOo,DOo,GOo,mv,ahe,OOo,VOo,cV,XOo,zOo,WOo,gv,nhe,QOo,HOo,fV,UOo,JOo,YOo,hv,she,KOo,ZOo,mV,eVo,oVo,rVo,pv,lhe,tVo,aVo,gV,nVo,sVo,lVo,_v,ihe,iVo,dVo,hV,cVo,fVo,mVo,uv,dhe,gVo,hVo,pV,pVo,_Vo,uVo,bv,che,bVo,vVo,_V,FVo,TVo,MVo,vv,fhe,EVo,CVo,uV,wVo,AVo,yVo,Fv,mhe,LVo,xVo,bV,$Vo,kVo,SVo,Tv,ghe,RVo,PVo,vV,BVo,IVo,qVo,Mv,hhe,NVo,jVo,FV,DVo,GVo,OVo,Ev,phe,VVo,XVo,TV,zVo,WVo,QVo,Cv,_he,HVo,UVo,MV,JVo,YVo,KVo,wv,uhe,ZVo,eXo,EV,oXo,rXo,tXo,Av,bhe,aXo,nXo,CV,sXo,lXo,iXo,yv,vhe,dXo,cXo,wV,fXo,mXo,gXo,Lv,Fhe,hXo,pXo,AV,_Xo,uXo,bXo,xv,The,vXo,FXo,yV,TXo,MXo,EXo,$v,Mhe,CXo,wXo,LV,AXo,yXo,LXo,kv,Ehe,xXo,$Xo,xV,kXo,SXo,RXo,Sv,Che,PXo,BXo,$V,IXo,qXo,NXo,Rv,whe,jXo,DXo,kV,GXo,OXo,VXo,Pv,Ahe,XXo,zXo,SV,WXo,QXo,HXo,Bv,yhe,UXo,JXo,RV,YXo,KXo,ZXo,Iv,ezo,Lhe,ozo,rzo,xhe,tzo,azo,qv,Fqe,ed,Nv,$he,Ry,nzo,khe,szo,Tqe,No,Py,lzo,od,izo,PV,dzo,czo,BV,fzo,mzo,gzo,By,hzo,She,pzo,_zo,uzo,gt,Iy,bzo,Rhe,vzo,Fzo,rd,Tzo,Phe,Mzo,Ezo,IV,Czo,wzo,Azo,jv,yzo,so,qy,Lzo,Bhe,xzo,$zo,Na,kzo,Ihe,Szo,Rzo,qhe,Pzo,Bzo,Nhe,Izo,qzo,Nzo,jhe,Dv,Dhe,jzo,Dzo,qV,Gzo,Ozo,Vzo,Gv,Xzo,Ghe,zzo,Wzo,Ohe,Qzo,Hzo,Ov,Mqe,td,Vv,Vhe,Ny,Uzo,Xhe,Jzo,Eqe,jo,jy,Yzo,ad,Kzo,NV,Zzo,eWo,jV,oWo,rWo,tWo,Dy,aWo,zhe,nWo,sWo,lWo,ht,Gy,iWo,Whe,dWo,cWo,nd,fWo,Qhe,mWo,gWo,DV,hWo,pWo,_Wo,Xv,uWo,lo,Oy,bWo,Hhe,vWo,FWo,ja,TWo,Uhe,MWo,EWo,Jhe,CWo,wWo,Yhe,AWo,yWo,LWo,Fe,zv,Khe,xWo,$Wo,GV,kWo,SWo,RWo,Wv,Zhe,PWo,BWo,OV,IWo,qWo,NWo,Qv,epe,jWo,DWo,VV,GWo,OWo,VWo,Hv,ope,XWo,zWo,XV,WWo,QWo,HWo,Ps,rpe,UWo,JWo,zV,YWo,KWo,WV,ZWo,eQo,oQo,Uv,tpe,rQo,tQo,QV,aQo,nQo,sQo,pt,ape,lQo,iQo,HV,dQo,cQo,UV,fQo,mQo,JV,gQo,hQo,pQo,Jv,npe,_Qo,uQo,YV,bQo,vQo,FQo,Yv,spe,TQo,MQo,KV,EQo,CQo,wQo,Kv,lpe,AQo,yQo,ZV,LQo,xQo,$Qo,Zv,ipe,kQo,SQo,eX,RQo,PQo,BQo,e3,dpe,IQo,qQo,oX,NQo,jQo,DQo,o3,cpe,GQo,OQo,rX,VQo,XQo,zQo,r3,fpe,WQo,QQo,tX,HQo,UQo,JQo,t3,YQo,mpe,KQo,ZQo,gpe,eHo,oHo,a3,Cqe,sd,n3,hpe,Vy,rHo,ppe,tHo,wqe,Do,Xy,aHo,ld,nHo,aX,sHo,lHo,nX,iHo,dHo,cHo,zy,fHo,_pe,mHo,gHo,hHo,_t,Wy,pHo,upe,_Ho,uHo,id,bHo,bpe,vHo,FHo,sX,THo,MHo,EHo,s3,CHo,io,Qy,wHo,vpe,AHo,yHo,Da,LHo,Fpe,xHo,$Ho,Tpe,kHo,SHo,Mpe,RHo,PHo,BHo,Epe,l3,Cpe,IHo,qHo,lX,NHo,jHo,DHo,i3,GHo,wpe,OHo,VHo,Ape,XHo,zHo,d3,Aqe,dd,c3,ype,Hy,WHo,Lpe,QHo,yqe,Go,Uy,HHo,cd,UHo,iX,JHo,YHo,dX,KHo,ZHo,eUo,Jy,oUo,xpe,rUo,tUo,aUo,ut,Yy,nUo,$pe,sUo,lUo,fd,iUo,kpe,dUo,cUo,cX,fUo,mUo,gUo,f3,hUo,co,Ky,pUo,Spe,_Uo,uUo,Ga,bUo,Rpe,vUo,FUo,Ppe,TUo,MUo,Bpe,EUo,CUo,wUo,ke,m3,Ipe,AUo,yUo,fX,LUo,xUo,$Uo,g3,qpe,kUo,SUo,mX,RUo,PUo,BUo,h3,Npe,IUo,qUo,gX,NUo,jUo,DUo,p3,jpe,GUo,OUo,hX,VUo,XUo,zUo,_3,Dpe,WUo,QUo,pX,HUo,UUo,JUo,u3,Gpe,YUo,KUo,_X,ZUo,eJo,oJo,b3,Ope,rJo,tJo,uX,aJo,nJo,sJo,v3,Vpe,lJo,iJo,bX,dJo,cJo,fJo,F3,Xpe,mJo,gJo,vX,hJo,pJo,_Jo,T3,uJo,zpe,bJo,vJo,Wpe,FJo,TJo,M3,Lqe,md,E3,Qpe,Zy,MJo,Hpe,EJo,xqe,Oo,eL,CJo,gd,wJo,FX,AJo,yJo,TX,LJo,xJo,$Jo,oL,kJo,Upe,SJo,RJo,PJo,bt,rL,BJo,Jpe,IJo,qJo,hd,NJo,Ype,jJo,DJo,MX,GJo,OJo,VJo,C3,XJo,fo,tL,zJo,Kpe,WJo,QJo,Oa,HJo,Zpe,UJo,JJo,e_e,YJo,KJo,o_e,ZJo,eYo,oYo,Kr,w3,r_e,rYo,tYo,EX,aYo,nYo,sYo,A3,t_e,lYo,iYo,CX,dYo,cYo,fYo,y3,a_e,mYo,gYo,wX,hYo,pYo,_Yo,L3,n_e,uYo,bYo,AX,vYo,FYo,TYo,x3,s_e,MYo,EYo,yX,CYo,wYo,AYo,$3,yYo,l_e,LYo,xYo,i_e,$Yo,kYo,k3,$qe,pd,S3,d_e,aL,SYo,c_e,RYo,kqe,Vo,nL,PYo,_d,BYo,LX,IYo,qYo,xX,NYo,jYo,DYo,sL,GYo,f_e,OYo,VYo,XYo,vt,lL,zYo,m_e,WYo,QYo,ud,HYo,g_e,UYo,JYo,$X,YYo,KYo,ZYo,R3,eKo,mo,iL,oKo,h_e,rKo,tKo,Va,aKo,p_e,nKo,sKo,__e,lKo,iKo,u_e,dKo,cKo,fKo,Se,P3,b_e,mKo,gKo,kX,hKo,pKo,_Ko,B3,v_e,uKo,bKo,SX,vKo,FKo,TKo,I3,F_e,MKo,EKo,RX,CKo,wKo,AKo,q3,T_e,yKo,LKo,PX,xKo,$Ko,kKo,N3,M_e,SKo,RKo,BX,PKo,BKo,IKo,j3,E_e,qKo,NKo,IX,jKo,DKo,GKo,D3,C_e,OKo,VKo,qX,XKo,zKo,WKo,G3,w_e,QKo,HKo,NX,UKo,JKo,YKo,O3,A_e,KKo,ZKo,jX,eZo,oZo,rZo,V3,tZo,y_e,aZo,nZo,L_e,sZo,lZo,X3,Sqe,bd,z3,x_e,dL,iZo,$_e,dZo,Rqe,Xo,cL,cZo,vd,fZo,DX,mZo,gZo,GX,hZo,pZo,_Zo,fL,uZo,k_e,bZo,vZo,FZo,Ft,mL,TZo,S_e,MZo,EZo,Fd,CZo,R_e,wZo,AZo,OX,yZo,LZo,xZo,W3,$Zo,go,gL,kZo,P_e,SZo,RZo,Xa,PZo,B_e,BZo,IZo,I_e,qZo,NZo,q_e,jZo,DZo,GZo,hL,Q3,N_e,OZo,VZo,VX,XZo,zZo,WZo,H3,j_e,QZo,HZo,XX,UZo,JZo,YZo,U3,KZo,D_e,ZZo,eer,G_e,oer,rer,J3,Pqe,Td,Y3,O_e,pL,ter,V_e,aer,Bqe,zo,_L,ner,Md,ser,zX,ler,ier,WX,der,cer,fer,uL,mer,X_e,ger,her,per,Tt,bL,_er,z_e,uer,ber,Ed,ver,W_e,Fer,Ter,QX,Mer,Eer,Cer,K3,wer,ho,vL,Aer,Q_e,yer,Ler,za,xer,H_e,$er,ker,U_e,Ser,Rer,J_e,Per,Ber,Ier,Zr,Z3,Y_e,qer,Ner,HX,jer,Der,Ger,eF,K_e,Oer,Ver,UX,Xer,zer,Wer,oF,Z_e,Qer,Her,JX,Uer,Jer,Yer,rF,eue,Ker,Zer,YX,eor,oor,ror,tF,oue,tor,aor,KX,nor,sor,lor,aF,ior,rue,dor,cor,tue,mor,gor,nF,Iqe,Cd,sF,aue,FL,hor,nue,por,qqe,Wo,TL,_or,wd,uor,ZX,bor,vor,ez,For,Tor,Mor,ML,Eor,sue,Cor,wor,Aor,Mt,EL,yor,lue,Lor,xor,Ad,$or,iue,kor,Sor,oz,Ror,Por,Bor,lF,Ior,po,CL,qor,due,Nor,jor,Wa,Dor,cue,Gor,Oor,fue,Vor,Xor,mue,zor,Wor,Qor,yd,iF,gue,Hor,Uor,rz,Jor,Yor,Kor,dF,hue,Zor,err,tz,orr,rrr,trr,cF,pue,arr,nrr,az,srr,lrr,irr,fF,drr,_ue,crr,frr,uue,mrr,grr,mF,Nqe,Ld,gF,bue,wL,hrr,vue,prr,jqe,Qo,AL,_rr,xd,urr,nz,brr,vrr,sz,Frr,Trr,Mrr,yL,Err,Fue,Crr,wrr,Arr,Et,LL,yrr,Tue,Lrr,xrr,$d,$rr,Mue,krr,Srr,lz,Rrr,Prr,Brr,hF,Irr,_o,xL,qrr,Eue,Nrr,jrr,Qa,Drr,Cue,Grr,Orr,wue,Vrr,Xrr,Aue,zrr,Wrr,Qrr,$L,pF,yue,Hrr,Urr,iz,Jrr,Yrr,Krr,_F,Lue,Zrr,etr,dz,otr,rtr,ttr,uF,atr,xue,ntr,str,$ue,ltr,itr,bF,Dqe,kd,vF,kue,kL,dtr,Sue,ctr,Gqe,Ho,SL,ftr,Sd,mtr,cz,gtr,htr,fz,ptr,_tr,utr,RL,btr,Rue,vtr,Ftr,Ttr,Ct,PL,Mtr,Pue,Etr,Ctr,Rd,wtr,Bue,Atr,ytr,mz,Ltr,xtr,$tr,FF,ktr,uo,BL,Str,Iue,Rtr,Ptr,Ha,Btr,que,Itr,qtr,Nue,Ntr,jtr,jue,Dtr,Gtr,Otr,Due,TF,Gue,Vtr,Xtr,gz,ztr,Wtr,Qtr,MF,Htr,Oue,Utr,Jtr,Vue,Ytr,Ktr,EF,Oqe,Pd,CF,Xue,IL,Ztr,zue,ear,Vqe,Uo,qL,oar,Bd,rar,hz,tar,aar,pz,nar,sar,lar,NL,iar,Wue,dar,car,far,wt,jL,mar,Que,gar,har,Id,par,Hue,_ar,uar,_z,bar,Far,Tar,wF,Mar,bo,DL,Ear,Uue,Car,war,Ua,Aar,Jue,yar,Lar,Yue,xar,$ar,Kue,kar,Sar,Rar,Ja,AF,Zue,Par,Bar,uz,Iar,qar,Nar,yF,e2e,jar,Dar,bz,Gar,Oar,Var,LF,o2e,Xar,zar,vz,War,Qar,Har,xF,r2e,Uar,Jar,Fz,Yar,Kar,Zar,$F,enr,t2e,onr,rnr,a2e,tnr,anr,kF,Xqe,qd,SF,n2e,GL,nnr,s2e,snr,zqe,Jo,OL,lnr,Nd,inr,Tz,dnr,cnr,Mz,fnr,mnr,gnr,VL,hnr,l2e,pnr,_nr,unr,At,XL,bnr,i2e,vnr,Fnr,jd,Tnr,d2e,Mnr,Enr,Ez,Cnr,wnr,Anr,RF,ynr,vo,zL,Lnr,c2e,xnr,$nr,Ya,knr,f2e,Snr,Rnr,m2e,Pnr,Bnr,g2e,Inr,qnr,Nnr,h2e,PF,p2e,jnr,Dnr,Cz,Gnr,Onr,Vnr,BF,Xnr,_2e,znr,Wnr,u2e,Qnr,Hnr,IF,Wqe,Dd,qF,b2e,WL,Unr,v2e,Jnr,Qqe,Yo,QL,Ynr,Gd,Knr,wz,Znr,esr,Az,osr,rsr,tsr,HL,asr,F2e,nsr,ssr,lsr,yt,UL,isr,T2e,dsr,csr,Od,fsr,M2e,msr,gsr,yz,hsr,psr,_sr,NF,usr,wr,JL,bsr,E2e,vsr,Fsr,Ka,Tsr,C2e,Msr,Esr,w2e,Csr,wsr,A2e,Asr,ysr,Lsr,N,jF,y2e,xsr,$sr,Lz,ksr,Ssr,Rsr,DF,L2e,Psr,Bsr,xz,Isr,qsr,Nsr,GF,x2e,jsr,Dsr,$z,Gsr,Osr,Vsr,OF,$2e,Xsr,zsr,kz,Wsr,Qsr,Hsr,VF,k2e,Usr,Jsr,Sz,Ysr,Ksr,Zsr,XF,S2e,elr,olr,Rz,rlr,tlr,alr,zF,R2e,nlr,slr,Pz,llr,ilr,dlr,WF,P2e,clr,flr,Bz,mlr,glr,hlr,QF,B2e,plr,_lr,Iz,ulr,blr,vlr,HF,I2e,Flr,Tlr,qz,Mlr,Elr,Clr,UF,q2e,wlr,Alr,Nz,ylr,Llr,xlr,JF,N2e,$lr,klr,jz,Slr,Rlr,Plr,YF,j2e,Blr,Ilr,Dz,qlr,Nlr,jlr,KF,D2e,Dlr,Glr,Gz,Olr,Vlr,Xlr,ZF,G2e,zlr,Wlr,Oz,Qlr,Hlr,Ulr,eT,O2e,Jlr,Ylr,Vz,Klr,Zlr,eir,oT,V2e,oir,rir,Xz,tir,air,nir,Bs,X2e,sir,lir,zz,iir,dir,Wz,cir,fir,mir,rT,z2e,gir,hir,Qz,pir,_ir,uir,tT,W2e,bir,vir,Hz,Fir,Tir,Mir,aT,Q2e,Eir,Cir,Uz,wir,Air,yir,nT,H2e,Lir,xir,Jz,$ir,kir,Sir,sT,U2e,Rir,Pir,Yz,Bir,Iir,qir,lT,J2e,Nir,jir,Kz,Dir,Gir,Oir,iT,Y2e,Vir,Xir,Zz,zir,Wir,Qir,dT,K2e,Hir,Uir,eW,Jir,Yir,Kir,cT,Z2e,Zir,edr,oW,odr,rdr,tdr,fT,e1e,adr,ndr,rW,sdr,ldr,idr,mT,o1e,ddr,cdr,tW,fdr,mdr,gdr,gT,r1e,hdr,pdr,aW,_dr,udr,bdr,hT,t1e,vdr,Fdr,nW,Tdr,Mdr,Edr,pT,a1e,Cdr,wdr,sW,Adr,ydr,Ldr,_T,n1e,xdr,$dr,lW,kdr,Sdr,Rdr,uT,s1e,Pdr,Bdr,iW,Idr,qdr,Ndr,bT,l1e,jdr,Ddr,dW,Gdr,Odr,Vdr,vT,i1e,Xdr,zdr,cW,Wdr,Qdr,Hdr,FT,d1e,Udr,Jdr,fW,Ydr,Kdr,Zdr,TT,c1e,ecr,ocr,mW,rcr,tcr,acr,MT,f1e,ncr,scr,gW,lcr,icr,dcr,ET,m1e,ccr,fcr,hW,mcr,gcr,hcr,CT,g1e,pcr,_cr,pW,ucr,bcr,vcr,wT,h1e,Fcr,Tcr,_W,Mcr,Ecr,Ccr,AT,p1e,wcr,Acr,uW,ycr,Lcr,xcr,yT,_1e,$cr,kcr,bW,Scr,Rcr,Pcr,LT,u1e,Bcr,Icr,vW,qcr,Ncr,jcr,xT,b1e,Dcr,Gcr,FW,Ocr,Vcr,Xcr,$T,Hqe,Vd,kT,v1e,YL,zcr,F1e,Wcr,Uqe,Ko,KL,Qcr,Xd,Hcr,TW,Ucr,Jcr,MW,Ycr,Kcr,Zcr,ZL,efr,T1e,ofr,rfr,tfr,Lt,e8,afr,M1e,nfr,sfr,zd,lfr,E1e,ifr,dfr,EW,cfr,ffr,mfr,ST,gfr,Ar,o8,hfr,C1e,pfr,_fr,Za,ufr,w1e,bfr,vfr,A1e,Ffr,Tfr,y1e,Mfr,Efr,Cfr,se,RT,L1e,wfr,Afr,CW,yfr,Lfr,xfr,PT,x1e,$fr,kfr,wW,Sfr,Rfr,Pfr,BT,$1e,Bfr,Ifr,AW,qfr,Nfr,jfr,IT,k1e,Dfr,Gfr,yW,Ofr,Vfr,Xfr,qT,S1e,zfr,Wfr,LW,Qfr,Hfr,Ufr,NT,R1e,Jfr,Yfr,xW,Kfr,Zfr,emr,jT,P1e,omr,rmr,$W,tmr,amr,nmr,DT,B1e,smr,lmr,kW,imr,dmr,cmr,GT,I1e,fmr,mmr,SW,gmr,hmr,pmr,OT,q1e,_mr,umr,RW,bmr,vmr,Fmr,VT,N1e,Tmr,Mmr,PW,Emr,Cmr,wmr,XT,j1e,Amr,ymr,BW,Lmr,xmr,$mr,zT,D1e,kmr,Smr,IW,Rmr,Pmr,Bmr,WT,G1e,Imr,qmr,qW,Nmr,jmr,Dmr,QT,O1e,Gmr,Omr,NW,Vmr,Xmr,zmr,HT,V1e,Wmr,Qmr,jW,Hmr,Umr,Jmr,UT,X1e,Ymr,Kmr,DW,Zmr,egr,ogr,JT,z1e,rgr,tgr,GW,agr,ngr,sgr,YT,W1e,lgr,igr,OW,dgr,cgr,fgr,KT,Q1e,mgr,ggr,VW,hgr,pgr,_gr,ZT,H1e,ugr,bgr,XW,vgr,Fgr,Tgr,e7,U1e,Mgr,Egr,zW,Cgr,wgr,Agr,o7,J1e,ygr,Lgr,WW,xgr,$gr,kgr,r7,Jqe,Wd,t7,Y1e,r8,Sgr,K1e,Rgr,Yqe,Zo,t8,Pgr,Qd,Bgr,QW,Igr,qgr,HW,Ngr,jgr,Dgr,a8,Ggr,Z1e,Ogr,Vgr,Xgr,xt,n8,zgr,ebe,Wgr,Qgr,Hd,Hgr,obe,Ugr,Jgr,UW,Ygr,Kgr,Zgr,a7,ehr,yr,s8,ohr,rbe,rhr,thr,en,ahr,tbe,nhr,shr,abe,lhr,ihr,nbe,dhr,chr,fhr,Me,n7,sbe,mhr,ghr,JW,hhr,phr,_hr,s7,lbe,uhr,bhr,YW,vhr,Fhr,Thr,l7,ibe,Mhr,Ehr,KW,Chr,whr,Ahr,i7,dbe,yhr,Lhr,ZW,xhr,$hr,khr,d7,cbe,Shr,Rhr,eQ,Phr,Bhr,Ihr,c7,fbe,qhr,Nhr,oQ,jhr,Dhr,Ghr,f7,mbe,Ohr,Vhr,rQ,Xhr,zhr,Whr,m7,gbe,Qhr,Hhr,tQ,Uhr,Jhr,Yhr,g7,hbe,Khr,Zhr,aQ,epr,opr,rpr,h7,pbe,tpr,apr,nQ,npr,spr,lpr,p7,_be,ipr,dpr,sQ,cpr,fpr,mpr,_7,ube,gpr,hpr,lQ,ppr,_pr,upr,u7,Kqe,Ud,b7,bbe,l8,bpr,vbe,vpr,Zqe,er,i8,Fpr,Jd,Tpr,iQ,Mpr,Epr,dQ,Cpr,wpr,Apr,d8,ypr,Fbe,Lpr,xpr,$pr,$t,c8,kpr,Tbe,Spr,Rpr,Yd,Ppr,Mbe,Bpr,Ipr,cQ,qpr,Npr,jpr,v7,Dpr,Lr,f8,Gpr,Ebe,Opr,Vpr,on,Xpr,Cbe,zpr,Wpr,wbe,Qpr,Hpr,Abe,Upr,Jpr,Ypr,rn,F7,ybe,Kpr,Zpr,fQ,e_r,o_r,r_r,T7,Lbe,t_r,a_r,mQ,n_r,s_r,l_r,M7,xbe,i_r,d_r,gQ,c_r,f_r,m_r,E7,$be,g_r,h_r,hQ,p_r,__r,u_r,C7,eNe,Kd,w7,kbe,m8,b_r,Sbe,v_r,oNe,or,g8,F_r,Zd,T_r,pQ,M_r,E_r,_Q,C_r,w_r,A_r,h8,y_r,Rbe,L_r,x_r,$_r,kt,p8,k_r,Pbe,S_r,R_r,ec,P_r,Bbe,B_r,I_r,uQ,q_r,N_r,j_r,A7,D_r,xr,_8,G_r,Ibe,O_r,V_r,tn,X_r,qbe,z_r,W_r,Nbe,Q_r,H_r,jbe,U_r,J_r,Y_r,ie,y7,Dbe,K_r,Z_r,bQ,eur,our,rur,L7,Gbe,tur,aur,vQ,nur,sur,lur,x7,Obe,iur,dur,FQ,cur,fur,mur,$7,Vbe,gur,hur,TQ,pur,_ur,uur,k7,Xbe,bur,vur,MQ,Fur,Tur,Mur,S7,zbe,Eur,Cur,EQ,wur,Aur,yur,R7,Wbe,Lur,xur,CQ,$ur,kur,Sur,P7,Qbe,Rur,Pur,wQ,Bur,Iur,qur,B7,Hbe,Nur,jur,AQ,Dur,Gur,Our,I7,Ube,Vur,Xur,yQ,zur,Wur,Qur,q7,Jbe,Hur,Uur,LQ,Jur,Yur,Kur,N7,Ybe,Zur,e2r,xQ,o2r,r2r,t2r,j7,Kbe,a2r,n2r,$Q,s2r,l2r,i2r,D7,Zbe,d2r,c2r,kQ,f2r,m2r,g2r,G7,e5e,h2r,p2r,SQ,_2r,u2r,b2r,O7,o5e,v2r,F2r,RQ,T2r,M2r,E2r,V7,r5e,C2r,w2r,PQ,A2r,y2r,L2r,X7,t5e,x2r,$2r,BQ,k2r,S2r,R2r,z7,a5e,P2r,B2r,IQ,I2r,q2r,N2r,W7,n5e,j2r,D2r,qQ,G2r,O2r,V2r,Q7,rNe,oc,H7,s5e,u8,X2r,l5e,z2r,tNe,rr,b8,W2r,rc,Q2r,NQ,H2r,U2r,jQ,J2r,Y2r,K2r,v8,Z2r,i5e,e1r,o1r,r1r,St,F8,t1r,d5e,a1r,n1r,tc,s1r,c5e,l1r,i1r,DQ,d1r,c1r,f1r,U7,m1r,$r,T8,g1r,f5e,h1r,p1r,an,_1r,m5e,u1r,b1r,g5e,v1r,F1r,h5e,T1r,M1r,E1r,ye,J7,p5e,C1r,w1r,GQ,A1r,y1r,L1r,Y7,_5e,x1r,$1r,OQ,k1r,S1r,R1r,K7,u5e,P1r,B1r,VQ,I1r,q1r,N1r,Z7,b5e,j1r,D1r,XQ,G1r,O1r,V1r,eM,v5e,X1r,z1r,zQ,W1r,Q1r,H1r,oM,F5e,U1r,J1r,WQ,Y1r,K1r,Z1r,rM,T5e,ebr,obr,QQ,rbr,tbr,abr,tM,M5e,nbr,sbr,HQ,lbr,ibr,dbr,aM,E5e,cbr,fbr,UQ,mbr,gbr,hbr,nM,C5e,pbr,_br,JQ,ubr,bbr,vbr,sM,aNe,ac,lM,w5e,M8,Fbr,A5e,Tbr,nNe,tr,E8,Mbr,nc,Ebr,YQ,Cbr,wbr,KQ,Abr,ybr,Lbr,C8,xbr,y5e,$br,kbr,Sbr,Rt,w8,Rbr,L5e,Pbr,Bbr,sc,Ibr,x5e,qbr,Nbr,ZQ,jbr,Dbr,Gbr,iM,Obr,kr,A8,Vbr,$5e,Xbr,zbr,nn,Wbr,k5e,Qbr,Hbr,S5e,Ubr,Jbr,R5e,Ybr,Kbr,Zbr,ee,dM,P5e,e5r,o5r,eH,r5r,t5r,a5r,cM,B5e,n5r,s5r,oH,l5r,i5r,d5r,fM,I5e,c5r,f5r,rH,m5r,g5r,h5r,mM,q5e,p5r,_5r,tH,u5r,b5r,v5r,gM,N5e,F5r,T5r,aH,M5r,E5r,C5r,hM,j5e,w5r,A5r,nH,y5r,L5r,x5r,pM,D5e,$5r,k5r,sH,S5r,R5r,P5r,_M,G5e,B5r,I5r,lH,q5r,N5r,j5r,uM,O5e,D5r,G5r,iH,O5r,V5r,X5r,bM,V5e,z5r,W5r,dH,Q5r,H5r,U5r,vM,X5e,J5r,Y5r,cH,K5r,Z5r,evr,FM,z5e,ovr,rvr,fH,tvr,avr,nvr,TM,W5e,svr,lvr,mH,ivr,dvr,cvr,MM,Q5e,fvr,mvr,gH,gvr,hvr,pvr,EM,H5e,_vr,uvr,hH,bvr,vvr,Fvr,CM,U5e,Tvr,Mvr,pH,Evr,Cvr,wvr,wM,J5e,Avr,yvr,_H,Lvr,xvr,$vr,AM,Y5e,kvr,Svr,uH,Rvr,Pvr,Bvr,yM,K5e,Ivr,qvr,bH,Nvr,jvr,Dvr,LM,Z5e,Gvr,Ovr,vH,Vvr,Xvr,zvr,xM,eve,Wvr,Qvr,FH,Hvr,Uvr,Jvr,$M,ove,Yvr,Kvr,TH,Zvr,e3r,o3r,kM,rve,r3r,t3r,MH,a3r,n3r,s3r,SM,tve,l3r,i3r,EH,d3r,c3r,f3r,RM,ave,m3r,g3r,CH,h3r,p3r,_3r,PM,nve,u3r,b3r,wH,v3r,F3r,T3r,BM,sNe,lc,IM,sve,y8,M3r,lve,E3r,lNe,ar,L8,C3r,ic,w3r,AH,A3r,y3r,yH,L3r,x3r,$3r,x8,k3r,ive,S3r,R3r,P3r,Pt,$8,B3r,dve,I3r,q3r,dc,N3r,cve,j3r,D3r,LH,G3r,O3r,V3r,qM,X3r,Sr,k8,z3r,fve,W3r,Q3r,sn,H3r,mve,U3r,J3r,gve,Y3r,K3r,hve,Z3r,eFr,oFr,he,NM,pve,rFr,tFr,xH,aFr,nFr,sFr,jM,_ve,lFr,iFr,$H,dFr,cFr,fFr,DM,uve,mFr,gFr,kH,hFr,pFr,_Fr,GM,bve,uFr,bFr,SH,vFr,FFr,TFr,OM,vve,MFr,EFr,RH,CFr,wFr,AFr,VM,Fve,yFr,LFr,PH,xFr,$Fr,kFr,XM,Tve,SFr,RFr,BH,PFr,BFr,IFr,zM,Mve,qFr,NFr,IH,jFr,DFr,GFr,WM,Eve,OFr,VFr,qH,XFr,zFr,WFr,QM,Cve,QFr,HFr,NH,UFr,JFr,YFr,HM,wve,KFr,ZFr,jH,eTr,oTr,rTr,UM,Ave,tTr,aTr,DH,nTr,sTr,lTr,JM,yve,iTr,dTr,GH,cTr,fTr,mTr,YM,Lve,gTr,hTr,OH,pTr,_Tr,uTr,KM,xve,bTr,vTr,VH,FTr,TTr,MTr,ZM,$ve,ETr,CTr,XH,wTr,ATr,yTr,e4,kve,LTr,xTr,zH,$Tr,kTr,STr,o4,iNe,cc,r4,Sve,S8,RTr,Rve,PTr,dNe,nr,R8,BTr,fc,ITr,WH,qTr,NTr,QH,jTr,DTr,GTr,P8,OTr,Pve,VTr,XTr,zTr,Bt,B8,WTr,Bve,QTr,HTr,mc,UTr,Ive,JTr,YTr,HH,KTr,ZTr,e7r,t4,o7r,Rr,I8,r7r,qve,t7r,a7r,ln,n7r,Nve,s7r,l7r,jve,i7r,d7r,Dve,c7r,f7r,m7r,q8,a4,Gve,g7r,h7r,UH,p7r,_7r,u7r,n4,Ove,b7r,v7r,JH,F7r,T7r,M7r,s4,cNe,gc,l4,Vve,N8,E7r,Xve,C7r,fNe,sr,j8,w7r,hc,A7r,YH,y7r,L7r,KH,x7r,$7r,k7r,D8,S7r,zve,R7r,P7r,B7r,It,G8,I7r,Wve,q7r,N7r,pc,j7r,Qve,D7r,G7r,ZH,O7r,V7r,X7r,i4,z7r,Pr,O8,W7r,Hve,Q7r,H7r,dn,U7r,Uve,J7r,Y7r,Jve,K7r,Z7r,Yve,eMr,oMr,rMr,Kve,d4,Zve,tMr,aMr,eU,nMr,sMr,lMr,c4,mNe,_c,f4,e3e,V8,iMr,o3e,dMr,gNe,lr,X8,cMr,uc,fMr,oU,mMr,gMr,rU,hMr,pMr,_Mr,z8,uMr,r3e,bMr,vMr,FMr,qt,W8,TMr,t3e,MMr,EMr,bc,CMr,a3e,wMr,AMr,tU,yMr,LMr,xMr,m4,$Mr,Br,Q8,kMr,n3e,SMr,RMr,cn,PMr,s3e,BMr,IMr,l3e,qMr,NMr,i3e,jMr,DMr,GMr,de,g4,d3e,OMr,VMr,aU,XMr,zMr,WMr,h4,c3e,QMr,HMr,nU,UMr,JMr,YMr,p4,f3e,KMr,ZMr,sU,e4r,o4r,r4r,_4,m3e,t4r,a4r,lU,n4r,s4r,l4r,u4,g3e,i4r,d4r,iU,c4r,f4r,m4r,b4,h3e,g4r,h4r,dU,p4r,_4r,u4r,v4,p3e,b4r,v4r,cU,F4r,T4r,M4r,F4,_3e,E4r,C4r,fU,w4r,A4r,y4r,T4,u3e,L4r,x4r,mU,$4r,k4r,S4r,M4,b3e,R4r,P4r,gU,B4r,I4r,q4r,E4,v3e,N4r,j4r,hU,D4r,G4r,O4r,C4,F3e,V4r,X4r,pU,z4r,W4r,Q4r,w4,T3e,H4r,U4r,_U,J4r,Y4r,K4r,A4,M3e,Z4r,eEr,uU,oEr,rEr,tEr,y4,E3e,aEr,nEr,bU,sEr,lEr,iEr,L4,C3e,dEr,cEr,vU,fEr,mEr,gEr,x4,w3e,hEr,pEr,FU,_Er,uEr,bEr,$4,A3e,vEr,FEr,TU,TEr,MEr,EEr,k4,y3e,CEr,wEr,MU,AEr,yEr,LEr,S4,L3e,xEr,$Er,EU,kEr,SEr,REr,R4,hNe,vc,P4,x3e,H8,PEr,$3e,BEr,pNe,ir,U8,IEr,Fc,qEr,CU,NEr,jEr,wU,DEr,GEr,OEr,J8,VEr,k3e,XEr,zEr,WEr,Nt,Y8,QEr,S3e,HEr,UEr,Tc,JEr,R3e,YEr,KEr,AU,ZEr,eCr,oCr,B4,rCr,Ir,K8,tCr,P3e,aCr,nCr,fn,sCr,B3e,lCr,iCr,I3e,dCr,cCr,q3e,fCr,mCr,gCr,ce,I4,N3e,hCr,pCr,yU,_Cr,uCr,bCr,q4,j3e,vCr,FCr,LU,TCr,MCr,ECr,N4,D3e,CCr,wCr,xU,ACr,yCr,LCr,j4,G3e,xCr,$Cr,$U,kCr,SCr,RCr,D4,O3e,PCr,BCr,kU,ICr,qCr,NCr,G4,V3e,jCr,DCr,SU,GCr,OCr,VCr,O4,X3e,XCr,zCr,RU,WCr,QCr,HCr,V4,z3e,UCr,JCr,PU,YCr,KCr,ZCr,X4,W3e,ewr,owr,BU,rwr,twr,awr,z4,Q3e,nwr,swr,IU,lwr,iwr,dwr,W4,H3e,cwr,fwr,qU,mwr,gwr,hwr,Q4,U3e,pwr,_wr,NU,uwr,bwr,vwr,H4,J3e,Fwr,Twr,jU,Mwr,Ewr,Cwr,U4,Y3e,wwr,Awr,DU,ywr,Lwr,xwr,J4,K3e,$wr,kwr,GU,Swr,Rwr,Pwr,Y4,Z3e,Bwr,Iwr,OU,qwr,Nwr,jwr,K4,eFe,Dwr,Gwr,VU,Owr,Vwr,Xwr,Z4,oFe,zwr,Wwr,XU,Qwr,Hwr,Uwr,eE,rFe,Jwr,Ywr,zU,Kwr,Zwr,e0r,oE,tFe,o0r,r0r,WU,t0r,a0r,n0r,rE,_Ne,Mc,tE,aFe,Z8,s0r,nFe,l0r,uNe,dr,ex,i0r,Ec,d0r,QU,c0r,f0r,HU,m0r,g0r,h0r,ox,p0r,sFe,_0r,u0r,b0r,jt,rx,v0r,lFe,F0r,T0r,Cc,M0r,iFe,E0r,C0r,UU,w0r,A0r,y0r,aE,L0r,qr,tx,x0r,dFe,$0r,k0r,mn,S0r,cFe,R0r,P0r,fFe,B0r,I0r,mFe,q0r,N0r,j0r,gFe,nE,hFe,D0r,G0r,JU,O0r,V0r,X0r,sE,bNe,wc,lE,pFe,ax,z0r,_Fe,W0r,vNe,cr,nx,Q0r,Ac,H0r,YU,U0r,J0r,KU,Y0r,K0r,Z0r,sx,eAr,uFe,oAr,rAr,tAr,Dt,lx,aAr,bFe,nAr,sAr,yc,lAr,vFe,iAr,dAr,ZU,cAr,fAr,mAr,iE,gAr,Nr,ix,hAr,FFe,pAr,_Ar,gn,uAr,TFe,bAr,vAr,MFe,FAr,TAr,EFe,MAr,EAr,CAr,CFe,dE,wFe,wAr,AAr,eJ,yAr,LAr,xAr,cE,FNe,Lc,fE,AFe,dx,$Ar,yFe,kAr,TNe,fr,cx,SAr,xc,RAr,oJ,PAr,BAr,rJ,IAr,qAr,NAr,fx,jAr,LFe,DAr,GAr,OAr,Gt,mx,VAr,xFe,XAr,zAr,$c,WAr,$Fe,QAr,HAr,tJ,UAr,JAr,YAr,mE,KAr,jr,gx,ZAr,kFe,e6r,o6r,hn,r6r,SFe,t6r,a6r,RFe,n6r,s6r,PFe,l6r,i6r,d6r,te,gE,BFe,c6r,f6r,aJ,m6r,g6r,h6r,hE,IFe,p6r,_6r,nJ,u6r,b6r,v6r,pE,qFe,F6r,T6r,sJ,M6r,E6r,C6r,_E,NFe,w6r,A6r,lJ,y6r,L6r,x6r,uE,jFe,$6r,k6r,iJ,S6r,R6r,P6r,bE,DFe,B6r,I6r,dJ,q6r,N6r,j6r,vE,GFe,D6r,G6r,cJ,O6r,V6r,X6r,FE,OFe,z6r,W6r,fJ,Q6r,H6r,U6r,TE,VFe,J6r,Y6r,mJ,K6r,Z6r,eyr,ME,XFe,oyr,ryr,gJ,tyr,ayr,nyr,EE,zFe,syr,lyr,hJ,iyr,dyr,cyr,CE,WFe,fyr,myr,pJ,gyr,hyr,pyr,wE,QFe,_yr,uyr,_J,byr,vyr,Fyr,AE,HFe,Tyr,Myr,uJ,Eyr,Cyr,wyr,yE,UFe,Ayr,yyr,bJ,Lyr,xyr,$yr,LE,JFe,kyr,Syr,vJ,Ryr,Pyr,Byr,xE,YFe,Iyr,qyr,FJ,Nyr,jyr,Dyr,$E,KFe,Gyr,Oyr,TJ,Vyr,Xyr,zyr,kE,ZFe,Wyr,Qyr,MJ,Hyr,Uyr,Jyr,SE,eTe,Yyr,Kyr,EJ,Zyr,eLr,oLr,RE,oTe,rLr,tLr,CJ,aLr,nLr,sLr,PE,rTe,lLr,iLr,wJ,dLr,cLr,fLr,BE,tTe,mLr,gLr,AJ,hLr,pLr,_Lr,IE,aTe,uLr,bLr,yJ,vLr,FLr,TLr,qE,nTe,MLr,ELr,LJ,CLr,wLr,ALr,NE,MNe,kc,jE,sTe,hx,yLr,lTe,LLr,ENe,mr,px,xLr,Sc,$Lr,xJ,kLr,SLr,$J,RLr,PLr,BLr,_x,ILr,iTe,qLr,NLr,jLr,Ot,ux,DLr,dTe,GLr,OLr,Rc,VLr,cTe,XLr,zLr,kJ,WLr,QLr,HLr,DE,ULr,Dr,bx,JLr,fTe,YLr,KLr,pn,ZLr,mTe,e8r,o8r,gTe,r8r,t8r,hTe,a8r,n8r,s8r,Re,GE,pTe,l8r,i8r,SJ,d8r,c8r,f8r,OE,_Te,m8r,g8r,RJ,h8r,p8r,_8r,VE,uTe,u8r,b8r,PJ,v8r,F8r,T8r,XE,bTe,M8r,E8r,BJ,C8r,w8r,A8r,zE,vTe,y8r,L8r,IJ,x8r,$8r,k8r,WE,FTe,S8r,R8r,qJ,P8r,B8r,I8r,QE,TTe,q8r,N8r,NJ,j8r,D8r,G8r,HE,MTe,O8r,V8r,jJ,X8r,z8r,W8r,UE,ETe,Q8r,H8r,DJ,U8r,J8r,Y8r,JE,CNe,Pc,YE,CTe,vx,K8r,wTe,Z8r,wNe,gr,Fx,exr,Bc,oxr,GJ,rxr,txr,OJ,axr,nxr,sxr,Tx,lxr,ATe,ixr,dxr,cxr,Vt,Mx,fxr,yTe,mxr,gxr,Ic,hxr,LTe,pxr,_xr,VJ,uxr,bxr,vxr,KE,Fxr,Gr,Ex,Txr,xTe,Mxr,Exr,_n,Cxr,$Te,wxr,Axr,kTe,yxr,Lxr,STe,xxr,$xr,kxr,Ee,ZE,RTe,Sxr,Rxr,XJ,Pxr,Bxr,Ixr,eC,PTe,qxr,Nxr,zJ,jxr,Dxr,Gxr,oC,BTe,Oxr,Vxr,WJ,Xxr,zxr,Wxr,rC,ITe,Qxr,Hxr,QJ,Uxr,Jxr,Yxr,tC,qTe,Kxr,Zxr,HJ,e9r,o9r,r9r,aC,NTe,t9r,a9r,UJ,n9r,s9r,l9r,nC,jTe,i9r,d9r,JJ,c9r,f9r,m9r,sC,DTe,g9r,h9r,YJ,p9r,_9r,u9r,lC,GTe,b9r,v9r,KJ,F9r,T9r,M9r,iC,OTe,E9r,C9r,ZJ,w9r,A9r,y9r,dC,VTe,L9r,x9r,eY,$9r,k9r,S9r,cC,XTe,R9r,P9r,oY,B9r,I9r,q9r,fC,ANe,qc,mC,zTe,Cx,N9r,WTe,j9r,yNe,hr,wx,D9r,Nc,G9r,rY,O9r,V9r,tY,X9r,z9r,W9r,Ax,Q9r,QTe,H9r,U9r,J9r,Xt,yx,Y9r,HTe,K9r,Z9r,jc,e$r,UTe,o$r,r$r,aY,t$r,a$r,n$r,gC,s$r,Or,Lx,l$r,JTe,i$r,d$r,un,c$r,YTe,f$r,m$r,KTe,g$r,h$r,ZTe,p$r,_$r,u$r,Le,hC,e7e,b$r,v$r,nY,F$r,T$r,M$r,pC,o7e,E$r,C$r,sY,w$r,A$r,y$r,_C,r7e,L$r,x$r,lY,$$r,k$r,S$r,uC,t7e,R$r,P$r,iY,B$r,I$r,q$r,bC,a7e,N$r,j$r,dY,D$r,G$r,O$r,vC,n7e,V$r,X$r,cY,z$r,W$r,Q$r,FC,s7e,H$r,U$r,fY,J$r,Y$r,K$r,TC,l7e,Z$r,ekr,mY,okr,rkr,tkr,MC,i7e,akr,nkr,gY,skr,lkr,ikr,EC,d7e,dkr,ckr,hY,fkr,mkr,gkr,CC,LNe,Dc,wC,c7e,xx,hkr,f7e,pkr,xNe,pr,$x,_kr,Gc,ukr,pY,bkr,vkr,_Y,Fkr,Tkr,Mkr,kx,Ekr,m7e,Ckr,wkr,Akr,zt,Sx,ykr,g7e,Lkr,xkr,Oc,$kr,h7e,kkr,Skr,uY,Rkr,Pkr,Bkr,AC,Ikr,Vr,Rx,qkr,p7e,Nkr,jkr,bn,Dkr,_7e,Gkr,Okr,u7e,Vkr,Xkr,b7e,zkr,Wkr,Qkr,Pe,yC,v7e,Hkr,Ukr,bY,Jkr,Ykr,Kkr,LC,F7e,Zkr,eSr,vY,oSr,rSr,tSr,xC,T7e,aSr,nSr,FY,sSr,lSr,iSr,$C,M7e,dSr,cSr,TY,fSr,mSr,gSr,kC,E7e,hSr,pSr,MY,_Sr,uSr,bSr,SC,C7e,vSr,FSr,EY,TSr,MSr,ESr,RC,w7e,CSr,wSr,CY,ASr,ySr,LSr,PC,A7e,xSr,$Sr,wY,kSr,SSr,RSr,BC,y7e,PSr,BSr,AY,ISr,qSr,NSr,IC,$Ne,Vc,qC,L7e,Px,jSr,x7e,DSr,kNe,_r,Bx,GSr,Xc,OSr,yY,VSr,XSr,LY,zSr,WSr,QSr,Ix,HSr,$7e,USr,JSr,YSr,Wt,qx,KSr,k7e,ZSr,eRr,zc,oRr,S7e,rRr,tRr,xY,aRr,nRr,sRr,NC,lRr,Xr,Nx,iRr,R7e,dRr,cRr,vn,fRr,P7e,mRr,gRr,B7e,hRr,pRr,I7e,_Rr,uRr,bRr,xe,jC,q7e,vRr,FRr,$Y,TRr,MRr,ERr,DC,N7e,CRr,wRr,kY,ARr,yRr,LRr,GC,j7e,xRr,$Rr,SY,kRr,SRr,RRr,OC,D7e,PRr,BRr,RY,IRr,qRr,NRr,VC,G7e,jRr,DRr,PY,GRr,ORr,VRr,XC,O7e,XRr,zRr,BY,WRr,QRr,HRr,zC,V7e,URr,JRr,IY,YRr,KRr,ZRr,WC,X7e,ePr,oPr,qY,rPr,tPr,aPr,QC,z7e,nPr,sPr,NY,lPr,iPr,dPr,HC,W7e,cPr,fPr,jY,mPr,gPr,hPr,UC,SNe,Wc,JC,Q7e,jx,pPr,H7e,_Pr,RNe,ur,Dx,uPr,Qc,bPr,DY,vPr,FPr,GY,TPr,MPr,EPr,Gx,CPr,U7e,wPr,APr,yPr,Qt,Ox,LPr,J7e,xPr,$Pr,Hc,kPr,Y7e,SPr,RPr,OY,PPr,BPr,IPr,YC,qPr,zr,Vx,NPr,K7e,jPr,DPr,Fn,GPr,Z7e,OPr,VPr,eMe,XPr,zPr,oMe,WPr,QPr,HPr,$e,KC,rMe,UPr,JPr,VY,YPr,KPr,ZPr,ZC,tMe,eBr,oBr,XY,rBr,tBr,aBr,ew,aMe,nBr,sBr,zY,lBr,iBr,dBr,ow,nMe,cBr,fBr,WY,mBr,gBr,hBr,rw,sMe,pBr,_Br,QY,uBr,bBr,vBr,tw,lMe,FBr,TBr,HY,MBr,EBr,CBr,aw,iMe,wBr,ABr,UY,yBr,LBr,xBr,nw,dMe,$Br,kBr,JY,SBr,RBr,PBr,sw,cMe,BBr,IBr,YY,qBr,NBr,jBr,lw,fMe,DBr,GBr,KY,OBr,VBr,XBr,iw,PNe,Uc,dw,mMe,Xx,zBr,gMe,WBr,BNe,br,zx,QBr,Jc,HBr,ZY,UBr,JBr,eK,YBr,KBr,ZBr,Wx,eIr,hMe,oIr,rIr,tIr,Ht,Qx,aIr,pMe,nIr,sIr,Yc,lIr,_Me,iIr,dIr,oK,cIr,fIr,mIr,cw,gIr,Wr,Hx,hIr,uMe,pIr,_Ir,Tn,uIr,bMe,bIr,vIr,vMe,FIr,TIr,FMe,MIr,EIr,CIr,De,fw,TMe,wIr,AIr,rK,yIr,LIr,xIr,mw,MMe,$Ir,kIr,tK,SIr,RIr,PIr,gw,EMe,BIr,IIr,aK,qIr,NIr,jIr,hw,CMe,DIr,GIr,nK,OIr,VIr,XIr,pw,wMe,zIr,WIr,sK,QIr,HIr,UIr,_w,AMe,JIr,YIr,lK,KIr,ZIr,eqr,uw,yMe,oqr,rqr,iK,tqr,aqr,nqr,bw,LMe,sqr,lqr,dK,iqr,dqr,cqr,vw,INe,Kc,Fw,xMe,Ux,fqr,$Me,mqr,qNe,vr,Jx,gqr,Zc,hqr,cK,pqr,_qr,fK,uqr,bqr,vqr,Yx,Fqr,kMe,Tqr,Mqr,Eqr,Ut,Kx,Cqr,SMe,wqr,Aqr,ef,yqr,RMe,Lqr,xqr,mK,$qr,kqr,Sqr,Tw,Rqr,Qr,Zx,Pqr,PMe,Bqr,Iqr,Mn,qqr,BMe,Nqr,jqr,IMe,Dqr,Gqr,qMe,Oqr,Vqr,Xqr,Ge,Mw,NMe,zqr,Wqr,gK,Qqr,Hqr,Uqr,Ew,jMe,Jqr,Yqr,hK,Kqr,Zqr,eNr,Cw,DMe,oNr,rNr,pK,tNr,aNr,nNr,ww,GMe,sNr,lNr,_K,iNr,dNr,cNr,Aw,OMe,fNr,mNr,uK,gNr,hNr,pNr,yw,VMe,_Nr,uNr,bK,bNr,vNr,FNr,Lw,XMe,TNr,MNr,vK,ENr,CNr,wNr,xw,zMe,ANr,yNr,FK,LNr,xNr,$Nr,$w,NNe,of,kw,WMe,e9,kNr,QMe,SNr,jNe,Fr,o9,RNr,rf,PNr,TK,BNr,INr,MK,qNr,NNr,jNr,r9,DNr,HMe,GNr,ONr,VNr,Jt,t9,XNr,UMe,zNr,WNr,tf,QNr,JMe,HNr,UNr,EK,JNr,YNr,KNr,Sw,ZNr,Hr,a9,ejr,YMe,ojr,rjr,En,tjr,KMe,ajr,njr,ZMe,sjr,ljr,e4e,ijr,djr,cjr,o4e,Rw,r4e,fjr,mjr,CK,gjr,hjr,pjr,Pw,DNe,af,Bw,t4e,n9,_jr,a4e,ujr,GNe,Tr,s9,bjr,nf,vjr,wK,Fjr,Tjr,AK,Mjr,Ejr,Cjr,l9,wjr,n4e,Ajr,yjr,Ljr,Yt,i9,xjr,s4e,$jr,kjr,sf,Sjr,l4e,Rjr,Pjr,yK,Bjr,Ijr,qjr,Iw,Njr,Ur,d9,jjr,i4e,Djr,Gjr,Cn,Ojr,d4e,Vjr,Xjr,c4e,zjr,Wjr,f4e,Qjr,Hjr,Ujr,c9,qw,m4e,Jjr,Yjr,LK,Kjr,Zjr,eDr,Nw,g4e,oDr,rDr,xK,tDr,aDr,nDr,jw,ONe,lf,Dw,h4e,f9,sDr,p4e,lDr,VNe,Mr,m9,iDr,df,dDr,$K,cDr,fDr,kK,mDr,gDr,hDr,g9,pDr,_4e,_Dr,uDr,bDr,Kt,h9,vDr,u4e,FDr,TDr,cf,MDr,b4e,EDr,CDr,SK,wDr,ADr,yDr,Gw,LDr,Jr,p9,xDr,v4e,$Dr,kDr,wn,SDr,F4e,RDr,PDr,T4e,BDr,IDr,M4e,qDr,NDr,jDr,E4e,Ow,C4e,DDr,GDr,RK,ODr,VDr,XDr,Vw,XNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),f6=new oe({}),m6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new zDr({props:{warning:!0,$$slots:{default:[QLt]},$$scope:{ctx:L}}}),g6=new oe({}),h6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L576"}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L599"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),b6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/configuration_auto.py#L722"}}),v6=new oe({}),F6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L388"}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17253/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),C6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/tokenization_auto.py#L598"}}),w6=new oe({}),A6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17253/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),xh=new zDr({props:{$$slots:{default:[JLt]},$$scope:{ctx:L}}}),$h=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),$6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),k6=new oe({}),S6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L87"}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L101"}}),Uh=new zDr({props:{$$slots:{default:[KLt]},$$scope:{ctx:L}}}),Jh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),I6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/processing_auto.py#L254"}}),q6=new oe({}),N6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L727"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Zh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),O6=new oe({}),V6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L734"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),Q6=new oe({}),H6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L749"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),K6=new oe({}),Z6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L756"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L763"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L772"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),gy=new oe({}),hy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L806"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),wb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L813"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L799"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L781"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),Ry=new oe({}),Py=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L788"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L822"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L861"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L868"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L891"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L875"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L882"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),pL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L900"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),FL=new oe({}),TL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L907"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),wL=new oe({}),AL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L854"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L829"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L836"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_auto.py#L845"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),r8=new oe({}),t8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),l8=new oe({}),i8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),m8=new oe({}),g8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),u8=new oe({}),b8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),M8=new oe({}),E8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),y8=new oe({}),L8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),S8=new oe({}),R8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),Z8=new oe({}),ex=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),Ux=new oe({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),t9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),i9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),f9=new oe({}),m9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),h9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17253/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17253/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17253/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),l6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),i6=o("AutoConfig"),Ln=o(", "),xn=a("a"),d6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),c6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),L$=o("will create a model that is an instance of "),_i=a("a"),x$=o("BertModel"),$$=o("."),Eo=l(),wa=a("p"),k$=o("There is one class of "),uf=a("code"),S$=o("AutoModel"),KDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GIe=l(),ui=a("h2"),bf=a("a"),Aee=a("span"),F(f6.$$.fragment),ZDe=l(),yee=a("span"),eGe=o("Extending the Auto Classes"),OIe=l(),kn=a("p"),oGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lee=a("code"),rGe=o("NewModel"),tGe=o(", make sure you have a "),xee=a("code"),aGe=o("NewModelConfig"),nGe=o(` then you can add those to the auto
classes like this:`),VIe=l(),F(m6.$$.fragment),XIe=l(),R$=a("p"),sGe=o("You will then be able to use the auto classes like you would usually do!"),zIe=l(),F(vf.$$.fragment),WIe=l(),bi=a("h2"),Ff=a("a"),$ee=a("span"),F(g6.$$.fragment),lGe=l(),kee=a("span"),iGe=o("AutoConfig"),QIe=l(),Co=a("div"),F(h6.$$.fragment),dGe=l(),p6=a("p"),cGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=a("a"),fGe=o("from_pretrained()"),mGe=o(" class method."),gGe=l(),_6=a("p"),hGe=o("This class cannot be instantiated directly using "),See=a("code"),pGe=o("__init__()"),_Ge=o(" (throws an error)."),uGe=l(),Er=a("div"),F(u6.$$.fragment),bGe=l(),Ree=a("p"),vGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),FGe=l(),vi=a("p"),TGe=o("The configuration class to instantiate is selected based on the "),Pee=a("code"),MGe=o("model_type"),EGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bee=a("code"),CGe=o("pretrained_model_name_or_path"),wGe=o(":"),AGe=l(),A=a("ul"),Tf=a("li"),Iee=a("strong"),yGe=o("albert"),LGe=o(" \u2014 "),B$=a("a"),xGe=o("AlbertConfig"),$Ge=o(" (ALBERT model)"),kGe=l(),Mf=a("li"),qee=a("strong"),SGe=o("bart"),RGe=o(" \u2014 "),I$=a("a"),PGe=o("BartConfig"),BGe=o(" (BART model)"),IGe=l(),Ef=a("li"),Nee=a("strong"),qGe=o("beit"),NGe=o(" \u2014 "),q$=a("a"),jGe=o("BeitConfig"),DGe=o(" (BEiT model)"),GGe=l(),Cf=a("li"),jee=a("strong"),OGe=o("bert"),VGe=o(" \u2014 "),N$=a("a"),XGe=o("BertConfig"),zGe=o(" (BERT model)"),WGe=l(),wf=a("li"),Dee=a("strong"),QGe=o("bert-generation"),HGe=o(" \u2014 "),j$=a("a"),UGe=o("BertGenerationConfig"),JGe=o(" (Bert Generation model)"),YGe=l(),Af=a("li"),Gee=a("strong"),KGe=o("big_bird"),ZGe=o(" \u2014 "),D$=a("a"),eOe=o("BigBirdConfig"),oOe=o(" (BigBird model)"),rOe=l(),yf=a("li"),Oee=a("strong"),tOe=o("bigbird_pegasus"),aOe=o(" \u2014 "),G$=a("a"),nOe=o("BigBirdPegasusConfig"),sOe=o(" (BigBirdPegasus model)"),lOe=l(),Lf=a("li"),Vee=a("strong"),iOe=o("blenderbot"),dOe=o(" \u2014 "),O$=a("a"),cOe=o("BlenderbotConfig"),fOe=o(" (Blenderbot model)"),mOe=l(),xf=a("li"),Xee=a("strong"),gOe=o("blenderbot-small"),hOe=o(" \u2014 "),V$=a("a"),pOe=o("BlenderbotSmallConfig"),_Oe=o(" (BlenderbotSmall model)"),uOe=l(),$f=a("li"),zee=a("strong"),bOe=o("camembert"),vOe=o(" \u2014 "),X$=a("a"),FOe=o("CamembertConfig"),TOe=o(" (CamemBERT model)"),MOe=l(),kf=a("li"),Wee=a("strong"),EOe=o("canine"),COe=o(" \u2014 "),z$=a("a"),wOe=o("CanineConfig"),AOe=o(" (Canine model)"),yOe=l(),Sf=a("li"),Qee=a("strong"),LOe=o("clip"),xOe=o(" \u2014 "),W$=a("a"),$Oe=o("CLIPConfig"),kOe=o(" (CLIP model)"),SOe=l(),Rf=a("li"),Hee=a("strong"),ROe=o("convbert"),POe=o(" \u2014 "),Q$=a("a"),BOe=o("ConvBertConfig"),IOe=o(" (ConvBERT model)"),qOe=l(),Pf=a("li"),Uee=a("strong"),NOe=o("convnext"),jOe=o(" \u2014 "),H$=a("a"),DOe=o("ConvNextConfig"),GOe=o(" (ConvNext model)"),OOe=l(),Bf=a("li"),Jee=a("strong"),VOe=o("ctrl"),XOe=o(" \u2014 "),U$=a("a"),zOe=o("CTRLConfig"),WOe=o(" (CTRL model)"),QOe=l(),If=a("li"),Yee=a("strong"),HOe=o("cvt"),UOe=o(" \u2014 "),J$=a("a"),JOe=o("CvtConfig"),YOe=o(" (CvT model)"),KOe=l(),qf=a("li"),Kee=a("strong"),ZOe=o("data2vec-audio"),eVe=o(" \u2014 "),Y$=a("a"),oVe=o("Data2VecAudioConfig"),rVe=o(" (Data2VecAudio model)"),tVe=l(),Nf=a("li"),Zee=a("strong"),aVe=o("data2vec-text"),nVe=o(" \u2014 "),K$=a("a"),sVe=o("Data2VecTextConfig"),lVe=o(" (Data2VecText model)"),iVe=l(),jf=a("li"),eoe=a("strong"),dVe=o("data2vec-vision"),cVe=o(" \u2014 "),Z$=a("a"),fVe=o("Data2VecVisionConfig"),mVe=o(" (Data2VecVision model)"),gVe=l(),Df=a("li"),ooe=a("strong"),hVe=o("deberta"),pVe=o(" \u2014 "),ek=a("a"),_Ve=o("DebertaConfig"),uVe=o(" (DeBERTa model)"),bVe=l(),Gf=a("li"),roe=a("strong"),vVe=o("deberta-v2"),FVe=o(" \u2014 "),ok=a("a"),TVe=o("DebertaV2Config"),MVe=o(" (DeBERTa-v2 model)"),EVe=l(),Of=a("li"),toe=a("strong"),CVe=o("decision_transformer"),wVe=o(" \u2014 "),rk=a("a"),AVe=o("DecisionTransformerConfig"),yVe=o(" (Decision Transformer model)"),LVe=l(),Vf=a("li"),aoe=a("strong"),xVe=o("deit"),$Ve=o(" \u2014 "),tk=a("a"),kVe=o("DeiTConfig"),SVe=o(" (DeiT model)"),RVe=l(),Xf=a("li"),noe=a("strong"),PVe=o("detr"),BVe=o(" \u2014 "),ak=a("a"),IVe=o("DetrConfig"),qVe=o(" (DETR model)"),NVe=l(),zf=a("li"),soe=a("strong"),jVe=o("distilbert"),DVe=o(" \u2014 "),nk=a("a"),GVe=o("DistilBertConfig"),OVe=o(" (DistilBERT model)"),VVe=l(),Wf=a("li"),loe=a("strong"),XVe=o("dpr"),zVe=o(" \u2014 "),sk=a("a"),WVe=o("DPRConfig"),QVe=o(" (DPR model)"),HVe=l(),Qf=a("li"),ioe=a("strong"),UVe=o("dpt"),JVe=o(" \u2014 "),lk=a("a"),YVe=o("DPTConfig"),KVe=o(" (DPT model)"),ZVe=l(),Hf=a("li"),doe=a("strong"),eXe=o("electra"),oXe=o(" \u2014 "),ik=a("a"),rXe=o("ElectraConfig"),tXe=o(" (ELECTRA model)"),aXe=l(),Uf=a("li"),coe=a("strong"),nXe=o("encoder-decoder"),sXe=o(" \u2014 "),dk=a("a"),lXe=o("EncoderDecoderConfig"),iXe=o(" (Encoder decoder model)"),dXe=l(),Jf=a("li"),foe=a("strong"),cXe=o("flaubert"),fXe=o(" \u2014 "),ck=a("a"),mXe=o("FlaubertConfig"),gXe=o(" (FlauBERT model)"),hXe=l(),Yf=a("li"),moe=a("strong"),pXe=o("flava"),_Xe=o(" \u2014 "),fk=a("a"),uXe=o("FlavaConfig"),bXe=o(" (Flava model)"),vXe=l(),Kf=a("li"),goe=a("strong"),FXe=o("fnet"),TXe=o(" \u2014 "),mk=a("a"),MXe=o("FNetConfig"),EXe=o(" (FNet model)"),CXe=l(),Zf=a("li"),hoe=a("strong"),wXe=o("fsmt"),AXe=o(" \u2014 "),gk=a("a"),yXe=o("FSMTConfig"),LXe=o(" (FairSeq Machine-Translation model)"),xXe=l(),em=a("li"),poe=a("strong"),$Xe=o("funnel"),kXe=o(" \u2014 "),hk=a("a"),SXe=o("FunnelConfig"),RXe=o(" (Funnel Transformer model)"),PXe=l(),om=a("li"),_oe=a("strong"),BXe=o("glpn"),IXe=o(" \u2014 "),pk=a("a"),qXe=o("GLPNConfig"),NXe=o(" (GLPN model)"),jXe=l(),rm=a("li"),uoe=a("strong"),DXe=o("gpt2"),GXe=o(" \u2014 "),_k=a("a"),OXe=o("GPT2Config"),VXe=o(" (OpenAI GPT-2 model)"),XXe=l(),tm=a("li"),boe=a("strong"),zXe=o("gpt_neo"),WXe=o(" \u2014 "),uk=a("a"),QXe=o("GPTNeoConfig"),HXe=o(" (GPT Neo model)"),UXe=l(),am=a("li"),voe=a("strong"),JXe=o("gptj"),YXe=o(" \u2014 "),bk=a("a"),KXe=o("GPTJConfig"),ZXe=o(" (GPT-J model)"),eze=l(),nm=a("li"),Foe=a("strong"),oze=o("hubert"),rze=o(" \u2014 "),vk=a("a"),tze=o("HubertConfig"),aze=o(" (Hubert model)"),nze=l(),sm=a("li"),Toe=a("strong"),sze=o("ibert"),lze=o(" \u2014 "),Fk=a("a"),ize=o("IBertConfig"),dze=o(" (I-BERT model)"),cze=l(),lm=a("li"),Moe=a("strong"),fze=o("imagegpt"),mze=o(" \u2014 "),Tk=a("a"),gze=o("ImageGPTConfig"),hze=o(" (ImageGPT model)"),pze=l(),im=a("li"),Eoe=a("strong"),_ze=o("layoutlm"),uze=o(" \u2014 "),Mk=a("a"),bze=o("LayoutLMConfig"),vze=o(" (LayoutLM model)"),Fze=l(),dm=a("li"),Coe=a("strong"),Tze=o("layoutlmv2"),Mze=o(" \u2014 "),Ek=a("a"),Eze=o("LayoutLMv2Config"),Cze=o(" (LayoutLMv2 model)"),wze=l(),cm=a("li"),woe=a("strong"),Aze=o("led"),yze=o(" \u2014 "),Ck=a("a"),Lze=o("LEDConfig"),xze=o(" (LED model)"),$ze=l(),fm=a("li"),Aoe=a("strong"),kze=o("longformer"),Sze=o(" \u2014 "),wk=a("a"),Rze=o("LongformerConfig"),Pze=o(" (Longformer model)"),Bze=l(),mm=a("li"),yoe=a("strong"),Ize=o("luke"),qze=o(" \u2014 "),Ak=a("a"),Nze=o("LukeConfig"),jze=o(" (LUKE model)"),Dze=l(),gm=a("li"),Loe=a("strong"),Gze=o("lxmert"),Oze=o(" \u2014 "),yk=a("a"),Vze=o("LxmertConfig"),Xze=o(" (LXMERT model)"),zze=l(),hm=a("li"),xoe=a("strong"),Wze=o("m2m_100"),Qze=o(" \u2014 "),Lk=a("a"),Hze=o("M2M100Config"),Uze=o(" (M2M100 model)"),Jze=l(),pm=a("li"),$oe=a("strong"),Yze=o("marian"),Kze=o(" \u2014 "),xk=a("a"),Zze=o("MarianConfig"),eWe=o(" (Marian model)"),oWe=l(),_m=a("li"),koe=a("strong"),rWe=o("maskformer"),tWe=o(" \u2014 "),$k=a("a"),aWe=o("MaskFormerConfig"),nWe=o(" (MaskFormer model)"),sWe=l(),um=a("li"),Soe=a("strong"),lWe=o("mbart"),iWe=o(" \u2014 "),kk=a("a"),dWe=o("MBartConfig"),cWe=o(" (mBART model)"),fWe=l(),bm=a("li"),Roe=a("strong"),mWe=o("megatron-bert"),gWe=o(" \u2014 "),Sk=a("a"),hWe=o("MegatronBertConfig"),pWe=o(" (MegatronBert model)"),_We=l(),vm=a("li"),Poe=a("strong"),uWe=o("mobilebert"),bWe=o(" \u2014 "),Rk=a("a"),vWe=o("MobileBertConfig"),FWe=o(" (MobileBERT model)"),TWe=l(),Fm=a("li"),Boe=a("strong"),MWe=o("mpnet"),EWe=o(" \u2014 "),Pk=a("a"),CWe=o("MPNetConfig"),wWe=o(" (MPNet model)"),AWe=l(),Tm=a("li"),Ioe=a("strong"),yWe=o("mt5"),LWe=o(" \u2014 "),Bk=a("a"),xWe=o("MT5Config"),$We=o(" (mT5 model)"),kWe=l(),Mm=a("li"),qoe=a("strong"),SWe=o("nystromformer"),RWe=o(" \u2014 "),Ik=a("a"),PWe=o("NystromformerConfig"),BWe=o(" (Nystromformer model)"),IWe=l(),Em=a("li"),Noe=a("strong"),qWe=o("openai-gpt"),NWe=o(" \u2014 "),qk=a("a"),jWe=o("OpenAIGPTConfig"),DWe=o(" (OpenAI GPT model)"),GWe=l(),Cm=a("li"),joe=a("strong"),OWe=o("opt"),VWe=o(" \u2014 "),Nk=a("a"),XWe=o("OPTConfig"),zWe=o(" (OPT model)"),WWe=l(),wm=a("li"),Doe=a("strong"),QWe=o("pegasus"),HWe=o(" \u2014 "),jk=a("a"),UWe=o("PegasusConfig"),JWe=o(" (Pegasus model)"),YWe=l(),Am=a("li"),Goe=a("strong"),KWe=o("perceiver"),ZWe=o(" \u2014 "),Dk=a("a"),eQe=o("PerceiverConfig"),oQe=o(" (Perceiver model)"),rQe=l(),ym=a("li"),Ooe=a("strong"),tQe=o("plbart"),aQe=o(" \u2014 "),Gk=a("a"),nQe=o("PLBartConfig"),sQe=o(" (PLBart model)"),lQe=l(),Lm=a("li"),Voe=a("strong"),iQe=o("poolformer"),dQe=o(" \u2014 "),Ok=a("a"),cQe=o("PoolFormerConfig"),fQe=o(" (PoolFormer model)"),mQe=l(),xm=a("li"),Xoe=a("strong"),gQe=o("prophetnet"),hQe=o(" \u2014 "),Vk=a("a"),pQe=o("ProphetNetConfig"),_Qe=o(" (ProphetNet model)"),uQe=l(),$m=a("li"),zoe=a("strong"),bQe=o("qdqbert"),vQe=o(" \u2014 "),Xk=a("a"),FQe=o("QDQBertConfig"),TQe=o(" (QDQBert model)"),MQe=l(),km=a("li"),Woe=a("strong"),EQe=o("rag"),CQe=o(" \u2014 "),zk=a("a"),wQe=o("RagConfig"),AQe=o(" (RAG model)"),yQe=l(),Sm=a("li"),Qoe=a("strong"),LQe=o("realm"),xQe=o(" \u2014 "),Wk=a("a"),$Qe=o("RealmConfig"),kQe=o(" (Realm model)"),SQe=l(),Rm=a("li"),Hoe=a("strong"),RQe=o("reformer"),PQe=o(" \u2014 "),Qk=a("a"),BQe=o("ReformerConfig"),IQe=o(" (Reformer model)"),qQe=l(),Pm=a("li"),Uoe=a("strong"),NQe=o("regnet"),jQe=o(" \u2014 "),Hk=a("a"),DQe=o("RegNetConfig"),GQe=o(" (RegNet model)"),OQe=l(),Bm=a("li"),Joe=a("strong"),VQe=o("rembert"),XQe=o(" \u2014 "),Uk=a("a"),zQe=o("RemBertConfig"),WQe=o(" (RemBERT model)"),QQe=l(),Im=a("li"),Yoe=a("strong"),HQe=o("resnet"),UQe=o(" \u2014 "),Jk=a("a"),JQe=o("ResNetConfig"),YQe=o(" (ResNet model)"),KQe=l(),qm=a("li"),Koe=a("strong"),ZQe=o("retribert"),eHe=o(" \u2014 "),Yk=a("a"),oHe=o("RetriBertConfig"),rHe=o(" (RetriBERT model)"),tHe=l(),Nm=a("li"),Zoe=a("strong"),aHe=o("roberta"),nHe=o(" \u2014 "),Kk=a("a"),sHe=o("RobertaConfig"),lHe=o(" (RoBERTa model)"),iHe=l(),jm=a("li"),ere=a("strong"),dHe=o("roformer"),cHe=o(" \u2014 "),Zk=a("a"),fHe=o("RoFormerConfig"),mHe=o(" (RoFormer model)"),gHe=l(),Dm=a("li"),ore=a("strong"),hHe=o("segformer"),pHe=o(" \u2014 "),eS=a("a"),_He=o("SegformerConfig"),uHe=o(" (SegFormer model)"),bHe=l(),Gm=a("li"),rre=a("strong"),vHe=o("sew"),FHe=o(" \u2014 "),oS=a("a"),THe=o("SEWConfig"),MHe=o(" (SEW model)"),EHe=l(),Om=a("li"),tre=a("strong"),CHe=o("sew-d"),wHe=o(" \u2014 "),rS=a("a"),AHe=o("SEWDConfig"),yHe=o(" (SEW-D model)"),LHe=l(),Vm=a("li"),are=a("strong"),xHe=o("speech-encoder-decoder"),$He=o(" \u2014 "),tS=a("a"),kHe=o("SpeechEncoderDecoderConfig"),SHe=o(" (Speech Encoder decoder model)"),RHe=l(),Xm=a("li"),nre=a("strong"),PHe=o("speech_to_text"),BHe=o(" \u2014 "),aS=a("a"),IHe=o("Speech2TextConfig"),qHe=o(" (Speech2Text model)"),NHe=l(),zm=a("li"),sre=a("strong"),jHe=o("speech_to_text_2"),DHe=o(" \u2014 "),nS=a("a"),GHe=o("Speech2Text2Config"),OHe=o(" (Speech2Text2 model)"),VHe=l(),Wm=a("li"),lre=a("strong"),XHe=o("splinter"),zHe=o(" \u2014 "),sS=a("a"),WHe=o("SplinterConfig"),QHe=o(" (Splinter model)"),HHe=l(),Qm=a("li"),ire=a("strong"),UHe=o("squeezebert"),JHe=o(" \u2014 "),lS=a("a"),YHe=o("SqueezeBertConfig"),KHe=o(" (SqueezeBERT model)"),ZHe=l(),Hm=a("li"),dre=a("strong"),eUe=o("swin"),oUe=o(" \u2014 "),iS=a("a"),rUe=o("SwinConfig"),tUe=o(" (Swin model)"),aUe=l(),Um=a("li"),cre=a("strong"),nUe=o("t5"),sUe=o(" \u2014 "),dS=a("a"),lUe=o("T5Config"),iUe=o(" (T5 model)"),dUe=l(),Jm=a("li"),fre=a("strong"),cUe=o("tapas"),fUe=o(" \u2014 "),cS=a("a"),mUe=o("TapasConfig"),gUe=o(" (TAPAS model)"),hUe=l(),Ym=a("li"),mre=a("strong"),pUe=o("transfo-xl"),_Ue=o(" \u2014 "),fS=a("a"),uUe=o("TransfoXLConfig"),bUe=o(" (Transformer-XL model)"),vUe=l(),Km=a("li"),gre=a("strong"),FUe=o("trocr"),TUe=o(" \u2014 "),mS=a("a"),MUe=o("TrOCRConfig"),EUe=o(" (TrOCR model)"),CUe=l(),Zm=a("li"),hre=a("strong"),wUe=o("unispeech"),AUe=o(" \u2014 "),gS=a("a"),yUe=o("UniSpeechConfig"),LUe=o(" (UniSpeech model)"),xUe=l(),eg=a("li"),pre=a("strong"),$Ue=o("unispeech-sat"),kUe=o(" \u2014 "),hS=a("a"),SUe=o("UniSpeechSatConfig"),RUe=o(" (UniSpeechSat model)"),PUe=l(),og=a("li"),_re=a("strong"),BUe=o("van"),IUe=o(" \u2014 "),pS=a("a"),qUe=o("VanConfig"),NUe=o(" (VAN model)"),jUe=l(),rg=a("li"),ure=a("strong"),DUe=o("vilt"),GUe=o(" \u2014 "),_S=a("a"),OUe=o("ViltConfig"),VUe=o(" (ViLT model)"),XUe=l(),tg=a("li"),bre=a("strong"),zUe=o("vision-encoder-decoder"),WUe=o(" \u2014 "),uS=a("a"),QUe=o("VisionEncoderDecoderConfig"),HUe=o(" (Vision Encoder decoder model)"),UUe=l(),ag=a("li"),vre=a("strong"),JUe=o("vision-text-dual-encoder"),YUe=o(" \u2014 "),bS=a("a"),KUe=o("VisionTextDualEncoderConfig"),ZUe=o(" (VisionTextDualEncoder model)"),eJe=l(),ng=a("li"),Fre=a("strong"),oJe=o("visual_bert"),rJe=o(" \u2014 "),vS=a("a"),tJe=o("VisualBertConfig"),aJe=o(" (VisualBert model)"),nJe=l(),sg=a("li"),Tre=a("strong"),sJe=o("vit"),lJe=o(" \u2014 "),FS=a("a"),iJe=o("ViTConfig"),dJe=o(" (ViT model)"),cJe=l(),lg=a("li"),Mre=a("strong"),fJe=o("vit_mae"),mJe=o(" \u2014 "),TS=a("a"),gJe=o("ViTMAEConfig"),hJe=o(" (ViTMAE model)"),pJe=l(),ig=a("li"),Ere=a("strong"),_Je=o("wav2vec2"),uJe=o(" \u2014 "),MS=a("a"),bJe=o("Wav2Vec2Config"),vJe=o(" (Wav2Vec2 model)"),FJe=l(),dg=a("li"),Cre=a("strong"),TJe=o("wav2vec2-conformer"),MJe=o(" \u2014 "),ES=a("a"),EJe=o("Wav2Vec2ConformerConfig"),CJe=o(" (Wav2Vec2-Conformer model)"),wJe=l(),cg=a("li"),wre=a("strong"),AJe=o("wavlm"),yJe=o(" \u2014 "),CS=a("a"),LJe=o("WavLMConfig"),xJe=o(" (WavLM model)"),$Je=l(),fg=a("li"),Are=a("strong"),kJe=o("xglm"),SJe=o(" \u2014 "),wS=a("a"),RJe=o("XGLMConfig"),PJe=o(" (XGLM model)"),BJe=l(),mg=a("li"),yre=a("strong"),IJe=o("xlm"),qJe=o(" \u2014 "),AS=a("a"),NJe=o("XLMConfig"),jJe=o(" (XLM model)"),DJe=l(),gg=a("li"),Lre=a("strong"),GJe=o("xlm-prophetnet"),OJe=o(" \u2014 "),yS=a("a"),VJe=o("XLMProphetNetConfig"),XJe=o(" (XLMProphetNet model)"),zJe=l(),hg=a("li"),xre=a("strong"),WJe=o("xlm-roberta"),QJe=o(" \u2014 "),LS=a("a"),HJe=o("XLMRobertaConfig"),UJe=o(" (XLM-RoBERTa model)"),JJe=l(),pg=a("li"),$re=a("strong"),YJe=o("xlm-roberta-xl"),KJe=o(" \u2014 "),xS=a("a"),ZJe=o("XLMRobertaXLConfig"),eYe=o(" (XLM-RoBERTa-XL model)"),oYe=l(),_g=a("li"),kre=a("strong"),rYe=o("xlnet"),tYe=o(" \u2014 "),$S=a("a"),aYe=o("XLNetConfig"),nYe=o(" (XLNet model)"),sYe=l(),ug=a("li"),Sre=a("strong"),lYe=o("yolos"),iYe=o(" \u2014 "),kS=a("a"),dYe=o("YolosConfig"),cYe=o(" (YOLOS model)"),fYe=l(),bg=a("li"),Rre=a("strong"),mYe=o("yoso"),gYe=o(" \u2014 "),SS=a("a"),hYe=o("YosoConfig"),pYe=o(" (YOSO model)"),_Ye=l(),F(vg.$$.fragment),uYe=l(),Fg=a("div"),F(b6.$$.fragment),bYe=l(),Pre=a("p"),vYe=o("Register a new configuration for this class."),HIe=l(),Fi=a("h2"),Tg=a("a"),Bre=a("span"),F(v6.$$.fragment),FYe=l(),Ire=a("span"),TYe=o("AutoTokenizer"),UIe=l(),wo=a("div"),F(F6.$$.fragment),MYe=l(),T6=a("p"),EYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RS=a("a"),CYe=o("AutoTokenizer.from_pretrained()"),wYe=o(" class method."),AYe=l(),M6=a("p"),yYe=o("This class cannot be instantiated directly using "),qre=a("code"),LYe=o("__init__()"),xYe=o(" (throws an error)."),$Ye=l(),Cr=a("div"),F(E6.$$.fragment),kYe=l(),Nre=a("p"),SYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),RYe=l(),Aa=a("p"),PYe=o("The tokenizer class to instantiate is selected based on the "),jre=a("code"),BYe=o("model_type"),IYe=o(` property of the config object (either
passed as an argument or loaded from `),Dre=a("code"),qYe=o("pretrained_model_name_or_path"),NYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gre=a("code"),jYe=o("pretrained_model_name_or_path"),DYe=o(":"),GYe=l(),k=a("ul"),Sn=a("li"),Ore=a("strong"),OYe=o("albert"),VYe=o(" \u2014 "),PS=a("a"),XYe=o("AlbertTokenizer"),zYe=o(" or "),BS=a("a"),WYe=o("AlbertTokenizerFast"),QYe=o(" (ALBERT model)"),HYe=l(),Rn=a("li"),Vre=a("strong"),UYe=o("bart"),JYe=o(" \u2014 "),IS=a("a"),YYe=o("BartTokenizer"),KYe=o(" or "),qS=a("a"),ZYe=o("BartTokenizerFast"),eKe=o(" (BART model)"),oKe=l(),Pn=a("li"),Xre=a("strong"),rKe=o("barthez"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("BarthezTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("BarthezTokenizerFast"),lKe=o(" (BARThez model)"),iKe=l(),Mg=a("li"),zre=a("strong"),dKe=o("bartpho"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("BartphoTokenizer"),mKe=o(" (BARTpho model)"),gKe=l(),Bn=a("li"),Wre=a("strong"),hKe=o("bert"),pKe=o(" \u2014 "),GS=a("a"),_Ke=o("BertTokenizer"),uKe=o(" or "),OS=a("a"),bKe=o("BertTokenizerFast"),vKe=o(" (BERT model)"),FKe=l(),Eg=a("li"),Qre=a("strong"),TKe=o("bert-generation"),MKe=o(" \u2014 "),VS=a("a"),EKe=o("BertGenerationTokenizer"),CKe=o(" (Bert Generation model)"),wKe=l(),Cg=a("li"),Hre=a("strong"),AKe=o("bert-japanese"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BertJapaneseTokenizer"),xKe=o(" (BertJapanese model)"),$Ke=l(),wg=a("li"),Ure=a("strong"),kKe=o("bertweet"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("BertweetTokenizer"),PKe=o(" (Bertweet model)"),BKe=l(),In=a("li"),Jre=a("strong"),IKe=o("big_bird"),qKe=o(" \u2014 "),WS=a("a"),NKe=o("BigBirdTokenizer"),jKe=o(" or "),QS=a("a"),DKe=o("BigBirdTokenizerFast"),GKe=o(" (BigBird model)"),OKe=l(),qn=a("li"),Yre=a("strong"),VKe=o("bigbird_pegasus"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("PegasusTokenizer"),WKe=o(" or "),US=a("a"),QKe=o("PegasusTokenizerFast"),HKe=o(" (BigBirdPegasus model)"),UKe=l(),Nn=a("li"),Kre=a("strong"),JKe=o("blenderbot"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("BlenderbotTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("BlenderbotTokenizerFast"),oZe=o(" (Blenderbot model)"),rZe=l(),Ag=a("li"),Zre=a("strong"),tZe=o("blenderbot-small"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BlenderbotSmallTokenizer"),sZe=o(" (BlenderbotSmall model)"),lZe=l(),yg=a("li"),ete=a("strong"),iZe=o("byt5"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("ByT5Tokenizer"),fZe=o(" (ByT5 model)"),mZe=l(),jn=a("li"),ote=a("strong"),gZe=o("camembert"),hZe=o(" \u2014 "),eR=a("a"),pZe=o("CamembertTokenizer"),_Ze=o(" or "),oR=a("a"),uZe=o("CamembertTokenizerFast"),bZe=o(" (CamemBERT model)"),vZe=l(),Lg=a("li"),rte=a("strong"),FZe=o("canine"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("CanineTokenizer"),EZe=o(" (Canine model)"),CZe=l(),Dn=a("li"),tte=a("strong"),wZe=o("clip"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("CLIPTokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("CLIPTokenizerFast"),$Ze=o(" (CLIP model)"),kZe=l(),Gn=a("li"),ate=a("strong"),SZe=o("convbert"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("ConvBertTokenizer"),BZe=o(" or "),sR=a("a"),IZe=o("ConvBertTokenizerFast"),qZe=o(" (ConvBERT model)"),NZe=l(),On=a("li"),nte=a("strong"),jZe=o("cpm"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("CpmTokenizer"),OZe=o(" or "),iR=a("a"),VZe=o("CpmTokenizerFast"),XZe=o(" (CPM model)"),zZe=l(),xg=a("li"),ste=a("strong"),WZe=o("ctrl"),QZe=o(" \u2014 "),dR=a("a"),HZe=o("CTRLTokenizer"),UZe=o(" (CTRL model)"),JZe=l(),Vn=a("li"),lte=a("strong"),YZe=o("data2vec-text"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("RobertaTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("RobertaTokenizerFast"),reo=o(" (Data2VecText model)"),teo=l(),Xn=a("li"),ite=a("strong"),aeo=o("deberta"),neo=o(" \u2014 "),mR=a("a"),seo=o("DebertaTokenizer"),leo=o(" or "),gR=a("a"),ieo=o("DebertaTokenizerFast"),deo=o(" (DeBERTa model)"),ceo=l(),zn=a("li"),dte=a("strong"),feo=o("deberta-v2"),meo=o(" \u2014 "),hR=a("a"),geo=o("DebertaV2Tokenizer"),heo=o(" or "),pR=a("a"),peo=o("DebertaV2TokenizerFast"),_eo=o(" (DeBERTa-v2 model)"),ueo=l(),Wn=a("li"),cte=a("strong"),beo=o("distilbert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("DistilBertTokenizer"),Teo=o(" or "),uR=a("a"),Meo=o("DistilBertTokenizerFast"),Eeo=o(" (DistilBERT model)"),Ceo=l(),Qn=a("li"),fte=a("strong"),weo=o("dpr"),Aeo=o(" \u2014 "),bR=a("a"),yeo=o("DPRQuestionEncoderTokenizer"),Leo=o(" or "),vR=a("a"),xeo=o("DPRQuestionEncoderTokenizerFast"),$eo=o(" (DPR model)"),keo=l(),Hn=a("li"),mte=a("strong"),Seo=o("electra"),Reo=o(" \u2014 "),FR=a("a"),Peo=o("ElectraTokenizer"),Beo=o(" or "),TR=a("a"),Ieo=o("ElectraTokenizerFast"),qeo=o(" (ELECTRA model)"),Neo=l(),$g=a("li"),gte=a("strong"),jeo=o("flaubert"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("FlaubertTokenizer"),Oeo=o(" (FlauBERT model)"),Veo=l(),Un=a("li"),hte=a("strong"),Xeo=o("fnet"),zeo=o(" \u2014 "),ER=a("a"),Weo=o("FNetTokenizer"),Qeo=o(" or "),CR=a("a"),Heo=o("FNetTokenizerFast"),Ueo=o(" (FNet model)"),Jeo=l(),kg=a("li"),pte=a("strong"),Yeo=o("fsmt"),Keo=o(" \u2014 "),wR=a("a"),Zeo=o("FSMTTokenizer"),eoo=o(" (FairSeq Machine-Translation model)"),ooo=l(),Jn=a("li"),_te=a("strong"),roo=o("funnel"),too=o(" \u2014 "),AR=a("a"),aoo=o("FunnelTokenizer"),noo=o(" or "),yR=a("a"),soo=o("FunnelTokenizerFast"),loo=o(" (Funnel Transformer model)"),ioo=l(),Yn=a("li"),ute=a("strong"),doo=o("gpt2"),coo=o(" \u2014 "),LR=a("a"),foo=o("GPT2Tokenizer"),moo=o(" or "),xR=a("a"),goo=o("GPT2TokenizerFast"),hoo=o(" (OpenAI GPT-2 model)"),poo=l(),Kn=a("li"),bte=a("strong"),_oo=o("gpt_neo"),uoo=o(" \u2014 "),$R=a("a"),boo=o("GPT2Tokenizer"),voo=o(" or "),kR=a("a"),Foo=o("GPT2TokenizerFast"),Too=o(" (GPT Neo model)"),Moo=l(),Zn=a("li"),vte=a("strong"),Eoo=o("gptj"),Coo=o(" \u2014 "),SR=a("a"),woo=o("GPT2Tokenizer"),Aoo=o(" or "),RR=a("a"),yoo=o("GPT2TokenizerFast"),Loo=o(" (GPT-J model)"),xoo=l(),es=a("li"),Fte=a("strong"),$oo=o("herbert"),koo=o(" \u2014 "),PR=a("a"),Soo=o("HerbertTokenizer"),Roo=o(" or "),BR=a("a"),Poo=o("HerbertTokenizerFast"),Boo=o(" (HerBERT model)"),Ioo=l(),Sg=a("li"),Tte=a("strong"),qoo=o("hubert"),Noo=o(" \u2014 "),IR=a("a"),joo=o("Wav2Vec2CTCTokenizer"),Doo=o(" (Hubert model)"),Goo=l(),os=a("li"),Mte=a("strong"),Ooo=o("ibert"),Voo=o(" \u2014 "),qR=a("a"),Xoo=o("RobertaTokenizer"),zoo=o(" or "),NR=a("a"),Woo=o("RobertaTokenizerFast"),Qoo=o(" (I-BERT model)"),Hoo=l(),rs=a("li"),Ete=a("strong"),Uoo=o("layoutlm"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("LayoutLMTokenizer"),Koo=o(" or "),DR=a("a"),Zoo=o("LayoutLMTokenizerFast"),ero=o(" (LayoutLM model)"),oro=l(),ts=a("li"),Cte=a("strong"),rro=o("layoutlmv2"),tro=o(" \u2014 "),GR=a("a"),aro=o("LayoutLMv2Tokenizer"),nro=o(" or "),OR=a("a"),sro=o("LayoutLMv2TokenizerFast"),lro=o(" (LayoutLMv2 model)"),iro=l(),as=a("li"),wte=a("strong"),dro=o("layoutxlm"),cro=o(" \u2014 "),VR=a("a"),fro=o("LayoutXLMTokenizer"),mro=o(" or "),XR=a("a"),gro=o("LayoutXLMTokenizerFast"),hro=o(" (LayoutXLM model)"),pro=l(),ns=a("li"),Ate=a("strong"),_ro=o("led"),uro=o(" \u2014 "),zR=a("a"),bro=o("LEDTokenizer"),vro=o(" or "),WR=a("a"),Fro=o("LEDTokenizerFast"),Tro=o(" (LED model)"),Mro=l(),ss=a("li"),yte=a("strong"),Ero=o("longformer"),Cro=o(" \u2014 "),QR=a("a"),wro=o("LongformerTokenizer"),Aro=o(" or "),HR=a("a"),yro=o("LongformerTokenizerFast"),Lro=o(" (Longformer model)"),xro=l(),Rg=a("li"),Lte=a("strong"),$ro=o("luke"),kro=o(" \u2014 "),UR=a("a"),Sro=o("LukeTokenizer"),Rro=o(" (LUKE model)"),Pro=l(),ls=a("li"),xte=a("strong"),Bro=o("lxmert"),Iro=o(" \u2014 "),JR=a("a"),qro=o("LxmertTokenizer"),Nro=o(" or "),YR=a("a"),jro=o("LxmertTokenizerFast"),Dro=o(" (LXMERT model)"),Gro=l(),Pg=a("li"),$te=a("strong"),Oro=o("m2m_100"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("M2M100Tokenizer"),zro=o(" (M2M100 model)"),Wro=l(),Bg=a("li"),kte=a("strong"),Qro=o("marian"),Hro=o(" \u2014 "),ZR=a("a"),Uro=o("MarianTokenizer"),Jro=o(" (Marian model)"),Yro=l(),is=a("li"),Ste=a("strong"),Kro=o("mbart"),Zro=o(" \u2014 "),eP=a("a"),eto=o("MBartTokenizer"),oto=o(" or "),oP=a("a"),rto=o("MBartTokenizerFast"),tto=o(" (mBART model)"),ato=l(),ds=a("li"),Rte=a("strong"),nto=o("mbart50"),sto=o(" \u2014 "),rP=a("a"),lto=o("MBart50Tokenizer"),ito=o(" or "),tP=a("a"),dto=o("MBart50TokenizerFast"),cto=o(" (mBART-50 model)"),fto=l(),cs=a("li"),Pte=a("strong"),mto=o("megatron-bert"),gto=o(" \u2014 "),aP=a("a"),hto=o("BertTokenizer"),pto=o(" or "),nP=a("a"),_to=o("BertTokenizerFast"),uto=o(" (MegatronBert model)"),bto=l(),Ig=a("li"),Bte=a("strong"),vto=o("mluke"),Fto=o(" \u2014 "),sP=a("a"),Tto=o("MLukeTokenizer"),Mto=o(" (mLUKE model)"),Eto=l(),fs=a("li"),Ite=a("strong"),Cto=o("mobilebert"),wto=o(" \u2014 "),lP=a("a"),Ato=o("MobileBertTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("MobileBertTokenizerFast"),xto=o(" (MobileBERT model)"),$to=l(),ms=a("li"),qte=a("strong"),kto=o("mpnet"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("MPNetTokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("MPNetTokenizerFast"),Ito=o(" (MPNet model)"),qto=l(),gs=a("li"),Nte=a("strong"),Nto=o("mt5"),jto=o(" \u2014 "),fP=a("a"),Dto=o("MT5Tokenizer"),Gto=o(" or "),mP=a("a"),Oto=o("MT5TokenizerFast"),Vto=o(" (mT5 model)"),Xto=l(),hs=a("li"),jte=a("strong"),zto=o("nystromformer"),Wto=o(" \u2014 "),gP=a("a"),Qto=o("AlbertTokenizer"),Hto=o(" or "),hP=a("a"),Uto=o("AlbertTokenizerFast"),Jto=o(" (Nystromformer model)"),Yto=l(),ps=a("li"),Dte=a("strong"),Kto=o("openai-gpt"),Zto=o(" \u2014 "),pP=a("a"),eao=o("OpenAIGPTTokenizer"),oao=o(" or "),_P=a("a"),rao=o("OpenAIGPTTokenizerFast"),tao=o(" (OpenAI GPT model)"),aao=l(),qg=a("li"),Gte=a("strong"),nao=o("opt"),sao=o(" \u2014 "),uP=a("a"),lao=o("GPT2Tokenizer"),iao=o(" (OPT model)"),dao=l(),_s=a("li"),Ote=a("strong"),cao=o("pegasus"),fao=o(" \u2014 "),bP=a("a"),mao=o("PegasusTokenizer"),gao=o(" or "),vP=a("a"),hao=o("PegasusTokenizerFast"),pao=o(" (Pegasus model)"),_ao=l(),Ng=a("li"),Vte=a("strong"),uao=o("perceiver"),bao=o(" \u2014 "),FP=a("a"),vao=o("PerceiverTokenizer"),Fao=o(" (Perceiver model)"),Tao=l(),jg=a("li"),Xte=a("strong"),Mao=o("phobert"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("PhobertTokenizer"),wao=o(" (PhoBERT model)"),Aao=l(),Dg=a("li"),zte=a("strong"),yao=o("plbart"),Lao=o(" \u2014 "),MP=a("a"),xao=o("PLBartTokenizer"),$ao=o(" (PLBart model)"),kao=l(),Gg=a("li"),Wte=a("strong"),Sao=o("prophetnet"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("ProphetNetTokenizer"),Bao=o(" (ProphetNet model)"),Iao=l(),us=a("li"),Qte=a("strong"),qao=o("qdqbert"),Nao=o(" \u2014 "),CP=a("a"),jao=o("BertTokenizer"),Dao=o(" or "),wP=a("a"),Gao=o("BertTokenizerFast"),Oao=o(" (QDQBert model)"),Vao=l(),Og=a("li"),Hte=a("strong"),Xao=o("rag"),zao=o(" \u2014 "),AP=a("a"),Wao=o("RagTokenizer"),Qao=o(" (RAG model)"),Hao=l(),bs=a("li"),Ute=a("strong"),Uao=o("realm"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("RealmTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("RealmTokenizerFast"),eno=o(" (Realm model)"),ono=l(),vs=a("li"),Jte=a("strong"),rno=o("reformer"),tno=o(" \u2014 "),xP=a("a"),ano=o("ReformerTokenizer"),nno=o(" or "),$P=a("a"),sno=o("ReformerTokenizerFast"),lno=o(" (Reformer model)"),ino=l(),Fs=a("li"),Yte=a("strong"),dno=o("rembert"),cno=o(" \u2014 "),kP=a("a"),fno=o("RemBertTokenizer"),mno=o(" or "),SP=a("a"),gno=o("RemBertTokenizerFast"),hno=o(" (RemBERT model)"),pno=l(),Ts=a("li"),Kte=a("strong"),_no=o("retribert"),uno=o(" \u2014 "),RP=a("a"),bno=o("RetriBertTokenizer"),vno=o(" or "),PP=a("a"),Fno=o("RetriBertTokenizerFast"),Tno=o(" (RetriBERT model)"),Mno=l(),Ms=a("li"),Zte=a("strong"),Eno=o("roberta"),Cno=o(" \u2014 "),BP=a("a"),wno=o("RobertaTokenizer"),Ano=o(" or "),IP=a("a"),yno=o("RobertaTokenizerFast"),Lno=o(" (RoBERTa model)"),xno=l(),Es=a("li"),eae=a("strong"),$no=o("roformer"),kno=o(" \u2014 "),qP=a("a"),Sno=o("RoFormerTokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("RoFormerTokenizerFast"),Bno=o(" (RoFormer model)"),Ino=l(),Vg=a("li"),oae=a("strong"),qno=o("speech_to_text"),Nno=o(" \u2014 "),jP=a("a"),jno=o("Speech2TextTokenizer"),Dno=o(" (Speech2Text model)"),Gno=l(),Xg=a("li"),rae=a("strong"),Ono=o("speech_to_text_2"),Vno=o(" \u2014 "),DP=a("a"),Xno=o("Speech2Text2Tokenizer"),zno=o(" (Speech2Text2 model)"),Wno=l(),Cs=a("li"),tae=a("strong"),Qno=o("splinter"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("SplinterTokenizer"),Jno=o(" or "),OP=a("a"),Yno=o("SplinterTokenizerFast"),Kno=o(" (Splinter model)"),Zno=l(),ws=a("li"),aae=a("strong"),eso=o("squeezebert"),oso=o(" \u2014 "),VP=a("a"),rso=o("SqueezeBertTokenizer"),tso=o(" or "),XP=a("a"),aso=o("SqueezeBertTokenizerFast"),nso=o(" (SqueezeBERT model)"),sso=l(),As=a("li"),nae=a("strong"),lso=o("t5"),iso=o(" \u2014 "),zP=a("a"),dso=o("T5Tokenizer"),cso=o(" or "),WP=a("a"),fso=o("T5TokenizerFast"),mso=o(" (T5 model)"),gso=l(),zg=a("li"),sae=a("strong"),hso=o("tapas"),pso=o(" \u2014 "),QP=a("a"),_so=o("TapasTokenizer"),uso=o(" (TAPAS model)"),bso=l(),Wg=a("li"),lae=a("strong"),vso=o("tapex"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("TapexTokenizer"),Mso=o(" (TAPEX model)"),Eso=l(),Qg=a("li"),iae=a("strong"),Cso=o("transfo-xl"),wso=o(" \u2014 "),UP=a("a"),Aso=o("TransfoXLTokenizer"),yso=o(" (Transformer-XL model)"),Lso=l(),ys=a("li"),dae=a("strong"),xso=o("visual_bert"),$so=o(" \u2014 "),JP=a("a"),kso=o("BertTokenizer"),Sso=o(" or "),YP=a("a"),Rso=o("BertTokenizerFast"),Pso=o(" (VisualBert model)"),Bso=l(),Hg=a("li"),cae=a("strong"),Iso=o("wav2vec2"),qso=o(" \u2014 "),KP=a("a"),Nso=o("Wav2Vec2CTCTokenizer"),jso=o(" (Wav2Vec2 model)"),Dso=l(),Ug=a("li"),fae=a("strong"),Gso=o("wav2vec2-conformer"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("Wav2Vec2CTCTokenizer"),Xso=o(" (Wav2Vec2-Conformer model)"),zso=l(),Jg=a("li"),mae=a("strong"),Wso=o("wav2vec2_phoneme"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("Wav2Vec2PhonemeCTCTokenizer"),Uso=o(" (Wav2Vec2Phoneme model)"),Jso=l(),Ls=a("li"),gae=a("strong"),Yso=o("xglm"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("XGLMTokenizer"),elo=o(" or "),rB=a("a"),olo=o("XGLMTokenizerFast"),rlo=o(" (XGLM model)"),tlo=l(),Yg=a("li"),hae=a("strong"),alo=o("xlm"),nlo=o(" \u2014 "),tB=a("a"),slo=o("XLMTokenizer"),llo=o(" (XLM model)"),ilo=l(),Kg=a("li"),pae=a("strong"),dlo=o("xlm-prophetnet"),clo=o(" \u2014 "),aB=a("a"),flo=o("XLMProphetNetTokenizer"),mlo=o(" (XLMProphetNet model)"),glo=l(),xs=a("li"),_ae=a("strong"),hlo=o("xlm-roberta"),plo=o(" \u2014 "),nB=a("a"),_lo=o("XLMRobertaTokenizer"),ulo=o(" or "),sB=a("a"),blo=o("XLMRobertaTokenizerFast"),vlo=o(" (XLM-RoBERTa model)"),Flo=l(),$s=a("li"),uae=a("strong"),Tlo=o("xlm-roberta-xl"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("RobertaTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("RobertaTokenizerFast"),Alo=o(" (XLM-RoBERTa-XL model)"),ylo=l(),ks=a("li"),bae=a("strong"),Llo=o("xlnet"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("XLNetTokenizer"),klo=o(" or "),cB=a("a"),Slo=o("XLNetTokenizerFast"),Rlo=o(" (XLNet model)"),Plo=l(),Ss=a("li"),vae=a("strong"),Blo=o("yoso"),Ilo=o(" \u2014 "),fB=a("a"),qlo=o("AlbertTokenizer"),Nlo=o(" or "),mB=a("a"),jlo=o("AlbertTokenizerFast"),Dlo=o(" (YOSO model)"),Glo=l(),F(Zg.$$.fragment),Olo=l(),eh=a("div"),F(C6.$$.fragment),Vlo=l(),Fae=a("p"),Xlo=o("Register a new tokenizer in this mapping."),JIe=l(),Ti=a("h2"),oh=a("a"),Tae=a("span"),F(w6.$$.fragment),zlo=l(),Mae=a("span"),Wlo=o("AutoFeatureExtractor"),YIe=l(),Ao=a("div"),F(A6.$$.fragment),Qlo=l(),y6=a("p"),Hlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=a("a"),Ulo=o("AutoFeatureExtractor.from_pretrained()"),Jlo=o(" class method."),Ylo=l(),L6=a("p"),Klo=o("This class cannot be instantiated directly using "),Eae=a("code"),Zlo=o("__init__()"),eio=o(" (throws an error)."),oio=l(),He=a("div"),F(x6.$$.fragment),rio=l(),Cae=a("p"),tio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aio=l(),ya=a("p"),nio=o("The feature extractor class to instantiate is selected based on the "),wae=a("code"),sio=o("model_type"),lio=o(` property of the config object
(either passed as an argument or loaded from `),Aae=a("code"),iio=o("pretrained_model_name_or_path"),dio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yae=a("code"),cio=o("pretrained_model_name_or_path"),fio=o(":"),mio=l(),Z=a("ul"),rh=a("li"),Lae=a("strong"),gio=o("beit"),hio=o(" \u2014 "),hB=a("a"),pio=o("BeitFeatureExtractor"),_io=o(" (BEiT model)"),uio=l(),th=a("li"),xae=a("strong"),bio=o("clip"),vio=o(" \u2014 "),pB=a("a"),Fio=o("CLIPFeatureExtractor"),Tio=o(" (CLIP model)"),Mio=l(),ah=a("li"),$ae=a("strong"),Eio=o("convnext"),Cio=o(" \u2014 "),_B=a("a"),wio=o("ConvNextFeatureExtractor"),Aio=o(" (ConvNext model)"),yio=l(),nh=a("li"),kae=a("strong"),Lio=o("cvt"),xio=o(" \u2014 "),uB=a("a"),$io=o("ConvNextFeatureExtractor"),kio=o(" (CvT model)"),Sio=l(),sh=a("li"),Sae=a("strong"),Rio=o("data2vec-audio"),Pio=o(" \u2014 "),bB=a("a"),Bio=o("Wav2Vec2FeatureExtractor"),Iio=o(" (Data2VecAudio model)"),qio=l(),lh=a("li"),Rae=a("strong"),Nio=o("data2vec-vision"),jio=o(" \u2014 "),vB=a("a"),Dio=o("BeitFeatureExtractor"),Gio=o(" (Data2VecVision model)"),Oio=l(),ih=a("li"),Pae=a("strong"),Vio=o("deit"),Xio=o(" \u2014 "),FB=a("a"),zio=o("DeiTFeatureExtractor"),Wio=o(" (DeiT model)"),Qio=l(),dh=a("li"),Bae=a("strong"),Hio=o("detr"),Uio=o(" \u2014 "),TB=a("a"),Jio=o("DetrFeatureExtractor"),Yio=o(" (DETR model)"),Kio=l(),ch=a("li"),Iae=a("strong"),Zio=o("dpt"),edo=o(" \u2014 "),MB=a("a"),odo=o("DPTFeatureExtractor"),rdo=o(" (DPT model)"),tdo=l(),fh=a("li"),qae=a("strong"),ado=o("flava"),ndo=o(" \u2014 "),EB=a("a"),sdo=o("FlavaFeatureExtractor"),ldo=o(" (Flava model)"),ido=l(),mh=a("li"),Nae=a("strong"),ddo=o("glpn"),cdo=o(" \u2014 "),CB=a("a"),fdo=o("GLPNFeatureExtractor"),mdo=o(" (GLPN model)"),gdo=l(),gh=a("li"),jae=a("strong"),hdo=o("hubert"),pdo=o(" \u2014 "),wB=a("a"),_do=o("Wav2Vec2FeatureExtractor"),udo=o(" (Hubert model)"),bdo=l(),hh=a("li"),Dae=a("strong"),vdo=o("layoutlmv2"),Fdo=o(" \u2014 "),AB=a("a"),Tdo=o("LayoutLMv2FeatureExtractor"),Mdo=o(" (LayoutLMv2 model)"),Edo=l(),ph=a("li"),Gae=a("strong"),Cdo=o("maskformer"),wdo=o(" \u2014 "),yB=a("a"),Ado=o("MaskFormerFeatureExtractor"),ydo=o(" (MaskFormer model)"),Ldo=l(),_h=a("li"),Oae=a("strong"),xdo=o("perceiver"),$do=o(" \u2014 "),LB=a("a"),kdo=o("PerceiverFeatureExtractor"),Sdo=o(" (Perceiver model)"),Rdo=l(),uh=a("li"),Vae=a("strong"),Pdo=o("poolformer"),Bdo=o(" \u2014 "),xB=a("a"),Ido=o("PoolFormerFeatureExtractor"),qdo=o(" (PoolFormer model)"),Ndo=l(),bh=a("li"),Xae=a("strong"),jdo=o("regnet"),Ddo=o(" \u2014 "),$B=a("a"),Gdo=o("ConvNextFeatureExtractor"),Odo=o(" (RegNet model)"),Vdo=l(),vh=a("li"),zae=a("strong"),Xdo=o("resnet"),zdo=o(" \u2014 "),kB=a("a"),Wdo=o("ConvNextFeatureExtractor"),Qdo=o(" (ResNet model)"),Hdo=l(),Fh=a("li"),Wae=a("strong"),Udo=o("segformer"),Jdo=o(" \u2014 "),SB=a("a"),Ydo=o("SegformerFeatureExtractor"),Kdo=o(" (SegFormer model)"),Zdo=l(),Th=a("li"),Qae=a("strong"),eco=o("speech_to_text"),oco=o(" \u2014 "),RB=a("a"),rco=o("Speech2TextFeatureExtractor"),tco=o(" (Speech2Text model)"),aco=l(),Mh=a("li"),Hae=a("strong"),nco=o("swin"),sco=o(" \u2014 "),PB=a("a"),lco=o("ViTFeatureExtractor"),ico=o(" (Swin model)"),dco=l(),Eh=a("li"),Uae=a("strong"),cco=o("van"),fco=o(" \u2014 "),BB=a("a"),mco=o("ConvNextFeatureExtractor"),gco=o(" (VAN model)"),hco=l(),Ch=a("li"),Jae=a("strong"),pco=o("vit"),_co=o(" \u2014 "),IB=a("a"),uco=o("ViTFeatureExtractor"),bco=o(" (ViT model)"),vco=l(),wh=a("li"),Yae=a("strong"),Fco=o("vit_mae"),Tco=o(" \u2014 "),qB=a("a"),Mco=o("ViTFeatureExtractor"),Eco=o(" (ViTMAE model)"),Cco=l(),Ah=a("li"),Kae=a("strong"),wco=o("wav2vec2"),Aco=o(" \u2014 "),NB=a("a"),yco=o("Wav2Vec2FeatureExtractor"),Lco=o(" (Wav2Vec2 model)"),xco=l(),yh=a("li"),Zae=a("strong"),$co=o("wav2vec2-conformer"),kco=o(" \u2014 "),jB=a("a"),Sco=o("Wav2Vec2FeatureExtractor"),Rco=o(" (Wav2Vec2-Conformer model)"),Pco=l(),Lh=a("li"),ene=a("strong"),Bco=o("yolos"),Ico=o(" \u2014 "),DB=a("a"),qco=o("YolosFeatureExtractor"),Nco=o(" (YOLOS model)"),jco=l(),F(xh.$$.fragment),Dco=l(),F($h.$$.fragment),Gco=l(),kh=a("div"),F($6.$$.fragment),Oco=l(),one=a("p"),Vco=o("Register a new feature extractor for this class."),KIe=l(),Mi=a("h2"),Sh=a("a"),rne=a("span"),F(k6.$$.fragment),Xco=l(),tne=a("span"),zco=o("AutoProcessor"),ZIe=l(),yo=a("div"),F(S6.$$.fragment),Wco=l(),R6=a("p"),Qco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=a("a"),Hco=o("AutoProcessor.from_pretrained()"),Uco=o(" class method."),Jco=l(),P6=a("p"),Yco=o("This class cannot be instantiated directly using "),ane=a("code"),Kco=o("__init__()"),Zco=o(" (throws an error)."),efo=l(),Ue=a("div"),F(B6.$$.fragment),ofo=l(),nne=a("p"),rfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tfo=l(),Ei=a("p"),afo=o("The processor class to instantiate is selected based on the "),sne=a("code"),nfo=o("model_type"),sfo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),lfo=o("pretrained_model_name_or_path"),ifo=o(" if possible):"),dfo=l(),pe=a("ul"),Rh=a("li"),ine=a("strong"),cfo=o("clip"),ffo=o(" \u2014 "),OB=a("a"),mfo=o("CLIPProcessor"),gfo=o(" (CLIP model)"),hfo=l(),Ph=a("li"),dne=a("strong"),pfo=o("flava"),_fo=o(" \u2014 "),cne=a("code"),ufo=o("FLAVAProcessor"),bfo=o(" (Flava model)"),vfo=l(),Bh=a("li"),fne=a("strong"),Ffo=o("layoutlmv2"),Tfo=o(" \u2014 "),VB=a("a"),Mfo=o("LayoutLMv2Processor"),Efo=o(" (LayoutLMv2 model)"),Cfo=l(),Ih=a("li"),mne=a("strong"),wfo=o("layoutxlm"),Afo=o(" \u2014 "),XB=a("a"),yfo=o("LayoutXLMProcessor"),Lfo=o(" (LayoutXLM model)"),xfo=l(),qh=a("li"),gne=a("strong"),$fo=o("sew"),kfo=o(" \u2014 "),zB=a("a"),Sfo=o("Wav2Vec2Processor"),Rfo=o(" (SEW model)"),Pfo=l(),Nh=a("li"),hne=a("strong"),Bfo=o("sew-d"),Ifo=o(" \u2014 "),WB=a("a"),qfo=o("Wav2Vec2Processor"),Nfo=o(" (SEW-D model)"),jfo=l(),jh=a("li"),pne=a("strong"),Dfo=o("speech_to_text"),Gfo=o(" \u2014 "),QB=a("a"),Ofo=o("Speech2TextProcessor"),Vfo=o(" (Speech2Text model)"),Xfo=l(),Dh=a("li"),_ne=a("strong"),zfo=o("speech_to_text_2"),Wfo=o(" \u2014 "),HB=a("a"),Qfo=o("Speech2Text2Processor"),Hfo=o(" (Speech2Text2 model)"),Ufo=l(),Gh=a("li"),une=a("strong"),Jfo=o("trocr"),Yfo=o(" \u2014 "),UB=a("a"),Kfo=o("TrOCRProcessor"),Zfo=o(" (TrOCR model)"),emo=l(),Oh=a("li"),bne=a("strong"),omo=o("unispeech"),rmo=o(" \u2014 "),JB=a("a"),tmo=o("Wav2Vec2Processor"),amo=o(" (UniSpeech model)"),nmo=l(),Vh=a("li"),vne=a("strong"),smo=o("unispeech-sat"),lmo=o(" \u2014 "),YB=a("a"),imo=o("Wav2Vec2Processor"),dmo=o(" (UniSpeechSat model)"),cmo=l(),Xh=a("li"),Fne=a("strong"),fmo=o("vilt"),mmo=o(" \u2014 "),KB=a("a"),gmo=o("ViltProcessor"),hmo=o(" (ViLT model)"),pmo=l(),zh=a("li"),Tne=a("strong"),_mo=o("vision-text-dual-encoder"),umo=o(" \u2014 "),ZB=a("a"),bmo=o("VisionTextDualEncoderProcessor"),vmo=o(" (VisionTextDualEncoder model)"),Fmo=l(),Wh=a("li"),Mne=a("strong"),Tmo=o("wav2vec2"),Mmo=o(" \u2014 "),eI=a("a"),Emo=o("Wav2Vec2Processor"),Cmo=o(" (Wav2Vec2 model)"),wmo=l(),Qh=a("li"),Ene=a("strong"),Amo=o("wav2vec2-conformer"),ymo=o(" \u2014 "),oI=a("a"),Lmo=o("Wav2Vec2Processor"),xmo=o(" (Wav2Vec2-Conformer model)"),$mo=l(),Hh=a("li"),Cne=a("strong"),kmo=o("wavlm"),Smo=o(" \u2014 "),rI=a("a"),Rmo=o("Wav2Vec2Processor"),Pmo=o(" (WavLM model)"),Bmo=l(),F(Uh.$$.fragment),Imo=l(),F(Jh.$$.fragment),qmo=l(),Yh=a("div"),F(I6.$$.fragment),Nmo=l(),wne=a("p"),jmo=o("Register a new processor for this class."),eqe=l(),Ci=a("h2"),Kh=a("a"),Ane=a("span"),F(q6.$$.fragment),Dmo=l(),yne=a("span"),Gmo=o("AutoModel"),oqe=l(),Lo=a("div"),F(N6.$$.fragment),Omo=l(),wi=a("p"),Vmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=a("a"),Xmo=o("from_pretrained()"),zmo=o(" class method or the "),aI=a("a"),Wmo=o("from_config()"),Qmo=o(` class
method.`),Hmo=l(),j6=a("p"),Umo=o("This class cannot be instantiated directly using "),Lne=a("code"),Jmo=o("__init__()"),Ymo=o(" (throws an error)."),Kmo=l(),tt=a("div"),F(D6.$$.fragment),Zmo=l(),xne=a("p"),ego=o("Instantiates one of the base model classes of the library from a configuration."),ogo=l(),Ai=a("p"),rgo=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),tgo=o("not"),ago=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=a("a"),ngo=o("from_pretrained()"),sgo=o(" to load the model weights."),lgo=l(),F(Zh.$$.fragment),igo=l(),Je=a("div"),F(G6.$$.fragment),dgo=l(),kne=a("p"),cgo=o("Instantiate one of the base model classes of the library from a pretrained model."),fgo=l(),La=a("p"),mgo=o("The model class to instantiate is selected based on the "),Sne=a("code"),ggo=o("model_type"),hgo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),pgo=o("pretrained_model_name_or_path"),_go=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pne=a("code"),ugo=o("pretrained_model_name_or_path"),bgo=o(":"),vgo=l(),x=a("ul"),ep=a("li"),Bne=a("strong"),Fgo=o("albert"),Tgo=o(" \u2014 "),sI=a("a"),Mgo=o("AlbertModel"),Ego=o(" (ALBERT model)"),Cgo=l(),op=a("li"),Ine=a("strong"),wgo=o("bart"),Ago=o(" \u2014 "),lI=a("a"),ygo=o("BartModel"),Lgo=o(" (BART model)"),xgo=l(),rp=a("li"),qne=a("strong"),$go=o("beit"),kgo=o(" \u2014 "),iI=a("a"),Sgo=o("BeitModel"),Rgo=o(" (BEiT model)"),Pgo=l(),tp=a("li"),Nne=a("strong"),Bgo=o("bert"),Igo=o(" \u2014 "),dI=a("a"),qgo=o("BertModel"),Ngo=o(" (BERT model)"),jgo=l(),ap=a("li"),jne=a("strong"),Dgo=o("bert-generation"),Ggo=o(" \u2014 "),cI=a("a"),Ogo=o("BertGenerationEncoder"),Vgo=o(" (Bert Generation model)"),Xgo=l(),np=a("li"),Dne=a("strong"),zgo=o("big_bird"),Wgo=o(" \u2014 "),fI=a("a"),Qgo=o("BigBirdModel"),Hgo=o(" (BigBird model)"),Ugo=l(),sp=a("li"),Gne=a("strong"),Jgo=o("bigbird_pegasus"),Ygo=o(" \u2014 "),mI=a("a"),Kgo=o("BigBirdPegasusModel"),Zgo=o(" (BigBirdPegasus model)"),eho=l(),lp=a("li"),One=a("strong"),oho=o("blenderbot"),rho=o(" \u2014 "),gI=a("a"),tho=o("BlenderbotModel"),aho=o(" (Blenderbot model)"),nho=l(),ip=a("li"),Vne=a("strong"),sho=o("blenderbot-small"),lho=o(" \u2014 "),hI=a("a"),iho=o("BlenderbotSmallModel"),dho=o(" (BlenderbotSmall model)"),cho=l(),dp=a("li"),Xne=a("strong"),fho=o("camembert"),mho=o(" \u2014 "),pI=a("a"),gho=o("CamembertModel"),hho=o(" (CamemBERT model)"),pho=l(),cp=a("li"),zne=a("strong"),_ho=o("canine"),uho=o(" \u2014 "),_I=a("a"),bho=o("CanineModel"),vho=o(" (Canine model)"),Fho=l(),fp=a("li"),Wne=a("strong"),Tho=o("clip"),Mho=o(" \u2014 "),uI=a("a"),Eho=o("CLIPModel"),Cho=o(" (CLIP model)"),who=l(),mp=a("li"),Qne=a("strong"),Aho=o("convbert"),yho=o(" \u2014 "),bI=a("a"),Lho=o("ConvBertModel"),xho=o(" (ConvBERT model)"),$ho=l(),gp=a("li"),Hne=a("strong"),kho=o("convnext"),Sho=o(" \u2014 "),vI=a("a"),Rho=o("ConvNextModel"),Pho=o(" (ConvNext model)"),Bho=l(),hp=a("li"),Une=a("strong"),Iho=o("ctrl"),qho=o(" \u2014 "),FI=a("a"),Nho=o("CTRLModel"),jho=o(" (CTRL model)"),Dho=l(),pp=a("li"),Jne=a("strong"),Gho=o("cvt"),Oho=o(" \u2014 "),TI=a("a"),Vho=o("CvtModel"),Xho=o(" (CvT model)"),zho=l(),_p=a("li"),Yne=a("strong"),Who=o("data2vec-audio"),Qho=o(" \u2014 "),MI=a("a"),Hho=o("Data2VecAudioModel"),Uho=o(" (Data2VecAudio model)"),Jho=l(),up=a("li"),Kne=a("strong"),Yho=o("data2vec-text"),Kho=o(" \u2014 "),EI=a("a"),Zho=o("Data2VecTextModel"),epo=o(" (Data2VecText model)"),opo=l(),bp=a("li"),Zne=a("strong"),rpo=o("data2vec-vision"),tpo=o(" \u2014 "),CI=a("a"),apo=o("Data2VecVisionModel"),npo=o(" (Data2VecVision model)"),spo=l(),vp=a("li"),ese=a("strong"),lpo=o("deberta"),ipo=o(" \u2014 "),wI=a("a"),dpo=o("DebertaModel"),cpo=o(" (DeBERTa model)"),fpo=l(),Fp=a("li"),ose=a("strong"),mpo=o("deberta-v2"),gpo=o(" \u2014 "),AI=a("a"),hpo=o("DebertaV2Model"),ppo=o(" (DeBERTa-v2 model)"),_po=l(),Tp=a("li"),rse=a("strong"),upo=o("decision_transformer"),bpo=o(" \u2014 "),yI=a("a"),vpo=o("DecisionTransformerModel"),Fpo=o(" (Decision Transformer model)"),Tpo=l(),Mp=a("li"),tse=a("strong"),Mpo=o("deit"),Epo=o(" \u2014 "),LI=a("a"),Cpo=o("DeiTModel"),wpo=o(" (DeiT model)"),Apo=l(),Ep=a("li"),ase=a("strong"),ypo=o("detr"),Lpo=o(" \u2014 "),xI=a("a"),xpo=o("DetrModel"),$po=o(" (DETR model)"),kpo=l(),Cp=a("li"),nse=a("strong"),Spo=o("distilbert"),Rpo=o(" \u2014 "),$I=a("a"),Ppo=o("DistilBertModel"),Bpo=o(" (DistilBERT model)"),Ipo=l(),wp=a("li"),sse=a("strong"),qpo=o("dpr"),Npo=o(" \u2014 "),kI=a("a"),jpo=o("DPRQuestionEncoder"),Dpo=o(" (DPR model)"),Gpo=l(),Ap=a("li"),lse=a("strong"),Opo=o("dpt"),Vpo=o(" \u2014 "),SI=a("a"),Xpo=o("DPTModel"),zpo=o(" (DPT model)"),Wpo=l(),yp=a("li"),ise=a("strong"),Qpo=o("electra"),Hpo=o(" \u2014 "),RI=a("a"),Upo=o("ElectraModel"),Jpo=o(" (ELECTRA model)"),Ypo=l(),Lp=a("li"),dse=a("strong"),Kpo=o("flaubert"),Zpo=o(" \u2014 "),PI=a("a"),e_o=o("FlaubertModel"),o_o=o(" (FlauBERT model)"),r_o=l(),xp=a("li"),cse=a("strong"),t_o=o("flava"),a_o=o(" \u2014 "),BI=a("a"),n_o=o("FlavaModel"),s_o=o(" (Flava model)"),l_o=l(),$p=a("li"),fse=a("strong"),i_o=o("fnet"),d_o=o(" \u2014 "),II=a("a"),c_o=o("FNetModel"),f_o=o(" (FNet model)"),m_o=l(),kp=a("li"),mse=a("strong"),g_o=o("fsmt"),h_o=o(" \u2014 "),qI=a("a"),p_o=o("FSMTModel"),__o=o(" (FairSeq Machine-Translation model)"),u_o=l(),Rs=a("li"),gse=a("strong"),b_o=o("funnel"),v_o=o(" \u2014 "),NI=a("a"),F_o=o("FunnelModel"),T_o=o(" or "),jI=a("a"),M_o=o("FunnelBaseModel"),E_o=o(" (Funnel Transformer model)"),C_o=l(),Sp=a("li"),hse=a("strong"),w_o=o("glpn"),A_o=o(" \u2014 "),DI=a("a"),y_o=o("GLPNModel"),L_o=o(" (GLPN model)"),x_o=l(),Rp=a("li"),pse=a("strong"),$_o=o("gpt2"),k_o=o(" \u2014 "),GI=a("a"),S_o=o("GPT2Model"),R_o=o(" (OpenAI GPT-2 model)"),P_o=l(),Pp=a("li"),_se=a("strong"),B_o=o("gpt_neo"),I_o=o(" \u2014 "),OI=a("a"),q_o=o("GPTNeoModel"),N_o=o(" (GPT Neo model)"),j_o=l(),Bp=a("li"),use=a("strong"),D_o=o("gptj"),G_o=o(" \u2014 "),VI=a("a"),O_o=o("GPTJModel"),V_o=o(" (GPT-J model)"),X_o=l(),Ip=a("li"),bse=a("strong"),z_o=o("hubert"),W_o=o(" \u2014 "),XI=a("a"),Q_o=o("HubertModel"),H_o=o(" (Hubert model)"),U_o=l(),qp=a("li"),vse=a("strong"),J_o=o("ibert"),Y_o=o(" \u2014 "),zI=a("a"),K_o=o("IBertModel"),Z_o=o(" (I-BERT model)"),euo=l(),Np=a("li"),Fse=a("strong"),ouo=o("imagegpt"),ruo=o(" \u2014 "),WI=a("a"),tuo=o("ImageGPTModel"),auo=o(" (ImageGPT model)"),nuo=l(),jp=a("li"),Tse=a("strong"),suo=o("layoutlm"),luo=o(" \u2014 "),QI=a("a"),iuo=o("LayoutLMModel"),duo=o(" (LayoutLM model)"),cuo=l(),Dp=a("li"),Mse=a("strong"),fuo=o("layoutlmv2"),muo=o(" \u2014 "),HI=a("a"),guo=o("LayoutLMv2Model"),huo=o(" (LayoutLMv2 model)"),puo=l(),Gp=a("li"),Ese=a("strong"),_uo=o("led"),uuo=o(" \u2014 "),UI=a("a"),buo=o("LEDModel"),vuo=o(" (LED model)"),Fuo=l(),Op=a("li"),Cse=a("strong"),Tuo=o("longformer"),Muo=o(" \u2014 "),JI=a("a"),Euo=o("LongformerModel"),Cuo=o(" (Longformer model)"),wuo=l(),Vp=a("li"),wse=a("strong"),Auo=o("luke"),yuo=o(" \u2014 "),YI=a("a"),Luo=o("LukeModel"),xuo=o(" (LUKE model)"),$uo=l(),Xp=a("li"),Ase=a("strong"),kuo=o("lxmert"),Suo=o(" \u2014 "),KI=a("a"),Ruo=o("LxmertModel"),Puo=o(" (LXMERT model)"),Buo=l(),zp=a("li"),yse=a("strong"),Iuo=o("m2m_100"),quo=o(" \u2014 "),ZI=a("a"),Nuo=o("M2M100Model"),juo=o(" (M2M100 model)"),Duo=l(),Wp=a("li"),Lse=a("strong"),Guo=o("marian"),Ouo=o(" \u2014 "),eq=a("a"),Vuo=o("MarianModel"),Xuo=o(" (Marian model)"),zuo=l(),Qp=a("li"),xse=a("strong"),Wuo=o("maskformer"),Quo=o(" \u2014 "),oq=a("a"),Huo=o("MaskFormerModel"),Uuo=o(" (MaskFormer model)"),Juo=l(),Hp=a("li"),$se=a("strong"),Yuo=o("mbart"),Kuo=o(" \u2014 "),rq=a("a"),Zuo=o("MBartModel"),e2o=o(" (mBART model)"),o2o=l(),Up=a("li"),kse=a("strong"),r2o=o("megatron-bert"),t2o=o(" \u2014 "),tq=a("a"),a2o=o("MegatronBertModel"),n2o=o(" (MegatronBert model)"),s2o=l(),Jp=a("li"),Sse=a("strong"),l2o=o("mobilebert"),i2o=o(" \u2014 "),aq=a("a"),d2o=o("MobileBertModel"),c2o=o(" (MobileBERT model)"),f2o=l(),Yp=a("li"),Rse=a("strong"),m2o=o("mpnet"),g2o=o(" \u2014 "),nq=a("a"),h2o=o("MPNetModel"),p2o=o(" (MPNet model)"),_2o=l(),Kp=a("li"),Pse=a("strong"),u2o=o("mt5"),b2o=o(" \u2014 "),sq=a("a"),v2o=o("MT5Model"),F2o=o(" (mT5 model)"),T2o=l(),Zp=a("li"),Bse=a("strong"),M2o=o("nystromformer"),E2o=o(" \u2014 "),lq=a("a"),C2o=o("NystromformerModel"),w2o=o(" (Nystromformer model)"),A2o=l(),e_=a("li"),Ise=a("strong"),y2o=o("openai-gpt"),L2o=o(" \u2014 "),iq=a("a"),x2o=o("OpenAIGPTModel"),$2o=o(" (OpenAI GPT model)"),k2o=l(),o_=a("li"),qse=a("strong"),S2o=o("opt"),R2o=o(" \u2014 "),dq=a("a"),P2o=o("OPTModel"),B2o=o(" (OPT model)"),I2o=l(),r_=a("li"),Nse=a("strong"),q2o=o("pegasus"),N2o=o(" \u2014 "),cq=a("a"),j2o=o("PegasusModel"),D2o=o(" (Pegasus model)"),G2o=l(),t_=a("li"),jse=a("strong"),O2o=o("perceiver"),V2o=o(" \u2014 "),fq=a("a"),X2o=o("PerceiverModel"),z2o=o(" (Perceiver model)"),W2o=l(),a_=a("li"),Dse=a("strong"),Q2o=o("plbart"),H2o=o(" \u2014 "),mq=a("a"),U2o=o("PLBartModel"),J2o=o(" (PLBart model)"),Y2o=l(),n_=a("li"),Gse=a("strong"),K2o=o("poolformer"),Z2o=o(" \u2014 "),gq=a("a"),e1o=o("PoolFormerModel"),o1o=o(" (PoolFormer model)"),r1o=l(),s_=a("li"),Ose=a("strong"),t1o=o("prophetnet"),a1o=o(" \u2014 "),hq=a("a"),n1o=o("ProphetNetModel"),s1o=o(" (ProphetNet model)"),l1o=l(),l_=a("li"),Vse=a("strong"),i1o=o("qdqbert"),d1o=o(" \u2014 "),pq=a("a"),c1o=o("QDQBertModel"),f1o=o(" (QDQBert model)"),m1o=l(),i_=a("li"),Xse=a("strong"),g1o=o("reformer"),h1o=o(" \u2014 "),_q=a("a"),p1o=o("ReformerModel"),_1o=o(" (Reformer model)"),u1o=l(),d_=a("li"),zse=a("strong"),b1o=o("regnet"),v1o=o(" \u2014 "),uq=a("a"),F1o=o("RegNetModel"),T1o=o(" (RegNet model)"),M1o=l(),c_=a("li"),Wse=a("strong"),E1o=o("rembert"),C1o=o(" \u2014 "),bq=a("a"),w1o=o("RemBertModel"),A1o=o(" (RemBERT model)"),y1o=l(),f_=a("li"),Qse=a("strong"),L1o=o("resnet"),x1o=o(" \u2014 "),vq=a("a"),$1o=o("ResNetModel"),k1o=o(" (ResNet model)"),S1o=l(),m_=a("li"),Hse=a("strong"),R1o=o("retribert"),P1o=o(" \u2014 "),Fq=a("a"),B1o=o("RetriBertModel"),I1o=o(" (RetriBERT model)"),q1o=l(),g_=a("li"),Use=a("strong"),N1o=o("roberta"),j1o=o(" \u2014 "),Tq=a("a"),D1o=o("RobertaModel"),G1o=o(" (RoBERTa model)"),O1o=l(),h_=a("li"),Jse=a("strong"),V1o=o("roformer"),X1o=o(" \u2014 "),Mq=a("a"),z1o=o("RoFormerModel"),W1o=o(" (RoFormer model)"),Q1o=l(),p_=a("li"),Yse=a("strong"),H1o=o("segformer"),U1o=o(" \u2014 "),Eq=a("a"),J1o=o("SegformerModel"),Y1o=o(" (SegFormer model)"),K1o=l(),__=a("li"),Kse=a("strong"),Z1o=o("sew"),ebo=o(" \u2014 "),Cq=a("a"),obo=o("SEWModel"),rbo=o(" (SEW model)"),tbo=l(),u_=a("li"),Zse=a("strong"),abo=o("sew-d"),nbo=o(" \u2014 "),wq=a("a"),sbo=o("SEWDModel"),lbo=o(" (SEW-D model)"),ibo=l(),b_=a("li"),ele=a("strong"),dbo=o("speech_to_text"),cbo=o(" \u2014 "),Aq=a("a"),fbo=o("Speech2TextModel"),mbo=o(" (Speech2Text model)"),gbo=l(),v_=a("li"),ole=a("strong"),hbo=o("splinter"),pbo=o(" \u2014 "),yq=a("a"),_bo=o("SplinterModel"),ubo=o(" (Splinter model)"),bbo=l(),F_=a("li"),rle=a("strong"),vbo=o("squeezebert"),Fbo=o(" \u2014 "),Lq=a("a"),Tbo=o("SqueezeBertModel"),Mbo=o(" (SqueezeBERT model)"),Ebo=l(),T_=a("li"),tle=a("strong"),Cbo=o("swin"),wbo=o(" \u2014 "),xq=a("a"),Abo=o("SwinModel"),ybo=o(" (Swin model)"),Lbo=l(),M_=a("li"),ale=a("strong"),xbo=o("t5"),$bo=o(" \u2014 "),$q=a("a"),kbo=o("T5Model"),Sbo=o(" (T5 model)"),Rbo=l(),E_=a("li"),nle=a("strong"),Pbo=o("tapas"),Bbo=o(" \u2014 "),kq=a("a"),Ibo=o("TapasModel"),qbo=o(" (TAPAS model)"),Nbo=l(),C_=a("li"),sle=a("strong"),jbo=o("transfo-xl"),Dbo=o(" \u2014 "),Sq=a("a"),Gbo=o("TransfoXLModel"),Obo=o(" (Transformer-XL model)"),Vbo=l(),w_=a("li"),lle=a("strong"),Xbo=o("unispeech"),zbo=o(" \u2014 "),Rq=a("a"),Wbo=o("UniSpeechModel"),Qbo=o(" (UniSpeech model)"),Hbo=l(),A_=a("li"),ile=a("strong"),Ubo=o("unispeech-sat"),Jbo=o(" \u2014 "),Pq=a("a"),Ybo=o("UniSpeechSatModel"),Kbo=o(" (UniSpeechSat model)"),Zbo=l(),y_=a("li"),dle=a("strong"),e5o=o("van"),o5o=o(" \u2014 "),Bq=a("a"),r5o=o("VanModel"),t5o=o(" (VAN model)"),a5o=l(),L_=a("li"),cle=a("strong"),n5o=o("vilt"),s5o=o(" \u2014 "),Iq=a("a"),l5o=o("ViltModel"),i5o=o(" (ViLT model)"),d5o=l(),x_=a("li"),fle=a("strong"),c5o=o("vision-text-dual-encoder"),f5o=o(" \u2014 "),qq=a("a"),m5o=o("VisionTextDualEncoderModel"),g5o=o(" (VisionTextDualEncoder model)"),h5o=l(),$_=a("li"),mle=a("strong"),p5o=o("visual_bert"),_5o=o(" \u2014 "),Nq=a("a"),u5o=o("VisualBertModel"),b5o=o(" (VisualBert model)"),v5o=l(),k_=a("li"),gle=a("strong"),F5o=o("vit"),T5o=o(" \u2014 "),jq=a("a"),M5o=o("ViTModel"),E5o=o(" (ViT model)"),C5o=l(),S_=a("li"),hle=a("strong"),w5o=o("vit_mae"),A5o=o(" \u2014 "),Dq=a("a"),y5o=o("ViTMAEModel"),L5o=o(" (ViTMAE model)"),x5o=l(),R_=a("li"),ple=a("strong"),$5o=o("wav2vec2"),k5o=o(" \u2014 "),Gq=a("a"),S5o=o("Wav2Vec2Model"),R5o=o(" (Wav2Vec2 model)"),P5o=l(),P_=a("li"),_le=a("strong"),B5o=o("wav2vec2-conformer"),I5o=o(" \u2014 "),Oq=a("a"),q5o=o("Wav2Vec2ConformerModel"),N5o=o(" (Wav2Vec2-Conformer model)"),j5o=l(),B_=a("li"),ule=a("strong"),D5o=o("wavlm"),G5o=o(" \u2014 "),Vq=a("a"),O5o=o("WavLMModel"),V5o=o(" (WavLM model)"),X5o=l(),I_=a("li"),ble=a("strong"),z5o=o("xglm"),W5o=o(" \u2014 "),Xq=a("a"),Q5o=o("XGLMModel"),H5o=o(" (XGLM model)"),U5o=l(),q_=a("li"),vle=a("strong"),J5o=o("xlm"),Y5o=o(" \u2014 "),zq=a("a"),K5o=o("XLMModel"),Z5o=o(" (XLM model)"),evo=l(),N_=a("li"),Fle=a("strong"),ovo=o("xlm-prophetnet"),rvo=o(" \u2014 "),Wq=a("a"),tvo=o("XLMProphetNetModel"),avo=o(" (XLMProphetNet model)"),nvo=l(),j_=a("li"),Tle=a("strong"),svo=o("xlm-roberta"),lvo=o(" \u2014 "),Qq=a("a"),ivo=o("XLMRobertaModel"),dvo=o(" (XLM-RoBERTa model)"),cvo=l(),D_=a("li"),Mle=a("strong"),fvo=o("xlm-roberta-xl"),mvo=o(" \u2014 "),Hq=a("a"),gvo=o("XLMRobertaXLModel"),hvo=o(" (XLM-RoBERTa-XL model)"),pvo=l(),G_=a("li"),Ele=a("strong"),_vo=o("xlnet"),uvo=o(" \u2014 "),Uq=a("a"),bvo=o("XLNetModel"),vvo=o(" (XLNet model)"),Fvo=l(),O_=a("li"),Cle=a("strong"),Tvo=o("yolos"),Mvo=o(" \u2014 "),Jq=a("a"),Evo=o("YolosModel"),Cvo=o(" (YOLOS model)"),wvo=l(),V_=a("li"),wle=a("strong"),Avo=o("yoso"),yvo=o(" \u2014 "),Yq=a("a"),Lvo=o("YosoModel"),xvo=o(" (YOSO model)"),$vo=l(),X_=a("p"),kvo=o("The model is set in evaluation mode by default using "),Ale=a("code"),Svo=o("model.eval()"),Rvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=a("code"),Pvo=o("model.train()"),Bvo=l(),F(z_.$$.fragment),rqe=l(),yi=a("h2"),W_=a("a"),Lle=a("span"),F(O6.$$.fragment),Ivo=l(),xle=a("span"),qvo=o("AutoModelForPreTraining"),tqe=l(),xo=a("div"),F(V6.$$.fragment),Nvo=l(),Li=a("p"),jvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=a("a"),Dvo=o("from_pretrained()"),Gvo=o(" class method or the "),Zq=a("a"),Ovo=o("from_config()"),Vvo=o(` class
method.`),Xvo=l(),X6=a("p"),zvo=o("This class cannot be instantiated directly using "),$le=a("code"),Wvo=o("__init__()"),Qvo=o(" (throws an error)."),Hvo=l(),at=a("div"),F(z6.$$.fragment),Uvo=l(),kle=a("p"),Jvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yvo=l(),xi=a("p"),Kvo=o(`Note:
Loading a model from its configuration file does `),Sle=a("strong"),Zvo=o("not"),e3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=a("a"),o3o=o("from_pretrained()"),r3o=o(" to load the model weights."),t3o=l(),F(Q_.$$.fragment),a3o=l(),Ye=a("div"),F(W6.$$.fragment),n3o=l(),Rle=a("p"),s3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l3o=l(),xa=a("p"),i3o=o("The model class to instantiate is selected based on the "),Ple=a("code"),d3o=o("model_type"),c3o=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),f3o=o("pretrained_model_name_or_path"),m3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),g3o=o("pretrained_model_name_or_path"),h3o=o(":"),p3o=l(),G=a("ul"),H_=a("li"),qle=a("strong"),_3o=o("albert"),u3o=o(" \u2014 "),oN=a("a"),b3o=o("AlbertForPreTraining"),v3o=o(" (ALBERT model)"),F3o=l(),U_=a("li"),Nle=a("strong"),T3o=o("bart"),M3o=o(" \u2014 "),rN=a("a"),E3o=o("BartForConditionalGeneration"),C3o=o(" (BART model)"),w3o=l(),J_=a("li"),jle=a("strong"),A3o=o("bert"),y3o=o(" \u2014 "),tN=a("a"),L3o=o("BertForPreTraining"),x3o=o(" (BERT model)"),$3o=l(),Y_=a("li"),Dle=a("strong"),k3o=o("big_bird"),S3o=o(" \u2014 "),aN=a("a"),R3o=o("BigBirdForPreTraining"),P3o=o(" (BigBird model)"),B3o=l(),K_=a("li"),Gle=a("strong"),I3o=o("camembert"),q3o=o(" \u2014 "),nN=a("a"),N3o=o("CamembertForMaskedLM"),j3o=o(" (CamemBERT model)"),D3o=l(),Z_=a("li"),Ole=a("strong"),G3o=o("ctrl"),O3o=o(" \u2014 "),sN=a("a"),V3o=o("CTRLLMHeadModel"),X3o=o(" (CTRL model)"),z3o=l(),eu=a("li"),Vle=a("strong"),W3o=o("data2vec-text"),Q3o=o(" \u2014 "),lN=a("a"),H3o=o("Data2VecTextForMaskedLM"),U3o=o(" (Data2VecText model)"),J3o=l(),ou=a("li"),Xle=a("strong"),Y3o=o("deberta"),K3o=o(" \u2014 "),iN=a("a"),Z3o=o("DebertaForMaskedLM"),eFo=o(" (DeBERTa model)"),oFo=l(),ru=a("li"),zle=a("strong"),rFo=o("deberta-v2"),tFo=o(" \u2014 "),dN=a("a"),aFo=o("DebertaV2ForMaskedLM"),nFo=o(" (DeBERTa-v2 model)"),sFo=l(),tu=a("li"),Wle=a("strong"),lFo=o("distilbert"),iFo=o(" \u2014 "),cN=a("a"),dFo=o("DistilBertForMaskedLM"),cFo=o(" (DistilBERT model)"),fFo=l(),au=a("li"),Qle=a("strong"),mFo=o("electra"),gFo=o(" \u2014 "),fN=a("a"),hFo=o("ElectraForPreTraining"),pFo=o(" (ELECTRA model)"),_Fo=l(),nu=a("li"),Hle=a("strong"),uFo=o("flaubert"),bFo=o(" \u2014 "),mN=a("a"),vFo=o("FlaubertWithLMHeadModel"),FFo=o(" (FlauBERT model)"),TFo=l(),su=a("li"),Ule=a("strong"),MFo=o("flava"),EFo=o(" \u2014 "),gN=a("a"),CFo=o("FlavaForPreTraining"),wFo=o(" (Flava model)"),AFo=l(),lu=a("li"),Jle=a("strong"),yFo=o("fnet"),LFo=o(" \u2014 "),hN=a("a"),xFo=o("FNetForPreTraining"),$Fo=o(" (FNet model)"),kFo=l(),iu=a("li"),Yle=a("strong"),SFo=o("fsmt"),RFo=o(" \u2014 "),pN=a("a"),PFo=o("FSMTForConditionalGeneration"),BFo=o(" (FairSeq Machine-Translation model)"),IFo=l(),du=a("li"),Kle=a("strong"),qFo=o("funnel"),NFo=o(" \u2014 "),_N=a("a"),jFo=o("FunnelForPreTraining"),DFo=o(" (Funnel Transformer model)"),GFo=l(),cu=a("li"),Zle=a("strong"),OFo=o("gpt2"),VFo=o(" \u2014 "),uN=a("a"),XFo=o("GPT2LMHeadModel"),zFo=o(" (OpenAI GPT-2 model)"),WFo=l(),fu=a("li"),eie=a("strong"),QFo=o("ibert"),HFo=o(" \u2014 "),bN=a("a"),UFo=o("IBertForMaskedLM"),JFo=o(" (I-BERT model)"),YFo=l(),mu=a("li"),oie=a("strong"),KFo=o("layoutlm"),ZFo=o(" \u2014 "),vN=a("a"),eTo=o("LayoutLMForMaskedLM"),oTo=o(" (LayoutLM model)"),rTo=l(),gu=a("li"),rie=a("strong"),tTo=o("longformer"),aTo=o(" \u2014 "),FN=a("a"),nTo=o("LongformerForMaskedLM"),sTo=o(" (Longformer model)"),lTo=l(),hu=a("li"),tie=a("strong"),iTo=o("lxmert"),dTo=o(" \u2014 "),TN=a("a"),cTo=o("LxmertForPreTraining"),fTo=o(" (LXMERT model)"),mTo=l(),pu=a("li"),aie=a("strong"),gTo=o("megatron-bert"),hTo=o(" \u2014 "),MN=a("a"),pTo=o("MegatronBertForPreTraining"),_To=o(" (MegatronBert model)"),uTo=l(),_u=a("li"),nie=a("strong"),bTo=o("mobilebert"),vTo=o(" \u2014 "),EN=a("a"),FTo=o("MobileBertForPreTraining"),TTo=o(" (MobileBERT model)"),MTo=l(),uu=a("li"),sie=a("strong"),ETo=o("mpnet"),CTo=o(" \u2014 "),CN=a("a"),wTo=o("MPNetForMaskedLM"),ATo=o(" (MPNet model)"),yTo=l(),bu=a("li"),lie=a("strong"),LTo=o("openai-gpt"),xTo=o(" \u2014 "),wN=a("a"),$To=o("OpenAIGPTLMHeadModel"),kTo=o(" (OpenAI GPT model)"),STo=l(),vu=a("li"),iie=a("strong"),RTo=o("retribert"),PTo=o(" \u2014 "),AN=a("a"),BTo=o("RetriBertModel"),ITo=o(" (RetriBERT model)"),qTo=l(),Fu=a("li"),die=a("strong"),NTo=o("roberta"),jTo=o(" \u2014 "),yN=a("a"),DTo=o("RobertaForMaskedLM"),GTo=o(" (RoBERTa model)"),OTo=l(),Tu=a("li"),cie=a("strong"),VTo=o("squeezebert"),XTo=o(" \u2014 "),LN=a("a"),zTo=o("SqueezeBertForMaskedLM"),WTo=o(" (SqueezeBERT model)"),QTo=l(),Mu=a("li"),fie=a("strong"),HTo=o("t5"),UTo=o(" \u2014 "),xN=a("a"),JTo=o("T5ForConditionalGeneration"),YTo=o(" (T5 model)"),KTo=l(),Eu=a("li"),mie=a("strong"),ZTo=o("tapas"),e7o=o(" \u2014 "),$N=a("a"),o7o=o("TapasForMaskedLM"),r7o=o(" (TAPAS model)"),t7o=l(),Cu=a("li"),gie=a("strong"),a7o=o("transfo-xl"),n7o=o(" \u2014 "),kN=a("a"),s7o=o("TransfoXLLMHeadModel"),l7o=o(" (Transformer-XL model)"),i7o=l(),wu=a("li"),hie=a("strong"),d7o=o("unispeech"),c7o=o(" \u2014 "),SN=a("a"),f7o=o("UniSpeechForPreTraining"),m7o=o(" (UniSpeech model)"),g7o=l(),Au=a("li"),pie=a("strong"),h7o=o("unispeech-sat"),p7o=o(" \u2014 "),RN=a("a"),_7o=o("UniSpeechSatForPreTraining"),u7o=o(" (UniSpeechSat model)"),b7o=l(),yu=a("li"),_ie=a("strong"),v7o=o("visual_bert"),F7o=o(" \u2014 "),PN=a("a"),T7o=o("VisualBertForPreTraining"),M7o=o(" (VisualBert model)"),E7o=l(),Lu=a("li"),uie=a("strong"),C7o=o("vit_mae"),w7o=o(" \u2014 "),BN=a("a"),A7o=o("ViTMAEForPreTraining"),y7o=o(" (ViTMAE model)"),L7o=l(),xu=a("li"),bie=a("strong"),x7o=o("wav2vec2"),$7o=o(" \u2014 "),IN=a("a"),k7o=o("Wav2Vec2ForPreTraining"),S7o=o(" (Wav2Vec2 model)"),R7o=l(),$u=a("li"),vie=a("strong"),P7o=o("wav2vec2-conformer"),B7o=o(" \u2014 "),qN=a("a"),I7o=o("Wav2Vec2ConformerForPreTraining"),q7o=o(" (Wav2Vec2-Conformer model)"),N7o=l(),ku=a("li"),Fie=a("strong"),j7o=o("xlm"),D7o=o(" \u2014 "),NN=a("a"),G7o=o("XLMWithLMHeadModel"),O7o=o(" (XLM model)"),V7o=l(),Su=a("li"),Tie=a("strong"),X7o=o("xlm-roberta"),z7o=o(" \u2014 "),jN=a("a"),W7o=o("XLMRobertaForMaskedLM"),Q7o=o(" (XLM-RoBERTa model)"),H7o=l(),Ru=a("li"),Mie=a("strong"),U7o=o("xlm-roberta-xl"),J7o=o(" \u2014 "),DN=a("a"),Y7o=o("XLMRobertaXLForMaskedLM"),K7o=o(" (XLM-RoBERTa-XL model)"),Z7o=l(),Pu=a("li"),Eie=a("strong"),eMo=o("xlnet"),oMo=o(" \u2014 "),GN=a("a"),rMo=o("XLNetLMHeadModel"),tMo=o(" (XLNet model)"),aMo=l(),Bu=a("p"),nMo=o("The model is set in evaluation mode by default using "),Cie=a("code"),sMo=o("model.eval()"),lMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),iMo=o("model.train()"),dMo=l(),F(Iu.$$.fragment),aqe=l(),$i=a("h2"),qu=a("a"),Aie=a("span"),F(Q6.$$.fragment),cMo=l(),yie=a("span"),fMo=o("AutoModelForCausalLM"),nqe=l(),$o=a("div"),F(H6.$$.fragment),mMo=l(),ki=a("p"),gMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ON=a("a"),hMo=o("from_pretrained()"),pMo=o(" class method or the "),VN=a("a"),_Mo=o("from_config()"),uMo=o(` class
method.`),bMo=l(),U6=a("p"),vMo=o("This class cannot be instantiated directly using "),Lie=a("code"),FMo=o("__init__()"),TMo=o(" (throws an error)."),MMo=l(),nt=a("div"),F(J6.$$.fragment),EMo=l(),xie=a("p"),CMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wMo=l(),Si=a("p"),AMo=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),yMo=o("not"),LMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),xMo=o("from_pretrained()"),$Mo=o(" to load the model weights."),kMo=l(),F(Nu.$$.fragment),SMo=l(),Ke=a("div"),F(Y6.$$.fragment),RMo=l(),kie=a("p"),PMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BMo=l(),$a=a("p"),IMo=o("The model class to instantiate is selected based on the "),Sie=a("code"),qMo=o("model_type"),NMo=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),jMo=o("pretrained_model_name_or_path"),DMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(":"),VMo=l(),z=a("ul"),ju=a("li"),Bie=a("strong"),XMo=o("bart"),zMo=o(" \u2014 "),zN=a("a"),WMo=o("BartForCausalLM"),QMo=o(" (BART model)"),HMo=l(),Du=a("li"),Iie=a("strong"),UMo=o("bert"),JMo=o(" \u2014 "),WN=a("a"),YMo=o("BertLMHeadModel"),KMo=o(" (BERT model)"),ZMo=l(),Gu=a("li"),qie=a("strong"),e4o=o("bert-generation"),o4o=o(" \u2014 "),QN=a("a"),r4o=o("BertGenerationDecoder"),t4o=o(" (Bert Generation model)"),a4o=l(),Ou=a("li"),Nie=a("strong"),n4o=o("big_bird"),s4o=o(" \u2014 "),HN=a("a"),l4o=o("BigBirdForCausalLM"),i4o=o(" (BigBird model)"),d4o=l(),Vu=a("li"),jie=a("strong"),c4o=o("bigbird_pegasus"),f4o=o(" \u2014 "),UN=a("a"),m4o=o("BigBirdPegasusForCausalLM"),g4o=o(" (BigBirdPegasus model)"),h4o=l(),Xu=a("li"),Die=a("strong"),p4o=o("blenderbot"),_4o=o(" \u2014 "),JN=a("a"),u4o=o("BlenderbotForCausalLM"),b4o=o(" (Blenderbot model)"),v4o=l(),zu=a("li"),Gie=a("strong"),F4o=o("blenderbot-small"),T4o=o(" \u2014 "),YN=a("a"),M4o=o("BlenderbotSmallForCausalLM"),E4o=o(" (BlenderbotSmall model)"),C4o=l(),Wu=a("li"),Oie=a("strong"),w4o=o("camembert"),A4o=o(" \u2014 "),KN=a("a"),y4o=o("CamembertForCausalLM"),L4o=o(" (CamemBERT model)"),x4o=l(),Qu=a("li"),Vie=a("strong"),$4o=o("ctrl"),k4o=o(" \u2014 "),ZN=a("a"),S4o=o("CTRLLMHeadModel"),R4o=o(" (CTRL model)"),P4o=l(),Hu=a("li"),Xie=a("strong"),B4o=o("data2vec-text"),I4o=o(" \u2014 "),ej=a("a"),q4o=o("Data2VecTextForCausalLM"),N4o=o(" (Data2VecText model)"),j4o=l(),Uu=a("li"),zie=a("strong"),D4o=o("electra"),G4o=o(" \u2014 "),oj=a("a"),O4o=o("ElectraForCausalLM"),V4o=o(" (ELECTRA model)"),X4o=l(),Ju=a("li"),Wie=a("strong"),z4o=o("gpt2"),W4o=o(" \u2014 "),rj=a("a"),Q4o=o("GPT2LMHeadModel"),H4o=o(" (OpenAI GPT-2 model)"),U4o=l(),Yu=a("li"),Qie=a("strong"),J4o=o("gpt_neo"),Y4o=o(" \u2014 "),tj=a("a"),K4o=o("GPTNeoForCausalLM"),Z4o=o(" (GPT Neo model)"),eEo=l(),Ku=a("li"),Hie=a("strong"),oEo=o("gptj"),rEo=o(" \u2014 "),aj=a("a"),tEo=o("GPTJForCausalLM"),aEo=o(" (GPT-J model)"),nEo=l(),Zu=a("li"),Uie=a("strong"),sEo=o("marian"),lEo=o(" \u2014 "),nj=a("a"),iEo=o("MarianForCausalLM"),dEo=o(" (Marian model)"),cEo=l(),e2=a("li"),Jie=a("strong"),fEo=o("mbart"),mEo=o(" \u2014 "),sj=a("a"),gEo=o("MBartForCausalLM"),hEo=o(" (mBART model)"),pEo=l(),o2=a("li"),Yie=a("strong"),_Eo=o("megatron-bert"),uEo=o(" \u2014 "),lj=a("a"),bEo=o("MegatronBertForCausalLM"),vEo=o(" (MegatronBert model)"),FEo=l(),r2=a("li"),Kie=a("strong"),TEo=o("openai-gpt"),MEo=o(" \u2014 "),ij=a("a"),EEo=o("OpenAIGPTLMHeadModel"),CEo=o(" (OpenAI GPT model)"),wEo=l(),t2=a("li"),Zie=a("strong"),AEo=o("opt"),yEo=o(" \u2014 "),dj=a("a"),LEo=o("OPTForCausalLM"),xEo=o(" (OPT model)"),$Eo=l(),a2=a("li"),ede=a("strong"),kEo=o("pegasus"),SEo=o(" \u2014 "),cj=a("a"),REo=o("PegasusForCausalLM"),PEo=o(" (Pegasus model)"),BEo=l(),n2=a("li"),ode=a("strong"),IEo=o("plbart"),qEo=o(" \u2014 "),fj=a("a"),NEo=o("PLBartForCausalLM"),jEo=o(" (PLBart model)"),DEo=l(),s2=a("li"),rde=a("strong"),GEo=o("prophetnet"),OEo=o(" \u2014 "),mj=a("a"),VEo=o("ProphetNetForCausalLM"),XEo=o(" (ProphetNet model)"),zEo=l(),l2=a("li"),tde=a("strong"),WEo=o("qdqbert"),QEo=o(" \u2014 "),gj=a("a"),HEo=o("QDQBertLMHeadModel"),UEo=o(" (QDQBert model)"),JEo=l(),i2=a("li"),ade=a("strong"),YEo=o("reformer"),KEo=o(" \u2014 "),hj=a("a"),ZEo=o("ReformerModelWithLMHead"),eCo=o(" (Reformer model)"),oCo=l(),d2=a("li"),nde=a("strong"),rCo=o("rembert"),tCo=o(" \u2014 "),pj=a("a"),aCo=o("RemBertForCausalLM"),nCo=o(" (RemBERT model)"),sCo=l(),c2=a("li"),sde=a("strong"),lCo=o("roberta"),iCo=o(" \u2014 "),_j=a("a"),dCo=o("RobertaForCausalLM"),cCo=o(" (RoBERTa model)"),fCo=l(),f2=a("li"),lde=a("strong"),mCo=o("roformer"),gCo=o(" \u2014 "),uj=a("a"),hCo=o("RoFormerForCausalLM"),pCo=o(" (RoFormer model)"),_Co=l(),m2=a("li"),ide=a("strong"),uCo=o("speech_to_text_2"),bCo=o(" \u2014 "),bj=a("a"),vCo=o("Speech2Text2ForCausalLM"),FCo=o(" (Speech2Text2 model)"),TCo=l(),g2=a("li"),dde=a("strong"),MCo=o("transfo-xl"),ECo=o(" \u2014 "),vj=a("a"),CCo=o("TransfoXLLMHeadModel"),wCo=o(" (Transformer-XL model)"),ACo=l(),h2=a("li"),cde=a("strong"),yCo=o("trocr"),LCo=o(" \u2014 "),Fj=a("a"),xCo=o("TrOCRForCausalLM"),$Co=o(" (TrOCR model)"),kCo=l(),p2=a("li"),fde=a("strong"),SCo=o("xglm"),RCo=o(" \u2014 "),Tj=a("a"),PCo=o("XGLMForCausalLM"),BCo=o(" (XGLM model)"),ICo=l(),_2=a("li"),mde=a("strong"),qCo=o("xlm"),NCo=o(" \u2014 "),Mj=a("a"),jCo=o("XLMWithLMHeadModel"),DCo=o(" (XLM model)"),GCo=l(),u2=a("li"),gde=a("strong"),OCo=o("xlm-prophetnet"),VCo=o(" \u2014 "),Ej=a("a"),XCo=o("XLMProphetNetForCausalLM"),zCo=o(" (XLMProphetNet model)"),WCo=l(),b2=a("li"),hde=a("strong"),QCo=o("xlm-roberta"),HCo=o(" \u2014 "),Cj=a("a"),UCo=o("XLMRobertaForCausalLM"),JCo=o(" (XLM-RoBERTa model)"),YCo=l(),v2=a("li"),pde=a("strong"),KCo=o("xlm-roberta-xl"),ZCo=o(" \u2014 "),wj=a("a"),ewo=o("XLMRobertaXLForCausalLM"),owo=o(" (XLM-RoBERTa-XL model)"),rwo=l(),F2=a("li"),_de=a("strong"),two=o("xlnet"),awo=o(" \u2014 "),Aj=a("a"),nwo=o("XLNetLMHeadModel"),swo=o(" (XLNet model)"),lwo=l(),T2=a("p"),iwo=o("The model is set in evaluation mode by default using "),ude=a("code"),dwo=o("model.eval()"),cwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),fwo=o("model.train()"),mwo=l(),F(M2.$$.fragment),sqe=l(),Ri=a("h2"),E2=a("a"),vde=a("span"),F(K6.$$.fragment),gwo=l(),Fde=a("span"),hwo=o("AutoModelForMaskedLM"),lqe=l(),ko=a("div"),F(Z6.$$.fragment),pwo=l(),Pi=a("p"),_wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yj=a("a"),uwo=o("from_pretrained()"),bwo=o(" class method or the "),Lj=a("a"),vwo=o("from_config()"),Fwo=o(` class
method.`),Two=l(),ey=a("p"),Mwo=o("This class cannot be instantiated directly using "),Tde=a("code"),Ewo=o("__init__()"),Cwo=o(" (throws an error)."),wwo=l(),st=a("div"),F(oy.$$.fragment),Awo=l(),Mde=a("p"),ywo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lwo=l(),Bi=a("p"),xwo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),$wo=o("not"),kwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),Swo=o("from_pretrained()"),Rwo=o(" to load the model weights."),Pwo=l(),F(C2.$$.fragment),Bwo=l(),Ze=a("div"),F(ry.$$.fragment),Iwo=l(),Cde=a("p"),qwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nwo=l(),ka=a("p"),jwo=o("The model class to instantiate is selected based on the "),wde=a("code"),Dwo=o("model_type"),Gwo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Owo=o("pretrained_model_name_or_path"),Vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),Xwo=o("pretrained_model_name_or_path"),zwo=o(":"),Wwo=l(),W=a("ul"),w2=a("li"),Lde=a("strong"),Qwo=o("albert"),Hwo=o(" \u2014 "),$j=a("a"),Uwo=o("AlbertForMaskedLM"),Jwo=o(" (ALBERT model)"),Ywo=l(),A2=a("li"),xde=a("strong"),Kwo=o("bart"),Zwo=o(" \u2014 "),kj=a("a"),e0o=o("BartForConditionalGeneration"),o0o=o(" (BART model)"),r0o=l(),y2=a("li"),$de=a("strong"),t0o=o("bert"),a0o=o(" \u2014 "),Sj=a("a"),n0o=o("BertForMaskedLM"),s0o=o(" (BERT model)"),l0o=l(),L2=a("li"),kde=a("strong"),i0o=o("big_bird"),d0o=o(" \u2014 "),Rj=a("a"),c0o=o("BigBirdForMaskedLM"),f0o=o(" (BigBird model)"),m0o=l(),x2=a("li"),Sde=a("strong"),g0o=o("camembert"),h0o=o(" \u2014 "),Pj=a("a"),p0o=o("CamembertForMaskedLM"),_0o=o(" (CamemBERT model)"),u0o=l(),$2=a("li"),Rde=a("strong"),b0o=o("convbert"),v0o=o(" \u2014 "),Bj=a("a"),F0o=o("ConvBertForMaskedLM"),T0o=o(" (ConvBERT model)"),M0o=l(),k2=a("li"),Pde=a("strong"),E0o=o("data2vec-text"),C0o=o(" \u2014 "),Ij=a("a"),w0o=o("Data2VecTextForMaskedLM"),A0o=o(" (Data2VecText model)"),y0o=l(),S2=a("li"),Bde=a("strong"),L0o=o("deberta"),x0o=o(" \u2014 "),qj=a("a"),$0o=o("DebertaForMaskedLM"),k0o=o(" (DeBERTa model)"),S0o=l(),R2=a("li"),Ide=a("strong"),R0o=o("deberta-v2"),P0o=o(" \u2014 "),Nj=a("a"),B0o=o("DebertaV2ForMaskedLM"),I0o=o(" (DeBERTa-v2 model)"),q0o=l(),P2=a("li"),qde=a("strong"),N0o=o("distilbert"),j0o=o(" \u2014 "),jj=a("a"),D0o=o("DistilBertForMaskedLM"),G0o=o(" (DistilBERT model)"),O0o=l(),B2=a("li"),Nde=a("strong"),V0o=o("electra"),X0o=o(" \u2014 "),Dj=a("a"),z0o=o("ElectraForMaskedLM"),W0o=o(" (ELECTRA model)"),Q0o=l(),I2=a("li"),jde=a("strong"),H0o=o("flaubert"),U0o=o(" \u2014 "),Gj=a("a"),J0o=o("FlaubertWithLMHeadModel"),Y0o=o(" (FlauBERT model)"),K0o=l(),q2=a("li"),Dde=a("strong"),Z0o=o("fnet"),eAo=o(" \u2014 "),Oj=a("a"),oAo=o("FNetForMaskedLM"),rAo=o(" (FNet model)"),tAo=l(),N2=a("li"),Gde=a("strong"),aAo=o("funnel"),nAo=o(" \u2014 "),Vj=a("a"),sAo=o("FunnelForMaskedLM"),lAo=o(" (Funnel Transformer model)"),iAo=l(),j2=a("li"),Ode=a("strong"),dAo=o("ibert"),cAo=o(" \u2014 "),Xj=a("a"),fAo=o("IBertForMaskedLM"),mAo=o(" (I-BERT model)"),gAo=l(),D2=a("li"),Vde=a("strong"),hAo=o("layoutlm"),pAo=o(" \u2014 "),zj=a("a"),_Ao=o("LayoutLMForMaskedLM"),uAo=o(" (LayoutLM model)"),bAo=l(),G2=a("li"),Xde=a("strong"),vAo=o("longformer"),FAo=o(" \u2014 "),Wj=a("a"),TAo=o("LongformerForMaskedLM"),MAo=o(" (Longformer model)"),EAo=l(),O2=a("li"),zde=a("strong"),CAo=o("mbart"),wAo=o(" \u2014 "),Qj=a("a"),AAo=o("MBartForConditionalGeneration"),yAo=o(" (mBART model)"),LAo=l(),V2=a("li"),Wde=a("strong"),xAo=o("megatron-bert"),$Ao=o(" \u2014 "),Hj=a("a"),kAo=o("MegatronBertForMaskedLM"),SAo=o(" (MegatronBert model)"),RAo=l(),X2=a("li"),Qde=a("strong"),PAo=o("mobilebert"),BAo=o(" \u2014 "),Uj=a("a"),IAo=o("MobileBertForMaskedLM"),qAo=o(" (MobileBERT model)"),NAo=l(),z2=a("li"),Hde=a("strong"),jAo=o("mpnet"),DAo=o(" \u2014 "),Jj=a("a"),GAo=o("MPNetForMaskedLM"),OAo=o(" (MPNet model)"),VAo=l(),W2=a("li"),Ude=a("strong"),XAo=o("nystromformer"),zAo=o(" \u2014 "),Yj=a("a"),WAo=o("NystromformerForMaskedLM"),QAo=o(" (Nystromformer model)"),HAo=l(),Q2=a("li"),Jde=a("strong"),UAo=o("perceiver"),JAo=o(" \u2014 "),Kj=a("a"),YAo=o("PerceiverForMaskedLM"),KAo=o(" (Perceiver model)"),ZAo=l(),H2=a("li"),Yde=a("strong"),e6o=o("qdqbert"),o6o=o(" \u2014 "),Zj=a("a"),r6o=o("QDQBertForMaskedLM"),t6o=o(" (QDQBert model)"),a6o=l(),U2=a("li"),Kde=a("strong"),n6o=o("reformer"),s6o=o(" \u2014 "),eD=a("a"),l6o=o("ReformerForMaskedLM"),i6o=o(" (Reformer model)"),d6o=l(),J2=a("li"),Zde=a("strong"),c6o=o("rembert"),f6o=o(" \u2014 "),oD=a("a"),m6o=o("RemBertForMaskedLM"),g6o=o(" (RemBERT model)"),h6o=l(),Y2=a("li"),ece=a("strong"),p6o=o("roberta"),_6o=o(" \u2014 "),rD=a("a"),u6o=o("RobertaForMaskedLM"),b6o=o(" (RoBERTa model)"),v6o=l(),K2=a("li"),oce=a("strong"),F6o=o("roformer"),T6o=o(" \u2014 "),tD=a("a"),M6o=o("RoFormerForMaskedLM"),E6o=o(" (RoFormer model)"),C6o=l(),Z2=a("li"),rce=a("strong"),w6o=o("squeezebert"),A6o=o(" \u2014 "),aD=a("a"),y6o=o("SqueezeBertForMaskedLM"),L6o=o(" (SqueezeBERT model)"),x6o=l(),e1=a("li"),tce=a("strong"),$6o=o("tapas"),k6o=o(" \u2014 "),nD=a("a"),S6o=o("TapasForMaskedLM"),R6o=o(" (TAPAS model)"),P6o=l(),o1=a("li"),ace=a("strong"),B6o=o("wav2vec2"),I6o=o(" \u2014 "),nce=a("code"),q6o=o("Wav2Vec2ForMaskedLM"),N6o=o(" (Wav2Vec2 model)"),j6o=l(),r1=a("li"),sce=a("strong"),D6o=o("xlm"),G6o=o(" \u2014 "),sD=a("a"),O6o=o("XLMWithLMHeadModel"),V6o=o(" (XLM model)"),X6o=l(),t1=a("li"),lce=a("strong"),z6o=o("xlm-roberta"),W6o=o(" \u2014 "),lD=a("a"),Q6o=o("XLMRobertaForMaskedLM"),H6o=o(" (XLM-RoBERTa model)"),U6o=l(),a1=a("li"),ice=a("strong"),J6o=o("xlm-roberta-xl"),Y6o=o(" \u2014 "),iD=a("a"),K6o=o("XLMRobertaXLForMaskedLM"),Z6o=o(" (XLM-RoBERTa-XL model)"),eyo=l(),n1=a("li"),dce=a("strong"),oyo=o("yoso"),ryo=o(" \u2014 "),dD=a("a"),tyo=o("YosoForMaskedLM"),ayo=o(" (YOSO model)"),nyo=l(),s1=a("p"),syo=o("The model is set in evaluation mode by default using "),cce=a("code"),lyo=o("model.eval()"),iyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),dyo=o("model.train()"),cyo=l(),F(l1.$$.fragment),iqe=l(),Ii=a("h2"),i1=a("a"),mce=a("span"),F(ty.$$.fragment),fyo=l(),gce=a("span"),myo=o("AutoModelForSeq2SeqLM"),dqe=l(),So=a("div"),F(ay.$$.fragment),gyo=l(),qi=a("p"),hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cD=a("a"),pyo=o("from_pretrained()"),_yo=o(" class method or the "),fD=a("a"),uyo=o("from_config()"),byo=o(` class
method.`),vyo=l(),ny=a("p"),Fyo=o("This class cannot be instantiated directly using "),hce=a("code"),Tyo=o("__init__()"),Myo=o(" (throws an error)."),Eyo=l(),lt=a("div"),F(sy.$$.fragment),Cyo=l(),pce=a("p"),wyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ayo=l(),Ni=a("p"),yyo=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),Lyo=o("not"),xyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),$yo=o("from_pretrained()"),kyo=o(" to load the model weights."),Syo=l(),F(d1.$$.fragment),Ryo=l(),eo=a("div"),F(ly.$$.fragment),Pyo=l(),uce=a("p"),Byo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Iyo=l(),Sa=a("p"),qyo=o("The model class to instantiate is selected based on the "),bce=a("code"),Nyo=o("model_type"),jyo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),Dyo=o("pretrained_model_name_or_path"),Gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),Oyo=o("pretrained_model_name_or_path"),Vyo=o(":"),Xyo=l(),_e=a("ul"),c1=a("li"),Tce=a("strong"),zyo=o("bart"),Wyo=o(" \u2014 "),gD=a("a"),Qyo=o("BartForConditionalGeneration"),Hyo=o(" (BART model)"),Uyo=l(),f1=a("li"),Mce=a("strong"),Jyo=o("bigbird_pegasus"),Yyo=o(" \u2014 "),hD=a("a"),Kyo=o("BigBirdPegasusForConditionalGeneration"),Zyo=o(" (BigBirdPegasus model)"),eLo=l(),m1=a("li"),Ece=a("strong"),oLo=o("blenderbot"),rLo=o(" \u2014 "),pD=a("a"),tLo=o("BlenderbotForConditionalGeneration"),aLo=o(" (Blenderbot model)"),nLo=l(),g1=a("li"),Cce=a("strong"),sLo=o("blenderbot-small"),lLo=o(" \u2014 "),_D=a("a"),iLo=o("BlenderbotSmallForConditionalGeneration"),dLo=o(" (BlenderbotSmall model)"),cLo=l(),h1=a("li"),wce=a("strong"),fLo=o("encoder-decoder"),mLo=o(" \u2014 "),uD=a("a"),gLo=o("EncoderDecoderModel"),hLo=o(" (Encoder decoder model)"),pLo=l(),p1=a("li"),Ace=a("strong"),_Lo=o("fsmt"),uLo=o(" \u2014 "),bD=a("a"),bLo=o("FSMTForConditionalGeneration"),vLo=o(" (FairSeq Machine-Translation model)"),FLo=l(),_1=a("li"),yce=a("strong"),TLo=o("led"),MLo=o(" \u2014 "),vD=a("a"),ELo=o("LEDForConditionalGeneration"),CLo=o(" (LED model)"),wLo=l(),u1=a("li"),Lce=a("strong"),ALo=o("m2m_100"),yLo=o(" \u2014 "),FD=a("a"),LLo=o("M2M100ForConditionalGeneration"),xLo=o(" (M2M100 model)"),$Lo=l(),b1=a("li"),xce=a("strong"),kLo=o("marian"),SLo=o(" \u2014 "),TD=a("a"),RLo=o("MarianMTModel"),PLo=o(" (Marian model)"),BLo=l(),v1=a("li"),$ce=a("strong"),ILo=o("mbart"),qLo=o(" \u2014 "),MD=a("a"),NLo=o("MBartForConditionalGeneration"),jLo=o(" (mBART model)"),DLo=l(),F1=a("li"),kce=a("strong"),GLo=o("mt5"),OLo=o(" \u2014 "),ED=a("a"),VLo=o("MT5ForConditionalGeneration"),XLo=o(" (mT5 model)"),zLo=l(),T1=a("li"),Sce=a("strong"),WLo=o("pegasus"),QLo=o(" \u2014 "),CD=a("a"),HLo=o("PegasusForConditionalGeneration"),ULo=o(" (Pegasus model)"),JLo=l(),M1=a("li"),Rce=a("strong"),YLo=o("plbart"),KLo=o(" \u2014 "),wD=a("a"),ZLo=o("PLBartForConditionalGeneration"),e8o=o(" (PLBart model)"),o8o=l(),E1=a("li"),Pce=a("strong"),r8o=o("prophetnet"),t8o=o(" \u2014 "),AD=a("a"),a8o=o("ProphetNetForConditionalGeneration"),n8o=o(" (ProphetNet model)"),s8o=l(),C1=a("li"),Bce=a("strong"),l8o=o("t5"),i8o=o(" \u2014 "),yD=a("a"),d8o=o("T5ForConditionalGeneration"),c8o=o(" (T5 model)"),f8o=l(),w1=a("li"),Ice=a("strong"),m8o=o("xlm-prophetnet"),g8o=o(" \u2014 "),LD=a("a"),h8o=o("XLMProphetNetForConditionalGeneration"),p8o=o(" (XLMProphetNet model)"),_8o=l(),A1=a("p"),u8o=o("The model is set in evaluation mode by default using "),qce=a("code"),b8o=o("model.eval()"),v8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),F8o=o("model.train()"),T8o=l(),F(y1.$$.fragment),cqe=l(),ji=a("h2"),L1=a("a"),jce=a("span"),F(iy.$$.fragment),M8o=l(),Dce=a("span"),E8o=o("AutoModelForSequenceClassification"),fqe=l(),Ro=a("div"),F(dy.$$.fragment),C8o=l(),Di=a("p"),w8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xD=a("a"),A8o=o("from_pretrained()"),y8o=o(" class method or the "),$D=a("a"),L8o=o("from_config()"),x8o=o(` class
method.`),$8o=l(),cy=a("p"),k8o=o("This class cannot be instantiated directly using "),Gce=a("code"),S8o=o("__init__()"),R8o=o(" (throws an error)."),P8o=l(),it=a("div"),F(fy.$$.fragment),B8o=l(),Oce=a("p"),I8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q8o=l(),Gi=a("p"),N8o=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),j8o=o("not"),D8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=a("a"),G8o=o("from_pretrained()"),O8o=o(" to load the model weights."),V8o=l(),F(x1.$$.fragment),X8o=l(),oo=a("div"),F(my.$$.fragment),z8o=l(),Xce=a("p"),W8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q8o=l(),Ra=a("p"),H8o=o("The model class to instantiate is selected based on the "),zce=a("code"),U8o=o("model_type"),J8o=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),Y8o=o("pretrained_model_name_or_path"),K8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),Z8o=o("pretrained_model_name_or_path"),exo=o(":"),oxo=l(),q=a("ul"),$1=a("li"),Hce=a("strong"),rxo=o("albert"),txo=o(" \u2014 "),SD=a("a"),axo=o("AlbertForSequenceClassification"),nxo=o(" (ALBERT model)"),sxo=l(),k1=a("li"),Uce=a("strong"),lxo=o("bart"),ixo=o(" \u2014 "),RD=a("a"),dxo=o("BartForSequenceClassification"),cxo=o(" (BART model)"),fxo=l(),S1=a("li"),Jce=a("strong"),mxo=o("bert"),gxo=o(" \u2014 "),PD=a("a"),hxo=o("BertForSequenceClassification"),pxo=o(" (BERT model)"),_xo=l(),R1=a("li"),Yce=a("strong"),uxo=o("big_bird"),bxo=o(" \u2014 "),BD=a("a"),vxo=o("BigBirdForSequenceClassification"),Fxo=o(" (BigBird model)"),Txo=l(),P1=a("li"),Kce=a("strong"),Mxo=o("bigbird_pegasus"),Exo=o(" \u2014 "),ID=a("a"),Cxo=o("BigBirdPegasusForSequenceClassification"),wxo=o(" (BigBirdPegasus model)"),Axo=l(),B1=a("li"),Zce=a("strong"),yxo=o("camembert"),Lxo=o(" \u2014 "),qD=a("a"),xxo=o("CamembertForSequenceClassification"),$xo=o(" (CamemBERT model)"),kxo=l(),I1=a("li"),efe=a("strong"),Sxo=o("canine"),Rxo=o(" \u2014 "),ND=a("a"),Pxo=o("CanineForSequenceClassification"),Bxo=o(" (Canine model)"),Ixo=l(),q1=a("li"),ofe=a("strong"),qxo=o("convbert"),Nxo=o(" \u2014 "),jD=a("a"),jxo=o("ConvBertForSequenceClassification"),Dxo=o(" (ConvBERT model)"),Gxo=l(),N1=a("li"),rfe=a("strong"),Oxo=o("ctrl"),Vxo=o(" \u2014 "),DD=a("a"),Xxo=o("CTRLForSequenceClassification"),zxo=o(" (CTRL model)"),Wxo=l(),j1=a("li"),tfe=a("strong"),Qxo=o("data2vec-text"),Hxo=o(" \u2014 "),GD=a("a"),Uxo=o("Data2VecTextForSequenceClassification"),Jxo=o(" (Data2VecText model)"),Yxo=l(),D1=a("li"),afe=a("strong"),Kxo=o("deberta"),Zxo=o(" \u2014 "),OD=a("a"),e9o=o("DebertaForSequenceClassification"),o9o=o(" (DeBERTa model)"),r9o=l(),G1=a("li"),nfe=a("strong"),t9o=o("deberta-v2"),a9o=o(" \u2014 "),VD=a("a"),n9o=o("DebertaV2ForSequenceClassification"),s9o=o(" (DeBERTa-v2 model)"),l9o=l(),O1=a("li"),sfe=a("strong"),i9o=o("distilbert"),d9o=o(" \u2014 "),XD=a("a"),c9o=o("DistilBertForSequenceClassification"),f9o=o(" (DistilBERT model)"),m9o=l(),V1=a("li"),lfe=a("strong"),g9o=o("electra"),h9o=o(" \u2014 "),zD=a("a"),p9o=o("ElectraForSequenceClassification"),_9o=o(" (ELECTRA model)"),u9o=l(),X1=a("li"),ife=a("strong"),b9o=o("flaubert"),v9o=o(" \u2014 "),WD=a("a"),F9o=o("FlaubertForSequenceClassification"),T9o=o(" (FlauBERT model)"),M9o=l(),z1=a("li"),dfe=a("strong"),E9o=o("fnet"),C9o=o(" \u2014 "),QD=a("a"),w9o=o("FNetForSequenceClassification"),A9o=o(" (FNet model)"),y9o=l(),W1=a("li"),cfe=a("strong"),L9o=o("funnel"),x9o=o(" \u2014 "),HD=a("a"),$9o=o("FunnelForSequenceClassification"),k9o=o(" (Funnel Transformer model)"),S9o=l(),Q1=a("li"),ffe=a("strong"),R9o=o("gpt2"),P9o=o(" \u2014 "),UD=a("a"),B9o=o("GPT2ForSequenceClassification"),I9o=o(" (OpenAI GPT-2 model)"),q9o=l(),H1=a("li"),mfe=a("strong"),N9o=o("gpt_neo"),j9o=o(" \u2014 "),JD=a("a"),D9o=o("GPTNeoForSequenceClassification"),G9o=o(" (GPT Neo model)"),O9o=l(),U1=a("li"),gfe=a("strong"),V9o=o("gptj"),X9o=o(" \u2014 "),YD=a("a"),z9o=o("GPTJForSequenceClassification"),W9o=o(" (GPT-J model)"),Q9o=l(),J1=a("li"),hfe=a("strong"),H9o=o("ibert"),U9o=o(" \u2014 "),KD=a("a"),J9o=o("IBertForSequenceClassification"),Y9o=o(" (I-BERT model)"),K9o=l(),Y1=a("li"),pfe=a("strong"),Z9o=o("layoutlm"),e$o=o(" \u2014 "),ZD=a("a"),o$o=o("LayoutLMForSequenceClassification"),r$o=o(" (LayoutLM model)"),t$o=l(),K1=a("li"),_fe=a("strong"),a$o=o("layoutlmv2"),n$o=o(" \u2014 "),eG=a("a"),s$o=o("LayoutLMv2ForSequenceClassification"),l$o=o(" (LayoutLMv2 model)"),i$o=l(),Z1=a("li"),ufe=a("strong"),d$o=o("led"),c$o=o(" \u2014 "),oG=a("a"),f$o=o("LEDForSequenceClassification"),m$o=o(" (LED model)"),g$o=l(),eb=a("li"),bfe=a("strong"),h$o=o("longformer"),p$o=o(" \u2014 "),rG=a("a"),_$o=o("LongformerForSequenceClassification"),u$o=o(" (Longformer model)"),b$o=l(),ob=a("li"),vfe=a("strong"),v$o=o("mbart"),F$o=o(" \u2014 "),tG=a("a"),T$o=o("MBartForSequenceClassification"),M$o=o(" (mBART model)"),E$o=l(),rb=a("li"),Ffe=a("strong"),C$o=o("megatron-bert"),w$o=o(" \u2014 "),aG=a("a"),A$o=o("MegatronBertForSequenceClassification"),y$o=o(" (MegatronBert model)"),L$o=l(),tb=a("li"),Tfe=a("strong"),x$o=o("mobilebert"),$$o=o(" \u2014 "),nG=a("a"),k$o=o("MobileBertForSequenceClassification"),S$o=o(" (MobileBERT model)"),R$o=l(),ab=a("li"),Mfe=a("strong"),P$o=o("mpnet"),B$o=o(" \u2014 "),sG=a("a"),I$o=o("MPNetForSequenceClassification"),q$o=o(" (MPNet model)"),N$o=l(),nb=a("li"),Efe=a("strong"),j$o=o("nystromformer"),D$o=o(" \u2014 "),lG=a("a"),G$o=o("NystromformerForSequenceClassification"),O$o=o(" (Nystromformer model)"),V$o=l(),sb=a("li"),Cfe=a("strong"),X$o=o("openai-gpt"),z$o=o(" \u2014 "),iG=a("a"),W$o=o("OpenAIGPTForSequenceClassification"),Q$o=o(" (OpenAI GPT model)"),H$o=l(),lb=a("li"),wfe=a("strong"),U$o=o("perceiver"),J$o=o(" \u2014 "),dG=a("a"),Y$o=o("PerceiverForSequenceClassification"),K$o=o(" (Perceiver model)"),Z$o=l(),ib=a("li"),Afe=a("strong"),eko=o("plbart"),oko=o(" \u2014 "),cG=a("a"),rko=o("PLBartForSequenceClassification"),tko=o(" (PLBart model)"),ako=l(),db=a("li"),yfe=a("strong"),nko=o("qdqbert"),sko=o(" \u2014 "),fG=a("a"),lko=o("QDQBertForSequenceClassification"),iko=o(" (QDQBert model)"),dko=l(),cb=a("li"),Lfe=a("strong"),cko=o("reformer"),fko=o(" \u2014 "),mG=a("a"),mko=o("ReformerForSequenceClassification"),gko=o(" (Reformer model)"),hko=l(),fb=a("li"),xfe=a("strong"),pko=o("rembert"),_ko=o(" \u2014 "),gG=a("a"),uko=o("RemBertForSequenceClassification"),bko=o(" (RemBERT model)"),vko=l(),mb=a("li"),$fe=a("strong"),Fko=o("roberta"),Tko=o(" \u2014 "),hG=a("a"),Mko=o("RobertaForSequenceClassification"),Eko=o(" (RoBERTa model)"),Cko=l(),gb=a("li"),kfe=a("strong"),wko=o("roformer"),Ako=o(" \u2014 "),pG=a("a"),yko=o("RoFormerForSequenceClassification"),Lko=o(" (RoFormer model)"),xko=l(),hb=a("li"),Sfe=a("strong"),$ko=o("squeezebert"),kko=o(" \u2014 "),_G=a("a"),Sko=o("SqueezeBertForSequenceClassification"),Rko=o(" (SqueezeBERT model)"),Pko=l(),pb=a("li"),Rfe=a("strong"),Bko=o("tapas"),Iko=o(" \u2014 "),uG=a("a"),qko=o("TapasForSequenceClassification"),Nko=o(" (TAPAS model)"),jko=l(),_b=a("li"),Pfe=a("strong"),Dko=o("transfo-xl"),Gko=o(" \u2014 "),bG=a("a"),Oko=o("TransfoXLForSequenceClassification"),Vko=o(" (Transformer-XL model)"),Xko=l(),ub=a("li"),Bfe=a("strong"),zko=o("xlm"),Wko=o(" \u2014 "),vG=a("a"),Qko=o("XLMForSequenceClassification"),Hko=o(" (XLM model)"),Uko=l(),bb=a("li"),Ife=a("strong"),Jko=o("xlm-roberta"),Yko=o(" \u2014 "),FG=a("a"),Kko=o("XLMRobertaForSequenceClassification"),Zko=o(" (XLM-RoBERTa model)"),eSo=l(),vb=a("li"),qfe=a("strong"),oSo=o("xlm-roberta-xl"),rSo=o(" \u2014 "),TG=a("a"),tSo=o("XLMRobertaXLForSequenceClassification"),aSo=o(" (XLM-RoBERTa-XL model)"),nSo=l(),Fb=a("li"),Nfe=a("strong"),sSo=o("xlnet"),lSo=o(" \u2014 "),MG=a("a"),iSo=o("XLNetForSequenceClassification"),dSo=o(" (XLNet model)"),cSo=l(),Tb=a("li"),jfe=a("strong"),fSo=o("yoso"),mSo=o(" \u2014 "),EG=a("a"),gSo=o("YosoForSequenceClassification"),hSo=o(" (YOSO model)"),pSo=l(),Mb=a("p"),_So=o("The model is set in evaluation mode by default using "),Dfe=a("code"),uSo=o("model.eval()"),bSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),vSo=o("model.train()"),FSo=l(),F(Eb.$$.fragment),mqe=l(),Oi=a("h2"),Cb=a("a"),Ofe=a("span"),F(gy.$$.fragment),TSo=l(),Vfe=a("span"),MSo=o("AutoModelForMultipleChoice"),gqe=l(),Po=a("div"),F(hy.$$.fragment),ESo=l(),Vi=a("p"),CSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CG=a("a"),wSo=o("from_pretrained()"),ASo=o(" class method or the "),wG=a("a"),ySo=o("from_config()"),LSo=o(` class
method.`),xSo=l(),py=a("p"),$So=o("This class cannot be instantiated directly using "),Xfe=a("code"),kSo=o("__init__()"),SSo=o(" (throws an error)."),RSo=l(),dt=a("div"),F(_y.$$.fragment),PSo=l(),zfe=a("p"),BSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ISo=l(),Xi=a("p"),qSo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),NSo=o("not"),jSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),DSo=o("from_pretrained()"),GSo=o(" to load the model weights."),OSo=l(),F(wb.$$.fragment),VSo=l(),ro=a("div"),F(uy.$$.fragment),XSo=l(),Qfe=a("p"),zSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WSo=l(),Pa=a("p"),QSo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),HSo=o("model_type"),USo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),JSo=o("pretrained_model_name_or_path"),YSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),KSo=o("pretrained_model_name_or_path"),ZSo=o(":"),eRo=l(),Y=a("ul"),Ab=a("li"),Yfe=a("strong"),oRo=o("albert"),rRo=o(" \u2014 "),yG=a("a"),tRo=o("AlbertForMultipleChoice"),aRo=o(" (ALBERT model)"),nRo=l(),yb=a("li"),Kfe=a("strong"),sRo=o("bert"),lRo=o(" \u2014 "),LG=a("a"),iRo=o("BertForMultipleChoice"),dRo=o(" (BERT model)"),cRo=l(),Lb=a("li"),Zfe=a("strong"),fRo=o("big_bird"),mRo=o(" \u2014 "),xG=a("a"),gRo=o("BigBirdForMultipleChoice"),hRo=o(" (BigBird model)"),pRo=l(),xb=a("li"),eme=a("strong"),_Ro=o("camembert"),uRo=o(" \u2014 "),$G=a("a"),bRo=o("CamembertForMultipleChoice"),vRo=o(" (CamemBERT model)"),FRo=l(),$b=a("li"),ome=a("strong"),TRo=o("canine"),MRo=o(" \u2014 "),kG=a("a"),ERo=o("CanineForMultipleChoice"),CRo=o(" (Canine model)"),wRo=l(),kb=a("li"),rme=a("strong"),ARo=o("convbert"),yRo=o(" \u2014 "),SG=a("a"),LRo=o("ConvBertForMultipleChoice"),xRo=o(" (ConvBERT model)"),$Ro=l(),Sb=a("li"),tme=a("strong"),kRo=o("data2vec-text"),SRo=o(" \u2014 "),RG=a("a"),RRo=o("Data2VecTextForMultipleChoice"),PRo=o(" (Data2VecText model)"),BRo=l(),Rb=a("li"),ame=a("strong"),IRo=o("deberta-v2"),qRo=o(" \u2014 "),PG=a("a"),NRo=o("DebertaV2ForMultipleChoice"),jRo=o(" (DeBERTa-v2 model)"),DRo=l(),Pb=a("li"),nme=a("strong"),GRo=o("distilbert"),ORo=o(" \u2014 "),BG=a("a"),VRo=o("DistilBertForMultipleChoice"),XRo=o(" (DistilBERT model)"),zRo=l(),Bb=a("li"),sme=a("strong"),WRo=o("electra"),QRo=o(" \u2014 "),IG=a("a"),HRo=o("ElectraForMultipleChoice"),URo=o(" (ELECTRA model)"),JRo=l(),Ib=a("li"),lme=a("strong"),YRo=o("flaubert"),KRo=o(" \u2014 "),qG=a("a"),ZRo=o("FlaubertForMultipleChoice"),ePo=o(" (FlauBERT model)"),oPo=l(),qb=a("li"),ime=a("strong"),rPo=o("fnet"),tPo=o(" \u2014 "),NG=a("a"),aPo=o("FNetForMultipleChoice"),nPo=o(" (FNet model)"),sPo=l(),Nb=a("li"),dme=a("strong"),lPo=o("funnel"),iPo=o(" \u2014 "),jG=a("a"),dPo=o("FunnelForMultipleChoice"),cPo=o(" (Funnel Transformer model)"),fPo=l(),jb=a("li"),cme=a("strong"),mPo=o("ibert"),gPo=o(" \u2014 "),DG=a("a"),hPo=o("IBertForMultipleChoice"),pPo=o(" (I-BERT model)"),_Po=l(),Db=a("li"),fme=a("strong"),uPo=o("longformer"),bPo=o(" \u2014 "),GG=a("a"),vPo=o("LongformerForMultipleChoice"),FPo=o(" (Longformer model)"),TPo=l(),Gb=a("li"),mme=a("strong"),MPo=o("megatron-bert"),EPo=o(" \u2014 "),OG=a("a"),CPo=o("MegatronBertForMultipleChoice"),wPo=o(" (MegatronBert model)"),APo=l(),Ob=a("li"),gme=a("strong"),yPo=o("mobilebert"),LPo=o(" \u2014 "),VG=a("a"),xPo=o("MobileBertForMultipleChoice"),$Po=o(" (MobileBERT model)"),kPo=l(),Vb=a("li"),hme=a("strong"),SPo=o("mpnet"),RPo=o(" \u2014 "),XG=a("a"),PPo=o("MPNetForMultipleChoice"),BPo=o(" (MPNet model)"),IPo=l(),Xb=a("li"),pme=a("strong"),qPo=o("nystromformer"),NPo=o(" \u2014 "),zG=a("a"),jPo=o("NystromformerForMultipleChoice"),DPo=o(" (Nystromformer model)"),GPo=l(),zb=a("li"),_me=a("strong"),OPo=o("qdqbert"),VPo=o(" \u2014 "),WG=a("a"),XPo=o("QDQBertForMultipleChoice"),zPo=o(" (QDQBert model)"),WPo=l(),Wb=a("li"),ume=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),QG=a("a"),UPo=o("RemBertForMultipleChoice"),JPo=o(" (RemBERT model)"),YPo=l(),Qb=a("li"),bme=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),HG=a("a"),eBo=o("RobertaForMultipleChoice"),oBo=o(" (RoBERTa model)"),rBo=l(),Hb=a("li"),vme=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),UG=a("a"),nBo=o("RoFormerForMultipleChoice"),sBo=o(" (RoFormer model)"),lBo=l(),Ub=a("li"),Fme=a("strong"),iBo=o("squeezebert"),dBo=o(" \u2014 "),JG=a("a"),cBo=o("SqueezeBertForMultipleChoice"),fBo=o(" (SqueezeBERT model)"),mBo=l(),Jb=a("li"),Tme=a("strong"),gBo=o("xlm"),hBo=o(" \u2014 "),YG=a("a"),pBo=o("XLMForMultipleChoice"),_Bo=o(" (XLM model)"),uBo=l(),Yb=a("li"),Mme=a("strong"),bBo=o("xlm-roberta"),vBo=o(" \u2014 "),KG=a("a"),FBo=o("XLMRobertaForMultipleChoice"),TBo=o(" (XLM-RoBERTa model)"),MBo=l(),Kb=a("li"),Eme=a("strong"),EBo=o("xlm-roberta-xl"),CBo=o(" \u2014 "),ZG=a("a"),wBo=o("XLMRobertaXLForMultipleChoice"),ABo=o(" (XLM-RoBERTa-XL model)"),yBo=l(),Zb=a("li"),Cme=a("strong"),LBo=o("xlnet"),xBo=o(" \u2014 "),eO=a("a"),$Bo=o("XLNetForMultipleChoice"),kBo=o(" (XLNet model)"),SBo=l(),e5=a("li"),wme=a("strong"),RBo=o("yoso"),PBo=o(" \u2014 "),oO=a("a"),BBo=o("YosoForMultipleChoice"),IBo=o(" (YOSO model)"),qBo=l(),o5=a("p"),NBo=o("The model is set in evaluation mode by default using "),Ame=a("code"),jBo=o("model.eval()"),DBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),GBo=o("model.train()"),OBo=l(),F(r5.$$.fragment),hqe=l(),zi=a("h2"),t5=a("a"),Lme=a("span"),F(by.$$.fragment),VBo=l(),xme=a("span"),XBo=o("AutoModelForNextSentencePrediction"),pqe=l(),Bo=a("div"),F(vy.$$.fragment),zBo=l(),Wi=a("p"),WBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rO=a("a"),QBo=o("from_pretrained()"),HBo=o(" class method or the "),tO=a("a"),UBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),Fy=a("p"),KBo=o("This class cannot be instantiated directly using "),$me=a("code"),ZBo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),ct=a("div"),F(Ty.$$.fragment),rIo=l(),kme=a("p"),tIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aIo=l(),Qi=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(a5.$$.fragment),fIo=l(),to=a("div"),F(My.$$.fragment),mIo=l(),Rme=a("p"),gIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hIo=l(),Ba=a("p"),pIo=o("The model class to instantiate is selected based on the "),Pme=a("code"),_Io=o("model_type"),uIo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),Yr=a("ul"),n5=a("li"),qme=a("strong"),EIo=o("bert"),CIo=o(" \u2014 "),nO=a("a"),wIo=o("BertForNextSentencePrediction"),AIo=o(" (BERT model)"),yIo=l(),s5=a("li"),Nme=a("strong"),LIo=o("fnet"),xIo=o(" \u2014 "),sO=a("a"),$Io=o("FNetForNextSentencePrediction"),kIo=o(" (FNet model)"),SIo=l(),l5=a("li"),jme=a("strong"),RIo=o("megatron-bert"),PIo=o(" \u2014 "),lO=a("a"),BIo=o("MegatronBertForNextSentencePrediction"),IIo=o(" (MegatronBert model)"),qIo=l(),i5=a("li"),Dme=a("strong"),NIo=o("mobilebert"),jIo=o(" \u2014 "),iO=a("a"),DIo=o("MobileBertForNextSentencePrediction"),GIo=o(" (MobileBERT model)"),OIo=l(),d5=a("li"),Gme=a("strong"),VIo=o("qdqbert"),XIo=o(" \u2014 "),dO=a("a"),zIo=o("QDQBertForNextSentencePrediction"),WIo=o(" (QDQBert model)"),QIo=l(),c5=a("p"),HIo=o("The model is set in evaluation mode by default using "),Ome=a("code"),UIo=o("model.eval()"),JIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),YIo=o("model.train()"),KIo=l(),F(f5.$$.fragment),_qe=l(),Hi=a("h2"),m5=a("a"),Xme=a("span"),F(Ey.$$.fragment),ZIo=l(),zme=a("span"),eqo=o("AutoModelForTokenClassification"),uqe=l(),Io=a("div"),F(Cy.$$.fragment),oqo=l(),Ui=a("p"),rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cO=a("a"),tqo=o("from_pretrained()"),aqo=o(" class method or the "),fO=a("a"),nqo=o("from_config()"),sqo=o(` class
method.`),lqo=l(),wy=a("p"),iqo=o("This class cannot be instantiated directly using "),Wme=a("code"),dqo=o("__init__()"),cqo=o(" (throws an error)."),fqo=l(),ft=a("div"),F(Ay.$$.fragment),mqo=l(),Qme=a("p"),gqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hqo=l(),Ji=a("p"),pqo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),_qo=o("not"),uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),bqo=o("from_pretrained()"),vqo=o(" to load the model weights."),Fqo=l(),F(g5.$$.fragment),Tqo=l(),ao=a("div"),F(yy.$$.fragment),Mqo=l(),Ume=a("p"),Eqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cqo=l(),Ia=a("p"),wqo=o("The model class to instantiate is selected based on the "),Jme=a("code"),Aqo=o("model_type"),yqo=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),Lqo=o("pretrained_model_name_or_path"),xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),$qo=o("pretrained_model_name_or_path"),kqo=o(":"),Sqo=l(),U=a("ul"),h5=a("li"),Zme=a("strong"),Rqo=o("albert"),Pqo=o(" \u2014 "),gO=a("a"),Bqo=o("AlbertForTokenClassification"),Iqo=o(" (ALBERT model)"),qqo=l(),p5=a("li"),ege=a("strong"),Nqo=o("bert"),jqo=o(" \u2014 "),hO=a("a"),Dqo=o("BertForTokenClassification"),Gqo=o(" (BERT model)"),Oqo=l(),_5=a("li"),oge=a("strong"),Vqo=o("big_bird"),Xqo=o(" \u2014 "),pO=a("a"),zqo=o("BigBirdForTokenClassification"),Wqo=o(" (BigBird model)"),Qqo=l(),u5=a("li"),rge=a("strong"),Hqo=o("camembert"),Uqo=o(" \u2014 "),_O=a("a"),Jqo=o("CamembertForTokenClassification"),Yqo=o(" (CamemBERT model)"),Kqo=l(),b5=a("li"),tge=a("strong"),Zqo=o("canine"),eNo=o(" \u2014 "),uO=a("a"),oNo=o("CanineForTokenClassification"),rNo=o(" (Canine model)"),tNo=l(),v5=a("li"),age=a("strong"),aNo=o("convbert"),nNo=o(" \u2014 "),bO=a("a"),sNo=o("ConvBertForTokenClassification"),lNo=o(" (ConvBERT model)"),iNo=l(),F5=a("li"),nge=a("strong"),dNo=o("data2vec-text"),cNo=o(" \u2014 "),vO=a("a"),fNo=o("Data2VecTextForTokenClassification"),mNo=o(" (Data2VecText model)"),gNo=l(),T5=a("li"),sge=a("strong"),hNo=o("deberta"),pNo=o(" \u2014 "),FO=a("a"),_No=o("DebertaForTokenClassification"),uNo=o(" (DeBERTa model)"),bNo=l(),M5=a("li"),lge=a("strong"),vNo=o("deberta-v2"),FNo=o(" \u2014 "),TO=a("a"),TNo=o("DebertaV2ForTokenClassification"),MNo=o(" (DeBERTa-v2 model)"),ENo=l(),E5=a("li"),ige=a("strong"),CNo=o("distilbert"),wNo=o(" \u2014 "),MO=a("a"),ANo=o("DistilBertForTokenClassification"),yNo=o(" (DistilBERT model)"),LNo=l(),C5=a("li"),dge=a("strong"),xNo=o("electra"),$No=o(" \u2014 "),EO=a("a"),kNo=o("ElectraForTokenClassification"),SNo=o(" (ELECTRA model)"),RNo=l(),w5=a("li"),cge=a("strong"),PNo=o("flaubert"),BNo=o(" \u2014 "),CO=a("a"),INo=o("FlaubertForTokenClassification"),qNo=o(" (FlauBERT model)"),NNo=l(),A5=a("li"),fge=a("strong"),jNo=o("fnet"),DNo=o(" \u2014 "),wO=a("a"),GNo=o("FNetForTokenClassification"),ONo=o(" (FNet model)"),VNo=l(),y5=a("li"),mge=a("strong"),XNo=o("funnel"),zNo=o(" \u2014 "),AO=a("a"),WNo=o("FunnelForTokenClassification"),QNo=o(" (Funnel Transformer model)"),HNo=l(),L5=a("li"),gge=a("strong"),UNo=o("gpt2"),JNo=o(" \u2014 "),yO=a("a"),YNo=o("GPT2ForTokenClassification"),KNo=o(" (OpenAI GPT-2 model)"),ZNo=l(),x5=a("li"),hge=a("strong"),ejo=o("ibert"),ojo=o(" \u2014 "),LO=a("a"),rjo=o("IBertForTokenClassification"),tjo=o(" (I-BERT model)"),ajo=l(),$5=a("li"),pge=a("strong"),njo=o("layoutlm"),sjo=o(" \u2014 "),xO=a("a"),ljo=o("LayoutLMForTokenClassification"),ijo=o(" (LayoutLM model)"),djo=l(),k5=a("li"),_ge=a("strong"),cjo=o("layoutlmv2"),fjo=o(" \u2014 "),$O=a("a"),mjo=o("LayoutLMv2ForTokenClassification"),gjo=o(" (LayoutLMv2 model)"),hjo=l(),S5=a("li"),uge=a("strong"),pjo=o("longformer"),_jo=o(" \u2014 "),kO=a("a"),ujo=o("LongformerForTokenClassification"),bjo=o(" (Longformer model)"),vjo=l(),R5=a("li"),bge=a("strong"),Fjo=o("megatron-bert"),Tjo=o(" \u2014 "),SO=a("a"),Mjo=o("MegatronBertForTokenClassification"),Ejo=o(" (MegatronBert model)"),Cjo=l(),P5=a("li"),vge=a("strong"),wjo=o("mobilebert"),Ajo=o(" \u2014 "),RO=a("a"),yjo=o("MobileBertForTokenClassification"),Ljo=o(" (MobileBERT model)"),xjo=l(),B5=a("li"),Fge=a("strong"),$jo=o("mpnet"),kjo=o(" \u2014 "),PO=a("a"),Sjo=o("MPNetForTokenClassification"),Rjo=o(" (MPNet model)"),Pjo=l(),I5=a("li"),Tge=a("strong"),Bjo=o("nystromformer"),Ijo=o(" \u2014 "),BO=a("a"),qjo=o("NystromformerForTokenClassification"),Njo=o(" (Nystromformer model)"),jjo=l(),q5=a("li"),Mge=a("strong"),Djo=o("qdqbert"),Gjo=o(" \u2014 "),IO=a("a"),Ojo=o("QDQBertForTokenClassification"),Vjo=o(" (QDQBert model)"),Xjo=l(),N5=a("li"),Ege=a("strong"),zjo=o("rembert"),Wjo=o(" \u2014 "),qO=a("a"),Qjo=o("RemBertForTokenClassification"),Hjo=o(" (RemBERT model)"),Ujo=l(),j5=a("li"),Cge=a("strong"),Jjo=o("roberta"),Yjo=o(" \u2014 "),NO=a("a"),Kjo=o("RobertaForTokenClassification"),Zjo=o(" (RoBERTa model)"),eDo=l(),D5=a("li"),wge=a("strong"),oDo=o("roformer"),rDo=o(" \u2014 "),jO=a("a"),tDo=o("RoFormerForTokenClassification"),aDo=o(" (RoFormer model)"),nDo=l(),G5=a("li"),Age=a("strong"),sDo=o("squeezebert"),lDo=o(" \u2014 "),DO=a("a"),iDo=o("SqueezeBertForTokenClassification"),dDo=o(" (SqueezeBERT model)"),cDo=l(),O5=a("li"),yge=a("strong"),fDo=o("xlm"),mDo=o(" \u2014 "),GO=a("a"),gDo=o("XLMForTokenClassification"),hDo=o(" (XLM model)"),pDo=l(),V5=a("li"),Lge=a("strong"),_Do=o("xlm-roberta"),uDo=o(" \u2014 "),OO=a("a"),bDo=o("XLMRobertaForTokenClassification"),vDo=o(" (XLM-RoBERTa model)"),FDo=l(),X5=a("li"),xge=a("strong"),TDo=o("xlm-roberta-xl"),MDo=o(" \u2014 "),VO=a("a"),EDo=o("XLMRobertaXLForTokenClassification"),CDo=o(" (XLM-RoBERTa-XL model)"),wDo=l(),z5=a("li"),$ge=a("strong"),ADo=o("xlnet"),yDo=o(" \u2014 "),XO=a("a"),LDo=o("XLNetForTokenClassification"),xDo=o(" (XLNet model)"),$Do=l(),W5=a("li"),kge=a("strong"),kDo=o("yoso"),SDo=o(" \u2014 "),zO=a("a"),RDo=o("YosoForTokenClassification"),PDo=o(" (YOSO model)"),BDo=l(),Q5=a("p"),IDo=o("The model is set in evaluation mode by default using "),Sge=a("code"),qDo=o("model.eval()"),NDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),jDo=o("model.train()"),DDo=l(),F(H5.$$.fragment),bqe=l(),Yi=a("h2"),U5=a("a"),Pge=a("span"),F(Ly.$$.fragment),GDo=l(),Bge=a("span"),ODo=o("AutoModelForQuestionAnswering"),vqe=l(),qo=a("div"),F(xy.$$.fragment),VDo=l(),Ki=a("p"),XDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WO=a("a"),zDo=o("from_pretrained()"),WDo=o(" class method or the "),QO=a("a"),QDo=o("from_config()"),HDo=o(` class
method.`),UDo=l(),$y=a("p"),JDo=o("This class cannot be instantiated directly using "),Ige=a("code"),YDo=o("__init__()"),KDo=o(" (throws an error)."),ZDo=l(),mt=a("div"),F(ky.$$.fragment),eGo=l(),qge=a("p"),oGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rGo=l(),Zi=a("p"),tGo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),aGo=o("not"),nGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),sGo=o("from_pretrained()"),lGo=o(" to load the model weights."),iGo=l(),F(J5.$$.fragment),dGo=l(),no=a("div"),F(Sy.$$.fragment),cGo=l(),jge=a("p"),fGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mGo=l(),qa=a("p"),gGo=o("The model class to instantiate is selected based on the "),Dge=a("code"),hGo=o("model_type"),pGo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(":"),FGo=l(),V=a("ul"),Y5=a("li"),Vge=a("strong"),TGo=o("albert"),MGo=o(" \u2014 "),UO=a("a"),EGo=o("AlbertForQuestionAnswering"),CGo=o(" (ALBERT model)"),wGo=l(),K5=a("li"),Xge=a("strong"),AGo=o("bart"),yGo=o(" \u2014 "),JO=a("a"),LGo=o("BartForQuestionAnswering"),xGo=o(" (BART model)"),$Go=l(),Z5=a("li"),zge=a("strong"),kGo=o("bert"),SGo=o(" \u2014 "),YO=a("a"),RGo=o("BertForQuestionAnswering"),PGo=o(" (BERT model)"),BGo=l(),ev=a("li"),Wge=a("strong"),IGo=o("big_bird"),qGo=o(" \u2014 "),KO=a("a"),NGo=o("BigBirdForQuestionAnswering"),jGo=o(" (BigBird model)"),DGo=l(),ov=a("li"),Qge=a("strong"),GGo=o("bigbird_pegasus"),OGo=o(" \u2014 "),ZO=a("a"),VGo=o("BigBirdPegasusForQuestionAnswering"),XGo=o(" (BigBirdPegasus model)"),zGo=l(),rv=a("li"),Hge=a("strong"),WGo=o("camembert"),QGo=o(" \u2014 "),eV=a("a"),HGo=o("CamembertForQuestionAnswering"),UGo=o(" (CamemBERT model)"),JGo=l(),tv=a("li"),Uge=a("strong"),YGo=o("canine"),KGo=o(" \u2014 "),oV=a("a"),ZGo=o("CanineForQuestionAnswering"),eOo=o(" (Canine model)"),oOo=l(),av=a("li"),Jge=a("strong"),rOo=o("convbert"),tOo=o(" \u2014 "),rV=a("a"),aOo=o("ConvBertForQuestionAnswering"),nOo=o(" (ConvBERT model)"),sOo=l(),nv=a("li"),Yge=a("strong"),lOo=o("data2vec-text"),iOo=o(" \u2014 "),tV=a("a"),dOo=o("Data2VecTextForQuestionAnswering"),cOo=o(" (Data2VecText model)"),fOo=l(),sv=a("li"),Kge=a("strong"),mOo=o("deberta"),gOo=o(" \u2014 "),aV=a("a"),hOo=o("DebertaForQuestionAnswering"),pOo=o(" (DeBERTa model)"),_Oo=l(),lv=a("li"),Zge=a("strong"),uOo=o("deberta-v2"),bOo=o(" \u2014 "),nV=a("a"),vOo=o("DebertaV2ForQuestionAnswering"),FOo=o(" (DeBERTa-v2 model)"),TOo=l(),iv=a("li"),ehe=a("strong"),MOo=o("distilbert"),EOo=o(" \u2014 "),sV=a("a"),COo=o("DistilBertForQuestionAnswering"),wOo=o(" (DistilBERT model)"),AOo=l(),dv=a("li"),ohe=a("strong"),yOo=o("electra"),LOo=o(" \u2014 "),lV=a("a"),xOo=o("ElectraForQuestionAnswering"),$Oo=o(" (ELECTRA model)"),kOo=l(),cv=a("li"),rhe=a("strong"),SOo=o("flaubert"),ROo=o(" \u2014 "),iV=a("a"),POo=o("FlaubertForQuestionAnsweringSimple"),BOo=o(" (FlauBERT model)"),IOo=l(),fv=a("li"),the=a("strong"),qOo=o("fnet"),NOo=o(" \u2014 "),dV=a("a"),jOo=o("FNetForQuestionAnswering"),DOo=o(" (FNet model)"),GOo=l(),mv=a("li"),ahe=a("strong"),OOo=o("funnel"),VOo=o(" \u2014 "),cV=a("a"),XOo=o("FunnelForQuestionAnswering"),zOo=o(" (Funnel Transformer model)"),WOo=l(),gv=a("li"),nhe=a("strong"),QOo=o("gptj"),HOo=o(" \u2014 "),fV=a("a"),UOo=o("GPTJForQuestionAnswering"),JOo=o(" (GPT-J model)"),YOo=l(),hv=a("li"),she=a("strong"),KOo=o("ibert"),ZOo=o(" \u2014 "),mV=a("a"),eVo=o("IBertForQuestionAnswering"),oVo=o(" (I-BERT model)"),rVo=l(),pv=a("li"),lhe=a("strong"),tVo=o("layoutlmv2"),aVo=o(" \u2014 "),gV=a("a"),nVo=o("LayoutLMv2ForQuestionAnswering"),sVo=o(" (LayoutLMv2 model)"),lVo=l(),_v=a("li"),ihe=a("strong"),iVo=o("led"),dVo=o(" \u2014 "),hV=a("a"),cVo=o("LEDForQuestionAnswering"),fVo=o(" (LED model)"),mVo=l(),uv=a("li"),dhe=a("strong"),gVo=o("longformer"),hVo=o(" \u2014 "),pV=a("a"),pVo=o("LongformerForQuestionAnswering"),_Vo=o(" (Longformer model)"),uVo=l(),bv=a("li"),che=a("strong"),bVo=o("lxmert"),vVo=o(" \u2014 "),_V=a("a"),FVo=o("LxmertForQuestionAnswering"),TVo=o(" (LXMERT model)"),MVo=l(),vv=a("li"),fhe=a("strong"),EVo=o("mbart"),CVo=o(" \u2014 "),uV=a("a"),wVo=o("MBartForQuestionAnswering"),AVo=o(" (mBART model)"),yVo=l(),Fv=a("li"),mhe=a("strong"),LVo=o("megatron-bert"),xVo=o(" \u2014 "),bV=a("a"),$Vo=o("MegatronBertForQuestionAnswering"),kVo=o(" (MegatronBert model)"),SVo=l(),Tv=a("li"),ghe=a("strong"),RVo=o("mobilebert"),PVo=o(" \u2014 "),vV=a("a"),BVo=o("MobileBertForQuestionAnswering"),IVo=o(" (MobileBERT model)"),qVo=l(),Mv=a("li"),hhe=a("strong"),NVo=o("mpnet"),jVo=o(" \u2014 "),FV=a("a"),DVo=o("MPNetForQuestionAnswering"),GVo=o(" (MPNet model)"),OVo=l(),Ev=a("li"),phe=a("strong"),VVo=o("nystromformer"),XVo=o(" \u2014 "),TV=a("a"),zVo=o("NystromformerForQuestionAnswering"),WVo=o(" (Nystromformer model)"),QVo=l(),Cv=a("li"),_he=a("strong"),HVo=o("qdqbert"),UVo=o(" \u2014 "),MV=a("a"),JVo=o("QDQBertForQuestionAnswering"),YVo=o(" (QDQBert model)"),KVo=l(),wv=a("li"),uhe=a("strong"),ZVo=o("reformer"),eXo=o(" \u2014 "),EV=a("a"),oXo=o("ReformerForQuestionAnswering"),rXo=o(" (Reformer model)"),tXo=l(),Av=a("li"),bhe=a("strong"),aXo=o("rembert"),nXo=o(" \u2014 "),CV=a("a"),sXo=o("RemBertForQuestionAnswering"),lXo=o(" (RemBERT model)"),iXo=l(),yv=a("li"),vhe=a("strong"),dXo=o("roberta"),cXo=o(" \u2014 "),wV=a("a"),fXo=o("RobertaForQuestionAnswering"),mXo=o(" (RoBERTa model)"),gXo=l(),Lv=a("li"),Fhe=a("strong"),hXo=o("roformer"),pXo=o(" \u2014 "),AV=a("a"),_Xo=o("RoFormerForQuestionAnswering"),uXo=o(" (RoFormer model)"),bXo=l(),xv=a("li"),The=a("strong"),vXo=o("splinter"),FXo=o(" \u2014 "),yV=a("a"),TXo=o("SplinterForQuestionAnswering"),MXo=o(" (Splinter model)"),EXo=l(),$v=a("li"),Mhe=a("strong"),CXo=o("squeezebert"),wXo=o(" \u2014 "),LV=a("a"),AXo=o("SqueezeBertForQuestionAnswering"),yXo=o(" (SqueezeBERT model)"),LXo=l(),kv=a("li"),Ehe=a("strong"),xXo=o("xlm"),$Xo=o(" \u2014 "),xV=a("a"),kXo=o("XLMForQuestionAnsweringSimple"),SXo=o(" (XLM model)"),RXo=l(),Sv=a("li"),Che=a("strong"),PXo=o("xlm-roberta"),BXo=o(" \u2014 "),$V=a("a"),IXo=o("XLMRobertaForQuestionAnswering"),qXo=o(" (XLM-RoBERTa model)"),NXo=l(),Rv=a("li"),whe=a("strong"),jXo=o("xlm-roberta-xl"),DXo=o(" \u2014 "),kV=a("a"),GXo=o("XLMRobertaXLForQuestionAnswering"),OXo=o(" (XLM-RoBERTa-XL model)"),VXo=l(),Pv=a("li"),Ahe=a("strong"),XXo=o("xlnet"),zXo=o(" \u2014 "),SV=a("a"),WXo=o("XLNetForQuestionAnsweringSimple"),QXo=o(" (XLNet model)"),HXo=l(),Bv=a("li"),yhe=a("strong"),UXo=o("yoso"),JXo=o(" \u2014 "),RV=a("a"),YXo=o("YosoForQuestionAnswering"),KXo=o(" (YOSO model)"),ZXo=l(),Iv=a("p"),ezo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),ozo=o("model.eval()"),rzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),tzo=o("model.train()"),azo=l(),F(qv.$$.fragment),Fqe=l(),ed=a("h2"),Nv=a("a"),$he=a("span"),F(Ry.$$.fragment),nzo=l(),khe=a("span"),szo=o("AutoModelForTableQuestionAnswering"),Tqe=l(),No=a("div"),F(Py.$$.fragment),lzo=l(),od=a("p"),izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PV=a("a"),dzo=o("from_pretrained()"),czo=o(" class method or the "),BV=a("a"),fzo=o("from_config()"),mzo=o(` class
method.`),gzo=l(),By=a("p"),hzo=o("This class cannot be instantiated directly using "),She=a("code"),pzo=o("__init__()"),_zo=o(" (throws an error)."),uzo=l(),gt=a("div"),F(Iy.$$.fragment),bzo=l(),Rhe=a("p"),vzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fzo=l(),rd=a("p"),Tzo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Czo=o("from_pretrained()"),wzo=o(" to load the model weights."),Azo=l(),F(jv.$$.fragment),yzo=l(),so=a("div"),F(qy.$$.fragment),Lzo=l(),Bhe=a("p"),xzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$zo=l(),Na=a("p"),kzo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),Szo=o("model_type"),Rzo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),Pzo=o("pretrained_model_name_or_path"),Bzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),Izo=o("pretrained_model_name_or_path"),qzo=o(":"),Nzo=l(),jhe=a("ul"),Dv=a("li"),Dhe=a("strong"),jzo=o("tapas"),Dzo=o(" \u2014 "),qV=a("a"),Gzo=o("TapasForQuestionAnswering"),Ozo=o(" (TAPAS model)"),Vzo=l(),Gv=a("p"),Xzo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),Qzo=o("model.train()"),Hzo=l(),F(Ov.$$.fragment),Mqe=l(),td=a("h2"),Vv=a("a"),Vhe=a("span"),F(Ny.$$.fragment),Uzo=l(),Xhe=a("span"),Jzo=o("AutoModelForImageClassification"),Eqe=l(),jo=a("div"),F(jy.$$.fragment),Yzo=l(),ad=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NV=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),jV=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),Dy=a("p"),aWo=o("This class cannot be instantiated directly using "),zhe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),ht=a("div"),F(Gy.$$.fragment),iWo=l(),Whe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cWo=l(),nd=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),F(Xv.$$.fragment),uWo=l(),lo=a("div"),F(Oy.$$.fragment),bWo=l(),Hhe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FWo=l(),ja=a("p"),TWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(":"),LWo=l(),Fe=a("ul"),zv=a("li"),Khe=a("strong"),xWo=o("beit"),$Wo=o(" \u2014 "),GV=a("a"),kWo=o("BeitForImageClassification"),SWo=o(" (BEiT model)"),RWo=l(),Wv=a("li"),Zhe=a("strong"),PWo=o("convnext"),BWo=o(" \u2014 "),OV=a("a"),IWo=o("ConvNextForImageClassification"),qWo=o(" (ConvNext model)"),NWo=l(),Qv=a("li"),epe=a("strong"),jWo=o("cvt"),DWo=o(" \u2014 "),VV=a("a"),GWo=o("CvtForImageClassification"),OWo=o(" (CvT model)"),VWo=l(),Hv=a("li"),ope=a("strong"),XWo=o("data2vec-vision"),zWo=o(" \u2014 "),XV=a("a"),WWo=o("Data2VecVisionForImageClassification"),QWo=o(" (Data2VecVision model)"),HWo=l(),Ps=a("li"),rpe=a("strong"),UWo=o("deit"),JWo=o(" \u2014 "),zV=a("a"),YWo=o("DeiTForImageClassification"),KWo=o(" or "),WV=a("a"),ZWo=o("DeiTForImageClassificationWithTeacher"),eQo=o(" (DeiT model)"),oQo=l(),Uv=a("li"),tpe=a("strong"),rQo=o("imagegpt"),tQo=o(" \u2014 "),QV=a("a"),aQo=o("ImageGPTForImageClassification"),nQo=o(" (ImageGPT model)"),sQo=l(),pt=a("li"),ape=a("strong"),lQo=o("perceiver"),iQo=o(" \u2014 "),HV=a("a"),dQo=o("PerceiverForImageClassificationLearned"),cQo=o(" or "),UV=a("a"),fQo=o("PerceiverForImageClassificationFourier"),mQo=o(" or "),JV=a("a"),gQo=o("PerceiverForImageClassificationConvProcessing"),hQo=o(" (Perceiver model)"),pQo=l(),Jv=a("li"),npe=a("strong"),_Qo=o("poolformer"),uQo=o(" \u2014 "),YV=a("a"),bQo=o("PoolFormerForImageClassification"),vQo=o(" (PoolFormer model)"),FQo=l(),Yv=a("li"),spe=a("strong"),TQo=o("regnet"),MQo=o(" \u2014 "),KV=a("a"),EQo=o("RegNetForImageClassification"),CQo=o(" (RegNet model)"),wQo=l(),Kv=a("li"),lpe=a("strong"),AQo=o("resnet"),yQo=o(" \u2014 "),ZV=a("a"),LQo=o("ResNetForImageClassification"),xQo=o(" (ResNet model)"),$Qo=l(),Zv=a("li"),ipe=a("strong"),kQo=o("segformer"),SQo=o(" \u2014 "),eX=a("a"),RQo=o("SegformerForImageClassification"),PQo=o(" (SegFormer model)"),BQo=l(),e3=a("li"),dpe=a("strong"),IQo=o("swin"),qQo=o(" \u2014 "),oX=a("a"),NQo=o("SwinForImageClassification"),jQo=o(" (Swin model)"),DQo=l(),o3=a("li"),cpe=a("strong"),GQo=o("van"),OQo=o(" \u2014 "),rX=a("a"),VQo=o("VanForImageClassification"),XQo=o(" (VAN model)"),zQo=l(),r3=a("li"),fpe=a("strong"),WQo=o("vit"),QQo=o(" \u2014 "),tX=a("a"),HQo=o("ViTForImageClassification"),UQo=o(" (ViT model)"),JQo=l(),t3=a("p"),YQo=o("The model is set in evaluation mode by default using "),mpe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),eHo=o("model.train()"),oHo=l(),F(a3.$$.fragment),Cqe=l(),sd=a("h2"),n3=a("a"),hpe=a("span"),F(Vy.$$.fragment),rHo=l(),ppe=a("span"),tHo=o("AutoModelForVision2Seq"),wqe=l(),Do=a("div"),F(Xy.$$.fragment),aHo=l(),ld=a("p"),nHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=a("a"),sHo=o("from_pretrained()"),lHo=o(" class method or the "),nX=a("a"),iHo=o("from_config()"),dHo=o(` class
method.`),cHo=l(),zy=a("p"),fHo=o("This class cannot be instantiated directly using "),_pe=a("code"),mHo=o("__init__()"),gHo=o(" (throws an error)."),hHo=l(),_t=a("div"),F(Wy.$$.fragment),pHo=l(),upe=a("p"),_Ho=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uHo=l(),id=a("p"),bHo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),vHo=o("not"),FHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),THo=o("from_pretrained()"),MHo=o(" to load the model weights."),EHo=l(),F(s3.$$.fragment),CHo=l(),io=a("div"),F(Qy.$$.fragment),wHo=l(),vpe=a("p"),AHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yHo=l(),Da=a("p"),LHo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),xHo=o("model_type"),$Ho=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),kHo=o("pretrained_model_name_or_path"),SHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),RHo=o("pretrained_model_name_or_path"),PHo=o(":"),BHo=l(),Epe=a("ul"),l3=a("li"),Cpe=a("strong"),IHo=o("vision-encoder-decoder"),qHo=o(" \u2014 "),lX=a("a"),NHo=o("VisionEncoderDecoderModel"),jHo=o(" (Vision Encoder decoder model)"),DHo=l(),i3=a("p"),GHo=o("The model is set in evaluation mode by default using "),wpe=a("code"),OHo=o("model.eval()"),VHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),XHo=o("model.train()"),zHo=l(),F(d3.$$.fragment),Aqe=l(),dd=a("h2"),c3=a("a"),ype=a("span"),F(Hy.$$.fragment),WHo=l(),Lpe=a("span"),QHo=o("AutoModelForAudioClassification"),yqe=l(),Go=a("div"),F(Uy.$$.fragment),HHo=l(),cd=a("p"),UHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=a("a"),JHo=o("from_pretrained()"),YHo=o(" class method or the "),dX=a("a"),KHo=o("from_config()"),ZHo=o(` class
method.`),eUo=l(),Jy=a("p"),oUo=o("This class cannot be instantiated directly using "),xpe=a("code"),rUo=o("__init__()"),tUo=o(" (throws an error)."),aUo=l(),ut=a("div"),F(Yy.$$.fragment),nUo=l(),$pe=a("p"),sUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lUo=l(),fd=a("p"),iUo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),dUo=o("not"),cUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),fUo=o("from_pretrained()"),mUo=o(" to load the model weights."),gUo=l(),F(f3.$$.fragment),hUo=l(),co=a("div"),F(Ky.$$.fragment),pUo=l(),Spe=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uUo=l(),Ga=a("p"),bUo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),vUo=o("model_type"),FUo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),TUo=o("pretrained_model_name_or_path"),MUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(":"),wUo=l(),ke=a("ul"),m3=a("li"),Ipe=a("strong"),AUo=o("data2vec-audio"),yUo=o(" \u2014 "),fX=a("a"),LUo=o("Data2VecAudioForSequenceClassification"),xUo=o(" (Data2VecAudio model)"),$Uo=l(),g3=a("li"),qpe=a("strong"),kUo=o("hubert"),SUo=o(" \u2014 "),mX=a("a"),RUo=o("HubertForSequenceClassification"),PUo=o(" (Hubert model)"),BUo=l(),h3=a("li"),Npe=a("strong"),IUo=o("sew"),qUo=o(" \u2014 "),gX=a("a"),NUo=o("SEWForSequenceClassification"),jUo=o(" (SEW model)"),DUo=l(),p3=a("li"),jpe=a("strong"),GUo=o("sew-d"),OUo=o(" \u2014 "),hX=a("a"),VUo=o("SEWDForSequenceClassification"),XUo=o(" (SEW-D model)"),zUo=l(),_3=a("li"),Dpe=a("strong"),WUo=o("unispeech"),QUo=o(" \u2014 "),pX=a("a"),HUo=o("UniSpeechForSequenceClassification"),UUo=o(" (UniSpeech model)"),JUo=l(),u3=a("li"),Gpe=a("strong"),YUo=o("unispeech-sat"),KUo=o(" \u2014 "),_X=a("a"),ZUo=o("UniSpeechSatForSequenceClassification"),eJo=o(" (UniSpeechSat model)"),oJo=l(),b3=a("li"),Ope=a("strong"),rJo=o("wav2vec2"),tJo=o(" \u2014 "),uX=a("a"),aJo=o("Wav2Vec2ForSequenceClassification"),nJo=o(" (Wav2Vec2 model)"),sJo=l(),v3=a("li"),Vpe=a("strong"),lJo=o("wav2vec2-conformer"),iJo=o(" \u2014 "),bX=a("a"),dJo=o("Wav2Vec2ConformerForSequenceClassification"),cJo=o(" (Wav2Vec2-Conformer model)"),fJo=l(),F3=a("li"),Xpe=a("strong"),mJo=o("wavlm"),gJo=o(" \u2014 "),vX=a("a"),hJo=o("WavLMForSequenceClassification"),pJo=o(" (WavLM model)"),_Jo=l(),T3=a("p"),uJo=o("The model is set in evaluation mode by default using "),zpe=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),FJo=o("model.train()"),TJo=l(),F(M3.$$.fragment),Lqe=l(),md=a("h2"),E3=a("a"),Qpe=a("span"),F(Zy.$$.fragment),MJo=l(),Hpe=a("span"),EJo=o("AutoModelForAudioFrameClassification"),xqe=l(),Oo=a("div"),F(eL.$$.fragment),CJo=l(),gd=a("p"),wJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=a("a"),AJo=o("from_pretrained()"),yJo=o(" class method or the "),TX=a("a"),LJo=o("from_config()"),xJo=o(` class
method.`),$Jo=l(),oL=a("p"),kJo=o("This class cannot be instantiated directly using "),Upe=a("code"),SJo=o("__init__()"),RJo=o(" (throws an error)."),PJo=l(),bt=a("div"),F(rL.$$.fragment),BJo=l(),Jpe=a("p"),IJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qJo=l(),hd=a("p"),NJo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),jJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),GJo=o("from_pretrained()"),OJo=o(" to load the model weights."),VJo=l(),F(C3.$$.fragment),XJo=l(),fo=a("div"),F(tL.$$.fragment),zJo=l(),Kpe=a("p"),WJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QJo=l(),Oa=a("p"),HJo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),Kr=a("ul"),w3=a("li"),r_e=a("strong"),rYo=o("data2vec-audio"),tYo=o(" \u2014 "),EX=a("a"),aYo=o("Data2VecAudioForAudioFrameClassification"),nYo=o(" (Data2VecAudio model)"),sYo=l(),A3=a("li"),t_e=a("strong"),lYo=o("unispeech-sat"),iYo=o(" \u2014 "),CX=a("a"),dYo=o("UniSpeechSatForAudioFrameClassification"),cYo=o(" (UniSpeechSat model)"),fYo=l(),y3=a("li"),a_e=a("strong"),mYo=o("wav2vec2"),gYo=o(" \u2014 "),wX=a("a"),hYo=o("Wav2Vec2ForAudioFrameClassification"),pYo=o(" (Wav2Vec2 model)"),_Yo=l(),L3=a("li"),n_e=a("strong"),uYo=o("wav2vec2-conformer"),bYo=o(" \u2014 "),AX=a("a"),vYo=o("Wav2Vec2ConformerForAudioFrameClassification"),FYo=o(" (Wav2Vec2-Conformer model)"),TYo=l(),x3=a("li"),s_e=a("strong"),MYo=o("wavlm"),EYo=o(" \u2014 "),yX=a("a"),CYo=o("WavLMForAudioFrameClassification"),wYo=o(" (WavLM model)"),AYo=l(),$3=a("p"),yYo=o("The model is set in evaluation mode by default using "),l_e=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),$Yo=o("model.train()"),kYo=l(),F(k3.$$.fragment),$qe=l(),pd=a("h2"),S3=a("a"),d_e=a("span"),F(aL.$$.fragment),SYo=l(),c_e=a("span"),RYo=o("AutoModelForCTC"),kqe=l(),Vo=a("div"),F(nL.$$.fragment),PYo=l(),_d=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=a("a"),IYo=o("from_pretrained()"),qYo=o(" class method or the "),xX=a("a"),NYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),sL=a("p"),GYo=o("This class cannot be instantiated directly using "),f_e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),vt=a("div"),F(lL.$$.fragment),zYo=l(),m_e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),QYo=l(),ud=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(R3.$$.fragment),eKo=l(),mo=a("div"),F(iL.$$.fragment),oKo=l(),h_e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tKo=l(),Va=a("p"),aKo=o("The model class to instantiate is selected based on the "),p_e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Se=a("ul"),P3=a("li"),b_e=a("strong"),mKo=o("data2vec-audio"),gKo=o(" \u2014 "),kX=a("a"),hKo=o("Data2VecAudioForCTC"),pKo=o(" (Data2VecAudio model)"),_Ko=l(),B3=a("li"),v_e=a("strong"),uKo=o("hubert"),bKo=o(" \u2014 "),SX=a("a"),vKo=o("HubertForCTC"),FKo=o(" (Hubert model)"),TKo=l(),I3=a("li"),F_e=a("strong"),MKo=o("sew"),EKo=o(" \u2014 "),RX=a("a"),CKo=o("SEWForCTC"),wKo=o(" (SEW model)"),AKo=l(),q3=a("li"),T_e=a("strong"),yKo=o("sew-d"),LKo=o(" \u2014 "),PX=a("a"),xKo=o("SEWDForCTC"),$Ko=o(" (SEW-D model)"),kKo=l(),N3=a("li"),M_e=a("strong"),SKo=o("unispeech"),RKo=o(" \u2014 "),BX=a("a"),PKo=o("UniSpeechForCTC"),BKo=o(" (UniSpeech model)"),IKo=l(),j3=a("li"),E_e=a("strong"),qKo=o("unispeech-sat"),NKo=o(" \u2014 "),IX=a("a"),jKo=o("UniSpeechSatForCTC"),DKo=o(" (UniSpeechSat model)"),GKo=l(),D3=a("li"),C_e=a("strong"),OKo=o("wav2vec2"),VKo=o(" \u2014 "),qX=a("a"),XKo=o("Wav2Vec2ForCTC"),zKo=o(" (Wav2Vec2 model)"),WKo=l(),G3=a("li"),w_e=a("strong"),QKo=o("wav2vec2-conformer"),HKo=o(" \u2014 "),NX=a("a"),UKo=o("Wav2Vec2ConformerForCTC"),JKo=o(" (Wav2Vec2-Conformer model)"),YKo=l(),O3=a("li"),A_e=a("strong"),KKo=o("wavlm"),ZKo=o(" \u2014 "),jX=a("a"),eZo=o("WavLMForCTC"),oZo=o(" (WavLM model)"),rZo=l(),V3=a("p"),tZo=o("The model is set in evaluation mode by default using "),y_e=a("code"),aZo=o("model.eval()"),nZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),sZo=o("model.train()"),lZo=l(),F(X3.$$.fragment),Sqe=l(),bd=a("h2"),z3=a("a"),x_e=a("span"),F(dL.$$.fragment),iZo=l(),$_e=a("span"),dZo=o("AutoModelForSpeechSeq2Seq"),Rqe=l(),Xo=a("div"),F(cL.$$.fragment),cZo=l(),vd=a("p"),fZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=a("a"),mZo=o("from_pretrained()"),gZo=o(" class method or the "),GX=a("a"),hZo=o("from_config()"),pZo=o(` class
method.`),_Zo=l(),fL=a("p"),uZo=o("This class cannot be instantiated directly using "),k_e=a("code"),bZo=o("__init__()"),vZo=o(" (throws an error)."),FZo=l(),Ft=a("div"),F(mL.$$.fragment),TZo=l(),S_e=a("p"),MZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EZo=l(),Fd=a("p"),CZo=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),wZo=o("not"),AZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),yZo=o("from_pretrained()"),LZo=o(" to load the model weights."),xZo=l(),F(W3.$$.fragment),$Zo=l(),go=a("div"),F(gL.$$.fragment),kZo=l(),P_e=a("p"),SZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RZo=l(),Xa=a("p"),PZo=o("The model class to instantiate is selected based on the "),B_e=a("code"),BZo=o("model_type"),IZo=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),qZo=o("pretrained_model_name_or_path"),NZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),GZo=l(),hL=a("ul"),Q3=a("li"),N_e=a("strong"),OZo=o("speech-encoder-decoder"),VZo=o(" \u2014 "),VX=a("a"),XZo=o("SpeechEncoderDecoderModel"),zZo=o(" (Speech Encoder decoder model)"),WZo=l(),H3=a("li"),j_e=a("strong"),QZo=o("speech_to_text"),HZo=o(" \u2014 "),XX=a("a"),UZo=o("Speech2TextForConditionalGeneration"),JZo=o(" (Speech2Text model)"),YZo=l(),U3=a("p"),KZo=o("The model is set in evaluation mode by default using "),D_e=a("code"),ZZo=o("model.eval()"),eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),oer=o("model.train()"),rer=l(),F(J3.$$.fragment),Pqe=l(),Td=a("h2"),Y3=a("a"),O_e=a("span"),F(pL.$$.fragment),ter=l(),V_e=a("span"),aer=o("AutoModelForAudioXVector"),Bqe=l(),zo=a("div"),F(_L.$$.fragment),ner=l(),Md=a("p"),ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=a("a"),ler=o("from_pretrained()"),ier=o(" class method or the "),WX=a("a"),der=o("from_config()"),cer=o(` class
method.`),fer=l(),uL=a("p"),mer=o("This class cannot be instantiated directly using "),X_e=a("code"),ger=o("__init__()"),her=o(" (throws an error)."),per=l(),Tt=a("div"),F(bL.$$.fragment),_er=l(),z_e=a("p"),uer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ber=l(),Ed=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Fer=o("not"),Ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Mer=o("from_pretrained()"),Eer=o(" to load the model weights."),Cer=l(),F(K3.$$.fragment),wer=l(),ho=a("div"),F(vL.$$.fragment),Aer=l(),Q_e=a("p"),yer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ler=l(),za=a("p"),xer=o("The model class to instantiate is selected based on the "),H_e=a("code"),$er=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),Per=o("pretrained_model_name_or_path"),Ber=o(":"),Ier=l(),Zr=a("ul"),Z3=a("li"),Y_e=a("strong"),qer=o("data2vec-audio"),Ner=o(" \u2014 "),HX=a("a"),jer=o("Data2VecAudioForXVector"),Der=o(" (Data2VecAudio model)"),Ger=l(),eF=a("li"),K_e=a("strong"),Oer=o("unispeech-sat"),Ver=o(" \u2014 "),UX=a("a"),Xer=o("UniSpeechSatForXVector"),zer=o(" (UniSpeechSat model)"),Wer=l(),oF=a("li"),Z_e=a("strong"),Qer=o("wav2vec2"),Her=o(" \u2014 "),JX=a("a"),Uer=o("Wav2Vec2ForXVector"),Jer=o(" (Wav2Vec2 model)"),Yer=l(),rF=a("li"),eue=a("strong"),Ker=o("wav2vec2-conformer"),Zer=o(" \u2014 "),YX=a("a"),eor=o("Wav2Vec2ConformerForXVector"),oor=o(" (Wav2Vec2-Conformer model)"),ror=l(),tF=a("li"),oue=a("strong"),tor=o("wavlm"),aor=o(" \u2014 "),KX=a("a"),nor=o("WavLMForXVector"),sor=o(" (WavLM model)"),lor=l(),aF=a("p"),ior=o("The model is set in evaluation mode by default using "),rue=a("code"),dor=o("model.eval()"),cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),mor=o("model.train()"),gor=l(),F(nF.$$.fragment),Iqe=l(),Cd=a("h2"),sF=a("a"),aue=a("span"),F(FL.$$.fragment),hor=l(),nue=a("span"),por=o("AutoModelForMaskedImageModeling"),qqe=l(),Wo=a("div"),F(TL.$$.fragment),_or=l(),wd=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=a("a"),bor=o("from_pretrained()"),vor=o(" class method or the "),ez=a("a"),For=o("from_config()"),Tor=o(` class
method.`),Mor=l(),ML=a("p"),Eor=o("This class cannot be instantiated directly using "),sue=a("code"),Cor=o("__init__()"),wor=o(" (throws an error)."),Aor=l(),Mt=a("div"),F(EL.$$.fragment),yor=l(),lue=a("p"),Lor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xor=l(),Ad=a("p"),$or=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),kor=o("not"),Sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Ror=o("from_pretrained()"),Por=o(" to load the model weights."),Bor=l(),F(lF.$$.fragment),Ior=l(),po=a("div"),F(CL.$$.fragment),qor=l(),due=a("p"),Nor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jor=l(),Wa=a("p"),Dor=o("The model class to instantiate is selected based on the "),cue=a("code"),Gor=o("model_type"),Oor=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),zor=o("pretrained_model_name_or_path"),Wor=o(":"),Qor=l(),yd=a("ul"),iF=a("li"),gue=a("strong"),Hor=o("deit"),Uor=o(" \u2014 "),rz=a("a"),Jor=o("DeiTForMaskedImageModeling"),Yor=o(" (DeiT model)"),Kor=l(),dF=a("li"),hue=a("strong"),Zor=o("swin"),err=o(" \u2014 "),tz=a("a"),orr=o("SwinForMaskedImageModeling"),rrr=o(" (Swin model)"),trr=l(),cF=a("li"),pue=a("strong"),arr=o("vit"),nrr=o(" \u2014 "),az=a("a"),srr=o("ViTForMaskedImageModeling"),lrr=o(" (ViT model)"),irr=l(),fF=a("p"),drr=o("The model is set in evaluation mode by default using "),_ue=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),mrr=o("model.train()"),grr=l(),F(mF.$$.fragment),Nqe=l(),Ld=a("h2"),gF=a("a"),bue=a("span"),F(wL.$$.fragment),hrr=l(),vue=a("span"),prr=o("AutoModelForObjectDetection"),jqe=l(),Qo=a("div"),F(AL.$$.fragment),_rr=l(),xd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),sz=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),yL=a("p"),Err=o("This class cannot be instantiated directly using "),Fue=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Et=a("div"),F(LL.$$.fragment),yrr=l(),Tue=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xrr=l(),$d=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(hF.$$.fragment),Irr=l(),_o=a("div"),F(xL.$$.fragment),qrr=l(),Eue=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jrr=l(),Qa=a("p"),Drr=o("The model class to instantiate is selected based on the "),Cue=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),$L=a("ul"),pF=a("li"),yue=a("strong"),Hrr=o("detr"),Urr=o(" \u2014 "),iz=a("a"),Jrr=o("DetrForObjectDetection"),Yrr=o(" (DETR model)"),Krr=l(),_F=a("li"),Lue=a("strong"),Zrr=o("yolos"),etr=o(" \u2014 "),dz=a("a"),otr=o("YolosForObjectDetection"),rtr=o(" (YOLOS model)"),ttr=l(),uF=a("p"),atr=o("The model is set in evaluation mode by default using "),xue=a("code"),ntr=o("model.eval()"),str=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),ltr=o("model.train()"),itr=l(),F(bF.$$.fragment),Dqe=l(),kd=a("h2"),vF=a("a"),kue=a("span"),F(kL.$$.fragment),dtr=l(),Sue=a("span"),ctr=o("AutoModelForImageSegmentation"),Gqe=l(),Ho=a("div"),F(SL.$$.fragment),ftr=l(),Sd=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=a("a"),gtr=o("from_pretrained()"),htr=o(" class method or the "),fz=a("a"),ptr=o("from_config()"),_tr=o(` class
method.`),utr=l(),RL=a("p"),btr=o("This class cannot be instantiated directly using "),Rue=a("code"),vtr=o("__init__()"),Ftr=o(" (throws an error)."),Ttr=l(),Ct=a("div"),F(PL.$$.fragment),Mtr=l(),Pue=a("p"),Etr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ctr=l(),Rd=a("p"),wtr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),Atr=o("not"),ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Ltr=o("from_pretrained()"),xtr=o(" to load the model weights."),$tr=l(),F(FF.$$.fragment),ktr=l(),uo=a("div"),F(BL.$$.fragment),Str=l(),Iue=a("p"),Rtr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ptr=l(),Ha=a("p"),Btr=o("The model class to instantiate is selected based on the "),que=a("code"),Itr=o("model_type"),qtr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),Ntr=o("pretrained_model_name_or_path"),jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Dtr=o("pretrained_model_name_or_path"),Gtr=o(":"),Otr=l(),Due=a("ul"),TF=a("li"),Gue=a("strong"),Vtr=o("detr"),Xtr=o(" \u2014 "),gz=a("a"),ztr=o("DetrForSegmentation"),Wtr=o(" (DETR model)"),Qtr=l(),MF=a("p"),Htr=o("The model is set in evaluation mode by default using "),Oue=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),Ytr=o("model.train()"),Ktr=l(),F(EF.$$.fragment),Oqe=l(),Pd=a("h2"),CF=a("a"),Xue=a("span"),F(IL.$$.fragment),Ztr=l(),zue=a("span"),ear=o("AutoModelForSemanticSegmentation"),Vqe=l(),Uo=a("div"),F(qL.$$.fragment),oar=l(),Bd=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),NL=a("p"),iar=o("This class cannot be instantiated directly using "),Wue=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),wt=a("div"),F(jL.$$.fragment),mar=l(),Que=a("p"),gar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),har=l(),Id=a("p"),par=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(wF.$$.fragment),Mar=l(),bo=a("div"),F(DL.$$.fragment),Ear=l(),Uue=a("p"),Car=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),war=l(),Ua=a("p"),Aar=o("The model class to instantiate is selected based on the "),Jue=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ja=a("ul"),AF=a("li"),Zue=a("strong"),Par=o("beit"),Bar=o(" \u2014 "),uz=a("a"),Iar=o("BeitForSemanticSegmentation"),qar=o(" (BEiT model)"),Nar=l(),yF=a("li"),e2e=a("strong"),jar=o("data2vec-vision"),Dar=o(" \u2014 "),bz=a("a"),Gar=o("Data2VecVisionForSemanticSegmentation"),Oar=o(" (Data2VecVision model)"),Var=l(),LF=a("li"),o2e=a("strong"),Xar=o("dpt"),zar=o(" \u2014 "),vz=a("a"),War=o("DPTForSemanticSegmentation"),Qar=o(" (DPT model)"),Har=l(),xF=a("li"),r2e=a("strong"),Uar=o("segformer"),Jar=o(" \u2014 "),Fz=a("a"),Yar=o("SegformerForSemanticSegmentation"),Kar=o(" (SegFormer model)"),Zar=l(),$F=a("p"),enr=o("The model is set in evaluation mode by default using "),t2e=a("code"),onr=o("model.eval()"),rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),tnr=o("model.train()"),anr=l(),F(kF.$$.fragment),Xqe=l(),qd=a("h2"),SF=a("a"),n2e=a("span"),F(GL.$$.fragment),nnr=l(),s2e=a("span"),snr=o("AutoModelForInstanceSegmentation"),zqe=l(),Jo=a("div"),F(OL.$$.fragment),lnr=l(),Nd=a("p"),inr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=a("a"),dnr=o("from_pretrained()"),cnr=o(" class method or the "),Mz=a("a"),fnr=o("from_config()"),mnr=o(` class
method.`),gnr=l(),VL=a("p"),hnr=o("This class cannot be instantiated directly using "),l2e=a("code"),pnr=o("__init__()"),_nr=o(" (throws an error)."),unr=l(),At=a("div"),F(XL.$$.fragment),bnr=l(),i2e=a("p"),vnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fnr=l(),jd=a("p"),Tnr=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Mnr=o("not"),Enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Cnr=o("from_pretrained()"),wnr=o(" to load the model weights."),Anr=l(),F(RF.$$.fragment),ynr=l(),vo=a("div"),F(zL.$$.fragment),Lnr=l(),c2e=a("p"),xnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$nr=l(),Ya=a("p"),knr=o("The model class to instantiate is selected based on the "),f2e=a("code"),Snr=o("model_type"),Rnr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Inr=o("pretrained_model_name_or_path"),qnr=o(":"),Nnr=l(),h2e=a("ul"),PF=a("li"),p2e=a("strong"),jnr=o("maskformer"),Dnr=o(" \u2014 "),Cz=a("a"),Gnr=o("MaskFormerForInstanceSegmentation"),Onr=o(" (MaskFormer model)"),Vnr=l(),BF=a("p"),Xnr=o("The model is set in evaluation mode by default using "),_2e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),Qnr=o("model.train()"),Hnr=l(),F(IF.$$.fragment),Wqe=l(),Dd=a("h2"),qF=a("a"),b2e=a("span"),F(WL.$$.fragment),Unr=l(),v2e=a("span"),Jnr=o("TFAutoModel"),Qqe=l(),Yo=a("div"),F(QL.$$.fragment),Ynr=l(),Gd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),Az=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),HL=a("p"),asr=o("This class cannot be instantiated directly using "),F2e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),yt=a("div"),F(UL.$$.fragment),isr=l(),T2e=a("p"),dsr=o("Instantiates one of the base model classes of the library from a configuration."),csr=l(),Od=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),_sr=l(),F(NF.$$.fragment),usr=l(),wr=a("div"),F(JL.$$.fragment),bsr=l(),E2e=a("p"),vsr=o("Instantiate one of the base model classes of the library from a pretrained model."),Fsr=l(),Ka=a("p"),Tsr=o("The model class to instantiate is selected based on the "),C2e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),N=a("ul"),jF=a("li"),y2e=a("strong"),xsr=o("albert"),$sr=o(" \u2014 "),Lz=a("a"),ksr=o("TFAlbertModel"),Ssr=o(" (ALBERT model)"),Rsr=l(),DF=a("li"),L2e=a("strong"),Psr=o("bart"),Bsr=o(" \u2014 "),xz=a("a"),Isr=o("TFBartModel"),qsr=o(" (BART model)"),Nsr=l(),GF=a("li"),x2e=a("strong"),jsr=o("bert"),Dsr=o(" \u2014 "),$z=a("a"),Gsr=o("TFBertModel"),Osr=o(" (BERT model)"),Vsr=l(),OF=a("li"),$2e=a("strong"),Xsr=o("blenderbot"),zsr=o(" \u2014 "),kz=a("a"),Wsr=o("TFBlenderbotModel"),Qsr=o(" (Blenderbot model)"),Hsr=l(),VF=a("li"),k2e=a("strong"),Usr=o("blenderbot-small"),Jsr=o(" \u2014 "),Sz=a("a"),Ysr=o("TFBlenderbotSmallModel"),Ksr=o(" (BlenderbotSmall model)"),Zsr=l(),XF=a("li"),S2e=a("strong"),elr=o("camembert"),olr=o(" \u2014 "),Rz=a("a"),rlr=o("TFCamembertModel"),tlr=o(" (CamemBERT model)"),alr=l(),zF=a("li"),R2e=a("strong"),nlr=o("clip"),slr=o(" \u2014 "),Pz=a("a"),llr=o("TFCLIPModel"),ilr=o(" (CLIP model)"),dlr=l(),WF=a("li"),P2e=a("strong"),clr=o("convbert"),flr=o(" \u2014 "),Bz=a("a"),mlr=o("TFConvBertModel"),glr=o(" (ConvBERT model)"),hlr=l(),QF=a("li"),B2e=a("strong"),plr=o("convnext"),_lr=o(" \u2014 "),Iz=a("a"),ulr=o("TFConvNextModel"),blr=o(" (ConvNext model)"),vlr=l(),HF=a("li"),I2e=a("strong"),Flr=o("ctrl"),Tlr=o(" \u2014 "),qz=a("a"),Mlr=o("TFCTRLModel"),Elr=o(" (CTRL model)"),Clr=l(),UF=a("li"),q2e=a("strong"),wlr=o("data2vec-vision"),Alr=o(" \u2014 "),Nz=a("a"),ylr=o("TFData2VecVisionModel"),Llr=o(" (Data2VecVision model)"),xlr=l(),JF=a("li"),N2e=a("strong"),$lr=o("deberta"),klr=o(" \u2014 "),jz=a("a"),Slr=o("TFDebertaModel"),Rlr=o(" (DeBERTa model)"),Plr=l(),YF=a("li"),j2e=a("strong"),Blr=o("deberta-v2"),Ilr=o(" \u2014 "),Dz=a("a"),qlr=o("TFDebertaV2Model"),Nlr=o(" (DeBERTa-v2 model)"),jlr=l(),KF=a("li"),D2e=a("strong"),Dlr=o("distilbert"),Glr=o(" \u2014 "),Gz=a("a"),Olr=o("TFDistilBertModel"),Vlr=o(" (DistilBERT model)"),Xlr=l(),ZF=a("li"),G2e=a("strong"),zlr=o("dpr"),Wlr=o(" \u2014 "),Oz=a("a"),Qlr=o("TFDPRQuestionEncoder"),Hlr=o(" (DPR model)"),Ulr=l(),eT=a("li"),O2e=a("strong"),Jlr=o("electra"),Ylr=o(" \u2014 "),Vz=a("a"),Klr=o("TFElectraModel"),Zlr=o(" (ELECTRA model)"),eir=l(),oT=a("li"),V2e=a("strong"),oir=o("flaubert"),rir=o(" \u2014 "),Xz=a("a"),tir=o("TFFlaubertModel"),air=o(" (FlauBERT model)"),nir=l(),Bs=a("li"),X2e=a("strong"),sir=o("funnel"),lir=o(" \u2014 "),zz=a("a"),iir=o("TFFunnelModel"),dir=o(" or "),Wz=a("a"),cir=o("TFFunnelBaseModel"),fir=o(" (Funnel Transformer model)"),mir=l(),rT=a("li"),z2e=a("strong"),gir=o("gpt2"),hir=o(" \u2014 "),Qz=a("a"),pir=o("TFGPT2Model"),_ir=o(" (OpenAI GPT-2 model)"),uir=l(),tT=a("li"),W2e=a("strong"),bir=o("gptj"),vir=o(" \u2014 "),Hz=a("a"),Fir=o("TFGPTJModel"),Tir=o(" (GPT-J model)"),Mir=l(),aT=a("li"),Q2e=a("strong"),Eir=o("hubert"),Cir=o(" \u2014 "),Uz=a("a"),wir=o("TFHubertModel"),Air=o(" (Hubert model)"),yir=l(),nT=a("li"),H2e=a("strong"),Lir=o("layoutlm"),xir=o(" \u2014 "),Jz=a("a"),$ir=o("TFLayoutLMModel"),kir=o(" (LayoutLM model)"),Sir=l(),sT=a("li"),U2e=a("strong"),Rir=o("led"),Pir=o(" \u2014 "),Yz=a("a"),Bir=o("TFLEDModel"),Iir=o(" (LED model)"),qir=l(),lT=a("li"),J2e=a("strong"),Nir=o("longformer"),jir=o(" \u2014 "),Kz=a("a"),Dir=o("TFLongformerModel"),Gir=o(" (Longformer model)"),Oir=l(),iT=a("li"),Y2e=a("strong"),Vir=o("lxmert"),Xir=o(" \u2014 "),Zz=a("a"),zir=o("TFLxmertModel"),Wir=o(" (LXMERT model)"),Qir=l(),dT=a("li"),K2e=a("strong"),Hir=o("marian"),Uir=o(" \u2014 "),eW=a("a"),Jir=o("TFMarianModel"),Yir=o(" (Marian model)"),Kir=l(),cT=a("li"),Z2e=a("strong"),Zir=o("mbart"),edr=o(" \u2014 "),oW=a("a"),odr=o("TFMBartModel"),rdr=o(" (mBART model)"),tdr=l(),fT=a("li"),e1e=a("strong"),adr=o("mobilebert"),ndr=o(" \u2014 "),rW=a("a"),sdr=o("TFMobileBertModel"),ldr=o(" (MobileBERT model)"),idr=l(),mT=a("li"),o1e=a("strong"),ddr=o("mpnet"),cdr=o(" \u2014 "),tW=a("a"),fdr=o("TFMPNetModel"),mdr=o(" (MPNet model)"),gdr=l(),gT=a("li"),r1e=a("strong"),hdr=o("mt5"),pdr=o(" \u2014 "),aW=a("a"),_dr=o("TFMT5Model"),udr=o(" (mT5 model)"),bdr=l(),hT=a("li"),t1e=a("strong"),vdr=o("openai-gpt"),Fdr=o(" \u2014 "),nW=a("a"),Tdr=o("TFOpenAIGPTModel"),Mdr=o(" (OpenAI GPT model)"),Edr=l(),pT=a("li"),a1e=a("strong"),Cdr=o("pegasus"),wdr=o(" \u2014 "),sW=a("a"),Adr=o("TFPegasusModel"),ydr=o(" (Pegasus model)"),Ldr=l(),_T=a("li"),n1e=a("strong"),xdr=o("rembert"),$dr=o(" \u2014 "),lW=a("a"),kdr=o("TFRemBertModel"),Sdr=o(" (RemBERT model)"),Rdr=l(),uT=a("li"),s1e=a("strong"),Pdr=o("roberta"),Bdr=o(" \u2014 "),iW=a("a"),Idr=o("TFRobertaModel"),qdr=o(" (RoBERTa model)"),Ndr=l(),bT=a("li"),l1e=a("strong"),jdr=o("roformer"),Ddr=o(" \u2014 "),dW=a("a"),Gdr=o("TFRoFormerModel"),Odr=o(" (RoFormer model)"),Vdr=l(),vT=a("li"),i1e=a("strong"),Xdr=o("speech_to_text"),zdr=o(" \u2014 "),cW=a("a"),Wdr=o("TFSpeech2TextModel"),Qdr=o(" (Speech2Text model)"),Hdr=l(),FT=a("li"),d1e=a("strong"),Udr=o("swin"),Jdr=o(" \u2014 "),fW=a("a"),Ydr=o("TFSwinModel"),Kdr=o(" (Swin model)"),Zdr=l(),TT=a("li"),c1e=a("strong"),ecr=o("t5"),ocr=o(" \u2014 "),mW=a("a"),rcr=o("TFT5Model"),tcr=o(" (T5 model)"),acr=l(),MT=a("li"),f1e=a("strong"),ncr=o("tapas"),scr=o(" \u2014 "),gW=a("a"),lcr=o("TFTapasModel"),icr=o(" (TAPAS model)"),dcr=l(),ET=a("li"),m1e=a("strong"),ccr=o("transfo-xl"),fcr=o(" \u2014 "),hW=a("a"),mcr=o("TFTransfoXLModel"),gcr=o(" (Transformer-XL model)"),hcr=l(),CT=a("li"),g1e=a("strong"),pcr=o("vit"),_cr=o(" \u2014 "),pW=a("a"),ucr=o("TFViTModel"),bcr=o(" (ViT model)"),vcr=l(),wT=a("li"),h1e=a("strong"),Fcr=o("vit_mae"),Tcr=o(" \u2014 "),_W=a("a"),Mcr=o("TFViTMAEModel"),Ecr=o(" (ViTMAE model)"),Ccr=l(),AT=a("li"),p1e=a("strong"),wcr=o("wav2vec2"),Acr=o(" \u2014 "),uW=a("a"),ycr=o("TFWav2Vec2Model"),Lcr=o(" (Wav2Vec2 model)"),xcr=l(),yT=a("li"),_1e=a("strong"),$cr=o("xlm"),kcr=o(" \u2014 "),bW=a("a"),Scr=o("TFXLMModel"),Rcr=o(" (XLM model)"),Pcr=l(),LT=a("li"),u1e=a("strong"),Bcr=o("xlm-roberta"),Icr=o(" \u2014 "),vW=a("a"),qcr=o("TFXLMRobertaModel"),Ncr=o(" (XLM-RoBERTa model)"),jcr=l(),xT=a("li"),b1e=a("strong"),Dcr=o("xlnet"),Gcr=o(" \u2014 "),FW=a("a"),Ocr=o("TFXLNetModel"),Vcr=o(" (XLNet model)"),Xcr=l(),F($T.$$.fragment),Hqe=l(),Vd=a("h2"),kT=a("a"),v1e=a("span"),F(YL.$$.fragment),zcr=l(),F1e=a("span"),Wcr=o("TFAutoModelForPreTraining"),Uqe=l(),Ko=a("div"),F(KL.$$.fragment),Qcr=l(),Xd=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),MW=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),ZL=a("p"),efr=o("This class cannot be instantiated directly using "),T1e=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),Lt=a("div"),F(e8.$$.fragment),afr=l(),M1e=a("p"),nfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sfr=l(),zd=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),F(ST.$$.fragment),gfr=l(),Ar=a("div"),F(o8.$$.fragment),hfr=l(),C1e=a("p"),pfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_fr=l(),Za=a("p"),ufr=o("The model class to instantiate is selected based on the "),w1e=a("code"),bfr=o("model_type"),vfr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Ffr=o("pretrained_model_name_or_path"),Tfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),Cfr=l(),se=a("ul"),RT=a("li"),L1e=a("strong"),wfr=o("albert"),Afr=o(" \u2014 "),CW=a("a"),yfr=o("TFAlbertForPreTraining"),Lfr=o(" (ALBERT model)"),xfr=l(),PT=a("li"),x1e=a("strong"),$fr=o("bart"),kfr=o(" \u2014 "),wW=a("a"),Sfr=o("TFBartForConditionalGeneration"),Rfr=o(" (BART model)"),Pfr=l(),BT=a("li"),$1e=a("strong"),Bfr=o("bert"),Ifr=o(" \u2014 "),AW=a("a"),qfr=o("TFBertForPreTraining"),Nfr=o(" (BERT model)"),jfr=l(),IT=a("li"),k1e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),yW=a("a"),Ofr=o("TFCamembertForMaskedLM"),Vfr=o(" (CamemBERT model)"),Xfr=l(),qT=a("li"),S1e=a("strong"),zfr=o("ctrl"),Wfr=o(" \u2014 "),LW=a("a"),Qfr=o("TFCTRLLMHeadModel"),Hfr=o(" (CTRL model)"),Ufr=l(),NT=a("li"),R1e=a("strong"),Jfr=o("distilbert"),Yfr=o(" \u2014 "),xW=a("a"),Kfr=o("TFDistilBertForMaskedLM"),Zfr=o(" (DistilBERT model)"),emr=l(),jT=a("li"),P1e=a("strong"),omr=o("electra"),rmr=o(" \u2014 "),$W=a("a"),tmr=o("TFElectraForPreTraining"),amr=o(" (ELECTRA model)"),nmr=l(),DT=a("li"),B1e=a("strong"),smr=o("flaubert"),lmr=o(" \u2014 "),kW=a("a"),imr=o("TFFlaubertWithLMHeadModel"),dmr=o(" (FlauBERT model)"),cmr=l(),GT=a("li"),I1e=a("strong"),fmr=o("funnel"),mmr=o(" \u2014 "),SW=a("a"),gmr=o("TFFunnelForPreTraining"),hmr=o(" (Funnel Transformer model)"),pmr=l(),OT=a("li"),q1e=a("strong"),_mr=o("gpt2"),umr=o(" \u2014 "),RW=a("a"),bmr=o("TFGPT2LMHeadModel"),vmr=o(" (OpenAI GPT-2 model)"),Fmr=l(),VT=a("li"),N1e=a("strong"),Tmr=o("layoutlm"),Mmr=o(" \u2014 "),PW=a("a"),Emr=o("TFLayoutLMForMaskedLM"),Cmr=o(" (LayoutLM model)"),wmr=l(),XT=a("li"),j1e=a("strong"),Amr=o("lxmert"),ymr=o(" \u2014 "),BW=a("a"),Lmr=o("TFLxmertForPreTraining"),xmr=o(" (LXMERT model)"),$mr=l(),zT=a("li"),D1e=a("strong"),kmr=o("mobilebert"),Smr=o(" \u2014 "),IW=a("a"),Rmr=o("TFMobileBertForPreTraining"),Pmr=o(" (MobileBERT model)"),Bmr=l(),WT=a("li"),G1e=a("strong"),Imr=o("mpnet"),qmr=o(" \u2014 "),qW=a("a"),Nmr=o("TFMPNetForMaskedLM"),jmr=o(" (MPNet model)"),Dmr=l(),QT=a("li"),O1e=a("strong"),Gmr=o("openai-gpt"),Omr=o(" \u2014 "),NW=a("a"),Vmr=o("TFOpenAIGPTLMHeadModel"),Xmr=o(" (OpenAI GPT model)"),zmr=l(),HT=a("li"),V1e=a("strong"),Wmr=o("roberta"),Qmr=o(" \u2014 "),jW=a("a"),Hmr=o("TFRobertaForMaskedLM"),Umr=o(" (RoBERTa model)"),Jmr=l(),UT=a("li"),X1e=a("strong"),Ymr=o("t5"),Kmr=o(" \u2014 "),DW=a("a"),Zmr=o("TFT5ForConditionalGeneration"),egr=o(" (T5 model)"),ogr=l(),JT=a("li"),z1e=a("strong"),rgr=o("tapas"),tgr=o(" \u2014 "),GW=a("a"),agr=o("TFTapasForMaskedLM"),ngr=o(" (TAPAS model)"),sgr=l(),YT=a("li"),W1e=a("strong"),lgr=o("transfo-xl"),igr=o(" \u2014 "),OW=a("a"),dgr=o("TFTransfoXLLMHeadModel"),cgr=o(" (Transformer-XL model)"),fgr=l(),KT=a("li"),Q1e=a("strong"),mgr=o("vit_mae"),ggr=o(" \u2014 "),VW=a("a"),hgr=o("TFViTMAEForPreTraining"),pgr=o(" (ViTMAE model)"),_gr=l(),ZT=a("li"),H1e=a("strong"),ugr=o("xlm"),bgr=o(" \u2014 "),XW=a("a"),vgr=o("TFXLMWithLMHeadModel"),Fgr=o(" (XLM model)"),Tgr=l(),e7=a("li"),U1e=a("strong"),Mgr=o("xlm-roberta"),Egr=o(" \u2014 "),zW=a("a"),Cgr=o("TFXLMRobertaForMaskedLM"),wgr=o(" (XLM-RoBERTa model)"),Agr=l(),o7=a("li"),J1e=a("strong"),ygr=o("xlnet"),Lgr=o(" \u2014 "),WW=a("a"),xgr=o("TFXLNetLMHeadModel"),$gr=o(" (XLNet model)"),kgr=l(),F(r7.$$.fragment),Jqe=l(),Wd=a("h2"),t7=a("a"),Y1e=a("span"),F(r8.$$.fragment),Sgr=l(),K1e=a("span"),Rgr=o("TFAutoModelForCausalLM"),Yqe=l(),Zo=a("div"),F(t8.$$.fragment),Pgr=l(),Qd=a("p"),Bgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QW=a("a"),Igr=o("from_pretrained()"),qgr=o(" class method or the "),HW=a("a"),Ngr=o("from_config()"),jgr=o(` class
method.`),Dgr=l(),a8=a("p"),Ggr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Ogr=o("__init__()"),Vgr=o(" (throws an error)."),Xgr=l(),xt=a("div"),F(n8.$$.fragment),zgr=l(),ebe=a("p"),Wgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qgr=l(),Hd=a("p"),Hgr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Ugr=o("not"),Jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" to load the model weights."),Zgr=l(),F(a7.$$.fragment),ehr=l(),yr=a("div"),F(s8.$$.fragment),ohr=l(),rbe=a("p"),rhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),thr=l(),en=a("p"),ahr=o("The model class to instantiate is selected based on the "),tbe=a("code"),nhr=o("model_type"),shr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),dhr=o("pretrained_model_name_or_path"),chr=o(":"),fhr=l(),Me=a("ul"),n7=a("li"),sbe=a("strong"),mhr=o("bert"),ghr=o(" \u2014 "),JW=a("a"),hhr=o("TFBertLMHeadModel"),phr=o(" (BERT model)"),_hr=l(),s7=a("li"),lbe=a("strong"),uhr=o("camembert"),bhr=o(" \u2014 "),YW=a("a"),vhr=o("TFCamembertForCausalLM"),Fhr=o(" (CamemBERT model)"),Thr=l(),l7=a("li"),ibe=a("strong"),Mhr=o("ctrl"),Ehr=o(" \u2014 "),KW=a("a"),Chr=o("TFCTRLLMHeadModel"),whr=o(" (CTRL model)"),Ahr=l(),i7=a("li"),dbe=a("strong"),yhr=o("gpt2"),Lhr=o(" \u2014 "),ZW=a("a"),xhr=o("TFGPT2LMHeadModel"),$hr=o(" (OpenAI GPT-2 model)"),khr=l(),d7=a("li"),cbe=a("strong"),Shr=o("gptj"),Rhr=o(" \u2014 "),eQ=a("a"),Phr=o("TFGPTJForCausalLM"),Bhr=o(" (GPT-J model)"),Ihr=l(),c7=a("li"),fbe=a("strong"),qhr=o("openai-gpt"),Nhr=o(" \u2014 "),oQ=a("a"),jhr=o("TFOpenAIGPTLMHeadModel"),Dhr=o(" (OpenAI GPT model)"),Ghr=l(),f7=a("li"),mbe=a("strong"),Ohr=o("rembert"),Vhr=o(" \u2014 "),rQ=a("a"),Xhr=o("TFRemBertForCausalLM"),zhr=o(" (RemBERT model)"),Whr=l(),m7=a("li"),gbe=a("strong"),Qhr=o("roberta"),Hhr=o(" \u2014 "),tQ=a("a"),Uhr=o("TFRobertaForCausalLM"),Jhr=o(" (RoBERTa model)"),Yhr=l(),g7=a("li"),hbe=a("strong"),Khr=o("roformer"),Zhr=o(" \u2014 "),aQ=a("a"),epr=o("TFRoFormerForCausalLM"),opr=o(" (RoFormer model)"),rpr=l(),h7=a("li"),pbe=a("strong"),tpr=o("transfo-xl"),apr=o(" \u2014 "),nQ=a("a"),npr=o("TFTransfoXLLMHeadModel"),spr=o(" (Transformer-XL model)"),lpr=l(),p7=a("li"),_be=a("strong"),ipr=o("xlm"),dpr=o(" \u2014 "),sQ=a("a"),cpr=o("TFXLMWithLMHeadModel"),fpr=o(" (XLM model)"),mpr=l(),_7=a("li"),ube=a("strong"),gpr=o("xlnet"),hpr=o(" \u2014 "),lQ=a("a"),ppr=o("TFXLNetLMHeadModel"),_pr=o(" (XLNet model)"),upr=l(),F(u7.$$.fragment),Kqe=l(),Ud=a("h2"),b7=a("a"),bbe=a("span"),F(l8.$$.fragment),bpr=l(),vbe=a("span"),vpr=o("TFAutoModelForImageClassification"),Zqe=l(),er=a("div"),F(i8.$$.fragment),Fpr=l(),Jd=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=a("a"),Mpr=o("from_pretrained()"),Epr=o(" class method or the "),dQ=a("a"),Cpr=o("from_config()"),wpr=o(` class
method.`),Apr=l(),d8=a("p"),ypr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Lpr=o("__init__()"),xpr=o(" (throws an error)."),$pr=l(),$t=a("div"),F(c8.$$.fragment),kpr=l(),Tbe=a("p"),Spr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rpr=l(),Yd=a("p"),Ppr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Bpr=o("not"),Ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),qpr=o("from_pretrained()"),Npr=o(" to load the model weights."),jpr=l(),F(v7.$$.fragment),Dpr=l(),Lr=a("div"),F(f8.$$.fragment),Gpr=l(),Ebe=a("p"),Opr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vpr=l(),on=a("p"),Xpr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),zpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),Qpr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(":"),Ypr=l(),rn=a("ul"),F7=a("li"),ybe=a("strong"),Kpr=o("convnext"),Zpr=o(" \u2014 "),fQ=a("a"),e_r=o("TFConvNextForImageClassification"),o_r=o(" (ConvNext model)"),r_r=l(),T7=a("li"),Lbe=a("strong"),t_r=o("data2vec-vision"),a_r=o(" \u2014 "),mQ=a("a"),n_r=o("TFData2VecVisionForImageClassification"),s_r=o(" (Data2VecVision model)"),l_r=l(),M7=a("li"),xbe=a("strong"),i_r=o("swin"),d_r=o(" \u2014 "),gQ=a("a"),c_r=o("TFSwinForImageClassification"),f_r=o(" (Swin model)"),m_r=l(),E7=a("li"),$be=a("strong"),g_r=o("vit"),h_r=o(" \u2014 "),hQ=a("a"),p_r=o("TFViTForImageClassification"),__r=o(" (ViT model)"),u_r=l(),F(C7.$$.fragment),eNe=l(),Kd=a("h2"),w7=a("a"),kbe=a("span"),F(m8.$$.fragment),b_r=l(),Sbe=a("span"),v_r=o("TFAutoModelForMaskedLM"),oNe=l(),or=a("div"),F(g8.$$.fragment),F_r=l(),Zd=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=a("a"),M_r=o("from_pretrained()"),E_r=o(" class method or the "),_Q=a("a"),C_r=o("from_config()"),w_r=o(` class
method.`),A_r=l(),h8=a("p"),y_r=o("This class cannot be instantiated directly using "),Rbe=a("code"),L_r=o("__init__()"),x_r=o(" (throws an error)."),$_r=l(),kt=a("div"),F(p8.$$.fragment),k_r=l(),Pbe=a("p"),S_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R_r=l(),ec=a("p"),P_r=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),B_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),q_r=o("from_pretrained()"),N_r=o(" to load the model weights."),j_r=l(),F(A7.$$.fragment),D_r=l(),xr=a("div"),F(_8.$$.fragment),G_r=l(),Ibe=a("p"),O_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V_r=l(),tn=a("p"),X_r=o("The model class to instantiate is selected based on the "),qbe=a("code"),z_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Q_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),ie=a("ul"),y7=a("li"),Dbe=a("strong"),K_r=o("albert"),Z_r=o(" \u2014 "),bQ=a("a"),eur=o("TFAlbertForMaskedLM"),our=o(" (ALBERT model)"),rur=l(),L7=a("li"),Gbe=a("strong"),tur=o("bert"),aur=o(" \u2014 "),vQ=a("a"),nur=o("TFBertForMaskedLM"),sur=o(" (BERT model)"),lur=l(),x7=a("li"),Obe=a("strong"),iur=o("camembert"),dur=o(" \u2014 "),FQ=a("a"),cur=o("TFCamembertForMaskedLM"),fur=o(" (CamemBERT model)"),mur=l(),$7=a("li"),Vbe=a("strong"),gur=o("convbert"),hur=o(" \u2014 "),TQ=a("a"),pur=o("TFConvBertForMaskedLM"),_ur=o(" (ConvBERT model)"),uur=l(),k7=a("li"),Xbe=a("strong"),bur=o("deberta"),vur=o(" \u2014 "),MQ=a("a"),Fur=o("TFDebertaForMaskedLM"),Tur=o(" (DeBERTa model)"),Mur=l(),S7=a("li"),zbe=a("strong"),Eur=o("deberta-v2"),Cur=o(" \u2014 "),EQ=a("a"),wur=o("TFDebertaV2ForMaskedLM"),Aur=o(" (DeBERTa-v2 model)"),yur=l(),R7=a("li"),Wbe=a("strong"),Lur=o("distilbert"),xur=o(" \u2014 "),CQ=a("a"),$ur=o("TFDistilBertForMaskedLM"),kur=o(" (DistilBERT model)"),Sur=l(),P7=a("li"),Qbe=a("strong"),Rur=o("electra"),Pur=o(" \u2014 "),wQ=a("a"),Bur=o("TFElectraForMaskedLM"),Iur=o(" (ELECTRA model)"),qur=l(),B7=a("li"),Hbe=a("strong"),Nur=o("flaubert"),jur=o(" \u2014 "),AQ=a("a"),Dur=o("TFFlaubertWithLMHeadModel"),Gur=o(" (FlauBERT model)"),Our=l(),I7=a("li"),Ube=a("strong"),Vur=o("funnel"),Xur=o(" \u2014 "),yQ=a("a"),zur=o("TFFunnelForMaskedLM"),Wur=o(" (Funnel Transformer model)"),Qur=l(),q7=a("li"),Jbe=a("strong"),Hur=o("layoutlm"),Uur=o(" \u2014 "),LQ=a("a"),Jur=o("TFLayoutLMForMaskedLM"),Yur=o(" (LayoutLM model)"),Kur=l(),N7=a("li"),Ybe=a("strong"),Zur=o("longformer"),e2r=o(" \u2014 "),xQ=a("a"),o2r=o("TFLongformerForMaskedLM"),r2r=o(" (Longformer model)"),t2r=l(),j7=a("li"),Kbe=a("strong"),a2r=o("mobilebert"),n2r=o(" \u2014 "),$Q=a("a"),s2r=o("TFMobileBertForMaskedLM"),l2r=o(" (MobileBERT model)"),i2r=l(),D7=a("li"),Zbe=a("strong"),d2r=o("mpnet"),c2r=o(" \u2014 "),kQ=a("a"),f2r=o("TFMPNetForMaskedLM"),m2r=o(" (MPNet model)"),g2r=l(),G7=a("li"),e5e=a("strong"),h2r=o("rembert"),p2r=o(" \u2014 "),SQ=a("a"),_2r=o("TFRemBertForMaskedLM"),u2r=o(" (RemBERT model)"),b2r=l(),O7=a("li"),o5e=a("strong"),v2r=o("roberta"),F2r=o(" \u2014 "),RQ=a("a"),T2r=o("TFRobertaForMaskedLM"),M2r=o(" (RoBERTa model)"),E2r=l(),V7=a("li"),r5e=a("strong"),C2r=o("roformer"),w2r=o(" \u2014 "),PQ=a("a"),A2r=o("TFRoFormerForMaskedLM"),y2r=o(" (RoFormer model)"),L2r=l(),X7=a("li"),t5e=a("strong"),x2r=o("tapas"),$2r=o(" \u2014 "),BQ=a("a"),k2r=o("TFTapasForMaskedLM"),S2r=o(" (TAPAS model)"),R2r=l(),z7=a("li"),a5e=a("strong"),P2r=o("xlm"),B2r=o(" \u2014 "),IQ=a("a"),I2r=o("TFXLMWithLMHeadModel"),q2r=o(" (XLM model)"),N2r=l(),W7=a("li"),n5e=a("strong"),j2r=o("xlm-roberta"),D2r=o(" \u2014 "),qQ=a("a"),G2r=o("TFXLMRobertaForMaskedLM"),O2r=o(" (XLM-RoBERTa model)"),V2r=l(),F(Q7.$$.fragment),rNe=l(),oc=a("h2"),H7=a("a"),s5e=a("span"),F(u8.$$.fragment),X2r=l(),l5e=a("span"),z2r=o("TFAutoModelForSeq2SeqLM"),tNe=l(),rr=a("div"),F(b8.$$.fragment),W2r=l(),rc=a("p"),Q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=a("a"),H2r=o("from_pretrained()"),U2r=o(" class method or the "),jQ=a("a"),J2r=o("from_config()"),Y2r=o(` class
method.`),K2r=l(),v8=a("p"),Z2r=o("This class cannot be instantiated directly using "),i5e=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),St=a("div"),F(F8.$$.fragment),t1r=l(),d5e=a("p"),a1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n1r=l(),tc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),d1r=o("from_pretrained()"),c1r=o(" to load the model weights."),f1r=l(),F(U7.$$.fragment),m1r=l(),$r=a("div"),F(T8.$$.fragment),g1r=l(),f5e=a("p"),h1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p1r=l(),an=a("p"),_1r=o("The model class to instantiate is selected based on the "),m5e=a("code"),u1r=o("model_type"),b1r=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(":"),E1r=l(),ye=a("ul"),J7=a("li"),p5e=a("strong"),C1r=o("bart"),w1r=o(" \u2014 "),GQ=a("a"),A1r=o("TFBartForConditionalGeneration"),y1r=o(" (BART model)"),L1r=l(),Y7=a("li"),_5e=a("strong"),x1r=o("blenderbot"),$1r=o(" \u2014 "),OQ=a("a"),k1r=o("TFBlenderbotForConditionalGeneration"),S1r=o(" (Blenderbot model)"),R1r=l(),K7=a("li"),u5e=a("strong"),P1r=o("blenderbot-small"),B1r=o(" \u2014 "),VQ=a("a"),I1r=o("TFBlenderbotSmallForConditionalGeneration"),q1r=o(" (BlenderbotSmall model)"),N1r=l(),Z7=a("li"),b5e=a("strong"),j1r=o("encoder-decoder"),D1r=o(" \u2014 "),XQ=a("a"),G1r=o("TFEncoderDecoderModel"),O1r=o(" (Encoder decoder model)"),V1r=l(),eM=a("li"),v5e=a("strong"),X1r=o("led"),z1r=o(" \u2014 "),zQ=a("a"),W1r=o("TFLEDForConditionalGeneration"),Q1r=o(" (LED model)"),H1r=l(),oM=a("li"),F5e=a("strong"),U1r=o("marian"),J1r=o(" \u2014 "),WQ=a("a"),Y1r=o("TFMarianMTModel"),K1r=o(" (Marian model)"),Z1r=l(),rM=a("li"),T5e=a("strong"),ebr=o("mbart"),obr=o(" \u2014 "),QQ=a("a"),rbr=o("TFMBartForConditionalGeneration"),tbr=o(" (mBART model)"),abr=l(),tM=a("li"),M5e=a("strong"),nbr=o("mt5"),sbr=o(" \u2014 "),HQ=a("a"),lbr=o("TFMT5ForConditionalGeneration"),ibr=o(" (mT5 model)"),dbr=l(),aM=a("li"),E5e=a("strong"),cbr=o("pegasus"),fbr=o(" \u2014 "),UQ=a("a"),mbr=o("TFPegasusForConditionalGeneration"),gbr=o(" (Pegasus model)"),hbr=l(),nM=a("li"),C5e=a("strong"),pbr=o("t5"),_br=o(" \u2014 "),JQ=a("a"),ubr=o("TFT5ForConditionalGeneration"),bbr=o(" (T5 model)"),vbr=l(),F(sM.$$.fragment),aNe=l(),ac=a("h2"),lM=a("a"),w5e=a("span"),F(M8.$$.fragment),Fbr=l(),A5e=a("span"),Tbr=o("TFAutoModelForSequenceClassification"),nNe=l(),tr=a("div"),F(E8.$$.fragment),Mbr=l(),nc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),KQ=a("a"),Abr=o("from_config()"),ybr=o(` class
method.`),Lbr=l(),C8=a("p"),xbr=o("This class cannot be instantiated directly using "),y5e=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),Rt=a("div"),F(w8.$$.fragment),Rbr=l(),L5e=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bbr=l(),sc=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),qbr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(iM.$$.fragment),Obr=l(),kr=a("div"),F(A8.$$.fragment),Vbr=l(),$5e=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zbr=l(),nn=a("p"),Wbr=o("The model class to instantiate is selected based on the "),k5e=a("code"),Qbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),ee=a("ul"),dM=a("li"),P5e=a("strong"),e5r=o("albert"),o5r=o(" \u2014 "),eH=a("a"),r5r=o("TFAlbertForSequenceClassification"),t5r=o(" (ALBERT model)"),a5r=l(),cM=a("li"),B5e=a("strong"),n5r=o("bert"),s5r=o(" \u2014 "),oH=a("a"),l5r=o("TFBertForSequenceClassification"),i5r=o(" (BERT model)"),d5r=l(),fM=a("li"),I5e=a("strong"),c5r=o("camembert"),f5r=o(" \u2014 "),rH=a("a"),m5r=o("TFCamembertForSequenceClassification"),g5r=o(" (CamemBERT model)"),h5r=l(),mM=a("li"),q5e=a("strong"),p5r=o("convbert"),_5r=o(" \u2014 "),tH=a("a"),u5r=o("TFConvBertForSequenceClassification"),b5r=o(" (ConvBERT model)"),v5r=l(),gM=a("li"),N5e=a("strong"),F5r=o("ctrl"),T5r=o(" \u2014 "),aH=a("a"),M5r=o("TFCTRLForSequenceClassification"),E5r=o(" (CTRL model)"),C5r=l(),hM=a("li"),j5e=a("strong"),w5r=o("deberta"),A5r=o(" \u2014 "),nH=a("a"),y5r=o("TFDebertaForSequenceClassification"),L5r=o(" (DeBERTa model)"),x5r=l(),pM=a("li"),D5e=a("strong"),$5r=o("deberta-v2"),k5r=o(" \u2014 "),sH=a("a"),S5r=o("TFDebertaV2ForSequenceClassification"),R5r=o(" (DeBERTa-v2 model)"),P5r=l(),_M=a("li"),G5e=a("strong"),B5r=o("distilbert"),I5r=o(" \u2014 "),lH=a("a"),q5r=o("TFDistilBertForSequenceClassification"),N5r=o(" (DistilBERT model)"),j5r=l(),uM=a("li"),O5e=a("strong"),D5r=o("electra"),G5r=o(" \u2014 "),iH=a("a"),O5r=o("TFElectraForSequenceClassification"),V5r=o(" (ELECTRA model)"),X5r=l(),bM=a("li"),V5e=a("strong"),z5r=o("flaubert"),W5r=o(" \u2014 "),dH=a("a"),Q5r=o("TFFlaubertForSequenceClassification"),H5r=o(" (FlauBERT model)"),U5r=l(),vM=a("li"),X5e=a("strong"),J5r=o("funnel"),Y5r=o(" \u2014 "),cH=a("a"),K5r=o("TFFunnelForSequenceClassification"),Z5r=o(" (Funnel Transformer model)"),evr=l(),FM=a("li"),z5e=a("strong"),ovr=o("gpt2"),rvr=o(" \u2014 "),fH=a("a"),tvr=o("TFGPT2ForSequenceClassification"),avr=o(" (OpenAI GPT-2 model)"),nvr=l(),TM=a("li"),W5e=a("strong"),svr=o("gptj"),lvr=o(" \u2014 "),mH=a("a"),ivr=o("TFGPTJForSequenceClassification"),dvr=o(" (GPT-J model)"),cvr=l(),MM=a("li"),Q5e=a("strong"),fvr=o("layoutlm"),mvr=o(" \u2014 "),gH=a("a"),gvr=o("TFLayoutLMForSequenceClassification"),hvr=o(" (LayoutLM model)"),pvr=l(),EM=a("li"),H5e=a("strong"),_vr=o("longformer"),uvr=o(" \u2014 "),hH=a("a"),bvr=o("TFLongformerForSequenceClassification"),vvr=o(" (Longformer model)"),Fvr=l(),CM=a("li"),U5e=a("strong"),Tvr=o("mobilebert"),Mvr=o(" \u2014 "),pH=a("a"),Evr=o("TFMobileBertForSequenceClassification"),Cvr=o(" (MobileBERT model)"),wvr=l(),wM=a("li"),J5e=a("strong"),Avr=o("mpnet"),yvr=o(" \u2014 "),_H=a("a"),Lvr=o("TFMPNetForSequenceClassification"),xvr=o(" (MPNet model)"),$vr=l(),AM=a("li"),Y5e=a("strong"),kvr=o("openai-gpt"),Svr=o(" \u2014 "),uH=a("a"),Rvr=o("TFOpenAIGPTForSequenceClassification"),Pvr=o(" (OpenAI GPT model)"),Bvr=l(),yM=a("li"),K5e=a("strong"),Ivr=o("rembert"),qvr=o(" \u2014 "),bH=a("a"),Nvr=o("TFRemBertForSequenceClassification"),jvr=o(" (RemBERT model)"),Dvr=l(),LM=a("li"),Z5e=a("strong"),Gvr=o("roberta"),Ovr=o(" \u2014 "),vH=a("a"),Vvr=o("TFRobertaForSequenceClassification"),Xvr=o(" (RoBERTa model)"),zvr=l(),xM=a("li"),eve=a("strong"),Wvr=o("roformer"),Qvr=o(" \u2014 "),FH=a("a"),Hvr=o("TFRoFormerForSequenceClassification"),Uvr=o(" (RoFormer model)"),Jvr=l(),$M=a("li"),ove=a("strong"),Yvr=o("tapas"),Kvr=o(" \u2014 "),TH=a("a"),Zvr=o("TFTapasForSequenceClassification"),e3r=o(" (TAPAS model)"),o3r=l(),kM=a("li"),rve=a("strong"),r3r=o("transfo-xl"),t3r=o(" \u2014 "),MH=a("a"),a3r=o("TFTransfoXLForSequenceClassification"),n3r=o(" (Transformer-XL model)"),s3r=l(),SM=a("li"),tve=a("strong"),l3r=o("xlm"),i3r=o(" \u2014 "),EH=a("a"),d3r=o("TFXLMForSequenceClassification"),c3r=o(" (XLM model)"),f3r=l(),RM=a("li"),ave=a("strong"),m3r=o("xlm-roberta"),g3r=o(" \u2014 "),CH=a("a"),h3r=o("TFXLMRobertaForSequenceClassification"),p3r=o(" (XLM-RoBERTa model)"),_3r=l(),PM=a("li"),nve=a("strong"),u3r=o("xlnet"),b3r=o(" \u2014 "),wH=a("a"),v3r=o("TFXLNetForSequenceClassification"),F3r=o(" (XLNet model)"),T3r=l(),F(BM.$$.fragment),sNe=l(),lc=a("h2"),IM=a("a"),sve=a("span"),F(y8.$$.fragment),M3r=l(),lve=a("span"),E3r=o("TFAutoModelForMultipleChoice"),lNe=l(),ar=a("div"),F(L8.$$.fragment),C3r=l(),ic=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=a("a"),A3r=o("from_pretrained()"),y3r=o(" class method or the "),yH=a("a"),L3r=o("from_config()"),x3r=o(` class
method.`),$3r=l(),x8=a("p"),k3r=o("This class cannot be instantiated directly using "),ive=a("code"),S3r=o("__init__()"),R3r=o(" (throws an error)."),P3r=l(),Pt=a("div"),F($8.$$.fragment),B3r=l(),dve=a("p"),I3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q3r=l(),dc=a("p"),N3r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),j3r=o("not"),D3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),G3r=o("from_pretrained()"),O3r=o(" to load the model weights."),V3r=l(),F(qM.$$.fragment),X3r=l(),Sr=a("div"),F(k8.$$.fragment),z3r=l(),fve=a("p"),W3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q3r=l(),sn=a("p"),H3r=o("The model class to instantiate is selected based on the "),mve=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),Z3r=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),he=a("ul"),NM=a("li"),pve=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),xH=a("a"),aFr=o("TFAlbertForMultipleChoice"),nFr=o(" (ALBERT model)"),sFr=l(),jM=a("li"),_ve=a("strong"),lFr=o("bert"),iFr=o(" \u2014 "),$H=a("a"),dFr=o("TFBertForMultipleChoice"),cFr=o(" (BERT model)"),fFr=l(),DM=a("li"),uve=a("strong"),mFr=o("camembert"),gFr=o(" \u2014 "),kH=a("a"),hFr=o("TFCamembertForMultipleChoice"),pFr=o(" (CamemBERT model)"),_Fr=l(),GM=a("li"),bve=a("strong"),uFr=o("convbert"),bFr=o(" \u2014 "),SH=a("a"),vFr=o("TFConvBertForMultipleChoice"),FFr=o(" (ConvBERT model)"),TFr=l(),OM=a("li"),vve=a("strong"),MFr=o("distilbert"),EFr=o(" \u2014 "),RH=a("a"),CFr=o("TFDistilBertForMultipleChoice"),wFr=o(" (DistilBERT model)"),AFr=l(),VM=a("li"),Fve=a("strong"),yFr=o("electra"),LFr=o(" \u2014 "),PH=a("a"),xFr=o("TFElectraForMultipleChoice"),$Fr=o(" (ELECTRA model)"),kFr=l(),XM=a("li"),Tve=a("strong"),SFr=o("flaubert"),RFr=o(" \u2014 "),BH=a("a"),PFr=o("TFFlaubertForMultipleChoice"),BFr=o(" (FlauBERT model)"),IFr=l(),zM=a("li"),Mve=a("strong"),qFr=o("funnel"),NFr=o(" \u2014 "),IH=a("a"),jFr=o("TFFunnelForMultipleChoice"),DFr=o(" (Funnel Transformer model)"),GFr=l(),WM=a("li"),Eve=a("strong"),OFr=o("longformer"),VFr=o(" \u2014 "),qH=a("a"),XFr=o("TFLongformerForMultipleChoice"),zFr=o(" (Longformer model)"),WFr=l(),QM=a("li"),Cve=a("strong"),QFr=o("mobilebert"),HFr=o(" \u2014 "),NH=a("a"),UFr=o("TFMobileBertForMultipleChoice"),JFr=o(" (MobileBERT model)"),YFr=l(),HM=a("li"),wve=a("strong"),KFr=o("mpnet"),ZFr=o(" \u2014 "),jH=a("a"),eTr=o("TFMPNetForMultipleChoice"),oTr=o(" (MPNet model)"),rTr=l(),UM=a("li"),Ave=a("strong"),tTr=o("rembert"),aTr=o(" \u2014 "),DH=a("a"),nTr=o("TFRemBertForMultipleChoice"),sTr=o(" (RemBERT model)"),lTr=l(),JM=a("li"),yve=a("strong"),iTr=o("roberta"),dTr=o(" \u2014 "),GH=a("a"),cTr=o("TFRobertaForMultipleChoice"),fTr=o(" (RoBERTa model)"),mTr=l(),YM=a("li"),Lve=a("strong"),gTr=o("roformer"),hTr=o(" \u2014 "),OH=a("a"),pTr=o("TFRoFormerForMultipleChoice"),_Tr=o(" (RoFormer model)"),uTr=l(),KM=a("li"),xve=a("strong"),bTr=o("xlm"),vTr=o(" \u2014 "),VH=a("a"),FTr=o("TFXLMForMultipleChoice"),TTr=o(" (XLM model)"),MTr=l(),ZM=a("li"),$ve=a("strong"),ETr=o("xlm-roberta"),CTr=o(" \u2014 "),XH=a("a"),wTr=o("TFXLMRobertaForMultipleChoice"),ATr=o(" (XLM-RoBERTa model)"),yTr=l(),e4=a("li"),kve=a("strong"),LTr=o("xlnet"),xTr=o(" \u2014 "),zH=a("a"),$Tr=o("TFXLNetForMultipleChoice"),kTr=o(" (XLNet model)"),STr=l(),F(o4.$$.fragment),iNe=l(),cc=a("h2"),r4=a("a"),Sve=a("span"),F(S8.$$.fragment),RTr=l(),Rve=a("span"),PTr=o("TFAutoModelForNextSentencePrediction"),dNe=l(),nr=a("div"),F(R8.$$.fragment),BTr=l(),fc=a("p"),ITr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WH=a("a"),qTr=o("from_pretrained()"),NTr=o(" class method or the "),QH=a("a"),jTr=o("from_config()"),DTr=o(` class
method.`),GTr=l(),P8=a("p"),OTr=o("This class cannot be instantiated directly using "),Pve=a("code"),VTr=o("__init__()"),XTr=o(" (throws an error)."),zTr=l(),Bt=a("div"),F(B8.$$.fragment),WTr=l(),Bve=a("p"),QTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HTr=l(),mc=a("p"),UTr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),JTr=o("not"),YTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),KTr=o("from_pretrained()"),ZTr=o(" to load the model weights."),e7r=l(),F(t4.$$.fragment),o7r=l(),Rr=a("div"),F(I8.$$.fragment),r7r=l(),qve=a("p"),t7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a7r=l(),ln=a("p"),n7r=o("The model class to instantiate is selected based on the "),Nve=a("code"),s7r=o("model_type"),l7r=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(":"),m7r=l(),q8=a("ul"),a4=a("li"),Gve=a("strong"),g7r=o("bert"),h7r=o(" \u2014 "),UH=a("a"),p7r=o("TFBertForNextSentencePrediction"),_7r=o(" (BERT model)"),u7r=l(),n4=a("li"),Ove=a("strong"),b7r=o("mobilebert"),v7r=o(" \u2014 "),JH=a("a"),F7r=o("TFMobileBertForNextSentencePrediction"),T7r=o(" (MobileBERT model)"),M7r=l(),F(s4.$$.fragment),cNe=l(),gc=a("h2"),l4=a("a"),Vve=a("span"),F(N8.$$.fragment),E7r=l(),Xve=a("span"),C7r=o("TFAutoModelForTableQuestionAnswering"),fNe=l(),sr=a("div"),F(j8.$$.fragment),w7r=l(),hc=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YH=a("a"),y7r=o("from_pretrained()"),L7r=o(" class method or the "),KH=a("a"),x7r=o("from_config()"),$7r=o(` class
method.`),k7r=l(),D8=a("p"),S7r=o("This class cannot be instantiated directly using "),zve=a("code"),R7r=o("__init__()"),P7r=o(" (throws an error)."),B7r=l(),It=a("div"),F(G8.$$.fragment),I7r=l(),Wve=a("p"),q7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N7r=l(),pc=a("p"),j7r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),D7r=o("not"),G7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),O7r=o("from_pretrained()"),V7r=o(" to load the model weights."),X7r=l(),F(i4.$$.fragment),z7r=l(),Pr=a("div"),F(O8.$$.fragment),W7r=l(),Hve=a("p"),Q7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),H7r=l(),dn=a("p"),U7r=o("The model class to instantiate is selected based on the "),Uve=a("code"),J7r=o("model_type"),Y7r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(":"),rMr=l(),Kve=a("ul"),d4=a("li"),Zve=a("strong"),tMr=o("tapas"),aMr=o(" \u2014 "),eU=a("a"),nMr=o("TFTapasForQuestionAnswering"),sMr=o(" (TAPAS model)"),lMr=l(),F(c4.$$.fragment),mNe=l(),_c=a("h2"),f4=a("a"),e3e=a("span"),F(V8.$$.fragment),iMr=l(),o3e=a("span"),dMr=o("TFAutoModelForTokenClassification"),gNe=l(),lr=a("div"),F(X8.$$.fragment),cMr=l(),uc=a("p"),fMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oU=a("a"),mMr=o("from_pretrained()"),gMr=o(" class method or the "),rU=a("a"),hMr=o("from_config()"),pMr=o(` class
method.`),_Mr=l(),z8=a("p"),uMr=o("This class cannot be instantiated directly using "),r3e=a("code"),bMr=o("__init__()"),vMr=o(" (throws an error)."),FMr=l(),qt=a("div"),F(W8.$$.fragment),TMr=l(),t3e=a("p"),MMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EMr=l(),bc=a("p"),CMr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),wMr=o("not"),AMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),yMr=o("from_pretrained()"),LMr=o(" to load the model weights."),xMr=l(),F(m4.$$.fragment),$Mr=l(),Br=a("div"),F(Q8.$$.fragment),kMr=l(),n3e=a("p"),SMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RMr=l(),cn=a("p"),PMr=o("The model class to instantiate is selected based on the "),s3e=a("code"),BMr=o("model_type"),IMr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),qMr=o("pretrained_model_name_or_path"),NMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(":"),GMr=l(),de=a("ul"),g4=a("li"),d3e=a("strong"),OMr=o("albert"),VMr=o(" \u2014 "),aU=a("a"),XMr=o("TFAlbertForTokenClassification"),zMr=o(" (ALBERT model)"),WMr=l(),h4=a("li"),c3e=a("strong"),QMr=o("bert"),HMr=o(" \u2014 "),nU=a("a"),UMr=o("TFBertForTokenClassification"),JMr=o(" (BERT model)"),YMr=l(),p4=a("li"),f3e=a("strong"),KMr=o("camembert"),ZMr=o(" \u2014 "),sU=a("a"),e4r=o("TFCamembertForTokenClassification"),o4r=o(" (CamemBERT model)"),r4r=l(),_4=a("li"),m3e=a("strong"),t4r=o("convbert"),a4r=o(" \u2014 "),lU=a("a"),n4r=o("TFConvBertForTokenClassification"),s4r=o(" (ConvBERT model)"),l4r=l(),u4=a("li"),g3e=a("strong"),i4r=o("deberta"),d4r=o(" \u2014 "),iU=a("a"),c4r=o("TFDebertaForTokenClassification"),f4r=o(" (DeBERTa model)"),m4r=l(),b4=a("li"),h3e=a("strong"),g4r=o("deberta-v2"),h4r=o(" \u2014 "),dU=a("a"),p4r=o("TFDebertaV2ForTokenClassification"),_4r=o(" (DeBERTa-v2 model)"),u4r=l(),v4=a("li"),p3e=a("strong"),b4r=o("distilbert"),v4r=o(" \u2014 "),cU=a("a"),F4r=o("TFDistilBertForTokenClassification"),T4r=o(" (DistilBERT model)"),M4r=l(),F4=a("li"),_3e=a("strong"),E4r=o("electra"),C4r=o(" \u2014 "),fU=a("a"),w4r=o("TFElectraForTokenClassification"),A4r=o(" (ELECTRA model)"),y4r=l(),T4=a("li"),u3e=a("strong"),L4r=o("flaubert"),x4r=o(" \u2014 "),mU=a("a"),$4r=o("TFFlaubertForTokenClassification"),k4r=o(" (FlauBERT model)"),S4r=l(),M4=a("li"),b3e=a("strong"),R4r=o("funnel"),P4r=o(" \u2014 "),gU=a("a"),B4r=o("TFFunnelForTokenClassification"),I4r=o(" (Funnel Transformer model)"),q4r=l(),E4=a("li"),v3e=a("strong"),N4r=o("layoutlm"),j4r=o(" \u2014 "),hU=a("a"),D4r=o("TFLayoutLMForTokenClassification"),G4r=o(" (LayoutLM model)"),O4r=l(),C4=a("li"),F3e=a("strong"),V4r=o("longformer"),X4r=o(" \u2014 "),pU=a("a"),z4r=o("TFLongformerForTokenClassification"),W4r=o(" (Longformer model)"),Q4r=l(),w4=a("li"),T3e=a("strong"),H4r=o("mobilebert"),U4r=o(" \u2014 "),_U=a("a"),J4r=o("TFMobileBertForTokenClassification"),Y4r=o(" (MobileBERT model)"),K4r=l(),A4=a("li"),M3e=a("strong"),Z4r=o("mpnet"),eEr=o(" \u2014 "),uU=a("a"),oEr=o("TFMPNetForTokenClassification"),rEr=o(" (MPNet model)"),tEr=l(),y4=a("li"),E3e=a("strong"),aEr=o("rembert"),nEr=o(" \u2014 "),bU=a("a"),sEr=o("TFRemBertForTokenClassification"),lEr=o(" (RemBERT model)"),iEr=l(),L4=a("li"),C3e=a("strong"),dEr=o("roberta"),cEr=o(" \u2014 "),vU=a("a"),fEr=o("TFRobertaForTokenClassification"),mEr=o(" (RoBERTa model)"),gEr=l(),x4=a("li"),w3e=a("strong"),hEr=o("roformer"),pEr=o(" \u2014 "),FU=a("a"),_Er=o("TFRoFormerForTokenClassification"),uEr=o(" (RoFormer model)"),bEr=l(),$4=a("li"),A3e=a("strong"),vEr=o("xlm"),FEr=o(" \u2014 "),TU=a("a"),TEr=o("TFXLMForTokenClassification"),MEr=o(" (XLM model)"),EEr=l(),k4=a("li"),y3e=a("strong"),CEr=o("xlm-roberta"),wEr=o(" \u2014 "),MU=a("a"),AEr=o("TFXLMRobertaForTokenClassification"),yEr=o(" (XLM-RoBERTa model)"),LEr=l(),S4=a("li"),L3e=a("strong"),xEr=o("xlnet"),$Er=o(" \u2014 "),EU=a("a"),kEr=o("TFXLNetForTokenClassification"),SEr=o(" (XLNet model)"),REr=l(),F(R4.$$.fragment),hNe=l(),vc=a("h2"),P4=a("a"),x3e=a("span"),F(H8.$$.fragment),PEr=l(),$3e=a("span"),BEr=o("TFAutoModelForQuestionAnswering"),pNe=l(),ir=a("div"),F(U8.$$.fragment),IEr=l(),Fc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CU=a("a"),NEr=o("from_pretrained()"),jEr=o(" class method or the "),wU=a("a"),DEr=o("from_config()"),GEr=o(` class
method.`),OEr=l(),J8=a("p"),VEr=o("This class cannot be instantiated directly using "),k3e=a("code"),XEr=o("__init__()"),zEr=o(" (throws an error)."),WEr=l(),Nt=a("div"),F(Y8.$$.fragment),QEr=l(),S3e=a("p"),HEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UEr=l(),Tc=a("p"),JEr=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),YEr=o("not"),KEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),ZEr=o("from_pretrained()"),eCr=o(" to load the model weights."),oCr=l(),F(B4.$$.fragment),rCr=l(),Ir=a("div"),F(K8.$$.fragment),tCr=l(),P3e=a("p"),aCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nCr=l(),fn=a("p"),sCr=o("The model class to instantiate is selected based on the "),B3e=a("code"),lCr=o("model_type"),iCr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),dCr=o("pretrained_model_name_or_path"),cCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),fCr=o("pretrained_model_name_or_path"),mCr=o(":"),gCr=l(),ce=a("ul"),I4=a("li"),N3e=a("strong"),hCr=o("albert"),pCr=o(" \u2014 "),yU=a("a"),_Cr=o("TFAlbertForQuestionAnswering"),uCr=o(" (ALBERT model)"),bCr=l(),q4=a("li"),j3e=a("strong"),vCr=o("bert"),FCr=o(" \u2014 "),LU=a("a"),TCr=o("TFBertForQuestionAnswering"),MCr=o(" (BERT model)"),ECr=l(),N4=a("li"),D3e=a("strong"),CCr=o("camembert"),wCr=o(" \u2014 "),xU=a("a"),ACr=o("TFCamembertForQuestionAnswering"),yCr=o(" (CamemBERT model)"),LCr=l(),j4=a("li"),G3e=a("strong"),xCr=o("convbert"),$Cr=o(" \u2014 "),$U=a("a"),kCr=o("TFConvBertForQuestionAnswering"),SCr=o(" (ConvBERT model)"),RCr=l(),D4=a("li"),O3e=a("strong"),PCr=o("deberta"),BCr=o(" \u2014 "),kU=a("a"),ICr=o("TFDebertaForQuestionAnswering"),qCr=o(" (DeBERTa model)"),NCr=l(),G4=a("li"),V3e=a("strong"),jCr=o("deberta-v2"),DCr=o(" \u2014 "),SU=a("a"),GCr=o("TFDebertaV2ForQuestionAnswering"),OCr=o(" (DeBERTa-v2 model)"),VCr=l(),O4=a("li"),X3e=a("strong"),XCr=o("distilbert"),zCr=o(" \u2014 "),RU=a("a"),WCr=o("TFDistilBertForQuestionAnswering"),QCr=o(" (DistilBERT model)"),HCr=l(),V4=a("li"),z3e=a("strong"),UCr=o("electra"),JCr=o(" \u2014 "),PU=a("a"),YCr=o("TFElectraForQuestionAnswering"),KCr=o(" (ELECTRA model)"),ZCr=l(),X4=a("li"),W3e=a("strong"),ewr=o("flaubert"),owr=o(" \u2014 "),BU=a("a"),rwr=o("TFFlaubertForQuestionAnsweringSimple"),twr=o(" (FlauBERT model)"),awr=l(),z4=a("li"),Q3e=a("strong"),nwr=o("funnel"),swr=o(" \u2014 "),IU=a("a"),lwr=o("TFFunnelForQuestionAnswering"),iwr=o(" (Funnel Transformer model)"),dwr=l(),W4=a("li"),H3e=a("strong"),cwr=o("gptj"),fwr=o(" \u2014 "),qU=a("a"),mwr=o("TFGPTJForQuestionAnswering"),gwr=o(" (GPT-J model)"),hwr=l(),Q4=a("li"),U3e=a("strong"),pwr=o("longformer"),_wr=o(" \u2014 "),NU=a("a"),uwr=o("TFLongformerForQuestionAnswering"),bwr=o(" (Longformer model)"),vwr=l(),H4=a("li"),J3e=a("strong"),Fwr=o("mobilebert"),Twr=o(" \u2014 "),jU=a("a"),Mwr=o("TFMobileBertForQuestionAnswering"),Ewr=o(" (MobileBERT model)"),Cwr=l(),U4=a("li"),Y3e=a("strong"),wwr=o("mpnet"),Awr=o(" \u2014 "),DU=a("a"),ywr=o("TFMPNetForQuestionAnswering"),Lwr=o(" (MPNet model)"),xwr=l(),J4=a("li"),K3e=a("strong"),$wr=o("rembert"),kwr=o(" \u2014 "),GU=a("a"),Swr=o("TFRemBertForQuestionAnswering"),Rwr=o(" (RemBERT model)"),Pwr=l(),Y4=a("li"),Z3e=a("strong"),Bwr=o("roberta"),Iwr=o(" \u2014 "),OU=a("a"),qwr=o("TFRobertaForQuestionAnswering"),Nwr=o(" (RoBERTa model)"),jwr=l(),K4=a("li"),eFe=a("strong"),Dwr=o("roformer"),Gwr=o(" \u2014 "),VU=a("a"),Owr=o("TFRoFormerForQuestionAnswering"),Vwr=o(" (RoFormer model)"),Xwr=l(),Z4=a("li"),oFe=a("strong"),zwr=o("xlm"),Wwr=o(" \u2014 "),XU=a("a"),Qwr=o("TFXLMForQuestionAnsweringSimple"),Hwr=o(" (XLM model)"),Uwr=l(),eE=a("li"),rFe=a("strong"),Jwr=o("xlm-roberta"),Ywr=o(" \u2014 "),zU=a("a"),Kwr=o("TFXLMRobertaForQuestionAnswering"),Zwr=o(" (XLM-RoBERTa model)"),e0r=l(),oE=a("li"),tFe=a("strong"),o0r=o("xlnet"),r0r=o(" \u2014 "),WU=a("a"),t0r=o("TFXLNetForQuestionAnsweringSimple"),a0r=o(" (XLNet model)"),n0r=l(),F(rE.$$.fragment),_Ne=l(),Mc=a("h2"),tE=a("a"),aFe=a("span"),F(Z8.$$.fragment),s0r=l(),nFe=a("span"),l0r=o("TFAutoModelForVision2Seq"),uNe=l(),dr=a("div"),F(ex.$$.fragment),i0r=l(),Ec=a("p"),d0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QU=a("a"),c0r=o("from_pretrained()"),f0r=o(" class method or the "),HU=a("a"),m0r=o("from_config()"),g0r=o(` class
method.`),h0r=l(),ox=a("p"),p0r=o("This class cannot be instantiated directly using "),sFe=a("code"),_0r=o("__init__()"),u0r=o(" (throws an error)."),b0r=l(),jt=a("div"),F(rx.$$.fragment),v0r=l(),lFe=a("p"),F0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T0r=l(),Cc=a("p"),M0r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),E0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),w0r=o("from_pretrained()"),A0r=o(" to load the model weights."),y0r=l(),F(aE.$$.fragment),L0r=l(),qr=a("div"),F(tx.$$.fragment),x0r=l(),dFe=a("p"),$0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k0r=l(),mn=a("p"),S0r=o("The model class to instantiate is selected based on the "),cFe=a("code"),R0r=o("model_type"),P0r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),B0r=o("pretrained_model_name_or_path"),I0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),q0r=o("pretrained_model_name_or_path"),N0r=o(":"),j0r=l(),gFe=a("ul"),nE=a("li"),hFe=a("strong"),D0r=o("vision-encoder-decoder"),G0r=o(" \u2014 "),JU=a("a"),O0r=o("TFVisionEncoderDecoderModel"),V0r=o(" (Vision Encoder decoder model)"),X0r=l(),F(sE.$$.fragment),bNe=l(),wc=a("h2"),lE=a("a"),pFe=a("span"),F(ax.$$.fragment),z0r=l(),_Fe=a("span"),W0r=o("TFAutoModelForSpeechSeq2Seq"),vNe=l(),cr=a("div"),F(nx.$$.fragment),Q0r=l(),Ac=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YU=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),KU=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),sx=a("p"),eAr=o("This class cannot be instantiated directly using "),uFe=a("code"),oAr=o("__init__()"),rAr=o(" (throws an error)."),tAr=l(),Dt=a("div"),F(lx.$$.fragment),aAr=l(),bFe=a("p"),nAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sAr=l(),yc=a("p"),lAr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),iAr=o("not"),dAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),cAr=o("from_pretrained()"),fAr=o(" to load the model weights."),mAr=l(),F(iE.$$.fragment),gAr=l(),Nr=a("div"),F(ix.$$.fragment),hAr=l(),FFe=a("p"),pAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Ar=l(),gn=a("p"),uAr=o("The model class to instantiate is selected based on the "),TFe=a("code"),bAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),CAr=l(),CFe=a("ul"),dE=a("li"),wFe=a("strong"),wAr=o("speech_to_text"),AAr=o(" \u2014 "),eJ=a("a"),yAr=o("TFSpeech2TextForConditionalGeneration"),LAr=o(" (Speech2Text model)"),xAr=l(),F(cE.$$.fragment),FNe=l(),Lc=a("h2"),fE=a("a"),AFe=a("span"),F(dx.$$.fragment),$Ar=l(),yFe=a("span"),kAr=o("FlaxAutoModel"),TNe=l(),fr=a("div"),F(cx.$$.fragment),SAr=l(),xc=a("p"),RAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oJ=a("a"),PAr=o("from_pretrained()"),BAr=o(" class method or the "),rJ=a("a"),IAr=o("from_config()"),qAr=o(` class
method.`),NAr=l(),fx=a("p"),jAr=o("This class cannot be instantiated directly using "),LFe=a("code"),DAr=o("__init__()"),GAr=o(" (throws an error)."),OAr=l(),Gt=a("div"),F(mx.$$.fragment),VAr=l(),xFe=a("p"),XAr=o("Instantiates one of the base model classes of the library from a configuration."),zAr=l(),$c=a("p"),WAr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),QAr=o("not"),HAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),UAr=o("from_pretrained()"),JAr=o(" to load the model weights."),YAr=l(),F(mE.$$.fragment),KAr=l(),jr=a("div"),F(gx.$$.fragment),ZAr=l(),kFe=a("p"),e6r=o("Instantiate one of the base model classes of the library from a pretrained model."),o6r=l(),hn=a("p"),r6r=o("The model class to instantiate is selected based on the "),SFe=a("code"),t6r=o("model_type"),a6r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(":"),d6r=l(),te=a("ul"),gE=a("li"),BFe=a("strong"),c6r=o("albert"),f6r=o(" \u2014 "),aJ=a("a"),m6r=o("FlaxAlbertModel"),g6r=o(" (ALBERT model)"),h6r=l(),hE=a("li"),IFe=a("strong"),p6r=o("bart"),_6r=o(" \u2014 "),nJ=a("a"),u6r=o("FlaxBartModel"),b6r=o(" (BART model)"),v6r=l(),pE=a("li"),qFe=a("strong"),F6r=o("beit"),T6r=o(" \u2014 "),sJ=a("a"),M6r=o("FlaxBeitModel"),E6r=o(" (BEiT model)"),C6r=l(),_E=a("li"),NFe=a("strong"),w6r=o("bert"),A6r=o(" \u2014 "),lJ=a("a"),y6r=o("FlaxBertModel"),L6r=o(" (BERT model)"),x6r=l(),uE=a("li"),jFe=a("strong"),$6r=o("big_bird"),k6r=o(" \u2014 "),iJ=a("a"),S6r=o("FlaxBigBirdModel"),R6r=o(" (BigBird model)"),P6r=l(),bE=a("li"),DFe=a("strong"),B6r=o("blenderbot"),I6r=o(" \u2014 "),dJ=a("a"),q6r=o("FlaxBlenderbotModel"),N6r=o(" (Blenderbot model)"),j6r=l(),vE=a("li"),GFe=a("strong"),D6r=o("blenderbot-small"),G6r=o(" \u2014 "),cJ=a("a"),O6r=o("FlaxBlenderbotSmallModel"),V6r=o(" (BlenderbotSmall model)"),X6r=l(),FE=a("li"),OFe=a("strong"),z6r=o("clip"),W6r=o(" \u2014 "),fJ=a("a"),Q6r=o("FlaxCLIPModel"),H6r=o(" (CLIP model)"),U6r=l(),TE=a("li"),VFe=a("strong"),J6r=o("distilbert"),Y6r=o(" \u2014 "),mJ=a("a"),K6r=o("FlaxDistilBertModel"),Z6r=o(" (DistilBERT model)"),eyr=l(),ME=a("li"),XFe=a("strong"),oyr=o("electra"),ryr=o(" \u2014 "),gJ=a("a"),tyr=o("FlaxElectraModel"),ayr=o(" (ELECTRA model)"),nyr=l(),EE=a("li"),zFe=a("strong"),syr=o("gpt2"),lyr=o(" \u2014 "),hJ=a("a"),iyr=o("FlaxGPT2Model"),dyr=o(" (OpenAI GPT-2 model)"),cyr=l(),CE=a("li"),WFe=a("strong"),fyr=o("gpt_neo"),myr=o(" \u2014 "),pJ=a("a"),gyr=o("FlaxGPTNeoModel"),hyr=o(" (GPT Neo model)"),pyr=l(),wE=a("li"),QFe=a("strong"),_yr=o("gptj"),uyr=o(" \u2014 "),_J=a("a"),byr=o("FlaxGPTJModel"),vyr=o(" (GPT-J model)"),Fyr=l(),AE=a("li"),HFe=a("strong"),Tyr=o("marian"),Myr=o(" \u2014 "),uJ=a("a"),Eyr=o("FlaxMarianModel"),Cyr=o(" (Marian model)"),wyr=l(),yE=a("li"),UFe=a("strong"),Ayr=o("mbart"),yyr=o(" \u2014 "),bJ=a("a"),Lyr=o("FlaxMBartModel"),xyr=o(" (mBART model)"),$yr=l(),LE=a("li"),JFe=a("strong"),kyr=o("mt5"),Syr=o(" \u2014 "),vJ=a("a"),Ryr=o("FlaxMT5Model"),Pyr=o(" (mT5 model)"),Byr=l(),xE=a("li"),YFe=a("strong"),Iyr=o("pegasus"),qyr=o(" \u2014 "),FJ=a("a"),Nyr=o("FlaxPegasusModel"),jyr=o(" (Pegasus model)"),Dyr=l(),$E=a("li"),KFe=a("strong"),Gyr=o("roberta"),Oyr=o(" \u2014 "),TJ=a("a"),Vyr=o("FlaxRobertaModel"),Xyr=o(" (RoBERTa model)"),zyr=l(),kE=a("li"),ZFe=a("strong"),Wyr=o("roformer"),Qyr=o(" \u2014 "),MJ=a("a"),Hyr=o("FlaxRoFormerModel"),Uyr=o(" (RoFormer model)"),Jyr=l(),SE=a("li"),eTe=a("strong"),Yyr=o("t5"),Kyr=o(" \u2014 "),EJ=a("a"),Zyr=o("FlaxT5Model"),eLr=o(" (T5 model)"),oLr=l(),RE=a("li"),oTe=a("strong"),rLr=o("vision-text-dual-encoder"),tLr=o(" \u2014 "),CJ=a("a"),aLr=o("FlaxVisionTextDualEncoderModel"),nLr=o(" (VisionTextDualEncoder model)"),sLr=l(),PE=a("li"),rTe=a("strong"),lLr=o("vit"),iLr=o(" \u2014 "),wJ=a("a"),dLr=o("FlaxViTModel"),cLr=o(" (ViT model)"),fLr=l(),BE=a("li"),tTe=a("strong"),mLr=o("wav2vec2"),gLr=o(" \u2014 "),AJ=a("a"),hLr=o("FlaxWav2Vec2Model"),pLr=o(" (Wav2Vec2 model)"),_Lr=l(),IE=a("li"),aTe=a("strong"),uLr=o("xglm"),bLr=o(" \u2014 "),yJ=a("a"),vLr=o("FlaxXGLMModel"),FLr=o(" (XGLM model)"),TLr=l(),qE=a("li"),nTe=a("strong"),MLr=o("xlm-roberta"),ELr=o(" \u2014 "),LJ=a("a"),CLr=o("FlaxXLMRobertaModel"),wLr=o(" (XLM-RoBERTa model)"),ALr=l(),F(NE.$$.fragment),MNe=l(),kc=a("h2"),jE=a("a"),sTe=a("span"),F(hx.$$.fragment),yLr=l(),lTe=a("span"),LLr=o("FlaxAutoModelForCausalLM"),ENe=l(),mr=a("div"),F(px.$$.fragment),xLr=l(),Sc=a("p"),$Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=a("a"),kLr=o("from_pretrained()"),SLr=o(" class method or the "),$J=a("a"),RLr=o("from_config()"),PLr=o(` class
method.`),BLr=l(),_x=a("p"),ILr=o("This class cannot be instantiated directly using "),iTe=a("code"),qLr=o("__init__()"),NLr=o(" (throws an error)."),jLr=l(),Ot=a("div"),F(ux.$$.fragment),DLr=l(),dTe=a("p"),GLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OLr=l(),Rc=a("p"),VLr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),XLr=o("not"),zLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),WLr=o("from_pretrained()"),QLr=o(" to load the model weights."),HLr=l(),F(DE.$$.fragment),ULr=l(),Dr=a("div"),F(bx.$$.fragment),JLr=l(),fTe=a("p"),YLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KLr=l(),pn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),mTe=a("code"),e8r=o("model_type"),o8r=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),r8r=o("pretrained_model_name_or_path"),t8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(":"),s8r=l(),Re=a("ul"),GE=a("li"),pTe=a("strong"),l8r=o("bart"),i8r=o(" \u2014 "),SJ=a("a"),d8r=o("FlaxBartForCausalLM"),c8r=o(" (BART model)"),f8r=l(),OE=a("li"),_Te=a("strong"),m8r=o("bert"),g8r=o(" \u2014 "),RJ=a("a"),h8r=o("FlaxBertForCausalLM"),p8r=o(" (BERT model)"),_8r=l(),VE=a("li"),uTe=a("strong"),u8r=o("big_bird"),b8r=o(" \u2014 "),PJ=a("a"),v8r=o("FlaxBigBirdForCausalLM"),F8r=o(" (BigBird model)"),T8r=l(),XE=a("li"),bTe=a("strong"),M8r=o("electra"),E8r=o(" \u2014 "),BJ=a("a"),C8r=o("FlaxElectraForCausalLM"),w8r=o(" (ELECTRA model)"),A8r=l(),zE=a("li"),vTe=a("strong"),y8r=o("gpt2"),L8r=o(" \u2014 "),IJ=a("a"),x8r=o("FlaxGPT2LMHeadModel"),$8r=o(" (OpenAI GPT-2 model)"),k8r=l(),WE=a("li"),FTe=a("strong"),S8r=o("gpt_neo"),R8r=o(" \u2014 "),qJ=a("a"),P8r=o("FlaxGPTNeoForCausalLM"),B8r=o(" (GPT Neo model)"),I8r=l(),QE=a("li"),TTe=a("strong"),q8r=o("gptj"),N8r=o(" \u2014 "),NJ=a("a"),j8r=o("FlaxGPTJForCausalLM"),D8r=o(" (GPT-J model)"),G8r=l(),HE=a("li"),MTe=a("strong"),O8r=o("roberta"),V8r=o(" \u2014 "),jJ=a("a"),X8r=o("FlaxRobertaForCausalLM"),z8r=o(" (RoBERTa model)"),W8r=l(),UE=a("li"),ETe=a("strong"),Q8r=o("xglm"),H8r=o(" \u2014 "),DJ=a("a"),U8r=o("FlaxXGLMForCausalLM"),J8r=o(" (XGLM model)"),Y8r=l(),F(JE.$$.fragment),CNe=l(),Pc=a("h2"),YE=a("a"),CTe=a("span"),F(vx.$$.fragment),K8r=l(),wTe=a("span"),Z8r=o("FlaxAutoModelForPreTraining"),wNe=l(),gr=a("div"),F(Fx.$$.fragment),exr=l(),Bc=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GJ=a("a"),rxr=o("from_pretrained()"),txr=o(" class method or the "),OJ=a("a"),axr=o("from_config()"),nxr=o(` class
method.`),sxr=l(),Tx=a("p"),lxr=o("This class cannot be instantiated directly using "),ATe=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),Vt=a("div"),F(Mx.$$.fragment),fxr=l(),yTe=a("p"),mxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gxr=l(),Ic=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),pxr=o("not"),_xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),uxr=o("from_pretrained()"),bxr=o(" to load the model weights."),vxr=l(),F(KE.$$.fragment),Fxr=l(),Gr=a("div"),F(Ex.$$.fragment),Txr=l(),xTe=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Exr=l(),_n=a("p"),Cxr=o("The model class to instantiate is selected based on the "),$Te=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),xxr=o("pretrained_model_name_or_path"),$xr=o(":"),kxr=l(),Ee=a("ul"),ZE=a("li"),RTe=a("strong"),Sxr=o("albert"),Rxr=o(" \u2014 "),XJ=a("a"),Pxr=o("FlaxAlbertForPreTraining"),Bxr=o(" (ALBERT model)"),Ixr=l(),eC=a("li"),PTe=a("strong"),qxr=o("bart"),Nxr=o(" \u2014 "),zJ=a("a"),jxr=o("FlaxBartForConditionalGeneration"),Dxr=o(" (BART model)"),Gxr=l(),oC=a("li"),BTe=a("strong"),Oxr=o("bert"),Vxr=o(" \u2014 "),WJ=a("a"),Xxr=o("FlaxBertForPreTraining"),zxr=o(" (BERT model)"),Wxr=l(),rC=a("li"),ITe=a("strong"),Qxr=o("big_bird"),Hxr=o(" \u2014 "),QJ=a("a"),Uxr=o("FlaxBigBirdForPreTraining"),Jxr=o(" (BigBird model)"),Yxr=l(),tC=a("li"),qTe=a("strong"),Kxr=o("electra"),Zxr=o(" \u2014 "),HJ=a("a"),e9r=o("FlaxElectraForPreTraining"),o9r=o(" (ELECTRA model)"),r9r=l(),aC=a("li"),NTe=a("strong"),t9r=o("mbart"),a9r=o(" \u2014 "),UJ=a("a"),n9r=o("FlaxMBartForConditionalGeneration"),s9r=o(" (mBART model)"),l9r=l(),nC=a("li"),jTe=a("strong"),i9r=o("mt5"),d9r=o(" \u2014 "),JJ=a("a"),c9r=o("FlaxMT5ForConditionalGeneration"),f9r=o(" (mT5 model)"),m9r=l(),sC=a("li"),DTe=a("strong"),g9r=o("roberta"),h9r=o(" \u2014 "),YJ=a("a"),p9r=o("FlaxRobertaForMaskedLM"),_9r=o(" (RoBERTa model)"),u9r=l(),lC=a("li"),GTe=a("strong"),b9r=o("roformer"),v9r=o(" \u2014 "),KJ=a("a"),F9r=o("FlaxRoFormerForMaskedLM"),T9r=o(" (RoFormer model)"),M9r=l(),iC=a("li"),OTe=a("strong"),E9r=o("t5"),C9r=o(" \u2014 "),ZJ=a("a"),w9r=o("FlaxT5ForConditionalGeneration"),A9r=o(" (T5 model)"),y9r=l(),dC=a("li"),VTe=a("strong"),L9r=o("wav2vec2"),x9r=o(" \u2014 "),eY=a("a"),$9r=o("FlaxWav2Vec2ForPreTraining"),k9r=o(" (Wav2Vec2 model)"),S9r=l(),cC=a("li"),XTe=a("strong"),R9r=o("xlm-roberta"),P9r=o(" \u2014 "),oY=a("a"),B9r=o("FlaxXLMRobertaForMaskedLM"),I9r=o(" (XLM-RoBERTa model)"),q9r=l(),F(fC.$$.fragment),ANe=l(),qc=a("h2"),mC=a("a"),zTe=a("span"),F(Cx.$$.fragment),N9r=l(),WTe=a("span"),j9r=o("FlaxAutoModelForMaskedLM"),yNe=l(),hr=a("div"),F(wx.$$.fragment),D9r=l(),Nc=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),tY=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),W9r=l(),Ax=a("p"),Q9r=o("This class cannot be instantiated directly using "),QTe=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),Xt=a("div"),F(yx.$$.fragment),Y9r=l(),HTe=a("p"),K9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z9r=l(),jc=a("p"),e$r=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),o$r=o("not"),r$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),t$r=o("from_pretrained()"),a$r=o(" to load the model weights."),n$r=l(),F(gC.$$.fragment),s$r=l(),Or=a("div"),F(Lx.$$.fragment),l$r=l(),JTe=a("p"),i$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d$r=l(),un=a("p"),c$r=o("The model class to instantiate is selected based on the "),YTe=a("code"),f$r=o("model_type"),m$r=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(":"),u$r=l(),Le=a("ul"),hC=a("li"),e7e=a("strong"),b$r=o("albert"),v$r=o(" \u2014 "),nY=a("a"),F$r=o("FlaxAlbertForMaskedLM"),T$r=o(" (ALBERT model)"),M$r=l(),pC=a("li"),o7e=a("strong"),E$r=o("bart"),C$r=o(" \u2014 "),sY=a("a"),w$r=o("FlaxBartForConditionalGeneration"),A$r=o(" (BART model)"),y$r=l(),_C=a("li"),r7e=a("strong"),L$r=o("bert"),x$r=o(" \u2014 "),lY=a("a"),$$r=o("FlaxBertForMaskedLM"),k$r=o(" (BERT model)"),S$r=l(),uC=a("li"),t7e=a("strong"),R$r=o("big_bird"),P$r=o(" \u2014 "),iY=a("a"),B$r=o("FlaxBigBirdForMaskedLM"),I$r=o(" (BigBird model)"),q$r=l(),bC=a("li"),a7e=a("strong"),N$r=o("distilbert"),j$r=o(" \u2014 "),dY=a("a"),D$r=o("FlaxDistilBertForMaskedLM"),G$r=o(" (DistilBERT model)"),O$r=l(),vC=a("li"),n7e=a("strong"),V$r=o("electra"),X$r=o(" \u2014 "),cY=a("a"),z$r=o("FlaxElectraForMaskedLM"),W$r=o(" (ELECTRA model)"),Q$r=l(),FC=a("li"),s7e=a("strong"),H$r=o("mbart"),U$r=o(" \u2014 "),fY=a("a"),J$r=o("FlaxMBartForConditionalGeneration"),Y$r=o(" (mBART model)"),K$r=l(),TC=a("li"),l7e=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),mY=a("a"),okr=o("FlaxRobertaForMaskedLM"),rkr=o(" (RoBERTa model)"),tkr=l(),MC=a("li"),i7e=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),gY=a("a"),skr=o("FlaxRoFormerForMaskedLM"),lkr=o(" (RoFormer model)"),ikr=l(),EC=a("li"),d7e=a("strong"),dkr=o("xlm-roberta"),ckr=o(" \u2014 "),hY=a("a"),fkr=o("FlaxXLMRobertaForMaskedLM"),mkr=o(" (XLM-RoBERTa model)"),gkr=l(),F(CC.$$.fragment),LNe=l(),Dc=a("h2"),wC=a("a"),c7e=a("span"),F(xx.$$.fragment),hkr=l(),f7e=a("span"),pkr=o("FlaxAutoModelForSeq2SeqLM"),xNe=l(),pr=a("div"),F($x.$$.fragment),_kr=l(),Gc=a("p"),ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pY=a("a"),bkr=o("from_pretrained()"),vkr=o(" class method or the "),_Y=a("a"),Fkr=o("from_config()"),Tkr=o(` class
method.`),Mkr=l(),kx=a("p"),Ekr=o("This class cannot be instantiated directly using "),m7e=a("code"),Ckr=o("__init__()"),wkr=o(" (throws an error)."),Akr=l(),zt=a("div"),F(Sx.$$.fragment),ykr=l(),g7e=a("p"),Lkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xkr=l(),Oc=a("p"),$kr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),kkr=o("not"),Skr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),Rkr=o("from_pretrained()"),Pkr=o(" to load the model weights."),Bkr=l(),F(AC.$$.fragment),Ikr=l(),Vr=a("div"),F(Rx.$$.fragment),qkr=l(),p7e=a("p"),Nkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jkr=l(),bn=a("p"),Dkr=o("The model class to instantiate is selected based on the "),_7e=a("code"),Gkr=o("model_type"),Okr=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),zkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Qkr=l(),Pe=a("ul"),yC=a("li"),v7e=a("strong"),Hkr=o("bart"),Ukr=o(" \u2014 "),bY=a("a"),Jkr=o("FlaxBartForConditionalGeneration"),Ykr=o(" (BART model)"),Kkr=l(),LC=a("li"),F7e=a("strong"),Zkr=o("blenderbot"),eSr=o(" \u2014 "),vY=a("a"),oSr=o("FlaxBlenderbotForConditionalGeneration"),rSr=o(" (Blenderbot model)"),tSr=l(),xC=a("li"),T7e=a("strong"),aSr=o("blenderbot-small"),nSr=o(" \u2014 "),FY=a("a"),sSr=o("FlaxBlenderbotSmallForConditionalGeneration"),lSr=o(" (BlenderbotSmall model)"),iSr=l(),$C=a("li"),M7e=a("strong"),dSr=o("encoder-decoder"),cSr=o(" \u2014 "),TY=a("a"),fSr=o("FlaxEncoderDecoderModel"),mSr=o(" (Encoder decoder model)"),gSr=l(),kC=a("li"),E7e=a("strong"),hSr=o("marian"),pSr=o(" \u2014 "),MY=a("a"),_Sr=o("FlaxMarianMTModel"),uSr=o(" (Marian model)"),bSr=l(),SC=a("li"),C7e=a("strong"),vSr=o("mbart"),FSr=o(" \u2014 "),EY=a("a"),TSr=o("FlaxMBartForConditionalGeneration"),MSr=o(" (mBART model)"),ESr=l(),RC=a("li"),w7e=a("strong"),CSr=o("mt5"),wSr=o(" \u2014 "),CY=a("a"),ASr=o("FlaxMT5ForConditionalGeneration"),ySr=o(" (mT5 model)"),LSr=l(),PC=a("li"),A7e=a("strong"),xSr=o("pegasus"),$Sr=o(" \u2014 "),wY=a("a"),kSr=o("FlaxPegasusForConditionalGeneration"),SSr=o(" (Pegasus model)"),RSr=l(),BC=a("li"),y7e=a("strong"),PSr=o("t5"),BSr=o(" \u2014 "),AY=a("a"),ISr=o("FlaxT5ForConditionalGeneration"),qSr=o(" (T5 model)"),NSr=l(),F(IC.$$.fragment),$Ne=l(),Vc=a("h2"),qC=a("a"),L7e=a("span"),F(Px.$$.fragment),jSr=l(),x7e=a("span"),DSr=o("FlaxAutoModelForSequenceClassification"),kNe=l(),_r=a("div"),F(Bx.$$.fragment),GSr=l(),Xc=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yY=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),LY=a("a"),zSr=o("from_config()"),WSr=o(` class
method.`),QSr=l(),Ix=a("p"),HSr=o("This class cannot be instantiated directly using "),$7e=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),Wt=a("div"),F(qx.$$.fragment),KSr=l(),k7e=a("p"),ZSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eRr=l(),zc=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),F(NC.$$.fragment),lRr=l(),Xr=a("div"),F(Nx.$$.fragment),iRr=l(),R7e=a("p"),dRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cRr=l(),vn=a("p"),fRr=o("The model class to instantiate is selected based on the "),P7e=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(":"),bRr=l(),xe=a("ul"),jC=a("li"),q7e=a("strong"),vRr=o("albert"),FRr=o(" \u2014 "),$Y=a("a"),TRr=o("FlaxAlbertForSequenceClassification"),MRr=o(" (ALBERT model)"),ERr=l(),DC=a("li"),N7e=a("strong"),CRr=o("bart"),wRr=o(" \u2014 "),kY=a("a"),ARr=o("FlaxBartForSequenceClassification"),yRr=o(" (BART model)"),LRr=l(),GC=a("li"),j7e=a("strong"),xRr=o("bert"),$Rr=o(" \u2014 "),SY=a("a"),kRr=o("FlaxBertForSequenceClassification"),SRr=o(" (BERT model)"),RRr=l(),OC=a("li"),D7e=a("strong"),PRr=o("big_bird"),BRr=o(" \u2014 "),RY=a("a"),IRr=o("FlaxBigBirdForSequenceClassification"),qRr=o(" (BigBird model)"),NRr=l(),VC=a("li"),G7e=a("strong"),jRr=o("distilbert"),DRr=o(" \u2014 "),PY=a("a"),GRr=o("FlaxDistilBertForSequenceClassification"),ORr=o(" (DistilBERT model)"),VRr=l(),XC=a("li"),O7e=a("strong"),XRr=o("electra"),zRr=o(" \u2014 "),BY=a("a"),WRr=o("FlaxElectraForSequenceClassification"),QRr=o(" (ELECTRA model)"),HRr=l(),zC=a("li"),V7e=a("strong"),URr=o("mbart"),JRr=o(" \u2014 "),IY=a("a"),YRr=o("FlaxMBartForSequenceClassification"),KRr=o(" (mBART model)"),ZRr=l(),WC=a("li"),X7e=a("strong"),ePr=o("roberta"),oPr=o(" \u2014 "),qY=a("a"),rPr=o("FlaxRobertaForSequenceClassification"),tPr=o(" (RoBERTa model)"),aPr=l(),QC=a("li"),z7e=a("strong"),nPr=o("roformer"),sPr=o(" \u2014 "),NY=a("a"),lPr=o("FlaxRoFormerForSequenceClassification"),iPr=o(" (RoFormer model)"),dPr=l(),HC=a("li"),W7e=a("strong"),cPr=o("xlm-roberta"),fPr=o(" \u2014 "),jY=a("a"),mPr=o("FlaxXLMRobertaForSequenceClassification"),gPr=o(" (XLM-RoBERTa model)"),hPr=l(),F(UC.$$.fragment),SNe=l(),Wc=a("h2"),JC=a("a"),Q7e=a("span"),F(jx.$$.fragment),pPr=l(),H7e=a("span"),_Pr=o("FlaxAutoModelForQuestionAnswering"),RNe=l(),ur=a("div"),F(Dx.$$.fragment),uPr=l(),Qc=a("p"),bPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DY=a("a"),vPr=o("from_pretrained()"),FPr=o(" class method or the "),GY=a("a"),TPr=o("from_config()"),MPr=o(` class
method.`),EPr=l(),Gx=a("p"),CPr=o("This class cannot be instantiated directly using "),U7e=a("code"),wPr=o("__init__()"),APr=o(" (throws an error)."),yPr=l(),Qt=a("div"),F(Ox.$$.fragment),LPr=l(),J7e=a("p"),xPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Pr=l(),Hc=a("p"),kPr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),SPr=o("not"),RPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),PPr=o("from_pretrained()"),BPr=o(" to load the model weights."),IPr=l(),F(YC.$$.fragment),qPr=l(),zr=a("div"),F(Vx.$$.fragment),NPr=l(),K7e=a("p"),jPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DPr=l(),Fn=a("p"),GPr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),OPr=o("model_type"),VPr=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),XPr=o("pretrained_model_name_or_path"),zPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(":"),HPr=l(),$e=a("ul"),KC=a("li"),rMe=a("strong"),UPr=o("albert"),JPr=o(" \u2014 "),VY=a("a"),YPr=o("FlaxAlbertForQuestionAnswering"),KPr=o(" (ALBERT model)"),ZPr=l(),ZC=a("li"),tMe=a("strong"),eBr=o("bart"),oBr=o(" \u2014 "),XY=a("a"),rBr=o("FlaxBartForQuestionAnswering"),tBr=o(" (BART model)"),aBr=l(),ew=a("li"),aMe=a("strong"),nBr=o("bert"),sBr=o(" \u2014 "),zY=a("a"),lBr=o("FlaxBertForQuestionAnswering"),iBr=o(" (BERT model)"),dBr=l(),ow=a("li"),nMe=a("strong"),cBr=o("big_bird"),fBr=o(" \u2014 "),WY=a("a"),mBr=o("FlaxBigBirdForQuestionAnswering"),gBr=o(" (BigBird model)"),hBr=l(),rw=a("li"),sMe=a("strong"),pBr=o("distilbert"),_Br=o(" \u2014 "),QY=a("a"),uBr=o("FlaxDistilBertForQuestionAnswering"),bBr=o(" (DistilBERT model)"),vBr=l(),tw=a("li"),lMe=a("strong"),FBr=o("electra"),TBr=o(" \u2014 "),HY=a("a"),MBr=o("FlaxElectraForQuestionAnswering"),EBr=o(" (ELECTRA model)"),CBr=l(),aw=a("li"),iMe=a("strong"),wBr=o("mbart"),ABr=o(" \u2014 "),UY=a("a"),yBr=o("FlaxMBartForQuestionAnswering"),LBr=o(" (mBART model)"),xBr=l(),nw=a("li"),dMe=a("strong"),$Br=o("roberta"),kBr=o(" \u2014 "),JY=a("a"),SBr=o("FlaxRobertaForQuestionAnswering"),RBr=o(" (RoBERTa model)"),PBr=l(),sw=a("li"),cMe=a("strong"),BBr=o("roformer"),IBr=o(" \u2014 "),YY=a("a"),qBr=o("FlaxRoFormerForQuestionAnswering"),NBr=o(" (RoFormer model)"),jBr=l(),lw=a("li"),fMe=a("strong"),DBr=o("xlm-roberta"),GBr=o(" \u2014 "),KY=a("a"),OBr=o("FlaxXLMRobertaForQuestionAnswering"),VBr=o(" (XLM-RoBERTa model)"),XBr=l(),F(iw.$$.fragment),PNe=l(),Uc=a("h2"),dw=a("a"),mMe=a("span"),F(Xx.$$.fragment),zBr=l(),gMe=a("span"),WBr=o("FlaxAutoModelForTokenClassification"),BNe=l(),br=a("div"),F(zx.$$.fragment),QBr=l(),Jc=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZY=a("a"),UBr=o("from_pretrained()"),JBr=o(" class method or the "),eK=a("a"),YBr=o("from_config()"),KBr=o(` class
method.`),ZBr=l(),Wx=a("p"),eIr=o("This class cannot be instantiated directly using "),hMe=a("code"),oIr=o("__init__()"),rIr=o(" (throws an error)."),tIr=l(),Ht=a("div"),F(Qx.$$.fragment),aIr=l(),pMe=a("p"),nIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sIr=l(),Yc=a("p"),lIr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),iIr=o("not"),dIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),cIr=o("from_pretrained()"),fIr=o(" to load the model weights."),mIr=l(),F(cw.$$.fragment),gIr=l(),Wr=a("div"),F(Hx.$$.fragment),hIr=l(),uMe=a("p"),pIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Ir=l(),Tn=a("p"),uIr=o("The model class to instantiate is selected based on the "),bMe=a("code"),bIr=o("model_type"),vIr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(":"),CIr=l(),De=a("ul"),fw=a("li"),TMe=a("strong"),wIr=o("albert"),AIr=o(" \u2014 "),rK=a("a"),yIr=o("FlaxAlbertForTokenClassification"),LIr=o(" (ALBERT model)"),xIr=l(),mw=a("li"),MMe=a("strong"),$Ir=o("bert"),kIr=o(" \u2014 "),tK=a("a"),SIr=o("FlaxBertForTokenClassification"),RIr=o(" (BERT model)"),PIr=l(),gw=a("li"),EMe=a("strong"),BIr=o("big_bird"),IIr=o(" \u2014 "),aK=a("a"),qIr=o("FlaxBigBirdForTokenClassification"),NIr=o(" (BigBird model)"),jIr=l(),hw=a("li"),CMe=a("strong"),DIr=o("distilbert"),GIr=o(" \u2014 "),nK=a("a"),OIr=o("FlaxDistilBertForTokenClassification"),VIr=o(" (DistilBERT model)"),XIr=l(),pw=a("li"),wMe=a("strong"),zIr=o("electra"),WIr=o(" \u2014 "),sK=a("a"),QIr=o("FlaxElectraForTokenClassification"),HIr=o(" (ELECTRA model)"),UIr=l(),_w=a("li"),AMe=a("strong"),JIr=o("roberta"),YIr=o(" \u2014 "),lK=a("a"),KIr=o("FlaxRobertaForTokenClassification"),ZIr=o(" (RoBERTa model)"),eqr=l(),uw=a("li"),yMe=a("strong"),oqr=o("roformer"),rqr=o(" \u2014 "),iK=a("a"),tqr=o("FlaxRoFormerForTokenClassification"),aqr=o(" (RoFormer model)"),nqr=l(),bw=a("li"),LMe=a("strong"),sqr=o("xlm-roberta"),lqr=o(" \u2014 "),dK=a("a"),iqr=o("FlaxXLMRobertaForTokenClassification"),dqr=o(" (XLM-RoBERTa model)"),cqr=l(),F(vw.$$.fragment),INe=l(),Kc=a("h2"),Fw=a("a"),xMe=a("span"),F(Ux.$$.fragment),fqr=l(),$Me=a("span"),mqr=o("FlaxAutoModelForMultipleChoice"),qNe=l(),vr=a("div"),F(Jx.$$.fragment),gqr=l(),Zc=a("p"),hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cK=a("a"),pqr=o("from_pretrained()"),_qr=o(" class method or the "),fK=a("a"),uqr=o("from_config()"),bqr=o(` class
method.`),vqr=l(),Yx=a("p"),Fqr=o("This class cannot be instantiated directly using "),kMe=a("code"),Tqr=o("__init__()"),Mqr=o(" (throws an error)."),Eqr=l(),Ut=a("div"),F(Kx.$$.fragment),Cqr=l(),SMe=a("p"),wqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aqr=l(),ef=a("p"),yqr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),Lqr=o("not"),xqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),$qr=o("from_pretrained()"),kqr=o(" to load the model weights."),Sqr=l(),F(Tw.$$.fragment),Rqr=l(),Qr=a("div"),F(Zx.$$.fragment),Pqr=l(),PMe=a("p"),Bqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Iqr=l(),Mn=a("p"),qqr=o("The model class to instantiate is selected based on the "),BMe=a("code"),Nqr=o("model_type"),jqr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(":"),Xqr=l(),Ge=a("ul"),Mw=a("li"),NMe=a("strong"),zqr=o("albert"),Wqr=o(" \u2014 "),gK=a("a"),Qqr=o("FlaxAlbertForMultipleChoice"),Hqr=o(" (ALBERT model)"),Uqr=l(),Ew=a("li"),jMe=a("strong"),Jqr=o("bert"),Yqr=o(" \u2014 "),hK=a("a"),Kqr=o("FlaxBertForMultipleChoice"),Zqr=o(" (BERT model)"),eNr=l(),Cw=a("li"),DMe=a("strong"),oNr=o("big_bird"),rNr=o(" \u2014 "),pK=a("a"),tNr=o("FlaxBigBirdForMultipleChoice"),aNr=o(" (BigBird model)"),nNr=l(),ww=a("li"),GMe=a("strong"),sNr=o("distilbert"),lNr=o(" \u2014 "),_K=a("a"),iNr=o("FlaxDistilBertForMultipleChoice"),dNr=o(" (DistilBERT model)"),cNr=l(),Aw=a("li"),OMe=a("strong"),fNr=o("electra"),mNr=o(" \u2014 "),uK=a("a"),gNr=o("FlaxElectraForMultipleChoice"),hNr=o(" (ELECTRA model)"),pNr=l(),yw=a("li"),VMe=a("strong"),_Nr=o("roberta"),uNr=o(" \u2014 "),bK=a("a"),bNr=o("FlaxRobertaForMultipleChoice"),vNr=o(" (RoBERTa model)"),FNr=l(),Lw=a("li"),XMe=a("strong"),TNr=o("roformer"),MNr=o(" \u2014 "),vK=a("a"),ENr=o("FlaxRoFormerForMultipleChoice"),CNr=o(" (RoFormer model)"),wNr=l(),xw=a("li"),zMe=a("strong"),ANr=o("xlm-roberta"),yNr=o(" \u2014 "),FK=a("a"),LNr=o("FlaxXLMRobertaForMultipleChoice"),xNr=o(" (XLM-RoBERTa model)"),$Nr=l(),F($w.$$.fragment),NNe=l(),of=a("h2"),kw=a("a"),WMe=a("span"),F(e9.$$.fragment),kNr=l(),QMe=a("span"),SNr=o("FlaxAutoModelForNextSentencePrediction"),jNe=l(),Fr=a("div"),F(o9.$$.fragment),RNr=l(),rf=a("p"),PNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TK=a("a"),BNr=o("from_pretrained()"),INr=o(" class method or the "),MK=a("a"),qNr=o("from_config()"),NNr=o(` class
method.`),jNr=l(),r9=a("p"),DNr=o("This class cannot be instantiated directly using "),HMe=a("code"),GNr=o("__init__()"),ONr=o(" (throws an error)."),VNr=l(),Jt=a("div"),F(t9.$$.fragment),XNr=l(),UMe=a("p"),zNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WNr=l(),tf=a("p"),QNr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),HNr=o("not"),UNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),JNr=o("from_pretrained()"),YNr=o(" to load the model weights."),KNr=l(),F(Sw.$$.fragment),ZNr=l(),Hr=a("div"),F(a9.$$.fragment),ejr=l(),YMe=a("p"),ojr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rjr=l(),En=a("p"),tjr=o("The model class to instantiate is selected based on the "),KMe=a("code"),ajr=o("model_type"),njr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(":"),cjr=l(),o4e=a("ul"),Rw=a("li"),r4e=a("strong"),fjr=o("bert"),mjr=o(" \u2014 "),CK=a("a"),gjr=o("FlaxBertForNextSentencePrediction"),hjr=o(" (BERT model)"),pjr=l(),F(Pw.$$.fragment),DNe=l(),af=a("h2"),Bw=a("a"),t4e=a("span"),F(n9.$$.fragment),_jr=l(),a4e=a("span"),ujr=o("FlaxAutoModelForImageClassification"),GNe=l(),Tr=a("div"),F(s9.$$.fragment),bjr=l(),nf=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wK=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),AK=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),l9=a("p"),wjr=o("This class cannot be instantiated directly using "),n4e=a("code"),Ajr=o("__init__()"),yjr=o(" (throws an error)."),Ljr=l(),Yt=a("div"),F(i9.$$.fragment),xjr=l(),s4e=a("p"),$jr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kjr=l(),sf=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),qjr=l(),F(Iw.$$.fragment),Njr=l(),Ur=a("div"),F(d9.$$.fragment),jjr=l(),i4e=a("p"),Djr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gjr=l(),Cn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),d4e=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),c9=a("ul"),qw=a("li"),m4e=a("strong"),Jjr=o("beit"),Yjr=o(" \u2014 "),LK=a("a"),Kjr=o("FlaxBeitForImageClassification"),Zjr=o(" (BEiT model)"),eDr=l(),Nw=a("li"),g4e=a("strong"),oDr=o("vit"),rDr=o(" \u2014 "),xK=a("a"),tDr=o("FlaxViTForImageClassification"),aDr=o(" (ViT model)"),nDr=l(),F(jw.$$.fragment),ONe=l(),lf=a("h2"),Dw=a("a"),h4e=a("span"),F(f9.$$.fragment),sDr=l(),p4e=a("span"),lDr=o("FlaxAutoModelForVision2Seq"),VNe=l(),Mr=a("div"),F(m9.$$.fragment),iDr=l(),df=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$K=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),kK=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),g9=a("p"),pDr=o("This class cannot be instantiated directly using "),_4e=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Kt=a("div"),F(h9.$$.fragment),vDr=l(),u4e=a("p"),FDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TDr=l(),cf=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),yDr=l(),F(Gw.$$.fragment),LDr=l(),Jr=a("div"),F(p9.$$.fragment),xDr=l(),v4e=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kDr=l(),wn=a("p"),SDr=o("The model class to instantiate is selected based on the "),F4e=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),qDr=o("pretrained_model_name_or_path"),NDr=o(":"),jDr=l(),E4e=a("ul"),Ow=a("li"),C4e=a("strong"),DDr=o("vision-encoder-decoder"),GDr=o(" \u2014 "),RK=a("a"),ODr=o("FlaxVisionEncoderDecoderModel"),VDr=o(" (Vision Encoder decoder model)"),XDr=l(),F(Vw.$$.fragment),this.h()},l(f){const u=zLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _9=s(p);m=n(_9,"A",{id:!0,class:!0,href:!0});var w4e=s(m);_=n(w4e,"SPAN",{});var A4e=s(_);T(d.$$.fragment,A4e),A4e.forEach(t),w4e.forEach(t),h=i(_9),Mo=n(_9,"SPAN",{});var y4e=s(Mo);ci=r(y4e,"Auto Classes"),y4e.forEach(t),_9.forEach(t),hf=i(f),rt=n(f,"P",{});var u9=s(rt);fi=r(u9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(u9,"CODE",{});var L4e=s(mi);l6=r(L4e,"from_pretrained()"),L4e.forEach(t),pf=r(u9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),u9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var x4e=s(yn);i6=r(x4e,"AutoConfig"),x4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var $4e=s(xn);d6=r($4e,"AutoModel"),$4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var k4e=s($n);c6=r(k4e,"AutoTokenizer"),k4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var b9=s(Ae);L$=r(b9,"will create a model that is an instance of "),_i=n(b9,"A",{href:!0});var S4e=s(_i);x$=r(S4e,"BertModel"),S4e.forEach(t),$$=r(b9,"."),b9.forEach(t),Eo=i(f),wa=n(f,"P",{});var v9=s(wa);k$=r(v9,"There is one class of "),uf=n(v9,"CODE",{});var R4e=s(uf);S$=r(R4e,"AutoModel"),R4e.forEach(t),KDe=r(v9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),v9.forEach(t),GIe=i(f),ui=n(f,"H2",{class:!0});var F9=s(ui);bf=n(F9,"A",{id:!0,class:!0,href:!0});var P4e=s(bf);Aee=n(P4e,"SPAN",{});var B4e=s(Aee);T(f6.$$.fragment,B4e),B4e.forEach(t),P4e.forEach(t),ZDe=i(F9),yee=n(F9,"SPAN",{});var I4e=s(yee);eGe=r(I4e,"Extending the Auto Classes"),I4e.forEach(t),F9.forEach(t),OIe=i(f),kn=n(f,"P",{});var ff=s(kn);oGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lee=n(ff,"CODE",{});var q4e=s(Lee);rGe=r(q4e,"NewModel"),q4e.forEach(t),tGe=r(ff,", make sure you have a "),xee=n(ff,"CODE",{});var N4e=s(xee);aGe=r(N4e,"NewModelConfig"),N4e.forEach(t),nGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),VIe=i(f),T(m6.$$.fragment,f),XIe=i(f),R$=n(f,"P",{});var j4e=s(R$);sGe=r(j4e,"You will then be able to use the auto classes like you would usually do!"),j4e.forEach(t),zIe=i(f),T(vf.$$.fragment,f),WIe=i(f),bi=n(f,"H2",{class:!0});var T9=s(bi);Ff=n(T9,"A",{id:!0,class:!0,href:!0});var D4e=s(Ff);$ee=n(D4e,"SPAN",{});var G4e=s($ee);T(g6.$$.fragment,G4e),G4e.forEach(t),D4e.forEach(t),lGe=i(T9),kee=n(T9,"SPAN",{});var O4e=s(kee);iGe=r(O4e,"AutoConfig"),O4e.forEach(t),T9.forEach(t),QIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(h6.$$.fragment,et),dGe=i(et),p6=n(et,"P",{});var M9=s(p6);cGe=r(M9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=n(M9,"A",{href:!0});var V4e=s(P$);fGe=r(V4e,"from_pretrained()"),V4e.forEach(t),mGe=r(M9," class method."),M9.forEach(t),gGe=i(et),_6=n(et,"P",{});var E9=s(_6);hGe=r(E9,"This class cannot be instantiated directly using "),See=n(E9,"CODE",{});var X4e=s(See);pGe=r(X4e,"__init__()"),X4e.forEach(t),_Ge=r(E9," (throws an error)."),E9.forEach(t),uGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(u6.$$.fragment,ot),bGe=i(ot),Ree=n(ot,"P",{});var z4e=s(Ree);vGe=r(z4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),z4e.forEach(t),FGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);TGe=r(mf,"The configuration class to instantiate is selected based on the "),Pee=n(mf,"CODE",{});var W4e=s(Pee);MGe=r(W4e,"model_type"),W4e.forEach(t),EGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bee=n(mf,"CODE",{});var Q4e=s(Bee);CGe=r(Q4e,"pretrained_model_name_or_path"),Q4e.forEach(t),wGe=r(mf,":"),mf.forEach(t),AGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Xw=s(Tf);Iee=n(Xw,"STRONG",{});var H4e=s(Iee);yGe=r(H4e,"albert"),H4e.forEach(t),LGe=r(Xw," \u2014 "),B$=n(Xw,"A",{href:!0});var U4e=s(B$);xGe=r(U4e,"AlbertConfig"),U4e.forEach(t),$Ge=r(Xw," (ALBERT model)"),Xw.forEach(t),kGe=i(y),Mf=n(y,"LI",{});var zw=s(Mf);qee=n(zw,"STRONG",{});var J4e=s(qee);SGe=r(J4e,"bart"),J4e.forEach(t),RGe=r(zw," \u2014 "),I$=n(zw,"A",{href:!0});var Y4e=s(I$);PGe=r(Y4e,"BartConfig"),Y4e.forEach(t),BGe=r(zw," (BART model)"),zw.forEach(t),IGe=i(y),Ef=n(y,"LI",{});var Ww=s(Ef);Nee=n(Ww,"STRONG",{});var K4e=s(Nee);qGe=r(K4e,"beit"),K4e.forEach(t),NGe=r(Ww," \u2014 "),q$=n(Ww,"A",{href:!0});var Z4e=s(q$);jGe=r(Z4e,"BeitConfig"),Z4e.forEach(t),DGe=r(Ww," (BEiT model)"),Ww.forEach(t),GGe=i(y),Cf=n(y,"LI",{});var Qw=s(Cf);jee=n(Qw,"STRONG",{});var eEe=s(jee);OGe=r(eEe,"bert"),eEe.forEach(t),VGe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var oEe=s(N$);XGe=r(oEe,"BertConfig"),oEe.forEach(t),zGe=r(Qw," (BERT model)"),Qw.forEach(t),WGe=i(y),wf=n(y,"LI",{});var Hw=s(wf);Dee=n(Hw,"STRONG",{});var rEe=s(Dee);QGe=r(rEe,"bert-generation"),rEe.forEach(t),HGe=r(Hw," \u2014 "),j$=n(Hw,"A",{href:!0});var tEe=s(j$);UGe=r(tEe,"BertGenerationConfig"),tEe.forEach(t),JGe=r(Hw," (Bert Generation model)"),Hw.forEach(t),YGe=i(y),Af=n(y,"LI",{});var Uw=s(Af);Gee=n(Uw,"STRONG",{});var aEe=s(Gee);KGe=r(aEe,"big_bird"),aEe.forEach(t),ZGe=r(Uw," \u2014 "),D$=n(Uw,"A",{href:!0});var nEe=s(D$);eOe=r(nEe,"BigBirdConfig"),nEe.forEach(t),oOe=r(Uw," (BigBird model)"),Uw.forEach(t),rOe=i(y),yf=n(y,"LI",{});var Jw=s(yf);Oee=n(Jw,"STRONG",{});var sEe=s(Oee);tOe=r(sEe,"bigbird_pegasus"),sEe.forEach(t),aOe=r(Jw," \u2014 "),G$=n(Jw,"A",{href:!0});var lEe=s(G$);nOe=r(lEe,"BigBirdPegasusConfig"),lEe.forEach(t),sOe=r(Jw," (BigBirdPegasus model)"),Jw.forEach(t),lOe=i(y),Lf=n(y,"LI",{});var Yw=s(Lf);Vee=n(Yw,"STRONG",{});var iEe=s(Vee);iOe=r(iEe,"blenderbot"),iEe.forEach(t),dOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var dEe=s(O$);cOe=r(dEe,"BlenderbotConfig"),dEe.forEach(t),fOe=r(Yw," (Blenderbot model)"),Yw.forEach(t),mOe=i(y),xf=n(y,"LI",{});var Kw=s(xf);Xee=n(Kw,"STRONG",{});var cEe=s(Xee);gOe=r(cEe,"blenderbot-small"),cEe.forEach(t),hOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var fEe=s(V$);pOe=r(fEe,"BlenderbotSmallConfig"),fEe.forEach(t),_Oe=r(Kw," (BlenderbotSmall model)"),Kw.forEach(t),uOe=i(y),$f=n(y,"LI",{});var Zw=s($f);zee=n(Zw,"STRONG",{});var mEe=s(zee);bOe=r(mEe,"camembert"),mEe.forEach(t),vOe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var gEe=s(X$);FOe=r(gEe,"CamembertConfig"),gEe.forEach(t),TOe=r(Zw," (CamemBERT model)"),Zw.forEach(t),MOe=i(y),kf=n(y,"LI",{});var e0=s(kf);Wee=n(e0,"STRONG",{});var hEe=s(Wee);EOe=r(hEe,"canine"),hEe.forEach(t),COe=r(e0," \u2014 "),z$=n(e0,"A",{href:!0});var pEe=s(z$);wOe=r(pEe,"CanineConfig"),pEe.forEach(t),AOe=r(e0," (Canine model)"),e0.forEach(t),yOe=i(y),Sf=n(y,"LI",{});var o0=s(Sf);Qee=n(o0,"STRONG",{});var _Ee=s(Qee);LOe=r(_Ee,"clip"),_Ee.forEach(t),xOe=r(o0," \u2014 "),W$=n(o0,"A",{href:!0});var uEe=s(W$);$Oe=r(uEe,"CLIPConfig"),uEe.forEach(t),kOe=r(o0," (CLIP model)"),o0.forEach(t),SOe=i(y),Rf=n(y,"LI",{});var r0=s(Rf);Hee=n(r0,"STRONG",{});var bEe=s(Hee);ROe=r(bEe,"convbert"),bEe.forEach(t),POe=r(r0," \u2014 "),Q$=n(r0,"A",{href:!0});var vEe=s(Q$);BOe=r(vEe,"ConvBertConfig"),vEe.forEach(t),IOe=r(r0," (ConvBERT model)"),r0.forEach(t),qOe=i(y),Pf=n(y,"LI",{});var t0=s(Pf);Uee=n(t0,"STRONG",{});var FEe=s(Uee);NOe=r(FEe,"convnext"),FEe.forEach(t),jOe=r(t0," \u2014 "),H$=n(t0,"A",{href:!0});var TEe=s(H$);DOe=r(TEe,"ConvNextConfig"),TEe.forEach(t),GOe=r(t0," (ConvNext model)"),t0.forEach(t),OOe=i(y),Bf=n(y,"LI",{});var a0=s(Bf);Jee=n(a0,"STRONG",{});var MEe=s(Jee);VOe=r(MEe,"ctrl"),MEe.forEach(t),XOe=r(a0," \u2014 "),U$=n(a0,"A",{href:!0});var EEe=s(U$);zOe=r(EEe,"CTRLConfig"),EEe.forEach(t),WOe=r(a0," (CTRL model)"),a0.forEach(t),QOe=i(y),If=n(y,"LI",{});var n0=s(If);Yee=n(n0,"STRONG",{});var CEe=s(Yee);HOe=r(CEe,"cvt"),CEe.forEach(t),UOe=r(n0," \u2014 "),J$=n(n0,"A",{href:!0});var wEe=s(J$);JOe=r(wEe,"CvtConfig"),wEe.forEach(t),YOe=r(n0," (CvT model)"),n0.forEach(t),KOe=i(y),qf=n(y,"LI",{});var s0=s(qf);Kee=n(s0,"STRONG",{});var AEe=s(Kee);ZOe=r(AEe,"data2vec-audio"),AEe.forEach(t),eVe=r(s0," \u2014 "),Y$=n(s0,"A",{href:!0});var yEe=s(Y$);oVe=r(yEe,"Data2VecAudioConfig"),yEe.forEach(t),rVe=r(s0," (Data2VecAudio model)"),s0.forEach(t),tVe=i(y),Nf=n(y,"LI",{});var l0=s(Nf);Zee=n(l0,"STRONG",{});var LEe=s(Zee);aVe=r(LEe,"data2vec-text"),LEe.forEach(t),nVe=r(l0," \u2014 "),K$=n(l0,"A",{href:!0});var xEe=s(K$);sVe=r(xEe,"Data2VecTextConfig"),xEe.forEach(t),lVe=r(l0," (Data2VecText model)"),l0.forEach(t),iVe=i(y),jf=n(y,"LI",{});var i0=s(jf);eoe=n(i0,"STRONG",{});var $Ee=s(eoe);dVe=r($Ee,"data2vec-vision"),$Ee.forEach(t),cVe=r(i0," \u2014 "),Z$=n(i0,"A",{href:!0});var kEe=s(Z$);fVe=r(kEe,"Data2VecVisionConfig"),kEe.forEach(t),mVe=r(i0," (Data2VecVision model)"),i0.forEach(t),gVe=i(y),Df=n(y,"LI",{});var d0=s(Df);ooe=n(d0,"STRONG",{});var SEe=s(ooe);hVe=r(SEe,"deberta"),SEe.forEach(t),pVe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var REe=s(ek);_Ve=r(REe,"DebertaConfig"),REe.forEach(t),uVe=r(d0," (DeBERTa model)"),d0.forEach(t),bVe=i(y),Gf=n(y,"LI",{});var c0=s(Gf);roe=n(c0,"STRONG",{});var PEe=s(roe);vVe=r(PEe,"deberta-v2"),PEe.forEach(t),FVe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var BEe=s(ok);TVe=r(BEe,"DebertaV2Config"),BEe.forEach(t),MVe=r(c0," (DeBERTa-v2 model)"),c0.forEach(t),EVe=i(y),Of=n(y,"LI",{});var f0=s(Of);toe=n(f0,"STRONG",{});var IEe=s(toe);CVe=r(IEe,"decision_transformer"),IEe.forEach(t),wVe=r(f0," \u2014 "),rk=n(f0,"A",{href:!0});var qEe=s(rk);AVe=r(qEe,"DecisionTransformerConfig"),qEe.forEach(t),yVe=r(f0," (Decision Transformer model)"),f0.forEach(t),LVe=i(y),Vf=n(y,"LI",{});var m0=s(Vf);aoe=n(m0,"STRONG",{});var NEe=s(aoe);xVe=r(NEe,"deit"),NEe.forEach(t),$Ve=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var WDr=s(tk);kVe=r(WDr,"DeiTConfig"),WDr.forEach(t),SVe=r(m0," (DeiT model)"),m0.forEach(t),RVe=i(y),Xf=n(y,"LI",{});var jEe=s(Xf);noe=n(jEe,"STRONG",{});var QDr=s(noe);PVe=r(QDr,"detr"),QDr.forEach(t),BVe=r(jEe," \u2014 "),ak=n(jEe,"A",{href:!0});var HDr=s(ak);IVe=r(HDr,"DetrConfig"),HDr.forEach(t),qVe=r(jEe," (DETR model)"),jEe.forEach(t),NVe=i(y),zf=n(y,"LI",{});var DEe=s(zf);soe=n(DEe,"STRONG",{});var UDr=s(soe);jVe=r(UDr,"distilbert"),UDr.forEach(t),DVe=r(DEe," \u2014 "),nk=n(DEe,"A",{href:!0});var JDr=s(nk);GVe=r(JDr,"DistilBertConfig"),JDr.forEach(t),OVe=r(DEe," (DistilBERT model)"),DEe.forEach(t),VVe=i(y),Wf=n(y,"LI",{});var GEe=s(Wf);loe=n(GEe,"STRONG",{});var YDr=s(loe);XVe=r(YDr,"dpr"),YDr.forEach(t),zVe=r(GEe," \u2014 "),sk=n(GEe,"A",{href:!0});var KDr=s(sk);WVe=r(KDr,"DPRConfig"),KDr.forEach(t),QVe=r(GEe," (DPR model)"),GEe.forEach(t),HVe=i(y),Qf=n(y,"LI",{});var OEe=s(Qf);ioe=n(OEe,"STRONG",{});var ZDr=s(ioe);UVe=r(ZDr,"dpt"),ZDr.forEach(t),JVe=r(OEe," \u2014 "),lk=n(OEe,"A",{href:!0});var eGr=s(lk);YVe=r(eGr,"DPTConfig"),eGr.forEach(t),KVe=r(OEe," (DPT model)"),OEe.forEach(t),ZVe=i(y),Hf=n(y,"LI",{});var VEe=s(Hf);doe=n(VEe,"STRONG",{});var oGr=s(doe);eXe=r(oGr,"electra"),oGr.forEach(t),oXe=r(VEe," \u2014 "),ik=n(VEe,"A",{href:!0});var rGr=s(ik);rXe=r(rGr,"ElectraConfig"),rGr.forEach(t),tXe=r(VEe," (ELECTRA model)"),VEe.forEach(t),aXe=i(y),Uf=n(y,"LI",{});var XEe=s(Uf);coe=n(XEe,"STRONG",{});var tGr=s(coe);nXe=r(tGr,"encoder-decoder"),tGr.forEach(t),sXe=r(XEe," \u2014 "),dk=n(XEe,"A",{href:!0});var aGr=s(dk);lXe=r(aGr,"EncoderDecoderConfig"),aGr.forEach(t),iXe=r(XEe," (Encoder decoder model)"),XEe.forEach(t),dXe=i(y),Jf=n(y,"LI",{});var zEe=s(Jf);foe=n(zEe,"STRONG",{});var nGr=s(foe);cXe=r(nGr,"flaubert"),nGr.forEach(t),fXe=r(zEe," \u2014 "),ck=n(zEe,"A",{href:!0});var sGr=s(ck);mXe=r(sGr,"FlaubertConfig"),sGr.forEach(t),gXe=r(zEe," (FlauBERT model)"),zEe.forEach(t),hXe=i(y),Yf=n(y,"LI",{});var WEe=s(Yf);moe=n(WEe,"STRONG",{});var lGr=s(moe);pXe=r(lGr,"flava"),lGr.forEach(t),_Xe=r(WEe," \u2014 "),fk=n(WEe,"A",{href:!0});var iGr=s(fk);uXe=r(iGr,"FlavaConfig"),iGr.forEach(t),bXe=r(WEe," (Flava model)"),WEe.forEach(t),vXe=i(y),Kf=n(y,"LI",{});var QEe=s(Kf);goe=n(QEe,"STRONG",{});var dGr=s(goe);FXe=r(dGr,"fnet"),dGr.forEach(t),TXe=r(QEe," \u2014 "),mk=n(QEe,"A",{href:!0});var cGr=s(mk);MXe=r(cGr,"FNetConfig"),cGr.forEach(t),EXe=r(QEe," (FNet model)"),QEe.forEach(t),CXe=i(y),Zf=n(y,"LI",{});var HEe=s(Zf);hoe=n(HEe,"STRONG",{});var fGr=s(hoe);wXe=r(fGr,"fsmt"),fGr.forEach(t),AXe=r(HEe," \u2014 "),gk=n(HEe,"A",{href:!0});var mGr=s(gk);yXe=r(mGr,"FSMTConfig"),mGr.forEach(t),LXe=r(HEe," (FairSeq Machine-Translation model)"),HEe.forEach(t),xXe=i(y),em=n(y,"LI",{});var UEe=s(em);poe=n(UEe,"STRONG",{});var gGr=s(poe);$Xe=r(gGr,"funnel"),gGr.forEach(t),kXe=r(UEe," \u2014 "),hk=n(UEe,"A",{href:!0});var hGr=s(hk);SXe=r(hGr,"FunnelConfig"),hGr.forEach(t),RXe=r(UEe," (Funnel Transformer model)"),UEe.forEach(t),PXe=i(y),om=n(y,"LI",{});var JEe=s(om);_oe=n(JEe,"STRONG",{});var pGr=s(_oe);BXe=r(pGr,"glpn"),pGr.forEach(t),IXe=r(JEe," \u2014 "),pk=n(JEe,"A",{href:!0});var _Gr=s(pk);qXe=r(_Gr,"GLPNConfig"),_Gr.forEach(t),NXe=r(JEe," (GLPN model)"),JEe.forEach(t),jXe=i(y),rm=n(y,"LI",{});var YEe=s(rm);uoe=n(YEe,"STRONG",{});var uGr=s(uoe);DXe=r(uGr,"gpt2"),uGr.forEach(t),GXe=r(YEe," \u2014 "),_k=n(YEe,"A",{href:!0});var bGr=s(_k);OXe=r(bGr,"GPT2Config"),bGr.forEach(t),VXe=r(YEe," (OpenAI GPT-2 model)"),YEe.forEach(t),XXe=i(y),tm=n(y,"LI",{});var KEe=s(tm);boe=n(KEe,"STRONG",{});var vGr=s(boe);zXe=r(vGr,"gpt_neo"),vGr.forEach(t),WXe=r(KEe," \u2014 "),uk=n(KEe,"A",{href:!0});var FGr=s(uk);QXe=r(FGr,"GPTNeoConfig"),FGr.forEach(t),HXe=r(KEe," (GPT Neo model)"),KEe.forEach(t),UXe=i(y),am=n(y,"LI",{});var ZEe=s(am);voe=n(ZEe,"STRONG",{});var TGr=s(voe);JXe=r(TGr,"gptj"),TGr.forEach(t),YXe=r(ZEe," \u2014 "),bk=n(ZEe,"A",{href:!0});var MGr=s(bk);KXe=r(MGr,"GPTJConfig"),MGr.forEach(t),ZXe=r(ZEe," (GPT-J model)"),ZEe.forEach(t),eze=i(y),nm=n(y,"LI",{});var eCe=s(nm);Foe=n(eCe,"STRONG",{});var EGr=s(Foe);oze=r(EGr,"hubert"),EGr.forEach(t),rze=r(eCe," \u2014 "),vk=n(eCe,"A",{href:!0});var CGr=s(vk);tze=r(CGr,"HubertConfig"),CGr.forEach(t),aze=r(eCe," (Hubert model)"),eCe.forEach(t),nze=i(y),sm=n(y,"LI",{});var oCe=s(sm);Toe=n(oCe,"STRONG",{});var wGr=s(Toe);sze=r(wGr,"ibert"),wGr.forEach(t),lze=r(oCe," \u2014 "),Fk=n(oCe,"A",{href:!0});var AGr=s(Fk);ize=r(AGr,"IBertConfig"),AGr.forEach(t),dze=r(oCe," (I-BERT model)"),oCe.forEach(t),cze=i(y),lm=n(y,"LI",{});var rCe=s(lm);Moe=n(rCe,"STRONG",{});var yGr=s(Moe);fze=r(yGr,"imagegpt"),yGr.forEach(t),mze=r(rCe," \u2014 "),Tk=n(rCe,"A",{href:!0});var LGr=s(Tk);gze=r(LGr,"ImageGPTConfig"),LGr.forEach(t),hze=r(rCe," (ImageGPT model)"),rCe.forEach(t),pze=i(y),im=n(y,"LI",{});var tCe=s(im);Eoe=n(tCe,"STRONG",{});var xGr=s(Eoe);_ze=r(xGr,"layoutlm"),xGr.forEach(t),uze=r(tCe," \u2014 "),Mk=n(tCe,"A",{href:!0});var $Gr=s(Mk);bze=r($Gr,"LayoutLMConfig"),$Gr.forEach(t),vze=r(tCe," (LayoutLM model)"),tCe.forEach(t),Fze=i(y),dm=n(y,"LI",{});var aCe=s(dm);Coe=n(aCe,"STRONG",{});var kGr=s(Coe);Tze=r(kGr,"layoutlmv2"),kGr.forEach(t),Mze=r(aCe," \u2014 "),Ek=n(aCe,"A",{href:!0});var SGr=s(Ek);Eze=r(SGr,"LayoutLMv2Config"),SGr.forEach(t),Cze=r(aCe," (LayoutLMv2 model)"),aCe.forEach(t),wze=i(y),cm=n(y,"LI",{});var nCe=s(cm);woe=n(nCe,"STRONG",{});var RGr=s(woe);Aze=r(RGr,"led"),RGr.forEach(t),yze=r(nCe," \u2014 "),Ck=n(nCe,"A",{href:!0});var PGr=s(Ck);Lze=r(PGr,"LEDConfig"),PGr.forEach(t),xze=r(nCe," (LED model)"),nCe.forEach(t),$ze=i(y),fm=n(y,"LI",{});var sCe=s(fm);Aoe=n(sCe,"STRONG",{});var BGr=s(Aoe);kze=r(BGr,"longformer"),BGr.forEach(t),Sze=r(sCe," \u2014 "),wk=n(sCe,"A",{href:!0});var IGr=s(wk);Rze=r(IGr,"LongformerConfig"),IGr.forEach(t),Pze=r(sCe," (Longformer model)"),sCe.forEach(t),Bze=i(y),mm=n(y,"LI",{});var lCe=s(mm);yoe=n(lCe,"STRONG",{});var qGr=s(yoe);Ize=r(qGr,"luke"),qGr.forEach(t),qze=r(lCe," \u2014 "),Ak=n(lCe,"A",{href:!0});var NGr=s(Ak);Nze=r(NGr,"LukeConfig"),NGr.forEach(t),jze=r(lCe," (LUKE model)"),lCe.forEach(t),Dze=i(y),gm=n(y,"LI",{});var iCe=s(gm);Loe=n(iCe,"STRONG",{});var jGr=s(Loe);Gze=r(jGr,"lxmert"),jGr.forEach(t),Oze=r(iCe," \u2014 "),yk=n(iCe,"A",{href:!0});var DGr=s(yk);Vze=r(DGr,"LxmertConfig"),DGr.forEach(t),Xze=r(iCe," (LXMERT model)"),iCe.forEach(t),zze=i(y),hm=n(y,"LI",{});var dCe=s(hm);xoe=n(dCe,"STRONG",{});var GGr=s(xoe);Wze=r(GGr,"m2m_100"),GGr.forEach(t),Qze=r(dCe," \u2014 "),Lk=n(dCe,"A",{href:!0});var OGr=s(Lk);Hze=r(OGr,"M2M100Config"),OGr.forEach(t),Uze=r(dCe," (M2M100 model)"),dCe.forEach(t),Jze=i(y),pm=n(y,"LI",{});var cCe=s(pm);$oe=n(cCe,"STRONG",{});var VGr=s($oe);Yze=r(VGr,"marian"),VGr.forEach(t),Kze=r(cCe," \u2014 "),xk=n(cCe,"A",{href:!0});var XGr=s(xk);Zze=r(XGr,"MarianConfig"),XGr.forEach(t),eWe=r(cCe," (Marian model)"),cCe.forEach(t),oWe=i(y),_m=n(y,"LI",{});var fCe=s(_m);koe=n(fCe,"STRONG",{});var zGr=s(koe);rWe=r(zGr,"maskformer"),zGr.forEach(t),tWe=r(fCe," \u2014 "),$k=n(fCe,"A",{href:!0});var WGr=s($k);aWe=r(WGr,"MaskFormerConfig"),WGr.forEach(t),nWe=r(fCe," (MaskFormer model)"),fCe.forEach(t),sWe=i(y),um=n(y,"LI",{});var mCe=s(um);Soe=n(mCe,"STRONG",{});var QGr=s(Soe);lWe=r(QGr,"mbart"),QGr.forEach(t),iWe=r(mCe," \u2014 "),kk=n(mCe,"A",{href:!0});var HGr=s(kk);dWe=r(HGr,"MBartConfig"),HGr.forEach(t),cWe=r(mCe," (mBART model)"),mCe.forEach(t),fWe=i(y),bm=n(y,"LI",{});var gCe=s(bm);Roe=n(gCe,"STRONG",{});var UGr=s(Roe);mWe=r(UGr,"megatron-bert"),UGr.forEach(t),gWe=r(gCe," \u2014 "),Sk=n(gCe,"A",{href:!0});var JGr=s(Sk);hWe=r(JGr,"MegatronBertConfig"),JGr.forEach(t),pWe=r(gCe," (MegatronBert model)"),gCe.forEach(t),_We=i(y),vm=n(y,"LI",{});var hCe=s(vm);Poe=n(hCe,"STRONG",{});var YGr=s(Poe);uWe=r(YGr,"mobilebert"),YGr.forEach(t),bWe=r(hCe," \u2014 "),Rk=n(hCe,"A",{href:!0});var KGr=s(Rk);vWe=r(KGr,"MobileBertConfig"),KGr.forEach(t),FWe=r(hCe," (MobileBERT model)"),hCe.forEach(t),TWe=i(y),Fm=n(y,"LI",{});var pCe=s(Fm);Boe=n(pCe,"STRONG",{});var ZGr=s(Boe);MWe=r(ZGr,"mpnet"),ZGr.forEach(t),EWe=r(pCe," \u2014 "),Pk=n(pCe,"A",{href:!0});var eOr=s(Pk);CWe=r(eOr,"MPNetConfig"),eOr.forEach(t),wWe=r(pCe," (MPNet model)"),pCe.forEach(t),AWe=i(y),Tm=n(y,"LI",{});var _Ce=s(Tm);Ioe=n(_Ce,"STRONG",{});var oOr=s(Ioe);yWe=r(oOr,"mt5"),oOr.forEach(t),LWe=r(_Ce," \u2014 "),Bk=n(_Ce,"A",{href:!0});var rOr=s(Bk);xWe=r(rOr,"MT5Config"),rOr.forEach(t),$We=r(_Ce," (mT5 model)"),_Ce.forEach(t),kWe=i(y),Mm=n(y,"LI",{});var uCe=s(Mm);qoe=n(uCe,"STRONG",{});var tOr=s(qoe);SWe=r(tOr,"nystromformer"),tOr.forEach(t),RWe=r(uCe," \u2014 "),Ik=n(uCe,"A",{href:!0});var aOr=s(Ik);PWe=r(aOr,"NystromformerConfig"),aOr.forEach(t),BWe=r(uCe," (Nystromformer model)"),uCe.forEach(t),IWe=i(y),Em=n(y,"LI",{});var bCe=s(Em);Noe=n(bCe,"STRONG",{});var nOr=s(Noe);qWe=r(nOr,"openai-gpt"),nOr.forEach(t),NWe=r(bCe," \u2014 "),qk=n(bCe,"A",{href:!0});var sOr=s(qk);jWe=r(sOr,"OpenAIGPTConfig"),sOr.forEach(t),DWe=r(bCe," (OpenAI GPT model)"),bCe.forEach(t),GWe=i(y),Cm=n(y,"LI",{});var vCe=s(Cm);joe=n(vCe,"STRONG",{});var lOr=s(joe);OWe=r(lOr,"opt"),lOr.forEach(t),VWe=r(vCe," \u2014 "),Nk=n(vCe,"A",{href:!0});var iOr=s(Nk);XWe=r(iOr,"OPTConfig"),iOr.forEach(t),zWe=r(vCe," (OPT model)"),vCe.forEach(t),WWe=i(y),wm=n(y,"LI",{});var FCe=s(wm);Doe=n(FCe,"STRONG",{});var dOr=s(Doe);QWe=r(dOr,"pegasus"),dOr.forEach(t),HWe=r(FCe," \u2014 "),jk=n(FCe,"A",{href:!0});var cOr=s(jk);UWe=r(cOr,"PegasusConfig"),cOr.forEach(t),JWe=r(FCe," (Pegasus model)"),FCe.forEach(t),YWe=i(y),Am=n(y,"LI",{});var TCe=s(Am);Goe=n(TCe,"STRONG",{});var fOr=s(Goe);KWe=r(fOr,"perceiver"),fOr.forEach(t),ZWe=r(TCe," \u2014 "),Dk=n(TCe,"A",{href:!0});var mOr=s(Dk);eQe=r(mOr,"PerceiverConfig"),mOr.forEach(t),oQe=r(TCe," (Perceiver model)"),TCe.forEach(t),rQe=i(y),ym=n(y,"LI",{});var MCe=s(ym);Ooe=n(MCe,"STRONG",{});var gOr=s(Ooe);tQe=r(gOr,"plbart"),gOr.forEach(t),aQe=r(MCe," \u2014 "),Gk=n(MCe,"A",{href:!0});var hOr=s(Gk);nQe=r(hOr,"PLBartConfig"),hOr.forEach(t),sQe=r(MCe," (PLBart model)"),MCe.forEach(t),lQe=i(y),Lm=n(y,"LI",{});var ECe=s(Lm);Voe=n(ECe,"STRONG",{});var pOr=s(Voe);iQe=r(pOr,"poolformer"),pOr.forEach(t),dQe=r(ECe," \u2014 "),Ok=n(ECe,"A",{href:!0});var _Or=s(Ok);cQe=r(_Or,"PoolFormerConfig"),_Or.forEach(t),fQe=r(ECe," (PoolFormer model)"),ECe.forEach(t),mQe=i(y),xm=n(y,"LI",{});var CCe=s(xm);Xoe=n(CCe,"STRONG",{});var uOr=s(Xoe);gQe=r(uOr,"prophetnet"),uOr.forEach(t),hQe=r(CCe," \u2014 "),Vk=n(CCe,"A",{href:!0});var bOr=s(Vk);pQe=r(bOr,"ProphetNetConfig"),bOr.forEach(t),_Qe=r(CCe," (ProphetNet model)"),CCe.forEach(t),uQe=i(y),$m=n(y,"LI",{});var wCe=s($m);zoe=n(wCe,"STRONG",{});var vOr=s(zoe);bQe=r(vOr,"qdqbert"),vOr.forEach(t),vQe=r(wCe," \u2014 "),Xk=n(wCe,"A",{href:!0});var FOr=s(Xk);FQe=r(FOr,"QDQBertConfig"),FOr.forEach(t),TQe=r(wCe," (QDQBert model)"),wCe.forEach(t),MQe=i(y),km=n(y,"LI",{});var ACe=s(km);Woe=n(ACe,"STRONG",{});var TOr=s(Woe);EQe=r(TOr,"rag"),TOr.forEach(t),CQe=r(ACe," \u2014 "),zk=n(ACe,"A",{href:!0});var MOr=s(zk);wQe=r(MOr,"RagConfig"),MOr.forEach(t),AQe=r(ACe," (RAG model)"),ACe.forEach(t),yQe=i(y),Sm=n(y,"LI",{});var yCe=s(Sm);Qoe=n(yCe,"STRONG",{});var EOr=s(Qoe);LQe=r(EOr,"realm"),EOr.forEach(t),xQe=r(yCe," \u2014 "),Wk=n(yCe,"A",{href:!0});var COr=s(Wk);$Qe=r(COr,"RealmConfig"),COr.forEach(t),kQe=r(yCe," (Realm model)"),yCe.forEach(t),SQe=i(y),Rm=n(y,"LI",{});var LCe=s(Rm);Hoe=n(LCe,"STRONG",{});var wOr=s(Hoe);RQe=r(wOr,"reformer"),wOr.forEach(t),PQe=r(LCe," \u2014 "),Qk=n(LCe,"A",{href:!0});var AOr=s(Qk);BQe=r(AOr,"ReformerConfig"),AOr.forEach(t),IQe=r(LCe," (Reformer model)"),LCe.forEach(t),qQe=i(y),Pm=n(y,"LI",{});var xCe=s(Pm);Uoe=n(xCe,"STRONG",{});var yOr=s(Uoe);NQe=r(yOr,"regnet"),yOr.forEach(t),jQe=r(xCe," \u2014 "),Hk=n(xCe,"A",{href:!0});var LOr=s(Hk);DQe=r(LOr,"RegNetConfig"),LOr.forEach(t),GQe=r(xCe," (RegNet model)"),xCe.forEach(t),OQe=i(y),Bm=n(y,"LI",{});var $Ce=s(Bm);Joe=n($Ce,"STRONG",{});var xOr=s(Joe);VQe=r(xOr,"rembert"),xOr.forEach(t),XQe=r($Ce," \u2014 "),Uk=n($Ce,"A",{href:!0});var $Or=s(Uk);zQe=r($Or,"RemBertConfig"),$Or.forEach(t),WQe=r($Ce," (RemBERT model)"),$Ce.forEach(t),QQe=i(y),Im=n(y,"LI",{});var kCe=s(Im);Yoe=n(kCe,"STRONG",{});var kOr=s(Yoe);HQe=r(kOr,"resnet"),kOr.forEach(t),UQe=r(kCe," \u2014 "),Jk=n(kCe,"A",{href:!0});var SOr=s(Jk);JQe=r(SOr,"ResNetConfig"),SOr.forEach(t),YQe=r(kCe," (ResNet model)"),kCe.forEach(t),KQe=i(y),qm=n(y,"LI",{});var SCe=s(qm);Koe=n(SCe,"STRONG",{});var ROr=s(Koe);ZQe=r(ROr,"retribert"),ROr.forEach(t),eHe=r(SCe," \u2014 "),Yk=n(SCe,"A",{href:!0});var POr=s(Yk);oHe=r(POr,"RetriBertConfig"),POr.forEach(t),rHe=r(SCe," (RetriBERT model)"),SCe.forEach(t),tHe=i(y),Nm=n(y,"LI",{});var RCe=s(Nm);Zoe=n(RCe,"STRONG",{});var BOr=s(Zoe);aHe=r(BOr,"roberta"),BOr.forEach(t),nHe=r(RCe," \u2014 "),Kk=n(RCe,"A",{href:!0});var IOr=s(Kk);sHe=r(IOr,"RobertaConfig"),IOr.forEach(t),lHe=r(RCe," (RoBERTa model)"),RCe.forEach(t),iHe=i(y),jm=n(y,"LI",{});var PCe=s(jm);ere=n(PCe,"STRONG",{});var qOr=s(ere);dHe=r(qOr,"roformer"),qOr.forEach(t),cHe=r(PCe," \u2014 "),Zk=n(PCe,"A",{href:!0});var NOr=s(Zk);fHe=r(NOr,"RoFormerConfig"),NOr.forEach(t),mHe=r(PCe," (RoFormer model)"),PCe.forEach(t),gHe=i(y),Dm=n(y,"LI",{});var BCe=s(Dm);ore=n(BCe,"STRONG",{});var jOr=s(ore);hHe=r(jOr,"segformer"),jOr.forEach(t),pHe=r(BCe," \u2014 "),eS=n(BCe,"A",{href:!0});var DOr=s(eS);_He=r(DOr,"SegformerConfig"),DOr.forEach(t),uHe=r(BCe," (SegFormer model)"),BCe.forEach(t),bHe=i(y),Gm=n(y,"LI",{});var ICe=s(Gm);rre=n(ICe,"STRONG",{});var GOr=s(rre);vHe=r(GOr,"sew"),GOr.forEach(t),FHe=r(ICe," \u2014 "),oS=n(ICe,"A",{href:!0});var OOr=s(oS);THe=r(OOr,"SEWConfig"),OOr.forEach(t),MHe=r(ICe," (SEW model)"),ICe.forEach(t),EHe=i(y),Om=n(y,"LI",{});var qCe=s(Om);tre=n(qCe,"STRONG",{});var VOr=s(tre);CHe=r(VOr,"sew-d"),VOr.forEach(t),wHe=r(qCe," \u2014 "),rS=n(qCe,"A",{href:!0});var XOr=s(rS);AHe=r(XOr,"SEWDConfig"),XOr.forEach(t),yHe=r(qCe," (SEW-D model)"),qCe.forEach(t),LHe=i(y),Vm=n(y,"LI",{});var NCe=s(Vm);are=n(NCe,"STRONG",{});var zOr=s(are);xHe=r(zOr,"speech-encoder-decoder"),zOr.forEach(t),$He=r(NCe," \u2014 "),tS=n(NCe,"A",{href:!0});var WOr=s(tS);kHe=r(WOr,"SpeechEncoderDecoderConfig"),WOr.forEach(t),SHe=r(NCe," (Speech Encoder decoder model)"),NCe.forEach(t),RHe=i(y),Xm=n(y,"LI",{});var jCe=s(Xm);nre=n(jCe,"STRONG",{});var QOr=s(nre);PHe=r(QOr,"speech_to_text"),QOr.forEach(t),BHe=r(jCe," \u2014 "),aS=n(jCe,"A",{href:!0});var HOr=s(aS);IHe=r(HOr,"Speech2TextConfig"),HOr.forEach(t),qHe=r(jCe," (Speech2Text model)"),jCe.forEach(t),NHe=i(y),zm=n(y,"LI",{});var DCe=s(zm);sre=n(DCe,"STRONG",{});var UOr=s(sre);jHe=r(UOr,"speech_to_text_2"),UOr.forEach(t),DHe=r(DCe," \u2014 "),nS=n(DCe,"A",{href:!0});var JOr=s(nS);GHe=r(JOr,"Speech2Text2Config"),JOr.forEach(t),OHe=r(DCe," (Speech2Text2 model)"),DCe.forEach(t),VHe=i(y),Wm=n(y,"LI",{});var GCe=s(Wm);lre=n(GCe,"STRONG",{});var YOr=s(lre);XHe=r(YOr,"splinter"),YOr.forEach(t),zHe=r(GCe," \u2014 "),sS=n(GCe,"A",{href:!0});var KOr=s(sS);WHe=r(KOr,"SplinterConfig"),KOr.forEach(t),QHe=r(GCe," (Splinter model)"),GCe.forEach(t),HHe=i(y),Qm=n(y,"LI",{});var OCe=s(Qm);ire=n(OCe,"STRONG",{});var ZOr=s(ire);UHe=r(ZOr,"squeezebert"),ZOr.forEach(t),JHe=r(OCe," \u2014 "),lS=n(OCe,"A",{href:!0});var eVr=s(lS);YHe=r(eVr,"SqueezeBertConfig"),eVr.forEach(t),KHe=r(OCe," (SqueezeBERT model)"),OCe.forEach(t),ZHe=i(y),Hm=n(y,"LI",{});var VCe=s(Hm);dre=n(VCe,"STRONG",{});var oVr=s(dre);eUe=r(oVr,"swin"),oVr.forEach(t),oUe=r(VCe," \u2014 "),iS=n(VCe,"A",{href:!0});var rVr=s(iS);rUe=r(rVr,"SwinConfig"),rVr.forEach(t),tUe=r(VCe," (Swin model)"),VCe.forEach(t),aUe=i(y),Um=n(y,"LI",{});var XCe=s(Um);cre=n(XCe,"STRONG",{});var tVr=s(cre);nUe=r(tVr,"t5"),tVr.forEach(t),sUe=r(XCe," \u2014 "),dS=n(XCe,"A",{href:!0});var aVr=s(dS);lUe=r(aVr,"T5Config"),aVr.forEach(t),iUe=r(XCe," (T5 model)"),XCe.forEach(t),dUe=i(y),Jm=n(y,"LI",{});var zCe=s(Jm);fre=n(zCe,"STRONG",{});var nVr=s(fre);cUe=r(nVr,"tapas"),nVr.forEach(t),fUe=r(zCe," \u2014 "),cS=n(zCe,"A",{href:!0});var sVr=s(cS);mUe=r(sVr,"TapasConfig"),sVr.forEach(t),gUe=r(zCe," (TAPAS model)"),zCe.forEach(t),hUe=i(y),Ym=n(y,"LI",{});var WCe=s(Ym);mre=n(WCe,"STRONG",{});var lVr=s(mre);pUe=r(lVr,"transfo-xl"),lVr.forEach(t),_Ue=r(WCe," \u2014 "),fS=n(WCe,"A",{href:!0});var iVr=s(fS);uUe=r(iVr,"TransfoXLConfig"),iVr.forEach(t),bUe=r(WCe," (Transformer-XL model)"),WCe.forEach(t),vUe=i(y),Km=n(y,"LI",{});var QCe=s(Km);gre=n(QCe,"STRONG",{});var dVr=s(gre);FUe=r(dVr,"trocr"),dVr.forEach(t),TUe=r(QCe," \u2014 "),mS=n(QCe,"A",{href:!0});var cVr=s(mS);MUe=r(cVr,"TrOCRConfig"),cVr.forEach(t),EUe=r(QCe," (TrOCR model)"),QCe.forEach(t),CUe=i(y),Zm=n(y,"LI",{});var HCe=s(Zm);hre=n(HCe,"STRONG",{});var fVr=s(hre);wUe=r(fVr,"unispeech"),fVr.forEach(t),AUe=r(HCe," \u2014 "),gS=n(HCe,"A",{href:!0});var mVr=s(gS);yUe=r(mVr,"UniSpeechConfig"),mVr.forEach(t),LUe=r(HCe," (UniSpeech model)"),HCe.forEach(t),xUe=i(y),eg=n(y,"LI",{});var UCe=s(eg);pre=n(UCe,"STRONG",{});var gVr=s(pre);$Ue=r(gVr,"unispeech-sat"),gVr.forEach(t),kUe=r(UCe," \u2014 "),hS=n(UCe,"A",{href:!0});var hVr=s(hS);SUe=r(hVr,"UniSpeechSatConfig"),hVr.forEach(t),RUe=r(UCe," (UniSpeechSat model)"),UCe.forEach(t),PUe=i(y),og=n(y,"LI",{});var JCe=s(og);_re=n(JCe,"STRONG",{});var pVr=s(_re);BUe=r(pVr,"van"),pVr.forEach(t),IUe=r(JCe," \u2014 "),pS=n(JCe,"A",{href:!0});var _Vr=s(pS);qUe=r(_Vr,"VanConfig"),_Vr.forEach(t),NUe=r(JCe," (VAN model)"),JCe.forEach(t),jUe=i(y),rg=n(y,"LI",{});var YCe=s(rg);ure=n(YCe,"STRONG",{});var uVr=s(ure);DUe=r(uVr,"vilt"),uVr.forEach(t),GUe=r(YCe," \u2014 "),_S=n(YCe,"A",{href:!0});var bVr=s(_S);OUe=r(bVr,"ViltConfig"),bVr.forEach(t),VUe=r(YCe," (ViLT model)"),YCe.forEach(t),XUe=i(y),tg=n(y,"LI",{});var KCe=s(tg);bre=n(KCe,"STRONG",{});var vVr=s(bre);zUe=r(vVr,"vision-encoder-decoder"),vVr.forEach(t),WUe=r(KCe," \u2014 "),uS=n(KCe,"A",{href:!0});var FVr=s(uS);QUe=r(FVr,"VisionEncoderDecoderConfig"),FVr.forEach(t),HUe=r(KCe," (Vision Encoder decoder model)"),KCe.forEach(t),UUe=i(y),ag=n(y,"LI",{});var ZCe=s(ag);vre=n(ZCe,"STRONG",{});var TVr=s(vre);JUe=r(TVr,"vision-text-dual-encoder"),TVr.forEach(t),YUe=r(ZCe," \u2014 "),bS=n(ZCe,"A",{href:!0});var MVr=s(bS);KUe=r(MVr,"VisionTextDualEncoderConfig"),MVr.forEach(t),ZUe=r(ZCe," (VisionTextDualEncoder model)"),ZCe.forEach(t),eJe=i(y),ng=n(y,"LI",{});var ewe=s(ng);Fre=n(ewe,"STRONG",{});var EVr=s(Fre);oJe=r(EVr,"visual_bert"),EVr.forEach(t),rJe=r(ewe," \u2014 "),vS=n(ewe,"A",{href:!0});var CVr=s(vS);tJe=r(CVr,"VisualBertConfig"),CVr.forEach(t),aJe=r(ewe," (VisualBert model)"),ewe.forEach(t),nJe=i(y),sg=n(y,"LI",{});var owe=s(sg);Tre=n(owe,"STRONG",{});var wVr=s(Tre);sJe=r(wVr,"vit"),wVr.forEach(t),lJe=r(owe," \u2014 "),FS=n(owe,"A",{href:!0});var AVr=s(FS);iJe=r(AVr,"ViTConfig"),AVr.forEach(t),dJe=r(owe," (ViT model)"),owe.forEach(t),cJe=i(y),lg=n(y,"LI",{});var rwe=s(lg);Mre=n(rwe,"STRONG",{});var yVr=s(Mre);fJe=r(yVr,"vit_mae"),yVr.forEach(t),mJe=r(rwe," \u2014 "),TS=n(rwe,"A",{href:!0});var LVr=s(TS);gJe=r(LVr,"ViTMAEConfig"),LVr.forEach(t),hJe=r(rwe," (ViTMAE model)"),rwe.forEach(t),pJe=i(y),ig=n(y,"LI",{});var twe=s(ig);Ere=n(twe,"STRONG",{});var xVr=s(Ere);_Je=r(xVr,"wav2vec2"),xVr.forEach(t),uJe=r(twe," \u2014 "),MS=n(twe,"A",{href:!0});var $Vr=s(MS);bJe=r($Vr,"Wav2Vec2Config"),$Vr.forEach(t),vJe=r(twe," (Wav2Vec2 model)"),twe.forEach(t),FJe=i(y),dg=n(y,"LI",{});var awe=s(dg);Cre=n(awe,"STRONG",{});var kVr=s(Cre);TJe=r(kVr,"wav2vec2-conformer"),kVr.forEach(t),MJe=r(awe," \u2014 "),ES=n(awe,"A",{href:!0});var SVr=s(ES);EJe=r(SVr,"Wav2Vec2ConformerConfig"),SVr.forEach(t),CJe=r(awe," (Wav2Vec2-Conformer model)"),awe.forEach(t),wJe=i(y),cg=n(y,"LI",{});var nwe=s(cg);wre=n(nwe,"STRONG",{});var RVr=s(wre);AJe=r(RVr,"wavlm"),RVr.forEach(t),yJe=r(nwe," \u2014 "),CS=n(nwe,"A",{href:!0});var PVr=s(CS);LJe=r(PVr,"WavLMConfig"),PVr.forEach(t),xJe=r(nwe," (WavLM model)"),nwe.forEach(t),$Je=i(y),fg=n(y,"LI",{});var swe=s(fg);Are=n(swe,"STRONG",{});var BVr=s(Are);kJe=r(BVr,"xglm"),BVr.forEach(t),SJe=r(swe," \u2014 "),wS=n(swe,"A",{href:!0});var IVr=s(wS);RJe=r(IVr,"XGLMConfig"),IVr.forEach(t),PJe=r(swe," (XGLM model)"),swe.forEach(t),BJe=i(y),mg=n(y,"LI",{});var lwe=s(mg);yre=n(lwe,"STRONG",{});var qVr=s(yre);IJe=r(qVr,"xlm"),qVr.forEach(t),qJe=r(lwe," \u2014 "),AS=n(lwe,"A",{href:!0});var NVr=s(AS);NJe=r(NVr,"XLMConfig"),NVr.forEach(t),jJe=r(lwe," (XLM model)"),lwe.forEach(t),DJe=i(y),gg=n(y,"LI",{});var iwe=s(gg);Lre=n(iwe,"STRONG",{});var jVr=s(Lre);GJe=r(jVr,"xlm-prophetnet"),jVr.forEach(t),OJe=r(iwe," \u2014 "),yS=n(iwe,"A",{href:!0});var DVr=s(yS);VJe=r(DVr,"XLMProphetNetConfig"),DVr.forEach(t),XJe=r(iwe," (XLMProphetNet model)"),iwe.forEach(t),zJe=i(y),hg=n(y,"LI",{});var dwe=s(hg);xre=n(dwe,"STRONG",{});var GVr=s(xre);WJe=r(GVr,"xlm-roberta"),GVr.forEach(t),QJe=r(dwe," \u2014 "),LS=n(dwe,"A",{href:!0});var OVr=s(LS);HJe=r(OVr,"XLMRobertaConfig"),OVr.forEach(t),UJe=r(dwe," (XLM-RoBERTa model)"),dwe.forEach(t),JJe=i(y),pg=n(y,"LI",{});var cwe=s(pg);$re=n(cwe,"STRONG",{});var VVr=s($re);YJe=r(VVr,"xlm-roberta-xl"),VVr.forEach(t),KJe=r(cwe," \u2014 "),xS=n(cwe,"A",{href:!0});var XVr=s(xS);ZJe=r(XVr,"XLMRobertaXLConfig"),XVr.forEach(t),eYe=r(cwe," (XLM-RoBERTa-XL model)"),cwe.forEach(t),oYe=i(y),_g=n(y,"LI",{});var fwe=s(_g);kre=n(fwe,"STRONG",{});var zVr=s(kre);rYe=r(zVr,"xlnet"),zVr.forEach(t),tYe=r(fwe," \u2014 "),$S=n(fwe,"A",{href:!0});var WVr=s($S);aYe=r(WVr,"XLNetConfig"),WVr.forEach(t),nYe=r(fwe," (XLNet model)"),fwe.forEach(t),sYe=i(y),ug=n(y,"LI",{});var mwe=s(ug);Sre=n(mwe,"STRONG",{});var QVr=s(Sre);lYe=r(QVr,"yolos"),QVr.forEach(t),iYe=r(mwe," \u2014 "),kS=n(mwe,"A",{href:!0});var HVr=s(kS);dYe=r(HVr,"YolosConfig"),HVr.forEach(t),cYe=r(mwe," (YOLOS model)"),mwe.forEach(t),fYe=i(y),bg=n(y,"LI",{});var gwe=s(bg);Rre=n(gwe,"STRONG",{});var UVr=s(Rre);mYe=r(UVr,"yoso"),UVr.forEach(t),gYe=r(gwe," \u2014 "),SS=n(gwe,"A",{href:!0});var JVr=s(SS);hYe=r(JVr,"YosoConfig"),JVr.forEach(t),pYe=r(gwe," (YOSO model)"),gwe.forEach(t),y.forEach(t),_Ye=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),uYe=i(et),Fg=n(et,"DIV",{class:!0});var zNe=s(Fg);T(b6.$$.fragment,zNe),bYe=i(zNe),Pre=n(zNe,"P",{});var YVr=s(Pre);vYe=r(YVr,"Register a new configuration for this class."),YVr.forEach(t),zNe.forEach(t),et.forEach(t),HIe=i(f),Fi=n(f,"H2",{class:!0});var WNe=s(Fi);Tg=n(WNe,"A",{id:!0,class:!0,href:!0});var KVr=s(Tg);Bre=n(KVr,"SPAN",{});var ZVr=s(Bre);T(v6.$$.fragment,ZVr),ZVr.forEach(t),KVr.forEach(t),FYe=i(WNe),Ire=n(WNe,"SPAN",{});var eXr=s(Ire);TYe=r(eXr,"AutoTokenizer"),eXr.forEach(t),WNe.forEach(t),UIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(F6.$$.fragment,Is),MYe=i(Is),T6=n(Is,"P",{});var QNe=s(T6);EYe=r(QNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RS=n(QNe,"A",{href:!0});var oXr=s(RS);CYe=r(oXr,"AutoTokenizer.from_pretrained()"),oXr.forEach(t),wYe=r(QNe," class method."),QNe.forEach(t),AYe=i(Is),M6=n(Is,"P",{});var HNe=s(M6);yYe=r(HNe,"This class cannot be instantiated directly using "),qre=n(HNe,"CODE",{});var rXr=s(qre);LYe=r(rXr,"__init__()"),rXr.forEach(t),xYe=r(HNe," (throws an error)."),HNe.forEach(t),$Ye=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(E6.$$.fragment,qs),kYe=i(qs),Nre=n(qs,"P",{});var tXr=s(Nre);SYe=r(tXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tXr.forEach(t),RYe=i(qs),Aa=n(qs,"P",{});var g0=s(Aa);PYe=r(g0,"The tokenizer class to instantiate is selected based on the "),jre=n(g0,"CODE",{});var aXr=s(jre);BYe=r(aXr,"model_type"),aXr.forEach(t),IYe=r(g0,` property of the config object (either
passed as an argument or loaded from `),Dre=n(g0,"CODE",{});var nXr=s(Dre);qYe=r(nXr,"pretrained_model_name_or_path"),nXr.forEach(t),NYe=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gre=n(g0,"CODE",{});var sXr=s(Gre);jYe=r(sXr,"pretrained_model_name_or_path"),sXr.forEach(t),DYe=r(g0,":"),g0.forEach(t),GYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var C9=s(Sn);Ore=n(C9,"STRONG",{});var lXr=s(Ore);OYe=r(lXr,"albert"),lXr.forEach(t),VYe=r(C9," \u2014 "),PS=n(C9,"A",{href:!0});var iXr=s(PS);XYe=r(iXr,"AlbertTokenizer"),iXr.forEach(t),zYe=r(C9," or "),BS=n(C9,"A",{href:!0});var dXr=s(BS);WYe=r(dXr,"AlbertTokenizerFast"),dXr.forEach(t),QYe=r(C9," (ALBERT model)"),C9.forEach(t),HYe=i(S),Rn=n(S,"LI",{});var w9=s(Rn);Vre=n(w9,"STRONG",{});var cXr=s(Vre);UYe=r(cXr,"bart"),cXr.forEach(t),JYe=r(w9," \u2014 "),IS=n(w9,"A",{href:!0});var fXr=s(IS);YYe=r(fXr,"BartTokenizer"),fXr.forEach(t),KYe=r(w9," or "),qS=n(w9,"A",{href:!0});var mXr=s(qS);ZYe=r(mXr,"BartTokenizerFast"),mXr.forEach(t),eKe=r(w9," (BART model)"),w9.forEach(t),oKe=i(S),Pn=n(S,"LI",{});var A9=s(Pn);Xre=n(A9,"STRONG",{});var gXr=s(Xre);rKe=r(gXr,"barthez"),gXr.forEach(t),tKe=r(A9," \u2014 "),NS=n(A9,"A",{href:!0});var hXr=s(NS);aKe=r(hXr,"BarthezTokenizer"),hXr.forEach(t),nKe=r(A9," or "),jS=n(A9,"A",{href:!0});var pXr=s(jS);sKe=r(pXr,"BarthezTokenizerFast"),pXr.forEach(t),lKe=r(A9," (BARThez model)"),A9.forEach(t),iKe=i(S),Mg=n(S,"LI",{});var hwe=s(Mg);zre=n(hwe,"STRONG",{});var _Xr=s(zre);dKe=r(_Xr,"bartpho"),_Xr.forEach(t),cKe=r(hwe," \u2014 "),DS=n(hwe,"A",{href:!0});var uXr=s(DS);fKe=r(uXr,"BartphoTokenizer"),uXr.forEach(t),mKe=r(hwe," (BARTpho model)"),hwe.forEach(t),gKe=i(S),Bn=n(S,"LI",{});var y9=s(Bn);Wre=n(y9,"STRONG",{});var bXr=s(Wre);hKe=r(bXr,"bert"),bXr.forEach(t),pKe=r(y9," \u2014 "),GS=n(y9,"A",{href:!0});var vXr=s(GS);_Ke=r(vXr,"BertTokenizer"),vXr.forEach(t),uKe=r(y9," or "),OS=n(y9,"A",{href:!0});var FXr=s(OS);bKe=r(FXr,"BertTokenizerFast"),FXr.forEach(t),vKe=r(y9," (BERT model)"),y9.forEach(t),FKe=i(S),Eg=n(S,"LI",{});var pwe=s(Eg);Qre=n(pwe,"STRONG",{});var TXr=s(Qre);TKe=r(TXr,"bert-generation"),TXr.forEach(t),MKe=r(pwe," \u2014 "),VS=n(pwe,"A",{href:!0});var MXr=s(VS);EKe=r(MXr,"BertGenerationTokenizer"),MXr.forEach(t),CKe=r(pwe," (Bert Generation model)"),pwe.forEach(t),wKe=i(S),Cg=n(S,"LI",{});var _we=s(Cg);Hre=n(_we,"STRONG",{});var EXr=s(Hre);AKe=r(EXr,"bert-japanese"),EXr.forEach(t),yKe=r(_we," \u2014 "),XS=n(_we,"A",{href:!0});var CXr=s(XS);LKe=r(CXr,"BertJapaneseTokenizer"),CXr.forEach(t),xKe=r(_we," (BertJapanese model)"),_we.forEach(t),$Ke=i(S),wg=n(S,"LI",{});var uwe=s(wg);Ure=n(uwe,"STRONG",{});var wXr=s(Ure);kKe=r(wXr,"bertweet"),wXr.forEach(t),SKe=r(uwe," \u2014 "),zS=n(uwe,"A",{href:!0});var AXr=s(zS);RKe=r(AXr,"BertweetTokenizer"),AXr.forEach(t),PKe=r(uwe," (Bertweet model)"),uwe.forEach(t),BKe=i(S),In=n(S,"LI",{});var L9=s(In);Jre=n(L9,"STRONG",{});var yXr=s(Jre);IKe=r(yXr,"big_bird"),yXr.forEach(t),qKe=r(L9," \u2014 "),WS=n(L9,"A",{href:!0});var LXr=s(WS);NKe=r(LXr,"BigBirdTokenizer"),LXr.forEach(t),jKe=r(L9," or "),QS=n(L9,"A",{href:!0});var xXr=s(QS);DKe=r(xXr,"BigBirdTokenizerFast"),xXr.forEach(t),GKe=r(L9," (BigBird model)"),L9.forEach(t),OKe=i(S),qn=n(S,"LI",{});var x9=s(qn);Yre=n(x9,"STRONG",{});var $Xr=s(Yre);VKe=r($Xr,"bigbird_pegasus"),$Xr.forEach(t),XKe=r(x9," \u2014 "),HS=n(x9,"A",{href:!0});var kXr=s(HS);zKe=r(kXr,"PegasusTokenizer"),kXr.forEach(t),WKe=r(x9," or "),US=n(x9,"A",{href:!0});var SXr=s(US);QKe=r(SXr,"PegasusTokenizerFast"),SXr.forEach(t),HKe=r(x9," (BigBirdPegasus model)"),x9.forEach(t),UKe=i(S),Nn=n(S,"LI",{});var $9=s(Nn);Kre=n($9,"STRONG",{});var RXr=s(Kre);JKe=r(RXr,"blenderbot"),RXr.forEach(t),YKe=r($9," \u2014 "),JS=n($9,"A",{href:!0});var PXr=s(JS);KKe=r(PXr,"BlenderbotTokenizer"),PXr.forEach(t),ZKe=r($9," or "),YS=n($9,"A",{href:!0});var BXr=s(YS);eZe=r(BXr,"BlenderbotTokenizerFast"),BXr.forEach(t),oZe=r($9," (Blenderbot model)"),$9.forEach(t),rZe=i(S),Ag=n(S,"LI",{});var bwe=s(Ag);Zre=n(bwe,"STRONG",{});var IXr=s(Zre);tZe=r(IXr,"blenderbot-small"),IXr.forEach(t),aZe=r(bwe," \u2014 "),KS=n(bwe,"A",{href:!0});var qXr=s(KS);nZe=r(qXr,"BlenderbotSmallTokenizer"),qXr.forEach(t),sZe=r(bwe," (BlenderbotSmall model)"),bwe.forEach(t),lZe=i(S),yg=n(S,"LI",{});var vwe=s(yg);ete=n(vwe,"STRONG",{});var NXr=s(ete);iZe=r(NXr,"byt5"),NXr.forEach(t),dZe=r(vwe," \u2014 "),ZS=n(vwe,"A",{href:!0});var jXr=s(ZS);cZe=r(jXr,"ByT5Tokenizer"),jXr.forEach(t),fZe=r(vwe," (ByT5 model)"),vwe.forEach(t),mZe=i(S),jn=n(S,"LI",{});var k9=s(jn);ote=n(k9,"STRONG",{});var DXr=s(ote);gZe=r(DXr,"camembert"),DXr.forEach(t),hZe=r(k9," \u2014 "),eR=n(k9,"A",{href:!0});var GXr=s(eR);pZe=r(GXr,"CamembertTokenizer"),GXr.forEach(t),_Ze=r(k9," or "),oR=n(k9,"A",{href:!0});var OXr=s(oR);uZe=r(OXr,"CamembertTokenizerFast"),OXr.forEach(t),bZe=r(k9," (CamemBERT model)"),k9.forEach(t),vZe=i(S),Lg=n(S,"LI",{});var Fwe=s(Lg);rte=n(Fwe,"STRONG",{});var VXr=s(rte);FZe=r(VXr,"canine"),VXr.forEach(t),TZe=r(Fwe," \u2014 "),rR=n(Fwe,"A",{href:!0});var XXr=s(rR);MZe=r(XXr,"CanineTokenizer"),XXr.forEach(t),EZe=r(Fwe," (Canine model)"),Fwe.forEach(t),CZe=i(S),Dn=n(S,"LI",{});var S9=s(Dn);tte=n(S9,"STRONG",{});var zXr=s(tte);wZe=r(zXr,"clip"),zXr.forEach(t),AZe=r(S9," \u2014 "),tR=n(S9,"A",{href:!0});var WXr=s(tR);yZe=r(WXr,"CLIPTokenizer"),WXr.forEach(t),LZe=r(S9," or "),aR=n(S9,"A",{href:!0});var QXr=s(aR);xZe=r(QXr,"CLIPTokenizerFast"),QXr.forEach(t),$Ze=r(S9," (CLIP model)"),S9.forEach(t),kZe=i(S),Gn=n(S,"LI",{});var R9=s(Gn);ate=n(R9,"STRONG",{});var HXr=s(ate);SZe=r(HXr,"convbert"),HXr.forEach(t),RZe=r(R9," \u2014 "),nR=n(R9,"A",{href:!0});var UXr=s(nR);PZe=r(UXr,"ConvBertTokenizer"),UXr.forEach(t),BZe=r(R9," or "),sR=n(R9,"A",{href:!0});var JXr=s(sR);IZe=r(JXr,"ConvBertTokenizerFast"),JXr.forEach(t),qZe=r(R9," (ConvBERT model)"),R9.forEach(t),NZe=i(S),On=n(S,"LI",{});var P9=s(On);nte=n(P9,"STRONG",{});var YXr=s(nte);jZe=r(YXr,"cpm"),YXr.forEach(t),DZe=r(P9," \u2014 "),lR=n(P9,"A",{href:!0});var KXr=s(lR);GZe=r(KXr,"CpmTokenizer"),KXr.forEach(t),OZe=r(P9," or "),iR=n(P9,"A",{href:!0});var ZXr=s(iR);VZe=r(ZXr,"CpmTokenizerFast"),ZXr.forEach(t),XZe=r(P9," (CPM model)"),P9.forEach(t),zZe=i(S),xg=n(S,"LI",{});var Twe=s(xg);ste=n(Twe,"STRONG",{});var ezr=s(ste);WZe=r(ezr,"ctrl"),ezr.forEach(t),QZe=r(Twe," \u2014 "),dR=n(Twe,"A",{href:!0});var ozr=s(dR);HZe=r(ozr,"CTRLTokenizer"),ozr.forEach(t),UZe=r(Twe," (CTRL model)"),Twe.forEach(t),JZe=i(S),Vn=n(S,"LI",{});var B9=s(Vn);lte=n(B9,"STRONG",{});var rzr=s(lte);YZe=r(rzr,"data2vec-text"),rzr.forEach(t),KZe=r(B9," \u2014 "),cR=n(B9,"A",{href:!0});var tzr=s(cR);ZZe=r(tzr,"RobertaTokenizer"),tzr.forEach(t),eeo=r(B9," or "),fR=n(B9,"A",{href:!0});var azr=s(fR);oeo=r(azr,"RobertaTokenizerFast"),azr.forEach(t),reo=r(B9," (Data2VecText model)"),B9.forEach(t),teo=i(S),Xn=n(S,"LI",{});var I9=s(Xn);ite=n(I9,"STRONG",{});var nzr=s(ite);aeo=r(nzr,"deberta"),nzr.forEach(t),neo=r(I9," \u2014 "),mR=n(I9,"A",{href:!0});var szr=s(mR);seo=r(szr,"DebertaTokenizer"),szr.forEach(t),leo=r(I9," or "),gR=n(I9,"A",{href:!0});var lzr=s(gR);ieo=r(lzr,"DebertaTokenizerFast"),lzr.forEach(t),deo=r(I9," (DeBERTa model)"),I9.forEach(t),ceo=i(S),zn=n(S,"LI",{});var q9=s(zn);dte=n(q9,"STRONG",{});var izr=s(dte);feo=r(izr,"deberta-v2"),izr.forEach(t),meo=r(q9," \u2014 "),hR=n(q9,"A",{href:!0});var dzr=s(hR);geo=r(dzr,"DebertaV2Tokenizer"),dzr.forEach(t),heo=r(q9," or "),pR=n(q9,"A",{href:!0});var czr=s(pR);peo=r(czr,"DebertaV2TokenizerFast"),czr.forEach(t),_eo=r(q9," (DeBERTa-v2 model)"),q9.forEach(t),ueo=i(S),Wn=n(S,"LI",{});var N9=s(Wn);cte=n(N9,"STRONG",{});var fzr=s(cte);beo=r(fzr,"distilbert"),fzr.forEach(t),veo=r(N9," \u2014 "),_R=n(N9,"A",{href:!0});var mzr=s(_R);Feo=r(mzr,"DistilBertTokenizer"),mzr.forEach(t),Teo=r(N9," or "),uR=n(N9,"A",{href:!0});var gzr=s(uR);Meo=r(gzr,"DistilBertTokenizerFast"),gzr.forEach(t),Eeo=r(N9," (DistilBERT model)"),N9.forEach(t),Ceo=i(S),Qn=n(S,"LI",{});var j9=s(Qn);fte=n(j9,"STRONG",{});var hzr=s(fte);weo=r(hzr,"dpr"),hzr.forEach(t),Aeo=r(j9," \u2014 "),bR=n(j9,"A",{href:!0});var pzr=s(bR);yeo=r(pzr,"DPRQuestionEncoderTokenizer"),pzr.forEach(t),Leo=r(j9," or "),vR=n(j9,"A",{href:!0});var _zr=s(vR);xeo=r(_zr,"DPRQuestionEncoderTokenizerFast"),_zr.forEach(t),$eo=r(j9," (DPR model)"),j9.forEach(t),keo=i(S),Hn=n(S,"LI",{});var D9=s(Hn);mte=n(D9,"STRONG",{});var uzr=s(mte);Seo=r(uzr,"electra"),uzr.forEach(t),Reo=r(D9," \u2014 "),FR=n(D9,"A",{href:!0});var bzr=s(FR);Peo=r(bzr,"ElectraTokenizer"),bzr.forEach(t),Beo=r(D9," or "),TR=n(D9,"A",{href:!0});var vzr=s(TR);Ieo=r(vzr,"ElectraTokenizerFast"),vzr.forEach(t),qeo=r(D9," (ELECTRA model)"),D9.forEach(t),Neo=i(S),$g=n(S,"LI",{});var Mwe=s($g);gte=n(Mwe,"STRONG",{});var Fzr=s(gte);jeo=r(Fzr,"flaubert"),Fzr.forEach(t),Deo=r(Mwe," \u2014 "),MR=n(Mwe,"A",{href:!0});var Tzr=s(MR);Geo=r(Tzr,"FlaubertTokenizer"),Tzr.forEach(t),Oeo=r(Mwe," (FlauBERT model)"),Mwe.forEach(t),Veo=i(S),Un=n(S,"LI",{});var G9=s(Un);hte=n(G9,"STRONG",{});var Mzr=s(hte);Xeo=r(Mzr,"fnet"),Mzr.forEach(t),zeo=r(G9," \u2014 "),ER=n(G9,"A",{href:!0});var Ezr=s(ER);Weo=r(Ezr,"FNetTokenizer"),Ezr.forEach(t),Qeo=r(G9," or "),CR=n(G9,"A",{href:!0});var Czr=s(CR);Heo=r(Czr,"FNetTokenizerFast"),Czr.forEach(t),Ueo=r(G9," (FNet model)"),G9.forEach(t),Jeo=i(S),kg=n(S,"LI",{});var Ewe=s(kg);pte=n(Ewe,"STRONG",{});var wzr=s(pte);Yeo=r(wzr,"fsmt"),wzr.forEach(t),Keo=r(Ewe," \u2014 "),wR=n(Ewe,"A",{href:!0});var Azr=s(wR);Zeo=r(Azr,"FSMTTokenizer"),Azr.forEach(t),eoo=r(Ewe," (FairSeq Machine-Translation model)"),Ewe.forEach(t),ooo=i(S),Jn=n(S,"LI",{});var O9=s(Jn);_te=n(O9,"STRONG",{});var yzr=s(_te);roo=r(yzr,"funnel"),yzr.forEach(t),too=r(O9," \u2014 "),AR=n(O9,"A",{href:!0});var Lzr=s(AR);aoo=r(Lzr,"FunnelTokenizer"),Lzr.forEach(t),noo=r(O9," or "),yR=n(O9,"A",{href:!0});var xzr=s(yR);soo=r(xzr,"FunnelTokenizerFast"),xzr.forEach(t),loo=r(O9," (Funnel Transformer model)"),O9.forEach(t),ioo=i(S),Yn=n(S,"LI",{});var V9=s(Yn);ute=n(V9,"STRONG",{});var $zr=s(ute);doo=r($zr,"gpt2"),$zr.forEach(t),coo=r(V9," \u2014 "),LR=n(V9,"A",{href:!0});var kzr=s(LR);foo=r(kzr,"GPT2Tokenizer"),kzr.forEach(t),moo=r(V9," or "),xR=n(V9,"A",{href:!0});var Szr=s(xR);goo=r(Szr,"GPT2TokenizerFast"),Szr.forEach(t),hoo=r(V9," (OpenAI GPT-2 model)"),V9.forEach(t),poo=i(S),Kn=n(S,"LI",{});var X9=s(Kn);bte=n(X9,"STRONG",{});var Rzr=s(bte);_oo=r(Rzr,"gpt_neo"),Rzr.forEach(t),uoo=r(X9," \u2014 "),$R=n(X9,"A",{href:!0});var Pzr=s($R);boo=r(Pzr,"GPT2Tokenizer"),Pzr.forEach(t),voo=r(X9," or "),kR=n(X9,"A",{href:!0});var Bzr=s(kR);Foo=r(Bzr,"GPT2TokenizerFast"),Bzr.forEach(t),Too=r(X9," (GPT Neo model)"),X9.forEach(t),Moo=i(S),Zn=n(S,"LI",{});var z9=s(Zn);vte=n(z9,"STRONG",{});var Izr=s(vte);Eoo=r(Izr,"gptj"),Izr.forEach(t),Coo=r(z9," \u2014 "),SR=n(z9,"A",{href:!0});var qzr=s(SR);woo=r(qzr,"GPT2Tokenizer"),qzr.forEach(t),Aoo=r(z9," or "),RR=n(z9,"A",{href:!0});var Nzr=s(RR);yoo=r(Nzr,"GPT2TokenizerFast"),Nzr.forEach(t),Loo=r(z9," (GPT-J model)"),z9.forEach(t),xoo=i(S),es=n(S,"LI",{});var W9=s(es);Fte=n(W9,"STRONG",{});var jzr=s(Fte);$oo=r(jzr,"herbert"),jzr.forEach(t),koo=r(W9," \u2014 "),PR=n(W9,"A",{href:!0});var Dzr=s(PR);Soo=r(Dzr,"HerbertTokenizer"),Dzr.forEach(t),Roo=r(W9," or "),BR=n(W9,"A",{href:!0});var Gzr=s(BR);Poo=r(Gzr,"HerbertTokenizerFast"),Gzr.forEach(t),Boo=r(W9," (HerBERT model)"),W9.forEach(t),Ioo=i(S),Sg=n(S,"LI",{});var Cwe=s(Sg);Tte=n(Cwe,"STRONG",{});var Ozr=s(Tte);qoo=r(Ozr,"hubert"),Ozr.forEach(t),Noo=r(Cwe," \u2014 "),IR=n(Cwe,"A",{href:!0});var Vzr=s(IR);joo=r(Vzr,"Wav2Vec2CTCTokenizer"),Vzr.forEach(t),Doo=r(Cwe," (Hubert model)"),Cwe.forEach(t),Goo=i(S),os=n(S,"LI",{});var Q9=s(os);Mte=n(Q9,"STRONG",{});var Xzr=s(Mte);Ooo=r(Xzr,"ibert"),Xzr.forEach(t),Voo=r(Q9," \u2014 "),qR=n(Q9,"A",{href:!0});var zzr=s(qR);Xoo=r(zzr,"RobertaTokenizer"),zzr.forEach(t),zoo=r(Q9," or "),NR=n(Q9,"A",{href:!0});var Wzr=s(NR);Woo=r(Wzr,"RobertaTokenizerFast"),Wzr.forEach(t),Qoo=r(Q9," (I-BERT model)"),Q9.forEach(t),Hoo=i(S),rs=n(S,"LI",{});var H9=s(rs);Ete=n(H9,"STRONG",{});var Qzr=s(Ete);Uoo=r(Qzr,"layoutlm"),Qzr.forEach(t),Joo=r(H9," \u2014 "),jR=n(H9,"A",{href:!0});var Hzr=s(jR);Yoo=r(Hzr,"LayoutLMTokenizer"),Hzr.forEach(t),Koo=r(H9," or "),DR=n(H9,"A",{href:!0});var Uzr=s(DR);Zoo=r(Uzr,"LayoutLMTokenizerFast"),Uzr.forEach(t),ero=r(H9," (LayoutLM model)"),H9.forEach(t),oro=i(S),ts=n(S,"LI",{});var U9=s(ts);Cte=n(U9,"STRONG",{});var Jzr=s(Cte);rro=r(Jzr,"layoutlmv2"),Jzr.forEach(t),tro=r(U9," \u2014 "),GR=n(U9,"A",{href:!0});var Yzr=s(GR);aro=r(Yzr,"LayoutLMv2Tokenizer"),Yzr.forEach(t),nro=r(U9," or "),OR=n(U9,"A",{href:!0});var Kzr=s(OR);sro=r(Kzr,"LayoutLMv2TokenizerFast"),Kzr.forEach(t),lro=r(U9," (LayoutLMv2 model)"),U9.forEach(t),iro=i(S),as=n(S,"LI",{});var J9=s(as);wte=n(J9,"STRONG",{});var Zzr=s(wte);dro=r(Zzr,"layoutxlm"),Zzr.forEach(t),cro=r(J9," \u2014 "),VR=n(J9,"A",{href:!0});var eWr=s(VR);fro=r(eWr,"LayoutXLMTokenizer"),eWr.forEach(t),mro=r(J9," or "),XR=n(J9,"A",{href:!0});var oWr=s(XR);gro=r(oWr,"LayoutXLMTokenizerFast"),oWr.forEach(t),hro=r(J9," (LayoutXLM model)"),J9.forEach(t),pro=i(S),ns=n(S,"LI",{});var Y9=s(ns);Ate=n(Y9,"STRONG",{});var rWr=s(Ate);_ro=r(rWr,"led"),rWr.forEach(t),uro=r(Y9," \u2014 "),zR=n(Y9,"A",{href:!0});var tWr=s(zR);bro=r(tWr,"LEDTokenizer"),tWr.forEach(t),vro=r(Y9," or "),WR=n(Y9,"A",{href:!0});var aWr=s(WR);Fro=r(aWr,"LEDTokenizerFast"),aWr.forEach(t),Tro=r(Y9," (LED model)"),Y9.forEach(t),Mro=i(S),ss=n(S,"LI",{});var K9=s(ss);yte=n(K9,"STRONG",{});var nWr=s(yte);Ero=r(nWr,"longformer"),nWr.forEach(t),Cro=r(K9," \u2014 "),QR=n(K9,"A",{href:!0});var sWr=s(QR);wro=r(sWr,"LongformerTokenizer"),sWr.forEach(t),Aro=r(K9," or "),HR=n(K9,"A",{href:!0});var lWr=s(HR);yro=r(lWr,"LongformerTokenizerFast"),lWr.forEach(t),Lro=r(K9," (Longformer model)"),K9.forEach(t),xro=i(S),Rg=n(S,"LI",{});var wwe=s(Rg);Lte=n(wwe,"STRONG",{});var iWr=s(Lte);$ro=r(iWr,"luke"),iWr.forEach(t),kro=r(wwe," \u2014 "),UR=n(wwe,"A",{href:!0});var dWr=s(UR);Sro=r(dWr,"LukeTokenizer"),dWr.forEach(t),Rro=r(wwe," (LUKE model)"),wwe.forEach(t),Pro=i(S),ls=n(S,"LI",{});var Z9=s(ls);xte=n(Z9,"STRONG",{});var cWr=s(xte);Bro=r(cWr,"lxmert"),cWr.forEach(t),Iro=r(Z9," \u2014 "),JR=n(Z9,"A",{href:!0});var fWr=s(JR);qro=r(fWr,"LxmertTokenizer"),fWr.forEach(t),Nro=r(Z9," or "),YR=n(Z9,"A",{href:!0});var mWr=s(YR);jro=r(mWr,"LxmertTokenizerFast"),mWr.forEach(t),Dro=r(Z9," (LXMERT model)"),Z9.forEach(t),Gro=i(S),Pg=n(S,"LI",{});var Awe=s(Pg);$te=n(Awe,"STRONG",{});var gWr=s($te);Oro=r(gWr,"m2m_100"),gWr.forEach(t),Vro=r(Awe," \u2014 "),KR=n(Awe,"A",{href:!0});var hWr=s(KR);Xro=r(hWr,"M2M100Tokenizer"),hWr.forEach(t),zro=r(Awe," (M2M100 model)"),Awe.forEach(t),Wro=i(S),Bg=n(S,"LI",{});var ywe=s(Bg);kte=n(ywe,"STRONG",{});var pWr=s(kte);Qro=r(pWr,"marian"),pWr.forEach(t),Hro=r(ywe," \u2014 "),ZR=n(ywe,"A",{href:!0});var _Wr=s(ZR);Uro=r(_Wr,"MarianTokenizer"),_Wr.forEach(t),Jro=r(ywe," (Marian model)"),ywe.forEach(t),Yro=i(S),is=n(S,"LI",{});var e$=s(is);Ste=n(e$,"STRONG",{});var uWr=s(Ste);Kro=r(uWr,"mbart"),uWr.forEach(t),Zro=r(e$," \u2014 "),eP=n(e$,"A",{href:!0});var bWr=s(eP);eto=r(bWr,"MBartTokenizer"),bWr.forEach(t),oto=r(e$," or "),oP=n(e$,"A",{href:!0});var vWr=s(oP);rto=r(vWr,"MBartTokenizerFast"),vWr.forEach(t),tto=r(e$," (mBART model)"),e$.forEach(t),ato=i(S),ds=n(S,"LI",{});var o$=s(ds);Rte=n(o$,"STRONG",{});var FWr=s(Rte);nto=r(FWr,"mbart50"),FWr.forEach(t),sto=r(o$," \u2014 "),rP=n(o$,"A",{href:!0});var TWr=s(rP);lto=r(TWr,"MBart50Tokenizer"),TWr.forEach(t),ito=r(o$," or "),tP=n(o$,"A",{href:!0});var MWr=s(tP);dto=r(MWr,"MBart50TokenizerFast"),MWr.forEach(t),cto=r(o$," (mBART-50 model)"),o$.forEach(t),fto=i(S),cs=n(S,"LI",{});var r$=s(cs);Pte=n(r$,"STRONG",{});var EWr=s(Pte);mto=r(EWr,"megatron-bert"),EWr.forEach(t),gto=r(r$," \u2014 "),aP=n(r$,"A",{href:!0});var CWr=s(aP);hto=r(CWr,"BertTokenizer"),CWr.forEach(t),pto=r(r$," or "),nP=n(r$,"A",{href:!0});var wWr=s(nP);_to=r(wWr,"BertTokenizerFast"),wWr.forEach(t),uto=r(r$," (MegatronBert model)"),r$.forEach(t),bto=i(S),Ig=n(S,"LI",{});var Lwe=s(Ig);Bte=n(Lwe,"STRONG",{});var AWr=s(Bte);vto=r(AWr,"mluke"),AWr.forEach(t),Fto=r(Lwe," \u2014 "),sP=n(Lwe,"A",{href:!0});var yWr=s(sP);Tto=r(yWr,"MLukeTokenizer"),yWr.forEach(t),Mto=r(Lwe," (mLUKE model)"),Lwe.forEach(t),Eto=i(S),fs=n(S,"LI",{});var t$=s(fs);Ite=n(t$,"STRONG",{});var LWr=s(Ite);Cto=r(LWr,"mobilebert"),LWr.forEach(t),wto=r(t$," \u2014 "),lP=n(t$,"A",{href:!0});var xWr=s(lP);Ato=r(xWr,"MobileBertTokenizer"),xWr.forEach(t),yto=r(t$," or "),iP=n(t$,"A",{href:!0});var $Wr=s(iP);Lto=r($Wr,"MobileBertTokenizerFast"),$Wr.forEach(t),xto=r(t$," (MobileBERT model)"),t$.forEach(t),$to=i(S),ms=n(S,"LI",{});var a$=s(ms);qte=n(a$,"STRONG",{});var kWr=s(qte);kto=r(kWr,"mpnet"),kWr.forEach(t),Sto=r(a$," \u2014 "),dP=n(a$,"A",{href:!0});var SWr=s(dP);Rto=r(SWr,"MPNetTokenizer"),SWr.forEach(t),Pto=r(a$," or "),cP=n(a$,"A",{href:!0});var RWr=s(cP);Bto=r(RWr,"MPNetTokenizerFast"),RWr.forEach(t),Ito=r(a$," (MPNet model)"),a$.forEach(t),qto=i(S),gs=n(S,"LI",{});var n$=s(gs);Nte=n(n$,"STRONG",{});var PWr=s(Nte);Nto=r(PWr,"mt5"),PWr.forEach(t),jto=r(n$," \u2014 "),fP=n(n$,"A",{href:!0});var BWr=s(fP);Dto=r(BWr,"MT5Tokenizer"),BWr.forEach(t),Gto=r(n$," or "),mP=n(n$,"A",{href:!0});var IWr=s(mP);Oto=r(IWr,"MT5TokenizerFast"),IWr.forEach(t),Vto=r(n$," (mT5 model)"),n$.forEach(t),Xto=i(S),hs=n(S,"LI",{});var s$=s(hs);jte=n(s$,"STRONG",{});var qWr=s(jte);zto=r(qWr,"nystromformer"),qWr.forEach(t),Wto=r(s$," \u2014 "),gP=n(s$,"A",{href:!0});var NWr=s(gP);Qto=r(NWr,"AlbertTokenizer"),NWr.forEach(t),Hto=r(s$," or "),hP=n(s$,"A",{href:!0});var jWr=s(hP);Uto=r(jWr,"AlbertTokenizerFast"),jWr.forEach(t),Jto=r(s$," (Nystromformer model)"),s$.forEach(t),Yto=i(S),ps=n(S,"LI",{});var l$=s(ps);Dte=n(l$,"STRONG",{});var DWr=s(Dte);Kto=r(DWr,"openai-gpt"),DWr.forEach(t),Zto=r(l$," \u2014 "),pP=n(l$,"A",{href:!0});var GWr=s(pP);eao=r(GWr,"OpenAIGPTTokenizer"),GWr.forEach(t),oao=r(l$," or "),_P=n(l$,"A",{href:!0});var OWr=s(_P);rao=r(OWr,"OpenAIGPTTokenizerFast"),OWr.forEach(t),tao=r(l$," (OpenAI GPT model)"),l$.forEach(t),aao=i(S),qg=n(S,"LI",{});var xwe=s(qg);Gte=n(xwe,"STRONG",{});var VWr=s(Gte);nao=r(VWr,"opt"),VWr.forEach(t),sao=r(xwe," \u2014 "),uP=n(xwe,"A",{href:!0});var XWr=s(uP);lao=r(XWr,"GPT2Tokenizer"),XWr.forEach(t),iao=r(xwe," (OPT model)"),xwe.forEach(t),dao=i(S),_s=n(S,"LI",{});var i$=s(_s);Ote=n(i$,"STRONG",{});var zWr=s(Ote);cao=r(zWr,"pegasus"),zWr.forEach(t),fao=r(i$," \u2014 "),bP=n(i$,"A",{href:!0});var WWr=s(bP);mao=r(WWr,"PegasusTokenizer"),WWr.forEach(t),gao=r(i$," or "),vP=n(i$,"A",{href:!0});var QWr=s(vP);hao=r(QWr,"PegasusTokenizerFast"),QWr.forEach(t),pao=r(i$," (Pegasus model)"),i$.forEach(t),_ao=i(S),Ng=n(S,"LI",{});var $we=s(Ng);Vte=n($we,"STRONG",{});var HWr=s(Vte);uao=r(HWr,"perceiver"),HWr.forEach(t),bao=r($we," \u2014 "),FP=n($we,"A",{href:!0});var UWr=s(FP);vao=r(UWr,"PerceiverTokenizer"),UWr.forEach(t),Fao=r($we," (Perceiver model)"),$we.forEach(t),Tao=i(S),jg=n(S,"LI",{});var kwe=s(jg);Xte=n(kwe,"STRONG",{});var JWr=s(Xte);Mao=r(JWr,"phobert"),JWr.forEach(t),Eao=r(kwe," \u2014 "),TP=n(kwe,"A",{href:!0});var YWr=s(TP);Cao=r(YWr,"PhobertTokenizer"),YWr.forEach(t),wao=r(kwe," (PhoBERT model)"),kwe.forEach(t),Aao=i(S),Dg=n(S,"LI",{});var Swe=s(Dg);zte=n(Swe,"STRONG",{});var KWr=s(zte);yao=r(KWr,"plbart"),KWr.forEach(t),Lao=r(Swe," \u2014 "),MP=n(Swe,"A",{href:!0});var ZWr=s(MP);xao=r(ZWr,"PLBartTokenizer"),ZWr.forEach(t),$ao=r(Swe," (PLBart model)"),Swe.forEach(t),kao=i(S),Gg=n(S,"LI",{});var Rwe=s(Gg);Wte=n(Rwe,"STRONG",{});var eQr=s(Wte);Sao=r(eQr,"prophetnet"),eQr.forEach(t),Rao=r(Rwe," \u2014 "),EP=n(Rwe,"A",{href:!0});var oQr=s(EP);Pao=r(oQr,"ProphetNetTokenizer"),oQr.forEach(t),Bao=r(Rwe," (ProphetNet model)"),Rwe.forEach(t),Iao=i(S),us=n(S,"LI",{});var d$=s(us);Qte=n(d$,"STRONG",{});var rQr=s(Qte);qao=r(rQr,"qdqbert"),rQr.forEach(t),Nao=r(d$," \u2014 "),CP=n(d$,"A",{href:!0});var tQr=s(CP);jao=r(tQr,"BertTokenizer"),tQr.forEach(t),Dao=r(d$," or "),wP=n(d$,"A",{href:!0});var aQr=s(wP);Gao=r(aQr,"BertTokenizerFast"),aQr.forEach(t),Oao=r(d$," (QDQBert model)"),d$.forEach(t),Vao=i(S),Og=n(S,"LI",{});var Pwe=s(Og);Hte=n(Pwe,"STRONG",{});var nQr=s(Hte);Xao=r(nQr,"rag"),nQr.forEach(t),zao=r(Pwe," \u2014 "),AP=n(Pwe,"A",{href:!0});var sQr=s(AP);Wao=r(sQr,"RagTokenizer"),sQr.forEach(t),Qao=r(Pwe," (RAG model)"),Pwe.forEach(t),Hao=i(S),bs=n(S,"LI",{});var c$=s(bs);Ute=n(c$,"STRONG",{});var lQr=s(Ute);Uao=r(lQr,"realm"),lQr.forEach(t),Jao=r(c$," \u2014 "),yP=n(c$,"A",{href:!0});var iQr=s(yP);Yao=r(iQr,"RealmTokenizer"),iQr.forEach(t),Kao=r(c$," or "),LP=n(c$,"A",{href:!0});var dQr=s(LP);Zao=r(dQr,"RealmTokenizerFast"),dQr.forEach(t),eno=r(c$," (Realm model)"),c$.forEach(t),ono=i(S),vs=n(S,"LI",{});var f$=s(vs);Jte=n(f$,"STRONG",{});var cQr=s(Jte);rno=r(cQr,"reformer"),cQr.forEach(t),tno=r(f$," \u2014 "),xP=n(f$,"A",{href:!0});var fQr=s(xP);ano=r(fQr,"ReformerTokenizer"),fQr.forEach(t),nno=r(f$," or "),$P=n(f$,"A",{href:!0});var mQr=s($P);sno=r(mQr,"ReformerTokenizerFast"),mQr.forEach(t),lno=r(f$," (Reformer model)"),f$.forEach(t),ino=i(S),Fs=n(S,"LI",{});var m$=s(Fs);Yte=n(m$,"STRONG",{});var gQr=s(Yte);dno=r(gQr,"rembert"),gQr.forEach(t),cno=r(m$," \u2014 "),kP=n(m$,"A",{href:!0});var hQr=s(kP);fno=r(hQr,"RemBertTokenizer"),hQr.forEach(t),mno=r(m$," or "),SP=n(m$,"A",{href:!0});var pQr=s(SP);gno=r(pQr,"RemBertTokenizerFast"),pQr.forEach(t),hno=r(m$," (RemBERT model)"),m$.forEach(t),pno=i(S),Ts=n(S,"LI",{});var g$=s(Ts);Kte=n(g$,"STRONG",{});var _Qr=s(Kte);_no=r(_Qr,"retribert"),_Qr.forEach(t),uno=r(g$," \u2014 "),RP=n(g$,"A",{href:!0});var uQr=s(RP);bno=r(uQr,"RetriBertTokenizer"),uQr.forEach(t),vno=r(g$," or "),PP=n(g$,"A",{href:!0});var bQr=s(PP);Fno=r(bQr,"RetriBertTokenizerFast"),bQr.forEach(t),Tno=r(g$," (RetriBERT model)"),g$.forEach(t),Mno=i(S),Ms=n(S,"LI",{});var h$=s(Ms);Zte=n(h$,"STRONG",{});var vQr=s(Zte);Eno=r(vQr,"roberta"),vQr.forEach(t),Cno=r(h$," \u2014 "),BP=n(h$,"A",{href:!0});var FQr=s(BP);wno=r(FQr,"RobertaTokenizer"),FQr.forEach(t),Ano=r(h$," or "),IP=n(h$,"A",{href:!0});var TQr=s(IP);yno=r(TQr,"RobertaTokenizerFast"),TQr.forEach(t),Lno=r(h$," (RoBERTa model)"),h$.forEach(t),xno=i(S),Es=n(S,"LI",{});var p$=s(Es);eae=n(p$,"STRONG",{});var MQr=s(eae);$no=r(MQr,"roformer"),MQr.forEach(t),kno=r(p$," \u2014 "),qP=n(p$,"A",{href:!0});var EQr=s(qP);Sno=r(EQr,"RoFormerTokenizer"),EQr.forEach(t),Rno=r(p$," or "),NP=n(p$,"A",{href:!0});var CQr=s(NP);Pno=r(CQr,"RoFormerTokenizerFast"),CQr.forEach(t),Bno=r(p$," (RoFormer model)"),p$.forEach(t),Ino=i(S),Vg=n(S,"LI",{});var Bwe=s(Vg);oae=n(Bwe,"STRONG",{});var wQr=s(oae);qno=r(wQr,"speech_to_text"),wQr.forEach(t),Nno=r(Bwe," \u2014 "),jP=n(Bwe,"A",{href:!0});var AQr=s(jP);jno=r(AQr,"Speech2TextTokenizer"),AQr.forEach(t),Dno=r(Bwe," (Speech2Text model)"),Bwe.forEach(t),Gno=i(S),Xg=n(S,"LI",{});var Iwe=s(Xg);rae=n(Iwe,"STRONG",{});var yQr=s(rae);Ono=r(yQr,"speech_to_text_2"),yQr.forEach(t),Vno=r(Iwe," \u2014 "),DP=n(Iwe,"A",{href:!0});var LQr=s(DP);Xno=r(LQr,"Speech2Text2Tokenizer"),LQr.forEach(t),zno=r(Iwe," (Speech2Text2 model)"),Iwe.forEach(t),Wno=i(S),Cs=n(S,"LI",{});var _$=s(Cs);tae=n(_$,"STRONG",{});var xQr=s(tae);Qno=r(xQr,"splinter"),xQr.forEach(t),Hno=r(_$," \u2014 "),GP=n(_$,"A",{href:!0});var $Qr=s(GP);Uno=r($Qr,"SplinterTokenizer"),$Qr.forEach(t),Jno=r(_$," or "),OP=n(_$,"A",{href:!0});var kQr=s(OP);Yno=r(kQr,"SplinterTokenizerFast"),kQr.forEach(t),Kno=r(_$," (Splinter model)"),_$.forEach(t),Zno=i(S),ws=n(S,"LI",{});var u$=s(ws);aae=n(u$,"STRONG",{});var SQr=s(aae);eso=r(SQr,"squeezebert"),SQr.forEach(t),oso=r(u$," \u2014 "),VP=n(u$,"A",{href:!0});var RQr=s(VP);rso=r(RQr,"SqueezeBertTokenizer"),RQr.forEach(t),tso=r(u$," or "),XP=n(u$,"A",{href:!0});var PQr=s(XP);aso=r(PQr,"SqueezeBertTokenizerFast"),PQr.forEach(t),nso=r(u$," (SqueezeBERT model)"),u$.forEach(t),sso=i(S),As=n(S,"LI",{});var b$=s(As);nae=n(b$,"STRONG",{});var BQr=s(nae);lso=r(BQr,"t5"),BQr.forEach(t),iso=r(b$," \u2014 "),zP=n(b$,"A",{href:!0});var IQr=s(zP);dso=r(IQr,"T5Tokenizer"),IQr.forEach(t),cso=r(b$," or "),WP=n(b$,"A",{href:!0});var qQr=s(WP);fso=r(qQr,"T5TokenizerFast"),qQr.forEach(t),mso=r(b$," (T5 model)"),b$.forEach(t),gso=i(S),zg=n(S,"LI",{});var qwe=s(zg);sae=n(qwe,"STRONG",{});var NQr=s(sae);hso=r(NQr,"tapas"),NQr.forEach(t),pso=r(qwe," \u2014 "),QP=n(qwe,"A",{href:!0});var jQr=s(QP);_so=r(jQr,"TapasTokenizer"),jQr.forEach(t),uso=r(qwe," (TAPAS model)"),qwe.forEach(t),bso=i(S),Wg=n(S,"LI",{});var Nwe=s(Wg);lae=n(Nwe,"STRONG",{});var DQr=s(lae);vso=r(DQr,"tapex"),DQr.forEach(t),Fso=r(Nwe," \u2014 "),HP=n(Nwe,"A",{href:!0});var GQr=s(HP);Tso=r(GQr,"TapexTokenizer"),GQr.forEach(t),Mso=r(Nwe," (TAPEX model)"),Nwe.forEach(t),Eso=i(S),Qg=n(S,"LI",{});var jwe=s(Qg);iae=n(jwe,"STRONG",{});var OQr=s(iae);Cso=r(OQr,"transfo-xl"),OQr.forEach(t),wso=r(jwe," \u2014 "),UP=n(jwe,"A",{href:!0});var VQr=s(UP);Aso=r(VQr,"TransfoXLTokenizer"),VQr.forEach(t),yso=r(jwe," (Transformer-XL model)"),jwe.forEach(t),Lso=i(S),ys=n(S,"LI",{});var v$=s(ys);dae=n(v$,"STRONG",{});var XQr=s(dae);xso=r(XQr,"visual_bert"),XQr.forEach(t),$so=r(v$," \u2014 "),JP=n(v$,"A",{href:!0});var zQr=s(JP);kso=r(zQr,"BertTokenizer"),zQr.forEach(t),Sso=r(v$," or "),YP=n(v$,"A",{href:!0});var WQr=s(YP);Rso=r(WQr,"BertTokenizerFast"),WQr.forEach(t),Pso=r(v$," (VisualBert model)"),v$.forEach(t),Bso=i(S),Hg=n(S,"LI",{});var Dwe=s(Hg);cae=n(Dwe,"STRONG",{});var QQr=s(cae);Iso=r(QQr,"wav2vec2"),QQr.forEach(t),qso=r(Dwe," \u2014 "),KP=n(Dwe,"A",{href:!0});var HQr=s(KP);Nso=r(HQr,"Wav2Vec2CTCTokenizer"),HQr.forEach(t),jso=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),Dso=i(S),Ug=n(S,"LI",{});var Gwe=s(Ug);fae=n(Gwe,"STRONG",{});var UQr=s(fae);Gso=r(UQr,"wav2vec2-conformer"),UQr.forEach(t),Oso=r(Gwe," \u2014 "),ZP=n(Gwe,"A",{href:!0});var JQr=s(ZP);Vso=r(JQr,"Wav2Vec2CTCTokenizer"),JQr.forEach(t),Xso=r(Gwe," (Wav2Vec2-Conformer model)"),Gwe.forEach(t),zso=i(S),Jg=n(S,"LI",{});var Owe=s(Jg);mae=n(Owe,"STRONG",{});var YQr=s(mae);Wso=r(YQr,"wav2vec2_phoneme"),YQr.forEach(t),Qso=r(Owe," \u2014 "),eB=n(Owe,"A",{href:!0});var KQr=s(eB);Hso=r(KQr,"Wav2Vec2PhonemeCTCTokenizer"),KQr.forEach(t),Uso=r(Owe," (Wav2Vec2Phoneme model)"),Owe.forEach(t),Jso=i(S),Ls=n(S,"LI",{});var F$=s(Ls);gae=n(F$,"STRONG",{});var ZQr=s(gae);Yso=r(ZQr,"xglm"),ZQr.forEach(t),Kso=r(F$," \u2014 "),oB=n(F$,"A",{href:!0});var eHr=s(oB);Zso=r(eHr,"XGLMTokenizer"),eHr.forEach(t),elo=r(F$," or "),rB=n(F$,"A",{href:!0});var oHr=s(rB);olo=r(oHr,"XGLMTokenizerFast"),oHr.forEach(t),rlo=r(F$," (XGLM model)"),F$.forEach(t),tlo=i(S),Yg=n(S,"LI",{});var Vwe=s(Yg);hae=n(Vwe,"STRONG",{});var rHr=s(hae);alo=r(rHr,"xlm"),rHr.forEach(t),nlo=r(Vwe," \u2014 "),tB=n(Vwe,"A",{href:!0});var tHr=s(tB);slo=r(tHr,"XLMTokenizer"),tHr.forEach(t),llo=r(Vwe," (XLM model)"),Vwe.forEach(t),ilo=i(S),Kg=n(S,"LI",{});var Xwe=s(Kg);pae=n(Xwe,"STRONG",{});var aHr=s(pae);dlo=r(aHr,"xlm-prophetnet"),aHr.forEach(t),clo=r(Xwe," \u2014 "),aB=n(Xwe,"A",{href:!0});var nHr=s(aB);flo=r(nHr,"XLMProphetNetTokenizer"),nHr.forEach(t),mlo=r(Xwe," (XLMProphetNet model)"),Xwe.forEach(t),glo=i(S),xs=n(S,"LI",{});var T$=s(xs);_ae=n(T$,"STRONG",{});var sHr=s(_ae);hlo=r(sHr,"xlm-roberta"),sHr.forEach(t),plo=r(T$," \u2014 "),nB=n(T$,"A",{href:!0});var lHr=s(nB);_lo=r(lHr,"XLMRobertaTokenizer"),lHr.forEach(t),ulo=r(T$," or "),sB=n(T$,"A",{href:!0});var iHr=s(sB);blo=r(iHr,"XLMRobertaTokenizerFast"),iHr.forEach(t),vlo=r(T$," (XLM-RoBERTa model)"),T$.forEach(t),Flo=i(S),$s=n(S,"LI",{});var M$=s($s);uae=n(M$,"STRONG",{});var dHr=s(uae);Tlo=r(dHr,"xlm-roberta-xl"),dHr.forEach(t),Mlo=r(M$," \u2014 "),lB=n(M$,"A",{href:!0});var cHr=s(lB);Elo=r(cHr,"RobertaTokenizer"),cHr.forEach(t),Clo=r(M$," or "),iB=n(M$,"A",{href:!0});var fHr=s(iB);wlo=r(fHr,"RobertaTokenizerFast"),fHr.forEach(t),Alo=r(M$," (XLM-RoBERTa-XL model)"),M$.forEach(t),ylo=i(S),ks=n(S,"LI",{});var E$=s(ks);bae=n(E$,"STRONG",{});var mHr=s(bae);Llo=r(mHr,"xlnet"),mHr.forEach(t),xlo=r(E$," \u2014 "),dB=n(E$,"A",{href:!0});var gHr=s(dB);$lo=r(gHr,"XLNetTokenizer"),gHr.forEach(t),klo=r(E$," or "),cB=n(E$,"A",{href:!0});var hHr=s(cB);Slo=r(hHr,"XLNetTokenizerFast"),hHr.forEach(t),Rlo=r(E$," (XLNet model)"),E$.forEach(t),Plo=i(S),Ss=n(S,"LI",{});var C$=s(Ss);vae=n(C$,"STRONG",{});var pHr=s(vae);Blo=r(pHr,"yoso"),pHr.forEach(t),Ilo=r(C$," \u2014 "),fB=n(C$,"A",{href:!0});var _Hr=s(fB);qlo=r(_Hr,"AlbertTokenizer"),_Hr.forEach(t),Nlo=r(C$," or "),mB=n(C$,"A",{href:!0});var uHr=s(mB);jlo=r(uHr,"AlbertTokenizerFast"),uHr.forEach(t),Dlo=r(C$," (YOSO model)"),C$.forEach(t),S.forEach(t),Glo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),Olo=i(Is),eh=n(Is,"DIV",{class:!0});var UNe=s(eh);T(C6.$$.fragment,UNe),Vlo=i(UNe),Fae=n(UNe,"P",{});var bHr=s(Fae);Xlo=r(bHr,"Register a new tokenizer in this mapping."),bHr.forEach(t),UNe.forEach(t),Is.forEach(t),JIe=i(f),Ti=n(f,"H2",{class:!0});var JNe=s(Ti);oh=n(JNe,"A",{id:!0,class:!0,href:!0});var vHr=s(oh);Tae=n(vHr,"SPAN",{});var FHr=s(Tae);T(w6.$$.fragment,FHr),FHr.forEach(t),vHr.forEach(t),zlo=i(JNe),Mae=n(JNe,"SPAN",{});var THr=s(Mae);Wlo=r(THr,"AutoFeatureExtractor"),THr.forEach(t),JNe.forEach(t),YIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(A6.$$.fragment,Ns),Qlo=i(Ns),y6=n(Ns,"P",{});var YNe=s(y6);Hlo=r(YNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=n(YNe,"A",{href:!0});var MHr=s(gB);Ulo=r(MHr,"AutoFeatureExtractor.from_pretrained()"),MHr.forEach(t),Jlo=r(YNe," class method."),YNe.forEach(t),Ylo=i(Ns),L6=n(Ns,"P",{});var KNe=s(L6);Klo=r(KNe,"This class cannot be instantiated directly using "),Eae=n(KNe,"CODE",{});var EHr=s(Eae);Zlo=r(EHr,"__init__()"),EHr.forEach(t),eio=r(KNe," (throws an error)."),KNe.forEach(t),oio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(x6.$$.fragment,Zt),rio=i(Zt),Cae=n(Zt,"P",{});var CHr=s(Cae);tio=r(CHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CHr.forEach(t),aio=i(Zt),ya=n(Zt,"P",{});var h0=s(ya);nio=r(h0,"The feature extractor class to instantiate is selected based on the "),wae=n(h0,"CODE",{});var wHr=s(wae);sio=r(wHr,"model_type"),wHr.forEach(t),lio=r(h0,` property of the config object
(either passed as an argument or loaded from `),Aae=n(h0,"CODE",{});var AHr=s(Aae);iio=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),dio=r(h0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yae=n(h0,"CODE",{});var yHr=s(yae);cio=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),fio=r(h0,":"),h0.forEach(t),mio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);rh=n(re,"LI",{});var zwe=s(rh);Lae=n(zwe,"STRONG",{});var LHr=s(Lae);gio=r(LHr,"beit"),LHr.forEach(t),hio=r(zwe," \u2014 "),hB=n(zwe,"A",{href:!0});var xHr=s(hB);pio=r(xHr,"BeitFeatureExtractor"),xHr.forEach(t),_io=r(zwe," (BEiT model)"),zwe.forEach(t),uio=i(re),th=n(re,"LI",{});var Wwe=s(th);xae=n(Wwe,"STRONG",{});var $Hr=s(xae);bio=r($Hr,"clip"),$Hr.forEach(t),vio=r(Wwe," \u2014 "),pB=n(Wwe,"A",{href:!0});var kHr=s(pB);Fio=r(kHr,"CLIPFeatureExtractor"),kHr.forEach(t),Tio=r(Wwe," (CLIP model)"),Wwe.forEach(t),Mio=i(re),ah=n(re,"LI",{});var Qwe=s(ah);$ae=n(Qwe,"STRONG",{});var SHr=s($ae);Eio=r(SHr,"convnext"),SHr.forEach(t),Cio=r(Qwe," \u2014 "),_B=n(Qwe,"A",{href:!0});var RHr=s(_B);wio=r(RHr,"ConvNextFeatureExtractor"),RHr.forEach(t),Aio=r(Qwe," (ConvNext model)"),Qwe.forEach(t),yio=i(re),nh=n(re,"LI",{});var Hwe=s(nh);kae=n(Hwe,"STRONG",{});var PHr=s(kae);Lio=r(PHr,"cvt"),PHr.forEach(t),xio=r(Hwe," \u2014 "),uB=n(Hwe,"A",{href:!0});var BHr=s(uB);$io=r(BHr,"ConvNextFeatureExtractor"),BHr.forEach(t),kio=r(Hwe," (CvT model)"),Hwe.forEach(t),Sio=i(re),sh=n(re,"LI",{});var Uwe=s(sh);Sae=n(Uwe,"STRONG",{});var IHr=s(Sae);Rio=r(IHr,"data2vec-audio"),IHr.forEach(t),Pio=r(Uwe," \u2014 "),bB=n(Uwe,"A",{href:!0});var qHr=s(bB);Bio=r(qHr,"Wav2Vec2FeatureExtractor"),qHr.forEach(t),Iio=r(Uwe," (Data2VecAudio model)"),Uwe.forEach(t),qio=i(re),lh=n(re,"LI",{});var Jwe=s(lh);Rae=n(Jwe,"STRONG",{});var NHr=s(Rae);Nio=r(NHr,"data2vec-vision"),NHr.forEach(t),jio=r(Jwe," \u2014 "),vB=n(Jwe,"A",{href:!0});var jHr=s(vB);Dio=r(jHr,"BeitFeatureExtractor"),jHr.forEach(t),Gio=r(Jwe," (Data2VecVision model)"),Jwe.forEach(t),Oio=i(re),ih=n(re,"LI",{});var Ywe=s(ih);Pae=n(Ywe,"STRONG",{});var DHr=s(Pae);Vio=r(DHr,"deit"),DHr.forEach(t),Xio=r(Ywe," \u2014 "),FB=n(Ywe,"A",{href:!0});var GHr=s(FB);zio=r(GHr,"DeiTFeatureExtractor"),GHr.forEach(t),Wio=r(Ywe," (DeiT model)"),Ywe.forEach(t),Qio=i(re),dh=n(re,"LI",{});var Kwe=s(dh);Bae=n(Kwe,"STRONG",{});var OHr=s(Bae);Hio=r(OHr,"detr"),OHr.forEach(t),Uio=r(Kwe," \u2014 "),TB=n(Kwe,"A",{href:!0});var VHr=s(TB);Jio=r(VHr,"DetrFeatureExtractor"),VHr.forEach(t),Yio=r(Kwe," (DETR model)"),Kwe.forEach(t),Kio=i(re),ch=n(re,"LI",{});var Zwe=s(ch);Iae=n(Zwe,"STRONG",{});var XHr=s(Iae);Zio=r(XHr,"dpt"),XHr.forEach(t),edo=r(Zwe," \u2014 "),MB=n(Zwe,"A",{href:!0});var zHr=s(MB);odo=r(zHr,"DPTFeatureExtractor"),zHr.forEach(t),rdo=r(Zwe," (DPT model)"),Zwe.forEach(t),tdo=i(re),fh=n(re,"LI",{});var e0e=s(fh);qae=n(e0e,"STRONG",{});var WHr=s(qae);ado=r(WHr,"flava"),WHr.forEach(t),ndo=r(e0e," \u2014 "),EB=n(e0e,"A",{href:!0});var QHr=s(EB);sdo=r(QHr,"FlavaFeatureExtractor"),QHr.forEach(t),ldo=r(e0e," (Flava model)"),e0e.forEach(t),ido=i(re),mh=n(re,"LI",{});var o0e=s(mh);Nae=n(o0e,"STRONG",{});var HHr=s(Nae);ddo=r(HHr,"glpn"),HHr.forEach(t),cdo=r(o0e," \u2014 "),CB=n(o0e,"A",{href:!0});var UHr=s(CB);fdo=r(UHr,"GLPNFeatureExtractor"),UHr.forEach(t),mdo=r(o0e," (GLPN model)"),o0e.forEach(t),gdo=i(re),gh=n(re,"LI",{});var r0e=s(gh);jae=n(r0e,"STRONG",{});var JHr=s(jae);hdo=r(JHr,"hubert"),JHr.forEach(t),pdo=r(r0e," \u2014 "),wB=n(r0e,"A",{href:!0});var YHr=s(wB);_do=r(YHr,"Wav2Vec2FeatureExtractor"),YHr.forEach(t),udo=r(r0e," (Hubert model)"),r0e.forEach(t),bdo=i(re),hh=n(re,"LI",{});var t0e=s(hh);Dae=n(t0e,"STRONG",{});var KHr=s(Dae);vdo=r(KHr,"layoutlmv2"),KHr.forEach(t),Fdo=r(t0e," \u2014 "),AB=n(t0e,"A",{href:!0});var ZHr=s(AB);Tdo=r(ZHr,"LayoutLMv2FeatureExtractor"),ZHr.forEach(t),Mdo=r(t0e," (LayoutLMv2 model)"),t0e.forEach(t),Edo=i(re),ph=n(re,"LI",{});var a0e=s(ph);Gae=n(a0e,"STRONG",{});var eUr=s(Gae);Cdo=r(eUr,"maskformer"),eUr.forEach(t),wdo=r(a0e," \u2014 "),yB=n(a0e,"A",{href:!0});var oUr=s(yB);Ado=r(oUr,"MaskFormerFeatureExtractor"),oUr.forEach(t),ydo=r(a0e," (MaskFormer model)"),a0e.forEach(t),Ldo=i(re),_h=n(re,"LI",{});var n0e=s(_h);Oae=n(n0e,"STRONG",{});var rUr=s(Oae);xdo=r(rUr,"perceiver"),rUr.forEach(t),$do=r(n0e," \u2014 "),LB=n(n0e,"A",{href:!0});var tUr=s(LB);kdo=r(tUr,"PerceiverFeatureExtractor"),tUr.forEach(t),Sdo=r(n0e," (Perceiver model)"),n0e.forEach(t),Rdo=i(re),uh=n(re,"LI",{});var s0e=s(uh);Vae=n(s0e,"STRONG",{});var aUr=s(Vae);Pdo=r(aUr,"poolformer"),aUr.forEach(t),Bdo=r(s0e," \u2014 "),xB=n(s0e,"A",{href:!0});var nUr=s(xB);Ido=r(nUr,"PoolFormerFeatureExtractor"),nUr.forEach(t),qdo=r(s0e," (PoolFormer model)"),s0e.forEach(t),Ndo=i(re),bh=n(re,"LI",{});var l0e=s(bh);Xae=n(l0e,"STRONG",{});var sUr=s(Xae);jdo=r(sUr,"regnet"),sUr.forEach(t),Ddo=r(l0e," \u2014 "),$B=n(l0e,"A",{href:!0});var lUr=s($B);Gdo=r(lUr,"ConvNextFeatureExtractor"),lUr.forEach(t),Odo=r(l0e," (RegNet model)"),l0e.forEach(t),Vdo=i(re),vh=n(re,"LI",{});var i0e=s(vh);zae=n(i0e,"STRONG",{});var iUr=s(zae);Xdo=r(iUr,"resnet"),iUr.forEach(t),zdo=r(i0e," \u2014 "),kB=n(i0e,"A",{href:!0});var dUr=s(kB);Wdo=r(dUr,"ConvNextFeatureExtractor"),dUr.forEach(t),Qdo=r(i0e," (ResNet model)"),i0e.forEach(t),Hdo=i(re),Fh=n(re,"LI",{});var d0e=s(Fh);Wae=n(d0e,"STRONG",{});var cUr=s(Wae);Udo=r(cUr,"segformer"),cUr.forEach(t),Jdo=r(d0e," \u2014 "),SB=n(d0e,"A",{href:!0});var fUr=s(SB);Ydo=r(fUr,"SegformerFeatureExtractor"),fUr.forEach(t),Kdo=r(d0e," (SegFormer model)"),d0e.forEach(t),Zdo=i(re),Th=n(re,"LI",{});var c0e=s(Th);Qae=n(c0e,"STRONG",{});var mUr=s(Qae);eco=r(mUr,"speech_to_text"),mUr.forEach(t),oco=r(c0e," \u2014 "),RB=n(c0e,"A",{href:!0});var gUr=s(RB);rco=r(gUr,"Speech2TextFeatureExtractor"),gUr.forEach(t),tco=r(c0e," (Speech2Text model)"),c0e.forEach(t),aco=i(re),Mh=n(re,"LI",{});var f0e=s(Mh);Hae=n(f0e,"STRONG",{});var hUr=s(Hae);nco=r(hUr,"swin"),hUr.forEach(t),sco=r(f0e," \u2014 "),PB=n(f0e,"A",{href:!0});var pUr=s(PB);lco=r(pUr,"ViTFeatureExtractor"),pUr.forEach(t),ico=r(f0e," (Swin model)"),f0e.forEach(t),dco=i(re),Eh=n(re,"LI",{});var m0e=s(Eh);Uae=n(m0e,"STRONG",{});var _Ur=s(Uae);cco=r(_Ur,"van"),_Ur.forEach(t),fco=r(m0e," \u2014 "),BB=n(m0e,"A",{href:!0});var uUr=s(BB);mco=r(uUr,"ConvNextFeatureExtractor"),uUr.forEach(t),gco=r(m0e," (VAN model)"),m0e.forEach(t),hco=i(re),Ch=n(re,"LI",{});var g0e=s(Ch);Jae=n(g0e,"STRONG",{});var bUr=s(Jae);pco=r(bUr,"vit"),bUr.forEach(t),_co=r(g0e," \u2014 "),IB=n(g0e,"A",{href:!0});var vUr=s(IB);uco=r(vUr,"ViTFeatureExtractor"),vUr.forEach(t),bco=r(g0e," (ViT model)"),g0e.forEach(t),vco=i(re),wh=n(re,"LI",{});var h0e=s(wh);Yae=n(h0e,"STRONG",{});var FUr=s(Yae);Fco=r(FUr,"vit_mae"),FUr.forEach(t),Tco=r(h0e," \u2014 "),qB=n(h0e,"A",{href:!0});var TUr=s(qB);Mco=r(TUr,"ViTFeatureExtractor"),TUr.forEach(t),Eco=r(h0e," (ViTMAE model)"),h0e.forEach(t),Cco=i(re),Ah=n(re,"LI",{});var p0e=s(Ah);Kae=n(p0e,"STRONG",{});var MUr=s(Kae);wco=r(MUr,"wav2vec2"),MUr.forEach(t),Aco=r(p0e," \u2014 "),NB=n(p0e,"A",{href:!0});var EUr=s(NB);yco=r(EUr,"Wav2Vec2FeatureExtractor"),EUr.forEach(t),Lco=r(p0e," (Wav2Vec2 model)"),p0e.forEach(t),xco=i(re),yh=n(re,"LI",{});var _0e=s(yh);Zae=n(_0e,"STRONG",{});var CUr=s(Zae);$co=r(CUr,"wav2vec2-conformer"),CUr.forEach(t),kco=r(_0e," \u2014 "),jB=n(_0e,"A",{href:!0});var wUr=s(jB);Sco=r(wUr,"Wav2Vec2FeatureExtractor"),wUr.forEach(t),Rco=r(_0e," (Wav2Vec2-Conformer model)"),_0e.forEach(t),Pco=i(re),Lh=n(re,"LI",{});var u0e=s(Lh);ene=n(u0e,"STRONG",{});var AUr=s(ene);Bco=r(AUr,"yolos"),AUr.forEach(t),Ico=r(u0e," \u2014 "),DB=n(u0e,"A",{href:!0});var yUr=s(DB);qco=r(yUr,"YolosFeatureExtractor"),yUr.forEach(t),Nco=r(u0e," (YOLOS model)"),u0e.forEach(t),re.forEach(t),jco=i(Zt),T(xh.$$.fragment,Zt),Dco=i(Zt),T($h.$$.fragment,Zt),Zt.forEach(t),Gco=i(Ns),kh=n(Ns,"DIV",{class:!0});var ZNe=s(kh);T($6.$$.fragment,ZNe),Oco=i(ZNe),one=n(ZNe,"P",{});var LUr=s(one);Vco=r(LUr,"Register a new feature extractor for this class."),LUr.forEach(t),ZNe.forEach(t),Ns.forEach(t),KIe=i(f),Mi=n(f,"H2",{class:!0});var eje=s(Mi);Sh=n(eje,"A",{id:!0,class:!0,href:!0});var xUr=s(Sh);rne=n(xUr,"SPAN",{});var $Ur=s(rne);T(k6.$$.fragment,$Ur),$Ur.forEach(t),xUr.forEach(t),Xco=i(eje),tne=n(eje,"SPAN",{});var kUr=s(tne);zco=r(kUr,"AutoProcessor"),kUr.forEach(t),eje.forEach(t),ZIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(S6.$$.fragment,js),Wco=i(js),R6=n(js,"P",{});var oje=s(R6);Qco=r(oje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=n(oje,"A",{href:!0});var SUr=s(GB);Hco=r(SUr,"AutoProcessor.from_pretrained()"),SUr.forEach(t),Uco=r(oje," class method."),oje.forEach(t),Jco=i(js),P6=n(js,"P",{});var rje=s(P6);Yco=r(rje,"This class cannot be instantiated directly using "),ane=n(rje,"CODE",{});var RUr=s(ane);Kco=r(RUr,"__init__()"),RUr.forEach(t),Zco=r(rje," (throws an error)."),rje.forEach(t),efo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(B6.$$.fragment,ea),ofo=i(ea),nne=n(ea,"P",{});var PUr=s(nne);rfo=r(PUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PUr.forEach(t),tfo=i(ea),Ei=n(ea,"P",{});var PK=s(Ei);afo=r(PK,"The processor class to instantiate is selected based on the "),sne=n(PK,"CODE",{});var BUr=s(sne);nfo=r(BUr,"model_type"),BUr.forEach(t),sfo=r(PK,` property of the config object (either
passed as an argument or loaded from `),lne=n(PK,"CODE",{});var IUr=s(lne);lfo=r(IUr,"pretrained_model_name_or_path"),IUr.forEach(t),ifo=r(PK," if possible):"),PK.forEach(t),dfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Rh=n(be,"LI",{});var b0e=s(Rh);ine=n(b0e,"STRONG",{});var qUr=s(ine);cfo=r(qUr,"clip"),qUr.forEach(t),ffo=r(b0e," \u2014 "),OB=n(b0e,"A",{href:!0});var NUr=s(OB);mfo=r(NUr,"CLIPProcessor"),NUr.forEach(t),gfo=r(b0e," (CLIP model)"),b0e.forEach(t),hfo=i(be),Ph=n(be,"LI",{});var v0e=s(Ph);dne=n(v0e,"STRONG",{});var jUr=s(dne);pfo=r(jUr,"flava"),jUr.forEach(t),_fo=r(v0e," \u2014 "),cne=n(v0e,"CODE",{});var DUr=s(cne);ufo=r(DUr,"FLAVAProcessor"),DUr.forEach(t),bfo=r(v0e," (Flava model)"),v0e.forEach(t),vfo=i(be),Bh=n(be,"LI",{});var F0e=s(Bh);fne=n(F0e,"STRONG",{});var GUr=s(fne);Ffo=r(GUr,"layoutlmv2"),GUr.forEach(t),Tfo=r(F0e," \u2014 "),VB=n(F0e,"A",{href:!0});var OUr=s(VB);Mfo=r(OUr,"LayoutLMv2Processor"),OUr.forEach(t),Efo=r(F0e," (LayoutLMv2 model)"),F0e.forEach(t),Cfo=i(be),Ih=n(be,"LI",{});var T0e=s(Ih);mne=n(T0e,"STRONG",{});var VUr=s(mne);wfo=r(VUr,"layoutxlm"),VUr.forEach(t),Afo=r(T0e," \u2014 "),XB=n(T0e,"A",{href:!0});var XUr=s(XB);yfo=r(XUr,"LayoutXLMProcessor"),XUr.forEach(t),Lfo=r(T0e," (LayoutXLM model)"),T0e.forEach(t),xfo=i(be),qh=n(be,"LI",{});var M0e=s(qh);gne=n(M0e,"STRONG",{});var zUr=s(gne);$fo=r(zUr,"sew"),zUr.forEach(t),kfo=r(M0e," \u2014 "),zB=n(M0e,"A",{href:!0});var WUr=s(zB);Sfo=r(WUr,"Wav2Vec2Processor"),WUr.forEach(t),Rfo=r(M0e," (SEW model)"),M0e.forEach(t),Pfo=i(be),Nh=n(be,"LI",{});var E0e=s(Nh);hne=n(E0e,"STRONG",{});var QUr=s(hne);Bfo=r(QUr,"sew-d"),QUr.forEach(t),Ifo=r(E0e," \u2014 "),WB=n(E0e,"A",{href:!0});var HUr=s(WB);qfo=r(HUr,"Wav2Vec2Processor"),HUr.forEach(t),Nfo=r(E0e," (SEW-D model)"),E0e.forEach(t),jfo=i(be),jh=n(be,"LI",{});var C0e=s(jh);pne=n(C0e,"STRONG",{});var UUr=s(pne);Dfo=r(UUr,"speech_to_text"),UUr.forEach(t),Gfo=r(C0e," \u2014 "),QB=n(C0e,"A",{href:!0});var JUr=s(QB);Ofo=r(JUr,"Speech2TextProcessor"),JUr.forEach(t),Vfo=r(C0e," (Speech2Text model)"),C0e.forEach(t),Xfo=i(be),Dh=n(be,"LI",{});var w0e=s(Dh);_ne=n(w0e,"STRONG",{});var YUr=s(_ne);zfo=r(YUr,"speech_to_text_2"),YUr.forEach(t),Wfo=r(w0e," \u2014 "),HB=n(w0e,"A",{href:!0});var KUr=s(HB);Qfo=r(KUr,"Speech2Text2Processor"),KUr.forEach(t),Hfo=r(w0e," (Speech2Text2 model)"),w0e.forEach(t),Ufo=i(be),Gh=n(be,"LI",{});var A0e=s(Gh);une=n(A0e,"STRONG",{});var ZUr=s(une);Jfo=r(ZUr,"trocr"),ZUr.forEach(t),Yfo=r(A0e," \u2014 "),UB=n(A0e,"A",{href:!0});var eJr=s(UB);Kfo=r(eJr,"TrOCRProcessor"),eJr.forEach(t),Zfo=r(A0e," (TrOCR model)"),A0e.forEach(t),emo=i(be),Oh=n(be,"LI",{});var y0e=s(Oh);bne=n(y0e,"STRONG",{});var oJr=s(bne);omo=r(oJr,"unispeech"),oJr.forEach(t),rmo=r(y0e," \u2014 "),JB=n(y0e,"A",{href:!0});var rJr=s(JB);tmo=r(rJr,"Wav2Vec2Processor"),rJr.forEach(t),amo=r(y0e," (UniSpeech model)"),y0e.forEach(t),nmo=i(be),Vh=n(be,"LI",{});var L0e=s(Vh);vne=n(L0e,"STRONG",{});var tJr=s(vne);smo=r(tJr,"unispeech-sat"),tJr.forEach(t),lmo=r(L0e," \u2014 "),YB=n(L0e,"A",{href:!0});var aJr=s(YB);imo=r(aJr,"Wav2Vec2Processor"),aJr.forEach(t),dmo=r(L0e," (UniSpeechSat model)"),L0e.forEach(t),cmo=i(be),Xh=n(be,"LI",{});var x0e=s(Xh);Fne=n(x0e,"STRONG",{});var nJr=s(Fne);fmo=r(nJr,"vilt"),nJr.forEach(t),mmo=r(x0e," \u2014 "),KB=n(x0e,"A",{href:!0});var sJr=s(KB);gmo=r(sJr,"ViltProcessor"),sJr.forEach(t),hmo=r(x0e," (ViLT model)"),x0e.forEach(t),pmo=i(be),zh=n(be,"LI",{});var $0e=s(zh);Tne=n($0e,"STRONG",{});var lJr=s(Tne);_mo=r(lJr,"vision-text-dual-encoder"),lJr.forEach(t),umo=r($0e," \u2014 "),ZB=n($0e,"A",{href:!0});var iJr=s(ZB);bmo=r(iJr,"VisionTextDualEncoderProcessor"),iJr.forEach(t),vmo=r($0e," (VisionTextDualEncoder model)"),$0e.forEach(t),Fmo=i(be),Wh=n(be,"LI",{});var k0e=s(Wh);Mne=n(k0e,"STRONG",{});var dJr=s(Mne);Tmo=r(dJr,"wav2vec2"),dJr.forEach(t),Mmo=r(k0e," \u2014 "),eI=n(k0e,"A",{href:!0});var cJr=s(eI);Emo=r(cJr,"Wav2Vec2Processor"),cJr.forEach(t),Cmo=r(k0e," (Wav2Vec2 model)"),k0e.forEach(t),wmo=i(be),Qh=n(be,"LI",{});var S0e=s(Qh);Ene=n(S0e,"STRONG",{});var fJr=s(Ene);Amo=r(fJr,"wav2vec2-conformer"),fJr.forEach(t),ymo=r(S0e," \u2014 "),oI=n(S0e,"A",{href:!0});var mJr=s(oI);Lmo=r(mJr,"Wav2Vec2Processor"),mJr.forEach(t),xmo=r(S0e," (Wav2Vec2-Conformer model)"),S0e.forEach(t),$mo=i(be),Hh=n(be,"LI",{});var R0e=s(Hh);Cne=n(R0e,"STRONG",{});var gJr=s(Cne);kmo=r(gJr,"wavlm"),gJr.forEach(t),Smo=r(R0e," \u2014 "),rI=n(R0e,"A",{href:!0});var hJr=s(rI);Rmo=r(hJr,"Wav2Vec2Processor"),hJr.forEach(t),Pmo=r(R0e," (WavLM model)"),R0e.forEach(t),be.forEach(t),Bmo=i(ea),T(Uh.$$.fragment,ea),Imo=i(ea),T(Jh.$$.fragment,ea),ea.forEach(t),qmo=i(js),Yh=n(js,"DIV",{class:!0});var tje=s(Yh);T(I6.$$.fragment,tje),Nmo=i(tje),wne=n(tje,"P",{});var pJr=s(wne);jmo=r(pJr,"Register a new processor for this class."),pJr.forEach(t),tje.forEach(t),js.forEach(t),eqe=i(f),Ci=n(f,"H2",{class:!0});var aje=s(Ci);Kh=n(aje,"A",{id:!0,class:!0,href:!0});var _Jr=s(Kh);Ane=n(_Jr,"SPAN",{});var uJr=s(Ane);T(q6.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),Dmo=i(aje),yne=n(aje,"SPAN",{});var bJr=s(yne);Gmo=r(bJr,"AutoModel"),bJr.forEach(t),aje.forEach(t),oqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(N6.$$.fragment,Ds),Omo=i(Ds),wi=n(Ds,"P",{});var BK=s(wi);Vmo=r(BK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=n(BK,"A",{href:!0});var vJr=s(tI);Xmo=r(vJr,"from_pretrained()"),vJr.forEach(t),zmo=r(BK," class method or the "),aI=n(BK,"A",{href:!0});var FJr=s(aI);Wmo=r(FJr,"from_config()"),FJr.forEach(t),Qmo=r(BK,` class
method.`),BK.forEach(t),Hmo=i(Ds),j6=n(Ds,"P",{});var nje=s(j6);Umo=r(nje,"This class cannot be instantiated directly using "),Lne=n(nje,"CODE",{});var TJr=s(Lne);Jmo=r(TJr,"__init__()"),TJr.forEach(t),Ymo=r(nje," (throws an error)."),nje.forEach(t),Kmo=i(Ds),tt=n(Ds,"DIV",{class:!0});var p0=s(tt);T(D6.$$.fragment,p0),Zmo=i(p0),xne=n(p0,"P",{});var MJr=s(xne);ego=r(MJr,"Instantiates one of the base model classes of the library from a configuration."),MJr.forEach(t),ogo=i(p0),Ai=n(p0,"P",{});var IK=s(Ai);rgo=r(IK,`Note:
Loading a model from its configuration file does `),$ne=n(IK,"STRONG",{});var EJr=s($ne);tgo=r(EJr,"not"),EJr.forEach(t),ago=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=n(IK,"A",{href:!0});var CJr=s(nI);ngo=r(CJr,"from_pretrained()"),CJr.forEach(t),sgo=r(IK," to load the model weights."),IK.forEach(t),lgo=i(p0),T(Zh.$$.fragment,p0),p0.forEach(t),igo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(G6.$$.fragment,oa),dgo=i(oa),kne=n(oa,"P",{});var wJr=s(kne);cgo=r(wJr,"Instantiate one of the base model classes of the library from a pretrained model."),wJr.forEach(t),fgo=i(oa),La=n(oa,"P",{});var _0=s(La);mgo=r(_0,"The model class to instantiate is selected based on the "),Sne=n(_0,"CODE",{});var AJr=s(Sne);ggo=r(AJr,"model_type"),AJr.forEach(t),hgo=r(_0,` property of the config object (either
passed as an argument or loaded from `),Rne=n(_0,"CODE",{});var yJr=s(Rne);pgo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),_go=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pne=n(_0,"CODE",{});var LJr=s(Pne);ugo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),bgo=r(_0,":"),_0.forEach(t),vgo=i(oa),x=n(oa,"UL",{});var $=s(x);ep=n($,"LI",{});var P0e=s(ep);Bne=n(P0e,"STRONG",{});var xJr=s(Bne);Fgo=r(xJr,"albert"),xJr.forEach(t),Tgo=r(P0e," \u2014 "),sI=n(P0e,"A",{href:!0});var $Jr=s(sI);Mgo=r($Jr,"AlbertModel"),$Jr.forEach(t),Ego=r(P0e," (ALBERT model)"),P0e.forEach(t),Cgo=i($),op=n($,"LI",{});var B0e=s(op);Ine=n(B0e,"STRONG",{});var kJr=s(Ine);wgo=r(kJr,"bart"),kJr.forEach(t),Ago=r(B0e," \u2014 "),lI=n(B0e,"A",{href:!0});var SJr=s(lI);ygo=r(SJr,"BartModel"),SJr.forEach(t),Lgo=r(B0e," (BART model)"),B0e.forEach(t),xgo=i($),rp=n($,"LI",{});var I0e=s(rp);qne=n(I0e,"STRONG",{});var RJr=s(qne);$go=r(RJr,"beit"),RJr.forEach(t),kgo=r(I0e," \u2014 "),iI=n(I0e,"A",{href:!0});var PJr=s(iI);Sgo=r(PJr,"BeitModel"),PJr.forEach(t),Rgo=r(I0e," (BEiT model)"),I0e.forEach(t),Pgo=i($),tp=n($,"LI",{});var q0e=s(tp);Nne=n(q0e,"STRONG",{});var BJr=s(Nne);Bgo=r(BJr,"bert"),BJr.forEach(t),Igo=r(q0e," \u2014 "),dI=n(q0e,"A",{href:!0});var IJr=s(dI);qgo=r(IJr,"BertModel"),IJr.forEach(t),Ngo=r(q0e," (BERT model)"),q0e.forEach(t),jgo=i($),ap=n($,"LI",{});var N0e=s(ap);jne=n(N0e,"STRONG",{});var qJr=s(jne);Dgo=r(qJr,"bert-generation"),qJr.forEach(t),Ggo=r(N0e," \u2014 "),cI=n(N0e,"A",{href:!0});var NJr=s(cI);Ogo=r(NJr,"BertGenerationEncoder"),NJr.forEach(t),Vgo=r(N0e," (Bert Generation model)"),N0e.forEach(t),Xgo=i($),np=n($,"LI",{});var j0e=s(np);Dne=n(j0e,"STRONG",{});var jJr=s(Dne);zgo=r(jJr,"big_bird"),jJr.forEach(t),Wgo=r(j0e," \u2014 "),fI=n(j0e,"A",{href:!0});var DJr=s(fI);Qgo=r(DJr,"BigBirdModel"),DJr.forEach(t),Hgo=r(j0e," (BigBird model)"),j0e.forEach(t),Ugo=i($),sp=n($,"LI",{});var D0e=s(sp);Gne=n(D0e,"STRONG",{});var GJr=s(Gne);Jgo=r(GJr,"bigbird_pegasus"),GJr.forEach(t),Ygo=r(D0e," \u2014 "),mI=n(D0e,"A",{href:!0});var OJr=s(mI);Kgo=r(OJr,"BigBirdPegasusModel"),OJr.forEach(t),Zgo=r(D0e," (BigBirdPegasus model)"),D0e.forEach(t),eho=i($),lp=n($,"LI",{});var G0e=s(lp);One=n(G0e,"STRONG",{});var VJr=s(One);oho=r(VJr,"blenderbot"),VJr.forEach(t),rho=r(G0e," \u2014 "),gI=n(G0e,"A",{href:!0});var XJr=s(gI);tho=r(XJr,"BlenderbotModel"),XJr.forEach(t),aho=r(G0e," (Blenderbot model)"),G0e.forEach(t),nho=i($),ip=n($,"LI",{});var O0e=s(ip);Vne=n(O0e,"STRONG",{});var zJr=s(Vne);sho=r(zJr,"blenderbot-small"),zJr.forEach(t),lho=r(O0e," \u2014 "),hI=n(O0e,"A",{href:!0});var WJr=s(hI);iho=r(WJr,"BlenderbotSmallModel"),WJr.forEach(t),dho=r(O0e," (BlenderbotSmall model)"),O0e.forEach(t),cho=i($),dp=n($,"LI",{});var V0e=s(dp);Xne=n(V0e,"STRONG",{});var QJr=s(Xne);fho=r(QJr,"camembert"),QJr.forEach(t),mho=r(V0e," \u2014 "),pI=n(V0e,"A",{href:!0});var HJr=s(pI);gho=r(HJr,"CamembertModel"),HJr.forEach(t),hho=r(V0e," (CamemBERT model)"),V0e.forEach(t),pho=i($),cp=n($,"LI",{});var X0e=s(cp);zne=n(X0e,"STRONG",{});var UJr=s(zne);_ho=r(UJr,"canine"),UJr.forEach(t),uho=r(X0e," \u2014 "),_I=n(X0e,"A",{href:!0});var JJr=s(_I);bho=r(JJr,"CanineModel"),JJr.forEach(t),vho=r(X0e," (Canine model)"),X0e.forEach(t),Fho=i($),fp=n($,"LI",{});var z0e=s(fp);Wne=n(z0e,"STRONG",{});var YJr=s(Wne);Tho=r(YJr,"clip"),YJr.forEach(t),Mho=r(z0e," \u2014 "),uI=n(z0e,"A",{href:!0});var KJr=s(uI);Eho=r(KJr,"CLIPModel"),KJr.forEach(t),Cho=r(z0e," (CLIP model)"),z0e.forEach(t),who=i($),mp=n($,"LI",{});var W0e=s(mp);Qne=n(W0e,"STRONG",{});var ZJr=s(Qne);Aho=r(ZJr,"convbert"),ZJr.forEach(t),yho=r(W0e," \u2014 "),bI=n(W0e,"A",{href:!0});var eYr=s(bI);Lho=r(eYr,"ConvBertModel"),eYr.forEach(t),xho=r(W0e," (ConvBERT model)"),W0e.forEach(t),$ho=i($),gp=n($,"LI",{});var Q0e=s(gp);Hne=n(Q0e,"STRONG",{});var oYr=s(Hne);kho=r(oYr,"convnext"),oYr.forEach(t),Sho=r(Q0e," \u2014 "),vI=n(Q0e,"A",{href:!0});var rYr=s(vI);Rho=r(rYr,"ConvNextModel"),rYr.forEach(t),Pho=r(Q0e," (ConvNext model)"),Q0e.forEach(t),Bho=i($),hp=n($,"LI",{});var H0e=s(hp);Une=n(H0e,"STRONG",{});var tYr=s(Une);Iho=r(tYr,"ctrl"),tYr.forEach(t),qho=r(H0e," \u2014 "),FI=n(H0e,"A",{href:!0});var aYr=s(FI);Nho=r(aYr,"CTRLModel"),aYr.forEach(t),jho=r(H0e," (CTRL model)"),H0e.forEach(t),Dho=i($),pp=n($,"LI",{});var U0e=s(pp);Jne=n(U0e,"STRONG",{});var nYr=s(Jne);Gho=r(nYr,"cvt"),nYr.forEach(t),Oho=r(U0e," \u2014 "),TI=n(U0e,"A",{href:!0});var sYr=s(TI);Vho=r(sYr,"CvtModel"),sYr.forEach(t),Xho=r(U0e," (CvT model)"),U0e.forEach(t),zho=i($),_p=n($,"LI",{});var J0e=s(_p);Yne=n(J0e,"STRONG",{});var lYr=s(Yne);Who=r(lYr,"data2vec-audio"),lYr.forEach(t),Qho=r(J0e," \u2014 "),MI=n(J0e,"A",{href:!0});var iYr=s(MI);Hho=r(iYr,"Data2VecAudioModel"),iYr.forEach(t),Uho=r(J0e," (Data2VecAudio model)"),J0e.forEach(t),Jho=i($),up=n($,"LI",{});var Y0e=s(up);Kne=n(Y0e,"STRONG",{});var dYr=s(Kne);Yho=r(dYr,"data2vec-text"),dYr.forEach(t),Kho=r(Y0e," \u2014 "),EI=n(Y0e,"A",{href:!0});var cYr=s(EI);Zho=r(cYr,"Data2VecTextModel"),cYr.forEach(t),epo=r(Y0e," (Data2VecText model)"),Y0e.forEach(t),opo=i($),bp=n($,"LI",{});var K0e=s(bp);Zne=n(K0e,"STRONG",{});var fYr=s(Zne);rpo=r(fYr,"data2vec-vision"),fYr.forEach(t),tpo=r(K0e," \u2014 "),CI=n(K0e,"A",{href:!0});var mYr=s(CI);apo=r(mYr,"Data2VecVisionModel"),mYr.forEach(t),npo=r(K0e," (Data2VecVision model)"),K0e.forEach(t),spo=i($),vp=n($,"LI",{});var Z0e=s(vp);ese=n(Z0e,"STRONG",{});var gYr=s(ese);lpo=r(gYr,"deberta"),gYr.forEach(t),ipo=r(Z0e," \u2014 "),wI=n(Z0e,"A",{href:!0});var hYr=s(wI);dpo=r(hYr,"DebertaModel"),hYr.forEach(t),cpo=r(Z0e," (DeBERTa model)"),Z0e.forEach(t),fpo=i($),Fp=n($,"LI",{});var eAe=s(Fp);ose=n(eAe,"STRONG",{});var pYr=s(ose);mpo=r(pYr,"deberta-v2"),pYr.forEach(t),gpo=r(eAe," \u2014 "),AI=n(eAe,"A",{href:!0});var _Yr=s(AI);hpo=r(_Yr,"DebertaV2Model"),_Yr.forEach(t),ppo=r(eAe," (DeBERTa-v2 model)"),eAe.forEach(t),_po=i($),Tp=n($,"LI",{});var oAe=s(Tp);rse=n(oAe,"STRONG",{});var uYr=s(rse);upo=r(uYr,"decision_transformer"),uYr.forEach(t),bpo=r(oAe," \u2014 "),yI=n(oAe,"A",{href:!0});var bYr=s(yI);vpo=r(bYr,"DecisionTransformerModel"),bYr.forEach(t),Fpo=r(oAe," (Decision Transformer model)"),oAe.forEach(t),Tpo=i($),Mp=n($,"LI",{});var rAe=s(Mp);tse=n(rAe,"STRONG",{});var vYr=s(tse);Mpo=r(vYr,"deit"),vYr.forEach(t),Epo=r(rAe," \u2014 "),LI=n(rAe,"A",{href:!0});var FYr=s(LI);Cpo=r(FYr,"DeiTModel"),FYr.forEach(t),wpo=r(rAe," (DeiT model)"),rAe.forEach(t),Apo=i($),Ep=n($,"LI",{});var tAe=s(Ep);ase=n(tAe,"STRONG",{});var TYr=s(ase);ypo=r(TYr,"detr"),TYr.forEach(t),Lpo=r(tAe," \u2014 "),xI=n(tAe,"A",{href:!0});var MYr=s(xI);xpo=r(MYr,"DetrModel"),MYr.forEach(t),$po=r(tAe," (DETR model)"),tAe.forEach(t),kpo=i($),Cp=n($,"LI",{});var aAe=s(Cp);nse=n(aAe,"STRONG",{});var EYr=s(nse);Spo=r(EYr,"distilbert"),EYr.forEach(t),Rpo=r(aAe," \u2014 "),$I=n(aAe,"A",{href:!0});var CYr=s($I);Ppo=r(CYr,"DistilBertModel"),CYr.forEach(t),Bpo=r(aAe," (DistilBERT model)"),aAe.forEach(t),Ipo=i($),wp=n($,"LI",{});var nAe=s(wp);sse=n(nAe,"STRONG",{});var wYr=s(sse);qpo=r(wYr,"dpr"),wYr.forEach(t),Npo=r(nAe," \u2014 "),kI=n(nAe,"A",{href:!0});var AYr=s(kI);jpo=r(AYr,"DPRQuestionEncoder"),AYr.forEach(t),Dpo=r(nAe," (DPR model)"),nAe.forEach(t),Gpo=i($),Ap=n($,"LI",{});var sAe=s(Ap);lse=n(sAe,"STRONG",{});var yYr=s(lse);Opo=r(yYr,"dpt"),yYr.forEach(t),Vpo=r(sAe," \u2014 "),SI=n(sAe,"A",{href:!0});var LYr=s(SI);Xpo=r(LYr,"DPTModel"),LYr.forEach(t),zpo=r(sAe," (DPT model)"),sAe.forEach(t),Wpo=i($),yp=n($,"LI",{});var lAe=s(yp);ise=n(lAe,"STRONG",{});var xYr=s(ise);Qpo=r(xYr,"electra"),xYr.forEach(t),Hpo=r(lAe," \u2014 "),RI=n(lAe,"A",{href:!0});var $Yr=s(RI);Upo=r($Yr,"ElectraModel"),$Yr.forEach(t),Jpo=r(lAe," (ELECTRA model)"),lAe.forEach(t),Ypo=i($),Lp=n($,"LI",{});var iAe=s(Lp);dse=n(iAe,"STRONG",{});var kYr=s(dse);Kpo=r(kYr,"flaubert"),kYr.forEach(t),Zpo=r(iAe," \u2014 "),PI=n(iAe,"A",{href:!0});var SYr=s(PI);e_o=r(SYr,"FlaubertModel"),SYr.forEach(t),o_o=r(iAe," (FlauBERT model)"),iAe.forEach(t),r_o=i($),xp=n($,"LI",{});var dAe=s(xp);cse=n(dAe,"STRONG",{});var RYr=s(cse);t_o=r(RYr,"flava"),RYr.forEach(t),a_o=r(dAe," \u2014 "),BI=n(dAe,"A",{href:!0});var PYr=s(BI);n_o=r(PYr,"FlavaModel"),PYr.forEach(t),s_o=r(dAe," (Flava model)"),dAe.forEach(t),l_o=i($),$p=n($,"LI",{});var cAe=s($p);fse=n(cAe,"STRONG",{});var BYr=s(fse);i_o=r(BYr,"fnet"),BYr.forEach(t),d_o=r(cAe," \u2014 "),II=n(cAe,"A",{href:!0});var IYr=s(II);c_o=r(IYr,"FNetModel"),IYr.forEach(t),f_o=r(cAe," (FNet model)"),cAe.forEach(t),m_o=i($),kp=n($,"LI",{});var fAe=s(kp);mse=n(fAe,"STRONG",{});var qYr=s(mse);g_o=r(qYr,"fsmt"),qYr.forEach(t),h_o=r(fAe," \u2014 "),qI=n(fAe,"A",{href:!0});var NYr=s(qI);p_o=r(NYr,"FSMTModel"),NYr.forEach(t),__o=r(fAe," (FairSeq Machine-Translation model)"),fAe.forEach(t),u_o=i($),Rs=n($,"LI",{});var w$=s(Rs);gse=n(w$,"STRONG",{});var jYr=s(gse);b_o=r(jYr,"funnel"),jYr.forEach(t),v_o=r(w$," \u2014 "),NI=n(w$,"A",{href:!0});var DYr=s(NI);F_o=r(DYr,"FunnelModel"),DYr.forEach(t),T_o=r(w$," or "),jI=n(w$,"A",{href:!0});var GYr=s(jI);M_o=r(GYr,"FunnelBaseModel"),GYr.forEach(t),E_o=r(w$," (Funnel Transformer model)"),w$.forEach(t),C_o=i($),Sp=n($,"LI",{});var mAe=s(Sp);hse=n(mAe,"STRONG",{});var OYr=s(hse);w_o=r(OYr,"glpn"),OYr.forEach(t),A_o=r(mAe," \u2014 "),DI=n(mAe,"A",{href:!0});var VYr=s(DI);y_o=r(VYr,"GLPNModel"),VYr.forEach(t),L_o=r(mAe," (GLPN model)"),mAe.forEach(t),x_o=i($),Rp=n($,"LI",{});var gAe=s(Rp);pse=n(gAe,"STRONG",{});var XYr=s(pse);$_o=r(XYr,"gpt2"),XYr.forEach(t),k_o=r(gAe," \u2014 "),GI=n(gAe,"A",{href:!0});var zYr=s(GI);S_o=r(zYr,"GPT2Model"),zYr.forEach(t),R_o=r(gAe," (OpenAI GPT-2 model)"),gAe.forEach(t),P_o=i($),Pp=n($,"LI",{});var hAe=s(Pp);_se=n(hAe,"STRONG",{});var WYr=s(_se);B_o=r(WYr,"gpt_neo"),WYr.forEach(t),I_o=r(hAe," \u2014 "),OI=n(hAe,"A",{href:!0});var QYr=s(OI);q_o=r(QYr,"GPTNeoModel"),QYr.forEach(t),N_o=r(hAe," (GPT Neo model)"),hAe.forEach(t),j_o=i($),Bp=n($,"LI",{});var pAe=s(Bp);use=n(pAe,"STRONG",{});var HYr=s(use);D_o=r(HYr,"gptj"),HYr.forEach(t),G_o=r(pAe," \u2014 "),VI=n(pAe,"A",{href:!0});var UYr=s(VI);O_o=r(UYr,"GPTJModel"),UYr.forEach(t),V_o=r(pAe," (GPT-J model)"),pAe.forEach(t),X_o=i($),Ip=n($,"LI",{});var _Ae=s(Ip);bse=n(_Ae,"STRONG",{});var JYr=s(bse);z_o=r(JYr,"hubert"),JYr.forEach(t),W_o=r(_Ae," \u2014 "),XI=n(_Ae,"A",{href:!0});var YYr=s(XI);Q_o=r(YYr,"HubertModel"),YYr.forEach(t),H_o=r(_Ae," (Hubert model)"),_Ae.forEach(t),U_o=i($),qp=n($,"LI",{});var uAe=s(qp);vse=n(uAe,"STRONG",{});var KYr=s(vse);J_o=r(KYr,"ibert"),KYr.forEach(t),Y_o=r(uAe," \u2014 "),zI=n(uAe,"A",{href:!0});var ZYr=s(zI);K_o=r(ZYr,"IBertModel"),ZYr.forEach(t),Z_o=r(uAe," (I-BERT model)"),uAe.forEach(t),euo=i($),Np=n($,"LI",{});var bAe=s(Np);Fse=n(bAe,"STRONG",{});var eKr=s(Fse);ouo=r(eKr,"imagegpt"),eKr.forEach(t),ruo=r(bAe," \u2014 "),WI=n(bAe,"A",{href:!0});var oKr=s(WI);tuo=r(oKr,"ImageGPTModel"),oKr.forEach(t),auo=r(bAe," (ImageGPT model)"),bAe.forEach(t),nuo=i($),jp=n($,"LI",{});var vAe=s(jp);Tse=n(vAe,"STRONG",{});var rKr=s(Tse);suo=r(rKr,"layoutlm"),rKr.forEach(t),luo=r(vAe," \u2014 "),QI=n(vAe,"A",{href:!0});var tKr=s(QI);iuo=r(tKr,"LayoutLMModel"),tKr.forEach(t),duo=r(vAe," (LayoutLM model)"),vAe.forEach(t),cuo=i($),Dp=n($,"LI",{});var FAe=s(Dp);Mse=n(FAe,"STRONG",{});var aKr=s(Mse);fuo=r(aKr,"layoutlmv2"),aKr.forEach(t),muo=r(FAe," \u2014 "),HI=n(FAe,"A",{href:!0});var nKr=s(HI);guo=r(nKr,"LayoutLMv2Model"),nKr.forEach(t),huo=r(FAe," (LayoutLMv2 model)"),FAe.forEach(t),puo=i($),Gp=n($,"LI",{});var TAe=s(Gp);Ese=n(TAe,"STRONG",{});var sKr=s(Ese);_uo=r(sKr,"led"),sKr.forEach(t),uuo=r(TAe," \u2014 "),UI=n(TAe,"A",{href:!0});var lKr=s(UI);buo=r(lKr,"LEDModel"),lKr.forEach(t),vuo=r(TAe," (LED model)"),TAe.forEach(t),Fuo=i($),Op=n($,"LI",{});var MAe=s(Op);Cse=n(MAe,"STRONG",{});var iKr=s(Cse);Tuo=r(iKr,"longformer"),iKr.forEach(t),Muo=r(MAe," \u2014 "),JI=n(MAe,"A",{href:!0});var dKr=s(JI);Euo=r(dKr,"LongformerModel"),dKr.forEach(t),Cuo=r(MAe," (Longformer model)"),MAe.forEach(t),wuo=i($),Vp=n($,"LI",{});var EAe=s(Vp);wse=n(EAe,"STRONG",{});var cKr=s(wse);Auo=r(cKr,"luke"),cKr.forEach(t),yuo=r(EAe," \u2014 "),YI=n(EAe,"A",{href:!0});var fKr=s(YI);Luo=r(fKr,"LukeModel"),fKr.forEach(t),xuo=r(EAe," (LUKE model)"),EAe.forEach(t),$uo=i($),Xp=n($,"LI",{});var CAe=s(Xp);Ase=n(CAe,"STRONG",{});var mKr=s(Ase);kuo=r(mKr,"lxmert"),mKr.forEach(t),Suo=r(CAe," \u2014 "),KI=n(CAe,"A",{href:!0});var gKr=s(KI);Ruo=r(gKr,"LxmertModel"),gKr.forEach(t),Puo=r(CAe," (LXMERT model)"),CAe.forEach(t),Buo=i($),zp=n($,"LI",{});var wAe=s(zp);yse=n(wAe,"STRONG",{});var hKr=s(yse);Iuo=r(hKr,"m2m_100"),hKr.forEach(t),quo=r(wAe," \u2014 "),ZI=n(wAe,"A",{href:!0});var pKr=s(ZI);Nuo=r(pKr,"M2M100Model"),pKr.forEach(t),juo=r(wAe," (M2M100 model)"),wAe.forEach(t),Duo=i($),Wp=n($,"LI",{});var AAe=s(Wp);Lse=n(AAe,"STRONG",{});var _Kr=s(Lse);Guo=r(_Kr,"marian"),_Kr.forEach(t),Ouo=r(AAe," \u2014 "),eq=n(AAe,"A",{href:!0});var uKr=s(eq);Vuo=r(uKr,"MarianModel"),uKr.forEach(t),Xuo=r(AAe," (Marian model)"),AAe.forEach(t),zuo=i($),Qp=n($,"LI",{});var yAe=s(Qp);xse=n(yAe,"STRONG",{});var bKr=s(xse);Wuo=r(bKr,"maskformer"),bKr.forEach(t),Quo=r(yAe," \u2014 "),oq=n(yAe,"A",{href:!0});var vKr=s(oq);Huo=r(vKr,"MaskFormerModel"),vKr.forEach(t),Uuo=r(yAe," (MaskFormer model)"),yAe.forEach(t),Juo=i($),Hp=n($,"LI",{});var LAe=s(Hp);$se=n(LAe,"STRONG",{});var FKr=s($se);Yuo=r(FKr,"mbart"),FKr.forEach(t),Kuo=r(LAe," \u2014 "),rq=n(LAe,"A",{href:!0});var TKr=s(rq);Zuo=r(TKr,"MBartModel"),TKr.forEach(t),e2o=r(LAe," (mBART model)"),LAe.forEach(t),o2o=i($),Up=n($,"LI",{});var xAe=s(Up);kse=n(xAe,"STRONG",{});var MKr=s(kse);r2o=r(MKr,"megatron-bert"),MKr.forEach(t),t2o=r(xAe," \u2014 "),tq=n(xAe,"A",{href:!0});var EKr=s(tq);a2o=r(EKr,"MegatronBertModel"),EKr.forEach(t),n2o=r(xAe," (MegatronBert model)"),xAe.forEach(t),s2o=i($),Jp=n($,"LI",{});var $Ae=s(Jp);Sse=n($Ae,"STRONG",{});var CKr=s(Sse);l2o=r(CKr,"mobilebert"),CKr.forEach(t),i2o=r($Ae," \u2014 "),aq=n($Ae,"A",{href:!0});var wKr=s(aq);d2o=r(wKr,"MobileBertModel"),wKr.forEach(t),c2o=r($Ae," (MobileBERT model)"),$Ae.forEach(t),f2o=i($),Yp=n($,"LI",{});var kAe=s(Yp);Rse=n(kAe,"STRONG",{});var AKr=s(Rse);m2o=r(AKr,"mpnet"),AKr.forEach(t),g2o=r(kAe," \u2014 "),nq=n(kAe,"A",{href:!0});var yKr=s(nq);h2o=r(yKr,"MPNetModel"),yKr.forEach(t),p2o=r(kAe," (MPNet model)"),kAe.forEach(t),_2o=i($),Kp=n($,"LI",{});var SAe=s(Kp);Pse=n(SAe,"STRONG",{});var LKr=s(Pse);u2o=r(LKr,"mt5"),LKr.forEach(t),b2o=r(SAe," \u2014 "),sq=n(SAe,"A",{href:!0});var xKr=s(sq);v2o=r(xKr,"MT5Model"),xKr.forEach(t),F2o=r(SAe," (mT5 model)"),SAe.forEach(t),T2o=i($),Zp=n($,"LI",{});var RAe=s(Zp);Bse=n(RAe,"STRONG",{});var $Kr=s(Bse);M2o=r($Kr,"nystromformer"),$Kr.forEach(t),E2o=r(RAe," \u2014 "),lq=n(RAe,"A",{href:!0});var kKr=s(lq);C2o=r(kKr,"NystromformerModel"),kKr.forEach(t),w2o=r(RAe," (Nystromformer model)"),RAe.forEach(t),A2o=i($),e_=n($,"LI",{});var PAe=s(e_);Ise=n(PAe,"STRONG",{});var SKr=s(Ise);y2o=r(SKr,"openai-gpt"),SKr.forEach(t),L2o=r(PAe," \u2014 "),iq=n(PAe,"A",{href:!0});var RKr=s(iq);x2o=r(RKr,"OpenAIGPTModel"),RKr.forEach(t),$2o=r(PAe," (OpenAI GPT model)"),PAe.forEach(t),k2o=i($),o_=n($,"LI",{});var BAe=s(o_);qse=n(BAe,"STRONG",{});var PKr=s(qse);S2o=r(PKr,"opt"),PKr.forEach(t),R2o=r(BAe," \u2014 "),dq=n(BAe,"A",{href:!0});var BKr=s(dq);P2o=r(BKr,"OPTModel"),BKr.forEach(t),B2o=r(BAe," (OPT model)"),BAe.forEach(t),I2o=i($),r_=n($,"LI",{});var IAe=s(r_);Nse=n(IAe,"STRONG",{});var IKr=s(Nse);q2o=r(IKr,"pegasus"),IKr.forEach(t),N2o=r(IAe," \u2014 "),cq=n(IAe,"A",{href:!0});var qKr=s(cq);j2o=r(qKr,"PegasusModel"),qKr.forEach(t),D2o=r(IAe," (Pegasus model)"),IAe.forEach(t),G2o=i($),t_=n($,"LI",{});var qAe=s(t_);jse=n(qAe,"STRONG",{});var NKr=s(jse);O2o=r(NKr,"perceiver"),NKr.forEach(t),V2o=r(qAe," \u2014 "),fq=n(qAe,"A",{href:!0});var jKr=s(fq);X2o=r(jKr,"PerceiverModel"),jKr.forEach(t),z2o=r(qAe," (Perceiver model)"),qAe.forEach(t),W2o=i($),a_=n($,"LI",{});var NAe=s(a_);Dse=n(NAe,"STRONG",{});var DKr=s(Dse);Q2o=r(DKr,"plbart"),DKr.forEach(t),H2o=r(NAe," \u2014 "),mq=n(NAe,"A",{href:!0});var GKr=s(mq);U2o=r(GKr,"PLBartModel"),GKr.forEach(t),J2o=r(NAe," (PLBart model)"),NAe.forEach(t),Y2o=i($),n_=n($,"LI",{});var jAe=s(n_);Gse=n(jAe,"STRONG",{});var OKr=s(Gse);K2o=r(OKr,"poolformer"),OKr.forEach(t),Z2o=r(jAe," \u2014 "),gq=n(jAe,"A",{href:!0});var VKr=s(gq);e1o=r(VKr,"PoolFormerModel"),VKr.forEach(t),o1o=r(jAe," (PoolFormer model)"),jAe.forEach(t),r1o=i($),s_=n($,"LI",{});var DAe=s(s_);Ose=n(DAe,"STRONG",{});var XKr=s(Ose);t1o=r(XKr,"prophetnet"),XKr.forEach(t),a1o=r(DAe," \u2014 "),hq=n(DAe,"A",{href:!0});var zKr=s(hq);n1o=r(zKr,"ProphetNetModel"),zKr.forEach(t),s1o=r(DAe," (ProphetNet model)"),DAe.forEach(t),l1o=i($),l_=n($,"LI",{});var GAe=s(l_);Vse=n(GAe,"STRONG",{});var WKr=s(Vse);i1o=r(WKr,"qdqbert"),WKr.forEach(t),d1o=r(GAe," \u2014 "),pq=n(GAe,"A",{href:!0});var QKr=s(pq);c1o=r(QKr,"QDQBertModel"),QKr.forEach(t),f1o=r(GAe," (QDQBert model)"),GAe.forEach(t),m1o=i($),i_=n($,"LI",{});var OAe=s(i_);Xse=n(OAe,"STRONG",{});var HKr=s(Xse);g1o=r(HKr,"reformer"),HKr.forEach(t),h1o=r(OAe," \u2014 "),_q=n(OAe,"A",{href:!0});var UKr=s(_q);p1o=r(UKr,"ReformerModel"),UKr.forEach(t),_1o=r(OAe," (Reformer model)"),OAe.forEach(t),u1o=i($),d_=n($,"LI",{});var VAe=s(d_);zse=n(VAe,"STRONG",{});var JKr=s(zse);b1o=r(JKr,"regnet"),JKr.forEach(t),v1o=r(VAe," \u2014 "),uq=n(VAe,"A",{href:!0});var YKr=s(uq);F1o=r(YKr,"RegNetModel"),YKr.forEach(t),T1o=r(VAe," (RegNet model)"),VAe.forEach(t),M1o=i($),c_=n($,"LI",{});var XAe=s(c_);Wse=n(XAe,"STRONG",{});var KKr=s(Wse);E1o=r(KKr,"rembert"),KKr.forEach(t),C1o=r(XAe," \u2014 "),bq=n(XAe,"A",{href:!0});var ZKr=s(bq);w1o=r(ZKr,"RemBertModel"),ZKr.forEach(t),A1o=r(XAe," (RemBERT model)"),XAe.forEach(t),y1o=i($),f_=n($,"LI",{});var zAe=s(f_);Qse=n(zAe,"STRONG",{});var eZr=s(Qse);L1o=r(eZr,"resnet"),eZr.forEach(t),x1o=r(zAe," \u2014 "),vq=n(zAe,"A",{href:!0});var oZr=s(vq);$1o=r(oZr,"ResNetModel"),oZr.forEach(t),k1o=r(zAe," (ResNet model)"),zAe.forEach(t),S1o=i($),m_=n($,"LI",{});var WAe=s(m_);Hse=n(WAe,"STRONG",{});var rZr=s(Hse);R1o=r(rZr,"retribert"),rZr.forEach(t),P1o=r(WAe," \u2014 "),Fq=n(WAe,"A",{href:!0});var tZr=s(Fq);B1o=r(tZr,"RetriBertModel"),tZr.forEach(t),I1o=r(WAe," (RetriBERT model)"),WAe.forEach(t),q1o=i($),g_=n($,"LI",{});var QAe=s(g_);Use=n(QAe,"STRONG",{});var aZr=s(Use);N1o=r(aZr,"roberta"),aZr.forEach(t),j1o=r(QAe," \u2014 "),Tq=n(QAe,"A",{href:!0});var nZr=s(Tq);D1o=r(nZr,"RobertaModel"),nZr.forEach(t),G1o=r(QAe," (RoBERTa model)"),QAe.forEach(t),O1o=i($),h_=n($,"LI",{});var HAe=s(h_);Jse=n(HAe,"STRONG",{});var sZr=s(Jse);V1o=r(sZr,"roformer"),sZr.forEach(t),X1o=r(HAe," \u2014 "),Mq=n(HAe,"A",{href:!0});var lZr=s(Mq);z1o=r(lZr,"RoFormerModel"),lZr.forEach(t),W1o=r(HAe," (RoFormer model)"),HAe.forEach(t),Q1o=i($),p_=n($,"LI",{});var UAe=s(p_);Yse=n(UAe,"STRONG",{});var iZr=s(Yse);H1o=r(iZr,"segformer"),iZr.forEach(t),U1o=r(UAe," \u2014 "),Eq=n(UAe,"A",{href:!0});var dZr=s(Eq);J1o=r(dZr,"SegformerModel"),dZr.forEach(t),Y1o=r(UAe," (SegFormer model)"),UAe.forEach(t),K1o=i($),__=n($,"LI",{});var JAe=s(__);Kse=n(JAe,"STRONG",{});var cZr=s(Kse);Z1o=r(cZr,"sew"),cZr.forEach(t),ebo=r(JAe," \u2014 "),Cq=n(JAe,"A",{href:!0});var fZr=s(Cq);obo=r(fZr,"SEWModel"),fZr.forEach(t),rbo=r(JAe," (SEW model)"),JAe.forEach(t),tbo=i($),u_=n($,"LI",{});var YAe=s(u_);Zse=n(YAe,"STRONG",{});var mZr=s(Zse);abo=r(mZr,"sew-d"),mZr.forEach(t),nbo=r(YAe," \u2014 "),wq=n(YAe,"A",{href:!0});var gZr=s(wq);sbo=r(gZr,"SEWDModel"),gZr.forEach(t),lbo=r(YAe," (SEW-D model)"),YAe.forEach(t),ibo=i($),b_=n($,"LI",{});var KAe=s(b_);ele=n(KAe,"STRONG",{});var hZr=s(ele);dbo=r(hZr,"speech_to_text"),hZr.forEach(t),cbo=r(KAe," \u2014 "),Aq=n(KAe,"A",{href:!0});var pZr=s(Aq);fbo=r(pZr,"Speech2TextModel"),pZr.forEach(t),mbo=r(KAe," (Speech2Text model)"),KAe.forEach(t),gbo=i($),v_=n($,"LI",{});var ZAe=s(v_);ole=n(ZAe,"STRONG",{});var _Zr=s(ole);hbo=r(_Zr,"splinter"),_Zr.forEach(t),pbo=r(ZAe," \u2014 "),yq=n(ZAe,"A",{href:!0});var uZr=s(yq);_bo=r(uZr,"SplinterModel"),uZr.forEach(t),ubo=r(ZAe," (Splinter model)"),ZAe.forEach(t),bbo=i($),F_=n($,"LI",{});var e6e=s(F_);rle=n(e6e,"STRONG",{});var bZr=s(rle);vbo=r(bZr,"squeezebert"),bZr.forEach(t),Fbo=r(e6e," \u2014 "),Lq=n(e6e,"A",{href:!0});var vZr=s(Lq);Tbo=r(vZr,"SqueezeBertModel"),vZr.forEach(t),Mbo=r(e6e," (SqueezeBERT model)"),e6e.forEach(t),Ebo=i($),T_=n($,"LI",{});var o6e=s(T_);tle=n(o6e,"STRONG",{});var FZr=s(tle);Cbo=r(FZr,"swin"),FZr.forEach(t),wbo=r(o6e," \u2014 "),xq=n(o6e,"A",{href:!0});var TZr=s(xq);Abo=r(TZr,"SwinModel"),TZr.forEach(t),ybo=r(o6e," (Swin model)"),o6e.forEach(t),Lbo=i($),M_=n($,"LI",{});var r6e=s(M_);ale=n(r6e,"STRONG",{});var MZr=s(ale);xbo=r(MZr,"t5"),MZr.forEach(t),$bo=r(r6e," \u2014 "),$q=n(r6e,"A",{href:!0});var EZr=s($q);kbo=r(EZr,"T5Model"),EZr.forEach(t),Sbo=r(r6e," (T5 model)"),r6e.forEach(t),Rbo=i($),E_=n($,"LI",{});var t6e=s(E_);nle=n(t6e,"STRONG",{});var CZr=s(nle);Pbo=r(CZr,"tapas"),CZr.forEach(t),Bbo=r(t6e," \u2014 "),kq=n(t6e,"A",{href:!0});var wZr=s(kq);Ibo=r(wZr,"TapasModel"),wZr.forEach(t),qbo=r(t6e," (TAPAS model)"),t6e.forEach(t),Nbo=i($),C_=n($,"LI",{});var a6e=s(C_);sle=n(a6e,"STRONG",{});var AZr=s(sle);jbo=r(AZr,"transfo-xl"),AZr.forEach(t),Dbo=r(a6e," \u2014 "),Sq=n(a6e,"A",{href:!0});var yZr=s(Sq);Gbo=r(yZr,"TransfoXLModel"),yZr.forEach(t),Obo=r(a6e," (Transformer-XL model)"),a6e.forEach(t),Vbo=i($),w_=n($,"LI",{});var n6e=s(w_);lle=n(n6e,"STRONG",{});var LZr=s(lle);Xbo=r(LZr,"unispeech"),LZr.forEach(t),zbo=r(n6e," \u2014 "),Rq=n(n6e,"A",{href:!0});var xZr=s(Rq);Wbo=r(xZr,"UniSpeechModel"),xZr.forEach(t),Qbo=r(n6e," (UniSpeech model)"),n6e.forEach(t),Hbo=i($),A_=n($,"LI",{});var s6e=s(A_);ile=n(s6e,"STRONG",{});var $Zr=s(ile);Ubo=r($Zr,"unispeech-sat"),$Zr.forEach(t),Jbo=r(s6e," \u2014 "),Pq=n(s6e,"A",{href:!0});var kZr=s(Pq);Ybo=r(kZr,"UniSpeechSatModel"),kZr.forEach(t),Kbo=r(s6e," (UniSpeechSat model)"),s6e.forEach(t),Zbo=i($),y_=n($,"LI",{});var l6e=s(y_);dle=n(l6e,"STRONG",{});var SZr=s(dle);e5o=r(SZr,"van"),SZr.forEach(t),o5o=r(l6e," \u2014 "),Bq=n(l6e,"A",{href:!0});var RZr=s(Bq);r5o=r(RZr,"VanModel"),RZr.forEach(t),t5o=r(l6e," (VAN model)"),l6e.forEach(t),a5o=i($),L_=n($,"LI",{});var i6e=s(L_);cle=n(i6e,"STRONG",{});var PZr=s(cle);n5o=r(PZr,"vilt"),PZr.forEach(t),s5o=r(i6e," \u2014 "),Iq=n(i6e,"A",{href:!0});var BZr=s(Iq);l5o=r(BZr,"ViltModel"),BZr.forEach(t),i5o=r(i6e," (ViLT model)"),i6e.forEach(t),d5o=i($),x_=n($,"LI",{});var d6e=s(x_);fle=n(d6e,"STRONG",{});var IZr=s(fle);c5o=r(IZr,"vision-text-dual-encoder"),IZr.forEach(t),f5o=r(d6e," \u2014 "),qq=n(d6e,"A",{href:!0});var qZr=s(qq);m5o=r(qZr,"VisionTextDualEncoderModel"),qZr.forEach(t),g5o=r(d6e," (VisionTextDualEncoder model)"),d6e.forEach(t),h5o=i($),$_=n($,"LI",{});var c6e=s($_);mle=n(c6e,"STRONG",{});var NZr=s(mle);p5o=r(NZr,"visual_bert"),NZr.forEach(t),_5o=r(c6e," \u2014 "),Nq=n(c6e,"A",{href:!0});var jZr=s(Nq);u5o=r(jZr,"VisualBertModel"),jZr.forEach(t),b5o=r(c6e," (VisualBert model)"),c6e.forEach(t),v5o=i($),k_=n($,"LI",{});var f6e=s(k_);gle=n(f6e,"STRONG",{});var DZr=s(gle);F5o=r(DZr,"vit"),DZr.forEach(t),T5o=r(f6e," \u2014 "),jq=n(f6e,"A",{href:!0});var GZr=s(jq);M5o=r(GZr,"ViTModel"),GZr.forEach(t),E5o=r(f6e," (ViT model)"),f6e.forEach(t),C5o=i($),S_=n($,"LI",{});var m6e=s(S_);hle=n(m6e,"STRONG",{});var OZr=s(hle);w5o=r(OZr,"vit_mae"),OZr.forEach(t),A5o=r(m6e," \u2014 "),Dq=n(m6e,"A",{href:!0});var VZr=s(Dq);y5o=r(VZr,"ViTMAEModel"),VZr.forEach(t),L5o=r(m6e," (ViTMAE model)"),m6e.forEach(t),x5o=i($),R_=n($,"LI",{});var g6e=s(R_);ple=n(g6e,"STRONG",{});var XZr=s(ple);$5o=r(XZr,"wav2vec2"),XZr.forEach(t),k5o=r(g6e," \u2014 "),Gq=n(g6e,"A",{href:!0});var zZr=s(Gq);S5o=r(zZr,"Wav2Vec2Model"),zZr.forEach(t),R5o=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),P5o=i($),P_=n($,"LI",{});var h6e=s(P_);_le=n(h6e,"STRONG",{});var WZr=s(_le);B5o=r(WZr,"wav2vec2-conformer"),WZr.forEach(t),I5o=r(h6e," \u2014 "),Oq=n(h6e,"A",{href:!0});var QZr=s(Oq);q5o=r(QZr,"Wav2Vec2ConformerModel"),QZr.forEach(t),N5o=r(h6e," (Wav2Vec2-Conformer model)"),h6e.forEach(t),j5o=i($),B_=n($,"LI",{});var p6e=s(B_);ule=n(p6e,"STRONG",{});var HZr=s(ule);D5o=r(HZr,"wavlm"),HZr.forEach(t),G5o=r(p6e," \u2014 "),Vq=n(p6e,"A",{href:!0});var UZr=s(Vq);O5o=r(UZr,"WavLMModel"),UZr.forEach(t),V5o=r(p6e," (WavLM model)"),p6e.forEach(t),X5o=i($),I_=n($,"LI",{});var _6e=s(I_);ble=n(_6e,"STRONG",{});var JZr=s(ble);z5o=r(JZr,"xglm"),JZr.forEach(t),W5o=r(_6e," \u2014 "),Xq=n(_6e,"A",{href:!0});var YZr=s(Xq);Q5o=r(YZr,"XGLMModel"),YZr.forEach(t),H5o=r(_6e," (XGLM model)"),_6e.forEach(t),U5o=i($),q_=n($,"LI",{});var u6e=s(q_);vle=n(u6e,"STRONG",{});var KZr=s(vle);J5o=r(KZr,"xlm"),KZr.forEach(t),Y5o=r(u6e," \u2014 "),zq=n(u6e,"A",{href:!0});var ZZr=s(zq);K5o=r(ZZr,"XLMModel"),ZZr.forEach(t),Z5o=r(u6e," (XLM model)"),u6e.forEach(t),evo=i($),N_=n($,"LI",{});var b6e=s(N_);Fle=n(b6e,"STRONG",{});var eet=s(Fle);ovo=r(eet,"xlm-prophetnet"),eet.forEach(t),rvo=r(b6e," \u2014 "),Wq=n(b6e,"A",{href:!0});var oet=s(Wq);tvo=r(oet,"XLMProphetNetModel"),oet.forEach(t),avo=r(b6e," (XLMProphetNet model)"),b6e.forEach(t),nvo=i($),j_=n($,"LI",{});var v6e=s(j_);Tle=n(v6e,"STRONG",{});var ret=s(Tle);svo=r(ret,"xlm-roberta"),ret.forEach(t),lvo=r(v6e," \u2014 "),Qq=n(v6e,"A",{href:!0});var tet=s(Qq);ivo=r(tet,"XLMRobertaModel"),tet.forEach(t),dvo=r(v6e," (XLM-RoBERTa model)"),v6e.forEach(t),cvo=i($),D_=n($,"LI",{});var F6e=s(D_);Mle=n(F6e,"STRONG",{});var aet=s(Mle);fvo=r(aet,"xlm-roberta-xl"),aet.forEach(t),mvo=r(F6e," \u2014 "),Hq=n(F6e,"A",{href:!0});var net=s(Hq);gvo=r(net,"XLMRobertaXLModel"),net.forEach(t),hvo=r(F6e," (XLM-RoBERTa-XL model)"),F6e.forEach(t),pvo=i($),G_=n($,"LI",{});var T6e=s(G_);Ele=n(T6e,"STRONG",{});var set=s(Ele);_vo=r(set,"xlnet"),set.forEach(t),uvo=r(T6e," \u2014 "),Uq=n(T6e,"A",{href:!0});var iet=s(Uq);bvo=r(iet,"XLNetModel"),iet.forEach(t),vvo=r(T6e," (XLNet model)"),T6e.forEach(t),Fvo=i($),O_=n($,"LI",{});var M6e=s(O_);Cle=n(M6e,"STRONG",{});var det=s(Cle);Tvo=r(det,"yolos"),det.forEach(t),Mvo=r(M6e," \u2014 "),Jq=n(M6e,"A",{href:!0});var cet=s(Jq);Evo=r(cet,"YolosModel"),cet.forEach(t),Cvo=r(M6e," (YOLOS model)"),M6e.forEach(t),wvo=i($),V_=n($,"LI",{});var E6e=s(V_);wle=n(E6e,"STRONG",{});var fet=s(wle);Avo=r(fet,"yoso"),fet.forEach(t),yvo=r(E6e," \u2014 "),Yq=n(E6e,"A",{href:!0});var met=s(Yq);Lvo=r(met,"YosoModel"),met.forEach(t),xvo=r(E6e," (YOSO model)"),E6e.forEach(t),$.forEach(t),$vo=i(oa),X_=n(oa,"P",{});var C6e=s(X_);kvo=r(C6e,"The model is set in evaluation mode by default using "),Ale=n(C6e,"CODE",{});var get=s(Ale);Svo=r(get,"model.eval()"),get.forEach(t),Rvo=r(C6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=n(C6e,"CODE",{});var het=s(yle);Pvo=r(het,"model.train()"),het.forEach(t),C6e.forEach(t),Bvo=i(oa),T(z_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),rqe=i(f),yi=n(f,"H2",{class:!0});var sje=s(yi);W_=n(sje,"A",{id:!0,class:!0,href:!0});var pet=s(W_);Lle=n(pet,"SPAN",{});var _et=s(Lle);T(O6.$$.fragment,_et),_et.forEach(t),pet.forEach(t),Ivo=i(sje),xle=n(sje,"SPAN",{});var uet=s(xle);qvo=r(uet,"AutoModelForPreTraining"),uet.forEach(t),sje.forEach(t),tqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(V6.$$.fragment,Gs),Nvo=i(Gs),Li=n(Gs,"P",{});var qK=s(Li);jvo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=n(qK,"A",{href:!0});var bet=s(Kq);Dvo=r(bet,"from_pretrained()"),bet.forEach(t),Gvo=r(qK," class method or the "),Zq=n(qK,"A",{href:!0});var vet=s(Zq);Ovo=r(vet,"from_config()"),vet.forEach(t),Vvo=r(qK,` class
method.`),qK.forEach(t),Xvo=i(Gs),X6=n(Gs,"P",{});var lje=s(X6);zvo=r(lje,"This class cannot be instantiated directly using "),$le=n(lje,"CODE",{});var Fet=s($le);Wvo=r(Fet,"__init__()"),Fet.forEach(t),Qvo=r(lje," (throws an error)."),lje.forEach(t),Hvo=i(Gs),at=n(Gs,"DIV",{class:!0});var u0=s(at);T(z6.$$.fragment,u0),Uvo=i(u0),kle=n(u0,"P",{});var Tet=s(kle);Jvo=r(Tet,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tet.forEach(t),Yvo=i(u0),xi=n(u0,"P",{});var NK=s(xi);Kvo=r(NK,`Note:
Loading a model from its configuration file does `),Sle=n(NK,"STRONG",{});var Met=s(Sle);Zvo=r(Met,"not"),Met.forEach(t),e3o=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=n(NK,"A",{href:!0});var Eet=s(eN);o3o=r(Eet,"from_pretrained()"),Eet.forEach(t),r3o=r(NK," to load the model weights."),NK.forEach(t),t3o=i(u0),T(Q_.$$.fragment,u0),u0.forEach(t),a3o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(W6.$$.fragment,ra),n3o=i(ra),Rle=n(ra,"P",{});var Cet=s(Rle);s3o=r(Cet,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cet.forEach(t),l3o=i(ra),xa=n(ra,"P",{});var b0=s(xa);i3o=r(b0,"The model class to instantiate is selected based on the "),Ple=n(b0,"CODE",{});var wet=s(Ple);d3o=r(wet,"model_type"),wet.forEach(t),c3o=r(b0,` property of the config object (either
passed as an argument or loaded from `),Ble=n(b0,"CODE",{});var Aet=s(Ble);f3o=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),m3o=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(b0,"CODE",{});var yet=s(Ile);g3o=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),h3o=r(b0,":"),b0.forEach(t),p3o=i(ra),G=n(ra,"UL",{});var O=s(G);H_=n(O,"LI",{});var w6e=s(H_);qle=n(w6e,"STRONG",{});var Let=s(qle);_3o=r(Let,"albert"),Let.forEach(t),u3o=r(w6e," \u2014 "),oN=n(w6e,"A",{href:!0});var xet=s(oN);b3o=r(xet,"AlbertForPreTraining"),xet.forEach(t),v3o=r(w6e," (ALBERT model)"),w6e.forEach(t),F3o=i(O),U_=n(O,"LI",{});var A6e=s(U_);Nle=n(A6e,"STRONG",{});var $et=s(Nle);T3o=r($et,"bart"),$et.forEach(t),M3o=r(A6e," \u2014 "),rN=n(A6e,"A",{href:!0});var ket=s(rN);E3o=r(ket,"BartForConditionalGeneration"),ket.forEach(t),C3o=r(A6e," (BART model)"),A6e.forEach(t),w3o=i(O),J_=n(O,"LI",{});var y6e=s(J_);jle=n(y6e,"STRONG",{});var Set=s(jle);A3o=r(Set,"bert"),Set.forEach(t),y3o=r(y6e," \u2014 "),tN=n(y6e,"A",{href:!0});var Ret=s(tN);L3o=r(Ret,"BertForPreTraining"),Ret.forEach(t),x3o=r(y6e," (BERT model)"),y6e.forEach(t),$3o=i(O),Y_=n(O,"LI",{});var L6e=s(Y_);Dle=n(L6e,"STRONG",{});var Pet=s(Dle);k3o=r(Pet,"big_bird"),Pet.forEach(t),S3o=r(L6e," \u2014 "),aN=n(L6e,"A",{href:!0});var Bet=s(aN);R3o=r(Bet,"BigBirdForPreTraining"),Bet.forEach(t),P3o=r(L6e," (BigBird model)"),L6e.forEach(t),B3o=i(O),K_=n(O,"LI",{});var x6e=s(K_);Gle=n(x6e,"STRONG",{});var Iet=s(Gle);I3o=r(Iet,"camembert"),Iet.forEach(t),q3o=r(x6e," \u2014 "),nN=n(x6e,"A",{href:!0});var qet=s(nN);N3o=r(qet,"CamembertForMaskedLM"),qet.forEach(t),j3o=r(x6e," (CamemBERT model)"),x6e.forEach(t),D3o=i(O),Z_=n(O,"LI",{});var $6e=s(Z_);Ole=n($6e,"STRONG",{});var Net=s(Ole);G3o=r(Net,"ctrl"),Net.forEach(t),O3o=r($6e," \u2014 "),sN=n($6e,"A",{href:!0});var jet=s(sN);V3o=r(jet,"CTRLLMHeadModel"),jet.forEach(t),X3o=r($6e," (CTRL model)"),$6e.forEach(t),z3o=i(O),eu=n(O,"LI",{});var k6e=s(eu);Vle=n(k6e,"STRONG",{});var Det=s(Vle);W3o=r(Det,"data2vec-text"),Det.forEach(t),Q3o=r(k6e," \u2014 "),lN=n(k6e,"A",{href:!0});var Get=s(lN);H3o=r(Get,"Data2VecTextForMaskedLM"),Get.forEach(t),U3o=r(k6e," (Data2VecText model)"),k6e.forEach(t),J3o=i(O),ou=n(O,"LI",{});var S6e=s(ou);Xle=n(S6e,"STRONG",{});var Oet=s(Xle);Y3o=r(Oet,"deberta"),Oet.forEach(t),K3o=r(S6e," \u2014 "),iN=n(S6e,"A",{href:!0});var Vet=s(iN);Z3o=r(Vet,"DebertaForMaskedLM"),Vet.forEach(t),eFo=r(S6e," (DeBERTa model)"),S6e.forEach(t),oFo=i(O),ru=n(O,"LI",{});var R6e=s(ru);zle=n(R6e,"STRONG",{});var Xet=s(zle);rFo=r(Xet,"deberta-v2"),Xet.forEach(t),tFo=r(R6e," \u2014 "),dN=n(R6e,"A",{href:!0});var zet=s(dN);aFo=r(zet,"DebertaV2ForMaskedLM"),zet.forEach(t),nFo=r(R6e," (DeBERTa-v2 model)"),R6e.forEach(t),sFo=i(O),tu=n(O,"LI",{});var P6e=s(tu);Wle=n(P6e,"STRONG",{});var Wet=s(Wle);lFo=r(Wet,"distilbert"),Wet.forEach(t),iFo=r(P6e," \u2014 "),cN=n(P6e,"A",{href:!0});var Qet=s(cN);dFo=r(Qet,"DistilBertForMaskedLM"),Qet.forEach(t),cFo=r(P6e," (DistilBERT model)"),P6e.forEach(t),fFo=i(O),au=n(O,"LI",{});var B6e=s(au);Qle=n(B6e,"STRONG",{});var Het=s(Qle);mFo=r(Het,"electra"),Het.forEach(t),gFo=r(B6e," \u2014 "),fN=n(B6e,"A",{href:!0});var Uet=s(fN);hFo=r(Uet,"ElectraForPreTraining"),Uet.forEach(t),pFo=r(B6e," (ELECTRA model)"),B6e.forEach(t),_Fo=i(O),nu=n(O,"LI",{});var I6e=s(nu);Hle=n(I6e,"STRONG",{});var Jet=s(Hle);uFo=r(Jet,"flaubert"),Jet.forEach(t),bFo=r(I6e," \u2014 "),mN=n(I6e,"A",{href:!0});var Yet=s(mN);vFo=r(Yet,"FlaubertWithLMHeadModel"),Yet.forEach(t),FFo=r(I6e," (FlauBERT model)"),I6e.forEach(t),TFo=i(O),su=n(O,"LI",{});var q6e=s(su);Ule=n(q6e,"STRONG",{});var Ket=s(Ule);MFo=r(Ket,"flava"),Ket.forEach(t),EFo=r(q6e," \u2014 "),gN=n(q6e,"A",{href:!0});var Zet=s(gN);CFo=r(Zet,"FlavaForPreTraining"),Zet.forEach(t),wFo=r(q6e," (Flava model)"),q6e.forEach(t),AFo=i(O),lu=n(O,"LI",{});var N6e=s(lu);Jle=n(N6e,"STRONG",{});var eot=s(Jle);yFo=r(eot,"fnet"),eot.forEach(t),LFo=r(N6e," \u2014 "),hN=n(N6e,"A",{href:!0});var oot=s(hN);xFo=r(oot,"FNetForPreTraining"),oot.forEach(t),$Fo=r(N6e," (FNet model)"),N6e.forEach(t),kFo=i(O),iu=n(O,"LI",{});var j6e=s(iu);Yle=n(j6e,"STRONG",{});var rot=s(Yle);SFo=r(rot,"fsmt"),rot.forEach(t),RFo=r(j6e," \u2014 "),pN=n(j6e,"A",{href:!0});var tot=s(pN);PFo=r(tot,"FSMTForConditionalGeneration"),tot.forEach(t),BFo=r(j6e," (FairSeq Machine-Translation model)"),j6e.forEach(t),IFo=i(O),du=n(O,"LI",{});var D6e=s(du);Kle=n(D6e,"STRONG",{});var aot=s(Kle);qFo=r(aot,"funnel"),aot.forEach(t),NFo=r(D6e," \u2014 "),_N=n(D6e,"A",{href:!0});var not=s(_N);jFo=r(not,"FunnelForPreTraining"),not.forEach(t),DFo=r(D6e," (Funnel Transformer model)"),D6e.forEach(t),GFo=i(O),cu=n(O,"LI",{});var G6e=s(cu);Zle=n(G6e,"STRONG",{});var sot=s(Zle);OFo=r(sot,"gpt2"),sot.forEach(t),VFo=r(G6e," \u2014 "),uN=n(G6e,"A",{href:!0});var lot=s(uN);XFo=r(lot,"GPT2LMHeadModel"),lot.forEach(t),zFo=r(G6e," (OpenAI GPT-2 model)"),G6e.forEach(t),WFo=i(O),fu=n(O,"LI",{});var O6e=s(fu);eie=n(O6e,"STRONG",{});var iot=s(eie);QFo=r(iot,"ibert"),iot.forEach(t),HFo=r(O6e," \u2014 "),bN=n(O6e,"A",{href:!0});var dot=s(bN);UFo=r(dot,"IBertForMaskedLM"),dot.forEach(t),JFo=r(O6e," (I-BERT model)"),O6e.forEach(t),YFo=i(O),mu=n(O,"LI",{});var V6e=s(mu);oie=n(V6e,"STRONG",{});var cot=s(oie);KFo=r(cot,"layoutlm"),cot.forEach(t),ZFo=r(V6e," \u2014 "),vN=n(V6e,"A",{href:!0});var fot=s(vN);eTo=r(fot,"LayoutLMForMaskedLM"),fot.forEach(t),oTo=r(V6e," (LayoutLM model)"),V6e.forEach(t),rTo=i(O),gu=n(O,"LI",{});var X6e=s(gu);rie=n(X6e,"STRONG",{});var mot=s(rie);tTo=r(mot,"longformer"),mot.forEach(t),aTo=r(X6e," \u2014 "),FN=n(X6e,"A",{href:!0});var got=s(FN);nTo=r(got,"LongformerForMaskedLM"),got.forEach(t),sTo=r(X6e," (Longformer model)"),X6e.forEach(t),lTo=i(O),hu=n(O,"LI",{});var z6e=s(hu);tie=n(z6e,"STRONG",{});var hot=s(tie);iTo=r(hot,"lxmert"),hot.forEach(t),dTo=r(z6e," \u2014 "),TN=n(z6e,"A",{href:!0});var pot=s(TN);cTo=r(pot,"LxmertForPreTraining"),pot.forEach(t),fTo=r(z6e," (LXMERT model)"),z6e.forEach(t),mTo=i(O),pu=n(O,"LI",{});var W6e=s(pu);aie=n(W6e,"STRONG",{});var _ot=s(aie);gTo=r(_ot,"megatron-bert"),_ot.forEach(t),hTo=r(W6e," \u2014 "),MN=n(W6e,"A",{href:!0});var uot=s(MN);pTo=r(uot,"MegatronBertForPreTraining"),uot.forEach(t),_To=r(W6e," (MegatronBert model)"),W6e.forEach(t),uTo=i(O),_u=n(O,"LI",{});var Q6e=s(_u);nie=n(Q6e,"STRONG",{});var bot=s(nie);bTo=r(bot,"mobilebert"),bot.forEach(t),vTo=r(Q6e," \u2014 "),EN=n(Q6e,"A",{href:!0});var vot=s(EN);FTo=r(vot,"MobileBertForPreTraining"),vot.forEach(t),TTo=r(Q6e," (MobileBERT model)"),Q6e.forEach(t),MTo=i(O),uu=n(O,"LI",{});var H6e=s(uu);sie=n(H6e,"STRONG",{});var Fot=s(sie);ETo=r(Fot,"mpnet"),Fot.forEach(t),CTo=r(H6e," \u2014 "),CN=n(H6e,"A",{href:!0});var Tot=s(CN);wTo=r(Tot,"MPNetForMaskedLM"),Tot.forEach(t),ATo=r(H6e," (MPNet model)"),H6e.forEach(t),yTo=i(O),bu=n(O,"LI",{});var U6e=s(bu);lie=n(U6e,"STRONG",{});var Mot=s(lie);LTo=r(Mot,"openai-gpt"),Mot.forEach(t),xTo=r(U6e," \u2014 "),wN=n(U6e,"A",{href:!0});var Eot=s(wN);$To=r(Eot,"OpenAIGPTLMHeadModel"),Eot.forEach(t),kTo=r(U6e," (OpenAI GPT model)"),U6e.forEach(t),STo=i(O),vu=n(O,"LI",{});var J6e=s(vu);iie=n(J6e,"STRONG",{});var Cot=s(iie);RTo=r(Cot,"retribert"),Cot.forEach(t),PTo=r(J6e," \u2014 "),AN=n(J6e,"A",{href:!0});var wot=s(AN);BTo=r(wot,"RetriBertModel"),wot.forEach(t),ITo=r(J6e," (RetriBERT model)"),J6e.forEach(t),qTo=i(O),Fu=n(O,"LI",{});var Y6e=s(Fu);die=n(Y6e,"STRONG",{});var Aot=s(die);NTo=r(Aot,"roberta"),Aot.forEach(t),jTo=r(Y6e," \u2014 "),yN=n(Y6e,"A",{href:!0});var yot=s(yN);DTo=r(yot,"RobertaForMaskedLM"),yot.forEach(t),GTo=r(Y6e," (RoBERTa model)"),Y6e.forEach(t),OTo=i(O),Tu=n(O,"LI",{});var K6e=s(Tu);cie=n(K6e,"STRONG",{});var Lot=s(cie);VTo=r(Lot,"squeezebert"),Lot.forEach(t),XTo=r(K6e," \u2014 "),LN=n(K6e,"A",{href:!0});var xot=s(LN);zTo=r(xot,"SqueezeBertForMaskedLM"),xot.forEach(t),WTo=r(K6e," (SqueezeBERT model)"),K6e.forEach(t),QTo=i(O),Mu=n(O,"LI",{});var Z6e=s(Mu);fie=n(Z6e,"STRONG",{});var $ot=s(fie);HTo=r($ot,"t5"),$ot.forEach(t),UTo=r(Z6e," \u2014 "),xN=n(Z6e,"A",{href:!0});var kot=s(xN);JTo=r(kot,"T5ForConditionalGeneration"),kot.forEach(t),YTo=r(Z6e," (T5 model)"),Z6e.forEach(t),KTo=i(O),Eu=n(O,"LI",{});var eye=s(Eu);mie=n(eye,"STRONG",{});var Sot=s(mie);ZTo=r(Sot,"tapas"),Sot.forEach(t),e7o=r(eye," \u2014 "),$N=n(eye,"A",{href:!0});var Rot=s($N);o7o=r(Rot,"TapasForMaskedLM"),Rot.forEach(t),r7o=r(eye," (TAPAS model)"),eye.forEach(t),t7o=i(O),Cu=n(O,"LI",{});var oye=s(Cu);gie=n(oye,"STRONG",{});var Pot=s(gie);a7o=r(Pot,"transfo-xl"),Pot.forEach(t),n7o=r(oye," \u2014 "),kN=n(oye,"A",{href:!0});var Bot=s(kN);s7o=r(Bot,"TransfoXLLMHeadModel"),Bot.forEach(t),l7o=r(oye," (Transformer-XL model)"),oye.forEach(t),i7o=i(O),wu=n(O,"LI",{});var rye=s(wu);hie=n(rye,"STRONG",{});var Iot=s(hie);d7o=r(Iot,"unispeech"),Iot.forEach(t),c7o=r(rye," \u2014 "),SN=n(rye,"A",{href:!0});var qot=s(SN);f7o=r(qot,"UniSpeechForPreTraining"),qot.forEach(t),m7o=r(rye," (UniSpeech model)"),rye.forEach(t),g7o=i(O),Au=n(O,"LI",{});var tye=s(Au);pie=n(tye,"STRONG",{});var Not=s(pie);h7o=r(Not,"unispeech-sat"),Not.forEach(t),p7o=r(tye," \u2014 "),RN=n(tye,"A",{href:!0});var jot=s(RN);_7o=r(jot,"UniSpeechSatForPreTraining"),jot.forEach(t),u7o=r(tye," (UniSpeechSat model)"),tye.forEach(t),b7o=i(O),yu=n(O,"LI",{});var aye=s(yu);_ie=n(aye,"STRONG",{});var Dot=s(_ie);v7o=r(Dot,"visual_bert"),Dot.forEach(t),F7o=r(aye," \u2014 "),PN=n(aye,"A",{href:!0});var Got=s(PN);T7o=r(Got,"VisualBertForPreTraining"),Got.forEach(t),M7o=r(aye," (VisualBert model)"),aye.forEach(t),E7o=i(O),Lu=n(O,"LI",{});var nye=s(Lu);uie=n(nye,"STRONG",{});var Oot=s(uie);C7o=r(Oot,"vit_mae"),Oot.forEach(t),w7o=r(nye," \u2014 "),BN=n(nye,"A",{href:!0});var Vot=s(BN);A7o=r(Vot,"ViTMAEForPreTraining"),Vot.forEach(t),y7o=r(nye," (ViTMAE model)"),nye.forEach(t),L7o=i(O),xu=n(O,"LI",{});var sye=s(xu);bie=n(sye,"STRONG",{});var Xot=s(bie);x7o=r(Xot,"wav2vec2"),Xot.forEach(t),$7o=r(sye," \u2014 "),IN=n(sye,"A",{href:!0});var zot=s(IN);k7o=r(zot,"Wav2Vec2ForPreTraining"),zot.forEach(t),S7o=r(sye," (Wav2Vec2 model)"),sye.forEach(t),R7o=i(O),$u=n(O,"LI",{});var lye=s($u);vie=n(lye,"STRONG",{});var Wot=s(vie);P7o=r(Wot,"wav2vec2-conformer"),Wot.forEach(t),B7o=r(lye," \u2014 "),qN=n(lye,"A",{href:!0});var Qot=s(qN);I7o=r(Qot,"Wav2Vec2ConformerForPreTraining"),Qot.forEach(t),q7o=r(lye," (Wav2Vec2-Conformer model)"),lye.forEach(t),N7o=i(O),ku=n(O,"LI",{});var iye=s(ku);Fie=n(iye,"STRONG",{});var Hot=s(Fie);j7o=r(Hot,"xlm"),Hot.forEach(t),D7o=r(iye," \u2014 "),NN=n(iye,"A",{href:!0});var Uot=s(NN);G7o=r(Uot,"XLMWithLMHeadModel"),Uot.forEach(t),O7o=r(iye," (XLM model)"),iye.forEach(t),V7o=i(O),Su=n(O,"LI",{});var dye=s(Su);Tie=n(dye,"STRONG",{});var Jot=s(Tie);X7o=r(Jot,"xlm-roberta"),Jot.forEach(t),z7o=r(dye," \u2014 "),jN=n(dye,"A",{href:!0});var Yot=s(jN);W7o=r(Yot,"XLMRobertaForMaskedLM"),Yot.forEach(t),Q7o=r(dye," (XLM-RoBERTa model)"),dye.forEach(t),H7o=i(O),Ru=n(O,"LI",{});var cye=s(Ru);Mie=n(cye,"STRONG",{});var Kot=s(Mie);U7o=r(Kot,"xlm-roberta-xl"),Kot.forEach(t),J7o=r(cye," \u2014 "),DN=n(cye,"A",{href:!0});var Zot=s(DN);Y7o=r(Zot,"XLMRobertaXLForMaskedLM"),Zot.forEach(t),K7o=r(cye," (XLM-RoBERTa-XL model)"),cye.forEach(t),Z7o=i(O),Pu=n(O,"LI",{});var fye=s(Pu);Eie=n(fye,"STRONG",{});var ert=s(Eie);eMo=r(ert,"xlnet"),ert.forEach(t),oMo=r(fye," \u2014 "),GN=n(fye,"A",{href:!0});var ort=s(GN);rMo=r(ort,"XLNetLMHeadModel"),ort.forEach(t),tMo=r(fye," (XLNet model)"),fye.forEach(t),O.forEach(t),aMo=i(ra),Bu=n(ra,"P",{});var mye=s(Bu);nMo=r(mye,"The model is set in evaluation mode by default using "),Cie=n(mye,"CODE",{});var rrt=s(Cie);sMo=r(rrt,"model.eval()"),rrt.forEach(t),lMo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(mye,"CODE",{});var trt=s(wie);iMo=r(trt,"model.train()"),trt.forEach(t),mye.forEach(t),dMo=i(ra),T(Iu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),aqe=i(f),$i=n(f,"H2",{class:!0});var ije=s($i);qu=n(ije,"A",{id:!0,class:!0,href:!0});var art=s(qu);Aie=n(art,"SPAN",{});var nrt=s(Aie);T(Q6.$$.fragment,nrt),nrt.forEach(t),art.forEach(t),cMo=i(ije),yie=n(ije,"SPAN",{});var srt=s(yie);fMo=r(srt,"AutoModelForCausalLM"),srt.forEach(t),ije.forEach(t),nqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(H6.$$.fragment,Os),mMo=i(Os),ki=n(Os,"P",{});var jK=s(ki);gMo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ON=n(jK,"A",{href:!0});var lrt=s(ON);hMo=r(lrt,"from_pretrained()"),lrt.forEach(t),pMo=r(jK," class method or the "),VN=n(jK,"A",{href:!0});var irt=s(VN);_Mo=r(irt,"from_config()"),irt.forEach(t),uMo=r(jK,` class
method.`),jK.forEach(t),bMo=i(Os),U6=n(Os,"P",{});var dje=s(U6);vMo=r(dje,"This class cannot be instantiated directly using "),Lie=n(dje,"CODE",{});var drt=s(Lie);FMo=r(drt,"__init__()"),drt.forEach(t),TMo=r(dje," (throws an error)."),dje.forEach(t),MMo=i(Os),nt=n(Os,"DIV",{class:!0});var v0=s(nt);T(J6.$$.fragment,v0),EMo=i(v0),xie=n(v0,"P",{});var crt=s(xie);CMo=r(crt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),crt.forEach(t),wMo=i(v0),Si=n(v0,"P",{});var DK=s(Si);AMo=r(DK,`Note:
Loading a model from its configuration file does `),$ie=n(DK,"STRONG",{});var frt=s($ie);yMo=r(frt,"not"),frt.forEach(t),LMo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(DK,"A",{href:!0});var mrt=s(XN);xMo=r(mrt,"from_pretrained()"),mrt.forEach(t),$Mo=r(DK," to load the model weights."),DK.forEach(t),kMo=i(v0),T(Nu.$$.fragment,v0),v0.forEach(t),SMo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Y6.$$.fragment,ta),RMo=i(ta),kie=n(ta,"P",{});var grt=s(kie);PMo=r(grt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),grt.forEach(t),BMo=i(ta),$a=n(ta,"P",{});var F0=s($a);IMo=r(F0,"The model class to instantiate is selected based on the "),Sie=n(F0,"CODE",{});var hrt=s(Sie);qMo=r(hrt,"model_type"),hrt.forEach(t),NMo=r(F0,` property of the config object (either
passed as an argument or loaded from `),Rie=n(F0,"CODE",{});var prt=s(Rie);jMo=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),DMo=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(F0,"CODE",{});var _rt=s(Pie);GMo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),OMo=r(F0,":"),F0.forEach(t),VMo=i(ta),z=n(ta,"UL",{});var Q=s(z);ju=n(Q,"LI",{});var gye=s(ju);Bie=n(gye,"STRONG",{});var urt=s(Bie);XMo=r(urt,"bart"),urt.forEach(t),zMo=r(gye," \u2014 "),zN=n(gye,"A",{href:!0});var brt=s(zN);WMo=r(brt,"BartForCausalLM"),brt.forEach(t),QMo=r(gye," (BART model)"),gye.forEach(t),HMo=i(Q),Du=n(Q,"LI",{});var hye=s(Du);Iie=n(hye,"STRONG",{});var vrt=s(Iie);UMo=r(vrt,"bert"),vrt.forEach(t),JMo=r(hye," \u2014 "),WN=n(hye,"A",{href:!0});var Frt=s(WN);YMo=r(Frt,"BertLMHeadModel"),Frt.forEach(t),KMo=r(hye," (BERT model)"),hye.forEach(t),ZMo=i(Q),Gu=n(Q,"LI",{});var pye=s(Gu);qie=n(pye,"STRONG",{});var Trt=s(qie);e4o=r(Trt,"bert-generation"),Trt.forEach(t),o4o=r(pye," \u2014 "),QN=n(pye,"A",{href:!0});var Mrt=s(QN);r4o=r(Mrt,"BertGenerationDecoder"),Mrt.forEach(t),t4o=r(pye," (Bert Generation model)"),pye.forEach(t),a4o=i(Q),Ou=n(Q,"LI",{});var _ye=s(Ou);Nie=n(_ye,"STRONG",{});var Ert=s(Nie);n4o=r(Ert,"big_bird"),Ert.forEach(t),s4o=r(_ye," \u2014 "),HN=n(_ye,"A",{href:!0});var Crt=s(HN);l4o=r(Crt,"BigBirdForCausalLM"),Crt.forEach(t),i4o=r(_ye," (BigBird model)"),_ye.forEach(t),d4o=i(Q),Vu=n(Q,"LI",{});var uye=s(Vu);jie=n(uye,"STRONG",{});var wrt=s(jie);c4o=r(wrt,"bigbird_pegasus"),wrt.forEach(t),f4o=r(uye," \u2014 "),UN=n(uye,"A",{href:!0});var Art=s(UN);m4o=r(Art,"BigBirdPegasusForCausalLM"),Art.forEach(t),g4o=r(uye," (BigBirdPegasus model)"),uye.forEach(t),h4o=i(Q),Xu=n(Q,"LI",{});var bye=s(Xu);Die=n(bye,"STRONG",{});var yrt=s(Die);p4o=r(yrt,"blenderbot"),yrt.forEach(t),_4o=r(bye," \u2014 "),JN=n(bye,"A",{href:!0});var Lrt=s(JN);u4o=r(Lrt,"BlenderbotForCausalLM"),Lrt.forEach(t),b4o=r(bye," (Blenderbot model)"),bye.forEach(t),v4o=i(Q),zu=n(Q,"LI",{});var vye=s(zu);Gie=n(vye,"STRONG",{});var xrt=s(Gie);F4o=r(xrt,"blenderbot-small"),xrt.forEach(t),T4o=r(vye," \u2014 "),YN=n(vye,"A",{href:!0});var $rt=s(YN);M4o=r($rt,"BlenderbotSmallForCausalLM"),$rt.forEach(t),E4o=r(vye," (BlenderbotSmall model)"),vye.forEach(t),C4o=i(Q),Wu=n(Q,"LI",{});var Fye=s(Wu);Oie=n(Fye,"STRONG",{});var krt=s(Oie);w4o=r(krt,"camembert"),krt.forEach(t),A4o=r(Fye," \u2014 "),KN=n(Fye,"A",{href:!0});var Srt=s(KN);y4o=r(Srt,"CamembertForCausalLM"),Srt.forEach(t),L4o=r(Fye," (CamemBERT model)"),Fye.forEach(t),x4o=i(Q),Qu=n(Q,"LI",{});var Tye=s(Qu);Vie=n(Tye,"STRONG",{});var Rrt=s(Vie);$4o=r(Rrt,"ctrl"),Rrt.forEach(t),k4o=r(Tye," \u2014 "),ZN=n(Tye,"A",{href:!0});var Prt=s(ZN);S4o=r(Prt,"CTRLLMHeadModel"),Prt.forEach(t),R4o=r(Tye," (CTRL model)"),Tye.forEach(t),P4o=i(Q),Hu=n(Q,"LI",{});var Mye=s(Hu);Xie=n(Mye,"STRONG",{});var Brt=s(Xie);B4o=r(Brt,"data2vec-text"),Brt.forEach(t),I4o=r(Mye," \u2014 "),ej=n(Mye,"A",{href:!0});var Irt=s(ej);q4o=r(Irt,"Data2VecTextForCausalLM"),Irt.forEach(t),N4o=r(Mye," (Data2VecText model)"),Mye.forEach(t),j4o=i(Q),Uu=n(Q,"LI",{});var Eye=s(Uu);zie=n(Eye,"STRONG",{});var qrt=s(zie);D4o=r(qrt,"electra"),qrt.forEach(t),G4o=r(Eye," \u2014 "),oj=n(Eye,"A",{href:!0});var Nrt=s(oj);O4o=r(Nrt,"ElectraForCausalLM"),Nrt.forEach(t),V4o=r(Eye," (ELECTRA model)"),Eye.forEach(t),X4o=i(Q),Ju=n(Q,"LI",{});var Cye=s(Ju);Wie=n(Cye,"STRONG",{});var jrt=s(Wie);z4o=r(jrt,"gpt2"),jrt.forEach(t),W4o=r(Cye," \u2014 "),rj=n(Cye,"A",{href:!0});var Drt=s(rj);Q4o=r(Drt,"GPT2LMHeadModel"),Drt.forEach(t),H4o=r(Cye," (OpenAI GPT-2 model)"),Cye.forEach(t),U4o=i(Q),Yu=n(Q,"LI",{});var wye=s(Yu);Qie=n(wye,"STRONG",{});var Grt=s(Qie);J4o=r(Grt,"gpt_neo"),Grt.forEach(t),Y4o=r(wye," \u2014 "),tj=n(wye,"A",{href:!0});var Ort=s(tj);K4o=r(Ort,"GPTNeoForCausalLM"),Ort.forEach(t),Z4o=r(wye," (GPT Neo model)"),wye.forEach(t),eEo=i(Q),Ku=n(Q,"LI",{});var Aye=s(Ku);Hie=n(Aye,"STRONG",{});var Vrt=s(Hie);oEo=r(Vrt,"gptj"),Vrt.forEach(t),rEo=r(Aye," \u2014 "),aj=n(Aye,"A",{href:!0});var Xrt=s(aj);tEo=r(Xrt,"GPTJForCausalLM"),Xrt.forEach(t),aEo=r(Aye," (GPT-J model)"),Aye.forEach(t),nEo=i(Q),Zu=n(Q,"LI",{});var yye=s(Zu);Uie=n(yye,"STRONG",{});var zrt=s(Uie);sEo=r(zrt,"marian"),zrt.forEach(t),lEo=r(yye," \u2014 "),nj=n(yye,"A",{href:!0});var Wrt=s(nj);iEo=r(Wrt,"MarianForCausalLM"),Wrt.forEach(t),dEo=r(yye," (Marian model)"),yye.forEach(t),cEo=i(Q),e2=n(Q,"LI",{});var Lye=s(e2);Jie=n(Lye,"STRONG",{});var Qrt=s(Jie);fEo=r(Qrt,"mbart"),Qrt.forEach(t),mEo=r(Lye," \u2014 "),sj=n(Lye,"A",{href:!0});var Hrt=s(sj);gEo=r(Hrt,"MBartForCausalLM"),Hrt.forEach(t),hEo=r(Lye," (mBART model)"),Lye.forEach(t),pEo=i(Q),o2=n(Q,"LI",{});var xye=s(o2);Yie=n(xye,"STRONG",{});var Urt=s(Yie);_Eo=r(Urt,"megatron-bert"),Urt.forEach(t),uEo=r(xye," \u2014 "),lj=n(xye,"A",{href:!0});var Jrt=s(lj);bEo=r(Jrt,"MegatronBertForCausalLM"),Jrt.forEach(t),vEo=r(xye," (MegatronBert model)"),xye.forEach(t),FEo=i(Q),r2=n(Q,"LI",{});var $ye=s(r2);Kie=n($ye,"STRONG",{});var Yrt=s(Kie);TEo=r(Yrt,"openai-gpt"),Yrt.forEach(t),MEo=r($ye," \u2014 "),ij=n($ye,"A",{href:!0});var Krt=s(ij);EEo=r(Krt,"OpenAIGPTLMHeadModel"),Krt.forEach(t),CEo=r($ye," (OpenAI GPT model)"),$ye.forEach(t),wEo=i(Q),t2=n(Q,"LI",{});var kye=s(t2);Zie=n(kye,"STRONG",{});var Zrt=s(Zie);AEo=r(Zrt,"opt"),Zrt.forEach(t),yEo=r(kye," \u2014 "),dj=n(kye,"A",{href:!0});var ett=s(dj);LEo=r(ett,"OPTForCausalLM"),ett.forEach(t),xEo=r(kye," (OPT model)"),kye.forEach(t),$Eo=i(Q),a2=n(Q,"LI",{});var Sye=s(a2);ede=n(Sye,"STRONG",{});var ott=s(ede);kEo=r(ott,"pegasus"),ott.forEach(t),SEo=r(Sye," \u2014 "),cj=n(Sye,"A",{href:!0});var rtt=s(cj);REo=r(rtt,"PegasusForCausalLM"),rtt.forEach(t),PEo=r(Sye," (Pegasus model)"),Sye.forEach(t),BEo=i(Q),n2=n(Q,"LI",{});var Rye=s(n2);ode=n(Rye,"STRONG",{});var ttt=s(ode);IEo=r(ttt,"plbart"),ttt.forEach(t),qEo=r(Rye," \u2014 "),fj=n(Rye,"A",{href:!0});var att=s(fj);NEo=r(att,"PLBartForCausalLM"),att.forEach(t),jEo=r(Rye," (PLBart model)"),Rye.forEach(t),DEo=i(Q),s2=n(Q,"LI",{});var Pye=s(s2);rde=n(Pye,"STRONG",{});var ntt=s(rde);GEo=r(ntt,"prophetnet"),ntt.forEach(t),OEo=r(Pye," \u2014 "),mj=n(Pye,"A",{href:!0});var stt=s(mj);VEo=r(stt,"ProphetNetForCausalLM"),stt.forEach(t),XEo=r(Pye," (ProphetNet model)"),Pye.forEach(t),zEo=i(Q),l2=n(Q,"LI",{});var Bye=s(l2);tde=n(Bye,"STRONG",{});var ltt=s(tde);WEo=r(ltt,"qdqbert"),ltt.forEach(t),QEo=r(Bye," \u2014 "),gj=n(Bye,"A",{href:!0});var itt=s(gj);HEo=r(itt,"QDQBertLMHeadModel"),itt.forEach(t),UEo=r(Bye," (QDQBert model)"),Bye.forEach(t),JEo=i(Q),i2=n(Q,"LI",{});var Iye=s(i2);ade=n(Iye,"STRONG",{});var dtt=s(ade);YEo=r(dtt,"reformer"),dtt.forEach(t),KEo=r(Iye," \u2014 "),hj=n(Iye,"A",{href:!0});var ctt=s(hj);ZEo=r(ctt,"ReformerModelWithLMHead"),ctt.forEach(t),eCo=r(Iye," (Reformer model)"),Iye.forEach(t),oCo=i(Q),d2=n(Q,"LI",{});var qye=s(d2);nde=n(qye,"STRONG",{});var ftt=s(nde);rCo=r(ftt,"rembert"),ftt.forEach(t),tCo=r(qye," \u2014 "),pj=n(qye,"A",{href:!0});var mtt=s(pj);aCo=r(mtt,"RemBertForCausalLM"),mtt.forEach(t),nCo=r(qye," (RemBERT model)"),qye.forEach(t),sCo=i(Q),c2=n(Q,"LI",{});var Nye=s(c2);sde=n(Nye,"STRONG",{});var gtt=s(sde);lCo=r(gtt,"roberta"),gtt.forEach(t),iCo=r(Nye," \u2014 "),_j=n(Nye,"A",{href:!0});var htt=s(_j);dCo=r(htt,"RobertaForCausalLM"),htt.forEach(t),cCo=r(Nye," (RoBERTa model)"),Nye.forEach(t),fCo=i(Q),f2=n(Q,"LI",{});var jye=s(f2);lde=n(jye,"STRONG",{});var ptt=s(lde);mCo=r(ptt,"roformer"),ptt.forEach(t),gCo=r(jye," \u2014 "),uj=n(jye,"A",{href:!0});var _tt=s(uj);hCo=r(_tt,"RoFormerForCausalLM"),_tt.forEach(t),pCo=r(jye," (RoFormer model)"),jye.forEach(t),_Co=i(Q),m2=n(Q,"LI",{});var Dye=s(m2);ide=n(Dye,"STRONG",{});var utt=s(ide);uCo=r(utt,"speech_to_text_2"),utt.forEach(t),bCo=r(Dye," \u2014 "),bj=n(Dye,"A",{href:!0});var btt=s(bj);vCo=r(btt,"Speech2Text2ForCausalLM"),btt.forEach(t),FCo=r(Dye," (Speech2Text2 model)"),Dye.forEach(t),TCo=i(Q),g2=n(Q,"LI",{});var Gye=s(g2);dde=n(Gye,"STRONG",{});var vtt=s(dde);MCo=r(vtt,"transfo-xl"),vtt.forEach(t),ECo=r(Gye," \u2014 "),vj=n(Gye,"A",{href:!0});var Ftt=s(vj);CCo=r(Ftt,"TransfoXLLMHeadModel"),Ftt.forEach(t),wCo=r(Gye," (Transformer-XL model)"),Gye.forEach(t),ACo=i(Q),h2=n(Q,"LI",{});var Oye=s(h2);cde=n(Oye,"STRONG",{});var Ttt=s(cde);yCo=r(Ttt,"trocr"),Ttt.forEach(t),LCo=r(Oye," \u2014 "),Fj=n(Oye,"A",{href:!0});var Mtt=s(Fj);xCo=r(Mtt,"TrOCRForCausalLM"),Mtt.forEach(t),$Co=r(Oye," (TrOCR model)"),Oye.forEach(t),kCo=i(Q),p2=n(Q,"LI",{});var Vye=s(p2);fde=n(Vye,"STRONG",{});var Ett=s(fde);SCo=r(Ett,"xglm"),Ett.forEach(t),RCo=r(Vye," \u2014 "),Tj=n(Vye,"A",{href:!0});var Ctt=s(Tj);PCo=r(Ctt,"XGLMForCausalLM"),Ctt.forEach(t),BCo=r(Vye," (XGLM model)"),Vye.forEach(t),ICo=i(Q),_2=n(Q,"LI",{});var Xye=s(_2);mde=n(Xye,"STRONG",{});var wtt=s(mde);qCo=r(wtt,"xlm"),wtt.forEach(t),NCo=r(Xye," \u2014 "),Mj=n(Xye,"A",{href:!0});var Att=s(Mj);jCo=r(Att,"XLMWithLMHeadModel"),Att.forEach(t),DCo=r(Xye," (XLM model)"),Xye.forEach(t),GCo=i(Q),u2=n(Q,"LI",{});var zye=s(u2);gde=n(zye,"STRONG",{});var ytt=s(gde);OCo=r(ytt,"xlm-prophetnet"),ytt.forEach(t),VCo=r(zye," \u2014 "),Ej=n(zye,"A",{href:!0});var Ltt=s(Ej);XCo=r(Ltt,"XLMProphetNetForCausalLM"),Ltt.forEach(t),zCo=r(zye," (XLMProphetNet model)"),zye.forEach(t),WCo=i(Q),b2=n(Q,"LI",{});var Wye=s(b2);hde=n(Wye,"STRONG",{});var xtt=s(hde);QCo=r(xtt,"xlm-roberta"),xtt.forEach(t),HCo=r(Wye," \u2014 "),Cj=n(Wye,"A",{href:!0});var $tt=s(Cj);UCo=r($tt,"XLMRobertaForCausalLM"),$tt.forEach(t),JCo=r(Wye," (XLM-RoBERTa model)"),Wye.forEach(t),YCo=i(Q),v2=n(Q,"LI",{});var Qye=s(v2);pde=n(Qye,"STRONG",{});var ktt=s(pde);KCo=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),ZCo=r(Qye," \u2014 "),wj=n(Qye,"A",{href:!0});var Stt=s(wj);ewo=r(Stt,"XLMRobertaXLForCausalLM"),Stt.forEach(t),owo=r(Qye," (XLM-RoBERTa-XL model)"),Qye.forEach(t),rwo=i(Q),F2=n(Q,"LI",{});var Hye=s(F2);_de=n(Hye,"STRONG",{});var Rtt=s(_de);two=r(Rtt,"xlnet"),Rtt.forEach(t),awo=r(Hye," \u2014 "),Aj=n(Hye,"A",{href:!0});var Ptt=s(Aj);nwo=r(Ptt,"XLNetLMHeadModel"),Ptt.forEach(t),swo=r(Hye," (XLNet model)"),Hye.forEach(t),Q.forEach(t),lwo=i(ta),T2=n(ta,"P",{});var Uye=s(T2);iwo=r(Uye,"The model is set in evaluation mode by default using "),ude=n(Uye,"CODE",{});var Btt=s(ude);dwo=r(Btt,"model.eval()"),Btt.forEach(t),cwo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(Uye,"CODE",{});var Itt=s(bde);fwo=r(Itt,"model.train()"),Itt.forEach(t),Uye.forEach(t),mwo=i(ta),T(M2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),sqe=i(f),Ri=n(f,"H2",{class:!0});var cje=s(Ri);E2=n(cje,"A",{id:!0,class:!0,href:!0});var qtt=s(E2);vde=n(qtt,"SPAN",{});var Ntt=s(vde);T(K6.$$.fragment,Ntt),Ntt.forEach(t),qtt.forEach(t),gwo=i(cje),Fde=n(cje,"SPAN",{});var jtt=s(Fde);hwo=r(jtt,"AutoModelForMaskedLM"),jtt.forEach(t),cje.forEach(t),lqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(Z6.$$.fragment,Vs),pwo=i(Vs),Pi=n(Vs,"P",{});var GK=s(Pi);_wo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yj=n(GK,"A",{href:!0});var Dtt=s(yj);uwo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),bwo=r(GK," class method or the "),Lj=n(GK,"A",{href:!0});var Gtt=s(Lj);vwo=r(Gtt,"from_config()"),Gtt.forEach(t),Fwo=r(GK,` class
method.`),GK.forEach(t),Two=i(Vs),ey=n(Vs,"P",{});var fje=s(ey);Mwo=r(fje,"This class cannot be instantiated directly using "),Tde=n(fje,"CODE",{});var Ott=s(Tde);Ewo=r(Ott,"__init__()"),Ott.forEach(t),Cwo=r(fje," (throws an error)."),fje.forEach(t),wwo=i(Vs),st=n(Vs,"DIV",{class:!0});var T0=s(st);T(oy.$$.fragment,T0),Awo=i(T0),Mde=n(T0,"P",{});var Vtt=s(Mde);ywo=r(Vtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vtt.forEach(t),Lwo=i(T0),Bi=n(T0,"P",{});var OK=s(Bi);xwo=r(OK,`Note:
Loading a model from its configuration file does `),Ede=n(OK,"STRONG",{});var Xtt=s(Ede);$wo=r(Xtt,"not"),Xtt.forEach(t),kwo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(OK,"A",{href:!0});var ztt=s(xj);Swo=r(ztt,"from_pretrained()"),ztt.forEach(t),Rwo=r(OK," to load the model weights."),OK.forEach(t),Pwo=i(T0),T(C2.$$.fragment,T0),T0.forEach(t),Bwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(ry.$$.fragment,aa),Iwo=i(aa),Cde=n(aa,"P",{});var Wtt=s(Cde);qwo=r(Wtt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wtt.forEach(t),Nwo=i(aa),ka=n(aa,"P",{});var M0=s(ka);jwo=r(M0,"The model class to instantiate is selected based on the "),wde=n(M0,"CODE",{});var Qtt=s(wde);Dwo=r(Qtt,"model_type"),Qtt.forEach(t),Gwo=r(M0,` property of the config object (either
passed as an argument or loaded from `),Ade=n(M0,"CODE",{});var Htt=s(Ade);Owo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),Vwo=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(M0,"CODE",{});var Utt=s(yde);Xwo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),zwo=r(M0,":"),M0.forEach(t),Wwo=i(aa),W=n(aa,"UL",{});var H=s(W);w2=n(H,"LI",{});var Jye=s(w2);Lde=n(Jye,"STRONG",{});var Jtt=s(Lde);Qwo=r(Jtt,"albert"),Jtt.forEach(t),Hwo=r(Jye," \u2014 "),$j=n(Jye,"A",{href:!0});var Ytt=s($j);Uwo=r(Ytt,"AlbertForMaskedLM"),Ytt.forEach(t),Jwo=r(Jye," (ALBERT model)"),Jye.forEach(t),Ywo=i(H),A2=n(H,"LI",{});var Yye=s(A2);xde=n(Yye,"STRONG",{});var Ktt=s(xde);Kwo=r(Ktt,"bart"),Ktt.forEach(t),Zwo=r(Yye," \u2014 "),kj=n(Yye,"A",{href:!0});var Ztt=s(kj);e0o=r(Ztt,"BartForConditionalGeneration"),Ztt.forEach(t),o0o=r(Yye," (BART model)"),Yye.forEach(t),r0o=i(H),y2=n(H,"LI",{});var Kye=s(y2);$de=n(Kye,"STRONG",{});var eat=s($de);t0o=r(eat,"bert"),eat.forEach(t),a0o=r(Kye," \u2014 "),Sj=n(Kye,"A",{href:!0});var oat=s(Sj);n0o=r(oat,"BertForMaskedLM"),oat.forEach(t),s0o=r(Kye," (BERT model)"),Kye.forEach(t),l0o=i(H),L2=n(H,"LI",{});var Zye=s(L2);kde=n(Zye,"STRONG",{});var rat=s(kde);i0o=r(rat,"big_bird"),rat.forEach(t),d0o=r(Zye," \u2014 "),Rj=n(Zye,"A",{href:!0});var tat=s(Rj);c0o=r(tat,"BigBirdForMaskedLM"),tat.forEach(t),f0o=r(Zye," (BigBird model)"),Zye.forEach(t),m0o=i(H),x2=n(H,"LI",{});var eLe=s(x2);Sde=n(eLe,"STRONG",{});var aat=s(Sde);g0o=r(aat,"camembert"),aat.forEach(t),h0o=r(eLe," \u2014 "),Pj=n(eLe,"A",{href:!0});var nat=s(Pj);p0o=r(nat,"CamembertForMaskedLM"),nat.forEach(t),_0o=r(eLe," (CamemBERT model)"),eLe.forEach(t),u0o=i(H),$2=n(H,"LI",{});var oLe=s($2);Rde=n(oLe,"STRONG",{});var sat=s(Rde);b0o=r(sat,"convbert"),sat.forEach(t),v0o=r(oLe," \u2014 "),Bj=n(oLe,"A",{href:!0});var lat=s(Bj);F0o=r(lat,"ConvBertForMaskedLM"),lat.forEach(t),T0o=r(oLe," (ConvBERT model)"),oLe.forEach(t),M0o=i(H),k2=n(H,"LI",{});var rLe=s(k2);Pde=n(rLe,"STRONG",{});var iat=s(Pde);E0o=r(iat,"data2vec-text"),iat.forEach(t),C0o=r(rLe," \u2014 "),Ij=n(rLe,"A",{href:!0});var dat=s(Ij);w0o=r(dat,"Data2VecTextForMaskedLM"),dat.forEach(t),A0o=r(rLe," (Data2VecText model)"),rLe.forEach(t),y0o=i(H),S2=n(H,"LI",{});var tLe=s(S2);Bde=n(tLe,"STRONG",{});var cat=s(Bde);L0o=r(cat,"deberta"),cat.forEach(t),x0o=r(tLe," \u2014 "),qj=n(tLe,"A",{href:!0});var fat=s(qj);$0o=r(fat,"DebertaForMaskedLM"),fat.forEach(t),k0o=r(tLe," (DeBERTa model)"),tLe.forEach(t),S0o=i(H),R2=n(H,"LI",{});var aLe=s(R2);Ide=n(aLe,"STRONG",{});var mat=s(Ide);R0o=r(mat,"deberta-v2"),mat.forEach(t),P0o=r(aLe," \u2014 "),Nj=n(aLe,"A",{href:!0});var gat=s(Nj);B0o=r(gat,"DebertaV2ForMaskedLM"),gat.forEach(t),I0o=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),q0o=i(H),P2=n(H,"LI",{});var nLe=s(P2);qde=n(nLe,"STRONG",{});var hat=s(qde);N0o=r(hat,"distilbert"),hat.forEach(t),j0o=r(nLe," \u2014 "),jj=n(nLe,"A",{href:!0});var pat=s(jj);D0o=r(pat,"DistilBertForMaskedLM"),pat.forEach(t),G0o=r(nLe," (DistilBERT model)"),nLe.forEach(t),O0o=i(H),B2=n(H,"LI",{});var sLe=s(B2);Nde=n(sLe,"STRONG",{});var _at=s(Nde);V0o=r(_at,"electra"),_at.forEach(t),X0o=r(sLe," \u2014 "),Dj=n(sLe,"A",{href:!0});var uat=s(Dj);z0o=r(uat,"ElectraForMaskedLM"),uat.forEach(t),W0o=r(sLe," (ELECTRA model)"),sLe.forEach(t),Q0o=i(H),I2=n(H,"LI",{});var lLe=s(I2);jde=n(lLe,"STRONG",{});var bat=s(jde);H0o=r(bat,"flaubert"),bat.forEach(t),U0o=r(lLe," \u2014 "),Gj=n(lLe,"A",{href:!0});var vat=s(Gj);J0o=r(vat,"FlaubertWithLMHeadModel"),vat.forEach(t),Y0o=r(lLe," (FlauBERT model)"),lLe.forEach(t),K0o=i(H),q2=n(H,"LI",{});var iLe=s(q2);Dde=n(iLe,"STRONG",{});var Fat=s(Dde);Z0o=r(Fat,"fnet"),Fat.forEach(t),eAo=r(iLe," \u2014 "),Oj=n(iLe,"A",{href:!0});var Tat=s(Oj);oAo=r(Tat,"FNetForMaskedLM"),Tat.forEach(t),rAo=r(iLe," (FNet model)"),iLe.forEach(t),tAo=i(H),N2=n(H,"LI",{});var dLe=s(N2);Gde=n(dLe,"STRONG",{});var Mat=s(Gde);aAo=r(Mat,"funnel"),Mat.forEach(t),nAo=r(dLe," \u2014 "),Vj=n(dLe,"A",{href:!0});var Eat=s(Vj);sAo=r(Eat,"FunnelForMaskedLM"),Eat.forEach(t),lAo=r(dLe," (Funnel Transformer model)"),dLe.forEach(t),iAo=i(H),j2=n(H,"LI",{});var cLe=s(j2);Ode=n(cLe,"STRONG",{});var Cat=s(Ode);dAo=r(Cat,"ibert"),Cat.forEach(t),cAo=r(cLe," \u2014 "),Xj=n(cLe,"A",{href:!0});var wat=s(Xj);fAo=r(wat,"IBertForMaskedLM"),wat.forEach(t),mAo=r(cLe," (I-BERT model)"),cLe.forEach(t),gAo=i(H),D2=n(H,"LI",{});var fLe=s(D2);Vde=n(fLe,"STRONG",{});var Aat=s(Vde);hAo=r(Aat,"layoutlm"),Aat.forEach(t),pAo=r(fLe," \u2014 "),zj=n(fLe,"A",{href:!0});var yat=s(zj);_Ao=r(yat,"LayoutLMForMaskedLM"),yat.forEach(t),uAo=r(fLe," (LayoutLM model)"),fLe.forEach(t),bAo=i(H),G2=n(H,"LI",{});var mLe=s(G2);Xde=n(mLe,"STRONG",{});var Lat=s(Xde);vAo=r(Lat,"longformer"),Lat.forEach(t),FAo=r(mLe," \u2014 "),Wj=n(mLe,"A",{href:!0});var xat=s(Wj);TAo=r(xat,"LongformerForMaskedLM"),xat.forEach(t),MAo=r(mLe," (Longformer model)"),mLe.forEach(t),EAo=i(H),O2=n(H,"LI",{});var gLe=s(O2);zde=n(gLe,"STRONG",{});var $at=s(zde);CAo=r($at,"mbart"),$at.forEach(t),wAo=r(gLe," \u2014 "),Qj=n(gLe,"A",{href:!0});var kat=s(Qj);AAo=r(kat,"MBartForConditionalGeneration"),kat.forEach(t),yAo=r(gLe," (mBART model)"),gLe.forEach(t),LAo=i(H),V2=n(H,"LI",{});var hLe=s(V2);Wde=n(hLe,"STRONG",{});var Sat=s(Wde);xAo=r(Sat,"megatron-bert"),Sat.forEach(t),$Ao=r(hLe," \u2014 "),Hj=n(hLe,"A",{href:!0});var Rat=s(Hj);kAo=r(Rat,"MegatronBertForMaskedLM"),Rat.forEach(t),SAo=r(hLe," (MegatronBert model)"),hLe.forEach(t),RAo=i(H),X2=n(H,"LI",{});var pLe=s(X2);Qde=n(pLe,"STRONG",{});var Pat=s(Qde);PAo=r(Pat,"mobilebert"),Pat.forEach(t),BAo=r(pLe," \u2014 "),Uj=n(pLe,"A",{href:!0});var Bat=s(Uj);IAo=r(Bat,"MobileBertForMaskedLM"),Bat.forEach(t),qAo=r(pLe," (MobileBERT model)"),pLe.forEach(t),NAo=i(H),z2=n(H,"LI",{});var _Le=s(z2);Hde=n(_Le,"STRONG",{});var Iat=s(Hde);jAo=r(Iat,"mpnet"),Iat.forEach(t),DAo=r(_Le," \u2014 "),Jj=n(_Le,"A",{href:!0});var qat=s(Jj);GAo=r(qat,"MPNetForMaskedLM"),qat.forEach(t),OAo=r(_Le," (MPNet model)"),_Le.forEach(t),VAo=i(H),W2=n(H,"LI",{});var uLe=s(W2);Ude=n(uLe,"STRONG",{});var Nat=s(Ude);XAo=r(Nat,"nystromformer"),Nat.forEach(t),zAo=r(uLe," \u2014 "),Yj=n(uLe,"A",{href:!0});var jat=s(Yj);WAo=r(jat,"NystromformerForMaskedLM"),jat.forEach(t),QAo=r(uLe," (Nystromformer model)"),uLe.forEach(t),HAo=i(H),Q2=n(H,"LI",{});var bLe=s(Q2);Jde=n(bLe,"STRONG",{});var Dat=s(Jde);UAo=r(Dat,"perceiver"),Dat.forEach(t),JAo=r(bLe," \u2014 "),Kj=n(bLe,"A",{href:!0});var Gat=s(Kj);YAo=r(Gat,"PerceiverForMaskedLM"),Gat.forEach(t),KAo=r(bLe," (Perceiver model)"),bLe.forEach(t),ZAo=i(H),H2=n(H,"LI",{});var vLe=s(H2);Yde=n(vLe,"STRONG",{});var Oat=s(Yde);e6o=r(Oat,"qdqbert"),Oat.forEach(t),o6o=r(vLe," \u2014 "),Zj=n(vLe,"A",{href:!0});var Vat=s(Zj);r6o=r(Vat,"QDQBertForMaskedLM"),Vat.forEach(t),t6o=r(vLe," (QDQBert model)"),vLe.forEach(t),a6o=i(H),U2=n(H,"LI",{});var FLe=s(U2);Kde=n(FLe,"STRONG",{});var Xat=s(Kde);n6o=r(Xat,"reformer"),Xat.forEach(t),s6o=r(FLe," \u2014 "),eD=n(FLe,"A",{href:!0});var zat=s(eD);l6o=r(zat,"ReformerForMaskedLM"),zat.forEach(t),i6o=r(FLe," (Reformer model)"),FLe.forEach(t),d6o=i(H),J2=n(H,"LI",{});var TLe=s(J2);Zde=n(TLe,"STRONG",{});var Wat=s(Zde);c6o=r(Wat,"rembert"),Wat.forEach(t),f6o=r(TLe," \u2014 "),oD=n(TLe,"A",{href:!0});var Qat=s(oD);m6o=r(Qat,"RemBertForMaskedLM"),Qat.forEach(t),g6o=r(TLe," (RemBERT model)"),TLe.forEach(t),h6o=i(H),Y2=n(H,"LI",{});var MLe=s(Y2);ece=n(MLe,"STRONG",{});var Hat=s(ece);p6o=r(Hat,"roberta"),Hat.forEach(t),_6o=r(MLe," \u2014 "),rD=n(MLe,"A",{href:!0});var Uat=s(rD);u6o=r(Uat,"RobertaForMaskedLM"),Uat.forEach(t),b6o=r(MLe," (RoBERTa model)"),MLe.forEach(t),v6o=i(H),K2=n(H,"LI",{});var ELe=s(K2);oce=n(ELe,"STRONG",{});var Jat=s(oce);F6o=r(Jat,"roformer"),Jat.forEach(t),T6o=r(ELe," \u2014 "),tD=n(ELe,"A",{href:!0});var Yat=s(tD);M6o=r(Yat,"RoFormerForMaskedLM"),Yat.forEach(t),E6o=r(ELe," (RoFormer model)"),ELe.forEach(t),C6o=i(H),Z2=n(H,"LI",{});var CLe=s(Z2);rce=n(CLe,"STRONG",{});var Kat=s(rce);w6o=r(Kat,"squeezebert"),Kat.forEach(t),A6o=r(CLe," \u2014 "),aD=n(CLe,"A",{href:!0});var Zat=s(aD);y6o=r(Zat,"SqueezeBertForMaskedLM"),Zat.forEach(t),L6o=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),x6o=i(H),e1=n(H,"LI",{});var wLe=s(e1);tce=n(wLe,"STRONG",{});var ent=s(tce);$6o=r(ent,"tapas"),ent.forEach(t),k6o=r(wLe," \u2014 "),nD=n(wLe,"A",{href:!0});var ont=s(nD);S6o=r(ont,"TapasForMaskedLM"),ont.forEach(t),R6o=r(wLe," (TAPAS model)"),wLe.forEach(t),P6o=i(H),o1=n(H,"LI",{});var ALe=s(o1);ace=n(ALe,"STRONG",{});var rnt=s(ace);B6o=r(rnt,"wav2vec2"),rnt.forEach(t),I6o=r(ALe," \u2014 "),nce=n(ALe,"CODE",{});var tnt=s(nce);q6o=r(tnt,"Wav2Vec2ForMaskedLM"),tnt.forEach(t),N6o=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),j6o=i(H),r1=n(H,"LI",{});var yLe=s(r1);sce=n(yLe,"STRONG",{});var ant=s(sce);D6o=r(ant,"xlm"),ant.forEach(t),G6o=r(yLe," \u2014 "),sD=n(yLe,"A",{href:!0});var nnt=s(sD);O6o=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),V6o=r(yLe," (XLM model)"),yLe.forEach(t),X6o=i(H),t1=n(H,"LI",{});var LLe=s(t1);lce=n(LLe,"STRONG",{});var snt=s(lce);z6o=r(snt,"xlm-roberta"),snt.forEach(t),W6o=r(LLe," \u2014 "),lD=n(LLe,"A",{href:!0});var lnt=s(lD);Q6o=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),H6o=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),U6o=i(H),a1=n(H,"LI",{});var xLe=s(a1);ice=n(xLe,"STRONG",{});var int=s(ice);J6o=r(int,"xlm-roberta-xl"),int.forEach(t),Y6o=r(xLe," \u2014 "),iD=n(xLe,"A",{href:!0});var dnt=s(iD);K6o=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),Z6o=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),eyo=i(H),n1=n(H,"LI",{});var $Le=s(n1);dce=n($Le,"STRONG",{});var cnt=s(dce);oyo=r(cnt,"yoso"),cnt.forEach(t),ryo=r($Le," \u2014 "),dD=n($Le,"A",{href:!0});var fnt=s(dD);tyo=r(fnt,"YosoForMaskedLM"),fnt.forEach(t),ayo=r($Le," (YOSO model)"),$Le.forEach(t),H.forEach(t),nyo=i(aa),s1=n(aa,"P",{});var kLe=s(s1);syo=r(kLe,"The model is set in evaluation mode by default using "),cce=n(kLe,"CODE",{});var mnt=s(cce);lyo=r(mnt,"model.eval()"),mnt.forEach(t),iyo=r(kLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(kLe,"CODE",{});var gnt=s(fce);dyo=r(gnt,"model.train()"),gnt.forEach(t),kLe.forEach(t),cyo=i(aa),T(l1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),iqe=i(f),Ii=n(f,"H2",{class:!0});var mje=s(Ii);i1=n(mje,"A",{id:!0,class:!0,href:!0});var hnt=s(i1);mce=n(hnt,"SPAN",{});var pnt=s(mce);T(ty.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),fyo=i(mje),gce=n(mje,"SPAN",{});var _nt=s(gce);myo=r(_nt,"AutoModelForSeq2SeqLM"),_nt.forEach(t),mje.forEach(t),dqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(ay.$$.fragment,Xs),gyo=i(Xs),qi=n(Xs,"P",{});var VK=s(qi);hyo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cD=n(VK,"A",{href:!0});var unt=s(cD);pyo=r(unt,"from_pretrained()"),unt.forEach(t),_yo=r(VK," class method or the "),fD=n(VK,"A",{href:!0});var bnt=s(fD);uyo=r(bnt,"from_config()"),bnt.forEach(t),byo=r(VK,` class
method.`),VK.forEach(t),vyo=i(Xs),ny=n(Xs,"P",{});var gje=s(ny);Fyo=r(gje,"This class cannot be instantiated directly using "),hce=n(gje,"CODE",{});var vnt=s(hce);Tyo=r(vnt,"__init__()"),vnt.forEach(t),Myo=r(gje," (throws an error)."),gje.forEach(t),Eyo=i(Xs),lt=n(Xs,"DIV",{class:!0});var E0=s(lt);T(sy.$$.fragment,E0),Cyo=i(E0),pce=n(E0,"P",{});var Fnt=s(pce);wyo=r(Fnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fnt.forEach(t),Ayo=i(E0),Ni=n(E0,"P",{});var XK=s(Ni);yyo=r(XK,`Note:
Loading a model from its configuration file does `),_ce=n(XK,"STRONG",{});var Tnt=s(_ce);Lyo=r(Tnt,"not"),Tnt.forEach(t),xyo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(XK,"A",{href:!0});var Mnt=s(mD);$yo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),kyo=r(XK," to load the model weights."),XK.forEach(t),Syo=i(E0),T(d1.$$.fragment,E0),E0.forEach(t),Ryo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(ly.$$.fragment,na),Pyo=i(na),uce=n(na,"P",{});var Ent=s(uce);Byo=r(Ent,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ent.forEach(t),Iyo=i(na),Sa=n(na,"P",{});var C0=s(Sa);qyo=r(C0,"The model class to instantiate is selected based on the "),bce=n(C0,"CODE",{});var Cnt=s(bce);Nyo=r(Cnt,"model_type"),Cnt.forEach(t),jyo=r(C0,` property of the config object (either
passed as an argument or loaded from `),vce=n(C0,"CODE",{});var wnt=s(vce);Dyo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),Gyo=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(C0,"CODE",{});var Ant=s(Fce);Oyo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),Vyo=r(C0,":"),C0.forEach(t),Xyo=i(na),_e=n(na,"UL",{});var ve=s(_e);c1=n(ve,"LI",{});var SLe=s(c1);Tce=n(SLe,"STRONG",{});var ynt=s(Tce);zyo=r(ynt,"bart"),ynt.forEach(t),Wyo=r(SLe," \u2014 "),gD=n(SLe,"A",{href:!0});var Lnt=s(gD);Qyo=r(Lnt,"BartForConditionalGeneration"),Lnt.forEach(t),Hyo=r(SLe," (BART model)"),SLe.forEach(t),Uyo=i(ve),f1=n(ve,"LI",{});var RLe=s(f1);Mce=n(RLe,"STRONG",{});var xnt=s(Mce);Jyo=r(xnt,"bigbird_pegasus"),xnt.forEach(t),Yyo=r(RLe," \u2014 "),hD=n(RLe,"A",{href:!0});var $nt=s(hD);Kyo=r($nt,"BigBirdPegasusForConditionalGeneration"),$nt.forEach(t),Zyo=r(RLe," (BigBirdPegasus model)"),RLe.forEach(t),eLo=i(ve),m1=n(ve,"LI",{});var PLe=s(m1);Ece=n(PLe,"STRONG",{});var knt=s(Ece);oLo=r(knt,"blenderbot"),knt.forEach(t),rLo=r(PLe," \u2014 "),pD=n(PLe,"A",{href:!0});var Snt=s(pD);tLo=r(Snt,"BlenderbotForConditionalGeneration"),Snt.forEach(t),aLo=r(PLe," (Blenderbot model)"),PLe.forEach(t),nLo=i(ve),g1=n(ve,"LI",{});var BLe=s(g1);Cce=n(BLe,"STRONG",{});var Rnt=s(Cce);sLo=r(Rnt,"blenderbot-small"),Rnt.forEach(t),lLo=r(BLe," \u2014 "),_D=n(BLe,"A",{href:!0});var Pnt=s(_D);iLo=r(Pnt,"BlenderbotSmallForConditionalGeneration"),Pnt.forEach(t),dLo=r(BLe," (BlenderbotSmall model)"),BLe.forEach(t),cLo=i(ve),h1=n(ve,"LI",{});var ILe=s(h1);wce=n(ILe,"STRONG",{});var Bnt=s(wce);fLo=r(Bnt,"encoder-decoder"),Bnt.forEach(t),mLo=r(ILe," \u2014 "),uD=n(ILe,"A",{href:!0});var Int=s(uD);gLo=r(Int,"EncoderDecoderModel"),Int.forEach(t),hLo=r(ILe," (Encoder decoder model)"),ILe.forEach(t),pLo=i(ve),p1=n(ve,"LI",{});var qLe=s(p1);Ace=n(qLe,"STRONG",{});var qnt=s(Ace);_Lo=r(qnt,"fsmt"),qnt.forEach(t),uLo=r(qLe," \u2014 "),bD=n(qLe,"A",{href:!0});var Nnt=s(bD);bLo=r(Nnt,"FSMTForConditionalGeneration"),Nnt.forEach(t),vLo=r(qLe," (FairSeq Machine-Translation model)"),qLe.forEach(t),FLo=i(ve),_1=n(ve,"LI",{});var NLe=s(_1);yce=n(NLe,"STRONG",{});var jnt=s(yce);TLo=r(jnt,"led"),jnt.forEach(t),MLo=r(NLe," \u2014 "),vD=n(NLe,"A",{href:!0});var Dnt=s(vD);ELo=r(Dnt,"LEDForConditionalGeneration"),Dnt.forEach(t),CLo=r(NLe," (LED model)"),NLe.forEach(t),wLo=i(ve),u1=n(ve,"LI",{});var jLe=s(u1);Lce=n(jLe,"STRONG",{});var Gnt=s(Lce);ALo=r(Gnt,"m2m_100"),Gnt.forEach(t),yLo=r(jLe," \u2014 "),FD=n(jLe,"A",{href:!0});var Ont=s(FD);LLo=r(Ont,"M2M100ForConditionalGeneration"),Ont.forEach(t),xLo=r(jLe," (M2M100 model)"),jLe.forEach(t),$Lo=i(ve),b1=n(ve,"LI",{});var DLe=s(b1);xce=n(DLe,"STRONG",{});var Vnt=s(xce);kLo=r(Vnt,"marian"),Vnt.forEach(t),SLo=r(DLe," \u2014 "),TD=n(DLe,"A",{href:!0});var Xnt=s(TD);RLo=r(Xnt,"MarianMTModel"),Xnt.forEach(t),PLo=r(DLe," (Marian model)"),DLe.forEach(t),BLo=i(ve),v1=n(ve,"LI",{});var GLe=s(v1);$ce=n(GLe,"STRONG",{});var znt=s($ce);ILo=r(znt,"mbart"),znt.forEach(t),qLo=r(GLe," \u2014 "),MD=n(GLe,"A",{href:!0});var Wnt=s(MD);NLo=r(Wnt,"MBartForConditionalGeneration"),Wnt.forEach(t),jLo=r(GLe," (mBART model)"),GLe.forEach(t),DLo=i(ve),F1=n(ve,"LI",{});var OLe=s(F1);kce=n(OLe,"STRONG",{});var Qnt=s(kce);GLo=r(Qnt,"mt5"),Qnt.forEach(t),OLo=r(OLe," \u2014 "),ED=n(OLe,"A",{href:!0});var Hnt=s(ED);VLo=r(Hnt,"MT5ForConditionalGeneration"),Hnt.forEach(t),XLo=r(OLe," (mT5 model)"),OLe.forEach(t),zLo=i(ve),T1=n(ve,"LI",{});var VLe=s(T1);Sce=n(VLe,"STRONG",{});var Unt=s(Sce);WLo=r(Unt,"pegasus"),Unt.forEach(t),QLo=r(VLe," \u2014 "),CD=n(VLe,"A",{href:!0});var Jnt=s(CD);HLo=r(Jnt,"PegasusForConditionalGeneration"),Jnt.forEach(t),ULo=r(VLe," (Pegasus model)"),VLe.forEach(t),JLo=i(ve),M1=n(ve,"LI",{});var XLe=s(M1);Rce=n(XLe,"STRONG",{});var Ynt=s(Rce);YLo=r(Ynt,"plbart"),Ynt.forEach(t),KLo=r(XLe," \u2014 "),wD=n(XLe,"A",{href:!0});var Knt=s(wD);ZLo=r(Knt,"PLBartForConditionalGeneration"),Knt.forEach(t),e8o=r(XLe," (PLBart model)"),XLe.forEach(t),o8o=i(ve),E1=n(ve,"LI",{});var zLe=s(E1);Pce=n(zLe,"STRONG",{});var Znt=s(Pce);r8o=r(Znt,"prophetnet"),Znt.forEach(t),t8o=r(zLe," \u2014 "),AD=n(zLe,"A",{href:!0});var est=s(AD);a8o=r(est,"ProphetNetForConditionalGeneration"),est.forEach(t),n8o=r(zLe," (ProphetNet model)"),zLe.forEach(t),s8o=i(ve),C1=n(ve,"LI",{});var WLe=s(C1);Bce=n(WLe,"STRONG",{});var ost=s(Bce);l8o=r(ost,"t5"),ost.forEach(t),i8o=r(WLe," \u2014 "),yD=n(WLe,"A",{href:!0});var rst=s(yD);d8o=r(rst,"T5ForConditionalGeneration"),rst.forEach(t),c8o=r(WLe," (T5 model)"),WLe.forEach(t),f8o=i(ve),w1=n(ve,"LI",{});var QLe=s(w1);Ice=n(QLe,"STRONG",{});var tst=s(Ice);m8o=r(tst,"xlm-prophetnet"),tst.forEach(t),g8o=r(QLe," \u2014 "),LD=n(QLe,"A",{href:!0});var ast=s(LD);h8o=r(ast,"XLMProphetNetForConditionalGeneration"),ast.forEach(t),p8o=r(QLe," (XLMProphetNet model)"),QLe.forEach(t),ve.forEach(t),_8o=i(na),A1=n(na,"P",{});var HLe=s(A1);u8o=r(HLe,"The model is set in evaluation mode by default using "),qce=n(HLe,"CODE",{});var nst=s(qce);b8o=r(nst,"model.eval()"),nst.forEach(t),v8o=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(HLe,"CODE",{});var sst=s(Nce);F8o=r(sst,"model.train()"),sst.forEach(t),HLe.forEach(t),T8o=i(na),T(y1.$$.fragment,na),na.forEach(t),Xs.forEach(t),cqe=i(f),ji=n(f,"H2",{class:!0});var hje=s(ji);L1=n(hje,"A",{id:!0,class:!0,href:!0});var lst=s(L1);jce=n(lst,"SPAN",{});var ist=s(jce);T(iy.$$.fragment,ist),ist.forEach(t),lst.forEach(t),M8o=i(hje),Dce=n(hje,"SPAN",{});var dst=s(Dce);E8o=r(dst,"AutoModelForSequenceClassification"),dst.forEach(t),hje.forEach(t),fqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(dy.$$.fragment,zs),C8o=i(zs),Di=n(zs,"P",{});var zK=s(Di);w8o=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xD=n(zK,"A",{href:!0});var cst=s(xD);A8o=r(cst,"from_pretrained()"),cst.forEach(t),y8o=r(zK," class method or the "),$D=n(zK,"A",{href:!0});var fst=s($D);L8o=r(fst,"from_config()"),fst.forEach(t),x8o=r(zK,` class
method.`),zK.forEach(t),$8o=i(zs),cy=n(zs,"P",{});var pje=s(cy);k8o=r(pje,"This class cannot be instantiated directly using "),Gce=n(pje,"CODE",{});var mst=s(Gce);S8o=r(mst,"__init__()"),mst.forEach(t),R8o=r(pje," (throws an error)."),pje.forEach(t),P8o=i(zs),it=n(zs,"DIV",{class:!0});var w0=s(it);T(fy.$$.fragment,w0),B8o=i(w0),Oce=n(w0,"P",{});var gst=s(Oce);I8o=r(gst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gst.forEach(t),q8o=i(w0),Gi=n(w0,"P",{});var WK=s(Gi);N8o=r(WK,`Note:
Loading a model from its configuration file does `),Vce=n(WK,"STRONG",{});var hst=s(Vce);j8o=r(hst,"not"),hst.forEach(t),D8o=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=n(WK,"A",{href:!0});var pst=s(kD);G8o=r(pst,"from_pretrained()"),pst.forEach(t),O8o=r(WK," to load the model weights."),WK.forEach(t),V8o=i(w0),T(x1.$$.fragment,w0),w0.forEach(t),X8o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(my.$$.fragment,sa),z8o=i(sa),Xce=n(sa,"P",{});var _st=s(Xce);W8o=r(_st,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_st.forEach(t),Q8o=i(sa),Ra=n(sa,"P",{});var A0=s(Ra);H8o=r(A0,"The model class to instantiate is selected based on the "),zce=n(A0,"CODE",{});var ust=s(zce);U8o=r(ust,"model_type"),ust.forEach(t),J8o=r(A0,` property of the config object (either
passed as an argument or loaded from `),Wce=n(A0,"CODE",{});var bst=s(Wce);Y8o=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),K8o=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(A0,"CODE",{});var vst=s(Qce);Z8o=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),exo=r(A0,":"),A0.forEach(t),oxo=i(sa),q=n(sa,"UL",{});var j=s(q);$1=n(j,"LI",{});var ULe=s($1);Hce=n(ULe,"STRONG",{});var Fst=s(Hce);rxo=r(Fst,"albert"),Fst.forEach(t),txo=r(ULe," \u2014 "),SD=n(ULe,"A",{href:!0});var Tst=s(SD);axo=r(Tst,"AlbertForSequenceClassification"),Tst.forEach(t),nxo=r(ULe," (ALBERT model)"),ULe.forEach(t),sxo=i(j),k1=n(j,"LI",{});var JLe=s(k1);Uce=n(JLe,"STRONG",{});var Mst=s(Uce);lxo=r(Mst,"bart"),Mst.forEach(t),ixo=r(JLe," \u2014 "),RD=n(JLe,"A",{href:!0});var Est=s(RD);dxo=r(Est,"BartForSequenceClassification"),Est.forEach(t),cxo=r(JLe," (BART model)"),JLe.forEach(t),fxo=i(j),S1=n(j,"LI",{});var YLe=s(S1);Jce=n(YLe,"STRONG",{});var Cst=s(Jce);mxo=r(Cst,"bert"),Cst.forEach(t),gxo=r(YLe," \u2014 "),PD=n(YLe,"A",{href:!0});var wst=s(PD);hxo=r(wst,"BertForSequenceClassification"),wst.forEach(t),pxo=r(YLe," (BERT model)"),YLe.forEach(t),_xo=i(j),R1=n(j,"LI",{});var KLe=s(R1);Yce=n(KLe,"STRONG",{});var Ast=s(Yce);uxo=r(Ast,"big_bird"),Ast.forEach(t),bxo=r(KLe," \u2014 "),BD=n(KLe,"A",{href:!0});var yst=s(BD);vxo=r(yst,"BigBirdForSequenceClassification"),yst.forEach(t),Fxo=r(KLe," (BigBird model)"),KLe.forEach(t),Txo=i(j),P1=n(j,"LI",{});var ZLe=s(P1);Kce=n(ZLe,"STRONG",{});var Lst=s(Kce);Mxo=r(Lst,"bigbird_pegasus"),Lst.forEach(t),Exo=r(ZLe," \u2014 "),ID=n(ZLe,"A",{href:!0});var xst=s(ID);Cxo=r(xst,"BigBirdPegasusForSequenceClassification"),xst.forEach(t),wxo=r(ZLe," (BigBirdPegasus model)"),ZLe.forEach(t),Axo=i(j),B1=n(j,"LI",{});var e8e=s(B1);Zce=n(e8e,"STRONG",{});var $st=s(Zce);yxo=r($st,"camembert"),$st.forEach(t),Lxo=r(e8e," \u2014 "),qD=n(e8e,"A",{href:!0});var kst=s(qD);xxo=r(kst,"CamembertForSequenceClassification"),kst.forEach(t),$xo=r(e8e," (CamemBERT model)"),e8e.forEach(t),kxo=i(j),I1=n(j,"LI",{});var o8e=s(I1);efe=n(o8e,"STRONG",{});var Sst=s(efe);Sxo=r(Sst,"canine"),Sst.forEach(t),Rxo=r(o8e," \u2014 "),ND=n(o8e,"A",{href:!0});var Rst=s(ND);Pxo=r(Rst,"CanineForSequenceClassification"),Rst.forEach(t),Bxo=r(o8e," (Canine model)"),o8e.forEach(t),Ixo=i(j),q1=n(j,"LI",{});var r8e=s(q1);ofe=n(r8e,"STRONG",{});var Pst=s(ofe);qxo=r(Pst,"convbert"),Pst.forEach(t),Nxo=r(r8e," \u2014 "),jD=n(r8e,"A",{href:!0});var Bst=s(jD);jxo=r(Bst,"ConvBertForSequenceClassification"),Bst.forEach(t),Dxo=r(r8e," (ConvBERT model)"),r8e.forEach(t),Gxo=i(j),N1=n(j,"LI",{});var t8e=s(N1);rfe=n(t8e,"STRONG",{});var Ist=s(rfe);Oxo=r(Ist,"ctrl"),Ist.forEach(t),Vxo=r(t8e," \u2014 "),DD=n(t8e,"A",{href:!0});var qst=s(DD);Xxo=r(qst,"CTRLForSequenceClassification"),qst.forEach(t),zxo=r(t8e," (CTRL model)"),t8e.forEach(t),Wxo=i(j),j1=n(j,"LI",{});var a8e=s(j1);tfe=n(a8e,"STRONG",{});var Nst=s(tfe);Qxo=r(Nst,"data2vec-text"),Nst.forEach(t),Hxo=r(a8e," \u2014 "),GD=n(a8e,"A",{href:!0});var jst=s(GD);Uxo=r(jst,"Data2VecTextForSequenceClassification"),jst.forEach(t),Jxo=r(a8e," (Data2VecText model)"),a8e.forEach(t),Yxo=i(j),D1=n(j,"LI",{});var n8e=s(D1);afe=n(n8e,"STRONG",{});var Dst=s(afe);Kxo=r(Dst,"deberta"),Dst.forEach(t),Zxo=r(n8e," \u2014 "),OD=n(n8e,"A",{href:!0});var Gst=s(OD);e9o=r(Gst,"DebertaForSequenceClassification"),Gst.forEach(t),o9o=r(n8e," (DeBERTa model)"),n8e.forEach(t),r9o=i(j),G1=n(j,"LI",{});var s8e=s(G1);nfe=n(s8e,"STRONG",{});var Ost=s(nfe);t9o=r(Ost,"deberta-v2"),Ost.forEach(t),a9o=r(s8e," \u2014 "),VD=n(s8e,"A",{href:!0});var Vst=s(VD);n9o=r(Vst,"DebertaV2ForSequenceClassification"),Vst.forEach(t),s9o=r(s8e," (DeBERTa-v2 model)"),s8e.forEach(t),l9o=i(j),O1=n(j,"LI",{});var l8e=s(O1);sfe=n(l8e,"STRONG",{});var Xst=s(sfe);i9o=r(Xst,"distilbert"),Xst.forEach(t),d9o=r(l8e," \u2014 "),XD=n(l8e,"A",{href:!0});var zst=s(XD);c9o=r(zst,"DistilBertForSequenceClassification"),zst.forEach(t),f9o=r(l8e," (DistilBERT model)"),l8e.forEach(t),m9o=i(j),V1=n(j,"LI",{});var i8e=s(V1);lfe=n(i8e,"STRONG",{});var Wst=s(lfe);g9o=r(Wst,"electra"),Wst.forEach(t),h9o=r(i8e," \u2014 "),zD=n(i8e,"A",{href:!0});var Qst=s(zD);p9o=r(Qst,"ElectraForSequenceClassification"),Qst.forEach(t),_9o=r(i8e," (ELECTRA model)"),i8e.forEach(t),u9o=i(j),X1=n(j,"LI",{});var d8e=s(X1);ife=n(d8e,"STRONG",{});var Hst=s(ife);b9o=r(Hst,"flaubert"),Hst.forEach(t),v9o=r(d8e," \u2014 "),WD=n(d8e,"A",{href:!0});var Ust=s(WD);F9o=r(Ust,"FlaubertForSequenceClassification"),Ust.forEach(t),T9o=r(d8e," (FlauBERT model)"),d8e.forEach(t),M9o=i(j),z1=n(j,"LI",{});var c8e=s(z1);dfe=n(c8e,"STRONG",{});var Jst=s(dfe);E9o=r(Jst,"fnet"),Jst.forEach(t),C9o=r(c8e," \u2014 "),QD=n(c8e,"A",{href:!0});var Yst=s(QD);w9o=r(Yst,"FNetForSequenceClassification"),Yst.forEach(t),A9o=r(c8e," (FNet model)"),c8e.forEach(t),y9o=i(j),W1=n(j,"LI",{});var f8e=s(W1);cfe=n(f8e,"STRONG",{});var Kst=s(cfe);L9o=r(Kst,"funnel"),Kst.forEach(t),x9o=r(f8e," \u2014 "),HD=n(f8e,"A",{href:!0});var Zst=s(HD);$9o=r(Zst,"FunnelForSequenceClassification"),Zst.forEach(t),k9o=r(f8e," (Funnel Transformer model)"),f8e.forEach(t),S9o=i(j),Q1=n(j,"LI",{});var m8e=s(Q1);ffe=n(m8e,"STRONG",{});var elt=s(ffe);R9o=r(elt,"gpt2"),elt.forEach(t),P9o=r(m8e," \u2014 "),UD=n(m8e,"A",{href:!0});var olt=s(UD);B9o=r(olt,"GPT2ForSequenceClassification"),olt.forEach(t),I9o=r(m8e," (OpenAI GPT-2 model)"),m8e.forEach(t),q9o=i(j),H1=n(j,"LI",{});var g8e=s(H1);mfe=n(g8e,"STRONG",{});var rlt=s(mfe);N9o=r(rlt,"gpt_neo"),rlt.forEach(t),j9o=r(g8e," \u2014 "),JD=n(g8e,"A",{href:!0});var tlt=s(JD);D9o=r(tlt,"GPTNeoForSequenceClassification"),tlt.forEach(t),G9o=r(g8e," (GPT Neo model)"),g8e.forEach(t),O9o=i(j),U1=n(j,"LI",{});var h8e=s(U1);gfe=n(h8e,"STRONG",{});var alt=s(gfe);V9o=r(alt,"gptj"),alt.forEach(t),X9o=r(h8e," \u2014 "),YD=n(h8e,"A",{href:!0});var nlt=s(YD);z9o=r(nlt,"GPTJForSequenceClassification"),nlt.forEach(t),W9o=r(h8e," (GPT-J model)"),h8e.forEach(t),Q9o=i(j),J1=n(j,"LI",{});var p8e=s(J1);hfe=n(p8e,"STRONG",{});var slt=s(hfe);H9o=r(slt,"ibert"),slt.forEach(t),U9o=r(p8e," \u2014 "),KD=n(p8e,"A",{href:!0});var llt=s(KD);J9o=r(llt,"IBertForSequenceClassification"),llt.forEach(t),Y9o=r(p8e," (I-BERT model)"),p8e.forEach(t),K9o=i(j),Y1=n(j,"LI",{});var _8e=s(Y1);pfe=n(_8e,"STRONG",{});var ilt=s(pfe);Z9o=r(ilt,"layoutlm"),ilt.forEach(t),e$o=r(_8e," \u2014 "),ZD=n(_8e,"A",{href:!0});var dlt=s(ZD);o$o=r(dlt,"LayoutLMForSequenceClassification"),dlt.forEach(t),r$o=r(_8e," (LayoutLM model)"),_8e.forEach(t),t$o=i(j),K1=n(j,"LI",{});var u8e=s(K1);_fe=n(u8e,"STRONG",{});var clt=s(_fe);a$o=r(clt,"layoutlmv2"),clt.forEach(t),n$o=r(u8e," \u2014 "),eG=n(u8e,"A",{href:!0});var flt=s(eG);s$o=r(flt,"LayoutLMv2ForSequenceClassification"),flt.forEach(t),l$o=r(u8e," (LayoutLMv2 model)"),u8e.forEach(t),i$o=i(j),Z1=n(j,"LI",{});var b8e=s(Z1);ufe=n(b8e,"STRONG",{});var mlt=s(ufe);d$o=r(mlt,"led"),mlt.forEach(t),c$o=r(b8e," \u2014 "),oG=n(b8e,"A",{href:!0});var glt=s(oG);f$o=r(glt,"LEDForSequenceClassification"),glt.forEach(t),m$o=r(b8e," (LED model)"),b8e.forEach(t),g$o=i(j),eb=n(j,"LI",{});var v8e=s(eb);bfe=n(v8e,"STRONG",{});var hlt=s(bfe);h$o=r(hlt,"longformer"),hlt.forEach(t),p$o=r(v8e," \u2014 "),rG=n(v8e,"A",{href:!0});var plt=s(rG);_$o=r(plt,"LongformerForSequenceClassification"),plt.forEach(t),u$o=r(v8e," (Longformer model)"),v8e.forEach(t),b$o=i(j),ob=n(j,"LI",{});var F8e=s(ob);vfe=n(F8e,"STRONG",{});var _lt=s(vfe);v$o=r(_lt,"mbart"),_lt.forEach(t),F$o=r(F8e," \u2014 "),tG=n(F8e,"A",{href:!0});var ult=s(tG);T$o=r(ult,"MBartForSequenceClassification"),ult.forEach(t),M$o=r(F8e," (mBART model)"),F8e.forEach(t),E$o=i(j),rb=n(j,"LI",{});var T8e=s(rb);Ffe=n(T8e,"STRONG",{});var blt=s(Ffe);C$o=r(blt,"megatron-bert"),blt.forEach(t),w$o=r(T8e," \u2014 "),aG=n(T8e,"A",{href:!0});var vlt=s(aG);A$o=r(vlt,"MegatronBertForSequenceClassification"),vlt.forEach(t),y$o=r(T8e," (MegatronBert model)"),T8e.forEach(t),L$o=i(j),tb=n(j,"LI",{});var M8e=s(tb);Tfe=n(M8e,"STRONG",{});var Flt=s(Tfe);x$o=r(Flt,"mobilebert"),Flt.forEach(t),$$o=r(M8e," \u2014 "),nG=n(M8e,"A",{href:!0});var Tlt=s(nG);k$o=r(Tlt,"MobileBertForSequenceClassification"),Tlt.forEach(t),S$o=r(M8e," (MobileBERT model)"),M8e.forEach(t),R$o=i(j),ab=n(j,"LI",{});var E8e=s(ab);Mfe=n(E8e,"STRONG",{});var Mlt=s(Mfe);P$o=r(Mlt,"mpnet"),Mlt.forEach(t),B$o=r(E8e," \u2014 "),sG=n(E8e,"A",{href:!0});var Elt=s(sG);I$o=r(Elt,"MPNetForSequenceClassification"),Elt.forEach(t),q$o=r(E8e," (MPNet model)"),E8e.forEach(t),N$o=i(j),nb=n(j,"LI",{});var C8e=s(nb);Efe=n(C8e,"STRONG",{});var Clt=s(Efe);j$o=r(Clt,"nystromformer"),Clt.forEach(t),D$o=r(C8e," \u2014 "),lG=n(C8e,"A",{href:!0});var wlt=s(lG);G$o=r(wlt,"NystromformerForSequenceClassification"),wlt.forEach(t),O$o=r(C8e," (Nystromformer model)"),C8e.forEach(t),V$o=i(j),sb=n(j,"LI",{});var w8e=s(sb);Cfe=n(w8e,"STRONG",{});var Alt=s(Cfe);X$o=r(Alt,"openai-gpt"),Alt.forEach(t),z$o=r(w8e," \u2014 "),iG=n(w8e,"A",{href:!0});var ylt=s(iG);W$o=r(ylt,"OpenAIGPTForSequenceClassification"),ylt.forEach(t),Q$o=r(w8e," (OpenAI GPT model)"),w8e.forEach(t),H$o=i(j),lb=n(j,"LI",{});var A8e=s(lb);wfe=n(A8e,"STRONG",{});var Llt=s(wfe);U$o=r(Llt,"perceiver"),Llt.forEach(t),J$o=r(A8e," \u2014 "),dG=n(A8e,"A",{href:!0});var xlt=s(dG);Y$o=r(xlt,"PerceiverForSequenceClassification"),xlt.forEach(t),K$o=r(A8e," (Perceiver model)"),A8e.forEach(t),Z$o=i(j),ib=n(j,"LI",{});var y8e=s(ib);Afe=n(y8e,"STRONG",{});var $lt=s(Afe);eko=r($lt,"plbart"),$lt.forEach(t),oko=r(y8e," \u2014 "),cG=n(y8e,"A",{href:!0});var klt=s(cG);rko=r(klt,"PLBartForSequenceClassification"),klt.forEach(t),tko=r(y8e," (PLBart model)"),y8e.forEach(t),ako=i(j),db=n(j,"LI",{});var L8e=s(db);yfe=n(L8e,"STRONG",{});var Slt=s(yfe);nko=r(Slt,"qdqbert"),Slt.forEach(t),sko=r(L8e," \u2014 "),fG=n(L8e,"A",{href:!0});var Rlt=s(fG);lko=r(Rlt,"QDQBertForSequenceClassification"),Rlt.forEach(t),iko=r(L8e," (QDQBert model)"),L8e.forEach(t),dko=i(j),cb=n(j,"LI",{});var x8e=s(cb);Lfe=n(x8e,"STRONG",{});var Plt=s(Lfe);cko=r(Plt,"reformer"),Plt.forEach(t),fko=r(x8e," \u2014 "),mG=n(x8e,"A",{href:!0});var Blt=s(mG);mko=r(Blt,"ReformerForSequenceClassification"),Blt.forEach(t),gko=r(x8e," (Reformer model)"),x8e.forEach(t),hko=i(j),fb=n(j,"LI",{});var $8e=s(fb);xfe=n($8e,"STRONG",{});var Ilt=s(xfe);pko=r(Ilt,"rembert"),Ilt.forEach(t),_ko=r($8e," \u2014 "),gG=n($8e,"A",{href:!0});var qlt=s(gG);uko=r(qlt,"RemBertForSequenceClassification"),qlt.forEach(t),bko=r($8e," (RemBERT model)"),$8e.forEach(t),vko=i(j),mb=n(j,"LI",{});var k8e=s(mb);$fe=n(k8e,"STRONG",{});var Nlt=s($fe);Fko=r(Nlt,"roberta"),Nlt.forEach(t),Tko=r(k8e," \u2014 "),hG=n(k8e,"A",{href:!0});var jlt=s(hG);Mko=r(jlt,"RobertaForSequenceClassification"),jlt.forEach(t),Eko=r(k8e," (RoBERTa model)"),k8e.forEach(t),Cko=i(j),gb=n(j,"LI",{});var S8e=s(gb);kfe=n(S8e,"STRONG",{});var Dlt=s(kfe);wko=r(Dlt,"roformer"),Dlt.forEach(t),Ako=r(S8e," \u2014 "),pG=n(S8e,"A",{href:!0});var Glt=s(pG);yko=r(Glt,"RoFormerForSequenceClassification"),Glt.forEach(t),Lko=r(S8e," (RoFormer model)"),S8e.forEach(t),xko=i(j),hb=n(j,"LI",{});var R8e=s(hb);Sfe=n(R8e,"STRONG",{});var Olt=s(Sfe);$ko=r(Olt,"squeezebert"),Olt.forEach(t),kko=r(R8e," \u2014 "),_G=n(R8e,"A",{href:!0});var Vlt=s(_G);Sko=r(Vlt,"SqueezeBertForSequenceClassification"),Vlt.forEach(t),Rko=r(R8e," (SqueezeBERT model)"),R8e.forEach(t),Pko=i(j),pb=n(j,"LI",{});var P8e=s(pb);Rfe=n(P8e,"STRONG",{});var Xlt=s(Rfe);Bko=r(Xlt,"tapas"),Xlt.forEach(t),Iko=r(P8e," \u2014 "),uG=n(P8e,"A",{href:!0});var zlt=s(uG);qko=r(zlt,"TapasForSequenceClassification"),zlt.forEach(t),Nko=r(P8e," (TAPAS model)"),P8e.forEach(t),jko=i(j),_b=n(j,"LI",{});var B8e=s(_b);Pfe=n(B8e,"STRONG",{});var Wlt=s(Pfe);Dko=r(Wlt,"transfo-xl"),Wlt.forEach(t),Gko=r(B8e," \u2014 "),bG=n(B8e,"A",{href:!0});var Qlt=s(bG);Oko=r(Qlt,"TransfoXLForSequenceClassification"),Qlt.forEach(t),Vko=r(B8e," (Transformer-XL model)"),B8e.forEach(t),Xko=i(j),ub=n(j,"LI",{});var I8e=s(ub);Bfe=n(I8e,"STRONG",{});var Hlt=s(Bfe);zko=r(Hlt,"xlm"),Hlt.forEach(t),Wko=r(I8e," \u2014 "),vG=n(I8e,"A",{href:!0});var Ult=s(vG);Qko=r(Ult,"XLMForSequenceClassification"),Ult.forEach(t),Hko=r(I8e," (XLM model)"),I8e.forEach(t),Uko=i(j),bb=n(j,"LI",{});var q8e=s(bb);Ife=n(q8e,"STRONG",{});var Jlt=s(Ife);Jko=r(Jlt,"xlm-roberta"),Jlt.forEach(t),Yko=r(q8e," \u2014 "),FG=n(q8e,"A",{href:!0});var Ylt=s(FG);Kko=r(Ylt,"XLMRobertaForSequenceClassification"),Ylt.forEach(t),Zko=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),eSo=i(j),vb=n(j,"LI",{});var N8e=s(vb);qfe=n(N8e,"STRONG",{});var Klt=s(qfe);oSo=r(Klt,"xlm-roberta-xl"),Klt.forEach(t),rSo=r(N8e," \u2014 "),TG=n(N8e,"A",{href:!0});var Zlt=s(TG);tSo=r(Zlt,"XLMRobertaXLForSequenceClassification"),Zlt.forEach(t),aSo=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),nSo=i(j),Fb=n(j,"LI",{});var j8e=s(Fb);Nfe=n(j8e,"STRONG",{});var eit=s(Nfe);sSo=r(eit,"xlnet"),eit.forEach(t),lSo=r(j8e," \u2014 "),MG=n(j8e,"A",{href:!0});var oit=s(MG);iSo=r(oit,"XLNetForSequenceClassification"),oit.forEach(t),dSo=r(j8e," (XLNet model)"),j8e.forEach(t),cSo=i(j),Tb=n(j,"LI",{});var D8e=s(Tb);jfe=n(D8e,"STRONG",{});var rit=s(jfe);fSo=r(rit,"yoso"),rit.forEach(t),mSo=r(D8e," \u2014 "),EG=n(D8e,"A",{href:!0});var tit=s(EG);gSo=r(tit,"YosoForSequenceClassification"),tit.forEach(t),hSo=r(D8e," (YOSO model)"),D8e.forEach(t),j.forEach(t),pSo=i(sa),Mb=n(sa,"P",{});var G8e=s(Mb);_So=r(G8e,"The model is set in evaluation mode by default using "),Dfe=n(G8e,"CODE",{});var ait=s(Dfe);uSo=r(ait,"model.eval()"),ait.forEach(t),bSo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(G8e,"CODE",{});var nit=s(Gfe);vSo=r(nit,"model.train()"),nit.forEach(t),G8e.forEach(t),FSo=i(sa),T(Eb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),mqe=i(f),Oi=n(f,"H2",{class:!0});var _je=s(Oi);Cb=n(_je,"A",{id:!0,class:!0,href:!0});var sit=s(Cb);Ofe=n(sit,"SPAN",{});var lit=s(Ofe);T(gy.$$.fragment,lit),lit.forEach(t),sit.forEach(t),TSo=i(_je),Vfe=n(_je,"SPAN",{});var iit=s(Vfe);MSo=r(iit,"AutoModelForMultipleChoice"),iit.forEach(t),_je.forEach(t),gqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(hy.$$.fragment,Ws),ESo=i(Ws),Vi=n(Ws,"P",{});var QK=s(Vi);CSo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CG=n(QK,"A",{href:!0});var dit=s(CG);wSo=r(dit,"from_pretrained()"),dit.forEach(t),ASo=r(QK," class method or the "),wG=n(QK,"A",{href:!0});var cit=s(wG);ySo=r(cit,"from_config()"),cit.forEach(t),LSo=r(QK,` class
method.`),QK.forEach(t),xSo=i(Ws),py=n(Ws,"P",{});var uje=s(py);$So=r(uje,"This class cannot be instantiated directly using "),Xfe=n(uje,"CODE",{});var fit=s(Xfe);kSo=r(fit,"__init__()"),fit.forEach(t),SSo=r(uje," (throws an error)."),uje.forEach(t),RSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var y0=s(dt);T(_y.$$.fragment,y0),PSo=i(y0),zfe=n(y0,"P",{});var mit=s(zfe);BSo=r(mit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mit.forEach(t),ISo=i(y0),Xi=n(y0,"P",{});var HK=s(Xi);qSo=r(HK,`Note:
Loading a model from its configuration file does `),Wfe=n(HK,"STRONG",{});var git=s(Wfe);NSo=r(git,"not"),git.forEach(t),jSo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(HK,"A",{href:!0});var hit=s(AG);DSo=r(hit,"from_pretrained()"),hit.forEach(t),GSo=r(HK," to load the model weights."),HK.forEach(t),OSo=i(y0),T(wb.$$.fragment,y0),y0.forEach(t),VSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(uy.$$.fragment,la),XSo=i(la),Qfe=n(la,"P",{});var pit=s(Qfe);zSo=r(pit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pit.forEach(t),WSo=i(la),Pa=n(la,"P",{});var L0=s(Pa);QSo=r(L0,"The model class to instantiate is selected based on the "),Hfe=n(L0,"CODE",{});var _it=s(Hfe);HSo=r(_it,"model_type"),_it.forEach(t),USo=r(L0,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(L0,"CODE",{});var uit=s(Ufe);JSo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),YSo=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(L0,"CODE",{});var bit=s(Jfe);KSo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),ZSo=r(L0,":"),L0.forEach(t),eRo=i(la),Y=n(la,"UL",{});var K=s(Y);Ab=n(K,"LI",{});var O8e=s(Ab);Yfe=n(O8e,"STRONG",{});var vit=s(Yfe);oRo=r(vit,"albert"),vit.forEach(t),rRo=r(O8e," \u2014 "),yG=n(O8e,"A",{href:!0});var Fit=s(yG);tRo=r(Fit,"AlbertForMultipleChoice"),Fit.forEach(t),aRo=r(O8e," (ALBERT model)"),O8e.forEach(t),nRo=i(K),yb=n(K,"LI",{});var V8e=s(yb);Kfe=n(V8e,"STRONG",{});var Tit=s(Kfe);sRo=r(Tit,"bert"),Tit.forEach(t),lRo=r(V8e," \u2014 "),LG=n(V8e,"A",{href:!0});var Mit=s(LG);iRo=r(Mit,"BertForMultipleChoice"),Mit.forEach(t),dRo=r(V8e," (BERT model)"),V8e.forEach(t),cRo=i(K),Lb=n(K,"LI",{});var X8e=s(Lb);Zfe=n(X8e,"STRONG",{});var Eit=s(Zfe);fRo=r(Eit,"big_bird"),Eit.forEach(t),mRo=r(X8e," \u2014 "),xG=n(X8e,"A",{href:!0});var Cit=s(xG);gRo=r(Cit,"BigBirdForMultipleChoice"),Cit.forEach(t),hRo=r(X8e," (BigBird model)"),X8e.forEach(t),pRo=i(K),xb=n(K,"LI",{});var z8e=s(xb);eme=n(z8e,"STRONG",{});var wit=s(eme);_Ro=r(wit,"camembert"),wit.forEach(t),uRo=r(z8e," \u2014 "),$G=n(z8e,"A",{href:!0});var Ait=s($G);bRo=r(Ait,"CamembertForMultipleChoice"),Ait.forEach(t),vRo=r(z8e," (CamemBERT model)"),z8e.forEach(t),FRo=i(K),$b=n(K,"LI",{});var W8e=s($b);ome=n(W8e,"STRONG",{});var yit=s(ome);TRo=r(yit,"canine"),yit.forEach(t),MRo=r(W8e," \u2014 "),kG=n(W8e,"A",{href:!0});var Lit=s(kG);ERo=r(Lit,"CanineForMultipleChoice"),Lit.forEach(t),CRo=r(W8e," (Canine model)"),W8e.forEach(t),wRo=i(K),kb=n(K,"LI",{});var Q8e=s(kb);rme=n(Q8e,"STRONG",{});var xit=s(rme);ARo=r(xit,"convbert"),xit.forEach(t),yRo=r(Q8e," \u2014 "),SG=n(Q8e,"A",{href:!0});var $it=s(SG);LRo=r($it,"ConvBertForMultipleChoice"),$it.forEach(t),xRo=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),$Ro=i(K),Sb=n(K,"LI",{});var H8e=s(Sb);tme=n(H8e,"STRONG",{});var kit=s(tme);kRo=r(kit,"data2vec-text"),kit.forEach(t),SRo=r(H8e," \u2014 "),RG=n(H8e,"A",{href:!0});var Sit=s(RG);RRo=r(Sit,"Data2VecTextForMultipleChoice"),Sit.forEach(t),PRo=r(H8e," (Data2VecText model)"),H8e.forEach(t),BRo=i(K),Rb=n(K,"LI",{});var U8e=s(Rb);ame=n(U8e,"STRONG",{});var Rit=s(ame);IRo=r(Rit,"deberta-v2"),Rit.forEach(t),qRo=r(U8e," \u2014 "),PG=n(U8e,"A",{href:!0});var Pit=s(PG);NRo=r(Pit,"DebertaV2ForMultipleChoice"),Pit.forEach(t),jRo=r(U8e," (DeBERTa-v2 model)"),U8e.forEach(t),DRo=i(K),Pb=n(K,"LI",{});var J8e=s(Pb);nme=n(J8e,"STRONG",{});var Bit=s(nme);GRo=r(Bit,"distilbert"),Bit.forEach(t),ORo=r(J8e," \u2014 "),BG=n(J8e,"A",{href:!0});var Iit=s(BG);VRo=r(Iit,"DistilBertForMultipleChoice"),Iit.forEach(t),XRo=r(J8e," (DistilBERT model)"),J8e.forEach(t),zRo=i(K),Bb=n(K,"LI",{});var Y8e=s(Bb);sme=n(Y8e,"STRONG",{});var qit=s(sme);WRo=r(qit,"electra"),qit.forEach(t),QRo=r(Y8e," \u2014 "),IG=n(Y8e,"A",{href:!0});var Nit=s(IG);HRo=r(Nit,"ElectraForMultipleChoice"),Nit.forEach(t),URo=r(Y8e," (ELECTRA model)"),Y8e.forEach(t),JRo=i(K),Ib=n(K,"LI",{});var K8e=s(Ib);lme=n(K8e,"STRONG",{});var jit=s(lme);YRo=r(jit,"flaubert"),jit.forEach(t),KRo=r(K8e," \u2014 "),qG=n(K8e,"A",{href:!0});var Dit=s(qG);ZRo=r(Dit,"FlaubertForMultipleChoice"),Dit.forEach(t),ePo=r(K8e," (FlauBERT model)"),K8e.forEach(t),oPo=i(K),qb=n(K,"LI",{});var Z8e=s(qb);ime=n(Z8e,"STRONG",{});var Git=s(ime);rPo=r(Git,"fnet"),Git.forEach(t),tPo=r(Z8e," \u2014 "),NG=n(Z8e,"A",{href:!0});var Oit=s(NG);aPo=r(Oit,"FNetForMultipleChoice"),Oit.forEach(t),nPo=r(Z8e," (FNet model)"),Z8e.forEach(t),sPo=i(K),Nb=n(K,"LI",{});var exe=s(Nb);dme=n(exe,"STRONG",{});var Vit=s(dme);lPo=r(Vit,"funnel"),Vit.forEach(t),iPo=r(exe," \u2014 "),jG=n(exe,"A",{href:!0});var Xit=s(jG);dPo=r(Xit,"FunnelForMultipleChoice"),Xit.forEach(t),cPo=r(exe," (Funnel Transformer model)"),exe.forEach(t),fPo=i(K),jb=n(K,"LI",{});var oxe=s(jb);cme=n(oxe,"STRONG",{});var zit=s(cme);mPo=r(zit,"ibert"),zit.forEach(t),gPo=r(oxe," \u2014 "),DG=n(oxe,"A",{href:!0});var Wit=s(DG);hPo=r(Wit,"IBertForMultipleChoice"),Wit.forEach(t),pPo=r(oxe," (I-BERT model)"),oxe.forEach(t),_Po=i(K),Db=n(K,"LI",{});var rxe=s(Db);fme=n(rxe,"STRONG",{});var Qit=s(fme);uPo=r(Qit,"longformer"),Qit.forEach(t),bPo=r(rxe," \u2014 "),GG=n(rxe,"A",{href:!0});var Hit=s(GG);vPo=r(Hit,"LongformerForMultipleChoice"),Hit.forEach(t),FPo=r(rxe," (Longformer model)"),rxe.forEach(t),TPo=i(K),Gb=n(K,"LI",{});var txe=s(Gb);mme=n(txe,"STRONG",{});var Uit=s(mme);MPo=r(Uit,"megatron-bert"),Uit.forEach(t),EPo=r(txe," \u2014 "),OG=n(txe,"A",{href:!0});var Jit=s(OG);CPo=r(Jit,"MegatronBertForMultipleChoice"),Jit.forEach(t),wPo=r(txe," (MegatronBert model)"),txe.forEach(t),APo=i(K),Ob=n(K,"LI",{});var axe=s(Ob);gme=n(axe,"STRONG",{});var Yit=s(gme);yPo=r(Yit,"mobilebert"),Yit.forEach(t),LPo=r(axe," \u2014 "),VG=n(axe,"A",{href:!0});var Kit=s(VG);xPo=r(Kit,"MobileBertForMultipleChoice"),Kit.forEach(t),$Po=r(axe," (MobileBERT model)"),axe.forEach(t),kPo=i(K),Vb=n(K,"LI",{});var nxe=s(Vb);hme=n(nxe,"STRONG",{});var Zit=s(hme);SPo=r(Zit,"mpnet"),Zit.forEach(t),RPo=r(nxe," \u2014 "),XG=n(nxe,"A",{href:!0});var edt=s(XG);PPo=r(edt,"MPNetForMultipleChoice"),edt.forEach(t),BPo=r(nxe," (MPNet model)"),nxe.forEach(t),IPo=i(K),Xb=n(K,"LI",{});var sxe=s(Xb);pme=n(sxe,"STRONG",{});var odt=s(pme);qPo=r(odt,"nystromformer"),odt.forEach(t),NPo=r(sxe," \u2014 "),zG=n(sxe,"A",{href:!0});var rdt=s(zG);jPo=r(rdt,"NystromformerForMultipleChoice"),rdt.forEach(t),DPo=r(sxe," (Nystromformer model)"),sxe.forEach(t),GPo=i(K),zb=n(K,"LI",{});var lxe=s(zb);_me=n(lxe,"STRONG",{});var tdt=s(_me);OPo=r(tdt,"qdqbert"),tdt.forEach(t),VPo=r(lxe," \u2014 "),WG=n(lxe,"A",{href:!0});var adt=s(WG);XPo=r(adt,"QDQBertForMultipleChoice"),adt.forEach(t),zPo=r(lxe," (QDQBert model)"),lxe.forEach(t),WPo=i(K),Wb=n(K,"LI",{});var ixe=s(Wb);ume=n(ixe,"STRONG",{});var ndt=s(ume);QPo=r(ndt,"rembert"),ndt.forEach(t),HPo=r(ixe," \u2014 "),QG=n(ixe,"A",{href:!0});var sdt=s(QG);UPo=r(sdt,"RemBertForMultipleChoice"),sdt.forEach(t),JPo=r(ixe," (RemBERT model)"),ixe.forEach(t),YPo=i(K),Qb=n(K,"LI",{});var dxe=s(Qb);bme=n(dxe,"STRONG",{});var ldt=s(bme);KPo=r(ldt,"roberta"),ldt.forEach(t),ZPo=r(dxe," \u2014 "),HG=n(dxe,"A",{href:!0});var idt=s(HG);eBo=r(idt,"RobertaForMultipleChoice"),idt.forEach(t),oBo=r(dxe," (RoBERTa model)"),dxe.forEach(t),rBo=i(K),Hb=n(K,"LI",{});var cxe=s(Hb);vme=n(cxe,"STRONG",{});var ddt=s(vme);tBo=r(ddt,"roformer"),ddt.forEach(t),aBo=r(cxe," \u2014 "),UG=n(cxe,"A",{href:!0});var cdt=s(UG);nBo=r(cdt,"RoFormerForMultipleChoice"),cdt.forEach(t),sBo=r(cxe," (RoFormer model)"),cxe.forEach(t),lBo=i(K),Ub=n(K,"LI",{});var fxe=s(Ub);Fme=n(fxe,"STRONG",{});var fdt=s(Fme);iBo=r(fdt,"squeezebert"),fdt.forEach(t),dBo=r(fxe," \u2014 "),JG=n(fxe,"A",{href:!0});var mdt=s(JG);cBo=r(mdt,"SqueezeBertForMultipleChoice"),mdt.forEach(t),fBo=r(fxe," (SqueezeBERT model)"),fxe.forEach(t),mBo=i(K),Jb=n(K,"LI",{});var mxe=s(Jb);Tme=n(mxe,"STRONG",{});var gdt=s(Tme);gBo=r(gdt,"xlm"),gdt.forEach(t),hBo=r(mxe," \u2014 "),YG=n(mxe,"A",{href:!0});var hdt=s(YG);pBo=r(hdt,"XLMForMultipleChoice"),hdt.forEach(t),_Bo=r(mxe," (XLM model)"),mxe.forEach(t),uBo=i(K),Yb=n(K,"LI",{});var gxe=s(Yb);Mme=n(gxe,"STRONG",{});var pdt=s(Mme);bBo=r(pdt,"xlm-roberta"),pdt.forEach(t),vBo=r(gxe," \u2014 "),KG=n(gxe,"A",{href:!0});var _dt=s(KG);FBo=r(_dt,"XLMRobertaForMultipleChoice"),_dt.forEach(t),TBo=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),MBo=i(K),Kb=n(K,"LI",{});var hxe=s(Kb);Eme=n(hxe,"STRONG",{});var udt=s(Eme);EBo=r(udt,"xlm-roberta-xl"),udt.forEach(t),CBo=r(hxe," \u2014 "),ZG=n(hxe,"A",{href:!0});var bdt=s(ZG);wBo=r(bdt,"XLMRobertaXLForMultipleChoice"),bdt.forEach(t),ABo=r(hxe," (XLM-RoBERTa-XL model)"),hxe.forEach(t),yBo=i(K),Zb=n(K,"LI",{});var pxe=s(Zb);Cme=n(pxe,"STRONG",{});var vdt=s(Cme);LBo=r(vdt,"xlnet"),vdt.forEach(t),xBo=r(pxe," \u2014 "),eO=n(pxe,"A",{href:!0});var Fdt=s(eO);$Bo=r(Fdt,"XLNetForMultipleChoice"),Fdt.forEach(t),kBo=r(pxe," (XLNet model)"),pxe.forEach(t),SBo=i(K),e5=n(K,"LI",{});var _xe=s(e5);wme=n(_xe,"STRONG",{});var Tdt=s(wme);RBo=r(Tdt,"yoso"),Tdt.forEach(t),PBo=r(_xe," \u2014 "),oO=n(_xe,"A",{href:!0});var Mdt=s(oO);BBo=r(Mdt,"YosoForMultipleChoice"),Mdt.forEach(t),IBo=r(_xe," (YOSO model)"),_xe.forEach(t),K.forEach(t),qBo=i(la),o5=n(la,"P",{});var uxe=s(o5);NBo=r(uxe,"The model is set in evaluation mode by default using "),Ame=n(uxe,"CODE",{});var Edt=s(Ame);jBo=r(Edt,"model.eval()"),Edt.forEach(t),DBo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(uxe,"CODE",{});var Cdt=s(yme);GBo=r(Cdt,"model.train()"),Cdt.forEach(t),uxe.forEach(t),OBo=i(la),T(r5.$$.fragment,la),la.forEach(t),Ws.forEach(t),hqe=i(f),zi=n(f,"H2",{class:!0});var bje=s(zi);t5=n(bje,"A",{id:!0,class:!0,href:!0});var wdt=s(t5);Lme=n(wdt,"SPAN",{});var Adt=s(Lme);T(by.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),VBo=i(bje),xme=n(bje,"SPAN",{});var ydt=s(xme);XBo=r(ydt,"AutoModelForNextSentencePrediction"),ydt.forEach(t),bje.forEach(t),pqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(vy.$$.fragment,Qs),zBo=i(Qs),Wi=n(Qs,"P",{});var UK=s(Wi);WBo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rO=n(UK,"A",{href:!0});var Ldt=s(rO);QBo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),HBo=r(UK," class method or the "),tO=n(UK,"A",{href:!0});var xdt=s(tO);UBo=r(xdt,"from_config()"),xdt.forEach(t),JBo=r(UK,` class
method.`),UK.forEach(t),YBo=i(Qs),Fy=n(Qs,"P",{});var vje=s(Fy);KBo=r(vje,"This class cannot be instantiated directly using "),$me=n(vje,"CODE",{});var $dt=s($me);ZBo=r($dt,"__init__()"),$dt.forEach(t),eIo=r(vje," (throws an error)."),vje.forEach(t),oIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var x0=s(ct);T(Ty.$$.fragment,x0),rIo=i(x0),kme=n(x0,"P",{});var kdt=s(kme);tIo=r(kdt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kdt.forEach(t),aIo=i(x0),Qi=n(x0,"P",{});var JK=s(Qi);nIo=r(JK,`Note:
Loading a model from its configuration file does `),Sme=n(JK,"STRONG",{});var Sdt=s(Sme);sIo=r(Sdt,"not"),Sdt.forEach(t),lIo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(JK,"A",{href:!0});var Rdt=s(aO);iIo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),dIo=r(JK," to load the model weights."),JK.forEach(t),cIo=i(x0),T(a5.$$.fragment,x0),x0.forEach(t),fIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(My.$$.fragment,ia),mIo=i(ia),Rme=n(ia,"P",{});var Pdt=s(Rme);gIo=r(Pdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pdt.forEach(t),hIo=i(ia),Ba=n(ia,"P",{});var $0=s(Ba);pIo=r($0,"The model class to instantiate is selected based on the "),Pme=n($0,"CODE",{});var Bdt=s(Pme);_Io=r(Bdt,"model_type"),Bdt.forEach(t),uIo=r($0,` property of the config object (either
passed as an argument or loaded from `),Bme=n($0,"CODE",{});var Idt=s(Bme);bIo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),vIo=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n($0,"CODE",{});var qdt=s(Ime);FIo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),TIo=r($0,":"),$0.forEach(t),MIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);n5=n(Hs,"LI",{});var bxe=s(n5);qme=n(bxe,"STRONG",{});var Ndt=s(qme);EIo=r(Ndt,"bert"),Ndt.forEach(t),CIo=r(bxe," \u2014 "),nO=n(bxe,"A",{href:!0});var jdt=s(nO);wIo=r(jdt,"BertForNextSentencePrediction"),jdt.forEach(t),AIo=r(bxe," (BERT model)"),bxe.forEach(t),yIo=i(Hs),s5=n(Hs,"LI",{});var vxe=s(s5);Nme=n(vxe,"STRONG",{});var Ddt=s(Nme);LIo=r(Ddt,"fnet"),Ddt.forEach(t),xIo=r(vxe," \u2014 "),sO=n(vxe,"A",{href:!0});var Gdt=s(sO);$Io=r(Gdt,"FNetForNextSentencePrediction"),Gdt.forEach(t),kIo=r(vxe," (FNet model)"),vxe.forEach(t),SIo=i(Hs),l5=n(Hs,"LI",{});var Fxe=s(l5);jme=n(Fxe,"STRONG",{});var Odt=s(jme);RIo=r(Odt,"megatron-bert"),Odt.forEach(t),PIo=r(Fxe," \u2014 "),lO=n(Fxe,"A",{href:!0});var Vdt=s(lO);BIo=r(Vdt,"MegatronBertForNextSentencePrediction"),Vdt.forEach(t),IIo=r(Fxe," (MegatronBert model)"),Fxe.forEach(t),qIo=i(Hs),i5=n(Hs,"LI",{});var Txe=s(i5);Dme=n(Txe,"STRONG",{});var Xdt=s(Dme);NIo=r(Xdt,"mobilebert"),Xdt.forEach(t),jIo=r(Txe," \u2014 "),iO=n(Txe,"A",{href:!0});var zdt=s(iO);DIo=r(zdt,"MobileBertForNextSentencePrediction"),zdt.forEach(t),GIo=r(Txe," (MobileBERT model)"),Txe.forEach(t),OIo=i(Hs),d5=n(Hs,"LI",{});var Mxe=s(d5);Gme=n(Mxe,"STRONG",{});var Wdt=s(Gme);VIo=r(Wdt,"qdqbert"),Wdt.forEach(t),XIo=r(Mxe," \u2014 "),dO=n(Mxe,"A",{href:!0});var Qdt=s(dO);zIo=r(Qdt,"QDQBertForNextSentencePrediction"),Qdt.forEach(t),WIo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),Hs.forEach(t),QIo=i(ia),c5=n(ia,"P",{});var Exe=s(c5);HIo=r(Exe,"The model is set in evaluation mode by default using "),Ome=n(Exe,"CODE",{});var Hdt=s(Ome);UIo=r(Hdt,"model.eval()"),Hdt.forEach(t),JIo=r(Exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(Exe,"CODE",{});var Udt=s(Vme);YIo=r(Udt,"model.train()"),Udt.forEach(t),Exe.forEach(t),KIo=i(ia),T(f5.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),_qe=i(f),Hi=n(f,"H2",{class:!0});var Fje=s(Hi);m5=n(Fje,"A",{id:!0,class:!0,href:!0});var Jdt=s(m5);Xme=n(Jdt,"SPAN",{});var Ydt=s(Xme);T(Ey.$$.fragment,Ydt),Ydt.forEach(t),Jdt.forEach(t),ZIo=i(Fje),zme=n(Fje,"SPAN",{});var Kdt=s(zme);eqo=r(Kdt,"AutoModelForTokenClassification"),Kdt.forEach(t),Fje.forEach(t),uqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Cy.$$.fragment,Us),oqo=i(Us),Ui=n(Us,"P",{});var YK=s(Ui);rqo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cO=n(YK,"A",{href:!0});var Zdt=s(cO);tqo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),aqo=r(YK," class method or the "),fO=n(YK,"A",{href:!0});var ect=s(fO);nqo=r(ect,"from_config()"),ect.forEach(t),sqo=r(YK,` class
method.`),YK.forEach(t),lqo=i(Us),wy=n(Us,"P",{});var Tje=s(wy);iqo=r(Tje,"This class cannot be instantiated directly using "),Wme=n(Tje,"CODE",{});var oct=s(Wme);dqo=r(oct,"__init__()"),oct.forEach(t),cqo=r(Tje," (throws an error)."),Tje.forEach(t),fqo=i(Us),ft=n(Us,"DIV",{class:!0});var k0=s(ft);T(Ay.$$.fragment,k0),mqo=i(k0),Qme=n(k0,"P",{});var rct=s(Qme);gqo=r(rct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rct.forEach(t),hqo=i(k0),Ji=n(k0,"P",{});var KK=s(Ji);pqo=r(KK,`Note:
Loading a model from its configuration file does `),Hme=n(KK,"STRONG",{});var tct=s(Hme);_qo=r(tct,"not"),tct.forEach(t),uqo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(KK,"A",{href:!0});var act=s(mO);bqo=r(act,"from_pretrained()"),act.forEach(t),vqo=r(KK," to load the model weights."),KK.forEach(t),Fqo=i(k0),T(g5.$$.fragment,k0),k0.forEach(t),Tqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(yy.$$.fragment,da),Mqo=i(da),Ume=n(da,"P",{});var nct=s(Ume);Eqo=r(nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nct.forEach(t),Cqo=i(da),Ia=n(da,"P",{});var S0=s(Ia);wqo=r(S0,"The model class to instantiate is selected based on the "),Jme=n(S0,"CODE",{});var sct=s(Jme);Aqo=r(sct,"model_type"),sct.forEach(t),yqo=r(S0,` property of the config object (either
passed as an argument or loaded from `),Yme=n(S0,"CODE",{});var lct=s(Yme);Lqo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),xqo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(S0,"CODE",{});var ict=s(Kme);$qo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),kqo=r(S0,":"),S0.forEach(t),Sqo=i(da),U=n(da,"UL",{});var J=s(U);h5=n(J,"LI",{});var Cxe=s(h5);Zme=n(Cxe,"STRONG",{});var dct=s(Zme);Rqo=r(dct,"albert"),dct.forEach(t),Pqo=r(Cxe," \u2014 "),gO=n(Cxe,"A",{href:!0});var cct=s(gO);Bqo=r(cct,"AlbertForTokenClassification"),cct.forEach(t),Iqo=r(Cxe," (ALBERT model)"),Cxe.forEach(t),qqo=i(J),p5=n(J,"LI",{});var wxe=s(p5);ege=n(wxe,"STRONG",{});var fct=s(ege);Nqo=r(fct,"bert"),fct.forEach(t),jqo=r(wxe," \u2014 "),hO=n(wxe,"A",{href:!0});var mct=s(hO);Dqo=r(mct,"BertForTokenClassification"),mct.forEach(t),Gqo=r(wxe," (BERT model)"),wxe.forEach(t),Oqo=i(J),_5=n(J,"LI",{});var Axe=s(_5);oge=n(Axe,"STRONG",{});var gct=s(oge);Vqo=r(gct,"big_bird"),gct.forEach(t),Xqo=r(Axe," \u2014 "),pO=n(Axe,"A",{href:!0});var hct=s(pO);zqo=r(hct,"BigBirdForTokenClassification"),hct.forEach(t),Wqo=r(Axe," (BigBird model)"),Axe.forEach(t),Qqo=i(J),u5=n(J,"LI",{});var yxe=s(u5);rge=n(yxe,"STRONG",{});var pct=s(rge);Hqo=r(pct,"camembert"),pct.forEach(t),Uqo=r(yxe," \u2014 "),_O=n(yxe,"A",{href:!0});var _ct=s(_O);Jqo=r(_ct,"CamembertForTokenClassification"),_ct.forEach(t),Yqo=r(yxe," (CamemBERT model)"),yxe.forEach(t),Kqo=i(J),b5=n(J,"LI",{});var Lxe=s(b5);tge=n(Lxe,"STRONG",{});var uct=s(tge);Zqo=r(uct,"canine"),uct.forEach(t),eNo=r(Lxe," \u2014 "),uO=n(Lxe,"A",{href:!0});var bct=s(uO);oNo=r(bct,"CanineForTokenClassification"),bct.forEach(t),rNo=r(Lxe," (Canine model)"),Lxe.forEach(t),tNo=i(J),v5=n(J,"LI",{});var xxe=s(v5);age=n(xxe,"STRONG",{});var vct=s(age);aNo=r(vct,"convbert"),vct.forEach(t),nNo=r(xxe," \u2014 "),bO=n(xxe,"A",{href:!0});var Fct=s(bO);sNo=r(Fct,"ConvBertForTokenClassification"),Fct.forEach(t),lNo=r(xxe," (ConvBERT model)"),xxe.forEach(t),iNo=i(J),F5=n(J,"LI",{});var $xe=s(F5);nge=n($xe,"STRONG",{});var Tct=s(nge);dNo=r(Tct,"data2vec-text"),Tct.forEach(t),cNo=r($xe," \u2014 "),vO=n($xe,"A",{href:!0});var Mct=s(vO);fNo=r(Mct,"Data2VecTextForTokenClassification"),Mct.forEach(t),mNo=r($xe," (Data2VecText model)"),$xe.forEach(t),gNo=i(J),T5=n(J,"LI",{});var kxe=s(T5);sge=n(kxe,"STRONG",{});var Ect=s(sge);hNo=r(Ect,"deberta"),Ect.forEach(t),pNo=r(kxe," \u2014 "),FO=n(kxe,"A",{href:!0});var Cct=s(FO);_No=r(Cct,"DebertaForTokenClassification"),Cct.forEach(t),uNo=r(kxe," (DeBERTa model)"),kxe.forEach(t),bNo=i(J),M5=n(J,"LI",{});var Sxe=s(M5);lge=n(Sxe,"STRONG",{});var wct=s(lge);vNo=r(wct,"deberta-v2"),wct.forEach(t),FNo=r(Sxe," \u2014 "),TO=n(Sxe,"A",{href:!0});var Act=s(TO);TNo=r(Act,"DebertaV2ForTokenClassification"),Act.forEach(t),MNo=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),ENo=i(J),E5=n(J,"LI",{});var Rxe=s(E5);ige=n(Rxe,"STRONG",{});var yct=s(ige);CNo=r(yct,"distilbert"),yct.forEach(t),wNo=r(Rxe," \u2014 "),MO=n(Rxe,"A",{href:!0});var Lct=s(MO);ANo=r(Lct,"DistilBertForTokenClassification"),Lct.forEach(t),yNo=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),LNo=i(J),C5=n(J,"LI",{});var Pxe=s(C5);dge=n(Pxe,"STRONG",{});var xct=s(dge);xNo=r(xct,"electra"),xct.forEach(t),$No=r(Pxe," \u2014 "),EO=n(Pxe,"A",{href:!0});var $ct=s(EO);kNo=r($ct,"ElectraForTokenClassification"),$ct.forEach(t),SNo=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),RNo=i(J),w5=n(J,"LI",{});var Bxe=s(w5);cge=n(Bxe,"STRONG",{});var kct=s(cge);PNo=r(kct,"flaubert"),kct.forEach(t),BNo=r(Bxe," \u2014 "),CO=n(Bxe,"A",{href:!0});var Sct=s(CO);INo=r(Sct,"FlaubertForTokenClassification"),Sct.forEach(t),qNo=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),NNo=i(J),A5=n(J,"LI",{});var Ixe=s(A5);fge=n(Ixe,"STRONG",{});var Rct=s(fge);jNo=r(Rct,"fnet"),Rct.forEach(t),DNo=r(Ixe," \u2014 "),wO=n(Ixe,"A",{href:!0});var Pct=s(wO);GNo=r(Pct,"FNetForTokenClassification"),Pct.forEach(t),ONo=r(Ixe," (FNet model)"),Ixe.forEach(t),VNo=i(J),y5=n(J,"LI",{});var qxe=s(y5);mge=n(qxe,"STRONG",{});var Bct=s(mge);XNo=r(Bct,"funnel"),Bct.forEach(t),zNo=r(qxe," \u2014 "),AO=n(qxe,"A",{href:!0});var Ict=s(AO);WNo=r(Ict,"FunnelForTokenClassification"),Ict.forEach(t),QNo=r(qxe," (Funnel Transformer model)"),qxe.forEach(t),HNo=i(J),L5=n(J,"LI",{});var Nxe=s(L5);gge=n(Nxe,"STRONG",{});var qct=s(gge);UNo=r(qct,"gpt2"),qct.forEach(t),JNo=r(Nxe," \u2014 "),yO=n(Nxe,"A",{href:!0});var Nct=s(yO);YNo=r(Nct,"GPT2ForTokenClassification"),Nct.forEach(t),KNo=r(Nxe," (OpenAI GPT-2 model)"),Nxe.forEach(t),ZNo=i(J),x5=n(J,"LI",{});var jxe=s(x5);hge=n(jxe,"STRONG",{});var jct=s(hge);ejo=r(jct,"ibert"),jct.forEach(t),ojo=r(jxe," \u2014 "),LO=n(jxe,"A",{href:!0});var Dct=s(LO);rjo=r(Dct,"IBertForTokenClassification"),Dct.forEach(t),tjo=r(jxe," (I-BERT model)"),jxe.forEach(t),ajo=i(J),$5=n(J,"LI",{});var Dxe=s($5);pge=n(Dxe,"STRONG",{});var Gct=s(pge);njo=r(Gct,"layoutlm"),Gct.forEach(t),sjo=r(Dxe," \u2014 "),xO=n(Dxe,"A",{href:!0});var Oct=s(xO);ljo=r(Oct,"LayoutLMForTokenClassification"),Oct.forEach(t),ijo=r(Dxe," (LayoutLM model)"),Dxe.forEach(t),djo=i(J),k5=n(J,"LI",{});var Gxe=s(k5);_ge=n(Gxe,"STRONG",{});var Vct=s(_ge);cjo=r(Vct,"layoutlmv2"),Vct.forEach(t),fjo=r(Gxe," \u2014 "),$O=n(Gxe,"A",{href:!0});var Xct=s($O);mjo=r(Xct,"LayoutLMv2ForTokenClassification"),Xct.forEach(t),gjo=r(Gxe," (LayoutLMv2 model)"),Gxe.forEach(t),hjo=i(J),S5=n(J,"LI",{});var Oxe=s(S5);uge=n(Oxe,"STRONG",{});var zct=s(uge);pjo=r(zct,"longformer"),zct.forEach(t),_jo=r(Oxe," \u2014 "),kO=n(Oxe,"A",{href:!0});var Wct=s(kO);ujo=r(Wct,"LongformerForTokenClassification"),Wct.forEach(t),bjo=r(Oxe," (Longformer model)"),Oxe.forEach(t),vjo=i(J),R5=n(J,"LI",{});var Vxe=s(R5);bge=n(Vxe,"STRONG",{});var Qct=s(bge);Fjo=r(Qct,"megatron-bert"),Qct.forEach(t),Tjo=r(Vxe," \u2014 "),SO=n(Vxe,"A",{href:!0});var Hct=s(SO);Mjo=r(Hct,"MegatronBertForTokenClassification"),Hct.forEach(t),Ejo=r(Vxe," (MegatronBert model)"),Vxe.forEach(t),Cjo=i(J),P5=n(J,"LI",{});var Xxe=s(P5);vge=n(Xxe,"STRONG",{});var Uct=s(vge);wjo=r(Uct,"mobilebert"),Uct.forEach(t),Ajo=r(Xxe," \u2014 "),RO=n(Xxe,"A",{href:!0});var Jct=s(RO);yjo=r(Jct,"MobileBertForTokenClassification"),Jct.forEach(t),Ljo=r(Xxe," (MobileBERT model)"),Xxe.forEach(t),xjo=i(J),B5=n(J,"LI",{});var zxe=s(B5);Fge=n(zxe,"STRONG",{});var Yct=s(Fge);$jo=r(Yct,"mpnet"),Yct.forEach(t),kjo=r(zxe," \u2014 "),PO=n(zxe,"A",{href:!0});var Kct=s(PO);Sjo=r(Kct,"MPNetForTokenClassification"),Kct.forEach(t),Rjo=r(zxe," (MPNet model)"),zxe.forEach(t),Pjo=i(J),I5=n(J,"LI",{});var Wxe=s(I5);Tge=n(Wxe,"STRONG",{});var Zct=s(Tge);Bjo=r(Zct,"nystromformer"),Zct.forEach(t),Ijo=r(Wxe," \u2014 "),BO=n(Wxe,"A",{href:!0});var eft=s(BO);qjo=r(eft,"NystromformerForTokenClassification"),eft.forEach(t),Njo=r(Wxe," (Nystromformer model)"),Wxe.forEach(t),jjo=i(J),q5=n(J,"LI",{});var Qxe=s(q5);Mge=n(Qxe,"STRONG",{});var oft=s(Mge);Djo=r(oft,"qdqbert"),oft.forEach(t),Gjo=r(Qxe," \u2014 "),IO=n(Qxe,"A",{href:!0});var rft=s(IO);Ojo=r(rft,"QDQBertForTokenClassification"),rft.forEach(t),Vjo=r(Qxe," (QDQBert model)"),Qxe.forEach(t),Xjo=i(J),N5=n(J,"LI",{});var Hxe=s(N5);Ege=n(Hxe,"STRONG",{});var tft=s(Ege);zjo=r(tft,"rembert"),tft.forEach(t),Wjo=r(Hxe," \u2014 "),qO=n(Hxe,"A",{href:!0});var aft=s(qO);Qjo=r(aft,"RemBertForTokenClassification"),aft.forEach(t),Hjo=r(Hxe," (RemBERT model)"),Hxe.forEach(t),Ujo=i(J),j5=n(J,"LI",{});var Uxe=s(j5);Cge=n(Uxe,"STRONG",{});var nft=s(Cge);Jjo=r(nft,"roberta"),nft.forEach(t),Yjo=r(Uxe," \u2014 "),NO=n(Uxe,"A",{href:!0});var sft=s(NO);Kjo=r(sft,"RobertaForTokenClassification"),sft.forEach(t),Zjo=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),eDo=i(J),D5=n(J,"LI",{});var Jxe=s(D5);wge=n(Jxe,"STRONG",{});var lft=s(wge);oDo=r(lft,"roformer"),lft.forEach(t),rDo=r(Jxe," \u2014 "),jO=n(Jxe,"A",{href:!0});var ift=s(jO);tDo=r(ift,"RoFormerForTokenClassification"),ift.forEach(t),aDo=r(Jxe," (RoFormer model)"),Jxe.forEach(t),nDo=i(J),G5=n(J,"LI",{});var Yxe=s(G5);Age=n(Yxe,"STRONG",{});var dft=s(Age);sDo=r(dft,"squeezebert"),dft.forEach(t),lDo=r(Yxe," \u2014 "),DO=n(Yxe,"A",{href:!0});var cft=s(DO);iDo=r(cft,"SqueezeBertForTokenClassification"),cft.forEach(t),dDo=r(Yxe," (SqueezeBERT model)"),Yxe.forEach(t),cDo=i(J),O5=n(J,"LI",{});var Kxe=s(O5);yge=n(Kxe,"STRONG",{});var fft=s(yge);fDo=r(fft,"xlm"),fft.forEach(t),mDo=r(Kxe," \u2014 "),GO=n(Kxe,"A",{href:!0});var mft=s(GO);gDo=r(mft,"XLMForTokenClassification"),mft.forEach(t),hDo=r(Kxe," (XLM model)"),Kxe.forEach(t),pDo=i(J),V5=n(J,"LI",{});var Zxe=s(V5);Lge=n(Zxe,"STRONG",{});var gft=s(Lge);_Do=r(gft,"xlm-roberta"),gft.forEach(t),uDo=r(Zxe," \u2014 "),OO=n(Zxe,"A",{href:!0});var hft=s(OO);bDo=r(hft,"XLMRobertaForTokenClassification"),hft.forEach(t),vDo=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),FDo=i(J),X5=n(J,"LI",{});var e9e=s(X5);xge=n(e9e,"STRONG",{});var pft=s(xge);TDo=r(pft,"xlm-roberta-xl"),pft.forEach(t),MDo=r(e9e," \u2014 "),VO=n(e9e,"A",{href:!0});var _ft=s(VO);EDo=r(_ft,"XLMRobertaXLForTokenClassification"),_ft.forEach(t),CDo=r(e9e," (XLM-RoBERTa-XL model)"),e9e.forEach(t),wDo=i(J),z5=n(J,"LI",{});var o9e=s(z5);$ge=n(o9e,"STRONG",{});var uft=s($ge);ADo=r(uft,"xlnet"),uft.forEach(t),yDo=r(o9e," \u2014 "),XO=n(o9e,"A",{href:!0});var bft=s(XO);LDo=r(bft,"XLNetForTokenClassification"),bft.forEach(t),xDo=r(o9e," (XLNet model)"),o9e.forEach(t),$Do=i(J),W5=n(J,"LI",{});var r9e=s(W5);kge=n(r9e,"STRONG",{});var vft=s(kge);kDo=r(vft,"yoso"),vft.forEach(t),SDo=r(r9e," \u2014 "),zO=n(r9e,"A",{href:!0});var Fft=s(zO);RDo=r(Fft,"YosoForTokenClassification"),Fft.forEach(t),PDo=r(r9e," (YOSO model)"),r9e.forEach(t),J.forEach(t),BDo=i(da),Q5=n(da,"P",{});var t9e=s(Q5);IDo=r(t9e,"The model is set in evaluation mode by default using "),Sge=n(t9e,"CODE",{});var Tft=s(Sge);qDo=r(Tft,"model.eval()"),Tft.forEach(t),NDo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(t9e,"CODE",{});var Mft=s(Rge);jDo=r(Mft,"model.train()"),Mft.forEach(t),t9e.forEach(t),DDo=i(da),T(H5.$$.fragment,da),da.forEach(t),Us.forEach(t),bqe=i(f),Yi=n(f,"H2",{class:!0});var Mje=s(Yi);U5=n(Mje,"A",{id:!0,class:!0,href:!0});var Eft=s(U5);Pge=n(Eft,"SPAN",{});var Cft=s(Pge);T(Ly.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),GDo=i(Mje),Bge=n(Mje,"SPAN",{});var wft=s(Bge);ODo=r(wft,"AutoModelForQuestionAnswering"),wft.forEach(t),Mje.forEach(t),vqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(xy.$$.fragment,Js),VDo=i(Js),Ki=n(Js,"P",{});var ZK=s(Ki);XDo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WO=n(ZK,"A",{href:!0});var Aft=s(WO);zDo=r(Aft,"from_pretrained()"),Aft.forEach(t),WDo=r(ZK," class method or the "),QO=n(ZK,"A",{href:!0});var yft=s(QO);QDo=r(yft,"from_config()"),yft.forEach(t),HDo=r(ZK,` class
method.`),ZK.forEach(t),UDo=i(Js),$y=n(Js,"P",{});var Eje=s($y);JDo=r(Eje,"This class cannot be instantiated directly using "),Ige=n(Eje,"CODE",{});var Lft=s(Ige);YDo=r(Lft,"__init__()"),Lft.forEach(t),KDo=r(Eje," (throws an error)."),Eje.forEach(t),ZDo=i(Js),mt=n(Js,"DIV",{class:!0});var R0=s(mt);T(ky.$$.fragment,R0),eGo=i(R0),qge=n(R0,"P",{});var xft=s(qge);oGo=r(xft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xft.forEach(t),rGo=i(R0),Zi=n(R0,"P",{});var eZ=s(Zi);tGo=r(eZ,`Note:
Loading a model from its configuration file does `),Nge=n(eZ,"STRONG",{});var $ft=s(Nge);aGo=r($ft,"not"),$ft.forEach(t),nGo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(eZ,"A",{href:!0});var kft=s(HO);sGo=r(kft,"from_pretrained()"),kft.forEach(t),lGo=r(eZ," to load the model weights."),eZ.forEach(t),iGo=i(R0),T(J5.$$.fragment,R0),R0.forEach(t),dGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Sy.$$.fragment,ca),cGo=i(ca),jge=n(ca,"P",{});var Sft=s(jge);fGo=r(Sft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sft.forEach(t),mGo=i(ca),qa=n(ca,"P",{});var P0=s(qa);gGo=r(P0,"The model class to instantiate is selected based on the "),Dge=n(P0,"CODE",{});var Rft=s(Dge);hGo=r(Rft,"model_type"),Rft.forEach(t),pGo=r(P0,` property of the config object (either
passed as an argument or loaded from `),Gge=n(P0,"CODE",{});var Pft=s(Gge);_Go=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),uGo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(P0,"CODE",{});var Bft=s(Oge);bGo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),vGo=r(P0,":"),P0.forEach(t),FGo=i(ca),V=n(ca,"UL",{});var X=s(V);Y5=n(X,"LI",{});var a9e=s(Y5);Vge=n(a9e,"STRONG",{});var Ift=s(Vge);TGo=r(Ift,"albert"),Ift.forEach(t),MGo=r(a9e," \u2014 "),UO=n(a9e,"A",{href:!0});var qft=s(UO);EGo=r(qft,"AlbertForQuestionAnswering"),qft.forEach(t),CGo=r(a9e," (ALBERT model)"),a9e.forEach(t),wGo=i(X),K5=n(X,"LI",{});var n9e=s(K5);Xge=n(n9e,"STRONG",{});var Nft=s(Xge);AGo=r(Nft,"bart"),Nft.forEach(t),yGo=r(n9e," \u2014 "),JO=n(n9e,"A",{href:!0});var jft=s(JO);LGo=r(jft,"BartForQuestionAnswering"),jft.forEach(t),xGo=r(n9e," (BART model)"),n9e.forEach(t),$Go=i(X),Z5=n(X,"LI",{});var s9e=s(Z5);zge=n(s9e,"STRONG",{});var Dft=s(zge);kGo=r(Dft,"bert"),Dft.forEach(t),SGo=r(s9e," \u2014 "),YO=n(s9e,"A",{href:!0});var Gft=s(YO);RGo=r(Gft,"BertForQuestionAnswering"),Gft.forEach(t),PGo=r(s9e," (BERT model)"),s9e.forEach(t),BGo=i(X),ev=n(X,"LI",{});var l9e=s(ev);Wge=n(l9e,"STRONG",{});var Oft=s(Wge);IGo=r(Oft,"big_bird"),Oft.forEach(t),qGo=r(l9e," \u2014 "),KO=n(l9e,"A",{href:!0});var Vft=s(KO);NGo=r(Vft,"BigBirdForQuestionAnswering"),Vft.forEach(t),jGo=r(l9e," (BigBird model)"),l9e.forEach(t),DGo=i(X),ov=n(X,"LI",{});var i9e=s(ov);Qge=n(i9e,"STRONG",{});var Xft=s(Qge);GGo=r(Xft,"bigbird_pegasus"),Xft.forEach(t),OGo=r(i9e," \u2014 "),ZO=n(i9e,"A",{href:!0});var zft=s(ZO);VGo=r(zft,"BigBirdPegasusForQuestionAnswering"),zft.forEach(t),XGo=r(i9e," (BigBirdPegasus model)"),i9e.forEach(t),zGo=i(X),rv=n(X,"LI",{});var d9e=s(rv);Hge=n(d9e,"STRONG",{});var Wft=s(Hge);WGo=r(Wft,"camembert"),Wft.forEach(t),QGo=r(d9e," \u2014 "),eV=n(d9e,"A",{href:!0});var Qft=s(eV);HGo=r(Qft,"CamembertForQuestionAnswering"),Qft.forEach(t),UGo=r(d9e," (CamemBERT model)"),d9e.forEach(t),JGo=i(X),tv=n(X,"LI",{});var c9e=s(tv);Uge=n(c9e,"STRONG",{});var Hft=s(Uge);YGo=r(Hft,"canine"),Hft.forEach(t),KGo=r(c9e," \u2014 "),oV=n(c9e,"A",{href:!0});var Uft=s(oV);ZGo=r(Uft,"CanineForQuestionAnswering"),Uft.forEach(t),eOo=r(c9e," (Canine model)"),c9e.forEach(t),oOo=i(X),av=n(X,"LI",{});var f9e=s(av);Jge=n(f9e,"STRONG",{});var Jft=s(Jge);rOo=r(Jft,"convbert"),Jft.forEach(t),tOo=r(f9e," \u2014 "),rV=n(f9e,"A",{href:!0});var Yft=s(rV);aOo=r(Yft,"ConvBertForQuestionAnswering"),Yft.forEach(t),nOo=r(f9e," (ConvBERT model)"),f9e.forEach(t),sOo=i(X),nv=n(X,"LI",{});var m9e=s(nv);Yge=n(m9e,"STRONG",{});var Kft=s(Yge);lOo=r(Kft,"data2vec-text"),Kft.forEach(t),iOo=r(m9e," \u2014 "),tV=n(m9e,"A",{href:!0});var Zft=s(tV);dOo=r(Zft,"Data2VecTextForQuestionAnswering"),Zft.forEach(t),cOo=r(m9e," (Data2VecText model)"),m9e.forEach(t),fOo=i(X),sv=n(X,"LI",{});var g9e=s(sv);Kge=n(g9e,"STRONG",{});var emt=s(Kge);mOo=r(emt,"deberta"),emt.forEach(t),gOo=r(g9e," \u2014 "),aV=n(g9e,"A",{href:!0});var omt=s(aV);hOo=r(omt,"DebertaForQuestionAnswering"),omt.forEach(t),pOo=r(g9e," (DeBERTa model)"),g9e.forEach(t),_Oo=i(X),lv=n(X,"LI",{});var h9e=s(lv);Zge=n(h9e,"STRONG",{});var rmt=s(Zge);uOo=r(rmt,"deberta-v2"),rmt.forEach(t),bOo=r(h9e," \u2014 "),nV=n(h9e,"A",{href:!0});var tmt=s(nV);vOo=r(tmt,"DebertaV2ForQuestionAnswering"),tmt.forEach(t),FOo=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),TOo=i(X),iv=n(X,"LI",{});var p9e=s(iv);ehe=n(p9e,"STRONG",{});var amt=s(ehe);MOo=r(amt,"distilbert"),amt.forEach(t),EOo=r(p9e," \u2014 "),sV=n(p9e,"A",{href:!0});var nmt=s(sV);COo=r(nmt,"DistilBertForQuestionAnswering"),nmt.forEach(t),wOo=r(p9e," (DistilBERT model)"),p9e.forEach(t),AOo=i(X),dv=n(X,"LI",{});var _9e=s(dv);ohe=n(_9e,"STRONG",{});var smt=s(ohe);yOo=r(smt,"electra"),smt.forEach(t),LOo=r(_9e," \u2014 "),lV=n(_9e,"A",{href:!0});var lmt=s(lV);xOo=r(lmt,"ElectraForQuestionAnswering"),lmt.forEach(t),$Oo=r(_9e," (ELECTRA model)"),_9e.forEach(t),kOo=i(X),cv=n(X,"LI",{});var u9e=s(cv);rhe=n(u9e,"STRONG",{});var imt=s(rhe);SOo=r(imt,"flaubert"),imt.forEach(t),ROo=r(u9e," \u2014 "),iV=n(u9e,"A",{href:!0});var dmt=s(iV);POo=r(dmt,"FlaubertForQuestionAnsweringSimple"),dmt.forEach(t),BOo=r(u9e," (FlauBERT model)"),u9e.forEach(t),IOo=i(X),fv=n(X,"LI",{});var b9e=s(fv);the=n(b9e,"STRONG",{});var cmt=s(the);qOo=r(cmt,"fnet"),cmt.forEach(t),NOo=r(b9e," \u2014 "),dV=n(b9e,"A",{href:!0});var fmt=s(dV);jOo=r(fmt,"FNetForQuestionAnswering"),fmt.forEach(t),DOo=r(b9e," (FNet model)"),b9e.forEach(t),GOo=i(X),mv=n(X,"LI",{});var v9e=s(mv);ahe=n(v9e,"STRONG",{});var mmt=s(ahe);OOo=r(mmt,"funnel"),mmt.forEach(t),VOo=r(v9e," \u2014 "),cV=n(v9e,"A",{href:!0});var gmt=s(cV);XOo=r(gmt,"FunnelForQuestionAnswering"),gmt.forEach(t),zOo=r(v9e," (Funnel Transformer model)"),v9e.forEach(t),WOo=i(X),gv=n(X,"LI",{});var F9e=s(gv);nhe=n(F9e,"STRONG",{});var hmt=s(nhe);QOo=r(hmt,"gptj"),hmt.forEach(t),HOo=r(F9e," \u2014 "),fV=n(F9e,"A",{href:!0});var pmt=s(fV);UOo=r(pmt,"GPTJForQuestionAnswering"),pmt.forEach(t),JOo=r(F9e," (GPT-J model)"),F9e.forEach(t),YOo=i(X),hv=n(X,"LI",{});var T9e=s(hv);she=n(T9e,"STRONG",{});var _mt=s(she);KOo=r(_mt,"ibert"),_mt.forEach(t),ZOo=r(T9e," \u2014 "),mV=n(T9e,"A",{href:!0});var umt=s(mV);eVo=r(umt,"IBertForQuestionAnswering"),umt.forEach(t),oVo=r(T9e," (I-BERT model)"),T9e.forEach(t),rVo=i(X),pv=n(X,"LI",{});var M9e=s(pv);lhe=n(M9e,"STRONG",{});var bmt=s(lhe);tVo=r(bmt,"layoutlmv2"),bmt.forEach(t),aVo=r(M9e," \u2014 "),gV=n(M9e,"A",{href:!0});var vmt=s(gV);nVo=r(vmt,"LayoutLMv2ForQuestionAnswering"),vmt.forEach(t),sVo=r(M9e," (LayoutLMv2 model)"),M9e.forEach(t),lVo=i(X),_v=n(X,"LI",{});var E9e=s(_v);ihe=n(E9e,"STRONG",{});var Fmt=s(ihe);iVo=r(Fmt,"led"),Fmt.forEach(t),dVo=r(E9e," \u2014 "),hV=n(E9e,"A",{href:!0});var Tmt=s(hV);cVo=r(Tmt,"LEDForQuestionAnswering"),Tmt.forEach(t),fVo=r(E9e," (LED model)"),E9e.forEach(t),mVo=i(X),uv=n(X,"LI",{});var C9e=s(uv);dhe=n(C9e,"STRONG",{});var Mmt=s(dhe);gVo=r(Mmt,"longformer"),Mmt.forEach(t),hVo=r(C9e," \u2014 "),pV=n(C9e,"A",{href:!0});var Emt=s(pV);pVo=r(Emt,"LongformerForQuestionAnswering"),Emt.forEach(t),_Vo=r(C9e," (Longformer model)"),C9e.forEach(t),uVo=i(X),bv=n(X,"LI",{});var w9e=s(bv);che=n(w9e,"STRONG",{});var Cmt=s(che);bVo=r(Cmt,"lxmert"),Cmt.forEach(t),vVo=r(w9e," \u2014 "),_V=n(w9e,"A",{href:!0});var wmt=s(_V);FVo=r(wmt,"LxmertForQuestionAnswering"),wmt.forEach(t),TVo=r(w9e," (LXMERT model)"),w9e.forEach(t),MVo=i(X),vv=n(X,"LI",{});var A9e=s(vv);fhe=n(A9e,"STRONG",{});var Amt=s(fhe);EVo=r(Amt,"mbart"),Amt.forEach(t),CVo=r(A9e," \u2014 "),uV=n(A9e,"A",{href:!0});var ymt=s(uV);wVo=r(ymt,"MBartForQuestionAnswering"),ymt.forEach(t),AVo=r(A9e," (mBART model)"),A9e.forEach(t),yVo=i(X),Fv=n(X,"LI",{});var y9e=s(Fv);mhe=n(y9e,"STRONG",{});var Lmt=s(mhe);LVo=r(Lmt,"megatron-bert"),Lmt.forEach(t),xVo=r(y9e," \u2014 "),bV=n(y9e,"A",{href:!0});var xmt=s(bV);$Vo=r(xmt,"MegatronBertForQuestionAnswering"),xmt.forEach(t),kVo=r(y9e," (MegatronBert model)"),y9e.forEach(t),SVo=i(X),Tv=n(X,"LI",{});var L9e=s(Tv);ghe=n(L9e,"STRONG",{});var $mt=s(ghe);RVo=r($mt,"mobilebert"),$mt.forEach(t),PVo=r(L9e," \u2014 "),vV=n(L9e,"A",{href:!0});var kmt=s(vV);BVo=r(kmt,"MobileBertForQuestionAnswering"),kmt.forEach(t),IVo=r(L9e," (MobileBERT model)"),L9e.forEach(t),qVo=i(X),Mv=n(X,"LI",{});var x9e=s(Mv);hhe=n(x9e,"STRONG",{});var Smt=s(hhe);NVo=r(Smt,"mpnet"),Smt.forEach(t),jVo=r(x9e," \u2014 "),FV=n(x9e,"A",{href:!0});var Rmt=s(FV);DVo=r(Rmt,"MPNetForQuestionAnswering"),Rmt.forEach(t),GVo=r(x9e," (MPNet model)"),x9e.forEach(t),OVo=i(X),Ev=n(X,"LI",{});var $9e=s(Ev);phe=n($9e,"STRONG",{});var Pmt=s(phe);VVo=r(Pmt,"nystromformer"),Pmt.forEach(t),XVo=r($9e," \u2014 "),TV=n($9e,"A",{href:!0});var Bmt=s(TV);zVo=r(Bmt,"NystromformerForQuestionAnswering"),Bmt.forEach(t),WVo=r($9e," (Nystromformer model)"),$9e.forEach(t),QVo=i(X),Cv=n(X,"LI",{});var k9e=s(Cv);_he=n(k9e,"STRONG",{});var Imt=s(_he);HVo=r(Imt,"qdqbert"),Imt.forEach(t),UVo=r(k9e," \u2014 "),MV=n(k9e,"A",{href:!0});var qmt=s(MV);JVo=r(qmt,"QDQBertForQuestionAnswering"),qmt.forEach(t),YVo=r(k9e," (QDQBert model)"),k9e.forEach(t),KVo=i(X),wv=n(X,"LI",{});var S9e=s(wv);uhe=n(S9e,"STRONG",{});var Nmt=s(uhe);ZVo=r(Nmt,"reformer"),Nmt.forEach(t),eXo=r(S9e," \u2014 "),EV=n(S9e,"A",{href:!0});var jmt=s(EV);oXo=r(jmt,"ReformerForQuestionAnswering"),jmt.forEach(t),rXo=r(S9e," (Reformer model)"),S9e.forEach(t),tXo=i(X),Av=n(X,"LI",{});var R9e=s(Av);bhe=n(R9e,"STRONG",{});var Dmt=s(bhe);aXo=r(Dmt,"rembert"),Dmt.forEach(t),nXo=r(R9e," \u2014 "),CV=n(R9e,"A",{href:!0});var Gmt=s(CV);sXo=r(Gmt,"RemBertForQuestionAnswering"),Gmt.forEach(t),lXo=r(R9e," (RemBERT model)"),R9e.forEach(t),iXo=i(X),yv=n(X,"LI",{});var P9e=s(yv);vhe=n(P9e,"STRONG",{});var Omt=s(vhe);dXo=r(Omt,"roberta"),Omt.forEach(t),cXo=r(P9e," \u2014 "),wV=n(P9e,"A",{href:!0});var Vmt=s(wV);fXo=r(Vmt,"RobertaForQuestionAnswering"),Vmt.forEach(t),mXo=r(P9e," (RoBERTa model)"),P9e.forEach(t),gXo=i(X),Lv=n(X,"LI",{});var B9e=s(Lv);Fhe=n(B9e,"STRONG",{});var Xmt=s(Fhe);hXo=r(Xmt,"roformer"),Xmt.forEach(t),pXo=r(B9e," \u2014 "),AV=n(B9e,"A",{href:!0});var zmt=s(AV);_Xo=r(zmt,"RoFormerForQuestionAnswering"),zmt.forEach(t),uXo=r(B9e," (RoFormer model)"),B9e.forEach(t),bXo=i(X),xv=n(X,"LI",{});var I9e=s(xv);The=n(I9e,"STRONG",{});var Wmt=s(The);vXo=r(Wmt,"splinter"),Wmt.forEach(t),FXo=r(I9e," \u2014 "),yV=n(I9e,"A",{href:!0});var Qmt=s(yV);TXo=r(Qmt,"SplinterForQuestionAnswering"),Qmt.forEach(t),MXo=r(I9e," (Splinter model)"),I9e.forEach(t),EXo=i(X),$v=n(X,"LI",{});var q9e=s($v);Mhe=n(q9e,"STRONG",{});var Hmt=s(Mhe);CXo=r(Hmt,"squeezebert"),Hmt.forEach(t),wXo=r(q9e," \u2014 "),LV=n(q9e,"A",{href:!0});var Umt=s(LV);AXo=r(Umt,"SqueezeBertForQuestionAnswering"),Umt.forEach(t),yXo=r(q9e," (SqueezeBERT model)"),q9e.forEach(t),LXo=i(X),kv=n(X,"LI",{});var N9e=s(kv);Ehe=n(N9e,"STRONG",{});var Jmt=s(Ehe);xXo=r(Jmt,"xlm"),Jmt.forEach(t),$Xo=r(N9e," \u2014 "),xV=n(N9e,"A",{href:!0});var Ymt=s(xV);kXo=r(Ymt,"XLMForQuestionAnsweringSimple"),Ymt.forEach(t),SXo=r(N9e," (XLM model)"),N9e.forEach(t),RXo=i(X),Sv=n(X,"LI",{});var j9e=s(Sv);Che=n(j9e,"STRONG",{});var Kmt=s(Che);PXo=r(Kmt,"xlm-roberta"),Kmt.forEach(t),BXo=r(j9e," \u2014 "),$V=n(j9e,"A",{href:!0});var Zmt=s($V);IXo=r(Zmt,"XLMRobertaForQuestionAnswering"),Zmt.forEach(t),qXo=r(j9e," (XLM-RoBERTa model)"),j9e.forEach(t),NXo=i(X),Rv=n(X,"LI",{});var D9e=s(Rv);whe=n(D9e,"STRONG",{});var egt=s(whe);jXo=r(egt,"xlm-roberta-xl"),egt.forEach(t),DXo=r(D9e," \u2014 "),kV=n(D9e,"A",{href:!0});var ogt=s(kV);GXo=r(ogt,"XLMRobertaXLForQuestionAnswering"),ogt.forEach(t),OXo=r(D9e," (XLM-RoBERTa-XL model)"),D9e.forEach(t),VXo=i(X),Pv=n(X,"LI",{});var G9e=s(Pv);Ahe=n(G9e,"STRONG",{});var rgt=s(Ahe);XXo=r(rgt,"xlnet"),rgt.forEach(t),zXo=r(G9e," \u2014 "),SV=n(G9e,"A",{href:!0});var tgt=s(SV);WXo=r(tgt,"XLNetForQuestionAnsweringSimple"),tgt.forEach(t),QXo=r(G9e," (XLNet model)"),G9e.forEach(t),HXo=i(X),Bv=n(X,"LI",{});var O9e=s(Bv);yhe=n(O9e,"STRONG",{});var agt=s(yhe);UXo=r(agt,"yoso"),agt.forEach(t),JXo=r(O9e," \u2014 "),RV=n(O9e,"A",{href:!0});var ngt=s(RV);YXo=r(ngt,"YosoForQuestionAnswering"),ngt.forEach(t),KXo=r(O9e," (YOSO model)"),O9e.forEach(t),X.forEach(t),ZXo=i(ca),Iv=n(ca,"P",{});var V9e=s(Iv);ezo=r(V9e,"The model is set in evaluation mode by default using "),Lhe=n(V9e,"CODE",{});var sgt=s(Lhe);ozo=r(sgt,"model.eval()"),sgt.forEach(t),rzo=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(V9e,"CODE",{});var lgt=s(xhe);tzo=r(lgt,"model.train()"),lgt.forEach(t),V9e.forEach(t),azo=i(ca),T(qv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Fqe=i(f),ed=n(f,"H2",{class:!0});var Cje=s(ed);Nv=n(Cje,"A",{id:!0,class:!0,href:!0});var igt=s(Nv);$he=n(igt,"SPAN",{});var dgt=s($he);T(Ry.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),nzo=i(Cje),khe=n(Cje,"SPAN",{});var cgt=s(khe);szo=r(cgt,"AutoModelForTableQuestionAnswering"),cgt.forEach(t),Cje.forEach(t),Tqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Py.$$.fragment,Ys),lzo=i(Ys),od=n(Ys,"P",{});var oZ=s(od);izo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PV=n(oZ,"A",{href:!0});var fgt=s(PV);dzo=r(fgt,"from_pretrained()"),fgt.forEach(t),czo=r(oZ," class method or the "),BV=n(oZ,"A",{href:!0});var mgt=s(BV);fzo=r(mgt,"from_config()"),mgt.forEach(t),mzo=r(oZ,` class
method.`),oZ.forEach(t),gzo=i(Ys),By=n(Ys,"P",{});var wje=s(By);hzo=r(wje,"This class cannot be instantiated directly using "),She=n(wje,"CODE",{});var ggt=s(She);pzo=r(ggt,"__init__()"),ggt.forEach(t),_zo=r(wje," (throws an error)."),wje.forEach(t),uzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var B0=s(gt);T(Iy.$$.fragment,B0),bzo=i(B0),Rhe=n(B0,"P",{});var hgt=s(Rhe);vzo=r(hgt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hgt.forEach(t),Fzo=i(B0),rd=n(B0,"P",{});var rZ=s(rd);Tzo=r(rZ,`Note:
Loading a model from its configuration file does `),Phe=n(rZ,"STRONG",{});var pgt=s(Phe);Mzo=r(pgt,"not"),pgt.forEach(t),Ezo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(rZ,"A",{href:!0});var _gt=s(IV);Czo=r(_gt,"from_pretrained()"),_gt.forEach(t),wzo=r(rZ," to load the model weights."),rZ.forEach(t),Azo=i(B0),T(jv.$$.fragment,B0),B0.forEach(t),yzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(qy.$$.fragment,fa),Lzo=i(fa),Bhe=n(fa,"P",{});var ugt=s(Bhe);xzo=r(ugt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ugt.forEach(t),$zo=i(fa),Na=n(fa,"P",{});var I0=s(Na);kzo=r(I0,"The model class to instantiate is selected based on the "),Ihe=n(I0,"CODE",{});var bgt=s(Ihe);Szo=r(bgt,"model_type"),bgt.forEach(t),Rzo=r(I0,` property of the config object (either
passed as an argument or loaded from `),qhe=n(I0,"CODE",{});var vgt=s(qhe);Pzo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),Bzo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(I0,"CODE",{});var Fgt=s(Nhe);Izo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),qzo=r(I0,":"),I0.forEach(t),Nzo=i(fa),jhe=n(fa,"UL",{});var Tgt=s(jhe);Dv=n(Tgt,"LI",{});var X9e=s(Dv);Dhe=n(X9e,"STRONG",{});var Mgt=s(Dhe);jzo=r(Mgt,"tapas"),Mgt.forEach(t),Dzo=r(X9e," \u2014 "),qV=n(X9e,"A",{href:!0});var Egt=s(qV);Gzo=r(Egt,"TapasForQuestionAnswering"),Egt.forEach(t),Ozo=r(X9e," (TAPAS model)"),X9e.forEach(t),Tgt.forEach(t),Vzo=i(fa),Gv=n(fa,"P",{});var z9e=s(Gv);Xzo=r(z9e,"The model is set in evaluation mode by default using "),Ghe=n(z9e,"CODE",{});var Cgt=s(Ghe);zzo=r(Cgt,"model.eval()"),Cgt.forEach(t),Wzo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(z9e,"CODE",{});var wgt=s(Ohe);Qzo=r(wgt,"model.train()"),wgt.forEach(t),z9e.forEach(t),Hzo=i(fa),T(Ov.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Mqe=i(f),td=n(f,"H2",{class:!0});var Aje=s(td);Vv=n(Aje,"A",{id:!0,class:!0,href:!0});var Agt=s(Vv);Vhe=n(Agt,"SPAN",{});var ygt=s(Vhe);T(Ny.$$.fragment,ygt),ygt.forEach(t),Agt.forEach(t),Uzo=i(Aje),Xhe=n(Aje,"SPAN",{});var Lgt=s(Xhe);Jzo=r(Lgt,"AutoModelForImageClassification"),Lgt.forEach(t),Aje.forEach(t),Eqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(jy.$$.fragment,Ks),Yzo=i(Ks),ad=n(Ks,"P",{});var tZ=s(ad);Kzo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NV=n(tZ,"A",{href:!0});var xgt=s(NV);Zzo=r(xgt,"from_pretrained()"),xgt.forEach(t),eWo=r(tZ," class method or the "),jV=n(tZ,"A",{href:!0});var $gt=s(jV);oWo=r($gt,"from_config()"),$gt.forEach(t),rWo=r(tZ,` class
method.`),tZ.forEach(t),tWo=i(Ks),Dy=n(Ks,"P",{});var yje=s(Dy);aWo=r(yje,"This class cannot be instantiated directly using "),zhe=n(yje,"CODE",{});var kgt=s(zhe);nWo=r(kgt,"__init__()"),kgt.forEach(t),sWo=r(yje," (throws an error)."),yje.forEach(t),lWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var q0=s(ht);T(Gy.$$.fragment,q0),iWo=i(q0),Whe=n(q0,"P",{});var Sgt=s(Whe);dWo=r(Sgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sgt.forEach(t),cWo=i(q0),nd=n(q0,"P",{});var aZ=s(nd);fWo=r(aZ,`Note:
Loading a model from its configuration file does `),Qhe=n(aZ,"STRONG",{});var Rgt=s(Qhe);mWo=r(Rgt,"not"),Rgt.forEach(t),gWo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(aZ,"A",{href:!0});var Pgt=s(DV);hWo=r(Pgt,"from_pretrained()"),Pgt.forEach(t),pWo=r(aZ," to load the model weights."),aZ.forEach(t),_Wo=i(q0),T(Xv.$$.fragment,q0),q0.forEach(t),uWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Oy.$$.fragment,ma),bWo=i(ma),Hhe=n(ma,"P",{});var Bgt=s(Hhe);vWo=r(Bgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bgt.forEach(t),FWo=i(ma),ja=n(ma,"P",{});var N0=s(ja);TWo=r(N0,"The model class to instantiate is selected based on the "),Uhe=n(N0,"CODE",{});var Igt=s(Uhe);MWo=r(Igt,"model_type"),Igt.forEach(t),EWo=r(N0,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(N0,"CODE",{});var qgt=s(Jhe);CWo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),wWo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(N0,"CODE",{});var Ngt=s(Yhe);AWo=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),yWo=r(N0,":"),N0.forEach(t),LWo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);zv=n(Te,"LI",{});var W9e=s(zv);Khe=n(W9e,"STRONG",{});var jgt=s(Khe);xWo=r(jgt,"beit"),jgt.forEach(t),$Wo=r(W9e," \u2014 "),GV=n(W9e,"A",{href:!0});var Dgt=s(GV);kWo=r(Dgt,"BeitForImageClassification"),Dgt.forEach(t),SWo=r(W9e," (BEiT model)"),W9e.forEach(t),RWo=i(Te),Wv=n(Te,"LI",{});var Q9e=s(Wv);Zhe=n(Q9e,"STRONG",{});var Ggt=s(Zhe);PWo=r(Ggt,"convnext"),Ggt.forEach(t),BWo=r(Q9e," \u2014 "),OV=n(Q9e,"A",{href:!0});var Ogt=s(OV);IWo=r(Ogt,"ConvNextForImageClassification"),Ogt.forEach(t),qWo=r(Q9e," (ConvNext model)"),Q9e.forEach(t),NWo=i(Te),Qv=n(Te,"LI",{});var H9e=s(Qv);epe=n(H9e,"STRONG",{});var Vgt=s(epe);jWo=r(Vgt,"cvt"),Vgt.forEach(t),DWo=r(H9e," \u2014 "),VV=n(H9e,"A",{href:!0});var Xgt=s(VV);GWo=r(Xgt,"CvtForImageClassification"),Xgt.forEach(t),OWo=r(H9e," (CvT model)"),H9e.forEach(t),VWo=i(Te),Hv=n(Te,"LI",{});var U9e=s(Hv);ope=n(U9e,"STRONG",{});var zgt=s(ope);XWo=r(zgt,"data2vec-vision"),zgt.forEach(t),zWo=r(U9e," \u2014 "),XV=n(U9e,"A",{href:!0});var Wgt=s(XV);WWo=r(Wgt,"Data2VecVisionForImageClassification"),Wgt.forEach(t),QWo=r(U9e," (Data2VecVision model)"),U9e.forEach(t),HWo=i(Te),Ps=n(Te,"LI",{});var A$=s(Ps);rpe=n(A$,"STRONG",{});var Qgt=s(rpe);UWo=r(Qgt,"deit"),Qgt.forEach(t),JWo=r(A$," \u2014 "),zV=n(A$,"A",{href:!0});var Hgt=s(zV);YWo=r(Hgt,"DeiTForImageClassification"),Hgt.forEach(t),KWo=r(A$," or "),WV=n(A$,"A",{href:!0});var Ugt=s(WV);ZWo=r(Ugt,"DeiTForImageClassificationWithTeacher"),Ugt.forEach(t),eQo=r(A$," (DeiT model)"),A$.forEach(t),oQo=i(Te),Uv=n(Te,"LI",{});var J9e=s(Uv);tpe=n(J9e,"STRONG",{});var Jgt=s(tpe);rQo=r(Jgt,"imagegpt"),Jgt.forEach(t),tQo=r(J9e," \u2014 "),QV=n(J9e,"A",{href:!0});var Ygt=s(QV);aQo=r(Ygt,"ImageGPTForImageClassification"),Ygt.forEach(t),nQo=r(J9e," (ImageGPT model)"),J9e.forEach(t),sQo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);ape=n(gf,"STRONG",{});var Kgt=s(ape);lQo=r(Kgt,"perceiver"),Kgt.forEach(t),iQo=r(gf," \u2014 "),HV=n(gf,"A",{href:!0});var Zgt=s(HV);dQo=r(Zgt,"PerceiverForImageClassificationLearned"),Zgt.forEach(t),cQo=r(gf," or "),UV=n(gf,"A",{href:!0});var eht=s(UV);fQo=r(eht,"PerceiverForImageClassificationFourier"),eht.forEach(t),mQo=r(gf," or "),JV=n(gf,"A",{href:!0});var oht=s(JV);gQo=r(oht,"PerceiverForImageClassificationConvProcessing"),oht.forEach(t),hQo=r(gf," (Perceiver model)"),gf.forEach(t),pQo=i(Te),Jv=n(Te,"LI",{});var Y9e=s(Jv);npe=n(Y9e,"STRONG",{});var rht=s(npe);_Qo=r(rht,"poolformer"),rht.forEach(t),uQo=r(Y9e," \u2014 "),YV=n(Y9e,"A",{href:!0});var tht=s(YV);bQo=r(tht,"PoolFormerForImageClassification"),tht.forEach(t),vQo=r(Y9e," (PoolFormer model)"),Y9e.forEach(t),FQo=i(Te),Yv=n(Te,"LI",{});var K9e=s(Yv);spe=n(K9e,"STRONG",{});var aht=s(spe);TQo=r(aht,"regnet"),aht.forEach(t),MQo=r(K9e," \u2014 "),KV=n(K9e,"A",{href:!0});var nht=s(KV);EQo=r(nht,"RegNetForImageClassification"),nht.forEach(t),CQo=r(K9e," (RegNet model)"),K9e.forEach(t),wQo=i(Te),Kv=n(Te,"LI",{});var Z9e=s(Kv);lpe=n(Z9e,"STRONG",{});var sht=s(lpe);AQo=r(sht,"resnet"),sht.forEach(t),yQo=r(Z9e," \u2014 "),ZV=n(Z9e,"A",{href:!0});var lht=s(ZV);LQo=r(lht,"ResNetForImageClassification"),lht.forEach(t),xQo=r(Z9e," (ResNet model)"),Z9e.forEach(t),$Qo=i(Te),Zv=n(Te,"LI",{});var e$e=s(Zv);ipe=n(e$e,"STRONG",{});var iht=s(ipe);kQo=r(iht,"segformer"),iht.forEach(t),SQo=r(e$e," \u2014 "),eX=n(e$e,"A",{href:!0});var dht=s(eX);RQo=r(dht,"SegformerForImageClassification"),dht.forEach(t),PQo=r(e$e," (SegFormer model)"),e$e.forEach(t),BQo=i(Te),e3=n(Te,"LI",{});var o$e=s(e3);dpe=n(o$e,"STRONG",{});var cht=s(dpe);IQo=r(cht,"swin"),cht.forEach(t),qQo=r(o$e," \u2014 "),oX=n(o$e,"A",{href:!0});var fht=s(oX);NQo=r(fht,"SwinForImageClassification"),fht.forEach(t),jQo=r(o$e," (Swin model)"),o$e.forEach(t),DQo=i(Te),o3=n(Te,"LI",{});var r$e=s(o3);cpe=n(r$e,"STRONG",{});var mht=s(cpe);GQo=r(mht,"van"),mht.forEach(t),OQo=r(r$e," \u2014 "),rX=n(r$e,"A",{href:!0});var ght=s(rX);VQo=r(ght,"VanForImageClassification"),ght.forEach(t),XQo=r(r$e," (VAN model)"),r$e.forEach(t),zQo=i(Te),r3=n(Te,"LI",{});var t$e=s(r3);fpe=n(t$e,"STRONG",{});var hht=s(fpe);WQo=r(hht,"vit"),hht.forEach(t),QQo=r(t$e," \u2014 "),tX=n(t$e,"A",{href:!0});var pht=s(tX);HQo=r(pht,"ViTForImageClassification"),pht.forEach(t),UQo=r(t$e," (ViT model)"),t$e.forEach(t),Te.forEach(t),JQo=i(ma),t3=n(ma,"P",{});var a$e=s(t3);YQo=r(a$e,"The model is set in evaluation mode by default using "),mpe=n(a$e,"CODE",{});var _ht=s(mpe);KQo=r(_ht,"model.eval()"),_ht.forEach(t),ZQo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(a$e,"CODE",{});var uht=s(gpe);eHo=r(uht,"model.train()"),uht.forEach(t),a$e.forEach(t),oHo=i(ma),T(a3.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Cqe=i(f),sd=n(f,"H2",{class:!0});var Lje=s(sd);n3=n(Lje,"A",{id:!0,class:!0,href:!0});var bht=s(n3);hpe=n(bht,"SPAN",{});var vht=s(hpe);T(Vy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),rHo=i(Lje),ppe=n(Lje,"SPAN",{});var Fht=s(ppe);tHo=r(Fht,"AutoModelForVision2Seq"),Fht.forEach(t),Lje.forEach(t),wqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Xy.$$.fragment,Zs),aHo=i(Zs),ld=n(Zs,"P",{});var nZ=s(ld);nHo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=n(nZ,"A",{href:!0});var Tht=s(aX);sHo=r(Tht,"from_pretrained()"),Tht.forEach(t),lHo=r(nZ," class method or the "),nX=n(nZ,"A",{href:!0});var Mht=s(nX);iHo=r(Mht,"from_config()"),Mht.forEach(t),dHo=r(nZ,` class
method.`),nZ.forEach(t),cHo=i(Zs),zy=n(Zs,"P",{});var xje=s(zy);fHo=r(xje,"This class cannot be instantiated directly using "),_pe=n(xje,"CODE",{});var Eht=s(_pe);mHo=r(Eht,"__init__()"),Eht.forEach(t),gHo=r(xje," (throws an error)."),xje.forEach(t),hHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var j0=s(_t);T(Wy.$$.fragment,j0),pHo=i(j0),upe=n(j0,"P",{});var Cht=s(upe);_Ho=r(Cht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cht.forEach(t),uHo=i(j0),id=n(j0,"P",{});var sZ=s(id);bHo=r(sZ,`Note:
Loading a model from its configuration file does `),bpe=n(sZ,"STRONG",{});var wht=s(bpe);vHo=r(wht,"not"),wht.forEach(t),FHo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(sZ,"A",{href:!0});var Aht=s(sX);THo=r(Aht,"from_pretrained()"),Aht.forEach(t),MHo=r(sZ," to load the model weights."),sZ.forEach(t),EHo=i(j0),T(s3.$$.fragment,j0),j0.forEach(t),CHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Qy.$$.fragment,ga),wHo=i(ga),vpe=n(ga,"P",{});var yht=s(vpe);AHo=r(yht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yht.forEach(t),yHo=i(ga),Da=n(ga,"P",{});var D0=s(Da);LHo=r(D0,"The model class to instantiate is selected based on the "),Fpe=n(D0,"CODE",{});var Lht=s(Fpe);xHo=r(Lht,"model_type"),Lht.forEach(t),$Ho=r(D0,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(D0,"CODE",{});var xht=s(Tpe);kHo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),SHo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(D0,"CODE",{});var $ht=s(Mpe);RHo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),PHo=r(D0,":"),D0.forEach(t),BHo=i(ga),Epe=n(ga,"UL",{});var kht=s(Epe);l3=n(kht,"LI",{});var n$e=s(l3);Cpe=n(n$e,"STRONG",{});var Sht=s(Cpe);IHo=r(Sht,"vision-encoder-decoder"),Sht.forEach(t),qHo=r(n$e," \u2014 "),lX=n(n$e,"A",{href:!0});var Rht=s(lX);NHo=r(Rht,"VisionEncoderDecoderModel"),Rht.forEach(t),jHo=r(n$e," (Vision Encoder decoder model)"),n$e.forEach(t),kht.forEach(t),DHo=i(ga),i3=n(ga,"P",{});var s$e=s(i3);GHo=r(s$e,"The model is set in evaluation mode by default using "),wpe=n(s$e,"CODE",{});var Pht=s(wpe);OHo=r(Pht,"model.eval()"),Pht.forEach(t),VHo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(s$e,"CODE",{});var Bht=s(Ape);XHo=r(Bht,"model.train()"),Bht.forEach(t),s$e.forEach(t),zHo=i(ga),T(d3.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Aqe=i(f),dd=n(f,"H2",{class:!0});var $je=s(dd);c3=n($je,"A",{id:!0,class:!0,href:!0});var Iht=s(c3);ype=n(Iht,"SPAN",{});var qht=s(ype);T(Hy.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),WHo=i($je),Lpe=n($je,"SPAN",{});var Nht=s(Lpe);QHo=r(Nht,"AutoModelForAudioClassification"),Nht.forEach(t),$je.forEach(t),yqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Uy.$$.fragment,el),HHo=i(el),cd=n(el,"P",{});var lZ=s(cd);UHo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=n(lZ,"A",{href:!0});var jht=s(iX);JHo=r(jht,"from_pretrained()"),jht.forEach(t),YHo=r(lZ," class method or the "),dX=n(lZ,"A",{href:!0});var Dht=s(dX);KHo=r(Dht,"from_config()"),Dht.forEach(t),ZHo=r(lZ,` class
method.`),lZ.forEach(t),eUo=i(el),Jy=n(el,"P",{});var kje=s(Jy);oUo=r(kje,"This class cannot be instantiated directly using "),xpe=n(kje,"CODE",{});var Ght=s(xpe);rUo=r(Ght,"__init__()"),Ght.forEach(t),tUo=r(kje," (throws an error)."),kje.forEach(t),aUo=i(el),ut=n(el,"DIV",{class:!0});var G0=s(ut);T(Yy.$$.fragment,G0),nUo=i(G0),$pe=n(G0,"P",{});var Oht=s($pe);sUo=r(Oht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Oht.forEach(t),lUo=i(G0),fd=n(G0,"P",{});var iZ=s(fd);iUo=r(iZ,`Note:
Loading a model from its configuration file does `),kpe=n(iZ,"STRONG",{});var Vht=s(kpe);dUo=r(Vht,"not"),Vht.forEach(t),cUo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(iZ,"A",{href:!0});var Xht=s(cX);fUo=r(Xht,"from_pretrained()"),Xht.forEach(t),mUo=r(iZ," to load the model weights."),iZ.forEach(t),gUo=i(G0),T(f3.$$.fragment,G0),G0.forEach(t),hUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Ky.$$.fragment,ha),pUo=i(ha),Spe=n(ha,"P",{});var zht=s(Spe);_Uo=r(zht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zht.forEach(t),uUo=i(ha),Ga=n(ha,"P",{});var O0=s(Ga);bUo=r(O0,"The model class to instantiate is selected based on the "),Rpe=n(O0,"CODE",{});var Wht=s(Rpe);vUo=r(Wht,"model_type"),Wht.forEach(t),FUo=r(O0,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(O0,"CODE",{});var Qht=s(Ppe);TUo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),MUo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(O0,"CODE",{});var Hht=s(Bpe);EUo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),CUo=r(O0,":"),O0.forEach(t),wUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);m3=n(Oe,"LI",{});var l$e=s(m3);Ipe=n(l$e,"STRONG",{});var Uht=s(Ipe);AUo=r(Uht,"data2vec-audio"),Uht.forEach(t),yUo=r(l$e," \u2014 "),fX=n(l$e,"A",{href:!0});var Jht=s(fX);LUo=r(Jht,"Data2VecAudioForSequenceClassification"),Jht.forEach(t),xUo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),$Uo=i(Oe),g3=n(Oe,"LI",{});var i$e=s(g3);qpe=n(i$e,"STRONG",{});var Yht=s(qpe);kUo=r(Yht,"hubert"),Yht.forEach(t),SUo=r(i$e," \u2014 "),mX=n(i$e,"A",{href:!0});var Kht=s(mX);RUo=r(Kht,"HubertForSequenceClassification"),Kht.forEach(t),PUo=r(i$e," (Hubert model)"),i$e.forEach(t),BUo=i(Oe),h3=n(Oe,"LI",{});var d$e=s(h3);Npe=n(d$e,"STRONG",{});var Zht=s(Npe);IUo=r(Zht,"sew"),Zht.forEach(t),qUo=r(d$e," \u2014 "),gX=n(d$e,"A",{href:!0});var ept=s(gX);NUo=r(ept,"SEWForSequenceClassification"),ept.forEach(t),jUo=r(d$e," (SEW model)"),d$e.forEach(t),DUo=i(Oe),p3=n(Oe,"LI",{});var c$e=s(p3);jpe=n(c$e,"STRONG",{});var opt=s(jpe);GUo=r(opt,"sew-d"),opt.forEach(t),OUo=r(c$e," \u2014 "),hX=n(c$e,"A",{href:!0});var rpt=s(hX);VUo=r(rpt,"SEWDForSequenceClassification"),rpt.forEach(t),XUo=r(c$e," (SEW-D model)"),c$e.forEach(t),zUo=i(Oe),_3=n(Oe,"LI",{});var f$e=s(_3);Dpe=n(f$e,"STRONG",{});var tpt=s(Dpe);WUo=r(tpt,"unispeech"),tpt.forEach(t),QUo=r(f$e," \u2014 "),pX=n(f$e,"A",{href:!0});var apt=s(pX);HUo=r(apt,"UniSpeechForSequenceClassification"),apt.forEach(t),UUo=r(f$e," (UniSpeech model)"),f$e.forEach(t),JUo=i(Oe),u3=n(Oe,"LI",{});var m$e=s(u3);Gpe=n(m$e,"STRONG",{});var npt=s(Gpe);YUo=r(npt,"unispeech-sat"),npt.forEach(t),KUo=r(m$e," \u2014 "),_X=n(m$e,"A",{href:!0});var spt=s(_X);ZUo=r(spt,"UniSpeechSatForSequenceClassification"),spt.forEach(t),eJo=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),oJo=i(Oe),b3=n(Oe,"LI",{});var g$e=s(b3);Ope=n(g$e,"STRONG",{});var lpt=s(Ope);rJo=r(lpt,"wav2vec2"),lpt.forEach(t),tJo=r(g$e," \u2014 "),uX=n(g$e,"A",{href:!0});var ipt=s(uX);aJo=r(ipt,"Wav2Vec2ForSequenceClassification"),ipt.forEach(t),nJo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),sJo=i(Oe),v3=n(Oe,"LI",{});var h$e=s(v3);Vpe=n(h$e,"STRONG",{});var dpt=s(Vpe);lJo=r(dpt,"wav2vec2-conformer"),dpt.forEach(t),iJo=r(h$e," \u2014 "),bX=n(h$e,"A",{href:!0});var cpt=s(bX);dJo=r(cpt,"Wav2Vec2ConformerForSequenceClassification"),cpt.forEach(t),cJo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),fJo=i(Oe),F3=n(Oe,"LI",{});var p$e=s(F3);Xpe=n(p$e,"STRONG",{});var fpt=s(Xpe);mJo=r(fpt,"wavlm"),fpt.forEach(t),gJo=r(p$e," \u2014 "),vX=n(p$e,"A",{href:!0});var mpt=s(vX);hJo=r(mpt,"WavLMForSequenceClassification"),mpt.forEach(t),pJo=r(p$e," (WavLM model)"),p$e.forEach(t),Oe.forEach(t),_Jo=i(ha),T3=n(ha,"P",{});var _$e=s(T3);uJo=r(_$e,"The model is set in evaluation mode by default using "),zpe=n(_$e,"CODE",{});var gpt=s(zpe);bJo=r(gpt,"model.eval()"),gpt.forEach(t),vJo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(_$e,"CODE",{});var hpt=s(Wpe);FJo=r(hpt,"model.train()"),hpt.forEach(t),_$e.forEach(t),TJo=i(ha),T(M3.$$.fragment,ha),ha.forEach(t),el.forEach(t),Lqe=i(f),md=n(f,"H2",{class:!0});var Sje=s(md);E3=n(Sje,"A",{id:!0,class:!0,href:!0});var ppt=s(E3);Qpe=n(ppt,"SPAN",{});var _pt=s(Qpe);T(Zy.$$.fragment,_pt),_pt.forEach(t),ppt.forEach(t),MJo=i(Sje),Hpe=n(Sje,"SPAN",{});var upt=s(Hpe);EJo=r(upt,"AutoModelForAudioFrameClassification"),upt.forEach(t),Sje.forEach(t),xqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(eL.$$.fragment,ol),CJo=i(ol),gd=n(ol,"P",{});var dZ=s(gd);wJo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=n(dZ,"A",{href:!0});var bpt=s(FX);AJo=r(bpt,"from_pretrained()"),bpt.forEach(t),yJo=r(dZ," class method or the "),TX=n(dZ,"A",{href:!0});var vpt=s(TX);LJo=r(vpt,"from_config()"),vpt.forEach(t),xJo=r(dZ,` class
method.`),dZ.forEach(t),$Jo=i(ol),oL=n(ol,"P",{});var Rje=s(oL);kJo=r(Rje,"This class cannot be instantiated directly using "),Upe=n(Rje,"CODE",{});var Fpt=s(Upe);SJo=r(Fpt,"__init__()"),Fpt.forEach(t),RJo=r(Rje," (throws an error)."),Rje.forEach(t),PJo=i(ol),bt=n(ol,"DIV",{class:!0});var V0=s(bt);T(rL.$$.fragment,V0),BJo=i(V0),Jpe=n(V0,"P",{});var Tpt=s(Jpe);IJo=r(Tpt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tpt.forEach(t),qJo=i(V0),hd=n(V0,"P",{});var cZ=s(hd);NJo=r(cZ,`Note:
Loading a model from its configuration file does `),Ype=n(cZ,"STRONG",{});var Mpt=s(Ype);jJo=r(Mpt,"not"),Mpt.forEach(t),DJo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(cZ,"A",{href:!0});var Ept=s(MX);GJo=r(Ept,"from_pretrained()"),Ept.forEach(t),OJo=r(cZ," to load the model weights."),cZ.forEach(t),VJo=i(V0),T(C3.$$.fragment,V0),V0.forEach(t),XJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(tL.$$.fragment,pa),zJo=i(pa),Kpe=n(pa,"P",{});var Cpt=s(Kpe);WJo=r(Cpt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Cpt.forEach(t),QJo=i(pa),Oa=n(pa,"P",{});var X0=s(Oa);HJo=r(X0,"The model class to instantiate is selected based on the "),Zpe=n(X0,"CODE",{});var wpt=s(Zpe);UJo=r(wpt,"model_type"),wpt.forEach(t),JJo=r(X0,` property of the config object (either
passed as an argument or loaded from `),e_e=n(X0,"CODE",{});var Apt=s(e_e);YJo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),KJo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(X0,"CODE",{});var ypt=s(o_e);ZJo=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),eYo=r(X0,":"),X0.forEach(t),oYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);w3=n(rl,"LI",{});var u$e=s(w3);r_e=n(u$e,"STRONG",{});var Lpt=s(r_e);rYo=r(Lpt,"data2vec-audio"),Lpt.forEach(t),tYo=r(u$e," \u2014 "),EX=n(u$e,"A",{href:!0});var xpt=s(EX);aYo=r(xpt,"Data2VecAudioForAudioFrameClassification"),xpt.forEach(t),nYo=r(u$e," (Data2VecAudio model)"),u$e.forEach(t),sYo=i(rl),A3=n(rl,"LI",{});var b$e=s(A3);t_e=n(b$e,"STRONG",{});var $pt=s(t_e);lYo=r($pt,"unispeech-sat"),$pt.forEach(t),iYo=r(b$e," \u2014 "),CX=n(b$e,"A",{href:!0});var kpt=s(CX);dYo=r(kpt,"UniSpeechSatForAudioFrameClassification"),kpt.forEach(t),cYo=r(b$e," (UniSpeechSat model)"),b$e.forEach(t),fYo=i(rl),y3=n(rl,"LI",{});var v$e=s(y3);a_e=n(v$e,"STRONG",{});var Spt=s(a_e);mYo=r(Spt,"wav2vec2"),Spt.forEach(t),gYo=r(v$e," \u2014 "),wX=n(v$e,"A",{href:!0});var Rpt=s(wX);hYo=r(Rpt,"Wav2Vec2ForAudioFrameClassification"),Rpt.forEach(t),pYo=r(v$e," (Wav2Vec2 model)"),v$e.forEach(t),_Yo=i(rl),L3=n(rl,"LI",{});var F$e=s(L3);n_e=n(F$e,"STRONG",{});var Ppt=s(n_e);uYo=r(Ppt,"wav2vec2-conformer"),Ppt.forEach(t),bYo=r(F$e," \u2014 "),AX=n(F$e,"A",{href:!0});var Bpt=s(AX);vYo=r(Bpt,"Wav2Vec2ConformerForAudioFrameClassification"),Bpt.forEach(t),FYo=r(F$e," (Wav2Vec2-Conformer model)"),F$e.forEach(t),TYo=i(rl),x3=n(rl,"LI",{});var T$e=s(x3);s_e=n(T$e,"STRONG",{});var Ipt=s(s_e);MYo=r(Ipt,"wavlm"),Ipt.forEach(t),EYo=r(T$e," \u2014 "),yX=n(T$e,"A",{href:!0});var qpt=s(yX);CYo=r(qpt,"WavLMForAudioFrameClassification"),qpt.forEach(t),wYo=r(T$e," (WavLM model)"),T$e.forEach(t),rl.forEach(t),AYo=i(pa),$3=n(pa,"P",{});var M$e=s($3);yYo=r(M$e,"The model is set in evaluation mode by default using "),l_e=n(M$e,"CODE",{});var Npt=s(l_e);LYo=r(Npt,"model.eval()"),Npt.forEach(t),xYo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(M$e,"CODE",{});var jpt=s(i_e);$Yo=r(jpt,"model.train()"),jpt.forEach(t),M$e.forEach(t),kYo=i(pa),T(k3.$$.fragment,pa),pa.forEach(t),ol.forEach(t),$qe=i(f),pd=n(f,"H2",{class:!0});var Pje=s(pd);S3=n(Pje,"A",{id:!0,class:!0,href:!0});var Dpt=s(S3);d_e=n(Dpt,"SPAN",{});var Gpt=s(d_e);T(aL.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),SYo=i(Pje),c_e=n(Pje,"SPAN",{});var Opt=s(c_e);RYo=r(Opt,"AutoModelForCTC"),Opt.forEach(t),Pje.forEach(t),kqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(nL.$$.fragment,tl),PYo=i(tl),_d=n(tl,"P",{});var fZ=s(_d);BYo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=n(fZ,"A",{href:!0});var Vpt=s(LX);IYo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),qYo=r(fZ," class method or the "),xX=n(fZ,"A",{href:!0});var Xpt=s(xX);NYo=r(Xpt,"from_config()"),Xpt.forEach(t),jYo=r(fZ,` class
method.`),fZ.forEach(t),DYo=i(tl),sL=n(tl,"P",{});var Bje=s(sL);GYo=r(Bje,"This class cannot be instantiated directly using "),f_e=n(Bje,"CODE",{});var zpt=s(f_e);OYo=r(zpt,"__init__()"),zpt.forEach(t),VYo=r(Bje," (throws an error)."),Bje.forEach(t),XYo=i(tl),vt=n(tl,"DIV",{class:!0});var z0=s(vt);T(lL.$$.fragment,z0),zYo=i(z0),m_e=n(z0,"P",{});var Wpt=s(m_e);WYo=r(Wpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Wpt.forEach(t),QYo=i(z0),ud=n(z0,"P",{});var mZ=s(ud);HYo=r(mZ,`Note:
Loading a model from its configuration file does `),g_e=n(mZ,"STRONG",{});var Qpt=s(g_e);UYo=r(Qpt,"not"),Qpt.forEach(t),JYo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(mZ,"A",{href:!0});var Hpt=s($X);YYo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),KYo=r(mZ," to load the model weights."),mZ.forEach(t),ZYo=i(z0),T(R3.$$.fragment,z0),z0.forEach(t),eKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(iL.$$.fragment,_a),oKo=i(_a),h_e=n(_a,"P",{});var Upt=s(h_e);rKo=r(Upt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Upt.forEach(t),tKo=i(_a),Va=n(_a,"P",{});var W0=s(Va);aKo=r(W0,"The model class to instantiate is selected based on the "),p_e=n(W0,"CODE",{});var Jpt=s(p_e);nKo=r(Jpt,"model_type"),Jpt.forEach(t),sKo=r(W0,` property of the config object (either
passed as an argument or loaded from `),__e=n(W0,"CODE",{});var Ypt=s(__e);lKo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),iKo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(W0,"CODE",{});var Kpt=s(u_e);dKo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),cKo=r(W0,":"),W0.forEach(t),fKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);P3=n(Ve,"LI",{});var E$e=s(P3);b_e=n(E$e,"STRONG",{});var Zpt=s(b_e);mKo=r(Zpt,"data2vec-audio"),Zpt.forEach(t),gKo=r(E$e," \u2014 "),kX=n(E$e,"A",{href:!0});var e_t=s(kX);hKo=r(e_t,"Data2VecAudioForCTC"),e_t.forEach(t),pKo=r(E$e," (Data2VecAudio model)"),E$e.forEach(t),_Ko=i(Ve),B3=n(Ve,"LI",{});var C$e=s(B3);v_e=n(C$e,"STRONG",{});var o_t=s(v_e);uKo=r(o_t,"hubert"),o_t.forEach(t),bKo=r(C$e," \u2014 "),SX=n(C$e,"A",{href:!0});var r_t=s(SX);vKo=r(r_t,"HubertForCTC"),r_t.forEach(t),FKo=r(C$e," (Hubert model)"),C$e.forEach(t),TKo=i(Ve),I3=n(Ve,"LI",{});var w$e=s(I3);F_e=n(w$e,"STRONG",{});var t_t=s(F_e);MKo=r(t_t,"sew"),t_t.forEach(t),EKo=r(w$e," \u2014 "),RX=n(w$e,"A",{href:!0});var a_t=s(RX);CKo=r(a_t,"SEWForCTC"),a_t.forEach(t),wKo=r(w$e," (SEW model)"),w$e.forEach(t),AKo=i(Ve),q3=n(Ve,"LI",{});var A$e=s(q3);T_e=n(A$e,"STRONG",{});var n_t=s(T_e);yKo=r(n_t,"sew-d"),n_t.forEach(t),LKo=r(A$e," \u2014 "),PX=n(A$e,"A",{href:!0});var s_t=s(PX);xKo=r(s_t,"SEWDForCTC"),s_t.forEach(t),$Ko=r(A$e," (SEW-D model)"),A$e.forEach(t),kKo=i(Ve),N3=n(Ve,"LI",{});var y$e=s(N3);M_e=n(y$e,"STRONG",{});var l_t=s(M_e);SKo=r(l_t,"unispeech"),l_t.forEach(t),RKo=r(y$e," \u2014 "),BX=n(y$e,"A",{href:!0});var i_t=s(BX);PKo=r(i_t,"UniSpeechForCTC"),i_t.forEach(t),BKo=r(y$e," (UniSpeech model)"),y$e.forEach(t),IKo=i(Ve),j3=n(Ve,"LI",{});var L$e=s(j3);E_e=n(L$e,"STRONG",{});var d_t=s(E_e);qKo=r(d_t,"unispeech-sat"),d_t.forEach(t),NKo=r(L$e," \u2014 "),IX=n(L$e,"A",{href:!0});var c_t=s(IX);jKo=r(c_t,"UniSpeechSatForCTC"),c_t.forEach(t),DKo=r(L$e," (UniSpeechSat model)"),L$e.forEach(t),GKo=i(Ve),D3=n(Ve,"LI",{});var x$e=s(D3);C_e=n(x$e,"STRONG",{});var f_t=s(C_e);OKo=r(f_t,"wav2vec2"),f_t.forEach(t),VKo=r(x$e," \u2014 "),qX=n(x$e,"A",{href:!0});var m_t=s(qX);XKo=r(m_t,"Wav2Vec2ForCTC"),m_t.forEach(t),zKo=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),WKo=i(Ve),G3=n(Ve,"LI",{});var $$e=s(G3);w_e=n($$e,"STRONG",{});var g_t=s(w_e);QKo=r(g_t,"wav2vec2-conformer"),g_t.forEach(t),HKo=r($$e," \u2014 "),NX=n($$e,"A",{href:!0});var h_t=s(NX);UKo=r(h_t,"Wav2Vec2ConformerForCTC"),h_t.forEach(t),JKo=r($$e," (Wav2Vec2-Conformer model)"),$$e.forEach(t),YKo=i(Ve),O3=n(Ve,"LI",{});var k$e=s(O3);A_e=n(k$e,"STRONG",{});var p_t=s(A_e);KKo=r(p_t,"wavlm"),p_t.forEach(t),ZKo=r(k$e," \u2014 "),jX=n(k$e,"A",{href:!0});var __t=s(jX);eZo=r(__t,"WavLMForCTC"),__t.forEach(t),oZo=r(k$e," (WavLM model)"),k$e.forEach(t),Ve.forEach(t),rZo=i(_a),V3=n(_a,"P",{});var S$e=s(V3);tZo=r(S$e,"The model is set in evaluation mode by default using "),y_e=n(S$e,"CODE",{});var u_t=s(y_e);aZo=r(u_t,"model.eval()"),u_t.forEach(t),nZo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(S$e,"CODE",{});var b_t=s(L_e);sZo=r(b_t,"model.train()"),b_t.forEach(t),S$e.forEach(t),lZo=i(_a),T(X3.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Sqe=i(f),bd=n(f,"H2",{class:!0});var Ije=s(bd);z3=n(Ije,"A",{id:!0,class:!0,href:!0});var v_t=s(z3);x_e=n(v_t,"SPAN",{});var F_t=s(x_e);T(dL.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),iZo=i(Ije),$_e=n(Ije,"SPAN",{});var T_t=s($_e);dZo=r(T_t,"AutoModelForSpeechSeq2Seq"),T_t.forEach(t),Ije.forEach(t),Rqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(cL.$$.fragment,al),cZo=i(al),vd=n(al,"P",{});var gZ=s(vd);fZo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=n(gZ,"A",{href:!0});var M_t=s(DX);mZo=r(M_t,"from_pretrained()"),M_t.forEach(t),gZo=r(gZ," class method or the "),GX=n(gZ,"A",{href:!0});var E_t=s(GX);hZo=r(E_t,"from_config()"),E_t.forEach(t),pZo=r(gZ,` class
method.`),gZ.forEach(t),_Zo=i(al),fL=n(al,"P",{});var qje=s(fL);uZo=r(qje,"This class cannot be instantiated directly using "),k_e=n(qje,"CODE",{});var C_t=s(k_e);bZo=r(C_t,"__init__()"),C_t.forEach(t),vZo=r(qje," (throws an error)."),qje.forEach(t),FZo=i(al),Ft=n(al,"DIV",{class:!0});var Q0=s(Ft);T(mL.$$.fragment,Q0),TZo=i(Q0),S_e=n(Q0,"P",{});var w_t=s(S_e);MZo=r(w_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),w_t.forEach(t),EZo=i(Q0),Fd=n(Q0,"P",{});var hZ=s(Fd);CZo=r(hZ,`Note:
Loading a model from its configuration file does `),R_e=n(hZ,"STRONG",{});var A_t=s(R_e);wZo=r(A_t,"not"),A_t.forEach(t),AZo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(hZ,"A",{href:!0});var y_t=s(OX);yZo=r(y_t,"from_pretrained()"),y_t.forEach(t),LZo=r(hZ," to load the model weights."),hZ.forEach(t),xZo=i(Q0),T(W3.$$.fragment,Q0),Q0.forEach(t),$Zo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(gL.$$.fragment,ua),kZo=i(ua),P_e=n(ua,"P",{});var L_t=s(P_e);SZo=r(L_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),L_t.forEach(t),RZo=i(ua),Xa=n(ua,"P",{});var H0=s(Xa);PZo=r(H0,"The model class to instantiate is selected based on the "),B_e=n(H0,"CODE",{});var x_t=s(B_e);BZo=r(x_t,"model_type"),x_t.forEach(t),IZo=r(H0,` property of the config object (either
passed as an argument or loaded from `),I_e=n(H0,"CODE",{});var $_t=s(I_e);qZo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),NZo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(H0,"CODE",{});var k_t=s(q_e);jZo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),DZo=r(H0,":"),H0.forEach(t),GZo=i(ua),hL=n(ua,"UL",{});var Nje=s(hL);Q3=n(Nje,"LI",{});var R$e=s(Q3);N_e=n(R$e,"STRONG",{});var S_t=s(N_e);OZo=r(S_t,"speech-encoder-decoder"),S_t.forEach(t),VZo=r(R$e," \u2014 "),VX=n(R$e,"A",{href:!0});var R_t=s(VX);XZo=r(R_t,"SpeechEncoderDecoderModel"),R_t.forEach(t),zZo=r(R$e," (Speech Encoder decoder model)"),R$e.forEach(t),WZo=i(Nje),H3=n(Nje,"LI",{});var P$e=s(H3);j_e=n(P$e,"STRONG",{});var P_t=s(j_e);QZo=r(P_t,"speech_to_text"),P_t.forEach(t),HZo=r(P$e," \u2014 "),XX=n(P$e,"A",{href:!0});var B_t=s(XX);UZo=r(B_t,"Speech2TextForConditionalGeneration"),B_t.forEach(t),JZo=r(P$e," (Speech2Text model)"),P$e.forEach(t),Nje.forEach(t),YZo=i(ua),U3=n(ua,"P",{});var B$e=s(U3);KZo=r(B$e,"The model is set in evaluation mode by default using "),D_e=n(B$e,"CODE",{});var I_t=s(D_e);ZZo=r(I_t,"model.eval()"),I_t.forEach(t),eer=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(B$e,"CODE",{});var q_t=s(G_e);oer=r(q_t,"model.train()"),q_t.forEach(t),B$e.forEach(t),rer=i(ua),T(J3.$$.fragment,ua),ua.forEach(t),al.forEach(t),Pqe=i(f),Td=n(f,"H2",{class:!0});var jje=s(Td);Y3=n(jje,"A",{id:!0,class:!0,href:!0});var N_t=s(Y3);O_e=n(N_t,"SPAN",{});var j_t=s(O_e);T(pL.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),ter=i(jje),V_e=n(jje,"SPAN",{});var D_t=s(V_e);aer=r(D_t,"AutoModelForAudioXVector"),D_t.forEach(t),jje.forEach(t),Bqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(_L.$$.fragment,nl),ner=i(nl),Md=n(nl,"P",{});var pZ=s(Md);ser=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=n(pZ,"A",{href:!0});var G_t=s(zX);ler=r(G_t,"from_pretrained()"),G_t.forEach(t),ier=r(pZ," class method or the "),WX=n(pZ,"A",{href:!0});var O_t=s(WX);der=r(O_t,"from_config()"),O_t.forEach(t),cer=r(pZ,` class
method.`),pZ.forEach(t),fer=i(nl),uL=n(nl,"P",{});var Dje=s(uL);mer=r(Dje,"This class cannot be instantiated directly using "),X_e=n(Dje,"CODE",{});var V_t=s(X_e);ger=r(V_t,"__init__()"),V_t.forEach(t),her=r(Dje," (throws an error)."),Dje.forEach(t),per=i(nl),Tt=n(nl,"DIV",{class:!0});var U0=s(Tt);T(bL.$$.fragment,U0),_er=i(U0),z_e=n(U0,"P",{});var X_t=s(z_e);uer=r(X_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),X_t.forEach(t),ber=i(U0),Ed=n(U0,"P",{});var _Z=s(Ed);ver=r(_Z,`Note:
Loading a model from its configuration file does `),W_e=n(_Z,"STRONG",{});var z_t=s(W_e);Fer=r(z_t,"not"),z_t.forEach(t),Ter=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(_Z,"A",{href:!0});var W_t=s(QX);Mer=r(W_t,"from_pretrained()"),W_t.forEach(t),Eer=r(_Z," to load the model weights."),_Z.forEach(t),Cer=i(U0),T(K3.$$.fragment,U0),U0.forEach(t),wer=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(vL.$$.fragment,ba),Aer=i(ba),Q_e=n(ba,"P",{});var Q_t=s(Q_e);yer=r(Q_t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Q_t.forEach(t),Ler=i(ba),za=n(ba,"P",{});var J0=s(za);xer=r(J0,"The model class to instantiate is selected based on the "),H_e=n(J0,"CODE",{});var H_t=s(H_e);$er=r(H_t,"model_type"),H_t.forEach(t),ker=r(J0,` property of the config object (either
passed as an argument or loaded from `),U_e=n(J0,"CODE",{});var U_t=s(U_e);Ser=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),Rer=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(J0,"CODE",{});var J_t=s(J_e);Per=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Ber=r(J0,":"),J0.forEach(t),Ier=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);Z3=n(sl,"LI",{});var I$e=s(Z3);Y_e=n(I$e,"STRONG",{});var Y_t=s(Y_e);qer=r(Y_t,"data2vec-audio"),Y_t.forEach(t),Ner=r(I$e," \u2014 "),HX=n(I$e,"A",{href:!0});var K_t=s(HX);jer=r(K_t,"Data2VecAudioForXVector"),K_t.forEach(t),Der=r(I$e," (Data2VecAudio model)"),I$e.forEach(t),Ger=i(sl),eF=n(sl,"LI",{});var q$e=s(eF);K_e=n(q$e,"STRONG",{});var Z_t=s(K_e);Oer=r(Z_t,"unispeech-sat"),Z_t.forEach(t),Ver=r(q$e," \u2014 "),UX=n(q$e,"A",{href:!0});var eut=s(UX);Xer=r(eut,"UniSpeechSatForXVector"),eut.forEach(t),zer=r(q$e," (UniSpeechSat model)"),q$e.forEach(t),Wer=i(sl),oF=n(sl,"LI",{});var N$e=s(oF);Z_e=n(N$e,"STRONG",{});var out=s(Z_e);Qer=r(out,"wav2vec2"),out.forEach(t),Her=r(N$e," \u2014 "),JX=n(N$e,"A",{href:!0});var rut=s(JX);Uer=r(rut,"Wav2Vec2ForXVector"),rut.forEach(t),Jer=r(N$e," (Wav2Vec2 model)"),N$e.forEach(t),Yer=i(sl),rF=n(sl,"LI",{});var j$e=s(rF);eue=n(j$e,"STRONG",{});var tut=s(eue);Ker=r(tut,"wav2vec2-conformer"),tut.forEach(t),Zer=r(j$e," \u2014 "),YX=n(j$e,"A",{href:!0});var aut=s(YX);eor=r(aut,"Wav2Vec2ConformerForXVector"),aut.forEach(t),oor=r(j$e," (Wav2Vec2-Conformer model)"),j$e.forEach(t),ror=i(sl),tF=n(sl,"LI",{});var D$e=s(tF);oue=n(D$e,"STRONG",{});var nut=s(oue);tor=r(nut,"wavlm"),nut.forEach(t),aor=r(D$e," \u2014 "),KX=n(D$e,"A",{href:!0});var sut=s(KX);nor=r(sut,"WavLMForXVector"),sut.forEach(t),sor=r(D$e," (WavLM model)"),D$e.forEach(t),sl.forEach(t),lor=i(ba),aF=n(ba,"P",{});var G$e=s(aF);ior=r(G$e,"The model is set in evaluation mode by default using "),rue=n(G$e,"CODE",{});var lut=s(rue);dor=r(lut,"model.eval()"),lut.forEach(t),cor=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(G$e,"CODE",{});var iut=s(tue);mor=r(iut,"model.train()"),iut.forEach(t),G$e.forEach(t),gor=i(ba),T(nF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Iqe=i(f),Cd=n(f,"H2",{class:!0});var Gje=s(Cd);sF=n(Gje,"A",{id:!0,class:!0,href:!0});var dut=s(sF);aue=n(dut,"SPAN",{});var cut=s(aue);T(FL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),hor=i(Gje),nue=n(Gje,"SPAN",{});var fut=s(nue);por=r(fut,"AutoModelForMaskedImageModeling"),fut.forEach(t),Gje.forEach(t),qqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(TL.$$.fragment,ll),_or=i(ll),wd=n(ll,"P",{});var uZ=s(wd);uor=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=n(uZ,"A",{href:!0});var mut=s(ZX);bor=r(mut,"from_pretrained()"),mut.forEach(t),vor=r(uZ," class method or the "),ez=n(uZ,"A",{href:!0});var gut=s(ez);For=r(gut,"from_config()"),gut.forEach(t),Tor=r(uZ,` class
method.`),uZ.forEach(t),Mor=i(ll),ML=n(ll,"P",{});var Oje=s(ML);Eor=r(Oje,"This class cannot be instantiated directly using "),sue=n(Oje,"CODE",{});var hut=s(sue);Cor=r(hut,"__init__()"),hut.forEach(t),wor=r(Oje," (throws an error)."),Oje.forEach(t),Aor=i(ll),Mt=n(ll,"DIV",{class:!0});var Y0=s(Mt);T(EL.$$.fragment,Y0),yor=i(Y0),lue=n(Y0,"P",{});var put=s(lue);Lor=r(put,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),put.forEach(t),xor=i(Y0),Ad=n(Y0,"P",{});var bZ=s(Ad);$or=r(bZ,`Note:
Loading a model from its configuration file does `),iue=n(bZ,"STRONG",{});var _ut=s(iue);kor=r(_ut,"not"),_ut.forEach(t),Sor=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(bZ,"A",{href:!0});var uut=s(oz);Ror=r(uut,"from_pretrained()"),uut.forEach(t),Por=r(bZ," to load the model weights."),bZ.forEach(t),Bor=i(Y0),T(lF.$$.fragment,Y0),Y0.forEach(t),Ior=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(CL.$$.fragment,va),qor=i(va),due=n(va,"P",{});var but=s(due);Nor=r(but,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),but.forEach(t),jor=i(va),Wa=n(va,"P",{});var K0=s(Wa);Dor=r(K0,"The model class to instantiate is selected based on the "),cue=n(K0,"CODE",{});var vut=s(cue);Gor=r(vut,"model_type"),vut.forEach(t),Oor=r(K0,` property of the config object (either
passed as an argument or loaded from `),fue=n(K0,"CODE",{});var Fut=s(fue);Vor=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Xor=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(K0,"CODE",{});var Tut=s(mue);zor=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Wor=r(K0,":"),K0.forEach(t),Qor=i(va),yd=n(va,"UL",{});var vZ=s(yd);iF=n(vZ,"LI",{});var O$e=s(iF);gue=n(O$e,"STRONG",{});var Mut=s(gue);Hor=r(Mut,"deit"),Mut.forEach(t),Uor=r(O$e," \u2014 "),rz=n(O$e,"A",{href:!0});var Eut=s(rz);Jor=r(Eut,"DeiTForMaskedImageModeling"),Eut.forEach(t),Yor=r(O$e," (DeiT model)"),O$e.forEach(t),Kor=i(vZ),dF=n(vZ,"LI",{});var V$e=s(dF);hue=n(V$e,"STRONG",{});var Cut=s(hue);Zor=r(Cut,"swin"),Cut.forEach(t),err=r(V$e," \u2014 "),tz=n(V$e,"A",{href:!0});var wut=s(tz);orr=r(wut,"SwinForMaskedImageModeling"),wut.forEach(t),rrr=r(V$e," (Swin model)"),V$e.forEach(t),trr=i(vZ),cF=n(vZ,"LI",{});var X$e=s(cF);pue=n(X$e,"STRONG",{});var Aut=s(pue);arr=r(Aut,"vit"),Aut.forEach(t),nrr=r(X$e," \u2014 "),az=n(X$e,"A",{href:!0});var yut=s(az);srr=r(yut,"ViTForMaskedImageModeling"),yut.forEach(t),lrr=r(X$e," (ViT model)"),X$e.forEach(t),vZ.forEach(t),irr=i(va),fF=n(va,"P",{});var z$e=s(fF);drr=r(z$e,"The model is set in evaluation mode by default using "),_ue=n(z$e,"CODE",{});var Lut=s(_ue);crr=r(Lut,"model.eval()"),Lut.forEach(t),frr=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(z$e,"CODE",{});var xut=s(uue);mrr=r(xut,"model.train()"),xut.forEach(t),z$e.forEach(t),grr=i(va),T(mF.$$.fragment,va),va.forEach(t),ll.forEach(t),Nqe=i(f),Ld=n(f,"H2",{class:!0});var Vje=s(Ld);gF=n(Vje,"A",{id:!0,class:!0,href:!0});var $ut=s(gF);bue=n($ut,"SPAN",{});var kut=s(bue);T(wL.$$.fragment,kut),kut.forEach(t),$ut.forEach(t),hrr=i(Vje),vue=n(Vje,"SPAN",{});var Sut=s(vue);prr=r(Sut,"AutoModelForObjectDetection"),Sut.forEach(t),Vje.forEach(t),jqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(AL.$$.fragment,il),_rr=i(il),xd=n(il,"P",{});var FZ=s(xd);urr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=n(FZ,"A",{href:!0});var Rut=s(nz);brr=r(Rut,"from_pretrained()"),Rut.forEach(t),vrr=r(FZ," class method or the "),sz=n(FZ,"A",{href:!0});var Put=s(sz);Frr=r(Put,"from_config()"),Put.forEach(t),Trr=r(FZ,` class
method.`),FZ.forEach(t),Mrr=i(il),yL=n(il,"P",{});var Xje=s(yL);Err=r(Xje,"This class cannot be instantiated directly using "),Fue=n(Xje,"CODE",{});var But=s(Fue);Crr=r(But,"__init__()"),But.forEach(t),wrr=r(Xje," (throws an error)."),Xje.forEach(t),Arr=i(il),Et=n(il,"DIV",{class:!0});var Z0=s(Et);T(LL.$$.fragment,Z0),yrr=i(Z0),Tue=n(Z0,"P",{});var Iut=s(Tue);Lrr=r(Iut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Iut.forEach(t),xrr=i(Z0),$d=n(Z0,"P",{});var TZ=s($d);$rr=r(TZ,`Note:
Loading a model from its configuration file does `),Mue=n(TZ,"STRONG",{});var qut=s(Mue);krr=r(qut,"not"),qut.forEach(t),Srr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(TZ,"A",{href:!0});var Nut=s(lz);Rrr=r(Nut,"from_pretrained()"),Nut.forEach(t),Prr=r(TZ," to load the model weights."),TZ.forEach(t),Brr=i(Z0),T(hF.$$.fragment,Z0),Z0.forEach(t),Irr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(xL.$$.fragment,Fa),qrr=i(Fa),Eue=n(Fa,"P",{});var jut=s(Eue);Nrr=r(jut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jut.forEach(t),jrr=i(Fa),Qa=n(Fa,"P",{});var eA=s(Qa);Drr=r(eA,"The model class to instantiate is selected based on the "),Cue=n(eA,"CODE",{});var Dut=s(Cue);Grr=r(Dut,"model_type"),Dut.forEach(t),Orr=r(eA,` property of the config object (either
passed as an argument or loaded from `),wue=n(eA,"CODE",{});var Gut=s(wue);Vrr=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Xrr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(eA,"CODE",{});var Out=s(Aue);zrr=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),Wrr=r(eA,":"),eA.forEach(t),Qrr=i(Fa),$L=n(Fa,"UL",{});var zje=s($L);pF=n(zje,"LI",{});var W$e=s(pF);yue=n(W$e,"STRONG",{});var Vut=s(yue);Hrr=r(Vut,"detr"),Vut.forEach(t),Urr=r(W$e," \u2014 "),iz=n(W$e,"A",{href:!0});var Xut=s(iz);Jrr=r(Xut,"DetrForObjectDetection"),Xut.forEach(t),Yrr=r(W$e," (DETR model)"),W$e.forEach(t),Krr=i(zje),_F=n(zje,"LI",{});var Q$e=s(_F);Lue=n(Q$e,"STRONG",{});var zut=s(Lue);Zrr=r(zut,"yolos"),zut.forEach(t),etr=r(Q$e," \u2014 "),dz=n(Q$e,"A",{href:!0});var Wut=s(dz);otr=r(Wut,"YolosForObjectDetection"),Wut.forEach(t),rtr=r(Q$e," (YOLOS model)"),Q$e.forEach(t),zje.forEach(t),ttr=i(Fa),uF=n(Fa,"P",{});var H$e=s(uF);atr=r(H$e,"The model is set in evaluation mode by default using "),xue=n(H$e,"CODE",{});var Qut=s(xue);ntr=r(Qut,"model.eval()"),Qut.forEach(t),str=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(H$e,"CODE",{});var Hut=s($ue);ltr=r(Hut,"model.train()"),Hut.forEach(t),H$e.forEach(t),itr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Dqe=i(f),kd=n(f,"H2",{class:!0});var Wje=s(kd);vF=n(Wje,"A",{id:!0,class:!0,href:!0});var Uut=s(vF);kue=n(Uut,"SPAN",{});var Jut=s(kue);T(kL.$$.fragment,Jut),Jut.forEach(t),Uut.forEach(t),dtr=i(Wje),Sue=n(Wje,"SPAN",{});var Yut=s(Sue);ctr=r(Yut,"AutoModelForImageSegmentation"),Yut.forEach(t),Wje.forEach(t),Gqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(SL.$$.fragment,dl),ftr=i(dl),Sd=n(dl,"P",{});var MZ=s(Sd);mtr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=n(MZ,"A",{href:!0});var Kut=s(cz);gtr=r(Kut,"from_pretrained()"),Kut.forEach(t),htr=r(MZ," class method or the "),fz=n(MZ,"A",{href:!0});var Zut=s(fz);ptr=r(Zut,"from_config()"),Zut.forEach(t),_tr=r(MZ,` class
method.`),MZ.forEach(t),utr=i(dl),RL=n(dl,"P",{});var Qje=s(RL);btr=r(Qje,"This class cannot be instantiated directly using "),Rue=n(Qje,"CODE",{});var e2t=s(Rue);vtr=r(e2t,"__init__()"),e2t.forEach(t),Ftr=r(Qje," (throws an error)."),Qje.forEach(t),Ttr=i(dl),Ct=n(dl,"DIV",{class:!0});var oA=s(Ct);T(PL.$$.fragment,oA),Mtr=i(oA),Pue=n(oA,"P",{});var o2t=s(Pue);Etr=r(o2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o2t.forEach(t),Ctr=i(oA),Rd=n(oA,"P",{});var EZ=s(Rd);wtr=r(EZ,`Note:
Loading a model from its configuration file does `),Bue=n(EZ,"STRONG",{});var r2t=s(Bue);Atr=r(r2t,"not"),r2t.forEach(t),ytr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(EZ,"A",{href:!0});var t2t=s(mz);Ltr=r(t2t,"from_pretrained()"),t2t.forEach(t),xtr=r(EZ," to load the model weights."),EZ.forEach(t),$tr=i(oA),T(FF.$$.fragment,oA),oA.forEach(t),ktr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(BL.$$.fragment,Ta),Str=i(Ta),Iue=n(Ta,"P",{});var a2t=s(Iue);Rtr=r(a2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a2t.forEach(t),Ptr=i(Ta),Ha=n(Ta,"P",{});var rA=s(Ha);Btr=r(rA,"The model class to instantiate is selected based on the "),que=n(rA,"CODE",{});var n2t=s(que);Itr=r(n2t,"model_type"),n2t.forEach(t),qtr=r(rA,` property of the config object (either
passed as an argument or loaded from `),Nue=n(rA,"CODE",{});var s2t=s(Nue);Ntr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),jtr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(rA,"CODE",{});var l2t=s(jue);Dtr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),Gtr=r(rA,":"),rA.forEach(t),Otr=i(Ta),Due=n(Ta,"UL",{});var i2t=s(Due);TF=n(i2t,"LI",{});var U$e=s(TF);Gue=n(U$e,"STRONG",{});var d2t=s(Gue);Vtr=r(d2t,"detr"),d2t.forEach(t),Xtr=r(U$e," \u2014 "),gz=n(U$e,"A",{href:!0});var c2t=s(gz);ztr=r(c2t,"DetrForSegmentation"),c2t.forEach(t),Wtr=r(U$e," (DETR model)"),U$e.forEach(t),i2t.forEach(t),Qtr=i(Ta),MF=n(Ta,"P",{});var J$e=s(MF);Htr=r(J$e,"The model is set in evaluation mode by default using "),Oue=n(J$e,"CODE",{});var f2t=s(Oue);Utr=r(f2t,"model.eval()"),f2t.forEach(t),Jtr=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(J$e,"CODE",{});var m2t=s(Vue);Ytr=r(m2t,"model.train()"),m2t.forEach(t),J$e.forEach(t),Ktr=i(Ta),T(EF.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Oqe=i(f),Pd=n(f,"H2",{class:!0});var Hje=s(Pd);CF=n(Hje,"A",{id:!0,class:!0,href:!0});var g2t=s(CF);Xue=n(g2t,"SPAN",{});var h2t=s(Xue);T(IL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Ztr=i(Hje),zue=n(Hje,"SPAN",{});var p2t=s(zue);ear=r(p2t,"AutoModelForSemanticSegmentation"),p2t.forEach(t),Hje.forEach(t),Vqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(qL.$$.fragment,cl),oar=i(cl),Bd=n(cl,"P",{});var CZ=s(Bd);rar=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=n(CZ,"A",{href:!0});var _2t=s(hz);tar=r(_2t,"from_pretrained()"),_2t.forEach(t),aar=r(CZ," class method or the "),pz=n(CZ,"A",{href:!0});var u2t=s(pz);nar=r(u2t,"from_config()"),u2t.forEach(t),sar=r(CZ,` class
method.`),CZ.forEach(t),lar=i(cl),NL=n(cl,"P",{});var Uje=s(NL);iar=r(Uje,"This class cannot be instantiated directly using "),Wue=n(Uje,"CODE",{});var b2t=s(Wue);dar=r(b2t,"__init__()"),b2t.forEach(t),car=r(Uje," (throws an error)."),Uje.forEach(t),far=i(cl),wt=n(cl,"DIV",{class:!0});var tA=s(wt);T(jL.$$.fragment,tA),mar=i(tA),Que=n(tA,"P",{});var v2t=s(Que);gar=r(v2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v2t.forEach(t),har=i(tA),Id=n(tA,"P",{});var wZ=s(Id);par=r(wZ,`Note:
Loading a model from its configuration file does `),Hue=n(wZ,"STRONG",{});var F2t=s(Hue);_ar=r(F2t,"not"),F2t.forEach(t),uar=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(wZ,"A",{href:!0});var T2t=s(_z);bar=r(T2t,"from_pretrained()"),T2t.forEach(t),Far=r(wZ," to load the model weights."),wZ.forEach(t),Tar=i(tA),T(wF.$$.fragment,tA),tA.forEach(t),Mar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(DL.$$.fragment,Ma),Ear=i(Ma),Uue=n(Ma,"P",{});var M2t=s(Uue);Car=r(M2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M2t.forEach(t),war=i(Ma),Ua=n(Ma,"P",{});var aA=s(Ua);Aar=r(aA,"The model class to instantiate is selected based on the "),Jue=n(aA,"CODE",{});var E2t=s(Jue);yar=r(E2t,"model_type"),E2t.forEach(t),Lar=r(aA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(aA,"CODE",{});var C2t=s(Yue);xar=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),$ar=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(aA,"CODE",{});var w2t=s(Kue);kar=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Sar=r(aA,":"),aA.forEach(t),Rar=i(Ma),Ja=n(Ma,"UL",{});var nA=s(Ja);AF=n(nA,"LI",{});var Y$e=s(AF);Zue=n(Y$e,"STRONG",{});var A2t=s(Zue);Par=r(A2t,"beit"),A2t.forEach(t),Bar=r(Y$e," \u2014 "),uz=n(Y$e,"A",{href:!0});var y2t=s(uz);Iar=r(y2t,"BeitForSemanticSegmentation"),y2t.forEach(t),qar=r(Y$e," (BEiT model)"),Y$e.forEach(t),Nar=i(nA),yF=n(nA,"LI",{});var K$e=s(yF);e2e=n(K$e,"STRONG",{});var L2t=s(e2e);jar=r(L2t,"data2vec-vision"),L2t.forEach(t),Dar=r(K$e," \u2014 "),bz=n(K$e,"A",{href:!0});var x2t=s(bz);Gar=r(x2t,"Data2VecVisionForSemanticSegmentation"),x2t.forEach(t),Oar=r(K$e," (Data2VecVision model)"),K$e.forEach(t),Var=i(nA),LF=n(nA,"LI",{});var Z$e=s(LF);o2e=n(Z$e,"STRONG",{});var $2t=s(o2e);Xar=r($2t,"dpt"),$2t.forEach(t),zar=r(Z$e," \u2014 "),vz=n(Z$e,"A",{href:!0});var k2t=s(vz);War=r(k2t,"DPTForSemanticSegmentation"),k2t.forEach(t),Qar=r(Z$e," (DPT model)"),Z$e.forEach(t),Har=i(nA),xF=n(nA,"LI",{});var eke=s(xF);r2e=n(eke,"STRONG",{});var S2t=s(r2e);Uar=r(S2t,"segformer"),S2t.forEach(t),Jar=r(eke," \u2014 "),Fz=n(eke,"A",{href:!0});var R2t=s(Fz);Yar=r(R2t,"SegformerForSemanticSegmentation"),R2t.forEach(t),Kar=r(eke," (SegFormer model)"),eke.forEach(t),nA.forEach(t),Zar=i(Ma),$F=n(Ma,"P",{});var oke=s($F);enr=r(oke,"The model is set in evaluation mode by default using "),t2e=n(oke,"CODE",{});var P2t=s(t2e);onr=r(P2t,"model.eval()"),P2t.forEach(t),rnr=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(oke,"CODE",{});var B2t=s(a2e);tnr=r(B2t,"model.train()"),B2t.forEach(t),oke.forEach(t),anr=i(Ma),T(kF.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Xqe=i(f),qd=n(f,"H2",{class:!0});var Jje=s(qd);SF=n(Jje,"A",{id:!0,class:!0,href:!0});var I2t=s(SF);n2e=n(I2t,"SPAN",{});var q2t=s(n2e);T(GL.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),nnr=i(Jje),s2e=n(Jje,"SPAN",{});var N2t=s(s2e);snr=r(N2t,"AutoModelForInstanceSegmentation"),N2t.forEach(t),Jje.forEach(t),zqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(OL.$$.fragment,fl),lnr=i(fl),Nd=n(fl,"P",{});var AZ=s(Nd);inr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=n(AZ,"A",{href:!0});var j2t=s(Tz);dnr=r(j2t,"from_pretrained()"),j2t.forEach(t),cnr=r(AZ," class method or the "),Mz=n(AZ,"A",{href:!0});var D2t=s(Mz);fnr=r(D2t,"from_config()"),D2t.forEach(t),mnr=r(AZ,` class
method.`),AZ.forEach(t),gnr=i(fl),VL=n(fl,"P",{});var Yje=s(VL);hnr=r(Yje,"This class cannot be instantiated directly using "),l2e=n(Yje,"CODE",{});var G2t=s(l2e);pnr=r(G2t,"__init__()"),G2t.forEach(t),_nr=r(Yje," (throws an error)."),Yje.forEach(t),unr=i(fl),At=n(fl,"DIV",{class:!0});var sA=s(At);T(XL.$$.fragment,sA),bnr=i(sA),i2e=n(sA,"P",{});var O2t=s(i2e);vnr=r(O2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O2t.forEach(t),Fnr=i(sA),jd=n(sA,"P",{});var yZ=s(jd);Tnr=r(yZ,`Note:
Loading a model from its configuration file does `),d2e=n(yZ,"STRONG",{});var V2t=s(d2e);Mnr=r(V2t,"not"),V2t.forEach(t),Enr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(yZ,"A",{href:!0});var X2t=s(Ez);Cnr=r(X2t,"from_pretrained()"),X2t.forEach(t),wnr=r(yZ," to load the model weights."),yZ.forEach(t),Anr=i(sA),T(RF.$$.fragment,sA),sA.forEach(t),ynr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(zL.$$.fragment,Ea),Lnr=i(Ea),c2e=n(Ea,"P",{});var z2t=s(c2e);xnr=r(z2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z2t.forEach(t),$nr=i(Ea),Ya=n(Ea,"P",{});var lA=s(Ya);knr=r(lA,"The model class to instantiate is selected based on the "),f2e=n(lA,"CODE",{});var W2t=s(f2e);Snr=r(W2t,"model_type"),W2t.forEach(t),Rnr=r(lA,` property of the config object (either
passed as an argument or loaded from `),m2e=n(lA,"CODE",{});var Q2t=s(m2e);Pnr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),Bnr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(lA,"CODE",{});var H2t=s(g2e);Inr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),qnr=r(lA,":"),lA.forEach(t),Nnr=i(Ea),h2e=n(Ea,"UL",{});var U2t=s(h2e);PF=n(U2t,"LI",{});var rke=s(PF);p2e=n(rke,"STRONG",{});var J2t=s(p2e);jnr=r(J2t,"maskformer"),J2t.forEach(t),Dnr=r(rke," \u2014 "),Cz=n(rke,"A",{href:!0});var Y2t=s(Cz);Gnr=r(Y2t,"MaskFormerForInstanceSegmentation"),Y2t.forEach(t),Onr=r(rke," (MaskFormer model)"),rke.forEach(t),U2t.forEach(t),Vnr=i(Ea),BF=n(Ea,"P",{});var tke=s(BF);Xnr=r(tke,"The model is set in evaluation mode by default using "),_2e=n(tke,"CODE",{});var K2t=s(_2e);znr=r(K2t,"model.eval()"),K2t.forEach(t),Wnr=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(tke,"CODE",{});var Z2t=s(u2e);Qnr=r(Z2t,"model.train()"),Z2t.forEach(t),tke.forEach(t),Hnr=i(Ea),T(IF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Wqe=i(f),Dd=n(f,"H2",{class:!0});var Kje=s(Dd);qF=n(Kje,"A",{id:!0,class:!0,href:!0});var e1t=s(qF);b2e=n(e1t,"SPAN",{});var o1t=s(b2e);T(WL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),Unr=i(Kje),v2e=n(Kje,"SPAN",{});var r1t=s(v2e);Jnr=r(r1t,"TFAutoModel"),r1t.forEach(t),Kje.forEach(t),Qqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(QL.$$.fragment,ml),Ynr=i(ml),Gd=n(ml,"P",{});var LZ=s(Gd);Knr=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=n(LZ,"A",{href:!0});var t1t=s(wz);Znr=r(t1t,"from_pretrained()"),t1t.forEach(t),esr=r(LZ," class method or the "),Az=n(LZ,"A",{href:!0});var a1t=s(Az);osr=r(a1t,"from_config()"),a1t.forEach(t),rsr=r(LZ,` class
method.`),LZ.forEach(t),tsr=i(ml),HL=n(ml,"P",{});var Zje=s(HL);asr=r(Zje,"This class cannot be instantiated directly using "),F2e=n(Zje,"CODE",{});var n1t=s(F2e);nsr=r(n1t,"__init__()"),n1t.forEach(t),ssr=r(Zje," (throws an error)."),Zje.forEach(t),lsr=i(ml),yt=n(ml,"DIV",{class:!0});var iA=s(yt);T(UL.$$.fragment,iA),isr=i(iA),T2e=n(iA,"P",{});var s1t=s(T2e);dsr=r(s1t,"Instantiates one of the base model classes of the library from a configuration."),s1t.forEach(t),csr=i(iA),Od=n(iA,"P",{});var xZ=s(Od);fsr=r(xZ,`Note:
Loading a model from its configuration file does `),M2e=n(xZ,"STRONG",{});var l1t=s(M2e);msr=r(l1t,"not"),l1t.forEach(t),gsr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(xZ,"A",{href:!0});var i1t=s(yz);hsr=r(i1t,"from_pretrained()"),i1t.forEach(t),psr=r(xZ," to load the model weights."),xZ.forEach(t),_sr=i(iA),T(NF.$$.fragment,iA),iA.forEach(t),usr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(JL.$$.fragment,gl),bsr=i(gl),E2e=n(gl,"P",{});var d1t=s(E2e);vsr=r(d1t,"Instantiate one of the base model classes of the library from a pretrained model."),d1t.forEach(t),Fsr=i(gl),Ka=n(gl,"P",{});var dA=s(Ka);Tsr=r(dA,"The model class to instantiate is selected based on the "),C2e=n(dA,"CODE",{});var c1t=s(C2e);Msr=r(c1t,"model_type"),c1t.forEach(t),Esr=r(dA,` property of the config object (either
passed as an argument or loaded from `),w2e=n(dA,"CODE",{});var f1t=s(w2e);Csr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),wsr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(dA,"CODE",{});var m1t=s(A2e);Asr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),ysr=r(dA,":"),dA.forEach(t),Lsr=i(gl),N=n(gl,"UL",{});var D=s(N);jF=n(D,"LI",{});var ake=s(jF);y2e=n(ake,"STRONG",{});var g1t=s(y2e);xsr=r(g1t,"albert"),g1t.forEach(t),$sr=r(ake," \u2014 "),Lz=n(ake,"A",{href:!0});var h1t=s(Lz);ksr=r(h1t,"TFAlbertModel"),h1t.forEach(t),Ssr=r(ake," (ALBERT model)"),ake.forEach(t),Rsr=i(D),DF=n(D,"LI",{});var nke=s(DF);L2e=n(nke,"STRONG",{});var p1t=s(L2e);Psr=r(p1t,"bart"),p1t.forEach(t),Bsr=r(nke," \u2014 "),xz=n(nke,"A",{href:!0});var _1t=s(xz);Isr=r(_1t,"TFBartModel"),_1t.forEach(t),qsr=r(nke," (BART model)"),nke.forEach(t),Nsr=i(D),GF=n(D,"LI",{});var ske=s(GF);x2e=n(ske,"STRONG",{});var u1t=s(x2e);jsr=r(u1t,"bert"),u1t.forEach(t),Dsr=r(ske," \u2014 "),$z=n(ske,"A",{href:!0});var b1t=s($z);Gsr=r(b1t,"TFBertModel"),b1t.forEach(t),Osr=r(ske," (BERT model)"),ske.forEach(t),Vsr=i(D),OF=n(D,"LI",{});var lke=s(OF);$2e=n(lke,"STRONG",{});var v1t=s($2e);Xsr=r(v1t,"blenderbot"),v1t.forEach(t),zsr=r(lke," \u2014 "),kz=n(lke,"A",{href:!0});var F1t=s(kz);Wsr=r(F1t,"TFBlenderbotModel"),F1t.forEach(t),Qsr=r(lke," (Blenderbot model)"),lke.forEach(t),Hsr=i(D),VF=n(D,"LI",{});var ike=s(VF);k2e=n(ike,"STRONG",{});var T1t=s(k2e);Usr=r(T1t,"blenderbot-small"),T1t.forEach(t),Jsr=r(ike," \u2014 "),Sz=n(ike,"A",{href:!0});var M1t=s(Sz);Ysr=r(M1t,"TFBlenderbotSmallModel"),M1t.forEach(t),Ksr=r(ike," (BlenderbotSmall model)"),ike.forEach(t),Zsr=i(D),XF=n(D,"LI",{});var dke=s(XF);S2e=n(dke,"STRONG",{});var E1t=s(S2e);elr=r(E1t,"camembert"),E1t.forEach(t),olr=r(dke," \u2014 "),Rz=n(dke,"A",{href:!0});var C1t=s(Rz);rlr=r(C1t,"TFCamembertModel"),C1t.forEach(t),tlr=r(dke," (CamemBERT model)"),dke.forEach(t),alr=i(D),zF=n(D,"LI",{});var cke=s(zF);R2e=n(cke,"STRONG",{});var w1t=s(R2e);nlr=r(w1t,"clip"),w1t.forEach(t),slr=r(cke," \u2014 "),Pz=n(cke,"A",{href:!0});var A1t=s(Pz);llr=r(A1t,"TFCLIPModel"),A1t.forEach(t),ilr=r(cke," (CLIP model)"),cke.forEach(t),dlr=i(D),WF=n(D,"LI",{});var fke=s(WF);P2e=n(fke,"STRONG",{});var y1t=s(P2e);clr=r(y1t,"convbert"),y1t.forEach(t),flr=r(fke," \u2014 "),Bz=n(fke,"A",{href:!0});var L1t=s(Bz);mlr=r(L1t,"TFConvBertModel"),L1t.forEach(t),glr=r(fke," (ConvBERT model)"),fke.forEach(t),hlr=i(D),QF=n(D,"LI",{});var mke=s(QF);B2e=n(mke,"STRONG",{});var x1t=s(B2e);plr=r(x1t,"convnext"),x1t.forEach(t),_lr=r(mke," \u2014 "),Iz=n(mke,"A",{href:!0});var $1t=s(Iz);ulr=r($1t,"TFConvNextModel"),$1t.forEach(t),blr=r(mke," (ConvNext model)"),mke.forEach(t),vlr=i(D),HF=n(D,"LI",{});var gke=s(HF);I2e=n(gke,"STRONG",{});var k1t=s(I2e);Flr=r(k1t,"ctrl"),k1t.forEach(t),Tlr=r(gke," \u2014 "),qz=n(gke,"A",{href:!0});var S1t=s(qz);Mlr=r(S1t,"TFCTRLModel"),S1t.forEach(t),Elr=r(gke," (CTRL model)"),gke.forEach(t),Clr=i(D),UF=n(D,"LI",{});var hke=s(UF);q2e=n(hke,"STRONG",{});var R1t=s(q2e);wlr=r(R1t,"data2vec-vision"),R1t.forEach(t),Alr=r(hke," \u2014 "),Nz=n(hke,"A",{href:!0});var P1t=s(Nz);ylr=r(P1t,"TFData2VecVisionModel"),P1t.forEach(t),Llr=r(hke," (Data2VecVision model)"),hke.forEach(t),xlr=i(D),JF=n(D,"LI",{});var pke=s(JF);N2e=n(pke,"STRONG",{});var B1t=s(N2e);$lr=r(B1t,"deberta"),B1t.forEach(t),klr=r(pke," \u2014 "),jz=n(pke,"A",{href:!0});var I1t=s(jz);Slr=r(I1t,"TFDebertaModel"),I1t.forEach(t),Rlr=r(pke," (DeBERTa model)"),pke.forEach(t),Plr=i(D),YF=n(D,"LI",{});var _ke=s(YF);j2e=n(_ke,"STRONG",{});var q1t=s(j2e);Blr=r(q1t,"deberta-v2"),q1t.forEach(t),Ilr=r(_ke," \u2014 "),Dz=n(_ke,"A",{href:!0});var N1t=s(Dz);qlr=r(N1t,"TFDebertaV2Model"),N1t.forEach(t),Nlr=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),jlr=i(D),KF=n(D,"LI",{});var uke=s(KF);D2e=n(uke,"STRONG",{});var j1t=s(D2e);Dlr=r(j1t,"distilbert"),j1t.forEach(t),Glr=r(uke," \u2014 "),Gz=n(uke,"A",{href:!0});var D1t=s(Gz);Olr=r(D1t,"TFDistilBertModel"),D1t.forEach(t),Vlr=r(uke," (DistilBERT model)"),uke.forEach(t),Xlr=i(D),ZF=n(D,"LI",{});var bke=s(ZF);G2e=n(bke,"STRONG",{});var G1t=s(G2e);zlr=r(G1t,"dpr"),G1t.forEach(t),Wlr=r(bke," \u2014 "),Oz=n(bke,"A",{href:!0});var O1t=s(Oz);Qlr=r(O1t,"TFDPRQuestionEncoder"),O1t.forEach(t),Hlr=r(bke," (DPR model)"),bke.forEach(t),Ulr=i(D),eT=n(D,"LI",{});var vke=s(eT);O2e=n(vke,"STRONG",{});var V1t=s(O2e);Jlr=r(V1t,"electra"),V1t.forEach(t),Ylr=r(vke," \u2014 "),Vz=n(vke,"A",{href:!0});var X1t=s(Vz);Klr=r(X1t,"TFElectraModel"),X1t.forEach(t),Zlr=r(vke," (ELECTRA model)"),vke.forEach(t),eir=i(D),oT=n(D,"LI",{});var Fke=s(oT);V2e=n(Fke,"STRONG",{});var z1t=s(V2e);oir=r(z1t,"flaubert"),z1t.forEach(t),rir=r(Fke," \u2014 "),Xz=n(Fke,"A",{href:!0});var W1t=s(Xz);tir=r(W1t,"TFFlaubertModel"),W1t.forEach(t),air=r(Fke," (FlauBERT model)"),Fke.forEach(t),nir=i(D),Bs=n(D,"LI",{});var y$=s(Bs);X2e=n(y$,"STRONG",{});var Q1t=s(X2e);sir=r(Q1t,"funnel"),Q1t.forEach(t),lir=r(y$," \u2014 "),zz=n(y$,"A",{href:!0});var H1t=s(zz);iir=r(H1t,"TFFunnelModel"),H1t.forEach(t),dir=r(y$," or "),Wz=n(y$,"A",{href:!0});var U1t=s(Wz);cir=r(U1t,"TFFunnelBaseModel"),U1t.forEach(t),fir=r(y$," (Funnel Transformer model)"),y$.forEach(t),mir=i(D),rT=n(D,"LI",{});var Tke=s(rT);z2e=n(Tke,"STRONG",{});var J1t=s(z2e);gir=r(J1t,"gpt2"),J1t.forEach(t),hir=r(Tke," \u2014 "),Qz=n(Tke,"A",{href:!0});var Y1t=s(Qz);pir=r(Y1t,"TFGPT2Model"),Y1t.forEach(t),_ir=r(Tke," (OpenAI GPT-2 model)"),Tke.forEach(t),uir=i(D),tT=n(D,"LI",{});var Mke=s(tT);W2e=n(Mke,"STRONG",{});var K1t=s(W2e);bir=r(K1t,"gptj"),K1t.forEach(t),vir=r(Mke," \u2014 "),Hz=n(Mke,"A",{href:!0});var Z1t=s(Hz);Fir=r(Z1t,"TFGPTJModel"),Z1t.forEach(t),Tir=r(Mke," (GPT-J model)"),Mke.forEach(t),Mir=i(D),aT=n(D,"LI",{});var Eke=s(aT);Q2e=n(Eke,"STRONG",{});var ebt=s(Q2e);Eir=r(ebt,"hubert"),ebt.forEach(t),Cir=r(Eke," \u2014 "),Uz=n(Eke,"A",{href:!0});var obt=s(Uz);wir=r(obt,"TFHubertModel"),obt.forEach(t),Air=r(Eke," (Hubert model)"),Eke.forEach(t),yir=i(D),nT=n(D,"LI",{});var Cke=s(nT);H2e=n(Cke,"STRONG",{});var rbt=s(H2e);Lir=r(rbt,"layoutlm"),rbt.forEach(t),xir=r(Cke," \u2014 "),Jz=n(Cke,"A",{href:!0});var tbt=s(Jz);$ir=r(tbt,"TFLayoutLMModel"),tbt.forEach(t),kir=r(Cke," (LayoutLM model)"),Cke.forEach(t),Sir=i(D),sT=n(D,"LI",{});var wke=s(sT);U2e=n(wke,"STRONG",{});var abt=s(U2e);Rir=r(abt,"led"),abt.forEach(t),Pir=r(wke," \u2014 "),Yz=n(wke,"A",{href:!0});var nbt=s(Yz);Bir=r(nbt,"TFLEDModel"),nbt.forEach(t),Iir=r(wke," (LED model)"),wke.forEach(t),qir=i(D),lT=n(D,"LI",{});var Ake=s(lT);J2e=n(Ake,"STRONG",{});var sbt=s(J2e);Nir=r(sbt,"longformer"),sbt.forEach(t),jir=r(Ake," \u2014 "),Kz=n(Ake,"A",{href:!0});var lbt=s(Kz);Dir=r(lbt,"TFLongformerModel"),lbt.forEach(t),Gir=r(Ake," (Longformer model)"),Ake.forEach(t),Oir=i(D),iT=n(D,"LI",{});var yke=s(iT);Y2e=n(yke,"STRONG",{});var ibt=s(Y2e);Vir=r(ibt,"lxmert"),ibt.forEach(t),Xir=r(yke," \u2014 "),Zz=n(yke,"A",{href:!0});var dbt=s(Zz);zir=r(dbt,"TFLxmertModel"),dbt.forEach(t),Wir=r(yke," (LXMERT model)"),yke.forEach(t),Qir=i(D),dT=n(D,"LI",{});var Lke=s(dT);K2e=n(Lke,"STRONG",{});var cbt=s(K2e);Hir=r(cbt,"marian"),cbt.forEach(t),Uir=r(Lke," \u2014 "),eW=n(Lke,"A",{href:!0});var fbt=s(eW);Jir=r(fbt,"TFMarianModel"),fbt.forEach(t),Yir=r(Lke," (Marian model)"),Lke.forEach(t),Kir=i(D),cT=n(D,"LI",{});var xke=s(cT);Z2e=n(xke,"STRONG",{});var mbt=s(Z2e);Zir=r(mbt,"mbart"),mbt.forEach(t),edr=r(xke," \u2014 "),oW=n(xke,"A",{href:!0});var gbt=s(oW);odr=r(gbt,"TFMBartModel"),gbt.forEach(t),rdr=r(xke," (mBART model)"),xke.forEach(t),tdr=i(D),fT=n(D,"LI",{});var $ke=s(fT);e1e=n($ke,"STRONG",{});var hbt=s(e1e);adr=r(hbt,"mobilebert"),hbt.forEach(t),ndr=r($ke," \u2014 "),rW=n($ke,"A",{href:!0});var pbt=s(rW);sdr=r(pbt,"TFMobileBertModel"),pbt.forEach(t),ldr=r($ke," (MobileBERT model)"),$ke.forEach(t),idr=i(D),mT=n(D,"LI",{});var kke=s(mT);o1e=n(kke,"STRONG",{});var _bt=s(o1e);ddr=r(_bt,"mpnet"),_bt.forEach(t),cdr=r(kke," \u2014 "),tW=n(kke,"A",{href:!0});var ubt=s(tW);fdr=r(ubt,"TFMPNetModel"),ubt.forEach(t),mdr=r(kke," (MPNet model)"),kke.forEach(t),gdr=i(D),gT=n(D,"LI",{});var Ske=s(gT);r1e=n(Ske,"STRONG",{});var bbt=s(r1e);hdr=r(bbt,"mt5"),bbt.forEach(t),pdr=r(Ske," \u2014 "),aW=n(Ske,"A",{href:!0});var vbt=s(aW);_dr=r(vbt,"TFMT5Model"),vbt.forEach(t),udr=r(Ske," (mT5 model)"),Ske.forEach(t),bdr=i(D),hT=n(D,"LI",{});var Rke=s(hT);t1e=n(Rke,"STRONG",{});var Fbt=s(t1e);vdr=r(Fbt,"openai-gpt"),Fbt.forEach(t),Fdr=r(Rke," \u2014 "),nW=n(Rke,"A",{href:!0});var Tbt=s(nW);Tdr=r(Tbt,"TFOpenAIGPTModel"),Tbt.forEach(t),Mdr=r(Rke," (OpenAI GPT model)"),Rke.forEach(t),Edr=i(D),pT=n(D,"LI",{});var Pke=s(pT);a1e=n(Pke,"STRONG",{});var Mbt=s(a1e);Cdr=r(Mbt,"pegasus"),Mbt.forEach(t),wdr=r(Pke," \u2014 "),sW=n(Pke,"A",{href:!0});var Ebt=s(sW);Adr=r(Ebt,"TFPegasusModel"),Ebt.forEach(t),ydr=r(Pke," (Pegasus model)"),Pke.forEach(t),Ldr=i(D),_T=n(D,"LI",{});var Bke=s(_T);n1e=n(Bke,"STRONG",{});var Cbt=s(n1e);xdr=r(Cbt,"rembert"),Cbt.forEach(t),$dr=r(Bke," \u2014 "),lW=n(Bke,"A",{href:!0});var wbt=s(lW);kdr=r(wbt,"TFRemBertModel"),wbt.forEach(t),Sdr=r(Bke," (RemBERT model)"),Bke.forEach(t),Rdr=i(D),uT=n(D,"LI",{});var Ike=s(uT);s1e=n(Ike,"STRONG",{});var Abt=s(s1e);Pdr=r(Abt,"roberta"),Abt.forEach(t),Bdr=r(Ike," \u2014 "),iW=n(Ike,"A",{href:!0});var ybt=s(iW);Idr=r(ybt,"TFRobertaModel"),ybt.forEach(t),qdr=r(Ike," (RoBERTa model)"),Ike.forEach(t),Ndr=i(D),bT=n(D,"LI",{});var qke=s(bT);l1e=n(qke,"STRONG",{});var Lbt=s(l1e);jdr=r(Lbt,"roformer"),Lbt.forEach(t),Ddr=r(qke," \u2014 "),dW=n(qke,"A",{href:!0});var xbt=s(dW);Gdr=r(xbt,"TFRoFormerModel"),xbt.forEach(t),Odr=r(qke," (RoFormer model)"),qke.forEach(t),Vdr=i(D),vT=n(D,"LI",{});var Nke=s(vT);i1e=n(Nke,"STRONG",{});var $bt=s(i1e);Xdr=r($bt,"speech_to_text"),$bt.forEach(t),zdr=r(Nke," \u2014 "),cW=n(Nke,"A",{href:!0});var kbt=s(cW);Wdr=r(kbt,"TFSpeech2TextModel"),kbt.forEach(t),Qdr=r(Nke," (Speech2Text model)"),Nke.forEach(t),Hdr=i(D),FT=n(D,"LI",{});var jke=s(FT);d1e=n(jke,"STRONG",{});var Sbt=s(d1e);Udr=r(Sbt,"swin"),Sbt.forEach(t),Jdr=r(jke," \u2014 "),fW=n(jke,"A",{href:!0});var Rbt=s(fW);Ydr=r(Rbt,"TFSwinModel"),Rbt.forEach(t),Kdr=r(jke," (Swin model)"),jke.forEach(t),Zdr=i(D),TT=n(D,"LI",{});var Dke=s(TT);c1e=n(Dke,"STRONG",{});var Pbt=s(c1e);ecr=r(Pbt,"t5"),Pbt.forEach(t),ocr=r(Dke," \u2014 "),mW=n(Dke,"A",{href:!0});var Bbt=s(mW);rcr=r(Bbt,"TFT5Model"),Bbt.forEach(t),tcr=r(Dke," (T5 model)"),Dke.forEach(t),acr=i(D),MT=n(D,"LI",{});var Gke=s(MT);f1e=n(Gke,"STRONG",{});var Ibt=s(f1e);ncr=r(Ibt,"tapas"),Ibt.forEach(t),scr=r(Gke," \u2014 "),gW=n(Gke,"A",{href:!0});var qbt=s(gW);lcr=r(qbt,"TFTapasModel"),qbt.forEach(t),icr=r(Gke," (TAPAS model)"),Gke.forEach(t),dcr=i(D),ET=n(D,"LI",{});var Oke=s(ET);m1e=n(Oke,"STRONG",{});var Nbt=s(m1e);ccr=r(Nbt,"transfo-xl"),Nbt.forEach(t),fcr=r(Oke," \u2014 "),hW=n(Oke,"A",{href:!0});var jbt=s(hW);mcr=r(jbt,"TFTransfoXLModel"),jbt.forEach(t),gcr=r(Oke," (Transformer-XL model)"),Oke.forEach(t),hcr=i(D),CT=n(D,"LI",{});var Vke=s(CT);g1e=n(Vke,"STRONG",{});var Dbt=s(g1e);pcr=r(Dbt,"vit"),Dbt.forEach(t),_cr=r(Vke," \u2014 "),pW=n(Vke,"A",{href:!0});var Gbt=s(pW);ucr=r(Gbt,"TFViTModel"),Gbt.forEach(t),bcr=r(Vke," (ViT model)"),Vke.forEach(t),vcr=i(D),wT=n(D,"LI",{});var Xke=s(wT);h1e=n(Xke,"STRONG",{});var Obt=s(h1e);Fcr=r(Obt,"vit_mae"),Obt.forEach(t),Tcr=r(Xke," \u2014 "),_W=n(Xke,"A",{href:!0});var Vbt=s(_W);Mcr=r(Vbt,"TFViTMAEModel"),Vbt.forEach(t),Ecr=r(Xke," (ViTMAE model)"),Xke.forEach(t),Ccr=i(D),AT=n(D,"LI",{});var zke=s(AT);p1e=n(zke,"STRONG",{});var Xbt=s(p1e);wcr=r(Xbt,"wav2vec2"),Xbt.forEach(t),Acr=r(zke," \u2014 "),uW=n(zke,"A",{href:!0});var zbt=s(uW);ycr=r(zbt,"TFWav2Vec2Model"),zbt.forEach(t),Lcr=r(zke," (Wav2Vec2 model)"),zke.forEach(t),xcr=i(D),yT=n(D,"LI",{});var Wke=s(yT);_1e=n(Wke,"STRONG",{});var Wbt=s(_1e);$cr=r(Wbt,"xlm"),Wbt.forEach(t),kcr=r(Wke," \u2014 "),bW=n(Wke,"A",{href:!0});var Qbt=s(bW);Scr=r(Qbt,"TFXLMModel"),Qbt.forEach(t),Rcr=r(Wke," (XLM model)"),Wke.forEach(t),Pcr=i(D),LT=n(D,"LI",{});var Qke=s(LT);u1e=n(Qke,"STRONG",{});var Hbt=s(u1e);Bcr=r(Hbt,"xlm-roberta"),Hbt.forEach(t),Icr=r(Qke," \u2014 "),vW=n(Qke,"A",{href:!0});var Ubt=s(vW);qcr=r(Ubt,"TFXLMRobertaModel"),Ubt.forEach(t),Ncr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),jcr=i(D),xT=n(D,"LI",{});var Hke=s(xT);b1e=n(Hke,"STRONG",{});var Jbt=s(b1e);Dcr=r(Jbt,"xlnet"),Jbt.forEach(t),Gcr=r(Hke," \u2014 "),FW=n(Hke,"A",{href:!0});var Ybt=s(FW);Ocr=r(Ybt,"TFXLNetModel"),Ybt.forEach(t),Vcr=r(Hke," (XLNet model)"),Hke.forEach(t),D.forEach(t),Xcr=i(gl),T($T.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Hqe=i(f),Vd=n(f,"H2",{class:!0});var eDe=s(Vd);kT=n(eDe,"A",{id:!0,class:!0,href:!0});var Kbt=s(kT);v1e=n(Kbt,"SPAN",{});var Zbt=s(v1e);T(YL.$$.fragment,Zbt),Zbt.forEach(t),Kbt.forEach(t),zcr=i(eDe),F1e=n(eDe,"SPAN",{});var e5t=s(F1e);Wcr=r(e5t,"TFAutoModelForPreTraining"),e5t.forEach(t),eDe.forEach(t),Uqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(KL.$$.fragment,hl),Qcr=i(hl),Xd=n(hl,"P",{});var $Z=s(Xd);Hcr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=n($Z,"A",{href:!0});var o5t=s(TW);Ucr=r(o5t,"from_pretrained()"),o5t.forEach(t),Jcr=r($Z," class method or the "),MW=n($Z,"A",{href:!0});var r5t=s(MW);Ycr=r(r5t,"from_config()"),r5t.forEach(t),Kcr=r($Z,` class
method.`),$Z.forEach(t),Zcr=i(hl),ZL=n(hl,"P",{});var oDe=s(ZL);efr=r(oDe,"This class cannot be instantiated directly using "),T1e=n(oDe,"CODE",{});var t5t=s(T1e);ofr=r(t5t,"__init__()"),t5t.forEach(t),rfr=r(oDe," (throws an error)."),oDe.forEach(t),tfr=i(hl),Lt=n(hl,"DIV",{class:!0});var cA=s(Lt);T(e8.$$.fragment,cA),afr=i(cA),M1e=n(cA,"P",{});var a5t=s(M1e);nfr=r(a5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a5t.forEach(t),sfr=i(cA),zd=n(cA,"P",{});var kZ=s(zd);lfr=r(kZ,`Note:
Loading a model from its configuration file does `),E1e=n(kZ,"STRONG",{});var n5t=s(E1e);ifr=r(n5t,"not"),n5t.forEach(t),dfr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(kZ,"A",{href:!0});var s5t=s(EW);cfr=r(s5t,"from_pretrained()"),s5t.forEach(t),ffr=r(kZ," to load the model weights."),kZ.forEach(t),mfr=i(cA),T(ST.$$.fragment,cA),cA.forEach(t),gfr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(o8.$$.fragment,pl),hfr=i(pl),C1e=n(pl,"P",{});var l5t=s(C1e);pfr=r(l5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l5t.forEach(t),_fr=i(pl),Za=n(pl,"P",{});var fA=s(Za);ufr=r(fA,"The model class to instantiate is selected based on the "),w1e=n(fA,"CODE",{});var i5t=s(w1e);bfr=r(i5t,"model_type"),i5t.forEach(t),vfr=r(fA,` property of the config object (either
passed as an argument or loaded from `),A1e=n(fA,"CODE",{});var d5t=s(A1e);Ffr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),Tfr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(fA,"CODE",{});var c5t=s(y1e);Mfr=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),Efr=r(fA,":"),fA.forEach(t),Cfr=i(pl),se=n(pl,"UL",{});var le=s(se);RT=n(le,"LI",{});var Uke=s(RT);L1e=n(Uke,"STRONG",{});var f5t=s(L1e);wfr=r(f5t,"albert"),f5t.forEach(t),Afr=r(Uke," \u2014 "),CW=n(Uke,"A",{href:!0});var m5t=s(CW);yfr=r(m5t,"TFAlbertForPreTraining"),m5t.forEach(t),Lfr=r(Uke," (ALBERT model)"),Uke.forEach(t),xfr=i(le),PT=n(le,"LI",{});var Jke=s(PT);x1e=n(Jke,"STRONG",{});var g5t=s(x1e);$fr=r(g5t,"bart"),g5t.forEach(t),kfr=r(Jke," \u2014 "),wW=n(Jke,"A",{href:!0});var h5t=s(wW);Sfr=r(h5t,"TFBartForConditionalGeneration"),h5t.forEach(t),Rfr=r(Jke," (BART model)"),Jke.forEach(t),Pfr=i(le),BT=n(le,"LI",{});var Yke=s(BT);$1e=n(Yke,"STRONG",{});var p5t=s($1e);Bfr=r(p5t,"bert"),p5t.forEach(t),Ifr=r(Yke," \u2014 "),AW=n(Yke,"A",{href:!0});var _5t=s(AW);qfr=r(_5t,"TFBertForPreTraining"),_5t.forEach(t),Nfr=r(Yke," (BERT model)"),Yke.forEach(t),jfr=i(le),IT=n(le,"LI",{});var Kke=s(IT);k1e=n(Kke,"STRONG",{});var u5t=s(k1e);Dfr=r(u5t,"camembert"),u5t.forEach(t),Gfr=r(Kke," \u2014 "),yW=n(Kke,"A",{href:!0});var b5t=s(yW);Ofr=r(b5t,"TFCamembertForMaskedLM"),b5t.forEach(t),Vfr=r(Kke," (CamemBERT model)"),Kke.forEach(t),Xfr=i(le),qT=n(le,"LI",{});var Zke=s(qT);S1e=n(Zke,"STRONG",{});var v5t=s(S1e);zfr=r(v5t,"ctrl"),v5t.forEach(t),Wfr=r(Zke," \u2014 "),LW=n(Zke,"A",{href:!0});var F5t=s(LW);Qfr=r(F5t,"TFCTRLLMHeadModel"),F5t.forEach(t),Hfr=r(Zke," (CTRL model)"),Zke.forEach(t),Ufr=i(le),NT=n(le,"LI",{});var eSe=s(NT);R1e=n(eSe,"STRONG",{});var T5t=s(R1e);Jfr=r(T5t,"distilbert"),T5t.forEach(t),Yfr=r(eSe," \u2014 "),xW=n(eSe,"A",{href:!0});var M5t=s(xW);Kfr=r(M5t,"TFDistilBertForMaskedLM"),M5t.forEach(t),Zfr=r(eSe," (DistilBERT model)"),eSe.forEach(t),emr=i(le),jT=n(le,"LI",{});var oSe=s(jT);P1e=n(oSe,"STRONG",{});var E5t=s(P1e);omr=r(E5t,"electra"),E5t.forEach(t),rmr=r(oSe," \u2014 "),$W=n(oSe,"A",{href:!0});var C5t=s($W);tmr=r(C5t,"TFElectraForPreTraining"),C5t.forEach(t),amr=r(oSe," (ELECTRA model)"),oSe.forEach(t),nmr=i(le),DT=n(le,"LI",{});var rSe=s(DT);B1e=n(rSe,"STRONG",{});var w5t=s(B1e);smr=r(w5t,"flaubert"),w5t.forEach(t),lmr=r(rSe," \u2014 "),kW=n(rSe,"A",{href:!0});var A5t=s(kW);imr=r(A5t,"TFFlaubertWithLMHeadModel"),A5t.forEach(t),dmr=r(rSe," (FlauBERT model)"),rSe.forEach(t),cmr=i(le),GT=n(le,"LI",{});var tSe=s(GT);I1e=n(tSe,"STRONG",{});var y5t=s(I1e);fmr=r(y5t,"funnel"),y5t.forEach(t),mmr=r(tSe," \u2014 "),SW=n(tSe,"A",{href:!0});var L5t=s(SW);gmr=r(L5t,"TFFunnelForPreTraining"),L5t.forEach(t),hmr=r(tSe," (Funnel Transformer model)"),tSe.forEach(t),pmr=i(le),OT=n(le,"LI",{});var aSe=s(OT);q1e=n(aSe,"STRONG",{});var x5t=s(q1e);_mr=r(x5t,"gpt2"),x5t.forEach(t),umr=r(aSe," \u2014 "),RW=n(aSe,"A",{href:!0});var $5t=s(RW);bmr=r($5t,"TFGPT2LMHeadModel"),$5t.forEach(t),vmr=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),Fmr=i(le),VT=n(le,"LI",{});var nSe=s(VT);N1e=n(nSe,"STRONG",{});var k5t=s(N1e);Tmr=r(k5t,"layoutlm"),k5t.forEach(t),Mmr=r(nSe," \u2014 "),PW=n(nSe,"A",{href:!0});var S5t=s(PW);Emr=r(S5t,"TFLayoutLMForMaskedLM"),S5t.forEach(t),Cmr=r(nSe," (LayoutLM model)"),nSe.forEach(t),wmr=i(le),XT=n(le,"LI",{});var sSe=s(XT);j1e=n(sSe,"STRONG",{});var R5t=s(j1e);Amr=r(R5t,"lxmert"),R5t.forEach(t),ymr=r(sSe," \u2014 "),BW=n(sSe,"A",{href:!0});var P5t=s(BW);Lmr=r(P5t,"TFLxmertForPreTraining"),P5t.forEach(t),xmr=r(sSe," (LXMERT model)"),sSe.forEach(t),$mr=i(le),zT=n(le,"LI",{});var lSe=s(zT);D1e=n(lSe,"STRONG",{});var B5t=s(D1e);kmr=r(B5t,"mobilebert"),B5t.forEach(t),Smr=r(lSe," \u2014 "),IW=n(lSe,"A",{href:!0});var I5t=s(IW);Rmr=r(I5t,"TFMobileBertForPreTraining"),I5t.forEach(t),Pmr=r(lSe," (MobileBERT model)"),lSe.forEach(t),Bmr=i(le),WT=n(le,"LI",{});var iSe=s(WT);G1e=n(iSe,"STRONG",{});var q5t=s(G1e);Imr=r(q5t,"mpnet"),q5t.forEach(t),qmr=r(iSe," \u2014 "),qW=n(iSe,"A",{href:!0});var N5t=s(qW);Nmr=r(N5t,"TFMPNetForMaskedLM"),N5t.forEach(t),jmr=r(iSe," (MPNet model)"),iSe.forEach(t),Dmr=i(le),QT=n(le,"LI",{});var dSe=s(QT);O1e=n(dSe,"STRONG",{});var j5t=s(O1e);Gmr=r(j5t,"openai-gpt"),j5t.forEach(t),Omr=r(dSe," \u2014 "),NW=n(dSe,"A",{href:!0});var D5t=s(NW);Vmr=r(D5t,"TFOpenAIGPTLMHeadModel"),D5t.forEach(t),Xmr=r(dSe," (OpenAI GPT model)"),dSe.forEach(t),zmr=i(le),HT=n(le,"LI",{});var cSe=s(HT);V1e=n(cSe,"STRONG",{});var G5t=s(V1e);Wmr=r(G5t,"roberta"),G5t.forEach(t),Qmr=r(cSe," \u2014 "),jW=n(cSe,"A",{href:!0});var O5t=s(jW);Hmr=r(O5t,"TFRobertaForMaskedLM"),O5t.forEach(t),Umr=r(cSe," (RoBERTa model)"),cSe.forEach(t),Jmr=i(le),UT=n(le,"LI",{});var fSe=s(UT);X1e=n(fSe,"STRONG",{});var V5t=s(X1e);Ymr=r(V5t,"t5"),V5t.forEach(t),Kmr=r(fSe," \u2014 "),DW=n(fSe,"A",{href:!0});var X5t=s(DW);Zmr=r(X5t,"TFT5ForConditionalGeneration"),X5t.forEach(t),egr=r(fSe," (T5 model)"),fSe.forEach(t),ogr=i(le),JT=n(le,"LI",{});var mSe=s(JT);z1e=n(mSe,"STRONG",{});var z5t=s(z1e);rgr=r(z5t,"tapas"),z5t.forEach(t),tgr=r(mSe," \u2014 "),GW=n(mSe,"A",{href:!0});var W5t=s(GW);agr=r(W5t,"TFTapasForMaskedLM"),W5t.forEach(t),ngr=r(mSe," (TAPAS model)"),mSe.forEach(t),sgr=i(le),YT=n(le,"LI",{});var gSe=s(YT);W1e=n(gSe,"STRONG",{});var Q5t=s(W1e);lgr=r(Q5t,"transfo-xl"),Q5t.forEach(t),igr=r(gSe," \u2014 "),OW=n(gSe,"A",{href:!0});var H5t=s(OW);dgr=r(H5t,"TFTransfoXLLMHeadModel"),H5t.forEach(t),cgr=r(gSe," (Transformer-XL model)"),gSe.forEach(t),fgr=i(le),KT=n(le,"LI",{});var hSe=s(KT);Q1e=n(hSe,"STRONG",{});var U5t=s(Q1e);mgr=r(U5t,"vit_mae"),U5t.forEach(t),ggr=r(hSe," \u2014 "),VW=n(hSe,"A",{href:!0});var J5t=s(VW);hgr=r(J5t,"TFViTMAEForPreTraining"),J5t.forEach(t),pgr=r(hSe," (ViTMAE model)"),hSe.forEach(t),_gr=i(le),ZT=n(le,"LI",{});var pSe=s(ZT);H1e=n(pSe,"STRONG",{});var Y5t=s(H1e);ugr=r(Y5t,"xlm"),Y5t.forEach(t),bgr=r(pSe," \u2014 "),XW=n(pSe,"A",{href:!0});var K5t=s(XW);vgr=r(K5t,"TFXLMWithLMHeadModel"),K5t.forEach(t),Fgr=r(pSe," (XLM model)"),pSe.forEach(t),Tgr=i(le),e7=n(le,"LI",{});var _Se=s(e7);U1e=n(_Se,"STRONG",{});var Z5t=s(U1e);Mgr=r(Z5t,"xlm-roberta"),Z5t.forEach(t),Egr=r(_Se," \u2014 "),zW=n(_Se,"A",{href:!0});var evt=s(zW);Cgr=r(evt,"TFXLMRobertaForMaskedLM"),evt.forEach(t),wgr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),Agr=i(le),o7=n(le,"LI",{});var uSe=s(o7);J1e=n(uSe,"STRONG",{});var ovt=s(J1e);ygr=r(ovt,"xlnet"),ovt.forEach(t),Lgr=r(uSe," \u2014 "),WW=n(uSe,"A",{href:!0});var rvt=s(WW);xgr=r(rvt,"TFXLNetLMHeadModel"),rvt.forEach(t),$gr=r(uSe," (XLNet model)"),uSe.forEach(t),le.forEach(t),kgr=i(pl),T(r7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Jqe=i(f),Wd=n(f,"H2",{class:!0});var rDe=s(Wd);t7=n(rDe,"A",{id:!0,class:!0,href:!0});var tvt=s(t7);Y1e=n(tvt,"SPAN",{});var avt=s(Y1e);T(r8.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),Sgr=i(rDe),K1e=n(rDe,"SPAN",{});var nvt=s(K1e);Rgr=r(nvt,"TFAutoModelForCausalLM"),nvt.forEach(t),rDe.forEach(t),Yqe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(t8.$$.fragment,_l),Pgr=i(_l),Qd=n(_l,"P",{});var SZ=s(Qd);Bgr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QW=n(SZ,"A",{href:!0});var svt=s(QW);Igr=r(svt,"from_pretrained()"),svt.forEach(t),qgr=r(SZ," class method or the "),HW=n(SZ,"A",{href:!0});var lvt=s(HW);Ngr=r(lvt,"from_config()"),lvt.forEach(t),jgr=r(SZ,` class
method.`),SZ.forEach(t),Dgr=i(_l),a8=n(_l,"P",{});var tDe=s(a8);Ggr=r(tDe,"This class cannot be instantiated directly using "),Z1e=n(tDe,"CODE",{});var ivt=s(Z1e);Ogr=r(ivt,"__init__()"),ivt.forEach(t),Vgr=r(tDe," (throws an error)."),tDe.forEach(t),Xgr=i(_l),xt=n(_l,"DIV",{class:!0});var mA=s(xt);T(n8.$$.fragment,mA),zgr=i(mA),ebe=n(mA,"P",{});var dvt=s(ebe);Wgr=r(dvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dvt.forEach(t),Qgr=i(mA),Hd=n(mA,"P",{});var RZ=s(Hd);Hgr=r(RZ,`Note:
Loading a model from its configuration file does `),obe=n(RZ,"STRONG",{});var cvt=s(obe);Ugr=r(cvt,"not"),cvt.forEach(t),Jgr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(RZ,"A",{href:!0});var fvt=s(UW);Ygr=r(fvt,"from_pretrained()"),fvt.forEach(t),Kgr=r(RZ," to load the model weights."),RZ.forEach(t),Zgr=i(mA),T(a7.$$.fragment,mA),mA.forEach(t),ehr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(s8.$$.fragment,ul),ohr=i(ul),rbe=n(ul,"P",{});var mvt=s(rbe);rhr=r(mvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mvt.forEach(t),thr=i(ul),en=n(ul,"P",{});var gA=s(en);ahr=r(gA,"The model class to instantiate is selected based on the "),tbe=n(gA,"CODE",{});var gvt=s(tbe);nhr=r(gvt,"model_type"),gvt.forEach(t),shr=r(gA,` property of the config object (either
passed as an argument or loaded from `),abe=n(gA,"CODE",{});var hvt=s(abe);lhr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),ihr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(gA,"CODE",{});var pvt=s(nbe);dhr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),chr=r(gA,":"),gA.forEach(t),fhr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);n7=n(Ce,"LI",{});var bSe=s(n7);sbe=n(bSe,"STRONG",{});var _vt=s(sbe);mhr=r(_vt,"bert"),_vt.forEach(t),ghr=r(bSe," \u2014 "),JW=n(bSe,"A",{href:!0});var uvt=s(JW);hhr=r(uvt,"TFBertLMHeadModel"),uvt.forEach(t),phr=r(bSe," (BERT model)"),bSe.forEach(t),_hr=i(Ce),s7=n(Ce,"LI",{});var vSe=s(s7);lbe=n(vSe,"STRONG",{});var bvt=s(lbe);uhr=r(bvt,"camembert"),bvt.forEach(t),bhr=r(vSe," \u2014 "),YW=n(vSe,"A",{href:!0});var vvt=s(YW);vhr=r(vvt,"TFCamembertForCausalLM"),vvt.forEach(t),Fhr=r(vSe," (CamemBERT model)"),vSe.forEach(t),Thr=i(Ce),l7=n(Ce,"LI",{});var FSe=s(l7);ibe=n(FSe,"STRONG",{});var Fvt=s(ibe);Mhr=r(Fvt,"ctrl"),Fvt.forEach(t),Ehr=r(FSe," \u2014 "),KW=n(FSe,"A",{href:!0});var Tvt=s(KW);Chr=r(Tvt,"TFCTRLLMHeadModel"),Tvt.forEach(t),whr=r(FSe," (CTRL model)"),FSe.forEach(t),Ahr=i(Ce),i7=n(Ce,"LI",{});var TSe=s(i7);dbe=n(TSe,"STRONG",{});var Mvt=s(dbe);yhr=r(Mvt,"gpt2"),Mvt.forEach(t),Lhr=r(TSe," \u2014 "),ZW=n(TSe,"A",{href:!0});var Evt=s(ZW);xhr=r(Evt,"TFGPT2LMHeadModel"),Evt.forEach(t),$hr=r(TSe," (OpenAI GPT-2 model)"),TSe.forEach(t),khr=i(Ce),d7=n(Ce,"LI",{});var MSe=s(d7);cbe=n(MSe,"STRONG",{});var Cvt=s(cbe);Shr=r(Cvt,"gptj"),Cvt.forEach(t),Rhr=r(MSe," \u2014 "),eQ=n(MSe,"A",{href:!0});var wvt=s(eQ);Phr=r(wvt,"TFGPTJForCausalLM"),wvt.forEach(t),Bhr=r(MSe," (GPT-J model)"),MSe.forEach(t),Ihr=i(Ce),c7=n(Ce,"LI",{});var ESe=s(c7);fbe=n(ESe,"STRONG",{});var Avt=s(fbe);qhr=r(Avt,"openai-gpt"),Avt.forEach(t),Nhr=r(ESe," \u2014 "),oQ=n(ESe,"A",{href:!0});var yvt=s(oQ);jhr=r(yvt,"TFOpenAIGPTLMHeadModel"),yvt.forEach(t),Dhr=r(ESe," (OpenAI GPT model)"),ESe.forEach(t),Ghr=i(Ce),f7=n(Ce,"LI",{});var CSe=s(f7);mbe=n(CSe,"STRONG",{});var Lvt=s(mbe);Ohr=r(Lvt,"rembert"),Lvt.forEach(t),Vhr=r(CSe," \u2014 "),rQ=n(CSe,"A",{href:!0});var xvt=s(rQ);Xhr=r(xvt,"TFRemBertForCausalLM"),xvt.forEach(t),zhr=r(CSe," (RemBERT model)"),CSe.forEach(t),Whr=i(Ce),m7=n(Ce,"LI",{});var wSe=s(m7);gbe=n(wSe,"STRONG",{});var $vt=s(gbe);Qhr=r($vt,"roberta"),$vt.forEach(t),Hhr=r(wSe," \u2014 "),tQ=n(wSe,"A",{href:!0});var kvt=s(tQ);Uhr=r(kvt,"TFRobertaForCausalLM"),kvt.forEach(t),Jhr=r(wSe," (RoBERTa model)"),wSe.forEach(t),Yhr=i(Ce),g7=n(Ce,"LI",{});var ASe=s(g7);hbe=n(ASe,"STRONG",{});var Svt=s(hbe);Khr=r(Svt,"roformer"),Svt.forEach(t),Zhr=r(ASe," \u2014 "),aQ=n(ASe,"A",{href:!0});var Rvt=s(aQ);epr=r(Rvt,"TFRoFormerForCausalLM"),Rvt.forEach(t),opr=r(ASe," (RoFormer model)"),ASe.forEach(t),rpr=i(Ce),h7=n(Ce,"LI",{});var ySe=s(h7);pbe=n(ySe,"STRONG",{});var Pvt=s(pbe);tpr=r(Pvt,"transfo-xl"),Pvt.forEach(t),apr=r(ySe," \u2014 "),nQ=n(ySe,"A",{href:!0});var Bvt=s(nQ);npr=r(Bvt,"TFTransfoXLLMHeadModel"),Bvt.forEach(t),spr=r(ySe," (Transformer-XL model)"),ySe.forEach(t),lpr=i(Ce),p7=n(Ce,"LI",{});var LSe=s(p7);_be=n(LSe,"STRONG",{});var Ivt=s(_be);ipr=r(Ivt,"xlm"),Ivt.forEach(t),dpr=r(LSe," \u2014 "),sQ=n(LSe,"A",{href:!0});var qvt=s(sQ);cpr=r(qvt,"TFXLMWithLMHeadModel"),qvt.forEach(t),fpr=r(LSe," (XLM model)"),LSe.forEach(t),mpr=i(Ce),_7=n(Ce,"LI",{});var xSe=s(_7);ube=n(xSe,"STRONG",{});var Nvt=s(ube);gpr=r(Nvt,"xlnet"),Nvt.forEach(t),hpr=r(xSe," \u2014 "),lQ=n(xSe,"A",{href:!0});var jvt=s(lQ);ppr=r(jvt,"TFXLNetLMHeadModel"),jvt.forEach(t),_pr=r(xSe," (XLNet model)"),xSe.forEach(t),Ce.forEach(t),upr=i(ul),T(u7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Kqe=i(f),Ud=n(f,"H2",{class:!0});var aDe=s(Ud);b7=n(aDe,"A",{id:!0,class:!0,href:!0});var Dvt=s(b7);bbe=n(Dvt,"SPAN",{});var Gvt=s(bbe);T(l8.$$.fragment,Gvt),Gvt.forEach(t),Dvt.forEach(t),bpr=i(aDe),vbe=n(aDe,"SPAN",{});var Ovt=s(vbe);vpr=r(Ovt,"TFAutoModelForImageClassification"),Ovt.forEach(t),aDe.forEach(t),Zqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(i8.$$.fragment,bl),Fpr=i(bl),Jd=n(bl,"P",{});var PZ=s(Jd);Tpr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=n(PZ,"A",{href:!0});var Vvt=s(iQ);Mpr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),Epr=r(PZ," class method or the "),dQ=n(PZ,"A",{href:!0});var Xvt=s(dQ);Cpr=r(Xvt,"from_config()"),Xvt.forEach(t),wpr=r(PZ,` class
method.`),PZ.forEach(t),Apr=i(bl),d8=n(bl,"P",{});var nDe=s(d8);ypr=r(nDe,"This class cannot be instantiated directly using "),Fbe=n(nDe,"CODE",{});var zvt=s(Fbe);Lpr=r(zvt,"__init__()"),zvt.forEach(t),xpr=r(nDe," (throws an error)."),nDe.forEach(t),$pr=i(bl),$t=n(bl,"DIV",{class:!0});var hA=s($t);T(c8.$$.fragment,hA),kpr=i(hA),Tbe=n(hA,"P",{});var Wvt=s(Tbe);Spr=r(Wvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wvt.forEach(t),Rpr=i(hA),Yd=n(hA,"P",{});var BZ=s(Yd);Ppr=r(BZ,`Note:
Loading a model from its configuration file does `),Mbe=n(BZ,"STRONG",{});var Qvt=s(Mbe);Bpr=r(Qvt,"not"),Qvt.forEach(t),Ipr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(BZ,"A",{href:!0});var Hvt=s(cQ);qpr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Npr=r(BZ," to load the model weights."),BZ.forEach(t),jpr=i(hA),T(v7.$$.fragment,hA),hA.forEach(t),Dpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(f8.$$.fragment,vl),Gpr=i(vl),Ebe=n(vl,"P",{});var Uvt=s(Ebe);Opr=r(Uvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uvt.forEach(t),Vpr=i(vl),on=n(vl,"P",{});var pA=s(on);Xpr=r(pA,"The model class to instantiate is selected based on the "),Cbe=n(pA,"CODE",{});var Jvt=s(Cbe);zpr=r(Jvt,"model_type"),Jvt.forEach(t),Wpr=r(pA,` property of the config object (either
passed as an argument or loaded from `),wbe=n(pA,"CODE",{});var Yvt=s(wbe);Qpr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),Hpr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(pA,"CODE",{});var Kvt=s(Abe);Upr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),Jpr=r(pA,":"),pA.forEach(t),Ypr=i(vl),rn=n(vl,"UL",{});var _A=s(rn);F7=n(_A,"LI",{});var $Se=s(F7);ybe=n($Se,"STRONG",{});var Zvt=s(ybe);Kpr=r(Zvt,"convnext"),Zvt.forEach(t),Zpr=r($Se," \u2014 "),fQ=n($Se,"A",{href:!0});var e3t=s(fQ);e_r=r(e3t,"TFConvNextForImageClassification"),e3t.forEach(t),o_r=r($Se," (ConvNext model)"),$Se.forEach(t),r_r=i(_A),T7=n(_A,"LI",{});var kSe=s(T7);Lbe=n(kSe,"STRONG",{});var o3t=s(Lbe);t_r=r(o3t,"data2vec-vision"),o3t.forEach(t),a_r=r(kSe," \u2014 "),mQ=n(kSe,"A",{href:!0});var r3t=s(mQ);n_r=r(r3t,"TFData2VecVisionForImageClassification"),r3t.forEach(t),s_r=r(kSe," (Data2VecVision model)"),kSe.forEach(t),l_r=i(_A),M7=n(_A,"LI",{});var SSe=s(M7);xbe=n(SSe,"STRONG",{});var t3t=s(xbe);i_r=r(t3t,"swin"),t3t.forEach(t),d_r=r(SSe," \u2014 "),gQ=n(SSe,"A",{href:!0});var a3t=s(gQ);c_r=r(a3t,"TFSwinForImageClassification"),a3t.forEach(t),f_r=r(SSe," (Swin model)"),SSe.forEach(t),m_r=i(_A),E7=n(_A,"LI",{});var RSe=s(E7);$be=n(RSe,"STRONG",{});var n3t=s($be);g_r=r(n3t,"vit"),n3t.forEach(t),h_r=r(RSe," \u2014 "),hQ=n(RSe,"A",{href:!0});var s3t=s(hQ);p_r=r(s3t,"TFViTForImageClassification"),s3t.forEach(t),__r=r(RSe," (ViT model)"),RSe.forEach(t),_A.forEach(t),u_r=i(vl),T(C7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),eNe=i(f),Kd=n(f,"H2",{class:!0});var sDe=s(Kd);w7=n(sDe,"A",{id:!0,class:!0,href:!0});var l3t=s(w7);kbe=n(l3t,"SPAN",{});var i3t=s(kbe);T(m8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),b_r=i(sDe),Sbe=n(sDe,"SPAN",{});var d3t=s(Sbe);v_r=r(d3t,"TFAutoModelForMaskedLM"),d3t.forEach(t),sDe.forEach(t),oNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(g8.$$.fragment,Fl),F_r=i(Fl),Zd=n(Fl,"P",{});var IZ=s(Zd);T_r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=n(IZ,"A",{href:!0});var c3t=s(pQ);M_r=r(c3t,"from_pretrained()"),c3t.forEach(t),E_r=r(IZ," class method or the "),_Q=n(IZ,"A",{href:!0});var f3t=s(_Q);C_r=r(f3t,"from_config()"),f3t.forEach(t),w_r=r(IZ,` class
method.`),IZ.forEach(t),A_r=i(Fl),h8=n(Fl,"P",{});var lDe=s(h8);y_r=r(lDe,"This class cannot be instantiated directly using "),Rbe=n(lDe,"CODE",{});var m3t=s(Rbe);L_r=r(m3t,"__init__()"),m3t.forEach(t),x_r=r(lDe," (throws an error)."),lDe.forEach(t),$_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var uA=s(kt);T(p8.$$.fragment,uA),k_r=i(uA),Pbe=n(uA,"P",{});var g3t=s(Pbe);S_r=r(g3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g3t.forEach(t),R_r=i(uA),ec=n(uA,"P",{});var qZ=s(ec);P_r=r(qZ,`Note:
Loading a model from its configuration file does `),Bbe=n(qZ,"STRONG",{});var h3t=s(Bbe);B_r=r(h3t,"not"),h3t.forEach(t),I_r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(qZ,"A",{href:!0});var p3t=s(uQ);q_r=r(p3t,"from_pretrained()"),p3t.forEach(t),N_r=r(qZ," to load the model weights."),qZ.forEach(t),j_r=i(uA),T(A7.$$.fragment,uA),uA.forEach(t),D_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(_8.$$.fragment,Tl),G_r=i(Tl),Ibe=n(Tl,"P",{});var _3t=s(Ibe);O_r=r(_3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_3t.forEach(t),V_r=i(Tl),tn=n(Tl,"P",{});var bA=s(tn);X_r=r(bA,"The model class to instantiate is selected based on the "),qbe=n(bA,"CODE",{});var u3t=s(qbe);z_r=r(u3t,"model_type"),u3t.forEach(t),W_r=r(bA,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(bA,"CODE",{});var b3t=s(Nbe);Q_r=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),H_r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(bA,"CODE",{});var v3t=s(jbe);U_r=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),J_r=r(bA,":"),bA.forEach(t),Y_r=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);y7=n(fe,"LI",{});var PSe=s(y7);Dbe=n(PSe,"STRONG",{});var F3t=s(Dbe);K_r=r(F3t,"albert"),F3t.forEach(t),Z_r=r(PSe," \u2014 "),bQ=n(PSe,"A",{href:!0});var T3t=s(bQ);eur=r(T3t,"TFAlbertForMaskedLM"),T3t.forEach(t),our=r(PSe," (ALBERT model)"),PSe.forEach(t),rur=i(fe),L7=n(fe,"LI",{});var BSe=s(L7);Gbe=n(BSe,"STRONG",{});var M3t=s(Gbe);tur=r(M3t,"bert"),M3t.forEach(t),aur=r(BSe," \u2014 "),vQ=n(BSe,"A",{href:!0});var E3t=s(vQ);nur=r(E3t,"TFBertForMaskedLM"),E3t.forEach(t),sur=r(BSe," (BERT model)"),BSe.forEach(t),lur=i(fe),x7=n(fe,"LI",{});var ISe=s(x7);Obe=n(ISe,"STRONG",{});var C3t=s(Obe);iur=r(C3t,"camembert"),C3t.forEach(t),dur=r(ISe," \u2014 "),FQ=n(ISe,"A",{href:!0});var w3t=s(FQ);cur=r(w3t,"TFCamembertForMaskedLM"),w3t.forEach(t),fur=r(ISe," (CamemBERT model)"),ISe.forEach(t),mur=i(fe),$7=n(fe,"LI",{});var qSe=s($7);Vbe=n(qSe,"STRONG",{});var A3t=s(Vbe);gur=r(A3t,"convbert"),A3t.forEach(t),hur=r(qSe," \u2014 "),TQ=n(qSe,"A",{href:!0});var y3t=s(TQ);pur=r(y3t,"TFConvBertForMaskedLM"),y3t.forEach(t),_ur=r(qSe," (ConvBERT model)"),qSe.forEach(t),uur=i(fe),k7=n(fe,"LI",{});var NSe=s(k7);Xbe=n(NSe,"STRONG",{});var L3t=s(Xbe);bur=r(L3t,"deberta"),L3t.forEach(t),vur=r(NSe," \u2014 "),MQ=n(NSe,"A",{href:!0});var x3t=s(MQ);Fur=r(x3t,"TFDebertaForMaskedLM"),x3t.forEach(t),Tur=r(NSe," (DeBERTa model)"),NSe.forEach(t),Mur=i(fe),S7=n(fe,"LI",{});var jSe=s(S7);zbe=n(jSe,"STRONG",{});var $3t=s(zbe);Eur=r($3t,"deberta-v2"),$3t.forEach(t),Cur=r(jSe," \u2014 "),EQ=n(jSe,"A",{href:!0});var k3t=s(EQ);wur=r(k3t,"TFDebertaV2ForMaskedLM"),k3t.forEach(t),Aur=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),yur=i(fe),R7=n(fe,"LI",{});var DSe=s(R7);Wbe=n(DSe,"STRONG",{});var S3t=s(Wbe);Lur=r(S3t,"distilbert"),S3t.forEach(t),xur=r(DSe," \u2014 "),CQ=n(DSe,"A",{href:!0});var R3t=s(CQ);$ur=r(R3t,"TFDistilBertForMaskedLM"),R3t.forEach(t),kur=r(DSe," (DistilBERT model)"),DSe.forEach(t),Sur=i(fe),P7=n(fe,"LI",{});var GSe=s(P7);Qbe=n(GSe,"STRONG",{});var P3t=s(Qbe);Rur=r(P3t,"electra"),P3t.forEach(t),Pur=r(GSe," \u2014 "),wQ=n(GSe,"A",{href:!0});var B3t=s(wQ);Bur=r(B3t,"TFElectraForMaskedLM"),B3t.forEach(t),Iur=r(GSe," (ELECTRA model)"),GSe.forEach(t),qur=i(fe),B7=n(fe,"LI",{});var OSe=s(B7);Hbe=n(OSe,"STRONG",{});var I3t=s(Hbe);Nur=r(I3t,"flaubert"),I3t.forEach(t),jur=r(OSe," \u2014 "),AQ=n(OSe,"A",{href:!0});var q3t=s(AQ);Dur=r(q3t,"TFFlaubertWithLMHeadModel"),q3t.forEach(t),Gur=r(OSe," (FlauBERT model)"),OSe.forEach(t),Our=i(fe),I7=n(fe,"LI",{});var VSe=s(I7);Ube=n(VSe,"STRONG",{});var N3t=s(Ube);Vur=r(N3t,"funnel"),N3t.forEach(t),Xur=r(VSe," \u2014 "),yQ=n(VSe,"A",{href:!0});var j3t=s(yQ);zur=r(j3t,"TFFunnelForMaskedLM"),j3t.forEach(t),Wur=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),Qur=i(fe),q7=n(fe,"LI",{});var XSe=s(q7);Jbe=n(XSe,"STRONG",{});var D3t=s(Jbe);Hur=r(D3t,"layoutlm"),D3t.forEach(t),Uur=r(XSe," \u2014 "),LQ=n(XSe,"A",{href:!0});var G3t=s(LQ);Jur=r(G3t,"TFLayoutLMForMaskedLM"),G3t.forEach(t),Yur=r(XSe," (LayoutLM model)"),XSe.forEach(t),Kur=i(fe),N7=n(fe,"LI",{});var zSe=s(N7);Ybe=n(zSe,"STRONG",{});var O3t=s(Ybe);Zur=r(O3t,"longformer"),O3t.forEach(t),e2r=r(zSe," \u2014 "),xQ=n(zSe,"A",{href:!0});var V3t=s(xQ);o2r=r(V3t,"TFLongformerForMaskedLM"),V3t.forEach(t),r2r=r(zSe," (Longformer model)"),zSe.forEach(t),t2r=i(fe),j7=n(fe,"LI",{});var WSe=s(j7);Kbe=n(WSe,"STRONG",{});var X3t=s(Kbe);a2r=r(X3t,"mobilebert"),X3t.forEach(t),n2r=r(WSe," \u2014 "),$Q=n(WSe,"A",{href:!0});var z3t=s($Q);s2r=r(z3t,"TFMobileBertForMaskedLM"),z3t.forEach(t),l2r=r(WSe," (MobileBERT model)"),WSe.forEach(t),i2r=i(fe),D7=n(fe,"LI",{});var QSe=s(D7);Zbe=n(QSe,"STRONG",{});var W3t=s(Zbe);d2r=r(W3t,"mpnet"),W3t.forEach(t),c2r=r(QSe," \u2014 "),kQ=n(QSe,"A",{href:!0});var Q3t=s(kQ);f2r=r(Q3t,"TFMPNetForMaskedLM"),Q3t.forEach(t),m2r=r(QSe," (MPNet model)"),QSe.forEach(t),g2r=i(fe),G7=n(fe,"LI",{});var HSe=s(G7);e5e=n(HSe,"STRONG",{});var H3t=s(e5e);h2r=r(H3t,"rembert"),H3t.forEach(t),p2r=r(HSe," \u2014 "),SQ=n(HSe,"A",{href:!0});var U3t=s(SQ);_2r=r(U3t,"TFRemBertForMaskedLM"),U3t.forEach(t),u2r=r(HSe," (RemBERT model)"),HSe.forEach(t),b2r=i(fe),O7=n(fe,"LI",{});var USe=s(O7);o5e=n(USe,"STRONG",{});var J3t=s(o5e);v2r=r(J3t,"roberta"),J3t.forEach(t),F2r=r(USe," \u2014 "),RQ=n(USe,"A",{href:!0});var Y3t=s(RQ);T2r=r(Y3t,"TFRobertaForMaskedLM"),Y3t.forEach(t),M2r=r(USe," (RoBERTa model)"),USe.forEach(t),E2r=i(fe),V7=n(fe,"LI",{});var JSe=s(V7);r5e=n(JSe,"STRONG",{});var K3t=s(r5e);C2r=r(K3t,"roformer"),K3t.forEach(t),w2r=r(JSe," \u2014 "),PQ=n(JSe,"A",{href:!0});var Z3t=s(PQ);A2r=r(Z3t,"TFRoFormerForMaskedLM"),Z3t.forEach(t),y2r=r(JSe," (RoFormer model)"),JSe.forEach(t),L2r=i(fe),X7=n(fe,"LI",{});var YSe=s(X7);t5e=n(YSe,"STRONG",{});var eFt=s(t5e);x2r=r(eFt,"tapas"),eFt.forEach(t),$2r=r(YSe," \u2014 "),BQ=n(YSe,"A",{href:!0});var oFt=s(BQ);k2r=r(oFt,"TFTapasForMaskedLM"),oFt.forEach(t),S2r=r(YSe," (TAPAS model)"),YSe.forEach(t),R2r=i(fe),z7=n(fe,"LI",{});var KSe=s(z7);a5e=n(KSe,"STRONG",{});var rFt=s(a5e);P2r=r(rFt,"xlm"),rFt.forEach(t),B2r=r(KSe," \u2014 "),IQ=n(KSe,"A",{href:!0});var tFt=s(IQ);I2r=r(tFt,"TFXLMWithLMHeadModel"),tFt.forEach(t),q2r=r(KSe," (XLM model)"),KSe.forEach(t),N2r=i(fe),W7=n(fe,"LI",{});var ZSe=s(W7);n5e=n(ZSe,"STRONG",{});var aFt=s(n5e);j2r=r(aFt,"xlm-roberta"),aFt.forEach(t),D2r=r(ZSe," \u2014 "),qQ=n(ZSe,"A",{href:!0});var nFt=s(qQ);G2r=r(nFt,"TFXLMRobertaForMaskedLM"),nFt.forEach(t),O2r=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),fe.forEach(t),V2r=i(Tl),T(Q7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),rNe=i(f),oc=n(f,"H2",{class:!0});var iDe=s(oc);H7=n(iDe,"A",{id:!0,class:!0,href:!0});var sFt=s(H7);s5e=n(sFt,"SPAN",{});var lFt=s(s5e);T(u8.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),X2r=i(iDe),l5e=n(iDe,"SPAN",{});var iFt=s(l5e);z2r=r(iFt,"TFAutoModelForSeq2SeqLM"),iFt.forEach(t),iDe.forEach(t),tNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(b8.$$.fragment,Ml),W2r=i(Ml),rc=n(Ml,"P",{});var NZ=s(rc);Q2r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=n(NZ,"A",{href:!0});var dFt=s(NQ);H2r=r(dFt,"from_pretrained()"),dFt.forEach(t),U2r=r(NZ," class method or the "),jQ=n(NZ,"A",{href:!0});var cFt=s(jQ);J2r=r(cFt,"from_config()"),cFt.forEach(t),Y2r=r(NZ,` class
method.`),NZ.forEach(t),K2r=i(Ml),v8=n(Ml,"P",{});var dDe=s(v8);Z2r=r(dDe,"This class cannot be instantiated directly using "),i5e=n(dDe,"CODE",{});var fFt=s(i5e);e1r=r(fFt,"__init__()"),fFt.forEach(t),o1r=r(dDe," (throws an error)."),dDe.forEach(t),r1r=i(Ml),St=n(Ml,"DIV",{class:!0});var vA=s(St);T(F8.$$.fragment,vA),t1r=i(vA),d5e=n(vA,"P",{});var mFt=s(d5e);a1r=r(mFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mFt.forEach(t),n1r=i(vA),tc=n(vA,"P",{});var jZ=s(tc);s1r=r(jZ,`Note:
Loading a model from its configuration file does `),c5e=n(jZ,"STRONG",{});var gFt=s(c5e);l1r=r(gFt,"not"),gFt.forEach(t),i1r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(jZ,"A",{href:!0});var hFt=s(DQ);d1r=r(hFt,"from_pretrained()"),hFt.forEach(t),c1r=r(jZ," to load the model weights."),jZ.forEach(t),f1r=i(vA),T(U7.$$.fragment,vA),vA.forEach(t),m1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(T8.$$.fragment,El),g1r=i(El),f5e=n(El,"P",{});var pFt=s(f5e);h1r=r(pFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pFt.forEach(t),p1r=i(El),an=n(El,"P",{});var FA=s(an);_1r=r(FA,"The model class to instantiate is selected based on the "),m5e=n(FA,"CODE",{});var _Ft=s(m5e);u1r=r(_Ft,"model_type"),_Ft.forEach(t),b1r=r(FA,` property of the config object (either
passed as an argument or loaded from `),g5e=n(FA,"CODE",{});var uFt=s(g5e);v1r=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),F1r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(FA,"CODE",{});var bFt=s(h5e);T1r=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),M1r=r(FA,":"),FA.forEach(t),E1r=i(El),ye=n(El,"UL",{});var Be=s(ye);J7=n(Be,"LI",{});var eRe=s(J7);p5e=n(eRe,"STRONG",{});var vFt=s(p5e);C1r=r(vFt,"bart"),vFt.forEach(t),w1r=r(eRe," \u2014 "),GQ=n(eRe,"A",{href:!0});var FFt=s(GQ);A1r=r(FFt,"TFBartForConditionalGeneration"),FFt.forEach(t),y1r=r(eRe," (BART model)"),eRe.forEach(t),L1r=i(Be),Y7=n(Be,"LI",{});var oRe=s(Y7);_5e=n(oRe,"STRONG",{});var TFt=s(_5e);x1r=r(TFt,"blenderbot"),TFt.forEach(t),$1r=r(oRe," \u2014 "),OQ=n(oRe,"A",{href:!0});var MFt=s(OQ);k1r=r(MFt,"TFBlenderbotForConditionalGeneration"),MFt.forEach(t),S1r=r(oRe," (Blenderbot model)"),oRe.forEach(t),R1r=i(Be),K7=n(Be,"LI",{});var rRe=s(K7);u5e=n(rRe,"STRONG",{});var EFt=s(u5e);P1r=r(EFt,"blenderbot-small"),EFt.forEach(t),B1r=r(rRe," \u2014 "),VQ=n(rRe,"A",{href:!0});var CFt=s(VQ);I1r=r(CFt,"TFBlenderbotSmallForConditionalGeneration"),CFt.forEach(t),q1r=r(rRe," (BlenderbotSmall model)"),rRe.forEach(t),N1r=i(Be),Z7=n(Be,"LI",{});var tRe=s(Z7);b5e=n(tRe,"STRONG",{});var wFt=s(b5e);j1r=r(wFt,"encoder-decoder"),wFt.forEach(t),D1r=r(tRe," \u2014 "),XQ=n(tRe,"A",{href:!0});var AFt=s(XQ);G1r=r(AFt,"TFEncoderDecoderModel"),AFt.forEach(t),O1r=r(tRe," (Encoder decoder model)"),tRe.forEach(t),V1r=i(Be),eM=n(Be,"LI",{});var aRe=s(eM);v5e=n(aRe,"STRONG",{});var yFt=s(v5e);X1r=r(yFt,"led"),yFt.forEach(t),z1r=r(aRe," \u2014 "),zQ=n(aRe,"A",{href:!0});var LFt=s(zQ);W1r=r(LFt,"TFLEDForConditionalGeneration"),LFt.forEach(t),Q1r=r(aRe," (LED model)"),aRe.forEach(t),H1r=i(Be),oM=n(Be,"LI",{});var nRe=s(oM);F5e=n(nRe,"STRONG",{});var xFt=s(F5e);U1r=r(xFt,"marian"),xFt.forEach(t),J1r=r(nRe," \u2014 "),WQ=n(nRe,"A",{href:!0});var $Ft=s(WQ);Y1r=r($Ft,"TFMarianMTModel"),$Ft.forEach(t),K1r=r(nRe," (Marian model)"),nRe.forEach(t),Z1r=i(Be),rM=n(Be,"LI",{});var sRe=s(rM);T5e=n(sRe,"STRONG",{});var kFt=s(T5e);ebr=r(kFt,"mbart"),kFt.forEach(t),obr=r(sRe," \u2014 "),QQ=n(sRe,"A",{href:!0});var SFt=s(QQ);rbr=r(SFt,"TFMBartForConditionalGeneration"),SFt.forEach(t),tbr=r(sRe," (mBART model)"),sRe.forEach(t),abr=i(Be),tM=n(Be,"LI",{});var lRe=s(tM);M5e=n(lRe,"STRONG",{});var RFt=s(M5e);nbr=r(RFt,"mt5"),RFt.forEach(t),sbr=r(lRe," \u2014 "),HQ=n(lRe,"A",{href:!0});var PFt=s(HQ);lbr=r(PFt,"TFMT5ForConditionalGeneration"),PFt.forEach(t),ibr=r(lRe," (mT5 model)"),lRe.forEach(t),dbr=i(Be),aM=n(Be,"LI",{});var iRe=s(aM);E5e=n(iRe,"STRONG",{});var BFt=s(E5e);cbr=r(BFt,"pegasus"),BFt.forEach(t),fbr=r(iRe," \u2014 "),UQ=n(iRe,"A",{href:!0});var IFt=s(UQ);mbr=r(IFt,"TFPegasusForConditionalGeneration"),IFt.forEach(t),gbr=r(iRe," (Pegasus model)"),iRe.forEach(t),hbr=i(Be),nM=n(Be,"LI",{});var dRe=s(nM);C5e=n(dRe,"STRONG",{});var qFt=s(C5e);pbr=r(qFt,"t5"),qFt.forEach(t),_br=r(dRe," \u2014 "),JQ=n(dRe,"A",{href:!0});var NFt=s(JQ);ubr=r(NFt,"TFT5ForConditionalGeneration"),NFt.forEach(t),bbr=r(dRe," (T5 model)"),dRe.forEach(t),Be.forEach(t),vbr=i(El),T(sM.$$.fragment,El),El.forEach(t),Ml.forEach(t),aNe=i(f),ac=n(f,"H2",{class:!0});var cDe=s(ac);lM=n(cDe,"A",{id:!0,class:!0,href:!0});var jFt=s(lM);w5e=n(jFt,"SPAN",{});var DFt=s(w5e);T(M8.$$.fragment,DFt),DFt.forEach(t),jFt.forEach(t),Fbr=i(cDe),A5e=n(cDe,"SPAN",{});var GFt=s(A5e);Tbr=r(GFt,"TFAutoModelForSequenceClassification"),GFt.forEach(t),cDe.forEach(t),nNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(E8.$$.fragment,Cl),Mbr=i(Cl),nc=n(Cl,"P",{});var DZ=s(nc);Ebr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=n(DZ,"A",{href:!0});var OFt=s(YQ);Cbr=r(OFt,"from_pretrained()"),OFt.forEach(t),wbr=r(DZ," class method or the "),KQ=n(DZ,"A",{href:!0});var VFt=s(KQ);Abr=r(VFt,"from_config()"),VFt.forEach(t),ybr=r(DZ,` class
method.`),DZ.forEach(t),Lbr=i(Cl),C8=n(Cl,"P",{});var fDe=s(C8);xbr=r(fDe,"This class cannot be instantiated directly using "),y5e=n(fDe,"CODE",{});var XFt=s(y5e);$br=r(XFt,"__init__()"),XFt.forEach(t),kbr=r(fDe," (throws an error)."),fDe.forEach(t),Sbr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var TA=s(Rt);T(w8.$$.fragment,TA),Rbr=i(TA),L5e=n(TA,"P",{});var zFt=s(L5e);Pbr=r(zFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zFt.forEach(t),Bbr=i(TA),sc=n(TA,"P",{});var GZ=s(sc);Ibr=r(GZ,`Note:
Loading a model from its configuration file does `),x5e=n(GZ,"STRONG",{});var WFt=s(x5e);qbr=r(WFt,"not"),WFt.forEach(t),Nbr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(GZ,"A",{href:!0});var QFt=s(ZQ);jbr=r(QFt,"from_pretrained()"),QFt.forEach(t),Dbr=r(GZ," to load the model weights."),GZ.forEach(t),Gbr=i(TA),T(iM.$$.fragment,TA),TA.forEach(t),Obr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(A8.$$.fragment,wl),Vbr=i(wl),$5e=n(wl,"P",{});var HFt=s($5e);Xbr=r(HFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HFt.forEach(t),zbr=i(wl),nn=n(wl,"P",{});var MA=s(nn);Wbr=r(MA,"The model class to instantiate is selected based on the "),k5e=n(MA,"CODE",{});var UFt=s(k5e);Qbr=r(UFt,"model_type"),UFt.forEach(t),Hbr=r(MA,` property of the config object (either
passed as an argument or loaded from `),S5e=n(MA,"CODE",{});var JFt=s(S5e);Ubr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),Jbr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(MA,"CODE",{});var YFt=s(R5e);Ybr=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),Kbr=r(MA,":"),MA.forEach(t),Zbr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);dM=n(ae,"LI",{});var cRe=s(dM);P5e=n(cRe,"STRONG",{});var KFt=s(P5e);e5r=r(KFt,"albert"),KFt.forEach(t),o5r=r(cRe," \u2014 "),eH=n(cRe,"A",{href:!0});var ZFt=s(eH);r5r=r(ZFt,"TFAlbertForSequenceClassification"),ZFt.forEach(t),t5r=r(cRe," (ALBERT model)"),cRe.forEach(t),a5r=i(ae),cM=n(ae,"LI",{});var fRe=s(cM);B5e=n(fRe,"STRONG",{});var eTt=s(B5e);n5r=r(eTt,"bert"),eTt.forEach(t),s5r=r(fRe," \u2014 "),oH=n(fRe,"A",{href:!0});var oTt=s(oH);l5r=r(oTt,"TFBertForSequenceClassification"),oTt.forEach(t),i5r=r(fRe," (BERT model)"),fRe.forEach(t),d5r=i(ae),fM=n(ae,"LI",{});var mRe=s(fM);I5e=n(mRe,"STRONG",{});var rTt=s(I5e);c5r=r(rTt,"camembert"),rTt.forEach(t),f5r=r(mRe," \u2014 "),rH=n(mRe,"A",{href:!0});var tTt=s(rH);m5r=r(tTt,"TFCamembertForSequenceClassification"),tTt.forEach(t),g5r=r(mRe," (CamemBERT model)"),mRe.forEach(t),h5r=i(ae),mM=n(ae,"LI",{});var gRe=s(mM);q5e=n(gRe,"STRONG",{});var aTt=s(q5e);p5r=r(aTt,"convbert"),aTt.forEach(t),_5r=r(gRe," \u2014 "),tH=n(gRe,"A",{href:!0});var nTt=s(tH);u5r=r(nTt,"TFConvBertForSequenceClassification"),nTt.forEach(t),b5r=r(gRe," (ConvBERT model)"),gRe.forEach(t),v5r=i(ae),gM=n(ae,"LI",{});var hRe=s(gM);N5e=n(hRe,"STRONG",{});var sTt=s(N5e);F5r=r(sTt,"ctrl"),sTt.forEach(t),T5r=r(hRe," \u2014 "),aH=n(hRe,"A",{href:!0});var lTt=s(aH);M5r=r(lTt,"TFCTRLForSequenceClassification"),lTt.forEach(t),E5r=r(hRe," (CTRL model)"),hRe.forEach(t),C5r=i(ae),hM=n(ae,"LI",{});var pRe=s(hM);j5e=n(pRe,"STRONG",{});var iTt=s(j5e);w5r=r(iTt,"deberta"),iTt.forEach(t),A5r=r(pRe," \u2014 "),nH=n(pRe,"A",{href:!0});var dTt=s(nH);y5r=r(dTt,"TFDebertaForSequenceClassification"),dTt.forEach(t),L5r=r(pRe," (DeBERTa model)"),pRe.forEach(t),x5r=i(ae),pM=n(ae,"LI",{});var _Re=s(pM);D5e=n(_Re,"STRONG",{});var cTt=s(D5e);$5r=r(cTt,"deberta-v2"),cTt.forEach(t),k5r=r(_Re," \u2014 "),sH=n(_Re,"A",{href:!0});var fTt=s(sH);S5r=r(fTt,"TFDebertaV2ForSequenceClassification"),fTt.forEach(t),R5r=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),P5r=i(ae),_M=n(ae,"LI",{});var uRe=s(_M);G5e=n(uRe,"STRONG",{});var mTt=s(G5e);B5r=r(mTt,"distilbert"),mTt.forEach(t),I5r=r(uRe," \u2014 "),lH=n(uRe,"A",{href:!0});var gTt=s(lH);q5r=r(gTt,"TFDistilBertForSequenceClassification"),gTt.forEach(t),N5r=r(uRe," (DistilBERT model)"),uRe.forEach(t),j5r=i(ae),uM=n(ae,"LI",{});var bRe=s(uM);O5e=n(bRe,"STRONG",{});var hTt=s(O5e);D5r=r(hTt,"electra"),hTt.forEach(t),G5r=r(bRe," \u2014 "),iH=n(bRe,"A",{href:!0});var pTt=s(iH);O5r=r(pTt,"TFElectraForSequenceClassification"),pTt.forEach(t),V5r=r(bRe," (ELECTRA model)"),bRe.forEach(t),X5r=i(ae),bM=n(ae,"LI",{});var vRe=s(bM);V5e=n(vRe,"STRONG",{});var _Tt=s(V5e);z5r=r(_Tt,"flaubert"),_Tt.forEach(t),W5r=r(vRe," \u2014 "),dH=n(vRe,"A",{href:!0});var uTt=s(dH);Q5r=r(uTt,"TFFlaubertForSequenceClassification"),uTt.forEach(t),H5r=r(vRe," (FlauBERT model)"),vRe.forEach(t),U5r=i(ae),vM=n(ae,"LI",{});var FRe=s(vM);X5e=n(FRe,"STRONG",{});var bTt=s(X5e);J5r=r(bTt,"funnel"),bTt.forEach(t),Y5r=r(FRe," \u2014 "),cH=n(FRe,"A",{href:!0});var vTt=s(cH);K5r=r(vTt,"TFFunnelForSequenceClassification"),vTt.forEach(t),Z5r=r(FRe," (Funnel Transformer model)"),FRe.forEach(t),evr=i(ae),FM=n(ae,"LI",{});var TRe=s(FM);z5e=n(TRe,"STRONG",{});var FTt=s(z5e);ovr=r(FTt,"gpt2"),FTt.forEach(t),rvr=r(TRe," \u2014 "),fH=n(TRe,"A",{href:!0});var TTt=s(fH);tvr=r(TTt,"TFGPT2ForSequenceClassification"),TTt.forEach(t),avr=r(TRe," (OpenAI GPT-2 model)"),TRe.forEach(t),nvr=i(ae),TM=n(ae,"LI",{});var MRe=s(TM);W5e=n(MRe,"STRONG",{});var MTt=s(W5e);svr=r(MTt,"gptj"),MTt.forEach(t),lvr=r(MRe," \u2014 "),mH=n(MRe,"A",{href:!0});var ETt=s(mH);ivr=r(ETt,"TFGPTJForSequenceClassification"),ETt.forEach(t),dvr=r(MRe," (GPT-J model)"),MRe.forEach(t),cvr=i(ae),MM=n(ae,"LI",{});var ERe=s(MM);Q5e=n(ERe,"STRONG",{});var CTt=s(Q5e);fvr=r(CTt,"layoutlm"),CTt.forEach(t),mvr=r(ERe," \u2014 "),gH=n(ERe,"A",{href:!0});var wTt=s(gH);gvr=r(wTt,"TFLayoutLMForSequenceClassification"),wTt.forEach(t),hvr=r(ERe," (LayoutLM model)"),ERe.forEach(t),pvr=i(ae),EM=n(ae,"LI",{});var CRe=s(EM);H5e=n(CRe,"STRONG",{});var ATt=s(H5e);_vr=r(ATt,"longformer"),ATt.forEach(t),uvr=r(CRe," \u2014 "),hH=n(CRe,"A",{href:!0});var yTt=s(hH);bvr=r(yTt,"TFLongformerForSequenceClassification"),yTt.forEach(t),vvr=r(CRe," (Longformer model)"),CRe.forEach(t),Fvr=i(ae),CM=n(ae,"LI",{});var wRe=s(CM);U5e=n(wRe,"STRONG",{});var LTt=s(U5e);Tvr=r(LTt,"mobilebert"),LTt.forEach(t),Mvr=r(wRe," \u2014 "),pH=n(wRe,"A",{href:!0});var xTt=s(pH);Evr=r(xTt,"TFMobileBertForSequenceClassification"),xTt.forEach(t),Cvr=r(wRe," (MobileBERT model)"),wRe.forEach(t),wvr=i(ae),wM=n(ae,"LI",{});var ARe=s(wM);J5e=n(ARe,"STRONG",{});var $Tt=s(J5e);Avr=r($Tt,"mpnet"),$Tt.forEach(t),yvr=r(ARe," \u2014 "),_H=n(ARe,"A",{href:!0});var kTt=s(_H);Lvr=r(kTt,"TFMPNetForSequenceClassification"),kTt.forEach(t),xvr=r(ARe," (MPNet model)"),ARe.forEach(t),$vr=i(ae),AM=n(ae,"LI",{});var yRe=s(AM);Y5e=n(yRe,"STRONG",{});var STt=s(Y5e);kvr=r(STt,"openai-gpt"),STt.forEach(t),Svr=r(yRe," \u2014 "),uH=n(yRe,"A",{href:!0});var RTt=s(uH);Rvr=r(RTt,"TFOpenAIGPTForSequenceClassification"),RTt.forEach(t),Pvr=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),Bvr=i(ae),yM=n(ae,"LI",{});var LRe=s(yM);K5e=n(LRe,"STRONG",{});var PTt=s(K5e);Ivr=r(PTt,"rembert"),PTt.forEach(t),qvr=r(LRe," \u2014 "),bH=n(LRe,"A",{href:!0});var BTt=s(bH);Nvr=r(BTt,"TFRemBertForSequenceClassification"),BTt.forEach(t),jvr=r(LRe," (RemBERT model)"),LRe.forEach(t),Dvr=i(ae),LM=n(ae,"LI",{});var xRe=s(LM);Z5e=n(xRe,"STRONG",{});var ITt=s(Z5e);Gvr=r(ITt,"roberta"),ITt.forEach(t),Ovr=r(xRe," \u2014 "),vH=n(xRe,"A",{href:!0});var qTt=s(vH);Vvr=r(qTt,"TFRobertaForSequenceClassification"),qTt.forEach(t),Xvr=r(xRe," (RoBERTa model)"),xRe.forEach(t),zvr=i(ae),xM=n(ae,"LI",{});var $Re=s(xM);eve=n($Re,"STRONG",{});var NTt=s(eve);Wvr=r(NTt,"roformer"),NTt.forEach(t),Qvr=r($Re," \u2014 "),FH=n($Re,"A",{href:!0});var jTt=s(FH);Hvr=r(jTt,"TFRoFormerForSequenceClassification"),jTt.forEach(t),Uvr=r($Re," (RoFormer model)"),$Re.forEach(t),Jvr=i(ae),$M=n(ae,"LI",{});var kRe=s($M);ove=n(kRe,"STRONG",{});var DTt=s(ove);Yvr=r(DTt,"tapas"),DTt.forEach(t),Kvr=r(kRe," \u2014 "),TH=n(kRe,"A",{href:!0});var GTt=s(TH);Zvr=r(GTt,"TFTapasForSequenceClassification"),GTt.forEach(t),e3r=r(kRe," (TAPAS model)"),kRe.forEach(t),o3r=i(ae),kM=n(ae,"LI",{});var SRe=s(kM);rve=n(SRe,"STRONG",{});var OTt=s(rve);r3r=r(OTt,"transfo-xl"),OTt.forEach(t),t3r=r(SRe," \u2014 "),MH=n(SRe,"A",{href:!0});var VTt=s(MH);a3r=r(VTt,"TFTransfoXLForSequenceClassification"),VTt.forEach(t),n3r=r(SRe," (Transformer-XL model)"),SRe.forEach(t),s3r=i(ae),SM=n(ae,"LI",{});var RRe=s(SM);tve=n(RRe,"STRONG",{});var XTt=s(tve);l3r=r(XTt,"xlm"),XTt.forEach(t),i3r=r(RRe," \u2014 "),EH=n(RRe,"A",{href:!0});var zTt=s(EH);d3r=r(zTt,"TFXLMForSequenceClassification"),zTt.forEach(t),c3r=r(RRe," (XLM model)"),RRe.forEach(t),f3r=i(ae),RM=n(ae,"LI",{});var PRe=s(RM);ave=n(PRe,"STRONG",{});var WTt=s(ave);m3r=r(WTt,"xlm-roberta"),WTt.forEach(t),g3r=r(PRe," \u2014 "),CH=n(PRe,"A",{href:!0});var QTt=s(CH);h3r=r(QTt,"TFXLMRobertaForSequenceClassification"),QTt.forEach(t),p3r=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),_3r=i(ae),PM=n(ae,"LI",{});var BRe=s(PM);nve=n(BRe,"STRONG",{});var HTt=s(nve);u3r=r(HTt,"xlnet"),HTt.forEach(t),b3r=r(BRe," \u2014 "),wH=n(BRe,"A",{href:!0});var UTt=s(wH);v3r=r(UTt,"TFXLNetForSequenceClassification"),UTt.forEach(t),F3r=r(BRe," (XLNet model)"),BRe.forEach(t),ae.forEach(t),T3r=i(wl),T(BM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),sNe=i(f),lc=n(f,"H2",{class:!0});var mDe=s(lc);IM=n(mDe,"A",{id:!0,class:!0,href:!0});var JTt=s(IM);sve=n(JTt,"SPAN",{});var YTt=s(sve);T(y8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),M3r=i(mDe),lve=n(mDe,"SPAN",{});var KTt=s(lve);E3r=r(KTt,"TFAutoModelForMultipleChoice"),KTt.forEach(t),mDe.forEach(t),lNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(L8.$$.fragment,Al),C3r=i(Al),ic=n(Al,"P",{});var OZ=s(ic);w3r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=n(OZ,"A",{href:!0});var ZTt=s(AH);A3r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),y3r=r(OZ," class method or the "),yH=n(OZ,"A",{href:!0});var e7t=s(yH);L3r=r(e7t,"from_config()"),e7t.forEach(t),x3r=r(OZ,` class
method.`),OZ.forEach(t),$3r=i(Al),x8=n(Al,"P",{});var gDe=s(x8);k3r=r(gDe,"This class cannot be instantiated directly using "),ive=n(gDe,"CODE",{});var o7t=s(ive);S3r=r(o7t,"__init__()"),o7t.forEach(t),R3r=r(gDe," (throws an error)."),gDe.forEach(t),P3r=i(Al),Pt=n(Al,"DIV",{class:!0});var EA=s(Pt);T($8.$$.fragment,EA),B3r=i(EA),dve=n(EA,"P",{});var r7t=s(dve);I3r=r(r7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),r7t.forEach(t),q3r=i(EA),dc=n(EA,"P",{});var VZ=s(dc);N3r=r(VZ,`Note:
Loading a model from its configuration file does `),cve=n(VZ,"STRONG",{});var t7t=s(cve);j3r=r(t7t,"not"),t7t.forEach(t),D3r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(VZ,"A",{href:!0});var a7t=s(LH);G3r=r(a7t,"from_pretrained()"),a7t.forEach(t),O3r=r(VZ," to load the model weights."),VZ.forEach(t),V3r=i(EA),T(qM.$$.fragment,EA),EA.forEach(t),X3r=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(k8.$$.fragment,yl),z3r=i(yl),fve=n(yl,"P",{});var n7t=s(fve);W3r=r(n7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n7t.forEach(t),Q3r=i(yl),sn=n(yl,"P",{});var CA=s(sn);H3r=r(CA,"The model class to instantiate is selected based on the "),mve=n(CA,"CODE",{});var s7t=s(mve);U3r=r(s7t,"model_type"),s7t.forEach(t),J3r=r(CA,` property of the config object (either
passed as an argument or loaded from `),gve=n(CA,"CODE",{});var l7t=s(gve);Y3r=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),K3r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(CA,"CODE",{});var i7t=s(hve);Z3r=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),eFr=r(CA,":"),CA.forEach(t),oFr=i(yl),he=n(yl,"UL",{});var ue=s(he);NM=n(ue,"LI",{});var IRe=s(NM);pve=n(IRe,"STRONG",{});var d7t=s(pve);rFr=r(d7t,"albert"),d7t.forEach(t),tFr=r(IRe," \u2014 "),xH=n(IRe,"A",{href:!0});var c7t=s(xH);aFr=r(c7t,"TFAlbertForMultipleChoice"),c7t.forEach(t),nFr=r(IRe," (ALBERT model)"),IRe.forEach(t),sFr=i(ue),jM=n(ue,"LI",{});var qRe=s(jM);_ve=n(qRe,"STRONG",{});var f7t=s(_ve);lFr=r(f7t,"bert"),f7t.forEach(t),iFr=r(qRe," \u2014 "),$H=n(qRe,"A",{href:!0});var m7t=s($H);dFr=r(m7t,"TFBertForMultipleChoice"),m7t.forEach(t),cFr=r(qRe," (BERT model)"),qRe.forEach(t),fFr=i(ue),DM=n(ue,"LI",{});var NRe=s(DM);uve=n(NRe,"STRONG",{});var g7t=s(uve);mFr=r(g7t,"camembert"),g7t.forEach(t),gFr=r(NRe," \u2014 "),kH=n(NRe,"A",{href:!0});var h7t=s(kH);hFr=r(h7t,"TFCamembertForMultipleChoice"),h7t.forEach(t),pFr=r(NRe," (CamemBERT model)"),NRe.forEach(t),_Fr=i(ue),GM=n(ue,"LI",{});var jRe=s(GM);bve=n(jRe,"STRONG",{});var p7t=s(bve);uFr=r(p7t,"convbert"),p7t.forEach(t),bFr=r(jRe," \u2014 "),SH=n(jRe,"A",{href:!0});var _7t=s(SH);vFr=r(_7t,"TFConvBertForMultipleChoice"),_7t.forEach(t),FFr=r(jRe," (ConvBERT model)"),jRe.forEach(t),TFr=i(ue),OM=n(ue,"LI",{});var DRe=s(OM);vve=n(DRe,"STRONG",{});var u7t=s(vve);MFr=r(u7t,"distilbert"),u7t.forEach(t),EFr=r(DRe," \u2014 "),RH=n(DRe,"A",{href:!0});var b7t=s(RH);CFr=r(b7t,"TFDistilBertForMultipleChoice"),b7t.forEach(t),wFr=r(DRe," (DistilBERT model)"),DRe.forEach(t),AFr=i(ue),VM=n(ue,"LI",{});var GRe=s(VM);Fve=n(GRe,"STRONG",{});var v7t=s(Fve);yFr=r(v7t,"electra"),v7t.forEach(t),LFr=r(GRe," \u2014 "),PH=n(GRe,"A",{href:!0});var F7t=s(PH);xFr=r(F7t,"TFElectraForMultipleChoice"),F7t.forEach(t),$Fr=r(GRe," (ELECTRA model)"),GRe.forEach(t),kFr=i(ue),XM=n(ue,"LI",{});var ORe=s(XM);Tve=n(ORe,"STRONG",{});var T7t=s(Tve);SFr=r(T7t,"flaubert"),T7t.forEach(t),RFr=r(ORe," \u2014 "),BH=n(ORe,"A",{href:!0});var M7t=s(BH);PFr=r(M7t,"TFFlaubertForMultipleChoice"),M7t.forEach(t),BFr=r(ORe," (FlauBERT model)"),ORe.forEach(t),IFr=i(ue),zM=n(ue,"LI",{});var VRe=s(zM);Mve=n(VRe,"STRONG",{});var E7t=s(Mve);qFr=r(E7t,"funnel"),E7t.forEach(t),NFr=r(VRe," \u2014 "),IH=n(VRe,"A",{href:!0});var C7t=s(IH);jFr=r(C7t,"TFFunnelForMultipleChoice"),C7t.forEach(t),DFr=r(VRe," (Funnel Transformer model)"),VRe.forEach(t),GFr=i(ue),WM=n(ue,"LI",{});var XRe=s(WM);Eve=n(XRe,"STRONG",{});var w7t=s(Eve);OFr=r(w7t,"longformer"),w7t.forEach(t),VFr=r(XRe," \u2014 "),qH=n(XRe,"A",{href:!0});var A7t=s(qH);XFr=r(A7t,"TFLongformerForMultipleChoice"),A7t.forEach(t),zFr=r(XRe," (Longformer model)"),XRe.forEach(t),WFr=i(ue),QM=n(ue,"LI",{});var zRe=s(QM);Cve=n(zRe,"STRONG",{});var y7t=s(Cve);QFr=r(y7t,"mobilebert"),y7t.forEach(t),HFr=r(zRe," \u2014 "),NH=n(zRe,"A",{href:!0});var L7t=s(NH);UFr=r(L7t,"TFMobileBertForMultipleChoice"),L7t.forEach(t),JFr=r(zRe," (MobileBERT model)"),zRe.forEach(t),YFr=i(ue),HM=n(ue,"LI",{});var WRe=s(HM);wve=n(WRe,"STRONG",{});var x7t=s(wve);KFr=r(x7t,"mpnet"),x7t.forEach(t),ZFr=r(WRe," \u2014 "),jH=n(WRe,"A",{href:!0});var $7t=s(jH);eTr=r($7t,"TFMPNetForMultipleChoice"),$7t.forEach(t),oTr=r(WRe," (MPNet model)"),WRe.forEach(t),rTr=i(ue),UM=n(ue,"LI",{});var QRe=s(UM);Ave=n(QRe,"STRONG",{});var k7t=s(Ave);tTr=r(k7t,"rembert"),k7t.forEach(t),aTr=r(QRe," \u2014 "),DH=n(QRe,"A",{href:!0});var S7t=s(DH);nTr=r(S7t,"TFRemBertForMultipleChoice"),S7t.forEach(t),sTr=r(QRe," (RemBERT model)"),QRe.forEach(t),lTr=i(ue),JM=n(ue,"LI",{});var HRe=s(JM);yve=n(HRe,"STRONG",{});var R7t=s(yve);iTr=r(R7t,"roberta"),R7t.forEach(t),dTr=r(HRe," \u2014 "),GH=n(HRe,"A",{href:!0});var P7t=s(GH);cTr=r(P7t,"TFRobertaForMultipleChoice"),P7t.forEach(t),fTr=r(HRe," (RoBERTa model)"),HRe.forEach(t),mTr=i(ue),YM=n(ue,"LI",{});var URe=s(YM);Lve=n(URe,"STRONG",{});var B7t=s(Lve);gTr=r(B7t,"roformer"),B7t.forEach(t),hTr=r(URe," \u2014 "),OH=n(URe,"A",{href:!0});var I7t=s(OH);pTr=r(I7t,"TFRoFormerForMultipleChoice"),I7t.forEach(t),_Tr=r(URe," (RoFormer model)"),URe.forEach(t),uTr=i(ue),KM=n(ue,"LI",{});var JRe=s(KM);xve=n(JRe,"STRONG",{});var q7t=s(xve);bTr=r(q7t,"xlm"),q7t.forEach(t),vTr=r(JRe," \u2014 "),VH=n(JRe,"A",{href:!0});var N7t=s(VH);FTr=r(N7t,"TFXLMForMultipleChoice"),N7t.forEach(t),TTr=r(JRe," (XLM model)"),JRe.forEach(t),MTr=i(ue),ZM=n(ue,"LI",{});var YRe=s(ZM);$ve=n(YRe,"STRONG",{});var j7t=s($ve);ETr=r(j7t,"xlm-roberta"),j7t.forEach(t),CTr=r(YRe," \u2014 "),XH=n(YRe,"A",{href:!0});var D7t=s(XH);wTr=r(D7t,"TFXLMRobertaForMultipleChoice"),D7t.forEach(t),ATr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),yTr=i(ue),e4=n(ue,"LI",{});var KRe=s(e4);kve=n(KRe,"STRONG",{});var G7t=s(kve);LTr=r(G7t,"xlnet"),G7t.forEach(t),xTr=r(KRe," \u2014 "),zH=n(KRe,"A",{href:!0});var O7t=s(zH);$Tr=r(O7t,"TFXLNetForMultipleChoice"),O7t.forEach(t),kTr=r(KRe," (XLNet model)"),KRe.forEach(t),ue.forEach(t),STr=i(yl),T(o4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),iNe=i(f),cc=n(f,"H2",{class:!0});var hDe=s(cc);r4=n(hDe,"A",{id:!0,class:!0,href:!0});var V7t=s(r4);Sve=n(V7t,"SPAN",{});var X7t=s(Sve);T(S8.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),RTr=i(hDe),Rve=n(hDe,"SPAN",{});var z7t=s(Rve);PTr=r(z7t,"TFAutoModelForNextSentencePrediction"),z7t.forEach(t),hDe.forEach(t),dNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(R8.$$.fragment,Ll),BTr=i(Ll),fc=n(Ll,"P",{});var XZ=s(fc);ITr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WH=n(XZ,"A",{href:!0});var W7t=s(WH);qTr=r(W7t,"from_pretrained()"),W7t.forEach(t),NTr=r(XZ," class method or the "),QH=n(XZ,"A",{href:!0});var Q7t=s(QH);jTr=r(Q7t,"from_config()"),Q7t.forEach(t),DTr=r(XZ,` class
method.`),XZ.forEach(t),GTr=i(Ll),P8=n(Ll,"P",{});var pDe=s(P8);OTr=r(pDe,"This class cannot be instantiated directly using "),Pve=n(pDe,"CODE",{});var H7t=s(Pve);VTr=r(H7t,"__init__()"),H7t.forEach(t),XTr=r(pDe," (throws an error)."),pDe.forEach(t),zTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var wA=s(Bt);T(B8.$$.fragment,wA),WTr=i(wA),Bve=n(wA,"P",{});var U7t=s(Bve);QTr=r(U7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U7t.forEach(t),HTr=i(wA),mc=n(wA,"P",{});var zZ=s(mc);UTr=r(zZ,`Note:
Loading a model from its configuration file does `),Ive=n(zZ,"STRONG",{});var J7t=s(Ive);JTr=r(J7t,"not"),J7t.forEach(t),YTr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(zZ,"A",{href:!0});var Y7t=s(HH);KTr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),ZTr=r(zZ," to load the model weights."),zZ.forEach(t),e7r=i(wA),T(t4.$$.fragment,wA),wA.forEach(t),o7r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(I8.$$.fragment,xl),r7r=i(xl),qve=n(xl,"P",{});var K7t=s(qve);t7r=r(K7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K7t.forEach(t),a7r=i(xl),ln=n(xl,"P",{});var AA=s(ln);n7r=r(AA,"The model class to instantiate is selected based on the "),Nve=n(AA,"CODE",{});var Z7t=s(Nve);s7r=r(Z7t,"model_type"),Z7t.forEach(t),l7r=r(AA,` property of the config object (either
passed as an argument or loaded from `),jve=n(AA,"CODE",{});var eMt=s(jve);i7r=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),d7r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(AA,"CODE",{});var oMt=s(Dve);c7r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),f7r=r(AA,":"),AA.forEach(t),m7r=i(xl),q8=n(xl,"UL",{});var _De=s(q8);a4=n(_De,"LI",{});var ZRe=s(a4);Gve=n(ZRe,"STRONG",{});var rMt=s(Gve);g7r=r(rMt,"bert"),rMt.forEach(t),h7r=r(ZRe," \u2014 "),UH=n(ZRe,"A",{href:!0});var tMt=s(UH);p7r=r(tMt,"TFBertForNextSentencePrediction"),tMt.forEach(t),_7r=r(ZRe," (BERT model)"),ZRe.forEach(t),u7r=i(_De),n4=n(_De,"LI",{});var ePe=s(n4);Ove=n(ePe,"STRONG",{});var aMt=s(Ove);b7r=r(aMt,"mobilebert"),aMt.forEach(t),v7r=r(ePe," \u2014 "),JH=n(ePe,"A",{href:!0});var nMt=s(JH);F7r=r(nMt,"TFMobileBertForNextSentencePrediction"),nMt.forEach(t),T7r=r(ePe," (MobileBERT model)"),ePe.forEach(t),_De.forEach(t),M7r=i(xl),T(s4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),cNe=i(f),gc=n(f,"H2",{class:!0});var uDe=s(gc);l4=n(uDe,"A",{id:!0,class:!0,href:!0});var sMt=s(l4);Vve=n(sMt,"SPAN",{});var lMt=s(Vve);T(N8.$$.fragment,lMt),lMt.forEach(t),sMt.forEach(t),E7r=i(uDe),Xve=n(uDe,"SPAN",{});var iMt=s(Xve);C7r=r(iMt,"TFAutoModelForTableQuestionAnswering"),iMt.forEach(t),uDe.forEach(t),fNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(j8.$$.fragment,$l),w7r=i($l),hc=n($l,"P",{});var WZ=s(hc);A7r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YH=n(WZ,"A",{href:!0});var dMt=s(YH);y7r=r(dMt,"from_pretrained()"),dMt.forEach(t),L7r=r(WZ," class method or the "),KH=n(WZ,"A",{href:!0});var cMt=s(KH);x7r=r(cMt,"from_config()"),cMt.forEach(t),$7r=r(WZ,` class
method.`),WZ.forEach(t),k7r=i($l),D8=n($l,"P",{});var bDe=s(D8);S7r=r(bDe,"This class cannot be instantiated directly using "),zve=n(bDe,"CODE",{});var fMt=s(zve);R7r=r(fMt,"__init__()"),fMt.forEach(t),P7r=r(bDe," (throws an error)."),bDe.forEach(t),B7r=i($l),It=n($l,"DIV",{class:!0});var yA=s(It);T(G8.$$.fragment,yA),I7r=i(yA),Wve=n(yA,"P",{});var mMt=s(Wve);q7r=r(mMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mMt.forEach(t),N7r=i(yA),pc=n(yA,"P",{});var QZ=s(pc);j7r=r(QZ,`Note:
Loading a model from its configuration file does `),Qve=n(QZ,"STRONG",{});var gMt=s(Qve);D7r=r(gMt,"not"),gMt.forEach(t),G7r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(QZ,"A",{href:!0});var hMt=s(ZH);O7r=r(hMt,"from_pretrained()"),hMt.forEach(t),V7r=r(QZ," to load the model weights."),QZ.forEach(t),X7r=i(yA),T(i4.$$.fragment,yA),yA.forEach(t),z7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(O8.$$.fragment,kl),W7r=i(kl),Hve=n(kl,"P",{});var pMt=s(Hve);Q7r=r(pMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pMt.forEach(t),H7r=i(kl),dn=n(kl,"P",{});var LA=s(dn);U7r=r(LA,"The model class to instantiate is selected based on the "),Uve=n(LA,"CODE",{});var _Mt=s(Uve);J7r=r(_Mt,"model_type"),_Mt.forEach(t),Y7r=r(LA,` property of the config object (either
passed as an argument or loaded from `),Jve=n(LA,"CODE",{});var uMt=s(Jve);K7r=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Z7r=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(LA,"CODE",{});var bMt=s(Yve);eMr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),oMr=r(LA,":"),LA.forEach(t),rMr=i(kl),Kve=n(kl,"UL",{});var vMt=s(Kve);d4=n(vMt,"LI",{});var oPe=s(d4);Zve=n(oPe,"STRONG",{});var FMt=s(Zve);tMr=r(FMt,"tapas"),FMt.forEach(t),aMr=r(oPe," \u2014 "),eU=n(oPe,"A",{href:!0});var TMt=s(eU);nMr=r(TMt,"TFTapasForQuestionAnswering"),TMt.forEach(t),sMr=r(oPe," (TAPAS model)"),oPe.forEach(t),vMt.forEach(t),lMr=i(kl),T(c4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),mNe=i(f),_c=n(f,"H2",{class:!0});var vDe=s(_c);f4=n(vDe,"A",{id:!0,class:!0,href:!0});var MMt=s(f4);e3e=n(MMt,"SPAN",{});var EMt=s(e3e);T(V8.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),iMr=i(vDe),o3e=n(vDe,"SPAN",{});var CMt=s(o3e);dMr=r(CMt,"TFAutoModelForTokenClassification"),CMt.forEach(t),vDe.forEach(t),gNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(X8.$$.fragment,Sl),cMr=i(Sl),uc=n(Sl,"P",{});var HZ=s(uc);fMr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oU=n(HZ,"A",{href:!0});var wMt=s(oU);mMr=r(wMt,"from_pretrained()"),wMt.forEach(t),gMr=r(HZ," class method or the "),rU=n(HZ,"A",{href:!0});var AMt=s(rU);hMr=r(AMt,"from_config()"),AMt.forEach(t),pMr=r(HZ,` class
method.`),HZ.forEach(t),_Mr=i(Sl),z8=n(Sl,"P",{});var FDe=s(z8);uMr=r(FDe,"This class cannot be instantiated directly using "),r3e=n(FDe,"CODE",{});var yMt=s(r3e);bMr=r(yMt,"__init__()"),yMt.forEach(t),vMr=r(FDe," (throws an error)."),FDe.forEach(t),FMr=i(Sl),qt=n(Sl,"DIV",{class:!0});var xA=s(qt);T(W8.$$.fragment,xA),TMr=i(xA),t3e=n(xA,"P",{});var LMt=s(t3e);MMr=r(LMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LMt.forEach(t),EMr=i(xA),bc=n(xA,"P",{});var UZ=s(bc);CMr=r(UZ,`Note:
Loading a model from its configuration file does `),a3e=n(UZ,"STRONG",{});var xMt=s(a3e);wMr=r(xMt,"not"),xMt.forEach(t),AMr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(UZ,"A",{href:!0});var $Mt=s(tU);yMr=r($Mt,"from_pretrained()"),$Mt.forEach(t),LMr=r(UZ," to load the model weights."),UZ.forEach(t),xMr=i(xA),T(m4.$$.fragment,xA),xA.forEach(t),$Mr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(Q8.$$.fragment,Rl),kMr=i(Rl),n3e=n(Rl,"P",{});var kMt=s(n3e);SMr=r(kMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kMt.forEach(t),RMr=i(Rl),cn=n(Rl,"P",{});var $A=s(cn);PMr=r($A,"The model class to instantiate is selected based on the "),s3e=n($A,"CODE",{});var SMt=s(s3e);BMr=r(SMt,"model_type"),SMt.forEach(t),IMr=r($A,` property of the config object (either
passed as an argument or loaded from `),l3e=n($A,"CODE",{});var RMt=s(l3e);qMr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),NMr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n($A,"CODE",{});var PMt=s(i3e);jMr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),DMr=r($A,":"),$A.forEach(t),GMr=i(Rl),de=n(Rl,"UL",{});var me=s(de);g4=n(me,"LI",{});var rPe=s(g4);d3e=n(rPe,"STRONG",{});var BMt=s(d3e);OMr=r(BMt,"albert"),BMt.forEach(t),VMr=r(rPe," \u2014 "),aU=n(rPe,"A",{href:!0});var IMt=s(aU);XMr=r(IMt,"TFAlbertForTokenClassification"),IMt.forEach(t),zMr=r(rPe," (ALBERT model)"),rPe.forEach(t),WMr=i(me),h4=n(me,"LI",{});var tPe=s(h4);c3e=n(tPe,"STRONG",{});var qMt=s(c3e);QMr=r(qMt,"bert"),qMt.forEach(t),HMr=r(tPe," \u2014 "),nU=n(tPe,"A",{href:!0});var NMt=s(nU);UMr=r(NMt,"TFBertForTokenClassification"),NMt.forEach(t),JMr=r(tPe," (BERT model)"),tPe.forEach(t),YMr=i(me),p4=n(me,"LI",{});var aPe=s(p4);f3e=n(aPe,"STRONG",{});var jMt=s(f3e);KMr=r(jMt,"camembert"),jMt.forEach(t),ZMr=r(aPe," \u2014 "),sU=n(aPe,"A",{href:!0});var DMt=s(sU);e4r=r(DMt,"TFCamembertForTokenClassification"),DMt.forEach(t),o4r=r(aPe," (CamemBERT model)"),aPe.forEach(t),r4r=i(me),_4=n(me,"LI",{});var nPe=s(_4);m3e=n(nPe,"STRONG",{});var GMt=s(m3e);t4r=r(GMt,"convbert"),GMt.forEach(t),a4r=r(nPe," \u2014 "),lU=n(nPe,"A",{href:!0});var OMt=s(lU);n4r=r(OMt,"TFConvBertForTokenClassification"),OMt.forEach(t),s4r=r(nPe," (ConvBERT model)"),nPe.forEach(t),l4r=i(me),u4=n(me,"LI",{});var sPe=s(u4);g3e=n(sPe,"STRONG",{});var VMt=s(g3e);i4r=r(VMt,"deberta"),VMt.forEach(t),d4r=r(sPe," \u2014 "),iU=n(sPe,"A",{href:!0});var XMt=s(iU);c4r=r(XMt,"TFDebertaForTokenClassification"),XMt.forEach(t),f4r=r(sPe," (DeBERTa model)"),sPe.forEach(t),m4r=i(me),b4=n(me,"LI",{});var lPe=s(b4);h3e=n(lPe,"STRONG",{});var zMt=s(h3e);g4r=r(zMt,"deberta-v2"),zMt.forEach(t),h4r=r(lPe," \u2014 "),dU=n(lPe,"A",{href:!0});var WMt=s(dU);p4r=r(WMt,"TFDebertaV2ForTokenClassification"),WMt.forEach(t),_4r=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),u4r=i(me),v4=n(me,"LI",{});var iPe=s(v4);p3e=n(iPe,"STRONG",{});var QMt=s(p3e);b4r=r(QMt,"distilbert"),QMt.forEach(t),v4r=r(iPe," \u2014 "),cU=n(iPe,"A",{href:!0});var HMt=s(cU);F4r=r(HMt,"TFDistilBertForTokenClassification"),HMt.forEach(t),T4r=r(iPe," (DistilBERT model)"),iPe.forEach(t),M4r=i(me),F4=n(me,"LI",{});var dPe=s(F4);_3e=n(dPe,"STRONG",{});var UMt=s(_3e);E4r=r(UMt,"electra"),UMt.forEach(t),C4r=r(dPe," \u2014 "),fU=n(dPe,"A",{href:!0});var JMt=s(fU);w4r=r(JMt,"TFElectraForTokenClassification"),JMt.forEach(t),A4r=r(dPe," (ELECTRA model)"),dPe.forEach(t),y4r=i(me),T4=n(me,"LI",{});var cPe=s(T4);u3e=n(cPe,"STRONG",{});var YMt=s(u3e);L4r=r(YMt,"flaubert"),YMt.forEach(t),x4r=r(cPe," \u2014 "),mU=n(cPe,"A",{href:!0});var KMt=s(mU);$4r=r(KMt,"TFFlaubertForTokenClassification"),KMt.forEach(t),k4r=r(cPe," (FlauBERT model)"),cPe.forEach(t),S4r=i(me),M4=n(me,"LI",{});var fPe=s(M4);b3e=n(fPe,"STRONG",{});var ZMt=s(b3e);R4r=r(ZMt,"funnel"),ZMt.forEach(t),P4r=r(fPe," \u2014 "),gU=n(fPe,"A",{href:!0});var e4t=s(gU);B4r=r(e4t,"TFFunnelForTokenClassification"),e4t.forEach(t),I4r=r(fPe," (Funnel Transformer model)"),fPe.forEach(t),q4r=i(me),E4=n(me,"LI",{});var mPe=s(E4);v3e=n(mPe,"STRONG",{});var o4t=s(v3e);N4r=r(o4t,"layoutlm"),o4t.forEach(t),j4r=r(mPe," \u2014 "),hU=n(mPe,"A",{href:!0});var r4t=s(hU);D4r=r(r4t,"TFLayoutLMForTokenClassification"),r4t.forEach(t),G4r=r(mPe," (LayoutLM model)"),mPe.forEach(t),O4r=i(me),C4=n(me,"LI",{});var gPe=s(C4);F3e=n(gPe,"STRONG",{});var t4t=s(F3e);V4r=r(t4t,"longformer"),t4t.forEach(t),X4r=r(gPe," \u2014 "),pU=n(gPe,"A",{href:!0});var a4t=s(pU);z4r=r(a4t,"TFLongformerForTokenClassification"),a4t.forEach(t),W4r=r(gPe," (Longformer model)"),gPe.forEach(t),Q4r=i(me),w4=n(me,"LI",{});var hPe=s(w4);T3e=n(hPe,"STRONG",{});var n4t=s(T3e);H4r=r(n4t,"mobilebert"),n4t.forEach(t),U4r=r(hPe," \u2014 "),_U=n(hPe,"A",{href:!0});var s4t=s(_U);J4r=r(s4t,"TFMobileBertForTokenClassification"),s4t.forEach(t),Y4r=r(hPe," (MobileBERT model)"),hPe.forEach(t),K4r=i(me),A4=n(me,"LI",{});var pPe=s(A4);M3e=n(pPe,"STRONG",{});var l4t=s(M3e);Z4r=r(l4t,"mpnet"),l4t.forEach(t),eEr=r(pPe," \u2014 "),uU=n(pPe,"A",{href:!0});var i4t=s(uU);oEr=r(i4t,"TFMPNetForTokenClassification"),i4t.forEach(t),rEr=r(pPe," (MPNet model)"),pPe.forEach(t),tEr=i(me),y4=n(me,"LI",{});var _Pe=s(y4);E3e=n(_Pe,"STRONG",{});var d4t=s(E3e);aEr=r(d4t,"rembert"),d4t.forEach(t),nEr=r(_Pe," \u2014 "),bU=n(_Pe,"A",{href:!0});var c4t=s(bU);sEr=r(c4t,"TFRemBertForTokenClassification"),c4t.forEach(t),lEr=r(_Pe," (RemBERT model)"),_Pe.forEach(t),iEr=i(me),L4=n(me,"LI",{});var uPe=s(L4);C3e=n(uPe,"STRONG",{});var f4t=s(C3e);dEr=r(f4t,"roberta"),f4t.forEach(t),cEr=r(uPe," \u2014 "),vU=n(uPe,"A",{href:!0});var m4t=s(vU);fEr=r(m4t,"TFRobertaForTokenClassification"),m4t.forEach(t),mEr=r(uPe," (RoBERTa model)"),uPe.forEach(t),gEr=i(me),x4=n(me,"LI",{});var bPe=s(x4);w3e=n(bPe,"STRONG",{});var g4t=s(w3e);hEr=r(g4t,"roformer"),g4t.forEach(t),pEr=r(bPe," \u2014 "),FU=n(bPe,"A",{href:!0});var h4t=s(FU);_Er=r(h4t,"TFRoFormerForTokenClassification"),h4t.forEach(t),uEr=r(bPe," (RoFormer model)"),bPe.forEach(t),bEr=i(me),$4=n(me,"LI",{});var vPe=s($4);A3e=n(vPe,"STRONG",{});var p4t=s(A3e);vEr=r(p4t,"xlm"),p4t.forEach(t),FEr=r(vPe," \u2014 "),TU=n(vPe,"A",{href:!0});var _4t=s(TU);TEr=r(_4t,"TFXLMForTokenClassification"),_4t.forEach(t),MEr=r(vPe," (XLM model)"),vPe.forEach(t),EEr=i(me),k4=n(me,"LI",{});var FPe=s(k4);y3e=n(FPe,"STRONG",{});var u4t=s(y3e);CEr=r(u4t,"xlm-roberta"),u4t.forEach(t),wEr=r(FPe," \u2014 "),MU=n(FPe,"A",{href:!0});var b4t=s(MU);AEr=r(b4t,"TFXLMRobertaForTokenClassification"),b4t.forEach(t),yEr=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),LEr=i(me),S4=n(me,"LI",{});var TPe=s(S4);L3e=n(TPe,"STRONG",{});var v4t=s(L3e);xEr=r(v4t,"xlnet"),v4t.forEach(t),$Er=r(TPe," \u2014 "),EU=n(TPe,"A",{href:!0});var F4t=s(EU);kEr=r(F4t,"TFXLNetForTokenClassification"),F4t.forEach(t),SEr=r(TPe," (XLNet model)"),TPe.forEach(t),me.forEach(t),REr=i(Rl),T(R4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),hNe=i(f),vc=n(f,"H2",{class:!0});var TDe=s(vc);P4=n(TDe,"A",{id:!0,class:!0,href:!0});var T4t=s(P4);x3e=n(T4t,"SPAN",{});var M4t=s(x3e);T(H8.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),PEr=i(TDe),$3e=n(TDe,"SPAN",{});var E4t=s($3e);BEr=r(E4t,"TFAutoModelForQuestionAnswering"),E4t.forEach(t),TDe.forEach(t),pNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(U8.$$.fragment,Pl),IEr=i(Pl),Fc=n(Pl,"P",{});var JZ=s(Fc);qEr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CU=n(JZ,"A",{href:!0});var C4t=s(CU);NEr=r(C4t,"from_pretrained()"),C4t.forEach(t),jEr=r(JZ," class method or the "),wU=n(JZ,"A",{href:!0});var w4t=s(wU);DEr=r(w4t,"from_config()"),w4t.forEach(t),GEr=r(JZ,` class
method.`),JZ.forEach(t),OEr=i(Pl),J8=n(Pl,"P",{});var MDe=s(J8);VEr=r(MDe,"This class cannot be instantiated directly using "),k3e=n(MDe,"CODE",{});var A4t=s(k3e);XEr=r(A4t,"__init__()"),A4t.forEach(t),zEr=r(MDe," (throws an error)."),MDe.forEach(t),WEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var kA=s(Nt);T(Y8.$$.fragment,kA),QEr=i(kA),S3e=n(kA,"P",{});var y4t=s(S3e);HEr=r(y4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y4t.forEach(t),UEr=i(kA),Tc=n(kA,"P",{});var YZ=s(Tc);JEr=r(YZ,`Note:
Loading a model from its configuration file does `),R3e=n(YZ,"STRONG",{});var L4t=s(R3e);YEr=r(L4t,"not"),L4t.forEach(t),KEr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(YZ,"A",{href:!0});var x4t=s(AU);ZEr=r(x4t,"from_pretrained()"),x4t.forEach(t),eCr=r(YZ," to load the model weights."),YZ.forEach(t),oCr=i(kA),T(B4.$$.fragment,kA),kA.forEach(t),rCr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(K8.$$.fragment,Bl),tCr=i(Bl),P3e=n(Bl,"P",{});var $4t=s(P3e);aCr=r($4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$4t.forEach(t),nCr=i(Bl),fn=n(Bl,"P",{});var SA=s(fn);sCr=r(SA,"The model class to instantiate is selected based on the "),B3e=n(SA,"CODE",{});var k4t=s(B3e);lCr=r(k4t,"model_type"),k4t.forEach(t),iCr=r(SA,` property of the config object (either
passed as an argument or loaded from `),I3e=n(SA,"CODE",{});var S4t=s(I3e);dCr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),cCr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(SA,"CODE",{});var R4t=s(q3e);fCr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),mCr=r(SA,":"),SA.forEach(t),gCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);I4=n(ge,"LI",{});var MPe=s(I4);N3e=n(MPe,"STRONG",{});var P4t=s(N3e);hCr=r(P4t,"albert"),P4t.forEach(t),pCr=r(MPe," \u2014 "),yU=n(MPe,"A",{href:!0});var B4t=s(yU);_Cr=r(B4t,"TFAlbertForQuestionAnswering"),B4t.forEach(t),uCr=r(MPe," (ALBERT model)"),MPe.forEach(t),bCr=i(ge),q4=n(ge,"LI",{});var EPe=s(q4);j3e=n(EPe,"STRONG",{});var I4t=s(j3e);vCr=r(I4t,"bert"),I4t.forEach(t),FCr=r(EPe," \u2014 "),LU=n(EPe,"A",{href:!0});var q4t=s(LU);TCr=r(q4t,"TFBertForQuestionAnswering"),q4t.forEach(t),MCr=r(EPe," (BERT model)"),EPe.forEach(t),ECr=i(ge),N4=n(ge,"LI",{});var CPe=s(N4);D3e=n(CPe,"STRONG",{});var N4t=s(D3e);CCr=r(N4t,"camembert"),N4t.forEach(t),wCr=r(CPe," \u2014 "),xU=n(CPe,"A",{href:!0});var j4t=s(xU);ACr=r(j4t,"TFCamembertForQuestionAnswering"),j4t.forEach(t),yCr=r(CPe," (CamemBERT model)"),CPe.forEach(t),LCr=i(ge),j4=n(ge,"LI",{});var wPe=s(j4);G3e=n(wPe,"STRONG",{});var D4t=s(G3e);xCr=r(D4t,"convbert"),D4t.forEach(t),$Cr=r(wPe," \u2014 "),$U=n(wPe,"A",{href:!0});var G4t=s($U);kCr=r(G4t,"TFConvBertForQuestionAnswering"),G4t.forEach(t),SCr=r(wPe," (ConvBERT model)"),wPe.forEach(t),RCr=i(ge),D4=n(ge,"LI",{});var APe=s(D4);O3e=n(APe,"STRONG",{});var O4t=s(O3e);PCr=r(O4t,"deberta"),O4t.forEach(t),BCr=r(APe," \u2014 "),kU=n(APe,"A",{href:!0});var V4t=s(kU);ICr=r(V4t,"TFDebertaForQuestionAnswering"),V4t.forEach(t),qCr=r(APe," (DeBERTa model)"),APe.forEach(t),NCr=i(ge),G4=n(ge,"LI",{});var yPe=s(G4);V3e=n(yPe,"STRONG",{});var X4t=s(V3e);jCr=r(X4t,"deberta-v2"),X4t.forEach(t),DCr=r(yPe," \u2014 "),SU=n(yPe,"A",{href:!0});var z4t=s(SU);GCr=r(z4t,"TFDebertaV2ForQuestionAnswering"),z4t.forEach(t),OCr=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),VCr=i(ge),O4=n(ge,"LI",{});var LPe=s(O4);X3e=n(LPe,"STRONG",{});var W4t=s(X3e);XCr=r(W4t,"distilbert"),W4t.forEach(t),zCr=r(LPe," \u2014 "),RU=n(LPe,"A",{href:!0});var Q4t=s(RU);WCr=r(Q4t,"TFDistilBertForQuestionAnswering"),Q4t.forEach(t),QCr=r(LPe," (DistilBERT model)"),LPe.forEach(t),HCr=i(ge),V4=n(ge,"LI",{});var xPe=s(V4);z3e=n(xPe,"STRONG",{});var H4t=s(z3e);UCr=r(H4t,"electra"),H4t.forEach(t),JCr=r(xPe," \u2014 "),PU=n(xPe,"A",{href:!0});var U4t=s(PU);YCr=r(U4t,"TFElectraForQuestionAnswering"),U4t.forEach(t),KCr=r(xPe," (ELECTRA model)"),xPe.forEach(t),ZCr=i(ge),X4=n(ge,"LI",{});var $Pe=s(X4);W3e=n($Pe,"STRONG",{});var J4t=s(W3e);ewr=r(J4t,"flaubert"),J4t.forEach(t),owr=r($Pe," \u2014 "),BU=n($Pe,"A",{href:!0});var Y4t=s(BU);rwr=r(Y4t,"TFFlaubertForQuestionAnsweringSimple"),Y4t.forEach(t),twr=r($Pe," (FlauBERT model)"),$Pe.forEach(t),awr=i(ge),z4=n(ge,"LI",{});var kPe=s(z4);Q3e=n(kPe,"STRONG",{});var K4t=s(Q3e);nwr=r(K4t,"funnel"),K4t.forEach(t),swr=r(kPe," \u2014 "),IU=n(kPe,"A",{href:!0});var Z4t=s(IU);lwr=r(Z4t,"TFFunnelForQuestionAnswering"),Z4t.forEach(t),iwr=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),dwr=i(ge),W4=n(ge,"LI",{});var SPe=s(W4);H3e=n(SPe,"STRONG",{});var eEt=s(H3e);cwr=r(eEt,"gptj"),eEt.forEach(t),fwr=r(SPe," \u2014 "),qU=n(SPe,"A",{href:!0});var oEt=s(qU);mwr=r(oEt,"TFGPTJForQuestionAnswering"),oEt.forEach(t),gwr=r(SPe," (GPT-J model)"),SPe.forEach(t),hwr=i(ge),Q4=n(ge,"LI",{});var RPe=s(Q4);U3e=n(RPe,"STRONG",{});var rEt=s(U3e);pwr=r(rEt,"longformer"),rEt.forEach(t),_wr=r(RPe," \u2014 "),NU=n(RPe,"A",{href:!0});var tEt=s(NU);uwr=r(tEt,"TFLongformerForQuestionAnswering"),tEt.forEach(t),bwr=r(RPe," (Longformer model)"),RPe.forEach(t),vwr=i(ge),H4=n(ge,"LI",{});var PPe=s(H4);J3e=n(PPe,"STRONG",{});var aEt=s(J3e);Fwr=r(aEt,"mobilebert"),aEt.forEach(t),Twr=r(PPe," \u2014 "),jU=n(PPe,"A",{href:!0});var nEt=s(jU);Mwr=r(nEt,"TFMobileBertForQuestionAnswering"),nEt.forEach(t),Ewr=r(PPe," (MobileBERT model)"),PPe.forEach(t),Cwr=i(ge),U4=n(ge,"LI",{});var BPe=s(U4);Y3e=n(BPe,"STRONG",{});var sEt=s(Y3e);wwr=r(sEt,"mpnet"),sEt.forEach(t),Awr=r(BPe," \u2014 "),DU=n(BPe,"A",{href:!0});var lEt=s(DU);ywr=r(lEt,"TFMPNetForQuestionAnswering"),lEt.forEach(t),Lwr=r(BPe," (MPNet model)"),BPe.forEach(t),xwr=i(ge),J4=n(ge,"LI",{});var IPe=s(J4);K3e=n(IPe,"STRONG",{});var iEt=s(K3e);$wr=r(iEt,"rembert"),iEt.forEach(t),kwr=r(IPe," \u2014 "),GU=n(IPe,"A",{href:!0});var dEt=s(GU);Swr=r(dEt,"TFRemBertForQuestionAnswering"),dEt.forEach(t),Rwr=r(IPe," (RemBERT model)"),IPe.forEach(t),Pwr=i(ge),Y4=n(ge,"LI",{});var qPe=s(Y4);Z3e=n(qPe,"STRONG",{});var cEt=s(Z3e);Bwr=r(cEt,"roberta"),cEt.forEach(t),Iwr=r(qPe," \u2014 "),OU=n(qPe,"A",{href:!0});var fEt=s(OU);qwr=r(fEt,"TFRobertaForQuestionAnswering"),fEt.forEach(t),Nwr=r(qPe," (RoBERTa model)"),qPe.forEach(t),jwr=i(ge),K4=n(ge,"LI",{});var NPe=s(K4);eFe=n(NPe,"STRONG",{});var mEt=s(eFe);Dwr=r(mEt,"roformer"),mEt.forEach(t),Gwr=r(NPe," \u2014 "),VU=n(NPe,"A",{href:!0});var gEt=s(VU);Owr=r(gEt,"TFRoFormerForQuestionAnswering"),gEt.forEach(t),Vwr=r(NPe," (RoFormer model)"),NPe.forEach(t),Xwr=i(ge),Z4=n(ge,"LI",{});var jPe=s(Z4);oFe=n(jPe,"STRONG",{});var hEt=s(oFe);zwr=r(hEt,"xlm"),hEt.forEach(t),Wwr=r(jPe," \u2014 "),XU=n(jPe,"A",{href:!0});var pEt=s(XU);Qwr=r(pEt,"TFXLMForQuestionAnsweringSimple"),pEt.forEach(t),Hwr=r(jPe," (XLM model)"),jPe.forEach(t),Uwr=i(ge),eE=n(ge,"LI",{});var DPe=s(eE);rFe=n(DPe,"STRONG",{});var _Et=s(rFe);Jwr=r(_Et,"xlm-roberta"),_Et.forEach(t),Ywr=r(DPe," \u2014 "),zU=n(DPe,"A",{href:!0});var uEt=s(zU);Kwr=r(uEt,"TFXLMRobertaForQuestionAnswering"),uEt.forEach(t),Zwr=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),e0r=i(ge),oE=n(ge,"LI",{});var GPe=s(oE);tFe=n(GPe,"STRONG",{});var bEt=s(tFe);o0r=r(bEt,"xlnet"),bEt.forEach(t),r0r=r(GPe," \u2014 "),WU=n(GPe,"A",{href:!0});var vEt=s(WU);t0r=r(vEt,"TFXLNetForQuestionAnsweringSimple"),vEt.forEach(t),a0r=r(GPe," (XLNet model)"),GPe.forEach(t),ge.forEach(t),n0r=i(Bl),T(rE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),_Ne=i(f),Mc=n(f,"H2",{class:!0});var EDe=s(Mc);tE=n(EDe,"A",{id:!0,class:!0,href:!0});var FEt=s(tE);aFe=n(FEt,"SPAN",{});var TEt=s(aFe);T(Z8.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),s0r=i(EDe),nFe=n(EDe,"SPAN",{});var MEt=s(nFe);l0r=r(MEt,"TFAutoModelForVision2Seq"),MEt.forEach(t),EDe.forEach(t),uNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(ex.$$.fragment,Il),i0r=i(Il),Ec=n(Il,"P",{});var KZ=s(Ec);d0r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QU=n(KZ,"A",{href:!0});var EEt=s(QU);c0r=r(EEt,"from_pretrained()"),EEt.forEach(t),f0r=r(KZ," class method or the "),HU=n(KZ,"A",{href:!0});var CEt=s(HU);m0r=r(CEt,"from_config()"),CEt.forEach(t),g0r=r(KZ,` class
method.`),KZ.forEach(t),h0r=i(Il),ox=n(Il,"P",{});var CDe=s(ox);p0r=r(CDe,"This class cannot be instantiated directly using "),sFe=n(CDe,"CODE",{});var wEt=s(sFe);_0r=r(wEt,"__init__()"),wEt.forEach(t),u0r=r(CDe," (throws an error)."),CDe.forEach(t),b0r=i(Il),jt=n(Il,"DIV",{class:!0});var RA=s(jt);T(rx.$$.fragment,RA),v0r=i(RA),lFe=n(RA,"P",{});var AEt=s(lFe);F0r=r(AEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AEt.forEach(t),T0r=i(RA),Cc=n(RA,"P",{});var ZZ=s(Cc);M0r=r(ZZ,`Note:
Loading a model from its configuration file does `),iFe=n(ZZ,"STRONG",{});var yEt=s(iFe);E0r=r(yEt,"not"),yEt.forEach(t),C0r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(ZZ,"A",{href:!0});var LEt=s(UU);w0r=r(LEt,"from_pretrained()"),LEt.forEach(t),A0r=r(ZZ," to load the model weights."),ZZ.forEach(t),y0r=i(RA),T(aE.$$.fragment,RA),RA.forEach(t),L0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(tx.$$.fragment,ql),x0r=i(ql),dFe=n(ql,"P",{});var xEt=s(dFe);$0r=r(xEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xEt.forEach(t),k0r=i(ql),mn=n(ql,"P",{});var PA=s(mn);S0r=r(PA,"The model class to instantiate is selected based on the "),cFe=n(PA,"CODE",{});var $Et=s(cFe);R0r=r($Et,"model_type"),$Et.forEach(t),P0r=r(PA,` property of the config object (either
passed as an argument or loaded from `),fFe=n(PA,"CODE",{});var kEt=s(fFe);B0r=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),I0r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(PA,"CODE",{});var SEt=s(mFe);q0r=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),N0r=r(PA,":"),PA.forEach(t),j0r=i(ql),gFe=n(ql,"UL",{});var REt=s(gFe);nE=n(REt,"LI",{});var OPe=s(nE);hFe=n(OPe,"STRONG",{});var PEt=s(hFe);D0r=r(PEt,"vision-encoder-decoder"),PEt.forEach(t),G0r=r(OPe," \u2014 "),JU=n(OPe,"A",{href:!0});var BEt=s(JU);O0r=r(BEt,"TFVisionEncoderDecoderModel"),BEt.forEach(t),V0r=r(OPe," (Vision Encoder decoder model)"),OPe.forEach(t),REt.forEach(t),X0r=i(ql),T(sE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),bNe=i(f),wc=n(f,"H2",{class:!0});var wDe=s(wc);lE=n(wDe,"A",{id:!0,class:!0,href:!0});var IEt=s(lE);pFe=n(IEt,"SPAN",{});var qEt=s(pFe);T(ax.$$.fragment,qEt),qEt.forEach(t),IEt.forEach(t),z0r=i(wDe),_Fe=n(wDe,"SPAN",{});var NEt=s(_Fe);W0r=r(NEt,"TFAutoModelForSpeechSeq2Seq"),NEt.forEach(t),wDe.forEach(t),vNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(nx.$$.fragment,Nl),Q0r=i(Nl),Ac=n(Nl,"P",{});var eee=s(Ac);H0r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YU=n(eee,"A",{href:!0});var jEt=s(YU);U0r=r(jEt,"from_pretrained()"),jEt.forEach(t),J0r=r(eee," class method or the "),KU=n(eee,"A",{href:!0});var DEt=s(KU);Y0r=r(DEt,"from_config()"),DEt.forEach(t),K0r=r(eee,` class
method.`),eee.forEach(t),Z0r=i(Nl),sx=n(Nl,"P",{});var ADe=s(sx);eAr=r(ADe,"This class cannot be instantiated directly using "),uFe=n(ADe,"CODE",{});var GEt=s(uFe);oAr=r(GEt,"__init__()"),GEt.forEach(t),rAr=r(ADe," (throws an error)."),ADe.forEach(t),tAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var BA=s(Dt);T(lx.$$.fragment,BA),aAr=i(BA),bFe=n(BA,"P",{});var OEt=s(bFe);nAr=r(OEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OEt.forEach(t),sAr=i(BA),yc=n(BA,"P",{});var oee=s(yc);lAr=r(oee,`Note:
Loading a model from its configuration file does `),vFe=n(oee,"STRONG",{});var VEt=s(vFe);iAr=r(VEt,"not"),VEt.forEach(t),dAr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(oee,"A",{href:!0});var XEt=s(ZU);cAr=r(XEt,"from_pretrained()"),XEt.forEach(t),fAr=r(oee," to load the model weights."),oee.forEach(t),mAr=i(BA),T(iE.$$.fragment,BA),BA.forEach(t),gAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(ix.$$.fragment,jl),hAr=i(jl),FFe=n(jl,"P",{});var zEt=s(FFe);pAr=r(zEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zEt.forEach(t),_Ar=i(jl),gn=n(jl,"P",{});var IA=s(gn);uAr=r(IA,"The model class to instantiate is selected based on the "),TFe=n(IA,"CODE",{});var WEt=s(TFe);bAr=r(WEt,"model_type"),WEt.forEach(t),vAr=r(IA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(IA,"CODE",{});var QEt=s(MFe);FAr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),TAr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(IA,"CODE",{});var HEt=s(EFe);MAr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),EAr=r(IA,":"),IA.forEach(t),CAr=i(jl),CFe=n(jl,"UL",{});var UEt=s(CFe);dE=n(UEt,"LI",{});var VPe=s(dE);wFe=n(VPe,"STRONG",{});var JEt=s(wFe);wAr=r(JEt,"speech_to_text"),JEt.forEach(t),AAr=r(VPe," \u2014 "),eJ=n(VPe,"A",{href:!0});var YEt=s(eJ);yAr=r(YEt,"TFSpeech2TextForConditionalGeneration"),YEt.forEach(t),LAr=r(VPe," (Speech2Text model)"),VPe.forEach(t),UEt.forEach(t),xAr=i(jl),T(cE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),FNe=i(f),Lc=n(f,"H2",{class:!0});var yDe=s(Lc);fE=n(yDe,"A",{id:!0,class:!0,href:!0});var KEt=s(fE);AFe=n(KEt,"SPAN",{});var ZEt=s(AFe);T(dx.$$.fragment,ZEt),ZEt.forEach(t),KEt.forEach(t),$Ar=i(yDe),yFe=n(yDe,"SPAN",{});var eCt=s(yFe);kAr=r(eCt,"FlaxAutoModel"),eCt.forEach(t),yDe.forEach(t),TNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(cx.$$.fragment,Dl),SAr=i(Dl),xc=n(Dl,"P",{});var ree=s(xc);RAr=r(ree,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oJ=n(ree,"A",{href:!0});var oCt=s(oJ);PAr=r(oCt,"from_pretrained()"),oCt.forEach(t),BAr=r(ree," class method or the "),rJ=n(ree,"A",{href:!0});var rCt=s(rJ);IAr=r(rCt,"from_config()"),rCt.forEach(t),qAr=r(ree,` class
method.`),ree.forEach(t),NAr=i(Dl),fx=n(Dl,"P",{});var LDe=s(fx);jAr=r(LDe,"This class cannot be instantiated directly using "),LFe=n(LDe,"CODE",{});var tCt=s(LFe);DAr=r(tCt,"__init__()"),tCt.forEach(t),GAr=r(LDe," (throws an error)."),LDe.forEach(t),OAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var qA=s(Gt);T(mx.$$.fragment,qA),VAr=i(qA),xFe=n(qA,"P",{});var aCt=s(xFe);XAr=r(aCt,"Instantiates one of the base model classes of the library from a configuration."),aCt.forEach(t),zAr=i(qA),$c=n(qA,"P",{});var tee=s($c);WAr=r(tee,`Note:
Loading a model from its configuration file does `),$Fe=n(tee,"STRONG",{});var nCt=s($Fe);QAr=r(nCt,"not"),nCt.forEach(t),HAr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(tee,"A",{href:!0});var sCt=s(tJ);UAr=r(sCt,"from_pretrained()"),sCt.forEach(t),JAr=r(tee," to load the model weights."),tee.forEach(t),YAr=i(qA),T(mE.$$.fragment,qA),qA.forEach(t),KAr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(gx.$$.fragment,Gl),ZAr=i(Gl),kFe=n(Gl,"P",{});var lCt=s(kFe);e6r=r(lCt,"Instantiate one of the base model classes of the library from a pretrained model."),lCt.forEach(t),o6r=i(Gl),hn=n(Gl,"P",{});var NA=s(hn);r6r=r(NA,"The model class to instantiate is selected based on the "),SFe=n(NA,"CODE",{});var iCt=s(SFe);t6r=r(iCt,"model_type"),iCt.forEach(t),a6r=r(NA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(NA,"CODE",{});var dCt=s(RFe);n6r=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),s6r=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(NA,"CODE",{});var cCt=s(PFe);l6r=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),i6r=r(NA,":"),NA.forEach(t),d6r=i(Gl),te=n(Gl,"UL",{});var ne=s(te);gE=n(ne,"LI",{});var XPe=s(gE);BFe=n(XPe,"STRONG",{});var fCt=s(BFe);c6r=r(fCt,"albert"),fCt.forEach(t),f6r=r(XPe," \u2014 "),aJ=n(XPe,"A",{href:!0});var mCt=s(aJ);m6r=r(mCt,"FlaxAlbertModel"),mCt.forEach(t),g6r=r(XPe," (ALBERT model)"),XPe.forEach(t),h6r=i(ne),hE=n(ne,"LI",{});var zPe=s(hE);IFe=n(zPe,"STRONG",{});var gCt=s(IFe);p6r=r(gCt,"bart"),gCt.forEach(t),_6r=r(zPe," \u2014 "),nJ=n(zPe,"A",{href:!0});var hCt=s(nJ);u6r=r(hCt,"FlaxBartModel"),hCt.forEach(t),b6r=r(zPe," (BART model)"),zPe.forEach(t),v6r=i(ne),pE=n(ne,"LI",{});var WPe=s(pE);qFe=n(WPe,"STRONG",{});var pCt=s(qFe);F6r=r(pCt,"beit"),pCt.forEach(t),T6r=r(WPe," \u2014 "),sJ=n(WPe,"A",{href:!0});var _Ct=s(sJ);M6r=r(_Ct,"FlaxBeitModel"),_Ct.forEach(t),E6r=r(WPe," (BEiT model)"),WPe.forEach(t),C6r=i(ne),_E=n(ne,"LI",{});var QPe=s(_E);NFe=n(QPe,"STRONG",{});var uCt=s(NFe);w6r=r(uCt,"bert"),uCt.forEach(t),A6r=r(QPe," \u2014 "),lJ=n(QPe,"A",{href:!0});var bCt=s(lJ);y6r=r(bCt,"FlaxBertModel"),bCt.forEach(t),L6r=r(QPe," (BERT model)"),QPe.forEach(t),x6r=i(ne),uE=n(ne,"LI",{});var HPe=s(uE);jFe=n(HPe,"STRONG",{});var vCt=s(jFe);$6r=r(vCt,"big_bird"),vCt.forEach(t),k6r=r(HPe," \u2014 "),iJ=n(HPe,"A",{href:!0});var FCt=s(iJ);S6r=r(FCt,"FlaxBigBirdModel"),FCt.forEach(t),R6r=r(HPe," (BigBird model)"),HPe.forEach(t),P6r=i(ne),bE=n(ne,"LI",{});var UPe=s(bE);DFe=n(UPe,"STRONG",{});var TCt=s(DFe);B6r=r(TCt,"blenderbot"),TCt.forEach(t),I6r=r(UPe," \u2014 "),dJ=n(UPe,"A",{href:!0});var MCt=s(dJ);q6r=r(MCt,"FlaxBlenderbotModel"),MCt.forEach(t),N6r=r(UPe," (Blenderbot model)"),UPe.forEach(t),j6r=i(ne),vE=n(ne,"LI",{});var JPe=s(vE);GFe=n(JPe,"STRONG",{});var ECt=s(GFe);D6r=r(ECt,"blenderbot-small"),ECt.forEach(t),G6r=r(JPe," \u2014 "),cJ=n(JPe,"A",{href:!0});var CCt=s(cJ);O6r=r(CCt,"FlaxBlenderbotSmallModel"),CCt.forEach(t),V6r=r(JPe," (BlenderbotSmall model)"),JPe.forEach(t),X6r=i(ne),FE=n(ne,"LI",{});var YPe=s(FE);OFe=n(YPe,"STRONG",{});var wCt=s(OFe);z6r=r(wCt,"clip"),wCt.forEach(t),W6r=r(YPe," \u2014 "),fJ=n(YPe,"A",{href:!0});var ACt=s(fJ);Q6r=r(ACt,"FlaxCLIPModel"),ACt.forEach(t),H6r=r(YPe," (CLIP model)"),YPe.forEach(t),U6r=i(ne),TE=n(ne,"LI",{});var KPe=s(TE);VFe=n(KPe,"STRONG",{});var yCt=s(VFe);J6r=r(yCt,"distilbert"),yCt.forEach(t),Y6r=r(KPe," \u2014 "),mJ=n(KPe,"A",{href:!0});var LCt=s(mJ);K6r=r(LCt,"FlaxDistilBertModel"),LCt.forEach(t),Z6r=r(KPe," (DistilBERT model)"),KPe.forEach(t),eyr=i(ne),ME=n(ne,"LI",{});var ZPe=s(ME);XFe=n(ZPe,"STRONG",{});var xCt=s(XFe);oyr=r(xCt,"electra"),xCt.forEach(t),ryr=r(ZPe," \u2014 "),gJ=n(ZPe,"A",{href:!0});var $Ct=s(gJ);tyr=r($Ct,"FlaxElectraModel"),$Ct.forEach(t),ayr=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),nyr=i(ne),EE=n(ne,"LI",{});var eBe=s(EE);zFe=n(eBe,"STRONG",{});var kCt=s(zFe);syr=r(kCt,"gpt2"),kCt.forEach(t),lyr=r(eBe," \u2014 "),hJ=n(eBe,"A",{href:!0});var SCt=s(hJ);iyr=r(SCt,"FlaxGPT2Model"),SCt.forEach(t),dyr=r(eBe," (OpenAI GPT-2 model)"),eBe.forEach(t),cyr=i(ne),CE=n(ne,"LI",{});var oBe=s(CE);WFe=n(oBe,"STRONG",{});var RCt=s(WFe);fyr=r(RCt,"gpt_neo"),RCt.forEach(t),myr=r(oBe," \u2014 "),pJ=n(oBe,"A",{href:!0});var PCt=s(pJ);gyr=r(PCt,"FlaxGPTNeoModel"),PCt.forEach(t),hyr=r(oBe," (GPT Neo model)"),oBe.forEach(t),pyr=i(ne),wE=n(ne,"LI",{});var rBe=s(wE);QFe=n(rBe,"STRONG",{});var BCt=s(QFe);_yr=r(BCt,"gptj"),BCt.forEach(t),uyr=r(rBe," \u2014 "),_J=n(rBe,"A",{href:!0});var ICt=s(_J);byr=r(ICt,"FlaxGPTJModel"),ICt.forEach(t),vyr=r(rBe," (GPT-J model)"),rBe.forEach(t),Fyr=i(ne),AE=n(ne,"LI",{});var tBe=s(AE);HFe=n(tBe,"STRONG",{});var qCt=s(HFe);Tyr=r(qCt,"marian"),qCt.forEach(t),Myr=r(tBe," \u2014 "),uJ=n(tBe,"A",{href:!0});var NCt=s(uJ);Eyr=r(NCt,"FlaxMarianModel"),NCt.forEach(t),Cyr=r(tBe," (Marian model)"),tBe.forEach(t),wyr=i(ne),yE=n(ne,"LI",{});var aBe=s(yE);UFe=n(aBe,"STRONG",{});var jCt=s(UFe);Ayr=r(jCt,"mbart"),jCt.forEach(t),yyr=r(aBe," \u2014 "),bJ=n(aBe,"A",{href:!0});var DCt=s(bJ);Lyr=r(DCt,"FlaxMBartModel"),DCt.forEach(t),xyr=r(aBe," (mBART model)"),aBe.forEach(t),$yr=i(ne),LE=n(ne,"LI",{});var nBe=s(LE);JFe=n(nBe,"STRONG",{});var GCt=s(JFe);kyr=r(GCt,"mt5"),GCt.forEach(t),Syr=r(nBe," \u2014 "),vJ=n(nBe,"A",{href:!0});var OCt=s(vJ);Ryr=r(OCt,"FlaxMT5Model"),OCt.forEach(t),Pyr=r(nBe," (mT5 model)"),nBe.forEach(t),Byr=i(ne),xE=n(ne,"LI",{});var sBe=s(xE);YFe=n(sBe,"STRONG",{});var VCt=s(YFe);Iyr=r(VCt,"pegasus"),VCt.forEach(t),qyr=r(sBe," \u2014 "),FJ=n(sBe,"A",{href:!0});var XCt=s(FJ);Nyr=r(XCt,"FlaxPegasusModel"),XCt.forEach(t),jyr=r(sBe," (Pegasus model)"),sBe.forEach(t),Dyr=i(ne),$E=n(ne,"LI",{});var lBe=s($E);KFe=n(lBe,"STRONG",{});var zCt=s(KFe);Gyr=r(zCt,"roberta"),zCt.forEach(t),Oyr=r(lBe," \u2014 "),TJ=n(lBe,"A",{href:!0});var WCt=s(TJ);Vyr=r(WCt,"FlaxRobertaModel"),WCt.forEach(t),Xyr=r(lBe," (RoBERTa model)"),lBe.forEach(t),zyr=i(ne),kE=n(ne,"LI",{});var iBe=s(kE);ZFe=n(iBe,"STRONG",{});var QCt=s(ZFe);Wyr=r(QCt,"roformer"),QCt.forEach(t),Qyr=r(iBe," \u2014 "),MJ=n(iBe,"A",{href:!0});var HCt=s(MJ);Hyr=r(HCt,"FlaxRoFormerModel"),HCt.forEach(t),Uyr=r(iBe," (RoFormer model)"),iBe.forEach(t),Jyr=i(ne),SE=n(ne,"LI",{});var dBe=s(SE);eTe=n(dBe,"STRONG",{});var UCt=s(eTe);Yyr=r(UCt,"t5"),UCt.forEach(t),Kyr=r(dBe," \u2014 "),EJ=n(dBe,"A",{href:!0});var JCt=s(EJ);Zyr=r(JCt,"FlaxT5Model"),JCt.forEach(t),eLr=r(dBe," (T5 model)"),dBe.forEach(t),oLr=i(ne),RE=n(ne,"LI",{});var cBe=s(RE);oTe=n(cBe,"STRONG",{});var YCt=s(oTe);rLr=r(YCt,"vision-text-dual-encoder"),YCt.forEach(t),tLr=r(cBe," \u2014 "),CJ=n(cBe,"A",{href:!0});var KCt=s(CJ);aLr=r(KCt,"FlaxVisionTextDualEncoderModel"),KCt.forEach(t),nLr=r(cBe," (VisionTextDualEncoder model)"),cBe.forEach(t),sLr=i(ne),PE=n(ne,"LI",{});var fBe=s(PE);rTe=n(fBe,"STRONG",{});var ZCt=s(rTe);lLr=r(ZCt,"vit"),ZCt.forEach(t),iLr=r(fBe," \u2014 "),wJ=n(fBe,"A",{href:!0});var ewt=s(wJ);dLr=r(ewt,"FlaxViTModel"),ewt.forEach(t),cLr=r(fBe," (ViT model)"),fBe.forEach(t),fLr=i(ne),BE=n(ne,"LI",{});var mBe=s(BE);tTe=n(mBe,"STRONG",{});var owt=s(tTe);mLr=r(owt,"wav2vec2"),owt.forEach(t),gLr=r(mBe," \u2014 "),AJ=n(mBe,"A",{href:!0});var rwt=s(AJ);hLr=r(rwt,"FlaxWav2Vec2Model"),rwt.forEach(t),pLr=r(mBe," (Wav2Vec2 model)"),mBe.forEach(t),_Lr=i(ne),IE=n(ne,"LI",{});var gBe=s(IE);aTe=n(gBe,"STRONG",{});var twt=s(aTe);uLr=r(twt,"xglm"),twt.forEach(t),bLr=r(gBe," \u2014 "),yJ=n(gBe,"A",{href:!0});var awt=s(yJ);vLr=r(awt,"FlaxXGLMModel"),awt.forEach(t),FLr=r(gBe," (XGLM model)"),gBe.forEach(t),TLr=i(ne),qE=n(ne,"LI",{});var hBe=s(qE);nTe=n(hBe,"STRONG",{});var nwt=s(nTe);MLr=r(nwt,"xlm-roberta"),nwt.forEach(t),ELr=r(hBe," \u2014 "),LJ=n(hBe,"A",{href:!0});var swt=s(LJ);CLr=r(swt,"FlaxXLMRobertaModel"),swt.forEach(t),wLr=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),ne.forEach(t),ALr=i(Gl),T(NE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),MNe=i(f),kc=n(f,"H2",{class:!0});var xDe=s(kc);jE=n(xDe,"A",{id:!0,class:!0,href:!0});var lwt=s(jE);sTe=n(lwt,"SPAN",{});var iwt=s(sTe);T(hx.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),yLr=i(xDe),lTe=n(xDe,"SPAN",{});var dwt=s(lTe);LLr=r(dwt,"FlaxAutoModelForCausalLM"),dwt.forEach(t),xDe.forEach(t),ENe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(px.$$.fragment,Ol),xLr=i(Ol),Sc=n(Ol,"P",{});var aee=s(Sc);$Lr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=n(aee,"A",{href:!0});var cwt=s(xJ);kLr=r(cwt,"from_pretrained()"),cwt.forEach(t),SLr=r(aee," class method or the "),$J=n(aee,"A",{href:!0});var fwt=s($J);RLr=r(fwt,"from_config()"),fwt.forEach(t),PLr=r(aee,` class
method.`),aee.forEach(t),BLr=i(Ol),_x=n(Ol,"P",{});var $De=s(_x);ILr=r($De,"This class cannot be instantiated directly using "),iTe=n($De,"CODE",{});var mwt=s(iTe);qLr=r(mwt,"__init__()"),mwt.forEach(t),NLr=r($De," (throws an error)."),$De.forEach(t),jLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var jA=s(Ot);T(ux.$$.fragment,jA),DLr=i(jA),dTe=n(jA,"P",{});var gwt=s(dTe);GLr=r(gwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gwt.forEach(t),OLr=i(jA),Rc=n(jA,"P",{});var nee=s(Rc);VLr=r(nee,`Note:
Loading a model from its configuration file does `),cTe=n(nee,"STRONG",{});var hwt=s(cTe);XLr=r(hwt,"not"),hwt.forEach(t),zLr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(nee,"A",{href:!0});var pwt=s(kJ);WLr=r(pwt,"from_pretrained()"),pwt.forEach(t),QLr=r(nee," to load the model weights."),nee.forEach(t),HLr=i(jA),T(DE.$$.fragment,jA),jA.forEach(t),ULr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(bx.$$.fragment,Vl),JLr=i(Vl),fTe=n(Vl,"P",{});var _wt=s(fTe);YLr=r(_wt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_wt.forEach(t),KLr=i(Vl),pn=n(Vl,"P",{});var DA=s(pn);ZLr=r(DA,"The model class to instantiate is selected based on the "),mTe=n(DA,"CODE",{});var uwt=s(mTe);e8r=r(uwt,"model_type"),uwt.forEach(t),o8r=r(DA,` property of the config object (either
passed as an argument or loaded from `),gTe=n(DA,"CODE",{});var bwt=s(gTe);r8r=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),t8r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(DA,"CODE",{});var vwt=s(hTe);a8r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),n8r=r(DA,":"),DA.forEach(t),s8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);GE=n(Xe,"LI",{});var pBe=s(GE);pTe=n(pBe,"STRONG",{});var Fwt=s(pTe);l8r=r(Fwt,"bart"),Fwt.forEach(t),i8r=r(pBe," \u2014 "),SJ=n(pBe,"A",{href:!0});var Twt=s(SJ);d8r=r(Twt,"FlaxBartForCausalLM"),Twt.forEach(t),c8r=r(pBe," (BART model)"),pBe.forEach(t),f8r=i(Xe),OE=n(Xe,"LI",{});var _Be=s(OE);_Te=n(_Be,"STRONG",{});var Mwt=s(_Te);m8r=r(Mwt,"bert"),Mwt.forEach(t),g8r=r(_Be," \u2014 "),RJ=n(_Be,"A",{href:!0});var Ewt=s(RJ);h8r=r(Ewt,"FlaxBertForCausalLM"),Ewt.forEach(t),p8r=r(_Be," (BERT model)"),_Be.forEach(t),_8r=i(Xe),VE=n(Xe,"LI",{});var uBe=s(VE);uTe=n(uBe,"STRONG",{});var Cwt=s(uTe);u8r=r(Cwt,"big_bird"),Cwt.forEach(t),b8r=r(uBe," \u2014 "),PJ=n(uBe,"A",{href:!0});var wwt=s(PJ);v8r=r(wwt,"FlaxBigBirdForCausalLM"),wwt.forEach(t),F8r=r(uBe," (BigBird model)"),uBe.forEach(t),T8r=i(Xe),XE=n(Xe,"LI",{});var bBe=s(XE);bTe=n(bBe,"STRONG",{});var Awt=s(bTe);M8r=r(Awt,"electra"),Awt.forEach(t),E8r=r(bBe," \u2014 "),BJ=n(bBe,"A",{href:!0});var ywt=s(BJ);C8r=r(ywt,"FlaxElectraForCausalLM"),ywt.forEach(t),w8r=r(bBe," (ELECTRA model)"),bBe.forEach(t),A8r=i(Xe),zE=n(Xe,"LI",{});var vBe=s(zE);vTe=n(vBe,"STRONG",{});var Lwt=s(vTe);y8r=r(Lwt,"gpt2"),Lwt.forEach(t),L8r=r(vBe," \u2014 "),IJ=n(vBe,"A",{href:!0});var xwt=s(IJ);x8r=r(xwt,"FlaxGPT2LMHeadModel"),xwt.forEach(t),$8r=r(vBe," (OpenAI GPT-2 model)"),vBe.forEach(t),k8r=i(Xe),WE=n(Xe,"LI",{});var FBe=s(WE);FTe=n(FBe,"STRONG",{});var $wt=s(FTe);S8r=r($wt,"gpt_neo"),$wt.forEach(t),R8r=r(FBe," \u2014 "),qJ=n(FBe,"A",{href:!0});var kwt=s(qJ);P8r=r(kwt,"FlaxGPTNeoForCausalLM"),kwt.forEach(t),B8r=r(FBe," (GPT Neo model)"),FBe.forEach(t),I8r=i(Xe),QE=n(Xe,"LI",{});var TBe=s(QE);TTe=n(TBe,"STRONG",{});var Swt=s(TTe);q8r=r(Swt,"gptj"),Swt.forEach(t),N8r=r(TBe," \u2014 "),NJ=n(TBe,"A",{href:!0});var Rwt=s(NJ);j8r=r(Rwt,"FlaxGPTJForCausalLM"),Rwt.forEach(t),D8r=r(TBe," (GPT-J model)"),TBe.forEach(t),G8r=i(Xe),HE=n(Xe,"LI",{});var MBe=s(HE);MTe=n(MBe,"STRONG",{});var Pwt=s(MTe);O8r=r(Pwt,"roberta"),Pwt.forEach(t),V8r=r(MBe," \u2014 "),jJ=n(MBe,"A",{href:!0});var Bwt=s(jJ);X8r=r(Bwt,"FlaxRobertaForCausalLM"),Bwt.forEach(t),z8r=r(MBe," (RoBERTa model)"),MBe.forEach(t),W8r=i(Xe),UE=n(Xe,"LI",{});var EBe=s(UE);ETe=n(EBe,"STRONG",{});var Iwt=s(ETe);Q8r=r(Iwt,"xglm"),Iwt.forEach(t),H8r=r(EBe," \u2014 "),DJ=n(EBe,"A",{href:!0});var qwt=s(DJ);U8r=r(qwt,"FlaxXGLMForCausalLM"),qwt.forEach(t),J8r=r(EBe," (XGLM model)"),EBe.forEach(t),Xe.forEach(t),Y8r=i(Vl),T(JE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),CNe=i(f),Pc=n(f,"H2",{class:!0});var kDe=s(Pc);YE=n(kDe,"A",{id:!0,class:!0,href:!0});var Nwt=s(YE);CTe=n(Nwt,"SPAN",{});var jwt=s(CTe);T(vx.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),K8r=i(kDe),wTe=n(kDe,"SPAN",{});var Dwt=s(wTe);Z8r=r(Dwt,"FlaxAutoModelForPreTraining"),Dwt.forEach(t),kDe.forEach(t),wNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(Fx.$$.fragment,Xl),exr=i(Xl),Bc=n(Xl,"P",{});var see=s(Bc);oxr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GJ=n(see,"A",{href:!0});var Gwt=s(GJ);rxr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),txr=r(see," class method or the "),OJ=n(see,"A",{href:!0});var Owt=s(OJ);axr=r(Owt,"from_config()"),Owt.forEach(t),nxr=r(see,` class
method.`),see.forEach(t),sxr=i(Xl),Tx=n(Xl,"P",{});var SDe=s(Tx);lxr=r(SDe,"This class cannot be instantiated directly using "),ATe=n(SDe,"CODE",{});var Vwt=s(ATe);ixr=r(Vwt,"__init__()"),Vwt.forEach(t),dxr=r(SDe," (throws an error)."),SDe.forEach(t),cxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var GA=s(Vt);T(Mx.$$.fragment,GA),fxr=i(GA),yTe=n(GA,"P",{});var Xwt=s(yTe);mxr=r(Xwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xwt.forEach(t),gxr=i(GA),Ic=n(GA,"P",{});var lee=s(Ic);hxr=r(lee,`Note:
Loading a model from its configuration file does `),LTe=n(lee,"STRONG",{});var zwt=s(LTe);pxr=r(zwt,"not"),zwt.forEach(t),_xr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(lee,"A",{href:!0});var Wwt=s(VJ);uxr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),bxr=r(lee," to load the model weights."),lee.forEach(t),vxr=i(GA),T(KE.$$.fragment,GA),GA.forEach(t),Fxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(Ex.$$.fragment,zl),Txr=i(zl),xTe=n(zl,"P",{});var Qwt=s(xTe);Mxr=r(Qwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qwt.forEach(t),Exr=i(zl),_n=n(zl,"P",{});var OA=s(_n);Cxr=r(OA,"The model class to instantiate is selected based on the "),$Te=n(OA,"CODE",{});var Hwt=s($Te);wxr=r(Hwt,"model_type"),Hwt.forEach(t),Axr=r(OA,` property of the config object (either
passed as an argument or loaded from `),kTe=n(OA,"CODE",{});var Uwt=s(kTe);yxr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),Lxr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(OA,"CODE",{});var Jwt=s(STe);xxr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),$xr=r(OA,":"),OA.forEach(t),kxr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);ZE=n(we,"LI",{});var CBe=s(ZE);RTe=n(CBe,"STRONG",{});var Ywt=s(RTe);Sxr=r(Ywt,"albert"),Ywt.forEach(t),Rxr=r(CBe," \u2014 "),XJ=n(CBe,"A",{href:!0});var Kwt=s(XJ);Pxr=r(Kwt,"FlaxAlbertForPreTraining"),Kwt.forEach(t),Bxr=r(CBe," (ALBERT model)"),CBe.forEach(t),Ixr=i(we),eC=n(we,"LI",{});var wBe=s(eC);PTe=n(wBe,"STRONG",{});var Zwt=s(PTe);qxr=r(Zwt,"bart"),Zwt.forEach(t),Nxr=r(wBe," \u2014 "),zJ=n(wBe,"A",{href:!0});var e0t=s(zJ);jxr=r(e0t,"FlaxBartForConditionalGeneration"),e0t.forEach(t),Dxr=r(wBe," (BART model)"),wBe.forEach(t),Gxr=i(we),oC=n(we,"LI",{});var ABe=s(oC);BTe=n(ABe,"STRONG",{});var o0t=s(BTe);Oxr=r(o0t,"bert"),o0t.forEach(t),Vxr=r(ABe," \u2014 "),WJ=n(ABe,"A",{href:!0});var r0t=s(WJ);Xxr=r(r0t,"FlaxBertForPreTraining"),r0t.forEach(t),zxr=r(ABe," (BERT model)"),ABe.forEach(t),Wxr=i(we),rC=n(we,"LI",{});var yBe=s(rC);ITe=n(yBe,"STRONG",{});var t0t=s(ITe);Qxr=r(t0t,"big_bird"),t0t.forEach(t),Hxr=r(yBe," \u2014 "),QJ=n(yBe,"A",{href:!0});var a0t=s(QJ);Uxr=r(a0t,"FlaxBigBirdForPreTraining"),a0t.forEach(t),Jxr=r(yBe," (BigBird model)"),yBe.forEach(t),Yxr=i(we),tC=n(we,"LI",{});var LBe=s(tC);qTe=n(LBe,"STRONG",{});var n0t=s(qTe);Kxr=r(n0t,"electra"),n0t.forEach(t),Zxr=r(LBe," \u2014 "),HJ=n(LBe,"A",{href:!0});var s0t=s(HJ);e9r=r(s0t,"FlaxElectraForPreTraining"),s0t.forEach(t),o9r=r(LBe," (ELECTRA model)"),LBe.forEach(t),r9r=i(we),aC=n(we,"LI",{});var xBe=s(aC);NTe=n(xBe,"STRONG",{});var l0t=s(NTe);t9r=r(l0t,"mbart"),l0t.forEach(t),a9r=r(xBe," \u2014 "),UJ=n(xBe,"A",{href:!0});var i0t=s(UJ);n9r=r(i0t,"FlaxMBartForConditionalGeneration"),i0t.forEach(t),s9r=r(xBe," (mBART model)"),xBe.forEach(t),l9r=i(we),nC=n(we,"LI",{});var $Be=s(nC);jTe=n($Be,"STRONG",{});var d0t=s(jTe);i9r=r(d0t,"mt5"),d0t.forEach(t),d9r=r($Be," \u2014 "),JJ=n($Be,"A",{href:!0});var c0t=s(JJ);c9r=r(c0t,"FlaxMT5ForConditionalGeneration"),c0t.forEach(t),f9r=r($Be," (mT5 model)"),$Be.forEach(t),m9r=i(we),sC=n(we,"LI",{});var kBe=s(sC);DTe=n(kBe,"STRONG",{});var f0t=s(DTe);g9r=r(f0t,"roberta"),f0t.forEach(t),h9r=r(kBe," \u2014 "),YJ=n(kBe,"A",{href:!0});var m0t=s(YJ);p9r=r(m0t,"FlaxRobertaForMaskedLM"),m0t.forEach(t),_9r=r(kBe," (RoBERTa model)"),kBe.forEach(t),u9r=i(we),lC=n(we,"LI",{});var SBe=s(lC);GTe=n(SBe,"STRONG",{});var g0t=s(GTe);b9r=r(g0t,"roformer"),g0t.forEach(t),v9r=r(SBe," \u2014 "),KJ=n(SBe,"A",{href:!0});var h0t=s(KJ);F9r=r(h0t,"FlaxRoFormerForMaskedLM"),h0t.forEach(t),T9r=r(SBe," (RoFormer model)"),SBe.forEach(t),M9r=i(we),iC=n(we,"LI",{});var RBe=s(iC);OTe=n(RBe,"STRONG",{});var p0t=s(OTe);E9r=r(p0t,"t5"),p0t.forEach(t),C9r=r(RBe," \u2014 "),ZJ=n(RBe,"A",{href:!0});var _0t=s(ZJ);w9r=r(_0t,"FlaxT5ForConditionalGeneration"),_0t.forEach(t),A9r=r(RBe," (T5 model)"),RBe.forEach(t),y9r=i(we),dC=n(we,"LI",{});var PBe=s(dC);VTe=n(PBe,"STRONG",{});var u0t=s(VTe);L9r=r(u0t,"wav2vec2"),u0t.forEach(t),x9r=r(PBe," \u2014 "),eY=n(PBe,"A",{href:!0});var b0t=s(eY);$9r=r(b0t,"FlaxWav2Vec2ForPreTraining"),b0t.forEach(t),k9r=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),S9r=i(we),cC=n(we,"LI",{});var BBe=s(cC);XTe=n(BBe,"STRONG",{});var v0t=s(XTe);R9r=r(v0t,"xlm-roberta"),v0t.forEach(t),P9r=r(BBe," \u2014 "),oY=n(BBe,"A",{href:!0});var F0t=s(oY);B9r=r(F0t,"FlaxXLMRobertaForMaskedLM"),F0t.forEach(t),I9r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),we.forEach(t),q9r=i(zl),T(fC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ANe=i(f),qc=n(f,"H2",{class:!0});var RDe=s(qc);mC=n(RDe,"A",{id:!0,class:!0,href:!0});var T0t=s(mC);zTe=n(T0t,"SPAN",{});var M0t=s(zTe);T(Cx.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),N9r=i(RDe),WTe=n(RDe,"SPAN",{});var E0t=s(WTe);j9r=r(E0t,"FlaxAutoModelForMaskedLM"),E0t.forEach(t),RDe.forEach(t),yNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(wx.$$.fragment,Wl),D9r=i(Wl),Nc=n(Wl,"P",{});var iee=s(Nc);G9r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=n(iee,"A",{href:!0});var C0t=s(rY);O9r=r(C0t,"from_pretrained()"),C0t.forEach(t),V9r=r(iee," class method or the "),tY=n(iee,"A",{href:!0});var w0t=s(tY);X9r=r(w0t,"from_config()"),w0t.forEach(t),z9r=r(iee,` class
method.`),iee.forEach(t),W9r=i(Wl),Ax=n(Wl,"P",{});var PDe=s(Ax);Q9r=r(PDe,"This class cannot be instantiated directly using "),QTe=n(PDe,"CODE",{});var A0t=s(QTe);H9r=r(A0t,"__init__()"),A0t.forEach(t),U9r=r(PDe," (throws an error)."),PDe.forEach(t),J9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var VA=s(Xt);T(yx.$$.fragment,VA),Y9r=i(VA),HTe=n(VA,"P",{});var y0t=s(HTe);K9r=r(y0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y0t.forEach(t),Z9r=i(VA),jc=n(VA,"P",{});var dee=s(jc);e$r=r(dee,`Note:
Loading a model from its configuration file does `),UTe=n(dee,"STRONG",{});var L0t=s(UTe);o$r=r(L0t,"not"),L0t.forEach(t),r$r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(dee,"A",{href:!0});var x0t=s(aY);t$r=r(x0t,"from_pretrained()"),x0t.forEach(t),a$r=r(dee," to load the model weights."),dee.forEach(t),n$r=i(VA),T(gC.$$.fragment,VA),VA.forEach(t),s$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(Lx.$$.fragment,Ql),l$r=i(Ql),JTe=n(Ql,"P",{});var $0t=s(JTe);i$r=r($0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$0t.forEach(t),d$r=i(Ql),un=n(Ql,"P",{});var XA=s(un);c$r=r(XA,"The model class to instantiate is selected based on the "),YTe=n(XA,"CODE",{});var k0t=s(YTe);f$r=r(k0t,"model_type"),k0t.forEach(t),m$r=r(XA,` property of the config object (either
passed as an argument or loaded from `),KTe=n(XA,"CODE",{});var S0t=s(KTe);g$r=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),h$r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(XA,"CODE",{});var R0t=s(ZTe);p$r=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),_$r=r(XA,":"),XA.forEach(t),u$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);hC=n(Ie,"LI",{});var IBe=s(hC);e7e=n(IBe,"STRONG",{});var P0t=s(e7e);b$r=r(P0t,"albert"),P0t.forEach(t),v$r=r(IBe," \u2014 "),nY=n(IBe,"A",{href:!0});var B0t=s(nY);F$r=r(B0t,"FlaxAlbertForMaskedLM"),B0t.forEach(t),T$r=r(IBe," (ALBERT model)"),IBe.forEach(t),M$r=i(Ie),pC=n(Ie,"LI",{});var qBe=s(pC);o7e=n(qBe,"STRONG",{});var I0t=s(o7e);E$r=r(I0t,"bart"),I0t.forEach(t),C$r=r(qBe," \u2014 "),sY=n(qBe,"A",{href:!0});var q0t=s(sY);w$r=r(q0t,"FlaxBartForConditionalGeneration"),q0t.forEach(t),A$r=r(qBe," (BART model)"),qBe.forEach(t),y$r=i(Ie),_C=n(Ie,"LI",{});var NBe=s(_C);r7e=n(NBe,"STRONG",{});var N0t=s(r7e);L$r=r(N0t,"bert"),N0t.forEach(t),x$r=r(NBe," \u2014 "),lY=n(NBe,"A",{href:!0});var j0t=s(lY);$$r=r(j0t,"FlaxBertForMaskedLM"),j0t.forEach(t),k$r=r(NBe," (BERT model)"),NBe.forEach(t),S$r=i(Ie),uC=n(Ie,"LI",{});var jBe=s(uC);t7e=n(jBe,"STRONG",{});var D0t=s(t7e);R$r=r(D0t,"big_bird"),D0t.forEach(t),P$r=r(jBe," \u2014 "),iY=n(jBe,"A",{href:!0});var G0t=s(iY);B$r=r(G0t,"FlaxBigBirdForMaskedLM"),G0t.forEach(t),I$r=r(jBe," (BigBird model)"),jBe.forEach(t),q$r=i(Ie),bC=n(Ie,"LI",{});var DBe=s(bC);a7e=n(DBe,"STRONG",{});var O0t=s(a7e);N$r=r(O0t,"distilbert"),O0t.forEach(t),j$r=r(DBe," \u2014 "),dY=n(DBe,"A",{href:!0});var V0t=s(dY);D$r=r(V0t,"FlaxDistilBertForMaskedLM"),V0t.forEach(t),G$r=r(DBe," (DistilBERT model)"),DBe.forEach(t),O$r=i(Ie),vC=n(Ie,"LI",{});var GBe=s(vC);n7e=n(GBe,"STRONG",{});var X0t=s(n7e);V$r=r(X0t,"electra"),X0t.forEach(t),X$r=r(GBe," \u2014 "),cY=n(GBe,"A",{href:!0});var z0t=s(cY);z$r=r(z0t,"FlaxElectraForMaskedLM"),z0t.forEach(t),W$r=r(GBe," (ELECTRA model)"),GBe.forEach(t),Q$r=i(Ie),FC=n(Ie,"LI",{});var OBe=s(FC);s7e=n(OBe,"STRONG",{});var W0t=s(s7e);H$r=r(W0t,"mbart"),W0t.forEach(t),U$r=r(OBe," \u2014 "),fY=n(OBe,"A",{href:!0});var Q0t=s(fY);J$r=r(Q0t,"FlaxMBartForConditionalGeneration"),Q0t.forEach(t),Y$r=r(OBe," (mBART model)"),OBe.forEach(t),K$r=i(Ie),TC=n(Ie,"LI",{});var VBe=s(TC);l7e=n(VBe,"STRONG",{});var H0t=s(l7e);Z$r=r(H0t,"roberta"),H0t.forEach(t),ekr=r(VBe," \u2014 "),mY=n(VBe,"A",{href:!0});var U0t=s(mY);okr=r(U0t,"FlaxRobertaForMaskedLM"),U0t.forEach(t),rkr=r(VBe," (RoBERTa model)"),VBe.forEach(t),tkr=i(Ie),MC=n(Ie,"LI",{});var XBe=s(MC);i7e=n(XBe,"STRONG",{});var J0t=s(i7e);akr=r(J0t,"roformer"),J0t.forEach(t),nkr=r(XBe," \u2014 "),gY=n(XBe,"A",{href:!0});var Y0t=s(gY);skr=r(Y0t,"FlaxRoFormerForMaskedLM"),Y0t.forEach(t),lkr=r(XBe," (RoFormer model)"),XBe.forEach(t),ikr=i(Ie),EC=n(Ie,"LI",{});var zBe=s(EC);d7e=n(zBe,"STRONG",{});var K0t=s(d7e);dkr=r(K0t,"xlm-roberta"),K0t.forEach(t),ckr=r(zBe," \u2014 "),hY=n(zBe,"A",{href:!0});var Z0t=s(hY);fkr=r(Z0t,"FlaxXLMRobertaForMaskedLM"),Z0t.forEach(t),mkr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),Ie.forEach(t),gkr=i(Ql),T(CC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),LNe=i(f),Dc=n(f,"H2",{class:!0});var BDe=s(Dc);wC=n(BDe,"A",{id:!0,class:!0,href:!0});var eAt=s(wC);c7e=n(eAt,"SPAN",{});var oAt=s(c7e);T(xx.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),hkr=i(BDe),f7e=n(BDe,"SPAN",{});var rAt=s(f7e);pkr=r(rAt,"FlaxAutoModelForSeq2SeqLM"),rAt.forEach(t),BDe.forEach(t),xNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T($x.$$.fragment,Hl),_kr=i(Hl),Gc=n(Hl,"P",{});var cee=s(Gc);ukr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pY=n(cee,"A",{href:!0});var tAt=s(pY);bkr=r(tAt,"from_pretrained()"),tAt.forEach(t),vkr=r(cee," class method or the "),_Y=n(cee,"A",{href:!0});var aAt=s(_Y);Fkr=r(aAt,"from_config()"),aAt.forEach(t),Tkr=r(cee,` class
method.`),cee.forEach(t),Mkr=i(Hl),kx=n(Hl,"P",{});var IDe=s(kx);Ekr=r(IDe,"This class cannot be instantiated directly using "),m7e=n(IDe,"CODE",{});var nAt=s(m7e);Ckr=r(nAt,"__init__()"),nAt.forEach(t),wkr=r(IDe," (throws an error)."),IDe.forEach(t),Akr=i(Hl),zt=n(Hl,"DIV",{class:!0});var zA=s(zt);T(Sx.$$.fragment,zA),ykr=i(zA),g7e=n(zA,"P",{});var sAt=s(g7e);Lkr=r(sAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sAt.forEach(t),xkr=i(zA),Oc=n(zA,"P",{});var fee=s(Oc);$kr=r(fee,`Note:
Loading a model from its configuration file does `),h7e=n(fee,"STRONG",{});var lAt=s(h7e);kkr=r(lAt,"not"),lAt.forEach(t),Skr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(fee,"A",{href:!0});var iAt=s(uY);Rkr=r(iAt,"from_pretrained()"),iAt.forEach(t),Pkr=r(fee," to load the model weights."),fee.forEach(t),Bkr=i(zA),T(AC.$$.fragment,zA),zA.forEach(t),Ikr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(Rx.$$.fragment,Ul),qkr=i(Ul),p7e=n(Ul,"P",{});var dAt=s(p7e);Nkr=r(dAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dAt.forEach(t),jkr=i(Ul),bn=n(Ul,"P",{});var WA=s(bn);Dkr=r(WA,"The model class to instantiate is selected based on the "),_7e=n(WA,"CODE",{});var cAt=s(_7e);Gkr=r(cAt,"model_type"),cAt.forEach(t),Okr=r(WA,` property of the config object (either
passed as an argument or loaded from `),u7e=n(WA,"CODE",{});var fAt=s(u7e);Vkr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),Xkr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(WA,"CODE",{});var mAt=s(b7e);zkr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),Wkr=r(WA,":"),WA.forEach(t),Qkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);yC=n(ze,"LI",{});var WBe=s(yC);v7e=n(WBe,"STRONG",{});var gAt=s(v7e);Hkr=r(gAt,"bart"),gAt.forEach(t),Ukr=r(WBe," \u2014 "),bY=n(WBe,"A",{href:!0});var hAt=s(bY);Jkr=r(hAt,"FlaxBartForConditionalGeneration"),hAt.forEach(t),Ykr=r(WBe," (BART model)"),WBe.forEach(t),Kkr=i(ze),LC=n(ze,"LI",{});var QBe=s(LC);F7e=n(QBe,"STRONG",{});var pAt=s(F7e);Zkr=r(pAt,"blenderbot"),pAt.forEach(t),eSr=r(QBe," \u2014 "),vY=n(QBe,"A",{href:!0});var _At=s(vY);oSr=r(_At,"FlaxBlenderbotForConditionalGeneration"),_At.forEach(t),rSr=r(QBe," (Blenderbot model)"),QBe.forEach(t),tSr=i(ze),xC=n(ze,"LI",{});var HBe=s(xC);T7e=n(HBe,"STRONG",{});var uAt=s(T7e);aSr=r(uAt,"blenderbot-small"),uAt.forEach(t),nSr=r(HBe," \u2014 "),FY=n(HBe,"A",{href:!0});var bAt=s(FY);sSr=r(bAt,"FlaxBlenderbotSmallForConditionalGeneration"),bAt.forEach(t),lSr=r(HBe," (BlenderbotSmall model)"),HBe.forEach(t),iSr=i(ze),$C=n(ze,"LI",{});var UBe=s($C);M7e=n(UBe,"STRONG",{});var vAt=s(M7e);dSr=r(vAt,"encoder-decoder"),vAt.forEach(t),cSr=r(UBe," \u2014 "),TY=n(UBe,"A",{href:!0});var FAt=s(TY);fSr=r(FAt,"FlaxEncoderDecoderModel"),FAt.forEach(t),mSr=r(UBe," (Encoder decoder model)"),UBe.forEach(t),gSr=i(ze),kC=n(ze,"LI",{});var JBe=s(kC);E7e=n(JBe,"STRONG",{});var TAt=s(E7e);hSr=r(TAt,"marian"),TAt.forEach(t),pSr=r(JBe," \u2014 "),MY=n(JBe,"A",{href:!0});var MAt=s(MY);_Sr=r(MAt,"FlaxMarianMTModel"),MAt.forEach(t),uSr=r(JBe," (Marian model)"),JBe.forEach(t),bSr=i(ze),SC=n(ze,"LI",{});var YBe=s(SC);C7e=n(YBe,"STRONG",{});var EAt=s(C7e);vSr=r(EAt,"mbart"),EAt.forEach(t),FSr=r(YBe," \u2014 "),EY=n(YBe,"A",{href:!0});var CAt=s(EY);TSr=r(CAt,"FlaxMBartForConditionalGeneration"),CAt.forEach(t),MSr=r(YBe," (mBART model)"),YBe.forEach(t),ESr=i(ze),RC=n(ze,"LI",{});var KBe=s(RC);w7e=n(KBe,"STRONG",{});var wAt=s(w7e);CSr=r(wAt,"mt5"),wAt.forEach(t),wSr=r(KBe," \u2014 "),CY=n(KBe,"A",{href:!0});var AAt=s(CY);ASr=r(AAt,"FlaxMT5ForConditionalGeneration"),AAt.forEach(t),ySr=r(KBe," (mT5 model)"),KBe.forEach(t),LSr=i(ze),PC=n(ze,"LI",{});var ZBe=s(PC);A7e=n(ZBe,"STRONG",{});var yAt=s(A7e);xSr=r(yAt,"pegasus"),yAt.forEach(t),$Sr=r(ZBe," \u2014 "),wY=n(ZBe,"A",{href:!0});var LAt=s(wY);kSr=r(LAt,"FlaxPegasusForConditionalGeneration"),LAt.forEach(t),SSr=r(ZBe," (Pegasus model)"),ZBe.forEach(t),RSr=i(ze),BC=n(ze,"LI",{});var eIe=s(BC);y7e=n(eIe,"STRONG",{});var xAt=s(y7e);PSr=r(xAt,"t5"),xAt.forEach(t),BSr=r(eIe," \u2014 "),AY=n(eIe,"A",{href:!0});var $At=s(AY);ISr=r($At,"FlaxT5ForConditionalGeneration"),$At.forEach(t),qSr=r(eIe," (T5 model)"),eIe.forEach(t),ze.forEach(t),NSr=i(Ul),T(IC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),$Ne=i(f),Vc=n(f,"H2",{class:!0});var qDe=s(Vc);qC=n(qDe,"A",{id:!0,class:!0,href:!0});var kAt=s(qC);L7e=n(kAt,"SPAN",{});var SAt=s(L7e);T(Px.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),jSr=i(qDe),x7e=n(qDe,"SPAN",{});var RAt=s(x7e);DSr=r(RAt,"FlaxAutoModelForSequenceClassification"),RAt.forEach(t),qDe.forEach(t),kNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Bx.$$.fragment,Jl),GSr=i(Jl),Xc=n(Jl,"P",{});var mee=s(Xc);OSr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yY=n(mee,"A",{href:!0});var PAt=s(yY);VSr=r(PAt,"from_pretrained()"),PAt.forEach(t),XSr=r(mee," class method or the "),LY=n(mee,"A",{href:!0});var BAt=s(LY);zSr=r(BAt,"from_config()"),BAt.forEach(t),WSr=r(mee,` class
method.`),mee.forEach(t),QSr=i(Jl),Ix=n(Jl,"P",{});var NDe=s(Ix);HSr=r(NDe,"This class cannot be instantiated directly using "),$7e=n(NDe,"CODE",{});var IAt=s($7e);USr=r(IAt,"__init__()"),IAt.forEach(t),JSr=r(NDe," (throws an error)."),NDe.forEach(t),YSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var QA=s(Wt);T(qx.$$.fragment,QA),KSr=i(QA),k7e=n(QA,"P",{});var qAt=s(k7e);ZSr=r(qAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qAt.forEach(t),eRr=i(QA),zc=n(QA,"P",{});var gee=s(zc);oRr=r(gee,`Note:
Loading a model from its configuration file does `),S7e=n(gee,"STRONG",{});var NAt=s(S7e);rRr=r(NAt,"not"),NAt.forEach(t),tRr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(gee,"A",{href:!0});var jAt=s(xY);aRr=r(jAt,"from_pretrained()"),jAt.forEach(t),nRr=r(gee," to load the model weights."),gee.forEach(t),sRr=i(QA),T(NC.$$.fragment,QA),QA.forEach(t),lRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(Nx.$$.fragment,Yl),iRr=i(Yl),R7e=n(Yl,"P",{});var DAt=s(R7e);dRr=r(DAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DAt.forEach(t),cRr=i(Yl),vn=n(Yl,"P",{});var HA=s(vn);fRr=r(HA,"The model class to instantiate is selected based on the "),P7e=n(HA,"CODE",{});var GAt=s(P7e);mRr=r(GAt,"model_type"),GAt.forEach(t),gRr=r(HA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(HA,"CODE",{});var OAt=s(B7e);hRr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),pRr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(HA,"CODE",{});var VAt=s(I7e);_Rr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),uRr=r(HA,":"),HA.forEach(t),bRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);jC=n(qe,"LI",{});var oIe=s(jC);q7e=n(oIe,"STRONG",{});var XAt=s(q7e);vRr=r(XAt,"albert"),XAt.forEach(t),FRr=r(oIe," \u2014 "),$Y=n(oIe,"A",{href:!0});var zAt=s($Y);TRr=r(zAt,"FlaxAlbertForSequenceClassification"),zAt.forEach(t),MRr=r(oIe," (ALBERT model)"),oIe.forEach(t),ERr=i(qe),DC=n(qe,"LI",{});var rIe=s(DC);N7e=n(rIe,"STRONG",{});var WAt=s(N7e);CRr=r(WAt,"bart"),WAt.forEach(t),wRr=r(rIe," \u2014 "),kY=n(rIe,"A",{href:!0});var QAt=s(kY);ARr=r(QAt,"FlaxBartForSequenceClassification"),QAt.forEach(t),yRr=r(rIe," (BART model)"),rIe.forEach(t),LRr=i(qe),GC=n(qe,"LI",{});var tIe=s(GC);j7e=n(tIe,"STRONG",{});var HAt=s(j7e);xRr=r(HAt,"bert"),HAt.forEach(t),$Rr=r(tIe," \u2014 "),SY=n(tIe,"A",{href:!0});var UAt=s(SY);kRr=r(UAt,"FlaxBertForSequenceClassification"),UAt.forEach(t),SRr=r(tIe," (BERT model)"),tIe.forEach(t),RRr=i(qe),OC=n(qe,"LI",{});var aIe=s(OC);D7e=n(aIe,"STRONG",{});var JAt=s(D7e);PRr=r(JAt,"big_bird"),JAt.forEach(t),BRr=r(aIe," \u2014 "),RY=n(aIe,"A",{href:!0});var YAt=s(RY);IRr=r(YAt,"FlaxBigBirdForSequenceClassification"),YAt.forEach(t),qRr=r(aIe," (BigBird model)"),aIe.forEach(t),NRr=i(qe),VC=n(qe,"LI",{});var nIe=s(VC);G7e=n(nIe,"STRONG",{});var KAt=s(G7e);jRr=r(KAt,"distilbert"),KAt.forEach(t),DRr=r(nIe," \u2014 "),PY=n(nIe,"A",{href:!0});var ZAt=s(PY);GRr=r(ZAt,"FlaxDistilBertForSequenceClassification"),ZAt.forEach(t),ORr=r(nIe," (DistilBERT model)"),nIe.forEach(t),VRr=i(qe),XC=n(qe,"LI",{});var sIe=s(XC);O7e=n(sIe,"STRONG",{});var e6t=s(O7e);XRr=r(e6t,"electra"),e6t.forEach(t),zRr=r(sIe," \u2014 "),BY=n(sIe,"A",{href:!0});var o6t=s(BY);WRr=r(o6t,"FlaxElectraForSequenceClassification"),o6t.forEach(t),QRr=r(sIe," (ELECTRA model)"),sIe.forEach(t),HRr=i(qe),zC=n(qe,"LI",{});var lIe=s(zC);V7e=n(lIe,"STRONG",{});var r6t=s(V7e);URr=r(r6t,"mbart"),r6t.forEach(t),JRr=r(lIe," \u2014 "),IY=n(lIe,"A",{href:!0});var t6t=s(IY);YRr=r(t6t,"FlaxMBartForSequenceClassification"),t6t.forEach(t),KRr=r(lIe," (mBART model)"),lIe.forEach(t),ZRr=i(qe),WC=n(qe,"LI",{});var iIe=s(WC);X7e=n(iIe,"STRONG",{});var a6t=s(X7e);ePr=r(a6t,"roberta"),a6t.forEach(t),oPr=r(iIe," \u2014 "),qY=n(iIe,"A",{href:!0});var n6t=s(qY);rPr=r(n6t,"FlaxRobertaForSequenceClassification"),n6t.forEach(t),tPr=r(iIe," (RoBERTa model)"),iIe.forEach(t),aPr=i(qe),QC=n(qe,"LI",{});var dIe=s(QC);z7e=n(dIe,"STRONG",{});var s6t=s(z7e);nPr=r(s6t,"roformer"),s6t.forEach(t),sPr=r(dIe," \u2014 "),NY=n(dIe,"A",{href:!0});var l6t=s(NY);lPr=r(l6t,"FlaxRoFormerForSequenceClassification"),l6t.forEach(t),iPr=r(dIe," (RoFormer model)"),dIe.forEach(t),dPr=i(qe),HC=n(qe,"LI",{});var cIe=s(HC);W7e=n(cIe,"STRONG",{});var i6t=s(W7e);cPr=r(i6t,"xlm-roberta"),i6t.forEach(t),fPr=r(cIe," \u2014 "),jY=n(cIe,"A",{href:!0});var d6t=s(jY);mPr=r(d6t,"FlaxXLMRobertaForSequenceClassification"),d6t.forEach(t),gPr=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),qe.forEach(t),hPr=i(Yl),T(UC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),SNe=i(f),Wc=n(f,"H2",{class:!0});var jDe=s(Wc);JC=n(jDe,"A",{id:!0,class:!0,href:!0});var c6t=s(JC);Q7e=n(c6t,"SPAN",{});var f6t=s(Q7e);T(jx.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),pPr=i(jDe),H7e=n(jDe,"SPAN",{});var m6t=s(H7e);_Pr=r(m6t,"FlaxAutoModelForQuestionAnswering"),m6t.forEach(t),jDe.forEach(t),RNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(Dx.$$.fragment,Kl),uPr=i(Kl),Qc=n(Kl,"P",{});var hee=s(Qc);bPr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DY=n(hee,"A",{href:!0});var g6t=s(DY);vPr=r(g6t,"from_pretrained()"),g6t.forEach(t),FPr=r(hee," class method or the "),GY=n(hee,"A",{href:!0});var h6t=s(GY);TPr=r(h6t,"from_config()"),h6t.forEach(t),MPr=r(hee,` class
method.`),hee.forEach(t),EPr=i(Kl),Gx=n(Kl,"P",{});var DDe=s(Gx);CPr=r(DDe,"This class cannot be instantiated directly using "),U7e=n(DDe,"CODE",{});var p6t=s(U7e);wPr=r(p6t,"__init__()"),p6t.forEach(t),APr=r(DDe," (throws an error)."),DDe.forEach(t),yPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var UA=s(Qt);T(Ox.$$.fragment,UA),LPr=i(UA),J7e=n(UA,"P",{});var _6t=s(J7e);xPr=r(_6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_6t.forEach(t),$Pr=i(UA),Hc=n(UA,"P",{});var pee=s(Hc);kPr=r(pee,`Note:
Loading a model from its configuration file does `),Y7e=n(pee,"STRONG",{});var u6t=s(Y7e);SPr=r(u6t,"not"),u6t.forEach(t),RPr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(pee,"A",{href:!0});var b6t=s(OY);PPr=r(b6t,"from_pretrained()"),b6t.forEach(t),BPr=r(pee," to load the model weights."),pee.forEach(t),IPr=i(UA),T(YC.$$.fragment,UA),UA.forEach(t),qPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Vx.$$.fragment,Zl),NPr=i(Zl),K7e=n(Zl,"P",{});var v6t=s(K7e);jPr=r(v6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v6t.forEach(t),DPr=i(Zl),Fn=n(Zl,"P",{});var JA=s(Fn);GPr=r(JA,"The model class to instantiate is selected based on the "),Z7e=n(JA,"CODE",{});var F6t=s(Z7e);OPr=r(F6t,"model_type"),F6t.forEach(t),VPr=r(JA,` property of the config object (either
passed as an argument or loaded from `),eMe=n(JA,"CODE",{});var T6t=s(eMe);XPr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),zPr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(JA,"CODE",{});var M6t=s(oMe);WPr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),QPr=r(JA,":"),JA.forEach(t),HPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);KC=n(Ne,"LI",{});var fIe=s(KC);rMe=n(fIe,"STRONG",{});var E6t=s(rMe);UPr=r(E6t,"albert"),E6t.forEach(t),JPr=r(fIe," \u2014 "),VY=n(fIe,"A",{href:!0});var C6t=s(VY);YPr=r(C6t,"FlaxAlbertForQuestionAnswering"),C6t.forEach(t),KPr=r(fIe," (ALBERT model)"),fIe.forEach(t),ZPr=i(Ne),ZC=n(Ne,"LI",{});var mIe=s(ZC);tMe=n(mIe,"STRONG",{});var w6t=s(tMe);eBr=r(w6t,"bart"),w6t.forEach(t),oBr=r(mIe," \u2014 "),XY=n(mIe,"A",{href:!0});var A6t=s(XY);rBr=r(A6t,"FlaxBartForQuestionAnswering"),A6t.forEach(t),tBr=r(mIe," (BART model)"),mIe.forEach(t),aBr=i(Ne),ew=n(Ne,"LI",{});var gIe=s(ew);aMe=n(gIe,"STRONG",{});var y6t=s(aMe);nBr=r(y6t,"bert"),y6t.forEach(t),sBr=r(gIe," \u2014 "),zY=n(gIe,"A",{href:!0});var L6t=s(zY);lBr=r(L6t,"FlaxBertForQuestionAnswering"),L6t.forEach(t),iBr=r(gIe," (BERT model)"),gIe.forEach(t),dBr=i(Ne),ow=n(Ne,"LI",{});var hIe=s(ow);nMe=n(hIe,"STRONG",{});var x6t=s(nMe);cBr=r(x6t,"big_bird"),x6t.forEach(t),fBr=r(hIe," \u2014 "),WY=n(hIe,"A",{href:!0});var $6t=s(WY);mBr=r($6t,"FlaxBigBirdForQuestionAnswering"),$6t.forEach(t),gBr=r(hIe," (BigBird model)"),hIe.forEach(t),hBr=i(Ne),rw=n(Ne,"LI",{});var pIe=s(rw);sMe=n(pIe,"STRONG",{});var k6t=s(sMe);pBr=r(k6t,"distilbert"),k6t.forEach(t),_Br=r(pIe," \u2014 "),QY=n(pIe,"A",{href:!0});var S6t=s(QY);uBr=r(S6t,"FlaxDistilBertForQuestionAnswering"),S6t.forEach(t),bBr=r(pIe," (DistilBERT model)"),pIe.forEach(t),vBr=i(Ne),tw=n(Ne,"LI",{});var _Ie=s(tw);lMe=n(_Ie,"STRONG",{});var R6t=s(lMe);FBr=r(R6t,"electra"),R6t.forEach(t),TBr=r(_Ie," \u2014 "),HY=n(_Ie,"A",{href:!0});var P6t=s(HY);MBr=r(P6t,"FlaxElectraForQuestionAnswering"),P6t.forEach(t),EBr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),CBr=i(Ne),aw=n(Ne,"LI",{});var uIe=s(aw);iMe=n(uIe,"STRONG",{});var B6t=s(iMe);wBr=r(B6t,"mbart"),B6t.forEach(t),ABr=r(uIe," \u2014 "),UY=n(uIe,"A",{href:!0});var I6t=s(UY);yBr=r(I6t,"FlaxMBartForQuestionAnswering"),I6t.forEach(t),LBr=r(uIe," (mBART model)"),uIe.forEach(t),xBr=i(Ne),nw=n(Ne,"LI",{});var bIe=s(nw);dMe=n(bIe,"STRONG",{});var q6t=s(dMe);$Br=r(q6t,"roberta"),q6t.forEach(t),kBr=r(bIe," \u2014 "),JY=n(bIe,"A",{href:!0});var N6t=s(JY);SBr=r(N6t,"FlaxRobertaForQuestionAnswering"),N6t.forEach(t),RBr=r(bIe," (RoBERTa model)"),bIe.forEach(t),PBr=i(Ne),sw=n(Ne,"LI",{});var vIe=s(sw);cMe=n(vIe,"STRONG",{});var j6t=s(cMe);BBr=r(j6t,"roformer"),j6t.forEach(t),IBr=r(vIe," \u2014 "),YY=n(vIe,"A",{href:!0});var D6t=s(YY);qBr=r(D6t,"FlaxRoFormerForQuestionAnswering"),D6t.forEach(t),NBr=r(vIe," (RoFormer model)"),vIe.forEach(t),jBr=i(Ne),lw=n(Ne,"LI",{});var FIe=s(lw);fMe=n(FIe,"STRONG",{});var G6t=s(fMe);DBr=r(G6t,"xlm-roberta"),G6t.forEach(t),GBr=r(FIe," \u2014 "),KY=n(FIe,"A",{href:!0});var O6t=s(KY);OBr=r(O6t,"FlaxXLMRobertaForQuestionAnswering"),O6t.forEach(t),VBr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),Ne.forEach(t),XBr=i(Zl),T(iw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),PNe=i(f),Uc=n(f,"H2",{class:!0});var GDe=s(Uc);dw=n(GDe,"A",{id:!0,class:!0,href:!0});var V6t=s(dw);mMe=n(V6t,"SPAN",{});var X6t=s(mMe);T(Xx.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),zBr=i(GDe),gMe=n(GDe,"SPAN",{});var z6t=s(gMe);WBr=r(z6t,"FlaxAutoModelForTokenClassification"),z6t.forEach(t),GDe.forEach(t),BNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(zx.$$.fragment,ei),QBr=i(ei),Jc=n(ei,"P",{});var _ee=s(Jc);HBr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZY=n(_ee,"A",{href:!0});var W6t=s(ZY);UBr=r(W6t,"from_pretrained()"),W6t.forEach(t),JBr=r(_ee," class method or the "),eK=n(_ee,"A",{href:!0});var Q6t=s(eK);YBr=r(Q6t,"from_config()"),Q6t.forEach(t),KBr=r(_ee,` class
method.`),_ee.forEach(t),ZBr=i(ei),Wx=n(ei,"P",{});var ODe=s(Wx);eIr=r(ODe,"This class cannot be instantiated directly using "),hMe=n(ODe,"CODE",{});var H6t=s(hMe);oIr=r(H6t,"__init__()"),H6t.forEach(t),rIr=r(ODe," (throws an error)."),ODe.forEach(t),tIr=i(ei),Ht=n(ei,"DIV",{class:!0});var YA=s(Ht);T(Qx.$$.fragment,YA),aIr=i(YA),pMe=n(YA,"P",{});var U6t=s(pMe);nIr=r(U6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U6t.forEach(t),sIr=i(YA),Yc=n(YA,"P",{});var uee=s(Yc);lIr=r(uee,`Note:
Loading a model from its configuration file does `),_Me=n(uee,"STRONG",{});var J6t=s(_Me);iIr=r(J6t,"not"),J6t.forEach(t),dIr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(uee,"A",{href:!0});var Y6t=s(oK);cIr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),fIr=r(uee," to load the model weights."),uee.forEach(t),mIr=i(YA),T(cw.$$.fragment,YA),YA.forEach(t),gIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Hx.$$.fragment,oi),hIr=i(oi),uMe=n(oi,"P",{});var K6t=s(uMe);pIr=r(K6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K6t.forEach(t),_Ir=i(oi),Tn=n(oi,"P",{});var KA=s(Tn);uIr=r(KA,"The model class to instantiate is selected based on the "),bMe=n(KA,"CODE",{});var Z6t=s(bMe);bIr=r(Z6t,"model_type"),Z6t.forEach(t),vIr=r(KA,` property of the config object (either
passed as an argument or loaded from `),vMe=n(KA,"CODE",{});var eyt=s(vMe);FIr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),TIr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(KA,"CODE",{});var oyt=s(FMe);MIr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),EIr=r(KA,":"),KA.forEach(t),CIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);fw=n(Fo,"LI",{});var TIe=s(fw);TMe=n(TIe,"STRONG",{});var ryt=s(TMe);wIr=r(ryt,"albert"),ryt.forEach(t),AIr=r(TIe," \u2014 "),rK=n(TIe,"A",{href:!0});var tyt=s(rK);yIr=r(tyt,"FlaxAlbertForTokenClassification"),tyt.forEach(t),LIr=r(TIe," (ALBERT model)"),TIe.forEach(t),xIr=i(Fo),mw=n(Fo,"LI",{});var MIe=s(mw);MMe=n(MIe,"STRONG",{});var ayt=s(MMe);$Ir=r(ayt,"bert"),ayt.forEach(t),kIr=r(MIe," \u2014 "),tK=n(MIe,"A",{href:!0});var nyt=s(tK);SIr=r(nyt,"FlaxBertForTokenClassification"),nyt.forEach(t),RIr=r(MIe," (BERT model)"),MIe.forEach(t),PIr=i(Fo),gw=n(Fo,"LI",{});var EIe=s(gw);EMe=n(EIe,"STRONG",{});var syt=s(EMe);BIr=r(syt,"big_bird"),syt.forEach(t),IIr=r(EIe," \u2014 "),aK=n(EIe,"A",{href:!0});var lyt=s(aK);qIr=r(lyt,"FlaxBigBirdForTokenClassification"),lyt.forEach(t),NIr=r(EIe," (BigBird model)"),EIe.forEach(t),jIr=i(Fo),hw=n(Fo,"LI",{});var CIe=s(hw);CMe=n(CIe,"STRONG",{});var iyt=s(CMe);DIr=r(iyt,"distilbert"),iyt.forEach(t),GIr=r(CIe," \u2014 "),nK=n(CIe,"A",{href:!0});var dyt=s(nK);OIr=r(dyt,"FlaxDistilBertForTokenClassification"),dyt.forEach(t),VIr=r(CIe," (DistilBERT model)"),CIe.forEach(t),XIr=i(Fo),pw=n(Fo,"LI",{});var wIe=s(pw);wMe=n(wIe,"STRONG",{});var cyt=s(wMe);zIr=r(cyt,"electra"),cyt.forEach(t),WIr=r(wIe," \u2014 "),sK=n(wIe,"A",{href:!0});var fyt=s(sK);QIr=r(fyt,"FlaxElectraForTokenClassification"),fyt.forEach(t),HIr=r(wIe," (ELECTRA model)"),wIe.forEach(t),UIr=i(Fo),_w=n(Fo,"LI",{});var AIe=s(_w);AMe=n(AIe,"STRONG",{});var myt=s(AMe);JIr=r(myt,"roberta"),myt.forEach(t),YIr=r(AIe," \u2014 "),lK=n(AIe,"A",{href:!0});var gyt=s(lK);KIr=r(gyt,"FlaxRobertaForTokenClassification"),gyt.forEach(t),ZIr=r(AIe," (RoBERTa model)"),AIe.forEach(t),eqr=i(Fo),uw=n(Fo,"LI",{});var yIe=s(uw);yMe=n(yIe,"STRONG",{});var hyt=s(yMe);oqr=r(hyt,"roformer"),hyt.forEach(t),rqr=r(yIe," \u2014 "),iK=n(yIe,"A",{href:!0});var pyt=s(iK);tqr=r(pyt,"FlaxRoFormerForTokenClassification"),pyt.forEach(t),aqr=r(yIe," (RoFormer model)"),yIe.forEach(t),nqr=i(Fo),bw=n(Fo,"LI",{});var LIe=s(bw);LMe=n(LIe,"STRONG",{});var _yt=s(LMe);sqr=r(_yt,"xlm-roberta"),_yt.forEach(t),lqr=r(LIe," \u2014 "),dK=n(LIe,"A",{href:!0});var uyt=s(dK);iqr=r(uyt,"FlaxXLMRobertaForTokenClassification"),uyt.forEach(t),dqr=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),Fo.forEach(t),cqr=i(oi),T(vw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),INe=i(f),Kc=n(f,"H2",{class:!0});var VDe=s(Kc);Fw=n(VDe,"A",{id:!0,class:!0,href:!0});var byt=s(Fw);xMe=n(byt,"SPAN",{});var vyt=s(xMe);T(Ux.$$.fragment,vyt),vyt.forEach(t),byt.forEach(t),fqr=i(VDe),$Me=n(VDe,"SPAN",{});var Fyt=s($Me);mqr=r(Fyt,"FlaxAutoModelForMultipleChoice"),Fyt.forEach(t),VDe.forEach(t),qNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Jx.$$.fragment,ri),gqr=i(ri),Zc=n(ri,"P",{});var bee=s(Zc);hqr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cK=n(bee,"A",{href:!0});var Tyt=s(cK);pqr=r(Tyt,"from_pretrained()"),Tyt.forEach(t),_qr=r(bee," class method or the "),fK=n(bee,"A",{href:!0});var Myt=s(fK);uqr=r(Myt,"from_config()"),Myt.forEach(t),bqr=r(bee,` class
method.`),bee.forEach(t),vqr=i(ri),Yx=n(ri,"P",{});var XDe=s(Yx);Fqr=r(XDe,"This class cannot be instantiated directly using "),kMe=n(XDe,"CODE",{});var Eyt=s(kMe);Tqr=r(Eyt,"__init__()"),Eyt.forEach(t),Mqr=r(XDe," (throws an error)."),XDe.forEach(t),Eqr=i(ri),Ut=n(ri,"DIV",{class:!0});var ZA=s(Ut);T(Kx.$$.fragment,ZA),Cqr=i(ZA),SMe=n(ZA,"P",{});var Cyt=s(SMe);wqr=r(Cyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cyt.forEach(t),Aqr=i(ZA),ef=n(ZA,"P",{});var vee=s(ef);yqr=r(vee,`Note:
Loading a model from its configuration file does `),RMe=n(vee,"STRONG",{});var wyt=s(RMe);Lqr=r(wyt,"not"),wyt.forEach(t),xqr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(vee,"A",{href:!0});var Ayt=s(mK);$qr=r(Ayt,"from_pretrained()"),Ayt.forEach(t),kqr=r(vee," to load the model weights."),vee.forEach(t),Sqr=i(ZA),T(Tw.$$.fragment,ZA),ZA.forEach(t),Rqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Zx.$$.fragment,ti),Pqr=i(ti),PMe=n(ti,"P",{});var yyt=s(PMe);Bqr=r(yyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yyt.forEach(t),Iqr=i(ti),Mn=n(ti,"P",{});var e6=s(Mn);qqr=r(e6,"The model class to instantiate is selected based on the "),BMe=n(e6,"CODE",{});var Lyt=s(BMe);Nqr=r(Lyt,"model_type"),Lyt.forEach(t),jqr=r(e6,` property of the config object (either
passed as an argument or loaded from `),IMe=n(e6,"CODE",{});var xyt=s(IMe);Dqr=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),Gqr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(e6,"CODE",{});var $yt=s(qMe);Oqr=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),Vqr=r(e6,":"),e6.forEach(t),Xqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);Mw=n(To,"LI",{});var xIe=s(Mw);NMe=n(xIe,"STRONG",{});var kyt=s(NMe);zqr=r(kyt,"albert"),kyt.forEach(t),Wqr=r(xIe," \u2014 "),gK=n(xIe,"A",{href:!0});var Syt=s(gK);Qqr=r(Syt,"FlaxAlbertForMultipleChoice"),Syt.forEach(t),Hqr=r(xIe," (ALBERT model)"),xIe.forEach(t),Uqr=i(To),Ew=n(To,"LI",{});var $Ie=s(Ew);jMe=n($Ie,"STRONG",{});var Ryt=s(jMe);Jqr=r(Ryt,"bert"),Ryt.forEach(t),Yqr=r($Ie," \u2014 "),hK=n($Ie,"A",{href:!0});var Pyt=s(hK);Kqr=r(Pyt,"FlaxBertForMultipleChoice"),Pyt.forEach(t),Zqr=r($Ie," (BERT model)"),$Ie.forEach(t),eNr=i(To),Cw=n(To,"LI",{});var kIe=s(Cw);DMe=n(kIe,"STRONG",{});var Byt=s(DMe);oNr=r(Byt,"big_bird"),Byt.forEach(t),rNr=r(kIe," \u2014 "),pK=n(kIe,"A",{href:!0});var Iyt=s(pK);tNr=r(Iyt,"FlaxBigBirdForMultipleChoice"),Iyt.forEach(t),aNr=r(kIe," (BigBird model)"),kIe.forEach(t),nNr=i(To),ww=n(To,"LI",{});var SIe=s(ww);GMe=n(SIe,"STRONG",{});var qyt=s(GMe);sNr=r(qyt,"distilbert"),qyt.forEach(t),lNr=r(SIe," \u2014 "),_K=n(SIe,"A",{href:!0});var Nyt=s(_K);iNr=r(Nyt,"FlaxDistilBertForMultipleChoice"),Nyt.forEach(t),dNr=r(SIe," (DistilBERT model)"),SIe.forEach(t),cNr=i(To),Aw=n(To,"LI",{});var RIe=s(Aw);OMe=n(RIe,"STRONG",{});var jyt=s(OMe);fNr=r(jyt,"electra"),jyt.forEach(t),mNr=r(RIe," \u2014 "),uK=n(RIe,"A",{href:!0});var Dyt=s(uK);gNr=r(Dyt,"FlaxElectraForMultipleChoice"),Dyt.forEach(t),hNr=r(RIe," (ELECTRA model)"),RIe.forEach(t),pNr=i(To),yw=n(To,"LI",{});var PIe=s(yw);VMe=n(PIe,"STRONG",{});var Gyt=s(VMe);_Nr=r(Gyt,"roberta"),Gyt.forEach(t),uNr=r(PIe," \u2014 "),bK=n(PIe,"A",{href:!0});var Oyt=s(bK);bNr=r(Oyt,"FlaxRobertaForMultipleChoice"),Oyt.forEach(t),vNr=r(PIe," (RoBERTa model)"),PIe.forEach(t),FNr=i(To),Lw=n(To,"LI",{});var BIe=s(Lw);XMe=n(BIe,"STRONG",{});var Vyt=s(XMe);TNr=r(Vyt,"roformer"),Vyt.forEach(t),MNr=r(BIe," \u2014 "),vK=n(BIe,"A",{href:!0});var Xyt=s(vK);ENr=r(Xyt,"FlaxRoFormerForMultipleChoice"),Xyt.forEach(t),CNr=r(BIe," (RoFormer model)"),BIe.forEach(t),wNr=i(To),xw=n(To,"LI",{});var IIe=s(xw);zMe=n(IIe,"STRONG",{});var zyt=s(zMe);ANr=r(zyt,"xlm-roberta"),zyt.forEach(t),yNr=r(IIe," \u2014 "),FK=n(IIe,"A",{href:!0});var Wyt=s(FK);LNr=r(Wyt,"FlaxXLMRobertaForMultipleChoice"),Wyt.forEach(t),xNr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),To.forEach(t),$Nr=i(ti),T($w.$$.fragment,ti),ti.forEach(t),ri.forEach(t),NNe=i(f),of=n(f,"H2",{class:!0});var zDe=s(of);kw=n(zDe,"A",{id:!0,class:!0,href:!0});var Qyt=s(kw);WMe=n(Qyt,"SPAN",{});var Hyt=s(WMe);T(e9.$$.fragment,Hyt),Hyt.forEach(t),Qyt.forEach(t),kNr=i(zDe),QMe=n(zDe,"SPAN",{});var Uyt=s(QMe);SNr=r(Uyt,"FlaxAutoModelForNextSentencePrediction"),Uyt.forEach(t),zDe.forEach(t),jNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(o9.$$.fragment,ai),RNr=i(ai),rf=n(ai,"P",{});var Fee=s(rf);PNr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TK=n(Fee,"A",{href:!0});var Jyt=s(TK);BNr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),INr=r(Fee," class method or the "),MK=n(Fee,"A",{href:!0});var Yyt=s(MK);qNr=r(Yyt,"from_config()"),Yyt.forEach(t),NNr=r(Fee,` class
method.`),Fee.forEach(t),jNr=i(ai),r9=n(ai,"P",{});var WDe=s(r9);DNr=r(WDe,"This class cannot be instantiated directly using "),HMe=n(WDe,"CODE",{});var Kyt=s(HMe);GNr=r(Kyt,"__init__()"),Kyt.forEach(t),ONr=r(WDe," (throws an error)."),WDe.forEach(t),VNr=i(ai),Jt=n(ai,"DIV",{class:!0});var o6=s(Jt);T(t9.$$.fragment,o6),XNr=i(o6),UMe=n(o6,"P",{});var Zyt=s(UMe);zNr=r(Zyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zyt.forEach(t),WNr=i(o6),tf=n(o6,"P",{});var Tee=s(tf);QNr=r(Tee,`Note:
Loading a model from its configuration file does `),JMe=n(Tee,"STRONG",{});var eLt=s(JMe);HNr=r(eLt,"not"),eLt.forEach(t),UNr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(Tee,"A",{href:!0});var oLt=s(EK);JNr=r(oLt,"from_pretrained()"),oLt.forEach(t),YNr=r(Tee," to load the model weights."),Tee.forEach(t),KNr=i(o6),T(Sw.$$.fragment,o6),o6.forEach(t),ZNr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(a9.$$.fragment,ni),ejr=i(ni),YMe=n(ni,"P",{});var rLt=s(YMe);ojr=r(rLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rLt.forEach(t),rjr=i(ni),En=n(ni,"P",{});var r6=s(En);tjr=r(r6,"The model class to instantiate is selected based on the "),KMe=n(r6,"CODE",{});var tLt=s(KMe);ajr=r(tLt,"model_type"),tLt.forEach(t),njr=r(r6,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(r6,"CODE",{});var aLt=s(ZMe);sjr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),ljr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(r6,"CODE",{});var nLt=s(e4e);ijr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),djr=r(r6,":"),r6.forEach(t),cjr=i(ni),o4e=n(ni,"UL",{});var sLt=s(o4e);Rw=n(sLt,"LI",{});var qIe=s(Rw);r4e=n(qIe,"STRONG",{});var lLt=s(r4e);fjr=r(lLt,"bert"),lLt.forEach(t),mjr=r(qIe," \u2014 "),CK=n(qIe,"A",{href:!0});var iLt=s(CK);gjr=r(iLt,"FlaxBertForNextSentencePrediction"),iLt.forEach(t),hjr=r(qIe," (BERT model)"),qIe.forEach(t),sLt.forEach(t),pjr=i(ni),T(Pw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),DNe=i(f),af=n(f,"H2",{class:!0});var QDe=s(af);Bw=n(QDe,"A",{id:!0,class:!0,href:!0});var dLt=s(Bw);t4e=n(dLt,"SPAN",{});var cLt=s(t4e);T(n9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),_jr=i(QDe),a4e=n(QDe,"SPAN",{});var fLt=s(a4e);ujr=r(fLt,"FlaxAutoModelForImageClassification"),fLt.forEach(t),QDe.forEach(t),GNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(s9.$$.fragment,si),bjr=i(si),nf=n(si,"P",{});var Mee=s(nf);vjr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wK=n(Mee,"A",{href:!0});var mLt=s(wK);Fjr=r(mLt,"from_pretrained()"),mLt.forEach(t),Tjr=r(Mee," class method or the "),AK=n(Mee,"A",{href:!0});var gLt=s(AK);Mjr=r(gLt,"from_config()"),gLt.forEach(t),Ejr=r(Mee,` class
method.`),Mee.forEach(t),Cjr=i(si),l9=n(si,"P",{});var HDe=s(l9);wjr=r(HDe,"This class cannot be instantiated directly using "),n4e=n(HDe,"CODE",{});var hLt=s(n4e);Ajr=r(hLt,"__init__()"),hLt.forEach(t),yjr=r(HDe," (throws an error)."),HDe.forEach(t),Ljr=i(si),Yt=n(si,"DIV",{class:!0});var t6=s(Yt);T(i9.$$.fragment,t6),xjr=i(t6),s4e=n(t6,"P",{});var pLt=s(s4e);$jr=r(pLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pLt.forEach(t),kjr=i(t6),sf=n(t6,"P",{});var Eee=s(sf);Sjr=r(Eee,`Note:
Loading a model from its configuration file does `),l4e=n(Eee,"STRONG",{});var _Lt=s(l4e);Rjr=r(_Lt,"not"),_Lt.forEach(t),Pjr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Eee,"A",{href:!0});var uLt=s(yK);Bjr=r(uLt,"from_pretrained()"),uLt.forEach(t),Ijr=r(Eee," to load the model weights."),Eee.forEach(t),qjr=i(t6),T(Iw.$$.fragment,t6),t6.forEach(t),Njr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(d9.$$.fragment,li),jjr=i(li),i4e=n(li,"P",{});var bLt=s(i4e);Djr=r(bLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bLt.forEach(t),Gjr=i(li),Cn=n(li,"P",{});var a6=s(Cn);Ojr=r(a6,"The model class to instantiate is selected based on the "),d4e=n(a6,"CODE",{});var vLt=s(d4e);Vjr=r(vLt,"model_type"),vLt.forEach(t),Xjr=r(a6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(a6,"CODE",{});var FLt=s(c4e);zjr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),Wjr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(a6,"CODE",{});var TLt=s(f4e);Qjr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),Hjr=r(a6,":"),a6.forEach(t),Ujr=i(li),c9=n(li,"UL",{});var UDe=s(c9);qw=n(UDe,"LI",{});var NIe=s(qw);m4e=n(NIe,"STRONG",{});var MLt=s(m4e);Jjr=r(MLt,"beit"),MLt.forEach(t),Yjr=r(NIe," \u2014 "),LK=n(NIe,"A",{href:!0});var ELt=s(LK);Kjr=r(ELt,"FlaxBeitForImageClassification"),ELt.forEach(t),Zjr=r(NIe," (BEiT model)"),NIe.forEach(t),eDr=i(UDe),Nw=n(UDe,"LI",{});var jIe=s(Nw);g4e=n(jIe,"STRONG",{});var CLt=s(g4e);oDr=r(CLt,"vit"),CLt.forEach(t),rDr=r(jIe," \u2014 "),xK=n(jIe,"A",{href:!0});var wLt=s(xK);tDr=r(wLt,"FlaxViTForImageClassification"),wLt.forEach(t),aDr=r(jIe," (ViT model)"),jIe.forEach(t),UDe.forEach(t),nDr=i(li),T(jw.$$.fragment,li),li.forEach(t),si.forEach(t),ONe=i(f),lf=n(f,"H2",{class:!0});var JDe=s(lf);Dw=n(JDe,"A",{id:!0,class:!0,href:!0});var ALt=s(Dw);h4e=n(ALt,"SPAN",{});var yLt=s(h4e);T(f9.$$.fragment,yLt),yLt.forEach(t),ALt.forEach(t),sDr=i(JDe),p4e=n(JDe,"SPAN",{});var LLt=s(p4e);lDr=r(LLt,"FlaxAutoModelForVision2Seq"),LLt.forEach(t),JDe.forEach(t),VNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(m9.$$.fragment,ii),iDr=i(ii),df=n(ii,"P",{});var Cee=s(df);dDr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$K=n(Cee,"A",{href:!0});var xLt=s($K);cDr=r(xLt,"from_pretrained()"),xLt.forEach(t),fDr=r(Cee," class method or the "),kK=n(Cee,"A",{href:!0});var $Lt=s(kK);mDr=r($Lt,"from_config()"),$Lt.forEach(t),gDr=r(Cee,` class
method.`),Cee.forEach(t),hDr=i(ii),g9=n(ii,"P",{});var YDe=s(g9);pDr=r(YDe,"This class cannot be instantiated directly using "),_4e=n(YDe,"CODE",{});var kLt=s(_4e);_Dr=r(kLt,"__init__()"),kLt.forEach(t),uDr=r(YDe," (throws an error)."),YDe.forEach(t),bDr=i(ii),Kt=n(ii,"DIV",{class:!0});var n6=s(Kt);T(h9.$$.fragment,n6),vDr=i(n6),u4e=n(n6,"P",{});var SLt=s(u4e);FDr=r(SLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SLt.forEach(t),TDr=i(n6),cf=n(n6,"P",{});var wee=s(cf);MDr=r(wee,`Note:
Loading a model from its configuration file does `),b4e=n(wee,"STRONG",{});var RLt=s(b4e);EDr=r(RLt,"not"),RLt.forEach(t),CDr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(wee,"A",{href:!0});var PLt=s(SK);wDr=r(PLt,"from_pretrained()"),PLt.forEach(t),ADr=r(wee," to load the model weights."),wee.forEach(t),yDr=i(n6),T(Gw.$$.fragment,n6),n6.forEach(t),LDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(p9.$$.fragment,di),xDr=i(di),v4e=n(di,"P",{});var BLt=s(v4e);$Dr=r(BLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BLt.forEach(t),kDr=i(di),wn=n(di,"P",{});var s6=s(wn);SDr=r(s6,"The model class to instantiate is selected based on the "),F4e=n(s6,"CODE",{});var ILt=s(F4e);RDr=r(ILt,"model_type"),ILt.forEach(t),PDr=r(s6,` property of the config object (either
passed as an argument or loaded from `),T4e=n(s6,"CODE",{});var qLt=s(T4e);BDr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),IDr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n(s6,"CODE",{});var NLt=s(M4e);qDr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),NDr=r(s6,":"),s6.forEach(t),jDr=i(di),E4e=n(di,"UL",{});var jLt=s(E4e);Ow=n(jLt,"LI",{});var DIe=s(Ow);C4e=n(DIe,"STRONG",{});var DLt=s(C4e);DDr=r(DLt,"vision-encoder-decoder"),DLt.forEach(t),GDr=r(DIe," \u2014 "),RK=n(DIe,"A",{href:!0});var GLt=s(RK);ODr=r(GLt,"FlaxVisionEncoderDecoderModel"),GLt.forEach(t),VDr=r(DIe," (Vision Encoder decoder model)"),DIe.forEach(t),jLt.forEach(t),XDr=i(di),T(Vw.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(zxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(P$,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(B$,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertConfig"),c(I$,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartConfig"),c(q$,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitConfig"),c(N$,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertConfig"),c(j$,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(D$,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdConfig"),c(G$,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(O$,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(V$,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(X$,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertConfig"),c(z$,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineConfig"),c(W$,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPConfig"),c(Q$,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertConfig"),c(H$,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextConfig"),c(U$,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLConfig"),c(J$,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtConfig"),c(Y$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(K$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Z$,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ek,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaConfig"),c(ok,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(rk,"href","/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(tk,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTConfig"),c(ak,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrConfig"),c(nk,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertConfig"),c(sk,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRConfig"),c(lk,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTConfig"),c(ik,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraConfig"),c(dk,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ck,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertConfig"),c(fk,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaConfig"),c(mk,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetConfig"),c(gk,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTConfig"),c(hk,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelConfig"),c(pk,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNConfig"),c(_k,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Config"),c(uk,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(bk,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJConfig"),c(vk,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertConfig"),c(Fk,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertConfig"),c(Tk,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Mk,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ek,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ck,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDConfig"),c(wk,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerConfig"),c(Ak,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeConfig"),c(yk,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertConfig"),c(Lk,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Config"),c(xk,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianConfig"),c($k,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(kk,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartConfig"),c(Sk,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Rk,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Pk,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetConfig"),c(Bk,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Config"),c(Ik,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(qk,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Nk,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTConfig"),c(jk,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusConfig"),c(Dk,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Gk,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartConfig"),c(Ok,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Vk,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Xk,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(zk,"href","/docs/transformers/pr_17253/en/model_doc/rag#transformers.RagConfig"),c(Wk,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmConfig"),c(Qk,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerConfig"),c(Hk,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetConfig"),c(Uk,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertConfig"),c(Jk,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetConfig"),c(Yk,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertConfig"),c(Kk,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaConfig"),c(Zk,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerConfig"),c(eS,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerConfig"),c(oS,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWConfig"),c(rS,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDConfig"),c(tS,"href","/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(aS,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(nS,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(sS,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterConfig"),c(lS,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(iS,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinConfig"),c(dS,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Config"),c(cS,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasConfig"),c(fS,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(mS,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRConfig"),c(gS,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(hS,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(pS,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanConfig"),c(_S,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltConfig"),c(uS,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(bS,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(vS,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FS,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTConfig"),c(TS,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MS,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ES,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(CS,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMConfig"),c(wS,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMConfig"),c(AS,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMConfig"),c(yS,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LS,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(xS,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c($S,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetConfig"),c(kS,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosConfig"),c(SS,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(RS,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PS,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(BS,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(IS,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartTokenizer"),c(qS,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartTokenizerFast"),c(NS,"href","/docs/transformers/pr_17253/en/model_doc/barthez#transformers.BarthezTokenizer"),c(jS,"href","/docs/transformers/pr_17253/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(DS,"href","/docs/transformers/pr_17253/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(GS,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(OS,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XS,"href","/docs/transformers/pr_17253/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(zS,"href","/docs/transformers/pr_17253/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(WS,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QS,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(HS,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(US,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(YS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(KS,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ZS,"href","/docs/transformers/pr_17253/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(eR,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertTokenizer"),c(oR,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineTokenizer"),c(tR,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPTokenizer"),c(aR,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nR,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sR,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17253/en/model_doc/cpm#transformers.CpmTokenizer"),c(iR,"href","/docs/transformers/pr_17253/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dR,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mR,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gR,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hR,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(pR,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uR,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vR,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FR,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraTokenizer"),c(TR,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MR,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ER,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetTokenizer"),c(CR,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wR,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AR,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelTokenizer"),c(yR,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(LR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($R,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RR,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PR,"href","/docs/transformers/pr_17253/en/model_doc/herbert#transformers.HerbertTokenizer"),c(BR,"href","/docs/transformers/pr_17253/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NR,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(DR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(GR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(OR,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(XR,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(zR,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDTokenizer"),c(WR,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDTokenizerFast"),c(QR,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HR,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(UR,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeTokenizer"),c(JR,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(YR,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(ZR,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianTokenizer"),c(eP,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartTokenizer"),c(oP,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(rP,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(tP,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(aP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(nP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17253/en/model_doc/mluke#transformers.MLukeTokenizer"),c(lP,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(iP,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(cP,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(fP,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5Tokenizer"),c(mP,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5TokenizerFast"),c(gP,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(hP,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(_P,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(uP,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vP,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FP,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(TP,"href","/docs/transformers/pr_17253/en/model_doc/phobert#transformers.PhobertTokenizer"),c(MP,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartTokenizer"),c(EP,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(CP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(wP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17253/en/model_doc/rag#transformers.RagTokenizer"),c(yP,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmTokenizer"),c(LP,"href","/docs/transformers/pr_17253/en/model_doc/realm#transformers.RealmTokenizerFast"),c(xP,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerTokenizer"),c($P,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(kP,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertTokenizer"),c(SP,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PP,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IP,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qP,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NP,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(jP,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(DP,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(GP,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterTokenizer"),c(OP,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(VP,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(XP,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasTokenizer"),c(HP,"href","/docs/transformers/pr_17253/en/model_doc/tapex#transformers.TapexTokenizer"),c(UP,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(JP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizer"),c(YP,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZP,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oB,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rB,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tB,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMTokenizer"),c(aB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cB,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fB,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(gB,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hB,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c($B,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoProcessor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(OB,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPProcessor"),c(VB,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XB,"href","/docs/transformers/pr_17253/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(HB,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(UB,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRProcessor"),c(JB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltProcessor"),c(ZB,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(eI,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"id","transformers.AutoModel"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(tI,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aI,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nI,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sI,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertModel"),c(lI,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartModel"),c(iI,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitModel"),c(dI,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertModel"),c(cI,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(fI,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdModel"),c(mI,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gI,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hI,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(pI,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertModel"),c(_I,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineModel"),c(uI,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.CLIPModel"),c(bI,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertModel"),c(vI,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextModel"),c(FI,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLModel"),c(TI,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtModel"),c(MI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CI,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wI,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaModel"),c(AI,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(yI,"href","/docs/transformers/pr_17253/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LI,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTModel"),c(xI,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrModel"),c($I,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertModel"),c(kI,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SI,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTModel"),c(RI,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraModel"),c(PI,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertModel"),c(BI,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaModel"),c(II,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetModel"),c(qI,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTModel"),c(NI,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelModel"),c(jI,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DI,"href","/docs/transformers/pr_17253/en/model_doc/glpn#transformers.GLPNModel"),c(GI,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2Model"),c(OI,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VI,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJModel"),c(XI,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertModel"),c(zI,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertModel"),c(WI,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(QI,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(HI,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(UI,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDModel"),c(JI,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerModel"),c(YI,"href","/docs/transformers/pr_17253/en/model_doc/luke#transformers.LukeModel"),c(KI,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertModel"),c(ZI,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100Model"),c(eq,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianModel"),c(oq,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerModel"),c(rq,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartModel"),c(tq,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aq,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nq,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetModel"),c(sq,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5Model"),c(lq,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerModel"),c(iq,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(dq,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTModel"),c(cq,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusModel"),c(fq,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverModel"),c(mq,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartModel"),c(gq,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hq,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pq,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_q,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModel"),c(uq,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetModel"),c(bq,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertModel"),c(vq,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetModel"),c(Fq,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel"),c(Tq,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaModel"),c(Mq,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerModel"),c(Eq,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerModel"),c(Cq,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWModel"),c(wq,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDModel"),c(Aq,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yq,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterModel"),c(Lq,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(xq,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinModel"),c($q,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5Model"),c(kq,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasModel"),c(Sq,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rq,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bq,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanModel"),c(Iq,"href","/docs/transformers/pr_17253/en/model_doc/vilt#transformers.ViltModel"),c(qq,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nq,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jq,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTModel"),c(Dq,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gq,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oq,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vq,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMModel"),c(Xq,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMModel"),c(zq,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMModel"),c(Wq,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qq,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hq,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uq,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetModel"),c(Jq,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosModel"),c(Yq,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForPreTraining"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Kq,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oN,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rN,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tN,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForPreTraining"),c(aN,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nN,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lN,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iN,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dN,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cN,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fN,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mN,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gN,"href","/docs/transformers/pr_17253/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hN,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pN,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uN,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bN,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FN,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TN,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MN,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EN,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CN,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wN,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AN,"href","/docs/transformers/pr_17253/en/model_doc/retribert#transformers.RetriBertModel"),c(yN,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LN,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($N,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kN,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SN,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RN,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(PN,"href","/docs/transformers/pr_17253/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(BN,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(IN,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qN,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(NN,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jN,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GN,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForCausalLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(ON,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForCausalLM"),c(WN,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertLMHeadModel"),c(QN,"href","/docs/transformers/pr_17253/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(HN,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(UN,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(JN,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(YN,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(KN,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ZN,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ej,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oj,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rj,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tj,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aj,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nj,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianForCausalLM"),c(sj,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lj,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ij,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dj,"href","/docs/transformers/pr_17253/en/model_doc/opt#transformers.OPTForCausalLM"),c(cj,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fj,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mj,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gj,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hj,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pj,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_j,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uj,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bj,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vj,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17253/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Tj,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Mj,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Cj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wj,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Aj,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForMaskedLM"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(yj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xj,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($j,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qj,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jj,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aD,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sD,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lD,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dD,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForSeq2SeqLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(cD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gD,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bD,"href","/docs/transformers/pr_17253/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17253/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.MarianMTModel"),c(MD,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17253/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17253/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForSequenceClassification"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(xD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($D,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kD,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SD,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17253/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cb,"id","transformers.AutoModelForMultipleChoice"),c(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(CG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AG,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yG,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c($G,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.AutoModelForNextSentencePrediction"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sO,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lO,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iO,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dO,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.AutoModelForTokenClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(_O,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bO,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FO,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TO,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MO,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CO,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AO,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(yO,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(LO,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($O,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(SO,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(BO,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(IO,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(jO,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(DO,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OO,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(VO,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(XO,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(zO,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.AutoModelForQuestionAnswering"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17253/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17253/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(dV,"href","/docs/transformers/pr_17253/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17253/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17253/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17253/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17253/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17253/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17253/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17253/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17253/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($V,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(RV,"href","/docs/transformers/pr_17253/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForImageClassification"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(NV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForImageClassification"),c(OV,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VV,"href","/docs/transformers/pr_17253/en/model_doc/cvt#transformers.CvtForImageClassification"),c(XV,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zV,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassification"),c(WV,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QV,"href","/docs/transformers/pr_17253/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(HV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(UV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(JV,"href","/docs/transformers/pr_17253/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(YV,"href","/docs/transformers/pr_17253/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(KV,"href","/docs/transformers/pr_17253/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(ZV,"href","/docs/transformers/pr_17253/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eX,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oX,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForImageClassification"),c(rX,"href","/docs/transformers/pr_17253/en/model_doc/van#transformers.VanForImageClassification"),c(tX,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.AutoModelForVision2Seq"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(aX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForAudioClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.AutoModelForAudioFrameClassification"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(FX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(yX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForCTC"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SX,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.HubertForCTC"),c(RX,"href","/docs/transformers/pr_17253/en/model_doc/sew#transformers.SEWForCTC"),c(PX,"href","/docs/transformers/pr_17253/en/model_doc/sew-d#transformers.SEWDForCTC"),c(BX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(jX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17253/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(XX,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.AutoModelForAudioXVector"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(zX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(UX,"href","/docs/transformers/pr_17253/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(JX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(YX,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(KX,"href","/docs/transformers/pr_17253/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForMaskedImageModeling"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17253/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(tz,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(az,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForObjectDetection"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(nz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForObjectDetection"),c(dz,"href","/docs/transformers/pr_17253/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForImageSegmentation"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17253/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForSemanticSegmentation"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(bz,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(vz,"href","/docs/transformers/pr_17253/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Fz,"href","/docs/transformers/pr_17253/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForInstanceSegmentation"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17253/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.TFAutoModel"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertModel"),c(xz,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartModel"),c($z,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertModel"),c(kz,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Sz,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Rz,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertModel"),c(Pz,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.TFCLIPModel"),c(Bz,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertModel"),c(Iz,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextModel"),c(qz,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Nz,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(jz,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaModel"),c(Dz,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Gz,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Oz,"href","/docs/transformers/pr_17253/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Vz,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraModel"),c(Xz,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(zz,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelModel"),c(Wz,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Qz,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Hz,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJModel"),c(Uz,"href","/docs/transformers/pr_17253/en/model_doc/hubert#transformers.TFHubertModel"),c(Jz,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Yz,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDModel"),c(Kz,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerModel"),c(Zz,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertModel"),c(eW,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianModel"),c(oW,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartModel"),c(rW,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(tW,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetModel"),c(aW,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5Model"),c(nW,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(sW,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lW,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertModel"),c(iW,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaModel"),c(dW,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cW,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fW,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.TFSwinModel"),c(mW,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5Model"),c(gW,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasModel"),c(hW,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pW,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTModel"),c(_W,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uW,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bW,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMModel"),c(vW,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FW,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.TFAutoModelForPreTraining"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wW,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForPreTraining"),c(yW,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LW,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xW,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($W,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kW,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SW,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RW,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PW,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BW,"href","/docs/transformers/pr_17253/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IW,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(qW,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NW,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jW,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DW,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GW,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OW,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VW,"href","/docs/transformers/pr_17253/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XW,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zW,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(WW,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.TFAutoModelForCausalLM"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YW,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KW,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eQ,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oQ,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(tQ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(aQ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(nQ,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.TFAutoModelForImageClassification"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17253/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mQ,"href","/docs/transformers/pr_17253/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(gQ,"href","/docs/transformers/pr_17253/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(hQ,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.TFAutoModelForMaskedLM"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Q,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zQ,"href","/docs/transformers/pr_17253/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.TFMarianMTModel"),c(QQ,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForSequenceClassification"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(YQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17253/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17253/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17253/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForMultipleChoice"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($H,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(WH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(JH,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(YH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17253/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForTokenClassification"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(oU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(lU,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(dU,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(cU,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(mU,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(hU,"href","/docs/transformers/pr_17253/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(pU,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_U,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(bU,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(FU,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(TU,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(MU,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(EU,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForQuestionAnswering"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17253/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17253/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17253/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17253/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17253/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IU,"href","/docs/transformers/pr_17253/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17253/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17253/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17253/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17253/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17253/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zU,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17253/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForVision2Seq"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17253/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.FlaxAutoModel"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartModel"),c(sJ,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitModel"),c(lJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertModel"),c(iJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dJ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cJ,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fJ,"href","/docs/transformers/pr_17253/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mJ,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraModel"),c(hJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_J,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(uJ,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianModel"),c(bJ,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vJ,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5Model"),c(FJ,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(TJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(MJ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(EJ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5Model"),c(CJ,"href","/docs/transformers/pr_17253/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(wJ,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTModel"),c(AJ,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(yJ,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(LJ,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.FlaxAutoModelForCausalLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(RJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(PJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(BJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(IJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(qJ,"href","/docs/transformers/pr_17253/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NJ,"href","/docs/transformers/pr_17253/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(jJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DJ,"href","/docs/transformers/pr_17253/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForPreTraining"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zJ,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QJ,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HJ,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UJ,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17253/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForMaskedLM"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gY,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17253/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17253/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MY,"href","/docs/transformers/pr_17253/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17253/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17253/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17253/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17253/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17253/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForTokenClassification"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tK,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nK,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lK,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iK,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dK,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17253/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17253/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17253/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17253/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17253/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17253/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17253/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(TK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_17253/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForImageClassification"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(wK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17253/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xK,"href","/docs/transformers/pr_17253/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c($K,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17253/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17253/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,l6),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,i6),e(We,Ln),e(We,xn),e(xn,d6),e(We,hi),e(We,$n),e($n,c6),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,L$),e(Ae,_i),e(_i,x$),e(Ae,$$),b(f,Eo,u),b(f,wa,u),e(wa,k$),e(wa,uf),e(uf,S$),e(wa,KDe),b(f,GIe,u),b(f,ui,u),e(ui,bf),e(bf,Aee),M(f6,Aee,null),e(ui,ZDe),e(ui,yee),e(yee,eGe),b(f,OIe,u),b(f,kn,u),e(kn,oGe),e(kn,Lee),e(Lee,rGe),e(kn,tGe),e(kn,xee),e(xee,aGe),e(kn,nGe),b(f,VIe,u),M(m6,f,u),b(f,XIe,u),b(f,R$,u),e(R$,sGe),b(f,zIe,u),M(vf,f,u),b(f,WIe,u),b(f,bi,u),e(bi,Ff),e(Ff,$ee),M(g6,$ee,null),e(bi,lGe),e(bi,kee),e(kee,iGe),b(f,QIe,u),b(f,Co,u),M(h6,Co,null),e(Co,dGe),e(Co,p6),e(p6,cGe),e(p6,P$),e(P$,fGe),e(p6,mGe),e(Co,gGe),e(Co,_6),e(_6,hGe),e(_6,See),e(See,pGe),e(_6,_Ge),e(Co,uGe),e(Co,Er),M(u6,Er,null),e(Er,bGe),e(Er,Ree),e(Ree,vGe),e(Er,FGe),e(Er,vi),e(vi,TGe),e(vi,Pee),e(Pee,MGe),e(vi,EGe),e(vi,Bee),e(Bee,CGe),e(vi,wGe),e(Er,AGe),e(Er,A),e(A,Tf),e(Tf,Iee),e(Iee,yGe),e(Tf,LGe),e(Tf,B$),e(B$,xGe),e(Tf,$Ge),e(A,kGe),e(A,Mf),e(Mf,qee),e(qee,SGe),e(Mf,RGe),e(Mf,I$),e(I$,PGe),e(Mf,BGe),e(A,IGe),e(A,Ef),e(Ef,Nee),e(Nee,qGe),e(Ef,NGe),e(Ef,q$),e(q$,jGe),e(Ef,DGe),e(A,GGe),e(A,Cf),e(Cf,jee),e(jee,OGe),e(Cf,VGe),e(Cf,N$),e(N$,XGe),e(Cf,zGe),e(A,WGe),e(A,wf),e(wf,Dee),e(Dee,QGe),e(wf,HGe),e(wf,j$),e(j$,UGe),e(wf,JGe),e(A,YGe),e(A,Af),e(Af,Gee),e(Gee,KGe),e(Af,ZGe),e(Af,D$),e(D$,eOe),e(Af,oOe),e(A,rOe),e(A,yf),e(yf,Oee),e(Oee,tOe),e(yf,aOe),e(yf,G$),e(G$,nOe),e(yf,sOe),e(A,lOe),e(A,Lf),e(Lf,Vee),e(Vee,iOe),e(Lf,dOe),e(Lf,O$),e(O$,cOe),e(Lf,fOe),e(A,mOe),e(A,xf),e(xf,Xee),e(Xee,gOe),e(xf,hOe),e(xf,V$),e(V$,pOe),e(xf,_Oe),e(A,uOe),e(A,$f),e($f,zee),e(zee,bOe),e($f,vOe),e($f,X$),e(X$,FOe),e($f,TOe),e(A,MOe),e(A,kf),e(kf,Wee),e(Wee,EOe),e(kf,COe),e(kf,z$),e(z$,wOe),e(kf,AOe),e(A,yOe),e(A,Sf),e(Sf,Qee),e(Qee,LOe),e(Sf,xOe),e(Sf,W$),e(W$,$Oe),e(Sf,kOe),e(A,SOe),e(A,Rf),e(Rf,Hee),e(Hee,ROe),e(Rf,POe),e(Rf,Q$),e(Q$,BOe),e(Rf,IOe),e(A,qOe),e(A,Pf),e(Pf,Uee),e(Uee,NOe),e(Pf,jOe),e(Pf,H$),e(H$,DOe),e(Pf,GOe),e(A,OOe),e(A,Bf),e(Bf,Jee),e(Jee,VOe),e(Bf,XOe),e(Bf,U$),e(U$,zOe),e(Bf,WOe),e(A,QOe),e(A,If),e(If,Yee),e(Yee,HOe),e(If,UOe),e(If,J$),e(J$,JOe),e(If,YOe),e(A,KOe),e(A,qf),e(qf,Kee),e(Kee,ZOe),e(qf,eVe),e(qf,Y$),e(Y$,oVe),e(qf,rVe),e(A,tVe),e(A,Nf),e(Nf,Zee),e(Zee,aVe),e(Nf,nVe),e(Nf,K$),e(K$,sVe),e(Nf,lVe),e(A,iVe),e(A,jf),e(jf,eoe),e(eoe,dVe),e(jf,cVe),e(jf,Z$),e(Z$,fVe),e(jf,mVe),e(A,gVe),e(A,Df),e(Df,ooe),e(ooe,hVe),e(Df,pVe),e(Df,ek),e(ek,_Ve),e(Df,uVe),e(A,bVe),e(A,Gf),e(Gf,roe),e(roe,vVe),e(Gf,FVe),e(Gf,ok),e(ok,TVe),e(Gf,MVe),e(A,EVe),e(A,Of),e(Of,toe),e(toe,CVe),e(Of,wVe),e(Of,rk),e(rk,AVe),e(Of,yVe),e(A,LVe),e(A,Vf),e(Vf,aoe),e(aoe,xVe),e(Vf,$Ve),e(Vf,tk),e(tk,kVe),e(Vf,SVe),e(A,RVe),e(A,Xf),e(Xf,noe),e(noe,PVe),e(Xf,BVe),e(Xf,ak),e(ak,IVe),e(Xf,qVe),e(A,NVe),e(A,zf),e(zf,soe),e(soe,jVe),e(zf,DVe),e(zf,nk),e(nk,GVe),e(zf,OVe),e(A,VVe),e(A,Wf),e(Wf,loe),e(loe,XVe),e(Wf,zVe),e(Wf,sk),e(sk,WVe),e(Wf,QVe),e(A,HVe),e(A,Qf),e(Qf,ioe),e(ioe,UVe),e(Qf,JVe),e(Qf,lk),e(lk,YVe),e(Qf,KVe),e(A,ZVe),e(A,Hf),e(Hf,doe),e(doe,eXe),e(Hf,oXe),e(Hf,ik),e(ik,rXe),e(Hf,tXe),e(A,aXe),e(A,Uf),e(Uf,coe),e(coe,nXe),e(Uf,sXe),e(Uf,dk),e(dk,lXe),e(Uf,iXe),e(A,dXe),e(A,Jf),e(Jf,foe),e(foe,cXe),e(Jf,fXe),e(Jf,ck),e(ck,mXe),e(Jf,gXe),e(A,hXe),e(A,Yf),e(Yf,moe),e(moe,pXe),e(Yf,_Xe),e(Yf,fk),e(fk,uXe),e(Yf,bXe),e(A,vXe),e(A,Kf),e(Kf,goe),e(goe,FXe),e(Kf,TXe),e(Kf,mk),e(mk,MXe),e(Kf,EXe),e(A,CXe),e(A,Zf),e(Zf,hoe),e(hoe,wXe),e(Zf,AXe),e(Zf,gk),e(gk,yXe),e(Zf,LXe),e(A,xXe),e(A,em),e(em,poe),e(poe,$Xe),e(em,kXe),e(em,hk),e(hk,SXe),e(em,RXe),e(A,PXe),e(A,om),e(om,_oe),e(_oe,BXe),e(om,IXe),e(om,pk),e(pk,qXe),e(om,NXe),e(A,jXe),e(A,rm),e(rm,uoe),e(uoe,DXe),e(rm,GXe),e(rm,_k),e(_k,OXe),e(rm,VXe),e(A,XXe),e(A,tm),e(tm,boe),e(boe,zXe),e(tm,WXe),e(tm,uk),e(uk,QXe),e(tm,HXe),e(A,UXe),e(A,am),e(am,voe),e(voe,JXe),e(am,YXe),e(am,bk),e(bk,KXe),e(am,ZXe),e(A,eze),e(A,nm),e(nm,Foe),e(Foe,oze),e(nm,rze),e(nm,vk),e(vk,tze),e(nm,aze),e(A,nze),e(A,sm),e(sm,Toe),e(Toe,sze),e(sm,lze),e(sm,Fk),e(Fk,ize),e(sm,dze),e(A,cze),e(A,lm),e(lm,Moe),e(Moe,fze),e(lm,mze),e(lm,Tk),e(Tk,gze),e(lm,hze),e(A,pze),e(A,im),e(im,Eoe),e(Eoe,_ze),e(im,uze),e(im,Mk),e(Mk,bze),e(im,vze),e(A,Fze),e(A,dm),e(dm,Coe),e(Coe,Tze),e(dm,Mze),e(dm,Ek),e(Ek,Eze),e(dm,Cze),e(A,wze),e(A,cm),e(cm,woe),e(woe,Aze),e(cm,yze),e(cm,Ck),e(Ck,Lze),e(cm,xze),e(A,$ze),e(A,fm),e(fm,Aoe),e(Aoe,kze),e(fm,Sze),e(fm,wk),e(wk,Rze),e(fm,Pze),e(A,Bze),e(A,mm),e(mm,yoe),e(yoe,Ize),e(mm,qze),e(mm,Ak),e(Ak,Nze),e(mm,jze),e(A,Dze),e(A,gm),e(gm,Loe),e(Loe,Gze),e(gm,Oze),e(gm,yk),e(yk,Vze),e(gm,Xze),e(A,zze),e(A,hm),e(hm,xoe),e(xoe,Wze),e(hm,Qze),e(hm,Lk),e(Lk,Hze),e(hm,Uze),e(A,Jze),e(A,pm),e(pm,$oe),e($oe,Yze),e(pm,Kze),e(pm,xk),e(xk,Zze),e(pm,eWe),e(A,oWe),e(A,_m),e(_m,koe),e(koe,rWe),e(_m,tWe),e(_m,$k),e($k,aWe),e(_m,nWe),e(A,sWe),e(A,um),e(um,Soe),e(Soe,lWe),e(um,iWe),e(um,kk),e(kk,dWe),e(um,cWe),e(A,fWe),e(A,bm),e(bm,Roe),e(Roe,mWe),e(bm,gWe),e(bm,Sk),e(Sk,hWe),e(bm,pWe),e(A,_We),e(A,vm),e(vm,Poe),e(Poe,uWe),e(vm,bWe),e(vm,Rk),e(Rk,vWe),e(vm,FWe),e(A,TWe),e(A,Fm),e(Fm,Boe),e(Boe,MWe),e(Fm,EWe),e(Fm,Pk),e(Pk,CWe),e(Fm,wWe),e(A,AWe),e(A,Tm),e(Tm,Ioe),e(Ioe,yWe),e(Tm,LWe),e(Tm,Bk),e(Bk,xWe),e(Tm,$We),e(A,kWe),e(A,Mm),e(Mm,qoe),e(qoe,SWe),e(Mm,RWe),e(Mm,Ik),e(Ik,PWe),e(Mm,BWe),e(A,IWe),e(A,Em),e(Em,Noe),e(Noe,qWe),e(Em,NWe),e(Em,qk),e(qk,jWe),e(Em,DWe),e(A,GWe),e(A,Cm),e(Cm,joe),e(joe,OWe),e(Cm,VWe),e(Cm,Nk),e(Nk,XWe),e(Cm,zWe),e(A,WWe),e(A,wm),e(wm,Doe),e(Doe,QWe),e(wm,HWe),e(wm,jk),e(jk,UWe),e(wm,JWe),e(A,YWe),e(A,Am),e(Am,Goe),e(Goe,KWe),e(Am,ZWe),e(Am,Dk),e(Dk,eQe),e(Am,oQe),e(A,rQe),e(A,ym),e(ym,Ooe),e(Ooe,tQe),e(ym,aQe),e(ym,Gk),e(Gk,nQe),e(ym,sQe),e(A,lQe),e(A,Lm),e(Lm,Voe),e(Voe,iQe),e(Lm,dQe),e(Lm,Ok),e(Ok,cQe),e(Lm,fQe),e(A,mQe),e(A,xm),e(xm,Xoe),e(Xoe,gQe),e(xm,hQe),e(xm,Vk),e(Vk,pQe),e(xm,_Qe),e(A,uQe),e(A,$m),e($m,zoe),e(zoe,bQe),e($m,vQe),e($m,Xk),e(Xk,FQe),e($m,TQe),e(A,MQe),e(A,km),e(km,Woe),e(Woe,EQe),e(km,CQe),e(km,zk),e(zk,wQe),e(km,AQe),e(A,yQe),e(A,Sm),e(Sm,Qoe),e(Qoe,LQe),e(Sm,xQe),e(Sm,Wk),e(Wk,$Qe),e(Sm,kQe),e(A,SQe),e(A,Rm),e(Rm,Hoe),e(Hoe,RQe),e(Rm,PQe),e(Rm,Qk),e(Qk,BQe),e(Rm,IQe),e(A,qQe),e(A,Pm),e(Pm,Uoe),e(Uoe,NQe),e(Pm,jQe),e(Pm,Hk),e(Hk,DQe),e(Pm,GQe),e(A,OQe),e(A,Bm),e(Bm,Joe),e(Joe,VQe),e(Bm,XQe),e(Bm,Uk),e(Uk,zQe),e(Bm,WQe),e(A,QQe),e(A,Im),e(Im,Yoe),e(Yoe,HQe),e(Im,UQe),e(Im,Jk),e(Jk,JQe),e(Im,YQe),e(A,KQe),e(A,qm),e(qm,Koe),e(Koe,ZQe),e(qm,eHe),e(qm,Yk),e(Yk,oHe),e(qm,rHe),e(A,tHe),e(A,Nm),e(Nm,Zoe),e(Zoe,aHe),e(Nm,nHe),e(Nm,Kk),e(Kk,sHe),e(Nm,lHe),e(A,iHe),e(A,jm),e(jm,ere),e(ere,dHe),e(jm,cHe),e(jm,Zk),e(Zk,fHe),e(jm,mHe),e(A,gHe),e(A,Dm),e(Dm,ore),e(ore,hHe),e(Dm,pHe),e(Dm,eS),e(eS,_He),e(Dm,uHe),e(A,bHe),e(A,Gm),e(Gm,rre),e(rre,vHe),e(Gm,FHe),e(Gm,oS),e(oS,THe),e(Gm,MHe),e(A,EHe),e(A,Om),e(Om,tre),e(tre,CHe),e(Om,wHe),e(Om,rS),e(rS,AHe),e(Om,yHe),e(A,LHe),e(A,Vm),e(Vm,are),e(are,xHe),e(Vm,$He),e(Vm,tS),e(tS,kHe),e(Vm,SHe),e(A,RHe),e(A,Xm),e(Xm,nre),e(nre,PHe),e(Xm,BHe),e(Xm,aS),e(aS,IHe),e(Xm,qHe),e(A,NHe),e(A,zm),e(zm,sre),e(sre,jHe),e(zm,DHe),e(zm,nS),e(nS,GHe),e(zm,OHe),e(A,VHe),e(A,Wm),e(Wm,lre),e(lre,XHe),e(Wm,zHe),e(Wm,sS),e(sS,WHe),e(Wm,QHe),e(A,HHe),e(A,Qm),e(Qm,ire),e(ire,UHe),e(Qm,JHe),e(Qm,lS),e(lS,YHe),e(Qm,KHe),e(A,ZHe),e(A,Hm),e(Hm,dre),e(dre,eUe),e(Hm,oUe),e(Hm,iS),e(iS,rUe),e(Hm,tUe),e(A,aUe),e(A,Um),e(Um,cre),e(cre,nUe),e(Um,sUe),e(Um,dS),e(dS,lUe),e(Um,iUe),e(A,dUe),e(A,Jm),e(Jm,fre),e(fre,cUe),e(Jm,fUe),e(Jm,cS),e(cS,mUe),e(Jm,gUe),e(A,hUe),e(A,Ym),e(Ym,mre),e(mre,pUe),e(Ym,_Ue),e(Ym,fS),e(fS,uUe),e(Ym,bUe),e(A,vUe),e(A,Km),e(Km,gre),e(gre,FUe),e(Km,TUe),e(Km,mS),e(mS,MUe),e(Km,EUe),e(A,CUe),e(A,Zm),e(Zm,hre),e(hre,wUe),e(Zm,AUe),e(Zm,gS),e(gS,yUe),e(Zm,LUe),e(A,xUe),e(A,eg),e(eg,pre),e(pre,$Ue),e(eg,kUe),e(eg,hS),e(hS,SUe),e(eg,RUe),e(A,PUe),e(A,og),e(og,_re),e(_re,BUe),e(og,IUe),e(og,pS),e(pS,qUe),e(og,NUe),e(A,jUe),e(A,rg),e(rg,ure),e(ure,DUe),e(rg,GUe),e(rg,_S),e(_S,OUe),e(rg,VUe),e(A,XUe),e(A,tg),e(tg,bre),e(bre,zUe),e(tg,WUe),e(tg,uS),e(uS,QUe),e(tg,HUe),e(A,UUe),e(A,ag),e(ag,vre),e(vre,JUe),e(ag,YUe),e(ag,bS),e(bS,KUe),e(ag,ZUe),e(A,eJe),e(A,ng),e(ng,Fre),e(Fre,oJe),e(ng,rJe),e(ng,vS),e(vS,tJe),e(ng,aJe),e(A,nJe),e(A,sg),e(sg,Tre),e(Tre,sJe),e(sg,lJe),e(sg,FS),e(FS,iJe),e(sg,dJe),e(A,cJe),e(A,lg),e(lg,Mre),e(Mre,fJe),e(lg,mJe),e(lg,TS),e(TS,gJe),e(lg,hJe),e(A,pJe),e(A,ig),e(ig,Ere),e(Ere,_Je),e(ig,uJe),e(ig,MS),e(MS,bJe),e(ig,vJe),e(A,FJe),e(A,dg),e(dg,Cre),e(Cre,TJe),e(dg,MJe),e(dg,ES),e(ES,EJe),e(dg,CJe),e(A,wJe),e(A,cg),e(cg,wre),e(wre,AJe),e(cg,yJe),e(cg,CS),e(CS,LJe),e(cg,xJe),e(A,$Je),e(A,fg),e(fg,Are),e(Are,kJe),e(fg,SJe),e(fg,wS),e(wS,RJe),e(fg,PJe),e(A,BJe),e(A,mg),e(mg,yre),e(yre,IJe),e(mg,qJe),e(mg,AS),e(AS,NJe),e(mg,jJe),e(A,DJe),e(A,gg),e(gg,Lre),e(Lre,GJe),e(gg,OJe),e(gg,yS),e(yS,VJe),e(gg,XJe),e(A,zJe),e(A,hg),e(hg,xre),e(xre,WJe),e(hg,QJe),e(hg,LS),e(LS,HJe),e(hg,UJe),e(A,JJe),e(A,pg),e(pg,$re),e($re,YJe),e(pg,KJe),e(pg,xS),e(xS,ZJe),e(pg,eYe),e(A,oYe),e(A,_g),e(_g,kre),e(kre,rYe),e(_g,tYe),e(_g,$S),e($S,aYe),e(_g,nYe),e(A,sYe),e(A,ug),e(ug,Sre),e(Sre,lYe),e(ug,iYe),e(ug,kS),e(kS,dYe),e(ug,cYe),e(A,fYe),e(A,bg),e(bg,Rre),e(Rre,mYe),e(bg,gYe),e(bg,SS),e(SS,hYe),e(bg,pYe),e(Er,_Ye),M(vg,Er,null),e(Co,uYe),e(Co,Fg),M(b6,Fg,null),e(Fg,bYe),e(Fg,Pre),e(Pre,vYe),b(f,HIe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,Bre),M(v6,Bre,null),e(Fi,FYe),e(Fi,Ire),e(Ire,TYe),b(f,UIe,u),b(f,wo,u),M(F6,wo,null),e(wo,MYe),e(wo,T6),e(T6,EYe),e(T6,RS),e(RS,CYe),e(T6,wYe),e(wo,AYe),e(wo,M6),e(M6,yYe),e(M6,qre),e(qre,LYe),e(M6,xYe),e(wo,$Ye),e(wo,Cr),M(E6,Cr,null),e(Cr,kYe),e(Cr,Nre),e(Nre,SYe),e(Cr,RYe),e(Cr,Aa),e(Aa,PYe),e(Aa,jre),e(jre,BYe),e(Aa,IYe),e(Aa,Dre),e(Dre,qYe),e(Aa,NYe),e(Aa,Gre),e(Gre,jYe),e(Aa,DYe),e(Cr,GYe),e(Cr,k),e(k,Sn),e(Sn,Ore),e(Ore,OYe),e(Sn,VYe),e(Sn,PS),e(PS,XYe),e(Sn,zYe),e(Sn,BS),e(BS,WYe),e(Sn,QYe),e(k,HYe),e(k,Rn),e(Rn,Vre),e(Vre,UYe),e(Rn,JYe),e(Rn,IS),e(IS,YYe),e(Rn,KYe),e(Rn,qS),e(qS,ZYe),e(Rn,eKe),e(k,oKe),e(k,Pn),e(Pn,Xre),e(Xre,rKe),e(Pn,tKe),e(Pn,NS),e(NS,aKe),e(Pn,nKe),e(Pn,jS),e(jS,sKe),e(Pn,lKe),e(k,iKe),e(k,Mg),e(Mg,zre),e(zre,dKe),e(Mg,cKe),e(Mg,DS),e(DS,fKe),e(Mg,mKe),e(k,gKe),e(k,Bn),e(Bn,Wre),e(Wre,hKe),e(Bn,pKe),e(Bn,GS),e(GS,_Ke),e(Bn,uKe),e(Bn,OS),e(OS,bKe),e(Bn,vKe),e(k,FKe),e(k,Eg),e(Eg,Qre),e(Qre,TKe),e(Eg,MKe),e(Eg,VS),e(VS,EKe),e(Eg,CKe),e(k,wKe),e(k,Cg),e(Cg,Hre),e(Hre,AKe),e(Cg,yKe),e(Cg,XS),e(XS,LKe),e(Cg,xKe),e(k,$Ke),e(k,wg),e(wg,Ure),e(Ure,kKe),e(wg,SKe),e(wg,zS),e(zS,RKe),e(wg,PKe),e(k,BKe),e(k,In),e(In,Jre),e(Jre,IKe),e(In,qKe),e(In,WS),e(WS,NKe),e(In,jKe),e(In,QS),e(QS,DKe),e(In,GKe),e(k,OKe),e(k,qn),e(qn,Yre),e(Yre,VKe),e(qn,XKe),e(qn,HS),e(HS,zKe),e(qn,WKe),e(qn,US),e(US,QKe),e(qn,HKe),e(k,UKe),e(k,Nn),e(Nn,Kre),e(Kre,JKe),e(Nn,YKe),e(Nn,JS),e(JS,KKe),e(Nn,ZKe),e(Nn,YS),e(YS,eZe),e(Nn,oZe),e(k,rZe),e(k,Ag),e(Ag,Zre),e(Zre,tZe),e(Ag,aZe),e(Ag,KS),e(KS,nZe),e(Ag,sZe),e(k,lZe),e(k,yg),e(yg,ete),e(ete,iZe),e(yg,dZe),e(yg,ZS),e(ZS,cZe),e(yg,fZe),e(k,mZe),e(k,jn),e(jn,ote),e(ote,gZe),e(jn,hZe),e(jn,eR),e(eR,pZe),e(jn,_Ze),e(jn,oR),e(oR,uZe),e(jn,bZe),e(k,vZe),e(k,Lg),e(Lg,rte),e(rte,FZe),e(Lg,TZe),e(Lg,rR),e(rR,MZe),e(Lg,EZe),e(k,CZe),e(k,Dn),e(Dn,tte),e(tte,wZe),e(Dn,AZe),e(Dn,tR),e(tR,yZe),e(Dn,LZe),e(Dn,aR),e(aR,xZe),e(Dn,$Ze),e(k,kZe),e(k,Gn),e(Gn,ate),e(ate,SZe),e(Gn,RZe),e(Gn,nR),e(nR,PZe),e(Gn,BZe),e(Gn,sR),e(sR,IZe),e(Gn,qZe),e(k,NZe),e(k,On),e(On,nte),e(nte,jZe),e(On,DZe),e(On,lR),e(lR,GZe),e(On,OZe),e(On,iR),e(iR,VZe),e(On,XZe),e(k,zZe),e(k,xg),e(xg,ste),e(ste,WZe),e(xg,QZe),e(xg,dR),e(dR,HZe),e(xg,UZe),e(k,JZe),e(k,Vn),e(Vn,lte),e(lte,YZe),e(Vn,KZe),e(Vn,cR),e(cR,ZZe),e(Vn,eeo),e(Vn,fR),e(fR,oeo),e(Vn,reo),e(k,teo),e(k,Xn),e(Xn,ite),e(ite,aeo),e(Xn,neo),e(Xn,mR),e(mR,seo),e(Xn,leo),e(Xn,gR),e(gR,ieo),e(Xn,deo),e(k,ceo),e(k,zn),e(zn,dte),e(dte,feo),e(zn,meo),e(zn,hR),e(hR,geo),e(zn,heo),e(zn,pR),e(pR,peo),e(zn,_eo),e(k,ueo),e(k,Wn),e(Wn,cte),e(cte,beo),e(Wn,veo),e(Wn,_R),e(_R,Feo),e(Wn,Teo),e(Wn,uR),e(uR,Meo),e(Wn,Eeo),e(k,Ceo),e(k,Qn),e(Qn,fte),e(fte,weo),e(Qn,Aeo),e(Qn,bR),e(bR,yeo),e(Qn,Leo),e(Qn,vR),e(vR,xeo),e(Qn,$eo),e(k,keo),e(k,Hn),e(Hn,mte),e(mte,Seo),e(Hn,Reo),e(Hn,FR),e(FR,Peo),e(Hn,Beo),e(Hn,TR),e(TR,Ieo),e(Hn,qeo),e(k,Neo),e(k,$g),e($g,gte),e(gte,jeo),e($g,Deo),e($g,MR),e(MR,Geo),e($g,Oeo),e(k,Veo),e(k,Un),e(Un,hte),e(hte,Xeo),e(Un,zeo),e(Un,ER),e(ER,Weo),e(Un,Qeo),e(Un,CR),e(CR,Heo),e(Un,Ueo),e(k,Jeo),e(k,kg),e(kg,pte),e(pte,Yeo),e(kg,Keo),e(kg,wR),e(wR,Zeo),e(kg,eoo),e(k,ooo),e(k,Jn),e(Jn,_te),e(_te,roo),e(Jn,too),e(Jn,AR),e(AR,aoo),e(Jn,noo),e(Jn,yR),e(yR,soo),e(Jn,loo),e(k,ioo),e(k,Yn),e(Yn,ute),e(ute,doo),e(Yn,coo),e(Yn,LR),e(LR,foo),e(Yn,moo),e(Yn,xR),e(xR,goo),e(Yn,hoo),e(k,poo),e(k,Kn),e(Kn,bte),e(bte,_oo),e(Kn,uoo),e(Kn,$R),e($R,boo),e(Kn,voo),e(Kn,kR),e(kR,Foo),e(Kn,Too),e(k,Moo),e(k,Zn),e(Zn,vte),e(vte,Eoo),e(Zn,Coo),e(Zn,SR),e(SR,woo),e(Zn,Aoo),e(Zn,RR),e(RR,yoo),e(Zn,Loo),e(k,xoo),e(k,es),e(es,Fte),e(Fte,$oo),e(es,koo),e(es,PR),e(PR,Soo),e(es,Roo),e(es,BR),e(BR,Poo),e(es,Boo),e(k,Ioo),e(k,Sg),e(Sg,Tte),e(Tte,qoo),e(Sg,Noo),e(Sg,IR),e(IR,joo),e(Sg,Doo),e(k,Goo),e(k,os),e(os,Mte),e(Mte,Ooo),e(os,Voo),e(os,qR),e(qR,Xoo),e(os,zoo),e(os,NR),e(NR,Woo),e(os,Qoo),e(k,Hoo),e(k,rs),e(rs,Ete),e(Ete,Uoo),e(rs,Joo),e(rs,jR),e(jR,Yoo),e(rs,Koo),e(rs,DR),e(DR,Zoo),e(rs,ero),e(k,oro),e(k,ts),e(ts,Cte),e(Cte,rro),e(ts,tro),e(ts,GR),e(GR,aro),e(ts,nro),e(ts,OR),e(OR,sro),e(ts,lro),e(k,iro),e(k,as),e(as,wte),e(wte,dro),e(as,cro),e(as,VR),e(VR,fro),e(as,mro),e(as,XR),e(XR,gro),e(as,hro),e(k,pro),e(k,ns),e(ns,Ate),e(Ate,_ro),e(ns,uro),e(ns,zR),e(zR,bro),e(ns,vro),e(ns,WR),e(WR,Fro),e(ns,Tro),e(k,Mro),e(k,ss),e(ss,yte),e(yte,Ero),e(ss,Cro),e(ss,QR),e(QR,wro),e(ss,Aro),e(ss,HR),e(HR,yro),e(ss,Lro),e(k,xro),e(k,Rg),e(Rg,Lte),e(Lte,$ro),e(Rg,kro),e(Rg,UR),e(UR,Sro),e(Rg,Rro),e(k,Pro),e(k,ls),e(ls,xte),e(xte,Bro),e(ls,Iro),e(ls,JR),e(JR,qro),e(ls,Nro),e(ls,YR),e(YR,jro),e(ls,Dro),e(k,Gro),e(k,Pg),e(Pg,$te),e($te,Oro),e(Pg,Vro),e(Pg,KR),e(KR,Xro),e(Pg,zro),e(k,Wro),e(k,Bg),e(Bg,kte),e(kte,Qro),e(Bg,Hro),e(Bg,ZR),e(ZR,Uro),e(Bg,Jro),e(k,Yro),e(k,is),e(is,Ste),e(Ste,Kro),e(is,Zro),e(is,eP),e(eP,eto),e(is,oto),e(is,oP),e(oP,rto),e(is,tto),e(k,ato),e(k,ds),e(ds,Rte),e(Rte,nto),e(ds,sto),e(ds,rP),e(rP,lto),e(ds,ito),e(ds,tP),e(tP,dto),e(ds,cto),e(k,fto),e(k,cs),e(cs,Pte),e(Pte,mto),e(cs,gto),e(cs,aP),e(aP,hto),e(cs,pto),e(cs,nP),e(nP,_to),e(cs,uto),e(k,bto),e(k,Ig),e(Ig,Bte),e(Bte,vto),e(Ig,Fto),e(Ig,sP),e(sP,Tto),e(Ig,Mto),e(k,Eto),e(k,fs),e(fs,Ite),e(Ite,Cto),e(fs,wto),e(fs,lP),e(lP,Ato),e(fs,yto),e(fs,iP),e(iP,Lto),e(fs,xto),e(k,$to),e(k,ms),e(ms,qte),e(qte,kto),e(ms,Sto),e(ms,dP),e(dP,Rto),e(ms,Pto),e(ms,cP),e(cP,Bto),e(ms,Ito),e(k,qto),e(k,gs),e(gs,Nte),e(Nte,Nto),e(gs,jto),e(gs,fP),e(fP,Dto),e(gs,Gto),e(gs,mP),e(mP,Oto),e(gs,Vto),e(k,Xto),e(k,hs),e(hs,jte),e(jte,zto),e(hs,Wto),e(hs,gP),e(gP,Qto),e(hs,Hto),e(hs,hP),e(hP,Uto),e(hs,Jto),e(k,Yto),e(k,ps),e(ps,Dte),e(Dte,Kto),e(ps,Zto),e(ps,pP),e(pP,eao),e(ps,oao),e(ps,_P),e(_P,rao),e(ps,tao),e(k,aao),e(k,qg),e(qg,Gte),e(Gte,nao),e(qg,sao),e(qg,uP),e(uP,lao),e(qg,iao),e(k,dao),e(k,_s),e(_s,Ote),e(Ote,cao),e(_s,fao),e(_s,bP),e(bP,mao),e(_s,gao),e(_s,vP),e(vP,hao),e(_s,pao),e(k,_ao),e(k,Ng),e(Ng,Vte),e(Vte,uao),e(Ng,bao),e(Ng,FP),e(FP,vao),e(Ng,Fao),e(k,Tao),e(k,jg),e(jg,Xte),e(Xte,Mao),e(jg,Eao),e(jg,TP),e(TP,Cao),e(jg,wao),e(k,Aao),e(k,Dg),e(Dg,zte),e(zte,yao),e(Dg,Lao),e(Dg,MP),e(MP,xao),e(Dg,$ao),e(k,kao),e(k,Gg),e(Gg,Wte),e(Wte,Sao),e(Gg,Rao),e(Gg,EP),e(EP,Pao),e(Gg,Bao),e(k,Iao),e(k,us),e(us,Qte),e(Qte,qao),e(us,Nao),e(us,CP),e(CP,jao),e(us,Dao),e(us,wP),e(wP,Gao),e(us,Oao),e(k,Vao),e(k,Og),e(Og,Hte),e(Hte,Xao),e(Og,zao),e(Og,AP),e(AP,Wao),e(Og,Qao),e(k,Hao),e(k,bs),e(bs,Ute),e(Ute,Uao),e(bs,Jao),e(bs,yP),e(yP,Yao),e(bs,Kao),e(bs,LP),e(LP,Zao),e(bs,eno),e(k,ono),e(k,vs),e(vs,Jte),e(Jte,rno),e(vs,tno),e(vs,xP),e(xP,ano),e(vs,nno),e(vs,$P),e($P,sno),e(vs,lno),e(k,ino),e(k,Fs),e(Fs,Yte),e(Yte,dno),e(Fs,cno),e(Fs,kP),e(kP,fno),e(Fs,mno),e(Fs,SP),e(SP,gno),e(Fs,hno),e(k,pno),e(k,Ts),e(Ts,Kte),e(Kte,_no),e(Ts,uno),e(Ts,RP),e(RP,bno),e(Ts,vno),e(Ts,PP),e(PP,Fno),e(Ts,Tno),e(k,Mno),e(k,Ms),e(Ms,Zte),e(Zte,Eno),e(Ms,Cno),e(Ms,BP),e(BP,wno),e(Ms,Ano),e(Ms,IP),e(IP,yno),e(Ms,Lno),e(k,xno),e(k,Es),e(Es,eae),e(eae,$no),e(Es,kno),e(Es,qP),e(qP,Sno),e(Es,Rno),e(Es,NP),e(NP,Pno),e(Es,Bno),e(k,Ino),e(k,Vg),e(Vg,oae),e(oae,qno),e(Vg,Nno),e(Vg,jP),e(jP,jno),e(Vg,Dno),e(k,Gno),e(k,Xg),e(Xg,rae),e(rae,Ono),e(Xg,Vno),e(Xg,DP),e(DP,Xno),e(Xg,zno),e(k,Wno),e(k,Cs),e(Cs,tae),e(tae,Qno),e(Cs,Hno),e(Cs,GP),e(GP,Uno),e(Cs,Jno),e(Cs,OP),e(OP,Yno),e(Cs,Kno),e(k,Zno),e(k,ws),e(ws,aae),e(aae,eso),e(ws,oso),e(ws,VP),e(VP,rso),e(ws,tso),e(ws,XP),e(XP,aso),e(ws,nso),e(k,sso),e(k,As),e(As,nae),e(nae,lso),e(As,iso),e(As,zP),e(zP,dso),e(As,cso),e(As,WP),e(WP,fso),e(As,mso),e(k,gso),e(k,zg),e(zg,sae),e(sae,hso),e(zg,pso),e(zg,QP),e(QP,_so),e(zg,uso),e(k,bso),e(k,Wg),e(Wg,lae),e(lae,vso),e(Wg,Fso),e(Wg,HP),e(HP,Tso),e(Wg,Mso),e(k,Eso),e(k,Qg),e(Qg,iae),e(iae,Cso),e(Qg,wso),e(Qg,UP),e(UP,Aso),e(Qg,yso),e(k,Lso),e(k,ys),e(ys,dae),e(dae,xso),e(ys,$so),e(ys,JP),e(JP,kso),e(ys,Sso),e(ys,YP),e(YP,Rso),e(ys,Pso),e(k,Bso),e(k,Hg),e(Hg,cae),e(cae,Iso),e(Hg,qso),e(Hg,KP),e(KP,Nso),e(Hg,jso),e(k,Dso),e(k,Ug),e(Ug,fae),e(fae,Gso),e(Ug,Oso),e(Ug,ZP),e(ZP,Vso),e(Ug,Xso),e(k,zso),e(k,Jg),e(Jg,mae),e(mae,Wso),e(Jg,Qso),e(Jg,eB),e(eB,Hso),e(Jg,Uso),e(k,Jso),e(k,Ls),e(Ls,gae),e(gae,Yso),e(Ls,Kso),e(Ls,oB),e(oB,Zso),e(Ls,elo),e(Ls,rB),e(rB,olo),e(Ls,rlo),e(k,tlo),e(k,Yg),e(Yg,hae),e(hae,alo),e(Yg,nlo),e(Yg,tB),e(tB,slo),e(Yg,llo),e(k,ilo),e(k,Kg),e(Kg,pae),e(pae,dlo),e(Kg,clo),e(Kg,aB),e(aB,flo),e(Kg,mlo),e(k,glo),e(k,xs),e(xs,_ae),e(_ae,hlo),e(xs,plo),e(xs,nB),e(nB,_lo),e(xs,ulo),e(xs,sB),e(sB,blo),e(xs,vlo),e(k,Flo),e(k,$s),e($s,uae),e(uae,Tlo),e($s,Mlo),e($s,lB),e(lB,Elo),e($s,Clo),e($s,iB),e(iB,wlo),e($s,Alo),e(k,ylo),e(k,ks),e(ks,bae),e(bae,Llo),e(ks,xlo),e(ks,dB),e(dB,$lo),e(ks,klo),e(ks,cB),e(cB,Slo),e(ks,Rlo),e(k,Plo),e(k,Ss),e(Ss,vae),e(vae,Blo),e(Ss,Ilo),e(Ss,fB),e(fB,qlo),e(Ss,Nlo),e(Ss,mB),e(mB,jlo),e(Ss,Dlo),e(Cr,Glo),M(Zg,Cr,null),e(wo,Olo),e(wo,eh),M(C6,eh,null),e(eh,Vlo),e(eh,Fae),e(Fae,Xlo),b(f,JIe,u),b(f,Ti,u),e(Ti,oh),e(oh,Tae),M(w6,Tae,null),e(Ti,zlo),e(Ti,Mae),e(Mae,Wlo),b(f,YIe,u),b(f,Ao,u),M(A6,Ao,null),e(Ao,Qlo),e(Ao,y6),e(y6,Hlo),e(y6,gB),e(gB,Ulo),e(y6,Jlo),e(Ao,Ylo),e(Ao,L6),e(L6,Klo),e(L6,Eae),e(Eae,Zlo),e(L6,eio),e(Ao,oio),e(Ao,He),M(x6,He,null),e(He,rio),e(He,Cae),e(Cae,tio),e(He,aio),e(He,ya),e(ya,nio),e(ya,wae),e(wae,sio),e(ya,lio),e(ya,Aae),e(Aae,iio),e(ya,dio),e(ya,yae),e(yae,cio),e(ya,fio),e(He,mio),e(He,Z),e(Z,rh),e(rh,Lae),e(Lae,gio),e(rh,hio),e(rh,hB),e(hB,pio),e(rh,_io),e(Z,uio),e(Z,th),e(th,xae),e(xae,bio),e(th,vio),e(th,pB),e(pB,Fio),e(th,Tio),e(Z,Mio),e(Z,ah),e(ah,$ae),e($ae,Eio),e(ah,Cio),e(ah,_B),e(_B,wio),e(ah,Aio),e(Z,yio),e(Z,nh),e(nh,kae),e(kae,Lio),e(nh,xio),e(nh,uB),e(uB,$io),e(nh,kio),e(Z,Sio),e(Z,sh),e(sh,Sae),e(Sae,Rio),e(sh,Pio),e(sh,bB),e(bB,Bio),e(sh,Iio),e(Z,qio),e(Z,lh),e(lh,Rae),e(Rae,Nio),e(lh,jio),e(lh,vB),e(vB,Dio),e(lh,Gio),e(Z,Oio),e(Z,ih),e(ih,Pae),e(Pae,Vio),e(ih,Xio),e(ih,FB),e(FB,zio),e(ih,Wio),e(Z,Qio),e(Z,dh),e(dh,Bae),e(Bae,Hio),e(dh,Uio),e(dh,TB),e(TB,Jio),e(dh,Yio),e(Z,Kio),e(Z,ch),e(ch,Iae),e(Iae,Zio),e(ch,edo),e(ch,MB),e(MB,odo),e(ch,rdo),e(Z,tdo),e(Z,fh),e(fh,qae),e(qae,ado),e(fh,ndo),e(fh,EB),e(EB,sdo),e(fh,ldo),e(Z,ido),e(Z,mh),e(mh,Nae),e(Nae,ddo),e(mh,cdo),e(mh,CB),e(CB,fdo),e(mh,mdo),e(Z,gdo),e(Z,gh),e(gh,jae),e(jae,hdo),e(gh,pdo),e(gh,wB),e(wB,_do),e(gh,udo),e(Z,bdo),e(Z,hh),e(hh,Dae),e(Dae,vdo),e(hh,Fdo),e(hh,AB),e(AB,Tdo),e(hh,Mdo),e(Z,Edo),e(Z,ph),e(ph,Gae),e(Gae,Cdo),e(ph,wdo),e(ph,yB),e(yB,Ado),e(ph,ydo),e(Z,Ldo),e(Z,_h),e(_h,Oae),e(Oae,xdo),e(_h,$do),e(_h,LB),e(LB,kdo),e(_h,Sdo),e(Z,Rdo),e(Z,uh),e(uh,Vae),e(Vae,Pdo),e(uh,Bdo),e(uh,xB),e(xB,Ido),e(uh,qdo),e(Z,Ndo),e(Z,bh),e(bh,Xae),e(Xae,jdo),e(bh,Ddo),e(bh,$B),e($B,Gdo),e(bh,Odo),e(Z,Vdo),e(Z,vh),e(vh,zae),e(zae,Xdo),e(vh,zdo),e(vh,kB),e(kB,Wdo),e(vh,Qdo),e(Z,Hdo),e(Z,Fh),e(Fh,Wae),e(Wae,Udo),e(Fh,Jdo),e(Fh,SB),e(SB,Ydo),e(Fh,Kdo),e(Z,Zdo),e(Z,Th),e(Th,Qae),e(Qae,eco),e(Th,oco),e(Th,RB),e(RB,rco),e(Th,tco),e(Z,aco),e(Z,Mh),e(Mh,Hae),e(Hae,nco),e(Mh,sco),e(Mh,PB),e(PB,lco),e(Mh,ico),e(Z,dco),e(Z,Eh),e(Eh,Uae),e(Uae,cco),e(Eh,fco),e(Eh,BB),e(BB,mco),e(Eh,gco),e(Z,hco),e(Z,Ch),e(Ch,Jae),e(Jae,pco),e(Ch,_co),e(Ch,IB),e(IB,uco),e(Ch,bco),e(Z,vco),e(Z,wh),e(wh,Yae),e(Yae,Fco),e(wh,Tco),e(wh,qB),e(qB,Mco),e(wh,Eco),e(Z,Cco),e(Z,Ah),e(Ah,Kae),e(Kae,wco),e(Ah,Aco),e(Ah,NB),e(NB,yco),e(Ah,Lco),e(Z,xco),e(Z,yh),e(yh,Zae),e(Zae,$co),e(yh,kco),e(yh,jB),e(jB,Sco),e(yh,Rco),e(Z,Pco),e(Z,Lh),e(Lh,ene),e(ene,Bco),e(Lh,Ico),e(Lh,DB),e(DB,qco),e(Lh,Nco),e(He,jco),M(xh,He,null),e(He,Dco),M($h,He,null),e(Ao,Gco),e(Ao,kh),M($6,kh,null),e(kh,Oco),e(kh,one),e(one,Vco),b(f,KIe,u),b(f,Mi,u),e(Mi,Sh),e(Sh,rne),M(k6,rne,null),e(Mi,Xco),e(Mi,tne),e(tne,zco),b(f,ZIe,u),b(f,yo,u),M(S6,yo,null),e(yo,Wco),e(yo,R6),e(R6,Qco),e(R6,GB),e(GB,Hco),e(R6,Uco),e(yo,Jco),e(yo,P6),e(P6,Yco),e(P6,ane),e(ane,Kco),e(P6,Zco),e(yo,efo),e(yo,Ue),M(B6,Ue,null),e(Ue,ofo),e(Ue,nne),e(nne,rfo),e(Ue,tfo),e(Ue,Ei),e(Ei,afo),e(Ei,sne),e(sne,nfo),e(Ei,sfo),e(Ei,lne),e(lne,lfo),e(Ei,ifo),e(Ue,dfo),e(Ue,pe),e(pe,Rh),e(Rh,ine),e(ine,cfo),e(Rh,ffo),e(Rh,OB),e(OB,mfo),e(Rh,gfo),e(pe,hfo),e(pe,Ph),e(Ph,dne),e(dne,pfo),e(Ph,_fo),e(Ph,cne),e(cne,ufo),e(Ph,bfo),e(pe,vfo),e(pe,Bh),e(Bh,fne),e(fne,Ffo),e(Bh,Tfo),e(Bh,VB),e(VB,Mfo),e(Bh,Efo),e(pe,Cfo),e(pe,Ih),e(Ih,mne),e(mne,wfo),e(Ih,Afo),e(Ih,XB),e(XB,yfo),e(Ih,Lfo),e(pe,xfo),e(pe,qh),e(qh,gne),e(gne,$fo),e(qh,kfo),e(qh,zB),e(zB,Sfo),e(qh,Rfo),e(pe,Pfo),e(pe,Nh),e(Nh,hne),e(hne,Bfo),e(Nh,Ifo),e(Nh,WB),e(WB,qfo),e(Nh,Nfo),e(pe,jfo),e(pe,jh),e(jh,pne),e(pne,Dfo),e(jh,Gfo),e(jh,QB),e(QB,Ofo),e(jh,Vfo),e(pe,Xfo),e(pe,Dh),e(Dh,_ne),e(_ne,zfo),e(Dh,Wfo),e(Dh,HB),e(HB,Qfo),e(Dh,Hfo),e(pe,Ufo),e(pe,Gh),e(Gh,une),e(une,Jfo),e(Gh,Yfo),e(Gh,UB),e(UB,Kfo),e(Gh,Zfo),e(pe,emo),e(pe,Oh),e(Oh,bne),e(bne,omo),e(Oh,rmo),e(Oh,JB),e(JB,tmo),e(Oh,amo),e(pe,nmo),e(pe,Vh),e(Vh,vne),e(vne,smo),e(Vh,lmo),e(Vh,YB),e(YB,imo),e(Vh,dmo),e(pe,cmo),e(pe,Xh),e(Xh,Fne),e(Fne,fmo),e(Xh,mmo),e(Xh,KB),e(KB,gmo),e(Xh,hmo),e(pe,pmo),e(pe,zh),e(zh,Tne),e(Tne,_mo),e(zh,umo),e(zh,ZB),e(ZB,bmo),e(zh,vmo),e(pe,Fmo),e(pe,Wh),e(Wh,Mne),e(Mne,Tmo),e(Wh,Mmo),e(Wh,eI),e(eI,Emo),e(Wh,Cmo),e(pe,wmo),e(pe,Qh),e(Qh,Ene),e(Ene,Amo),e(Qh,ymo),e(Qh,oI),e(oI,Lmo),e(Qh,xmo),e(pe,$mo),e(pe,Hh),e(Hh,Cne),e(Cne,kmo),e(Hh,Smo),e(Hh,rI),e(rI,Rmo),e(Hh,Pmo),e(Ue,Bmo),M(Uh,Ue,null),e(Ue,Imo),M(Jh,Ue,null),e(yo,qmo),e(yo,Yh),M(I6,Yh,null),e(Yh,Nmo),e(Yh,wne),e(wne,jmo),b(f,eqe,u),b(f,Ci,u),e(Ci,Kh),e(Kh,Ane),M(q6,Ane,null),e(Ci,Dmo),e(Ci,yne),e(yne,Gmo),b(f,oqe,u),b(f,Lo,u),M(N6,Lo,null),e(Lo,Omo),e(Lo,wi),e(wi,Vmo),e(wi,tI),e(tI,Xmo),e(wi,zmo),e(wi,aI),e(aI,Wmo),e(wi,Qmo),e(Lo,Hmo),e(Lo,j6),e(j6,Umo),e(j6,Lne),e(Lne,Jmo),e(j6,Ymo),e(Lo,Kmo),e(Lo,tt),M(D6,tt,null),e(tt,Zmo),e(tt,xne),e(xne,ego),e(tt,ogo),e(tt,Ai),e(Ai,rgo),e(Ai,$ne),e($ne,tgo),e(Ai,ago),e(Ai,nI),e(nI,ngo),e(Ai,sgo),e(tt,lgo),M(Zh,tt,null),e(Lo,igo),e(Lo,Je),M(G6,Je,null),e(Je,dgo),e(Je,kne),e(kne,cgo),e(Je,fgo),e(Je,La),e(La,mgo),e(La,Sne),e(Sne,ggo),e(La,hgo),e(La,Rne),e(Rne,pgo),e(La,_go),e(La,Pne),e(Pne,ugo),e(La,bgo),e(Je,vgo),e(Je,x),e(x,ep),e(ep,Bne),e(Bne,Fgo),e(ep,Tgo),e(ep,sI),e(sI,Mgo),e(ep,Ego),e(x,Cgo),e(x,op),e(op,Ine),e(Ine,wgo),e(op,Ago),e(op,lI),e(lI,ygo),e(op,Lgo),e(x,xgo),e(x,rp),e(rp,qne),e(qne,$go),e(rp,kgo),e(rp,iI),e(iI,Sgo),e(rp,Rgo),e(x,Pgo),e(x,tp),e(tp,Nne),e(Nne,Bgo),e(tp,Igo),e(tp,dI),e(dI,qgo),e(tp,Ngo),e(x,jgo),e(x,ap),e(ap,jne),e(jne,Dgo),e(ap,Ggo),e(ap,cI),e(cI,Ogo),e(ap,Vgo),e(x,Xgo),e(x,np),e(np,Dne),e(Dne,zgo),e(np,Wgo),e(np,fI),e(fI,Qgo),e(np,Hgo),e(x,Ugo),e(x,sp),e(sp,Gne),e(Gne,Jgo),e(sp,Ygo),e(sp,mI),e(mI,Kgo),e(sp,Zgo),e(x,eho),e(x,lp),e(lp,One),e(One,oho),e(lp,rho),e(lp,gI),e(gI,tho),e(lp,aho),e(x,nho),e(x,ip),e(ip,Vne),e(Vne,sho),e(ip,lho),e(ip,hI),e(hI,iho),e(ip,dho),e(x,cho),e(x,dp),e(dp,Xne),e(Xne,fho),e(dp,mho),e(dp,pI),e(pI,gho),e(dp,hho),e(x,pho),e(x,cp),e(cp,zne),e(zne,_ho),e(cp,uho),e(cp,_I),e(_I,bho),e(cp,vho),e(x,Fho),e(x,fp),e(fp,Wne),e(Wne,Tho),e(fp,Mho),e(fp,uI),e(uI,Eho),e(fp,Cho),e(x,who),e(x,mp),e(mp,Qne),e(Qne,Aho),e(mp,yho),e(mp,bI),e(bI,Lho),e(mp,xho),e(x,$ho),e(x,gp),e(gp,Hne),e(Hne,kho),e(gp,Sho),e(gp,vI),e(vI,Rho),e(gp,Pho),e(x,Bho),e(x,hp),e(hp,Une),e(Une,Iho),e(hp,qho),e(hp,FI),e(FI,Nho),e(hp,jho),e(x,Dho),e(x,pp),e(pp,Jne),e(Jne,Gho),e(pp,Oho),e(pp,TI),e(TI,Vho),e(pp,Xho),e(x,zho),e(x,_p),e(_p,Yne),e(Yne,Who),e(_p,Qho),e(_p,MI),e(MI,Hho),e(_p,Uho),e(x,Jho),e(x,up),e(up,Kne),e(Kne,Yho),e(up,Kho),e(up,EI),e(EI,Zho),e(up,epo),e(x,opo),e(x,bp),e(bp,Zne),e(Zne,rpo),e(bp,tpo),e(bp,CI),e(CI,apo),e(bp,npo),e(x,spo),e(x,vp),e(vp,ese),e(ese,lpo),e(vp,ipo),e(vp,wI),e(wI,dpo),e(vp,cpo),e(x,fpo),e(x,Fp),e(Fp,ose),e(ose,mpo),e(Fp,gpo),e(Fp,AI),e(AI,hpo),e(Fp,ppo),e(x,_po),e(x,Tp),e(Tp,rse),e(rse,upo),e(Tp,bpo),e(Tp,yI),e(yI,vpo),e(Tp,Fpo),e(x,Tpo),e(x,Mp),e(Mp,tse),e(tse,Mpo),e(Mp,Epo),e(Mp,LI),e(LI,Cpo),e(Mp,wpo),e(x,Apo),e(x,Ep),e(Ep,ase),e(ase,ypo),e(Ep,Lpo),e(Ep,xI),e(xI,xpo),e(Ep,$po),e(x,kpo),e(x,Cp),e(Cp,nse),e(nse,Spo),e(Cp,Rpo),e(Cp,$I),e($I,Ppo),e(Cp,Bpo),e(x,Ipo),e(x,wp),e(wp,sse),e(sse,qpo),e(wp,Npo),e(wp,kI),e(kI,jpo),e(wp,Dpo),e(x,Gpo),e(x,Ap),e(Ap,lse),e(lse,Opo),e(Ap,Vpo),e(Ap,SI),e(SI,Xpo),e(Ap,zpo),e(x,Wpo),e(x,yp),e(yp,ise),e(ise,Qpo),e(yp,Hpo),e(yp,RI),e(RI,Upo),e(yp,Jpo),e(x,Ypo),e(x,Lp),e(Lp,dse),e(dse,Kpo),e(Lp,Zpo),e(Lp,PI),e(PI,e_o),e(Lp,o_o),e(x,r_o),e(x,xp),e(xp,cse),e(cse,t_o),e(xp,a_o),e(xp,BI),e(BI,n_o),e(xp,s_o),e(x,l_o),e(x,$p),e($p,fse),e(fse,i_o),e($p,d_o),e($p,II),e(II,c_o),e($p,f_o),e(x,m_o),e(x,kp),e(kp,mse),e(mse,g_o),e(kp,h_o),e(kp,qI),e(qI,p_o),e(kp,__o),e(x,u_o),e(x,Rs),e(Rs,gse),e(gse,b_o),e(Rs,v_o),e(Rs,NI),e(NI,F_o),e(Rs,T_o),e(Rs,jI),e(jI,M_o),e(Rs,E_o),e(x,C_o),e(x,Sp),e(Sp,hse),e(hse,w_o),e(Sp,A_o),e(Sp,DI),e(DI,y_o),e(Sp,L_o),e(x,x_o),e(x,Rp),e(Rp,pse),e(pse,$_o),e(Rp,k_o),e(Rp,GI),e(GI,S_o),e(Rp,R_o),e(x,P_o),e(x,Pp),e(Pp,_se),e(_se,B_o),e(Pp,I_o),e(Pp,OI),e(OI,q_o),e(Pp,N_o),e(x,j_o),e(x,Bp),e(Bp,use),e(use,D_o),e(Bp,G_o),e(Bp,VI),e(VI,O_o),e(Bp,V_o),e(x,X_o),e(x,Ip),e(Ip,bse),e(bse,z_o),e(Ip,W_o),e(Ip,XI),e(XI,Q_o),e(Ip,H_o),e(x,U_o),e(x,qp),e(qp,vse),e(vse,J_o),e(qp,Y_o),e(qp,zI),e(zI,K_o),e(qp,Z_o),e(x,euo),e(x,Np),e(Np,Fse),e(Fse,ouo),e(Np,ruo),e(Np,WI),e(WI,tuo),e(Np,auo),e(x,nuo),e(x,jp),e(jp,Tse),e(Tse,suo),e(jp,luo),e(jp,QI),e(QI,iuo),e(jp,duo),e(x,cuo),e(x,Dp),e(Dp,Mse),e(Mse,fuo),e(Dp,muo),e(Dp,HI),e(HI,guo),e(Dp,huo),e(x,puo),e(x,Gp),e(Gp,Ese),e(Ese,_uo),e(Gp,uuo),e(Gp,UI),e(UI,buo),e(Gp,vuo),e(x,Fuo),e(x,Op),e(Op,Cse),e(Cse,Tuo),e(Op,Muo),e(Op,JI),e(JI,Euo),e(Op,Cuo),e(x,wuo),e(x,Vp),e(Vp,wse),e(wse,Auo),e(Vp,yuo),e(Vp,YI),e(YI,Luo),e(Vp,xuo),e(x,$uo),e(x,Xp),e(Xp,Ase),e(Ase,kuo),e(Xp,Suo),e(Xp,KI),e(KI,Ruo),e(Xp,Puo),e(x,Buo),e(x,zp),e(zp,yse),e(yse,Iuo),e(zp,quo),e(zp,ZI),e(ZI,Nuo),e(zp,juo),e(x,Duo),e(x,Wp),e(Wp,Lse),e(Lse,Guo),e(Wp,Ouo),e(Wp,eq),e(eq,Vuo),e(Wp,Xuo),e(x,zuo),e(x,Qp),e(Qp,xse),e(xse,Wuo),e(Qp,Quo),e(Qp,oq),e(oq,Huo),e(Qp,Uuo),e(x,Juo),e(x,Hp),e(Hp,$se),e($se,Yuo),e(Hp,Kuo),e(Hp,rq),e(rq,Zuo),e(Hp,e2o),e(x,o2o),e(x,Up),e(Up,kse),e(kse,r2o),e(Up,t2o),e(Up,tq),e(tq,a2o),e(Up,n2o),e(x,s2o),e(x,Jp),e(Jp,Sse),e(Sse,l2o),e(Jp,i2o),e(Jp,aq),e(aq,d2o),e(Jp,c2o),e(x,f2o),e(x,Yp),e(Yp,Rse),e(Rse,m2o),e(Yp,g2o),e(Yp,nq),e(nq,h2o),e(Yp,p2o),e(x,_2o),e(x,Kp),e(Kp,Pse),e(Pse,u2o),e(Kp,b2o),e(Kp,sq),e(sq,v2o),e(Kp,F2o),e(x,T2o),e(x,Zp),e(Zp,Bse),e(Bse,M2o),e(Zp,E2o),e(Zp,lq),e(lq,C2o),e(Zp,w2o),e(x,A2o),e(x,e_),e(e_,Ise),e(Ise,y2o),e(e_,L2o),e(e_,iq),e(iq,x2o),e(e_,$2o),e(x,k2o),e(x,o_),e(o_,qse),e(qse,S2o),e(o_,R2o),e(o_,dq),e(dq,P2o),e(o_,B2o),e(x,I2o),e(x,r_),e(r_,Nse),e(Nse,q2o),e(r_,N2o),e(r_,cq),e(cq,j2o),e(r_,D2o),e(x,G2o),e(x,t_),e(t_,jse),e(jse,O2o),e(t_,V2o),e(t_,fq),e(fq,X2o),e(t_,z2o),e(x,W2o),e(x,a_),e(a_,Dse),e(Dse,Q2o),e(a_,H2o),e(a_,mq),e(mq,U2o),e(a_,J2o),e(x,Y2o),e(x,n_),e(n_,Gse),e(Gse,K2o),e(n_,Z2o),e(n_,gq),e(gq,e1o),e(n_,o1o),e(x,r1o),e(x,s_),e(s_,Ose),e(Ose,t1o),e(s_,a1o),e(s_,hq),e(hq,n1o),e(s_,s1o),e(x,l1o),e(x,l_),e(l_,Vse),e(Vse,i1o),e(l_,d1o),e(l_,pq),e(pq,c1o),e(l_,f1o),e(x,m1o),e(x,i_),e(i_,Xse),e(Xse,g1o),e(i_,h1o),e(i_,_q),e(_q,p1o),e(i_,_1o),e(x,u1o),e(x,d_),e(d_,zse),e(zse,b1o),e(d_,v1o),e(d_,uq),e(uq,F1o),e(d_,T1o),e(x,M1o),e(x,c_),e(c_,Wse),e(Wse,E1o),e(c_,C1o),e(c_,bq),e(bq,w1o),e(c_,A1o),e(x,y1o),e(x,f_),e(f_,Qse),e(Qse,L1o),e(f_,x1o),e(f_,vq),e(vq,$1o),e(f_,k1o),e(x,S1o),e(x,m_),e(m_,Hse),e(Hse,R1o),e(m_,P1o),e(m_,Fq),e(Fq,B1o),e(m_,I1o),e(x,q1o),e(x,g_),e(g_,Use),e(Use,N1o),e(g_,j1o),e(g_,Tq),e(Tq,D1o),e(g_,G1o),e(x,O1o),e(x,h_),e(h_,Jse),e(Jse,V1o),e(h_,X1o),e(h_,Mq),e(Mq,z1o),e(h_,W1o),e(x,Q1o),e(x,p_),e(p_,Yse),e(Yse,H1o),e(p_,U1o),e(p_,Eq),e(Eq,J1o),e(p_,Y1o),e(x,K1o),e(x,__),e(__,Kse),e(Kse,Z1o),e(__,ebo),e(__,Cq),e(Cq,obo),e(__,rbo),e(x,tbo),e(x,u_),e(u_,Zse),e(Zse,abo),e(u_,nbo),e(u_,wq),e(wq,sbo),e(u_,lbo),e(x,ibo),e(x,b_),e(b_,ele),e(ele,dbo),e(b_,cbo),e(b_,Aq),e(Aq,fbo),e(b_,mbo),e(x,gbo),e(x,v_),e(v_,ole),e(ole,hbo),e(v_,pbo),e(v_,yq),e(yq,_bo),e(v_,ubo),e(x,bbo),e(x,F_),e(F_,rle),e(rle,vbo),e(F_,Fbo),e(F_,Lq),e(Lq,Tbo),e(F_,Mbo),e(x,Ebo),e(x,T_),e(T_,tle),e(tle,Cbo),e(T_,wbo),e(T_,xq),e(xq,Abo),e(T_,ybo),e(x,Lbo),e(x,M_),e(M_,ale),e(ale,xbo),e(M_,$bo),e(M_,$q),e($q,kbo),e(M_,Sbo),e(x,Rbo),e(x,E_),e(E_,nle),e(nle,Pbo),e(E_,Bbo),e(E_,kq),e(kq,Ibo),e(E_,qbo),e(x,Nbo),e(x,C_),e(C_,sle),e(sle,jbo),e(C_,Dbo),e(C_,Sq),e(Sq,Gbo),e(C_,Obo),e(x,Vbo),e(x,w_),e(w_,lle),e(lle,Xbo),e(w_,zbo),e(w_,Rq),e(Rq,Wbo),e(w_,Qbo),e(x,Hbo),e(x,A_),e(A_,ile),e(ile,Ubo),e(A_,Jbo),e(A_,Pq),e(Pq,Ybo),e(A_,Kbo),e(x,Zbo),e(x,y_),e(y_,dle),e(dle,e5o),e(y_,o5o),e(y_,Bq),e(Bq,r5o),e(y_,t5o),e(x,a5o),e(x,L_),e(L_,cle),e(cle,n5o),e(L_,s5o),e(L_,Iq),e(Iq,l5o),e(L_,i5o),e(x,d5o),e(x,x_),e(x_,fle),e(fle,c5o),e(x_,f5o),e(x_,qq),e(qq,m5o),e(x_,g5o),e(x,h5o),e(x,$_),e($_,mle),e(mle,p5o),e($_,_5o),e($_,Nq),e(Nq,u5o),e($_,b5o),e(x,v5o),e(x,k_),e(k_,gle),e(gle,F5o),e(k_,T5o),e(k_,jq),e(jq,M5o),e(k_,E5o),e(x,C5o),e(x,S_),e(S_,hle),e(hle,w5o),e(S_,A5o),e(S_,Dq),e(Dq,y5o),e(S_,L5o),e(x,x5o),e(x,R_),e(R_,ple),e(ple,$5o),e(R_,k5o),e(R_,Gq),e(Gq,S5o),e(R_,R5o),e(x,P5o),e(x,P_),e(P_,_le),e(_le,B5o),e(P_,I5o),e(P_,Oq),e(Oq,q5o),e(P_,N5o),e(x,j5o),e(x,B_),e(B_,ule),e(ule,D5o),e(B_,G5o),e(B_,Vq),e(Vq,O5o),e(B_,V5o),e(x,X5o),e(x,I_),e(I_,ble),e(ble,z5o),e(I_,W5o),e(I_,Xq),e(Xq,Q5o),e(I_,H5o),e(x,U5o),e(x,q_),e(q_,vle),e(vle,J5o),e(q_,Y5o),e(q_,zq),e(zq,K5o),e(q_,Z5o),e(x,evo),e(x,N_),e(N_,Fle),e(Fle,ovo),e(N_,rvo),e(N_,Wq),e(Wq,tvo),e(N_,avo),e(x,nvo),e(x,j_),e(j_,Tle),e(Tle,svo),e(j_,lvo),e(j_,Qq),e(Qq,ivo),e(j_,dvo),e(x,cvo),e(x,D_),e(D_,Mle),e(Mle,fvo),e(D_,mvo),e(D_,Hq),e(Hq,gvo),e(D_,hvo),e(x,pvo),e(x,G_),e(G_,Ele),e(Ele,_vo),e(G_,uvo),e(G_,Uq),e(Uq,bvo),e(G_,vvo),e(x,Fvo),e(x,O_),e(O_,Cle),e(Cle,Tvo),e(O_,Mvo),e(O_,Jq),e(Jq,Evo),e(O_,Cvo),e(x,wvo),e(x,V_),e(V_,wle),e(wle,Avo),e(V_,yvo),e(V_,Yq),e(Yq,Lvo),e(V_,xvo),e(Je,$vo),e(Je,X_),e(X_,kvo),e(X_,Ale),e(Ale,Svo),e(X_,Rvo),e(X_,yle),e(yle,Pvo),e(Je,Bvo),M(z_,Je,null),b(f,rqe,u),b(f,yi,u),e(yi,W_),e(W_,Lle),M(O6,Lle,null),e(yi,Ivo),e(yi,xle),e(xle,qvo),b(f,tqe,u),b(f,xo,u),M(V6,xo,null),e(xo,Nvo),e(xo,Li),e(Li,jvo),e(Li,Kq),e(Kq,Dvo),e(Li,Gvo),e(Li,Zq),e(Zq,Ovo),e(Li,Vvo),e(xo,Xvo),e(xo,X6),e(X6,zvo),e(X6,$le),e($le,Wvo),e(X6,Qvo),e(xo,Hvo),e(xo,at),M(z6,at,null),e(at,Uvo),e(at,kle),e(kle,Jvo),e(at,Yvo),e(at,xi),e(xi,Kvo),e(xi,Sle),e(Sle,Zvo),e(xi,e3o),e(xi,eN),e(eN,o3o),e(xi,r3o),e(at,t3o),M(Q_,at,null),e(xo,a3o),e(xo,Ye),M(W6,Ye,null),e(Ye,n3o),e(Ye,Rle),e(Rle,s3o),e(Ye,l3o),e(Ye,xa),e(xa,i3o),e(xa,Ple),e(Ple,d3o),e(xa,c3o),e(xa,Ble),e(Ble,f3o),e(xa,m3o),e(xa,Ile),e(Ile,g3o),e(xa,h3o),e(Ye,p3o),e(Ye,G),e(G,H_),e(H_,qle),e(qle,_3o),e(H_,u3o),e(H_,oN),e(oN,b3o),e(H_,v3o),e(G,F3o),e(G,U_),e(U_,Nle),e(Nle,T3o),e(U_,M3o),e(U_,rN),e(rN,E3o),e(U_,C3o),e(G,w3o),e(G,J_),e(J_,jle),e(jle,A3o),e(J_,y3o),e(J_,tN),e(tN,L3o),e(J_,x3o),e(G,$3o),e(G,Y_),e(Y_,Dle),e(Dle,k3o),e(Y_,S3o),e(Y_,aN),e(aN,R3o),e(Y_,P3o),e(G,B3o),e(G,K_),e(K_,Gle),e(Gle,I3o),e(K_,q3o),e(K_,nN),e(nN,N3o),e(K_,j3o),e(G,D3o),e(G,Z_),e(Z_,Ole),e(Ole,G3o),e(Z_,O3o),e(Z_,sN),e(sN,V3o),e(Z_,X3o),e(G,z3o),e(G,eu),e(eu,Vle),e(Vle,W3o),e(eu,Q3o),e(eu,lN),e(lN,H3o),e(eu,U3o),e(G,J3o),e(G,ou),e(ou,Xle),e(Xle,Y3o),e(ou,K3o),e(ou,iN),e(iN,Z3o),e(ou,eFo),e(G,oFo),e(G,ru),e(ru,zle),e(zle,rFo),e(ru,tFo),e(ru,dN),e(dN,aFo),e(ru,nFo),e(G,sFo),e(G,tu),e(tu,Wle),e(Wle,lFo),e(tu,iFo),e(tu,cN),e(cN,dFo),e(tu,cFo),e(G,fFo),e(G,au),e(au,Qle),e(Qle,mFo),e(au,gFo),e(au,fN),e(fN,hFo),e(au,pFo),e(G,_Fo),e(G,nu),e(nu,Hle),e(Hle,uFo),e(nu,bFo),e(nu,mN),e(mN,vFo),e(nu,FFo),e(G,TFo),e(G,su),e(su,Ule),e(Ule,MFo),e(su,EFo),e(su,gN),e(gN,CFo),e(su,wFo),e(G,AFo),e(G,lu),e(lu,Jle),e(Jle,yFo),e(lu,LFo),e(lu,hN),e(hN,xFo),e(lu,$Fo),e(G,kFo),e(G,iu),e(iu,Yle),e(Yle,SFo),e(iu,RFo),e(iu,pN),e(pN,PFo),e(iu,BFo),e(G,IFo),e(G,du),e(du,Kle),e(Kle,qFo),e(du,NFo),e(du,_N),e(_N,jFo),e(du,DFo),e(G,GFo),e(G,cu),e(cu,Zle),e(Zle,OFo),e(cu,VFo),e(cu,uN),e(uN,XFo),e(cu,zFo),e(G,WFo),e(G,fu),e(fu,eie),e(eie,QFo),e(fu,HFo),e(fu,bN),e(bN,UFo),e(fu,JFo),e(G,YFo),e(G,mu),e(mu,oie),e(oie,KFo),e(mu,ZFo),e(mu,vN),e(vN,eTo),e(mu,oTo),e(G,rTo),e(G,gu),e(gu,rie),e(rie,tTo),e(gu,aTo),e(gu,FN),e(FN,nTo),e(gu,sTo),e(G,lTo),e(G,hu),e(hu,tie),e(tie,iTo),e(hu,dTo),e(hu,TN),e(TN,cTo),e(hu,fTo),e(G,mTo),e(G,pu),e(pu,aie),e(aie,gTo),e(pu,hTo),e(pu,MN),e(MN,pTo),e(pu,_To),e(G,uTo),e(G,_u),e(_u,nie),e(nie,bTo),e(_u,vTo),e(_u,EN),e(EN,FTo),e(_u,TTo),e(G,MTo),e(G,uu),e(uu,sie),e(sie,ETo),e(uu,CTo),e(uu,CN),e(CN,wTo),e(uu,ATo),e(G,yTo),e(G,bu),e(bu,lie),e(lie,LTo),e(bu,xTo),e(bu,wN),e(wN,$To),e(bu,kTo),e(G,STo),e(G,vu),e(vu,iie),e(iie,RTo),e(vu,PTo),e(vu,AN),e(AN,BTo),e(vu,ITo),e(G,qTo),e(G,Fu),e(Fu,die),e(die,NTo),e(Fu,jTo),e(Fu,yN),e(yN,DTo),e(Fu,GTo),e(G,OTo),e(G,Tu),e(Tu,cie),e(cie,VTo),e(Tu,XTo),e(Tu,LN),e(LN,zTo),e(Tu,WTo),e(G,QTo),e(G,Mu),e(Mu,fie),e(fie,HTo),e(Mu,UTo),e(Mu,xN),e(xN,JTo),e(Mu,YTo),e(G,KTo),e(G,Eu),e(Eu,mie),e(mie,ZTo),e(Eu,e7o),e(Eu,$N),e($N,o7o),e(Eu,r7o),e(G,t7o),e(G,Cu),e(Cu,gie),e(gie,a7o),e(Cu,n7o),e(Cu,kN),e(kN,s7o),e(Cu,l7o),e(G,i7o),e(G,wu),e(wu,hie),e(hie,d7o),e(wu,c7o),e(wu,SN),e(SN,f7o),e(wu,m7o),e(G,g7o),e(G,Au),e(Au,pie),e(pie,h7o),e(Au,p7o),e(Au,RN),e(RN,_7o),e(Au,u7o),e(G,b7o),e(G,yu),e(yu,_ie),e(_ie,v7o),e(yu,F7o),e(yu,PN),e(PN,T7o),e(yu,M7o),e(G,E7o),e(G,Lu),e(Lu,uie),e(uie,C7o),e(Lu,w7o),e(Lu,BN),e(BN,A7o),e(Lu,y7o),e(G,L7o),e(G,xu),e(xu,bie),e(bie,x7o),e(xu,$7o),e(xu,IN),e(IN,k7o),e(xu,S7o),e(G,R7o),e(G,$u),e($u,vie),e(vie,P7o),e($u,B7o),e($u,qN),e(qN,I7o),e($u,q7o),e(G,N7o),e(G,ku),e(ku,Fie),e(Fie,j7o),e(ku,D7o),e(ku,NN),e(NN,G7o),e(ku,O7o),e(G,V7o),e(G,Su),e(Su,Tie),e(Tie,X7o),e(Su,z7o),e(Su,jN),e(jN,W7o),e(Su,Q7o),e(G,H7o),e(G,Ru),e(Ru,Mie),e(Mie,U7o),e(Ru,J7o),e(Ru,DN),e(DN,Y7o),e(Ru,K7o),e(G,Z7o),e(G,Pu),e(Pu,Eie),e(Eie,eMo),e(Pu,oMo),e(Pu,GN),e(GN,rMo),e(Pu,tMo),e(Ye,aMo),e(Ye,Bu),e(Bu,nMo),e(Bu,Cie),e(Cie,sMo),e(Bu,lMo),e(Bu,wie),e(wie,iMo),e(Ye,dMo),M(Iu,Ye,null),b(f,aqe,u),b(f,$i,u),e($i,qu),e(qu,Aie),M(Q6,Aie,null),e($i,cMo),e($i,yie),e(yie,fMo),b(f,nqe,u),b(f,$o,u),M(H6,$o,null),e($o,mMo),e($o,ki),e(ki,gMo),e(ki,ON),e(ON,hMo),e(ki,pMo),e(ki,VN),e(VN,_Mo),e(ki,uMo),e($o,bMo),e($o,U6),e(U6,vMo),e(U6,Lie),e(Lie,FMo),e(U6,TMo),e($o,MMo),e($o,nt),M(J6,nt,null),e(nt,EMo),e(nt,xie),e(xie,CMo),e(nt,wMo),e(nt,Si),e(Si,AMo),e(Si,$ie),e($ie,yMo),e(Si,LMo),e(Si,XN),e(XN,xMo),e(Si,$Mo),e(nt,kMo),M(Nu,nt,null),e($o,SMo),e($o,Ke),M(Y6,Ke,null),e(Ke,RMo),e(Ke,kie),e(kie,PMo),e(Ke,BMo),e(Ke,$a),e($a,IMo),e($a,Sie),e(Sie,qMo),e($a,NMo),e($a,Rie),e(Rie,jMo),e($a,DMo),e($a,Pie),e(Pie,GMo),e($a,OMo),e(Ke,VMo),e(Ke,z),e(z,ju),e(ju,Bie),e(Bie,XMo),e(ju,zMo),e(ju,zN),e(zN,WMo),e(ju,QMo),e(z,HMo),e(z,Du),e(Du,Iie),e(Iie,UMo),e(Du,JMo),e(Du,WN),e(WN,YMo),e(Du,KMo),e(z,ZMo),e(z,Gu),e(Gu,qie),e(qie,e4o),e(Gu,o4o),e(Gu,QN),e(QN,r4o),e(Gu,t4o),e(z,a4o),e(z,Ou),e(Ou,Nie),e(Nie,n4o),e(Ou,s4o),e(Ou,HN),e(HN,l4o),e(Ou,i4o),e(z,d4o),e(z,Vu),e(Vu,jie),e(jie,c4o),e(Vu,f4o),e(Vu,UN),e(UN,m4o),e(Vu,g4o),e(z,h4o),e(z,Xu),e(Xu,Die),e(Die,p4o),e(Xu,_4o),e(Xu,JN),e(JN,u4o),e(Xu,b4o),e(z,v4o),e(z,zu),e(zu,Gie),e(Gie,F4o),e(zu,T4o),e(zu,YN),e(YN,M4o),e(zu,E4o),e(z,C4o),e(z,Wu),e(Wu,Oie),e(Oie,w4o),e(Wu,A4o),e(Wu,KN),e(KN,y4o),e(Wu,L4o),e(z,x4o),e(z,Qu),e(Qu,Vie),e(Vie,$4o),e(Qu,k4o),e(Qu,ZN),e(ZN,S4o),e(Qu,R4o),e(z,P4o),e(z,Hu),e(Hu,Xie),e(Xie,B4o),e(Hu,I4o),e(Hu,ej),e(ej,q4o),e(Hu,N4o),e(z,j4o),e(z,Uu),e(Uu,zie),e(zie,D4o),e(Uu,G4o),e(Uu,oj),e(oj,O4o),e(Uu,V4o),e(z,X4o),e(z,Ju),e(Ju,Wie),e(Wie,z4o),e(Ju,W4o),e(Ju,rj),e(rj,Q4o),e(Ju,H4o),e(z,U4o),e(z,Yu),e(Yu,Qie),e(Qie,J4o),e(Yu,Y4o),e(Yu,tj),e(tj,K4o),e(Yu,Z4o),e(z,eEo),e(z,Ku),e(Ku,Hie),e(Hie,oEo),e(Ku,rEo),e(Ku,aj),e(aj,tEo),e(Ku,aEo),e(z,nEo),e(z,Zu),e(Zu,Uie),e(Uie,sEo),e(Zu,lEo),e(Zu,nj),e(nj,iEo),e(Zu,dEo),e(z,cEo),e(z,e2),e(e2,Jie),e(Jie,fEo),e(e2,mEo),e(e2,sj),e(sj,gEo),e(e2,hEo),e(z,pEo),e(z,o2),e(o2,Yie),e(Yie,_Eo),e(o2,uEo),e(o2,lj),e(lj,bEo),e(o2,vEo),e(z,FEo),e(z,r2),e(r2,Kie),e(Kie,TEo),e(r2,MEo),e(r2,ij),e(ij,EEo),e(r2,CEo),e(z,wEo),e(z,t2),e(t2,Zie),e(Zie,AEo),e(t2,yEo),e(t2,dj),e(dj,LEo),e(t2,xEo),e(z,$Eo),e(z,a2),e(a2,ede),e(ede,kEo),e(a2,SEo),e(a2,cj),e(cj,REo),e(a2,PEo),e(z,BEo),e(z,n2),e(n2,ode),e(ode,IEo),e(n2,qEo),e(n2,fj),e(fj,NEo),e(n2,jEo),e(z,DEo),e(z,s2),e(s2,rde),e(rde,GEo),e(s2,OEo),e(s2,mj),e(mj,VEo),e(s2,XEo),e(z,zEo),e(z,l2),e(l2,tde),e(tde,WEo),e(l2,QEo),e(l2,gj),e(gj,HEo),e(l2,UEo),e(z,JEo),e(z,i2),e(i2,ade),e(ade,YEo),e(i2,KEo),e(i2,hj),e(hj,ZEo),e(i2,eCo),e(z,oCo),e(z,d2),e(d2,nde),e(nde,rCo),e(d2,tCo),e(d2,pj),e(pj,aCo),e(d2,nCo),e(z,sCo),e(z,c2),e(c2,sde),e(sde,lCo),e(c2,iCo),e(c2,_j),e(_j,dCo),e(c2,cCo),e(z,fCo),e(z,f2),e(f2,lde),e(lde,mCo),e(f2,gCo),e(f2,uj),e(uj,hCo),e(f2,pCo),e(z,_Co),e(z,m2),e(m2,ide),e(ide,uCo),e(m2,bCo),e(m2,bj),e(bj,vCo),e(m2,FCo),e(z,TCo),e(z,g2),e(g2,dde),e(dde,MCo),e(g2,ECo),e(g2,vj),e(vj,CCo),e(g2,wCo),e(z,ACo),e(z,h2),e(h2,cde),e(cde,yCo),e(h2,LCo),e(h2,Fj),e(Fj,xCo),e(h2,$Co),e(z,kCo),e(z,p2),e(p2,fde),e(fde,SCo),e(p2,RCo),e(p2,Tj),e(Tj,PCo),e(p2,BCo),e(z,ICo),e(z,_2),e(_2,mde),e(mde,qCo),e(_2,NCo),e(_2,Mj),e(Mj,jCo),e(_2,DCo),e(z,GCo),e(z,u2),e(u2,gde),e(gde,OCo),e(u2,VCo),e(u2,Ej),e(Ej,XCo),e(u2,zCo),e(z,WCo),e(z,b2),e(b2,hde),e(hde,QCo),e(b2,HCo),e(b2,Cj),e(Cj,UCo),e(b2,JCo),e(z,YCo),e(z,v2),e(v2,pde),e(pde,KCo),e(v2,ZCo),e(v2,wj),e(wj,ewo),e(v2,owo),e(z,rwo),e(z,F2),e(F2,_de),e(_de,two),e(F2,awo),e(F2,Aj),e(Aj,nwo),e(F2,swo),e(Ke,lwo),e(Ke,T2),e(T2,iwo),e(T2,ude),e(ude,dwo),e(T2,cwo),e(T2,bde),e(bde,fwo),e(Ke,mwo),M(M2,Ke,null),b(f,sqe,u),b(f,Ri,u),e(Ri,E2),e(E2,vde),M(K6,vde,null),e(Ri,gwo),e(Ri,Fde),e(Fde,hwo),b(f,lqe,u),b(f,ko,u),M(Z6,ko,null),e(ko,pwo),e(ko,Pi),e(Pi,_wo),e(Pi,yj),e(yj,uwo),e(Pi,bwo),e(Pi,Lj),e(Lj,vwo),e(Pi,Fwo),e(ko,Two),e(ko,ey),e(ey,Mwo),e(ey,Tde),e(Tde,Ewo),e(ey,Cwo),e(ko,wwo),e(ko,st),M(oy,st,null),e(st,Awo),e(st,Mde),e(Mde,ywo),e(st,Lwo),e(st,Bi),e(Bi,xwo),e(Bi,Ede),e(Ede,$wo),e(Bi,kwo),e(Bi,xj),e(xj,Swo),e(Bi,Rwo),e(st,Pwo),M(C2,st,null),e(ko,Bwo),e(ko,Ze),M(ry,Ze,null),e(Ze,Iwo),e(Ze,Cde),e(Cde,qwo),e(Ze,Nwo),e(Ze,ka),e(ka,jwo),e(ka,wde),e(wde,Dwo),e(ka,Gwo),e(ka,Ade),e(Ade,Owo),e(ka,Vwo),e(ka,yde),e(yde,Xwo),e(ka,zwo),e(Ze,Wwo),e(Ze,W),e(W,w2),e(w2,Lde),e(Lde,Qwo),e(w2,Hwo),e(w2,$j),e($j,Uwo),e(w2,Jwo),e(W,Ywo),e(W,A2),e(A2,xde),e(xde,Kwo),e(A2,Zwo),e(A2,kj),e(kj,e0o),e(A2,o0o),e(W,r0o),e(W,y2),e(y2,$de),e($de,t0o),e(y2,a0o),e(y2,Sj),e(Sj,n0o),e(y2,s0o),e(W,l0o),e(W,L2),e(L2,kde),e(kde,i0o),e(L2,d0o),e(L2,Rj),e(Rj,c0o),e(L2,f0o),e(W,m0o),e(W,x2),e(x2,Sde),e(Sde,g0o),e(x2,h0o),e(x2,Pj),e(Pj,p0o),e(x2,_0o),e(W,u0o),e(W,$2),e($2,Rde),e(Rde,b0o),e($2,v0o),e($2,Bj),e(Bj,F0o),e($2,T0o),e(W,M0o),e(W,k2),e(k2,Pde),e(Pde,E0o),e(k2,C0o),e(k2,Ij),e(Ij,w0o),e(k2,A0o),e(W,y0o),e(W,S2),e(S2,Bde),e(Bde,L0o),e(S2,x0o),e(S2,qj),e(qj,$0o),e(S2,k0o),e(W,S0o),e(W,R2),e(R2,Ide),e(Ide,R0o),e(R2,P0o),e(R2,Nj),e(Nj,B0o),e(R2,I0o),e(W,q0o),e(W,P2),e(P2,qde),e(qde,N0o),e(P2,j0o),e(P2,jj),e(jj,D0o),e(P2,G0o),e(W,O0o),e(W,B2),e(B2,Nde),e(Nde,V0o),e(B2,X0o),e(B2,Dj),e(Dj,z0o),e(B2,W0o),e(W,Q0o),e(W,I2),e(I2,jde),e(jde,H0o),e(I2,U0o),e(I2,Gj),e(Gj,J0o),e(I2,Y0o),e(W,K0o),e(W,q2),e(q2,Dde),e(Dde,Z0o),e(q2,eAo),e(q2,Oj),e(Oj,oAo),e(q2,rAo),e(W,tAo),e(W,N2),e(N2,Gde),e(Gde,aAo),e(N2,nAo),e(N2,Vj),e(Vj,sAo),e(N2,lAo),e(W,iAo),e(W,j2),e(j2,Ode),e(Ode,dAo),e(j2,cAo),e(j2,Xj),e(Xj,fAo),e(j2,mAo),e(W,gAo),e(W,D2),e(D2,Vde),e(Vde,hAo),e(D2,pAo),e(D2,zj),e(zj,_Ao),e(D2,uAo),e(W,bAo),e(W,G2),e(G2,Xde),e(Xde,vAo),e(G2,FAo),e(G2,Wj),e(Wj,TAo),e(G2,MAo),e(W,EAo),e(W,O2),e(O2,zde),e(zde,CAo),e(O2,wAo),e(O2,Qj),e(Qj,AAo),e(O2,yAo),e(W,LAo),e(W,V2),e(V2,Wde),e(Wde,xAo),e(V2,$Ao),e(V2,Hj),e(Hj,kAo),e(V2,SAo),e(W,RAo),e(W,X2),e(X2,Qde),e(Qde,PAo),e(X2,BAo),e(X2,Uj),e(Uj,IAo),e(X2,qAo),e(W,NAo),e(W,z2),e(z2,Hde),e(Hde,jAo),e(z2,DAo),e(z2,Jj),e(Jj,GAo),e(z2,OAo),e(W,VAo),e(W,W2),e(W2,Ude),e(Ude,XAo),e(W2,zAo),e(W2,Yj),e(Yj,WAo),e(W2,QAo),e(W,HAo),e(W,Q2),e(Q2,Jde),e(Jde,UAo),e(Q2,JAo),e(Q2,Kj),e(Kj,YAo),e(Q2,KAo),e(W,ZAo),e(W,H2),e(H2,Yde),e(Yde,e6o),e(H2,o6o),e(H2,Zj),e(Zj,r6o),e(H2,t6o),e(W,a6o),e(W,U2),e(U2,Kde),e(Kde,n6o),e(U2,s6o),e(U2,eD),e(eD,l6o),e(U2,i6o),e(W,d6o),e(W,J2),e(J2,Zde),e(Zde,c6o),e(J2,f6o),e(J2,oD),e(oD,m6o),e(J2,g6o),e(W,h6o),e(W,Y2),e(Y2,ece),e(ece,p6o),e(Y2,_6o),e(Y2,rD),e(rD,u6o),e(Y2,b6o),e(W,v6o),e(W,K2),e(K2,oce),e(oce,F6o),e(K2,T6o),e(K2,tD),e(tD,M6o),e(K2,E6o),e(W,C6o),e(W,Z2),e(Z2,rce),e(rce,w6o),e(Z2,A6o),e(Z2,aD),e(aD,y6o),e(Z2,L6o),e(W,x6o),e(W,e1),e(e1,tce),e(tce,$6o),e(e1,k6o),e(e1,nD),e(nD,S6o),e(e1,R6o),e(W,P6o),e(W,o1),e(o1,ace),e(ace,B6o),e(o1,I6o),e(o1,nce),e(nce,q6o),e(o1,N6o),e(W,j6o),e(W,r1),e(r1,sce),e(sce,D6o),e(r1,G6o),e(r1,sD),e(sD,O6o),e(r1,V6o),e(W,X6o),e(W,t1),e(t1,lce),e(lce,z6o),e(t1,W6o),e(t1,lD),e(lD,Q6o),e(t1,H6o),e(W,U6o),e(W,a1),e(a1,ice),e(ice,J6o),e(a1,Y6o),e(a1,iD),e(iD,K6o),e(a1,Z6o),e(W,eyo),e(W,n1),e(n1,dce),e(dce,oyo),e(n1,ryo),e(n1,dD),e(dD,tyo),e(n1,ayo),e(Ze,nyo),e(Ze,s1),e(s1,syo),e(s1,cce),e(cce,lyo),e(s1,iyo),e(s1,fce),e(fce,dyo),e(Ze,cyo),M(l1,Ze,null),b(f,iqe,u),b(f,Ii,u),e(Ii,i1),e(i1,mce),M(ty,mce,null),e(Ii,fyo),e(Ii,gce),e(gce,myo),b(f,dqe,u),b(f,So,u),M(ay,So,null),e(So,gyo),e(So,qi),e(qi,hyo),e(qi,cD),e(cD,pyo),e(qi,_yo),e(qi,fD),e(fD,uyo),e(qi,byo),e(So,vyo),e(So,ny),e(ny,Fyo),e(ny,hce),e(hce,Tyo),e(ny,Myo),e(So,Eyo),e(So,lt),M(sy,lt,null),e(lt,Cyo),e(lt,pce),e(pce,wyo),e(lt,Ayo),e(lt,Ni),e(Ni,yyo),e(Ni,_ce),e(_ce,Lyo),e(Ni,xyo),e(Ni,mD),e(mD,$yo),e(Ni,kyo),e(lt,Syo),M(d1,lt,null),e(So,Ryo),e(So,eo),M(ly,eo,null),e(eo,Pyo),e(eo,uce),e(uce,Byo),e(eo,Iyo),e(eo,Sa),e(Sa,qyo),e(Sa,bce),e(bce,Nyo),e(Sa,jyo),e(Sa,vce),e(vce,Dyo),e(Sa,Gyo),e(Sa,Fce),e(Fce,Oyo),e(Sa,Vyo),e(eo,Xyo),e(eo,_e),e(_e,c1),e(c1,Tce),e(Tce,zyo),e(c1,Wyo),e(c1,gD),e(gD,Qyo),e(c1,Hyo),e(_e,Uyo),e(_e,f1),e(f1,Mce),e(Mce,Jyo),e(f1,Yyo),e(f1,hD),e(hD,Kyo),e(f1,Zyo),e(_e,eLo),e(_e,m1),e(m1,Ece),e(Ece,oLo),e(m1,rLo),e(m1,pD),e(pD,tLo),e(m1,aLo),e(_e,nLo),e(_e,g1),e(g1,Cce),e(Cce,sLo),e(g1,lLo),e(g1,_D),e(_D,iLo),e(g1,dLo),e(_e,cLo),e(_e,h1),e(h1,wce),e(wce,fLo),e(h1,mLo),e(h1,uD),e(uD,gLo),e(h1,hLo),e(_e,pLo),e(_e,p1),e(p1,Ace),e(Ace,_Lo),e(p1,uLo),e(p1,bD),e(bD,bLo),e(p1,vLo),e(_e,FLo),e(_e,_1),e(_1,yce),e(yce,TLo),e(_1,MLo),e(_1,vD),e(vD,ELo),e(_1,CLo),e(_e,wLo),e(_e,u1),e(u1,Lce),e(Lce,ALo),e(u1,yLo),e(u1,FD),e(FD,LLo),e(u1,xLo),e(_e,$Lo),e(_e,b1),e(b1,xce),e(xce,kLo),e(b1,SLo),e(b1,TD),e(TD,RLo),e(b1,PLo),e(_e,BLo),e(_e,v1),e(v1,$ce),e($ce,ILo),e(v1,qLo),e(v1,MD),e(MD,NLo),e(v1,jLo),e(_e,DLo),e(_e,F1),e(F1,kce),e(kce,GLo),e(F1,OLo),e(F1,ED),e(ED,VLo),e(F1,XLo),e(_e,zLo),e(_e,T1),e(T1,Sce),e(Sce,WLo),e(T1,QLo),e(T1,CD),e(CD,HLo),e(T1,ULo),e(_e,JLo),e(_e,M1),e(M1,Rce),e(Rce,YLo),e(M1,KLo),e(M1,wD),e(wD,ZLo),e(M1,e8o),e(_e,o8o),e(_e,E1),e(E1,Pce),e(Pce,r8o),e(E1,t8o),e(E1,AD),e(AD,a8o),e(E1,n8o),e(_e,s8o),e(_e,C1),e(C1,Bce),e(Bce,l8o),e(C1,i8o),e(C1,yD),e(yD,d8o),e(C1,c8o),e(_e,f8o),e(_e,w1),e(w1,Ice),e(Ice,m8o),e(w1,g8o),e(w1,LD),e(LD,h8o),e(w1,p8o),e(eo,_8o),e(eo,A1),e(A1,u8o),e(A1,qce),e(qce,b8o),e(A1,v8o),e(A1,Nce),e(Nce,F8o),e(eo,T8o),M(y1,eo,null),b(f,cqe,u),b(f,ji,u),e(ji,L1),e(L1,jce),M(iy,jce,null),e(ji,M8o),e(ji,Dce),e(Dce,E8o),b(f,fqe,u),b(f,Ro,u),M(dy,Ro,null),e(Ro,C8o),e(Ro,Di),e(Di,w8o),e(Di,xD),e(xD,A8o),e(Di,y8o),e(Di,$D),e($D,L8o),e(Di,x8o),e(Ro,$8o),e(Ro,cy),e(cy,k8o),e(cy,Gce),e(Gce,S8o),e(cy,R8o),e(Ro,P8o),e(Ro,it),M(fy,it,null),e(it,B8o),e(it,Oce),e(Oce,I8o),e(it,q8o),e(it,Gi),e(Gi,N8o),e(Gi,Vce),e(Vce,j8o),e(Gi,D8o),e(Gi,kD),e(kD,G8o),e(Gi,O8o),e(it,V8o),M(x1,it,null),e(Ro,X8o),e(Ro,oo),M(my,oo,null),e(oo,z8o),e(oo,Xce),e(Xce,W8o),e(oo,Q8o),e(oo,Ra),e(Ra,H8o),e(Ra,zce),e(zce,U8o),e(Ra,J8o),e(Ra,Wce),e(Wce,Y8o),e(Ra,K8o),e(Ra,Qce),e(Qce,Z8o),e(Ra,exo),e(oo,oxo),e(oo,q),e(q,$1),e($1,Hce),e(Hce,rxo),e($1,txo),e($1,SD),e(SD,axo),e($1,nxo),e(q,sxo),e(q,k1),e(k1,Uce),e(Uce,lxo),e(k1,ixo),e(k1,RD),e(RD,dxo),e(k1,cxo),e(q,fxo),e(q,S1),e(S1,Jce),e(Jce,mxo),e(S1,gxo),e(S1,PD),e(PD,hxo),e(S1,pxo),e(q,_xo),e(q,R1),e(R1,Yce),e(Yce,uxo),e(R1,bxo),e(R1,BD),e(BD,vxo),e(R1,Fxo),e(q,Txo),e(q,P1),e(P1,Kce),e(Kce,Mxo),e(P1,Exo),e(P1,ID),e(ID,Cxo),e(P1,wxo),e(q,Axo),e(q,B1),e(B1,Zce),e(Zce,yxo),e(B1,Lxo),e(B1,qD),e(qD,xxo),e(B1,$xo),e(q,kxo),e(q,I1),e(I1,efe),e(efe,Sxo),e(I1,Rxo),e(I1,ND),e(ND,Pxo),e(I1,Bxo),e(q,Ixo),e(q,q1),e(q1,ofe),e(ofe,qxo),e(q1,Nxo),e(q1,jD),e(jD,jxo),e(q1,Dxo),e(q,Gxo),e(q,N1),e(N1,rfe),e(rfe,Oxo),e(N1,Vxo),e(N1,DD),e(DD,Xxo),e(N1,zxo),e(q,Wxo),e(q,j1),e(j1,tfe),e(tfe,Qxo),e(j1,Hxo),e(j1,GD),e(GD,Uxo),e(j1,Jxo),e(q,Yxo),e(q,D1),e(D1,afe),e(afe,Kxo),e(D1,Zxo),e(D1,OD),e(OD,e9o),e(D1,o9o),e(q,r9o),e(q,G1),e(G1,nfe),e(nfe,t9o),e(G1,a9o),e(G1,VD),e(VD,n9o),e(G1,s9o),e(q,l9o),e(q,O1),e(O1,sfe),e(sfe,i9o),e(O1,d9o),e(O1,XD),e(XD,c9o),e(O1,f9o),e(q,m9o),e(q,V1),e(V1,lfe),e(lfe,g9o),e(V1,h9o),e(V1,zD),e(zD,p9o),e(V1,_9o),e(q,u9o),e(q,X1),e(X1,ife),e(ife,b9o),e(X1,v9o),e(X1,WD),e(WD,F9o),e(X1,T9o),e(q,M9o),e(q,z1),e(z1,dfe),e(dfe,E9o),e(z1,C9o),e(z1,QD),e(QD,w9o),e(z1,A9o),e(q,y9o),e(q,W1),e(W1,cfe),e(cfe,L9o),e(W1,x9o),e(W1,HD),e(HD,$9o),e(W1,k9o),e(q,S9o),e(q,Q1),e(Q1,ffe),e(ffe,R9o),e(Q1,P9o),e(Q1,UD),e(UD,B9o),e(Q1,I9o),e(q,q9o),e(q,H1),e(H1,mfe),e(mfe,N9o),e(H1,j9o),e(H1,JD),e(JD,D9o),e(H1,G9o),e(q,O9o),e(q,U1),e(U1,gfe),e(gfe,V9o),e(U1,X9o),e(U1,YD),e(YD,z9o),e(U1,W9o),e(q,Q9o),e(q,J1),e(J1,hfe),e(hfe,H9o),e(J1,U9o),e(J1,KD),e(KD,J9o),e(J1,Y9o),e(q,K9o),e(q,Y1),e(Y1,pfe),e(pfe,Z9o),e(Y1,e$o),e(Y1,ZD),e(ZD,o$o),e(Y1,r$o),e(q,t$o),e(q,K1),e(K1,_fe),e(_fe,a$o),e(K1,n$o),e(K1,eG),e(eG,s$o),e(K1,l$o),e(q,i$o),e(q,Z1),e(Z1,ufe),e(ufe,d$o),e(Z1,c$o),e(Z1,oG),e(oG,f$o),e(Z1,m$o),e(q,g$o),e(q,eb),e(eb,bfe),e(bfe,h$o),e(eb,p$o),e(eb,rG),e(rG,_$o),e(eb,u$o),e(q,b$o),e(q,ob),e(ob,vfe),e(vfe,v$o),e(ob,F$o),e(ob,tG),e(tG,T$o),e(ob,M$o),e(q,E$o),e(q,rb),e(rb,Ffe),e(Ffe,C$o),e(rb,w$o),e(rb,aG),e(aG,A$o),e(rb,y$o),e(q,L$o),e(q,tb),e(tb,Tfe),e(Tfe,x$o),e(tb,$$o),e(tb,nG),e(nG,k$o),e(tb,S$o),e(q,R$o),e(q,ab),e(ab,Mfe),e(Mfe,P$o),e(ab,B$o),e(ab,sG),e(sG,I$o),e(ab,q$o),e(q,N$o),e(q,nb),e(nb,Efe),e(Efe,j$o),e(nb,D$o),e(nb,lG),e(lG,G$o),e(nb,O$o),e(q,V$o),e(q,sb),e(sb,Cfe),e(Cfe,X$o),e(sb,z$o),e(sb,iG),e(iG,W$o),e(sb,Q$o),e(q,H$o),e(q,lb),e(lb,wfe),e(wfe,U$o),e(lb,J$o),e(lb,dG),e(dG,Y$o),e(lb,K$o),e(q,Z$o),e(q,ib),e(ib,Afe),e(Afe,eko),e(ib,oko),e(ib,cG),e(cG,rko),e(ib,tko),e(q,ako),e(q,db),e(db,yfe),e(yfe,nko),e(db,sko),e(db,fG),e(fG,lko),e(db,iko),e(q,dko),e(q,cb),e(cb,Lfe),e(Lfe,cko),e(cb,fko),e(cb,mG),e(mG,mko),e(cb,gko),e(q,hko),e(q,fb),e(fb,xfe),e(xfe,pko),e(fb,_ko),e(fb,gG),e(gG,uko),e(fb,bko),e(q,vko),e(q,mb),e(mb,$fe),e($fe,Fko),e(mb,Tko),e(mb,hG),e(hG,Mko),e(mb,Eko),e(q,Cko),e(q,gb),e(gb,kfe),e(kfe,wko),e(gb,Ako),e(gb,pG),e(pG,yko),e(gb,Lko),e(q,xko),e(q,hb),e(hb,Sfe),e(Sfe,$ko),e(hb,kko),e(hb,_G),e(_G,Sko),e(hb,Rko),e(q,Pko),e(q,pb),e(pb,Rfe),e(Rfe,Bko),e(pb,Iko),e(pb,uG),e(uG,qko),e(pb,Nko),e(q,jko),e(q,_b),e(_b,Pfe),e(Pfe,Dko),e(_b,Gko),e(_b,bG),e(bG,Oko),e(_b,Vko),e(q,Xko),e(q,ub),e(ub,Bfe),e(Bfe,zko),e(ub,Wko),e(ub,vG),e(vG,Qko),e(ub,Hko),e(q,Uko),e(q,bb),e(bb,Ife),e(Ife,Jko),e(bb,Yko),e(bb,FG),e(FG,Kko),e(bb,Zko),e(q,eSo),e(q,vb),e(vb,qfe),e(qfe,oSo),e(vb,rSo),e(vb,TG),e(TG,tSo),e(vb,aSo),e(q,nSo),e(q,Fb),e(Fb,Nfe),e(Nfe,sSo),e(Fb,lSo),e(Fb,MG),e(MG,iSo),e(Fb,dSo),e(q,cSo),e(q,Tb),e(Tb,jfe),e(jfe,fSo),e(Tb,mSo),e(Tb,EG),e(EG,gSo),e(Tb,hSo),e(oo,pSo),e(oo,Mb),e(Mb,_So),e(Mb,Dfe),e(Dfe,uSo),e(Mb,bSo),e(Mb,Gfe),e(Gfe,vSo),e(oo,FSo),M(Eb,oo,null),b(f,mqe,u),b(f,Oi,u),e(Oi,Cb),e(Cb,Ofe),M(gy,Ofe,null),e(Oi,TSo),e(Oi,Vfe),e(Vfe,MSo),b(f,gqe,u),b(f,Po,u),M(hy,Po,null),e(Po,ESo),e(Po,Vi),e(Vi,CSo),e(Vi,CG),e(CG,wSo),e(Vi,ASo),e(Vi,wG),e(wG,ySo),e(Vi,LSo),e(Po,xSo),e(Po,py),e(py,$So),e(py,Xfe),e(Xfe,kSo),e(py,SSo),e(Po,RSo),e(Po,dt),M(_y,dt,null),e(dt,PSo),e(dt,zfe),e(zfe,BSo),e(dt,ISo),e(dt,Xi),e(Xi,qSo),e(Xi,Wfe),e(Wfe,NSo),e(Xi,jSo),e(Xi,AG),e(AG,DSo),e(Xi,GSo),e(dt,OSo),M(wb,dt,null),e(Po,VSo),e(Po,ro),M(uy,ro,null),e(ro,XSo),e(ro,Qfe),e(Qfe,zSo),e(ro,WSo),e(ro,Pa),e(Pa,QSo),e(Pa,Hfe),e(Hfe,HSo),e(Pa,USo),e(Pa,Ufe),e(Ufe,JSo),e(Pa,YSo),e(Pa,Jfe),e(Jfe,KSo),e(Pa,ZSo),e(ro,eRo),e(ro,Y),e(Y,Ab),e(Ab,Yfe),e(Yfe,oRo),e(Ab,rRo),e(Ab,yG),e(yG,tRo),e(Ab,aRo),e(Y,nRo),e(Y,yb),e(yb,Kfe),e(Kfe,sRo),e(yb,lRo),e(yb,LG),e(LG,iRo),e(yb,dRo),e(Y,cRo),e(Y,Lb),e(Lb,Zfe),e(Zfe,fRo),e(Lb,mRo),e(Lb,xG),e(xG,gRo),e(Lb,hRo),e(Y,pRo),e(Y,xb),e(xb,eme),e(eme,_Ro),e(xb,uRo),e(xb,$G),e($G,bRo),e(xb,vRo),e(Y,FRo),e(Y,$b),e($b,ome),e(ome,TRo),e($b,MRo),e($b,kG),e(kG,ERo),e($b,CRo),e(Y,wRo),e(Y,kb),e(kb,rme),e(rme,ARo),e(kb,yRo),e(kb,SG),e(SG,LRo),e(kb,xRo),e(Y,$Ro),e(Y,Sb),e(Sb,tme),e(tme,kRo),e(Sb,SRo),e(Sb,RG),e(RG,RRo),e(Sb,PRo),e(Y,BRo),e(Y,Rb),e(Rb,ame),e(ame,IRo),e(Rb,qRo),e(Rb,PG),e(PG,NRo),e(Rb,jRo),e(Y,DRo),e(Y,Pb),e(Pb,nme),e(nme,GRo),e(Pb,ORo),e(Pb,BG),e(BG,VRo),e(Pb,XRo),e(Y,zRo),e(Y,Bb),e(Bb,sme),e(sme,WRo),e(Bb,QRo),e(Bb,IG),e(IG,HRo),e(Bb,URo),e(Y,JRo),e(Y,Ib),e(Ib,lme),e(lme,YRo),e(Ib,KRo),e(Ib,qG),e(qG,ZRo),e(Ib,ePo),e(Y,oPo),e(Y,qb),e(qb,ime),e(ime,rPo),e(qb,tPo),e(qb,NG),e(NG,aPo),e(qb,nPo),e(Y,sPo),e(Y,Nb),e(Nb,dme),e(dme,lPo),e(Nb,iPo),e(Nb,jG),e(jG,dPo),e(Nb,cPo),e(Y,fPo),e(Y,jb),e(jb,cme),e(cme,mPo),e(jb,gPo),e(jb,DG),e(DG,hPo),e(jb,pPo),e(Y,_Po),e(Y,Db),e(Db,fme),e(fme,uPo),e(Db,bPo),e(Db,GG),e(GG,vPo),e(Db,FPo),e(Y,TPo),e(Y,Gb),e(Gb,mme),e(mme,MPo),e(Gb,EPo),e(Gb,OG),e(OG,CPo),e(Gb,wPo),e(Y,APo),e(Y,Ob),e(Ob,gme),e(gme,yPo),e(Ob,LPo),e(Ob,VG),e(VG,xPo),e(Ob,$Po),e(Y,kPo),e(Y,Vb),e(Vb,hme),e(hme,SPo),e(Vb,RPo),e(Vb,XG),e(XG,PPo),e(Vb,BPo),e(Y,IPo),e(Y,Xb),e(Xb,pme),e(pme,qPo),e(Xb,NPo),e(Xb,zG),e(zG,jPo),e(Xb,DPo),e(Y,GPo),e(Y,zb),e(zb,_me),e(_me,OPo),e(zb,VPo),e(zb,WG),e(WG,XPo),e(zb,zPo),e(Y,WPo),e(Y,Wb),e(Wb,ume),e(ume,QPo),e(Wb,HPo),e(Wb,QG),e(QG,UPo),e(Wb,JPo),e(Y,YPo),e(Y,Qb),e(Qb,bme),e(bme,KPo),e(Qb,ZPo),e(Qb,HG),e(HG,eBo),e(Qb,oBo),e(Y,rBo),e(Y,Hb),e(Hb,vme),e(vme,tBo),e(Hb,aBo),e(Hb,UG),e(UG,nBo),e(Hb,sBo),e(Y,lBo),e(Y,Ub),e(Ub,Fme),e(Fme,iBo),e(Ub,dBo),e(Ub,JG),e(JG,cBo),e(Ub,fBo),e(Y,mBo),e(Y,Jb),e(Jb,Tme),e(Tme,gBo),e(Jb,hBo),e(Jb,YG),e(YG,pBo),e(Jb,_Bo),e(Y,uBo),e(Y,Yb),e(Yb,Mme),e(Mme,bBo),e(Yb,vBo),e(Yb,KG),e(KG,FBo),e(Yb,TBo),e(Y,MBo),e(Y,Kb),e(Kb,Eme),e(Eme,EBo),e(Kb,CBo),e(Kb,ZG),e(ZG,wBo),e(Kb,ABo),e(Y,yBo),e(Y,Zb),e(Zb,Cme),e(Cme,LBo),e(Zb,xBo),e(Zb,eO),e(eO,$Bo),e(Zb,kBo),e(Y,SBo),e(Y,e5),e(e5,wme),e(wme,RBo),e(e5,PBo),e(e5,oO),e(oO,BBo),e(e5,IBo),e(ro,qBo),e(ro,o5),e(o5,NBo),e(o5,Ame),e(Ame,jBo),e(o5,DBo),e(o5,yme),e(yme,GBo),e(ro,OBo),M(r5,ro,null),b(f,hqe,u),b(f,zi,u),e(zi,t5),e(t5,Lme),M(by,Lme,null),e(zi,VBo),e(zi,xme),e(xme,XBo),b(f,pqe,u),b(f,Bo,u),M(vy,Bo,null),e(Bo,zBo),e(Bo,Wi),e(Wi,WBo),e(Wi,rO),e(rO,QBo),e(Wi,HBo),e(Wi,tO),e(tO,UBo),e(Wi,JBo),e(Bo,YBo),e(Bo,Fy),e(Fy,KBo),e(Fy,$me),e($me,ZBo),e(Fy,eIo),e(Bo,oIo),e(Bo,ct),M(Ty,ct,null),e(ct,rIo),e(ct,kme),e(kme,tIo),e(ct,aIo),e(ct,Qi),e(Qi,nIo),e(Qi,Sme),e(Sme,sIo),e(Qi,lIo),e(Qi,aO),e(aO,iIo),e(Qi,dIo),e(ct,cIo),M(a5,ct,null),e(Bo,fIo),e(Bo,to),M(My,to,null),e(to,mIo),e(to,Rme),e(Rme,gIo),e(to,hIo),e(to,Ba),e(Ba,pIo),e(Ba,Pme),e(Pme,_Io),e(Ba,uIo),e(Ba,Bme),e(Bme,bIo),e(Ba,vIo),e(Ba,Ime),e(Ime,FIo),e(Ba,TIo),e(to,MIo),e(to,Yr),e(Yr,n5),e(n5,qme),e(qme,EIo),e(n5,CIo),e(n5,nO),e(nO,wIo),e(n5,AIo),e(Yr,yIo),e(Yr,s5),e(s5,Nme),e(Nme,LIo),e(s5,xIo),e(s5,sO),e(sO,$Io),e(s5,kIo),e(Yr,SIo),e(Yr,l5),e(l5,jme),e(jme,RIo),e(l5,PIo),e(l5,lO),e(lO,BIo),e(l5,IIo),e(Yr,qIo),e(Yr,i5),e(i5,Dme),e(Dme,NIo),e(i5,jIo),e(i5,iO),e(iO,DIo),e(i5,GIo),e(Yr,OIo),e(Yr,d5),e(d5,Gme),e(Gme,VIo),e(d5,XIo),e(d5,dO),e(dO,zIo),e(d5,WIo),e(to,QIo),e(to,c5),e(c5,HIo),e(c5,Ome),e(Ome,UIo),e(c5,JIo),e(c5,Vme),e(Vme,YIo),e(to,KIo),M(f5,to,null),b(f,_qe,u),b(f,Hi,u),e(Hi,m5),e(m5,Xme),M(Ey,Xme,null),e(Hi,ZIo),e(Hi,zme),e(zme,eqo),b(f,uqe,u),b(f,Io,u),M(Cy,Io,null),e(Io,oqo),e(Io,Ui),e(Ui,rqo),e(Ui,cO),e(cO,tqo),e(Ui,aqo),e(Ui,fO),e(fO,nqo),e(Ui,sqo),e(Io,lqo),e(Io,wy),e(wy,iqo),e(wy,Wme),e(Wme,dqo),e(wy,cqo),e(Io,fqo),e(Io,ft),M(Ay,ft,null),e(ft,mqo),e(ft,Qme),e(Qme,gqo),e(ft,hqo),e(ft,Ji),e(Ji,pqo),e(Ji,Hme),e(Hme,_qo),e(Ji,uqo),e(Ji,mO),e(mO,bqo),e(Ji,vqo),e(ft,Fqo),M(g5,ft,null),e(Io,Tqo),e(Io,ao),M(yy,ao,null),e(ao,Mqo),e(ao,Ume),e(Ume,Eqo),e(ao,Cqo),e(ao,Ia),e(Ia,wqo),e(Ia,Jme),e(Jme,Aqo),e(Ia,yqo),e(Ia,Yme),e(Yme,Lqo),e(Ia,xqo),e(Ia,Kme),e(Kme,$qo),e(Ia,kqo),e(ao,Sqo),e(ao,U),e(U,h5),e(h5,Zme),e(Zme,Rqo),e(h5,Pqo),e(h5,gO),e(gO,Bqo),e(h5,Iqo),e(U,qqo),e(U,p5),e(p5,ege),e(ege,Nqo),e(p5,jqo),e(p5,hO),e(hO,Dqo),e(p5,Gqo),e(U,Oqo),e(U,_5),e(_5,oge),e(oge,Vqo),e(_5,Xqo),e(_5,pO),e(pO,zqo),e(_5,Wqo),e(U,Qqo),e(U,u5),e(u5,rge),e(rge,Hqo),e(u5,Uqo),e(u5,_O),e(_O,Jqo),e(u5,Yqo),e(U,Kqo),e(U,b5),e(b5,tge),e(tge,Zqo),e(b5,eNo),e(b5,uO),e(uO,oNo),e(b5,rNo),e(U,tNo),e(U,v5),e(v5,age),e(age,aNo),e(v5,nNo),e(v5,bO),e(bO,sNo),e(v5,lNo),e(U,iNo),e(U,F5),e(F5,nge),e(nge,dNo),e(F5,cNo),e(F5,vO),e(vO,fNo),e(F5,mNo),e(U,gNo),e(U,T5),e(T5,sge),e(sge,hNo),e(T5,pNo),e(T5,FO),e(FO,_No),e(T5,uNo),e(U,bNo),e(U,M5),e(M5,lge),e(lge,vNo),e(M5,FNo),e(M5,TO),e(TO,TNo),e(M5,MNo),e(U,ENo),e(U,E5),e(E5,ige),e(ige,CNo),e(E5,wNo),e(E5,MO),e(MO,ANo),e(E5,yNo),e(U,LNo),e(U,C5),e(C5,dge),e(dge,xNo),e(C5,$No),e(C5,EO),e(EO,kNo),e(C5,SNo),e(U,RNo),e(U,w5),e(w5,cge),e(cge,PNo),e(w5,BNo),e(w5,CO),e(CO,INo),e(w5,qNo),e(U,NNo),e(U,A5),e(A5,fge),e(fge,jNo),e(A5,DNo),e(A5,wO),e(wO,GNo),e(A5,ONo),e(U,VNo),e(U,y5),e(y5,mge),e(mge,XNo),e(y5,zNo),e(y5,AO),e(AO,WNo),e(y5,QNo),e(U,HNo),e(U,L5),e(L5,gge),e(gge,UNo),e(L5,JNo),e(L5,yO),e(yO,YNo),e(L5,KNo),e(U,ZNo),e(U,x5),e(x5,hge),e(hge,ejo),e(x5,ojo),e(x5,LO),e(LO,rjo),e(x5,tjo),e(U,ajo),e(U,$5),e($5,pge),e(pge,njo),e($5,sjo),e($5,xO),e(xO,ljo),e($5,ijo),e(U,djo),e(U,k5),e(k5,_ge),e(_ge,cjo),e(k5,fjo),e(k5,$O),e($O,mjo),e(k5,gjo),e(U,hjo),e(U,S5),e(S5,uge),e(uge,pjo),e(S5,_jo),e(S5,kO),e(kO,ujo),e(S5,bjo),e(U,vjo),e(U,R5),e(R5,bge),e(bge,Fjo),e(R5,Tjo),e(R5,SO),e(SO,Mjo),e(R5,Ejo),e(U,Cjo),e(U,P5),e(P5,vge),e(vge,wjo),e(P5,Ajo),e(P5,RO),e(RO,yjo),e(P5,Ljo),e(U,xjo),e(U,B5),e(B5,Fge),e(Fge,$jo),e(B5,kjo),e(B5,PO),e(PO,Sjo),e(B5,Rjo),e(U,Pjo),e(U,I5),e(I5,Tge),e(Tge,Bjo),e(I5,Ijo),e(I5,BO),e(BO,qjo),e(I5,Njo),e(U,jjo),e(U,q5),e(q5,Mge),e(Mge,Djo),e(q5,Gjo),e(q5,IO),e(IO,Ojo),e(q5,Vjo),e(U,Xjo),e(U,N5),e(N5,Ege),e(Ege,zjo),e(N5,Wjo),e(N5,qO),e(qO,Qjo),e(N5,Hjo),e(U,Ujo),e(U,j5),e(j5,Cge),e(Cge,Jjo),e(j5,Yjo),e(j5,NO),e(NO,Kjo),e(j5,Zjo),e(U,eDo),e(U,D5),e(D5,wge),e(wge,oDo),e(D5,rDo),e(D5,jO),e(jO,tDo),e(D5,aDo),e(U,nDo),e(U,G5),e(G5,Age),e(Age,sDo),e(G5,lDo),e(G5,DO),e(DO,iDo),e(G5,dDo),e(U,cDo),e(U,O5),e(O5,yge),e(yge,fDo),e(O5,mDo),e(O5,GO),e(GO,gDo),e(O5,hDo),e(U,pDo),e(U,V5),e(V5,Lge),e(Lge,_Do),e(V5,uDo),e(V5,OO),e(OO,bDo),e(V5,vDo),e(U,FDo),e(U,X5),e(X5,xge),e(xge,TDo),e(X5,MDo),e(X5,VO),e(VO,EDo),e(X5,CDo),e(U,wDo),e(U,z5),e(z5,$ge),e($ge,ADo),e(z5,yDo),e(z5,XO),e(XO,LDo),e(z5,xDo),e(U,$Do),e(U,W5),e(W5,kge),e(kge,kDo),e(W5,SDo),e(W5,zO),e(zO,RDo),e(W5,PDo),e(ao,BDo),e(ao,Q5),e(Q5,IDo),e(Q5,Sge),e(Sge,qDo),e(Q5,NDo),e(Q5,Rge),e(Rge,jDo),e(ao,DDo),M(H5,ao,null),b(f,bqe,u),b(f,Yi,u),e(Yi,U5),e(U5,Pge),M(Ly,Pge,null),e(Yi,GDo),e(Yi,Bge),e(Bge,ODo),b(f,vqe,u),b(f,qo,u),M(xy,qo,null),e(qo,VDo),e(qo,Ki),e(Ki,XDo),e(Ki,WO),e(WO,zDo),e(Ki,WDo),e(Ki,QO),e(QO,QDo),e(Ki,HDo),e(qo,UDo),e(qo,$y),e($y,JDo),e($y,Ige),e(Ige,YDo),e($y,KDo),e(qo,ZDo),e(qo,mt),M(ky,mt,null),e(mt,eGo),e(mt,qge),e(qge,oGo),e(mt,rGo),e(mt,Zi),e(Zi,tGo),e(Zi,Nge),e(Nge,aGo),e(Zi,nGo),e(Zi,HO),e(HO,sGo),e(Zi,lGo),e(mt,iGo),M(J5,mt,null),e(qo,dGo),e(qo,no),M(Sy,no,null),e(no,cGo),e(no,jge),e(jge,fGo),e(no,mGo),e(no,qa),e(qa,gGo),e(qa,Dge),e(Dge,hGo),e(qa,pGo),e(qa,Gge),e(Gge,_Go),e(qa,uGo),e(qa,Oge),e(Oge,bGo),e(qa,vGo),e(no,FGo),e(no,V),e(V,Y5),e(Y5,Vge),e(Vge,TGo),e(Y5,MGo),e(Y5,UO),e(UO,EGo),e(Y5,CGo),e(V,wGo),e(V,K5),e(K5,Xge),e(Xge,AGo),e(K5,yGo),e(K5,JO),e(JO,LGo),e(K5,xGo),e(V,$Go),e(V,Z5),e(Z5,zge),e(zge,kGo),e(Z5,SGo),e(Z5,YO),e(YO,RGo),e(Z5,PGo),e(V,BGo),e(V,ev),e(ev,Wge),e(Wge,IGo),e(ev,qGo),e(ev,KO),e(KO,NGo),e(ev,jGo),e(V,DGo),e(V,ov),e(ov,Qge),e(Qge,GGo),e(ov,OGo),e(ov,ZO),e(ZO,VGo),e(ov,XGo),e(V,zGo),e(V,rv),e(rv,Hge),e(Hge,WGo),e(rv,QGo),e(rv,eV),e(eV,HGo),e(rv,UGo),e(V,JGo),e(V,tv),e(tv,Uge),e(Uge,YGo),e(tv,KGo),e(tv,oV),e(oV,ZGo),e(tv,eOo),e(V,oOo),e(V,av),e(av,Jge),e(Jge,rOo),e(av,tOo),e(av,rV),e(rV,aOo),e(av,nOo),e(V,sOo),e(V,nv),e(nv,Yge),e(Yge,lOo),e(nv,iOo),e(nv,tV),e(tV,dOo),e(nv,cOo),e(V,fOo),e(V,sv),e(sv,Kge),e(Kge,mOo),e(sv,gOo),e(sv,aV),e(aV,hOo),e(sv,pOo),e(V,_Oo),e(V,lv),e(lv,Zge),e(Zge,uOo),e(lv,bOo),e(lv,nV),e(nV,vOo),e(lv,FOo),e(V,TOo),e(V,iv),e(iv,ehe),e(ehe,MOo),e(iv,EOo),e(iv,sV),e(sV,COo),e(iv,wOo),e(V,AOo),e(V,dv),e(dv,ohe),e(ohe,yOo),e(dv,LOo),e(dv,lV),e(lV,xOo),e(dv,$Oo),e(V,kOo),e(V,cv),e(cv,rhe),e(rhe,SOo),e(cv,ROo),e(cv,iV),e(iV,POo),e(cv,BOo),e(V,IOo),e(V,fv),e(fv,the),e(the,qOo),e(fv,NOo),e(fv,dV),e(dV,jOo),e(fv,DOo),e(V,GOo),e(V,mv),e(mv,ahe),e(ahe,OOo),e(mv,VOo),e(mv,cV),e(cV,XOo),e(mv,zOo),e(V,WOo),e(V,gv),e(gv,nhe),e(nhe,QOo),e(gv,HOo),e(gv,fV),e(fV,UOo),e(gv,JOo),e(V,YOo),e(V,hv),e(hv,she),e(she,KOo),e(hv,ZOo),e(hv,mV),e(mV,eVo),e(hv,oVo),e(V,rVo),e(V,pv),e(pv,lhe),e(lhe,tVo),e(pv,aVo),e(pv,gV),e(gV,nVo),e(pv,sVo),e(V,lVo),e(V,_v),e(_v,ihe),e(ihe,iVo),e(_v,dVo),e(_v,hV),e(hV,cVo),e(_v,fVo),e(V,mVo),e(V,uv),e(uv,dhe),e(dhe,gVo),e(uv,hVo),e(uv,pV),e(pV,pVo),e(uv,_Vo),e(V,uVo),e(V,bv),e(bv,che),e(che,bVo),e(bv,vVo),e(bv,_V),e(_V,FVo),e(bv,TVo),e(V,MVo),e(V,vv),e(vv,fhe),e(fhe,EVo),e(vv,CVo),e(vv,uV),e(uV,wVo),e(vv,AVo),e(V,yVo),e(V,Fv),e(Fv,mhe),e(mhe,LVo),e(Fv,xVo),e(Fv,bV),e(bV,$Vo),e(Fv,kVo),e(V,SVo),e(V,Tv),e(Tv,ghe),e(ghe,RVo),e(Tv,PVo),e(Tv,vV),e(vV,BVo),e(Tv,IVo),e(V,qVo),e(V,Mv),e(Mv,hhe),e(hhe,NVo),e(Mv,jVo),e(Mv,FV),e(FV,DVo),e(Mv,GVo),e(V,OVo),e(V,Ev),e(Ev,phe),e(phe,VVo),e(Ev,XVo),e(Ev,TV),e(TV,zVo),e(Ev,WVo),e(V,QVo),e(V,Cv),e(Cv,_he),e(_he,HVo),e(Cv,UVo),e(Cv,MV),e(MV,JVo),e(Cv,YVo),e(V,KVo),e(V,wv),e(wv,uhe),e(uhe,ZVo),e(wv,eXo),e(wv,EV),e(EV,oXo),e(wv,rXo),e(V,tXo),e(V,Av),e(Av,bhe),e(bhe,aXo),e(Av,nXo),e(Av,CV),e(CV,sXo),e(Av,lXo),e(V,iXo),e(V,yv),e(yv,vhe),e(vhe,dXo),e(yv,cXo),e(yv,wV),e(wV,fXo),e(yv,mXo),e(V,gXo),e(V,Lv),e(Lv,Fhe),e(Fhe,hXo),e(Lv,pXo),e(Lv,AV),e(AV,_Xo),e(Lv,uXo),e(V,bXo),e(V,xv),e(xv,The),e(The,vXo),e(xv,FXo),e(xv,yV),e(yV,TXo),e(xv,MXo),e(V,EXo),e(V,$v),e($v,Mhe),e(Mhe,CXo),e($v,wXo),e($v,LV),e(LV,AXo),e($v,yXo),e(V,LXo),e(V,kv),e(kv,Ehe),e(Ehe,xXo),e(kv,$Xo),e(kv,xV),e(xV,kXo),e(kv,SXo),e(V,RXo),e(V,Sv),e(Sv,Che),e(Che,PXo),e(Sv,BXo),e(Sv,$V),e($V,IXo),e(Sv,qXo),e(V,NXo),e(V,Rv),e(Rv,whe),e(whe,jXo),e(Rv,DXo),e(Rv,kV),e(kV,GXo),e(Rv,OXo),e(V,VXo),e(V,Pv),e(Pv,Ahe),e(Ahe,XXo),e(Pv,zXo),e(Pv,SV),e(SV,WXo),e(Pv,QXo),e(V,HXo),e(V,Bv),e(Bv,yhe),e(yhe,UXo),e(Bv,JXo),e(Bv,RV),e(RV,YXo),e(Bv,KXo),e(no,ZXo),e(no,Iv),e(Iv,ezo),e(Iv,Lhe),e(Lhe,ozo),e(Iv,rzo),e(Iv,xhe),e(xhe,tzo),e(no,azo),M(qv,no,null),b(f,Fqe,u),b(f,ed,u),e(ed,Nv),e(Nv,$he),M(Ry,$he,null),e(ed,nzo),e(ed,khe),e(khe,szo),b(f,Tqe,u),b(f,No,u),M(Py,No,null),e(No,lzo),e(No,od),e(od,izo),e(od,PV),e(PV,dzo),e(od,czo),e(od,BV),e(BV,fzo),e(od,mzo),e(No,gzo),e(No,By),e(By,hzo),e(By,She),e(She,pzo),e(By,_zo),e(No,uzo),e(No,gt),M(Iy,gt,null),e(gt,bzo),e(gt,Rhe),e(Rhe,vzo),e(gt,Fzo),e(gt,rd),e(rd,Tzo),e(rd,Phe),e(Phe,Mzo),e(rd,Ezo),e(rd,IV),e(IV,Czo),e(rd,wzo),e(gt,Azo),M(jv,gt,null),e(No,yzo),e(No,so),M(qy,so,null),e(so,Lzo),e(so,Bhe),e(Bhe,xzo),e(so,$zo),e(so,Na),e(Na,kzo),e(Na,Ihe),e(Ihe,Szo),e(Na,Rzo),e(Na,qhe),e(qhe,Pzo),e(Na,Bzo),e(Na,Nhe),e(Nhe,Izo),e(Na,qzo),e(so,Nzo),e(so,jhe),e(jhe,Dv),e(Dv,Dhe),e(Dhe,jzo),e(Dv,Dzo),e(Dv,qV),e(qV,Gzo),e(Dv,Ozo),e(so,Vzo),e(so,Gv),e(Gv,Xzo),e(Gv,Ghe),e(Ghe,zzo),e(Gv,Wzo),e(Gv,Ohe),e(Ohe,Qzo),e(so,Hzo),M(Ov,so,null),b(f,Mqe,u),b(f,td,u),e(td,Vv),e(Vv,Vhe),M(Ny,Vhe,null),e(td,Uzo),e(td,Xhe),e(Xhe,Jzo),b(f,Eqe,u),b(f,jo,u),M(jy,jo,null),e(jo,Yzo),e(jo,ad),e(ad,Kzo),e(ad,NV),e(NV,Zzo),e(ad,eWo),e(ad,jV),e(jV,oWo),e(ad,rWo),e(jo,tWo),e(jo,Dy),e(Dy,aWo),e(Dy,zhe),e(zhe,nWo),e(Dy,sWo),e(jo,lWo),e(jo,ht),M(Gy,ht,null),e(ht,iWo),e(ht,Whe),e(Whe,dWo),e(ht,cWo),e(ht,nd),e(nd,fWo),e(nd,Qhe),e(Qhe,mWo),e(nd,gWo),e(nd,DV),e(DV,hWo),e(nd,pWo),e(ht,_Wo),M(Xv,ht,null),e(jo,uWo),e(jo,lo),M(Oy,lo,null),e(lo,bWo),e(lo,Hhe),e(Hhe,vWo),e(lo,FWo),e(lo,ja),e(ja,TWo),e(ja,Uhe),e(Uhe,MWo),e(ja,EWo),e(ja,Jhe),e(Jhe,CWo),e(ja,wWo),e(ja,Yhe),e(Yhe,AWo),e(ja,yWo),e(lo,LWo),e(lo,Fe),e(Fe,zv),e(zv,Khe),e(Khe,xWo),e(zv,$Wo),e(zv,GV),e(GV,kWo),e(zv,SWo),e(Fe,RWo),e(Fe,Wv),e(Wv,Zhe),e(Zhe,PWo),e(Wv,BWo),e(Wv,OV),e(OV,IWo),e(Wv,qWo),e(Fe,NWo),e(Fe,Qv),e(Qv,epe),e(epe,jWo),e(Qv,DWo),e(Qv,VV),e(VV,GWo),e(Qv,OWo),e(Fe,VWo),e(Fe,Hv),e(Hv,ope),e(ope,XWo),e(Hv,zWo),e(Hv,XV),e(XV,WWo),e(Hv,QWo),e(Fe,HWo),e(Fe,Ps),e(Ps,rpe),e(rpe,UWo),e(Ps,JWo),e(Ps,zV),e(zV,YWo),e(Ps,KWo),e(Ps,WV),e(WV,ZWo),e(Ps,eQo),e(Fe,oQo),e(Fe,Uv),e(Uv,tpe),e(tpe,rQo),e(Uv,tQo),e(Uv,QV),e(QV,aQo),e(Uv,nQo),e(Fe,sQo),e(Fe,pt),e(pt,ape),e(ape,lQo),e(pt,iQo),e(pt,HV),e(HV,dQo),e(pt,cQo),e(pt,UV),e(UV,fQo),e(pt,mQo),e(pt,JV),e(JV,gQo),e(pt,hQo),e(Fe,pQo),e(Fe,Jv),e(Jv,npe),e(npe,_Qo),e(Jv,uQo),e(Jv,YV),e(YV,bQo),e(Jv,vQo),e(Fe,FQo),e(Fe,Yv),e(Yv,spe),e(spe,TQo),e(Yv,MQo),e(Yv,KV),e(KV,EQo),e(Yv,CQo),e(Fe,wQo),e(Fe,Kv),e(Kv,lpe),e(lpe,AQo),e(Kv,yQo),e(Kv,ZV),e(ZV,LQo),e(Kv,xQo),e(Fe,$Qo),e(Fe,Zv),e(Zv,ipe),e(ipe,kQo),e(Zv,SQo),e(Zv,eX),e(eX,RQo),e(Zv,PQo),e(Fe,BQo),e(Fe,e3),e(e3,dpe),e(dpe,IQo),e(e3,qQo),e(e3,oX),e(oX,NQo),e(e3,jQo),e(Fe,DQo),e(Fe,o3),e(o3,cpe),e(cpe,GQo),e(o3,OQo),e(o3,rX),e(rX,VQo),e(o3,XQo),e(Fe,zQo),e(Fe,r3),e(r3,fpe),e(fpe,WQo),e(r3,QQo),e(r3,tX),e(tX,HQo),e(r3,UQo),e(lo,JQo),e(lo,t3),e(t3,YQo),e(t3,mpe),e(mpe,KQo),e(t3,ZQo),e(t3,gpe),e(gpe,eHo),e(lo,oHo),M(a3,lo,null),b(f,Cqe,u),b(f,sd,u),e(sd,n3),e(n3,hpe),M(Vy,hpe,null),e(sd,rHo),e(sd,ppe),e(ppe,tHo),b(f,wqe,u),b(f,Do,u),M(Xy,Do,null),e(Do,aHo),e(Do,ld),e(ld,nHo),e(ld,aX),e(aX,sHo),e(ld,lHo),e(ld,nX),e(nX,iHo),e(ld,dHo),e(Do,cHo),e(Do,zy),e(zy,fHo),e(zy,_pe),e(_pe,mHo),e(zy,gHo),e(Do,hHo),e(Do,_t),M(Wy,_t,null),e(_t,pHo),e(_t,upe),e(upe,_Ho),e(_t,uHo),e(_t,id),e(id,bHo),e(id,bpe),e(bpe,vHo),e(id,FHo),e(id,sX),e(sX,THo),e(id,MHo),e(_t,EHo),M(s3,_t,null),e(Do,CHo),e(Do,io),M(Qy,io,null),e(io,wHo),e(io,vpe),e(vpe,AHo),e(io,yHo),e(io,Da),e(Da,LHo),e(Da,Fpe),e(Fpe,xHo),e(Da,$Ho),e(Da,Tpe),e(Tpe,kHo),e(Da,SHo),e(Da,Mpe),e(Mpe,RHo),e(Da,PHo),e(io,BHo),e(io,Epe),e(Epe,l3),e(l3,Cpe),e(Cpe,IHo),e(l3,qHo),e(l3,lX),e(lX,NHo),e(l3,jHo),e(io,DHo),e(io,i3),e(i3,GHo),e(i3,wpe),e(wpe,OHo),e(i3,VHo),e(i3,Ape),e(Ape,XHo),e(io,zHo),M(d3,io,null),b(f,Aqe,u),b(f,dd,u),e(dd,c3),e(c3,ype),M(Hy,ype,null),e(dd,WHo),e(dd,Lpe),e(Lpe,QHo),b(f,yqe,u),b(f,Go,u),M(Uy,Go,null),e(Go,HHo),e(Go,cd),e(cd,UHo),e(cd,iX),e(iX,JHo),e(cd,YHo),e(cd,dX),e(dX,KHo),e(cd,ZHo),e(Go,eUo),e(Go,Jy),e(Jy,oUo),e(Jy,xpe),e(xpe,rUo),e(Jy,tUo),e(Go,aUo),e(Go,ut),M(Yy,ut,null),e(ut,nUo),e(ut,$pe),e($pe,sUo),e(ut,lUo),e(ut,fd),e(fd,iUo),e(fd,kpe),e(kpe,dUo),e(fd,cUo),e(fd,cX),e(cX,fUo),e(fd,mUo),e(ut,gUo),M(f3,ut,null),e(Go,hUo),e(Go,co),M(Ky,co,null),e(co,pUo),e(co,Spe),e(Spe,_Uo),e(co,uUo),e(co,Ga),e(Ga,bUo),e(Ga,Rpe),e(Rpe,vUo),e(Ga,FUo),e(Ga,Ppe),e(Ppe,TUo),e(Ga,MUo),e(Ga,Bpe),e(Bpe,EUo),e(Ga,CUo),e(co,wUo),e(co,ke),e(ke,m3),e(m3,Ipe),e(Ipe,AUo),e(m3,yUo),e(m3,fX),e(fX,LUo),e(m3,xUo),e(ke,$Uo),e(ke,g3),e(g3,qpe),e(qpe,kUo),e(g3,SUo),e(g3,mX),e(mX,RUo),e(g3,PUo),e(ke,BUo),e(ke,h3),e(h3,Npe),e(Npe,IUo),e(h3,qUo),e(h3,gX),e(gX,NUo),e(h3,jUo),e(ke,DUo),e(ke,p3),e(p3,jpe),e(jpe,GUo),e(p3,OUo),e(p3,hX),e(hX,VUo),e(p3,XUo),e(ke,zUo),e(ke,_3),e(_3,Dpe),e(Dpe,WUo),e(_3,QUo),e(_3,pX),e(pX,HUo),e(_3,UUo),e(ke,JUo),e(ke,u3),e(u3,Gpe),e(Gpe,YUo),e(u3,KUo),e(u3,_X),e(_X,ZUo),e(u3,eJo),e(ke,oJo),e(ke,b3),e(b3,Ope),e(Ope,rJo),e(b3,tJo),e(b3,uX),e(uX,aJo),e(b3,nJo),e(ke,sJo),e(ke,v3),e(v3,Vpe),e(Vpe,lJo),e(v3,iJo),e(v3,bX),e(bX,dJo),e(v3,cJo),e(ke,fJo),e(ke,F3),e(F3,Xpe),e(Xpe,mJo),e(F3,gJo),e(F3,vX),e(vX,hJo),e(F3,pJo),e(co,_Jo),e(co,T3),e(T3,uJo),e(T3,zpe),e(zpe,bJo),e(T3,vJo),e(T3,Wpe),e(Wpe,FJo),e(co,TJo),M(M3,co,null),b(f,Lqe,u),b(f,md,u),e(md,E3),e(E3,Qpe),M(Zy,Qpe,null),e(md,MJo),e(md,Hpe),e(Hpe,EJo),b(f,xqe,u),b(f,Oo,u),M(eL,Oo,null),e(Oo,CJo),e(Oo,gd),e(gd,wJo),e(gd,FX),e(FX,AJo),e(gd,yJo),e(gd,TX),e(TX,LJo),e(gd,xJo),e(Oo,$Jo),e(Oo,oL),e(oL,kJo),e(oL,Upe),e(Upe,SJo),e(oL,RJo),e(Oo,PJo),e(Oo,bt),M(rL,bt,null),e(bt,BJo),e(bt,Jpe),e(Jpe,IJo),e(bt,qJo),e(bt,hd),e(hd,NJo),e(hd,Ype),e(Ype,jJo),e(hd,DJo),e(hd,MX),e(MX,GJo),e(hd,OJo),e(bt,VJo),M(C3,bt,null),e(Oo,XJo),e(Oo,fo),M(tL,fo,null),e(fo,zJo),e(fo,Kpe),e(Kpe,WJo),e(fo,QJo),e(fo,Oa),e(Oa,HJo),e(Oa,Zpe),e(Zpe,UJo),e(Oa,JJo),e(Oa,e_e),e(e_e,YJo),e(Oa,KJo),e(Oa,o_e),e(o_e,ZJo),e(Oa,eYo),e(fo,oYo),e(fo,Kr),e(Kr,w3),e(w3,r_e),e(r_e,rYo),e(w3,tYo),e(w3,EX),e(EX,aYo),e(w3,nYo),e(Kr,sYo),e(Kr,A3),e(A3,t_e),e(t_e,lYo),e(A3,iYo),e(A3,CX),e(CX,dYo),e(A3,cYo),e(Kr,fYo),e(Kr,y3),e(y3,a_e),e(a_e,mYo),e(y3,gYo),e(y3,wX),e(wX,hYo),e(y3,pYo),e(Kr,_Yo),e(Kr,L3),e(L3,n_e),e(n_e,uYo),e(L3,bYo),e(L3,AX),e(AX,vYo),e(L3,FYo),e(Kr,TYo),e(Kr,x3),e(x3,s_e),e(s_e,MYo),e(x3,EYo),e(x3,yX),e(yX,CYo),e(x3,wYo),e(fo,AYo),e(fo,$3),e($3,yYo),e($3,l_e),e(l_e,LYo),e($3,xYo),e($3,i_e),e(i_e,$Yo),e(fo,kYo),M(k3,fo,null),b(f,$qe,u),b(f,pd,u),e(pd,S3),e(S3,d_e),M(aL,d_e,null),e(pd,SYo),e(pd,c_e),e(c_e,RYo),b(f,kqe,u),b(f,Vo,u),M(nL,Vo,null),e(Vo,PYo),e(Vo,_d),e(_d,BYo),e(_d,LX),e(LX,IYo),e(_d,qYo),e(_d,xX),e(xX,NYo),e(_d,jYo),e(Vo,DYo),e(Vo,sL),e(sL,GYo),e(sL,f_e),e(f_e,OYo),e(sL,VYo),e(Vo,XYo),e(Vo,vt),M(lL,vt,null),e(vt,zYo),e(vt,m_e),e(m_e,WYo),e(vt,QYo),e(vt,ud),e(ud,HYo),e(ud,g_e),e(g_e,UYo),e(ud,JYo),e(ud,$X),e($X,YYo),e(ud,KYo),e(vt,ZYo),M(R3,vt,null),e(Vo,eKo),e(Vo,mo),M(iL,mo,null),e(mo,oKo),e(mo,h_e),e(h_e,rKo),e(mo,tKo),e(mo,Va),e(Va,aKo),e(Va,p_e),e(p_e,nKo),e(Va,sKo),e(Va,__e),e(__e,lKo),e(Va,iKo),e(Va,u_e),e(u_e,dKo),e(Va,cKo),e(mo,fKo),e(mo,Se),e(Se,P3),e(P3,b_e),e(b_e,mKo),e(P3,gKo),e(P3,kX),e(kX,hKo),e(P3,pKo),e(Se,_Ko),e(Se,B3),e(B3,v_e),e(v_e,uKo),e(B3,bKo),e(B3,SX),e(SX,vKo),e(B3,FKo),e(Se,TKo),e(Se,I3),e(I3,F_e),e(F_e,MKo),e(I3,EKo),e(I3,RX),e(RX,CKo),e(I3,wKo),e(Se,AKo),e(Se,q3),e(q3,T_e),e(T_e,yKo),e(q3,LKo),e(q3,PX),e(PX,xKo),e(q3,$Ko),e(Se,kKo),e(Se,N3),e(N3,M_e),e(M_e,SKo),e(N3,RKo),e(N3,BX),e(BX,PKo),e(N3,BKo),e(Se,IKo),e(Se,j3),e(j3,E_e),e(E_e,qKo),e(j3,NKo),e(j3,IX),e(IX,jKo),e(j3,DKo),e(Se,GKo),e(Se,D3),e(D3,C_e),e(C_e,OKo),e(D3,VKo),e(D3,qX),e(qX,XKo),e(D3,zKo),e(Se,WKo),e(Se,G3),e(G3,w_e),e(w_e,QKo),e(G3,HKo),e(G3,NX),e(NX,UKo),e(G3,JKo),e(Se,YKo),e(Se,O3),e(O3,A_e),e(A_e,KKo),e(O3,ZKo),e(O3,jX),e(jX,eZo),e(O3,oZo),e(mo,rZo),e(mo,V3),e(V3,tZo),e(V3,y_e),e(y_e,aZo),e(V3,nZo),e(V3,L_e),e(L_e,sZo),e(mo,lZo),M(X3,mo,null),b(f,Sqe,u),b(f,bd,u),e(bd,z3),e(z3,x_e),M(dL,x_e,null),e(bd,iZo),e(bd,$_e),e($_e,dZo),b(f,Rqe,u),b(f,Xo,u),M(cL,Xo,null),e(Xo,cZo),e(Xo,vd),e(vd,fZo),e(vd,DX),e(DX,mZo),e(vd,gZo),e(vd,GX),e(GX,hZo),e(vd,pZo),e(Xo,_Zo),e(Xo,fL),e(fL,uZo),e(fL,k_e),e(k_e,bZo),e(fL,vZo),e(Xo,FZo),e(Xo,Ft),M(mL,Ft,null),e(Ft,TZo),e(Ft,S_e),e(S_e,MZo),e(Ft,EZo),e(Ft,Fd),e(Fd,CZo),e(Fd,R_e),e(R_e,wZo),e(Fd,AZo),e(Fd,OX),e(OX,yZo),e(Fd,LZo),e(Ft,xZo),M(W3,Ft,null),e(Xo,$Zo),e(Xo,go),M(gL,go,null),e(go,kZo),e(go,P_e),e(P_e,SZo),e(go,RZo),e(go,Xa),e(Xa,PZo),e(Xa,B_e),e(B_e,BZo),e(Xa,IZo),e(Xa,I_e),e(I_e,qZo),e(Xa,NZo),e(Xa,q_e),e(q_e,jZo),e(Xa,DZo),e(go,GZo),e(go,hL),e(hL,Q3),e(Q3,N_e),e(N_e,OZo),e(Q3,VZo),e(Q3,VX),e(VX,XZo),e(Q3,zZo),e(hL,WZo),e(hL,H3),e(H3,j_e),e(j_e,QZo),e(H3,HZo),e(H3,XX),e(XX,UZo),e(H3,JZo),e(go,YZo),e(go,U3),e(U3,KZo),e(U3,D_e),e(D_e,ZZo),e(U3,eer),e(U3,G_e),e(G_e,oer),e(go,rer),M(J3,go,null),b(f,Pqe,u),b(f,Td,u),e(Td,Y3),e(Y3,O_e),M(pL,O_e,null),e(Td,ter),e(Td,V_e),e(V_e,aer),b(f,Bqe,u),b(f,zo,u),M(_L,zo,null),e(zo,ner),e(zo,Md),e(Md,ser),e(Md,zX),e(zX,ler),e(Md,ier),e(Md,WX),e(WX,der),e(Md,cer),e(zo,fer),e(zo,uL),e(uL,mer),e(uL,X_e),e(X_e,ger),e(uL,her),e(zo,per),e(zo,Tt),M(bL,Tt,null),e(Tt,_er),e(Tt,z_e),e(z_e,uer),e(Tt,ber),e(Tt,Ed),e(Ed,ver),e(Ed,W_e),e(W_e,Fer),e(Ed,Ter),e(Ed,QX),e(QX,Mer),e(Ed,Eer),e(Tt,Cer),M(K3,Tt,null),e(zo,wer),e(zo,ho),M(vL,ho,null),e(ho,Aer),e(ho,Q_e),e(Q_e,yer),e(ho,Ler),e(ho,za),e(za,xer),e(za,H_e),e(H_e,$er),e(za,ker),e(za,U_e),e(U_e,Ser),e(za,Rer),e(za,J_e),e(J_e,Per),e(za,Ber),e(ho,Ier),e(ho,Zr),e(Zr,Z3),e(Z3,Y_e),e(Y_e,qer),e(Z3,Ner),e(Z3,HX),e(HX,jer),e(Z3,Der),e(Zr,Ger),e(Zr,eF),e(eF,K_e),e(K_e,Oer),e(eF,Ver),e(eF,UX),e(UX,Xer),e(eF,zer),e(Zr,Wer),e(Zr,oF),e(oF,Z_e),e(Z_e,Qer),e(oF,Her),e(oF,JX),e(JX,Uer),e(oF,Jer),e(Zr,Yer),e(Zr,rF),e(rF,eue),e(eue,Ker),e(rF,Zer),e(rF,YX),e(YX,eor),e(rF,oor),e(Zr,ror),e(Zr,tF),e(tF,oue),e(oue,tor),e(tF,aor),e(tF,KX),e(KX,nor),e(tF,sor),e(ho,lor),e(ho,aF),e(aF,ior),e(aF,rue),e(rue,dor),e(aF,cor),e(aF,tue),e(tue,mor),e(ho,gor),M(nF,ho,null),b(f,Iqe,u),b(f,Cd,u),e(Cd,sF),e(sF,aue),M(FL,aue,null),e(Cd,hor),e(Cd,nue),e(nue,por),b(f,qqe,u),b(f,Wo,u),M(TL,Wo,null),e(Wo,_or),e(Wo,wd),e(wd,uor),e(wd,ZX),e(ZX,bor),e(wd,vor),e(wd,ez),e(ez,For),e(wd,Tor),e(Wo,Mor),e(Wo,ML),e(ML,Eor),e(ML,sue),e(sue,Cor),e(ML,wor),e(Wo,Aor),e(Wo,Mt),M(EL,Mt,null),e(Mt,yor),e(Mt,lue),e(lue,Lor),e(Mt,xor),e(Mt,Ad),e(Ad,$or),e(Ad,iue),e(iue,kor),e(Ad,Sor),e(Ad,oz),e(oz,Ror),e(Ad,Por),e(Mt,Bor),M(lF,Mt,null),e(Wo,Ior),e(Wo,po),M(CL,po,null),e(po,qor),e(po,due),e(due,Nor),e(po,jor),e(po,Wa),e(Wa,Dor),e(Wa,cue),e(cue,Gor),e(Wa,Oor),e(Wa,fue),e(fue,Vor),e(Wa,Xor),e(Wa,mue),e(mue,zor),e(Wa,Wor),e(po,Qor),e(po,yd),e(yd,iF),e(iF,gue),e(gue,Hor),e(iF,Uor),e(iF,rz),e(rz,Jor),e(iF,Yor),e(yd,Kor),e(yd,dF),e(dF,hue),e(hue,Zor),e(dF,err),e(dF,tz),e(tz,orr),e(dF,rrr),e(yd,trr),e(yd,cF),e(cF,pue),e(pue,arr),e(cF,nrr),e(cF,az),e(az,srr),e(cF,lrr),e(po,irr),e(po,fF),e(fF,drr),e(fF,_ue),e(_ue,crr),e(fF,frr),e(fF,uue),e(uue,mrr),e(po,grr),M(mF,po,null),b(f,Nqe,u),b(f,Ld,u),e(Ld,gF),e(gF,bue),M(wL,bue,null),e(Ld,hrr),e(Ld,vue),e(vue,prr),b(f,jqe,u),b(f,Qo,u),M(AL,Qo,null),e(Qo,_rr),e(Qo,xd),e(xd,urr),e(xd,nz),e(nz,brr),e(xd,vrr),e(xd,sz),e(sz,Frr),e(xd,Trr),e(Qo,Mrr),e(Qo,yL),e(yL,Err),e(yL,Fue),e(Fue,Crr),e(yL,wrr),e(Qo,Arr),e(Qo,Et),M(LL,Et,null),e(Et,yrr),e(Et,Tue),e(Tue,Lrr),e(Et,xrr),e(Et,$d),e($d,$rr),e($d,Mue),e(Mue,krr),e($d,Srr),e($d,lz),e(lz,Rrr),e($d,Prr),e(Et,Brr),M(hF,Et,null),e(Qo,Irr),e(Qo,_o),M(xL,_o,null),e(_o,qrr),e(_o,Eue),e(Eue,Nrr),e(_o,jrr),e(_o,Qa),e(Qa,Drr),e(Qa,Cue),e(Cue,Grr),e(Qa,Orr),e(Qa,wue),e(wue,Vrr),e(Qa,Xrr),e(Qa,Aue),e(Aue,zrr),e(Qa,Wrr),e(_o,Qrr),e(_o,$L),e($L,pF),e(pF,yue),e(yue,Hrr),e(pF,Urr),e(pF,iz),e(iz,Jrr),e(pF,Yrr),e($L,Krr),e($L,_F),e(_F,Lue),e(Lue,Zrr),e(_F,etr),e(_F,dz),e(dz,otr),e(_F,rtr),e(_o,ttr),e(_o,uF),e(uF,atr),e(uF,xue),e(xue,ntr),e(uF,str),e(uF,$ue),e($ue,ltr),e(_o,itr),M(bF,_o,null),b(f,Dqe,u),b(f,kd,u),e(kd,vF),e(vF,kue),M(kL,kue,null),e(kd,dtr),e(kd,Sue),e(Sue,ctr),b(f,Gqe,u),b(f,Ho,u),M(SL,Ho,null),e(Ho,ftr),e(Ho,Sd),e(Sd,mtr),e(Sd,cz),e(cz,gtr),e(Sd,htr),e(Sd,fz),e(fz,ptr),e(Sd,_tr),e(Ho,utr),e(Ho,RL),e(RL,btr),e(RL,Rue),e(Rue,vtr),e(RL,Ftr),e(Ho,Ttr),e(Ho,Ct),M(PL,Ct,null),e(Ct,Mtr),e(Ct,Pue),e(Pue,Etr),e(Ct,Ctr),e(Ct,Rd),e(Rd,wtr),e(Rd,Bue),e(Bue,Atr),e(Rd,ytr),e(Rd,mz),e(mz,Ltr),e(Rd,xtr),e(Ct,$tr),M(FF,Ct,null),e(Ho,ktr),e(Ho,uo),M(BL,uo,null),e(uo,Str),e(uo,Iue),e(Iue,Rtr),e(uo,Ptr),e(uo,Ha),e(Ha,Btr),e(Ha,que),e(que,Itr),e(Ha,qtr),e(Ha,Nue),e(Nue,Ntr),e(Ha,jtr),e(Ha,jue),e(jue,Dtr),e(Ha,Gtr),e(uo,Otr),e(uo,Due),e(Due,TF),e(TF,Gue),e(Gue,Vtr),e(TF,Xtr),e(TF,gz),e(gz,ztr),e(TF,Wtr),e(uo,Qtr),e(uo,MF),e(MF,Htr),e(MF,Oue),e(Oue,Utr),e(MF,Jtr),e(MF,Vue),e(Vue,Ytr),e(uo,Ktr),M(EF,uo,null),b(f,Oqe,u),b(f,Pd,u),e(Pd,CF),e(CF,Xue),M(IL,Xue,null),e(Pd,Ztr),e(Pd,zue),e(zue,ear),b(f,Vqe,u),b(f,Uo,u),M(qL,Uo,null),e(Uo,oar),e(Uo,Bd),e(Bd,rar),e(Bd,hz),e(hz,tar),e(Bd,aar),e(Bd,pz),e(pz,nar),e(Bd,sar),e(Uo,lar),e(Uo,NL),e(NL,iar),e(NL,Wue),e(Wue,dar),e(NL,car),e(Uo,far),e(Uo,wt),M(jL,wt,null),e(wt,mar),e(wt,Que),e(Que,gar),e(wt,har),e(wt,Id),e(Id,par),e(Id,Hue),e(Hue,_ar),e(Id,uar),e(Id,_z),e(_z,bar),e(Id,Far),e(wt,Tar),M(wF,wt,null),e(Uo,Mar),e(Uo,bo),M(DL,bo,null),e(bo,Ear),e(bo,Uue),e(Uue,Car),e(bo,war),e(bo,Ua),e(Ua,Aar),e(Ua,Jue),e(Jue,yar),e(Ua,Lar),e(Ua,Yue),e(Yue,xar),e(Ua,$ar),e(Ua,Kue),e(Kue,kar),e(Ua,Sar),e(bo,Rar),e(bo,Ja),e(Ja,AF),e(AF,Zue),e(Zue,Par),e(AF,Bar),e(AF,uz),e(uz,Iar),e(AF,qar),e(Ja,Nar),e(Ja,yF),e(yF,e2e),e(e2e,jar),e(yF,Dar),e(yF,bz),e(bz,Gar),e(yF,Oar),e(Ja,Var),e(Ja,LF),e(LF,o2e),e(o2e,Xar),e(LF,zar),e(LF,vz),e(vz,War),e(LF,Qar),e(Ja,Har),e(Ja,xF),e(xF,r2e),e(r2e,Uar),e(xF,Jar),e(xF,Fz),e(Fz,Yar),e(xF,Kar),e(bo,Zar),e(bo,$F),e($F,enr),e($F,t2e),e(t2e,onr),e($F,rnr),e($F,a2e),e(a2e,tnr),e(bo,anr),M(kF,bo,null),b(f,Xqe,u),b(f,qd,u),e(qd,SF),e(SF,n2e),M(GL,n2e,null),e(qd,nnr),e(qd,s2e),e(s2e,snr),b(f,zqe,u),b(f,Jo,u),M(OL,Jo,null),e(Jo,lnr),e(Jo,Nd),e(Nd,inr),e(Nd,Tz),e(Tz,dnr),e(Nd,cnr),e(Nd,Mz),e(Mz,fnr),e(Nd,mnr),e(Jo,gnr),e(Jo,VL),e(VL,hnr),e(VL,l2e),e(l2e,pnr),e(VL,_nr),e(Jo,unr),e(Jo,At),M(XL,At,null),e(At,bnr),e(At,i2e),e(i2e,vnr),e(At,Fnr),e(At,jd),e(jd,Tnr),e(jd,d2e),e(d2e,Mnr),e(jd,Enr),e(jd,Ez),e(Ez,Cnr),e(jd,wnr),e(At,Anr),M(RF,At,null),e(Jo,ynr),e(Jo,vo),M(zL,vo,null),e(vo,Lnr),e(vo,c2e),e(c2e,xnr),e(vo,$nr),e(vo,Ya),e(Ya,knr),e(Ya,f2e),e(f2e,Snr),e(Ya,Rnr),e(Ya,m2e),e(m2e,Pnr),e(Ya,Bnr),e(Ya,g2e),e(g2e,Inr),e(Ya,qnr),e(vo,Nnr),e(vo,h2e),e(h2e,PF),e(PF,p2e),e(p2e,jnr),e(PF,Dnr),e(PF,Cz),e(Cz,Gnr),e(PF,Onr),e(vo,Vnr),e(vo,BF),e(BF,Xnr),e(BF,_2e),e(_2e,znr),e(BF,Wnr),e(BF,u2e),e(u2e,Qnr),e(vo,Hnr),M(IF,vo,null),b(f,Wqe,u),b(f,Dd,u),e(Dd,qF),e(qF,b2e),M(WL,b2e,null),e(Dd,Unr),e(Dd,v2e),e(v2e,Jnr),b(f,Qqe,u),b(f,Yo,u),M(QL,Yo,null),e(Yo,Ynr),e(Yo,Gd),e(Gd,Knr),e(Gd,wz),e(wz,Znr),e(Gd,esr),e(Gd,Az),e(Az,osr),e(Gd,rsr),e(Yo,tsr),e(Yo,HL),e(HL,asr),e(HL,F2e),e(F2e,nsr),e(HL,ssr),e(Yo,lsr),e(Yo,yt),M(UL,yt,null),e(yt,isr),e(yt,T2e),e(T2e,dsr),e(yt,csr),e(yt,Od),e(Od,fsr),e(Od,M2e),e(M2e,msr),e(Od,gsr),e(Od,yz),e(yz,hsr),e(Od,psr),e(yt,_sr),M(NF,yt,null),e(Yo,usr),e(Yo,wr),M(JL,wr,null),e(wr,bsr),e(wr,E2e),e(E2e,vsr),e(wr,Fsr),e(wr,Ka),e(Ka,Tsr),e(Ka,C2e),e(C2e,Msr),e(Ka,Esr),e(Ka,w2e),e(w2e,Csr),e(Ka,wsr),e(Ka,A2e),e(A2e,Asr),e(Ka,ysr),e(wr,Lsr),e(wr,N),e(N,jF),e(jF,y2e),e(y2e,xsr),e(jF,$sr),e(jF,Lz),e(Lz,ksr),e(jF,Ssr),e(N,Rsr),e(N,DF),e(DF,L2e),e(L2e,Psr),e(DF,Bsr),e(DF,xz),e(xz,Isr),e(DF,qsr),e(N,Nsr),e(N,GF),e(GF,x2e),e(x2e,jsr),e(GF,Dsr),e(GF,$z),e($z,Gsr),e(GF,Osr),e(N,Vsr),e(N,OF),e(OF,$2e),e($2e,Xsr),e(OF,zsr),e(OF,kz),e(kz,Wsr),e(OF,Qsr),e(N,Hsr),e(N,VF),e(VF,k2e),e(k2e,Usr),e(VF,Jsr),e(VF,Sz),e(Sz,Ysr),e(VF,Ksr),e(N,Zsr),e(N,XF),e(XF,S2e),e(S2e,elr),e(XF,olr),e(XF,Rz),e(Rz,rlr),e(XF,tlr),e(N,alr),e(N,zF),e(zF,R2e),e(R2e,nlr),e(zF,slr),e(zF,Pz),e(Pz,llr),e(zF,ilr),e(N,dlr),e(N,WF),e(WF,P2e),e(P2e,clr),e(WF,flr),e(WF,Bz),e(Bz,mlr),e(WF,glr),e(N,hlr),e(N,QF),e(QF,B2e),e(B2e,plr),e(QF,_lr),e(QF,Iz),e(Iz,ulr),e(QF,blr),e(N,vlr),e(N,HF),e(HF,I2e),e(I2e,Flr),e(HF,Tlr),e(HF,qz),e(qz,Mlr),e(HF,Elr),e(N,Clr),e(N,UF),e(UF,q2e),e(q2e,wlr),e(UF,Alr),e(UF,Nz),e(Nz,ylr),e(UF,Llr),e(N,xlr),e(N,JF),e(JF,N2e),e(N2e,$lr),e(JF,klr),e(JF,jz),e(jz,Slr),e(JF,Rlr),e(N,Plr),e(N,YF),e(YF,j2e),e(j2e,Blr),e(YF,Ilr),e(YF,Dz),e(Dz,qlr),e(YF,Nlr),e(N,jlr),e(N,KF),e(KF,D2e),e(D2e,Dlr),e(KF,Glr),e(KF,Gz),e(Gz,Olr),e(KF,Vlr),e(N,Xlr),e(N,ZF),e(ZF,G2e),e(G2e,zlr),e(ZF,Wlr),e(ZF,Oz),e(Oz,Qlr),e(ZF,Hlr),e(N,Ulr),e(N,eT),e(eT,O2e),e(O2e,Jlr),e(eT,Ylr),e(eT,Vz),e(Vz,Klr),e(eT,Zlr),e(N,eir),e(N,oT),e(oT,V2e),e(V2e,oir),e(oT,rir),e(oT,Xz),e(Xz,tir),e(oT,air),e(N,nir),e(N,Bs),e(Bs,X2e),e(X2e,sir),e(Bs,lir),e(Bs,zz),e(zz,iir),e(Bs,dir),e(Bs,Wz),e(Wz,cir),e(Bs,fir),e(N,mir),e(N,rT),e(rT,z2e),e(z2e,gir),e(rT,hir),e(rT,Qz),e(Qz,pir),e(rT,_ir),e(N,uir),e(N,tT),e(tT,W2e),e(W2e,bir),e(tT,vir),e(tT,Hz),e(Hz,Fir),e(tT,Tir),e(N,Mir),e(N,aT),e(aT,Q2e),e(Q2e,Eir),e(aT,Cir),e(aT,Uz),e(Uz,wir),e(aT,Air),e(N,yir),e(N,nT),e(nT,H2e),e(H2e,Lir),e(nT,xir),e(nT,Jz),e(Jz,$ir),e(nT,kir),e(N,Sir),e(N,sT),e(sT,U2e),e(U2e,Rir),e(sT,Pir),e(sT,Yz),e(Yz,Bir),e(sT,Iir),e(N,qir),e(N,lT),e(lT,J2e),e(J2e,Nir),e(lT,jir),e(lT,Kz),e(Kz,Dir),e(lT,Gir),e(N,Oir),e(N,iT),e(iT,Y2e),e(Y2e,Vir),e(iT,Xir),e(iT,Zz),e(Zz,zir),e(iT,Wir),e(N,Qir),e(N,dT),e(dT,K2e),e(K2e,Hir),e(dT,Uir),e(dT,eW),e(eW,Jir),e(dT,Yir),e(N,Kir),e(N,cT),e(cT,Z2e),e(Z2e,Zir),e(cT,edr),e(cT,oW),e(oW,odr),e(cT,rdr),e(N,tdr),e(N,fT),e(fT,e1e),e(e1e,adr),e(fT,ndr),e(fT,rW),e(rW,sdr),e(fT,ldr),e(N,idr),e(N,mT),e(mT,o1e),e(o1e,ddr),e(mT,cdr),e(mT,tW),e(tW,fdr),e(mT,mdr),e(N,gdr),e(N,gT),e(gT,r1e),e(r1e,hdr),e(gT,pdr),e(gT,aW),e(aW,_dr),e(gT,udr),e(N,bdr),e(N,hT),e(hT,t1e),e(t1e,vdr),e(hT,Fdr),e(hT,nW),e(nW,Tdr),e(hT,Mdr),e(N,Edr),e(N,pT),e(pT,a1e),e(a1e,Cdr),e(pT,wdr),e(pT,sW),e(sW,Adr),e(pT,ydr),e(N,Ldr),e(N,_T),e(_T,n1e),e(n1e,xdr),e(_T,$dr),e(_T,lW),e(lW,kdr),e(_T,Sdr),e(N,Rdr),e(N,uT),e(uT,s1e),e(s1e,Pdr),e(uT,Bdr),e(uT,iW),e(iW,Idr),e(uT,qdr),e(N,Ndr),e(N,bT),e(bT,l1e),e(l1e,jdr),e(bT,Ddr),e(bT,dW),e(dW,Gdr),e(bT,Odr),e(N,Vdr),e(N,vT),e(vT,i1e),e(i1e,Xdr),e(vT,zdr),e(vT,cW),e(cW,Wdr),e(vT,Qdr),e(N,Hdr),e(N,FT),e(FT,d1e),e(d1e,Udr),e(FT,Jdr),e(FT,fW),e(fW,Ydr),e(FT,Kdr),e(N,Zdr),e(N,TT),e(TT,c1e),e(c1e,ecr),e(TT,ocr),e(TT,mW),e(mW,rcr),e(TT,tcr),e(N,acr),e(N,MT),e(MT,f1e),e(f1e,ncr),e(MT,scr),e(MT,gW),e(gW,lcr),e(MT,icr),e(N,dcr),e(N,ET),e(ET,m1e),e(m1e,ccr),e(ET,fcr),e(ET,hW),e(hW,mcr),e(ET,gcr),e(N,hcr),e(N,CT),e(CT,g1e),e(g1e,pcr),e(CT,_cr),e(CT,pW),e(pW,ucr),e(CT,bcr),e(N,vcr),e(N,wT),e(wT,h1e),e(h1e,Fcr),e(wT,Tcr),e(wT,_W),e(_W,Mcr),e(wT,Ecr),e(N,Ccr),e(N,AT),e(AT,p1e),e(p1e,wcr),e(AT,Acr),e(AT,uW),e(uW,ycr),e(AT,Lcr),e(N,xcr),e(N,yT),e(yT,_1e),e(_1e,$cr),e(yT,kcr),e(yT,bW),e(bW,Scr),e(yT,Rcr),e(N,Pcr),e(N,LT),e(LT,u1e),e(u1e,Bcr),e(LT,Icr),e(LT,vW),e(vW,qcr),e(LT,Ncr),e(N,jcr),e(N,xT),e(xT,b1e),e(b1e,Dcr),e(xT,Gcr),e(xT,FW),e(FW,Ocr),e(xT,Vcr),e(wr,Xcr),M($T,wr,null),b(f,Hqe,u),b(f,Vd,u),e(Vd,kT),e(kT,v1e),M(YL,v1e,null),e(Vd,zcr),e(Vd,F1e),e(F1e,Wcr),b(f,Uqe,u),b(f,Ko,u),M(KL,Ko,null),e(Ko,Qcr),e(Ko,Xd),e(Xd,Hcr),e(Xd,TW),e(TW,Ucr),e(Xd,Jcr),e(Xd,MW),e(MW,Ycr),e(Xd,Kcr),e(Ko,Zcr),e(Ko,ZL),e(ZL,efr),e(ZL,T1e),e(T1e,ofr),e(ZL,rfr),e(Ko,tfr),e(Ko,Lt),M(e8,Lt,null),e(Lt,afr),e(Lt,M1e),e(M1e,nfr),e(Lt,sfr),e(Lt,zd),e(zd,lfr),e(zd,E1e),e(E1e,ifr),e(zd,dfr),e(zd,EW),e(EW,cfr),e(zd,ffr),e(Lt,mfr),M(ST,Lt,null),e(Ko,gfr),e(Ko,Ar),M(o8,Ar,null),e(Ar,hfr),e(Ar,C1e),e(C1e,pfr),e(Ar,_fr),e(Ar,Za),e(Za,ufr),e(Za,w1e),e(w1e,bfr),e(Za,vfr),e(Za,A1e),e(A1e,Ffr),e(Za,Tfr),e(Za,y1e),e(y1e,Mfr),e(Za,Efr),e(Ar,Cfr),e(Ar,se),e(se,RT),e(RT,L1e),e(L1e,wfr),e(RT,Afr),e(RT,CW),e(CW,yfr),e(RT,Lfr),e(se,xfr),e(se,PT),e(PT,x1e),e(x1e,$fr),e(PT,kfr),e(PT,wW),e(wW,Sfr),e(PT,Rfr),e(se,Pfr),e(se,BT),e(BT,$1e),e($1e,Bfr),e(BT,Ifr),e(BT,AW),e(AW,qfr),e(BT,Nfr),e(se,jfr),e(se,IT),e(IT,k1e),e(k1e,Dfr),e(IT,Gfr),e(IT,yW),e(yW,Ofr),e(IT,Vfr),e(se,Xfr),e(se,qT),e(qT,S1e),e(S1e,zfr),e(qT,Wfr),e(qT,LW),e(LW,Qfr),e(qT,Hfr),e(se,Ufr),e(se,NT),e(NT,R1e),e(R1e,Jfr),e(NT,Yfr),e(NT,xW),e(xW,Kfr),e(NT,Zfr),e(se,emr),e(se,jT),e(jT,P1e),e(P1e,omr),e(jT,rmr),e(jT,$W),e($W,tmr),e(jT,amr),e(se,nmr),e(se,DT),e(DT,B1e),e(B1e,smr),e(DT,lmr),e(DT,kW),e(kW,imr),e(DT,dmr),e(se,cmr),e(se,GT),e(GT,I1e),e(I1e,fmr),e(GT,mmr),e(GT,SW),e(SW,gmr),e(GT,hmr),e(se,pmr),e(se,OT),e(OT,q1e),e(q1e,_mr),e(OT,umr),e(OT,RW),e(RW,bmr),e(OT,vmr),e(se,Fmr),e(se,VT),e(VT,N1e),e(N1e,Tmr),e(VT,Mmr),e(VT,PW),e(PW,Emr),e(VT,Cmr),e(se,wmr),e(se,XT),e(XT,j1e),e(j1e,Amr),e(XT,ymr),e(XT,BW),e(BW,Lmr),e(XT,xmr),e(se,$mr),e(se,zT),e(zT,D1e),e(D1e,kmr),e(zT,Smr),e(zT,IW),e(IW,Rmr),e(zT,Pmr),e(se,Bmr),e(se,WT),e(WT,G1e),e(G1e,Imr),e(WT,qmr),e(WT,qW),e(qW,Nmr),e(WT,jmr),e(se,Dmr),e(se,QT),e(QT,O1e),e(O1e,Gmr),e(QT,Omr),e(QT,NW),e(NW,Vmr),e(QT,Xmr),e(se,zmr),e(se,HT),e(HT,V1e),e(V1e,Wmr),e(HT,Qmr),e(HT,jW),e(jW,Hmr),e(HT,Umr),e(se,Jmr),e(se,UT),e(UT,X1e),e(X1e,Ymr),e(UT,Kmr),e(UT,DW),e(DW,Zmr),e(UT,egr),e(se,ogr),e(se,JT),e(JT,z1e),e(z1e,rgr),e(JT,tgr),e(JT,GW),e(GW,agr),e(JT,ngr),e(se,sgr),e(se,YT),e(YT,W1e),e(W1e,lgr),e(YT,igr),e(YT,OW),e(OW,dgr),e(YT,cgr),e(se,fgr),e(se,KT),e(KT,Q1e),e(Q1e,mgr),e(KT,ggr),e(KT,VW),e(VW,hgr),e(KT,pgr),e(se,_gr),e(se,ZT),e(ZT,H1e),e(H1e,ugr),e(ZT,bgr),e(ZT,XW),e(XW,vgr),e(ZT,Fgr),e(se,Tgr),e(se,e7),e(e7,U1e),e(U1e,Mgr),e(e7,Egr),e(e7,zW),e(zW,Cgr),e(e7,wgr),e(se,Agr),e(se,o7),e(o7,J1e),e(J1e,ygr),e(o7,Lgr),e(o7,WW),e(WW,xgr),e(o7,$gr),e(Ar,kgr),M(r7,Ar,null),b(f,Jqe,u),b(f,Wd,u),e(Wd,t7),e(t7,Y1e),M(r8,Y1e,null),e(Wd,Sgr),e(Wd,K1e),e(K1e,Rgr),b(f,Yqe,u),b(f,Zo,u),M(t8,Zo,null),e(Zo,Pgr),e(Zo,Qd),e(Qd,Bgr),e(Qd,QW),e(QW,Igr),e(Qd,qgr),e(Qd,HW),e(HW,Ngr),e(Qd,jgr),e(Zo,Dgr),e(Zo,a8),e(a8,Ggr),e(a8,Z1e),e(Z1e,Ogr),e(a8,Vgr),e(Zo,Xgr),e(Zo,xt),M(n8,xt,null),e(xt,zgr),e(xt,ebe),e(ebe,Wgr),e(xt,Qgr),e(xt,Hd),e(Hd,Hgr),e(Hd,obe),e(obe,Ugr),e(Hd,Jgr),e(Hd,UW),e(UW,Ygr),e(Hd,Kgr),e(xt,Zgr),M(a7,xt,null),e(Zo,ehr),e(Zo,yr),M(s8,yr,null),e(yr,ohr),e(yr,rbe),e(rbe,rhr),e(yr,thr),e(yr,en),e(en,ahr),e(en,tbe),e(tbe,nhr),e(en,shr),e(en,abe),e(abe,lhr),e(en,ihr),e(en,nbe),e(nbe,dhr),e(en,chr),e(yr,fhr),e(yr,Me),e(Me,n7),e(n7,sbe),e(sbe,mhr),e(n7,ghr),e(n7,JW),e(JW,hhr),e(n7,phr),e(Me,_hr),e(Me,s7),e(s7,lbe),e(lbe,uhr),e(s7,bhr),e(s7,YW),e(YW,vhr),e(s7,Fhr),e(Me,Thr),e(Me,l7),e(l7,ibe),e(ibe,Mhr),e(l7,Ehr),e(l7,KW),e(KW,Chr),e(l7,whr),e(Me,Ahr),e(Me,i7),e(i7,dbe),e(dbe,yhr),e(i7,Lhr),e(i7,ZW),e(ZW,xhr),e(i7,$hr),e(Me,khr),e(Me,d7),e(d7,cbe),e(cbe,Shr),e(d7,Rhr),e(d7,eQ),e(eQ,Phr),e(d7,Bhr),e(Me,Ihr),e(Me,c7),e(c7,fbe),e(fbe,qhr),e(c7,Nhr),e(c7,oQ),e(oQ,jhr),e(c7,Dhr),e(Me,Ghr),e(Me,f7),e(f7,mbe),e(mbe,Ohr),e(f7,Vhr),e(f7,rQ),e(rQ,Xhr),e(f7,zhr),e(Me,Whr),e(Me,m7),e(m7,gbe),e(gbe,Qhr),e(m7,Hhr),e(m7,tQ),e(tQ,Uhr),e(m7,Jhr),e(Me,Yhr),e(Me,g7),e(g7,hbe),e(hbe,Khr),e(g7,Zhr),e(g7,aQ),e(aQ,epr),e(g7,opr),e(Me,rpr),e(Me,h7),e(h7,pbe),e(pbe,tpr),e(h7,apr),e(h7,nQ),e(nQ,npr),e(h7,spr),e(Me,lpr),e(Me,p7),e(p7,_be),e(_be,ipr),e(p7,dpr),e(p7,sQ),e(sQ,cpr),e(p7,fpr),e(Me,mpr),e(Me,_7),e(_7,ube),e(ube,gpr),e(_7,hpr),e(_7,lQ),e(lQ,ppr),e(_7,_pr),e(yr,upr),M(u7,yr,null),b(f,Kqe,u),b(f,Ud,u),e(Ud,b7),e(b7,bbe),M(l8,bbe,null),e(Ud,bpr),e(Ud,vbe),e(vbe,vpr),b(f,Zqe,u),b(f,er,u),M(i8,er,null),e(er,Fpr),e(er,Jd),e(Jd,Tpr),e(Jd,iQ),e(iQ,Mpr),e(Jd,Epr),e(Jd,dQ),e(dQ,Cpr),e(Jd,wpr),e(er,Apr),e(er,d8),e(d8,ypr),e(d8,Fbe),e(Fbe,Lpr),e(d8,xpr),e(er,$pr),e(er,$t),M(c8,$t,null),e($t,kpr),e($t,Tbe),e(Tbe,Spr),e($t,Rpr),e($t,Yd),e(Yd,Ppr),e(Yd,Mbe),e(Mbe,Bpr),e(Yd,Ipr),e(Yd,cQ),e(cQ,qpr),e(Yd,Npr),e($t,jpr),M(v7,$t,null),e(er,Dpr),e(er,Lr),M(f8,Lr,null),e(Lr,Gpr),e(Lr,Ebe),e(Ebe,Opr),e(Lr,Vpr),e(Lr,on),e(on,Xpr),e(on,Cbe),e(Cbe,zpr),e(on,Wpr),e(on,wbe),e(wbe,Qpr),e(on,Hpr),e(on,Abe),e(Abe,Upr),e(on,Jpr),e(Lr,Ypr),e(Lr,rn),e(rn,F7),e(F7,ybe),e(ybe,Kpr),e(F7,Zpr),e(F7,fQ),e(fQ,e_r),e(F7,o_r),e(rn,r_r),e(rn,T7),e(T7,Lbe),e(Lbe,t_r),e(T7,a_r),e(T7,mQ),e(mQ,n_r),e(T7,s_r),e(rn,l_r),e(rn,M7),e(M7,xbe),e(xbe,i_r),e(M7,d_r),e(M7,gQ),e(gQ,c_r),e(M7,f_r),e(rn,m_r),e(rn,E7),e(E7,$be),e($be,g_r),e(E7,h_r),e(E7,hQ),e(hQ,p_r),e(E7,__r),e(Lr,u_r),M(C7,Lr,null),b(f,eNe,u),b(f,Kd,u),e(Kd,w7),e(w7,kbe),M(m8,kbe,null),e(Kd,b_r),e(Kd,Sbe),e(Sbe,v_r),b(f,oNe,u),b(f,or,u),M(g8,or,null),e(or,F_r),e(or,Zd),e(Zd,T_r),e(Zd,pQ),e(pQ,M_r),e(Zd,E_r),e(Zd,_Q),e(_Q,C_r),e(Zd,w_r),e(or,A_r),e(or,h8),e(h8,y_r),e(h8,Rbe),e(Rbe,L_r),e(h8,x_r),e(or,$_r),e(or,kt),M(p8,kt,null),e(kt,k_r),e(kt,Pbe),e(Pbe,S_r),e(kt,R_r),e(kt,ec),e(ec,P_r),e(ec,Bbe),e(Bbe,B_r),e(ec,I_r),e(ec,uQ),e(uQ,q_r),e(ec,N_r),e(kt,j_r),M(A7,kt,null),e(or,D_r),e(or,xr),M(_8,xr,null),e(xr,G_r),e(xr,Ibe),e(Ibe,O_r),e(xr,V_r),e(xr,tn),e(tn,X_r),e(tn,qbe),e(qbe,z_r),e(tn,W_r),e(tn,Nbe),e(Nbe,Q_r),e(tn,H_r),e(tn,jbe),e(jbe,U_r),e(tn,J_r),e(xr,Y_r),e(xr,ie),e(ie,y7),e(y7,Dbe),e(Dbe,K_r),e(y7,Z_r),e(y7,bQ),e(bQ,eur),e(y7,our),e(ie,rur),e(ie,L7),e(L7,Gbe),e(Gbe,tur),e(L7,aur),e(L7,vQ),e(vQ,nur),e(L7,sur),e(ie,lur),e(ie,x7),e(x7,Obe),e(Obe,iur),e(x7,dur),e(x7,FQ),e(FQ,cur),e(x7,fur),e(ie,mur),e(ie,$7),e($7,Vbe),e(Vbe,gur),e($7,hur),e($7,TQ),e(TQ,pur),e($7,_ur),e(ie,uur),e(ie,k7),e(k7,Xbe),e(Xbe,bur),e(k7,vur),e(k7,MQ),e(MQ,Fur),e(k7,Tur),e(ie,Mur),e(ie,S7),e(S7,zbe),e(zbe,Eur),e(S7,Cur),e(S7,EQ),e(EQ,wur),e(S7,Aur),e(ie,yur),e(ie,R7),e(R7,Wbe),e(Wbe,Lur),e(R7,xur),e(R7,CQ),e(CQ,$ur),e(R7,kur),e(ie,Sur),e(ie,P7),e(P7,Qbe),e(Qbe,Rur),e(P7,Pur),e(P7,wQ),e(wQ,Bur),e(P7,Iur),e(ie,qur),e(ie,B7),e(B7,Hbe),e(Hbe,Nur),e(B7,jur),e(B7,AQ),e(AQ,Dur),e(B7,Gur),e(ie,Our),e(ie,I7),e(I7,Ube),e(Ube,Vur),e(I7,Xur),e(I7,yQ),e(yQ,zur),e(I7,Wur),e(ie,Qur),e(ie,q7),e(q7,Jbe),e(Jbe,Hur),e(q7,Uur),e(q7,LQ),e(LQ,Jur),e(q7,Yur),e(ie,Kur),e(ie,N7),e(N7,Ybe),e(Ybe,Zur),e(N7,e2r),e(N7,xQ),e(xQ,o2r),e(N7,r2r),e(ie,t2r),e(ie,j7),e(j7,Kbe),e(Kbe,a2r),e(j7,n2r),e(j7,$Q),e($Q,s2r),e(j7,l2r),e(ie,i2r),e(ie,D7),e(D7,Zbe),e(Zbe,d2r),e(D7,c2r),e(D7,kQ),e(kQ,f2r),e(D7,m2r),e(ie,g2r),e(ie,G7),e(G7,e5e),e(e5e,h2r),e(G7,p2r),e(G7,SQ),e(SQ,_2r),e(G7,u2r),e(ie,b2r),e(ie,O7),e(O7,o5e),e(o5e,v2r),e(O7,F2r),e(O7,RQ),e(RQ,T2r),e(O7,M2r),e(ie,E2r),e(ie,V7),e(V7,r5e),e(r5e,C2r),e(V7,w2r),e(V7,PQ),e(PQ,A2r),e(V7,y2r),e(ie,L2r),e(ie,X7),e(X7,t5e),e(t5e,x2r),e(X7,$2r),e(X7,BQ),e(BQ,k2r),e(X7,S2r),e(ie,R2r),e(ie,z7),e(z7,a5e),e(a5e,P2r),e(z7,B2r),e(z7,IQ),e(IQ,I2r),e(z7,q2r),e(ie,N2r),e(ie,W7),e(W7,n5e),e(n5e,j2r),e(W7,D2r),e(W7,qQ),e(qQ,G2r),e(W7,O2r),e(xr,V2r),M(Q7,xr,null),b(f,rNe,u),b(f,oc,u),e(oc,H7),e(H7,s5e),M(u8,s5e,null),e(oc,X2r),e(oc,l5e),e(l5e,z2r),b(f,tNe,u),b(f,rr,u),M(b8,rr,null),e(rr,W2r),e(rr,rc),e(rc,Q2r),e(rc,NQ),e(NQ,H2r),e(rc,U2r),e(rc,jQ),e(jQ,J2r),e(rc,Y2r),e(rr,K2r),e(rr,v8),e(v8,Z2r),e(v8,i5e),e(i5e,e1r),e(v8,o1r),e(rr,r1r),e(rr,St),M(F8,St,null),e(St,t1r),e(St,d5e),e(d5e,a1r),e(St,n1r),e(St,tc),e(tc,s1r),e(tc,c5e),e(c5e,l1r),e(tc,i1r),e(tc,DQ),e(DQ,d1r),e(tc,c1r),e(St,f1r),M(U7,St,null),e(rr,m1r),e(rr,$r),M(T8,$r,null),e($r,g1r),e($r,f5e),e(f5e,h1r),e($r,p1r),e($r,an),e(an,_1r),e(an,m5e),e(m5e,u1r),e(an,b1r),e(an,g5e),e(g5e,v1r),e(an,F1r),e(an,h5e),e(h5e,T1r),e(an,M1r),e($r,E1r),e($r,ye),e(ye,J7),e(J7,p5e),e(p5e,C1r),e(J7,w1r),e(J7,GQ),e(GQ,A1r),e(J7,y1r),e(ye,L1r),e(ye,Y7),e(Y7,_5e),e(_5e,x1r),e(Y7,$1r),e(Y7,OQ),e(OQ,k1r),e(Y7,S1r),e(ye,R1r),e(ye,K7),e(K7,u5e),e(u5e,P1r),e(K7,B1r),e(K7,VQ),e(VQ,I1r),e(K7,q1r),e(ye,N1r),e(ye,Z7),e(Z7,b5e),e(b5e,j1r),e(Z7,D1r),e(Z7,XQ),e(XQ,G1r),e(Z7,O1r),e(ye,V1r),e(ye,eM),e(eM,v5e),e(v5e,X1r),e(eM,z1r),e(eM,zQ),e(zQ,W1r),e(eM,Q1r),e(ye,H1r),e(ye,oM),e(oM,F5e),e(F5e,U1r),e(oM,J1r),e(oM,WQ),e(WQ,Y1r),e(oM,K1r),e(ye,Z1r),e(ye,rM),e(rM,T5e),e(T5e,ebr),e(rM,obr),e(rM,QQ),e(QQ,rbr),e(rM,tbr),e(ye,abr),e(ye,tM),e(tM,M5e),e(M5e,nbr),e(tM,sbr),e(tM,HQ),e(HQ,lbr),e(tM,ibr),e(ye,dbr),e(ye,aM),e(aM,E5e),e(E5e,cbr),e(aM,fbr),e(aM,UQ),e(UQ,mbr),e(aM,gbr),e(ye,hbr),e(ye,nM),e(nM,C5e),e(C5e,pbr),e(nM,_br),e(nM,JQ),e(JQ,ubr),e(nM,bbr),e($r,vbr),M(sM,$r,null),b(f,aNe,u),b(f,ac,u),e(ac,lM),e(lM,w5e),M(M8,w5e,null),e(ac,Fbr),e(ac,A5e),e(A5e,Tbr),b(f,nNe,u),b(f,tr,u),M(E8,tr,null),e(tr,Mbr),e(tr,nc),e(nc,Ebr),e(nc,YQ),e(YQ,Cbr),e(nc,wbr),e(nc,KQ),e(KQ,Abr),e(nc,ybr),e(tr,Lbr),e(tr,C8),e(C8,xbr),e(C8,y5e),e(y5e,$br),e(C8,kbr),e(tr,Sbr),e(tr,Rt),M(w8,Rt,null),e(Rt,Rbr),e(Rt,L5e),e(L5e,Pbr),e(Rt,Bbr),e(Rt,sc),e(sc,Ibr),e(sc,x5e),e(x5e,qbr),e(sc,Nbr),e(sc,ZQ),e(ZQ,jbr),e(sc,Dbr),e(Rt,Gbr),M(iM,Rt,null),e(tr,Obr),e(tr,kr),M(A8,kr,null),e(kr,Vbr),e(kr,$5e),e($5e,Xbr),e(kr,zbr),e(kr,nn),e(nn,Wbr),e(nn,k5e),e(k5e,Qbr),e(nn,Hbr),e(nn,S5e),e(S5e,Ubr),e(nn,Jbr),e(nn,R5e),e(R5e,Ybr),e(nn,Kbr),e(kr,Zbr),e(kr,ee),e(ee,dM),e(dM,P5e),e(P5e,e5r),e(dM,o5r),e(dM,eH),e(eH,r5r),e(dM,t5r),e(ee,a5r),e(ee,cM),e(cM,B5e),e(B5e,n5r),e(cM,s5r),e(cM,oH),e(oH,l5r),e(cM,i5r),e(ee,d5r),e(ee,fM),e(fM,I5e),e(I5e,c5r),e(fM,f5r),e(fM,rH),e(rH,m5r),e(fM,g5r),e(ee,h5r),e(ee,mM),e(mM,q5e),e(q5e,p5r),e(mM,_5r),e(mM,tH),e(tH,u5r),e(mM,b5r),e(ee,v5r),e(ee,gM),e(gM,N5e),e(N5e,F5r),e(gM,T5r),e(gM,aH),e(aH,M5r),e(gM,E5r),e(ee,C5r),e(ee,hM),e(hM,j5e),e(j5e,w5r),e(hM,A5r),e(hM,nH),e(nH,y5r),e(hM,L5r),e(ee,x5r),e(ee,pM),e(pM,D5e),e(D5e,$5r),e(pM,k5r),e(pM,sH),e(sH,S5r),e(pM,R5r),e(ee,P5r),e(ee,_M),e(_M,G5e),e(G5e,B5r),e(_M,I5r),e(_M,lH),e(lH,q5r),e(_M,N5r),e(ee,j5r),e(ee,uM),e(uM,O5e),e(O5e,D5r),e(uM,G5r),e(uM,iH),e(iH,O5r),e(uM,V5r),e(ee,X5r),e(ee,bM),e(bM,V5e),e(V5e,z5r),e(bM,W5r),e(bM,dH),e(dH,Q5r),e(bM,H5r),e(ee,U5r),e(ee,vM),e(vM,X5e),e(X5e,J5r),e(vM,Y5r),e(vM,cH),e(cH,K5r),e(vM,Z5r),e(ee,evr),e(ee,FM),e(FM,z5e),e(z5e,ovr),e(FM,rvr),e(FM,fH),e(fH,tvr),e(FM,avr),e(ee,nvr),e(ee,TM),e(TM,W5e),e(W5e,svr),e(TM,lvr),e(TM,mH),e(mH,ivr),e(TM,dvr),e(ee,cvr),e(ee,MM),e(MM,Q5e),e(Q5e,fvr),e(MM,mvr),e(MM,gH),e(gH,gvr),e(MM,hvr),e(ee,pvr),e(ee,EM),e(EM,H5e),e(H5e,_vr),e(EM,uvr),e(EM,hH),e(hH,bvr),e(EM,vvr),e(ee,Fvr),e(ee,CM),e(CM,U5e),e(U5e,Tvr),e(CM,Mvr),e(CM,pH),e(pH,Evr),e(CM,Cvr),e(ee,wvr),e(ee,wM),e(wM,J5e),e(J5e,Avr),e(wM,yvr),e(wM,_H),e(_H,Lvr),e(wM,xvr),e(ee,$vr),e(ee,AM),e(AM,Y5e),e(Y5e,kvr),e(AM,Svr),e(AM,uH),e(uH,Rvr),e(AM,Pvr),e(ee,Bvr),e(ee,yM),e(yM,K5e),e(K5e,Ivr),e(yM,qvr),e(yM,bH),e(bH,Nvr),e(yM,jvr),e(ee,Dvr),e(ee,LM),e(LM,Z5e),e(Z5e,Gvr),e(LM,Ovr),e(LM,vH),e(vH,Vvr),e(LM,Xvr),e(ee,zvr),e(ee,xM),e(xM,eve),e(eve,Wvr),e(xM,Qvr),e(xM,FH),e(FH,Hvr),e(xM,Uvr),e(ee,Jvr),e(ee,$M),e($M,ove),e(ove,Yvr),e($M,Kvr),e($M,TH),e(TH,Zvr),e($M,e3r),e(ee,o3r),e(ee,kM),e(kM,rve),e(rve,r3r),e(kM,t3r),e(kM,MH),e(MH,a3r),e(kM,n3r),e(ee,s3r),e(ee,SM),e(SM,tve),e(tve,l3r),e(SM,i3r),e(SM,EH),e(EH,d3r),e(SM,c3r),e(ee,f3r),e(ee,RM),e(RM,ave),e(ave,m3r),e(RM,g3r),e(RM,CH),e(CH,h3r),e(RM,p3r),e(ee,_3r),e(ee,PM),e(PM,nve),e(nve,u3r),e(PM,b3r),e(PM,wH),e(wH,v3r),e(PM,F3r),e(kr,T3r),M(BM,kr,null),b(f,sNe,u),b(f,lc,u),e(lc,IM),e(IM,sve),M(y8,sve,null),e(lc,M3r),e(lc,lve),e(lve,E3r),b(f,lNe,u),b(f,ar,u),M(L8,ar,null),e(ar,C3r),e(ar,ic),e(ic,w3r),e(ic,AH),e(AH,A3r),e(ic,y3r),e(ic,yH),e(yH,L3r),e(ic,x3r),e(ar,$3r),e(ar,x8),e(x8,k3r),e(x8,ive),e(ive,S3r),e(x8,R3r),e(ar,P3r),e(ar,Pt),M($8,Pt,null),e(Pt,B3r),e(Pt,dve),e(dve,I3r),e(Pt,q3r),e(Pt,dc),e(dc,N3r),e(dc,cve),e(cve,j3r),e(dc,D3r),e(dc,LH),e(LH,G3r),e(dc,O3r),e(Pt,V3r),M(qM,Pt,null),e(ar,X3r),e(ar,Sr),M(k8,Sr,null),e(Sr,z3r),e(Sr,fve),e(fve,W3r),e(Sr,Q3r),e(Sr,sn),e(sn,H3r),e(sn,mve),e(mve,U3r),e(sn,J3r),e(sn,gve),e(gve,Y3r),e(sn,K3r),e(sn,hve),e(hve,Z3r),e(sn,eFr),e(Sr,oFr),e(Sr,he),e(he,NM),e(NM,pve),e(pve,rFr),e(NM,tFr),e(NM,xH),e(xH,aFr),e(NM,nFr),e(he,sFr),e(he,jM),e(jM,_ve),e(_ve,lFr),e(jM,iFr),e(jM,$H),e($H,dFr),e(jM,cFr),e(he,fFr),e(he,DM),e(DM,uve),e(uve,mFr),e(DM,gFr),e(DM,kH),e(kH,hFr),e(DM,pFr),e(he,_Fr),e(he,GM),e(GM,bve),e(bve,uFr),e(GM,bFr),e(GM,SH),e(SH,vFr),e(GM,FFr),e(he,TFr),e(he,OM),e(OM,vve),e(vve,MFr),e(OM,EFr),e(OM,RH),e(RH,CFr),e(OM,wFr),e(he,AFr),e(he,VM),e(VM,Fve),e(Fve,yFr),e(VM,LFr),e(VM,PH),e(PH,xFr),e(VM,$Fr),e(he,kFr),e(he,XM),e(XM,Tve),e(Tve,SFr),e(XM,RFr),e(XM,BH),e(BH,PFr),e(XM,BFr),e(he,IFr),e(he,zM),e(zM,Mve),e(Mve,qFr),e(zM,NFr),e(zM,IH),e(IH,jFr),e(zM,DFr),e(he,GFr),e(he,WM),e(WM,Eve),e(Eve,OFr),e(WM,VFr),e(WM,qH),e(qH,XFr),e(WM,zFr),e(he,WFr),e(he,QM),e(QM,Cve),e(Cve,QFr),e(QM,HFr),e(QM,NH),e(NH,UFr),e(QM,JFr),e(he,YFr),e(he,HM),e(HM,wve),e(wve,KFr),e(HM,ZFr),e(HM,jH),e(jH,eTr),e(HM,oTr),e(he,rTr),e(he,UM),e(UM,Ave),e(Ave,tTr),e(UM,aTr),e(UM,DH),e(DH,nTr),e(UM,sTr),e(he,lTr),e(he,JM),e(JM,yve),e(yve,iTr),e(JM,dTr),e(JM,GH),e(GH,cTr),e(JM,fTr),e(he,mTr),e(he,YM),e(YM,Lve),e(Lve,gTr),e(YM,hTr),e(YM,OH),e(OH,pTr),e(YM,_Tr),e(he,uTr),e(he,KM),e(KM,xve),e(xve,bTr),e(KM,vTr),e(KM,VH),e(VH,FTr),e(KM,TTr),e(he,MTr),e(he,ZM),e(ZM,$ve),e($ve,ETr),e(ZM,CTr),e(ZM,XH),e(XH,wTr),e(ZM,ATr),e(he,yTr),e(he,e4),e(e4,kve),e(kve,LTr),e(e4,xTr),e(e4,zH),e(zH,$Tr),e(e4,kTr),e(Sr,STr),M(o4,Sr,null),b(f,iNe,u),b(f,cc,u),e(cc,r4),e(r4,Sve),M(S8,Sve,null),e(cc,RTr),e(cc,Rve),e(Rve,PTr),b(f,dNe,u),b(f,nr,u),M(R8,nr,null),e(nr,BTr),e(nr,fc),e(fc,ITr),e(fc,WH),e(WH,qTr),e(fc,NTr),e(fc,QH),e(QH,jTr),e(fc,DTr),e(nr,GTr),e(nr,P8),e(P8,OTr),e(P8,Pve),e(Pve,VTr),e(P8,XTr),e(nr,zTr),e(nr,Bt),M(B8,Bt,null),e(Bt,WTr),e(Bt,Bve),e(Bve,QTr),e(Bt,HTr),e(Bt,mc),e(mc,UTr),e(mc,Ive),e(Ive,JTr),e(mc,YTr),e(mc,HH),e(HH,KTr),e(mc,ZTr),e(Bt,e7r),M(t4,Bt,null),e(nr,o7r),e(nr,Rr),M(I8,Rr,null),e(Rr,r7r),e(Rr,qve),e(qve,t7r),e(Rr,a7r),e(Rr,ln),e(ln,n7r),e(ln,Nve),e(Nve,s7r),e(ln,l7r),e(ln,jve),e(jve,i7r),e(ln,d7r),e(ln,Dve),e(Dve,c7r),e(ln,f7r),e(Rr,m7r),e(Rr,q8),e(q8,a4),e(a4,Gve),e(Gve,g7r),e(a4,h7r),e(a4,UH),e(UH,p7r),e(a4,_7r),e(q8,u7r),e(q8,n4),e(n4,Ove),e(Ove,b7r),e(n4,v7r),e(n4,JH),e(JH,F7r),e(n4,T7r),e(Rr,M7r),M(s4,Rr,null),b(f,cNe,u),b(f,gc,u),e(gc,l4),e(l4,Vve),M(N8,Vve,null),e(gc,E7r),e(gc,Xve),e(Xve,C7r),b(f,fNe,u),b(f,sr,u),M(j8,sr,null),e(sr,w7r),e(sr,hc),e(hc,A7r),e(hc,YH),e(YH,y7r),e(hc,L7r),e(hc,KH),e(KH,x7r),e(hc,$7r),e(sr,k7r),e(sr,D8),e(D8,S7r),e(D8,zve),e(zve,R7r),e(D8,P7r),e(sr,B7r),e(sr,It),M(G8,It,null),e(It,I7r),e(It,Wve),e(Wve,q7r),e(It,N7r),e(It,pc),e(pc,j7r),e(pc,Qve),e(Qve,D7r),e(pc,G7r),e(pc,ZH),e(ZH,O7r),e(pc,V7r),e(It,X7r),M(i4,It,null),e(sr,z7r),e(sr,Pr),M(O8,Pr,null),e(Pr,W7r),e(Pr,Hve),e(Hve,Q7r),e(Pr,H7r),e(Pr,dn),e(dn,U7r),e(dn,Uve),e(Uve,J7r),e(dn,Y7r),e(dn,Jve),e(Jve,K7r),e(dn,Z7r),e(dn,Yve),e(Yve,eMr),e(dn,oMr),e(Pr,rMr),e(Pr,Kve),e(Kve,d4),e(d4,Zve),e(Zve,tMr),e(d4,aMr),e(d4,eU),e(eU,nMr),e(d4,sMr),e(Pr,lMr),M(c4,Pr,null),b(f,mNe,u),b(f,_c,u),e(_c,f4),e(f4,e3e),M(V8,e3e,null),e(_c,iMr),e(_c,o3e),e(o3e,dMr),b(f,gNe,u),b(f,lr,u),M(X8,lr,null),e(lr,cMr),e(lr,uc),e(uc,fMr),e(uc,oU),e(oU,mMr),e(uc,gMr),e(uc,rU),e(rU,hMr),e(uc,pMr),e(lr,_Mr),e(lr,z8),e(z8,uMr),e(z8,r3e),e(r3e,bMr),e(z8,vMr),e(lr,FMr),e(lr,qt),M(W8,qt,null),e(qt,TMr),e(qt,t3e),e(t3e,MMr),e(qt,EMr),e(qt,bc),e(bc,CMr),e(bc,a3e),e(a3e,wMr),e(bc,AMr),e(bc,tU),e(tU,yMr),e(bc,LMr),e(qt,xMr),M(m4,qt,null),e(lr,$Mr),e(lr,Br),M(Q8,Br,null),e(Br,kMr),e(Br,n3e),e(n3e,SMr),e(Br,RMr),e(Br,cn),e(cn,PMr),e(cn,s3e),e(s3e,BMr),e(cn,IMr),e(cn,l3e),e(l3e,qMr),e(cn,NMr),e(cn,i3e),e(i3e,jMr),e(cn,DMr),e(Br,GMr),e(Br,de),e(de,g4),e(g4,d3e),e(d3e,OMr),e(g4,VMr),e(g4,aU),e(aU,XMr),e(g4,zMr),e(de,WMr),e(de,h4),e(h4,c3e),e(c3e,QMr),e(h4,HMr),e(h4,nU),e(nU,UMr),e(h4,JMr),e(de,YMr),e(de,p4),e(p4,f3e),e(f3e,KMr),e(p4,ZMr),e(p4,sU),e(sU,e4r),e(p4,o4r),e(de,r4r),e(de,_4),e(_4,m3e),e(m3e,t4r),e(_4,a4r),e(_4,lU),e(lU,n4r),e(_4,s4r),e(de,l4r),e(de,u4),e(u4,g3e),e(g3e,i4r),e(u4,d4r),e(u4,iU),e(iU,c4r),e(u4,f4r),e(de,m4r),e(de,b4),e(b4,h3e),e(h3e,g4r),e(b4,h4r),e(b4,dU),e(dU,p4r),e(b4,_4r),e(de,u4r),e(de,v4),e(v4,p3e),e(p3e,b4r),e(v4,v4r),e(v4,cU),e(cU,F4r),e(v4,T4r),e(de,M4r),e(de,F4),e(F4,_3e),e(_3e,E4r),e(F4,C4r),e(F4,fU),e(fU,w4r),e(F4,A4r),e(de,y4r),e(de,T4),e(T4,u3e),e(u3e,L4r),e(T4,x4r),e(T4,mU),e(mU,$4r),e(T4,k4r),e(de,S4r),e(de,M4),e(M4,b3e),e(b3e,R4r),e(M4,P4r),e(M4,gU),e(gU,B4r),e(M4,I4r),e(de,q4r),e(de,E4),e(E4,v3e),e(v3e,N4r),e(E4,j4r),e(E4,hU),e(hU,D4r),e(E4,G4r),e(de,O4r),e(de,C4),e(C4,F3e),e(F3e,V4r),e(C4,X4r),e(C4,pU),e(pU,z4r),e(C4,W4r),e(de,Q4r),e(de,w4),e(w4,T3e),e(T3e,H4r),e(w4,U4r),e(w4,_U),e(_U,J4r),e(w4,Y4r),e(de,K4r),e(de,A4),e(A4,M3e),e(M3e,Z4r),e(A4,eEr),e(A4,uU),e(uU,oEr),e(A4,rEr),e(de,tEr),e(de,y4),e(y4,E3e),e(E3e,aEr),e(y4,nEr),e(y4,bU),e(bU,sEr),e(y4,lEr),e(de,iEr),e(de,L4),e(L4,C3e),e(C3e,dEr),e(L4,cEr),e(L4,vU),e(vU,fEr),e(L4,mEr),e(de,gEr),e(de,x4),e(x4,w3e),e(w3e,hEr),e(x4,pEr),e(x4,FU),e(FU,_Er),e(x4,uEr),e(de,bEr),e(de,$4),e($4,A3e),e(A3e,vEr),e($4,FEr),e($4,TU),e(TU,TEr),e($4,MEr),e(de,EEr),e(de,k4),e(k4,y3e),e(y3e,CEr),e(k4,wEr),e(k4,MU),e(MU,AEr),e(k4,yEr),e(de,LEr),e(de,S4),e(S4,L3e),e(L3e,xEr),e(S4,$Er),e(S4,EU),e(EU,kEr),e(S4,SEr),e(Br,REr),M(R4,Br,null),b(f,hNe,u),b(f,vc,u),e(vc,P4),e(P4,x3e),M(H8,x3e,null),e(vc,PEr),e(vc,$3e),e($3e,BEr),b(f,pNe,u),b(f,ir,u),M(U8,ir,null),e(ir,IEr),e(ir,Fc),e(Fc,qEr),e(Fc,CU),e(CU,NEr),e(Fc,jEr),e(Fc,wU),e(wU,DEr),e(Fc,GEr),e(ir,OEr),e(ir,J8),e(J8,VEr),e(J8,k3e),e(k3e,XEr),e(J8,zEr),e(ir,WEr),e(ir,Nt),M(Y8,Nt,null),e(Nt,QEr),e(Nt,S3e),e(S3e,HEr),e(Nt,UEr),e(Nt,Tc),e(Tc,JEr),e(Tc,R3e),e(R3e,YEr),e(Tc,KEr),e(Tc,AU),e(AU,ZEr),e(Tc,eCr),e(Nt,oCr),M(B4,Nt,null),e(ir,rCr),e(ir,Ir),M(K8,Ir,null),e(Ir,tCr),e(Ir,P3e),e(P3e,aCr),e(Ir,nCr),e(Ir,fn),e(fn,sCr),e(fn,B3e),e(B3e,lCr),e(fn,iCr),e(fn,I3e),e(I3e,dCr),e(fn,cCr),e(fn,q3e),e(q3e,fCr),e(fn,mCr),e(Ir,gCr),e(Ir,ce),e(ce,I4),e(I4,N3e),e(N3e,hCr),e(I4,pCr),e(I4,yU),e(yU,_Cr),e(I4,uCr),e(ce,bCr),e(ce,q4),e(q4,j3e),e(j3e,vCr),e(q4,FCr),e(q4,LU),e(LU,TCr),e(q4,MCr),e(ce,ECr),e(ce,N4),e(N4,D3e),e(D3e,CCr),e(N4,wCr),e(N4,xU),e(xU,ACr),e(N4,yCr),e(ce,LCr),e(ce,j4),e(j4,G3e),e(G3e,xCr),e(j4,$Cr),e(j4,$U),e($U,kCr),e(j4,SCr),e(ce,RCr),e(ce,D4),e(D4,O3e),e(O3e,PCr),e(D4,BCr),e(D4,kU),e(kU,ICr),e(D4,qCr),e(ce,NCr),e(ce,G4),e(G4,V3e),e(V3e,jCr),e(G4,DCr),e(G4,SU),e(SU,GCr),e(G4,OCr),e(ce,VCr),e(ce,O4),e(O4,X3e),e(X3e,XCr),e(O4,zCr),e(O4,RU),e(RU,WCr),e(O4,QCr),e(ce,HCr),e(ce,V4),e(V4,z3e),e(z3e,UCr),e(V4,JCr),e(V4,PU),e(PU,YCr),e(V4,KCr),e(ce,ZCr),e(ce,X4),e(X4,W3e),e(W3e,ewr),e(X4,owr),e(X4,BU),e(BU,rwr),e(X4,twr),e(ce,awr),e(ce,z4),e(z4,Q3e),e(Q3e,nwr),e(z4,swr),e(z4,IU),e(IU,lwr),e(z4,iwr),e(ce,dwr),e(ce,W4),e(W4,H3e),e(H3e,cwr),e(W4,fwr),e(W4,qU),e(qU,mwr),e(W4,gwr),e(ce,hwr),e(ce,Q4),e(Q4,U3e),e(U3e,pwr),e(Q4,_wr),e(Q4,NU),e(NU,uwr),e(Q4,bwr),e(ce,vwr),e(ce,H4),e(H4,J3e),e(J3e,Fwr),e(H4,Twr),e(H4,jU),e(jU,Mwr),e(H4,Ewr),e(ce,Cwr),e(ce,U4),e(U4,Y3e),e(Y3e,wwr),e(U4,Awr),e(U4,DU),e(DU,ywr),e(U4,Lwr),e(ce,xwr),e(ce,J4),e(J4,K3e),e(K3e,$wr),e(J4,kwr),e(J4,GU),e(GU,Swr),e(J4,Rwr),e(ce,Pwr),e(ce,Y4),e(Y4,Z3e),e(Z3e,Bwr),e(Y4,Iwr),e(Y4,OU),e(OU,qwr),e(Y4,Nwr),e(ce,jwr),e(ce,K4),e(K4,eFe),e(eFe,Dwr),e(K4,Gwr),e(K4,VU),e(VU,Owr),e(K4,Vwr),e(ce,Xwr),e(ce,Z4),e(Z4,oFe),e(oFe,zwr),e(Z4,Wwr),e(Z4,XU),e(XU,Qwr),e(Z4,Hwr),e(ce,Uwr),e(ce,eE),e(eE,rFe),e(rFe,Jwr),e(eE,Ywr),e(eE,zU),e(zU,Kwr),e(eE,Zwr),e(ce,e0r),e(ce,oE),e(oE,tFe),e(tFe,o0r),e(oE,r0r),e(oE,WU),e(WU,t0r),e(oE,a0r),e(Ir,n0r),M(rE,Ir,null),b(f,_Ne,u),b(f,Mc,u),e(Mc,tE),e(tE,aFe),M(Z8,aFe,null),e(Mc,s0r),e(Mc,nFe),e(nFe,l0r),b(f,uNe,u),b(f,dr,u),M(ex,dr,null),e(dr,i0r),e(dr,Ec),e(Ec,d0r),e(Ec,QU),e(QU,c0r),e(Ec,f0r),e(Ec,HU),e(HU,m0r),e(Ec,g0r),e(dr,h0r),e(dr,ox),e(ox,p0r),e(ox,sFe),e(sFe,_0r),e(ox,u0r),e(dr,b0r),e(dr,jt),M(rx,jt,null),e(jt,v0r),e(jt,lFe),e(lFe,F0r),e(jt,T0r),e(jt,Cc),e(Cc,M0r),e(Cc,iFe),e(iFe,E0r),e(Cc,C0r),e(Cc,UU),e(UU,w0r),e(Cc,A0r),e(jt,y0r),M(aE,jt,null),e(dr,L0r),e(dr,qr),M(tx,qr,null),e(qr,x0r),e(qr,dFe),e(dFe,$0r),e(qr,k0r),e(qr,mn),e(mn,S0r),e(mn,cFe),e(cFe,R0r),e(mn,P0r),e(mn,fFe),e(fFe,B0r),e(mn,I0r),e(mn,mFe),e(mFe,q0r),e(mn,N0r),e(qr,j0r),e(qr,gFe),e(gFe,nE),e(nE,hFe),e(hFe,D0r),e(nE,G0r),e(nE,JU),e(JU,O0r),e(nE,V0r),e(qr,X0r),M(sE,qr,null),b(f,bNe,u),b(f,wc,u),e(wc,lE),e(lE,pFe),M(ax,pFe,null),e(wc,z0r),e(wc,_Fe),e(_Fe,W0r),b(f,vNe,u),b(f,cr,u),M(nx,cr,null),e(cr,Q0r),e(cr,Ac),e(Ac,H0r),e(Ac,YU),e(YU,U0r),e(Ac,J0r),e(Ac,KU),e(KU,Y0r),e(Ac,K0r),e(cr,Z0r),e(cr,sx),e(sx,eAr),e(sx,uFe),e(uFe,oAr),e(sx,rAr),e(cr,tAr),e(cr,Dt),M(lx,Dt,null),e(Dt,aAr),e(Dt,bFe),e(bFe,nAr),e(Dt,sAr),e(Dt,yc),e(yc,lAr),e(yc,vFe),e(vFe,iAr),e(yc,dAr),e(yc,ZU),e(ZU,cAr),e(yc,fAr),e(Dt,mAr),M(iE,Dt,null),e(cr,gAr),e(cr,Nr),M(ix,Nr,null),e(Nr,hAr),e(Nr,FFe),e(FFe,pAr),e(Nr,_Ar),e(Nr,gn),e(gn,uAr),e(gn,TFe),e(TFe,bAr),e(gn,vAr),e(gn,MFe),e(MFe,FAr),e(gn,TAr),e(gn,EFe),e(EFe,MAr),e(gn,EAr),e(Nr,CAr),e(Nr,CFe),e(CFe,dE),e(dE,wFe),e(wFe,wAr),e(dE,AAr),e(dE,eJ),e(eJ,yAr),e(dE,LAr),e(Nr,xAr),M(cE,Nr,null),b(f,FNe,u),b(f,Lc,u),e(Lc,fE),e(fE,AFe),M(dx,AFe,null),e(Lc,$Ar),e(Lc,yFe),e(yFe,kAr),b(f,TNe,u),b(f,fr,u),M(cx,fr,null),e(fr,SAr),e(fr,xc),e(xc,RAr),e(xc,oJ),e(oJ,PAr),e(xc,BAr),e(xc,rJ),e(rJ,IAr),e(xc,qAr),e(fr,NAr),e(fr,fx),e(fx,jAr),e(fx,LFe),e(LFe,DAr),e(fx,GAr),e(fr,OAr),e(fr,Gt),M(mx,Gt,null),e(Gt,VAr),e(Gt,xFe),e(xFe,XAr),e(Gt,zAr),e(Gt,$c),e($c,WAr),e($c,$Fe),e($Fe,QAr),e($c,HAr),e($c,tJ),e(tJ,UAr),e($c,JAr),e(Gt,YAr),M(mE,Gt,null),e(fr,KAr),e(fr,jr),M(gx,jr,null),e(jr,ZAr),e(jr,kFe),e(kFe,e6r),e(jr,o6r),e(jr,hn),e(hn,r6r),e(hn,SFe),e(SFe,t6r),e(hn,a6r),e(hn,RFe),e(RFe,n6r),e(hn,s6r),e(hn,PFe),e(PFe,l6r),e(hn,i6r),e(jr,d6r),e(jr,te),e(te,gE),e(gE,BFe),e(BFe,c6r),e(gE,f6r),e(gE,aJ),e(aJ,m6r),e(gE,g6r),e(te,h6r),e(te,hE),e(hE,IFe),e(IFe,p6r),e(hE,_6r),e(hE,nJ),e(nJ,u6r),e(hE,b6r),e(te,v6r),e(te,pE),e(pE,qFe),e(qFe,F6r),e(pE,T6r),e(pE,sJ),e(sJ,M6r),e(pE,E6r),e(te,C6r),e(te,_E),e(_E,NFe),e(NFe,w6r),e(_E,A6r),e(_E,lJ),e(lJ,y6r),e(_E,L6r),e(te,x6r),e(te,uE),e(uE,jFe),e(jFe,$6r),e(uE,k6r),e(uE,iJ),e(iJ,S6r),e(uE,R6r),e(te,P6r),e(te,bE),e(bE,DFe),e(DFe,B6r),e(bE,I6r),e(bE,dJ),e(dJ,q6r),e(bE,N6r),e(te,j6r),e(te,vE),e(vE,GFe),e(GFe,D6r),e(vE,G6r),e(vE,cJ),e(cJ,O6r),e(vE,V6r),e(te,X6r),e(te,FE),e(FE,OFe),e(OFe,z6r),e(FE,W6r),e(FE,fJ),e(fJ,Q6r),e(FE,H6r),e(te,U6r),e(te,TE),e(TE,VFe),e(VFe,J6r),e(TE,Y6r),e(TE,mJ),e(mJ,K6r),e(TE,Z6r),e(te,eyr),e(te,ME),e(ME,XFe),e(XFe,oyr),e(ME,ryr),e(ME,gJ),e(gJ,tyr),e(ME,ayr),e(te,nyr),e(te,EE),e(EE,zFe),e(zFe,syr),e(EE,lyr),e(EE,hJ),e(hJ,iyr),e(EE,dyr),e(te,cyr),e(te,CE),e(CE,WFe),e(WFe,fyr),e(CE,myr),e(CE,pJ),e(pJ,gyr),e(CE,hyr),e(te,pyr),e(te,wE),e(wE,QFe),e(QFe,_yr),e(wE,uyr),e(wE,_J),e(_J,byr),e(wE,vyr),e(te,Fyr),e(te,AE),e(AE,HFe),e(HFe,Tyr),e(AE,Myr),e(AE,uJ),e(uJ,Eyr),e(AE,Cyr),e(te,wyr),e(te,yE),e(yE,UFe),e(UFe,Ayr),e(yE,yyr),e(yE,bJ),e(bJ,Lyr),e(yE,xyr),e(te,$yr),e(te,LE),e(LE,JFe),e(JFe,kyr),e(LE,Syr),e(LE,vJ),e(vJ,Ryr),e(LE,Pyr),e(te,Byr),e(te,xE),e(xE,YFe),e(YFe,Iyr),e(xE,qyr),e(xE,FJ),e(FJ,Nyr),e(xE,jyr),e(te,Dyr),e(te,$E),e($E,KFe),e(KFe,Gyr),e($E,Oyr),e($E,TJ),e(TJ,Vyr),e($E,Xyr),e(te,zyr),e(te,kE),e(kE,ZFe),e(ZFe,Wyr),e(kE,Qyr),e(kE,MJ),e(MJ,Hyr),e(kE,Uyr),e(te,Jyr),e(te,SE),e(SE,eTe),e(eTe,Yyr),e(SE,Kyr),e(SE,EJ),e(EJ,Zyr),e(SE,eLr),e(te,oLr),e(te,RE),e(RE,oTe),e(oTe,rLr),e(RE,tLr),e(RE,CJ),e(CJ,aLr),e(RE,nLr),e(te,sLr),e(te,PE),e(PE,rTe),e(rTe,lLr),e(PE,iLr),e(PE,wJ),e(wJ,dLr),e(PE,cLr),e(te,fLr),e(te,BE),e(BE,tTe),e(tTe,mLr),e(BE,gLr),e(BE,AJ),e(AJ,hLr),e(BE,pLr),e(te,_Lr),e(te,IE),e(IE,aTe),e(aTe,uLr),e(IE,bLr),e(IE,yJ),e(yJ,vLr),e(IE,FLr),e(te,TLr),e(te,qE),e(qE,nTe),e(nTe,MLr),e(qE,ELr),e(qE,LJ),e(LJ,CLr),e(qE,wLr),e(jr,ALr),M(NE,jr,null),b(f,MNe,u),b(f,kc,u),e(kc,jE),e(jE,sTe),M(hx,sTe,null),e(kc,yLr),e(kc,lTe),e(lTe,LLr),b(f,ENe,u),b(f,mr,u),M(px,mr,null),e(mr,xLr),e(mr,Sc),e(Sc,$Lr),e(Sc,xJ),e(xJ,kLr),e(Sc,SLr),e(Sc,$J),e($J,RLr),e(Sc,PLr),e(mr,BLr),e(mr,_x),e(_x,ILr),e(_x,iTe),e(iTe,qLr),e(_x,NLr),e(mr,jLr),e(mr,Ot),M(ux,Ot,null),e(Ot,DLr),e(Ot,dTe),e(dTe,GLr),e(Ot,OLr),e(Ot,Rc),e(Rc,VLr),e(Rc,cTe),e(cTe,XLr),e(Rc,zLr),e(Rc,kJ),e(kJ,WLr),e(Rc,QLr),e(Ot,HLr),M(DE,Ot,null),e(mr,ULr),e(mr,Dr),M(bx,Dr,null),e(Dr,JLr),e(Dr,fTe),e(fTe,YLr),e(Dr,KLr),e(Dr,pn),e(pn,ZLr),e(pn,mTe),e(mTe,e8r),e(pn,o8r),e(pn,gTe),e(gTe,r8r),e(pn,t8r),e(pn,hTe),e(hTe,a8r),e(pn,n8r),e(Dr,s8r),e(Dr,Re),e(Re,GE),e(GE,pTe),e(pTe,l8r),e(GE,i8r),e(GE,SJ),e(SJ,d8r),e(GE,c8r),e(Re,f8r),e(Re,OE),e(OE,_Te),e(_Te,m8r),e(OE,g8r),e(OE,RJ),e(RJ,h8r),e(OE,p8r),e(Re,_8r),e(Re,VE),e(VE,uTe),e(uTe,u8r),e(VE,b8r),e(VE,PJ),e(PJ,v8r),e(VE,F8r),e(Re,T8r),e(Re,XE),e(XE,bTe),e(bTe,M8r),e(XE,E8r),e(XE,BJ),e(BJ,C8r),e(XE,w8r),e(Re,A8r),e(Re,zE),e(zE,vTe),e(vTe,y8r),e(zE,L8r),e(zE,IJ),e(IJ,x8r),e(zE,$8r),e(Re,k8r),e(Re,WE),e(WE,FTe),e(FTe,S8r),e(WE,R8r),e(WE,qJ),e(qJ,P8r),e(WE,B8r),e(Re,I8r),e(Re,QE),e(QE,TTe),e(TTe,q8r),e(QE,N8r),e(QE,NJ),e(NJ,j8r),e(QE,D8r),e(Re,G8r),e(Re,HE),e(HE,MTe),e(MTe,O8r),e(HE,V8r),e(HE,jJ),e(jJ,X8r),e(HE,z8r),e(Re,W8r),e(Re,UE),e(UE,ETe),e(ETe,Q8r),e(UE,H8r),e(UE,DJ),e(DJ,U8r),e(UE,J8r),e(Dr,Y8r),M(JE,Dr,null),b(f,CNe,u),b(f,Pc,u),e(Pc,YE),e(YE,CTe),M(vx,CTe,null),e(Pc,K8r),e(Pc,wTe),e(wTe,Z8r),b(f,wNe,u),b(f,gr,u),M(Fx,gr,null),e(gr,exr),e(gr,Bc),e(Bc,oxr),e(Bc,GJ),e(GJ,rxr),e(Bc,txr),e(Bc,OJ),e(OJ,axr),e(Bc,nxr),e(gr,sxr),e(gr,Tx),e(Tx,lxr),e(Tx,ATe),e(ATe,ixr),e(Tx,dxr),e(gr,cxr),e(gr,Vt),M(Mx,Vt,null),e(Vt,fxr),e(Vt,yTe),e(yTe,mxr),e(Vt,gxr),e(Vt,Ic),e(Ic,hxr),e(Ic,LTe),e(LTe,pxr),e(Ic,_xr),e(Ic,VJ),e(VJ,uxr),e(Ic,bxr),e(Vt,vxr),M(KE,Vt,null),e(gr,Fxr),e(gr,Gr),M(Ex,Gr,null),e(Gr,Txr),e(Gr,xTe),e(xTe,Mxr),e(Gr,Exr),e(Gr,_n),e(_n,Cxr),e(_n,$Te),e($Te,wxr),e(_n,Axr),e(_n,kTe),e(kTe,yxr),e(_n,Lxr),e(_n,STe),e(STe,xxr),e(_n,$xr),e(Gr,kxr),e(Gr,Ee),e(Ee,ZE),e(ZE,RTe),e(RTe,Sxr),e(ZE,Rxr),e(ZE,XJ),e(XJ,Pxr),e(ZE,Bxr),e(Ee,Ixr),e(Ee,eC),e(eC,PTe),e(PTe,qxr),e(eC,Nxr),e(eC,zJ),e(zJ,jxr),e(eC,Dxr),e(Ee,Gxr),e(Ee,oC),e(oC,BTe),e(BTe,Oxr),e(oC,Vxr),e(oC,WJ),e(WJ,Xxr),e(oC,zxr),e(Ee,Wxr),e(Ee,rC),e(rC,ITe),e(ITe,Qxr),e(rC,Hxr),e(rC,QJ),e(QJ,Uxr),e(rC,Jxr),e(Ee,Yxr),e(Ee,tC),e(tC,qTe),e(qTe,Kxr),e(tC,Zxr),e(tC,HJ),e(HJ,e9r),e(tC,o9r),e(Ee,r9r),e(Ee,aC),e(aC,NTe),e(NTe,t9r),e(aC,a9r),e(aC,UJ),e(UJ,n9r),e(aC,s9r),e(Ee,l9r),e(Ee,nC),e(nC,jTe),e(jTe,i9r),e(nC,d9r),e(nC,JJ),e(JJ,c9r),e(nC,f9r),e(Ee,m9r),e(Ee,sC),e(sC,DTe),e(DTe,g9r),e(sC,h9r),e(sC,YJ),e(YJ,p9r),e(sC,_9r),e(Ee,u9r),e(Ee,lC),e(lC,GTe),e(GTe,b9r),e(lC,v9r),e(lC,KJ),e(KJ,F9r),e(lC,T9r),e(Ee,M9r),e(Ee,iC),e(iC,OTe),e(OTe,E9r),e(iC,C9r),e(iC,ZJ),e(ZJ,w9r),e(iC,A9r),e(Ee,y9r),e(Ee,dC),e(dC,VTe),e(VTe,L9r),e(dC,x9r),e(dC,eY),e(eY,$9r),e(dC,k9r),e(Ee,S9r),e(Ee,cC),e(cC,XTe),e(XTe,R9r),e(cC,P9r),e(cC,oY),e(oY,B9r),e(cC,I9r),e(Gr,q9r),M(fC,Gr,null),b(f,ANe,u),b(f,qc,u),e(qc,mC),e(mC,zTe),M(Cx,zTe,null),e(qc,N9r),e(qc,WTe),e(WTe,j9r),b(f,yNe,u),b(f,hr,u),M(wx,hr,null),e(hr,D9r),e(hr,Nc),e(Nc,G9r),e(Nc,rY),e(rY,O9r),e(Nc,V9r),e(Nc,tY),e(tY,X9r),e(Nc,z9r),e(hr,W9r),e(hr,Ax),e(Ax,Q9r),e(Ax,QTe),e(QTe,H9r),e(Ax,U9r),e(hr,J9r),e(hr,Xt),M(yx,Xt,null),e(Xt,Y9r),e(Xt,HTe),e(HTe,K9r),e(Xt,Z9r),e(Xt,jc),e(jc,e$r),e(jc,UTe),e(UTe,o$r),e(jc,r$r),e(jc,aY),e(aY,t$r),e(jc,a$r),e(Xt,n$r),M(gC,Xt,null),e(hr,s$r),e(hr,Or),M(Lx,Or,null),e(Or,l$r),e(Or,JTe),e(JTe,i$r),e(Or,d$r),e(Or,un),e(un,c$r),e(un,YTe),e(YTe,f$r),e(un,m$r),e(un,KTe),e(KTe,g$r),e(un,h$r),e(un,ZTe),e(ZTe,p$r),e(un,_$r),e(Or,u$r),e(Or,Le),e(Le,hC),e(hC,e7e),e(e7e,b$r),e(hC,v$r),e(hC,nY),e(nY,F$r),e(hC,T$r),e(Le,M$r),e(Le,pC),e(pC,o7e),e(o7e,E$r),e(pC,C$r),e(pC,sY),e(sY,w$r),e(pC,A$r),e(Le,y$r),e(Le,_C),e(_C,r7e),e(r7e,L$r),e(_C,x$r),e(_C,lY),e(lY,$$r),e(_C,k$r),e(Le,S$r),e(Le,uC),e(uC,t7e),e(t7e,R$r),e(uC,P$r),e(uC,iY),e(iY,B$r),e(uC,I$r),e(Le,q$r),e(Le,bC),e(bC,a7e),e(a7e,N$r),e(bC,j$r),e(bC,dY),e(dY,D$r),e(bC,G$r),e(Le,O$r),e(Le,vC),e(vC,n7e),e(n7e,V$r),e(vC,X$r),e(vC,cY),e(cY,z$r),e(vC,W$r),e(Le,Q$r),e(Le,FC),e(FC,s7e),e(s7e,H$r),e(FC,U$r),e(FC,fY),e(fY,J$r),e(FC,Y$r),e(Le,K$r),e(Le,TC),e(TC,l7e),e(l7e,Z$r),e(TC,ekr),e(TC,mY),e(mY,okr),e(TC,rkr),e(Le,tkr),e(Le,MC),e(MC,i7e),e(i7e,akr),e(MC,nkr),e(MC,gY),e(gY,skr),e(MC,lkr),e(Le,ikr),e(Le,EC),e(EC,d7e),e(d7e,dkr),e(EC,ckr),e(EC,hY),e(hY,fkr),e(EC,mkr),e(Or,gkr),M(CC,Or,null),b(f,LNe,u),b(f,Dc,u),e(Dc,wC),e(wC,c7e),M(xx,c7e,null),e(Dc,hkr),e(Dc,f7e),e(f7e,pkr),b(f,xNe,u),b(f,pr,u),M($x,pr,null),e(pr,_kr),e(pr,Gc),e(Gc,ukr),e(Gc,pY),e(pY,bkr),e(Gc,vkr),e(Gc,_Y),e(_Y,Fkr),e(Gc,Tkr),e(pr,Mkr),e(pr,kx),e(kx,Ekr),e(kx,m7e),e(m7e,Ckr),e(kx,wkr),e(pr,Akr),e(pr,zt),M(Sx,zt,null),e(zt,ykr),e(zt,g7e),e(g7e,Lkr),e(zt,xkr),e(zt,Oc),e(Oc,$kr),e(Oc,h7e),e(h7e,kkr),e(Oc,Skr),e(Oc,uY),e(uY,Rkr),e(Oc,Pkr),e(zt,Bkr),M(AC,zt,null),e(pr,Ikr),e(pr,Vr),M(Rx,Vr,null),e(Vr,qkr),e(Vr,p7e),e(p7e,Nkr),e(Vr,jkr),e(Vr,bn),e(bn,Dkr),e(bn,_7e),e(_7e,Gkr),e(bn,Okr),e(bn,u7e),e(u7e,Vkr),e(bn,Xkr),e(bn,b7e),e(b7e,zkr),e(bn,Wkr),e(Vr,Qkr),e(Vr,Pe),e(Pe,yC),e(yC,v7e),e(v7e,Hkr),e(yC,Ukr),e(yC,bY),e(bY,Jkr),e(yC,Ykr),e(Pe,Kkr),e(Pe,LC),e(LC,F7e),e(F7e,Zkr),e(LC,eSr),e(LC,vY),e(vY,oSr),e(LC,rSr),e(Pe,tSr),e(Pe,xC),e(xC,T7e),e(T7e,aSr),e(xC,nSr),e(xC,FY),e(FY,sSr),e(xC,lSr),e(Pe,iSr),e(Pe,$C),e($C,M7e),e(M7e,dSr),e($C,cSr),e($C,TY),e(TY,fSr),e($C,mSr),e(Pe,gSr),e(Pe,kC),e(kC,E7e),e(E7e,hSr),e(kC,pSr),e(kC,MY),e(MY,_Sr),e(kC,uSr),e(Pe,bSr),e(Pe,SC),e(SC,C7e),e(C7e,vSr),e(SC,FSr),e(SC,EY),e(EY,TSr),e(SC,MSr),e(Pe,ESr),e(Pe,RC),e(RC,w7e),e(w7e,CSr),e(RC,wSr),e(RC,CY),e(CY,ASr),e(RC,ySr),e(Pe,LSr),e(Pe,PC),e(PC,A7e),e(A7e,xSr),e(PC,$Sr),e(PC,wY),e(wY,kSr),e(PC,SSr),e(Pe,RSr),e(Pe,BC),e(BC,y7e),e(y7e,PSr),e(BC,BSr),e(BC,AY),e(AY,ISr),e(BC,qSr),e(Vr,NSr),M(IC,Vr,null),b(f,$Ne,u),b(f,Vc,u),e(Vc,qC),e(qC,L7e),M(Px,L7e,null),e(Vc,jSr),e(Vc,x7e),e(x7e,DSr),b(f,kNe,u),b(f,_r,u),M(Bx,_r,null),e(_r,GSr),e(_r,Xc),e(Xc,OSr),e(Xc,yY),e(yY,VSr),e(Xc,XSr),e(Xc,LY),e(LY,zSr),e(Xc,WSr),e(_r,QSr),e(_r,Ix),e(Ix,HSr),e(Ix,$7e),e($7e,USr),e(Ix,JSr),e(_r,YSr),e(_r,Wt),M(qx,Wt,null),e(Wt,KSr),e(Wt,k7e),e(k7e,ZSr),e(Wt,eRr),e(Wt,zc),e(zc,oRr),e(zc,S7e),e(S7e,rRr),e(zc,tRr),e(zc,xY),e(xY,aRr),e(zc,nRr),e(Wt,sRr),M(NC,Wt,null),e(_r,lRr),e(_r,Xr),M(Nx,Xr,null),e(Xr,iRr),e(Xr,R7e),e(R7e,dRr),e(Xr,cRr),e(Xr,vn),e(vn,fRr),e(vn,P7e),e(P7e,mRr),e(vn,gRr),e(vn,B7e),e(B7e,hRr),e(vn,pRr),e(vn,I7e),e(I7e,_Rr),e(vn,uRr),e(Xr,bRr),e(Xr,xe),e(xe,jC),e(jC,q7e),e(q7e,vRr),e(jC,FRr),e(jC,$Y),e($Y,TRr),e(jC,MRr),e(xe,ERr),e(xe,DC),e(DC,N7e),e(N7e,CRr),e(DC,wRr),e(DC,kY),e(kY,ARr),e(DC,yRr),e(xe,LRr),e(xe,GC),e(GC,j7e),e(j7e,xRr),e(GC,$Rr),e(GC,SY),e(SY,kRr),e(GC,SRr),e(xe,RRr),e(xe,OC),e(OC,D7e),e(D7e,PRr),e(OC,BRr),e(OC,RY),e(RY,IRr),e(OC,qRr),e(xe,NRr),e(xe,VC),e(VC,G7e),e(G7e,jRr),e(VC,DRr),e(VC,PY),e(PY,GRr),e(VC,ORr),e(xe,VRr),e(xe,XC),e(XC,O7e),e(O7e,XRr),e(XC,zRr),e(XC,BY),e(BY,WRr),e(XC,QRr),e(xe,HRr),e(xe,zC),e(zC,V7e),e(V7e,URr),e(zC,JRr),e(zC,IY),e(IY,YRr),e(zC,KRr),e(xe,ZRr),e(xe,WC),e(WC,X7e),e(X7e,ePr),e(WC,oPr),e(WC,qY),e(qY,rPr),e(WC,tPr),e(xe,aPr),e(xe,QC),e(QC,z7e),e(z7e,nPr),e(QC,sPr),e(QC,NY),e(NY,lPr),e(QC,iPr),e(xe,dPr),e(xe,HC),e(HC,W7e),e(W7e,cPr),e(HC,fPr),e(HC,jY),e(jY,mPr),e(HC,gPr),e(Xr,hPr),M(UC,Xr,null),b(f,SNe,u),b(f,Wc,u),e(Wc,JC),e(JC,Q7e),M(jx,Q7e,null),e(Wc,pPr),e(Wc,H7e),e(H7e,_Pr),b(f,RNe,u),b(f,ur,u),M(Dx,ur,null),e(ur,uPr),e(ur,Qc),e(Qc,bPr),e(Qc,DY),e(DY,vPr),e(Qc,FPr),e(Qc,GY),e(GY,TPr),e(Qc,MPr),e(ur,EPr),e(ur,Gx),e(Gx,CPr),e(Gx,U7e),e(U7e,wPr),e(Gx,APr),e(ur,yPr),e(ur,Qt),M(Ox,Qt,null),e(Qt,LPr),e(Qt,J7e),e(J7e,xPr),e(Qt,$Pr),e(Qt,Hc),e(Hc,kPr),e(Hc,Y7e),e(Y7e,SPr),e(Hc,RPr),e(Hc,OY),e(OY,PPr),e(Hc,BPr),e(Qt,IPr),M(YC,Qt,null),e(ur,qPr),e(ur,zr),M(Vx,zr,null),e(zr,NPr),e(zr,K7e),e(K7e,jPr),e(zr,DPr),e(zr,Fn),e(Fn,GPr),e(Fn,Z7e),e(Z7e,OPr),e(Fn,VPr),e(Fn,eMe),e(eMe,XPr),e(Fn,zPr),e(Fn,oMe),e(oMe,WPr),e(Fn,QPr),e(zr,HPr),e(zr,$e),e($e,KC),e(KC,rMe),e(rMe,UPr),e(KC,JPr),e(KC,VY),e(VY,YPr),e(KC,KPr),e($e,ZPr),e($e,ZC),e(ZC,tMe),e(tMe,eBr),e(ZC,oBr),e(ZC,XY),e(XY,rBr),e(ZC,tBr),e($e,aBr),e($e,ew),e(ew,aMe),e(aMe,nBr),e(ew,sBr),e(ew,zY),e(zY,lBr),e(ew,iBr),e($e,dBr),e($e,ow),e(ow,nMe),e(nMe,cBr),e(ow,fBr),e(ow,WY),e(WY,mBr),e(ow,gBr),e($e,hBr),e($e,rw),e(rw,sMe),e(sMe,pBr),e(rw,_Br),e(rw,QY),e(QY,uBr),e(rw,bBr),e($e,vBr),e($e,tw),e(tw,lMe),e(lMe,FBr),e(tw,TBr),e(tw,HY),e(HY,MBr),e(tw,EBr),e($e,CBr),e($e,aw),e(aw,iMe),e(iMe,wBr),e(aw,ABr),e(aw,UY),e(UY,yBr),e(aw,LBr),e($e,xBr),e($e,nw),e(nw,dMe),e(dMe,$Br),e(nw,kBr),e(nw,JY),e(JY,SBr),e(nw,RBr),e($e,PBr),e($e,sw),e(sw,cMe),e(cMe,BBr),e(sw,IBr),e(sw,YY),e(YY,qBr),e(sw,NBr),e($e,jBr),e($e,lw),e(lw,fMe),e(fMe,DBr),e(lw,GBr),e(lw,KY),e(KY,OBr),e(lw,VBr),e(zr,XBr),M(iw,zr,null),b(f,PNe,u),b(f,Uc,u),e(Uc,dw),e(dw,mMe),M(Xx,mMe,null),e(Uc,zBr),e(Uc,gMe),e(gMe,WBr),b(f,BNe,u),b(f,br,u),M(zx,br,null),e(br,QBr),e(br,Jc),e(Jc,HBr),e(Jc,ZY),e(ZY,UBr),e(Jc,JBr),e(Jc,eK),e(eK,YBr),e(Jc,KBr),e(br,ZBr),e(br,Wx),e(Wx,eIr),e(Wx,hMe),e(hMe,oIr),e(Wx,rIr),e(br,tIr),e(br,Ht),M(Qx,Ht,null),e(Ht,aIr),e(Ht,pMe),e(pMe,nIr),e(Ht,sIr),e(Ht,Yc),e(Yc,lIr),e(Yc,_Me),e(_Me,iIr),e(Yc,dIr),e(Yc,oK),e(oK,cIr),e(Yc,fIr),e(Ht,mIr),M(cw,Ht,null),e(br,gIr),e(br,Wr),M(Hx,Wr,null),e(Wr,hIr),e(Wr,uMe),e(uMe,pIr),e(Wr,_Ir),e(Wr,Tn),e(Tn,uIr),e(Tn,bMe),e(bMe,bIr),e(Tn,vIr),e(Tn,vMe),e(vMe,FIr),e(Tn,TIr),e(Tn,FMe),e(FMe,MIr),e(Tn,EIr),e(Wr,CIr),e(Wr,De),e(De,fw),e(fw,TMe),e(TMe,wIr),e(fw,AIr),e(fw,rK),e(rK,yIr),e(fw,LIr),e(De,xIr),e(De,mw),e(mw,MMe),e(MMe,$Ir),e(mw,kIr),e(mw,tK),e(tK,SIr),e(mw,RIr),e(De,PIr),e(De,gw),e(gw,EMe),e(EMe,BIr),e(gw,IIr),e(gw,aK),e(aK,qIr),e(gw,NIr),e(De,jIr),e(De,hw),e(hw,CMe),e(CMe,DIr),e(hw,GIr),e(hw,nK),e(nK,OIr),e(hw,VIr),e(De,XIr),e(De,pw),e(pw,wMe),e(wMe,zIr),e(pw,WIr),e(pw,sK),e(sK,QIr),e(pw,HIr),e(De,UIr),e(De,_w),e(_w,AMe),e(AMe,JIr),e(_w,YIr),e(_w,lK),e(lK,KIr),e(_w,ZIr),e(De,eqr),e(De,uw),e(uw,yMe),e(yMe,oqr),e(uw,rqr),e(uw,iK),e(iK,tqr),e(uw,aqr),e(De,nqr),e(De,bw),e(bw,LMe),e(LMe,sqr),e(bw,lqr),e(bw,dK),e(dK,iqr),e(bw,dqr),e(Wr,cqr),M(vw,Wr,null),b(f,INe,u),b(f,Kc,u),e(Kc,Fw),e(Fw,xMe),M(Ux,xMe,null),e(Kc,fqr),e(Kc,$Me),e($Me,mqr),b(f,qNe,u),b(f,vr,u),M(Jx,vr,null),e(vr,gqr),e(vr,Zc),e(Zc,hqr),e(Zc,cK),e(cK,pqr),e(Zc,_qr),e(Zc,fK),e(fK,uqr),e(Zc,bqr),e(vr,vqr),e(vr,Yx),e(Yx,Fqr),e(Yx,kMe),e(kMe,Tqr),e(Yx,Mqr),e(vr,Eqr),e(vr,Ut),M(Kx,Ut,null),e(Ut,Cqr),e(Ut,SMe),e(SMe,wqr),e(Ut,Aqr),e(Ut,ef),e(ef,yqr),e(ef,RMe),e(RMe,Lqr),e(ef,xqr),e(ef,mK),e(mK,$qr),e(ef,kqr),e(Ut,Sqr),M(Tw,Ut,null),e(vr,Rqr),e(vr,Qr),M(Zx,Qr,null),e(Qr,Pqr),e(Qr,PMe),e(PMe,Bqr),e(Qr,Iqr),e(Qr,Mn),e(Mn,qqr),e(Mn,BMe),e(BMe,Nqr),e(Mn,jqr),e(Mn,IMe),e(IMe,Dqr),e(Mn,Gqr),e(Mn,qMe),e(qMe,Oqr),e(Mn,Vqr),e(Qr,Xqr),e(Qr,Ge),e(Ge,Mw),e(Mw,NMe),e(NMe,zqr),e(Mw,Wqr),e(Mw,gK),e(gK,Qqr),e(Mw,Hqr),e(Ge,Uqr),e(Ge,Ew),e(Ew,jMe),e(jMe,Jqr),e(Ew,Yqr),e(Ew,hK),e(hK,Kqr),e(Ew,Zqr),e(Ge,eNr),e(Ge,Cw),e(Cw,DMe),e(DMe,oNr),e(Cw,rNr),e(Cw,pK),e(pK,tNr),e(Cw,aNr),e(Ge,nNr),e(Ge,ww),e(ww,GMe),e(GMe,sNr),e(ww,lNr),e(ww,_K),e(_K,iNr),e(ww,dNr),e(Ge,cNr),e(Ge,Aw),e(Aw,OMe),e(OMe,fNr),e(Aw,mNr),e(Aw,uK),e(uK,gNr),e(Aw,hNr),e(Ge,pNr),e(Ge,yw),e(yw,VMe),e(VMe,_Nr),e(yw,uNr),e(yw,bK),e(bK,bNr),e(yw,vNr),e(Ge,FNr),e(Ge,Lw),e(Lw,XMe),e(XMe,TNr),e(Lw,MNr),e(Lw,vK),e(vK,ENr),e(Lw,CNr),e(Ge,wNr),e(Ge,xw),e(xw,zMe),e(zMe,ANr),e(xw,yNr),e(xw,FK),e(FK,LNr),e(xw,xNr),e(Qr,$Nr),M($w,Qr,null),b(f,NNe,u),b(f,of,u),e(of,kw),e(kw,WMe),M(e9,WMe,null),e(of,kNr),e(of,QMe),e(QMe,SNr),b(f,jNe,u),b(f,Fr,u),M(o9,Fr,null),e(Fr,RNr),e(Fr,rf),e(rf,PNr),e(rf,TK),e(TK,BNr),e(rf,INr),e(rf,MK),e(MK,qNr),e(rf,NNr),e(Fr,jNr),e(Fr,r9),e(r9,DNr),e(r9,HMe),e(HMe,GNr),e(r9,ONr),e(Fr,VNr),e(Fr,Jt),M(t9,Jt,null),e(Jt,XNr),e(Jt,UMe),e(UMe,zNr),e(Jt,WNr),e(Jt,tf),e(tf,QNr),e(tf,JMe),e(JMe,HNr),e(tf,UNr),e(tf,EK),e(EK,JNr),e(tf,YNr),e(Jt,KNr),M(Sw,Jt,null),e(Fr,ZNr),e(Fr,Hr),M(a9,Hr,null),e(Hr,ejr),e(Hr,YMe),e(YMe,ojr),e(Hr,rjr),e(Hr,En),e(En,tjr),e(En,KMe),e(KMe,ajr),e(En,njr),e(En,ZMe),e(ZMe,sjr),e(En,ljr),e(En,e4e),e(e4e,ijr),e(En,djr),e(Hr,cjr),e(Hr,o4e),e(o4e,Rw),e(Rw,r4e),e(r4e,fjr),e(Rw,mjr),e(Rw,CK),e(CK,gjr),e(Rw,hjr),e(Hr,pjr),M(Pw,Hr,null),b(f,DNe,u),b(f,af,u),e(af,Bw),e(Bw,t4e),M(n9,t4e,null),e(af,_jr),e(af,a4e),e(a4e,ujr),b(f,GNe,u),b(f,Tr,u),M(s9,Tr,null),e(Tr,bjr),e(Tr,nf),e(nf,vjr),e(nf,wK),e(wK,Fjr),e(nf,Tjr),e(nf,AK),e(AK,Mjr),e(nf,Ejr),e(Tr,Cjr),e(Tr,l9),e(l9,wjr),e(l9,n4e),e(n4e,Ajr),e(l9,yjr),e(Tr,Ljr),e(Tr,Yt),M(i9,Yt,null),e(Yt,xjr),e(Yt,s4e),e(s4e,$jr),e(Yt,kjr),e(Yt,sf),e(sf,Sjr),e(sf,l4e),e(l4e,Rjr),e(sf,Pjr),e(sf,yK),e(yK,Bjr),e(sf,Ijr),e(Yt,qjr),M(Iw,Yt,null),e(Tr,Njr),e(Tr,Ur),M(d9,Ur,null),e(Ur,jjr),e(Ur,i4e),e(i4e,Djr),e(Ur,Gjr),e(Ur,Cn),e(Cn,Ojr),e(Cn,d4e),e(d4e,Vjr),e(Cn,Xjr),e(Cn,c4e),e(c4e,zjr),e(Cn,Wjr),e(Cn,f4e),e(f4e,Qjr),e(Cn,Hjr),e(Ur,Ujr),e(Ur,c9),e(c9,qw),e(qw,m4e),e(m4e,Jjr),e(qw,Yjr),e(qw,LK),e(LK,Kjr),e(qw,Zjr),e(c9,eDr),e(c9,Nw),e(Nw,g4e),e(g4e,oDr),e(Nw,rDr),e(Nw,xK),e(xK,tDr),e(Nw,aDr),e(Ur,nDr),M(jw,Ur,null),b(f,ONe,u),b(f,lf,u),e(lf,Dw),e(Dw,h4e),M(f9,h4e,null),e(lf,sDr),e(lf,p4e),e(p4e,lDr),b(f,VNe,u),b(f,Mr,u),M(m9,Mr,null),e(Mr,iDr),e(Mr,df),e(df,dDr),e(df,$K),e($K,cDr),e(df,fDr),e(df,kK),e(kK,mDr),e(df,gDr),e(Mr,hDr),e(Mr,g9),e(g9,pDr),e(g9,_4e),e(_4e,_Dr),e(g9,uDr),e(Mr,bDr),e(Mr,Kt),M(h9,Kt,null),e(Kt,vDr),e(Kt,u4e),e(u4e,FDr),e(Kt,TDr),e(Kt,cf),e(cf,MDr),e(cf,b4e),e(b4e,EDr),e(cf,CDr),e(cf,SK),e(SK,wDr),e(cf,ADr),e(Kt,yDr),M(Gw,Kt,null),e(Mr,LDr),e(Mr,Jr),M(p9,Jr,null),e(Jr,xDr),e(Jr,v4e),e(v4e,$Dr),e(Jr,kDr),e(Jr,wn),e(wn,SDr),e(wn,F4e),e(F4e,RDr),e(wn,PDr),e(wn,T4e),e(T4e,BDr),e(wn,IDr),e(wn,M4e),e(M4e,qDr),e(wn,NDr),e(Jr,jDr),e(Jr,E4e),e(E4e,Ow),e(Ow,C4e),e(C4e,DDr),e(Ow,GDr),e(Ow,RK),e(RK,ODr),e(Ow,VDr),e(Jr,XDr),M(Vw,Jr,null),XNe=!0},p(f,[u]){const _9={};u&2&&(_9.$$scope={dirty:u,ctx:f}),vf.$set(_9);const w4e={};u&2&&(w4e.$$scope={dirty:u,ctx:f}),vg.$set(w4e);const A4e={};u&2&&(A4e.$$scope={dirty:u,ctx:f}),Zg.$set(A4e);const y4e={};u&2&&(y4e.$$scope={dirty:u,ctx:f}),xh.$set(y4e);const u9={};u&2&&(u9.$$scope={dirty:u,ctx:f}),$h.$set(u9);const L4e={};u&2&&(L4e.$$scope={dirty:u,ctx:f}),Uh.$set(L4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Jh.$set(An);const x4e={};u&2&&(x4e.$$scope={dirty:u,ctx:f}),Zh.$set(x4e);const $4e={};u&2&&($4e.$$scope={dirty:u,ctx:f}),z_.$set($4e);const k4e={};u&2&&(k4e.$$scope={dirty:u,ctx:f}),Q_.$set(k4e);const b9={};u&2&&(b9.$$scope={dirty:u,ctx:f}),Iu.$set(b9);const S4e={};u&2&&(S4e.$$scope={dirty:u,ctx:f}),Nu.$set(S4e);const v9={};u&2&&(v9.$$scope={dirty:u,ctx:f}),M2.$set(v9);const R4e={};u&2&&(R4e.$$scope={dirty:u,ctx:f}),C2.$set(R4e);const F9={};u&2&&(F9.$$scope={dirty:u,ctx:f}),l1.$set(F9);const P4e={};u&2&&(P4e.$$scope={dirty:u,ctx:f}),d1.$set(P4e);const B4e={};u&2&&(B4e.$$scope={dirty:u,ctx:f}),y1.$set(B4e);const I4e={};u&2&&(I4e.$$scope={dirty:u,ctx:f}),x1.$set(I4e);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),Eb.$set(ff);const q4e={};u&2&&(q4e.$$scope={dirty:u,ctx:f}),wb.$set(q4e);const N4e={};u&2&&(N4e.$$scope={dirty:u,ctx:f}),r5.$set(N4e);const j4e={};u&2&&(j4e.$$scope={dirty:u,ctx:f}),a5.$set(j4e);const T9={};u&2&&(T9.$$scope={dirty:u,ctx:f}),f5.$set(T9);const D4e={};u&2&&(D4e.$$scope={dirty:u,ctx:f}),g5.$set(D4e);const G4e={};u&2&&(G4e.$$scope={dirty:u,ctx:f}),H5.$set(G4e);const O4e={};u&2&&(O4e.$$scope={dirty:u,ctx:f}),J5.$set(O4e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),qv.$set(et);const M9={};u&2&&(M9.$$scope={dirty:u,ctx:f}),jv.$set(M9);const V4e={};u&2&&(V4e.$$scope={dirty:u,ctx:f}),Ov.$set(V4e);const E9={};u&2&&(E9.$$scope={dirty:u,ctx:f}),Xv.$set(E9);const X4e={};u&2&&(X4e.$$scope={dirty:u,ctx:f}),a3.$set(X4e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),s3.$set(ot);const z4e={};u&2&&(z4e.$$scope={dirty:u,ctx:f}),d3.$set(z4e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),f3.$set(mf);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),M3.$set(W4e);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),C3.$set(Q4e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),k3.$set(y);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),R3.$set(Xw);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),X3.$set(H4e);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),W3.$set(U4e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),J3.$set(zw);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),K3.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),nF.$set(Y4e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),lF.$set(Ww);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),mF.$set(K4e);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),hF.$set(Z4e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),bF.$set(Qw);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),FF.$set(eEe);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),EF.$set(oEe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),wF.$set(Hw);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),kF.$set(rEe);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),RF.$set(tEe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),IF.$set(Uw);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),NF.$set(aEe);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),$T.$set(nEe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),ST.$set(Jw);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),r7.$set(sEe);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),a7.$set(lEe);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),u7.$set(Yw);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),v7.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),C7.$set(dEe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),A7.$set(Kw);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),Q7.$set(cEe);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),U7.$set(fEe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),sM.$set(Zw);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),iM.$set(mEe);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),BM.$set(gEe);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),qM.$set(e0);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),o4.$set(hEe);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),t4.$set(pEe);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),s4.$set(o0);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),i4.$set(_Ee);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),c4.$set(uEe);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),m4.$set(r0);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),R4.$set(bEe);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),B4.$set(vEe);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),rE.$set(t0);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),aE.$set(FEe);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),sE.$set(TEe);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),iE.$set(a0);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),cE.$set(MEe);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),mE.$set(EEe);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),NE.$set(n0);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),DE.$set(CEe);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),JE.$set(wEe);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),KE.$set(s0);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),fC.$set(AEe);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),gC.$set(yEe);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),CC.$set(l0);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),AC.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),IC.$set(xEe);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),NC.$set(i0);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),UC.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),YC.$set(kEe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),iw.$set(d0);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),cw.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),vw.$set(REe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),Tw.$set(c0);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),$w.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),Sw.$set(BEe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),Pw.$set(f0);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),Iw.$set(IEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),jw.$set(qEe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),Gw.$set(m0);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),Vw.$set(NEe)},i(f){XNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(vf.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(u6.$$.fragment,f),E(vg.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(E6.$$.fragment,f),E(Zg.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(x6.$$.fragment,f),E(xh.$$.fragment,f),E($h.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(B6.$$.fragment,f),E(Uh.$$.fragment,f),E(Jh.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(Zh.$$.fragment,f),E(G6.$$.fragment,f),E(z_.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(Q_.$$.fragment,f),E(W6.$$.fragment,f),E(Iu.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(Nu.$$.fragment,f),E(Y6.$$.fragment,f),E(M2.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(C2.$$.fragment,f),E(ry.$$.fragment,f),E(l1.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(d1.$$.fragment,f),E(ly.$$.fragment,f),E(y1.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(x1.$$.fragment,f),E(my.$$.fragment,f),E(Eb.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(wb.$$.fragment,f),E(uy.$$.fragment,f),E(r5.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(a5.$$.fragment,f),E(My.$$.fragment,f),E(f5.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(g5.$$.fragment,f),E(yy.$$.fragment,f),E(H5.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(J5.$$.fragment,f),E(Sy.$$.fragment,f),E(qv.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(jv.$$.fragment,f),E(qy.$$.fragment,f),E(Ov.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(Xv.$$.fragment,f),E(Oy.$$.fragment,f),E(a3.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(s3.$$.fragment,f),E(Qy.$$.fragment,f),E(d3.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(f3.$$.fragment,f),E(Ky.$$.fragment,f),E(M3.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(C3.$$.fragment,f),E(tL.$$.fragment,f),E(k3.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(R3.$$.fragment,f),E(iL.$$.fragment,f),E(X3.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(W3.$$.fragment,f),E(gL.$$.fragment,f),E(J3.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(K3.$$.fragment,f),E(vL.$$.fragment,f),E(nF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(lF.$$.fragment,f),E(CL.$$.fragment,f),E(mF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(hF.$$.fragment,f),E(xL.$$.fragment,f),E(bF.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(FF.$$.fragment,f),E(BL.$$.fragment,f),E(EF.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(wF.$$.fragment,f),E(DL.$$.fragment,f),E(kF.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(RF.$$.fragment,f),E(zL.$$.fragment,f),E(IF.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(NF.$$.fragment,f),E(JL.$$.fragment,f),E($T.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(ST.$$.fragment,f),E(o8.$$.fragment,f),E(r7.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(a7.$$.fragment,f),E(s8.$$.fragment,f),E(u7.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(v7.$$.fragment,f),E(f8.$$.fragment,f),E(C7.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(A7.$$.fragment,f),E(_8.$$.fragment,f),E(Q7.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(U7.$$.fragment,f),E(T8.$$.fragment,f),E(sM.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(iM.$$.fragment,f),E(A8.$$.fragment,f),E(BM.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(qM.$$.fragment,f),E(k8.$$.fragment,f),E(o4.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(t4.$$.fragment,f),E(I8.$$.fragment,f),E(s4.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(i4.$$.fragment,f),E(O8.$$.fragment,f),E(c4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(m4.$$.fragment,f),E(Q8.$$.fragment,f),E(R4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(B4.$$.fragment,f),E(K8.$$.fragment,f),E(rE.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(aE.$$.fragment,f),E(tx.$$.fragment,f),E(sE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(iE.$$.fragment,f),E(ix.$$.fragment,f),E(cE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(mE.$$.fragment,f),E(gx.$$.fragment,f),E(NE.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(DE.$$.fragment,f),E(bx.$$.fragment,f),E(JE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(KE.$$.fragment,f),E(Ex.$$.fragment,f),E(fC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(gC.$$.fragment,f),E(Lx.$$.fragment,f),E(CC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(AC.$$.fragment,f),E(Rx.$$.fragment,f),E(IC.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(qx.$$.fragment,f),E(NC.$$.fragment,f),E(Nx.$$.fragment,f),E(UC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(YC.$$.fragment,f),E(Vx.$$.fragment,f),E(iw.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(cw.$$.fragment,f),E(Hx.$$.fragment,f),E(vw.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(Tw.$$.fragment,f),E(Zx.$$.fragment,f),E($w.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(Sw.$$.fragment,f),E(a9.$$.fragment,f),E(Pw.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(Iw.$$.fragment,f),E(d9.$$.fragment,f),E(jw.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(Gw.$$.fragment,f),E(p9.$$.fragment,f),E(Vw.$$.fragment,f),XNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(vf.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(u6.$$.fragment,f),C(vg.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(E6.$$.fragment,f),C(Zg.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(x6.$$.fragment,f),C(xh.$$.fragment,f),C($h.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(B6.$$.fragment,f),C(Uh.$$.fragment,f),C(Jh.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(Zh.$$.fragment,f),C(G6.$$.fragment,f),C(z_.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(Q_.$$.fragment,f),C(W6.$$.fragment,f),C(Iu.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(Nu.$$.fragment,f),C(Y6.$$.fragment,f),C(M2.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(C2.$$.fragment,f),C(ry.$$.fragment,f),C(l1.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(d1.$$.fragment,f),C(ly.$$.fragment,f),C(y1.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(x1.$$.fragment,f),C(my.$$.fragment,f),C(Eb.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(wb.$$.fragment,f),C(uy.$$.fragment,f),C(r5.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(a5.$$.fragment,f),C(My.$$.fragment,f),C(f5.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(g5.$$.fragment,f),C(yy.$$.fragment,f),C(H5.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(J5.$$.fragment,f),C(Sy.$$.fragment,f),C(qv.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(jv.$$.fragment,f),C(qy.$$.fragment,f),C(Ov.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(Xv.$$.fragment,f),C(Oy.$$.fragment,f),C(a3.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(s3.$$.fragment,f),C(Qy.$$.fragment,f),C(d3.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(f3.$$.fragment,f),C(Ky.$$.fragment,f),C(M3.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(C3.$$.fragment,f),C(tL.$$.fragment,f),C(k3.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(R3.$$.fragment,f),C(iL.$$.fragment,f),C(X3.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(W3.$$.fragment,f),C(gL.$$.fragment,f),C(J3.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(K3.$$.fragment,f),C(vL.$$.fragment,f),C(nF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(lF.$$.fragment,f),C(CL.$$.fragment,f),C(mF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(hF.$$.fragment,f),C(xL.$$.fragment,f),C(bF.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(FF.$$.fragment,f),C(BL.$$.fragment,f),C(EF.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(wF.$$.fragment,f),C(DL.$$.fragment,f),C(kF.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(RF.$$.fragment,f),C(zL.$$.fragment,f),C(IF.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(NF.$$.fragment,f),C(JL.$$.fragment,f),C($T.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(ST.$$.fragment,f),C(o8.$$.fragment,f),C(r7.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(a7.$$.fragment,f),C(s8.$$.fragment,f),C(u7.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(v7.$$.fragment,f),C(f8.$$.fragment,f),C(C7.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(A7.$$.fragment,f),C(_8.$$.fragment,f),C(Q7.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(U7.$$.fragment,f),C(T8.$$.fragment,f),C(sM.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(iM.$$.fragment,f),C(A8.$$.fragment,f),C(BM.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(qM.$$.fragment,f),C(k8.$$.fragment,f),C(o4.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(t4.$$.fragment,f),C(I8.$$.fragment,f),C(s4.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(i4.$$.fragment,f),C(O8.$$.fragment,f),C(c4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(m4.$$.fragment,f),C(Q8.$$.fragment,f),C(R4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(B4.$$.fragment,f),C(K8.$$.fragment,f),C(rE.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(aE.$$.fragment,f),C(tx.$$.fragment,f),C(sE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(iE.$$.fragment,f),C(ix.$$.fragment,f),C(cE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(mE.$$.fragment,f),C(gx.$$.fragment,f),C(NE.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(DE.$$.fragment,f),C(bx.$$.fragment,f),C(JE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(KE.$$.fragment,f),C(Ex.$$.fragment,f),C(fC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(gC.$$.fragment,f),C(Lx.$$.fragment,f),C(CC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(AC.$$.fragment,f),C(Rx.$$.fragment,f),C(IC.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(qx.$$.fragment,f),C(NC.$$.fragment,f),C(Nx.$$.fragment,f),C(UC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(YC.$$.fragment,f),C(Vx.$$.fragment,f),C(iw.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(cw.$$.fragment,f),C(Hx.$$.fragment,f),C(vw.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(Tw.$$.fragment,f),C(Zx.$$.fragment,f),C($w.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(Sw.$$.fragment,f),C(a9.$$.fragment,f),C(Pw.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(Iw.$$.fragment,f),C(d9.$$.fragment,f),C(jw.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(Gw.$$.fragment,f),C(p9.$$.fragment,f),C(Vw.$$.fragment,f),XNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(GIe),f&&t(ui),w(f6),f&&t(OIe),f&&t(kn),f&&t(VIe),w(m6,f),f&&t(XIe),f&&t(R$),f&&t(zIe),w(vf,f),f&&t(WIe),f&&t(bi),w(g6),f&&t(QIe),f&&t(Co),w(h6),w(u6),w(vg),w(b6),f&&t(HIe),f&&t(Fi),w(v6),f&&t(UIe),f&&t(wo),w(F6),w(E6),w(Zg),w(C6),f&&t(JIe),f&&t(Ti),w(w6),f&&t(YIe),f&&t(Ao),w(A6),w(x6),w(xh),w($h),w($6),f&&t(KIe),f&&t(Mi),w(k6),f&&t(ZIe),f&&t(yo),w(S6),w(B6),w(Uh),w(Jh),w(I6),f&&t(eqe),f&&t(Ci),w(q6),f&&t(oqe),f&&t(Lo),w(N6),w(D6),w(Zh),w(G6),w(z_),f&&t(rqe),f&&t(yi),w(O6),f&&t(tqe),f&&t(xo),w(V6),w(z6),w(Q_),w(W6),w(Iu),f&&t(aqe),f&&t($i),w(Q6),f&&t(nqe),f&&t($o),w(H6),w(J6),w(Nu),w(Y6),w(M2),f&&t(sqe),f&&t(Ri),w(K6),f&&t(lqe),f&&t(ko),w(Z6),w(oy),w(C2),w(ry),w(l1),f&&t(iqe),f&&t(Ii),w(ty),f&&t(dqe),f&&t(So),w(ay),w(sy),w(d1),w(ly),w(y1),f&&t(cqe),f&&t(ji),w(iy),f&&t(fqe),f&&t(Ro),w(dy),w(fy),w(x1),w(my),w(Eb),f&&t(mqe),f&&t(Oi),w(gy),f&&t(gqe),f&&t(Po),w(hy),w(_y),w(wb),w(uy),w(r5),f&&t(hqe),f&&t(zi),w(by),f&&t(pqe),f&&t(Bo),w(vy),w(Ty),w(a5),w(My),w(f5),f&&t(_qe),f&&t(Hi),w(Ey),f&&t(uqe),f&&t(Io),w(Cy),w(Ay),w(g5),w(yy),w(H5),f&&t(bqe),f&&t(Yi),w(Ly),f&&t(vqe),f&&t(qo),w(xy),w(ky),w(J5),w(Sy),w(qv),f&&t(Fqe),f&&t(ed),w(Ry),f&&t(Tqe),f&&t(No),w(Py),w(Iy),w(jv),w(qy),w(Ov),f&&t(Mqe),f&&t(td),w(Ny),f&&t(Eqe),f&&t(jo),w(jy),w(Gy),w(Xv),w(Oy),w(a3),f&&t(Cqe),f&&t(sd),w(Vy),f&&t(wqe),f&&t(Do),w(Xy),w(Wy),w(s3),w(Qy),w(d3),f&&t(Aqe),f&&t(dd),w(Hy),f&&t(yqe),f&&t(Go),w(Uy),w(Yy),w(f3),w(Ky),w(M3),f&&t(Lqe),f&&t(md),w(Zy),f&&t(xqe),f&&t(Oo),w(eL),w(rL),w(C3),w(tL),w(k3),f&&t($qe),f&&t(pd),w(aL),f&&t(kqe),f&&t(Vo),w(nL),w(lL),w(R3),w(iL),w(X3),f&&t(Sqe),f&&t(bd),w(dL),f&&t(Rqe),f&&t(Xo),w(cL),w(mL),w(W3),w(gL),w(J3),f&&t(Pqe),f&&t(Td),w(pL),f&&t(Bqe),f&&t(zo),w(_L),w(bL),w(K3),w(vL),w(nF),f&&t(Iqe),f&&t(Cd),w(FL),f&&t(qqe),f&&t(Wo),w(TL),w(EL),w(lF),w(CL),w(mF),f&&t(Nqe),f&&t(Ld),w(wL),f&&t(jqe),f&&t(Qo),w(AL),w(LL),w(hF),w(xL),w(bF),f&&t(Dqe),f&&t(kd),w(kL),f&&t(Gqe),f&&t(Ho),w(SL),w(PL),w(FF),w(BL),w(EF),f&&t(Oqe),f&&t(Pd),w(IL),f&&t(Vqe),f&&t(Uo),w(qL),w(jL),w(wF),w(DL),w(kF),f&&t(Xqe),f&&t(qd),w(GL),f&&t(zqe),f&&t(Jo),w(OL),w(XL),w(RF),w(zL),w(IF),f&&t(Wqe),f&&t(Dd),w(WL),f&&t(Qqe),f&&t(Yo),w(QL),w(UL),w(NF),w(JL),w($T),f&&t(Hqe),f&&t(Vd),w(YL),f&&t(Uqe),f&&t(Ko),w(KL),w(e8),w(ST),w(o8),w(r7),f&&t(Jqe),f&&t(Wd),w(r8),f&&t(Yqe),f&&t(Zo),w(t8),w(n8),w(a7),w(s8),w(u7),f&&t(Kqe),f&&t(Ud),w(l8),f&&t(Zqe),f&&t(er),w(i8),w(c8),w(v7),w(f8),w(C7),f&&t(eNe),f&&t(Kd),w(m8),f&&t(oNe),f&&t(or),w(g8),w(p8),w(A7),w(_8),w(Q7),f&&t(rNe),f&&t(oc),w(u8),f&&t(tNe),f&&t(rr),w(b8),w(F8),w(U7),w(T8),w(sM),f&&t(aNe),f&&t(ac),w(M8),f&&t(nNe),f&&t(tr),w(E8),w(w8),w(iM),w(A8),w(BM),f&&t(sNe),f&&t(lc),w(y8),f&&t(lNe),f&&t(ar),w(L8),w($8),w(qM),w(k8),w(o4),f&&t(iNe),f&&t(cc),w(S8),f&&t(dNe),f&&t(nr),w(R8),w(B8),w(t4),w(I8),w(s4),f&&t(cNe),f&&t(gc),w(N8),f&&t(fNe),f&&t(sr),w(j8),w(G8),w(i4),w(O8),w(c4),f&&t(mNe),f&&t(_c),w(V8),f&&t(gNe),f&&t(lr),w(X8),w(W8),w(m4),w(Q8),w(R4),f&&t(hNe),f&&t(vc),w(H8),f&&t(pNe),f&&t(ir),w(U8),w(Y8),w(B4),w(K8),w(rE),f&&t(_Ne),f&&t(Mc),w(Z8),f&&t(uNe),f&&t(dr),w(ex),w(rx),w(aE),w(tx),w(sE),f&&t(bNe),f&&t(wc),w(ax),f&&t(vNe),f&&t(cr),w(nx),w(lx),w(iE),w(ix),w(cE),f&&t(FNe),f&&t(Lc),w(dx),f&&t(TNe),f&&t(fr),w(cx),w(mx),w(mE),w(gx),w(NE),f&&t(MNe),f&&t(kc),w(hx),f&&t(ENe),f&&t(mr),w(px),w(ux),w(DE),w(bx),w(JE),f&&t(CNe),f&&t(Pc),w(vx),f&&t(wNe),f&&t(gr),w(Fx),w(Mx),w(KE),w(Ex),w(fC),f&&t(ANe),f&&t(qc),w(Cx),f&&t(yNe),f&&t(hr),w(wx),w(yx),w(gC),w(Lx),w(CC),f&&t(LNe),f&&t(Dc),w(xx),f&&t(xNe),f&&t(pr),w($x),w(Sx),w(AC),w(Rx),w(IC),f&&t($Ne),f&&t(Vc),w(Px),f&&t(kNe),f&&t(_r),w(Bx),w(qx),w(NC),w(Nx),w(UC),f&&t(SNe),f&&t(Wc),w(jx),f&&t(RNe),f&&t(ur),w(Dx),w(Ox),w(YC),w(Vx),w(iw),f&&t(PNe),f&&t(Uc),w(Xx),f&&t(BNe),f&&t(br),w(zx),w(Qx),w(cw),w(Hx),w(vw),f&&t(INe),f&&t(Kc),w(Ux),f&&t(qNe),f&&t(vr),w(Jx),w(Kx),w(Tw),w(Zx),w($w),f&&t(NNe),f&&t(of),w(e9),f&&t(jNe),f&&t(Fr),w(o9),w(t9),w(Sw),w(a9),w(Pw),f&&t(DNe),f&&t(af),w(n9),f&&t(GNe),f&&t(Tr),w(s9),w(i9),w(Iw),w(d9),w(jw),f&&t(ONe),f&&t(lf),w(f9),f&&t(VNe),f&&t(Mr),w(m9),w(h9),w(Gw),w(p9),w(Vw)}}}const zxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Wxt(L){return WLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zxt extends OLt{constructor(g){super();VLt(this,g,Wxt,Xxt,XLt,{})}}export{Zxt as default,zxt as metadata};
